ClassName,Method,Return Type,Description,Full Description
Certificate,equals(Object other),boolean,Compares this certificate for equality with the specified object.,"

equals
public boolean equals(Object other)
Compares this certificate for equality with the specified
 object. If the other object is an
 instanceof Certificate, then
 its encoded form is retrieved and compared with the
 encoded form of this certificate.

Overrides:
equals in class Object
Parameters:
other - the object to test for equality with this certificate.
Returns:
true iff the encoded forms of the two certificates
 match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Certificate,getEncoded(),abstract byte[],Returns the encoded form of this certificate.,"

getEncoded
public abstract byte[] getEncoded()
                           throws CertificateEncodingException
Returns the encoded form of this certificate. It is
 assumed that each certificate type would have only a single
 form of encoding; for example, X.509 certificates would
 be encoded as ASN.1 DER.

Returns:
the encoded form of this certificate
Throws:
CertificateEncodingException - if an encoding error occurs.


"
Certificate,getPublicKey(),abstract PublicKey,Gets the public key from this certificate.,"

getPublicKey
public abstract PublicKey getPublicKey()
Gets the public key from this certificate.

Returns:
the public key.


"
Certificate,getType(),String,Returns the type of this certificate.,"

getType
public final String getType()
Returns the type of this certificate.

Returns:
the type of this certificate.


"
Certificate,hashCode(),int,Returns a hashcode value for this certificate from its encoded form.,"

hashCode
public int hashCode()
Returns a hashcode value for this certificate from its
 encoded form.

Overrides:
hashCode in class Object
Returns:
the hashcode value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Certificate,toString(),abstract String,Returns a string representation of this certificate.,"

toString
public abstract String toString()
Returns a string representation of this certificate.

Overrides:
toString in class Object
Returns:
a string representation of this certificate.


"
Certificate,verify(PublicKey key),abstract void,Verifies that this certificate was signed using the private key that corresponds to the specified public key.,"

verify
public abstract void verify(PublicKey key)
                     throws CertificateException,
                            NoSuchAlgorithmException,
                            InvalidKeyException,
                            NoSuchProviderException,
                            SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.

Parameters:
key - the PublicKey used to carry out the verification.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
NoSuchProviderException - if there's no default provider.
SignatureException - on signature errors.
CertificateException - on encoding errors.


"
Certificate,"verify(PublicKey key, Provider sigProvider)",void,Verifies that this certificate was signed using the private key that corresponds to the specified public key.,"

verify
public void verify(PublicKey key,
                   Provider sigProvider)
            throws CertificateException,
                   NoSuchAlgorithmException,
                   InvalidKeyException,
                   SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the provider list.

  This method was added to version 1.8 of the Java Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be abstract
 and by default throws an UnsupportedOperationException.

Parameters:
key - the PublicKey used to carry out the verification.
sigProvider - the signature provider.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
SignatureException - on signature errors.
CertificateException - on encoding errors.
UnsupportedOperationException - if the method is not supported
Since:
1.8


"
Certificate,"verify(PublicKey key, String sigProvider)",abstract void,Verifies that this certificate was signed using the private key that corresponds to the specified public key.,"

verify
public abstract void verify(PublicKey key,
                            String sigProvider)
                     throws CertificateException,
                            NoSuchAlgorithmException,
                            InvalidKeyException,
                            NoSuchProviderException,
                            SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider.

Parameters:
key - the PublicKey used to carry out the verification.
sigProvider - the name of the signature provider.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
NoSuchProviderException - on incorrect provider.
SignatureException - on signature errors.
CertificateException - on encoding errors.


"
Certificate,writeReplace(),protected Object,Replace the Certificate to be serialized.,"

writeReplace
protected Object writeReplace()
                       throws ObjectStreamException
Replace the Certificate to be serialized.

Returns:
the alternate Certificate object to be serialized
Throws:
ObjectStreamException - if a new object representing
 this Certificate could not be created
Since:
1.3


"
Certificate.CertificateRep,readResolve(),protected Object,Resolve the Certificate Object.,"

readResolve
protected Object readResolve()
                      throws ObjectStreamException
Resolve the Certificate Object.

 

Returns:
the resolved Certificate Object
Throws:
ObjectStreamException - if the Certificate
      could not be resolved


"
CertificateFactory,generateCertificate(InputStream inStream),Certificate,Generates a certificate object and initializes it with the data read from the input stream inStream.,"

generateCertificate
public final Certificate generateCertificate(InputStream inStream)
                                      throws CertificateException
Generates a certificate object and initializes it with
 the data read from the input stream inStream.

 In order to take advantage of the specialized certificate format
 supported by this certificate factory,
 the returned certificate object can be typecast to the corresponding
 certificate class. For example, if this certificate
 factory implements X.509 certificates, the returned certificate object
 can be typecast to the X509Certificate class.

 In the case of a certificate factory for X.509 certificates, the
 certificate provided in inStream must be DER-encoded and
 may be supplied in binary or printable (Base64) encoding. If the
 certificate is provided in Base64 encoding, it must be bounded at
 the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
 the end by -----END CERTIFICATE-----.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream. Otherwise, each call to this
 method consumes one certificate and the read position of the
 input stream is positioned to the next available byte after
 the inherent end-of-certificate marker. If the data in the input stream
 does not contain an inherent end-of-certificate marker (other
 than EOF) and there is trailing data after the certificate is parsed, a
 CertificateException is thrown.

Parameters:
inStream - an input stream with the certificate data.
Returns:
a certificate object initialized with the data
 from the input stream.
Throws:
CertificateException - on parsing errors.


"
CertificateFactory,generateCertificates(InputStream inStream),Collection<? extends Certificate>,Returns a (possibly empty) collection view of the certificates read from the given input stream inStream.,"

generateCertificates
public final Collection<? extends Certificate> generateCertificates(InputStream inStream)
                                                             throws CertificateException
Returns a (possibly empty) collection view of the certificates read
 from the given input stream inStream.

 In order to take advantage of the specialized certificate format
 supported by this certificate factory, each element in
 the returned collection view can be typecast to the corresponding
 certificate class. For example, if this certificate
 factory implements X.509 certificates, the elements in the returned
 collection can be typecast to the X509Certificate class.

 In the case of a certificate factory for X.509 certificates,
 inStream may contain a sequence of DER-encoded certificates
 in the formats described for
 generateCertificate.
 In addition, inStream may contain a PKCS#7 certificate
 chain. This is a PKCS#7 SignedData object, with the only
 significant field being certificates. In particular, the
 signature and the contents are ignored. This format allows multiple
 certificates to be downloaded at once. If no certificates are present,
 an empty collection is returned.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream.

Parameters:
inStream - the input stream with the certificates.
Returns:
a (possibly empty) collection view of
 java.security.cert.Certificate objects
 initialized with the data from the input stream.
Throws:
CertificateException - on parsing errors.


"
CertificateFactory,generateCertPath(InputStream inStream),CertPath,Generates a CertPath object and initializes it with the data read from the InputStream inStream.,"

generateCertPath
public final CertPath generateCertPath(InputStream inStream)
                                throws CertificateException
Generates a CertPath object and initializes it with
 the data read from the InputStream inStream. The data
 is assumed to be in the default encoding. The name of the default
 encoding is the first element of the Iterator returned by
 the getCertPathEncodings method.

Parameters:
inStream - an InputStream containing the data
Returns:
a CertPath initialized with the data from the
   InputStream
Throws:
CertificateException - if an exception occurs while decoding
Since:
1.4


"
CertificateFactory,"generateCertPath(InputStream inStream, String encoding)",CertPath,Generates a CertPath object and initializes it with the data read from the InputStream inStream.,"

generateCertPath
public final CertPath generateCertPath(InputStream inStream,
                                       String encoding)
                                throws CertificateException
Generates a CertPath object and initializes it with
 the data read from the InputStream inStream. The data
 is assumed to be in the specified encoding. See
 the CertPath Encodings section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard encoding names and their formats.

Parameters:
inStream - an InputStream containing the data
encoding - the encoding used for the data
Returns:
a CertPath initialized with the data from the
   InputStream
Throws:
CertificateException - if an exception occurs while decoding or
   the encoding requested is not supported
Since:
1.4


"
CertificateFactory,generateCertPath(List<? extends Certificate> certificates),CertPath,Generates a CertPath object and initializes it with a List of Certificates.,"

generateCertPath
public final CertPath generateCertPath(List<? extends Certificate> certificates)
                                throws CertificateException
Generates a CertPath object and initializes it with
 a List of Certificates.
 
 The certificates supplied must be of a type supported by the
 CertificateFactory. They will be copied out of the supplied
 List object.

Parameters:
certificates - a List of Certificates
Returns:
a CertPath initialized with the supplied list of
   certificates
Throws:
CertificateException - if an exception occurs
Since:
1.4


"
CertificateFactory,generateCRL(InputStream inStream),CRL,Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream.,"

generateCRL
public final CRL generateCRL(InputStream inStream)
                      throws CRLException
Generates a certificate revocation list (CRL) object and initializes it
 with the data read from the input stream inStream.

 In order to take advantage of the specialized CRL format
 supported by this certificate factory,
 the returned CRL object can be typecast to the corresponding
 CRL class. For example, if this certificate
 factory implements X.509 CRLs, the returned CRL object
 can be typecast to the X509CRL class.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream. Otherwise, each call to this
 method consumes one CRL and the read position of the input stream
 is positioned to the next available byte after the inherent
 end-of-CRL marker. If the data in the
 input stream does not contain an inherent end-of-CRL marker (other
 than EOF) and there is trailing data after the CRL is parsed, a
 CRLException is thrown.

Parameters:
inStream - an input stream with the CRL data.
Returns:
a CRL object initialized with the data
 from the input stream.
Throws:
CRLException - on parsing errors.


"
CertificateFactory,generateCRLs(InputStream inStream),Collection<? extends CRL>,Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream.,"

generateCRLs
public final Collection<? extends CRL> generateCRLs(InputStream inStream)
                                             throws CRLException
Returns a (possibly empty) collection view of the CRLs read
 from the given input stream inStream.

 In order to take advantage of the specialized CRL format
 supported by this certificate factory, each element in
 the returned collection view can be typecast to the corresponding
 CRL class. For example, if this certificate
 factory implements X.509 CRLs, the elements in the returned
 collection can be typecast to the X509CRL class.

 In the case of a certificate factory for X.509 CRLs,
 inStream may contain a sequence of DER-encoded CRLs.
 In addition, inStream may contain a PKCS#7 CRL
 set. This is a PKCS#7 SignedData object, with the only
 significant field being crls. In particular, the
 signature and the contents are ignored. This format allows multiple
 CRLs to be downloaded at once. If no CRLs are present,
 an empty collection is returned.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream.

Parameters:
inStream - the input stream with the CRLs.
Returns:
a (possibly empty) collection view of
 java.security.cert.CRL objects initialized with the data from the input
 stream.
Throws:
CRLException - on parsing errors.


"
CertificateFactory,getCertPathEncodings(),Iterator<String>,"Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first.","

getCertPathEncodings
public final Iterator<String> getCertPathEncodings()
Returns an iteration of the CertPath encodings supported
 by this certificate factory, with the default encoding first. See
 the CertPath Encodings section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard encoding names and their formats.
 
 Attempts to modify the returned Iterator via its
 remove method result in an
 UnsupportedOperationException.

Returns:
an Iterator over the names of the supported
         CertPath encodings (as Strings)
Since:
1.4


"
CertificateFactory,getInstance(String type),static CertificateFactory,Returns a certificate factory object that implements the specified certificate type.,"

getInstance
public static final CertificateFactory getInstance(String type)
                                            throws CertificateException
Returns a certificate factory object that implements the
 specified certificate type.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new CertificateFactory object encapsulating the
 CertificateFactorySpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the name of the requested certificate type.
 See the CertificateFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard certificate types.
Returns:
a certificate factory object for the specified type.
Throws:
CertificateException - if no Provider supports a
          CertificateFactorySpi implementation for the
          specified type.
See Also:
Provider


"
CertificateFactory,"getInstance(String type, Provider provider)",static CertificateFactory,Returns a certificate factory object for the specified certificate type.,"

getInstance
public static final CertificateFactory getInstance(String type,
                                                   Provider provider)
                                            throws CertificateException
Returns a certificate factory object for the specified
 certificate type.

  A new CertificateFactory object encapsulating the
 CertificateFactorySpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
type - the certificate type.
 See the CertificateFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard certificate types.
provider - the provider.
Returns:
a certificate factory object for the specified type.
Throws:
CertificateException - if a CertificateFactorySpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is
          null.
Since:
1.4
See Also:
Provider


"
CertificateFactory,"getInstance(String type, String provider)",static CertificateFactory,Returns a certificate factory object for the specified certificate type.,"

getInstance
public static final CertificateFactory getInstance(String type,
                                                   String provider)
                                            throws CertificateException,
                                                   NoSuchProviderException
Returns a certificate factory object for the specified
 certificate type.

  A new CertificateFactory object encapsulating the
 CertificateFactorySpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the certificate type.
 See the CertificateFactory section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard certificate types.
provider - the name of the provider.
Returns:
a certificate factory object for the specified type.
Throws:
CertificateException - if a CertificateFactorySpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider name is null
          or empty.
See Also:
Provider


"
CertificateFactory,getProvider(),Provider,Returns the provider of this certificate factory.,"

getProvider
public final Provider getProvider()
Returns the provider of this certificate factory.

Returns:
the provider of this certificate factory.


"
CertificateFactory,getType(),String,Returns the name of the certificate type associated with this certificate factory.,"

getType
public final String getType()
Returns the name of the certificate type associated with this
 certificate factory.

Returns:
the name of the certificate type associated with this
 certificate factory.


"
CertificateFactorySpi,engineGenerateCertificate(InputStream inStream),abstract Certificate,Generates a certificate object and initializes it with the data read from the input stream inStream.,"

engineGenerateCertificate
public abstract Certificate engineGenerateCertificate(InputStream inStream)
                                               throws CertificateException
Generates a certificate object and initializes it with
 the data read from the input stream inStream.

 In order to take advantage of the specialized certificate format
 supported by this certificate factory,
 the returned certificate object can be typecast to the corresponding
 certificate class. For example, if this certificate
 factory implements X.509 certificates, the returned certificate object
 can be typecast to the X509Certificate class.

 In the case of a certificate factory for X.509 certificates, the
 certificate provided in inStream must be DER-encoded and
 may be supplied in binary or printable (Base64) encoding. If the
 certificate is provided in Base64 encoding, it must be bounded at
 the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
 the end by -----END CERTIFICATE-----.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream. Otherwise, each call to this
 method consumes one certificate and the read position of the input stream
 is positioned to the next available byte after the inherent
 end-of-certificate marker. If the data in the
 input stream does not contain an inherent end-of-certificate marker (other
 than EOF) and there is trailing data after the certificate is parsed, a
 CertificateException is thrown.

Parameters:
inStream - an input stream with the certificate data.
Returns:
a certificate object initialized with the data
 from the input stream.
Throws:
CertificateException - on parsing errors.


"
CertificateFactorySpi,engineGenerateCertificates(InputStream inStream),abstract Collection<? extends Certificate>,Returns a (possibly empty) collection view of the certificates read from the given input stream inStream.,"

engineGenerateCertificates
public abstract Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream)
                                                                      throws CertificateException
Returns a (possibly empty) collection view of the certificates read
 from the given input stream inStream.

 In order to take advantage of the specialized certificate format
 supported by this certificate factory, each element in
 the returned collection view can be typecast to the corresponding
 certificate class. For example, if this certificate
 factory implements X.509 certificates, the elements in the returned
 collection can be typecast to the X509Certificate class.

 In the case of a certificate factory for X.509 certificates,
 inStream may contain a single DER-encoded certificate
 in the formats described for
 generateCertificate.
 In addition, inStream may contain a PKCS#7 certificate
 chain. This is a PKCS#7 SignedData object, with the only
 significant field being certificates. In particular, the
 signature and the contents are ignored. This format allows multiple
 certificates to be downloaded at once. If no certificates are present,
 an empty collection is returned.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream.

Parameters:
inStream - the input stream with the certificates.
Returns:
a (possibly empty) collection view of
 java.security.cert.Certificate objects
 initialized with the data from the input stream.
Throws:
CertificateException - on parsing errors.


"
CertificateFactorySpi,engineGenerateCertPath(InputStream inStream),CertPath,Generates a CertPath object and initializes it with the data read from the InputStream inStream.,"

engineGenerateCertPath
public CertPath engineGenerateCertPath(InputStream inStream)
                                throws CertificateException
Generates a CertPath object and initializes it with
 the data read from the InputStream inStream. The data
 is assumed to be in the default encoding.

  This method was added to version 1.4 of the Java 2 Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be abstract
 and by default throws an UnsupportedOperationException.

Parameters:
inStream - an InputStream containing the data
Returns:
a CertPath initialized with the data from the
   InputStream
Throws:
CertificateException - if an exception occurs while decoding
UnsupportedOperationException - if the method is not supported
Since:
1.4


"
CertificateFactorySpi,"engineGenerateCertPath(InputStream inStream, String encoding)",CertPath,Generates a CertPath object and initializes it with the data read from the InputStream inStream.,"

engineGenerateCertPath
public CertPath engineGenerateCertPath(InputStream inStream,
                                       String encoding)
                                throws CertificateException
Generates a CertPath object and initializes it with
 the data read from the InputStream inStream. The data
 is assumed to be in the specified encoding.

  This method was added to version 1.4 of the Java 2 Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be abstract
 and by default throws an UnsupportedOperationException.

Parameters:
inStream - an InputStream containing the data
encoding - the encoding used for the data
Returns:
a CertPath initialized with the data from the
   InputStream
Throws:
CertificateException - if an exception occurs while decoding or
   the encoding requested is not supported
UnsupportedOperationException - if the method is not supported
Since:
1.4


"
CertificateFactorySpi,engineGenerateCertPath(List<? extends Certificate> certificates),CertPath,Generates a CertPath object and initializes it with a List of Certificates.,"

engineGenerateCertPath
public CertPath engineGenerateCertPath(List<? extends Certificate> certificates)
                                throws CertificateException
Generates a CertPath object and initializes it with
 a List of Certificates.
 
 The certificates supplied must be of a type supported by the
 CertificateFactory. They will be copied out of the supplied
 List object.

  This method was added to version 1.4 of the Java 2 Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be abstract
 and by default throws an UnsupportedOperationException.

Parameters:
certificates - a List of Certificates
Returns:
a CertPath initialized with the supplied list of
   certificates
Throws:
CertificateException - if an exception occurs
UnsupportedOperationException - if the method is not supported
Since:
1.4


"
CertificateFactorySpi,engineGenerateCRL(InputStream inStream),abstract CRL,Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream.,"

engineGenerateCRL
public abstract CRL engineGenerateCRL(InputStream inStream)
                               throws CRLException
Generates a certificate revocation list (CRL) object and initializes it
 with the data read from the input stream inStream.

 In order to take advantage of the specialized CRL format
 supported by this certificate factory,
 the returned CRL object can be typecast to the corresponding
 CRL class. For example, if this certificate
 factory implements X.509 CRLs, the returned CRL object
 can be typecast to the X509CRL class.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream. Otherwise, each call to this
 method consumes one CRL and the read position of the input stream
 is positioned to the next available byte after the inherent
 end-of-CRL marker. If the data in the
 input stream does not contain an inherent end-of-CRL marker (other
 than EOF) and there is trailing data after the CRL is parsed, a
 CRLException is thrown.

Parameters:
inStream - an input stream with the CRL data.
Returns:
a CRL object initialized with the data
 from the input stream.
Throws:
CRLException - on parsing errors.


"
CertificateFactorySpi,engineGenerateCRLs(InputStream inStream),abstract Collection<? extends CRL>,Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream.,"

engineGenerateCRLs
public abstract Collection<? extends CRL> engineGenerateCRLs(InputStream inStream)
                                                      throws CRLException
Returns a (possibly empty) collection view of the CRLs read
 from the given input stream inStream.

 In order to take advantage of the specialized CRL format
 supported by this certificate factory, each element in
 the returned collection view can be typecast to the corresponding
 CRL class. For example, if this certificate
 factory implements X.509 CRLs, the elements in the returned
 collection can be typecast to the X509CRL class.

 In the case of a certificate factory for X.509 CRLs,
 inStream may contain a single DER-encoded CRL.
 In addition, inStream may contain a PKCS#7 CRL
 set. This is a PKCS#7 SignedData object, with the only
 significant field being crls. In particular, the
 signature and the contents are ignored. This format allows multiple
 CRLs to be downloaded at once. If no CRLs are present,
 an empty collection is returned.

 Note that if the given input stream does not support
 mark and
 reset, this method will
 consume the entire input stream.

Parameters:
inStream - the input stream with the CRLs.
Returns:
a (possibly empty) collection view of
 java.security.cert.CRL objects initialized with the data from the input
 stream.
Throws:
CRLException - on parsing errors.


"
CertificateFactorySpi,engineGetCertPathEncodings(),Iterator<String>,"Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first.","

engineGetCertPathEncodings
public Iterator<String> engineGetCertPathEncodings()
Returns an iteration of the CertPath encodings supported
 by this certificate factory, with the default encoding first. See
 the CertPath Encodings section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard encoding names.
 
 Attempts to modify the returned Iterator via its
 remove method result in an
 UnsupportedOperationException.

  This method was added to version 1.4 of the Java 2 Platform
 Standard Edition. In order to maintain backwards compatibility with
 existing service providers, this method cannot be abstract
 and by default throws an UnsupportedOperationException.

Returns:
an Iterator over the names of the supported
         CertPath encodings (as Strings)
Throws:
UnsupportedOperationException - if the method is not supported
Since:
1.4


"
CertPath,equals(Object other),boolean,Compares this certification path for equality with the specified object.,"

equals
public boolean equals(Object other)
Compares this certification path for equality with the specified
 object. Two CertPaths are equal if and only if their
 types are equal and their certificate Lists (and by
 implication the Certificates in those Lists)
 are equal. A CertPath is never equal to an object that is
 not a CertPath.
 
 This algorithm is implemented by this method. If it is overridden,
 the behavior specified here must be maintained.

Overrides:
equals in class Object
Parameters:
other - the object to test for equality with this certification path
Returns:
true if the specified object is equal to this certification path,
 false otherwise
See Also:
Object.hashCode(), 
HashMap


"
CertPath,getCertificates(),abstract List<? extends Certificate>,Returns the list of certificates in this certification path.,"

getCertificates
public abstract List<? extends Certificate> getCertificates()
Returns the list of certificates in this certification path.
 The List returned must be immutable and thread-safe.

Returns:
an immutable List of Certificates
         (may be empty, but not null)


"
CertPath,getEncoded(),abstract byte[],"Returns the encoded form of this certification path, using the default encoding.","

getEncoded
public abstract byte[] getEncoded()
                           throws CertificateEncodingException
Returns the encoded form of this certification path, using the default
 encoding.

Returns:
the encoded bytes
Throws:
CertificateEncodingException - if an encoding error occurs


"
CertPath,getEncoded(String encoding),abstract byte[],"Returns the encoded form of this certification path, using the specified encoding.","

getEncoded
public abstract byte[] getEncoded(String encoding)
                           throws CertificateEncodingException
Returns the encoded form of this certification path, using the
 specified encoding.

Parameters:
encoding - the name of the encoding to use
Returns:
the encoded bytes
Throws:
CertificateEncodingException - if an encoding error occurs or
   the encoding requested is not supported


"
CertPath,getEncodings(),abstract Iterator<String>,"Returns an iteration of the encodings supported by this certification path, with the default encoding first.","

getEncodings
public abstract Iterator<String> getEncodings()
Returns an iteration of the encodings supported by this certification
 path, with the default encoding first. Attempts to modify the returned
 Iterator via its remove method result in an
 UnsupportedOperationException.

Returns:
an Iterator over the names of the supported
         encodings (as Strings)


"
CertPath,getType(),String,Returns the type of Certificates in this certification path.,"

getType
public String getType()
Returns the type of Certificates in this certification
 path. This is the same string that would be returned by
 cert.getType()
 for all Certificates in the certification path.

Returns:
the type of Certificates in this certification
 path (never null)


"
CertPath,hashCode(),int,Returns the hashcode for this certification path.,"

hashCode
public int hashCode()
Returns the hashcode for this certification path. The hash code of
 a certification path is defined to be the result of the following
 calculation:
 
  hashCode = path.getType().hashCode();
  hashCode = 31*hashCode + path.getCertificates().hashCode();
 
 This ensures that path1.equals(path2) implies that
 path1.hashCode()==path2.hashCode() for any two certification
 paths, path1 and path2, as required by the
 general contract of Object.hashCode.

Overrides:
hashCode in class Object
Returns:
the hashcode value for this certification path
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
CertPath,toString(),String,Returns a string representation of this certification path.,"

toString
public String toString()
Returns a string representation of this certification path.
 This calls the toString method on each of the
 Certificates in the path.

Overrides:
toString in class Object
Returns:
a string representation of this certification path


"
CertPath,writeReplace(),protected Object,Replaces the CertPath to be serialized with a CertPathRep object.,"

writeReplace
protected Object writeReplace()
                       throws ObjectStreamException
Replaces the CertPath to be serialized with a
 CertPathRep object.

Returns:
the CertPathRep to be serialized
Throws:
ObjectStreamException - if a CertPathRep object
 representing this certification path could not be created


"
CertPath.CertPathRep,readResolve(),protected Object,Returns a CertPath constructed from the type and data.,"

readResolve
protected Object readResolve()
                      throws ObjectStreamException
Returns a CertPath constructed from the type and data.

Returns:
the resolved CertPath object
Throws:
ObjectStreamException - if a CertPath could not
 be constructed


"
CertPathBuilder,build(CertPathParameters params),CertPathBuilderResult,Attempts to build a certification path using the specified algorithm parameter set.,"

build
public final CertPathBuilderResult build(CertPathParameters params)
                                  throws CertPathBuilderException,
                                         InvalidAlgorithmParameterException
Attempts to build a certification path using the specified algorithm
 parameter set.

Parameters:
params - the algorithm parameters
Returns:
the result of the build algorithm
Throws:
CertPathBuilderException - if the builder is unable to construct
  a certification path that satisfies the specified parameters
InvalidAlgorithmParameterException - if the specified parameters
 are inappropriate for this CertPathBuilder


"
CertPathBuilder,getAlgorithm(),String,Returns the name of the algorithm of this CertPathBuilder.,"

getAlgorithm
public final String getAlgorithm()
Returns the name of the algorithm of this CertPathBuilder.

Returns:
the name of the algorithm of this CertPathBuilder


"
CertPathBuilder,getDefaultType(),static String,"Returns the default CertPathBuilder type as specified by the certpathbuilder.type security property, or the string ""PKIX"" if no such property exists.","

getDefaultType
public static final String getDefaultType()
Returns the default CertPathBuilder type as specified by
 the certpathbuilder.type security property, or the string
 ""PKIX"" if no such property exists.

 The default CertPathBuilder type can be used by
 applications that do not want to use a hard-coded type when calling one
 of the getInstance methods, and want to provide a default
 type in case a user does not specify its own.

 The default CertPathBuilder type can be changed by
 setting the value of the certpathbuilder.type security property
 to the desired type.

Returns:
the default CertPathBuilder type as specified
 by the certpathbuilder.type security property, or the string
 ""PKIX"" if no such property exists.
See Also:
security properties


"
CertPathBuilder,getInstance(String algorithm),static CertPathBuilder,Returns a CertPathBuilder object that implements the specified algorithm.,"

getInstance
public static CertPathBuilder getInstance(String algorithm)
                                   throws NoSuchAlgorithmException
Returns a CertPathBuilder object that implements the
 specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested CertPathBuilder
  algorithm.  See the CertPathBuilder section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
a CertPathBuilder object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          CertPathBuilderSpi implementation for the
          specified algorithm.
See Also:
Provider


"
CertPathBuilder,"getInstance(String algorithm, Provider provider)",static CertPathBuilder,Returns a CertPathBuilder object that implements the specified algorithm.,"

getInstance
public static CertPathBuilder getInstance(String algorithm,
                                          Provider provider)
                                   throws NoSuchAlgorithmException
Returns a CertPathBuilder object that implements the
 specified algorithm.

  A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the requested CertPathBuilder
  algorithm.  See the CertPathBuilder section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
a CertPathBuilder object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if a CertPathBuilderSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is
          null.
See Also:
Provider


"
CertPathBuilder,"getInstance(String algorithm, String provider)",static CertPathBuilder,Returns a CertPathBuilder object that implements the specified algorithm.,"

getInstance
public static CertPathBuilder getInstance(String algorithm,
                                          String provider)
                                   throws NoSuchAlgorithmException,
                                          NoSuchProviderException
Returns a CertPathBuilder object that implements the
 specified algorithm.

  A new CertPathBuilder object encapsulating the
 CertPathBuilderSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested CertPathBuilder
  algorithm.  See the CertPathBuilder section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
a CertPathBuilder object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if a CertPathBuilderSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider is
          null or empty.
See Also:
Provider


"
CertPathBuilder,getProvider(),Provider,Returns the provider of this CertPathBuilder.,"

getProvider
public final Provider getProvider()
Returns the provider of this CertPathBuilder.

Returns:
the provider of this CertPathBuilder


"
CertPathBuilder,getRevocationChecker(),CertPathChecker,Returns a CertPathChecker that the encapsulated CertPathBuilderSpi implementation uses to check the revocation status of certificates.,"

getRevocationChecker
public final CertPathChecker getRevocationChecker()
Returns a CertPathChecker that the encapsulated
 CertPathBuilderSpi implementation uses to check the revocation
 status of certificates. A PKIX implementation returns objects of
 type PKIXRevocationChecker. Each invocation of this method
 returns a new instance of CertPathChecker.

 The primary purpose of this method is to allow callers to specify
 additional input parameters and options specific to revocation checking.
 See the class description for an example.

Returns:
a CertPathChecker
Throws:
UnsupportedOperationException - if the service provider does not
         support this method
Since:
1.8


"
CertPathBuilderSpi,engineBuild(CertPathParameters params),abstract CertPathBuilderResult,Attempts to build a certification path using the specified algorithm parameter set.,"

engineBuild
public abstract CertPathBuilderResult engineBuild(CertPathParameters params)
                                           throws CertPathBuilderException,
                                                  InvalidAlgorithmParameterException
Attempts to build a certification path using the specified
 algorithm parameter set.

Parameters:
params - the algorithm parameters
Returns:
the result of the build algorithm
Throws:
CertPathBuilderException - if the builder is unable to construct
 a certification path that satisfies the specified parameters
InvalidAlgorithmParameterException - if the specified parameters
 are inappropriate for this CertPathBuilder


"
CertPathBuilderSpi,engineGetRevocationChecker(),CertPathChecker,Returns a CertPathChecker that this implementation uses to check the revocation status of certificates.,"

engineGetRevocationChecker
public CertPathChecker engineGetRevocationChecker()
Returns a CertPathChecker that this implementation uses to
 check the revocation status of certificates. A PKIX implementation
 returns objects of type PKIXRevocationChecker.

 The primary purpose of this method is to allow callers to specify
 additional input parameters and options specific to revocation checking.
 See the class description of CertPathBuilder for an example.

 This method was added to version 1.8 of the Java Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method cannot be abstract and by default throws
 an UnsupportedOperationException.

Returns:
a CertPathChecker that this implementation uses to
 check the revocation status of certificates
Throws:
UnsupportedOperationException - if this method is not supported
Since:
1.8


"
CertPathValidator,getAlgorithm(),String,Returns the algorithm name of this CertPathValidator.,"

getAlgorithm
public final String getAlgorithm()
Returns the algorithm name of this CertPathValidator.

Returns:
the algorithm name of this CertPathValidator


"
CertPathValidator,getDefaultType(),static String,"Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string ""PKIX"" if no such property exists.","

getDefaultType
public static final String getDefaultType()
Returns the default CertPathValidator type as specified by
 the certpathvalidator.type security property, or the string
 ""PKIX"" if no such property exists.

 The default CertPathValidator type can be used by
 applications that do not want to use a hard-coded type when calling one
 of the getInstance methods, and want to provide a default
 type in case a user does not specify its own.

 The default CertPathValidator type can be changed by
 setting the value of the certpathvalidator.type security
 property to the desired type.

Returns:
the default CertPathValidator type as specified
 by the certpathvalidator.type security property, or the string
 ""PKIX"" if no such property exists.
See Also:
security properties


"
CertPathValidator,getInstance(String algorithm),static CertPathValidator,Returns a CertPathValidator object that implements the specified algorithm.,"

getInstance
public static CertPathValidator getInstance(String algorithm)
                                     throws NoSuchAlgorithmException
Returns a CertPathValidator object that implements the
 specified algorithm.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new CertPathValidator object encapsulating the
 CertPathValidatorSpi implementation from the first
 Provider that supports the specified algorithm is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested CertPathValidator
  algorithm. See the CertPathValidator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
Returns:
a CertPathValidator object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          CertPathValidatorSpi implementation for the
          specified algorithm.
See Also:
Provider


"
CertPathValidator,"getInstance(String algorithm, Provider provider)",static CertPathValidator,Returns a CertPathValidator object that implements the specified algorithm.,"

getInstance
public static CertPathValidator getInstance(String algorithm,
                                            Provider provider)
                                     throws NoSuchAlgorithmException
Returns a CertPathValidator object that implements the
 specified algorithm.

  A new CertPathValidator object encapsulating the
 CertPathValidatorSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

Parameters:
algorithm - the name of the requested CertPathValidator
 algorithm. See the CertPathValidator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the provider.
Returns:
a CertPathValidator object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if a CertPathValidatorSpi
          implementation for the specified algorithm is not available
          from the specified Provider object.
IllegalArgumentException - if the provider is
          null.
See Also:
Provider


"
CertPathValidator,"getInstance(String algorithm, String provider)",static CertPathValidator,Returns a CertPathValidator object that implements the specified algorithm.,"

getInstance
public static CertPathValidator getInstance(String algorithm,
                                            String provider)
                                     throws NoSuchAlgorithmException,
                                            NoSuchProviderException
Returns a CertPathValidator object that implements the
 specified algorithm.

  A new CertPathValidator object encapsulating the
 CertPathValidatorSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the name of the requested CertPathValidator
  algorithm. See the CertPathValidator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.
provider - the name of the provider.
Returns:
a CertPathValidator object that implements the
          specified algorithm.
Throws:
NoSuchAlgorithmException - if a CertPathValidatorSpi
          implementation for the specified algorithm is not
          available from the specified provider.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider is
          null or empty.
See Also:
Provider


"
CertPathValidator,getProvider(),Provider,Returns the Provider of this CertPathValidator.,"

getProvider
public final Provider getProvider()
Returns the Provider of this
 CertPathValidator.

Returns:
the Provider of this CertPathValidator


"
CertPathValidator,getRevocationChecker(),CertPathChecker,Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates.,"

getRevocationChecker
public final CertPathChecker getRevocationChecker()
Returns a CertPathChecker that the encapsulated
 CertPathValidatorSpi implementation uses to check the revocation
 status of certificates. A PKIX implementation returns objects of
 type PKIXRevocationChecker. Each invocation of this method
 returns a new instance of CertPathChecker.

 The primary purpose of this method is to allow callers to specify
 additional input parameters and options specific to revocation checking.
 See the class description for an example.

Returns:
a CertPathChecker
Throws:
UnsupportedOperationException - if the service provider does not
         support this method
Since:
1.8


"
CertPathValidator,"validate(CertPath certPath, CertPathParameters params)",CertPathValidatorResult,Validates the specified certification path using the specified algorithm parameter set.,"

validate
public final CertPathValidatorResult validate(CertPath certPath,
                                              CertPathParameters params)
                                       throws CertPathValidatorException,
                                              InvalidAlgorithmParameterException
Validates the specified certification path using the specified
 algorithm parameter set.
 
 The CertPath specified must be of a type that is
 supported by the validation algorithm, otherwise an
 InvalidAlgorithmParameterException will be thrown. For
 example, a CertPathValidator that implements the PKIX
 algorithm validates CertPath objects of type X.509.

Parameters:
certPath - the CertPath to be validated
params - the algorithm parameters
Returns:
the result of the validation algorithm
Throws:
CertPathValidatorException - if the CertPath
 does not validate
InvalidAlgorithmParameterException - if the specified
 parameters or the type of the specified CertPath are
 inappropriate for this CertPathValidator


"
CertPathValidatorSpi,engineGetRevocationChecker(),CertPathChecker,Returns a CertPathChecker that this implementation uses to check the revocation status of certificates.,"

engineGetRevocationChecker
public CertPathChecker engineGetRevocationChecker()
Returns a CertPathChecker that this implementation uses to
 check the revocation status of certificates. A PKIX implementation
 returns objects of type PKIXRevocationChecker.

 The primary purpose of this method is to allow callers to specify
 additional input parameters and options specific to revocation checking.
 See the class description of CertPathValidator for an example.

 This method was added to version 1.8 of the Java Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method cannot be abstract and by default throws
 an UnsupportedOperationException.

Returns:
a CertPathChecker that this implementation uses to
 check the revocation status of certificates
Throws:
UnsupportedOperationException - if this method is not supported
Since:
1.8


"
CertPathValidatorSpi,"engineValidate(CertPath certPath, CertPathParameters params)",abstract CertPathValidatorResult,Validates the specified certification path using the specified algorithm parameter set.,"

engineValidate
public abstract CertPathValidatorResult engineValidate(CertPath certPath,
                                                       CertPathParameters params)
                                                throws CertPathValidatorException,
                                                       InvalidAlgorithmParameterException
Validates the specified certification path using the specified
 algorithm parameter set.
 
 The CertPath specified must be of a type that is
 supported by the validation algorithm, otherwise an
 InvalidAlgorithmParameterException will be thrown. For
 example, a CertPathValidator that implements the PKIX
 algorithm validates CertPath objects of type X.509.

Parameters:
certPath - the CertPath to be validated
params - the algorithm parameters
Returns:
the result of the validation algorithm
Throws:
CertPathValidatorException - if the CertPath
 does not validate
InvalidAlgorithmParameterException - if the specified
 parameters or the type of the specified CertPath are
 inappropriate for this CertPathValidator


"
CertStore,getCertificates(CertSelector selector),Collection<? extends Certificate>,Returns a Collection of Certificates that match the specified selector.,"

getCertificates
public final Collection<? extends Certificate> getCertificates(CertSelector selector)
                                                        throws CertStoreException
Returns a Collection of Certificates that
 match the specified selector. If no Certificates
 match the selector, an empty Collection will be returned.
 
 For some CertStore types, the resulting
 Collection may not contain all of the
 Certificates that match the selector. For instance,
 an LDAP CertStore may not search all entries in the
 directory. Instead, it may just search entries that are likely to
 contain the Certificates it is looking for.
 
 Some CertStore implementations (especially LDAP
 CertStores) may throw a CertStoreException
 unless a non-null CertSelector is provided that
 includes specific criteria that can be used to find the certificates.
 Issuer and/or subject names are especially useful criteria.

Parameters:
selector - A CertSelector used to select which
  Certificates should be returned. Specify null
  to return all Certificates (if supported).
Returns:
A Collection of Certificates that
         match the specified selector (never null)
Throws:
CertStoreException - if an exception occurs


"
CertStore,getCertStoreParameters(),CertStoreParameters,Returns the parameters used to initialize this CertStore.,"

getCertStoreParameters
public final CertStoreParameters getCertStoreParameters()
Returns the parameters used to initialize this CertStore.
 Note that the CertStoreParameters object is cloned before
 it is returned.

Returns:
the parameters used to initialize this CertStore
 (may be null)


"
CertStore,getCRLs(CRLSelector selector),Collection<? extends CRL>,Returns a Collection of CRLs that match the specified selector.,"

getCRLs
public final Collection<? extends CRL> getCRLs(CRLSelector selector)
                                        throws CertStoreException
Returns a Collection of CRLs that
 match the specified selector. If no CRLs
 match the selector, an empty Collection will be returned.
 
 For some CertStore types, the resulting
 Collection may not contain all of the
 CRLs that match the selector. For instance,
 an LDAP CertStore may not search all entries in the
 directory. Instead, it may just search entries that are likely to
 contain the CRLs it is looking for.
 
 Some CertStore implementations (especially LDAP
 CertStores) may throw a CertStoreException
 unless a non-null CRLSelector is provided that
 includes specific criteria that can be used to find the CRLs.
 Issuer names and/or the certificate to be checked are especially useful.

Parameters:
selector - A CRLSelector used to select which
  CRLs should be returned. Specify null
  to return all CRLs (if supported).
Returns:
A Collection of CRLs that
         match the specified selector (never null)
Throws:
CertStoreException - if an exception occurs


"
CertStore,getDefaultType(),static String,"Returns the default CertStore type as specified by the certstore.type security property, or the string ""LDAP"" if no such property exists.","

getDefaultType
public static final String getDefaultType()
Returns the default CertStore type as specified by the
 certstore.type security property, or the string
 ""LDAP"" if no such property exists.

 The default CertStore type can be used by applications
 that do not want to use a hard-coded type when calling one of the
 getInstance methods, and want to provide a default
 CertStore type in case a user does not specify its own.

 The default CertStore type can be changed by setting
 the value of the certstore.type security property to the
 desired type.

Returns:
the default CertStore type as specified by the
 certstore.type security property, or the string
 ""LDAP"" if no such property exists.
See Also:
security properties


"
CertStore,"getInstance(String type, CertStoreParameters params)",static CertStore,Returns a CertStore object that implements the specified CertStore type and is initialized with the specified parameters.,"

getInstance
public static CertStore getInstance(String type,
                                    CertStoreParameters params)
                             throws InvalidAlgorithmParameterException,
                                    NoSuchAlgorithmException
Returns a CertStore object that implements the specified
 CertStore type and is initialized with the specified
 parameters.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new CertStore object encapsulating the
 CertStoreSpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

 The CertStore that is returned is initialized with the
 specified CertStoreParameters. The type of parameters
 needed may vary between different types of CertStores.
 Note that the specified CertStoreParameters object is
 cloned.

Parameters:
type - the name of the requested CertStore type.
 See the CertStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard types.
params - the initialization parameters (may be null).
Returns:
a CertStore object that implements the specified
          CertStore type.
Throws:
NoSuchAlgorithmException - if no Provider supports a
          CertStoreSpi implementation for the specified type.
InvalidAlgorithmParameterException - if the specified
          initialization parameters are inappropriate for this
          CertStore.
See Also:
Provider


"
CertStore,"getInstance(String type, CertStoreParameters params, Provider provider)",static CertStore,Returns a CertStore object that implements the specified CertStore type.,"

getInstance
public static CertStore getInstance(String type,
                                    CertStoreParameters params,
                                    Provider provider)
                             throws NoSuchAlgorithmException,
                                    InvalidAlgorithmParameterException
Returns a CertStore object that implements the specified
 CertStore type.

  A new CertStore object encapsulating the
 CertStoreSpi implementation from the specified Provider
 object is returned.  Note that the specified Provider object
 does not have to be registered in the provider list.

 The CertStore that is returned is initialized with the
 specified CertStoreParameters. The type of parameters
 needed may vary between different types of CertStores.
 Note that the specified CertStoreParameters object is
 cloned.

Parameters:
type - the requested CertStore type.
 See the CertStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard types.
params - the initialization parameters (may be null).
provider - the provider.
Returns:
a CertStore object that implements the
          specified type.
Throws:
NoSuchAlgorithmException - if a CertStoreSpi
          implementation for the specified type is not available
          from the specified Provider object.
InvalidAlgorithmParameterException - if the specified
          initialization parameters are inappropriate for this
          CertStore
IllegalArgumentException - if the provider is
          null.
See Also:
Provider


"
CertStore,"getInstance(String type, CertStoreParameters params, String provider)",static CertStore,Returns a CertStore object that implements the specified CertStore type.,"

getInstance
public static CertStore getInstance(String type,
                                    CertStoreParameters params,
                                    String provider)
                             throws InvalidAlgorithmParameterException,
                                    NoSuchAlgorithmException,
                                    NoSuchProviderException
Returns a CertStore object that implements the specified
 CertStore type.

  A new CertStore object encapsulating the
 CertStoreSpi implementation from the specified provider
 is returned.  The specified provider must be registered
 in the security provider list.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

 The CertStore that is returned is initialized with the
 specified CertStoreParameters. The type of parameters
 needed may vary between different types of CertStores.
 Note that the specified CertStoreParameters object is
 cloned.

Parameters:
type - the requested CertStore type.
 See the CertStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard types.
params - the initialization parameters (may be null).
provider - the name of the provider.
Returns:
a CertStore object that implements the
          specified type.
Throws:
NoSuchAlgorithmException - if a CertStoreSpi
          implementation for the specified type is not
          available from the specified provider.
InvalidAlgorithmParameterException - if the specified
          initialization parameters are inappropriate for this
          CertStore.
NoSuchProviderException - if the specified provider is not
          registered in the security provider list.
IllegalArgumentException - if the provider is
          null or empty.
See Also:
Provider


"
CertStore,getProvider(),Provider,Returns the provider of this CertStore.,"

getProvider
public final Provider getProvider()
Returns the provider of this CertStore.

Returns:
the provider of this CertStore


"
CertStore,getType(),String,Returns the type of this CertStore.,"

getType
public final String getType()
Returns the type of this CertStore.

Returns:
the type of this CertStore


"
CertStoreSpi,engineGetCertificates(CertSelector selector),abstract Collection<? extends Certificate>,Returns a Collection of Certificates that match the specified selector.,"

engineGetCertificates
public abstract Collection<? extends Certificate> engineGetCertificates(CertSelector selector)
                                                                 throws CertStoreException
Returns a Collection of Certificates that
 match the specified selector. If no Certificates
 match the selector, an empty Collection will be returned.
 
 For some CertStore types, the resulting
 Collection may not contain all of the
 Certificates that match the selector. For instance,
 an LDAP CertStore may not search all entries in the
 directory. Instead, it may just search entries that are likely to
 contain the Certificates it is looking for.
 
 Some CertStore implementations (especially LDAP
 CertStores) may throw a CertStoreException
 unless a non-null CertSelector is provided that includes
 specific criteria that can be used to find the certificates. Issuer
 and/or subject names are especially useful criteria.

Parameters:
selector - A CertSelector used to select which
  Certificates should be returned. Specify null
  to return all Certificates (if supported).
Returns:
A Collection of Certificates that
         match the specified selector (never null)
Throws:
CertStoreException - if an exception occurs


"
CertStoreSpi,engineGetCRLs(CRLSelector selector),abstract Collection<? extends CRL>,Returns a Collection of CRLs that match the specified selector.,"

engineGetCRLs
public abstract Collection<? extends CRL> engineGetCRLs(CRLSelector selector)
                                                 throws CertStoreException
Returns a Collection of CRLs that
 match the specified selector. If no CRLs
 match the selector, an empty Collection will be returned.
 
 For some CertStore types, the resulting
 Collection may not contain all of the
 CRLs that match the selector. For instance,
 an LDAP CertStore may not search all entries in the
 directory. Instead, it may just search entries that are likely to
 contain the CRLs it is looking for.
 
 Some CertStore implementations (especially LDAP
 CertStores) may throw a CertStoreException
 unless a non-null CRLSelector is provided that includes
 specific criteria that can be used to find the CRLs. Issuer names
 and/or the certificate to be checked are especially useful.

Parameters:
selector - A CRLSelector used to select which
  CRLs should be returned. Specify null
  to return all CRLs (if supported).
Returns:
A Collection of CRLs that
         match the specified selector (never null)
Throws:
CertStoreException - if an exception occurs


"
CollectionCertStoreParameters,clone(),Object,Returns a copy of this object.,"

clone
public Object clone()
Returns a copy of this object. Note that only a reference to the
 Collection is copied, and not the contents.

Specified by:
clone in interface CertStoreParameters
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
CollectionCertStoreParameters,getCollection(),Collection<?>,Returns the Collection from which Certificates and CRLs are retrieved.,"

getCollection
public Collection<?> getCollection()
Returns the Collection from which Certificates
 and CRLs are retrieved. This is not a copy of the
 Collection, it is a reference. This allows the caller to
 subsequently add or remove Certificates or
 CRLs from the Collection.

Returns:
the Collection (never null)


"
CollectionCertStoreParameters,toString(),String,Returns a formatted string describing the parameters.,"

toString
public String toString()
Returns a formatted string describing the parameters.

Overrides:
toString in class Object
Returns:
a formatted string describing the parameters


"
CRL,getType(),String,Returns the type of this CRL.,"

getType
public final String getType()
Returns the type of this CRL.

Returns:
the type of this CRL.


"
CRL,isRevoked(Certificate cert),abstract boolean,Checks whether the given certificate is on this CRL.,"

isRevoked
public abstract boolean isRevoked(Certificate cert)
Checks whether the given certificate is on this CRL.

Parameters:
cert - the certificate to check for.
Returns:
true if the given certificate is on this CRL,
 false otherwise.


"
CRL,toString(),abstract String,Returns a string representation of this CRL.,"

toString
public abstract String toString()
Returns a string representation of this CRL.

Overrides:
toString in class Object
Returns:
a string representation of this CRL.


"
LDAPCertStoreParameters,clone(),Object,Returns a copy of this object.,"

clone
public Object clone()
Returns a copy of this object. Changes to the copy will not affect
 the original and vice versa.
 
 Note: this method currently performs a shallow copy of the object
 (simply calls Object.clone()). This may be changed in a
 future revision to perform a deep copy if new parameters are added
 that should not be shared.

Specified by:
clone in interface CertStoreParameters
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
LDAPCertStoreParameters,getPort(),int,Returns the port number of the LDAP server.,"

getPort
public int getPort()
Returns the port number of the LDAP server.

Returns:
the port number


"
LDAPCertStoreParameters,getServerName(),String,Returns the DNS name of the LDAP server.,"

getServerName
public String getServerName()
Returns the DNS name of the LDAP server.

Returns:
the name (not null)


"
LDAPCertStoreParameters,toString(),String,Returns a formatted string describing the parameters.,"

toString
public String toString()
Returns a formatted string describing the parameters.

Overrides:
toString in class Object
Returns:
a formatted string describing the parameters


"
PKIXBuilderParameters,getMaxPathLength(),int,Returns the value of the maximum number of intermediate non-self-issued certificates that may exist in a certification path.,"

getMaxPathLength
public int getMaxPathLength()
Returns the value of the maximum number of intermediate non-self-issued
 certificates that may exist in a certification path. See
 the setMaxPathLength(int) method for more details.

Returns:
the maximum number of non-self-issued intermediate certificates
  that may exist in a certification path, or -1 if there is no limit
See Also:
setMaxPathLength(int)


"
PKIXBuilderParameters,setMaxPathLength(int maxPathLength),void,Sets the value of the maximum number of non-self-issued intermediate certificates that may exist in a certification path.,"

setMaxPathLength
public void setMaxPathLength(int maxPathLength)
Sets the value of the maximum number of non-self-issued intermediate
 certificates that may exist in a certification path. A certificate
 is self-issued if the DNs that appear in the subject and issuer
 fields are identical and are not empty. Note that the last certificate
 in a certification path is not an intermediate certificate, and is not
 included in this limit. Usually the last certificate is an end entity
 certificate, but it can be a CA certificate. A PKIX
 CertPathBuilder instance must not build
 paths longer than the length specified.

  A value of 0 implies that the path can only contain
 a single certificate. A value of -1 implies that the
 path length is unconstrained (i.e. there is no maximum).
 The default maximum path length, if not specified, is 5.
 Setting a value less than -1 will cause an exception to be thrown.

  If any of the CA certificates contain the
 BasicConstraintsExtension, the value of the
 pathLenConstraint field of the extension overrides
 the maximum path length parameter whenever the result is a
 certification path of smaller length.

Parameters:
maxPathLength - the maximum number of non-self-issued intermediate
  certificates that may exist in a certification path
Throws:
InvalidParameterException - if maxPathLength is set
  to a value less than -1
See Also:
getMaxPathLength()


"
PKIXBuilderParameters,toString(),String,Returns a formatted string describing the parameters.,"

toString
public String toString()
Returns a formatted string describing the parameters.

Overrides:
toString in class PKIXParameters
Returns:
a formatted string describing the parameters


"
PKIXCertPathBuilderResult,getCertPath(),CertPath,Returns the built and validated certification path.,"

getCertPath
public CertPath getCertPath()
Returns the built and validated certification path. The
 CertPath object does not include the trust anchor.
 Instead, use the getTrustAnchor() method to
 obtain the TrustAnchor that served as the trust anchor
 for the certification path.

Specified by:
getCertPath in interface CertPathBuilderResult
Returns:
the built and validated CertPath (never
 null)


"
PKIXCertPathBuilderResult,toString(),String,Return a printable representation of this PKIXCertPathBuilderResult.,"

toString
public String toString()
Return a printable representation of this
 PKIXCertPathBuilderResult.

Overrides:
toString in class PKIXCertPathValidatorResult
Returns:
a String describing the contents of this
         PKIXCertPathBuilderResult


"
PKIXCertPathChecker,check(Certificate cert),void,Performs the check(s) on the specified certificate using its internal state.,"

check
public void check(Certificate cert)
           throws CertPathValidatorException
Performs the check(s) on the specified certificate using its internal
 state. The certificates are presented in the order specified by the
 init method.

 This implementation calls
 check(cert, java.util.Collections.<String>emptySet()).

Specified by:
check in interface CertPathChecker
Parameters:
cert - the Certificate to be checked
Throws:
CertPathValidatorException - if the specified certificate does
         not pass the check


"
PKIXCertPathChecker,"check(Certificate cert, Collection<String> unresolvedCritExts)",abstract void,Performs the check(s) on the specified certificate using its internal state and removes any critical extensions that it processes from the specified collection of OID strings that represent the unresolved critical extensions.,"

check
public abstract void check(Certificate cert,
                           Collection<String> unresolvedCritExts)
                    throws CertPathValidatorException
Performs the check(s) on the specified certificate using its internal
 state and removes any critical extensions that it processes from the
 specified collection of OID strings that represent the unresolved
 critical extensions. The certificates are presented in the order
 specified by the init method.

Parameters:
cert - the Certificate to be checked
unresolvedCritExts - a Collection of OID strings
 representing the current set of unresolved critical extensions
Throws:
CertPathValidatorException - if the specified certificate does
 not pass the check


"
PKIXCertPathChecker,clone(),Object,Returns a clone of this object.,"

clone
public Object clone()
Returns a clone of this object. Calls the Object.clone()
 method.
 All subclasses which maintain state must support and
 override this method, if necessary.

Overrides:
clone in class Object
Returns:
a copy of this PKIXCertPathChecker
See Also:
Cloneable


"
PKIXCertPathChecker,getSupportedExtensions(),abstract Set<String>,Returns an immutable Set of X.509 certificate extensions that this PKIXCertPathChecker supports (i.e.,"

getSupportedExtensions
public abstract Set<String> getSupportedExtensions()
Returns an immutable Set of X.509 certificate extensions
 that this PKIXCertPathChecker supports (i.e. recognizes, is
 able to process), or null if no extensions are supported.
 
 Each element of the set is a String representing the
 Object Identifier (OID) of the X.509 extension that is supported.
 The OID is represented by a set of nonnegative integers separated by
 periods.
 
 All X.509 certificate extensions that a PKIXCertPathChecker
 might possibly be able to process should be included in the set.

Returns:
an immutable Set of X.509 extension OIDs (in
 String format) supported by this
 PKIXCertPathChecker, or null if no
 extensions are supported


"
PKIXCertPathChecker,init(boolean forward),abstract void,Initializes the internal state of this PKIXCertPathChecker.,"

init
public abstract void init(boolean forward)
                   throws CertPathValidatorException
Initializes the internal state of this PKIXCertPathChecker.
 
 The forward flag specifies the order that
 certificates will be passed to the check method
 (forward or reverse). A PKIXCertPathChecker must
 support reverse checking and may support forward checking.

Specified by:
init in interface CertPathChecker
Parameters:
forward - the order that certificates are presented to
 the check method. If true, certificates
 are presented from target to most-trusted CA (forward); if
 false, from most-trusted CA to target (reverse).
Throws:
CertPathValidatorException - if this
 PKIXCertPathChecker is unable to check certificates in
 the specified order; it should never be thrown if the forward flag
 is false since reverse checking must be supported


"
PKIXCertPathChecker,isForwardCheckingSupported(),abstract boolean,Indicates if forward checking is supported.,"

isForwardCheckingSupported
public abstract boolean isForwardCheckingSupported()
Indicates if forward checking is supported. Forward checking refers
 to the ability of the PKIXCertPathChecker to perform
 its checks when certificates are presented to the check
 method in the forward direction (from target to most-trusted CA).

Specified by:
isForwardCheckingSupported in interface CertPathChecker
Returns:
true if forward checking is supported,
 false otherwise


"
PKIXCertPathValidatorResult,clone(),Object,Returns a copy of this object.,"

clone
public Object clone()
Returns a copy of this object.

Specified by:
clone in interface CertPathValidatorResult
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
PKIXCertPathValidatorResult,getPolicyTree(),PolicyNode,Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm.,"

getPolicyTree
public PolicyNode getPolicyTree()
Returns the root node of the valid policy tree resulting from the
 PKIX certification path validation algorithm. The
 PolicyNode object that is returned and any objects that
 it returns through public methods are immutable.

 Most applications will not need to examine the valid policy tree.
 They can achieve their policy processing goals by setting the
 policy-related parameters in PKIXParameters. However, more
 sophisticated applications, especially those that process policy
 qualifiers, may need to traverse the valid policy tree using the
 PolicyNode.getParent and
 PolicyNode.getChildren methods.

Returns:
the root node of the valid policy tree, or null
 if there are no valid policies


"
PKIXCertPathValidatorResult,getPublicKey(),PublicKey,"Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable.","

getPublicKey
public PublicKey getPublicKey()
Returns the public key of the subject (target) of the certification
 path, including any inherited public key parameters if applicable.

Returns:
the public key of the subject (never null)


"
PKIXCertPathValidatorResult,getTrustAnchor(),TrustAnchor,Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.,"

getTrustAnchor
public TrustAnchor getTrustAnchor()
Returns the TrustAnchor describing the CA that served
 as a trust anchor for the certification path.

Returns:
the TrustAnchor (never null)


"
PKIXCertPathValidatorResult,toString(),String,Return a printable representation of this PKIXCertPathValidatorResult.,"

toString
public String toString()
Return a printable representation of this
 PKIXCertPathValidatorResult.

Overrides:
toString in class Object
Returns:
a String describing the contents of this
         PKIXCertPathValidatorResult


"
PKIXParameters,addCertPathChecker(PKIXCertPathChecker checker),void,Adds a PKIXCertPathChecker to the list of certification path checkers.,"

addCertPathChecker
public void addCertPathChecker(PKIXCertPathChecker checker)
Adds a PKIXCertPathChecker to the list of certification
 path checkers. See the setCertPathCheckers
 method for more details.
 
 Note that the PKIXCertPathChecker is cloned to protect
 against subsequent modifications.

Parameters:
checker - a PKIXCertPathChecker to add to the list of
 checks. If null, the checker is ignored (not added to list).


"
PKIXParameters,addCertStore(CertStore store),void,Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs.,"

addCertStore
public void addCertStore(CertStore store)
Adds a CertStore to the end of the list of
 CertStores used in finding certificates and CRLs.

Parameters:
store - the CertStore to add. If null,
 the store is ignored (not added to list).


"
PKIXParameters,clone(),Object,Makes a copy of this PKIXParameters object.,"

clone
public Object clone()
Makes a copy of this PKIXParameters object. Changes
 to the copy will not affect the original and vice versa.

Specified by:
clone in interface CertPathParameters
Overrides:
clone in class Object
Returns:
a copy of this PKIXParameters object
See Also:
Cloneable


"
PKIXParameters,getCertPathCheckers(),List<PKIXCertPathChecker>,Returns the List of certification path checkers.,"

getCertPathCheckers
public List<PKIXCertPathChecker> getCertPathCheckers()
Returns the List of certification path checkers.
 The returned List is immutable, and each
 PKIXCertPathChecker in the List is cloned
 to protect against subsequent modifications.

Returns:
an immutable List of
 PKIXCertPathCheckers (may be empty, but not
 null)
See Also:
setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker>)


"
PKIXParameters,getCertStores(),List<CertStore>,Returns an immutable List of CertStores that are used to find certificates and CRLs.,"

getCertStores
public List<CertStore> getCertStores()
Returns an immutable List of CertStores that
 are used to find certificates and CRLs.

Returns:
an immutable List of CertStores
 (may be empty, but never null)
See Also:
setCertStores(java.util.List<java.security.cert.CertStore>)


"
PKIXParameters,getDate(),Date,Returns the time for which the validity of the certification path should be determined.,"

getDate
public Date getDate()
Returns the time for which the validity of the certification path
 should be determined. If null, the current time is used.
 
 Note that the Date returned is copied to protect against
 subsequent modifications.

Returns:
the Date, or null if not set
See Also:
setDate(java.util.Date)


"
PKIXParameters,getInitialPolicies(),Set<String>,"Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing.","

getInitialPolicies
public Set<String> getInitialPolicies()
Returns an immutable Set of initial
 policy identifiers (OID strings), indicating that any one of these
 policies would be acceptable to the certificate user for the purposes of
 certification path processing. The default return value is an empty
 Set, which is interpreted as meaning that any policy would
 be acceptable.

Returns:
an immutable Set of initial policy OIDs in
 String format, or an empty Set (implying any
 policy is acceptable). Never returns null.
See Also:
setInitialPolicies(java.util.Set<java.lang.String>)


"
PKIXParameters,getPolicyQualifiersRejected(),boolean,Gets the PolicyQualifiersRejected flag.,"

getPolicyQualifiersRejected
public boolean getPolicyQualifiersRejected()
Gets the PolicyQualifiersRejected flag. If this flag is true,
 certificates that include policy qualifiers in a certificate policies
 extension that is marked critical are rejected.
 If the flag is false, certificates are not rejected on this basis.

  When a PKIXParameters object is created, this flag is
 set to true. This setting reflects the most common (and simplest)
 strategy for processing policy qualifiers. Applications that want to use
 a more sophisticated policy must set this flag to false.

Returns:
the current value of the PolicyQualifiersRejected flag
See Also:
setPolicyQualifiersRejected(boolean)


"
PKIXParameters,getSigProvider(),String,"Returns the signature provider's name, or null if not set.","

getSigProvider
public String getSigProvider()
Returns the signature provider's name, or null
 if not set.

Returns:
the signature provider's name (or null)
See Also:
setSigProvider(java.lang.String)


"
PKIXParameters,getTargetCertConstraints(),CertSelector,Returns the required constraints on the target certificate.,"

getTargetCertConstraints
public CertSelector getTargetCertConstraints()
Returns the required constraints on the target certificate.
 The constraints are returned as an instance of CertSelector.
 If null, no constraints are defined.

 Note that the CertSelector returned is cloned
 to protect against subsequent modifications.

Returns:
a CertSelector specifying the constraints
 on the target certificate (or null)
See Also:
setTargetCertConstraints(java.security.cert.CertSelector)


"
PKIXParameters,getTrustAnchors(),Set<TrustAnchor>,Returns an immutable Set of the most-trusted CAs.,"

getTrustAnchors
public Set<TrustAnchor> getTrustAnchors()
Returns an immutable Set of the most-trusted
 CAs.

Returns:
an immutable Set of TrustAnchors
 (never null)
See Also:
setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor>)


"
PKIXParameters,isAnyPolicyInhibited(),boolean,Checks whether the any policy OID should be processed if it is included in a certificate.,"

isAnyPolicyInhibited
public boolean isAnyPolicyInhibited()
Checks whether the any policy OID should be processed if it
 is included in a certificate.

Returns:
true if the any policy OID is inhibited,
 false otherwise


"
PKIXParameters,isExplicitPolicyRequired(),boolean,Checks if explicit policy is required.,"

isExplicitPolicyRequired
public boolean isExplicitPolicyRequired()
Checks if explicit policy is required. If this flag is true, an
 acceptable policy needs to be explicitly identified in every certificate.
 By default, the ExplicitPolicyRequired flag is false.

Returns:
true if explicit policy is required,
 false otherwise


"
PKIXParameters,isPolicyMappingInhibited(),boolean,Checks if policy mapping is inhibited.,"

isPolicyMappingInhibited
public boolean isPolicyMappingInhibited()
Checks if policy mapping is inhibited. If this flag is true, policy
 mapping is inhibited. By default, policy mapping is not inhibited (the
 flag is false).

Returns:
true if policy mapping is inhibited, false otherwise


"
PKIXParameters,isRevocationEnabled(),boolean,Checks the RevocationEnabled flag.,"

isRevocationEnabled
public boolean isRevocationEnabled()
Checks the RevocationEnabled flag. If this flag is true, the default
 revocation checking mechanism of the underlying PKIX service provider
 will be used. If this flag is false, the default revocation checking
 mechanism will be disabled (not used). See the setRevocationEnabled method for more details on
 setting the value of this flag.

Returns:
the current value of the RevocationEnabled flag


"
PKIXParameters,setAnyPolicyInhibited(boolean val),void,Sets state to determine if the any policy OID should be processed if it is included in a certificate.,"

setAnyPolicyInhibited
public void setAnyPolicyInhibited(boolean val)
Sets state to determine if the any policy OID should be processed
 if it is included in a certificate. By default, the any policy OID
 is not inhibited (isAnyPolicyInhibited()
 returns false).

Parameters:
val - true if the any policy OID is to be
 inhibited, false otherwise


"
PKIXParameters,setCertPathCheckers(List<PKIXCertPathChecker> checkers),void,Sets a List of additional certification path checkers.,"

setCertPathCheckers
public void setCertPathCheckers(List<PKIXCertPathChecker> checkers)
Sets a List of additional certification path checkers. If
 the specified List contains an object that is not a
 PKIXCertPathChecker, it is ignored.
 
 Each PKIXCertPathChecker specified implements
 additional checks on a certificate. Typically, these are checks to
 process and verify private extensions contained in certificates.
 Each PKIXCertPathChecker should be instantiated with any
 initialization parameters needed to execute the check.
 
 This method allows sophisticated applications to extend a PKIX
 CertPathValidator or CertPathBuilder.
 Each of the specified PKIXCertPathCheckers will be called,
 in turn, by a PKIX CertPathValidator or
 CertPathBuilder for each certificate processed or
 validated.
 
 Regardless of whether these additional PKIXCertPathCheckers
 are set, a PKIX CertPathValidator or
 CertPathBuilder must perform all of the required PKIX
 checks on each certificate. The one exception to this rule is if the
 RevocationEnabled flag is set to false (see the setRevocationEnabled method).
 
 Note that the List supplied here is copied and each
 PKIXCertPathChecker in the list is cloned to protect
 against subsequent modifications.

Parameters:
checkers - a List of PKIXCertPathCheckers.
 May be null, in which case no additional checkers will be
 used.
Throws:
ClassCastException - if any of the elements in the list
 are not of type java.security.cert.PKIXCertPathChecker
See Also:
getCertPathCheckers()


"
PKIXParameters,setCertStores(List<CertStore> stores),void,Sets the list of CertStores to be used in finding certificates and CRLs.,"

setCertStores
public void setCertStores(List<CertStore> stores)
Sets the list of CertStores to be used in finding
 certificates and CRLs. May be null, in which case
 no CertStores will be used. The first
 CertStores in the list may be preferred to those that
 appear later.
 
 Note that the List is copied to protect against
 subsequent modifications.

Parameters:
stores - a List of CertStores (or
 null)
Throws:
ClassCastException - if any of the elements in the list are
 not of type java.security.cert.CertStore
See Also:
getCertStores()


"
PKIXParameters,setDate(Date date),void,Sets the time for which the validity of the certification path should be determined.,"

setDate
public void setDate(Date date)
Sets the time for which the validity of the certification path
 should be determined. If null, the current time is used.
 
 Note that the Date supplied here is copied to protect
 against subsequent modifications.

Parameters:
date - the Date, or null for the
 current time
See Also:
getDate()


"
PKIXParameters,setExplicitPolicyRequired(boolean val),void,Sets the ExplicitPolicyRequired flag.,"

setExplicitPolicyRequired
public void setExplicitPolicyRequired(boolean val)
Sets the ExplicitPolicyRequired flag. If this flag is true, an
 acceptable policy needs to be explicitly identified in every certificate.
 By default, the ExplicitPolicyRequired flag is false.

Parameters:
val - true if explicit policy is to be required,
 false otherwise


"
PKIXParameters,setInitialPolicies(Set<String> initialPolicies),void,"Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing.","

setInitialPolicies
public void setInitialPolicies(Set<String> initialPolicies)
Sets the Set of initial policy identifiers
 (OID strings), indicating that any one of these
 policies would be acceptable to the certificate user for the purposes of
 certification path processing. By default, any policy is acceptable
 (i.e. all policies), so a user that wants to allow any policy as
 acceptable does not need to call this method, or can call it
 with an empty Set (or null).
 
 Note that the Set is copied to protect against
 subsequent modifications.

Parameters:
initialPolicies - a Set of initial policy
 OIDs in String format (or null)
Throws:
ClassCastException - if any of the elements in the set are
 not of type String
See Also:
getInitialPolicies()


"
PKIXParameters,setPolicyMappingInhibited(boolean val),void,Sets the PolicyMappingInhibited flag.,"

setPolicyMappingInhibited
public void setPolicyMappingInhibited(boolean val)
Sets the PolicyMappingInhibited flag. If this flag is true, policy
 mapping is inhibited. By default, policy mapping is not inhibited (the
 flag is false).

Parameters:
val - true if policy mapping is to be inhibited,
 false otherwise


"
PKIXParameters,setPolicyQualifiersRejected(boolean qualifiersRejected),void,Sets the PolicyQualifiersRejected flag.,"

setPolicyQualifiersRejected
public void setPolicyQualifiersRejected(boolean qualifiersRejected)
Sets the PolicyQualifiersRejected flag. If this flag is true,
 certificates that include policy qualifiers in a certificate
 policies extension that is marked critical are rejected.
 If the flag is false, certificates are not rejected on this basis.

  When a PKIXParameters object is created, this flag is
 set to true. This setting reflects the most common (and simplest)
 strategy for processing policy qualifiers. Applications that want to use
 a more sophisticated policy must set this flag to false.
 
 Note that the PKIX certification path validation algorithm specifies
 that any policy qualifier in a certificate policies extension that is
 marked critical must be processed and validated. Otherwise the
 certification path must be rejected. If the policyQualifiersRejected flag
 is set to false, it is up to the application to validate all policy
 qualifiers in this manner in order to be PKIX compliant.

Parameters:
qualifiersRejected - the new value of the PolicyQualifiersRejected
 flag
See Also:
getPolicyQualifiersRejected(), 
PolicyQualifierInfo


"
PKIXParameters,setRevocationEnabled(boolean val),void,Sets the RevocationEnabled flag.,"

setRevocationEnabled
public void setRevocationEnabled(boolean val)
Sets the RevocationEnabled flag. If this flag is true, the default
 revocation checking mechanism of the underlying PKIX service provider
 will be used. If this flag is false, the default revocation checking
 mechanism will be disabled (not used).
 
 When a PKIXParameters object is created, this flag is set
 to true. This setting reflects the most common strategy for checking
 revocation, since each service provider must support revocation
 checking to be PKIX compliant. Sophisticated applications should set
 this flag to false when it is not practical to use a PKIX service
 provider's default revocation checking mechanism or when an alternative
 revocation checking mechanism is to be substituted (by also calling the
 addCertPathChecker or setCertPathCheckers methods).

Parameters:
val - the new value of the RevocationEnabled flag


"
PKIXParameters,setSigProvider(String sigProvider),void,Sets the signature provider's name.,"

setSigProvider
public void setSigProvider(String sigProvider)
Sets the signature provider's name. The specified provider will be
 preferred when creating Signature
 objects. If null or not set, the first provider found
 supporting the algorithm will be used.

Parameters:
sigProvider - the signature provider's name (or null)
See Also:
getSigProvider()


"
PKIXParameters,setTargetCertConstraints(CertSelector selector),void,Sets the required constraints on the target certificate.,"

setTargetCertConstraints
public void setTargetCertConstraints(CertSelector selector)
Sets the required constraints on the target certificate.
 The constraints are specified as an instance of
 CertSelector. If null, no constraints are
 defined.

 Note that the CertSelector specified is cloned
 to protect against subsequent modifications.

Parameters:
selector - a CertSelector specifying the constraints
 on the target certificate (or null)
See Also:
getTargetCertConstraints()


"
PKIXParameters,setTrustAnchors(Set<TrustAnchor> trustAnchors),void,Sets the Set of most-trusted CAs.,"

setTrustAnchors
public void setTrustAnchors(Set<TrustAnchor> trustAnchors)
                     throws InvalidAlgorithmParameterException
Sets the Set of most-trusted CAs.
 
 Note that the Set is copied to protect against
 subsequent modifications.

Parameters:
trustAnchors - a Set of TrustAnchors
Throws:
InvalidAlgorithmParameterException - if the specified
 Set is empty (trustAnchors.isEmpty() == true)
NullPointerException - if the specified Set is
 null
ClassCastException - if any of the elements in the set
 are not of type java.security.cert.TrustAnchor
See Also:
getTrustAnchors()


"
PKIXParameters,toString(),String,Returns a formatted string describing the parameters.,"

toString
public String toString()
Returns a formatted string describing the parameters.

Overrides:
toString in class Object
Returns:
a formatted string describing the parameters.


"
PKIXRevocationChecker,clone(),PKIXRevocationChecker,Returns a clone of this object.,"

clone
public PKIXRevocationChecker clone()
Description copied from class: PKIXCertPathChecker
Returns a clone of this object. Calls the Object.clone()
 method.
 All subclasses which maintain state must support and
 override this method, if necessary.

Overrides:
clone in class PKIXCertPathChecker
Returns:
a copy of this PKIXCertPathChecker
See Also:
Cloneable


"
PKIXRevocationChecker,getOcspExtensions(),List<Extension>,Gets the optional OCSP request extensions.,"

getOcspExtensions
public List<Extension> getOcspExtensions()
Gets the optional OCSP request extensions.

Returns:
an unmodifiable list of extensions. The list is empty if no
         extensions have been specified.


"
PKIXRevocationChecker,getOcspResponder(),URI,Gets the URI that identifies the location of the OCSP responder.,"

getOcspResponder
public URI getOcspResponder()
Gets the URI that identifies the location of the OCSP responder. This
 overrides the ocsp.responderURL security property. If this
 parameter or the ocsp.responderURL property is not set, the
 location is determined from the certificate's Authority Information
 Access Extension, as defined in RFC 5280.

Returns:
the responder URI, or null if not set


"
PKIXRevocationChecker,getOcspResponderCert(),X509Certificate,Gets the OCSP responder's certificate.,"

getOcspResponderCert
public X509Certificate getOcspResponderCert()
Gets the OCSP responder's certificate. This overrides the
 ocsp.responderCertSubjectName,
 ocsp.responderCertIssuerName,
 and ocsp.responderCertSerialNumber security properties. If this
 parameter or the aforementioned properties are not set, then the
 responder's certificate is determined as specified in RFC 2560.

Returns:
the responder's certificate, or null if not set


"
PKIXRevocationChecker,getOcspResponses(),"Map<X509Certificate,byte[]>",Gets the OCSP responses.,"

getOcspResponses
public Map<X509Certificate,byte[]> getOcspResponses()
Gets the OCSP responses. These responses are used to determine
 the revocation status of the specified certificates when OCSP is used.

Returns:
a map of OCSP responses. Each key is an
        X509Certificate that maps to the corresponding
        DER-encoded OCSP response for that certificate. A deep copy of
        the map is returned to protect against subsequent modification.
        Returns an empty map if no responses have been specified.


"
PKIXRevocationChecker,getOptions(),Set<PKIXRevocationChecker.Option>,Gets the revocation options.,"

getOptions
public Set<PKIXRevocationChecker.Option> getOptions()
Gets the revocation options.

Returns:
an unmodifiable set of revocation options. The set is empty if
         no options have been specified.


"
PKIXRevocationChecker,getSoftFailExceptions(),abstract List<CertPathValidatorException>,Returns a list containing the exceptions that are ignored by the revocation checker when the SOFT_FAIL option is set.,"

getSoftFailExceptions
public abstract List<CertPathValidatorException> getSoftFailExceptions()
Returns a list containing the exceptions that are ignored by the
 revocation checker when the SOFT_FAIL option
 is set. The list is cleared each time init is called.
 The list is ordered in ascending order according to the certificate
 index returned by getIndex
 method of each entry.
 
 An implementation of PKIXRevocationChecker is responsible for
 adding the ignored exceptions to the list.

Returns:
an unmodifiable list containing the ignored exceptions. The list
         is empty if no exceptions have been ignored.


"
PKIXRevocationChecker,setOcspExtensions(List<Extension> extensions),void,Sets the optional OCSP request extensions.,"

setOcspExtensions
public void setOcspExtensions(List<Extension> extensions)
Sets the optional OCSP request extensions.

Parameters:
extensions - a list of extensions. The list is copied to protect
        against subsequent modification.


"
PKIXRevocationChecker,setOcspResponder(URI uri),void,Sets the URI that identifies the location of the OCSP responder.,"

setOcspResponder
public void setOcspResponder(URI uri)
Sets the URI that identifies the location of the OCSP responder. This
 overrides the ocsp.responderURL security property and any
 responder specified in a certificate's Authority Information Access
 Extension, as defined in RFC 5280.

Parameters:
uri - the responder URI


"
PKIXRevocationChecker,setOcspResponderCert(X509Certificate cert),void,Sets the OCSP responder's certificate.,"

setOcspResponderCert
public void setOcspResponderCert(X509Certificate cert)
Sets the OCSP responder's certificate. This overrides the
 ocsp.responderCertSubjectName,
 ocsp.responderCertIssuerName,
 and ocsp.responderCertSerialNumber security properties.

Parameters:
cert - the responder's certificate


"
PKIXRevocationChecker,"setOcspResponses(Map<X509Certificate,byte[]> responses)",void,Sets the OCSP responses.,"

setOcspResponses
public void setOcspResponses(Map<X509Certificate,byte[]> responses)
Sets the OCSP responses. These responses are used to determine
 the revocation status of the specified certificates when OCSP is used.

Parameters:
responses - a map of OCSP responses. Each key is an
        X509Certificate that maps to the corresponding
        DER-encoded OCSP response for that certificate. A deep copy of
        the map is performed to protect against subsequent modification.


"
PKIXRevocationChecker,setOptions(Set<PKIXRevocationChecker.Option> options),void,Sets the revocation options.,"

setOptions
public void setOptions(Set<PKIXRevocationChecker.Option> options)
Sets the revocation options.

Parameters:
options - a set of revocation options. The set is copied to protect
        against subsequent modification.


"
PolicyQualifierInfo,getEncoded(),byte[],Returns the ASN.1 DER encoded form of this PolicyQualifierInfo.,"

getEncoded
public final byte[] getEncoded()
Returns the ASN.1 DER encoded form of this
 PolicyQualifierInfo.

Returns:
the ASN.1 DER encoded bytes (never null).
 Note that a copy is returned, so the data is cloned each time
 this method is called.


"
PolicyQualifierInfo,getPolicyQualifier(),byte[],Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo.,"

getPolicyQualifier
public final byte[] getPolicyQualifier()
Returns the ASN.1 DER encoded form of the qualifier
 field of this PolicyQualifierInfo.

Returns:
the ASN.1 DER encoded bytes of the qualifier
 field. Note that a copy is returned, so the data is cloned each
 time this method is called.


"
PolicyQualifierInfo,getPolicyQualifierId(),String,Returns the policyQualifierId field of this PolicyQualifierInfo.,"

getPolicyQualifierId
public final String getPolicyQualifierId()
Returns the policyQualifierId field of this
 PolicyQualifierInfo. The policyQualifierId
 is an Object Identifier (OID) represented by a set of nonnegative
 integers separated by periods.

Returns:
the OID (never null)


"
PolicyQualifierInfo,toString(),String,Return a printable representation of this PolicyQualifierInfo.,"

toString
public String toString()
Return a printable representation of this
 PolicyQualifierInfo.

Overrides:
toString in class Object
Returns:
a String describing the contents of this
         PolicyQualifierInfo


"
TrustAnchor,getCA(),X500Principal,Returns the name of the most-trusted CA as an X500Principal.,"

getCA
public final X500Principal getCA()
Returns the name of the most-trusted CA as an X500Principal.

Returns:
the X.500 distinguished name of the most-trusted CA, or
 null if the trust anchor was not specified as a trusted
 public key and name or X500Principal pair
Since:
1.5


"
TrustAnchor,getCAName(),String,Returns the name of the most-trusted CA in RFC 2253 String format.,"

getCAName
public final String getCAName()
Returns the name of the most-trusted CA in RFC 2253 String
 format.

Returns:
the X.500 distinguished name of the most-trusted CA, or
 null if the trust anchor was not specified as a trusted
 public key and name or X500Principal pair


"
TrustAnchor,getCAPublicKey(),PublicKey,Returns the public key of the most-trusted CA.,"

getCAPublicKey
public final PublicKey getCAPublicKey()
Returns the public key of the most-trusted CA.

Returns:
the public key of the most-trusted CA, or null
 if the trust anchor was not specified as a trusted public key and name
 or X500Principal pair


"
TrustAnchor,getNameConstraints(),byte[],Returns the name constraints parameter.,"

getNameConstraints
public final byte[] getNameConstraints()
Returns the name constraints parameter. The specified name constraints
 are associated with this trust anchor and are intended to be used
 as additional constraints when validating an X.509 certification path.
 
 The name constraints are returned as a byte array. This byte array
 contains the DER encoded form of the name constraints, as they
 would appear in the NameConstraints structure defined in RFC 3280
 and X.509. The ASN.1 notation for this structure is supplied in the
 documentation for
 TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) .
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
a byte array containing the ASN.1 DER encoding of
         a NameConstraints extension used for checking name constraints,
         or null if not set.


"
TrustAnchor,getTrustedCert(),X509Certificate,Returns the most-trusted CA certificate.,"

getTrustedCert
public final X509Certificate getTrustedCert()
Returns the most-trusted CA certificate.

Returns:
a trusted X509Certificate or null
 if the trust anchor was not specified as a trusted certificate


"
TrustAnchor,toString(),String,Returns a formatted string describing the TrustAnchor.,"

toString
public String toString()
Returns a formatted string describing the TrustAnchor.

Overrides:
toString in class Object
Returns:
a formatted string describing the TrustAnchor


"
X509Certificate,checkValidity(),abstract void,Checks that the certificate is currently valid.,"

checkValidity
public abstract void checkValidity()
                            throws CertificateExpiredException,
                                   CertificateNotYetValidException
Checks that the certificate is currently valid. It is if
 the current date and time are within the validity period given in the
 certificate.
 
 The validity period consists of two date/time values:
 the first and last dates (and times) on which the certificate
 is valid. It is defined in
 ASN.1 as:
 
 validity             Validity

 Validity ::= SEQUENCE {
     notBefore      CertificateValidityDate,
     notAfter       CertificateValidityDate }

 CertificateValidityDate ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }
 

Throws:
CertificateExpiredException - if the certificate has expired.
CertificateNotYetValidException - if the certificate is not
 yet valid.


"
X509Certificate,checkValidity(Date date),abstract void,Checks that the given date is within the certificate's validity period.,"

checkValidity
public abstract void checkValidity(Date date)
                            throws CertificateExpiredException,
                                   CertificateNotYetValidException
Checks that the given date is within the certificate's
 validity period. In other words, this determines whether the
 certificate would be valid at the given date/time.

Parameters:
date - the Date to check against to see if this certificate
        is valid at that date/time.
Throws:
CertificateExpiredException - if the certificate has expired
 with respect to the date supplied.
CertificateNotYetValidException - if the certificate is not
 yet valid with respect to the date supplied.
See Also:
checkValidity()


"
X509Certificate,getBasicConstraints(),abstract int,"Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19).","

getBasicConstraints
public abstract int getBasicConstraints()
Gets the certificate constraints path length from the
 critical BasicConstraints extension, (OID = 2.5.29.19).
 
 The basic constraints extension identifies whether the subject
 of the certificate is a Certificate Authority (CA) and
 how deep a certification path may exist through that CA. The
 pathLenConstraint field (see below) is meaningful
 only if cA is set to TRUE. In this case, it gives the
 maximum number of CA certificates that may follow this certificate in a
 certification path. A value of zero indicates that only an end-entity
 certificate may follow in the path.
 
 The ASN.1 definition for this is:
 
 BasicConstraints ::= SEQUENCE {
     cA                  BOOLEAN DEFAULT FALSE,
     pathLenConstraint   INTEGER (0..MAX) OPTIONAL }
 

Returns:
the value of pathLenConstraint if the
 BasicConstraints extension is present in the certificate and the
 subject of the certificate is a CA, otherwise -1.
 If the subject of the certificate is a CA and
 pathLenConstraint does not appear,
 Integer.MAX_VALUE is returned to indicate that there is no
 limit to the allowed length of the certification path.


"
X509Certificate,getExtendedKeyUsage(),List<String>,"Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37).","

getExtendedKeyUsage
public List<String> getExtendedKeyUsage()
                                 throws CertificateParsingException
Gets an unmodifiable list of Strings representing the OBJECT
 IDENTIFIERs of the ExtKeyUsageSyntax field of the
 extended key usage extension, (OID = 2.5.29.37).  It indicates
 one or more purposes for which the certified public key may be
 used, in addition to or in place of the basic purposes
 indicated in the key usage extension field.  The ASN.1
 definition for this is:
 
 ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

 KeyPurposeId ::= OBJECT IDENTIFIER
 

 Key purposes may be defined by any organization with a
 need. Object identifiers used to identify key purposes shall be
 assigned in accordance with IANA or ITU-T Rec. X.660 |
 ISO/IEC/ITU 9834-1.
 
 This method was added to version 1.4 of the Java 2 Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method is not abstract
 and it provides a default implementation. Subclasses
 should override this method with a correct implementation.

Returns:
the ExtendedKeyUsage extension of this certificate,
         as an unmodifiable list of object identifiers represented
         as Strings. Returns null if this certificate does not
         contain an ExtendedKeyUsage extension.
Throws:
CertificateParsingException - if the extension cannot be decoded
Since:
1.4


"
X509Certificate,getIssuerAlternativeNames(),Collection<List<?>>,"Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18).","

getIssuerAlternativeNames
public Collection<List<?>> getIssuerAlternativeNames()
                                              throws CertificateParsingException
Gets an immutable collection of issuer alternative names from the
 IssuerAltName extension, (OID = 2.5.29.18).
 
 The ASN.1 definition of the IssuerAltName extension is:
 
 IssuerAltName ::= GeneralNames
 
 The ASN.1 definition of GeneralNames is defined
 in getSubjectAlternativeNames.
 
 If this certificate does not contain an IssuerAltName
 extension, null is returned. Otherwise, a
 Collection is returned with an entry representing each
 GeneralName included in the extension. Each entry is a
 List whose first entry is an Integer
 (the name type, 0-8) and whose second entry is a String
 or a byte array (the name, in string or ASN.1 DER encoded form,
 respectively). For more details about the formats used for each
 name type, see the getSubjectAlternativeNames method.
 
 Note that the Collection returned may contain more
 than one name of the same type. Also, note that the returned
 Collection is immutable and any entries containing byte
 arrays are cloned to protect against subsequent modifications.
 
 This method was added to version 1.4 of the Java 2 Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method is not abstract
 and it provides a default implementation. Subclasses
 should override this method with a correct implementation.

Returns:
an immutable Collection of issuer alternative
 names (or null)
Throws:
CertificateParsingException - if the extension cannot be decoded
Since:
1.4


"
X509Certificate,getIssuerDN(),abstract Principal,"Denigrated, replaced by getIssuerX500Principal().","

getIssuerDN
public abstract Principal getIssuerDN()
Denigrated, replaced by getIssuerX500Principal(). This method returns the issuer
 as an implementation specific Principal object, which should not be
 relied upon by portable code.

 
 Gets the issuer (issuer distinguished name) value from
 the certificate. The issuer name identifies the entity that signed (and
 issued) the certificate.

 The issuer name field contains an
 X.500 distinguished name (DN).
 The ASN.1 definition for this is:
 
 issuer    Name

 Name ::= CHOICE { RDNSequence }
 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 RelativeDistinguishedName ::=
     SET OF AttributeValueAssertion

 AttributeValueAssertion ::= SEQUENCE {
                               AttributeType,
                               AttributeValue }
 AttributeType ::= OBJECT IDENTIFIER
 AttributeValue ::= ANY
 
 The Name describes a hierarchical name composed of
 attributes,
 such as country name, and corresponding values, such as US.
 The type of the AttributeValue component is determined by
 the AttributeType; in general it will be a
 directoryString. A directoryString is usually
 one of PrintableString,
 TeletexString or UniversalString.

Returns:
a Principal whose name is the issuer distinguished name.


"
X509Certificate,getIssuerUniqueID(),abstract boolean[],Gets the issuerUniqueID value from the certificate.,"

getIssuerUniqueID
public abstract boolean[] getIssuerUniqueID()
Gets the issuerUniqueID value from the certificate.
 The issuer unique identifier is present in the certificate
 to handle the possibility of reuse of issuer names over time.
 RFC 3280 recommends that names not be reused and that
 conforming certificates not make use of unique identifiers.
 Applications conforming to that profile should be capable of
 parsing unique identifiers and making comparisons.

 The ASN.1 definition for this is:
 
 issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL

 UniqueIdentifier  ::=  BIT STRING
 

Returns:
the issuer unique identifier or null if it is not
 present in the certificate.


"
X509Certificate,getIssuerX500Principal(),X500Principal,Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal.,"

getIssuerX500Principal
public X500Principal getIssuerX500Principal()
Returns the issuer (issuer distinguished name) value from the
 certificate as an X500Principal.
 
 It is recommended that subclasses override this method.

Returns:
an X500Principal representing the issuer
          distinguished name
Since:
1.4


"
X509Certificate,getKeyUsage(),abstract boolean[],"Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15).","

getKeyUsage
public abstract boolean[] getKeyUsage()
Gets a boolean array representing bits of
 the KeyUsage extension, (OID = 2.5.29.15).
 The key usage extension defines the purpose (e.g., encipherment,
 signature, certificate signing) of the key contained in the
 certificate.
 The ASN.1 definition for this is:
 
 KeyUsage ::= BIT STRING {
     digitalSignature        (0),
     nonRepudiation          (1),
     keyEncipherment         (2),
     dataEncipherment        (3),
     keyAgreement            (4),
     keyCertSign             (5),
     cRLSign                 (6),
     encipherOnly            (7),
     decipherOnly            (8) }
 
 RFC 3280 recommends that when used, this be marked
 as a critical extension.

Returns:
the KeyUsage extension of this certificate, represented as
 an array of booleans. The order of KeyUsage values in the array is
 the same as in the above ASN.1 definition. The array will contain a
 value for each KeyUsage defined above. If the KeyUsage list encoded
 in the certificate is longer than the above list, it will not be
 truncated. Returns null if this certificate does not
 contain a KeyUsage extension.


"
X509Certificate,getNotAfter(),abstract Date,Gets the notAfter date from the validity period of the certificate.,"

getNotAfter
public abstract Date getNotAfter()
Gets the notAfter date from the validity period of
 the certificate. See getNotBefore
 for relevant ASN.1 definitions.

Returns:
the end date of the validity period.
See Also:
checkValidity()


"
X509Certificate,getNotBefore(),abstract Date,Gets the notBefore date from the validity period of the certificate.,"

getNotBefore
public abstract Date getNotBefore()
Gets the notBefore date from the validity period of
 the certificate.
 The relevant ASN.1 definitions are:
 
 validity             Validity

 Validity ::= SEQUENCE {
     notBefore      CertificateValidityDate,
     notAfter       CertificateValidityDate }

 CertificateValidityDate ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }
 

Returns:
the start date of the validity period.
See Also:
checkValidity()


"
X509Certificate,getSerialNumber(),abstract BigInteger,Gets the serialNumber value from the certificate.,"

getSerialNumber
public abstract BigInteger getSerialNumber()
Gets the serialNumber value from the certificate.
 The serial number is an integer assigned by the certification
 authority to each certificate. It must be unique for each
 certificate issued by a given CA (i.e., the issuer name and
 serial number identify a unique certificate).
 The ASN.1 definition for this is:
 
 serialNumber     CertificateSerialNumber

 CertificateSerialNumber  ::=  INTEGER
 

Returns:
the serial number.


"
X509Certificate,getSigAlgName(),abstract String,Gets the signature algorithm name for the certificate signature algorithm.,"

getSigAlgName
public abstract String getSigAlgName()
Gets the signature algorithm name for the certificate
 signature algorithm. An example is the string ""SHA256withRSA"".
 The ASN.1 definition for this is:
 
 signatureAlgorithm   AlgorithmIdentifier

 AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm               OBJECT IDENTIFIER,
     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                             -- contains a value of the type
                             -- registered for use with the
                             -- algorithm object identifier value
 
The algorithm name is determined from the algorithm
 OID string.

Returns:
the signature algorithm name.


"
X509Certificate,getSigAlgOID(),abstract String,Gets the signature algorithm OID string from the certificate.,"

getSigAlgOID
public abstract String getSigAlgOID()
Gets the signature algorithm OID string from the certificate.
 An OID is represented by a set of nonnegative whole numbers separated
 by periods.
 For example, the string ""1.2.840.10040.4.3"" identifies the SHA-1
 with DSA signature algorithm defined in
 RFC 3279: Algorithms and
 Identifiers for the Internet X.509 Public Key Infrastructure Certificate
 and CRL Profile.

 See getSigAlgName for
 relevant ASN.1 definitions.

Returns:
the signature algorithm OID string.


"
X509Certificate,getSigAlgParams(),abstract byte[],Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm.,"

getSigAlgParams
public abstract byte[] getSigAlgParams()
Gets the DER-encoded signature algorithm parameters from this
 certificate's signature algorithm. In most cases, the signature
 algorithm parameters are null; the parameters are usually
 supplied with the certificate's public key.
 If access to individual parameter values is needed then use
 AlgorithmParameters
 and instantiate with the name returned by
 getSigAlgName.

 See getSigAlgName for
 relevant ASN.1 definitions.

Returns:
the DER-encoded signature algorithm parameters, or
         null if no parameters are present.


"
X509Certificate,getSignature(),abstract byte[],Gets the signature value (the raw signature bits) from the certificate.,"

getSignature
public abstract byte[] getSignature()
Gets the signature value (the raw signature bits) from
 the certificate.
 The ASN.1 definition for this is:
 
 signature     BIT STRING
 

Returns:
the signature.


"
X509Certificate,getSubjectAlternativeNames(),Collection<List<?>>,"Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17).","

getSubjectAlternativeNames
public Collection<List<?>> getSubjectAlternativeNames()
                                               throws CertificateParsingException
Gets an immutable collection of subject alternative names from the
 SubjectAltName extension, (OID = 2.5.29.17).
 
 The ASN.1 definition of the SubjectAltName extension is:
 
 SubjectAltName ::= GeneralNames

 GeneralNames :: = SEQUENCE SIZE (1..MAX) OF GeneralName

 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
 

 If this certificate does not contain a SubjectAltName
 extension, null is returned. Otherwise, a
 Collection is returned with an entry representing each
 GeneralName included in the extension. Each entry is a
 List whose first entry is an Integer
 (the name type, 0-8) and whose second entry is a String
 or a byte array (the name, in string or ASN.1 DER encoded form,
 respectively).
 
RFC 822, DNS, and URI
 names are returned as Strings,
 using the well-established string formats for those types (subject to
 the restrictions included in RFC 3280). IPv4 address names are
 returned using dotted quad notation. IPv6 address names are returned
 in the form ""a1:a2:...:a8"", where a1-a8 are hexadecimal values
 representing the eight 16-bit pieces of the address. OID names are
 returned as Strings represented as a series of nonnegative
 integers separated by periods. And directory names (distinguished names)
 are returned in 
 RFC 2253 string format. No standard string format is
 defined for otherNames, X.400 names, EDI party names, or any
 other type of names. They are returned as byte arrays
 containing the ASN.1 DER encoded form of the name.
 
 Note that the Collection returned may contain more
 than one name of the same type. Also, note that the returned
 Collection is immutable and any entries containing byte
 arrays are cloned to protect against subsequent modifications.
 
 This method was added to version 1.4 of the Java 2 Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method is not abstract
 and it provides a default implementation. Subclasses
 should override this method with a correct implementation.

Returns:
an immutable Collection of subject alternative
 names (or null)
Throws:
CertificateParsingException - if the extension cannot be decoded
Since:
1.4


"
X509Certificate,getSubjectDN(),abstract Principal,"Denigrated, replaced by getSubjectX500Principal().","

getSubjectDN
public abstract Principal getSubjectDN()
Denigrated, replaced by getSubjectX500Principal(). This method returns the subject
 as an implementation specific Principal object, which should not be
 relied upon by portable code.

 
 Gets the subject (subject distinguished name) value
 from the certificate.  If the subject value is empty,
 then the getName() method of the returned
 Principal object returns an empty string ("""").

  The ASN.1 definition for this is:
 
 subject    Name
 
See getIssuerDN for Name
 and other relevant definitions.

Returns:
a Principal whose name is the subject name.


"
X509Certificate,getSubjectUniqueID(),abstract boolean[],Gets the subjectUniqueID value from the certificate.,"

getSubjectUniqueID
public abstract boolean[] getSubjectUniqueID()
Gets the subjectUniqueID value from the certificate.

 The ASN.1 definition for this is:
 
 subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL

 UniqueIdentifier  ::=  BIT STRING
 

Returns:
the subject unique identifier or null if it is not
 present in the certificate.


"
X509Certificate,getSubjectX500Principal(),X500Principal,Returns the subject (subject distinguished name) value from the certificate as an X500Principal.,"

getSubjectX500Principal
public X500Principal getSubjectX500Principal()
Returns the subject (subject distinguished name) value from the
 certificate as an X500Principal.  If the subject value
 is empty, then the getName() method of the returned
 X500Principal object returns an empty string ("""").
 
 It is recommended that subclasses override this method.

Returns:
an X500Principal representing the subject
          distinguished name
Since:
1.4


"
X509Certificate,getTBSCertificate(),abstract byte[],"Gets the DER-encoded certificate information, the tbsCertificate from this certificate.","

getTBSCertificate
public abstract byte[] getTBSCertificate()
                                  throws CertificateEncodingException
Gets the DER-encoded certificate information, the
 tbsCertificate from this certificate.
 This can be used to verify the signature independently.

Returns:
the DER-encoded certificate information.
Throws:
CertificateEncodingException - if an encoding error occurs.


"
X509Certificate,getVersion(),abstract int,Gets the version (version number) value from the certificate.,"

getVersion
public abstract int getVersion()
Gets the version (version number) value from the
 certificate.
 The ASN.1 definition for this is:
 
 version  [0] EXPLICIT Version DEFAULT v1

 Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
 

Returns:
the version number, i.e. 1, 2 or 3.


"
X509Certificate,"verify(PublicKey key, Provider sigProvider)",void,Verifies that this certificate was signed using the private key that corresponds to the specified public key.,"

verify
public void verify(PublicKey key,
                   Provider sigProvider)
            throws CertificateException,
                   NoSuchAlgorithmException,
                   InvalidKeyException,
                   SignatureException
Verifies that this certificate was signed using the
 private key that corresponds to the specified public key.
 This method uses the signature verification engine
 supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the provider list.

 This method was added to version 1.8 of the Java Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method is not abstract
 and it provides a default implementation.

Overrides:
verify in class Certificate
Parameters:
key - the PublicKey used to carry out the verification.
sigProvider - the signature provider.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
SignatureException - on signature errors.
CertificateException - on encoding errors.
UnsupportedOperationException - if the method is not supported
Since:
1.8


"
X509CertSelector,"addPathToName(int type, byte[] name)",void,Adds a name to the pathToNames criterion.,"

addPathToName
public void addPathToName(int type,
                          byte[] name)
                   throws IOException
Adds a name to the pathToNames criterion. The X509Certificate
 must not include name constraints that would prohibit building a
 path to the specified name.
 
 This method allows the caller to add a name to the set of names which
 the X509Certificates's name constraints must permit.
 The specified name is added to any previous value for the
 pathToNames criterion. If the name is a duplicate, it may be ignored.
 
 The name is provided as a byte array. This byte array should contain
 the DER encoded name, as it would appear in the GeneralName structure
 defined in RFC 3280 and X.509. The ASN.1 definition of this structure
 appears in the documentation for
 addSubjectAlternativeName(int type, byte [] name).
 
 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
type - the name type (0-8, as specified in
             RFC 3280, section 4.2.1.7)
name - a byte array containing the name in ASN.1 DER encoded form
Throws:
IOException - if a parsing error occurs


"
X509CertSelector,"addPathToName(int type, String name)",void,Adds a name to the pathToNames criterion.,"

addPathToName
public void addPathToName(int type,
                          String name)
                   throws IOException
Adds a name to the pathToNames criterion. The X509Certificate
 must not include name constraints that would prohibit building a
 path to the specified name.
 
 This method allows the caller to add a name to the set of names which
 the X509Certificates's name constraints must permit.
 The specified name is added to any previous value for the
 pathToNames criterion.  If the name is a duplicate, it may be ignored.
 
 The name is provided in string format. RFC 822, DNS, and URI names
 use the well-established string formats for those types (subject to
 the restrictions included in RFC 3280). IPv4 address names are
 supplied using dotted quad notation. OID address names are represented
 as a series of nonnegative integers separated by periods. And
 directory names (distinguished names) are supplied in RFC 2253 format.
 No standard string format is defined for otherNames, X.400 names,
 EDI party names, IPv6 address names, or any other type of names. They
 should be specified using the
 addPathToName(int type, byte [] name) method.
 
Note: for distinguished names, use
 addPathToName(int, byte[]) instead.
 This method should not be relied on as it can fail to match some
 certificates because of a loss of encoding information in the RFC 2253
 String form of some distinguished names.

Parameters:
type - the name type (0-8, as specified in
             RFC 3280, section 4.2.1.7)
name - the name in string form
Throws:
IOException - if a parsing error occurs


"
X509CertSelector,"addSubjectAlternativeName(int type, byte[] name)",void,Adds a name to the subjectAlternativeNames criterion.,"

addSubjectAlternativeName
public void addSubjectAlternativeName(int type,
                                      byte[] name)
                               throws IOException
Adds a name to the subjectAlternativeNames criterion. The
 X509Certificate must contain all or at least one
 of the specified subjectAlternativeNames, depending on the value of
 the matchAllNames flag (see setMatchAllSubjectAltNames).
 
 This method allows the caller to add a name to the set of subject
 alternative names.
 The specified name is added to any previous value for the
 subjectAlternativeNames criterion. If the specified name is a
 duplicate, it may be ignored.
 
 The name is provided as a byte array. This byte array should contain
 the DER encoded name, as it would appear in the GeneralName structure
 defined in RFC 3280 and X.509. The encoded byte array should only contain
 the encoded value of the name, and should not include the tag associated
 with the name in the GeneralName structure. The ASN.1 definition of this
 structure appears below.
 
  GeneralName ::= CHOICE {
       otherName                       [0]     OtherName,
       rfc822Name                      [1]     IA5String,
       dNSName                         [2]     IA5String,
       x400Address                     [3]     ORAddress,
       directoryName                   [4]     Name,
       ediPartyName                    [5]     EDIPartyName,
       uniformResourceIdentifier       [6]     IA5String,
       iPAddress                       [7]     OCTET STRING,
       registeredID                    [8]     OBJECT IDENTIFIER}
 

 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
type - the name type (0-8, as listed above)
name - a byte array containing the name in ASN.1 DER encoded form
Throws:
IOException - if a parsing error occurs


"
X509CertSelector,"addSubjectAlternativeName(int type, String name)",void,Adds a name to the subjectAlternativeNames criterion.,"

addSubjectAlternativeName
public void addSubjectAlternativeName(int type,
                                      String name)
                               throws IOException
Adds a name to the subjectAlternativeNames criterion. The
 X509Certificate must contain all or at least one
 of the specified subjectAlternativeNames, depending on the value of
 the matchAllNames flag (see setMatchAllSubjectAltNames).
 
 This method allows the caller to add a name to the set of subject
 alternative names.
 The specified name is added to any previous value for the
 subjectAlternativeNames criterion. If the specified name is a
 duplicate, it may be ignored.
 
 The name is provided in string format.
 RFC 822, DNS, and URI
 names use the well-established string formats for those types (subject to
 the restrictions included in RFC 3280). IPv4 address names are
 supplied using dotted quad notation. OID address names are represented
 as a series of nonnegative integers separated by periods. And
 directory names (distinguished names) are supplied in RFC 2253 format.
 No standard string format is defined for otherNames, X.400 names,
 EDI party names, IPv6 address names, or any other type of names. They
 should be specified using the
 addSubjectAlternativeName(int type, byte [] name)
 method.
 
Note: for distinguished names, use
 addSubjectAlternativeName(int, byte[]) instead.
 This method should not be relied on as it can fail to match some
 certificates because of a loss of encoding information in the RFC 2253
 String form of some distinguished names.

Parameters:
type - the name type (0-8, as specified in
             RFC 3280, section 4.2.1.7)
name - the name in string form (not null)
Throws:
IOException - if a parsing error occurs


"
X509CertSelector,clone(),Object,Returns a copy of this object.,"

clone
public Object clone()
Returns a copy of this object.

Specified by:
clone in interface CertSelector
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
X509CertSelector,getAuthorityKeyIdentifier(),byte[],Returns the authorityKeyIdentifier criterion.,"

getAuthorityKeyIdentifier
public byte[] getAuthorityKeyIdentifier()
Returns the authorityKeyIdentifier criterion. The
 X509Certificate must contain a AuthorityKeyIdentifier
 extension with the specified value. If null, no
 authorityKeyIdentifier check will be done.
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
the key identifier (or null)
See Also:
setAuthorityKeyIdentifier(byte[])


"
X509CertSelector,getBasicConstraints(),int,Returns the basic constraints constraint.,"

getBasicConstraints
public int getBasicConstraints()
Returns the basic constraints constraint. If the value is greater than
 or equal to zero, the X509Certificates must include a
 basicConstraints extension with a pathLen of at least this value.
 If the value is -2, only end-entity certificates are accepted. If
 the value is -1, no basicConstraints check is done.

Returns:
the value for the basic constraints constraint
See Also:
setBasicConstraints(int)


"
X509CertSelector,getCertificate(),X509Certificate,Returns the certificateEquals criterion.,"

getCertificate
public X509Certificate getCertificate()
Returns the certificateEquals criterion. The specified
 X509Certificate must be equal to the
 X509Certificate passed to the match method.
 If null, this check is not applied.

Returns:
the X509Certificate to match (or null)
See Also:
setCertificate(java.security.cert.X509Certificate)


"
X509CertSelector,getCertificateValid(),Date,Returns the certificateValid criterion.,"

getCertificateValid
public Date getCertificateValid()
Returns the certificateValid criterion. The specified date must fall
 within the certificate validity period for the
 X509Certificate. If null, no certificateValid
 check will be done.
 
 Note that the Date returned is cloned to protect against
 subsequent modifications.

Returns:
the Date to check (or null)
See Also:
setCertificateValid(java.util.Date)


"
X509CertSelector,getExtendedKeyUsage(),Set<String>,Returns the extendedKeyUsage criterion.,"

getExtendedKeyUsage
public Set<String> getExtendedKeyUsage()
Returns the extendedKeyUsage criterion. The X509Certificate
 must allow the specified key purposes in its extended key usage
 extension. If the keyPurposeSet returned is empty or
 null, no extendedKeyUsage check will be done. Note that an
 X509Certificate that has no extendedKeyUsage extension
 implicitly allows all key purposes.

Returns:
an immutable Set of key purpose OIDs in string
 format (or null)
See Also:
setExtendedKeyUsage(java.util.Set<java.lang.String>)


"
X509CertSelector,getIssuer(),X500Principal,Returns the issuer criterion as an X500Principal.,"

getIssuer
public X500Principal getIssuer()
Returns the issuer criterion as an X500Principal. This
 distinguished name must match the issuer distinguished name in the
 X509Certificate. If null, the issuer criterion
 is disabled and any issuer distinguished name will do.

Returns:
the required issuer distinguished name as X500Principal
         (or null)
Since:
1.5


"
X509CertSelector,getIssuerAsBytes(),byte[],Returns the issuer criterion as a byte array.,"

getIssuerAsBytes
public byte[] getIssuerAsBytes()
                        throws IOException
Returns the issuer criterion as a byte array. This distinguished name
 must match the issuer distinguished name in the
 X509Certificate. If null, the issuer criterion
 is disabled and any issuer distinguished name will do.
 
 If the value returned is not null, it is a byte
 array containing a single DER encoded distinguished name, as defined in
 X.501. The ASN.1 notation for this structure is supplied in the
 documentation for
 setIssuer(byte [] issuerDN).
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
a byte array containing the required issuer distinguished name
         in ASN.1 DER format (or null)
Throws:
IOException - if an encoding error occurs


"
X509CertSelector,getIssuerAsString(),String,"Denigrated, use getIssuer() or getIssuerAsBytes() instead.","

getIssuerAsString
public String getIssuerAsString()
Denigrated, use getIssuer() or
 getIssuerAsBytes() instead. This method should not be
 relied on as it can fail to match some certificates because of a loss of
 encoding information in the RFC 2253 String form of some distinguished
 names.
 
 Returns the issuer criterion as a String. This
 distinguished name must match the issuer distinguished name in the
 X509Certificate. If null, the issuer criterion
 is disabled and any issuer distinguished name will do.
 
 If the value returned is not null, it is a
 distinguished name, in RFC 2253 format.

Returns:
the required issuer distinguished name in RFC 2253 format
         (or null)


"
X509CertSelector,getKeyUsage(),boolean[],Returns the keyUsage criterion.,"

getKeyUsage
public boolean[] getKeyUsage()
Returns the keyUsage criterion. The X509Certificate
 must allow the specified keyUsage values. If null, no keyUsage
 check will be done.
 
 Note that the boolean array returned is cloned to protect against
 subsequent modifications.

Returns:
a boolean array in the same format as the boolean
                 array returned by
 X509Certificate.getKeyUsage().
                 Or null.
See Also:
setKeyUsage(boolean[])


"
X509CertSelector,getMatchAllSubjectAltNames(),boolean,Indicates if the X509Certificate must contain all or at least one of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods.,"

getMatchAllSubjectAltNames
public boolean getMatchAllSubjectAltNames()
Indicates if the X509Certificate must contain all
 or at least one of the subjectAlternativeNames
 specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If true,
 the X509Certificate must contain all of the
 specified subject alternative names. If false, the
 X509Certificate must contain at least one of the
 specified subject alternative names.

Returns:
true if the flag is enabled;
 false if the flag is disabled. The flag is
 true by default.
See Also:
setMatchAllSubjectAltNames(boolean)


"
X509CertSelector,getNameConstraints(),byte[],Returns the name constraints criterion.,"

getNameConstraints
public byte[] getNameConstraints()
Returns the name constraints criterion. The X509Certificate
 must have subject and subject alternative names that
 meet the specified name constraints.
 
 The name constraints are returned as a byte array. This byte array
 contains the DER encoded form of the name constraints, as they
 would appear in the NameConstraints structure defined in RFC 3280
 and X.509. The ASN.1 notation for this structure is supplied in the
 documentation for
 setNameConstraints(byte [] bytes).
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
a byte array containing the ASN.1 DER encoding of
         a NameConstraints extension used for checking name constraints.
         null if no name constraints check will be performed.
See Also:
setNameConstraints(byte[])


"
X509CertSelector,getPathToNames(),Collection<List<?>>,Returns a copy of the pathToNames criterion.,"

getPathToNames
public Collection<List<?>> getPathToNames()
Returns a copy of the pathToNames criterion. The
 X509Certificate must not include name constraints that would
 prohibit building a path to the specified names. If the value
 returned is null, no pathToNames check will be performed.
 
 If the value returned is not null, it is a
 Collection with one
 entry for each name to be included in the pathToNames
 criterion. Each entry is a List whose first entry is an
 Integer (the name type, 0-8) and whose second
 entry is a String or a byte array (the name, in
 string or ASN.1 DER encoded form, respectively).
 There can be multiple names of the same type. Note that the
 Collection returned may contain duplicate names (same
 name and name type).
 
 Each name in the Collection
 may be specified either as a String or as an ASN.1 encoded
 byte array. For more details about the formats used, see
 addPathToName(int type, String name) and
 addPathToName(int type, byte [] name).
 
 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Returns:
a Collection of names (or null)
See Also:
setPathToNames(java.util.Collection<java.util.List<?>>)


"
X509CertSelector,getPolicy(),Set<String>,Returns the policy criterion.,"

getPolicy
public Set<String> getPolicy()
Returns the policy criterion. The X509Certificate must
 include at least one of the specified policies in its certificate policies
 extension. If the Set returned is empty, then the
 X509Certificate must include at least some specified policy
 in its certificate policies extension. If the Set returned is
 null, no policy check will be performed.

Returns:
an immutable Set of certificate policy OIDs in
         string format (or null)
See Also:
setPolicy(java.util.Set<java.lang.String>)


"
X509CertSelector,getPrivateKeyValid(),Date,Returns the privateKeyValid criterion.,"

getPrivateKeyValid
public Date getPrivateKeyValid()
Returns the privateKeyValid criterion. The specified date must fall
 within the private key validity period for the
 X509Certificate. If null, no privateKeyValid
 check will be done.
 
 Note that the Date returned is cloned to protect against
 subsequent modifications.

Returns:
the Date to check (or null)
See Also:
setPrivateKeyValid(java.util.Date)


"
X509CertSelector,getSerialNumber(),BigInteger,Returns the serialNumber criterion.,"

getSerialNumber
public BigInteger getSerialNumber()
Returns the serialNumber criterion. The specified serial number
 must match the certificate serial number in the
 X509Certificate. If null, any certificate
 serial number will do.

Returns:
the certificate serial number to match
                (or null)
See Also:
setSerialNumber(java.math.BigInteger)


"
X509CertSelector,getSubject(),X500Principal,Returns the subject criterion as an X500Principal.,"

getSubject
public X500Principal getSubject()
Returns the subject criterion as an X500Principal. This
 distinguished name must match the subject distinguished name in the
 X509Certificate. If null, the subject criterion
 is disabled and any subject distinguished name will do.

Returns:
the required subject distinguished name as X500Principal
         (or null)
Since:
1.5


"
X509CertSelector,getSubjectAlternativeNames(),Collection<List<?>>,Returns a copy of the subjectAlternativeNames criterion.,"

getSubjectAlternativeNames
public Collection<List<?>> getSubjectAlternativeNames()
Returns a copy of the subjectAlternativeNames criterion.
 The X509Certificate must contain all or at least one
 of the specified subjectAlternativeNames, depending on the value
 of the matchAllNames flag (see getMatchAllSubjectAltNames). If the value returned is
 null, no subjectAlternativeNames check will be performed.
 
 If the value returned is not null, it is a
 Collection with
 one entry for each name to be included in the subject alternative name
 criterion. Each entry is a List whose first entry is an
 Integer (the name type, 0-8) and whose second
 entry is a String or a byte array (the name, in
 string or ASN.1 DER encoded form, respectively).
 There can be multiple names of the same type.  Note that the
 Collection returned may contain duplicate names (same name
 and name type).
 
 Each subject alternative name in the Collection
 may be specified either as a String or as an ASN.1 encoded
 byte array. For more details about the formats used, see
 addSubjectAlternativeName(int type, String name) and
 addSubjectAlternativeName(int type, byte [] name).
 
 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Returns:
a Collection of names (or null)
See Also:
setSubjectAlternativeNames(java.util.Collection<java.util.List<?>>)


"
X509CertSelector,getSubjectAsBytes(),byte[],Returns the subject criterion as a byte array.,"

getSubjectAsBytes
public byte[] getSubjectAsBytes()
                         throws IOException
Returns the subject criterion as a byte array. This distinguished name
 must match the subject distinguished name in the
 X509Certificate. If null, the subject criterion
 is disabled and any subject distinguished name will do.
 
 If the value returned is not null, it is a byte
 array containing a single DER encoded distinguished name, as defined in
 X.501. The ASN.1 notation for this structure is supplied in the
 documentation for
 setSubject(byte [] subjectDN).
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
a byte array containing the required subject distinguished name
         in ASN.1 DER format (or null)
Throws:
IOException - if an encoding error occurs


"
X509CertSelector,getSubjectAsString(),String,"Denigrated, use getSubject() or getSubjectAsBytes() instead.","

getSubjectAsString
public String getSubjectAsString()
Denigrated, use getSubject() or
 getSubjectAsBytes() instead. This method should not be
 relied on as it can fail to match some certificates because of a loss of
 encoding information in the RFC 2253 String form of some distinguished
 names.
 
 Returns the subject criterion as a String. This
 distinguished name must match the subject distinguished name in the
 X509Certificate. If null, the subject criterion
 is disabled and any subject distinguished name will do.
 
 If the value returned is not null, it is a
 distinguished name, in RFC 2253 format.

Returns:
the required subject distinguished name in RFC 2253 format
         (or null)


"
X509CertSelector,getSubjectKeyIdentifier(),byte[],Returns the subjectKeyIdentifier criterion.,"

getSubjectKeyIdentifier
public byte[] getSubjectKeyIdentifier()
Returns the subjectKeyIdentifier criterion. The
 X509Certificate must contain a SubjectKeyIdentifier
 extension with the specified value. If null, no
 subjectKeyIdentifier check will be done.
 
 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
the key identifier (or null)
See Also:
setSubjectKeyIdentifier(byte[])


"
X509CertSelector,getSubjectPublicKey(),PublicKey,Returns the subjectPublicKey criterion.,"

getSubjectPublicKey
public PublicKey getSubjectPublicKey()
Returns the subjectPublicKey criterion. The
 X509Certificate must contain the specified subject
 public key. If null, no subjectPublicKey check will be done.

Returns:
the subject public key to check for (or null)
See Also:
setSubjectPublicKey(java.security.PublicKey)


"
X509CertSelector,getSubjectPublicKeyAlgID(),String,Returns the subjectPublicKeyAlgID criterion.,"

getSubjectPublicKeyAlgID
public String getSubjectPublicKeyAlgID()
Returns the subjectPublicKeyAlgID criterion. The
 X509Certificate must contain a subject public key
 with the specified algorithm. If null, no
 subjectPublicKeyAlgID check will be done.

Returns:
the object identifier (OID) of the signature algorithm to check
         for (or null). An OID is represented by a set of
         nonnegative integers separated by periods.
See Also:
setSubjectPublicKeyAlgID(java.lang.String)


"
X509CertSelector,match(Certificate cert),boolean,Decides whether a Certificate should be selected.,"

match
public boolean match(Certificate cert)
Decides whether a Certificate should be selected.

Specified by:
match in interface CertSelector
Parameters:
cert - the Certificate to be checked
Returns:
true if the Certificate should be
         selected, false otherwise


"
X509CertSelector,setAuthorityKeyIdentifier(byte[] authorityKeyID),void,Sets the authorityKeyIdentifier criterion.,"

setAuthorityKeyIdentifier
public void setAuthorityKeyIdentifier(byte[] authorityKeyID)
Sets the authorityKeyIdentifier criterion. The
 X509Certificate must contain an
 AuthorityKeyIdentifier extension for which the contents of the
 extension value matches the specified criterion value.
 If the criterion value is null, no
 authorityKeyIdentifier check will be done.
 
 If authorityKeyID is not null, it
 should contain a single DER encoded value corresponding to the contents
 of the extension value (not including the object identifier,
 criticality setting, and encapsulating OCTET STRING)
 for an AuthorityKeyIdentifier extension.
 The ASN.1 notation for this structure follows.

 
 AuthorityKeyIdentifier ::= SEQUENCE {
    keyIdentifier             [0] KeyIdentifier           OPTIONAL,
    authorityCertIssuer       [1] GeneralNames            OPTIONAL,
    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }

 KeyIdentifier ::= OCTET STRING
 

 Authority key identifiers are not parsed by the
 X509CertSelector.  Instead, the values are
 compared using a byte-by-byte comparison.
 
 When the keyIdentifier field of
 AuthorityKeyIdentifier is populated, the value is
 usually taken from the SubjectKeyIdentifier extension
 in the issuer's certificate.  Note, however, that the result of
 X509Certificate.getExtensionValue(<SubjectKeyIdentifier Object
 Identifier>) on the issuer's certificate may NOT be used
 directly as the input to setAuthorityKeyIdentifier.
 This is because the SubjectKeyIdentifier contains
 only a KeyIdentifier OCTET STRING, and not a SEQUENCE of
 KeyIdentifier, GeneralNames, and CertificateSerialNumber.
 In order to use the extension value of the issuer certificate's
 SubjectKeyIdentifier
 extension, it will be necessary to extract the value of the embedded
 KeyIdentifier OCTET STRING, then DER encode this OCTET
 STRING inside a SEQUENCE.
 For more details on SubjectKeyIdentifier, see
 setSubjectKeyIdentifier(byte[] subjectKeyID).
 
 Note also that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
authorityKeyID - the authority key identifier
        (or null)
See Also:
getAuthorityKeyIdentifier()


"
X509CertSelector,setBasicConstraints(int minMaxPathLen),void,Sets the basic constraints constraint.,"

setBasicConstraints
public void setBasicConstraints(int minMaxPathLen)
Sets the basic constraints constraint. If the value is greater than or
 equal to zero, X509Certificates must include a
 basicConstraints extension with
 a pathLen of at least this value. If the value is -2, only end-entity
 certificates are accepted. If the value is -1, no check is done.
 
 This constraint is useful when building a certification path forward
 (from the target toward the trust anchor. If a partial path has been
 built, any candidate certificate must have a maxPathLen value greater
 than or equal to the number of certificates in the partial path.

Parameters:
minMaxPathLen - the value for the basic constraints constraint
Throws:
IllegalArgumentException - if the value is less than -2
See Also:
getBasicConstraints()


"
X509CertSelector,setCertificate(X509Certificate cert),void,Sets the certificateEquals criterion.,"

setCertificate
public void setCertificate(X509Certificate cert)
Sets the certificateEquals criterion. The specified
 X509Certificate must be equal to the
 X509Certificate passed to the match method.
 If null, then this check is not applied.

 This method is particularly useful when it is necessary to
 match a single certificate. Although other criteria can be specified
 in conjunction with the certificateEquals criterion, it is usually not
 practical or necessary.

Parameters:
cert - the X509Certificate to match (or
 null)
See Also:
getCertificate()


"
X509CertSelector,setCertificateValid(Date certValid),void,Sets the certificateValid criterion.,"

setCertificateValid
public void setCertificateValid(Date certValid)
Sets the certificateValid criterion. The specified date must fall
 within the certificate validity period for the
 X509Certificate. If null, no certificateValid
 check will be done.
 
 Note that the Date supplied here is cloned to protect
 against subsequent modifications.

Parameters:
certValid - the Date to check (or null)
See Also:
getCertificateValid()


"
X509CertSelector,setExtendedKeyUsage(Set<String> keyPurposeSet),void,Sets the extendedKeyUsage criterion.,"

setExtendedKeyUsage
public void setExtendedKeyUsage(Set<String> keyPurposeSet)
                         throws IOException
Sets the extendedKeyUsage criterion. The X509Certificate
 must allow the specified key purposes in its extended key usage
 extension. If keyPurposeSet is empty or null,
 no extendedKeyUsage check will be done. Note that an
 X509Certificate that has no extendedKeyUsage extension
 implicitly allows all key purposes.
 
 Note that the Set is cloned to protect against
 subsequent modifications.

Parameters:
keyPurposeSet - a Set of key purpose OIDs in string
 format (or null). Each OID is represented by a set of
 nonnegative integers separated by periods.
Throws:
IOException - if the OID is invalid, such as
 the first component being not 0, 1 or 2 or the second component
 being greater than 39.
See Also:
getExtendedKeyUsage()


"
X509CertSelector,setIssuer(byte[] issuerDN),void,Sets the issuer criterion.,"

setIssuer
public void setIssuer(byte[] issuerDN)
               throws IOException
Sets the issuer criterion. The specified distinguished name
 must match the issuer distinguished name in the
 X509Certificate. If null is specified,
 the issuer criterion is disabled and any issuer distinguished name will
 do.
 
 If issuerDN is not null, it should contain a
 single DER encoded distinguished name, as defined in X.501. The ASN.1
 notation for this structure is as follows.
 
 Name ::= CHOICE {
   RDNSequence }

 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

 RelativeDistinguishedName ::=
   SET SIZE (1 .. MAX) OF AttributeTypeAndValue

 AttributeTypeAndValue ::= SEQUENCE {
   type     AttributeType,
   value    AttributeValue }

 AttributeType ::= OBJECT IDENTIFIER

 AttributeValue ::= ANY DEFINED BY AttributeType
 ....
 DirectoryString ::= CHOICE {
       teletexString           TeletexString (SIZE (1..MAX)),
       printableString         PrintableString (SIZE (1..MAX)),
       universalString         UniversalString (SIZE (1..MAX)),
       utf8String              UTF8String (SIZE (1.. MAX)),
       bmpString               BMPString (SIZE (1..MAX)) }
 

 Note that the byte array specified here is cloned to protect against
 subsequent modifications.

Parameters:
issuerDN - a byte array containing the distinguished name
                 in ASN.1 DER encoded form (or null)
Throws:
IOException - if an encoding error occurs (incorrect form for DN)


"
X509CertSelector,setIssuer(String issuerDN),void,"Denigrated, use setIssuer(X500Principal) or setIssuer(byte[]) instead.","

setIssuer
public void setIssuer(String issuerDN)
               throws IOException
Denigrated, use setIssuer(X500Principal)
 or setIssuer(byte[]) instead. This method should not be
 relied on as it can fail to match some certificates because of a loss of
 encoding information in the
 RFC 2253 String form
 of some distinguished names.
 
 Sets the issuer criterion. The specified distinguished name
 must match the issuer distinguished name in the
 X509Certificate. If null, any issuer
 distinguished name will do.
 
 If issuerDN is not null, it should contain a
 distinguished name, in RFC 2253 format.

Parameters:
issuerDN - a distinguished name in RFC 2253 format
                 (or null)
Throws:
IOException - if a parsing error occurs (incorrect form for DN)


"
X509CertSelector,setIssuer(X500Principal issuer),void,Sets the issuer criterion.,"

setIssuer
public void setIssuer(X500Principal issuer)
Sets the issuer criterion. The specified distinguished name
 must match the issuer distinguished name in the
 X509Certificate. If null, any issuer
 distinguished name will do.

Parameters:
issuer - a distinguished name as X500Principal
                 (or null)
Since:
1.5


"
X509CertSelector,setKeyUsage(boolean[] keyUsage),void,Sets the keyUsage criterion.,"

setKeyUsage
public void setKeyUsage(boolean[] keyUsage)
Sets the keyUsage criterion. The X509Certificate
 must allow the specified keyUsage values. If null, no
 keyUsage check will be done. Note that an X509Certificate
 that has no keyUsage extension implicitly allows all keyUsage values.
 
 Note that the boolean array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
keyUsage - a boolean array in the same format as the boolean
                 array returned by
 X509Certificate.getKeyUsage().
                 Or null.
See Also:
getKeyUsage()


"
X509CertSelector,setMatchAllSubjectAltNames(boolean matchAllNames),void,Enables/disables matching all of the subjectAlternativeNames specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods.,"

setMatchAllSubjectAltNames
public void setMatchAllSubjectAltNames(boolean matchAllNames)
Enables/disables matching all of the subjectAlternativeNames
 specified in the setSubjectAlternativeNames or addSubjectAlternativeName methods. If enabled,
 the X509Certificate must contain all of the
 specified subject alternative names. If disabled, the
 X509Certificate must contain at least one of the
 specified subject alternative names.

 The matchAllNames flag is true by default.

Parameters:
matchAllNames - if true, the flag is enabled;
 if false, the flag is disabled.
See Also:
getMatchAllSubjectAltNames()


"
X509CertSelector,setNameConstraints(byte[] bytes),void,Sets the name constraints criterion.,"

setNameConstraints
public void setNameConstraints(byte[] bytes)
                        throws IOException
Sets the name constraints criterion. The X509Certificate
 must have subject and subject alternative names that
 meet the specified name constraints.
 
 The name constraints are specified as a byte array. This byte array
 should contain the DER encoded form of the name constraints, as they
 would appear in the NameConstraints structure defined in RFC 3280
 and X.509. The ASN.1 definition of this structure appears below.

 
  NameConstraints ::= SEQUENCE {
       permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
       excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

  GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

  GeneralSubtree ::= SEQUENCE {
       base                    GeneralName,
       minimum         [0]     BaseDistance DEFAULT 0,
       maximum         [1]     BaseDistance OPTIONAL }

  BaseDistance ::= INTEGER (0..MAX)

  GeneralName ::= CHOICE {
       otherName                       [0]     OtherName,
       rfc822Name                      [1]     IA5String,
       dNSName                         [2]     IA5String,
       x400Address                     [3]     ORAddress,
       directoryName                   [4]     Name,
       ediPartyName                    [5]     EDIPartyName,
       uniformResourceIdentifier       [6]     IA5String,
       iPAddress                       [7]     OCTET STRING,
       registeredID                    [8]     OBJECT IDENTIFIER}
 

 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
bytes - a byte array containing the ASN.1 DER encoding of
              a NameConstraints extension to be used for checking
              name constraints. Only the value of the extension is
              included, not the OID or criticality flag. Can be
              null,
              in which case no name constraints check will be performed.
Throws:
IOException - if a parsing error occurs
See Also:
getNameConstraints()


"
X509CertSelector,setPathToNames(Collection<List<?>> names),void,Sets the pathToNames criterion.,"

setPathToNames
public void setPathToNames(Collection<List<?>> names)
                    throws IOException
Sets the pathToNames criterion. The X509Certificate must
 not include name constraints that would prohibit building a
 path to the specified names.
 
 This method allows the caller to specify, with a single method call,
 the complete set of names which the X509Certificates's
 name constraints must permit. The specified value replaces
 the previous value for the pathToNames criterion.
 
 This constraint is useful when building a certification path forward
 (from the target toward the trust anchor. If a partial path has been
 built, any candidate certificate must not include name constraints that
 would prohibit building a path to any of the names in the partial path.
 
 The names parameter (if not null) is a
 Collection with one
 entry for each name to be included in the pathToNames
 criterion. Each entry is a List whose first entry is an
 Integer (the name type, 0-8) and whose second
 entry is a String or a byte array (the name, in
 string or ASN.1 DER encoded form, respectively).
 There can be multiple names of the same type. If null
 is supplied as the value for this argument, no
 pathToNames check will be performed.
 
 Each name in the Collection
 may be specified either as a String or as an ASN.1 encoded
 byte array. For more details about the formats used, see
 addPathToName(int type, String name) and
 addPathToName(int type, byte [] name).
 
Note: for distinguished names, specify the byte
 array form instead of the String form. See the note in
 addPathToName(int, String) for more information.
 
 Note that the names parameter can contain duplicate
 names (same name and name type), but they may be removed from the
 Collection of names returned by the
 getPathToNames method.
 
 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Parameters:
names - a Collection with one entry per name
              (or null)
Throws:
IOException - if a parsing error occurs
See Also:
getPathToNames()


"
X509CertSelector,setPolicy(Set<String> certPolicySet),void,Sets the policy constraint.,"

setPolicy
public void setPolicy(Set<String> certPolicySet)
               throws IOException
Sets the policy constraint. The X509Certificate must
 include at least one of the specified policies in its certificate
 policies extension. If certPolicySet is empty, then the
 X509Certificate must include at least some specified policy
 in its certificate policies extension. If certPolicySet is
 null, no policy check will be performed.
 
 Note that the Set is cloned to protect against
 subsequent modifications.

Parameters:
certPolicySet - a Set of certificate policy OIDs in
                      string format (or null). Each OID is
                      represented by a set of nonnegative integers
                    separated by periods.
Throws:
IOException - if a parsing error occurs on the OID such as
 the first component is not 0, 1 or 2 or the second component is
 greater than 39.
See Also:
getPolicy()


"
X509CertSelector,setPrivateKeyValid(Date privateKeyValid),void,Sets the privateKeyValid criterion.,"

setPrivateKeyValid
public void setPrivateKeyValid(Date privateKeyValid)
Sets the privateKeyValid criterion. The specified date must fall
 within the private key validity period for the
 X509Certificate. If null, no privateKeyValid
 check will be done.
 
 Note that the Date supplied here is cloned to protect
 against subsequent modifications.

Parameters:
privateKeyValid - the Date to check (or
                        null)
See Also:
getPrivateKeyValid()


"
X509CertSelector,setSerialNumber(BigInteger serial),void,Sets the serialNumber criterion.,"

setSerialNumber
public void setSerialNumber(BigInteger serial)
Sets the serialNumber criterion. The specified serial number
 must match the certificate serial number in the
 X509Certificate. If null, any certificate
 serial number will do.

Parameters:
serial - the certificate serial number to match
        (or null)
See Also:
getSerialNumber()


"
X509CertSelector,setSubject(byte[] subjectDN),void,Sets the subject criterion.,"

setSubject
public void setSubject(byte[] subjectDN)
                throws IOException
Sets the subject criterion. The specified distinguished name
 must match the subject distinguished name in the
 X509Certificate. If null, any subject
 distinguished name will do.
 
 If subjectDN is not null, it should contain a
 single DER encoded distinguished name, as defined in X.501. For the ASN.1
 notation for this structure, see
 setIssuer(byte [] issuerDN).

Parameters:
subjectDN - a byte array containing the distinguished name in
                  ASN.1 DER format (or null)
Throws:
IOException - if an encoding error occurs (incorrect form for DN)


"
X509CertSelector,setSubject(String subjectDN),void,"Denigrated, use setSubject(X500Principal) or setSubject(byte[]) instead.","

setSubject
public void setSubject(String subjectDN)
                throws IOException
Denigrated, use setSubject(X500Principal)
 or setSubject(byte[]) instead. This method should not be
 relied on as it can fail to match some certificates because of a loss of
 encoding information in the RFC 2253 String form of some distinguished
 names.
 
 Sets the subject criterion. The specified distinguished name
 must match the subject distinguished name in the
 X509Certificate. If null, any subject
 distinguished name will do.
 
 If subjectDN is not null, it should contain a
 distinguished name, in RFC 2253 format.

Parameters:
subjectDN - a distinguished name in RFC 2253 format
                  (or null)
Throws:
IOException - if a parsing error occurs (incorrect form for DN)


"
X509CertSelector,setSubject(X500Principal subject),void,Sets the subject criterion.,"

setSubject
public void setSubject(X500Principal subject)
Sets the subject criterion. The specified distinguished name
 must match the subject distinguished name in the
 X509Certificate. If null, any subject
 distinguished name will do.

Parameters:
subject - a distinguished name as X500Principal
                  (or null)
Since:
1.5


"
X509CertSelector,setSubjectAlternativeNames(Collection<List<?>> names),void,Sets the subjectAlternativeNames criterion.,"

setSubjectAlternativeNames
public void setSubjectAlternativeNames(Collection<List<?>> names)
                                throws IOException
Sets the subjectAlternativeNames criterion. The
 X509Certificate must contain all or at least one of the
 specified subjectAlternativeNames, depending on the value of
 the matchAllNames flag (see setMatchAllSubjectAltNames).
 
 This method allows the caller to specify, with a single method call,
 the complete set of subject alternative names for the
 subjectAlternativeNames criterion. The specified value replaces
 the previous value for the subjectAlternativeNames criterion.
 
 The names parameter (if not null) is a
 Collection with one
 entry for each name to be included in the subject alternative name
 criterion. Each entry is a List whose first entry is an
 Integer (the name type, 0-8) and whose second
 entry is a String or a byte array (the name, in
 string or ASN.1 DER encoded form, respectively).
 There can be multiple names of the same type. If null
 is supplied as the value for this argument, no
 subjectAlternativeNames check will be performed.
 
 Each subject alternative name in the Collection
 may be specified either as a String or as an ASN.1 encoded
 byte array. For more details about the formats used, see
 addSubjectAlternativeName(int type, String name) and
 addSubjectAlternativeName(int type, byte [] name).
 
Note: for distinguished names, specify the byte
 array form instead of the String form. See the note in
 addSubjectAlternativeName(int, String) for more information.
 
 Note that the names parameter can contain duplicate
 names (same name and name type), but they may be removed from the
 Collection of names returned by the
 getSubjectAlternativeNames method.
 
 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Parameters:
names - a Collection of names (or null)
Throws:
IOException - if a parsing error occurs
See Also:
getSubjectAlternativeNames()


"
X509CertSelector,setSubjectKeyIdentifier(byte[] subjectKeyID),void,Sets the subjectKeyIdentifier criterion.,"

setSubjectKeyIdentifier
public void setSubjectKeyIdentifier(byte[] subjectKeyID)
Sets the subjectKeyIdentifier criterion. The
 X509Certificate must contain a SubjectKeyIdentifier
 extension for which the contents of the extension
 matches the specified criterion value.
 If the criterion value is null, no
 subjectKeyIdentifier check will be done.
 
 If subjectKeyID is not null, it
 should contain a single DER encoded value corresponding to the contents
 of the extension value (not including the object identifier,
 criticality setting, and encapsulating OCTET STRING)
 for a SubjectKeyIdentifier extension.
 The ASN.1 notation for this structure follows.

 
 SubjectKeyIdentifier ::= KeyIdentifier

 KeyIdentifier ::= OCTET STRING
 

 Since the format of subject key identifiers is not mandated by
 any standard, subject key identifiers are not parsed by the
 X509CertSelector. Instead, the values are compared using
 a byte-by-byte comparison.
 
 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
subjectKeyID - the subject key identifier (or null)
See Also:
getSubjectKeyIdentifier()


"
X509CertSelector,setSubjectPublicKey(byte[] key),void,Sets the subjectPublicKey criterion.,"

setSubjectPublicKey
public void setSubjectPublicKey(byte[] key)
                         throws IOException
Sets the subjectPublicKey criterion. The X509Certificate
 must contain the specified subject public key. If null,
 no subjectPublicKey check will be done.
 
 Because this method allows the public key to be specified as a byte
 array, it may be used for unknown key types.
 
 If key is not null, it should contain a
 single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.
 The ASN.1 notation for this structure is as follows.
 
 SubjectPublicKeyInfo  ::=  SEQUENCE  {
   algorithm            AlgorithmIdentifier,
   subjectPublicKey     BIT STRING  }

 AlgorithmIdentifier  ::=  SEQUENCE  {
   algorithm               OBJECT IDENTIFIER,
   parameters              ANY DEFINED BY algorithm OPTIONAL  }
                              -- contains a value of the type
                              -- registered for use with the
                              -- algorithm object identifier value
 

 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
key - a byte array containing the subject public key in ASN.1 DER
            form (or null)
Throws:
IOException - if an encoding error occurs (incorrect form for
 subject public key)
See Also:
getSubjectPublicKey()


"
X509CertSelector,setSubjectPublicKey(PublicKey key),void,Sets the subjectPublicKey criterion.,"

setSubjectPublicKey
public void setSubjectPublicKey(PublicKey key)
Sets the subjectPublicKey criterion. The
 X509Certificate must contain the specified subject public
 key. If null, no subjectPublicKey check will be done.

Parameters:
key - the subject public key to check for (or null)
See Also:
getSubjectPublicKey()


"
X509CertSelector,setSubjectPublicKeyAlgID(String oid),void,Sets the subjectPublicKeyAlgID criterion.,"

setSubjectPublicKeyAlgID
public void setSubjectPublicKeyAlgID(String oid)
                              throws IOException
Sets the subjectPublicKeyAlgID criterion. The
 X509Certificate must contain a subject public key
 with the specified algorithm. If null, no
 subjectPublicKeyAlgID check will be done.

Parameters:
oid - The object identifier (OID) of the algorithm to check
            for (or null). An OID is represented by a
            set of nonnegative integers separated by periods.
Throws:
IOException - if the OID is invalid, such as
 the first component being not 0, 1 or 2 or the second component
 being greater than 39.
See Also:
getSubjectPublicKeyAlgID()


"
X509CertSelector,toString(),String,Return a printable representation of the CertSelector.,"

toString
public String toString()
Return a printable representation of the CertSelector.

Overrides:
toString in class Object
Returns:
a String describing the contents of the
         CertSelector


"
X509CRL,equals(Object other),boolean,Compares this CRL for equality with the given object.,"

equals
public boolean equals(Object other)
Compares this CRL for equality with the given
 object. If the other object is an
 instanceof X509CRL, then
 its encoded form is retrieved and compared with the
 encoded form of this CRL.

Overrides:
equals in class Object
Parameters:
other - the object to test for equality with this CRL.
Returns:
true iff the encoded forms of the two CRLs
 match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
X509CRL,getEncoded(),abstract byte[],Returns the ASN.1 DER-encoded form of this CRL.,"

getEncoded
public abstract byte[] getEncoded()
                           throws CRLException
Returns the ASN.1 DER-encoded form of this CRL.

Returns:
the encoded form of this certificate
Throws:
CRLException - if an encoding error occurs.


"
X509CRL,getIssuerDN(),abstract Principal,"Denigrated, replaced by getIssuerX500Principal().","

getIssuerDN
public abstract Principal getIssuerDN()
Denigrated, replaced by getIssuerX500Principal(). This method returns the issuer
 as an implementation specific Principal object, which should not be
 relied upon by portable code.

 
 Gets the issuer (issuer distinguished name) value from
 the CRL. The issuer name identifies the entity that signed (and
 issued) the CRL.

 The issuer name field contains an
 X.500 distinguished name (DN).
 The ASN.1 definition for this is:
 
 issuer    Name

 Name ::= CHOICE { RDNSequence }
 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
 RelativeDistinguishedName ::=
     SET OF AttributeValueAssertion

 AttributeValueAssertion ::= SEQUENCE {
                               AttributeType,
                               AttributeValue }
 AttributeType ::= OBJECT IDENTIFIER
 AttributeValue ::= ANY
 
 The Name describes a hierarchical name composed of
 attributes,
 such as country name, and corresponding values, such as US.
 The type of the AttributeValue component is determined by
 the AttributeType; in general it will be a
 directoryString. A directoryString is usually
 one of PrintableString,
 TeletexString or UniversalString.

Returns:
a Principal whose name is the issuer distinguished name.


"
X509CRL,getIssuerX500Principal(),X500Principal,Returns the issuer (issuer distinguished name) value from the CRL as an X500Principal.,"

getIssuerX500Principal
public X500Principal getIssuerX500Principal()
Returns the issuer (issuer distinguished name) value from the
 CRL as an X500Principal.
 
 It is recommended that subclasses override this method.

Returns:
an X500Principal representing the issuer
          distinguished name
Since:
1.4


"
X509CRL,getNextUpdate(),abstract Date,Gets the nextUpdate date from the CRL.,"

getNextUpdate
public abstract Date getNextUpdate()
Gets the nextUpdate date from the CRL.

Returns:
the nextUpdate date from the CRL, or null if
 not present.


"
X509CRL,getRevokedCertificate(BigInteger serialNumber),abstract X509CRLEntry,"Gets the CRL entry, if any, with the given certificate serialNumber.","

getRevokedCertificate
public abstract X509CRLEntry getRevokedCertificate(BigInteger serialNumber)
Gets the CRL entry, if any, with the given certificate serialNumber.

Parameters:
serialNumber - the serial number of the certificate for which a CRL entry
 is to be looked up
Returns:
the entry with the given serial number, or null if no such entry
 exists in this CRL.
See Also:
X509CRLEntry


"
X509CRL,getRevokedCertificate(X509Certificate certificate),X509CRLEntry,"Get the CRL entry, if any, for the given certificate.","

getRevokedCertificate
public X509CRLEntry getRevokedCertificate(X509Certificate certificate)
Get the CRL entry, if any, for the given certificate.

 This method can be used to lookup CRL entries in indirect CRLs,
 that means CRLs that contain entries from issuers other than the CRL
 issuer. The default implementation will only return entries for
 certificates issued by the CRL issuer. Subclasses that wish to
 support indirect CRLs should override this method.

Parameters:
certificate - the certificate for which a CRL entry is to be looked
   up
Returns:
the entry for the given certificate, or null if no such entry
   exists in this CRL.
Throws:
NullPointerException - if certificate is null
Since:
1.5


"
X509CRL,getRevokedCertificates(),abstract Set<? extends X509CRLEntry>,Gets all the entries from this CRL.,"

getRevokedCertificates
public abstract Set<? extends X509CRLEntry> getRevokedCertificates()
Gets all the entries from this CRL.
 This returns a Set of X509CRLEntry objects.

Returns:
all the entries or null if there are none present.
See Also:
X509CRLEntry


"
X509CRL,getSigAlgName(),abstract String,Gets the signature algorithm name for the CRL signature algorithm.,"

getSigAlgName
public abstract String getSigAlgName()
Gets the signature algorithm name for the CRL
 signature algorithm. An example is the string ""SHA256withRSA"".
 The ASN.1 definition for this is:
 
 signatureAlgorithm   AlgorithmIdentifier

 AlgorithmIdentifier  ::=  SEQUENCE  {
     algorithm               OBJECT IDENTIFIER,
     parameters              ANY DEFINED BY algorithm OPTIONAL  }
                             -- contains a value of the type
                             -- registered for use with the
                             -- algorithm object identifier value
 
The algorithm name is determined from the algorithm
 OID string.

Returns:
the signature algorithm name.


"
X509CRL,getSigAlgOID(),abstract String,Gets the signature algorithm OID string from the CRL.,"

getSigAlgOID
public abstract String getSigAlgOID()
Gets the signature algorithm OID string from the CRL.
 An OID is represented by a set of nonnegative whole numbers separated
 by periods.
 For example, the string ""1.2.840.10040.4.3"" identifies the SHA-1
 with DSA signature algorithm defined in
 RFC 3279: Algorithms and
 Identifiers for the Internet X.509 Public Key Infrastructure Certificate
 and CRL Profile.

 See getSigAlgName for
 relevant ASN.1 definitions.

Returns:
the signature algorithm OID string.


"
X509CRL,getSigAlgParams(),abstract byte[],Gets the DER-encoded signature algorithm parameters from this CRL's signature algorithm.,"

getSigAlgParams
public abstract byte[] getSigAlgParams()
Gets the DER-encoded signature algorithm parameters from this
 CRL's signature algorithm. In most cases, the signature
 algorithm parameters are null; the parameters are usually
 supplied with the public key.
 If access to individual parameter values is needed then use
 AlgorithmParameters
 and instantiate with the name returned by
 getSigAlgName.

 See getSigAlgName for
 relevant ASN.1 definitions.

Returns:
the DER-encoded signature algorithm parameters, or
         null if no parameters are present.


"
X509CRL,getSignature(),abstract byte[],Gets the signature value (the raw signature bits) from the CRL.,"

getSignature
public abstract byte[] getSignature()
Gets the signature value (the raw signature bits) from
 the CRL.
 The ASN.1 definition for this is:
 
 signature     BIT STRING
 

Returns:
the signature.


"
X509CRL,getTBSCertList(),abstract byte[],"Gets the DER-encoded CRL information, the tbsCertList from this CRL.","

getTBSCertList
public abstract byte[] getTBSCertList()
                               throws CRLException
Gets the DER-encoded CRL information, the
 tbsCertList from this CRL.
 This can be used to verify the signature independently.

Returns:
the DER-encoded CRL information.
Throws:
CRLException - if an encoding error occurs.


"
X509CRL,getThisUpdate(),abstract Date,Gets the thisUpdate date from the CRL.,"

getThisUpdate
public abstract Date getThisUpdate()
Gets the thisUpdate date from the CRL.
 The ASN.1 definition for this is:
 
 thisUpdate   ChoiceOfTime
 ChoiceOfTime ::= CHOICE {
     utcTime        UTCTime,
     generalTime    GeneralizedTime }
 

Returns:
the thisUpdate date from the CRL.


"
X509CRL,getVersion(),abstract int,Gets the version (version number) value from the CRL.,"

getVersion
public abstract int getVersion()
Gets the version (version number) value from the CRL.
 The ASN.1 definition for this is:
 
 version    Version OPTIONAL,
             -- if present, must be v2

 Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
             -- v3 does not apply to CRLs but appears for consistency
             -- with definition of Version for certs
 

Returns:
the version number, i.e. 1 or 2.


"
X509CRL,hashCode(),int,Returns a hashcode value for this CRL from its encoded form.,"

hashCode
public int hashCode()
Returns a hashcode value for this CRL from its
 encoded form.

Overrides:
hashCode in class Object
Returns:
the hashcode value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
X509CRL,verify(PublicKey key),abstract void,Verifies that this CRL was signed using the private key that corresponds to the given public key.,"

verify
public abstract void verify(PublicKey key)
                     throws CRLException,
                            NoSuchAlgorithmException,
                            InvalidKeyException,
                            NoSuchProviderException,
                            SignatureException
Verifies that this CRL was signed using the
 private key that corresponds to the given public key.

Parameters:
key - the PublicKey used to carry out the verification.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
NoSuchProviderException - if there's no default provider.
SignatureException - on signature errors.
CRLException - on encoding errors.


"
X509CRL,"verify(PublicKey key, Provider sigProvider)",void,Verifies that this CRL was signed using the private key that corresponds to the given public key.,"

verify
public void verify(PublicKey key,
                   Provider sigProvider)
            throws CRLException,
                   NoSuchAlgorithmException,
                   InvalidKeyException,
                   SignatureException
Verifies that this CRL was signed using the
 private key that corresponds to the given public key.
 This method uses the signature verification engine
 supplied by the given provider. Note that the specified Provider object
 does not have to be registered in the provider list.

 This method was added to version 1.8 of the Java Platform Standard
 Edition. In order to maintain backwards compatibility with existing
 service providers, this method is not abstract
 and it provides a default implementation.

Parameters:
key - the PublicKey used to carry out the verification.
sigProvider - the signature provider.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
SignatureException - on signature errors.
CRLException - on encoding errors.
Since:
1.8


"
X509CRL,"verify(PublicKey key, String sigProvider)",abstract void,Verifies that this CRL was signed using the private key that corresponds to the given public key.,"

verify
public abstract void verify(PublicKey key,
                            String sigProvider)
                     throws CRLException,
                            NoSuchAlgorithmException,
                            InvalidKeyException,
                            NoSuchProviderException,
                            SignatureException
Verifies that this CRL was signed using the
 private key that corresponds to the given public key.
 This method uses the signature verification engine
 supplied by the given provider.

Parameters:
key - the PublicKey used to carry out the verification.
sigProvider - the name of the signature provider.
Throws:
NoSuchAlgorithmException - on unsupported signature
 algorithms.
InvalidKeyException - on incorrect key.
NoSuchProviderException - on incorrect provider.
SignatureException - on signature errors.
CRLException - on encoding errors.


"
X509CRLEntry,equals(Object other),boolean,Compares this CRL entry for equality with the given object.,"

equals
public boolean equals(Object other)
Compares this CRL entry for equality with the given
 object. If the other object is an
 instanceof X509CRLEntry, then
 its encoded form (the inner SEQUENCE) is retrieved and compared
 with the encoded form of this CRL entry.

Overrides:
equals in class Object
Parameters:
other - the object to test for equality with this CRL entry.
Returns:
true iff the encoded forms of the two CRL entries
 match, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
X509CRLEntry,getCertificateIssuer(),X500Principal,Get the issuer of the X509Certificate described by this entry.,"

getCertificateIssuer
public X500Principal getCertificateIssuer()
Get the issuer of the X509Certificate described by this entry. If
 the certificate issuer is also the CRL issuer, this method returns
 null.

 This method is used with indirect CRLs. The default implementation
 always returns null. Subclasses that wish to support indirect CRLs
 should override it.

Returns:
the issuer of the X509Certificate described by this entry
 or null if it is issued by the CRL issuer.
Since:
1.5


"
X509CRLEntry,getEncoded(),abstract byte[],"Returns the ASN.1 DER-encoded form of this CRL Entry, that is the inner SEQUENCE.","

getEncoded
public abstract byte[] getEncoded()
                           throws CRLException
Returns the ASN.1 DER-encoded form of this CRL Entry,
 that is the inner SEQUENCE.

Returns:
the encoded form of this certificate
Throws:
CRLException - if an encoding error occurs.


"
X509CRLEntry,getRevocationDate(),abstract Date,"Gets the revocation date from this X509CRLEntry, the revocationDate.","

getRevocationDate
public abstract Date getRevocationDate()
Gets the revocation date from this X509CRLEntry,
 the revocationDate.

Returns:
the revocation date.


"
X509CRLEntry,getRevocationReason(),CRLReason,"Returns the reason the certificate has been revoked, as specified in the Reason Code extension of this CRL entry.","

getRevocationReason
public CRLReason getRevocationReason()
Returns the reason the certificate has been revoked, as specified
 in the Reason Code extension of this CRL entry.

Returns:
the reason the certificate has been revoked, or
    null if this CRL entry does not have
    a Reason Code extension
Since:
1.7


"
X509CRLEntry,getSerialNumber(),abstract BigInteger,"Gets the serial number from this X509CRLEntry, the userCertificate.","

getSerialNumber
public abstract BigInteger getSerialNumber()
Gets the serial number from this X509CRLEntry,
 the userCertificate.

Returns:
the serial number.


"
X509CRLEntry,hasExtensions(),abstract boolean,Returns true if this CRL entry has extensions.,"

hasExtensions
public abstract boolean hasExtensions()
Returns true if this CRL entry has extensions.

Returns:
true if this entry has extensions, false otherwise.


"
X509CRLEntry,hashCode(),int,Returns a hashcode value for this CRL entry from its encoded form.,"

hashCode
public int hashCode()
Returns a hashcode value for this CRL entry from its
 encoded form.

Overrides:
hashCode in class Object
Returns:
the hashcode value.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
X509CRLEntry,toString(),abstract String,Returns a string representation of this CRL entry.,"

toString
public abstract String toString()
Returns a string representation of this CRL entry.

Overrides:
toString in class Object
Returns:
a string representation of this CRL entry.


"
X509CRLSelector,addIssuer(X500Principal issuer),void,Adds a name to the issuerNames criterion.,"

addIssuer
public void addIssuer(X500Principal issuer)
Adds a name to the issuerNames criterion. The issuer distinguished
 name in the X509CRL must match at least one of the specified
 distinguished names.
 
 This method allows the caller to add a name to the set of issuer names
 which X509CRLs may contain. The specified name is added to
 any previous value for the issuerNames criterion.
 If the specified name is a duplicate, it may be ignored.

Parameters:
issuer - the issuer as X500Principal
Since:
1.5


"
X509CRLSelector,addIssuerName(byte[] name),void,Adds a name to the issuerNames criterion.,"

addIssuerName
public void addIssuerName(byte[] name)
                   throws IOException
Adds a name to the issuerNames criterion. The issuer distinguished
 name in the X509CRL must match at least one of the specified
 distinguished names.
 
 This method allows the caller to add a name to the set of issuer names
 which X509CRLs may contain. The specified name is added to
 any previous value for the issuerNames criterion. If the specified name
 is a duplicate, it may be ignored.
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is as follows.
 
 The name is provided as a byte array. This byte array should contain
 a single DER encoded distinguished name, as defined in X.501. The ASN.1
 notation for this structure appears in the documentation for
 setIssuerNames(Collection names).
 
 Note that the byte array supplied here is cloned to protect against
 subsequent modifications.

Parameters:
name - a byte array containing the name in ASN.1 DER encoded form
Throws:
IOException - if a parsing error occurs


"
X509CRLSelector,addIssuerName(String name),void,"Denigrated, use addIssuer(X500Principal) or addIssuerName(byte[]) instead.","

addIssuerName
public void addIssuerName(String name)
                   throws IOException
Denigrated, use
 addIssuer(X500Principal) or
 addIssuerName(byte[]) instead. This method should not be
 relied on as it can fail to match some CRLs because of a loss of
 encoding information in the RFC 2253 String form of some distinguished
 names.
 
 Adds a name to the issuerNames criterion. The issuer distinguished
 name in the X509CRL must match at least one of the specified
 distinguished names.
 
 This method allows the caller to add a name to the set of issuer names
 which X509CRLs may contain. The specified name is added to
 any previous value for the issuerNames criterion.
 If the specified name is a duplicate, it may be ignored.

Parameters:
name - the name in RFC 2253 form
Throws:
IOException - if a parsing error occurs


"
X509CRLSelector,clone(),Object,Returns a copy of this object.,"

clone
public Object clone()
Returns a copy of this object.

Specified by:
clone in interface CRLSelector
Overrides:
clone in class Object
Returns:
the copy
See Also:
Cloneable


"
X509CRLSelector,getCertificateChecking(),X509Certificate,Returns the certificate being checked.,"

getCertificateChecking
public X509Certificate getCertificateChecking()
Returns the certificate being checked. This is not a criterion. Rather,
 it is optional information that may help a CertStore
 find CRLs that would be relevant when checking revocation for the
 specified certificate. If the value returned is null, then
 no such optional information is provided.

Returns:
the certificate being checked (or null)
See Also:
setCertificateChecking(java.security.cert.X509Certificate)


"
X509CRLSelector,getDateAndTime(),Date,Returns the dateAndTime criterion.,"

getDateAndTime
public Date getDateAndTime()
Returns the dateAndTime criterion. The specified date must be
 equal to or later than the value of the thisUpdate component
 of the X509CRL and earlier than the value of the
 nextUpdate component. There is no match if the
 X509CRL does not contain a nextUpdate component.
 If null, no dateAndTime check will be done.
 
 Note that the Date returned is cloned to protect against
 subsequent modifications.

Returns:
the Date to match against (or null)
See Also:
setDateAndTime(java.util.Date)


"
X509CRLSelector,getIssuerNames(),Collection<Object>,Returns a copy of the issuerNames criterion.,"

getIssuerNames
public Collection<Object> getIssuerNames()
Returns a copy of the issuerNames criterion. The issuer distinguished
 name in the X509CRL must match at least one of the specified
 distinguished names. If the value returned is null, any
 issuer distinguished name will do.
 
 If the value returned is not null, it is a
 Collection of names. Each name is a String
 or a byte array representing a distinguished name (in RFC 2253 or
 ASN.1 DER encoded form, respectively).  Note that the
 Collection returned may contain duplicate names.
 
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is given in the documentation for
 setIssuerNames(Collection names).
 
 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Returns:
a Collection of names (or null)
See Also:
setIssuerNames(java.util.Collection<?>)


"
X509CRLSelector,getIssuers(),Collection<X500Principal>,Returns the issuerNames criterion.,"

getIssuers
public Collection<X500Principal> getIssuers()
Returns the issuerNames criterion. The issuer distinguished
 name in the X509CRL must match at least one of the specified
 distinguished names. If the value returned is null, any
 issuer distinguished name will do.
 
 If the value returned is not null, it is a
 unmodifiable Collection of X500Principals.

Returns:
an unmodifiable Collection of names
   (or null)
Since:
1.5
See Also:
setIssuers(java.util.Collection<javax.security.auth.x500.X500Principal>)


"
X509CRLSelector,getMaxCRL(),BigInteger,Returns the maxCRLNumber criterion.,"

getMaxCRL
public BigInteger getMaxCRL()
Returns the maxCRLNumber criterion. The X509CRL must have a
 CRL number extension whose value is less than or equal to the
 specified value. If null, no maxCRLNumber check will be
 done.

Returns:
the maximum CRL number accepted (or null)


"
X509CRLSelector,getMinCRL(),BigInteger,Returns the minCRLNumber criterion.,"

getMinCRL
public BigInteger getMinCRL()
Returns the minCRLNumber criterion. The X509CRL must have a
 CRL number extension whose value is greater than or equal to the
 specified value. If null, no minCRLNumber check will be done.

Returns:
the minimum CRL number accepted (or null)


"
X509CRLSelector,match(CRL crl),boolean,Decides whether a CRL should be selected.,"

match
public boolean match(CRL crl)
Decides whether a CRL should be selected.

Specified by:
match in interface CRLSelector
Parameters:
crl - the CRL to be checked
Returns:
true if the CRL should be selected,
         false otherwise


"
X509CRLSelector,setCertificateChecking(X509Certificate cert),void,Sets the certificate being checked.,"

setCertificateChecking
public void setCertificateChecking(X509Certificate cert)
Sets the certificate being checked. This is not a criterion. Rather,
 it is optional information that may help a CertStore
 find CRLs that would be relevant when checking revocation for the
 specified certificate. If null is specified, then no
 such optional information is provided.

Parameters:
cert - the X509Certificate being checked
             (or null)
See Also:
getCertificateChecking()


"
X509CRLSelector,setDateAndTime(Date dateAndTime),void,Sets the dateAndTime criterion.,"

setDateAndTime
public void setDateAndTime(Date dateAndTime)
Sets the dateAndTime criterion. The specified date must be
 equal to or later than the value of the thisUpdate component
 of the X509CRL and earlier than the value of the
 nextUpdate component. There is no match if the X509CRL
 does not contain a nextUpdate component.
 If null, no dateAndTime check will be done.
 
 Note that the Date supplied here is cloned to protect
 against subsequent modifications.

Parameters:
dateAndTime - the Date to match against
                    (or null)
See Also:
getDateAndTime()


"
X509CRLSelector,setIssuerNames(Collection<?> names),void,Note: use setIssuers(Collection) instead or only specify the byte array form of distinguished names when using this method.,"

setIssuerNames
public void setIssuerNames(Collection<?> names)
                    throws IOException
Note: use setIssuers(Collection) instead
 or only specify the byte array form of distinguished names when using
 this method. See addIssuerName(String) for more information.
 
 Sets the issuerNames criterion. The issuer distinguished name in the
 X509CRL must match at least one of the specified
 distinguished names. If null, any issuer distinguished name
 will do.
 
 This method allows the caller to specify, with a single method call,
 the complete set of issuer names which X509CRLs may contain.
 The specified value replaces the previous value for the issuerNames
 criterion.
 
 The names parameter (if not null) is a
 Collection of names. Each name is a String
 or a byte array representing a distinguished name (in
 RFC 2253 or
 ASN.1 DER encoded form, respectively). If null is supplied
 as the value for this argument, no issuerNames check will be performed.
 
 Note that the names parameter can contain duplicate
 distinguished names, but they may be removed from the
 Collection of names returned by the
 getIssuerNames method.
 
 If a name is specified as a byte array, it should contain a single DER
 encoded distinguished name, as defined in X.501. The ASN.1 notation for
 this structure is as follows.
 
 Name ::= CHOICE {
   RDNSequence }

 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

 RelativeDistinguishedName ::=
   SET SIZE (1 .. MAX) OF AttributeTypeAndValue

 AttributeTypeAndValue ::= SEQUENCE {
   type     AttributeType,
   value    AttributeValue }

 AttributeType ::= OBJECT IDENTIFIER

 AttributeValue ::= ANY DEFINED BY AttributeType
 ....
 DirectoryString ::= CHOICE {
       teletexString           TeletexString (SIZE (1..MAX)),
       printableString         PrintableString (SIZE (1..MAX)),
       universalString         UniversalString (SIZE (1..MAX)),
       utf8String              UTF8String (SIZE (1.. MAX)),
       bmpString               BMPString (SIZE (1..MAX)) }
 

 Note that a deep copy is performed on the Collection to
 protect against subsequent modifications.

Parameters:
names - a Collection of names (or null)
Throws:
IOException - if a parsing error occurs
See Also:
getIssuerNames()


"
X509CRLSelector,setIssuers(Collection<X500Principal> issuers),void,Sets the issuerNames criterion.,"

setIssuers
public void setIssuers(Collection<X500Principal> issuers)
Sets the issuerNames criterion. The issuer distinguished name in the
 X509CRL must match at least one of the specified
 distinguished names. If null, any issuer distinguished name
 will do.
 
 This method allows the caller to specify, with a single method call,
 the complete set of issuer names which X509CRLs may contain.
 The specified value replaces the previous value for the issuerNames
 criterion.
 
 The names parameter (if not null) is a
 Collection of X500Principals.
 
 Note that the names parameter can contain duplicate
 distinguished names, but they may be removed from the
 Collection of names returned by the
 getIssuers method.
 
 Note that a copy is performed on the Collection to
 protect against subsequent modifications.

Parameters:
issuers - a Collection of X500Principals
   (or null)
Since:
1.5
See Also:
getIssuers()


"
X509CRLSelector,setMaxCRLNumber(BigInteger maxCRL),void,Sets the maxCRLNumber criterion.,"

setMaxCRLNumber
public void setMaxCRLNumber(BigInteger maxCRL)
Sets the maxCRLNumber criterion. The X509CRL must have a
 CRL number extension whose value is less than or equal to the
 specified value. If null, no maxCRLNumber check will be
 done.

Parameters:
maxCRL - the maximum CRL number accepted (or null)


"
X509CRLSelector,setMinCRLNumber(BigInteger minCRL),void,Sets the minCRLNumber criterion.,"

setMinCRLNumber
public void setMinCRLNumber(BigInteger minCRL)
Sets the minCRLNumber criterion. The X509CRL must have a
 CRL number extension whose value is greater than or equal to the
 specified value. If null, no minCRLNumber check will be
 done.

Parameters:
minCRL - the minimum CRL number accepted (or null)


"
X509CRLSelector,toString(),String,Returns a printable representation of the X509CRLSelector.,"

toString
public String toString()
Returns a printable representation of the X509CRLSelector.

Overrides:
toString in class Object
Returns:
a String describing the contents of the
         X509CRLSelector.


"
