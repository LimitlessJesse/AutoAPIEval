Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Annotation,1,void setValue(String value),False,,NULL
0,Annotation,2,String getValue(),False,,NULL
0,Annotation,3,"void setAttribute(String key, Object value)",False,,NULL
0,Annotation,4,Object getAttribute(String key),False,,NULL
0,Annotation,5,Set<String> getKeys(),False,,NULL
1,AttributedCharacterIterator.Attribute,1,String getName(),True,,"

getName
protected String getName()
Returns the name of the attribute.

Returns:
the name of Attribute


"
1,AttributedCharacterIterator.Attribute,2,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Compares two objects for equality. This version only returns true
 for x.equals(y) if x and y refer
 to the same object, and guarantees this for all subclasses.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
1,AttributedCharacterIterator.Attribute,3,int hashCode(),True,,"

hashCode
public final int hashCode()
Returns a hash code value for the object. This version is identical to
 the one in Object, but is also final.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
1,AttributedCharacterIterator.Attribute,4,String toString(),True,,"

toString
public String toString()
Returns a string representation of the object. This version returns the
 concatenation of class name, ""("", a name identifying the attribute
 and "")"".

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
1,AttributedCharacterIterator.Attribute,5,AttributedCharacterIterator.Attribute readResolve(),False,,NULL
2,AttributedString,1,"void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value)",True,,"

addAttribute
public void addAttribute(AttributedCharacterIterator.Attribute attribute,
                         Object value)
Adds an attribute to the entire string.

Parameters:
attribute - the attribute key
value - the value of the attribute; may be null
Throws:
NullPointerException - if attribute is null.
IllegalArgumentException - if the AttributedString has length 0
 (attributes cannot be applied to a 0-length range).


"
2,AttributedString,2,"void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value, int beginIndex, int endIndex)",True,,"

addAttribute
public void addAttribute(AttributedCharacterIterator.Attribute attribute,
                         Object value,
                         int beginIndex,
                         int endIndex)
Adds an attribute to a subrange of the string.

Parameters:
attribute - the attribute key
value - The value of the attribute. May be null.
beginIndex - Index of the first character of the range.
endIndex - Index of the character following the last character of the range.
Throws:
NullPointerException - if attribute is null.
IllegalArgumentException - if beginIndex is less then 0, endIndex is
 greater than the length of the string, or beginIndex and endIndex together don't
 define a non-empty subrange of the string.


"
2,AttributedString,3,"void addAttributes(Map<? extends AttributedCharacterIterator.Attribute, ?> attributes, int beginIndex, int endIndex)",True,,"

addAttributes
public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,
                          int beginIndex,
                          int endIndex)
Adds a set of attributes to a subrange of the string.

Parameters:
attributes - The attributes to be added to the string.
beginIndex - Index of the first character of the range.
endIndex - Index of the character following the last
 character of the range.
Throws:
NullPointerException - if attributes is null.
IllegalArgumentException - if beginIndex is less then
 0, endIndex is greater than the length of the string, or
 beginIndex and endIndex together don't define a non-empty
 subrange of the string and the attributes parameter is not an
 empty Map.


"
2,AttributedString,4,AttributedCharacterIterator getIterator(),True,,"

getIterator
public AttributedCharacterIterator getIterator()
Creates an AttributedCharacterIterator instance that provides access to the entire contents of
 this string.

Returns:
An iterator providing access to the text and its attributes.


"
2,AttributedString,5,AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[] attributes),True,,"

getIterator
public AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[] attributes)
Creates an AttributedCharacterIterator instance that provides access to
 selected contents of this string.
 Information about attributes not listed in attributes that the
 implementor may have need not be made accessible through the iterator.
 If the list is null, all available attribute information should be made
 accessible.

Parameters:
attributes - a list of attributes that the client is interested in
Returns:
an iterator providing access to the entire text and its selected attributes


"
3,Bidi,1,int getLength(),True,,"

getLength
public int getLength()
Return the length of text in the line.

Returns:
the length of text in the line


"
3,Bidi,2,int getLevelAt(int offset),True,,"

getLevelAt
public int getLevelAt(int offset)
Return the resolved level of the character at offset.  If offset is
 < 0 or ≥ the length of the line, return the base direction
 level.

Parameters:
offset - the index of the character for which to return the level
Returns:
the resolved level of the character at offset


"
3,Bidi,3,int getRunCount(),True,,"

getRunCount
public int getRunCount()
Return the number of level runs.

Returns:
the number of level runs


"
3,Bidi,4,int getRunLevel(int run),True,,"

getRunLevel
public int getRunLevel(int run)
Return the level of the nth logical run in this line.

Parameters:
run - the index of the run, between 0 and getRunCount()
Returns:
the level of the run


"
3,Bidi,5,String getParagraph(int paraIndex),False,,NULL
4,BreakIterator,1,int first(),True,,"

first
public abstract int first()
Returns the first boundary. The iterator's current position is set
 to the first text boundary.

Returns:
The character index of the first text boundary.


"
4,BreakIterator,2,int last(),True,,"

last
public abstract int last()
Returns the last boundary. The iterator's current position is set
 to the last text boundary.

Returns:
The character index of the last text boundary.


"
4,BreakIterator,3,int next(),True,,"

next
public abstract int next()
Returns the boundary following the current boundary. If the current boundary
 is the last text boundary, it returns BreakIterator.DONE and
 the iterator's current position is unchanged. Otherwise, the iterator's
 current position is set to the boundary following the current boundary.

Returns:
The character index of the next text boundary or
 BreakIterator.DONE if the current boundary is the last text
 boundary.
 Equivalent to next(1).
See Also:
next(int)


"
4,BreakIterator,4,int previous(),True,,"

previous
public abstract int previous()
Returns the boundary preceding the current boundary. If the current boundary
 is the first text boundary, it returns BreakIterator.DONE and
 the iterator's current position is unchanged. Otherwise, the iterator's
 current position is set to the boundary preceding the current boundary.

Returns:
The character index of the previous text boundary or
 BreakIterator.DONE if the current boundary is the first text
 boundary.


"
4,BreakIterator,5,int following(int offset),True,,"

following
public abstract int following(int offset)
Returns the first boundary following the specified character offset. If the
 specified offset equals to the last text boundary, it returns
 BreakIterator.DONE and the iterator's current position is unchanged.
 Otherwise, the iterator's current position is set to the returned boundary.
 The value returned is always greater than the offset or the value
 BreakIterator.DONE.

Parameters:
offset - the character offset to begin scanning.
Returns:
The first boundary after the specified offset or
 BreakIterator.DONE if the last text boundary is passed in
 as the offset.
Throws:
IllegalArgumentException - if the specified offset is less than
 the first text boundary or greater than the last text boundary.


"
5,ChoiceFormat,1,void applyPattern(String newPattern),True,,"

applyPattern
public void applyPattern(String newPattern)
Sets the pattern.

Parameters:
newPattern - See the class description.


"
5,ChoiceFormat,2,double[] getLimits(),True,,"

getLimits
public double[] getLimits()
Get the limits passed in the constructor.

Returns:
the limits.


"
5,ChoiceFormat,3,"void setChoices(double[] limits, String[] formats)",True,,"

setChoices
public void setChoices(double[] limits,
                       String[] formats)
Set the choices to be used in formatting.

Parameters:
limits - contains the top value that you want
 parsed with that format, and should be in ascending sorted order. When
 formatting X, the choice will be the i, where
 limit[i] ≤ X < limit[i+1].
 If the limit array is not in ascending order, the results of formatting
 will be incorrect.
formats - are the formats you want to use for each limit.
 They can be either Format objects or Strings.
 When formatting with object Y,
 if the object is a NumberFormat, then ((NumberFormat) Y).format(X)
 is called. Otherwise Y.toString() is called.


"
5,ChoiceFormat,4,String toPattern(),True,,"

toPattern
public String toPattern()
Gets the pattern.

Returns:
the pattern string


"
5,ChoiceFormat,5,Object clone(),True,,"

clone
public Object clone()
Overrides Cloneable

Overrides:
clone in class NumberFormat
Returns:
a clone of this instance.
See Also:
Cloneable


"
6,CollationElementIterator,1,int next(),True,,"

next
public int next()
Get the next collation element in the string.  This iterator iterates
 over a sequence of collation elements that were built from the string.
 Because there isn't necessarily a one-to-one mapping from characters to
 collation elements, this doesn't mean the same thing as ""return the
 collation element [or ordering priority] of the next character in the
 string"".
This function returns the collation element that the iterator is currently
 pointing to and then updates the internal pointer to point to the next element.
 previous() updates the pointer first and then returns the element.  This
 means that when you change direction while iterating (i.e., call next() and
 then call previous(), or call previous() and then call next()), you'll get
 back the same element twice.

Returns:
the next collation element


"
6,CollationElementIterator,2,int previous(),True,,"

previous
public int previous()
Get the previous collation element in the string.  This iterator iterates
 over a sequence of collation elements that were built from the string.
 Because there isn't necessarily a one-to-one mapping from characters to
 collation elements, this doesn't mean the same thing as ""return the
 collation element [or ordering priority] of the previous character in the
 string"".
This function updates the iterator's internal pointer to point to the
 collation element preceding the one it's currently pointing to and then
 returns that element, while next() returns the current element and then
 updates the pointer.  This means that when you change direction while
 iterating (i.e., call next() and then call previous(), or call previous()
 and then call next()), you'll get back the same element twice.

Returns:
the previous collation element
Since:
1.2


"
6,CollationElementIterator,3,int getMaxExpansion(int ce),True,,"

getMaxExpansion
public int getMaxExpansion(int order)
Return the maximum length of any expansion sequences that end
 with the specified comparison order.

Parameters:
order - a collation order returned by previous or next.
Returns:
the maximum length of any expansion sequences ending
         with the specified order.
Since:
1.2


"
6,CollationElementIterator,4,int getOffset(),True,,"

getOffset
public int getOffset()
Returns the character offset in the original text corresponding to the next
 collation element.  (That is, getOffset() returns the position in the text
 corresponding to the collation element that will be returned by the next
 call to next().)  This value will always be the index of the FIRST character
 corresponding to the collation element (a contracting character sequence is
 when two or more characters all correspond to the same collation element).
 This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
 won't necessarily return x.

Returns:
The character offset in the original text corresponding to the collation
 element that will be returned by the next call to next().
Since:
1.2


"
6,CollationElementIterator,5,int primaryOrder(int ce),True,,"

primaryOrder
public static final int primaryOrder(int order)
Return the primary component of a collation element.

Parameters:
order - the collation element
Returns:
the element's primary component


"
7,CollationKey,1,int compareTo(CollationKey target),True,,"

compareTo
public abstract int compareTo(CollationKey target)
Compare this CollationKey to the target CollationKey. The collation rules of the
 Collator object which created these keys are applied. Note:
 CollationKeys created by different Collators can not be compared.

Specified by:
compareTo in interface Comparable<CollationKey>
Parameters:
target - target CollationKey
Returns:
Returns an integer value. Value is less than zero if this is less
 than target, value is zero if this and target are equal and value is greater than
 zero if this is greater than target.
See Also:
Collator.compare(java.lang.String, java.lang.String)


"
7,CollationKey,2,String getSourceString(),True,,"

getSourceString
public String getSourceString()
Returns the String that this CollationKey represents.

Returns:
the source string of this CollationKey


"
7,CollationKey,3,byte[] toByteArray(),True,,"

toByteArray
public abstract byte[] toByteArray()
Converts the CollationKey to a sequence of bits. If two CollationKeys
 could be legitimately compared, then one could compare the byte arrays
 for each of those keys to obtain the same result.  Byte arrays are
 organized most significant byte first.

Returns:
a byte array representation of the CollationKey


"
7,CollationKey,4,int compareTo(Object target),False,,NULL
7,CollationKey,5,CollationKey clone(),False,,NULL
8,Collator,1,"int compare(String source, String target)",True,,"

compare
public abstract int compare(String source,
                            String target)
Compares the source string to the target string according to the
 collation rules for this Collator.  Returns an integer less than,
 equal to or greater than zero depending on whether the source String is
 less than, equal to or greater than the target string.  See the Collator
 class description for an example of use.
 
 For a one time comparison, this method has the best performance. If a
 given String will be involved in multiple comparisons, CollationKey.compareTo
 has the best performance. See the Collator class description for an example
 using CollationKeys.

Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
See Also:
CollationKey, 
getCollationKey(java.lang.String)


"
8,Collator,2,CollationKey getCollationKey(String source),True,,"

getCollationKey
public abstract CollationKey getCollationKey(String source)
Transforms the String into a series of bits that can be compared bitwise
 to other CollationKeys. CollationKeys provide better performance than
 Collator.compare when Strings are involved in multiple comparisons.
 See the Collator class description for an example using CollationKeys.

Parameters:
source - the string to be transformed into a collation key.
Returns:
the CollationKey for the given String based on this Collator's collation
 rules. If the source String is null, a null CollationKey is returned.
See Also:
CollationKey, 
compare(java.lang.String, java.lang.String)


"
8,Collator,3,Locale getLocale(),False,,NULL
8,Collator,4,RuleBasedCollator clone(),False,,NULL
8,Collator,5,int hashCode(),True,,"

hashCode
public abstract int hashCode()
Generates the hash code for this Collator.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
9,DateFormat,1,String format(Date date),True,,"

format
public final String format(Date date)
Formats a Date into a date/time string.

Parameters:
date - the time value to be formatted into a time string.
Returns:
the formatted time string.


"
9,DateFormat,2,Date parse(String source) throws ParseException,True,,"

parse
public Date parse(String source)
           throws ParseException
Parses text from the beginning of the given string to produce a date.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on date parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Date parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
9,DateFormat,3,void setLenient(boolean lenient),True,,"

setLenient
public void setLenient(boolean lenient)
Specify whether or not date/time parsing is to be lenient.  With
 lenient parsing, the parser may use heuristics to interpret inputs that
 do not precisely match this object's format.  With strict parsing,
 inputs must match this object's format.

 This method is equivalent to the following call.
 
 getCalendar().setLenient(lenient)
 
This leniency value is overwritten by a call to setCalendar().

Parameters:
lenient - when true, parsing is lenient
See Also:
Calendar.setLenient(boolean)


"
9,DateFormat,4,void setTimeZone(TimeZone zone),True,,"

setTimeZone
public void setTimeZone(TimeZone zone)
Sets the time zone for the calendar of this DateFormat object.
 This method is equivalent to the following call.
 
 getCalendar().setTimeZone(zone)
 
The TimeZone set by this method is overwritten by a
 setCalendar call.

 The TimeZone set by this method may be overwritten as
 a result of a call to the parse method.

Parameters:
zone - the given new time zone.


"
9,DateFormat,5,DateFormat getInstance(),True,,"

getInstance
public static final DateFormat getInstance()
Get a default date/time formatter that uses the SHORT style for both the
 date and the time.

Returns:
a date/time formatter


"
10,DateFormat.Field,1,int getCalendarField(),True,,"

getCalendarField
public int getCalendarField()
Returns the Calendar field associated with this
 attribute. For example, if this represents the hours field of
 a Calendar, this would return
 Calendar.HOUR. If there is no corresponding
 Calendar constant, this will return -1.

Returns:
Calendar constant for this field
See Also:
Calendar


"
10,DateFormat.Field,2,DateFormat.Field ofCalendarField(int calendarField),True,,"

ofCalendarField
public static DateFormat.Field ofCalendarField(int calendarField)
Returns the Field constant that corresponds to
 the Calendar constant calendarField.
 If there is no direct mapping between the Calendar
 constant and a Field, null is returned.

Parameters:
calendarField - Calendar field constant
Returns:
Field instance representing calendarField.
Throws:
IllegalArgumentException - if calendarField is
         not the value of a Calendar field constant.
See Also:
Calendar


"
10,DateFormat.Field,3,DateFormat.Field ofLocalizedTime(DateFormat.Field field),False,,NULL
10,DateFormat.Field,4,DateFormat.Field ofPattern(String pattern),False,,NULL
10,DateFormat.Field,5,DateFormat.Field ofTime(DateFormat.Field field),False,,NULL
11,DateFormatSymbols,1,String[] getMonths(),True,,"

getMonths
public String[] getMonths()
Gets month strings. For example: ""January"", ""February"", etc.

 If the language requires different forms for formatting and
 stand-alone usages, this method returns month names in the
 formatting form. For example, the preferred month name for
 January in the Czech language is ledna in the
 formatting form, while it is leden in the stand-alone
 form. This method returns ""ledna"" in this case. Refer
 to the 
 Calendar Elements in the Unicode Locale Data Markup Language
 (LDML) specification for more details.

Returns:
the month strings.


"
11,DateFormatSymbols,2,String[] getShortMonths(),True,,"

getShortMonths
public String[] getShortMonths()
Gets short month strings. For example: ""Jan"", ""Feb"", etc.

 If the language requires different forms for formatting and
 stand-alone usages, This method returns short month names in
 the formatting form. For example, the preferred abbreviation
 for January in the Catalan language is de gen. in the
 formatting form, while it is gen. in the stand-alone
 form. This method returns ""de gen."" in this case. Refer
 to the 
 Calendar Elements in the Unicode Locale Data Markup Language
 (LDML) specification for more details.

Returns:
the short month strings.


"
11,DateFormatSymbols,3,String[] getWeekdays(),True,,"

getWeekdays
public String[] getWeekdays()
Gets weekday strings. For example: ""Sunday"", ""Monday"", etc.

Returns:
the weekday strings. Use Calendar.SUNDAY,
 Calendar.MONDAY, etc. to index the result array.


"
11,DateFormatSymbols,4,String[] getShortWeekdays(),True,,"

getShortWeekdays
public String[] getShortWeekdays()
Gets short weekday strings. For example: ""Sun"", ""Mon"", etc.

Returns:
the short weekday strings. Use Calendar.SUNDAY,
 Calendar.MONDAY, etc. to index the result array.


"
11,DateFormatSymbols,5,String[] getZoneStrings(),False,,NULL
12,DecimalFormat,1,String format(double number),False,,NULL
12,DecimalFormat,2,"StringBuffer format(double number, StringBuffer toAppendTo, FieldPosition pos)",True,,"

format
public StringBuffer format(double number,
                           StringBuffer result,
                           FieldPosition fieldPosition)
Formats a double to produce a string.

Specified by:
format in class NumberFormat
Parameters:
number - The double to format
result - where the text is to be appended
fieldPosition - On input: an alignment field, if desired.
 On output: the offsets of the alignment field.
Returns:
The formatted number string
Throws:
ArithmeticException - if rounding is needed with rounding
            mode being set to RoundingMode.UNNECESSARY
See Also:
FieldPosition


"
12,DecimalFormat,3,AttributedCharacterIterator formatToCharacterIterator(Object obj),True,,"

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object obj)
Formats an Object producing an AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 Each attribute key of the AttributedCharacterIterator will be of type
 NumberFormat.Field, with the attribute value being the
 same as the attribute key.

Overrides:
formatToCharacterIterator in class Format
Parameters:
obj - The object to format
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if obj is null.
IllegalArgumentException - when the Format cannot format the
            given object.
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
Since:
1.4


"
12,DecimalFormat,4,"Number parse(String text, ParsePosition pos)",True,,"

parse
public Number parse(String text,
                    ParsePosition pos)
Parses text from a string to produce a Number.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 number is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 The subclass returned depends on the value of isParseBigDecimal()
 as well as on the string being parsed.
 
If isParseBigDecimal() is false (the default),
       most integer values are returned as Long
       objects, no matter how they are written: ""17"" and
       ""17.000"" both parse to Long(17).
       Values that cannot fit into a Long are returned as
       Doubles. This includes values with a fractional part,
       infinite values, NaN, and the value -0.0.
       DecimalFormat does not decide whether to
       return a Double or a Long based on the
       presence of a decimal separator in the source string. Doing so
       would prevent integers that overflow the mantissa of a double,
       such as ""-9,223,372,036,854,775,808.00"", from being
       parsed accurately.
       
       Callers may use the Number methods
       doubleValue, longValue, etc., to obtain
       the type they want.
   If isParseBigDecimal() is true, values are returned
       as BigDecimal objects. The values are the ones
       constructed by BigDecimal.BigDecimal(String)
       for corresponding strings in locale-independent format. The
       special cases negative and positive infinity and NaN are returned
       as Double instances holding the values of the
       corresponding Double constants.
 

DecimalFormat parses all Unicode characters that represent
 decimal digits, as defined by Character.digit(). In
 addition, DecimalFormat also recognizes as digits the ten
 consecutive characters starting with the localized zero digit defined in
 the DecimalFormatSymbols object.

Specified by:
parse in class NumberFormat
Parameters:
text - the string to be parsed
pos - A ParsePosition object with index and error
             index information as described above.
Returns:
the parsed value, or null if the parse fails
Throws:
NullPointerException - if text or
             pos is null.
See Also:
NumberFormat.isParseIntegerOnly(), 
Format.parseObject(java.lang.String, java.text.ParsePosition)


"
12,DecimalFormat,5,void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols),True,,"

setDecimalFormatSymbols
public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)
Sets the decimal format symbols, which is generally not changed
 by the programmer or user.

Parameters:
newSymbols - desired DecimalFormatSymbols
See Also:
DecimalFormatSymbols


"
13,DecimalFormatSymbols,1,char getDecimalSeparator(),True,,"

getDecimalSeparator
public char getDecimalSeparator()
Gets the character used for decimal sign. Different for French, etc.

Returns:
the character used for decimal sign


"
13,DecimalFormatSymbols,2,char getGroupingSeparator(),True,,"

getGroupingSeparator
public char getGroupingSeparator()
Gets the character used for thousands separator. Different for French, etc.

Returns:
the grouping separator


"
13,DecimalFormatSymbols,3,char getMinusSign(),True,,"

getMinusSign
public char getMinusSign()
Gets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

Returns:
the character representing minus sign


"
13,DecimalFormatSymbols,4,char getPatternSeparator(),True,,"

getPatternSeparator
public char getPatternSeparator()
Gets the character used to separate positive and negative subpatterns
 in a pattern.

Returns:
the pattern separator


"
13,DecimalFormatSymbols,5,char getPercent(),True,,"

getPercent
public char getPercent()
Gets the character used for percent sign. Different for Arabic, etc.

Returns:
the character used for percent sign


"
14,FieldPosition,1,int getBeginIndex(),True,,"

getBeginIndex
public int getBeginIndex()
Retrieves the index of the first character in the requested field.

Returns:
the begin index


"
14,FieldPosition,2,int getEndIndex(),True,,"

getEndIndex
public int getEndIndex()
Retrieves the index of the character following the last character in the
 requested field.

Returns:
the end index


"
14,FieldPosition,3,FieldPosition clone(),False,,NULL
14,FieldPosition,4,void setBeginIndex(int bi),True,,"

setBeginIndex
public void setBeginIndex(int bi)
Sets the begin index.  For use by subclasses of Format.

Parameters:
bi - the begin index
Since:
1.2


"
14,FieldPosition,5,void setEndIndex(int ei),True,,"

setEndIndex
public void setEndIndex(int ei)
Sets the end index.  For use by subclasses of Format.

Parameters:
ei - the end index
Since:
1.2


"
15,Format,1,String format(Object obj),True,,"

format
public final String format(Object obj)
Formats an object to produce a string. This is equivalent to
 
format(obj,
         new StringBuffer(), new FieldPosition(0)).toString();


Parameters:
obj - The object to format
Returns:
Formatted string.
Throws:
IllegalArgumentException - if the Format cannot format the given
            object


"
15,Format,2,Object parseObject(String source),True,,"

parseObject
public Object parseObject(String source)
                   throws ParseException
Parses text from the beginning of the given string to produce an object.
 The method may not use the entire text of the given string.

Parameters:
source - A String whose beginning should be parsed.
Returns:
An Object parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
15,Format,3,"StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",True,,"

format
public abstract StringBuffer format(Object obj,
                                    StringBuffer toAppendTo,
                                    FieldPosition pos)
Formats an object and appends the resulting text to a given string
 buffer.
 If the pos argument identifies a field used by the format,
 then its indices are set to the beginning and end of the first such
 field encountered.

Parameters:
obj - The object to format
toAppendTo - where the text is to be appended
pos - A FieldPosition identifying a field
               in the formatted text
Returns:
the string buffer passed in as toAppendTo,
               with formatted text appended
Throws:
NullPointerException - if toAppendTo or
            pos is null
IllegalArgumentException - if the Format cannot format the given
            object


"
15,Format,4,"Object parseObject(String source, ParsePosition pos)",True,,"

parseObject
public abstract Object parseObject(String source,
                                   ParsePosition pos)
Parses text from a string to produce an object.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 object is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.

Parameters:
source - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
            index information as described above.
Returns:
An Object parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if pos is null.


"
15,Format,5,AttributedCharacterIterator formatToCharacterIterator(Object obj),True,,"

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object obj)
Formats an Object producing an AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 Each attribute key of the AttributedCharacterIterator will be of type
 Field. It is up to each Format implementation
 to define what the legal values are for each attribute in the
 AttributedCharacterIterator, but typically the attribute
 key is also used as the attribute value.
 The default implementation creates an
 AttributedCharacterIterator with no attributes. Subclasses
 that support fields should override this and create an
 AttributedCharacterIterator with meaningful attributes.

Parameters:
obj - The object to format
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if obj is null.
IllegalArgumentException - when the Format cannot format the
            given object.
Since:
1.4


"
16,Format.Field,1,Format.Field[] getFields(),False,,NULL
16,Format.Field,2,int hashCode(),False,,NULL
16,Format.Field,3,String toString(),False,,NULL
16,Format.Field,4,boolean equals(Object obj),False,,NULL
16,Format.Field,5,String getKey(),False,,NULL
17,MessageFormat,1,String format(Object... arguments),False,,NULL
17,MessageFormat,2,"String format(String pattern, Object... arguments)",True,,"

format
public static String format(String pattern,
                            Object... arguments)
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments. This is equivalent to
 
(new MessageFormat(pattern)).format(arguments, new StringBuffer(), null).toString()


Parameters:
pattern - the pattern string
arguments - object(s) to format
Returns:
the formatted string
Throws:
IllegalArgumentException - if the pattern is invalid,
            or if an argument in the arguments array
            is not of the type expected by the format element(s)
            that use it.


"
17,MessageFormat,3,void setLocale(Locale newLocale),True,,"

setLocale
public void setLocale(Locale locale)
Sets the locale to be used when creating or comparing subformats.
 This affects subsequent calls
 
to the applyPattern
     and toPattern methods if format elements specify
     a format type and therefore have the subformats created in the
     applyPattern method, as well as
 to the format and
     formatToCharacterIterator methods
     if format elements do not specify a format type and therefore have
     the subformats created in the formatting methods.
 
 Subformats that have already been created are not affected.

Parameters:
locale - the locale to be used when creating or comparing subformats


"
17,MessageFormat,4,void applyPattern(String pattern),True,,"

applyPattern
public void applyPattern(String pattern)
Sets the pattern used by this message format.
 The method parses the pattern and creates a list of subformats
 for the format elements contained in it.
 Patterns and their interpretation are specified in the
 class description.

Parameters:
pattern - the pattern for this message format
Throws:
IllegalArgumentException - if the pattern is invalid


"
17,MessageFormat,5,void setFormatsByArgumentIndex(Format[] newFormats),True,,"

setFormatsByArgumentIndex
public void setFormatsByArgumentIndex(Format[] newFormats)
Sets the formats to use for the values passed into
 format methods or returned from parse
 methods. The indices of elements in newFormats
 correspond to the argument indices used in the previously set
 pattern string.
 The order of formats in newFormats thus corresponds to
 the order of elements in the arguments array passed
 to the format methods or the result array returned
 by the parse methods.
 
 If an argument index is used for more than one format element
 in the pattern string, then the corresponding new format is used
 for all such format elements. If an argument index is not used
 for any format element in the pattern string, then the
 corresponding new format is ignored. If fewer formats are provided
 than needed, then only the formats for argument indices less
 than newFormats.length are replaced.

Parameters:
newFormats - the new formats to use
Throws:
NullPointerException - if newFormats is null
Since:
1.4


"
18,MessageFormat.Field,1,MessageFormat.Field[] values(),False,,NULL
18,MessageFormat.Field,2,MessageFormat.Field valueOf(String name),False,,NULL
18,MessageFormat.Field,3,int hashCode(),False,,NULL
18,MessageFormat.Field,4,String toString(),False,,NULL
18,MessageFormat.Field,5,boolean equals(Object obj),False,,NULL
19,Normalizer,1,"String normalize(CharSequence src, Normalizer.Form form)",True,,"

normalize
public static String normalize(CharSequence src,
                               Normalizer.Form form)
Normalize a sequence of char values.
 The sequence will be normalized according to the specified normalization
 from.

Parameters:
src - The sequence of char values to normalize.
form - The normalization form; one of
                   Normalizer.Form.NFC,
                   Normalizer.Form.NFD,
                   Normalizer.Form.NFKC,
                   Normalizer.Form.NFKD
Returns:
The normalized String
Throws:
NullPointerException - If src or form
 is null.


"
19,Normalizer,2,"boolean isNormalized(CharSequence src, Normalizer.Form form)",True,,"

isNormalized
public static boolean isNormalized(CharSequence src,
                                   Normalizer.Form form)
Determines if the given sequence of char values is normalized.

Parameters:
src - The sequence of char values to be checked.
form - The normalization form; one of
                   Normalizer.Form.NFC,
                   Normalizer.Form.NFD,
                   Normalizer.Form.NFKC,
                   Normalizer.Form.NFKD
Returns:
true if the sequence of char values is normalized;
 false otherwise.
Throws:
NullPointerException - If src or form
 is null.


"
19,Normalizer,3,"int compare(CharSequence s1, CharSequence s2)",False,,NULL
19,Normalizer,4,"String compose(CharSequence src, boolean compat)",False,,NULL
19,Normalizer,5,"String decompose(CharSequence src, boolean compat)",False,,NULL
20,NumberFormat,1,NumberFormat getInstance(),True,,"

getInstance
public static final NumberFormat getInstance()
Returns a general-purpose number format for the current default
 FORMAT locale.
 This is the same as calling
 getNumberInstance().

Returns:
the NumberFormat instance for general-purpose number
 formatting


"
20,NumberFormat,2,NumberFormat getCurrencyInstance(),True,,"

getCurrencyInstance
public static final NumberFormat getCurrencyInstance()
Returns a currency format for the current default
 FORMAT locale.
 This is equivalent to calling
 getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for currency formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
20,NumberFormat,3,NumberFormat getNumberInstance(),True,,"

getNumberInstance
public static final NumberFormat getNumberInstance()
Returns a general-purpose number format for the current default
 FORMAT locale.
 This is equivalent to calling
 getNumberInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for general-purpose number
 formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
20,NumberFormat,4,NumberFormat getPercentInstance(),True,,"

getPercentInstance
public static final NumberFormat getPercentInstance()
Returns a percentage format for the current default
 FORMAT locale.
 This is equivalent to calling
 getPercentInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for percentage formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
20,NumberFormat,5,Number parse(String source) throws ParseException,True,,"

parse
public Number parse(String source)
             throws ParseException
Parses text from the beginning of the given string to produce a number.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on number parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Number parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
21,NumberFormat.Field,1,int getAttribute(),False,,NULL
21,NumberFormat.Field,2,NumberFormat.Field ofAttribute(int attribute),False,,NULL
21,NumberFormat.Field,3,NumberFormat.Field[] values(),False,,NULL
21,NumberFormat.Field,4,NumberFormat.Field valueOf(String name),False,,NULL
21,NumberFormat.Field,5,NumberFormat.Field[] values(),False,,NULL
23,RuleBasedCollator,1,RuleBasedCollator clone(),False,,NULL
23,RuleBasedCollator,2,int getStrength(),False,,NULL
23,RuleBasedCollator,3,void setStrength(int newStrength),False,,NULL
23,RuleBasedCollator,4,String getRules(),True,,"

getRules
public String getRules()
Gets the table-based rules for the collation object.

Returns:
returns the collation rules that the table collation object
 was created from.


"
23,RuleBasedCollator,5,int getDecomposition(),False,,NULL
24,SimpleDateFormat,1,String format(Date date),False,,NULL
24,SimpleDateFormat,2,Date parse(String source) throws ParseException,False,,NULL
24,SimpleDateFormat,3,void applyPattern(String pattern),True,,"

applyPattern
public void applyPattern(String pattern)
Applies the given pattern string to this date format.

Parameters:
pattern - the new date and time pattern for this date format
Throws:
NullPointerException - if the given pattern is null
IllegalArgumentException - if the given pattern is invalid


"
24,SimpleDateFormat,4,String toPattern(),True,,"

toPattern
public String toPattern()
Returns a pattern string describing this date format.

Returns:
a pattern string describing this date format.


"
24,SimpleDateFormat,5,void setLenient(boolean lenient),False,,NULL
25,StringCharacterIterator,1,char first(),True,,"

first
public char first()
Implements CharacterIterator.first() for String.

Specified by:
first in interface CharacterIterator
Returns:
the first character in the text, or DONE if the text is empty
See Also:
CharacterIterator.first()


"
25,StringCharacterIterator,2,char last(),True,,"

last
public char last()
Implements CharacterIterator.last() for String.

Specified by:
last in interface CharacterIterator
Returns:
the last character in the text, or DONE if the text is empty
See Also:
CharacterIterator.last()


"
25,StringCharacterIterator,3,char current(),True,,"

current
public char current()
Implements CharacterIterator.current() for String.

Specified by:
current in interface CharacterIterator
Returns:
the character at the current position or DONE if the current
 position is off the end of the text.
See Also:
CharacterIterator.current()


"
25,StringCharacterIterator,4,char next(),True,,"

next
public char next()
Implements CharacterIterator.next() for String.

Specified by:
next in interface CharacterIterator
Returns:
the character at the new position or DONE if the new
 position is off the end of the text range.
See Also:
CharacterIterator.next()


"
25,StringCharacterIterator,5,char previous(),True,,"

previous
public char previous()
Implements CharacterIterator.previous() for String.

Specified by:
previous in interface CharacterIterator
Returns:
the character at the new position or DONE if the current
 position is equal to getBeginIndex().
See Also:
CharacterIterator.previous()


"
