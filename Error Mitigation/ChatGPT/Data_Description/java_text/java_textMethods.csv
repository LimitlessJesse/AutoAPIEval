ClassName,Method,Return Type,Description,Full Description
Annotation,getValue(),Object,"Returns the value of the attribute, which may be null.","

getValue
public Object getValue()
Returns the value of the attribute, which may be null.

Returns:
the value of the attribute


"
Annotation,toString(),String,Returns the String representation of this Annotation.,"

toString
public String toString()
Returns the String representation of this Annotation.

Overrides:
toString in class Object
Returns:
the String representation of this Annotation


"
AttributedCharacterIterator.Attribute,equals(Object obj),boolean,Compares two objects for equality.,"

equals
public final boolean equals(Object obj)
Compares two objects for equality. This version only returns true
 for x.equals(y) if x and y refer
 to the same object, and guarantees this for all subclasses.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
AttributedCharacterIterator.Attribute,getName(),protected String,Returns the name of the attribute.,"

getName
protected String getName()
Returns the name of the attribute.

Returns:
the name of Attribute


"
AttributedCharacterIterator.Attribute,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public final int hashCode()
Returns a hash code value for the object. This version is identical to
 the one in Object, but is also final.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
AttributedCharacterIterator.Attribute,readResolve(),protected Object,Resolves instances being deserialized to the predefined constants.,"

readResolve
protected Object readResolve()
                      throws InvalidObjectException
Resolves instances being deserialized to the predefined constants.

Returns:
the resolved Attribute object
Throws:
InvalidObjectException - if the object to resolve is not
                                an instance of Attribute


"
AttributedCharacterIterator.Attribute,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Returns a string representation of the object. This version returns the
 concatenation of class name, ""("", a name identifying the attribute
 and "")"".

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
AttributedString,"addAttribute(AttributedCharacterIterator.Attribute attribute, Object value)",void,Adds an attribute to the entire string.,"

addAttribute
public void addAttribute(AttributedCharacterIterator.Attribute attribute,
                         Object value)
Adds an attribute to the entire string.

Parameters:
attribute - the attribute key
value - the value of the attribute; may be null
Throws:
NullPointerException - if attribute is null.
IllegalArgumentException - if the AttributedString has length 0
 (attributes cannot be applied to a 0-length range).


"
AttributedString,"addAttribute(AttributedCharacterIterator.Attribute attribute, Object value, int beginIndex, int endIndex)",void,Adds an attribute to a subrange of the string.,"

addAttribute
public void addAttribute(AttributedCharacterIterator.Attribute attribute,
                         Object value,
                         int beginIndex,
                         int endIndex)
Adds an attribute to a subrange of the string.

Parameters:
attribute - the attribute key
value - The value of the attribute. May be null.
beginIndex - Index of the first character of the range.
endIndex - Index of the character following the last character of the range.
Throws:
NullPointerException - if attribute is null.
IllegalArgumentException - if beginIndex is less then 0, endIndex is
 greater than the length of the string, or beginIndex and endIndex together don't
 define a non-empty subrange of the string.


"
AttributedString,"addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes, int beginIndex, int endIndex)",void,Adds a set of attributes to a subrange of the string.,"

addAttributes
public void addAttributes(Map<? extends AttributedCharacterIterator.Attribute,?> attributes,
                          int beginIndex,
                          int endIndex)
Adds a set of attributes to a subrange of the string.

Parameters:
attributes - The attributes to be added to the string.
beginIndex - Index of the first character of the range.
endIndex - Index of the character following the last
 character of the range.
Throws:
NullPointerException - if attributes is null.
IllegalArgumentException - if beginIndex is less then
 0, endIndex is greater than the length of the string, or
 beginIndex and endIndex together don't define a non-empty
 subrange of the string and the attributes parameter is not an
 empty Map.


"
AttributedString,getIterator(),AttributedCharacterIterator,Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string.,"

getIterator
public AttributedCharacterIterator getIterator()
Creates an AttributedCharacterIterator instance that provides access to the entire contents of
 this string.

Returns:
An iterator providing access to the text and its attributes.


"
AttributedString,getIterator(AttributedCharacterIterator.Attribute[] attributes),AttributedCharacterIterator,Creates an AttributedCharacterIterator instance that provides access to selected contents of this string.,"

getIterator
public AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[] attributes)
Creates an AttributedCharacterIterator instance that provides access to
 selected contents of this string.
 Information about attributes not listed in attributes that the
 implementor may have need not be made accessible through the iterator.
 If the list is null, all available attribute information should be made
 accessible.

Parameters:
attributes - a list of attributes that the client is interested in
Returns:
an iterator providing access to the entire text and its selected attributes


"
AttributedString,"getIterator(AttributedCharacterIterator.Attribute[] attributes, int beginIndex, int endIndex)",AttributedCharacterIterator,Creates an AttributedCharacterIterator instance that provides access to selected contents of this string.,"

getIterator
public AttributedCharacterIterator getIterator(AttributedCharacterIterator.Attribute[] attributes,
                                               int beginIndex,
                                               int endIndex)
Creates an AttributedCharacterIterator instance that provides access to
 selected contents of this string.
 Information about attributes not listed in attributes that the
 implementor may have need not be made accessible through the iterator.
 If the list is null, all available attribute information should be made
 accessible.

Parameters:
attributes - a list of attributes that the client is interested in
beginIndex - the index of the first character
endIndex - the index of the character following the last character
Returns:
an iterator providing access to the text and its attributes
Throws:
IllegalArgumentException - if beginIndex is less then 0,
 endIndex is greater than the length of the string, or beginIndex is
 greater than endIndex.


"
Bidi,baseIsLeftToRight(),boolean,Return true if the base direction is left-to-right.,"

baseIsLeftToRight
public boolean baseIsLeftToRight()
Return true if the base direction is left-to-right.

Returns:
true if the base direction is left-to-right


"
Bidi,"createLineBidi(int lineStart, int lineLimit)",Bidi,Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi.,"

createLineBidi
public Bidi createLineBidi(int lineStart,
                           int lineLimit)
Create a Bidi object representing the bidi information on a line of text within
 the paragraph represented by the current Bidi.  This call is not required if the
 entire paragraph fits on one line.

Parameters:
lineStart - the offset from the start of the paragraph to the start of the line.
lineLimit - the offset from the start of the paragraph to the limit of the line.
Returns:
a Bidi object


"
Bidi,getBaseLevel(),int,"Return the base level (0 if left-to-right, 1 if right-to-left).","

getBaseLevel
public int getBaseLevel()
Return the base level (0 if left-to-right, 1 if right-to-left).

Returns:
the base level


"
Bidi,getLength(),int,Return the length of text in the line.,"

getLength
public int getLength()
Return the length of text in the line.

Returns:
the length of text in the line


"
Bidi,getLevelAt(int offset),int,Return the resolved level of the character at offset.,"

getLevelAt
public int getLevelAt(int offset)
Return the resolved level of the character at offset.  If offset is
 < 0 or â‰¥ the length of the line, return the base direction
 level.

Parameters:
offset - the index of the character for which to return the level
Returns:
the resolved level of the character at offset


"
Bidi,getRunCount(),int,Return the number of level runs.,"

getRunCount
public int getRunCount()
Return the number of level runs.

Returns:
the number of level runs


"
Bidi,getRunLevel(int run),int,Return the level of the nth logical run in this line.,"

getRunLevel
public int getRunLevel(int run)
Return the level of the nth logical run in this line.

Parameters:
run - the index of the run, between 0 and getRunCount()
Returns:
the level of the run


"
Bidi,getRunLimit(int run),int,"Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line.","

getRunLimit
public int getRunLimit(int run)
Return the index of the character past the end of the nth logical run in this line, as
 an offset from the start of the line.  For example, this will return the length
 of the line for the last run on the line.

Parameters:
run - the index of the run, between 0 and getRunCount()
Returns:
limit the limit of the run


"
Bidi,getRunStart(int run),int,"Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.","

getRunStart
public int getRunStart(int run)
Return the index of the character at the start of the nth logical run in this line, as
 an offset from the start of the line.

Parameters:
run - the index of the run, between 0 and getRunCount()
Returns:
the start of the run


"
Bidi,isLeftToRight(),boolean,Return true if the line is all left-to-right text and the base direction is left-to-right.,"

isLeftToRight
public boolean isLeftToRight()
Return true if the line is all left-to-right text and the base direction is left-to-right.

Returns:
true if the line is all left-to-right text and the base direction is left-to-right


"
Bidi,isMixed(),boolean,Return true if the line is not left-to-right or right-to-left.,"

isMixed
public boolean isMixed()
Return true if the line is not left-to-right or right-to-left.  This means it either has mixed runs of left-to-right
 and right-to-left text, or the base direction differs from the direction of the only run of text.

Returns:
true if the line is not left-to-right or right-to-left.


"
Bidi,isRightToLeft(),boolean,"Return true if the line is all right-to-left text, and the base direction is right-to-left.","

isRightToLeft
public boolean isRightToLeft()
Return true if the line is all right-to-left text, and the base direction is right-to-left.

Returns:
true if the line is all right-to-left text, and the base direction is right-to-left


"
Bidi,"reorderVisually(byte[] levels, int levelStart, Object[] objects, int objectStart, int count)",static void,Reorder the objects in the array into visual order based on their levels.,"

reorderVisually
public static void reorderVisually(byte[] levels,
                                   int levelStart,
                                   Object[] objects,
                                   int objectStart,
                                   int count)
Reorder the objects in the array into visual order based on their levels.
 This is a utility function to use when you have a collection of objects
 representing runs of text in logical order, each run containing text
 at a single level.  The elements at index from
 objectStart up to objectStart + count
 in the objects array will be reordered into visual order assuming
 each run of text has the level indicated by the corresponding element
 in the levels array (at index - objectStart + levelStart).

Parameters:
levels - an array representing the bidi level of each object
levelStart - the start position in the levels array
objects - the array of objects to be reordered into visual order
objectStart - the start position in the objects array
count - the number of objects to reorder


"
Bidi,"requiresBidi(char[] text, int start, int limit)",static boolean,Return true if the specified text requires bidi analysis.,"

requiresBidi
public static boolean requiresBidi(char[] text,
                                   int start,
                                   int limit)
Return true if the specified text requires bidi analysis.  If this returns false,
 the text will display left-to-right.  Clients can then avoid constructing a Bidi object.
 Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped
 and ordered for display, and so will not cause this function to return true.

Parameters:
text - the text containing the characters to test
start - the start of the range of characters to test
limit - the limit of the range of characters to test
Returns:
true if the range of characters requires bidi analysis


"
Bidi,toString(),String,"Display the bidi internal state, used in debugging.","

toString
public String toString()
Display the bidi internal state, used in debugging.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
BreakIterator,clone(),Object,Create a copy of this iterator,"

clone
public Object clone()
Create a copy of this iterator

Overrides:
clone in class Object
Returns:
A copy of this
See Also:
Cloneable


"
BreakIterator,current(),abstract int,"Returns character index of the text boundary that was most recently returned by next(), next(int), previous(), first(), last(), following(int) or preceding(int).","

current
public abstract int current()
Returns character index of the text boundary that was most
 recently returned by next(), next(int), previous(), first(), last(),
 following(int) or preceding(int). If any of these methods returns
 BreakIterator.DONE because either first or last text boundary
 has been reached, it returns the first or last text boundary depending on
 which one is reached.

Returns:
The text boundary returned from the above methods, first or last
 text boundary.
See Also:
next(), 
next(int), 
previous(), 
first(), 
last(), 
following(int), 
preceding(int)


"
BreakIterator,first(),abstract int,Returns the first boundary.,"

first
public abstract int first()
Returns the first boundary. The iterator's current position is set
 to the first text boundary.

Returns:
The character index of the first text boundary.


"
BreakIterator,following(int offset),abstract int,Returns the first boundary following the specified character offset.,"

following
public abstract int following(int offset)
Returns the first boundary following the specified character offset. If the
 specified offset equals to the last text boundary, it returns
 BreakIterator.DONE and the iterator's current position is unchanged.
 Otherwise, the iterator's current position is set to the returned boundary.
 The value returned is always greater than the offset or the value
 BreakIterator.DONE.

Parameters:
offset - the character offset to begin scanning.
Returns:
The first boundary after the specified offset or
 BreakIterator.DONE if the last text boundary is passed in
 as the offset.
Throws:
IllegalArgumentException - if the specified offset is less than
 the first text boundary or greater than the last text boundary.


"
BreakIterator,getAvailableLocales(),static Locale[],Returns an array of all locales for which the get*Instance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 get*Instance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the Java
 runtime and by installed
 BreakIteratorProvider implementations.
 It must contain at least a Locale
 instance equal to Locale.US.

Returns:
An array of locales for which localized
         BreakIterator instances are available.


"
BreakIterator,getCharacterInstance(),static BreakIterator,Returns a new BreakIterator instance for character breaks for the default locale.,"

getCharacterInstance
public static BreakIterator getCharacterInstance()
Returns a new BreakIterator instance
 for character breaks
 for the default locale.

Returns:
A break iterator for character breaks


"
BreakIterator,getCharacterInstance(Locale locale),static BreakIterator,Returns a new BreakIterator instance for character breaks for the given locale.,"

getCharacterInstance
public static BreakIterator getCharacterInstance(Locale locale)
Returns a new BreakIterator instance
 for character breaks
 for the given locale.

Parameters:
locale - the desired locale
Returns:
A break iterator for character breaks
Throws:
NullPointerException - if locale is null


"
BreakIterator,getLineInstance(),static BreakIterator,Returns a new BreakIterator instance for line breaks for the default locale.,"

getLineInstance
public static BreakIterator getLineInstance()
Returns a new BreakIterator instance
 for line breaks
 for the default locale.

Returns:
A break iterator for line breaks


"
BreakIterator,getLineInstance(Locale locale),static BreakIterator,Returns a new BreakIterator instance for line breaks for the given locale.,"

getLineInstance
public static BreakIterator getLineInstance(Locale locale)
Returns a new BreakIterator instance
 for line breaks
 for the given locale.

Parameters:
locale - the desired locale
Returns:
A break iterator for line breaks
Throws:
NullPointerException - if locale is null


"
BreakIterator,getSentenceInstance(),static BreakIterator,Returns a new BreakIterator instance for sentence breaks for the default locale.,"

getSentenceInstance
public static BreakIterator getSentenceInstance()
Returns a new BreakIterator instance
 for sentence breaks
 for the default locale.

Returns:
A break iterator for sentence breaks


"
BreakIterator,getSentenceInstance(Locale locale),static BreakIterator,Returns a new BreakIterator instance for sentence breaks for the given locale.,"

getSentenceInstance
public static BreakIterator getSentenceInstance(Locale locale)
Returns a new BreakIterator instance
 for sentence breaks
 for the given locale.

Parameters:
locale - the desired locale
Returns:
A break iterator for sentence breaks
Throws:
NullPointerException - if locale is null


"
BreakIterator,getText(),abstract CharacterIterator,Get the text being scanned,"

getText
public abstract CharacterIterator getText()
Get the text being scanned

Returns:
the text being scanned


"
BreakIterator,getWordInstance(),static BreakIterator,Returns a new BreakIterator instance for word breaks for the default locale.,"

getWordInstance
public static BreakIterator getWordInstance()
Returns a new BreakIterator instance
 for word breaks
 for the default locale.

Returns:
A break iterator for word breaks


"
BreakIterator,getWordInstance(Locale locale),static BreakIterator,Returns a new BreakIterator instance for word breaks for the given locale.,"

getWordInstance
public static BreakIterator getWordInstance(Locale locale)
Returns a new BreakIterator instance
 for word breaks
 for the given locale.

Parameters:
locale - the desired locale
Returns:
A break iterator for word breaks
Throws:
NullPointerException - if locale is null


"
BreakIterator,isBoundary(int offset),boolean,Returns true if the specified character offset is a text boundary.,"

isBoundary
public boolean isBoundary(int offset)
Returns true if the specified character offset is a text boundary.

Parameters:
offset - the character offset to check.
Returns:
true if ""offset"" is a boundary position,
 false otherwise.
Throws:
IllegalArgumentException - if the specified offset is less than
 the first text boundary or greater than the last text boundary.
Since:
1.2


"
BreakIterator,last(),abstract int,Returns the last boundary.,"

last
public abstract int last()
Returns the last boundary. The iterator's current position is set
 to the last text boundary.

Returns:
The character index of the last text boundary.


"
BreakIterator,next(),abstract int,Returns the boundary following the current boundary.,"

next
public abstract int next()
Returns the boundary following the current boundary. If the current boundary
 is the last text boundary, it returns BreakIterator.DONE and
 the iterator's current position is unchanged. Otherwise, the iterator's
 current position is set to the boundary following the current boundary.

Returns:
The character index of the next text boundary or
 BreakIterator.DONE if the current boundary is the last text
 boundary.
 Equivalent to next(1).
See Also:
next(int)


"
BreakIterator,next(int n),abstract int,Returns the nth boundary from the current boundary.,"

next
public abstract int next(int n)
Returns the nth boundary from the current boundary. If either
 the first or last text boundary has been reached, it returns
 BreakIterator.DONE and the current position is set to either
 the first or last text boundary depending on which one is reached. Otherwise,
 the iterator's current position is set to the new boundary.
 For example, if the iterator's current position is the mth text boundary
 and three more boundaries exist from the current boundary to the last text
 boundary, the next(2) call will return m + 2. The new text position is set
 to the (m + 2)th text boundary. A next(4) call would return
 BreakIterator.DONE and the last text boundary would become the
 new text position.

Parameters:
n - which boundary to return.  A value of 0
 does nothing.  Negative values move to previous boundaries
 and positive values move to later boundaries.
Returns:
The character index of the nth boundary from the current position
 or BreakIterator.DONE if either first or last text boundary
 has been reached.


"
BreakIterator,preceding(int offset),int,Returns the last boundary preceding the specified character offset.,"

preceding
public int preceding(int offset)
Returns the last boundary preceding the specified character offset. If the
 specified offset equals to the first text boundary, it returns
 BreakIterator.DONE and the iterator's current position is unchanged.
 Otherwise, the iterator's current position is set to the returned boundary.
 The value returned is always less than the offset or the value
 BreakIterator.DONE.

Parameters:
offset - the character offset to begin scanning.
Returns:
The last boundary before the specified offset or
 BreakIterator.DONE if the first text boundary is passed in
 as the offset.
Throws:
IllegalArgumentException - if the specified offset is less than
 the first text boundary or greater than the last text boundary.
Since:
1.2


"
BreakIterator,previous(),abstract int,Returns the boundary preceding the current boundary.,"

previous
public abstract int previous()
Returns the boundary preceding the current boundary. If the current boundary
 is the first text boundary, it returns BreakIterator.DONE and
 the iterator's current position is unchanged. Otherwise, the iterator's
 current position is set to the boundary preceding the current boundary.

Returns:
The character index of the previous text boundary or
 BreakIterator.DONE if the current boundary is the first text
 boundary.


"
BreakIterator,setText(CharacterIterator newText),abstract void,Set a new text for scanning.,"

setText
public abstract void setText(CharacterIterator newText)
Set a new text for scanning.  The current scan
 position is reset to first().

Parameters:
newText - new text to scan.


"
BreakIterator,setText(String newText),void,Set a new text string to be scanned.,"

setText
public void setText(String newText)
Set a new text string to be scanned.  The current scan
 position is reset to first().

Parameters:
newText - new text to scan.


"
ChoiceFormat,applyPattern(String newPattern),void,Sets the pattern.,"

applyPattern
public void applyPattern(String newPattern)
Sets the pattern.

Parameters:
newPattern - See the class description.


"
ChoiceFormat,clone(),Object,Overrides Cloneable,"

clone
public Object clone()
Overrides Cloneable

Overrides:
clone in class NumberFormat
Returns:
a clone of this instance.
See Also:
Cloneable


"
ChoiceFormat,equals(Object obj),boolean,Equality comparision between two,"

equals
public boolean equals(Object obj)
Equality comparision between two

Overrides:
equals in class NumberFormat
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ChoiceFormat,"format(double number, StringBuffer toAppendTo, FieldPosition status)",StringBuffer,Returns pattern with formatted double.,"

format
public StringBuffer format(double number,
                           StringBuffer toAppendTo,
                           FieldPosition status)
Returns pattern with formatted double.

Specified by:
format in class NumberFormat
Parameters:
number - number to be formatted and substituted.
toAppendTo - where text is appended.
status - ignore no useful status is returned.
Returns:
the formatted StringBuffer
See Also:
Format.format(java.lang.Object)


"
ChoiceFormat,"format(long number, StringBuffer toAppendTo, FieldPosition status)",StringBuffer,Specialization of format.,"

format
public StringBuffer format(long number,
                           StringBuffer toAppendTo,
                           FieldPosition status)
Specialization of format. This method really calls
 format(double, StringBuffer, FieldPosition)
 thus the range of longs that are supported is only equal to
 the range that can be stored by double. This will never be
 a practical limitation.

Specified by:
format in class NumberFormat
Parameters:
number - the long number to format
toAppendTo - the StringBuffer to which the formatted text is to be
                   appended
status - the field position
Returns:
the formatted StringBuffer
See Also:
Format.format(java.lang.Object)


"
ChoiceFormat,getFormats(),Object[],Get the formats passed in the constructor.,"

getFormats
public Object[] getFormats()
Get the formats passed in the constructor.

Returns:
the formats.


"
ChoiceFormat,getLimits(),double[],Get the limits passed in the constructor.,"

getLimits
public double[] getLimits()
Get the limits passed in the constructor.

Returns:
the limits.


"
ChoiceFormat,hashCode(),int,Generates a hash code for the message format object.,"

hashCode
public int hashCode()
Generates a hash code for the message format object.

Overrides:
hashCode in class NumberFormat
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ChoiceFormat,nextDouble(double d),static double,Finds the least double greater than d.,"

nextDouble
public static final double nextDouble(double d)
Finds the least double greater than d.
 If NaN, returns same value.
 Used to make half-open intervals.

Parameters:
d - the reference value
Returns:
the least double value greather than d
See Also:
previousDouble(double)


"
ChoiceFormat,"nextDouble(double d, boolean positive)",static double,"Finds the least double greater than d (if positive is true), or the greatest double less than d (if positive is false).","

nextDouble
public static double nextDouble(double d,
                                boolean positive)
Finds the least double greater than d (if positive is
 true), or the greatest double less than d (if
 positive is false).
 If NaN, returns same value.

 Does not affect floating-point flags,
 provided these member functions do not:
          Double.longBitsToDouble(long)
          Double.doubleToLongBits(double)
          Double.isNaN(double)

Parameters:
d - the reference value
positive - true if the least double is desired;
                 false otherwise
Returns:
the least or greater double value


"
ChoiceFormat,"parse(String text, ParsePosition status)",Number,Parses a Number from the input text.,"

parse
public Number parse(String text,
                    ParsePosition status)
Parses a Number from the input text.

Specified by:
parse in class NumberFormat
Parameters:
text - the source text.
status - an input-output parameter.  On input, the
 status.index field indicates the first character of the
 source text that should be parsed.  On exit, if no error
 occurred, status.index is set to the first unparsed character
 in the source text.  On exit, if an error did occur,
 status.index is unchanged and status.errorIndex is set to the
 first index of the character that caused the parse to fail.
Returns:
A Number representing the value of the number parsed.
See Also:
NumberFormat.isParseIntegerOnly(), 
Format.parseObject(java.lang.String, java.text.ParsePosition)


"
ChoiceFormat,previousDouble(double d),static double,Finds the greatest double less than d.,"

previousDouble
public static final double previousDouble(double d)
Finds the greatest double less than d.
 If NaN, returns same value.

Parameters:
d - the reference value
Returns:
the greatest double value less than d
See Also:
nextDouble(double)


"
ChoiceFormat,"setChoices(double[] limits, String[] formats)",void,Set the choices to be used in formatting.,"

setChoices
public void setChoices(double[] limits,
                       String[] formats)
Set the choices to be used in formatting.

Parameters:
limits - contains the top value that you want
 parsed with that format, and should be in ascending sorted order. When
 formatting X, the choice will be the i, where
 limit[i] â‰¤ X < limit[i+1].
 If the limit array is not in ascending order, the results of formatting
 will be incorrect.
formats - are the formats you want to use for each limit.
 They can be either Format objects or Strings.
 When formatting with object Y,
 if the object is a NumberFormat, then ((NumberFormat) Y).format(X)
 is called. Otherwise Y.toString() is called.


"
ChoiceFormat,toPattern(),String,Gets the pattern.,"

toPattern
public String toPattern()
Gets the pattern.

Returns:
the pattern string


"
CollationElementIterator,getMaxExpansion(int order),int,Return the maximum length of any expansion sequences that end with the specified comparison order.,"

getMaxExpansion
public int getMaxExpansion(int order)
Return the maximum length of any expansion sequences that end
 with the specified comparison order.

Parameters:
order - a collation order returned by previous or next.
Returns:
the maximum length of any expansion sequences ending
         with the specified order.
Since:
1.2


"
CollationElementIterator,getOffset(),int,Returns the character offset in the original text corresponding to the next collation element.,"

getOffset
public int getOffset()
Returns the character offset in the original text corresponding to the next
 collation element.  (That is, getOffset() returns the position in the text
 corresponding to the collation element that will be returned by the next
 call to next().)  This value will always be the index of the FIRST character
 corresponding to the collation element (a contracting character sequence is
 when two or more characters all correspond to the same collation element).
 This means if you do setOffset(x) followed immediately by getOffset(), getOffset()
 won't necessarily return x.

Returns:
The character offset in the original text corresponding to the collation
 element that will be returned by the next call to next().
Since:
1.2


"
CollationElementIterator,next(),int,Get the next collation element in the string.,"

next
public int next()
Get the next collation element in the string.  This iterator iterates
 over a sequence of collation elements that were built from the string.
 Because there isn't necessarily a one-to-one mapping from characters to
 collation elements, this doesn't mean the same thing as ""return the
 collation element [or ordering priority] of the next character in the
 string"".
This function returns the collation element that the iterator is currently
 pointing to and then updates the internal pointer to point to the next element.
 previous() updates the pointer first and then returns the element.  This
 means that when you change direction while iterating (i.e., call next() and
 then call previous(), or call previous() and then call next()), you'll get
 back the same element twice.

Returns:
the next collation element


"
CollationElementIterator,previous(),int,Get the previous collation element in the string.,"

previous
public int previous()
Get the previous collation element in the string.  This iterator iterates
 over a sequence of collation elements that were built from the string.
 Because there isn't necessarily a one-to-one mapping from characters to
 collation elements, this doesn't mean the same thing as ""return the
 collation element [or ordering priority] of the previous character in the
 string"".
This function updates the iterator's internal pointer to point to the
 collation element preceding the one it's currently pointing to and then
 returns that element, while next() returns the current element and then
 updates the pointer.  This means that when you change direction while
 iterating (i.e., call next() and then call previous(), or call previous()
 and then call next()), you'll get back the same element twice.

Returns:
the previous collation element
Since:
1.2


"
CollationElementIterator,primaryOrder(int order),static int,Return the primary component of a collation element.,"

primaryOrder
public static final int primaryOrder(int order)
Return the primary component of a collation element.

Parameters:
order - the collation element
Returns:
the element's primary component


"
CollationElementIterator,reset(),void,Resets the cursor to the beginning of the string.,"

reset
public void reset()
Resets the cursor to the beginning of the string.  The next call
 to next() will return the first collation element in the string.

"
CollationElementIterator,secondaryOrder(int order),static short,Return the secondary component of a collation element.,"

secondaryOrder
public static final short secondaryOrder(int order)
Return the secondary component of a collation element.

Parameters:
order - the collation element
Returns:
the element's secondary component


"
CollationElementIterator,setOffset(int newOffset),void,"Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements).","

setOffset
public void setOffset(int newOffset)
Sets the iterator to point to the collation element corresponding to
 the specified character (the parameter is a CHARACTER offset in the
 original string, not an offset into its corresponding sequence of
 collation elements).  The value returned by the next call to next()
 will be the collation element corresponding to the specified position
 in the text.  If that position is in the middle of a contracting
 character sequence, the result of the next call to next() is the
 collation element for that sequence.  This means that getOffset()
 is not guaranteed to return the same value as was passed to a preceding
 call to setOffset().

Parameters:
newOffset - The new character offset into the original text.
Since:
1.2


"
CollationElementIterator,setText(CharacterIterator source),void,Set a new string over which to iterate.,"

setText
public void setText(CharacterIterator source)
Set a new string over which to iterate.

Parameters:
source - the new source text.
Since:
1.2


"
CollationElementIterator,setText(String source),void,Set a new string over which to iterate.,"

setText
public void setText(String source)
Set a new string over which to iterate.

Parameters:
source - the new source text
Since:
1.2


"
CollationElementIterator,tertiaryOrder(int order),static short,Return the tertiary component of a collation element.,"

tertiaryOrder
public static final short tertiaryOrder(int order)
Return the tertiary component of a collation element.

Parameters:
order - the collation element
Returns:
the element's tertiary component


"
CollationKey,compareTo(CollationKey target),abstract int,Compare this CollationKey to the target CollationKey.,"

compareTo
public abstract int compareTo(CollationKey target)
Compare this CollationKey to the target CollationKey. The collation rules of the
 Collator object which created these keys are applied. Note:
 CollationKeys created by different Collators can not be compared.

Specified by:
compareTo in interface Comparable<CollationKey>
Parameters:
target - target CollationKey
Returns:
Returns an integer value. Value is less than zero if this is less
 than target, value is zero if this and target are equal and value is greater than
 zero if this is greater than target.
See Also:
Collator.compare(java.lang.String, java.lang.String)


"
CollationKey,getSourceString(),String,Returns the String that this CollationKey represents.,"

getSourceString
public String getSourceString()
Returns the String that this CollationKey represents.

Returns:
the source string of this CollationKey


"
CollationKey,toByteArray(),abstract byte[],Converts the CollationKey to a sequence of bits.,"

toByteArray
public abstract byte[] toByteArray()
Converts the CollationKey to a sequence of bits. If two CollationKeys
 could be legitimately compared, then one could compare the byte arrays
 for each of those keys to obtain the same result.  Byte arrays are
 organized most significant byte first.

Returns:
a byte array representation of the CollationKey


"
Collator,clone(),Object,Overrides Cloneable,"

clone
public Object clone()
Overrides Cloneable

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
Collator,"compare(Object o1, Object o2)",int,Compares its two arguments for order.,"

compare
public int compare(Object o1,
                   Object o2)
Compares its two arguments for order.  Returns a negative integer,
 zero, or a positive integer as the first argument is less than, equal
 to, or greater than the second.
 
 This implementation merely returns
   compare((String)o1, (String)o2) .

Specified by:
compare in interface Comparator<Object>
Parameters:
o1 - the first object to be compared.
o2 - the second object to be compared.
Returns:
a negative integer, zero, or a positive integer as the
         first argument is less than, equal to, or greater than the
         second.
Throws:
ClassCastException - the arguments cannot be cast to Strings.
Since:
1.2
See Also:
Comparator


"
Collator,"compare(String source, String target)",abstract int,Compares the source string to the target string according to the collation rules for this Collator.,"

compare
public abstract int compare(String source,
                            String target)
Compares the source string to the target string according to the
 collation rules for this Collator.  Returns an integer less than,
 equal to or greater than zero depending on whether the source String is
 less than, equal to or greater than the target string.  See the Collator
 class description for an example of use.
 
 For a one time comparison, this method has the best performance. If a
 given String will be involved in multiple comparisons, CollationKey.compareTo
 has the best performance. See the Collator class description for an example
 using CollationKeys.

Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
See Also:
CollationKey, 
getCollationKey(java.lang.String)


"
Collator,equals(Object that),boolean,Compares the equality of two Collators.,"

equals
public boolean equals(Object that)
Compares the equality of two Collators.

Specified by:
equals in interface Comparator<Object>
Overrides:
equals in class Object
Parameters:
that - the Collator to be compared with this.
Returns:
true if this Collator is the same as that Collator;
 false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
Collator,"equals(String source, String target)",boolean,Convenience method for comparing the equality of two strings based on this Collator's collation rules.,"

equals
public boolean equals(String source,
                      String target)
Convenience method for comparing the equality of two strings based on
 this Collator's collation rules.

Parameters:
source - the source string to be compared with.
target - the target string to be compared with.
Returns:
true if the strings are equal according to the collation
 rules.  false, otherwise.
See Also:
compare(java.lang.String, java.lang.String)


"
Collator,getAvailableLocales(),static Locale[],Returns an array of all locales for which the getInstance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 getInstance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported
 by the Java runtime and by installed
 CollatorProvider implementations.
 It must contain at least a Locale instance equal to
 Locale.US.

Returns:
An array of locales for which localized
         Collator instances are available.


"
Collator,getCollationKey(String source),abstract CollationKey,Transforms the String into a series of bits that can be compared bitwise to other CollationKeys.,"

getCollationKey
public abstract CollationKey getCollationKey(String source)
Transforms the String into a series of bits that can be compared bitwise
 to other CollationKeys. CollationKeys provide better performance than
 Collator.compare when Strings are involved in multiple comparisons.
 See the Collator class description for an example using CollationKeys.

Parameters:
source - the string to be transformed into a collation key.
Returns:
the CollationKey for the given String based on this Collator's collation
 rules. If the source String is null, a null CollationKey is returned.
See Also:
CollationKey, 
compare(java.lang.String, java.lang.String)


"
Collator,getDecomposition(),int,Get the decomposition mode of this Collator.,"

getDecomposition
public int getDecomposition()
Get the decomposition mode of this Collator. Decomposition mode
 determines how Unicode composed characters are handled. Adjusting
 decomposition mode allows the user to select between faster and more
 complete collation behavior.
 The three values for decomposition mode are:
 
NO_DECOMPOSITION,
 CANONICAL_DECOMPOSITION
 FULL_DECOMPOSITION.
 
 See the documentation for these three constants for a description
 of their meaning.

Returns:
the decomposition mode
See Also:
setDecomposition(int), 
NO_DECOMPOSITION, 
CANONICAL_DECOMPOSITION, 
FULL_DECOMPOSITION


"
Collator,getInstance(),static Collator,Gets the Collator for the current default locale.,"

getInstance
public static Collator getInstance()
Gets the Collator for the current default locale.
 The default locale is determined by java.util.Locale.getDefault.

Returns:
the Collator for the default locale.(for example, en_US)
See Also:
Locale.getDefault()


"
Collator,getInstance(Locale desiredLocale),static Collator,Gets the Collator for the desired locale.,"

getInstance
public static Collator getInstance(Locale desiredLocale)
Gets the Collator for the desired locale.

Parameters:
desiredLocale - the desired locale.
Returns:
the Collator for the desired locale.
See Also:
Locale, 
ResourceBundle


"
Collator,getStrength(),int,Returns this Collator's strength property.,"

getStrength
public int getStrength()
Returns this Collator's strength property.  The strength property determines
 the minimum level of difference considered significant during comparison.
 See the Collator class description for an example of use.

Returns:
this Collator's current strength property.
See Also:
setStrength(int), 
PRIMARY, 
SECONDARY, 
TERTIARY, 
IDENTICAL


"
Collator,hashCode(),abstract int,Generates the hash code for this Collator.,"

hashCode
public abstract int hashCode()
Generates the hash code for this Collator.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Collator,setDecomposition(int decompositionMode),void,Set the decomposition mode of this Collator.,"

setDecomposition
public void setDecomposition(int decompositionMode)
Set the decomposition mode of this Collator. See getDecomposition
 for a description of decomposition mode.

Parameters:
decompositionMode - the new decomposition mode.
Throws:
IllegalArgumentException - If the given value is not a valid decomposition
 mode.
See Also:
getDecomposition(), 
NO_DECOMPOSITION, 
CANONICAL_DECOMPOSITION, 
FULL_DECOMPOSITION


"
Collator,setStrength(int newStrength),void,Sets this Collator's strength property.,"

setStrength
public void setStrength(int newStrength)
Sets this Collator's strength property.  The strength property determines
 the minimum level of difference considered significant during comparison.
 See the Collator class description for an example of use.

Parameters:
newStrength - the new strength value.
Throws:
IllegalArgumentException - If the new strength value is not one of
 PRIMARY, SECONDARY, TERTIARY or IDENTICAL.
See Also:
getStrength(), 
PRIMARY, 
SECONDARY, 
TERTIARY, 
IDENTICAL


"
DateFormat,clone(),Object,Overrides Cloneable,"

clone
public Object clone()
Overrides Cloneable

Overrides:
clone in class Format
Returns:
a clone of this instance.
See Also:
Cloneable


"
DateFormat,equals(Object obj),boolean,Overrides equals,"

equals
public boolean equals(Object obj)
Overrides equals

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DateFormat,format(Date date),String,Formats a Date into a date/time string.,"

format
public final String format(Date date)
Formats a Date into a date/time string.

Parameters:
date - the time value to be formatted into a time string.
Returns:
the formatted time string.


"
DateFormat,"format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition)",abstract StringBuffer,Formats a Date into a date/time string.,"

format
public abstract StringBuffer format(Date date,
                                    StringBuffer toAppendTo,
                                    FieldPosition fieldPosition)
Formats a Date into a date/time string.

Parameters:
date - a Date to be formatted into a date/time string.
toAppendTo - the string buffer for the returning date/time string.
fieldPosition - keeps track of the position of the field
 within the returned string.
 On input: an alignment field,
 if desired. On output: the offsets of the alignment field. For
 example, given a time text ""1996.07.10 AD at 15:08:56 PDT"",
 if the given fieldPosition is DateFormat.YEAR_FIELD, the
 begin index and end index of fieldPosition will be set to
 0 and 4, respectively.
 Notice that if the same time field appears
 more than once in a pattern, the fieldPosition will be set for the first
 occurrence of that time field. For instance, formatting a Date to
 the time string ""1 PM PDT (Pacific Daylight Time)"" using the pattern
 ""h a z (zzzz)"" and the alignment field DateFormat.TIMEZONE_FIELD,
 the begin index and end index of fieldPosition will be set to
 5 and 8, respectively, for the first occurrence of the timezone
 pattern character 'z'.
Returns:
the string buffer passed in as toAppendTo, with formatted text appended.


"
DateFormat,"format(Object obj, StringBuffer toAppendTo, FieldPosition fieldPosition)",StringBuffer,Overrides Format.,"

format
public final StringBuffer format(Object obj,
                                 StringBuffer toAppendTo,
                                 FieldPosition fieldPosition)
Overrides Format.
 Formats a time object into a time string. Examples of time objects
 are a time value expressed in milliseconds and a Date object.

Specified by:
format in class Format
Parameters:
obj - must be a Number or a Date.
toAppendTo - the string buffer for the returning time string.
fieldPosition - keeps track of the position of the field
 within the returned string.
 On input: an alignment field,
 if desired. On output: the offsets of the alignment field. For
 example, given a time text ""1996.07.10 AD at 15:08:56 PDT"",
 if the given fieldPosition is DateFormat.YEAR_FIELD, the
 begin index and end index of fieldPosition will be set to
 0 and 4, respectively.
 Notice that if the same time field appears
 more than once in a pattern, the fieldPosition will be set for the first
 occurrence of that time field. For instance, formatting a Date to
 the time string ""1 PM PDT (Pacific Daylight Time)"" using the pattern
 ""h a z (zzzz)"" and the alignment field DateFormat.TIMEZONE_FIELD,
 the begin index and end index of fieldPosition will be set to
 5 and 8, respectively, for the first occurrence of the timezone
 pattern character 'z'.
Returns:
the string buffer passed in as toAppendTo, with formatted text appended.
See Also:
Format


"
DateFormat,getAvailableLocales(),static Locale[],Returns an array of all locales for which the get*Instance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 get*Instance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the Java
 runtime and by installed
 DateFormatProvider implementations.
 It must contain at least a Locale instance equal to
 Locale.US.

Returns:
An array of locales for which localized
         DateFormat instances are available.


"
DateFormat,getCalendar(),Calendar,Gets the calendar associated with this date/time formatter.,"

getCalendar
public Calendar getCalendar()
Gets the calendar associated with this date/time formatter.

Returns:
the calendar associated with this date/time formatter.


"
DateFormat,getDateInstance(),static DateFormat,Gets the date formatter with the default formatting style for the default FORMAT locale.,"

getDateInstance
public static final DateFormat getDateInstance()
Gets the date formatter with the default formatting style
 for the default FORMAT locale.
 This is equivalent to calling
 getDateInstance(DEFAULT,
     Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a date formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,getDateInstance(int style),static DateFormat,Gets the date formatter with the given formatting style for the default FORMAT locale.,"

getDateInstance
public static final DateFormat getDateInstance(int style)
Gets the date formatter with the given formatting style
 for the default FORMAT locale.
 This is equivalent to calling
 getDateInstance(style,
     Locale.getDefault(Locale.Category.FORMAT)).

Parameters:
style - the given formatting style. For example,
 SHORT for ""M/d/yy"" in the US locale.
Returns:
a date formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,"getDateInstance(int style, Locale aLocale)",static DateFormat,Gets the date formatter with the given formatting style for the given locale.,"

getDateInstance
public static final DateFormat getDateInstance(int style,
                                               Locale aLocale)
Gets the date formatter with the given formatting style
 for the given locale.

Parameters:
style - the given formatting style. For example,
 SHORT for ""M/d/yy"" in the US locale.
aLocale - the given locale.
Returns:
a date formatter.


"
DateFormat,getDateTimeInstance(),static DateFormat,Gets the date/time formatter with the default formatting style for the default FORMAT locale.,"

getDateTimeInstance
public static final DateFormat getDateTimeInstance()
Gets the date/time formatter with the default formatting style
 for the default FORMAT locale.
 This is equivalent to calling
 getDateTimeInstance(DEFAULT,
     DEFAULT, Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a date/time formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,"getDateTimeInstance(int dateStyle, int timeStyle)",static DateFormat,Gets the date/time formatter with the given date and time formatting styles for the default FORMAT locale.,"

getDateTimeInstance
public static final DateFormat getDateTimeInstance(int dateStyle,
                                                   int timeStyle)
Gets the date/time formatter with the given date and time
 formatting styles for the default FORMAT locale.
 This is equivalent to calling
 getDateTimeInstance(dateStyle,
     timeStyle, Locale.getDefault(Locale.Category.FORMAT)).

Parameters:
dateStyle - the given date formatting style. For example,
 SHORT for ""M/d/yy"" in the US locale.
timeStyle - the given time formatting style. For example,
 SHORT for ""h:mm a"" in the US locale.
Returns:
a date/time formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,"getDateTimeInstance(int dateStyle, int timeStyle, Locale aLocale)",static DateFormat,Gets the date/time formatter with the given formatting styles for the given locale.,"

getDateTimeInstance
public static final DateFormat getDateTimeInstance(int dateStyle,
                                                   int timeStyle,
                                                   Locale aLocale)
Gets the date/time formatter with the given formatting styles
 for the given locale.

Parameters:
dateStyle - the given date formatting style.
timeStyle - the given time formatting style.
aLocale - the given locale.
Returns:
a date/time formatter.


"
DateFormat,getInstance(),static DateFormat,Get a default date/time formatter that uses the SHORT style for both the date and the time.,"

getInstance
public static final DateFormat getInstance()
Get a default date/time formatter that uses the SHORT style for both the
 date and the time.

Returns:
a date/time formatter


"
DateFormat,getNumberFormat(),NumberFormat,Gets the number formatter which this date/time formatter uses to format and parse a time.,"

getNumberFormat
public NumberFormat getNumberFormat()
Gets the number formatter which this date/time formatter uses to
 format and parse a time.

Returns:
the number formatter which this date/time formatter uses.


"
DateFormat,getTimeInstance(),static DateFormat,Gets the time formatter with the default formatting style for the default FORMAT locale.,"

getTimeInstance
public static final DateFormat getTimeInstance()
Gets the time formatter with the default formatting style
 for the default FORMAT locale.
 This is equivalent to calling
 getTimeInstance(DEFAULT,
     Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a time formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,getTimeInstance(int style),static DateFormat,Gets the time formatter with the given formatting style for the default FORMAT locale.,"

getTimeInstance
public static final DateFormat getTimeInstance(int style)
Gets the time formatter with the given formatting style
 for the default FORMAT locale.
 This is equivalent to calling
 getTimeInstance(style,
     Locale.getDefault(Locale.Category.FORMAT)).

Parameters:
style - the given formatting style. For example,
 SHORT for ""h:mm a"" in the US locale.
Returns:
a time formatter.
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormat,"getTimeInstance(int style, Locale aLocale)",static DateFormat,Gets the time formatter with the given formatting style for the given locale.,"

getTimeInstance
public static final DateFormat getTimeInstance(int style,
                                               Locale aLocale)
Gets the time formatter with the given formatting style
 for the given locale.

Parameters:
style - the given formatting style. For example,
 SHORT for ""h:mm a"" in the US locale.
aLocale - the given locale.
Returns:
a time formatter.


"
DateFormat,getTimeZone(),TimeZone,Gets the time zone.,"

getTimeZone
public TimeZone getTimeZone()
Gets the time zone.
 This method is equivalent to the following call.
 
 getCalendar().getTimeZone()
 

Returns:
the time zone associated with the calendar of DateFormat.


"
DateFormat,hashCode(),int,Overrides hashCode,"

hashCode
public int hashCode()
Overrides hashCode

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DateFormat,isLenient(),boolean,Tell whether date/time parsing is to be lenient.,"

isLenient
public boolean isLenient()
Tell whether date/time parsing is to be lenient.
 This method is equivalent to the following call.
 
 getCalendar().isLenient()
 

Returns:
true if the calendar is lenient;
         false otherwise.
See Also:
Calendar.isLenient()


"
DateFormat,parse(String source),Date,Parses text from the beginning of the given string to produce a date.,"

parse
public Date parse(String source)
           throws ParseException
Parses text from the beginning of the given string to produce a date.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on date parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Date parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
DateFormat,"parse(String source, ParsePosition pos)",abstract Date,Parse a date/time string according to the given parse position.,"

parse
public abstract Date parse(String source,
                           ParsePosition pos)
Parse a date/time string according to the given parse position.  For
 example, a time text ""07/10/96 4:5 PM, PDT"" will be parsed into a Date
 that is equivalent to Date(837039900000L).

  By default, parsing is lenient: If the input is not in the form used
 by this object's format method but can still be parsed as a date, then
 the parse succeeds.  Clients may insist on strict adherence to the
 format by calling setLenient(false).

 This parsing operation uses the calendar to produce
 a Date. As a result, the calendar's date-time
 fields and the TimeZone value may have been
 overwritten, depending on subclass implementations. Any TimeZone value that has previously been set by a call to
 setTimeZone may need
 to be restored for further operations.

Parameters:
source - The date/time string to be parsed
pos - On input, the position at which to start parsing; on
              output, the position at which parsing terminated, or the
              start position if the parse failed.
Returns:
A Date, or null if the input could not be parsed


"
DateFormat,"parseObject(String source, ParsePosition pos)",Object,Parses text from a string to produce a Date.,"

parseObject
public Object parseObject(String source,
                          ParsePosition pos)
Parses text from a string to produce a Date.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 date is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 See the parse(String, ParsePosition) method for more information
 on date parsing.

Specified by:
parseObject in class Format
Parameters:
source - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
            index information as described above.
Returns:
A Date parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if pos is null.


"
DateFormat,setCalendar(Calendar newCalendar),void,Set the calendar to be used by this date format.,"

setCalendar
public void setCalendar(Calendar newCalendar)
Set the calendar to be used by this date format.  Initially, the default
 calendar for the specified or default locale is used.

 Any TimeZone and leniency values that have previously been set are
 overwritten by newCalendar's values.

Parameters:
newCalendar - the new Calendar to be used by the date format


"
DateFormat,setLenient(boolean lenient),void,Specify whether or not date/time parsing is to be lenient.,"

setLenient
public void setLenient(boolean lenient)
Specify whether or not date/time parsing is to be lenient.  With
 lenient parsing, the parser may use heuristics to interpret inputs that
 do not precisely match this object's format.  With strict parsing,
 inputs must match this object's format.

 This method is equivalent to the following call.
 
 getCalendar().setLenient(lenient)
 
This leniency value is overwritten by a call to setCalendar().

Parameters:
lenient - when true, parsing is lenient
See Also:
Calendar.setLenient(boolean)


"
DateFormat,setNumberFormat(NumberFormat newNumberFormat),void,Allows you to set the number formatter.,"

setNumberFormat
public void setNumberFormat(NumberFormat newNumberFormat)
Allows you to set the number formatter.

Parameters:
newNumberFormat - the given new NumberFormat.


"
DateFormat,setTimeZone(TimeZone zone),void,Sets the time zone for the calendar of this DateFormat object.,"

setTimeZone
public void setTimeZone(TimeZone zone)
Sets the time zone for the calendar of this DateFormat object.
 This method is equivalent to the following call.
 
 getCalendar().setTimeZone(zone)
 
The TimeZone set by this method is overwritten by a
 setCalendar call.

 The TimeZone set by this method may be overwritten as
 a result of a call to the parse method.

Parameters:
zone - the given new time zone.


"
DateFormat.Field,getCalendarField(),int,Returns the Calendar field associated with this attribute.,"

getCalendarField
public int getCalendarField()
Returns the Calendar field associated with this
 attribute. For example, if this represents the hours field of
 a Calendar, this would return
 Calendar.HOUR. If there is no corresponding
 Calendar constant, this will return -1.

Returns:
Calendar constant for this field
See Also:
Calendar


"
DateFormat.Field,ofCalendarField(int calendarField),static DateFormat.Field,Returns the Field constant that corresponds to the Calendar constant calendarField.,"

ofCalendarField
public static DateFormat.Field ofCalendarField(int calendarField)
Returns the Field constant that corresponds to
 the Calendar constant calendarField.
 If there is no direct mapping between the Calendar
 constant and a Field, null is returned.

Parameters:
calendarField - Calendar field constant
Returns:
Field instance representing calendarField.
Throws:
IllegalArgumentException - if calendarField is
         not the value of a Calendar field constant.
See Also:
Calendar


"
DateFormat.Field,readResolve(),protected Object,Resolves instances being deserialized to the predefined constants.,"

readResolve
protected Object readResolve()
                      throws InvalidObjectException
Resolves instances being deserialized to the predefined constants.

Overrides:
readResolve in class AttributedCharacterIterator.Attribute
Returns:
resolved DateFormat.Field constant
Throws:
InvalidObjectException - if the constant could not be
         resolved.


"
DateFormatSymbols,clone(),Object,Overrides Cloneable,"

clone
public Object clone()
Overrides Cloneable

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
DateFormatSymbols,equals(Object obj),boolean,Override equals,"

equals
public boolean equals(Object obj)
Override equals

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DateFormatSymbols,getAmPmStrings(),String[],Gets ampm strings.,"

getAmPmStrings
public String[] getAmPmStrings()
Gets ampm strings. For example: ""AM"" and ""PM"".

Returns:
the ampm strings.


"
DateFormatSymbols,getAvailableLocales(),static Locale[],Returns an array of all locales for which the getInstance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 getInstance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the
 Java runtime and by installed
 DateFormatSymbolsProvider
 implementations.  It must contain at least a Locale
 instance equal to Locale.US.

Returns:
An array of locales for which localized
         DateFormatSymbols instances are available.
Since:
1.6


"
DateFormatSymbols,getEras(),String[],Gets era strings.,"

getEras
public String[] getEras()
Gets era strings. For example: ""AD"" and ""BC"".

Returns:
the era strings.


"
DateFormatSymbols,getInstance(),static DateFormatSymbols,Gets the DateFormatSymbols instance for the default locale.,"

getInstance
public static final DateFormatSymbols getInstance()
Gets the DateFormatSymbols instance for the default
 locale.  This method provides access to DateFormatSymbols
 instances for locales supported by the Java runtime itself as well
 as for those supported by installed
 DateFormatSymbolsProvider
 implementations.
 This is equivalent to calling getInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a DateFormatSymbols instance.
Since:
1.6
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DateFormatSymbols,getInstance(Locale locale),static DateFormatSymbols,Gets the DateFormatSymbols instance for the specified locale.,"

getInstance
public static final DateFormatSymbols getInstance(Locale locale)
Gets the DateFormatSymbols instance for the specified
 locale.  This method provides access to DateFormatSymbols
 instances for locales supported by the Java runtime itself as well
 as for those supported by installed
 DateFormatSymbolsProvider
 implementations.

Parameters:
locale - the given locale.
Returns:
a DateFormatSymbols instance.
Throws:
NullPointerException - if locale is null
Since:
1.6


"
DateFormatSymbols,getLocalPatternChars(),String,Gets localized date-time pattern characters.,"

getLocalPatternChars
public String getLocalPatternChars()
Gets localized date-time pattern characters. For example: 'u', 't', etc.

Returns:
the localized date-time pattern characters.


"
DateFormatSymbols,getMonths(),String[],Gets month strings.,"

getMonths
public String[] getMonths()
Gets month strings. For example: ""January"", ""February"", etc.

 If the language requires different forms for formatting and
 stand-alone usages, this method returns month names in the
 formatting form. For example, the preferred month name for
 January in the Czech language is ledna in the
 formatting form, while it is leden in the stand-alone
 form. This method returns ""ledna"" in this case. Refer
 to the 
 Calendar Elements in the Unicode Locale Data Markup Language
 (LDML) specification for more details.

Returns:
the month strings.


"
DateFormatSymbols,getShortMonths(),String[],Gets short month strings.,"

getShortMonths
public String[] getShortMonths()
Gets short month strings. For example: ""Jan"", ""Feb"", etc.

 If the language requires different forms for formatting and
 stand-alone usages, This method returns short month names in
 the formatting form. For example, the preferred abbreviation
 for January in the Catalan language is de gen. in the
 formatting form, while it is gen. in the stand-alone
 form. This method returns ""de gen."" in this case. Refer
 to the 
 Calendar Elements in the Unicode Locale Data Markup Language
 (LDML) specification for more details.

Returns:
the short month strings.


"
DateFormatSymbols,getShortWeekdays(),String[],Gets short weekday strings.,"

getShortWeekdays
public String[] getShortWeekdays()
Gets short weekday strings. For example: ""Sun"", ""Mon"", etc.

Returns:
the short weekday strings. Use Calendar.SUNDAY,
 Calendar.MONDAY, etc. to index the result array.


"
DateFormatSymbols,getWeekdays(),String[],Gets weekday strings.,"

getWeekdays
public String[] getWeekdays()
Gets weekday strings. For example: ""Sunday"", ""Monday"", etc.

Returns:
the weekday strings. Use Calendar.SUNDAY,
 Calendar.MONDAY, etc. to index the result array.


"
DateFormatSymbols,getZoneStrings(),String[][],Gets time zone strings.,"

getZoneStrings
public String[][] getZoneStrings()
Gets time zone strings.  Use of this method is discouraged; use
 TimeZone.getDisplayName()
 instead.
 
 The value returned is a
 two-dimensional array of strings of size n by m,
 where m is at least 5.  Each of the n rows is an
 entry containing the localized names for a single TimeZone.
 Each such row contains (with i ranging from
 0..n-1):
 
zoneStrings[i][0] - time zone ID
zoneStrings[i][1] - long name of zone in standard
 time
zoneStrings[i][2] - short name of zone in
 standard time
zoneStrings[i][3] - long name of zone in daylight
 saving time
zoneStrings[i][4] - short name of zone in daylight
 saving time

 The zone ID is not localized; it's one of the valid IDs of
 the TimeZone class that are not
 custom IDs.
 All other entries are localized names.  If a zone does not implement
 daylight saving time, the daylight saving time names should not be used.
 
 If setZoneStrings has been called
 on this DateFormatSymbols instance, then the strings
 provided by that call are returned. Otherwise, the returned array
 contains names provided by the Java runtime and by installed
 TimeZoneNameProvider
 implementations.

Returns:
the time zone strings.
See Also:
setZoneStrings(String[][])


"
DateFormatSymbols,hashCode(),int,Override hashCode.,"

hashCode
public int hashCode()
Override hashCode.
 Generates a hash code for the DateFormatSymbols object.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DateFormatSymbols,setAmPmStrings(String[] newAmpms),void,Sets ampm strings.,"

setAmPmStrings
public void setAmPmStrings(String[] newAmpms)
Sets ampm strings. For example: ""AM"" and ""PM"".

Parameters:
newAmpms - the new ampm strings.


"
DateFormatSymbols,setEras(String[] newEras),void,Sets era strings.,"

setEras
public void setEras(String[] newEras)
Sets era strings. For example: ""AD"" and ""BC"".

Parameters:
newEras - the new era strings.


"
DateFormatSymbols,setLocalPatternChars(String newLocalPatternChars),void,Sets localized date-time pattern characters.,"

setLocalPatternChars
public void setLocalPatternChars(String newLocalPatternChars)
Sets localized date-time pattern characters. For example: 'u', 't', etc.

Parameters:
newLocalPatternChars - the new localized date-time
 pattern characters.


"
DateFormatSymbols,setMonths(String[] newMonths),void,Sets month strings.,"

setMonths
public void setMonths(String[] newMonths)
Sets month strings. For example: ""January"", ""February"", etc.

Parameters:
newMonths - the new month strings.


"
DateFormatSymbols,setShortMonths(String[] newShortMonths),void,Sets short month strings.,"

setShortMonths
public void setShortMonths(String[] newShortMonths)
Sets short month strings. For example: ""Jan"", ""Feb"", etc.

Parameters:
newShortMonths - the new short month strings.


"
DateFormatSymbols,setShortWeekdays(String[] newShortWeekdays),void,Sets short weekday strings.,"

setShortWeekdays
public void setShortWeekdays(String[] newShortWeekdays)
Sets short weekday strings. For example: ""Sun"", ""Mon"", etc.

Parameters:
newShortWeekdays - the new short weekday strings. The array should
 be indexed by Calendar.SUNDAY,
 Calendar.MONDAY, etc.


"
DateFormatSymbols,setWeekdays(String[] newWeekdays),void,Sets weekday strings.,"

setWeekdays
public void setWeekdays(String[] newWeekdays)
Sets weekday strings. For example: ""Sunday"", ""Monday"", etc.

Parameters:
newWeekdays - the new weekday strings. The array should
 be indexed by Calendar.SUNDAY,
 Calendar.MONDAY, etc.


"
DateFormatSymbols,setZoneStrings(String[][] newZoneStrings),void,Sets time zone strings.,"

setZoneStrings
public void setZoneStrings(String[][] newZoneStrings)
Sets time zone strings.  The argument must be a
 two-dimensional array of strings of size n by m,
 where m is at least 5.  Each of the n rows is an
 entry containing the localized names for a single TimeZone.
 Each such row contains (with i ranging from
 0..n-1):
 
zoneStrings[i][0] - time zone ID
zoneStrings[i][1] - long name of zone in standard
 time
zoneStrings[i][2] - short name of zone in
 standard time
zoneStrings[i][3] - long name of zone in daylight
 saving time
zoneStrings[i][4] - short name of zone in daylight
 saving time

 The zone ID is not localized; it's one of the valid IDs of
 the TimeZone class that are not
 custom IDs.
 All other entries are localized names.

Parameters:
newZoneStrings - the new time zone strings.
Throws:
IllegalArgumentException - if the length of any row in
    newZoneStrings is less than 5
NullPointerException - if newZoneStrings is null
See Also:
getZoneStrings()


"
DecimalFormat,applyLocalizedPattern(String pattern),void,Apply the given pattern to this Format object.,"

applyLocalizedPattern
public void applyLocalizedPattern(String pattern)
Apply the given pattern to this Format object.  The pattern
 is assumed to be in a localized notation. A pattern is a
 short-hand specification for the various formatting properties.
 These properties can also be changed individually through the
 various setter methods.
 
 There is no limit to integer digits set
 by this routine, since that is the typical end-user desire;
 use setMaximumInteger if you want to set a real value.
 For negative numbers, use a second pattern, separated by a semicolon
 Example ""#,#00.0#"" â†’ 1,234.56
 This means a minimum of 2 integer digits, 1 fraction digit, and
 a maximum of 2 fraction digits.
 Example: ""#,#00.0#;(#,#00.0#)"" for negatives in
 parentheses.
 In negative patterns, the minimum and maximum counts are ignored;
 these are presumed to be set in the positive pattern.

Parameters:
pattern - a new pattern
Throws:
NullPointerException - if pattern is null
IllegalArgumentException - if the given pattern is invalid.


"
DecimalFormat,applyPattern(String pattern),void,Apply the given pattern to this Format object.,"

applyPattern
public void applyPattern(String pattern)
Apply the given pattern to this Format object.  A pattern is a
 short-hand specification for the various formatting properties.
 These properties can also be changed individually through the
 various setter methods.
 
 There is no limit to integer digits set
 by this routine, since that is the typical end-user desire;
 use setMaximumInteger if you want to set a real value.
 For negative numbers, use a second pattern, separated by a semicolon
 Example ""#,#00.0#"" â†’ 1,234.56
 This means a minimum of 2 integer digits, 1 fraction digit, and
 a maximum of 2 fraction digits.
 Example: ""#,#00.0#;(#,#00.0#)"" for negatives in
 parentheses.
 In negative patterns, the minimum and maximum counts are ignored;
 these are presumed to be set in the positive pattern.

Parameters:
pattern - a new pattern
Throws:
NullPointerException - if pattern is null
IllegalArgumentException - if the given pattern is invalid.


"
DecimalFormat,clone(),Object,Standard override; no change in semantics.,"

clone
public Object clone()
Standard override; no change in semantics.

Overrides:
clone in class NumberFormat
Returns:
a clone of this instance.
See Also:
Cloneable


"
DecimalFormat,equals(Object obj),boolean,Overrides equals,"

equals
public boolean equals(Object obj)
Overrides equals

Overrides:
equals in class NumberFormat
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DecimalFormat,"format(double number, StringBuffer result, FieldPosition fieldPosition)",StringBuffer,Formats a double to produce a string.,"

format
public StringBuffer format(double number,
                           StringBuffer result,
                           FieldPosition fieldPosition)
Formats a double to produce a string.

Specified by:
format in class NumberFormat
Parameters:
number - The double to format
result - where the text is to be appended
fieldPosition - On input: an alignment field, if desired.
 On output: the offsets of the alignment field.
Returns:
The formatted number string
Throws:
ArithmeticException - if rounding is needed with rounding
            mode being set to RoundingMode.UNNECESSARY
See Also:
FieldPosition


"
DecimalFormat,"format(long number, StringBuffer result, FieldPosition fieldPosition)",StringBuffer,Format a long to produce a string.,"

format
public StringBuffer format(long number,
                           StringBuffer result,
                           FieldPosition fieldPosition)
Format a long to produce a string.

Specified by:
format in class NumberFormat
Parameters:
number - The long to format
result - where the text is to be appended
fieldPosition - On input: an alignment field, if desired.
 On output: the offsets of the alignment field.
Returns:
The formatted number string
Throws:
ArithmeticException - if rounding is needed with rounding
                  mode being set to RoundingMode.UNNECESSARY
See Also:
FieldPosition


"
DecimalFormat,"format(Object number, StringBuffer toAppendTo, FieldPosition pos)",StringBuffer,Formats a number and appends the resulting text to the given string buffer.,"

format
public final StringBuffer format(Object number,
                                 StringBuffer toAppendTo,
                                 FieldPosition pos)
Formats a number and appends the resulting text to the given string
 buffer.
 The number can be of any subclass of Number.
 
 This implementation uses the maximum precision permitted.

Overrides:
format in class NumberFormat
Parameters:
number - the number to format
toAppendTo - the StringBuffer to which the formatted
                   text is to be appended
pos - On input: an alignment field, if desired.
                   On output: the offsets of the alignment field.
Returns:
the value passed in as toAppendTo
Throws:
IllegalArgumentException - if number is
                   null or not an instance of Number.
NullPointerException - if toAppendTo or
                   pos is null
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
FieldPosition


"
DecimalFormat,formatToCharacterIterator(Object obj),AttributedCharacterIterator,Formats an Object producing an AttributedCharacterIterator.,"

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object obj)
Formats an Object producing an AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 Each attribute key of the AttributedCharacterIterator will be of type
 NumberFormat.Field, with the attribute value being the
 same as the attribute key.

Overrides:
formatToCharacterIterator in class Format
Parameters:
obj - The object to format
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if obj is null.
IllegalArgumentException - when the Format cannot format the
            given object.
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
Since:
1.4


"
DecimalFormat,getCurrency(),Currency,Gets the currency used by this decimal format when formatting currency values.,"

getCurrency
public Currency getCurrency()
Gets the currency used by this decimal format when formatting
 currency values.
 The currency is obtained by calling
 DecimalFormatSymbols.getCurrency
 on this number format's symbols.

Overrides:
getCurrency in class NumberFormat
Returns:
the currency used by this decimal format, or null
Since:
1.4


"
DecimalFormat,getDecimalFormatSymbols(),DecimalFormatSymbols,"Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.","

getDecimalFormatSymbols
public DecimalFormatSymbols getDecimalFormatSymbols()
Returns a copy of the decimal format symbols, which is generally not
 changed by the programmer or user.

Returns:
a copy of the desired DecimalFormatSymbols
See Also:
DecimalFormatSymbols


"
DecimalFormat,getGroupingSize(),int,Return the grouping size.,"

getGroupingSize
public int getGroupingSize()
Return the grouping size. Grouping size is the number of digits between
 grouping separators in the integer portion of a number.  For example,
 in the number ""123,456.78"", the grouping size is 3.

Returns:
the grouping size
See Also:
setGroupingSize(int), 
NumberFormat.isGroupingUsed(), 
DecimalFormatSymbols.getGroupingSeparator()


"
DecimalFormat,getMaximumFractionDigits(),int,Gets the maximum number of digits allowed in the fraction portion of a number.,"

getMaximumFractionDigits
public int getMaximumFractionDigits()
Gets the maximum number of digits allowed in the fraction portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of the return value and
 340 is used.

Overrides:
getMaximumFractionDigits in class NumberFormat
Returns:
the maximum number of digits.
See Also:
setMaximumFractionDigits(int)


"
DecimalFormat,getMaximumIntegerDigits(),int,Gets the maximum number of digits allowed in the integer portion of a number.,"

getMaximumIntegerDigits
public int getMaximumIntegerDigits()
Gets the maximum number of digits allowed in the integer portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of the return value and
 309 is used.

Overrides:
getMaximumIntegerDigits in class NumberFormat
Returns:
the maximum number of digits
See Also:
setMaximumIntegerDigits(int)


"
DecimalFormat,getMinimumFractionDigits(),int,Gets the minimum number of digits allowed in the fraction portion of a number.,"

getMinimumFractionDigits
public int getMinimumFractionDigits()
Gets the minimum number of digits allowed in the fraction portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of the return value and
 340 is used.

Overrides:
getMinimumFractionDigits in class NumberFormat
Returns:
the minimum number of digits
See Also:
setMinimumFractionDigits(int)


"
DecimalFormat,getMinimumIntegerDigits(),int,Gets the minimum number of digits allowed in the integer portion of a number.,"

getMinimumIntegerDigits
public int getMinimumIntegerDigits()
Gets the minimum number of digits allowed in the integer portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of the return value and
 309 is used.

Overrides:
getMinimumIntegerDigits in class NumberFormat
Returns:
the minimum number of digits
See Also:
setMinimumIntegerDigits(int)


"
DecimalFormat,getMultiplier(),int,"Gets the multiplier for use in percent, per mille, and similar formats.","

getMultiplier
public int getMultiplier()
Gets the multiplier for use in percent, per mille, and similar
 formats.

Returns:
the multiplier
See Also:
setMultiplier(int)


"
DecimalFormat,getNegativePrefix(),String,Get the negative prefix.,"

getNegativePrefix
public String getNegativePrefix()
Get the negative prefix.
 Examples: -123, ($123) (with negative suffix), sFr-123

Returns:
the negative prefix


"
DecimalFormat,getNegativeSuffix(),String,Get the negative suffix.,"

getNegativeSuffix
public String getNegativeSuffix()
Get the negative suffix.
 Examples: -123%, ($123) (with positive suffixes)

Returns:
the negative suffix


"
DecimalFormat,getPositivePrefix(),String,Get the positive prefix.,"

getPositivePrefix
public String getPositivePrefix()
Get the positive prefix.
 Examples: +123, $123, sFr123

Returns:
the positive prefix


"
DecimalFormat,getPositiveSuffix(),String,Get the positive suffix.,"

getPositiveSuffix
public String getPositiveSuffix()
Get the positive suffix.
 Example: 123%

Returns:
the positive suffix


"
DecimalFormat,getRoundingMode(),RoundingMode,Gets the RoundingMode used in this DecimalFormat.,"

getRoundingMode
public RoundingMode getRoundingMode()
Gets the RoundingMode used in this DecimalFormat.

Overrides:
getRoundingMode in class NumberFormat
Returns:
The RoundingMode used for this DecimalFormat.
Since:
1.6
See Also:
setRoundingMode(RoundingMode)


"
DecimalFormat,hashCode(),int,Overrides hashCode,"

hashCode
public int hashCode()
Overrides hashCode

Overrides:
hashCode in class NumberFormat
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DecimalFormat,isDecimalSeparatorAlwaysShown(),boolean,Allows you to get the behavior of the decimal separator with integers.,"

isDecimalSeparatorAlwaysShown
public boolean isDecimalSeparatorAlwaysShown()
Allows you to get the behavior of the decimal separator with integers.
 (The decimal separator will always appear with decimals.)
 Example: Decimal ON: 12345 â†’ 12345.; OFF: 12345 â†’ 12345

Returns:
true if the decimal separator is always shown;
         false otherwise


"
DecimalFormat,isParseBigDecimal(),boolean,"Returns whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.","

isParseBigDecimal
public boolean isParseBigDecimal()
Returns whether the parse(java.lang.String, java.text.ParsePosition)
 method returns BigDecimal. The default value is false.

Returns:
true if the parse method returns BigDecimal;
         false otherwise
Since:
1.5
See Also:
setParseBigDecimal(boolean)


"
DecimalFormat,"parse(String text, ParsePosition pos)",Number,Parses text from a string to produce a Number.,"

parse
public Number parse(String text,
                    ParsePosition pos)
Parses text from a string to produce a Number.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 number is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 The subclass returned depends on the value of isParseBigDecimal()
 as well as on the string being parsed.
 
If isParseBigDecimal() is false (the default),
       most integer values are returned as Long
       objects, no matter how they are written: ""17"" and
       ""17.000"" both parse to Long(17).
       Values that cannot fit into a Long are returned as
       Doubles. This includes values with a fractional part,
       infinite values, NaN, and the value -0.0.
       DecimalFormat does not decide whether to
       return a Double or a Long based on the
       presence of a decimal separator in the source string. Doing so
       would prevent integers that overflow the mantissa of a double,
       such as ""-9,223,372,036,854,775,808.00"", from being
       parsed accurately.
       
       Callers may use the Number methods
       doubleValue, longValue, etc., to obtain
       the type they want.
   If isParseBigDecimal() is true, values are returned
       as BigDecimal objects. The values are the ones
       constructed by BigDecimal.BigDecimal(String)
       for corresponding strings in locale-independent format. The
       special cases negative and positive infinity and NaN are returned
       as Double instances holding the values of the
       corresponding Double constants.
 

DecimalFormat parses all Unicode characters that represent
 decimal digits, as defined by Character.digit(). In
 addition, DecimalFormat also recognizes as digits the ten
 consecutive characters starting with the localized zero digit defined in
 the DecimalFormatSymbols object.

Specified by:
parse in class NumberFormat
Parameters:
text - the string to be parsed
pos - A ParsePosition object with index and error
             index information as described above.
Returns:
the parsed value, or null if the parse fails
Throws:
NullPointerException - if text or
             pos is null.
See Also:
NumberFormat.isParseIntegerOnly(), 
Format.parseObject(java.lang.String, java.text.ParsePosition)


"
DecimalFormat,setCurrency(Currency currency),void,Sets the currency used by this number format when formatting currency values.,"

setCurrency
public void setCurrency(Currency currency)
Sets the currency used by this number format when formatting
 currency values. This does not update the minimum or maximum
 number of fraction digits used by the number format.
 The currency is set by calling
 DecimalFormatSymbols.setCurrency
 on this number format's symbols.

Overrides:
setCurrency in class NumberFormat
Parameters:
currency - the new currency to be used by this decimal format
Throws:
NullPointerException - if currency is null
Since:
1.4


"
DecimalFormat,setDecimalFormatSymbols(DecimalFormatSymbols newSymbols),void,"Sets the decimal format symbols, which is generally not changed by the programmer or user.","

setDecimalFormatSymbols
public void setDecimalFormatSymbols(DecimalFormatSymbols newSymbols)
Sets the decimal format symbols, which is generally not changed
 by the programmer or user.

Parameters:
newSymbols - desired DecimalFormatSymbols
See Also:
DecimalFormatSymbols


"
DecimalFormat,setDecimalSeparatorAlwaysShown(boolean newValue),void,Allows you to set the behavior of the decimal separator with integers.,"

setDecimalSeparatorAlwaysShown
public void setDecimalSeparatorAlwaysShown(boolean newValue)
Allows you to set the behavior of the decimal separator with integers.
 (The decimal separator will always appear with decimals.)
 Example: Decimal ON: 12345 â†’ 12345.; OFF: 12345 â†’ 12345

Parameters:
newValue - true if the decimal separator is always shown;
                 false otherwise


"
DecimalFormat,setGroupingSize(int newValue),void,Set the grouping size.,"

setGroupingSize
public void setGroupingSize(int newValue)
Set the grouping size. Grouping size is the number of digits between
 grouping separators in the integer portion of a number.  For example,
 in the number ""123,456.78"", the grouping size is 3.
 
 The value passed in is converted to a byte, which may lose information.

Parameters:
newValue - the new grouping size
See Also:
getGroupingSize(), 
NumberFormat.setGroupingUsed(boolean), 
DecimalFormatSymbols.setGroupingSeparator(char)


"
DecimalFormat,setGroupingUsed(boolean newValue),void,Set whether or not grouping will be used in this format.,"

setGroupingUsed
public void setGroupingUsed(boolean newValue)
Set whether or not grouping will be used in this format.

Overrides:
setGroupingUsed in class NumberFormat
Parameters:
newValue - true if grouping is used;
                 false otherwise
See Also:
NumberFormat.isGroupingUsed()


"
DecimalFormat,setMaximumFractionDigits(int newValue),void,Sets the maximum number of digits allowed in the fraction portion of a number.,"

setMaximumFractionDigits
public void setMaximumFractionDigits(int newValue)
Sets the maximum number of digits allowed in the fraction portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of newValue and
 340 is used. Negative input values are replaced with 0.

Overrides:
setMaximumFractionDigits in class NumberFormat
Parameters:
newValue - the maximum number of fraction digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
NumberFormat.setMaximumFractionDigits(int)


"
DecimalFormat,setMaximumIntegerDigits(int newValue),void,Sets the maximum number of digits allowed in the integer portion of a number.,"

setMaximumIntegerDigits
public void setMaximumIntegerDigits(int newValue)
Sets the maximum number of digits allowed in the integer portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of newValue and
 309 is used. Negative input values are replaced with 0.

Overrides:
setMaximumIntegerDigits in class NumberFormat
Parameters:
newValue - the maximum number of integer digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
NumberFormat.setMaximumIntegerDigits(int)


"
DecimalFormat,setMinimumFractionDigits(int newValue),void,Sets the minimum number of digits allowed in the fraction portion of a number.,"

setMinimumFractionDigits
public void setMinimumFractionDigits(int newValue)
Sets the minimum number of digits allowed in the fraction portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of newValue and
 340 is used. Negative input values are replaced with 0.

Overrides:
setMinimumFractionDigits in class NumberFormat
Parameters:
newValue - the minimum number of fraction digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
NumberFormat.setMinimumFractionDigits(int)


"
DecimalFormat,setMinimumIntegerDigits(int newValue),void,Sets the minimum number of digits allowed in the integer portion of a number.,"

setMinimumIntegerDigits
public void setMinimumIntegerDigits(int newValue)
Sets the minimum number of digits allowed in the integer portion of a
 number.
 For formatting numbers other than BigInteger and
 BigDecimal objects, the lower of newValue and
 309 is used. Negative input values are replaced with 0.

Overrides:
setMinimumIntegerDigits in class NumberFormat
Parameters:
newValue - the minimum number of integer digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
NumberFormat.setMinimumIntegerDigits(int)


"
DecimalFormat,setMultiplier(int newValue),void,"Sets the multiplier for use in percent, per mille, and similar formats.","

setMultiplier
public void setMultiplier(int newValue)
Sets the multiplier for use in percent, per mille, and similar
 formats.
 For a percent format, set the multiplier to 100 and the suffixes to
 have '%' (for Arabic, use the Arabic percent sign).
 For a per mille format, set the multiplier to 1000 and the suffixes to
 have '\u2030'.

 Example: with multiplier 100, 1.23 is formatted as ""123"", and
 ""123"" is parsed into 1.23.

Parameters:
newValue - the new multiplier
See Also:
getMultiplier()


"
DecimalFormat,setNegativePrefix(String newValue),void,Set the negative prefix.,"

setNegativePrefix
public void setNegativePrefix(String newValue)
Set the negative prefix.
 Examples: -123, ($123) (with negative suffix), sFr-123

Parameters:
newValue - the new negative prefix


"
DecimalFormat,setNegativeSuffix(String newValue),void,Set the negative suffix.,"

setNegativeSuffix
public void setNegativeSuffix(String newValue)
Set the negative suffix.
 Examples: 123%

Parameters:
newValue - the new negative suffix


"
DecimalFormat,setParseBigDecimal(boolean newValue),void,"Sets whether the parse(java.lang.String, java.text.ParsePosition) method returns BigDecimal.","

setParseBigDecimal
public void setParseBigDecimal(boolean newValue)
Sets whether the parse(java.lang.String, java.text.ParsePosition)
 method returns BigDecimal.

Parameters:
newValue - true if the parse method returns BigDecimal;
                 false otherwise
Since:
1.5
See Also:
isParseBigDecimal()


"
DecimalFormat,setPositivePrefix(String newValue),void,Set the positive prefix.,"

setPositivePrefix
public void setPositivePrefix(String newValue)
Set the positive prefix.
 Examples: +123, $123, sFr123

Parameters:
newValue - the new positive prefix


"
DecimalFormat,setPositiveSuffix(String newValue),void,Set the positive suffix.,"

setPositiveSuffix
public void setPositiveSuffix(String newValue)
Set the positive suffix.
 Example: 123%

Parameters:
newValue - the new positive suffix


"
DecimalFormat,setRoundingMode(RoundingMode roundingMode),void,Sets the RoundingMode used in this DecimalFormat.,"

setRoundingMode
public void setRoundingMode(RoundingMode roundingMode)
Sets the RoundingMode used in this DecimalFormat.

Overrides:
setRoundingMode in class NumberFormat
Parameters:
roundingMode - The RoundingMode to be used
Throws:
NullPointerException - if roundingMode is null.
Since:
1.6
See Also:
getRoundingMode()


"
DecimalFormat,toLocalizedPattern(),String,Synthesizes a localized pattern string that represents the current state of this Format object.,"

toLocalizedPattern
public String toLocalizedPattern()
Synthesizes a localized pattern string that represents the current
 state of this Format object.

Returns:
a localized pattern string
See Also:
applyPattern(java.lang.String)


"
DecimalFormat,toPattern(),String,Synthesizes a pattern string that represents the current state of this Format object.,"

toPattern
public String toPattern()
Synthesizes a pattern string that represents the current state
 of this Format object.

Returns:
a pattern string
See Also:
applyPattern(java.lang.String)


"
DecimalFormatSymbols,clone(),Object,Standard override.,"

clone
public Object clone()
Standard override.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
DecimalFormatSymbols,equals(Object obj),boolean,Override equals.,"

equals
public boolean equals(Object obj)
Override equals.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
DecimalFormatSymbols,getAvailableLocales(),static Locale[],Returns an array of all locales for which the getInstance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 getInstance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the Java
 runtime and by installed
 DecimalFormatSymbolsProvider
 implementations.  It must contain at least a Locale
 instance equal to Locale.US.

Returns:
an array of locales for which localized
         DecimalFormatSymbols instances are available.
Since:
1.6


"
DecimalFormatSymbols,getCurrency(),Currency,Gets the currency of these DecimalFormatSymbols.,"

getCurrency
public Currency getCurrency()
Gets the currency of these DecimalFormatSymbols. May be null if the
 currency symbol attribute was previously set to a value that's not
 a valid ISO 4217 currency code.

Returns:
the currency used, or null
Since:
1.4


"
DecimalFormatSymbols,getCurrencySymbol(),String,Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.,"

getCurrencySymbol
public String getCurrencySymbol()
Returns the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.

Returns:
the currency symbol
Since:
1.2


"
DecimalFormatSymbols,getDecimalSeparator(),char,Gets the character used for decimal sign.,"

getDecimalSeparator
public char getDecimalSeparator()
Gets the character used for decimal sign. Different for French, etc.

Returns:
the character used for decimal sign


"
DecimalFormatSymbols,getDigit(),char,Gets the character used for a digit in a pattern.,"

getDigit
public char getDigit()
Gets the character used for a digit in a pattern.

Returns:
the character used for a digit in a pattern


"
DecimalFormatSymbols,getExponentSeparator(),String,Returns the string used to separate the mantissa from the exponent.,"

getExponentSeparator
public String getExponentSeparator()
Returns the string used to separate the mantissa from the exponent.
 Examples: ""x10^"" for 1.23x10^4, ""E"" for 1.23E4.

Returns:
the exponent separator string
Since:
1.6
See Also:
setExponentSeparator(java.lang.String)


"
DecimalFormatSymbols,getGroupingSeparator(),char,Gets the character used for thousands separator.,"

getGroupingSeparator
public char getGroupingSeparator()
Gets the character used for thousands separator. Different for French, etc.

Returns:
the grouping separator


"
DecimalFormatSymbols,getInfinity(),String,Gets the string used to represent infinity.,"

getInfinity
public String getInfinity()
Gets the string used to represent infinity. Almost always left
 unchanged.

Returns:
the string representing infinity


"
DecimalFormatSymbols,getInstance(),static DecimalFormatSymbols,Gets the DecimalFormatSymbols instance for the default locale.,"

getInstance
public static final DecimalFormatSymbols getInstance()
Gets the DecimalFormatSymbols instance for the default
 locale.  This method provides access to DecimalFormatSymbols
 instances for locales supported by the Java runtime itself as well
 as for those supported by installed
 DecimalFormatSymbolsProvider implementations.
 This is equivalent to calling
 getInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a DecimalFormatSymbols instance.
Since:
1.6
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
DecimalFormatSymbols,getInstance(Locale locale),static DecimalFormatSymbols,Gets the DecimalFormatSymbols instance for the specified locale.,"

getInstance
public static final DecimalFormatSymbols getInstance(Locale locale)
Gets the DecimalFormatSymbols instance for the specified
 locale.  This method provides access to DecimalFormatSymbols
 instances for locales supported by the Java runtime itself as well
 as for those supported by installed
 DecimalFormatSymbolsProvider implementations.
 If the specified locale contains the Locale.UNICODE_LOCALE_EXTENSION
 for the numbering system, the instance is initialized with the specified numbering
 system if the JRE implementation supports it. For example,
 
 NumberFormat.getNumberInstance(Locale.forLanguageTag(""th-TH-u-nu-thai""))
 
 This may return a NumberFormat instance with the Thai numbering system,
 instead of the Latin numbering system.

Parameters:
locale - the desired locale.
Returns:
a DecimalFormatSymbols instance.
Throws:
NullPointerException - if locale is null
Since:
1.6


"
DecimalFormatSymbols,getInternationalCurrencySymbol(),String,Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.,"

getInternationalCurrencySymbol
public String getInternationalCurrencySymbol()
Returns the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.

Returns:
the currency code
Since:
1.2


"
DecimalFormatSymbols,getMinusSign(),char,Gets the character used to represent minus sign.,"

getMinusSign
public char getMinusSign()
Gets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

Returns:
the character representing minus sign


"
DecimalFormatSymbols,getMonetaryDecimalSeparator(),char,Returns the monetary decimal separator.,"

getMonetaryDecimalSeparator
public char getMonetaryDecimalSeparator()
Returns the monetary decimal separator.

Returns:
the monetary decimal separator
Since:
1.2


"
DecimalFormatSymbols,getNaN(),String,"Gets the string used to represent ""not a number"".","

getNaN
public String getNaN()
Gets the string used to represent ""not a number"". Almost always left
 unchanged.

Returns:
the string representing ""not a number""


"
DecimalFormatSymbols,getPatternSeparator(),char,Gets the character used to separate positive and negative subpatterns in a pattern.,"

getPatternSeparator
public char getPatternSeparator()
Gets the character used to separate positive and negative subpatterns
 in a pattern.

Returns:
the pattern separator


"
DecimalFormatSymbols,getPercent(),char,Gets the character used for percent sign.,"

getPercent
public char getPercent()
Gets the character used for percent sign. Different for Arabic, etc.

Returns:
the character used for percent sign


"
DecimalFormatSymbols,getPerMill(),char,Gets the character used for per mille sign.,"

getPerMill
public char getPerMill()
Gets the character used for per mille sign. Different for Arabic, etc.

Returns:
the character used for per mille sign


"
DecimalFormatSymbols,getZeroDigit(),char,Gets the character used for zero.,"

getZeroDigit
public char getZeroDigit()
Gets the character used for zero. Different for Arabic, etc.

Returns:
the character used for zero


"
DecimalFormatSymbols,hashCode(),int,Override hashCode.,"

hashCode
public int hashCode()
Override hashCode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
DecimalFormatSymbols,setCurrency(Currency currency),void,Sets the currency of these DecimalFormatSymbols.,"

setCurrency
public void setCurrency(Currency currency)
Sets the currency of these DecimalFormatSymbols.
 This also sets the currency symbol attribute to the currency's symbol
 in the DecimalFormatSymbols' locale, and the international currency
 symbol attribute to the currency's ISO 4217 currency code.

Parameters:
currency - the new currency to be used
Throws:
NullPointerException - if currency is null
Since:
1.4
See Also:
setCurrencySymbol(java.lang.String), 
setInternationalCurrencySymbol(java.lang.String)


"
DecimalFormatSymbols,setCurrencySymbol(String currency),void,Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.,"

setCurrencySymbol
public void setCurrencySymbol(String currency)
Sets the currency symbol for the currency of these
 DecimalFormatSymbols in their locale.

Parameters:
currency - the currency symbol
Since:
1.2


"
DecimalFormatSymbols,setDecimalSeparator(char decimalSeparator),void,Sets the character used for decimal sign.,"

setDecimalSeparator
public void setDecimalSeparator(char decimalSeparator)
Sets the character used for decimal sign. Different for French, etc.

Parameters:
decimalSeparator - the character used for decimal sign


"
DecimalFormatSymbols,setDigit(char digit),void,Sets the character used for a digit in a pattern.,"

setDigit
public void setDigit(char digit)
Sets the character used for a digit in a pattern.

Parameters:
digit - the character used for a digit in a pattern


"
DecimalFormatSymbols,setExponentSeparator(String exp),void,Sets the string used to separate the mantissa from the exponent.,"

setExponentSeparator
public void setExponentSeparator(String exp)
Sets the string used to separate the mantissa from the exponent.
 Examples: ""x10^"" for 1.23x10^4, ""E"" for 1.23E4.

Parameters:
exp - the exponent separator string
Throws:
NullPointerException - if exp is null
Since:
1.6
See Also:
getExponentSeparator()


"
DecimalFormatSymbols,setGroupingSeparator(char groupingSeparator),void,Sets the character used for thousands separator.,"

setGroupingSeparator
public void setGroupingSeparator(char groupingSeparator)
Sets the character used for thousands separator. Different for French, etc.

Parameters:
groupingSeparator - the grouping separator


"
DecimalFormatSymbols,setInfinity(String infinity),void,Sets the string used to represent infinity.,"

setInfinity
public void setInfinity(String infinity)
Sets the string used to represent infinity. Almost always left
 unchanged.

Parameters:
infinity - the string representing infinity


"
DecimalFormatSymbols,setInternationalCurrencySymbol(String currencyCode),void,Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols.,"

setInternationalCurrencySymbol
public void setInternationalCurrencySymbol(String currencyCode)
Sets the ISO 4217 currency code of the currency of these
 DecimalFormatSymbols.
 If the currency code is valid (as defined by
 Currency.getInstance),
 this also sets the currency attribute to the corresponding Currency
 instance and the currency symbol attribute to the currency's symbol
 in the DecimalFormatSymbols' locale. If the currency code is not valid,
 then the currency attribute is set to null and the currency symbol
 attribute is not modified.

Parameters:
currencyCode - the currency code
Since:
1.2
See Also:
setCurrency(java.util.Currency), 
setCurrencySymbol(java.lang.String)


"
DecimalFormatSymbols,setMinusSign(char minusSign),void,Sets the character used to represent minus sign.,"

setMinusSign
public void setMinusSign(char minusSign)
Sets the character used to represent minus sign. If no explicit
 negative format is specified, one is formed by prefixing
 minusSign to the positive format.

Parameters:
minusSign - the character representing minus sign


"
DecimalFormatSymbols,setMonetaryDecimalSeparator(char sep),void,Sets the monetary decimal separator.,"

setMonetaryDecimalSeparator
public void setMonetaryDecimalSeparator(char sep)
Sets the monetary decimal separator.

Parameters:
sep - the monetary decimal separator
Since:
1.2


"
DecimalFormatSymbols,setNaN(String NaN),void,"Sets the string used to represent ""not a number"".","

setNaN
public void setNaN(String NaN)
Sets the string used to represent ""not a number"". Almost always left
 unchanged.

Parameters:
NaN - the string representing ""not a number""


"
DecimalFormatSymbols,setPatternSeparator(char patternSeparator),void,Sets the character used to separate positive and negative subpatterns in a pattern.,"

setPatternSeparator
public void setPatternSeparator(char patternSeparator)
Sets the character used to separate positive and negative subpatterns
 in a pattern.

Parameters:
patternSeparator - the pattern separator


"
DecimalFormatSymbols,setPercent(char percent),void,Sets the character used for percent sign.,"

setPercent
public void setPercent(char percent)
Sets the character used for percent sign. Different for Arabic, etc.

Parameters:
percent - the character used for percent sign


"
DecimalFormatSymbols,setPerMill(char perMill),void,Sets the character used for per mille sign.,"

setPerMill
public void setPerMill(char perMill)
Sets the character used for per mille sign. Different for Arabic, etc.

Parameters:
perMill - the character used for per mille sign


"
DecimalFormatSymbols,setZeroDigit(char zeroDigit),void,Sets the character used for zero.,"

setZeroDigit
public void setZeroDigit(char zeroDigit)
Sets the character used for zero. Different for Arabic, etc.

Parameters:
zeroDigit - the character used for zero


"
FieldPosition,equals(Object obj),boolean,Overrides equals,"

equals
public boolean equals(Object obj)
Overrides equals

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
FieldPosition,getBeginIndex(),int,Retrieves the index of the first character in the requested field.,"

getBeginIndex
public int getBeginIndex()
Retrieves the index of the first character in the requested field.

Returns:
the begin index


"
FieldPosition,getEndIndex(),int,Retrieves the index of the character following the last character in the requested field.,"

getEndIndex
public int getEndIndex()
Retrieves the index of the character following the last character in the
 requested field.

Returns:
the end index


"
FieldPosition,getField(),int,Retrieves the field identifier.,"

getField
public int getField()
Retrieves the field identifier.

Returns:
the field identifier


"
FieldPosition,getFieldAttribute(),Format.Field,Returns the field identifier as an attribute constant from one of the Field subclasses.,"

getFieldAttribute
public Format.Field getFieldAttribute()
Returns the field identifier as an attribute constant
 from one of the Field subclasses. May return null if
 the field is specified only by an integer field ID.

Returns:
Identifier for the field
Since:
1.4


"
FieldPosition,hashCode(),int,Returns a hash code for this FieldPosition.,"

hashCode
public int hashCode()
Returns a hash code for this FieldPosition.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
FieldPosition,setBeginIndex(int bi),void,Sets the begin index.,"

setBeginIndex
public void setBeginIndex(int bi)
Sets the begin index.  For use by subclasses of Format.

Parameters:
bi - the begin index
Since:
1.2


"
FieldPosition,setEndIndex(int ei),void,Sets the end index.,"

setEndIndex
public void setEndIndex(int ei)
Sets the end index.  For use by subclasses of Format.

Parameters:
ei - the end index
Since:
1.2


"
FieldPosition,toString(),String,Return a string representation of this FieldPosition.,"

toString
public String toString()
Return a string representation of this FieldPosition.

Overrides:
toString in class Object
Returns:
a string representation of this object


"
Format,clone(),Object,Creates and returns a copy of this object.,"

clone
public Object clone()
Creates and returns a copy of this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
Format,format(Object obj),String,Formats an object to produce a string.,"

format
public final String format(Object obj)
Formats an object to produce a string. This is equivalent to
 
format(obj,
         new StringBuffer(), new FieldPosition(0)).toString();


Parameters:
obj - The object to format
Returns:
Formatted string.
Throws:
IllegalArgumentException - if the Format cannot format the given
            object


"
Format,"format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",abstract StringBuffer,Formats an object and appends the resulting text to a given string buffer.,"

format
public abstract StringBuffer format(Object obj,
                                    StringBuffer toAppendTo,
                                    FieldPosition pos)
Formats an object and appends the resulting text to a given string
 buffer.
 If the pos argument identifies a field used by the format,
 then its indices are set to the beginning and end of the first such
 field encountered.

Parameters:
obj - The object to format
toAppendTo - where the text is to be appended
pos - A FieldPosition identifying a field
               in the formatted text
Returns:
the string buffer passed in as toAppendTo,
               with formatted text appended
Throws:
NullPointerException - if toAppendTo or
            pos is null
IllegalArgumentException - if the Format cannot format the given
            object


"
Format,formatToCharacterIterator(Object obj),AttributedCharacterIterator,Formats an Object producing an AttributedCharacterIterator.,"

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object obj)
Formats an Object producing an AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 Each attribute key of the AttributedCharacterIterator will be of type
 Field. It is up to each Format implementation
 to define what the legal values are for each attribute in the
 AttributedCharacterIterator, but typically the attribute
 key is also used as the attribute value.
 The default implementation creates an
 AttributedCharacterIterator with no attributes. Subclasses
 that support fields should override this and create an
 AttributedCharacterIterator with meaningful attributes.

Parameters:
obj - The object to format
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if obj is null.
IllegalArgumentException - when the Format cannot format the
            given object.
Since:
1.4


"
Format,parseObject(String source),Object,Parses text from the beginning of the given string to produce an object.,"

parseObject
public Object parseObject(String source)
                   throws ParseException
Parses text from the beginning of the given string to produce an object.
 The method may not use the entire text of the given string.

Parameters:
source - A String whose beginning should be parsed.
Returns:
An Object parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
Format,"parseObject(String source, ParsePosition pos)",abstract Object,Parses text from a string to produce an object.,"

parseObject
public abstract Object parseObject(String source,
                                   ParsePosition pos)
Parses text from a string to produce an object.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 object is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.

Parameters:
source - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
            index information as described above.
Returns:
An Object parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if pos is null.


"
MessageFormat,applyPattern(String pattern),void,Sets the pattern used by this message format.,"

applyPattern
public void applyPattern(String pattern)
Sets the pattern used by this message format.
 The method parses the pattern and creates a list of subformats
 for the format elements contained in it.
 Patterns and their interpretation are specified in the
 class description.

Parameters:
pattern - the pattern for this message format
Throws:
IllegalArgumentException - if the pattern is invalid


"
MessageFormat,clone(),Object,Creates and returns a copy of this object.,"

clone
public Object clone()
Creates and returns a copy of this object.

Overrides:
clone in class Format
Returns:
a clone of this instance.
See Also:
Cloneable


"
MessageFormat,equals(Object obj),boolean,Equality comparison between two message format objects,"

equals
public boolean equals(Object obj)
Equality comparison between two message format objects

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
MessageFormat,"format(Object[] arguments, StringBuffer result, FieldPosition pos)",StringBuffer,"Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer.","

format
public final StringBuffer format(Object[] arguments,
                                 StringBuffer result,
                                 FieldPosition pos)
Formats an array of objects and appends the MessageFormat's
 pattern, with format elements replaced by the formatted objects, to the
 provided StringBuffer.
 
 The text substituted for the individual format elements is derived from
 the current subformat of the format element and the
 arguments element at the format element's argument index
 as indicated by the first matching line of the following table. An
 argument is unavailable if arguments is
 null or has fewer than argumentIndex+1 elements.

 

Subformat
       Argument
       Formatted Text
    
any
unavailable
""{"" + argumentIndex + ""}""

any
null
""null""

instanceof ChoiceFormat
any
subformat.format(argument).indexOf('{') >= 0 ?
           (new MessageFormat(subformat.format(argument), getLocale())).format(argument) :
           subformat.format(argument)

!= null
any
subformat.format(argument)

null
instanceof Number
NumberFormat.getInstance(getLocale()).format(argument)

null
instanceof Date
DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)

null
instanceof String
argument

null
any
argument.toString()


 If pos is non-null, and refers to
 Field.ARGUMENT, the location of the first formatted
 string will be returned.

Parameters:
arguments - an array of objects to be formatted and substituted.
result - where text is appended.
pos - On input: an alignment field, if desired.
            On output: the offsets of the alignment field.
Returns:
the string buffer passed in as result, with formatted
 text appended
Throws:
IllegalArgumentException - if an argument in the
            arguments array is not of the type
            expected by the format element(s) that use it.


"
MessageFormat,"format(Object arguments, StringBuffer result, FieldPosition pos)",StringBuffer,"Formats an array of objects and appends the MessageFormat's pattern, with format elements replaced by the formatted objects, to the provided StringBuffer.","

format
public final StringBuffer format(Object arguments,
                                 StringBuffer result,
                                 FieldPosition pos)
Formats an array of objects and appends the MessageFormat's
 pattern, with format elements replaced by the formatted objects, to the
 provided StringBuffer.
 This is equivalent to
 
format((Object[]) arguments, result, pos)


Specified by:
format in class Format
Parameters:
arguments - an array of objects to be formatted and substituted.
result - where text is appended.
pos - On input: an alignment field, if desired.
            On output: the offsets of the alignment field.
Returns:
the string buffer passed in as toAppendTo,
               with formatted text appended
Throws:
IllegalArgumentException - if an argument in the
            arguments array is not of the type
            expected by the format element(s) that use it.


"
MessageFormat,"format(String pattern, Object... arguments)",static String,Creates a MessageFormat with the given pattern and uses it to format the given arguments.,"

format
public static String format(String pattern,
                            Object... arguments)
Creates a MessageFormat with the given pattern and uses it
 to format the given arguments. This is equivalent to
 
(new MessageFormat(pattern)).format(arguments, new StringBuffer(), null).toString()


Parameters:
pattern - the pattern string
arguments - object(s) to format
Returns:
the formatted string
Throws:
IllegalArgumentException - if the pattern is invalid,
            or if an argument in the arguments array
            is not of the type expected by the format element(s)
            that use it.


"
MessageFormat,formatToCharacterIterator(Object arguments),AttributedCharacterIterator,"Formats an array of objects and inserts them into the MessageFormat's pattern, producing an AttributedCharacterIterator.","

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object arguments)
Formats an array of objects and inserts them into the
 MessageFormat's pattern, producing an
 AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 The text of the returned AttributedCharacterIterator is
 the same that would be returned by
 
format(arguments, new StringBuffer(), null).toString()


 In addition, the AttributedCharacterIterator contains at
 least attributes indicating where text was generated from an
 argument in the arguments array. The keys of these attributes are of
 type MessageFormat.Field, their values are
 Integer objects indicating the index in the arguments
 array of the argument from which the text was generated.
 
 The attributes/value from the underlying Format
 instances that MessageFormat uses will also be
 placed in the resulting AttributedCharacterIterator.
 This allows you to not only find where an argument is placed in the
 resulting String, but also which fields it contains in turn.

Overrides:
formatToCharacterIterator in class Format
Parameters:
arguments - an array of objects to be formatted and substituted.
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if arguments is null.
IllegalArgumentException - if an argument in the
            arguments array is not of the type
            expected by the format element(s) that use it.
Since:
1.4


"
MessageFormat,getFormats(),Format[],Gets the formats used for the format elements in the previously set pattern string.,"

getFormats
public Format[] getFormats()
Gets the formats used for the format elements in the
 previously set pattern string.
 The order of formats in the returned array corresponds to
 the order of format elements in the pattern string.
 
 Since the order of format elements in a pattern string often
 changes during localization, it's generally better to use the
 getFormatsByArgumentIndex
 method, which assumes an order of formats corresponding to the
 order of elements in the arguments array passed to
 the format methods or the result array returned by
 the parse methods.

Returns:
the formats used for the format elements in the pattern


"
MessageFormat,getFormatsByArgumentIndex(),Format[],Gets the formats used for the values passed into format methods or returned from parse methods.,"

getFormatsByArgumentIndex
public Format[] getFormatsByArgumentIndex()
Gets the formats used for the values passed into
 format methods or returned from parse
 methods. The indices of elements in the returned array
 correspond to the argument indices used in the previously set
 pattern string.
 The order of formats in the returned array thus corresponds to
 the order of elements in the arguments array passed
 to the format methods or the result array returned
 by the parse methods.
 
 If an argument index is used for more than one format element
 in the pattern string, then the format used for the last such
 format element is returned in the array. If an argument index
 is not used for any format element in the pattern string, then
 null is returned in the array.

Returns:
the formats used for the arguments within the pattern
Since:
1.4


"
MessageFormat,getLocale(),Locale,Gets the locale that's used when creating or comparing subformats.,"

getLocale
public Locale getLocale()
Gets the locale that's used when creating or comparing subformats.

Returns:
the locale used when creating or comparing subformats


"
MessageFormat,hashCode(),int,Generates a hash code for the message format object.,"

hashCode
public int hashCode()
Generates a hash code for the message format object.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MessageFormat,parse(String source),Object[],Parses text from the beginning of the given string to produce an object array.,"

parse
public Object[] parse(String source)
               throws ParseException
Parses text from the beginning of the given string to produce an object
 array.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on message parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
An Object array parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
MessageFormat,"parse(String source, ParsePosition pos)",Object[],Parses the string.,"

parse
public Object[] parse(String source,
                      ParsePosition pos)
Parses the string.

 Caveats: The parse may fail in a number of circumstances.
 For example:
 
If one of the arguments does not occur in the pattern.
 If the format of an argument loses information, such as
     with a choice format where a large number formats to ""many"".
 Does not yet handle recursion (where
     the substituted strings contain {n} references.)
 Will not always find a match (or the correct match)
     if some part of the parse is ambiguous.
     For example, if the pattern ""{1},{2}"" is used with the
     string arguments {""a,b"", ""c""}, it will format as ""a,b,c"".
     When the result is parsed, it will return {""a"", ""b,c""}.
 If a single argument is parsed more than once in the string,
     then the later parse wins.
 
 When the parse fails, use ParsePosition.getErrorIndex() to find out
 where in the string the parsing failed.  The returned error
 index is the starting offset of the sub-patterns that the string
 is comparing with.  For example, if the parsing string ""AAA {0} BBB""
 is comparing against the pattern ""AAD {0} BBB"", the error index is
 0. When an error occurs, the call to this method will return null.
 If the source is null, return an empty array.

Parameters:
source - the string to parse
pos - the parse position
Returns:
an array of parsed objects


"
MessageFormat,"parseObject(String source, ParsePosition pos)",Object,Parses text from a string to produce an object array.,"

parseObject
public Object parseObject(String source,
                          ParsePosition pos)
Parses text from a string to produce an object array.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 object array is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 See the parse(String, ParsePosition) method for more information
 on message parsing.

Specified by:
parseObject in class Format
Parameters:
source - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
            index information as described above.
Returns:
An Object array parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if pos is null.


"
MessageFormat,"setFormat(int formatElementIndex, Format newFormat)",void,Sets the format to use for the format element with the given format element index within the previously set pattern string.,"

setFormat
public void setFormat(int formatElementIndex,
                      Format newFormat)
Sets the format to use for the format element with the given
 format element index within the previously set pattern string.
 The format element index is the zero-based number of the format
 element counting from the start of the pattern string.
 
 Since the order of format elements in a pattern string often
 changes during localization, it is generally better to use the
 setFormatByArgumentIndex
 method, which accesses format elements based on the argument
 index they specify.

Parameters:
formatElementIndex - the index of a format element within the pattern
newFormat - the format to use for the specified format element
Throws:
ArrayIndexOutOfBoundsException - if formatElementIndex is equal to or
            larger than the number of format elements in the pattern string


"
MessageFormat,"setFormatByArgumentIndex(int argumentIndex, Format newFormat)",void,Sets the format to use for the format elements within the previously set pattern string that use the given argument index.,"

setFormatByArgumentIndex
public void setFormatByArgumentIndex(int argumentIndex,
                                     Format newFormat)
Sets the format to use for the format elements within the
 previously set pattern string that use the given argument
 index.
 The argument index is part of the format element definition and
 represents an index into the arguments array passed
 to the format methods or the result array returned
 by the parse methods.
 
 If the argument index is used for more than one format element
 in the pattern string, then the new format is used for all such
 format elements. If the argument index is not used for any format
 element in the pattern string, then the new format is ignored.

Parameters:
argumentIndex - the argument index for which to use the new format
newFormat - the new format to use
Since:
1.4


"
MessageFormat,setFormats(Format[] newFormats),void,Sets the formats to use for the format elements in the previously set pattern string.,"

setFormats
public void setFormats(Format[] newFormats)
Sets the formats to use for the format elements in the
 previously set pattern string.
 The order of formats in newFormats corresponds to
 the order of format elements in the pattern string.
 
 If more formats are provided than needed by the pattern string,
 the remaining ones are ignored. If fewer formats are provided
 than needed, then only the first newFormats.length
 formats are replaced.
 
 Since the order of format elements in a pattern string often
 changes during localization, it is generally better to use the
 setFormatsByArgumentIndex
 method, which assumes an order of formats corresponding to the
 order of elements in the arguments array passed to
 the format methods or the result array returned by
 the parse methods.

Parameters:
newFormats - the new formats to use
Throws:
NullPointerException - if newFormats is null


"
MessageFormat,setFormatsByArgumentIndex(Format[] newFormats),void,Sets the formats to use for the values passed into format methods or returned from parse methods.,"

setFormatsByArgumentIndex
public void setFormatsByArgumentIndex(Format[] newFormats)
Sets the formats to use for the values passed into
 format methods or returned from parse
 methods. The indices of elements in newFormats
 correspond to the argument indices used in the previously set
 pattern string.
 The order of formats in newFormats thus corresponds to
 the order of elements in the arguments array passed
 to the format methods or the result array returned
 by the parse methods.
 
 If an argument index is used for more than one format element
 in the pattern string, then the corresponding new format is used
 for all such format elements. If an argument index is not used
 for any format element in the pattern string, then the
 corresponding new format is ignored. If fewer formats are provided
 than needed, then only the formats for argument indices less
 than newFormats.length are replaced.

Parameters:
newFormats - the new formats to use
Throws:
NullPointerException - if newFormats is null
Since:
1.4


"
MessageFormat,setLocale(Locale locale),void,Sets the locale to be used when creating or comparing subformats.,"

setLocale
public void setLocale(Locale locale)
Sets the locale to be used when creating or comparing subformats.
 This affects subsequent calls
 
to the applyPattern
     and toPattern methods if format elements specify
     a format type and therefore have the subformats created in the
     applyPattern method, as well as
 to the format and
     formatToCharacterIterator methods
     if format elements do not specify a format type and therefore have
     the subformats created in the formatting methods.
 
 Subformats that have already been created are not affected.

Parameters:
locale - the locale to be used when creating or comparing subformats


"
MessageFormat,toPattern(),String,Returns a pattern representing the current state of the message format.,"

toPattern
public String toPattern()
Returns a pattern representing the current state of the message format.
 The string is constructed from internal information and therefore
 does not necessarily equal the previously applied pattern.

Returns:
a pattern representing the current state of the message format


"
MessageFormat.Field,readResolve(),protected Object,Resolves instances being deserialized to the predefined constants.,"

readResolve
protected Object readResolve()
                      throws InvalidObjectException
Resolves instances being deserialized to the predefined constants.

Overrides:
readResolve in class AttributedCharacterIterator.Attribute
Returns:
resolved MessageFormat.Field constant
Throws:
InvalidObjectException - if the constant could not be
         resolved.


"
Normalizer,"isNormalized(CharSequence src, Normalizer.Form form)",static boolean,Determines if the given sequence of char values is normalized.,"

isNormalized
public static boolean isNormalized(CharSequence src,
                                   Normalizer.Form form)
Determines if the given sequence of char values is normalized.

Parameters:
src - The sequence of char values to be checked.
form - The normalization form; one of
                   Normalizer.Form.NFC,
                   Normalizer.Form.NFD,
                   Normalizer.Form.NFKC,
                   Normalizer.Form.NFKD
Returns:
true if the sequence of char values is normalized;
 false otherwise.
Throws:
NullPointerException - If src or form
 is null.


"
Normalizer,"normalize(CharSequence src, Normalizer.Form form)",static String,Normalize a sequence of char values.,"

normalize
public static String normalize(CharSequence src,
                               Normalizer.Form form)
Normalize a sequence of char values.
 The sequence will be normalized according to the specified normalization
 from.

Parameters:
src - The sequence of char values to normalize.
form - The normalization form; one of
                   Normalizer.Form.NFC,
                   Normalizer.Form.NFD,
                   Normalizer.Form.NFKC,
                   Normalizer.Form.NFKD
Returns:
The normalized String
Throws:
NullPointerException - If src or form
 is null.


"
NumberFormat,clone(),Object,Overrides Cloneable.,"

clone
public Object clone()
Overrides Cloneable.

Overrides:
clone in class Format
Returns:
a clone of this instance.
See Also:
Cloneable


"
NumberFormat,equals(Object obj),boolean,Overrides equals.,"

equals
public boolean equals(Object obj)
Overrides equals.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
NumberFormat,format(double number),String,Specialization of format.,"

format
public final String format(double number)
Specialization of format.

Parameters:
number - the double number to format
Returns:
the formatted String
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
NumberFormat,"format(double number, StringBuffer toAppendTo, FieldPosition pos)",abstract StringBuffer,Specialization of format.,"

format
public abstract StringBuffer format(double number,
                                    StringBuffer toAppendTo,
                                    FieldPosition pos)
Specialization of format.

Parameters:
number - the double number to format
toAppendTo - the StringBuffer to which the formatted text is to be
                   appended
pos - the field position
Returns:
the formatted StringBuffer
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
NumberFormat,format(long number),String,Specialization of format.,"

format
public final String format(long number)
Specialization of format.

Parameters:
number - the long number to format
Returns:
the formatted String
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
NumberFormat,"format(long number, StringBuffer toAppendTo, FieldPosition pos)",abstract StringBuffer,Specialization of format.,"

format
public abstract StringBuffer format(long number,
                                    StringBuffer toAppendTo,
                                    FieldPosition pos)
Specialization of format.

Parameters:
number - the long number to format
toAppendTo - the StringBuffer to which the formatted text is to be
                   appended
pos - the field position
Returns:
the formatted StringBuffer
Throws:
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
Format.format(java.lang.Object)


"
NumberFormat,"format(Object number, StringBuffer toAppendTo, FieldPosition pos)",StringBuffer,Formats a number and appends the resulting text to the given string buffer.,"

format
public StringBuffer format(Object number,
                           StringBuffer toAppendTo,
                           FieldPosition pos)
Formats a number and appends the resulting text to the given string
 buffer.
 The number can be of any subclass of Number.
 
 This implementation extracts the number's value using
 Number.longValue() for all integral type values that
 can be converted to long without loss of information,
 including BigInteger values with a
 bit length of less than 64,
 and Number.doubleValue() for all other types. It
 then calls
 format(long,java.lang.StringBuffer,java.text.FieldPosition)
 or format(double,java.lang.StringBuffer,java.text.FieldPosition).
 This may result in loss of magnitude information and precision for
 BigInteger and BigDecimal values.

Specified by:
format in class Format
Parameters:
number - the number to format
toAppendTo - the StringBuffer to which the formatted
                   text is to be appended
pos - On input: an alignment field, if desired.
                   On output: the offsets of the alignment field.
Returns:
the value passed in as toAppendTo
Throws:
IllegalArgumentException - if number is
                   null or not an instance of Number.
NullPointerException - if toAppendTo or
                   pos is null
ArithmeticException - if rounding is needed with rounding
                   mode being set to RoundingMode.UNNECESSARY
See Also:
FieldPosition


"
NumberFormat,getAvailableLocales(),static Locale[],Returns an array of all locales for which the get*Instance methods of this class can return localized instances.,"

getAvailableLocales
public static Locale[] getAvailableLocales()
Returns an array of all locales for which the
 get*Instance methods of this class can return
 localized instances.
 The returned array represents the union of locales supported by the Java
 runtime and by installed
 NumberFormatProvider implementations.
 It must contain at least a Locale instance equal to
 Locale.US.

Returns:
An array of locales for which localized
         NumberFormat instances are available.


"
NumberFormat,getCurrency(),Currency,Gets the currency used by this number format when formatting currency values.,"

getCurrency
public Currency getCurrency()
Gets the currency used by this number format when formatting
 currency values. The initial value is derived in a locale dependent
 way. The returned value may be null if no valid
 currency could be determined and no currency has been set using
 setCurrency.
 
 The default implementation throws
 UnsupportedOperationException.

Returns:
the currency used by this number format, or null
Throws:
UnsupportedOperationException - if the number format class
 doesn't implement currency formatting
Since:
1.4


"
NumberFormat,getCurrencyInstance(),static NumberFormat,Returns a currency format for the current default FORMAT locale.,"

getCurrencyInstance
public static final NumberFormat getCurrencyInstance()
Returns a currency format for the current default
 FORMAT locale.
 This is equivalent to calling
 getCurrencyInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for currency formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
NumberFormat,getCurrencyInstance(Locale inLocale),static NumberFormat,Returns a currency format for the specified locale.,"

getCurrencyInstance
public static NumberFormat getCurrencyInstance(Locale inLocale)
Returns a currency format for the specified locale.

Parameters:
inLocale - the desired locale
Returns:
the NumberFormat instance for currency formatting


"
NumberFormat,getInstance(),static NumberFormat,Returns a general-purpose number format for the current default FORMAT locale.,"

getInstance
public static final NumberFormat getInstance()
Returns a general-purpose number format for the current default
 FORMAT locale.
 This is the same as calling
 getNumberInstance().

Returns:
the NumberFormat instance for general-purpose number
 formatting


"
NumberFormat,getInstance(Locale inLocale),static NumberFormat,Returns a general-purpose number format for the specified locale.,"

getInstance
public static NumberFormat getInstance(Locale inLocale)
Returns a general-purpose number format for the specified locale.
 This is the same as calling
 getNumberInstance(inLocale).

Parameters:
inLocale - the desired locale
Returns:
the NumberFormat instance for general-purpose number
 formatting


"
NumberFormat,getIntegerInstance(),static NumberFormat,Returns an integer number format for the current default FORMAT locale.,"

getIntegerInstance
public static final NumberFormat getIntegerInstance()
Returns an integer number format for the current default
 FORMAT locale. The
 returned number format is configured to round floating point numbers
 to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting,
 and to parse only the integer part of an input string (see isParseIntegerOnly).
 This is equivalent to calling
 getIntegerInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
a number format for integer values
Since:
1.4
See Also:
getRoundingMode(), 
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
NumberFormat,getIntegerInstance(Locale inLocale),static NumberFormat,Returns an integer number format for the specified locale.,"

getIntegerInstance
public static NumberFormat getIntegerInstance(Locale inLocale)
Returns an integer number format for the specified locale. The
 returned number format is configured to round floating point numbers
 to the nearest integer using half-even rounding (see RoundingMode.HALF_EVEN) for formatting,
 and to parse only the integer part of an input string (see isParseIntegerOnly).

Parameters:
inLocale - the desired locale
Returns:
a number format for integer values
Since:
1.4
See Also:
getRoundingMode()


"
NumberFormat,getMaximumFractionDigits(),int,Returns the maximum number of digits allowed in the fraction portion of a number.,"

getMaximumFractionDigits
public int getMaximumFractionDigits()
Returns the maximum number of digits allowed in the fraction portion of a
 number.

Returns:
the maximum number of digits.
See Also:
setMaximumFractionDigits(int)


"
NumberFormat,getMaximumIntegerDigits(),int,Returns the maximum number of digits allowed in the integer portion of a number.,"

getMaximumIntegerDigits
public int getMaximumIntegerDigits()
Returns the maximum number of digits allowed in the integer portion of a
 number.

Returns:
the maximum number of digits
See Also:
setMaximumIntegerDigits(int)


"
NumberFormat,getMinimumFractionDigits(),int,Returns the minimum number of digits allowed in the fraction portion of a number.,"

getMinimumFractionDigits
public int getMinimumFractionDigits()
Returns the minimum number of digits allowed in the fraction portion of a
 number.

Returns:
the minimum number of digits
See Also:
setMinimumFractionDigits(int)


"
NumberFormat,getMinimumIntegerDigits(),int,Returns the minimum number of digits allowed in the integer portion of a number.,"

getMinimumIntegerDigits
public int getMinimumIntegerDigits()
Returns the minimum number of digits allowed in the integer portion of a
 number.

Returns:
the minimum number of digits
See Also:
setMinimumIntegerDigits(int)


"
NumberFormat,getNumberInstance(),static NumberFormat,Returns a general-purpose number format for the current default FORMAT locale.,"

getNumberInstance
public static final NumberFormat getNumberInstance()
Returns a general-purpose number format for the current default
 FORMAT locale.
 This is equivalent to calling
 getNumberInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for general-purpose number
 formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
NumberFormat,getNumberInstance(Locale inLocale),static NumberFormat,Returns a general-purpose number format for the specified locale.,"

getNumberInstance
public static NumberFormat getNumberInstance(Locale inLocale)
Returns a general-purpose number format for the specified locale.

Parameters:
inLocale - the desired locale
Returns:
the NumberFormat instance for general-purpose number
 formatting


"
NumberFormat,getPercentInstance(),static NumberFormat,Returns a percentage format for the current default FORMAT locale.,"

getPercentInstance
public static final NumberFormat getPercentInstance()
Returns a percentage format for the current default
 FORMAT locale.
 This is equivalent to calling
 getPercentInstance(Locale.getDefault(Locale.Category.FORMAT)).

Returns:
the NumberFormat instance for percentage formatting
See Also:
Locale.getDefault(java.util.Locale.Category), 
Locale.Category.FORMAT


"
NumberFormat,getPercentInstance(Locale inLocale),static NumberFormat,Returns a percentage format for the specified locale.,"

getPercentInstance
public static NumberFormat getPercentInstance(Locale inLocale)
Returns a percentage format for the specified locale.

Parameters:
inLocale - the desired locale
Returns:
the NumberFormat instance for percentage formatting


"
NumberFormat,getRoundingMode(),RoundingMode,Gets the RoundingMode used in this NumberFormat.,"

getRoundingMode
public RoundingMode getRoundingMode()
Gets the RoundingMode used in this NumberFormat.
 The default implementation of this method in NumberFormat
 always throws UnsupportedOperationException.
 Subclasses which handle different rounding modes should override
 this method.

Returns:
The RoundingMode used for this NumberFormat.
Throws:
UnsupportedOperationException - The default implementation
     always throws this exception
Since:
1.6
See Also:
setRoundingMode(RoundingMode)


"
NumberFormat,hashCode(),int,Overrides hashCode.,"

hashCode
public int hashCode()
Overrides hashCode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
NumberFormat,isGroupingUsed(),boolean,Returns true if grouping is used in this format.,"

isGroupingUsed
public boolean isGroupingUsed()
Returns true if grouping is used in this format. For example, in the
 English locale, with grouping on, the number 1234567 might be formatted
 as ""1,234,567"". The grouping separator as well as the size of each group
 is locale dependant and is determined by sub-classes of NumberFormat.

Returns:
true if grouping is used;
         false otherwise
See Also:
setGroupingUsed(boolean)


"
NumberFormat,isParseIntegerOnly(),boolean,Returns true if this format will parse numbers as integers only.,"

isParseIntegerOnly
public boolean isParseIntegerOnly()
Returns true if this format will parse numbers as integers only.
 For example in the English locale, with ParseIntegerOnly true, the
 string ""1234."" would be parsed as the integer value 1234 and parsing
 would stop at the ""."" character.  Of course, the exact format accepted
 by the parse operation is locale dependant and determined by sub-classes
 of NumberFormat.

Returns:
true if numbers should be parsed as integers only;
         false otherwise


"
NumberFormat,parse(String source),Number,Parses text from the beginning of the given string to produce a number.,"

parse
public Number parse(String source)
             throws ParseException
Parses text from the beginning of the given string to produce a number.
 The method may not use the entire text of the given string.
 
 See the parse(String, ParsePosition) method for more information
 on number parsing.

Parameters:
source - A String whose beginning should be parsed.
Returns:
A Number parsed from the string.
Throws:
ParseException - if the beginning of the specified string
            cannot be parsed.


"
NumberFormat,"parse(String source, ParsePosition parsePosition)",abstract Number,"Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double.","

parse
public abstract Number parse(String source,
                             ParsePosition parsePosition)
Returns a Long if possible (e.g., within the range [Long.MIN_VALUE,
 Long.MAX_VALUE] and with no decimals), otherwise a Double.
 If IntegerOnly is set, will stop at a decimal
 point (or equivalent; e.g., for rational numbers ""1 2/3"", will stop
 after the 1).
 Does not throw an exception; if no object can be parsed, index is
 unchanged!

Parameters:
source - the String to parse
parsePosition - the parse position
Returns:
the parsed value
See Also:
isParseIntegerOnly(), 
Format.parseObject(java.lang.String, java.text.ParsePosition)


"
NumberFormat,"parseObject(String source, ParsePosition pos)",Object,Parses text from a string to produce a Number.,"

parseObject
public final Object parseObject(String source,
                                ParsePosition pos)
Parses text from a string to produce a Number.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 number is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.
 
 See the parse(String, ParsePosition) method for more information
 on number parsing.

Specified by:
parseObject in class Format
Parameters:
source - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
            index information as described above.
Returns:
A Number parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if pos is null.


"
NumberFormat,setCurrency(Currency currency),void,Sets the currency used by this number format when formatting currency values.,"

setCurrency
public void setCurrency(Currency currency)
Sets the currency used by this number format when formatting
 currency values. This does not update the minimum or maximum
 number of fraction digits used by the number format.
 
 The default implementation throws
 UnsupportedOperationException.

Parameters:
currency - the new currency to be used by this number format
Throws:
UnsupportedOperationException - if the number format class
 doesn't implement currency formatting
NullPointerException - if currency is null
Since:
1.4


"
NumberFormat,setGroupingUsed(boolean newValue),void,Set whether or not grouping will be used in this format.,"

setGroupingUsed
public void setGroupingUsed(boolean newValue)
Set whether or not grouping will be used in this format.

Parameters:
newValue - true if grouping is used;
                 false otherwise
See Also:
isGroupingUsed()


"
NumberFormat,setMaximumFractionDigits(int newValue),void,Sets the maximum number of digits allowed in the fraction portion of a number.,"

setMaximumFractionDigits
public void setMaximumFractionDigits(int newValue)
Sets the maximum number of digits allowed in the fraction portion of a
 number. maximumFractionDigits must be â‰¥ minimumFractionDigits.  If the
 new value for maximumFractionDigits is less than the current value
 of minimumFractionDigits, then minimumFractionDigits will also be set to
 the new value.

Parameters:
newValue - the maximum number of fraction digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
getMaximumFractionDigits()


"
NumberFormat,setMaximumIntegerDigits(int newValue),void,Sets the maximum number of digits allowed in the integer portion of a number.,"

setMaximumIntegerDigits
public void setMaximumIntegerDigits(int newValue)
Sets the maximum number of digits allowed in the integer portion of a
 number. maximumIntegerDigits must be â‰¥ minimumIntegerDigits.  If the
 new value for maximumIntegerDigits is less than the current value
 of minimumIntegerDigits, then minimumIntegerDigits will also be set to
 the new value.

Parameters:
newValue - the maximum number of integer digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
getMaximumIntegerDigits()


"
NumberFormat,setMinimumFractionDigits(int newValue),void,Sets the minimum number of digits allowed in the fraction portion of a number.,"

setMinimumFractionDigits
public void setMinimumFractionDigits(int newValue)
Sets the minimum number of digits allowed in the fraction portion of a
 number. minimumFractionDigits must be â‰¤ maximumFractionDigits.  If the
 new value for minimumFractionDigits exceeds the current value
 of maximumFractionDigits, then maximumIntegerDigits will also be set to
 the new value

Parameters:
newValue - the minimum number of fraction digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
getMinimumFractionDigits()


"
NumberFormat,setMinimumIntegerDigits(int newValue),void,Sets the minimum number of digits allowed in the integer portion of a number.,"

setMinimumIntegerDigits
public void setMinimumIntegerDigits(int newValue)
Sets the minimum number of digits allowed in the integer portion of a
 number. minimumIntegerDigits must be â‰¤ maximumIntegerDigits.  If the
 new value for minimumIntegerDigits exceeds the current value
 of maximumIntegerDigits, then maximumIntegerDigits will also be set to
 the new value

Parameters:
newValue - the minimum number of integer digits to be shown; if
 less than zero, then zero is used. The concrete subclass may enforce an
 upper limit to this value appropriate to the numeric type being formatted.
See Also:
getMinimumIntegerDigits()


"
NumberFormat,setParseIntegerOnly(boolean value),void,Sets whether or not numbers should be parsed as integers only.,"

setParseIntegerOnly
public void setParseIntegerOnly(boolean value)
Sets whether or not numbers should be parsed as integers only.

Parameters:
value - true if numbers should be parsed as integers only;
              false otherwise
See Also:
isParseIntegerOnly()


"
NumberFormat,setRoundingMode(RoundingMode roundingMode),void,Sets the RoundingMode used in this NumberFormat.,"

setRoundingMode
public void setRoundingMode(RoundingMode roundingMode)
Sets the RoundingMode used in this NumberFormat.
 The default implementation of this method in NumberFormat always
 throws UnsupportedOperationException.
 Subclasses which handle different rounding modes should override
 this method.

Parameters:
roundingMode - The RoundingMode to be used
Throws:
UnsupportedOperationException - The default implementation
     always throws this exception
NullPointerException - if roundingMode is null
Since:
1.6
See Also:
getRoundingMode()


"
NumberFormat.Field,readResolve(),protected Object,Resolves instances being deserialized to the predefined constants.,"

readResolve
protected Object readResolve()
                      throws InvalidObjectException
Resolves instances being deserialized to the predefined constants.

Overrides:
readResolve in class AttributedCharacterIterator.Attribute
Returns:
resolved NumberFormat.Field constant
Throws:
InvalidObjectException - if the constant could not be resolved.


"
ParsePosition,equals(Object obj),boolean,Overrides equals,"

equals
public boolean equals(Object obj)
Overrides equals

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ParsePosition,getErrorIndex(),int,"Retrieve the index at which an error occurred, or -1 if the error index has not been set.","

getErrorIndex
public int getErrorIndex()
Retrieve the index at which an error occurred, or -1 if the
 error index has not been set.

Returns:
the index at which an error occurred
Since:
1.2


"
ParsePosition,getIndex(),int,Retrieve the current parse position.,"

getIndex
public int getIndex()
Retrieve the current parse position.  On input to a parse method, this
 is the index of the character at which parsing will begin; on output, it
 is the index of the character following the last character parsed.

Returns:
the current parse position


"
ParsePosition,hashCode(),int,Returns a hash code for this ParsePosition.,"

hashCode
public int hashCode()
Returns a hash code for this ParsePosition.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ParsePosition,setErrorIndex(int ei),void,Set the index at which a parse error occurred.,"

setErrorIndex
public void setErrorIndex(int ei)
Set the index at which a parse error occurred.  Formatters
 should set this before returning an error code from their
 parseObject method.  The default value is -1 if this is not set.

Parameters:
ei - the index at which an error occurred
Since:
1.2


"
ParsePosition,setIndex(int index),void,Set the current parse position.,"

setIndex
public void setIndex(int index)
Set the current parse position.

Parameters:
index - the current parse position


"
ParsePosition,toString(),String,Return a string representation of this ParsePosition.,"

toString
public String toString()
Return a string representation of this ParsePosition.

Overrides:
toString in class Object
Returns:
a string representation of this object


"
RuleBasedCollator,clone(),Object,Standard override; no change in semantics.,"

clone
public Object clone()
Standard override; no change in semantics.

Overrides:
clone in class Collator
Returns:
a clone of this instance.
See Also:
Cloneable


"
RuleBasedCollator,"compare(String source, String target)",int,Compares the character data stored in two different strings based on the collation rules.,"

compare
public int compare(String source,
                   String target)
Compares the character data stored in two different strings based on the
 collation rules.  Returns information about whether a string is less
 than, greater than or equal to another string in a language.
 This can be overriden in a subclass.

Specified by:
compare in class Collator
Parameters:
source - the source string.
target - the target string.
Returns:
Returns an integer value. Value is less than zero if source is less than
 target, value is zero if source and target are equal, value is greater than zero
 if source is greater than target.
Throws:
NullPointerException - if source or target is null.
See Also:
CollationKey, 
Collator.getCollationKey(java.lang.String)


"
RuleBasedCollator,equals(Object obj),boolean,Compares the equality of two collation objects.,"

equals
public boolean equals(Object obj)
Compares the equality of two collation objects.

Specified by:
equals in interface Comparator<Object>
Overrides:
equals in class Collator
Parameters:
obj - the table-based collation object to be compared with this.
Returns:
true if the current table-based collation object is the same
 as the table-based collation object obj; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
RuleBasedCollator,getCollationElementIterator(CharacterIterator source),CollationElementIterator,Returns a CollationElementIterator for the given CharacterIterator.,"

getCollationElementIterator
public CollationElementIterator getCollationElementIterator(CharacterIterator source)
Returns a CollationElementIterator for the given CharacterIterator.

Parameters:
source - the character iterator to be collated
Returns:
a CollationElementIterator object
Since:
1.2
See Also:
CollationElementIterator


"
RuleBasedCollator,getCollationElementIterator(String source),CollationElementIterator,Returns a CollationElementIterator for the given String.,"

getCollationElementIterator
public CollationElementIterator getCollationElementIterator(String source)
Returns a CollationElementIterator for the given String.

Parameters:
source - the string to be collated
Returns:
a CollationElementIterator object
See Also:
CollationElementIterator


"
RuleBasedCollator,getCollationKey(String source),CollationKey,Transforms the string into a series of characters that can be compared with CollationKey.compareTo.,"

getCollationKey
public CollationKey getCollationKey(String source)
Transforms the string into a series of characters that can be compared
 with CollationKey.compareTo. This overrides java.text.Collator.getCollationKey.
 It can be overriden in a subclass.

Specified by:
getCollationKey in class Collator
Parameters:
source - the string to be transformed into a collation key.
Returns:
the CollationKey for the given String based on this Collator's collation
 rules. If the source String is null, a null CollationKey is returned.
See Also:
CollationKey, 
Collator.compare(java.lang.String, java.lang.String)


"
RuleBasedCollator,getRules(),String,Gets the table-based rules for the collation object.,"

getRules
public String getRules()
Gets the table-based rules for the collation object.

Returns:
returns the collation rules that the table collation object
 was created from.


"
RuleBasedCollator,hashCode(),int,Generates the hash code for the table-based collation object,"

hashCode
public int hashCode()
Generates the hash code for the table-based collation object

Specified by:
hashCode in class Collator
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SimpleDateFormat,applyLocalizedPattern(String pattern),void,Applies the given localized pattern string to this date format.,"

applyLocalizedPattern
public void applyLocalizedPattern(String pattern)
Applies the given localized pattern string to this date format.

Parameters:
pattern - a String to be mapped to the new date and time format
        pattern for this format
Throws:
NullPointerException - if the given pattern is null
IllegalArgumentException - if the given pattern is invalid


"
SimpleDateFormat,applyPattern(String pattern),void,Applies the given pattern string to this date format.,"

applyPattern
public void applyPattern(String pattern)
Applies the given pattern string to this date format.

Parameters:
pattern - the new date and time pattern for this date format
Throws:
NullPointerException - if the given pattern is null
IllegalArgumentException - if the given pattern is invalid


"
SimpleDateFormat,clone(),Object,Creates a copy of this SimpleDateFormat.,"

clone
public Object clone()
Creates a copy of this SimpleDateFormat. This also
 clones the format's date format symbols.

Overrides:
clone in class DateFormat
Returns:
a clone of this SimpleDateFormat
See Also:
Cloneable


"
SimpleDateFormat,equals(Object obj),boolean,Compares the given object with this SimpleDateFormat for equality.,"

equals
public boolean equals(Object obj)
Compares the given object with this SimpleDateFormat for
 equality.

Overrides:
equals in class DateFormat
Parameters:
obj - the reference object with which to compare.
Returns:
true if the given object is equal to this
 SimpleDateFormat
See Also:
Object.hashCode(), 
HashMap


"
SimpleDateFormat,"format(Date date, StringBuffer toAppendTo, FieldPosition pos)",StringBuffer,Formats the given Date into a date/time string and appends the result to the given StringBuffer.,"

format
public StringBuffer format(Date date,
                           StringBuffer toAppendTo,
                           FieldPosition pos)
Formats the given Date into a date/time string and appends
 the result to the given StringBuffer.

Specified by:
format in class DateFormat
Parameters:
date - the date-time value to be formatted into a date-time string.
toAppendTo - where the new date-time text is to be appended.
pos - the formatting position. On input: an alignment field,
 if desired. On output: the offsets of the alignment field.
Returns:
the formatted date-time string.
Throws:
NullPointerException - if the given date is null.


"
SimpleDateFormat,formatToCharacterIterator(Object obj),AttributedCharacterIterator,Formats an Object producing an AttributedCharacterIterator.,"

formatToCharacterIterator
public AttributedCharacterIterator formatToCharacterIterator(Object obj)
Formats an Object producing an AttributedCharacterIterator.
 You can use the returned AttributedCharacterIterator
 to build the resulting String, as well as to determine information
 about the resulting String.
 
 Each attribute key of the AttributedCharacterIterator will be of type
 DateFormat.Field, with the corresponding attribute value
 being the same as the attribute key.

Overrides:
formatToCharacterIterator in class Format
Parameters:
obj - The object to format
Returns:
AttributedCharacterIterator describing the formatted value.
Throws:
NullPointerException - if obj is null.
IllegalArgumentException - if the Format cannot format the
            given object, or if the Format's pattern string is invalid.
Since:
1.4


"
SimpleDateFormat,get2DigitYearStart(),Date,Returns the beginning date of the 100-year period 2-digit years are interpreted as being within.,"

get2DigitYearStart
public Date get2DigitYearStart()
Returns the beginning date of the 100-year period 2-digit years are interpreted
 as being within.

Returns:
the start of the 100-year period into which two digit years are
 parsed
Since:
1.2
See Also:
set2DigitYearStart(java.util.Date)


"
SimpleDateFormat,getDateFormatSymbols(),DateFormatSymbols,Gets a copy of the date and time format symbols of this date format.,"

getDateFormatSymbols
public DateFormatSymbols getDateFormatSymbols()
Gets a copy of the date and time format symbols of this date format.

Returns:
the date and time format symbols of this date format
See Also:
setDateFormatSymbols(java.text.DateFormatSymbols)


"
SimpleDateFormat,hashCode(),int,Returns the hash code value for this SimpleDateFormat object.,"

hashCode
public int hashCode()
Returns the hash code value for this SimpleDateFormat object.

Overrides:
hashCode in class DateFormat
Returns:
the hash code value for this SimpleDateFormat object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SimpleDateFormat,"parse(String text, ParsePosition pos)",Date,Parses text from a string to produce a Date.,"

parse
public Date parse(String text,
                  ParsePosition pos)
Parses text from a string to produce a Date.
 
 The method attempts to parse text starting at the index given by
 pos.
 If parsing succeeds, then the index of pos is updated
 to the index after the last character used (parsing does not necessarily
 use all characters up to the end of the string), and the parsed
 date is returned. The updated pos can be used to
 indicate the starting point for the next call to this method.
 If an error occurs, then the index of pos is not
 changed, the error index of pos is set to the index of
 the character where the error occurred, and null is returned.

 This parsing operation uses the calendar to produce a Date. All of the calendar's date-time fields are cleared before parsing, and the calendar's default
 values of the date-time fields are used for any missing
 date-time information. For example, the year value of the
 parsed Date is 1970 with GregorianCalendar if
 no year value is given from the parsing operation.  The TimeZone value may be overwritten, depending on the given
 pattern and the time zone value in text. Any TimeZone value that has previously been set by a call to
 setTimeZone may need
 to be restored for further operations.

Specified by:
parse in class DateFormat
Parameters:
text - A String, part of which should be parsed.
pos - A ParsePosition object with index and error
              index information as described above.
Returns:
A Date parsed from the string. In case of
         error, returns null.
Throws:
NullPointerException - if text or pos is null.


"
SimpleDateFormat,set2DigitYearStart(Date startDate),void,Sets the 100-year period 2-digit years will be interpreted as being in to begin on the date the user specifies.,"

set2DigitYearStart
public void set2DigitYearStart(Date startDate)
Sets the 100-year period 2-digit years will be interpreted as being in
 to begin on the date the user specifies.

Parameters:
startDate - During parsing, two digit years will be placed in the range
 startDate to startDate + 100 years.
Since:
1.2
See Also:
get2DigitYearStart()


"
SimpleDateFormat,setDateFormatSymbols(DateFormatSymbols newFormatSymbols),void,Sets the date and time format symbols of this date format.,"

setDateFormatSymbols
public void setDateFormatSymbols(DateFormatSymbols newFormatSymbols)
Sets the date and time format symbols of this date format.

Parameters:
newFormatSymbols - the new date and time format symbols
Throws:
NullPointerException - if the given newFormatSymbols is null
See Also:
getDateFormatSymbols()


"
SimpleDateFormat,toLocalizedPattern(),String,Returns a localized pattern string describing this date format.,"

toLocalizedPattern
public String toLocalizedPattern()
Returns a localized pattern string describing this date format.

Returns:
a localized pattern string describing this date format.


"
SimpleDateFormat,toPattern(),String,Returns a pattern string describing this date format.,"

toPattern
public String toPattern()
Returns a pattern string describing this date format.

Returns:
a pattern string describing this date format.


"
StringCharacterIterator,clone(),Object,Creates a copy of this iterator.,"

clone
public Object clone()
Creates a copy of this iterator.

Specified by:
clone in interface CharacterIterator
Overrides:
clone in class Object
Returns:
A copy of this
See Also:
Cloneable


"
StringCharacterIterator,current(),char,Implements CharacterIterator.current() for String.,"

current
public char current()
Implements CharacterIterator.current() for String.

Specified by:
current in interface CharacterIterator
Returns:
the character at the current position or DONE if the current
 position is off the end of the text.
See Also:
CharacterIterator.current()


"
StringCharacterIterator,equals(Object obj),boolean,Compares the equality of two StringCharacterIterator objects.,"

equals
public boolean equals(Object obj)
Compares the equality of two StringCharacterIterator objects.

Overrides:
equals in class Object
Parameters:
obj - the StringCharacterIterator object to be compared with.
Returns:
true if the given obj is the same as this
 StringCharacterIterator object; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
StringCharacterIterator,first(),char,Implements CharacterIterator.first() for String.,"

first
public char first()
Implements CharacterIterator.first() for String.

Specified by:
first in interface CharacterIterator
Returns:
the first character in the text, or DONE if the text is empty
See Also:
CharacterIterator.first()


"
StringCharacterIterator,getBeginIndex(),int,Implements CharacterIterator.getBeginIndex() for String.,"

getBeginIndex
public int getBeginIndex()
Implements CharacterIterator.getBeginIndex() for String.

Specified by:
getBeginIndex in interface CharacterIterator
Returns:
the index at which the text begins.
See Also:
CharacterIterator.getBeginIndex()


"
StringCharacterIterator,getEndIndex(),int,Implements CharacterIterator.getEndIndex() for String.,"

getEndIndex
public int getEndIndex()
Implements CharacterIterator.getEndIndex() for String.

Specified by:
getEndIndex in interface CharacterIterator
Returns:
the index after the last character in the text
See Also:
CharacterIterator.getEndIndex()


"
StringCharacterIterator,getIndex(),int,Implements CharacterIterator.getIndex() for String.,"

getIndex
public int getIndex()
Implements CharacterIterator.getIndex() for String.

Specified by:
getIndex in interface CharacterIterator
Returns:
the current index.
See Also:
CharacterIterator.getIndex()


"
StringCharacterIterator,hashCode(),int,Computes a hashcode for this iterator.,"

hashCode
public int hashCode()
Computes a hashcode for this iterator.

Overrides:
hashCode in class Object
Returns:
A hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
StringCharacterIterator,last(),char,Implements CharacterIterator.last() for String.,"

last
public char last()
Implements CharacterIterator.last() for String.

Specified by:
last in interface CharacterIterator
Returns:
the last character in the text, or DONE if the text is empty
See Also:
CharacterIterator.last()


"
StringCharacterIterator,next(),char,Implements CharacterIterator.next() for String.,"

next
public char next()
Implements CharacterIterator.next() for String.

Specified by:
next in interface CharacterIterator
Returns:
the character at the new position or DONE if the new
 position is off the end of the text range.
See Also:
CharacterIterator.next()


"
StringCharacterIterator,previous(),char,Implements CharacterIterator.previous() for String.,"

previous
public char previous()
Implements CharacterIterator.previous() for String.

Specified by:
previous in interface CharacterIterator
Returns:
the character at the new position or DONE if the current
 position is equal to getBeginIndex().
See Also:
CharacterIterator.previous()


"
StringCharacterIterator,setIndex(int p),char,Implements CharacterIterator.setIndex() for String.,"

setIndex
public char setIndex(int p)
Implements CharacterIterator.setIndex() for String.

Specified by:
setIndex in interface CharacterIterator
Parameters:
p - the position within the text.  Valid values range from
 getBeginIndex() to getEndIndex().  An IllegalArgumentException is thrown
 if an invalid value is supplied.
Returns:
the character at the specified position or DONE if the specified position is equal to getEndIndex()
See Also:
CharacterIterator.setIndex(int)


"
StringCharacterIterator,setText(String text),void,Reset this iterator to point to a new string.,"

setText
public void setText(String text)
Reset this iterator to point to a new string.  This package-visible
 method is used by other java.text classes that want to avoid allocating
 new StringCharacterIterator objects every time their setText method
 is called.

Parameters:
text - The String to be iterated over
Since:
1.2


"
