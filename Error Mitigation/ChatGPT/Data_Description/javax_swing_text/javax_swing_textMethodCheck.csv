Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractDocument,1,"void insertString(int offset, String str, AttributeSet a)",True,,"

insertString
public void insertString(int offs,
                         String str,
                         AttributeSet a)
                  throws BadLocationException
Inserts some content into the document.
 Inserting content causes a write lock to be held while the
 actual changes are taking place, followed by notification
 to the observers on the thread that grabbed the write lock.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
insertString in interface Document
Parameters:
offs - the starting offset >= 0
str - the string to insert; does nothing with null/empty strings
a - the attributes for the inserted content
Throws:
BadLocationException - the given insert position is not a valid
   position within the document
See Also:
Document.insertString(int, java.lang.String, javax.swing.text.AttributeSet)


"
0,AbstractDocument,2,"void remove(int offs, int len)",True,,"

remove
public void remove(int offs,
                   int len)
            throws BadLocationException
Removes some content from the document.
 Removing content causes a write lock to be held while the
 actual changes are taking place.  Observers are notified
 of the change on the thread that called this method.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
remove in interface Document
Parameters:
offs - the starting offset >= 0
len - the number of characters to remove >= 0
Throws:
BadLocationException - the given remove position is not a valid
   position within the document
See Also:
Document.remove(int, int)


"
0,AbstractDocument,3,Element getDefaultRootElement(),True,,"

getDefaultRootElement
public abstract Element getDefaultRootElement()
Returns the root element that views should be based upon
 unless some other mechanism for assigning views to element
 structures is provided.

Specified by:
getDefaultRootElement in interface Document
Returns:
the root element
See Also:
Document.getDefaultRootElement()


"
0,AbstractDocument,4,Position createPosition(int offset),True,,"

createPosition
public Position createPosition(int offs)
                        throws BadLocationException
Returns a position that will track change as the document
 is altered.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
createPosition in interface Document
Parameters:
offs - the position in the model >= 0
Returns:
the position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
Document.createPosition(int)


"
0,AbstractDocument,5,"void putProperty(Object key, Object value)",True,,"

putProperty
public final void putProperty(Object key,
                              Object value)
A convenience method for storing up a property value.  It is
 equivalent to:
 
 getDocumentProperties().put(key, value);
 
 If value is null this method will
 remove the property.

Specified by:
putProperty in interface Document
Parameters:
key - the non-null key
value - the property value
See Also:
getDocumentProperties()


"
1,AbstractDocument.ElementEdit,1,"void insertUpdate(AbstractDocument.DefaultDocumentEvent chng, Element elem)",False,,NULL
1,AbstractDocument.ElementEdit,2,"void removeUpdate(AbstractDocument.DefaultDocumentEvent chng, Element elem)",False,,NULL
1,AbstractDocument.ElementEdit,3,"void changedUpdate(AbstractDocument.DefaultDocumentEvent chng, Element elem)",False,,NULL
1,AbstractDocument.ElementEdit,4,void postRemoveUpdate(AbstractDocument.DefaultDocumentEvent chng),False,,NULL
1,AbstractDocument.ElementEdit,5,void postInsertUpdate(AbstractDocument.DefaultDocumentEvent chng),False,,NULL
2,AbstractWriter,1,void write(),True,,"

write
protected abstract void write()
                       throws IOException,
                              BadLocationException
This abstract method needs to be implemented
 by subclasses.  Its responsibility is to
 iterate over the elements and use the write()
 methods to generate output in the desired format.

Throws:
IOException
BadLocationException


"
2,AbstractWriter,2,void writeAttributes(AttributeSet attributes),True,,"

writeAttributes
protected void writeAttributes(AttributeSet attr)
                        throws IOException
Writes out the set of attributes as "" <name>=<value>""
 pairs. It throws an IOException when encountered.

Parameters:
attr - an AttributeSet.
Throws:
IOException - on any I/O error


"
2,AbstractWriter,3,void writeContent(Content content),False,,NULL
2,AbstractWriter,4,void writeElement(Element element),False,,NULL
2,AbstractWriter,5,void writeStartTag(Element element),False,,NULL
3,AsyncBoxView,1,void setParent(View parent),True,,"

setParent
public void setParent(View parent)
Sets the parent of the view.
 This is reimplemented to provide the superclass
 behavior as well as calling the loadChildren
 method if this view does not already have children.
 The children should not be loaded in the
 constructor because the act of setting the parent
 may cause them to try to search up the hierarchy
 (to get the hosting Container for example).
 If this view has children (the view is being moved
 from one place in the view hierarchy to another),
 the loadChildren method will not be called.

Overrides:
setParent in class View
Parameters:
parent - the parent of the view, null if none


"
3,AsyncBoxView,2,int getAxis(),False,,NULL
3,AsyncBoxView,3,float getAlignment(int axis),False,,NULL
3,AsyncBoxView,4,void setMajorAxis(int axis),False,,NULL
3,AsyncBoxView,5,void setMinorAxis(int axis),False,,NULL
4,BoxView,1,int getAxis(),True,,"

getAxis
public int getAxis()
Fetches the tile axis property.  This is the axis along which
 the child views are tiled.

Returns:
the major axis of the box, either
  View.X_AXIS or View.Y_AXIS
Since:
1.3


"
4,BoxView,2,void setAxis(int axis),True,,"

setAxis
public void setAxis(int axis)
Sets the tile axis property.  This is the axis along which
 the child views are tiled.

Parameters:
axis - either View.X_AXIS or View.Y_AXIS
Since:
1.3


"
4,BoxView,3,int getViewCount(),False,,NULL
4,BoxView,4,View getView(int n),False,,NULL
4,BoxView,5,"void layout(int width, int height)",True,,"

layout
protected void layout(int width,
                      int height)
Perform layout on the box

Parameters:
width - the width (inside of the insets) >= 0
height - the height (inside of the insets) >= 0


"
5,ComponentView,1,ComponentView(Element elem),False,,NULL
5,ComponentView,2,"void paint(Graphics g, Shape allocation)",True,,"

paint
public void paint(Graphics g,
                  Shape a)
The real paint behavior occurs naturally from the association
 that the component has with its parent container (the same
 container hosting this view).  This is implemented to do nothing.

Specified by:
paint in class View
Parameters:
g - the graphics context
a - the shape
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
5,ComponentView,3,float getPreferredSpan(int axis),True,,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.  This is implemented to return the value
 returned by Component.getPreferredSize along the
 axis of interest.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >=0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
5,ComponentView,4,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the coordinate space of the model to
 that of the view.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >=0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position is returned
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
5,ComponentView,5,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >=0
y - the Y coordinate >=0
a - the allocated region to render into
Returns:
the location within the model that best represents
    the given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
6,CompositeView,1,int getViewCount(),True,,"

getViewCount
public int getViewCount()
Returns the number of child views of this view.

Overrides:
getViewCount in class View
Returns:
the number of views >= 0
See Also:
getView(int)


"
6,CompositeView,2,View getView(int n),True,,"

getView
public View getView(int n)
Returns the n-th view in this container.

Overrides:
getView in class View
Parameters:
n - the number of the desired view, >= 0 && < getViewCount()
Returns:
the view at index n


"
6,CompositeView,3,"void replace(int offset, int length, View[] views)",True,,"

replace
public void replace(int offset,
                    int length,
                    View[] views)
Replaces child views.  If there are no views to remove
 this acts as an insert.  If there are no views to
 add this acts as a remove.  Views being removed will
 have the parent set to null,
 and the internal reference to them removed so that they
 may be garbage collected.

Overrides:
replace in class View
Parameters:
offset - the starting index into the child views to insert
   the new views; >= 0 and <= getViewCount
length - the number of existing child views to remove;
   this should be a value >= 0 and <= (getViewCount() - offset)
views - the child views to add; this value can be
  null
   to indicate no children are being added (useful to remove)


"
6,CompositeView,4,"void insert(int offset, View[] views)",False,,NULL
6,CompositeView,5,"void remove(int offset, int length)",False,,NULL
7,DateFormatter,1,void setFormat(DateFormat format),True,,"

setFormat
public void setFormat(DateFormat format)
Sets the format that dictates the legal values that can be edited
 and displayed.
 
 If you have used the nullary constructor the value of this property
 will be determined for the current locale by way of the
 Dateformat.getDateInstance() method.

Parameters:
format - DateFormat instance used for converting from/to Strings


"
7,DateFormatter,2,DateFormat getFormat(),False,,NULL
7,DateFormatter,3,void setAllowsInvalid(boolean allowsInvalid),False,,NULL
7,DateFormatter,4,boolean getAllowsInvalid(),False,,NULL
7,DateFormatter,5,void setOverwriteMode(boolean overwriteMode),False,,NULL
8,DefaultCaret,1,void setBlinkRate(int rate),True,,"

setBlinkRate
public void setBlinkRate(int rate)
Sets the caret blink rate.

Specified by:
setBlinkRate in interface Caret
Parameters:
rate - the rate in milliseconds, 0 to stop blinking
See Also:
Caret.setBlinkRate(int)


"
8,DefaultCaret,2,void setSelectionVisible(boolean v),True,,"

setSelectionVisible
public void setSelectionVisible(boolean vis)
Changes the selection visibility.

Specified by:
setSelectionVisible in interface Caret
Parameters:
vis - the new visibility


"
8,DefaultCaret,3,void setUpdatePolicy(int policy),True,,"

setUpdatePolicy
public void setUpdatePolicy(int policy)
Sets the caret movement policy on the document updates. Normally
 the caret updates its absolute position within the document on
 insertions occurred before or at the caret position and
 on removals before the caret position. 'Absolute position'
 means here the position relative to the start of the document.
 For example if
 a character is typed within editable text component it is inserted
 at the caret position and the caret moves to the next absolute
 position within the document due to insertion and if
 BACKSPACE is typed then caret decreases its absolute
 position due to removal of a character before it. Sometimes
 it may be useful to turn off the caret position updates so that
 the caret stays at the same absolute position within the
 document position regardless of any document updates.
 
 The following update policies are allowed:
 
NEVER_UPDATE: the caret stays at the same
       absolute position in the document regardless of any document
       updates, except when document length becomes less than
       the current caret position due to removal. In that case caret
       position is adjusted to the end of the document.
       The caret doesn't try to keep itself visible by scrolling
       the associated view when using this policy. 
ALWAYS_UPDATE: the caret always tracks document
       changes. For regular changes it increases its position
       if an insertion occurs before or at its current position,
       and decreases position if a removal occurs before
       its current position. For undo/redo updates it is always
       moved to the position where update occurred. The caret
       also tries to keep itself visible by calling
       adjustVisibility method.
UPDATE_WHEN_ON_EDT: acts like ALWAYS_UPDATE
       if the document updates are performed on the Event Dispatching Thread
       and like NEVER_UPDATE if updates are performed on
       other thread. 
 
 The default property value is UPDATE_WHEN_ON_EDT.

Parameters:
policy - one of the following values : UPDATE_WHEN_ON_EDT,
 NEVER_UPDATE, ALWAYS_UPDATE
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
getUpdatePolicy(), 
adjustVisibility(java.awt.Rectangle), 
UPDATE_WHEN_ON_EDT, 
NEVER_UPDATE, 
ALWAYS_UPDATE


"
8,DefaultCaret,4,void setVisible(boolean v),True,,"

setVisible
public void setVisible(boolean e)
Sets the caret visibility, and repaints the caret.
 It is important to understand the relationship between this method,
 isVisible and isActive.
 Calling this method with a value of true activates the
 caret blinking. Setting it to false turns it completely off.
 To determine whether the blinking is active, you should call
 isActive. In effect, isActive is an
 appropriate corresponding ""getter"" method for this one.
 isVisible can be used to fetch the current
 visibility status of the caret, meaning whether or not it is currently
 painted. This status will change as the caret blinks on and off.
 
 Here's a list showing the potential return values of both
 isActive and isVisible
 after calling this method:
 
setVisible(true):
 
isActive(): true
isVisible(): true or false depending on whether
         or not the caret is blinked on or off


setVisible(false):
 
isActive(): false
isVisible(): false


Specified by:
setVisible in interface Caret
Parameters:
e - the visibility specifier
See Also:
isActive(), 
Caret.setVisible(boolean)


"
8,DefaultCaret,5,void setDot(int dot),True,,"

setDot
public void setDot(int dot)
Sets the caret position and mark to the specified position,
 with a forward bias. This implicitly sets the
 selection range to zero.

Specified by:
setDot in interface Caret
Parameters:
dot - the position >= 0
See Also:
setDot(int, Position.Bias), 
Caret.setDot(int)


"
9,DefaultEditorKit,1,void cut(),False,,NULL
9,DefaultEditorKit,2,void copy(),False,,NULL
9,DefaultEditorKit,3,void paste(),False,,NULL
9,DefaultEditorKit,4,void selectAll(),False,,NULL
9,DefaultEditorKit,5,"void write(Writer out, Document doc, int pos, int len)",True,,"

write
public void write(Writer out,
                  Document doc,
                  int pos,
                  int len)
           throws IOException,
                  BadLocationException
Writes content from a document to the given stream
 as plain text.

Specified by:
write in class EditorKit
Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content from >=0.
len - The amount to write out >=0.
Throws:
IOException - on any I/O error
BadLocationException - if pos is not within 0 and
   the length of the document.


"
10,DefaultEditorKit.BeepAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
10,DefaultEditorKit.BeepAction,2,BeepAction(DefaultEditorKit kit),False,,NULL
10,DefaultEditorKit.BeepAction,3,void beep(),False,,NULL
10,DefaultEditorKit.BeepAction,4,Object getValue(String key),False,,NULL
10,DefaultEditorKit.BeepAction,5,"void putValue(String key, Object value)",False,,NULL
11,DefaultEditorKit.CopyAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
11,DefaultEditorKit.CopyAction,2,String getActionCommand(),False,,NULL
11,DefaultEditorKit.CopyAction,3,void setEnabled(boolean enabled),False,,NULL
11,DefaultEditorKit.CopyAction,4,void setAccelerator(KeyStroke key),False,,NULL
11,DefaultEditorKit.CopyAction,5,"void putValue(String key, Object value)",False,,NULL
12,DefaultEditorKit.CutAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
12,DefaultEditorKit.CutAction,2,String getActionCommand(),False,,NULL
12,DefaultEditorKit.CutAction,3,void setEnabled(boolean enabled),False,,NULL
12,DefaultEditorKit.CutAction,4,void setAccelerator(KeyStroke key),False,,NULL
12,DefaultEditorKit.CutAction,5,void setPopupAllowed(boolean popupAllowed),False,,NULL
13,DefaultEditorKit.DefaultKeyTypedAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
13,DefaultEditorKit.DefaultKeyTypedAction,2,Action createContextualMenuAction(JTextComponent textComponent),False,,NULL
13,DefaultEditorKit.DefaultKeyTypedAction,3,"void insertContent(JTextComponent textComponent, int offset, String content)",False,,NULL
13,DefaultEditorKit.DefaultKeyTypedAction,4,"void read(Reader in, Document doc, int pos)",False,,NULL
13,DefaultEditorKit.DefaultKeyTypedAction,5,"void write(Writer out, Document doc, int pos, int len)",False,,NULL
14,DefaultEditorKit.InsertBreakAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
14,DefaultEditorKit.InsertBreakAction,2,String toString(),False,,NULL
14,DefaultEditorKit.InsertBreakAction,3,boolean isEnabled(),False,,NULL
14,DefaultEditorKit.InsertBreakAction,4,void setEnabled(boolean enabled),False,,NULL
14,DefaultEditorKit.InsertBreakAction,5,void setLineBefore(boolean lineBefore),False,,NULL
15,DefaultEditorKit.InsertContentAction,1,"void insertText(JTextComponent textComponent, Document doc, int offset, String text)",False,,NULL
15,DefaultEditorKit.InsertContentAction,2,"void read(Reader in, Document doc, int pos)",False,,NULL
15,DefaultEditorKit.InsertContentAction,3,"void write(Writer out, Document doc, int pos, int len)",False,,NULL
15,DefaultEditorKit.InsertContentAction,4,void setContentType(String type),False,,NULL
15,DefaultEditorKit.InsertContentAction,5,"void read(InputStream in, Document doc, int pos)",False,,NULL
17,DefaultEditorKit.PasteAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
The operation to perform when this action is triggered.

Parameters:
e - the action event


"
17,DefaultEditorKit.PasteAction,2,boolean isEnabled(),False,,NULL
17,DefaultEditorKit.PasteAction,3,void setEnabled(boolean enabled),False,,NULL
17,DefaultEditorKit.PasteAction,4,void setPasteAction(DefaultEditorKit.PasteAction pasteAction),False,,NULL
17,DefaultEditorKit.PasteAction,5,"void setPasteAction(DefaultEditorKit.PasteAction pasteAction, JTextComponent textComponent)",False,,NULL
18,DefaultFormatter,1,Object stringToValue(String text),True,,"

stringToValue
public Object stringToValue(String string)
                     throws ParseException
Converts the passed in String into an instance of
 getValueClass by way of the constructor that
 takes a String argument. If getValueClass
 returns null, the Class of the current value in the
 JFormattedTextField will be used. If this is null, a
 String will be returned. If the constructor throws an exception, a
 ParseException will be thrown. If there is no single
 argument String constructor, string will be returned.

Specified by:
stringToValue in class JFormattedTextField.AbstractFormatter
Parameters:
string - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
18,DefaultFormatter,2,String valueToString(Object value),True,,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Converts the passed in Object into a String by way of the
 toString method.

Specified by:
valueToString in class JFormattedTextField.AbstractFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
18,DefaultFormatter,3,void install(JFormattedTextField ftf),True,,"

install
public void install(JFormattedTextField ftf)
Installs the DefaultFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.

Overrides:
install in class JFormattedTextField.AbstractFormatter
Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
18,DefaultFormatter,4,void uninstall(),False,,NULL
18,DefaultFormatter,5,void setAllowsInvalid(boolean allowsInvalid),True,,"

setAllowsInvalid
public void setAllowsInvalid(boolean allowsInvalid)
Sets whether or not the value being edited is allowed to be invalid
 for a length of time (that is, stringToValue throws
 a ParseException).
 It is often convenient to allow the user to temporarily input an
 invalid value.

Parameters:
allowsInvalid - Used to indicate if the edited value must always
        be valid


"
19,DefaultFormatterFactory,1,JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField f),True,,"

getFormatter
public JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField source)
Returns either the default formatter, display formatter, editor
 formatter or null formatter based on the state of the
 JFormattedTextField.

Specified by:
getFormatter in class JFormattedTextField.AbstractFormatterFactory
Parameters:
source - JFormattedTextField requesting
               JFormattedTextField.AbstractFormatter
Returns:
JFormattedTextField.AbstractFormatter to handle
         formatting duties.


"
19,DefaultFormatterFactory,2,"JFormattedTextField.AbstractFormatter getFormatter(AbstractFormatterFactory factory, JFormattedTextField.AbstractFormatter formatter)",False,,NULL
19,DefaultFormatterFactory,3,JFormattedTextField.AbstractFormatter getFirstFormatter(JFormattedTextField f),False,,NULL
19,DefaultFormatterFactory,4,void setDefaultFormatter(AbstractFormatter defaultFormatter),False,,NULL
19,DefaultFormatterFactory,5,void setDisplayFormatter(AbstractFormatter displayFormatter),False,,NULL
20,DefaultHighlighter,1,void setDrawsLayeredHighlights(boolean newValue),True,,"

setDrawsLayeredHighlights
public void setDrawsLayeredHighlights(boolean newValue)
If true, highlights are drawn as the Views draw the text. That is
 the Views will call into paintLayeredHighlight which
 will result in a rectangle being drawn before the text is drawn
 (if the offsets are in a highlighted region that is). For this to
 work the painter supplied must be an instance of
 LayeredHighlightPainter.

"
20,DefaultHighlighter,2,void setDrawsVirtualSpace(boolean newValue),False,,NULL
20,DefaultHighlighter,3,void setRollover(boolean newValue),False,,NULL
20,DefaultHighlighter,4,void setUseColor(boolean newValue),False,,NULL
20,DefaultHighlighter,5,void setUseRoundedEdges(boolean newValue),False,,NULL
21,DefaultHighlighter.DefaultHighlightPainter,1,Color getColor(),True,,"

getColor
public Color getColor()
Returns the color of the highlight.

Returns:
the color


"
21,DefaultHighlighter.DefaultHighlightPainter,2,"Shape paintLayer(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, View view)",True,,"

paintLayer
public Shape paintLayer(Graphics g,
                        int offs0,
                        int offs1,
                        Shape bounds,
                        JTextComponent c,
                        View view)
Paints a portion of a highlight.

Specified by:
paintLayer in class LayeredHighlighter.LayerPainter
Parameters:
g - the graphics context
offs0 - the starting model offset >= 0
offs1 - the ending model offset >= offs1
bounds - the bounding box of the view, which is not
        necessarily the region to paint.
c - the editor
view - View painting for
Returns:
region drawing occurred in


"
21,DefaultHighlighter.DefaultHighlightPainter,3,"void paint(Graphics g, int p0, int p1, Shape bounds, JTextComponent c)",True,,"

paint
public void paint(Graphics g,
                  int offs0,
                  int offs1,
                  Shape bounds,
                  JTextComponent c)
Paints a highlight.

Parameters:
g - the graphics context
offs0 - the starting model offset >= 0
offs1 - the ending model offset >= offs1
bounds - the bounding box for the highlight
c - the editor


"
21,DefaultHighlighter.DefaultHighlightPainter,4,"void setPosition(int p0, int p1)",False,,NULL
21,DefaultHighlighter.DefaultHighlightPainter,5,void updateGraphics(Graphics g),False,,NULL
22,DefaultStyledDocument,1,"void insertString(int offset, String str, AttributeSet a)",False,,NULL
22,DefaultStyledDocument,2,"void remove(int offs, int len)",False,,NULL
22,DefaultStyledDocument,3,Element getCharacterElement(int pos),True,,"

getCharacterElement
public Element getCharacterElement(int pos)
Gets a character element based on a position.

Specified by:
getCharacterElement in interface StyledDocument
Parameters:
pos - the position in the document >= 0
Returns:
the element


"
22,DefaultStyledDocument,4,Element getParagraphElement(int pos),True,,"

getParagraphElement
public Element getParagraphElement(int pos)
Gets the paragraph element at the offset pos.
 A paragraph consists of at least one child Element, which is usually
 a leaf.

Specified by:
getParagraphElement in interface StyledDocument
Specified by:
getParagraphElement in class AbstractDocument
Parameters:
pos - the starting offset >= 0
Returns:
the element


"
22,DefaultStyledDocument,5,"Style addStyle(String nm, Style parent)",True,,"

addStyle
public Style addStyle(String nm,
                      Style parent)
Adds a new style into the logical style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

Specified by:
addStyle in interface StyledDocument
Parameters:
nm - the name of the style (must be unique within the
   collection of named styles).  The name may be null if the style
   is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style
   run.
parent - the parent style.  This may be null if unspecified
   attributes need not be resolved in some other style.
Returns:
the style


"
23,DefaultStyledDocument.AttributeUndoableEdit,1,void setAttributes(AttributeSet aset),False,,NULL
23,DefaultStyledDocument.AttributeUndoableEdit,2,AttributeSet getAttributes(),False,,NULL
23,DefaultStyledDocument.AttributeUndoableEdit,3,void redo(),True,,"

redo
public void redo()
          throws CannotRedoException
Redoes a change.

Specified by:
redo in interface UndoableEdit
Overrides:
redo in class AbstractUndoableEdit
Throws:
CannotRedoException - if the change cannot be redone
See Also:
AbstractUndoableEdit.canRedo()


"
23,DefaultStyledDocument.AttributeUndoableEdit,4,void undo(),True,,"

undo
public void undo()
          throws CannotUndoException
Undoes a change.

Specified by:
undo in interface UndoableEdit
Overrides:
undo in class AbstractUndoableEdit
Throws:
CannotUndoException - if the change cannot be undone
See Also:
AbstractUndoableEdit.canUndo()


"
23,DefaultStyledDocument.AttributeUndoableEdit,5,boolean canRedo(),False,,NULL
24,DefaultStyledDocument.ElementSpec,1,javax.swing.text.DefaultStyledDocument.ElementSpec[] getSpecs(),False,,NULL
24,DefaultStyledDocument.ElementSpec,2,int getLength(),True,,"

getLength
public int getLength()
Gets the length.

Returns:
the length >= 0


"
24,DefaultStyledDocument.ElementSpec,3,"void insert(int index, javax.swing.text.DefaultStyledDocument.ElementSpec spec)",False,,NULL
24,DefaultStyledDocument.ElementSpec,4,void remove(int index),False,,NULL
24,DefaultStyledDocument.ElementSpec,5,void setSpecs(javax.swing.text.DefaultStyledDocument.ElementSpec[] specs),False,,NULL
25,DefaultTextUI,1,void installUI(JComponent c),False,,NULL
25,DefaultTextUI,2,void uninstallUI(JComponent c),False,,NULL
25,DefaultTextUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
25,DefaultTextUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
25,DefaultTextUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
26,DocumentFilter,1,"void insertString(FilterBypass fb, int offset, String string, AttributeSet attr)",False,,NULL
26,DocumentFilter,2,"void remove(FilterBypass fb, int offset, int length)",False,,NULL
26,DocumentFilter,3,"void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)",False,,NULL
26,DocumentFilter,4,"void setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",False,,NULL
26,DocumentFilter,5,"void moveDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",False,,NULL
27,DocumentFilter.FilterBypass,1,"void insertString(int offset, String string, AttributeSet attr)",True,,"

insertString
public abstract void insertString(int offset,
                                  String string,
                                  AttributeSet attr)
                           throws BadLocationException
Inserts the specified text, bypassing the
 DocumentFilter.

Parameters:
offset - the offset into the document to insert the
   content >= 0. All positions that track change at or after the
   given location will move.
string - the string to insert
attr - the attributes to associate with the inserted
   content.  This may be null if there are no attributes.
Throws:
BadLocationException - the given insert position is not a
   valid position within the document


"
27,DocumentFilter.FilterBypass,2,"void remove(int offset, int length)",True,,"

remove
public abstract void remove(int offset,
                            int length)
                     throws BadLocationException
Removes the specified region of text, bypassing the
 DocumentFilter.

Parameters:
offset - the offset from the beginning >= 0
length - the number of characters to remove >= 0
Throws:
BadLocationException - some portion of the removal range
   was not a valid part of the document.  The location in the
   exception is the first bad position encountered.


"
27,DocumentFilter.FilterBypass,3,"void replace(int offset, int length, String text, AttributeSet attrs)",True,,"

replace
public abstract void replace(int offset,
                             int length,
                             String string,
                             AttributeSet attrs)
                      throws BadLocationException
Deletes the region of text from offset to
 offset + length, and replaces it with
  text.

Parameters:
offset - Location in Document
length - Length of text to delete
string - Text to insert, null indicates no text to insert
attrs - AttributeSet indicating attributes of inserted text,
              null is legal.
Throws:
BadLocationException - the given insert is not a
   valid position within the document


"
27,DocumentFilter.FilterBypass,4,Document getDocument(),True,,"

getDocument
public abstract Document getDocument()
Returns the Document the mutation is occurring on.

Returns:
Document that remove/insertString will operate on


"
27,DocumentFilter.FilterBypass,5,void remove(DocumentFilter.FilterBypass fb),False,,NULL
28,EditorKit,1,Document createDefaultDocument(),True,,"

createDefaultDocument
public abstract Document createDefaultDocument()
Creates an uninitialized text storage model
 that is appropriate for this type of editor.

Returns:
the model


"
28,EditorKit,2,"void read(Reader in, Document doc, int pos)",True,,"

read
public abstract void read(Reader in,
                          Document doc,
                          int pos)
                   throws IOException,
                          BadLocationException
Inserts content from the given stream which is expected
 to be in a format appropriate for this kind of content
 handler.
 
 Since actual text editing is unicode based, this would
 generally be the preferred way to read in the data.
 Some types of content are stored in an 8-bit form however,
 and will favor the InputStream.

Parameters:
in - The stream to read from
doc - The destination for the insertion.
pos - The location in the document to place the
   content >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
28,EditorKit,3,"void write(Writer out, Document doc, int pos, int len)",True,,"

write
public abstract void write(Writer out,
                           Document doc,
                           int pos,
                           int len)
                    throws IOException,
                           BadLocationException
Writes content from a document to the given stream
 in a format appropriate for this kind of content handler.
 
 Since actual text editing is unicode based, this would
 generally be the preferred way to write the data.
 Some types of content are stored in an 8-bit form however,
 and will favor the OutputStream.

Parameters:
out - The stream to write to
doc - The source for the write.
pos - The location in the document to fetch the
   content >= 0.
len - The amount to write out >= 0.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document.


"
28,EditorKit,4,"void insertUpdate(DocumentEvent e, AttributeSet attr)",False,,NULL
28,EditorKit,5,void removeUpdate(DocumentEvent e),False,,NULL
29,ElementIterator,1,ElementIterator(javax.swing.text.Element root),False,,NULL
29,ElementIterator,2,javax.swing.text.Element next(),False,,NULL
29,ElementIterator,3,boolean isLeaf(),False,,NULL
29,ElementIterator,4,int depth(),True,,"

depth
public int depth()
Fetches the current depth of element tree.

Returns:
the depth.


"
29,ElementIterator,5,void setDepth(int depth),False,,NULL
30,FieldView,1,int getStartOffset(),False,,NULL
30,FieldView,2,int getEndOffset(),False,,NULL
30,FieldView,3,float getPreferredSpan(int axis),True,,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Overrides:
getPreferredSpan in class PlainView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
See Also:
View.getPreferredSpan(int)


"
30,FieldView,4,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Overrides:
modelToView in class PlainView
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
30,FieldView,5,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public int viewToModel(float fx,
                       float fy,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Overrides:
viewToModel in class PlainView
Parameters:
fx - the X coordinate >= 0.0f
fy - the Y coordinate >= 0.0f
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
31,FlowView,1,int getFlowSpan(int index),True,,"

getFlowSpan
public int getFlowSpan(int index)
Fetch the constraining span to flow against for
 the given child index.  This is called by the
 FlowStrategy while it is updating the flow.
 A flow can be shaped by providing different values
 for the row constraints.  By default, the entire
 span inside of the insets along the flow axis
 is returned.

Parameters:
index - the index of the row being updated.
   This should be a value >= 0 and < getViewCount().
See Also:
getFlowStart(int)


"
31,FlowView,2,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",False,,NULL
31,FlowView,3,"void insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
31,FlowView,4,"void removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
31,FlowView,5,"void changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
32,FlowView.FlowStrategy,1,void insertUpdate(DocumentEvent e),False,,NULL
32,FlowView.FlowStrategy,2,void removeUpdate(DocumentEvent e),False,,NULL
32,FlowView.FlowStrategy,3,void changedUpdate(DocumentEvent e),False,,NULL
32,FlowView.FlowStrategy,4,void updateAppearance(JTextComponent text),False,,NULL
32,FlowView.FlowStrategy,5,"void updateFlow(JTextComponent text, int width, int height)",False,,NULL
33,GapContent,1,int length(),True,,"

length
public int length()
Returns the length of the content.

Specified by:
length in interface AbstractDocument.Content
Returns:
the length >= 1
See Also:
AbstractDocument.Content.length()


"
33,GapContent,2,"String getString(int where, int len)",True,,"

getString
public String getString(int where,
                        int len)
                 throws BadLocationException
Retrieves a portion of the content.

Specified by:
getString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
len - the length to retrieve >= 0
Returns:
a string representing the content
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getString(int, int)


"
33,GapContent,3,"void insertString(int where, String str)",False,,NULL
33,GapContent,4,"void remove(int where, int nitems)",False,,NULL
33,GapContent,5,"void replace(int where, int nitems, Object[] items)",False,,NULL
34,GlyphView,1,int getStartOffset(),True,,"

getStartOffset
public int getStartOffset()
Fetches the portion of the model that this view is responsible for.

Overrides:
getStartOffset in class View
Returns:
the starting offset into the model
See Also:
View.getStartOffset()


"
34,GlyphView,2,int getEndOffset(),True,,"

getEndOffset
public int getEndOffset()
Fetches the portion of the model that this view is responsible for.

Overrides:
getEndOffset in class View
Returns:
the ending offset into the model
See Also:
View.getEndOffset()


"
34,GlyphView,3,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - either Position.Bias.Forward
                or Position.Bias.Backward
Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not represent a
   valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
34,GlyphView,4,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region to render into
biasReturn - either Position.Bias.Forward
  or Position.Bias.Backward is returned as the
  zero-th element of this array
Returns:
the location within the model that best represents the
  given point of view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
34,GlyphView,5,"void paint(Graphics g, Shape allocation)",True,,"

paint
public void paint(Graphics g,
                  Shape a)
Renders a portion of a text style run.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
a - the allocated region to render into


"
35,GlyphView.GlyphPainter,1,"Shape modelToView(int pos, Shape a, Position.Bias b)",False,,NULL
35,GlyphView.GlyphPainter,2,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",False,,NULL
35,GlyphView.GlyphPainter,3,"void paint(GlyphView v, Graphics g, Shape a, int p0, int p1)",True,,"

paint
public abstract void paint(GlyphView v,
                           Graphics g,
                           Shape a,
                           int p0,
                           int p1)
Paint the glyphs representing the given range.

"
35,GlyphView.GlyphPainter,4,"void modelToView(GlyphView v, int pos, Position.Bias bias, Shape a)",False,,NULL
35,GlyphView.GlyphPainter,5,"int getBoundedPosition(GlyphView v, int p0, float x, float len)",True,,"

getBoundedPosition
public abstract int getBoundedPosition(GlyphView v,
                                       int p0,
                                       float x,
                                       float len)
Determines the model location that represents the
 maximum advance that fits within the given span.
 This could be used to break the given view.  The result
 should be a location just shy of the given advance.  This
 differs from viewToModel which returns the closest
 position which might be proud of the maximum advance.

Parameters:
v - the view to find the model location to break at.
p0 - the location in the model where the
  fragment should start it's representation >= 0.
x - the graphic location along the axis that the
  broken view would occupy >= 0.  This may be useful for
  things like tab calculations.
len - specifies the distance into the view
  where a potential break is desired >= 0.
Returns:
the maximum model location possible for a break.
See Also:
View.breakView(int, int, float, float)


"
36,IconView,1,IconView(Element elem),False,,NULL
36,IconView,2,void setParent(View parent),False,,NULL
36,IconView,3,float getPreferredSpan(int axis),True,,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
36,IconView,4,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
36,IconView,5,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point of view >= 0
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
37,InternationalFormatter,1,Object stringToValue(String text),True,,"

stringToValue
public Object stringToValue(String text)
                     throws ParseException
Returns the Object representation of the
 String text.

Overrides:
stringToValue in class DefaultFormatter
Parameters:
text - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
37,InternationalFormatter,2,String valueToString(Object value),True,,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Returns a String representation of the Object value.
 This invokes format on the current Format.

Overrides:
valueToString in class DefaultFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
37,InternationalFormatter,3,void setFormat(java.text.Format format),False,,NULL
37,InternationalFormatter,4,void setAllowsInvalid(boolean allowsInvalid),False,,NULL
37,InternationalFormatter,5,void setCommitsOnValidEdit(boolean commitsOnValidEdit),False,,NULL
38,JTextComponent,1,void setEditable(boolean editable),True,,"

setEditable
public void setEditable(boolean b)
Sets the specified boolean to indicate whether or not this
 TextComponent should be editable.
 A PropertyChange event (""editable"") is fired when the
 state is changed.

Parameters:
b - the boolean to be set
See Also:
isEditable()


"
38,JTextComponent,2,void setText(String text),True,,"

setText
public void setText(String t)
Sets the text of this TextComponent
 to the specified text.  If the text is null
 or empty, has the effect of simply deleting the old text.
 When text has been inserted, the resulting caret location
 is determined by the implementation of the caret class.

 
 Note that text is not a bound property, so no PropertyChangeEvent
  is fired when it changes. To listen for changes to the text,
 use DocumentListener.

Parameters:
t - the new text to be set
See Also:
getText(int, int), 
DefaultCaret


"
38,JTextComponent,3,String getText(),True,,"

getText
public String getText()
Returns the text contained in this TextComponent.
 If the underlying document is null,
 will give a NullPointerException.

 Note that text is not a bound property, so no PropertyChangeEvent
  is fired when it changes. To listen for changes to the text,
 use DocumentListener.

Returns:
the text
Throws:
NullPointerException - if the document is null
See Also:
setText(java.lang.String)


"
38,JTextComponent,4,void setCaretPosition(int position),True,,"

setCaretPosition
public void setCaretPosition(int position)
Sets the position of the text insertion caret for the
 TextComponent.  Note that the caret tracks change,
 so this may move if the underlying text of the component is changed.
 If the document is null, does nothing. The position
 must be between 0 and the length of the component's text or else
 an exception is thrown.

Parameters:
position - the position
Throws:
IllegalArgumentException - if the value supplied
               for position is less than zero or greater
               than the component's text length


"
38,JTextComponent,5,int getCaretPosition(),True,,"

getCaretPosition
public int getCaretPosition()
Returns the position of the text insertion caret for the
 text component.

Returns:
the position of the text insertion caret for the
  text component ≥ 0


"
39,JTextComponent.DropLocation,1,int getDropIndex(),False,,NULL
39,JTextComponent.DropLocation,2,boolean isInsert(),False,,NULL
39,JTextComponent.DropLocation,3,boolean isInsertRow(),False,,NULL
39,JTextComponent.DropLocation,4,boolean isNonRectangularShape(),False,,NULL
39,JTextComponent.DropLocation,5,Rectangle getDropPoint(),False,,NULL
40,JTextComponent.KeyBinding,1,KeyBinding[] getKeyBindings(),False,,NULL
40,JTextComponent.KeyBinding,2,void setKeyBindings(KeyBinding[] bindings),False,,NULL
40,JTextComponent.KeyBinding,3,void addKeyBinding(KeyBinding binding),False,,NULL
40,JTextComponent.KeyBinding,4,void removeKeyBinding(KeyBinding binding),False,,NULL
40,JTextComponent.KeyBinding,5,void clearKeyBindings(),False,,NULL
41,LabelView,1,int getStartOffset(),False,,NULL
41,LabelView,2,int getEndOffset(),False,,NULL
41,LabelView,3,float getPreferredSpan(int axis),False,,NULL
41,LabelView,4,void setPropertiesFromAttributes(),True,,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Sets the cached properties from the attributes.

"
41,LabelView,5,"void paint(Graphics g, Shape allocation)",False,,NULL
42,LayeredHighlighter,1,void install(JTextComponent c),False,,NULL
42,LayeredHighlighter,2,void deinstall(JTextComponent c),False,,NULL
42,LayeredHighlighter,3,Highlight[] getHighlights(),False,,NULL
42,LayeredHighlighter,4,"void paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)",True,,"

paintLayeredHighlights
public abstract void paintLayeredHighlights(Graphics g,
                                            int p0,
                                            int p1,
                                            Shape viewBounds,
                                            JTextComponent editor,
                                            View view)
When leaf Views (such as LabelView) are rendering they should
 call into this method. If a highlight is in the given region it will
 be drawn immediately.

Parameters:
g - Graphics used to draw
p0 - starting offset of view
p1 - ending offset of view
viewBounds - Bounds of View
editor - JTextComponent
view - View instance being rendered


"
42,LayeredHighlighter,5,void removeAllHighlights(),False,,NULL
43,LayeredHighlighter.LayerPainter,1,"Shape paintLayer(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, View view)",True,,"

paintLayer
public abstract Shape paintLayer(Graphics g,
                                 int p0,
                                 int p1,
                                 Shape viewBounds,
                                 JTextComponent editor,
                                 View view)

"
43,LayeredHighlighter.LayerPainter,2,"void paint(Graphics g, int p0, int p1, Shape bounds, JTextComponent c)",False,,NULL
43,LayeredHighlighter.LayerPainter,3,"Shape paintLayer(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, View view, int startOffset, int endOffset)",False,,NULL
43,LayeredHighlighter.LayerPainter,4,"void paint(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, int startOffset, int endOffset)",False,,NULL
43,LayeredHighlighter.LayerPainter,5,"Shape paintLayer(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, View view, int startOffset, int endOffset)",False,,NULL
44,LayoutQueue,1,void addTask(Runnable task),True,,"

addTask
public void addTask(Runnable task)
Add a task that is not needed immediately because
 the results are not believed to be visible.

"
44,LayoutQueue,2,Runnable getNextTask(),False,,NULL
44,LayoutQueue,3,int getTaskCount(),False,,NULL
44,LayoutQueue,4,boolean isEmpty(),False,,NULL
44,LayoutQueue,5,void clear(),False,,NULL
45,MaskFormatter,1,void setMask(String mask),True,,"

setMask
public void setMask(String mask)
             throws ParseException
Sets the mask dictating the legal characters.
 This will throw a ParseException if mask is
 not valid.

Throws:
ParseException - if mask does not contain valid mask characters


"
45,MaskFormatter,2,String getMask(),True,,"

getMask
public String getMask()
Returns the formatting mask.

Returns:
Mask dictating legal character values.


"
45,MaskFormatter,3,void setPlaceholderCharacter(char placeholder),True,,"

setPlaceholderCharacter
public void setPlaceholderCharacter(char placeholder)
Sets the character to use in place of characters that are not present
 in the value, ie the user must fill them in. The default value is
 a space.
 
 This is only applicable if the placeholder string has not been
 specified, or does not completely fill in the mask.

Parameters:
placeholder - Character used when formatting if the value does not
        completely fill the mask


"
45,MaskFormatter,4,char getPlaceholderCharacter(),True,,"

getPlaceholderCharacter
public char getPlaceholderCharacter()
Returns the character to use in place of characters that are not present
 in the value, ie the user must fill them in.

Returns:
Character used when formatting if the value does not
        completely fill the mask


"
45,MaskFormatter,5,String valueToString(Object value),True,,"

valueToString
public String valueToString(Object value)
                     throws ParseException
Returns a String representation of the Object value
 based on the mask.  Refer to
 setValueContainsLiteralCharacters(boolean) for details
 on how literals are treated.

Overrides:
valueToString in class DefaultFormatter
Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion
See Also:
setValueContainsLiteralCharacters(boolean)


"
46,NavigationFilter,1,"void setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",True,,"

setDot
public void setDot(NavigationFilter.FilterBypass fb,
                   int dot,
                   Position.Bias bias)
Invoked prior to the Caret setting the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary method
 on the FilterBypass

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias to place the dot at


"
46,NavigationFilter,2,"void moveDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",True,,"

moveDot
public void moveDot(NavigationFilter.FilterBypass fb,
                    int dot,
                    Position.Bias bias)
Invoked prior to the Caret moving the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary
 methods on the FilterBypass.

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias for new location


"
46,NavigationFilter,3,"int getNextVisualPositionFrom(JTextComponent text, int pos, Position.Bias bias, int direction, Position.Bias[] biasRet)",True,,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(JTextComponent text,
                                     int pos,
                                     Position.Bias bias,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Returns the next visual position to place the caret at from an
 existing position. The default implementation simply forwards the
 method to the root View. Subclasses may wish to further restrict the
 location based on additional criteria.

Parameters:
text - JTextComponent containing text
pos - Position used in determining next position
bias - Bias used in determining next position
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This will be one of the following values:
 
SwingConstants.WEST
 SwingConstants.EAST
 SwingConstants.NORTH
 SwingConstants.SOUTH
 
biasRet - Used to return resulting Bias of next position
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException
IllegalArgumentException - if direction
          doesn't have one of the legal values above


"
46,NavigationFilter,4,"void setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",True,,"

setDot
public void setDot(NavigationFilter.FilterBypass fb,
                   int dot,
                   Position.Bias bias)
Invoked prior to the Caret setting the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary method
 on the FilterBypass

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias to place the dot at


"
46,NavigationFilter,5,"void moveDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)",True,,"

moveDot
public void moveDot(NavigationFilter.FilterBypass fb,
                    int dot,
                    Position.Bias bias)
Invoked prior to the Caret moving the dot. The default implementation
 calls directly into the FilterBypass with the passed
 in arguments. Subclasses may wish to conditionally
 call super with a different location, or invoke the necessary
 methods on the FilterBypass.

Parameters:
fb - FilterBypass that can be used to mutate caret position
dot - the position >= 0
bias - Bias for new location


"
47,NavigationFilter.FilterBypass,1,"void setDot(int dot, Position.Bias bias)",True,,"

setDot
public abstract void setDot(int dot,
                            Position.Bias bias)
Sets the caret location, bypassing the NavigationFilter.

Parameters:
dot - the position >= 0
bias - Bias to place the dot at


"
47,NavigationFilter.FilterBypass,2,"void moveDot(int dot, Position.Bias bias)",True,,"

moveDot
public abstract void moveDot(int dot,
                             Position.Bias bias)
Moves the caret location, bypassing the NavigationFilter.

Parameters:
dot - the position >= 0
bias - Bias for new location


"
47,NavigationFilter.FilterBypass,3,void setDot(int dot),False,,NULL
47,NavigationFilter.FilterBypass,4,void moveDot(int dot),False,,NULL
47,NavigationFilter.FilterBypass,5,"void setDot(int dot, Position.Bias bias, int dotBias)",False,,NULL
48,NumberFormatter,1,void setMinimum(Number minimum),False,,NULL
48,NumberFormatter,2,void setMaximum(Number maximum),False,,NULL
48,NumberFormatter,3,void setValueClass(Class<?> valueClass),False,,NULL
48,NumberFormatter,4,void setAllowsInvalid(boolean allowsInvalid),False,,NULL
48,NumberFormatter,5,void setCommitsOnValidEdit(boolean commitsOnValidEdit),False,,NULL
49,ParagraphView,1,int getTabSize(),False,,NULL
49,ParagraphView,2,void setTabSize(int size),False,,NULL
49,ParagraphView,3,float getMinimumSpan(int axis),False,,NULL
49,ParagraphView,4,float getPreferredSpan(int axis),False,,NULL
49,ParagraphView,5,float getMaximumSpan(int axis),False,,NULL
50,PasswordView,1,"int getOffset(int x, int y)",False,,NULL
50,PasswordView,2,"int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)",False,,NULL
50,PasswordView,3,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Overrides:
modelToView in class FieldView
Parameters:
pos - the position to convert >= 0
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
50,PasswordView,4,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public int viewToModel(float fx,
                       float fy,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Overrides:
viewToModel in class FieldView
Parameters:
fx - the X coordinate >= 0.0f
fy - the Y coordinate >= 0.0f
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point in the view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
50,PasswordView,5,"void paint(Graphics g, Shape a)",False,,NULL
51,PlainDocument,1,"void insertString(int offset, String str, AttributeSet a)",True,,"

insertString
public void insertString(int offs,
                         String str,
                         AttributeSet a)
                  throws BadLocationException
Inserts some content into the document.
 Inserting content causes a write lock to be held while the
 actual changes are taking place, followed by notification
 to the observers on the thread that grabbed the write lock.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
insertString in interface Document
Overrides:
insertString in class AbstractDocument
Parameters:
offs - the starting offset >= 0
str - the string to insert; does nothing with null/empty strings
a - the attributes for the inserted content
Throws:
BadLocationException - the given insert position is not a valid
   position within the document
See Also:
Document.insertString(int, java.lang.String, javax.swing.text.AttributeSet)


"
51,PlainDocument,2,"void remove(int offs, int len)",False,,NULL
51,PlainDocument,3,"void replace(int offset, int length, String text, AttributeSet attrs)",False,,NULL
51,PlainDocument,4,Element getDefaultRootElement(),True,,"

getDefaultRootElement
public Element getDefaultRootElement()
Gets the default root element for the document model.

Specified by:
getDefaultRootElement in interface Document
Specified by:
getDefaultRootElement in class AbstractDocument
Returns:
the root
See Also:
Document.getDefaultRootElement()


"
51,PlainDocument,5,void setDocumentFilter(DocumentFilter filter),False,,NULL
52,PlainView,1,int getStartOffset(),False,,NULL
52,PlainView,2,int getEndOffset(),False,,NULL
52,PlainView,3,"void insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
52,PlainView,4,"void removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
52,PlainView,5,"void changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
53,Position.Bias,1,boolean isForward(),False,,NULL
53,Position.Bias,2,boolean isBackward(),False,,NULL
53,Position.Bias,3,Position.Bias forward(),False,,NULL
53,Position.Bias,4,Position.Bias backward(),False,,NULL
53,Position.Bias,5,String toString(),True,,"

toString
public String toString()
string representation

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
54,Segment,1,char charAt(int index),True,,"

charAt
public char charAt(int index)
Returns the char value at the specified index.  An index ranges from zero
 to length() - 1.  The first char value of the sequence is at
 index zero, the next at index one, and so on, as for array
 indexing.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the char value to be returned
Returns:
the specified char value
Since:
1.6


"
54,Segment,2,int count,False,,NULL
54,Segment,3,char[] array,False,,NULL
54,Segment,4,String toString(),True,,"

toString
public String toString()
Converts a segment into a String.

Specified by:
toString in interface CharSequence
Overrides:
toString in class Object
Returns:
the string


"
54,Segment,5,void setPartialReturn(boolean p),True,,"

setPartialReturn
public void setPartialReturn(boolean p)
Flag to indicate that partial returns are valid.  If the flag is true,
 an implementation of the interface method Document.getText(position,length,Segment)
 should return as much text as possible without making a copy.  The default
 state of the flag is false which will cause Document.getText(position,length,Segment)
 to provide the same return behavior it always had, which may or may not
 make a copy of the text depending upon the request.

Parameters:
p - whether or not partial returns are valid.
Since:
1.4


"
55,SimpleAttributeSet,1,"void addAttribute(Object name, Object value)",True,,"

addAttribute
public void addAttribute(Object name,
                         Object value)
Adds an attribute to the list.

Specified by:
addAttribute in interface MutableAttributeSet
Parameters:
name - the attribute name
value - the attribute value


"
55,SimpleAttributeSet,2,void removeAttribute(Object name),True,,"

removeAttribute
public void removeAttribute(Object name)
Removes an attribute from the list.

Specified by:
removeAttribute in interface MutableAttributeSet
Parameters:
name - the attribute name


"
55,SimpleAttributeSet,3,void setResolveParent(AttributeSet parent),True,,"

setResolveParent
public void setResolveParent(AttributeSet parent)
Sets the resolving parent.

Specified by:
setResolveParent in interface MutableAttributeSet
Parameters:
parent - the parent


"
55,SimpleAttributeSet,4,void addAttributes(AttributeSet attributes),True,,"

addAttributes
public void addAttributes(AttributeSet attributes)
Adds a set of attributes to the list.

Specified by:
addAttributes in interface MutableAttributeSet
Parameters:
attributes - the set of attributes to add


"
55,SimpleAttributeSet,5,void removeAttributes(Enumeration<?> names),True,,"

removeAttributes
public void removeAttributes(Enumeration<?> names)
Removes a set of attributes from the list.

Specified by:
removeAttributes in interface MutableAttributeSet
Parameters:
names - the set of names to remove


"
56,StringContent,1,int length(),True,,"

length
public int length()
Returns the length of the content.

Specified by:
length in interface AbstractDocument.Content
Returns:
the length >= 1
See Also:
AbstractDocument.Content.length()


"
56,StringContent,2,"String getString(int where, int len)",True,,"

getString
public String getString(int where,
                        int len)
                 throws BadLocationException
Retrieves a portion of the content.  where + len must be <= length().

Specified by:
getString in interface AbstractDocument.Content
Parameters:
where - the starting position >= 0
len - the length to retrieve >= 0
Returns:
a string representing the content; may be empty
Throws:
BadLocationException - if the specified position is invalid
See Also:
AbstractDocument.Content.getString(int, int)


"
56,StringContent,3,"void insertString(int where, String str)",False,,NULL
56,StringContent,4,"void remove(int where, int nitems)",False,,NULL
56,StringContent,5,"void replace(int where, int nitems, String[] strs)",False,,NULL
57,StyleConstants,1,"void setBold(MutableAttributeSet attr, boolean bold)",True,,"

setBold
public static void setBold(MutableAttributeSet a,
                           boolean b)
Sets the bold attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
57,StyleConstants,2,"void setItalic(MutableAttributeSet attr, boolean italic)",True,,"

setItalic
public static void setItalic(MutableAttributeSet a,
                             boolean b)
Sets the italic attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
57,StyleConstants,3,"void setUnderline(MutableAttributeSet attr, boolean underline)",True,,"

setUnderline
public static void setUnderline(MutableAttributeSet a,
                                boolean b)
Sets the underline attribute.

Parameters:
a - the attribute set
b - specifies true/false for setting the attribute


"
57,StyleConstants,4,"void setFontFamily(MutableAttributeSet attr, String family)",True,,"

setFontFamily
public static void setFontFamily(MutableAttributeSet a,
                                 String fam)
Sets the font attribute.

Parameters:
a - the attribute set
fam - the font


"
57,StyleConstants,5,"void setFontSize(MutableAttributeSet attr, int size)",True,,"

setFontSize
public static void setFontSize(MutableAttributeSet a,
                               int s)
Sets the font size attribute.

Parameters:
a - the attribute set
s - the font size


"
59,StyleConstants.ColorConstants,1,Color getColor(AttributeSet attr),False,,NULL
59,StyleConstants.ColorConstants,2,"void setColor(MutableAttributeSet attr, Color color)",False,,NULL
59,StyleConstants.ColorConstants,3,boolean isForeground(AttributeSet attr),False,,NULL
59,StyleConstants.ColorConstants,4,"void setForeground(MutableAttributeSet attr, Color color)",False,,NULL
59,StyleConstants.ColorConstants,5,boolean isBackground(AttributeSet attr),False,,NULL
60,StyleConstants.FontConstants,1,String getFamily(),False,,NULL
60,StyleConstants.FontConstants,2,int getSize(),False,,NULL
60,StyleConstants.FontConstants,3,boolean isBold(),False,,NULL
60,StyleConstants.FontConstants,4,boolean isItalic(),False,,NULL
60,StyleConstants.FontConstants,5,boolean isUnderline(),False,,NULL
63,StyledEditorKit,1,"void insertHTML(StyledDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)",False,,NULL
63,StyledEditorKit,2,"void setCharacterAttributes(JTextComponent c, AttributeSet attr, boolean replace)",False,,NULL
63,StyledEditorKit,3,"void setParagraphAttributes(JTextComponent c, AttributeSet attr, boolean replace)",False,,NULL
63,StyledEditorKit,4,"void write(Writer out, Document doc, int pos, int len)",False,,NULL
63,StyledEditorKit,5,"void read(Reader in, Document doc, int pos)",False,,NULL
64,StyledEditorKit.AlignmentAction,1,void setAlignment(int alignment),False,,NULL
64,StyledEditorKit.AlignmentAction,2,int getAlignment(),False,,NULL
64,StyledEditorKit.AlignmentAction,3,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the alignment.

Parameters:
e - the action event


"
64,StyledEditorKit.AlignmentAction,4,String toString(),False,,NULL
64,StyledEditorKit.AlignmentAction,5,boolean isEnabled(),False,,NULL
65,StyledEditorKit.BoldAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the bold attribute.

Parameters:
e - the action event


"
65,StyledEditorKit.BoldAction,2,boolean isEnabled(),False,,NULL
65,StyledEditorKit.BoldAction,3,void setEnabled(boolean enabled),False,,NULL
65,StyledEditorKit.BoldAction,4,void setFontFamily(String family),False,,NULL
65,StyledEditorKit.BoldAction,5,void setFontSize(int size),False,,NULL
66,StyledEditorKit.FontFamilyAction,1,String getFamily(),False,,NULL
66,StyledEditorKit.FontFamilyAction,2,void setFamily(String family),False,,NULL
66,StyledEditorKit.FontFamilyAction,3,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the font family.

Parameters:
e - the event


"
66,StyledEditorKit.FontFamilyAction,4,boolean isEnabled(),False,,NULL
66,StyledEditorKit.FontFamilyAction,5,void setEnabled(boolean enabled),False,,NULL
67,StyledEditorKit.FontSizeAction,1,int getFontSize(),False,,NULL
67,StyledEditorKit.FontSizeAction,2,void setFontSize(int size),False,,NULL
67,StyledEditorKit.FontSizeAction,3,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the font size.

Parameters:
e - the action event


"
67,StyledEditorKit.FontSizeAction,4,String toString(),False,,NULL
67,StyledEditorKit.FontSizeAction,5,boolean isEnabled(),False,,NULL
68,StyledEditorKit.ForegroundAction,1,void setForeground(Color fg),False,,NULL
68,StyledEditorKit.ForegroundAction,2,Color getForeground(),False,,NULL
68,StyledEditorKit.ForegroundAction,3,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Sets the foreground color.

Parameters:
e - the action event


"
68,StyledEditorKit.ForegroundAction,4,String toString(),False,,NULL
68,StyledEditorKit.ForegroundAction,5,boolean isEnabled(),False,,NULL
69,StyledEditorKit.ItalicAction,1,void setItalic(boolean italic),False,,NULL
69,StyledEditorKit.ItalicAction,2,boolean isItalic(),False,,NULL
69,StyledEditorKit.ItalicAction,3,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the italic attribute.

Parameters:
e - the action event


"
69,StyledEditorKit.ItalicAction,4,String getDescription(),False,,NULL
69,StyledEditorKit.ItalicAction,5,void setEnabled(boolean enabled),False,,NULL
71,StyledEditorKit.UnderlineAction,1,void actionPerformed(ActionEvent e),True,,"

actionPerformed
public void actionPerformed(ActionEvent e)
Toggles the Underline attribute.

Parameters:
e - the action event


"
71,StyledEditorKit.UnderlineAction,2,boolean isEnabled(),False,,NULL
71,StyledEditorKit.UnderlineAction,3,void setEnabled(boolean enabled),False,,NULL
71,StyledEditorKit.UnderlineAction,4,void setUnderline(boolean underline),False,,NULL
71,StyledEditorKit.UnderlineAction,5,boolean getUnderline(),False,,NULL
72,TableView,1,int getRowCount(),False,,NULL
72,TableView,2,int getColumnCount(),False,,NULL
72,TableView,3,"TableCellEditor getCellEditor(int row, int column)",False,,NULL
72,TableView,4,"void setValueAt(Object value, int row, int column)",False,,NULL
72,TableView,5,"TableCellRenderer getCellRenderer(int row, int column)",False,,NULL
73,TabSet,1,int getTabCount(),True,,"

getTabCount
public int getTabCount()
Returns the number of Tab instances the receiver contains.

"
73,TabSet,2,TabStop getTab(int index),True,,"

getTab
public TabStop getTab(int index)
Returns the TabStop at index index. This will throw an
 IllegalArgumentException if index is outside the range
 of tabs.

"
73,TabSet,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object o)
Indicates whether this TabSet is equal to another one.

Overrides:
equals in class Object
Parameters:
o - the TabSet instance which this instance
  should be compared to.
Returns:
true if o is the instance of
 TabSet, has the same number of TabStops
 and they are all equal, false otherwise.
Since:
1.5
See Also:
Object.hashCode(), 
HashMap


"
73,TabSet,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hashcode for this set of TabStops.

Overrides:
hashCode in class Object
Returns:
a hashcode value for this set of TabStops.
Since:
1.5
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
73,TabSet,5,String toString(),True,,"

toString
public String toString()
Returns the string representation of the set of tabs.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
74,TabStop,1,double getPosition(),False,,NULL
74,TabStop,2,int getAlignment(),True,,"

getAlignment
public int getAlignment()
Returns the alignment, as an integer, of the tab.

Returns:
the alignment of the tab


"
74,TabStop,3,int getLeader(),True,,"

getLeader
public int getLeader()
Returns the leader of the tab.

Returns:
the leader of the tab


"
74,TabStop,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object other)
Returns true if the tabs are equal.

Overrides:
equals in class Object
Parameters:
other - the reference object with which to compare.
Returns:
true if the tabs are equal, otherwise false
See Also:
Object.hashCode(), 
HashMap


"
74,TabStop,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
75,TextAction,1,void actionPerformed(ActionEvent e),False,,NULL
75,TextAction,2,"void insertContent(JTextComponent target, String content)",False,,NULL
75,TextAction,3,void removeContent(JTextComponent target),False,,NULL
75,TextAction,4,void selectAll(JTextComponent target),False,,NULL
75,TextAction,5,void setTextComponent(JTextComponent target),False,,NULL
76,Utilities,1,"int getTabbedTextOffset(int x, javax.swing.text.TabExpander e)",False,,NULL
76,Utilities,2,"int getRowStart(javax.swing.text.JTextComponent c, int offs)",False,,NULL
76,Utilities,3,"int getRowEnd(javax.swing.text.JTextComponent c, int offs)",False,,NULL
76,Utilities,4,"int getNextWord(javax.swing.text.JTextComponent c, int offs)",False,,NULL
76,Utilities,5,"int getPreviousWord(javax.swing.text.JTextComponent c, int offs)",False,,NULL
77,View,1,int getStartOffset(),True,,"

getStartOffset
public int getStartOffset()
Fetches the portion of the model for which this view is
 responsible.

Returns:
the starting offset into the model >= 0
See Also:
getStartOffset()


"
77,View,2,int getEndOffset(),True,,"

getEndOffset
public int getEndOffset()
Fetches the portion of the model for which this view is
 responsible.

Returns:
the ending offset into the model >= 0
See Also:
getEndOffset()


"
77,View,3,"Shape modelToView(int pos, Shape a, Position.Bias b)",True,,"

modelToView
public abstract Shape modelToView(int pos,
                                  Shape a,
                                  Position.Bias b)
                           throws BadLocationException
Provides a mapping, for a given character,
 from the document model coordinate space
 to the view coordinate space.

Parameters:
pos - the position of the desired character (>=0)
a - the area of the view, which encompasses the requested character
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box, in view coordinate space,
          of the character at the specified position
Throws:
BadLocationException - if the specified position does
   not represent a valid location in the associated document
IllegalArgumentException - if b is not one of the
          legal Position.Bias values listed above
See Also:
viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
77,View,4,"int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)",True,,"

viewToModel
public abstract int viewToModel(float x,
                                float y,
                                Shape a,
                                Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.  The biasReturn
 argument will be filled in to indicate that the point given is
 closer to the next character in the model or the previous
 character in the model.

Parameters:
x - the X coordinate >= 0
y - the Y coordinate >= 0
a - the allocated region in which to render
Returns:
the location within the model that best represents the
  given point in the view >= 0.  The biasReturn
  argument will be
 filled in to indicate that the point given is closer to the next
 character in the model or the previous character in the model.


"
77,View,5,"void paint(Graphics g, Shape allocation)",True,,"

paint
public abstract void paint(Graphics g,
                           Shape allocation)
Renders using the given rendering surface and area on that
 surface.  The view may need to do layout and create child
 views to enable itself to render into the given allocation.

Parameters:
g - the rendering surface to use
allocation - the allocated region to render into


"
78,WrappedPlainView,1,int getStartOffset(),False,,NULL
78,WrappedPlainView,2,int getEndOffset(),False,,NULL
78,WrappedPlainView,3,int getPreferredSpan(int axis),False,,NULL
78,WrappedPlainView,4,"Shape modelToView(int pos, Shape a, Position.Bias b)",False,,NULL
78,WrappedPlainView,5,"void insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

insertUpdate
public void insertUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the
 document in a location that this view is responsible for.
 This is implemented to simply update the children.

Overrides:
insertUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
79,ZoneView,1,int getStartOffset(),False,,NULL
79,ZoneView,2,int getEndOffset(),False,,NULL
79,ZoneView,3,"void insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

insertUpdate
public void insertUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into the document
 in a location that this view is responsible for.  This is largely
 delegated to the superclass, but is reimplemented to update the
 relevant zone (i.e. determine if a zone needs to be split into a
 set of 2 or more zones).

Overrides:
insertUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
79,ZoneView,4,"void removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",True,,"

removeUpdate
public void removeUpdate(DocumentEvent changes,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.  This is largely
 delegated to the superclass, but is reimplemented to update the
 relevant zones (i.e. determine if zones need to be removed or
 joined with another zone).

Overrides:
removeUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
79,ZoneView,5,"void changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",False,,NULL
