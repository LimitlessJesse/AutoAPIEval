ClassName,Method,Return Type,Description,Full Description
BorderUIResource,getBlackLineBorderUIResource(),static Border,NULL,"

getBlackLineBorderUIResource
public static Border getBlackLineBorderUIResource()

"
BorderUIResource,getBorderInsets(Component c),Insets,Returns the insets of the border.,"

getBorderInsets
public Insets getBorderInsets(Component c)
Description copied from interface: Border
Returns the insets of the border.

Specified by:
getBorderInsets in interface Border
Parameters:
c - the component for which this border insets value applies


"
BorderUIResource,getEtchedBorderUIResource(),static Border,NULL,"

getEtchedBorderUIResource
public static Border getEtchedBorderUIResource()

"
BorderUIResource,getLoweredBevelBorderUIResource(),static Border,NULL,"

getLoweredBevelBorderUIResource
public static Border getLoweredBevelBorderUIResource()

"
BorderUIResource,getRaisedBevelBorderUIResource(),static Border,NULL,"

getRaisedBevelBorderUIResource
public static Border getRaisedBevelBorderUIResource()

"
BorderUIResource,isBorderOpaque(),boolean,Returns whether or not the border is opaque.,"

isBorderOpaque
public boolean isBorderOpaque()
Description copied from interface: Border
Returns whether or not the border is opaque.  If the border
 is opaque, it is responsible for filling in it's own
 background when painting.

Specified by:
isBorderOpaque in interface Border


"
BorderUIResource,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,Paints the border for the specified component with the specified position and size.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from interface: Border
Paints the border for the specified component with the specified
 position and size.

Specified by:
paintBorder in interface Border
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
ComboBoxUI,isFocusTraversable(JComboBox c),abstract boolean,Determine whether or not the combo box itself is traversable,"

isFocusTraversable
public abstract boolean isFocusTraversable(JComboBox c)
Determine whether or not the combo box itself is traversable

"
ComboBoxUI,isPopupVisible(JComboBox c),abstract boolean,Determine the visibility of the popup,"

isPopupVisible
public abstract boolean isPopupVisible(JComboBox c)
Determine the visibility of the popup

"
ComboBoxUI,"setPopupVisible(JComboBox c, boolean v)",abstract void,Set the visibility of the popup,"

setPopupVisible
public abstract void setPopupVisible(JComboBox c,
                                     boolean v)
Set the visibility of the popup

"
ComponentUI,"contains(JComponent c, int x, int y)",boolean,"Returns true if the specified x,y location is contained within the look and feel's defined shape of the specified component.","

contains
public boolean contains(JComponent c,
                        int x,
                        int y)
Returns true if the specified x,y location is
 contained within the look and feel's defined shape of the specified
 component. x and y are defined to be relative
 to the coordinate system of the specified component.  Although
 a component's bounds is constrained to a rectangle,
 this method provides the means for defining a non-rectangular
 shape within those bounds for the purpose of hit detection.

Parameters:
c - the component where the x,y location is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
x - the x coordinate of the point
y - the y coordinate of the point
See Also:
JComponent.contains(int, int), 
Component.contains(int, int)


"
ComponentUI,createUI(JComponent c),static ComponentUI,Returns an instance of the UI delegate for the specified component.,"

createUI
public static ComponentUI createUI(JComponent c)
Returns an instance of the UI delegate for the specified component.
 Each subclass must provide its own static createUI
 method that returns an instance of that UI delegate subclass.
 If the UI delegate subclass is stateless, it may return an instance
 that is shared by multiple components.  If the UI delegate is
 stateful, then it should return a new instance per component.
 The default implementation of this method throws an error, as it
 should never be invoked.

"
ComponentUI,"getAccessibleChild(JComponent c, int i)",Accessible,Returns the ith Accessible child of the object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent c,
                                     int i)
Returns the ith Accessible child of the object.
 UIs might need to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.

 

 Note: As of v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleChild() instead of
 this method.

Parameters:
i - zero-based index of child
Returns:
the ith Accessible child of the object
See Also:
getAccessibleChildrenCount(javax.swing.JComponent)


"
ComponentUI,getAccessibleChildrenCount(JComponent c),int,Returns the number of accessible children in the object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent c)
Returns the number of accessible children in the object.  If all
 of the children of this object implement Accessible,
 this
 method should return the number of children of this object.
 UIs might wish to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.

 Note: As of v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleChildrenCount() instead
 of this method.

Returns:
the number of accessible children in the object
See Also:
getAccessibleChild(javax.swing.JComponent, int)


"
ComponentUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.  The baseline is measured from the top of
 the component.  This method is primarily meant for
 LayoutManagers to align components along their
 baseline.  A return value less than 0 indicates this component
 does not have a reasonable baseline and that
 LayoutManagers should not align this component on
 its baseline.
 
 This method returns -1.  Subclasses that have a meaningful baseline
 should override appropriately.

Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int,int)


"
ComponentUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of he component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of he component
 changes as the size changes.  This method is primarily meant for
 layout managers and GUI builders.
 
 This method returns BaselineResizeBehavior.OTHER.
 Subclasses that support a baseline should override appropriately.

Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
ComponentUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
ComponentUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
getPreferredSize(javax.swing.JComponent)


"
ComponentUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
ComponentUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Parameters:
c - the component where this UI delegate is being installed
See Also:
uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
ComponentUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
update(java.awt.Graphics, javax.swing.JComponent)


"
ComponentUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
ComponentUI,"update(Graphics g, JComponent c)",void,Notifies this UI delegate that it is time to paint the specified component.,"

update
public void update(Graphics g,
                   JComponent c)
Notifies this UI delegate that it is time to paint the specified
 component.  This method is invoked by JComponent
 when the specified component is being painted.

 By default this method fills the specified component with
 its background color if its opaque property is true,
 and then immediately calls paint. In general this method need
 not be overridden by subclasses; all look-and-feel rendering code should
 reside in the paint method.

Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
FileChooserUI,"ensureFileIsVisible(JFileChooser fc, File f)",abstract void,NULL,"

ensureFileIsVisible
public abstract void ensureFileIsVisible(JFileChooser fc,
                                         File f)

"
FileChooserUI,getAcceptAllFileFilter(JFileChooser fc),abstract FileFilter,NULL,"

getAcceptAllFileFilter
public abstract FileFilter getAcceptAllFileFilter(JFileChooser fc)

"
FileChooserUI,getApproveButtonText(JFileChooser fc),abstract String,NULL,"

getApproveButtonText
public abstract String getApproveButtonText(JFileChooser fc)

"
FileChooserUI,getDefaultButton(JFileChooser fc),JButton,Returns default button for current LookAndFeel.,"

getDefaultButton
public JButton getDefaultButton(JFileChooser fc)
Returns default button for current LookAndFeel.
 JFileChooser will use this button as default button
 for dialog windows.

Since:
1.7


"
FileChooserUI,getDialogTitle(JFileChooser fc),abstract String,NULL,"

getDialogTitle
public abstract String getDialogTitle(JFileChooser fc)

"
FileChooserUI,getFileView(JFileChooser fc),abstract FileView,NULL,"

getFileView
public abstract FileView getFileView(JFileChooser fc)

"
FileChooserUI,rescanCurrentDirectory(JFileChooser fc),abstract void,NULL,"

rescanCurrentDirectory
public abstract void rescanCurrentDirectory(JFileChooser fc)

"
IconUIResource,getIconHeight(),int,Returns the icon's height.,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
IconUIResource,getIconWidth(),int,Returns the icon's width.,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
IconUIResource,"paintIcon(Component c, Graphics g, int x, int y)",void,Draw the icon at the specified location.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
LayerUI,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list. The listener is
 registered for all bound properties of this class.
 
 If listener is null,
 no exception is thrown and no action is performed.

Parameters:
listener - the property change listener to be added
See Also:
removePropertyChangeListener(java.beans.PropertyChangeListener), 
getPropertyChangeListeners(), 
addPropertyChangeListener(String, java.beans.PropertyChangeListener)


"
LayerUI,"addPropertyChangeListener(String propertyName, PropertyChangeListener listener)",void,Adds a PropertyChangeListener to the listener list for a specific property.,"

addPropertyChangeListener
public void addPropertyChangeListener(String propertyName,
                                      PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list for a specific
 property.
 
 If propertyName or listener is null,
 no exception is thrown and no action is taken.

Parameters:
propertyName - one of the property names listed above
listener - the property change listener to be added
See Also:
removePropertyChangeListener(String, PropertyChangeListener), 
getPropertyChangeListeners(String), 
addPropertyChangeListener(String, PropertyChangeListener)


"
LayerUI,"applyPropertyChange(PropertyChangeEvent evt, JLayer<? extends V> l)",void,Notifies the LayerUI when any of its property are changed and enables updating every JLayer this LayerUI instance is set to.,"

applyPropertyChange
public void applyPropertyChange(PropertyChangeEvent evt,
                                JLayer<? extends V> l)
Notifies the LayerUI when any of its property are changed
 and enables updating every JLayer
 this LayerUI instance is set to.

Parameters:
evt - the PropertyChangeEvent generated by this LayerUI
l - the JLayer this LayerUI is set to


"
LayerUI,doLayout(JLayer<? extends V> l),void,Causes the passed instance of JLayer to lay out its components.,"

doLayout
public void doLayout(JLayer<? extends V> l)
Causes the passed instance of JLayer to lay out its components.

Parameters:
l - the JLayer component where this UI delegate is being installed


"
LayerUI,"eventDispatched(AWTEvent e, JLayer<? extends V> l)",void,Processes AWTEvents for JLayer and all its descendants to this LayerUI instance.,"

eventDispatched
public void eventDispatched(AWTEvent e,
                            JLayer<? extends V> l)
Processes AWTEvents for JLayer
 and all its descendants to this LayerUI instance.
 
 To enable the AWTEvents of a particular type,
 you call JLayer.setLayerEventMask(long)
 in installUI(javax.swing.JComponent)
 and set the layer event mask to 0
 in uninstallUI(javax.swing.JComponent) after that.
 By default this  method calls the appropriate
 process&lt;event&nbsp;type&gt;Event
 method for the given class of event.
 
Note: Events are processed only for displayable JLayers.

Parameters:
e - the event to be dispatched
l - the layer this LayerUI is set to
See Also:
JLayer.setLayerEventMask(long), 
Component.isDisplayable(), 
processComponentEvent(java.awt.event.ComponentEvent, javax.swing.JLayer<? extends V>), 
processFocusEvent(java.awt.event.FocusEvent, javax.swing.JLayer<? extends V>), 
processKeyEvent(java.awt.event.KeyEvent, javax.swing.JLayer<? extends V>), 
processMouseEvent(java.awt.event.MouseEvent, javax.swing.JLayer<? extends V>), 
processMouseMotionEvent(java.awt.event.MouseEvent, javax.swing.JLayer<? extends V>), 
processInputMethodEvent(java.awt.event.InputMethodEvent, javax.swing.JLayer<? extends V>), 
processHierarchyEvent(java.awt.event.HierarchyEvent, javax.swing.JLayer<? extends V>), 
processMouseWheelEvent(java.awt.event.MouseWheelEvent, javax.swing.JLayer<? extends V>)


"
LayerUI,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Support for reporting bound property changes for Object properties.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Support for reporting bound property changes for Object properties.
 This method can be called when a bound property has changed and it will
 send the appropriate PropertyChangeEvent to any registered
 PropertyChangeListeners.

Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
LayerUI,"getBaseline(JComponent c, int width, int height)",int,"If the JLayer's view component is not null, this calls the view's getBaseline() method.","

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
If the JLayer's view component is not null,
 this calls the view's getBaseline() method.
 Otherwise, the default implementation is called.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JLayer to return baseline resize behavior for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
See Also:
JComponent.getBaseline(int,int)


"
LayerUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,"If the JLayer's view component is not null, this returns the result of the view's getBaselineResizeBehavior() method.","

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
If the JLayer's view component is not null,
 this returns the result of the view's getBaselineResizeBehavior() method.
 Otherwise, the default implementation is called.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JLayer to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
See Also:
JComponent.getBaseline(int, int)


"
LayerUI,getMaximumSize(JComponent c),Dimension,"If the JLayer's view component is not null, this returns the result of the view's getMaximumSize() method.","

getMaximumSize
public Dimension getMaximumSize(JComponent c)
If the JLayer's view component is not null,
 this returns the result of  the view's getMaximumSize() method.
 Otherwise, the default implementation is used.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - JLayer to return preferred size for
Returns:
maximum size for the passed JLayer
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
LayerUI,getMinimumSize(JComponent c),Dimension,"If the JLayer's view component is not null, this returns the result of the view's getMinimalSize() method.","

getMinimumSize
public Dimension getMinimumSize(JComponent c)
If the JLayer's view component is not null,
 this returns the result of  the view's getMinimalSize() method.
 Otherwise, the default implementation is used.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - JLayer to return preferred size for
Returns:
minimal size for the passed JLayer
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
LayerUI,getPreferredSize(JComponent c),Dimension,"If the JLayer's view component is not null, this returns the result of the view's getPreferredSize() method.","

getPreferredSize
public Dimension getPreferredSize(JComponent c)
If the JLayer's view component is not null,
 this returns the result of  the view's getPreferredSize() method.
 Otherwise, the default implementation is used.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - JLayer to return preferred size for
Returns:
preferred size for the passed JLayer
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
LayerUI,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the property change listeners registered on this component.,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the property change listeners
 registered on this component.

Returns:
all of this ui's PropertyChangeListeners
         or an empty array if no property change
         listeners are currently registered
See Also:
addPropertyChangeListener(java.beans.PropertyChangeListener), 
removePropertyChangeListener(java.beans.PropertyChangeListener), 
getPropertyChangeListeners(String)


"
LayerUI,getPropertyChangeListeners(String propertyName),PropertyChangeListener[],Returns an array of all the listeners which have been associated with the named property.,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners(String propertyName)
Returns an array of all the listeners which have been associated
 with the named property.

Parameters:
propertyName - The name of the property being listened to
Returns:
all of the PropertyChangeListeners associated with
         the named property; if no such listeners have been added or
         if propertyName is null, an empty
         array is returned
See Also:
addPropertyChangeListener(String, PropertyChangeListener), 
removePropertyChangeListener(String, PropertyChangeListener), 
getPropertyChangeListeners()


"
LayerUI,installUI(JComponent c),void,Configures the JLayer this LayerUI is set to.,"

installUI
public void installUI(JComponent c)
Configures the JLayer this LayerUI is set to.
 The default implementation registers the passed JLayer component
 as a PropertyChangeListener for the property changes of this LayerUI.

Overrides:
installUI in class ComponentUI
Parameters:
c - the JLayer component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
LayerUI,"paint(Graphics g, JComponent c)",void,Paints the specified component.,"

paint
public void paint(Graphics g,
                  JComponent c)
Paints the specified component.
 Subclasses should override this method and use
 the specified Graphics object to
 render the content of the component.
 
 The default implementation paints the passed component as is.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
LayerUI,"paintImmediately(int x, int y, int width, int height, JLayer<? extends V> l)",void,"Paints the specified region in the JLayer this LayerUI is set to, immediately.","

paintImmediately
public void paintImmediately(int x,
                             int y,
                             int width,
                             int height,
                             JLayer<? extends V> l)
Paints the specified region in the JLayer this LayerUI is set to, immediately.
 
 This method is to be overridden when the dirty region needs to be changed.
 The default implementation delegates its functionality to JComponent.paintImmediately(int, int, int, int).

Parameters:
x - the x value of the region to be painted
y - the y value of the region to be painted
width - the width of the region to be painted
height - the height of the region to be painted
See Also:
JComponent.paintImmediately(int, int, int, int)


"
LayerUI,"processComponentEvent(ComponentEvent e, JLayer<? extends V> l)",protected void,Processes component events occurring on the JLayer or any of its subcomponents.,"

processComponentEvent
protected void processComponentEvent(ComponentEvent e,
                                     JLayer<? extends V> l)
Processes component events occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless component events are
 enabled for the JLayer objects, this LayerUI is set to.
 Component events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.COMPONENT_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the ComponentEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processFocusEvent(FocusEvent e, JLayer<? extends V> l)",protected void,Processes focus events occurring on the JLayer or any of its subcomponents.,"

processFocusEvent
protected void processFocusEvent(FocusEvent e,
                                 JLayer<? extends V> l)
Processes focus events occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless focus events are
 enabled for the JLayer objects, this LayerUI is set to.
 Focus events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the FocusEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processHierarchyBoundsEvent(HierarchyEvent e, JLayer<? extends V> l)",protected void,Processes hierarchy bounds event occurring on the JLayer or any of its subcomponents.,"

processHierarchyBoundsEvent
protected void processHierarchyBoundsEvent(HierarchyEvent e,
                                           JLayer<? extends V> l)
Processes hierarchy bounds event occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless hierarchy bounds events are
 enabled for the JLayer objects, this LayerUI is set to.
 Hierarchy bounds events are enabled in the overridden installUI(javax.swing.JComponent)
 method and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the HierarchyEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processHierarchyEvent(HierarchyEvent e, JLayer<? extends V> l)",protected void,Processes hierarchy event occurring on the JLayer or any of its subcomponents.,"

processHierarchyEvent
protected void processHierarchyEvent(HierarchyEvent e,
                                     JLayer<? extends V> l)
Processes hierarchy event occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless hierarchy events are
 enabled for the JLayer objects, this LayerUI is set to.
 Hierarchy events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.HIERARCHY_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the HierarchyEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processInputMethodEvent(InputMethodEvent e, JLayer<? extends V> l)",protected void,Processes input event occurring on the JLayer or any of its subcomponents.,"

processInputMethodEvent
protected void processInputMethodEvent(InputMethodEvent e,
                                       JLayer<? extends V> l)
Processes input event occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless input events are
 enabled for the JLayer objects, this LayerUI is set to.
 Input events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.INPUT_METHOD_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the InputMethodEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processKeyEvent(KeyEvent e, JLayer<? extends V> l)",protected void,Processes key events occurring on the JLayer or any of its subcomponents.,"

processKeyEvent
protected void processKeyEvent(KeyEvent e,
                               JLayer<? extends V> l)
Processes key events occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless key events are
 enabled for the JLayer objects, this LayerUI is set to.
 Key events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the KeyEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processMouseEvent(MouseEvent e, JLayer<? extends V> l)",protected void,Processes mouse events occurring on the JLayer or any of its subcomponents.,"

processMouseEvent
protected void processMouseEvent(MouseEvent e,
                                 JLayer<? extends V> l)
Processes mouse events occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless mouse events are
 enabled for the JLayer objects, this LayerUI is set to.
 Mouse events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.MOUSE_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the MouseEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processMouseMotionEvent(MouseEvent e, JLayer<? extends V> l)",protected void,Processes mouse motion event occurring on the JLayer or any of its subcomponents.,"

processMouseMotionEvent
protected void processMouseMotionEvent(MouseEvent e,
                                       JLayer<? extends V> l)
Processes mouse motion event occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless mouse motion events are
 enabled for the JLayer objects, this LayerUI is set to.
 Mouse motion events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the MouseEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,"processMouseWheelEvent(MouseWheelEvent e, JLayer<? extends V> l)",protected void,Processes mouse wheel event occurring on the JLayer or any of its subcomponents.,"

processMouseWheelEvent
protected void processMouseWheelEvent(MouseWheelEvent e,
                                      JLayer<? extends V> l)
Processes mouse wheel event occurring on the JLayer
 or any of its subcomponents.
 
 This method is not called unless mouse wheel events are
 enabled for the JLayer objects, this LayerUI is set to.
 Mouse wheel events are enabled in the overridden installUI(javax.swing.JComponent) method
 and should be disabled in the uninstallUI(javax.swing.JComponent) method after that.
 
 public void installUI(JComponent c) {
    super.installUI(c);
    JLayer l = (JLayer) c;
    l.setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK);
 }

 public void uninstallUI(JComponent c) {
     super.uninstallUI(c);
     JLayer l = (JLayer) c;
     l.setLayerEventMask(0);
 }
 

Parameters:
e - the MouseEvent to be processed
l - the layer this LayerUI instance is set to
See Also:
JLayer.setLayerEventMask(long), 
installUI(javax.swing.JComponent), 
uninstallUI(javax.swing.JComponent)


"
LayerUI,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list. This method
 should be used to remove PropertyChangeListeners that were registered
 for all bound properties of this class.
 
 If listener is null,
 no exception is thrown and no action is performed.

Parameters:
listener - the PropertyChangeListener to be removed
See Also:
addPropertyChangeListener(java.beans.PropertyChangeListener), 
getPropertyChangeListeners(), 
removePropertyChangeListener(String, PropertyChangeListener)


"
LayerUI,"removePropertyChangeListener(String propertyName, PropertyChangeListener listener)",void,Removes a PropertyChangeListener from the listener list for a specific property.,"

removePropertyChangeListener
public void removePropertyChangeListener(String propertyName,
                                         PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener
 list for a specific property. This method should be used to remove
 PropertyChangeListeners
 that were registered for a specific bound property.
 
 If propertyName or listener is null,
 no exception is thrown and no action is taken.

Parameters:
propertyName - a valid property name
listener - the PropertyChangeListener to be removed
See Also:
addPropertyChangeListener(String, PropertyChangeListener), 
getPropertyChangeListeners(String), 
removePropertyChangeListener(PropertyChangeListener)


"
LayerUI,uninstallUI(JComponent c),void,Reverses the configuration which was previously set in the installUI(JComponent) method.,"

uninstallUI
public void uninstallUI(JComponent c)
Reverses the configuration which was previously set
 in the installUI(JComponent) method.
 The default implementation unregisters the passed JLayer component
 as a PropertyChangeListener for the property changes of this LayerUI.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed.
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
LayerUI,updateUI(JLayer<? extends V> l),void,Invoked when JLayer.updateUI() is called by the JLayer this LayerUI is set to.,"

updateUI
public void updateUI(JLayer<? extends V> l)
Invoked when JLayer.updateUI() is called
 by the JLayer this LayerUI is set to.

Parameters:
l - the JLayer which UI is updated


"
ListUI,"getCellBounds(JList list, int index1, int index2)",abstract Rectangle,"Returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices.","

getCellBounds
public abstract Rectangle getCellBounds(JList list,
                                        int index1,
                                        int index2)
Returns the bounding rectangle, in the given list's coordinate system,
 for the range of cells specified by the two indices.
 The indices can be supplied in any order.
 
 If the smaller index is outside the list's range of cells, this method
 returns null. If the smaller index is valid, but the larger
 index is outside the list's range, the bounds of just the first index
 is returned. Otherwise, the bounds of the valid range is returned.

Parameters:
list - the list
index1 - the first index in the range
index2 - the second index in the range
Returns:
the bounding rectangle for the range of cells, or null


"
ListUI,"indexToLocation(JList list, int index)",abstract Point,"Returns the origin in the given JList, of the specified item, in the list's coordinate system.","

indexToLocation
public abstract Point indexToLocation(JList list,
                                      int index)
Returns the origin in the given JList, of the specified item,
 in the list's coordinate system.
 Returns null if the index isn't valid.

Parameters:
list - the list
index - the cell index
Returns:
the origin of the cell, or null


"
ListUI,"locationToIndex(JList list, Point location)",abstract int,Returns the cell index in the specified JList closest to the given location in the list's coordinate system.,"

locationToIndex
public abstract int locationToIndex(JList list,
                                    Point location)
Returns the cell index in the specified JList closest to the
 given location in the list's coordinate system. To determine if the
 cell actually contains the specified location, compare the point against
 the cell's bounds, as provided by getCellBounds.
 This method returns -1 if the list's model is empty.

Parameters:
list - the list
location - the coordinates of the point
Returns:
the cell index closest to the given location, or -1
Throws:
NullPointerException - if location is null


"
OptionPaneUI,containsCustomComponents(JOptionPane op),abstract boolean,Returns true if the user has supplied instances of Component for either the options or message.,"

containsCustomComponents
public abstract boolean containsCustomComponents(JOptionPane op)
Returns true if the user has supplied instances of Component for
 either the options or message.

"
OptionPaneUI,selectInitialValue(JOptionPane op),abstract void,Requests the component representing the default value to have focus.,"

selectInitialValue
public abstract void selectInitialValue(JOptionPane op)
Requests the component representing the default value to have
 focus.

"
PopupMenuUI,"getPopup(JPopupMenu popup, int x, int y)",Popup,Returns the Popup that will be responsible for displaying the JPopupMenu.,"

getPopup
public Popup getPopup(JPopupMenu popup,
                      int x,
                      int y)
Returns the Popup that will be responsible for
 displaying the JPopupMenu.

Parameters:
popup - JPopupMenu requesting Popup
x - Screen x location Popup is to be shown at
y - Screen y location Popup is to be shown at.
Returns:
Popup that will show the JPopupMenu
Since:
1.4


"
PopupMenuUI,isPopupTrigger(MouseEvent e),boolean,NULL,"

isPopupTrigger
public boolean isPopupTrigger(MouseEvent e)

Since:
1.3


"
SplitPaneUI,"finishedPaintingChildren(JSplitPane jc, Graphics g)",abstract void,Messaged after the JSplitPane the receiver is providing the look and feel for paints its children.,"

finishedPaintingChildren
public abstract void finishedPaintingChildren(JSplitPane jc,
                                              Graphics g)
Messaged after the JSplitPane the receiver is providing the look
 and feel for paints its children.

"
SplitPaneUI,getDividerLocation(JSplitPane jc),abstract int,Returns the location of the divider.,"

getDividerLocation
public abstract int getDividerLocation(JSplitPane jc)
Returns the location of the divider.

"
SplitPaneUI,getMaximumDividerLocation(JSplitPane jc),abstract int,Returns the maximum possible location of the divider.,"

getMaximumDividerLocation
public abstract int getMaximumDividerLocation(JSplitPane jc)
Returns the maximum possible location of the divider.

"
SplitPaneUI,getMinimumDividerLocation(JSplitPane jc),abstract int,Returns the minimum possible location of the divider.,"

getMinimumDividerLocation
public abstract int getMinimumDividerLocation(JSplitPane jc)
Returns the minimum possible location of the divider.

"
SplitPaneUI,resetToPreferredSizes(JSplitPane jc),abstract void,Messaged to relayout the JSplitPane based on the preferred size of the children components.,"

resetToPreferredSizes
public abstract void resetToPreferredSizes(JSplitPane jc)
Messaged to relayout the JSplitPane based on the preferred size
 of the children components.

"
SplitPaneUI,"setDividerLocation(JSplitPane jc, int location)",abstract void,Sets the location of the divider to location.,"

setDividerLocation
public abstract void setDividerLocation(JSplitPane jc,
                                        int location)
Sets the location of the divider to location.

"
TabbedPaneUI,"getTabBounds(JTabbedPane pane, int index)",abstract Rectangle,NULL,"

getTabBounds
public abstract Rectangle getTabBounds(JTabbedPane pane,
                                       int index)

"
TabbedPaneUI,getTabRunCount(JTabbedPane pane),abstract int,NULL,"

getTabRunCount
public abstract int getTabRunCount(JTabbedPane pane)

"
TabbedPaneUI,"tabForCoordinate(JTabbedPane pane, int x, int y)",abstract int,NULL,"

tabForCoordinate
public abstract int tabForCoordinate(JTabbedPane pane,
                                     int x,
                                     int y)

"
TextUI,"damageRange(JTextComponent t, int p0, int p1)",abstract void,Causes the portion of the view responsible for the given part of the model to be repainted.,"

damageRange
public abstract void damageRange(JTextComponent t,
                                 int p0,
                                 int p1)
Causes the portion of the view responsible for the
 given part of the model to be repainted.

Parameters:
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0


"
TextUI,"damageRange(JTextComponent t, int p0, int p1, Position.Bias firstBias, Position.Bias secondBias)",abstract void,Causes the portion of the view responsible for the given part of the model to be repainted.,"

damageRange
public abstract void damageRange(JTextComponent t,
                                 int p0,
                                 int p1,
                                 Position.Bias firstBias,
                                 Position.Bias secondBias)
Causes the portion of the view responsible for the
 given part of the model to be repainted.

Parameters:
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0


"
TextUI,getEditorKit(JTextComponent t),abstract EditorKit,Fetches the binding of services that set a policy for the type of document being edited.,"

getEditorKit
public abstract EditorKit getEditorKit(JTextComponent t)
Fetches the binding of services that set a policy
 for the type of document being edited.  This contains
 things like the commands available, stream readers and
 writers, etc.

Returns:
the editor kit binding


"
TextUI,"getNextVisualPositionFrom(JTextComponent t, int pos, Position.Bias b, int direction, Position.Bias[] biasRet)",abstract int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public abstract int getNextVisualPositionFrom(JTextComponent t,
                                              int pos,
                                              Position.Bias b,
                                              int direction,
                                              Position.Bias[] biasRet)
                                       throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.

Parameters:
t - the text component for which this UI is installed
pos - the position to convert >= 0
b - the bias for the position
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH
biasRet - an array to contain the bias for the returned position
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException
IllegalArgumentException - for an invalid direction


"
TextUI,getRootView(JTextComponent t),abstract View,Fetches a View with the allocation of the associated text component (i.e.,"

getRootView
public abstract View getRootView(JTextComponent t)
Fetches a View with the allocation of the associated
 text component (i.e. the root of the hierarchy) that
 can be traversed to determine how the model is being
 represented spatially.

Returns:
the view


"
TextUI,"getToolTipText(JTextComponent t, Point pt)",String,Returns the string to be used as the tooltip at the passed in location.,"

getToolTipText
public String getToolTipText(JTextComponent t,
                             Point pt)
Returns the string to be used as the tooltip at the passed in location.

Since:
1.4
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent)


"
TextUI,"modelToView(JTextComponent t, int pos)",abstract Rectangle,Converts the given location in the model to a place in the view coordinate system.,"

modelToView
public abstract Rectangle modelToView(JTextComponent t,
                                      int pos)
                               throws BadLocationException
Converts the given location in the model to a place in
 the view coordinate system.

Parameters:
pos - the local location in the model to translate >= 0
Returns:
the coordinates as a rectangle
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document


"
TextUI,"modelToView(JTextComponent t, int pos, Position.Bias bias)",abstract Rectangle,Converts the given location in the model to a place in the view coordinate system.,"

modelToView
public abstract Rectangle modelToView(JTextComponent t,
                                      int pos,
                                      Position.Bias bias)
                               throws BadLocationException
Converts the given location in the model to a place in
 the view coordinate system.

Parameters:
pos - the local location in the model to translate >= 0
Returns:
the coordinates as a rectangle
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document


"
TextUI,"viewToModel(JTextComponent t, Point pt)",abstract int,Converts the given place in the view coordinate system to the nearest representative location in the model.,"

viewToModel
public abstract int viewToModel(JTextComponent t,
                                Point pt)
Converts the given place in the view coordinate system
 to the nearest representative location in the model.

Parameters:
pt - the location in the view to translate.  This
   should be in the same coordinate system as the mouse
   events.
Returns:
the offset from the start of the document >= 0


"
TextUI,"viewToModel(JTextComponent t, Point pt, Position.Bias[] biasReturn)",abstract int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public abstract int viewToModel(JTextComponent t,
                                Point pt,
                                Position.Bias[] biasReturn)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Parameters:
pt - the location in the view to translate.
           This should be in the same coordinate system
           as the mouse events.
biasReturn - filled in by this method to indicate whether
           the point given is closer to the previous or the next
           character in the model
Returns:
the location within the model that best represents the
         given point in the view >= 0


"
TreeUI,cancelEditing(JTree tree),abstract void,Cancels the current editing session.,"

cancelEditing
public abstract void cancelEditing(JTree tree)
Cancels the current editing session. This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

"
TreeUI,"getClosestPathForLocation(JTree tree, int x, int y)",abstract TreePath,"Returns the path to the node that is closest to x,y.","

getClosestPathForLocation
public abstract TreePath getClosestPathForLocation(JTree tree,
                                                   int x,
                                                   int y)
Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

"
TreeUI,getEditingPath(JTree tree),abstract TreePath,Returns the path to the element that is being edited.,"

getEditingPath
public abstract TreePath getEditingPath(JTree tree)
Returns the path to the element that is being edited.

"
TreeUI,"getPathBounds(JTree tree, TreePath path)",abstract Rectangle,Returns the Rectangle enclosing the label portion that the last item in path will be drawn into.,"

getPathBounds
public abstract Rectangle getPathBounds(JTree tree,
                                        TreePath path)
Returns the Rectangle enclosing the label portion that the
 last item in path will be drawn into.  Will return null if
 any component in path is currently valid.

"
TreeUI,"getPathForRow(JTree tree, int row)",abstract TreePath,Returns the path for passed in row.,"

getPathForRow
public abstract TreePath getPathForRow(JTree tree,
                                       int row)
Returns the path for passed in row.  If row is not visible
 null is returned.

"
TreeUI,getRowCount(JTree tree),abstract int,Returns the number of rows that are being displayed.,"

getRowCount
public abstract int getRowCount(JTree tree)
Returns the number of rows that are being displayed.

"
TreeUI,"getRowForPath(JTree tree, TreePath path)",abstract int,Returns the row that the last item identified in path is visible at.,"

getRowForPath
public abstract int getRowForPath(JTree tree,
                                  TreePath path)
Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

"
TreeUI,isEditing(JTree tree),abstract boolean,Returns true if the tree is being edited.,"

isEditing
public abstract boolean isEditing(JTree tree)
Returns true if the tree is being edited.  The item that is being
 edited can be returned by getEditingPath().

"
TreeUI,"startEditingAtPath(JTree tree, TreePath path)",abstract void,Selects the last item in path and tries to edit it.,"

startEditingAtPath
public abstract void startEditingAtPath(JTree tree,
                                        TreePath path)
Selects the last item in path and tries to edit it.  Editing will
 fail if the CellEditor won't allow it for the selected item.

"
TreeUI,stopEditing(JTree tree),abstract boolean,Stops the current editing session.,"

stopEditing
public abstract boolean stopEditing(JTree tree)
Stops the current editing session.  This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

"
