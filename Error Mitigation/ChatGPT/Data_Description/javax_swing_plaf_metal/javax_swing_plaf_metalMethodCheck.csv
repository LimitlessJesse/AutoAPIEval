Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DefaultMetalTheme,1,Color getPrimary1(),False,,NULL
0,DefaultMetalTheme,2,Color getPrimary2(),False,,NULL
0,DefaultMetalTheme,3,Color getPrimary3(),False,,NULL
0,DefaultMetalTheme,4,Color getSecondary1(),False,,NULL
0,DefaultMetalTheme,5,Color getSecondary2(),False,,NULL
1,MetalBorders,1,Border getButtonBorder(),True,,"

getButtonBorder
public static Border getButtonBorder()
Returns a border instance for a JButton

Since:
1.3


"
1,MetalBorders,2,Border getDesktopIconBorder(),True,,"

getDesktopIconBorder
public static Border getDesktopIconBorder()
Returns a border instance for a Desktop Icon

Since:
1.3


"
1,MetalBorders,3,Border getInternalFrameBorder(),False,,NULL
1,MetalBorders,4,Border getMenuItemBorder(),False,,NULL
1,MetalBorders,5,Border getToolBarBorder(),False,,NULL
2,MetalBorders.ButtonBorder,1,Border getButtonBorder(),False,,NULL
2,MetalBorders.ButtonBorder,2,Border getToggleButtonBorder(),False,,NULL
2,MetalBorders.ButtonBorder,3,Border getTextFieldBorder(),False,,NULL
2,MetalBorders.ButtonBorder,4,Border getDesktopIconBorder(),False,,NULL
2,MetalBorders.ButtonBorder,5,Border getMenuItemBorder(),False,,NULL
3,MetalBorders.Flush3DBorder,1,Border getBorder(),False,,NULL
3,MetalBorders.Flush3DBorder,2,"Insets getBorderInsets(Component c, Insets insets)",True,,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
3,MetalBorders.Flush3DBorder,3,boolean isBorderOpaque(),False,,NULL
3,MetalBorders.Flush3DBorder,4,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
3,MetalBorders.Flush3DBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
4,MetalBorders.InternalFrameBorder,1,Border getBorder(),False,,NULL
4,MetalBorders.InternalFrameBorder,2,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
4,MetalBorders.InternalFrameBorder,3,"Insets getBorderInsets(Component c, Insets insets)",True,,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
4,MetalBorders.InternalFrameBorder,4,boolean isBorderOpaque(),False,,NULL
4,MetalBorders.InternalFrameBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
5,MetalBorders.MenuBarBorder,1,Border getMenuBarBorder(),False,,NULL
5,MetalBorders.MenuBarBorder,2,Border getMenuItemBorder(),False,,NULL
5,MetalBorders.MenuBarBorder,3,Border getInternalFrameBorder(),False,,NULL
5,MetalBorders.MenuBarBorder,4,Border getDesktopIconBorder(),False,,NULL
5,MetalBorders.MenuBarBorder,5,Border getToolBarBorder(),False,,NULL
6,MetalBorders.MenuItemBorder,1,Border getBorder(),False,,NULL
6,MetalBorders.MenuItemBorder,2,void setBorder(Border border),False,,NULL
6,MetalBorders.MenuItemBorder,3,boolean isBorderOpaque(),False,,NULL
6,MetalBorders.MenuItemBorder,4,Insets getBorderInsets(Component c),False,,NULL
6,MetalBorders.MenuItemBorder,5,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
7,MetalBorders.OptionDialogBorder,1,Border getBorder(),False,,NULL
7,MetalBorders.OptionDialogBorder,2,"Insets getBorderInsets(Component c, Insets insets)",True,,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets newInsets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
newInsets - the object to be reinitialized
Returns:
the insets object


"
7,MetalBorders.OptionDialogBorder,3,ColorUIResource getPrimaryControlDarkShadow(),False,,NULL
7,MetalBorders.OptionDialogBorder,4,ColorUIResource getPrimaryControlShadow(),False,,NULL
7,MetalBorders.OptionDialogBorder,5,ColorUIResource getPrimaryControlInfo(),False,,NULL
8,MetalBorders.PaletteBorder,1,Insets getBorderInsets(Component c),False,,NULL
8,MetalBorders.PaletteBorder,2,boolean isBorderOpaque(),False,,NULL
8,MetalBorders.PaletteBorder,3,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
8,MetalBorders.PaletteBorder,4,"void setBorderInsets(Component c, Insets insets)",False,,NULL
8,MetalBorders.PaletteBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
9,MetalBorders.PopupMenuBorder,1,Border getBorder(),False,,NULL
9,MetalBorders.PopupMenuBorder,2,void setBorder(Border border),False,,NULL
9,MetalBorders.PopupMenuBorder,3,boolean isBorderOpaque(),False,,NULL
9,MetalBorders.PopupMenuBorder,4,Insets getBorderInsets(Component c),False,,NULL
9,MetalBorders.PopupMenuBorder,5,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
10,MetalBorders.RolloverButtonBorder,1,Border getBorder(),False,,NULL
10,MetalBorders.RolloverButtonBorder,2,void setBorder(Border border),False,,NULL
10,MetalBorders.RolloverButtonBorder,3,"Insets getBorderInsets(Component c, Insets insets)",False,,NULL
10,MetalBorders.RolloverButtonBorder,4,boolean isBorderOpaque(),False,,NULL
10,MetalBorders.RolloverButtonBorder,5,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
11,MetalBorders.ScrollPaneBorder,1,Border getBorder(),False,,NULL
11,MetalBorders.ScrollPaneBorder,2,void setBorder(Border border),False,,NULL
11,MetalBorders.ScrollPaneBorder,3,boolean isBorderOpaque(),False,,NULL
11,MetalBorders.ScrollPaneBorder,4,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
11,MetalBorders.ScrollPaneBorder,5,"Insets getBorderInsets(Component c, Insets insets)",True,,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
12,MetalBorders.TableHeaderBorder,1,Insets getBorderInsets(Component c),False,,NULL
12,MetalBorders.TableHeaderBorder,2,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
12,MetalBorders.TableHeaderBorder,3,boolean isBorderOpaque(),False,,NULL
12,MetalBorders.TableHeaderBorder,4,void setBorderOpaque(boolean isOpaque),False,,NULL
12,MetalBorders.TableHeaderBorder,5,void setRollover(boolean isRollover),False,,NULL
13,MetalBorders.TextFieldBorder,1,Border getBorder(),False,,NULL
13,MetalBorders.TextFieldBorder,2,void setBorder(Border border),False,,NULL
13,MetalBorders.TextFieldBorder,3,Insets getBorderInsets(Component c),False,,NULL
13,MetalBorders.TextFieldBorder,4,boolean isBorderOpaque(),False,,NULL
13,MetalBorders.TextFieldBorder,5,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.Flush3DBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
14,MetalBorders.ToggleButtonBorder,1,Border getToggleButtonBorder(),False,,NULL
14,MetalBorders.ToggleButtonBorder,2,void setToggleButtonBorder(Border border),False,,NULL
14,MetalBorders.ToggleButtonBorder,3,"Insets getBorderInsets(Component c, Insets insets)",False,,NULL
14,MetalBorders.ToggleButtonBorder,4,boolean isBorderOpaque(),False,,NULL
14,MetalBorders.ToggleButtonBorder,5,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class MetalBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
15,MetalBorders.ToolBarBorder,1,Border getBorder(),False,,NULL
15,MetalBorders.ToolBarBorder,2,void setBorder(Border border),False,,NULL
15,MetalBorders.ToolBarBorder,3,boolean isBorderOpaque(),False,,NULL
15,MetalBorders.ToolBarBorder,4,void setRollover(boolean rollover),False,,NULL
15,MetalBorders.ToolBarBorder,5,void setFloatable(boolean floatable),False,,NULL
16,MetalButtonUI,1,void installUI(JComponent c),False,,NULL
16,MetalButtonUI,2,void uninstallUI(JComponent c),False,,NULL
16,MetalButtonUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
16,MetalButtonUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
16,MetalButtonUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
17,MetalCheckBoxIcon,1,int getIconWidth(),True,,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
17,MetalCheckBoxIcon,2,int getIconHeight(),True,,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
17,MetalCheckBoxIcon,3,"void paintIcon(Component c, Graphics g, int x, int y)",True,,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
17,MetalCheckBoxIcon,4,boolean equals(Object obj),False,,NULL
17,MetalCheckBoxIcon,5,int hashCode(),False,,NULL
18,MetalCheckBoxUI,1,void installUI(JComponent c),False,,NULL
18,MetalCheckBoxUI,2,void uninstallUI(JComponent c),False,,NULL
18,MetalCheckBoxUI,3,Icon getDefaultIcon(),False,,NULL
18,MetalCheckBoxUI,4,Icon getDisabledIcon(),False,,NULL
18,MetalCheckBoxUI,5,Icon getSelectedIcon(),False,,NULL
19,MetalComboBoxButton,1,void setPopupVisible(boolean v),False,,NULL
19,MetalComboBoxButton,2,void setBorder(Border b),False,,NULL
19,MetalComboBoxButton,3,void setMargin(Insets m),False,,NULL
19,MetalComboBoxButton,4,void setFocusPainted(boolean b),False,,NULL
19,MetalComboBoxButton,5,void setRequestFocusEnabled(boolean b),False,,NULL
20,MetalComboBoxEditor,1,Component getEditorComponent(),False,,NULL
20,MetalComboBoxEditor,2,void setItem(Object anObject),False,,NULL
20,MetalComboBoxEditor,3,Object getItem(),False,,NULL
20,MetalComboBoxEditor,4,void selectAll(),False,,NULL
20,MetalComboBoxEditor,5,void addActionListener(ActionListener l),False,,NULL
21,MetalComboBoxEditor.UIResource,1,void setItem(Object anObject),False,,NULL
21,MetalComboBoxEditor.UIResource,2,Object getItem(),False,,NULL
21,MetalComboBoxEditor.UIResource,3,void selectAll(),False,,NULL
21,MetalComboBoxEditor.UIResource,4,void addActionListener(ActionListener l),False,,NULL
21,MetalComboBoxEditor.UIResource,5,void removeActionListener(ActionListener l),False,,NULL
22,MetalComboBoxIcon,1,"void paintIcon(Component c, Graphics g, int x, int y)",True,,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Paints the horizontal bars for the

Specified by:
paintIcon in interface Icon


"
22,MetalComboBoxIcon,2,int getIconWidth(),True,,"

getIconWidth
public int getIconWidth()
Created a stub to satisfy the interface.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
22,MetalComboBoxIcon,3,int getIconHeight(),True,,"

getIconHeight
public int getIconHeight()
Created a stub to satisfy the interface.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
22,MetalComboBoxIcon,4,MetalComboBoxIcon(),False,,NULL
22,MetalComboBoxIcon,5,boolean equals(Object obj),False,,NULL
23,MetalComboBoxUI,1,"void setPopupVisible(JComboBox c, boolean v)",False,,NULL
23,MetalComboBoxUI,2,"void setPopupWidth(JComboBox c, int width)",False,,NULL
23,MetalComboBoxUI,3,"void setPopupHeight(JComboBox c, int height)",False,,NULL
23,MetalComboBoxUI,4,"void setPopupLocation(JComboBox c, int x, int y)",False,,NULL
23,MetalComboBoxUI,5,"void setPopupMaxRowCount(JComboBox c, int count)",False,,NULL
24,MetalDesktopIconUI,1,"void setBounds(int x, int y, int width, int height)",False,,NULL
24,MetalDesktopIconUI,2,void setOpaque(boolean isOpaque),False,,NULL
24,MetalDesktopIconUI,3,void setUI(MetalDesktopIconUI ui),False,,NULL
24,MetalDesktopIconUI,4,void updateUI(),False,,NULL
24,MetalDesktopIconUI,5,void setIcon(JInternalFrame.JDesktopIcon icon),False,,NULL
25,MetalFileChooserUI,1,"void ensureFileIsVisible(JFileChooser fc, File f)",True,,"

ensureFileIsVisible
public void ensureFileIsVisible(JFileChooser fc,
                                File f)

Overrides:
ensureFileIsVisible in class BasicFileChooserUI


"
25,MetalFileChooserUI,2,File getDirectory(),False,,NULL
25,MetalFileChooserUI,3,File getDirectory(int index),False,,NULL
25,MetalFileChooserUI,4,File getSelectedFile(),False,,NULL
25,MetalFileChooserUI,5,void rescanCurrentDirectory(JFileChooser fc),True,,"

rescanCurrentDirectory
public void rescanCurrentDirectory(JFileChooser fc)

Overrides:
rescanCurrentDirectory in class BasicFileChooserUI


"
26,MetalIconFactory,1,Icon getTreeControlIcon(boolean isCollapsed),True,,"

getTreeControlIcon
public static Icon getTreeControlIcon(boolean isCollapsed)

"
26,MetalIconFactory,2,Icon getTreeFolderIcon(),True,,"

getTreeFolderIcon
public static Icon getTreeFolderIcon()

"
26,MetalIconFactory,3,Icon getTreeLeafIcon(),True,,"

getTreeLeafIcon
public static Icon getTreeLeafIcon()

"
26,MetalIconFactory,4,Icon getMenuArrowIcon(),True,,"

getMenuArrowIcon
public static Icon getMenuArrowIcon()

"
26,MetalIconFactory,5,Icon getMenuItemCheckIcon(),True,,"

getMenuItemCheckIcon
public static Icon getMenuItemCheckIcon()
Returns an icon to be used by JCheckBoxMenuItem.

Returns:
the default icon for check box menu items,
         or null if no default exists


"
27,MetalIconFactory.FileIcon16,1,Icon getTreeFolderIcon(),False,,NULL
27,MetalIconFactory.FileIcon16,2,Icon getTreeLeafIcon(),False,,NULL
27,MetalIconFactory.FileIcon16,3,Icon getFileIcon(File f),False,,NULL
27,MetalIconFactory.FileIcon16,4,Icon getComputerIcon(),False,,NULL
27,MetalIconFactory.FileIcon16,5,Icon getFloppyDriveIcon(),False,,NULL
28,MetalIconFactory.FolderIcon16,1,Icon getTreeFolderIcon(),False,,NULL
28,MetalIconFactory.FolderIcon16,2,Icon getTreeLeafIcon(),False,,NULL
28,MetalIconFactory.FolderIcon16,3,Icon getFileChooserDetailViewIcon(),False,,NULL
28,MetalIconFactory.FolderIcon16,4,Icon getFileChooserHomeFolderIcon(),False,,NULL
28,MetalIconFactory.FolderIcon16,5,Icon getFileChooserListViewIcon(),False,,NULL
29,MetalIconFactory.PaletteCloseIcon,1,"Icon getPaletteCloseIcon(int width, int height)",False,,NULL
29,MetalIconFactory.PaletteCloseIcon,2,int getIconWidth(),True,,"

getIconWidth
public int getIconWidth()
Description copied from interface: Icon
Returns the icon's width.

Specified by:
getIconWidth in interface Icon
Returns:
an int specifying the fixed width of the icon.


"
29,MetalIconFactory.PaletteCloseIcon,3,int getIconHeight(),True,,"

getIconHeight
public int getIconHeight()
Description copied from interface: Icon
Returns the icon's height.

Specified by:
getIconHeight in interface Icon
Returns:
an int specifying the fixed height of the icon.


"
29,MetalIconFactory.PaletteCloseIcon,4,"void paintIcon(Component c, Graphics g, int x, int y)",True,,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Description copied from interface: Icon
Draw the icon at the specified location.  Icon implementations
 may use the Component argument to get properties useful for
 painting, e.g. the foreground or background color.

Specified by:
paintIcon in interface Icon


"
29,MetalIconFactory.PaletteCloseIcon,5,String getDescription(),False,,NULL
30,MetalIconFactory.TreeControlIcon,1,Icon getTreeControlIcon(boolean isCollapsed),False,,NULL
30,MetalIconFactory.TreeControlIcon,2,Icon getTreeFolderIcon(),False,,NULL
30,MetalIconFactory.TreeControlIcon,3,Icon getTreeLeafIcon(),False,,NULL
30,MetalIconFactory.TreeControlIcon,4,"Icon getTreeControlIcon(boolean isCollapsed, boolean isLeaf)",False,,NULL
30,MetalIconFactory.TreeControlIcon,5,"Icon getTreeControlIcon(boolean isCollapsed, boolean isLeaf, boolean isExpanded, boolean isLeafExpanded)",False,,NULL
31,MetalIconFactory.TreeFolderIcon,1,Icon getTreeFolderIcon(),False,,NULL
31,MetalIconFactory.TreeFolderIcon,2,Icon getTreeFolderCollapsedIcon(),False,,NULL
31,MetalIconFactory.TreeFolderIcon,3,Icon getTreeFolderExpandedIcon(),False,,NULL
31,MetalIconFactory.TreeFolderIcon,4,Icon getTreeLeafIcon(),False,,NULL
31,MetalIconFactory.TreeFolderIcon,5,Icon getTreeControlIcon(boolean isCollapsed),False,,NULL
32,MetalIconFactory.TreeLeafIcon,1,Icon getTreeLeafIcon(),False,,NULL
32,MetalIconFactory.TreeLeafIcon,2,Icon getTreeControlIcon(boolean isCollapsed),False,,NULL
32,MetalIconFactory.TreeLeafIcon,3,Icon getTreeFolderIcon(),False,,NULL
32,MetalIconFactory.TreeLeafIcon,4,Icon getTreeComputerIcon(),False,,NULL
32,MetalIconFactory.TreeLeafIcon,5,Icon getTreeHardDriveIcon(),False,,NULL
33,MetalInternalFrameTitlePane,1,void setIconifyEnabled(boolean iconifyEnabled),False,,NULL
33,MetalInternalFrameTitlePane,2,void setMaximizeEnabled(boolean maximizeEnabled),False,,NULL
33,MetalInternalFrameTitlePane,3,void setCloseEnabled(boolean closeEnabled),False,,NULL
33,MetalInternalFrameTitlePane,4,void setPalette(boolean isPalette),True,,"

setPalette
public void setPalette(boolean b)

"
33,MetalInternalFrameTitlePane,5,void setPaletteClose(boolean isPaletteClose),False,,NULL
34,MetalInternalFrameUI,1,void setPalette(boolean isPalette),True,,"

setPalette
public void setPalette(boolean isPalette)

"
34,MetalInternalFrameUI,2,void setPaletteTitle(String paletteTitle),False,,NULL
34,MetalInternalFrameUI,3,void setPaletteCloseToActive(boolean isPaletteCloseToActive),False,,NULL
34,MetalInternalFrameUI,4,void setPaletteState(int state),False,,NULL
34,MetalInternalFrameUI,5,void setPaletteBorder(Border border),False,,NULL
35,MetalLabelUI,1,void installUI(JComponent c),False,,NULL
35,MetalLabelUI,2,void uninstallUI(JComponent c),False,,NULL
35,MetalLabelUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
35,MetalLabelUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
35,MetalLabelUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
36,MetalLookAndFeel,1,void setCurrentTheme(MetalTheme theme),True,,"

setCurrentTheme
public static void setCurrentTheme(MetalTheme theme)
Set the theme used by MetalLookAndFeel.
 
 After the theme is set, MetalLookAndFeel needs to be
 re-installed and the uis need to be recreated. The following
 shows how to do this:
 
   MetalLookAndFeel.setCurrentTheme(theme);

   // re-install the Metal Look and Feel
   UIManager.setLookAndFeel(new MetalLookAndFeel());

   // Update the ComponentUIs for all Components. This
   // needs to be invoked for all windows.
   SwingUtilities.updateComponentTreeUI(rootComponent);
 
 If this is not done the results are undefined.

Parameters:
theme - the theme to use
Throws:
NullPointerException - if theme is null
See Also:
getCurrentTheme()


"
36,MetalLookAndFeel,2,MetalTheme getCurrentTheme(),True,,"

getCurrentTheme
public static MetalTheme getCurrentTheme()
Return the theme currently being used by MetalLookAndFeel.
 If the current theme is null, the default theme is created.

Returns:
the current theme
Since:
1.5
See Also:
setCurrentTheme(javax.swing.plaf.metal.MetalTheme)


"
36,MetalLookAndFeel,3,void setTheme(MetalTheme theme),False,,NULL
36,MetalLookAndFeel,4,MetalTheme getTheme(),False,,NULL
36,MetalLookAndFeel,5,void setContrast(int newValue),False,,NULL
37,MetalMenuBarUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Configures the specified component appropriate for the metal look and
 feel.

Overrides:
installUI in class BasicMenuBarUI
Parameters:
c - the component where this UI delegate is being installed
Throws:
NullPointerException - if c is null.
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
37,MetalMenuBarUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Reverses configuration which was done on the specified component during
 installUI.

Overrides:
uninstallUI in class BasicMenuBarUI
Parameters:
c - the component where this UI delegate is being installed
Throws:
NullPointerException - if c is null.
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
37,MetalMenuBarUI,3,Dimension getPreferredSize(JComponent c),False,,NULL
37,MetalMenuBarUI,4,Dimension getMinimumSize(JComponent c),False,,NULL
37,MetalMenuBarUI,5,Dimension getMaximumSize(JComponent c),False,,NULL
38,MetalPopupMenuSeparatorUI,1,void installUI(JComponent c),False,,NULL
38,MetalPopupMenuSeparatorUI,2,void uninstallUI(JComponent c),False,,NULL
38,MetalPopupMenuSeparatorUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class MetalSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
38,MetalPopupMenuSeparatorUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class MetalSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
38,MetalPopupMenuSeparatorUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
39,MetalProgressBarUI,1,"void paintDeterminate(Graphics g, JComponent c)",True,,"

paintDeterminate
public void paintDeterminate(Graphics g,
                             JComponent c)
Draws a bit of special highlighting on the progress bar.
 The core painting is deferred to the BasicProgressBar's
 paintDeterminate method.

Overrides:
paintDeterminate in class BasicProgressBarUI
Since:
1.4
See Also:
BasicProgressBarUI.paintIndeterminate(java.awt.Graphics, javax.swing.JComponent)


"
39,MetalProgressBarUI,2,"void paintIndeterminate(Graphics g, JComponent c)",True,,"

paintIndeterminate
public void paintIndeterminate(Graphics g,
                               JComponent c)
Draws a bit of special highlighting on the progress bar
 and bouncing box.
 The core painting is deferred to the BasicProgressBar's
 paintIndeterminate method.

Overrides:
paintIndeterminate in class BasicProgressBarUI
Since:
1.4
See Also:
BasicProgressBarUI.paintDeterminate(java.awt.Graphics, javax.swing.JComponent)


"
39,MetalProgressBarUI,3,Dimension getPreferredSize(JComponent c),False,,NULL
39,MetalProgressBarUI,4,void installUI(JComponent c),False,,NULL
39,MetalProgressBarUI,5,void uninstallUI(JComponent c),False,,NULL
40,MetalRadioButtonUI,1,void installUI(JComponent c),False,,NULL
40,MetalRadioButtonUI,2,void uninstallUI(JComponent c),False,,NULL
40,MetalRadioButtonUI,3,Icon getDefaultIcon(),False,,NULL
40,MetalRadioButtonUI,4,Icon getSelectedIcon(),False,,NULL
40,MetalRadioButtonUI,5,Icon getDisabledIcon(),False,,NULL
41,MetalRootPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Invokes supers implementation of installUI to install
 the necessary state onto the passed in JRootPane
 to render the metal look and feel implementation of
 RootPaneUI. If
 the windowDecorationStyle property of the
 JRootPane is other than JRootPane.NONE,
 this will add a custom Component to render the widgets to
 JRootPane, as well as installing a custom
 Border and LayoutManager on the
 JRootPane.

Overrides:
installUI in class BasicRootPaneUI
Parameters:
c - the JRootPane to install state onto
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
41,MetalRootPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Invokes supers implementation to uninstall any of its state. This will
 also reset the LayoutManager of the JRootPane.
 If a Component has been added to the JRootPane
 to render the window decoration style, this method will remove it.
 Similarly, this will revert the Border and LayoutManager of the
 JRootPane to what it was before installUI
 was invoked.

Overrides:
uninstallUI in class BasicRootPaneUI
Parameters:
c - the JRootPane to uninstall state from
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
41,MetalRootPaneUI,3,void installDefaults(JRootPane c),False,,NULL
41,MetalRootPaneUI,4,void uninstallDefaults(JRootPane c),False,,NULL
41,MetalRootPaneUI,5,void installListeners(JRootPane c),False,,NULL
42,MetalScrollBarUI,1,"void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)",True,,"

paintTrack
protected void paintTrack(Graphics g,
                          JComponent c,
                          Rectangle trackBounds)

Overrides:
paintTrack in class BasicScrollBarUI


"
42,MetalScrollBarUI,2,"void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)",True,,"

paintThumb
protected void paintThumb(Graphics g,
                          JComponent c,
                          Rectangle thumbBounds)

Overrides:
paintThumb in class BasicScrollBarUI


"
42,MetalScrollBarUI,3,void paintDecreaseHighlight(Graphics g),False,,NULL
42,MetalScrollBarUI,4,void paintIncreaseHighlight(Graphics g),False,,NULL
42,MetalScrollBarUI,5,void layoutHScrollbar(JScrollBar sb),False,,NULL
43,MetalScrollButton,1,void setDirection(int direction),False,,NULL
43,MetalScrollButton,2,int getDirection(),False,,NULL
43,MetalScrollButton,3,void setRepeat(boolean repeat),False,,NULL
43,MetalScrollButton,4,boolean getRepeat(),False,,NULL
43,MetalScrollButton,5,void setScrollableAmount(int scrollableAmount),False,,NULL
44,MetalScrollPaneUI,1,JScrollBar createScrollBar(int orientation),False,,NULL
44,MetalScrollPaneUI,2,"void layoutVScrollbar(JScrollBar vsb, int x, int y, int width, int height)",False,,NULL
44,MetalScrollPaneUI,3,"void layoutHScrollbar(JScrollBar hsb, int x, int y, int width, int height)",False,,NULL
44,MetalScrollPaneUI,4,void syncScrollPaneWithViewport(JScrollPane sp),False,,NULL
44,MetalScrollPaneUI,5,void syncWithScrollPane(JScrollPane sp),False,,NULL
45,MetalSeparatorUI,1,void installUI(JComponent c),False,,NULL
45,MetalSeparatorUI,2,void uninstallUI(JComponent c),False,,NULL
45,MetalSeparatorUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
45,MetalSeparatorUI,4,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
45,MetalSeparatorUI,5,"void paintVerticalPartOfLeg(Graphics g, Rectangle data, Insets insets)",False,,NULL
46,MetalSliderUI,1,void paintThumb(Graphics g),True,,"

paintThumb
public void paintThumb(Graphics g)

Overrides:
paintThumb in class BasicSliderUI


"
46,MetalSliderUI,2,void paintTrack(Graphics g),True,,"

paintTrack
public void paintTrack(Graphics g)

Overrides:
paintTrack in class BasicSliderUI


"
46,MetalSliderUI,3,void paintFocus(Graphics g),True,,"

paintFocus
public void paintFocus(Graphics g)

Overrides:
paintFocus in class BasicSliderUI


"
46,MetalSliderUI,4,void paintTicks(Graphics g),False,,NULL
46,MetalSliderUI,5,void paintLabels(Graphics g),False,,NULL
47,MetalSplitPaneUI,1,void finishDrag(int newLocation),False,,NULL
47,MetalSplitPaneUI,2,"void startDrag(int newLocation, int dividerIndex)",False,,NULL
47,MetalSplitPaneUI,3,void resetToPreferredSizes(JSplitPane jc),False,,NULL
47,MetalSplitPaneUI,4,"void setContinuousLayout(JSplitPane jc, boolean newContinuousLayout)",False,,NULL
47,MetalSplitPaneUI,5,"void setDividerLocation(JSplitPane jc, int location)",False,,NULL
48,MetalTabbedPaneUI,1,void installUI(JComponent c),False,,NULL
48,MetalTabbedPaneUI,2,void uninstallUI(JComponent c),False,,NULL
48,MetalTabbedPaneUI,3,"Rectangle getTabBounds(JTabbedPane pane, int index)",False,,NULL
48,MetalTabbedPaneUI,4,"int tabForCoordinate(JTabbedPane pane, int x, int y)",False,,NULL
48,MetalTabbedPaneUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicTabbedPaneUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
49,MetalTextFieldUI,1,void installUI(JComponent c),False,,NULL
49,MetalTextFieldUI,2,void uninstallUI(JComponent c),False,,NULL
49,MetalTextFieldUI,3,MetalTextFieldUI createUI(JComponent c),False,,NULL
49,MetalTextFieldUI,4,"void paint(Graphics g, JComponent c)",False,,NULL
49,MetalTextFieldUI,5,Dimension getPreferredSize(JComponent c),False,,NULL
50,MetalTheme,1,ColorUIResource getPrimary1(),True,,"

getPrimary1
protected abstract ColorUIResource getPrimary1()
Returns the primary 1 color.

Returns:
the primary 1 color


"
50,MetalTheme,2,ColorUIResource getPrimary2(),True,,"

getPrimary2
protected abstract ColorUIResource getPrimary2()
Returns the primary 2 color.

Returns:
the primary 2 color


"
50,MetalTheme,3,ColorUIResource getPrimary3(),True,,"

getPrimary3
protected abstract ColorUIResource getPrimary3()
Returns the primary 3 color.

Returns:
the primary 3 color


"
50,MetalTheme,4,ColorUIResource getSecondary1(),True,,"

getSecondary1
protected abstract ColorUIResource getSecondary1()
Returns the secondary 1 color.

Returns:
the secondary 1 color


"
50,MetalTheme,5,ColorUIResource getSecondary2(),True,,"

getSecondary2
protected abstract ColorUIResource getSecondary2()
Returns the secondary 2 color.

Returns:
the secondary 2 color


"
51,MetalToggleButtonUI,1,void installUI(JComponent c),False,,NULL
51,MetalToggleButtonUI,2,void uninstallUI(JComponent c),False,,NULL
51,MetalToggleButtonUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
51,MetalToggleButtonUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
51,MetalToggleButtonUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
52,MetalToolBarUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicToolBarUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
52,MetalToolBarUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicToolBarUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
52,MetalToolBarUI,3,Dimension getPreferredSize(JComponent c),False,,NULL
52,MetalToolBarUI,4,"void paint(Graphics g, JComponent c)",False,,NULL
52,MetalToolBarUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics g,
                   JComponent c)
If necessary paints the background of the component, then invokes
 paint.

Overrides:
update in class ComponentUI
Parameters:
g - Graphics to paint to
c - JComponent painting on
Throws:
NullPointerException - if g or c is
         null
Since:
1.5
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent), 
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent)


"
53,MetalToolTipUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicToolTipUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
53,MetalToolTipUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicToolTipUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
53,MetalToolTipUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicToolTipUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
53,MetalToolTipUI,4,Dimension getMinimumSize(JComponent c),False,,NULL
53,MetalToolTipUI,5,Dimension getMaximumSize(JComponent c),False,,NULL
54,MetalTreeUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class BasicTreeUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
54,MetalTreeUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class BasicTreeUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
54,MetalTreeUI,3,"Rectangle getPathBounds(JTree tree, TreePath path)",False,,NULL
54,MetalTreeUI,4,"TreePath getPathForRow(JTree tree, int row)",False,,NULL
54,MetalTreeUI,5,"int getRowForPath(JTree tree, TreePath path)",False,,NULL
55,OceanTheme,1,Color getPrimary1(),False,,NULL
55,OceanTheme,2,Color getPrimary2(),False,,NULL
55,OceanTheme,3,Color getPrimary3(),False,,NULL
55,OceanTheme,4,Color getSecondary1(),False,,NULL
55,OceanTheme,5,Color getSecondary2(),False,,NULL
