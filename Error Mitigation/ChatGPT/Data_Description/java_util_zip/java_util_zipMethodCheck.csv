Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Adler32,1,"void update(byte[] buf, int off, int len)",True,,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
0,Adler32,2,void update(int b),True,,"

update
public void update(int b)
Updates the checksum with the specified byte (the low eight
 bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
0,Adler32,3,void reset(),True,,"

reset
public void reset()
Resets the checksum to initial value.

Specified by:
reset in interface Checksum


"
0,Adler32,4,long getValue(),True,,"

getValue
public long getValue()
Returns the checksum value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
0,Adler32,5,void update(ByteBuffer buf),True,,"

update
public void update(ByteBuffer buffer)
Updates the checksum with the bytes from the specified buffer.

 The checksum is updated using
 buffer.remaining()
 bytes starting at
 buffer.position()
 Upon return, the buffer's position will be updated to its
 limit; its limit will not have been changed.

Parameters:
buffer - the ByteBuffer to update the checksum with
Since:
1.8


"
1,CheckedInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a byte. Will block if no input is available.

Overrides:
read in class FilterInputStream
Returns:
the byte read, or -1 if the end of the stream is reached.
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
1,CheckedInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end
            of the stream is reached.
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
1,CheckedInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skips specified number of bytes of input.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to skip
Returns:
the actual number of bytes skipped
Throws:
IOException - if an I/O error has occurred


"
1,CheckedInputStream,4,Checksum getChecksum(),True,,"

getChecksum
public Checksum getChecksum()
Returns the Checksum for this input stream.

Returns:
the Checksum value


"
1,CheckedInputStream,5,void close(),False,,NULL
2,CheckedOutputStream,1,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes a byte. Will block until the byte is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written
Throws:
IOException - if an I/O error has occurred


"
2,CheckedOutputStream,2,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes. Will block until the bytes are
 actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the number of bytes to be written
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
2,CheckedOutputStream,3,void flush(),False,,NULL
2,CheckedOutputStream,4,Checksum getChecksum(),True,,"

getChecksum
public Checksum getChecksum()
Returns the Checksum for this output stream.

Returns:
the Checksum


"
2,CheckedOutputStream,5,void setChecksum(Checksum checksum),False,,NULL
3,CRC32,1,"void update(byte[] buf, int off, int len)",True,,"

update
public void update(byte[] b,
                   int off,
                   int len)
Updates the CRC-32 checksum with the specified array of bytes.

Specified by:
update in interface Checksum
Parameters:
b - the byte array to update the checksum with
off - the start offset of the data
len - the number of bytes to use for the update
Throws:
ArrayIndexOutOfBoundsException - if off is negative, or len is negative,
          or off+len is greater than the length of the
          array b


"
3,CRC32,2,void update(int b),True,,"

update
public void update(int b)
Updates the CRC-32 checksum with the specified byte (the low
 eight bits of the argument b).

Specified by:
update in interface Checksum
Parameters:
b - the byte to update the checksum with


"
3,CRC32,3,long getValue(),True,,"

getValue
public long getValue()
Returns CRC-32 value.

Specified by:
getValue in interface Checksum
Returns:
the current checksum value


"
3,CRC32,4,void reset(),True,,"

reset
public void reset()
Resets CRC-32 to initial value.

Specified by:
reset in interface Checksum


"
3,CRC32,5,void update(ByteBuffer buffer),True,,"

update
public void update(ByteBuffer buffer)
Updates the checksum with the bytes from the specified buffer.

 The checksum is updated using
 buffer.remaining()
 bytes starting at
 buffer.position()
 Upon return, the buffer's position will
 be updated to its limit; its limit will not have been changed.

Parameters:
buffer - the ByteBuffer to update the checksum with
Since:
1.8


"
4,Deflater,1,void setInput(byte[] input),True,,"

setInput
public void setInput(byte[] b)
Sets input data for compression. This should be called whenever
 needsInput() returns true indicating that more input data is required.

Parameters:
b - the input data bytes
See Also:
needsInput()


"
4,Deflater,2,void finish(),True,,"

finish
public void finish()
When called, indicates that compression should end with the current
 contents of the input buffer.

"
4,Deflater,3,int deflate(byte[] output),True,,"

deflate
public int deflate(byte[] b)
Compresses the input data and fills specified buffer with compressed
 data. Returns actual number of bytes of compressed data. A return value
 of 0 indicates that needsInput should be called
 in order to determine if more input data is required.

 This method uses NO_FLUSH as its compression flush mode.
 An invocation of this method of the form deflater.deflate(b)
 yields the same result as the invocation of
 deflater.deflate(b, 0, b.length, Deflater.NO_FLUSH).

Parameters:
b - the buffer for the compressed data
Returns:
the actual number of bytes of compressed data written to the
         output buffer


"
4,Deflater,4,void setLevel(int level),True,,"

setLevel
public void setLevel(int level)
Sets the compression level to the specified value.

  If the compression level is changed, the next invocation
 of deflate will compress the input available so far
 with the old level (and may be flushed); the new level will
 take effect only after that invocation.

Parameters:
level - the new compression level (0-9)
Throws:
IllegalArgumentException - if the compression level is invalid


"
4,Deflater,5,void setStrategy(int strategy),True,,"

setStrategy
public void setStrategy(int strategy)
Sets the compression strategy to the specified value.

  If the compression strategy is changed, the next invocation
 of deflate will compress the input available so far with
 the old strategy (and may be flushed); the new strategy will take
 effect only after that invocation.

Parameters:
strategy - the new compression strategy
Throws:
IllegalArgumentException - if the compression strategy is
                                     invalid


"
5,DeflaterInputStream,1,int read(byte[] b),False,,NULL
5,DeflaterInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads compressed data into a byte array.
 This method will block until some input can be read and compressed.

Overrides:
read in class FilterInputStream
Parameters:
b - buffer into which the data is read
off - starting offset of the data within b
len - maximum number of compressed bytes to read into b
Returns:
the actual number of bytes read, or -1 if the end of the
 uncompressed input stream is reached
Throws:
IndexOutOfBoundsException - if len > b.length - off
IOException - if an I/O error occurs or if this input stream is
 already closed
See Also:
FilterInputStream.in


"
5,DeflaterInputStream,3,int read(),True,,"

read
public int read()
         throws IOException
Reads a single byte of compressed data from the input stream.
 This method will block until some input can be read and compressed.

Overrides:
read in class FilterInputStream
Returns:
a single byte of compressed data, or -1 if the end of the
 uncompressed input stream is reached
Throws:
IOException - if an I/O error occurs or if this stream is
 already closed
See Also:
FilterInputStream.in


"
5,DeflaterInputStream,4,void close(),True,,"

close
public void close()
           throws IOException
Closes this input stream and its underlying input stream, discarding
 any pending uncompressed data.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs
See Also:
FilterInputStream.in


"
5,DeflaterInputStream,5,int available(),True,,"

available
public int available()
              throws IOException
Returns 0 after EOF has been reached, otherwise always return 1.
 
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking

Overrides:
available in class FilterInputStream
Returns:
zero after the end of the underlying input stream has been
 reached, otherwise always returns 1
Throws:
IOException - if an I/O error occurs or if this stream is
 already closed


"
6,DeflaterOutputStream,1,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the compressed output stream. This
 method will block until all the bytes are written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - if an I/O error has occurred
See Also:
FilterOutputStream.write(int)


"
6,DeflaterOutputStream,2,void finish(),True,,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Throws:
IOException - if an I/O error has occurred


"
6,DeflaterOutputStream,3,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes the compressed output stream.

 If syncFlush is true when this compressed output stream is
 constructed, this method first flushes the underlying compressor
 with the flush mode Deflater.SYNC_FLUSH to force
 all pending data to be flushed out to the output stream and then
 flushes the output stream. Otherwise this method only flushes the
 output stream without flushing the compressor.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error has occurred
Since:
1.7
See Also:
FilterOutputStream.out


"
6,DeflaterOutputStream,4,void setLevel(int level),False,,NULL
6,DeflaterOutputStream,5,void setStrategy(int strategy),False,,NULL
7,GZIPInputStream,1,"int read(byte[] buf, int off, int len)",True,,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
          compressed input stream is reached
Throws:
NullPointerException - If buf is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 buf.length - off
ZipException - if the compressed input data is corrupt.
IOException - if an I/O error has occurred.
See Also:
FilterInputStream.in


"
7,GZIPInputStream,2,void close(),True,,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
7,GZIPInputStream,3,int available(),False,,NULL
7,GZIPInputStream,4,long skip(long n),False,,NULL
7,GZIPInputStream,5,void finish(),False,,NULL
8,GZIPOutputStream,1,void finish(),True,,"

finish
public void finish()
            throws IOException
Finishes writing compressed data to the output stream without closing
 the underlying stream. Use this method when applying multiple filters
 in succession to the same output stream.

Overrides:
finish in class DeflaterOutputStream
Throws:
IOException - if an I/O error has occurred


"
8,GZIPOutputStream,2,"void write(byte[] buf, int off, int len)",True,,"

write
public void write(byte[] buf,
                  int off,
                  int len)
           throws IOException
Writes array of bytes to the compressed output stream. This method
 will block until all the bytes are written.

Overrides:
write in class DeflaterOutputStream
Parameters:
buf - the data to be written
off - the start offset of the data
len - the length of the data
Throws:
IOException - If an I/O error has occurred.
See Also:
FilterOutputStream.write(int)


"
8,GZIPOutputStream,3,void setLevel(int level),False,,NULL
8,GZIPOutputStream,4,void setComment(String comment),False,,NULL
8,GZIPOutputStream,5,void setMethod(int method),False,,NULL
9,Inflater,1,"void setInput(byte[] b, int off, int len)",True,,"

setInput
public void setInput(byte[] b,
                     int off,
                     int len)
Sets input data for decompression. Should be called whenever
 needsInput() returns true indicating that more input data is
 required.

Parameters:
b - the input data bytes
off - the start offset of the input data
len - the length of the input data
See Also:
needsInput()


"
9,Inflater,2,"int inflate(byte[] b, int off, int len)",True,,"

inflate
public int inflate(byte[] b,
                   int off,
                   int len)
            throws DataFormatException
Uncompresses bytes into specified buffer. Returns actual number
 of bytes uncompressed. A return value of 0 indicates that
 needsInput() or needsDictionary() should be called in order to
 determine if more input data or a preset dictionary is required.
 In the latter case, getAdler() can be used to get the Adler-32
 value of the dictionary required.

Parameters:
b - the buffer for the uncompressed data
off - the start offset of the data
len - the maximum number of uncompressed bytes
Returns:
the actual number of uncompressed bytes
Throws:
DataFormatException - if the compressed data format is invalid
See Also:
needsInput(), 
needsDictionary()


"
9,Inflater,3,boolean needsInput(),True,,"

needsInput
public boolean needsInput()
Returns true if no data remains in the input buffer. This can
 be used to determine if #setInput should be called in order
 to provide more input.

Returns:
true if no data remains in the input buffer


"
9,Inflater,4,boolean finished(),True,,"

finished
public boolean finished()
Returns true if the end of the compressed data stream has been
 reached.

Returns:
true if the end of the compressed data stream has been
 reached


"
9,Inflater,5,int getRemaining(),True,,"

getRemaining
public int getRemaining()
Returns the total number of bytes remaining in the input buffer.
 This can be used to find out what bytes still remain in the input
 buffer after decompression has finished.

Returns:
the total number of bytes remaining in the input buffer


"
10,InflaterInputStream,1,int read(byte[] b),False,,NULL
10,InflaterInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads uncompressed data into an array of bytes. If len is not
 zero, the method will block until some input can be decompressed; otherwise,
 no bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         compressed input is reached or a preset dictionary is needed
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
10,InflaterInputStream,3,void setDictionary(byte[] b),False,,NULL
10,InflaterInputStream,4,boolean needsInput(),False,,NULL
10,InflaterInputStream,5,void setInput(byte[] b),False,,NULL
11,InflaterOutputStream,1,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes an array of bytes to the uncompressed output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - buffer containing compressed data to decompress and write to
 the output stream
off - starting offset of the compressed data within b
len - number of bytes to decompress from b
Throws:
IndexOutOfBoundsException - if off < 0, or if
 len < 0, or if len > b.length - off
IOException - if an I/O error occurs or this stream is already
 closed
NullPointerException - if b is null
ZipException - if a compression (ZIP) format error occurs
See Also:
FilterOutputStream.write(int)


"
11,InflaterOutputStream,2,void finish(),True,,"

finish
public void finish()
            throws IOException
Finishes writing uncompressed data to the output stream without closing
 the underlying stream.  Use this method when applying multiple filters in
 succession to the same output stream.

Throws:
IOException - if an I/O error occurs or this stream is already
 closed


"
11,InflaterOutputStream,3,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this output stream, forcing any pending buffered output bytes to be
 written.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs or this stream is already
 closed
See Also:
FilterOutputStream.out


"
11,InflaterOutputStream,4,void setDictionary(byte[] b),False,,NULL
11,InflaterOutputStream,5,void setLevel(int level),False,,NULL
12,ZipEntry,1,String getName(),True,,"

getName
public String getName()
Returns the name of the entry.

Returns:
the name of the entry


"
12,ZipEntry,2,long getSize(),True,,"

getSize
public long getSize()
Returns the uncompressed size of the entry data.

Returns:
the uncompressed size of the entry data, or -1 if not known
See Also:
setSize(long)


"
12,ZipEntry,3,long getCompressedSize(),True,,"

getCompressedSize
public long getCompressedSize()
Returns the size of the compressed entry data.

  In the case of a stored entry, the compressed size will be the same
 as the uncompressed size of the entry.

Returns:
the size of the compressed entry data, or -1 if not known
See Also:
setCompressedSize(long)


"
12,ZipEntry,4,long getTime(),True,,"

getTime
public long getTime()
Returns the last modification time of the entry.

  If the entry is read from a ZIP file or ZIP file formatted
 input stream, this is the last modification time from the date and time fields of the zip file entry. The
 default TimeZone is used
 to convert the standard MS-DOS formatted date and time to the
 epoch time.

Returns:
The last modification time of the entry in milliseconds
          since the epoch, or -1 if not specified
See Also:
setTime(long), 
setLastModifiedTime(FileTime)


"
12,ZipEntry,5,boolean isDirectory(),True,,"

isDirectory
public boolean isDirectory()
Returns true if this is a directory entry. A directory entry is
 defined to be one whose name ends with a '/'.

Returns:
true if this is a directory entry


"
13,ZipFile,1,ZipEntry getEntry(String name),True,,"

getEntry
public ZipEntry getEntry(String name)
Returns the zip file entry for the specified name, or null
 if not found.

Parameters:
name - the name of the entry
Returns:
the zip file entry, or null if not found
Throws:
IllegalStateException - if the zip file has been closed


"
13,ZipFile,2,Enumeration<? extends ZipEntry> entries(),True,,"

entries
public Enumeration<? extends ZipEntry> entries()
Returns an enumeration of the ZIP file entries.

Returns:
an enumeration of the ZIP file entries
Throws:
IllegalStateException - if the zip file has been closed


"
13,ZipFile,3,InputStream getInputStream(ZipEntry entry),True,,"

getInputStream
public InputStream getInputStream(ZipEntry entry)
                           throws IOException
Returns an input stream for reading the contents of the specified
 zip file entry.

  Closing this ZIP file will, in turn, close all input
 streams that have been returned by invocations of this method.

Parameters:
entry - the zip file entry
Returns:
the input stream for reading the contents of the specified
 zip file entry.
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred
IllegalStateException - if the zip file has been closed


"
13,ZipFile,4,void close(),True,,"

close
public void close()
           throws IOException
Closes the ZIP file.
  Closing this ZIP file will close all of the input streams
 previously returned by invocations of the getInputStream method.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error has occurred


"
13,ZipFile,5,int size(),True,,"

size
public int size()
Returns the number of entries in the ZIP file.

Returns:
the number of entries in the ZIP file
Throws:
IllegalStateException - if the zip file has been closed


"
14,ZipInputStream,1,ZipEntry getNextEntry(),True,,"

getNextEntry
public ZipEntry getNextEntry()
                      throws IOException
Reads the next ZIP file entry and positions the stream at the
 beginning of the entry data.

Returns:
the next ZIP file entry, or null if there are no more entries
Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred


"
14,ZipInputStream,2,void closeEntry(),True,,"

closeEntry
public void closeEntry()
                throws IOException
Closes the current ZIP entry and positions the stream for reading the
 next entry.

Throws:
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred


"
14,ZipInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads from the current ZIP entry into an array of bytes.
 If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InflaterInputStream
Parameters:
b - the buffer into which the data is read
off - the start offset in the destination array b
len - the maximum number of bytes read
Returns:
the actual number of bytes read, or -1 if the end of the
         entry is reached
Throws:
NullPointerException - if b is null.
IndexOutOfBoundsException - if off is negative,
 len is negative, or len is greater than
 b.length - off
ZipException - if a ZIP file error has occurred
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
14,ZipInputStream,4,void close(),True,,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InflaterInputStream
Throws:
IOException - if an I/O error has occurred
See Also:
FilterInputStream.in


"
14,ZipInputStream,5,int available(),True,,"

available
public int available()
              throws IOException
Returns 0 after EOF has reached for the current entry data,
 otherwise always return 1.
 
 Programs should not count on this method to return the actual number
 of bytes that could be read without blocking.

Overrides:
available in class InflaterInputStream
Returns:
1 before EOF and 0 after EOF has reached for current entry.
Throws:
IOException - if an I/O error occurs.


"
15,ZipOutputStream,1,void putNextEntry(ZipEntry e),True,,"

putNextEntry
public void putNextEntry(ZipEntry e)
                  throws IOException
Begins writing a new ZIP file entry and positions the stream to the
 start of the entry data. Closes the current entry if still active.
 The default compression method will be used if no compression method
 was specified for the entry, and the current time will be used if
 the entry has no set modification time.

Parameters:
e - the ZIP entry to be written
Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
15,ZipOutputStream,2,void closeEntry(),True,,"

closeEntry
public void closeEntry()
                throws IOException
Closes the current ZIP entry and positions the stream for writing
 the next entry.

Throws:
ZipException - if a ZIP format error has occurred
IOException - if an I/O error has occurred


"
15,ZipOutputStream,3,void setComment(String comment),True,,"

setComment
public void setComment(String comment)
Sets the ZIP file comment.

Parameters:
comment - the comment string
Throws:
IllegalArgumentException - if the length of the specified
            ZIP file comment is greater than 0xFFFF bytes


"
15,ZipOutputStream,4,void setMethod(int method),True,,"

setMethod
public void setMethod(int method)
Sets the default compression method for subsequent entries. This
 default will be used whenever the compression method is not specified
 for an individual ZIP file entry, and is initially set to DEFLATED.

Parameters:
method - the default compression method
Throws:
IllegalArgumentException - if the specified compression method
            is invalid


"
15,ZipOutputStream,5,void setLevel(int level),True,,"

setLevel
public void setLevel(int level)
Sets the compression level for subsequent entries which are DEFLATED.
 The default setting is DEFAULT_COMPRESSION.

Parameters:
level - the compression level (0-9)
Throws:
IllegalArgumentException - if the compression level is invalid


"
