ClassName,Method,Return Type,Description,Full Description
Date,getHours(),int,Deprecated.,"

getHours
@Deprecated
public int getHours()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getHours in class Date
Returns:
the hour represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setHours(int)


"
Date,getMinutes(),int,Deprecated.,"

getMinutes
@Deprecated
public int getMinutes()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getMinutes in class Date
Returns:
the number of minutes past the hour represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setMinutes(int)


"
Date,getSeconds(),int,Deprecated.,"

getSeconds
@Deprecated
public int getSeconds()
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
getSeconds in class Date
Returns:
the number of seconds past the minute represented by this date.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
setSeconds(int)


"
Date,setHours(int i),void,Deprecated.,"

setHours
@Deprecated
public void setHours(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setHours in class Date
Parameters:
i - the hour value.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getHours()


"
Date,setMinutes(int i),void,Deprecated.,"

setMinutes
@Deprecated
public void setMinutes(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setMinutes in class Date
Parameters:
i - the value of the minutes.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getMinutes()


"
Date,setSeconds(int i),void,Deprecated.,"

setSeconds
@Deprecated
public void setSeconds(int i)
Deprecated. 
This method is deprecated and should not be used because SQL Date
 values do not have a time component.

Overrides:
setSeconds in class Date
Parameters:
i - the seconds value.
Throws:
IllegalArgumentException - if this method is invoked
See Also:
getSeconds()


"
Date,setTime(long date),void,Sets an existing Date object using the given milliseconds time value.,"

setTime
public void setTime(long date)
Sets an existing Date object
 using the given milliseconds time value.
 If the given milliseconds value contains time information,
 the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

Overrides:
setTime in class Date
Parameters:
date - milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.


"
Date,toInstant(),Instant,This method always throws an UnsupportedOperationException and should not be used because SQL Date values do not have a time component.,"

toInstant
public Instant toInstant()
This method always throws an UnsupportedOperationException and should
 not be used because SQL Date values do not have a time
 component.

Overrides:
toInstant in class Date
Returns:
an instant representing the same point on the time-line as
  this Date object
Throws:
UnsupportedOperationException - if this method is invoked


"
Date,toLocalDate(),LocalDate,Converts this Date object to a LocalDate,"

toLocalDate
public LocalDate toLocalDate()
Converts this Date object to a LocalDate

 The conversion creates a LocalDate that represents the same
 date value as this Date in local time zone

Returns:
a LocalDate object representing the same date value
Since:
1.8


"
Date,toString(),String,Formats a date in the date escape format yyyy-mm-dd.,"

toString
public String toString()
Formats a date in the date escape format yyyy-mm-dd.
 

Overrides:
toString in class Date
Returns:
a String in yyyy-mm-dd format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
Date,valueOf(LocalDate date),static Date,"Obtains an instance of Date from a LocalDate object with the same year, month and day of month value as the given LocalDate.","

valueOf
public static Date valueOf(LocalDate date)
Obtains an instance of Date from a LocalDate object
 with the same year, month and day of month value as the given
 LocalDate.
 
 The provided LocalDate is interpreted as the local date
 in the local time zone.

Parameters:
date - a LocalDate to convert
Returns:
a Date object
Throws:
NullPointerException - if date is null
Since:
1.8


"
Date,valueOf(String s),static Date,Converts a string in JDBC date escape format to a Date value.,"

valueOf
public static Date valueOf(String s)
Converts a string in JDBC date escape format to
 a Date value.

Parameters:
s - a String object representing a date in
        in the format ""yyyy-[m]m-[d]d"". The leading zero for mm
 and dd may also be omitted.
Returns:
a java.sql.Date object representing the
         given date
Throws:
IllegalArgumentException - if the date given is not in the
         JDBC date escape format (yyyy-[m]m-[d]d)


"
DriverManager,deregisterDriver(Driver driver),static void,Removes the specified driver from the DriverManager's list of registered drivers.,"

deregisterDriver
public static void deregisterDriver(Driver driver)
                             throws SQLException
Removes the specified driver from the DriverManager's list of
 registered drivers.
 
 If a null value is specified for the driver to be removed, then no
 action is taken.
 
 If a security manager exists and its checkPermission denies
 permission, then a SecurityException will be thrown.
 
 If the specified driver is not found in the list of registered drivers,
 then no action is taken.  If the driver was found, it will be removed
 from the list of registered drivers.
 
 If a DriverAction instance was specified when the JDBC driver was
 registered, its deregister method will be called
 prior to the driver being removed from the list of registered drivers.

Parameters:
driver - the JDBC Driver to remove
Throws:
SQLException - if a database access error occurs
SecurityException - if a security manager exists and its
 checkPermission method denies permission to deregister a driver.
See Also:
SecurityManager.checkPermission(java.security.Permission)


"
DriverManager,getConnection(String url),static Connection,Attempts to establish a connection to the given database URL.,"

getConnection
public static Connection getConnection(String url)
                                throws SQLException
Attempts to establish a connection to the given database URL.
 The DriverManager attempts to select an appropriate driver from
 the set of registered JDBC drivers.

Parameters:
url - a database url of the form
   jdbc:subprotocol:subname
Returns:
a connection to the URL
Throws:
SQLException - if a database access error occurs or the url is
 null
SQLTimeoutException - when the driver has determined that the
 timeout value specified by the setLoginTimeout method
 has been exceeded and has at least tried to cancel the
 current database connection attempt


"
DriverManager,"getConnection(String url, Properties info)",static Connection,Attempts to establish a connection to the given database URL.,"

getConnection
public static Connection getConnection(String url,
                                       Properties info)
                                throws SQLException
Attempts to establish a connection to the given database URL.
 The DriverManager attempts to select an appropriate driver from
 the set of registered JDBC drivers.

Note: If a property is specified as part of the url and
 is also specified in the Properties object, it is
 implementation-defined as to which value will take precedence.
 For maximum portability, an application should only specify a
 property once.

Parameters:
url - a database url of the form
  jdbc:subprotocol:subname
info - a list of arbitrary string tag/value pairs as
 connection arguments; normally at least a ""user"" and
 ""password"" property should be included
Returns:
a Connection to the URL
Throws:
SQLException - if a database access error occurs or the url is
 null
SQLTimeoutException - when the driver has determined that the
 timeout value specified by the setLoginTimeout method
 has been exceeded and has at least tried to cancel the
 current database connection attempt


"
DriverManager,"getConnection(String url, String user, String password)",static Connection,Attempts to establish a connection to the given database URL.,"

getConnection
public static Connection getConnection(String url,
                                       String user,
                                       String password)
                                throws SQLException
Attempts to establish a connection to the given database URL.
 The DriverManager attempts to select an appropriate driver from
 the set of registered JDBC drivers.

Note: If the user or password property are
 also specified as part of the url, it is
 implementation-defined as to which value will take precedence.
 For maximum portability, an application should only specify a
 property once.

Parameters:
url - a database url of the form
 jdbc:subprotocol:subname
user - the database user on whose behalf the connection is being
   made
password - the user's password
Returns:
a connection to the URL
Throws:
SQLException - if a database access error occurs or the url is
 null
SQLTimeoutException - when the driver has determined that the
 timeout value specified by the setLoginTimeout method
 has been exceeded and has at least tried to cancel the
 current database connection attempt


"
DriverManager,getDriver(String url),static Driver,Attempts to locate a driver that understands the given URL.,"

getDriver
public static Driver getDriver(String url)
                        throws SQLException
Attempts to locate a driver that understands the given URL.
 The DriverManager attempts to select an appropriate driver from
 the set of registered JDBC drivers.

Parameters:
url - a database URL of the form
     jdbc:subprotocol:subname
Returns:
a Driver object representing a driver
 that can connect to the given URL
Throws:
SQLException - if a database access error occurs


"
DriverManager,getDrivers(),static Enumeration<Driver>,Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access.,"

getDrivers
public static Enumeration<Driver> getDrivers()
Retrieves an Enumeration with all of the currently loaded JDBC drivers
 to which the current caller has access.

 Note: The classname of a driver can be found using
 d.getClass().getName()

Returns:
the list of JDBC Drivers loaded by the caller's class loader


"
DriverManager,getLoginTimeout(),static int,Gets the maximum time in seconds that a driver can wait when attempting to log in to a database.,"

getLoginTimeout
public static int getLoginTimeout()
Gets the maximum time in seconds that a driver can wait
 when attempting to log in to a database.

Returns:
the driver login time limit in seconds
See Also:
setLoginTimeout(int)


"
DriverManager,getLogStream(),static PrintStream,Deprecated. Use getLogWriter,"

getLogStream
@Deprecated
public static PrintStream getLogStream()
Deprecated. Use getLogWriter
Retrieves the logging/tracing PrintStream that is used by the DriverManager
 and all drivers.

Returns:
the logging/tracing PrintStream; if disabled, is null
See Also:
setLogStream(java.io.PrintStream)


"
DriverManager,getLogWriter(),static PrintWriter,Retrieves the log writer.,"

getLogWriter
public static PrintWriter getLogWriter()
Retrieves the log writer.

 The getLogWriter and setLogWriter
 methods should be used instead
 of the get/setlogStream methods, which are deprecated.

Returns:
a java.io.PrintWriter object
Since:
1.2
See Also:
setLogWriter(java.io.PrintWriter)


"
DriverManager,println(String message),static void,Prints a message to the current JDBC log stream.,"

println
public static void println(String message)
Prints a message to the current JDBC log stream.

Parameters:
message - a log or tracing message


"
DriverManager,registerDriver(Driver driver),static void,Registers the given driver with the DriverManager.,"

registerDriver
public static void registerDriver(Driver driver)
                           throws SQLException
Registers the given driver with the DriverManager.
 A newly-loaded driver class should call
 the method registerDriver to make itself
 known to the DriverManager. If the driver is currently
 registered, no action is taken.

Parameters:
driver - the new JDBC Driver that is to be registered with the
               DriverManager
Throws:
SQLException - if a database access error occurs
NullPointerException - if driver is null


"
DriverManager,"registerDriver(Driver driver, DriverAction da)",static void,Registers the given driver with the DriverManager.,"

registerDriver
public static void registerDriver(Driver driver,
                                  DriverAction da)
                           throws SQLException
Registers the given driver with the DriverManager.
 A newly-loaded driver class should call
 the method registerDriver to make itself
 known to the DriverManager. If the driver is currently
 registered, no action is taken.

Parameters:
driver - the new JDBC Driver that is to be registered with the
               DriverManager
da - the DriverAction implementation to be used when
               DriverManager#deregisterDriver is called
Throws:
SQLException - if a database access error occurs
NullPointerException - if driver is null
Since:
1.8


"
DriverManager,setLoginTimeout(int seconds),static void,Sets the maximum time in seconds that a driver will wait while attempting to connect to a database once the driver has been identified.,"

setLoginTimeout
public static void setLoginTimeout(int seconds)
Sets the maximum time in seconds that a driver will wait
 while attempting to connect to a database once the driver has
 been identified.

Parameters:
seconds - the login time limit in seconds; zero means there is no limit
See Also:
getLoginTimeout()


"
DriverManager,setLogStream(PrintStream out),static void,Deprecated. Use setLogWriter,"

setLogStream
@Deprecated
public static void setLogStream(PrintStream out)
Deprecated. Use setLogWriter
Sets the logging/tracing PrintStream that is used
 by the DriverManager
 and all drivers.

 In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
 to see that there is an SQLPermission object before setting
 the logging stream.  If a SecurityManager exists and its
 checkPermission method denies setting the log writer, this
 method throws a java.lang.SecurityException.

Parameters:
out - the new logging/tracing PrintStream; to disable, set to null
Throws:
SecurityException - if a security manager exists and its
    checkPermission method denies setting the log stream
See Also:
SecurityManager.checkPermission(java.security.Permission), 
getLogStream()


"
DriverManager,setLogWriter(PrintWriter out),static void,Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers.,"

setLogWriter
public static void setLogWriter(PrintWriter out)
Sets the logging/tracing PrintWriter object
 that is used by the DriverManager and all drivers.
 
 There is a minor versioning problem created by the introduction
 of the method setLogWriter.  The
 method setLogWriter cannot create a PrintStream object
 that will be returned by getLogStream---the Java platform does
 not provide a backward conversion.  As a result, a new application
 that uses setLogWriter and also uses a JDBC 1.0 driver that uses
 getLogStream will likely not see debugging information written
 by that driver.

 Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
 to see that there is an SQLPermission object before setting
 the logging stream.  If a SecurityManager exists and its
 checkPermission method denies setting the log writer, this
 method throws a java.lang.SecurityException.

Parameters:
out - the new logging/tracing PrintStream object;
      null to disable logging and tracing
Throws:
SecurityException - if a security manager exists and its
    checkPermission method denies
    setting the log writer
Since:
1.2
See Also:
SecurityManager.checkPermission(java.security.Permission), 
getLogWriter()


"
Time,getDate(),int,Deprecated.,"

getDate
@Deprecated
public int getDate()
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a date component.

Overrides:
getDate in class Date
Returns:
the day of the month represented by this date.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
setDate(int)


"
Time,getDay(),int,Deprecated.,"

getDay
@Deprecated
public int getDay()
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a day component.

Overrides:
getDay in class Date
Returns:
the day of the week represented by this date.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
Calendar


"
Time,getMonth(),int,Deprecated.,"

getMonth
@Deprecated
public int getMonth()
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a month component.

Overrides:
getMonth in class Date
Returns:
the month represented by this date.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
setMonth(int)


"
Time,getYear(),int,Deprecated.,"

getYear
@Deprecated
public int getYear()
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a year component.

Overrides:
getYear in class Date
Returns:
the year represented by this date, minus 1900.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
setYear(int)


"
Time,setDate(int i),void,Deprecated.,"

setDate
@Deprecated
public void setDate(int i)
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a date component.

Overrides:
setDate in class Date
Parameters:
i - the day of the month value between 1-31.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
getDate()


"
Time,setMonth(int i),void,Deprecated.,"

setMonth
@Deprecated
public void setMonth(int i)
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a month component.

Overrides:
setMonth in class Date
Parameters:
i - the month value between 0-11.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
getMonth()


"
Time,setTime(long time),void,Sets a Time object using a milliseconds time value.,"

setTime
public void setTime(long time)
Sets a Time object using a milliseconds time value.

Overrides:
setTime in class Date
Parameters:
time - milliseconds since January 1, 1970, 00:00:00 GMT;
             a negative number is milliseconds before
               January 1, 1970, 00:00:00 GMT


"
Time,setYear(int i),void,Deprecated.,"

setYear
@Deprecated
public void setYear(int i)
Deprecated. 
This method is deprecated and should not be used because SQL TIME
 values do not have a year component.

Overrides:
setYear in class Date
Parameters:
i - the year value.
Throws:
IllegalArgumentException - if this
           method is invoked
See Also:
getYear()


"
Time,toInstant(),Instant,This method always throws an UnsupportedOperationException and should not be used because SQL Time values do not have a date component.,"

toInstant
public Instant toInstant()
This method always throws an UnsupportedOperationException and should
 not be used because SQL Time values do not have a date
 component.

Overrides:
toInstant in class Date
Returns:
an instant representing the same point on the time-line as
  this Date object
Throws:
UnsupportedOperationException - if this method is invoked


"
Time,toLocalTime(),LocalTime,Converts this Time object to a LocalTime.,"

toLocalTime
public LocalTime toLocalTime()
Converts this Time object to a LocalTime.
 
 The conversion creates a LocalTime that represents the same
 hour, minute, and second time value as this Time.

Returns:
a LocalTime object representing the same time value
Since:
1.8


"
Time,toString(),String,Formats a time in JDBC time escape format.,"

toString
public String toString()
Formats a time in JDBC time escape format.

Overrides:
toString in class Date
Returns:
a String in hh:mm:ss format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
Time,valueOf(LocalTime time),static Time,"Obtains an instance of Time from a LocalTime object with the same hour, minute and second time value as the given LocalTime.","

valueOf
public static Time valueOf(LocalTime time)
Obtains an instance of Time from a LocalTime object
 with the same hour, minute and second time value as the given
 LocalTime.

Parameters:
time - a LocalTime to convert
Returns:
a Time object
Throws:
NullPointerException - if time is null
Since:
1.8


"
Time,valueOf(String s),static Time,Converts a string in JDBC time escape format to a Time value.,"

valueOf
public static Time valueOf(String s)
Converts a string in JDBC time escape format to a Time value.

Parameters:
s - time in format ""hh:mm:ss""
Returns:
a corresponding Time object


"
Timestamp,after(Timestamp ts),boolean,Indicates whether this Timestamp object is later than the given Timestamp object.,"

after
public boolean after(Timestamp ts)
Indicates whether this Timestamp object is
 later than the given Timestamp object.

Parameters:
ts - the Timestamp value to compare with
Returns:
true if this Timestamp object is later;
        false otherwise


"
Timestamp,before(Timestamp ts),boolean,Indicates whether this Timestamp object is earlier than the given Timestamp object.,"

before
public boolean before(Timestamp ts)
Indicates whether this Timestamp object is
 earlier than the given Timestamp object.

Parameters:
ts - the Timestamp value to compare with
Returns:
true if this Timestamp object is earlier;
        false otherwise


"
Timestamp,compareTo(Date o),int,Compares this Timestamp object to the given Date object.,"

compareTo
public int compareTo(Date o)
Compares this Timestamp object to the given
 Date object.

Specified by:
compareTo in interface Comparable<Date>
Overrides:
compareTo in class Date
Parameters:
o - the Date to be compared to
          this Timestamp object
Returns:
the value 0 if this Timestamp object
          and the given object are equal; a value less than 0
          if this  Timestamp object is before the given argument;
          and a value greater than 0 if this
          Timestamp object is after the given argument.
Since:
1.5


"
Timestamp,compareTo(Timestamp ts),int,Compares this Timestamp object to the given Timestamp object.,"

compareTo
public int compareTo(Timestamp ts)
Compares this Timestamp object to the given
 Timestamp object.

Parameters:
ts - the Timestamp object to be compared to
                this Timestamp object
Returns:
the value 0 if the two Timestamp
          objects are equal; a value less than 0 if this
          Timestamp object is before the given argument;
          and a value greater than 0 if this
          Timestamp object is after the given argument.
Since:
1.4


"
Timestamp,equals(Object ts),boolean,Tests to see if this Timestamp object is equal to the given object.,"

equals
public boolean equals(Object ts)
Tests to see if this Timestamp object is
 equal to the given object.

 This version of the method equals has been added
 to fix the incorrect
 signature of Timestamp.equals(Timestamp) and to preserve backward
 compatibility with existing class files.

 Note: This method is not symmetric with respect to the
 equals(Object) method in the base class.

Overrides:
equals in class Date
Parameters:
ts - the Object value to compare with
Returns:
true if the given Object is an instance
         of a Timestamp that
         is equal to this Timestamp object;
         false otherwise
See Also:
Date.getTime()


"
Timestamp,equals(Timestamp ts),boolean,Tests to see if this Timestamp object is equal to the given Timestamp object.,"

equals
public boolean equals(Timestamp ts)
Tests to see if this Timestamp object is
 equal to the given Timestamp object.

Parameters:
ts - the Timestamp value to compare with
Returns:
true if the given Timestamp
         object is equal to this Timestamp object;
         false otherwise


"
Timestamp,from(Instant instant),static Timestamp,Obtains an instance of Timestamp from an Instant object.,"

from
public static Timestamp from(Instant instant)
Obtains an instance of Timestamp from an Instant object.
 
Instant can store points on the time-line further in the future
 and further in the past than Date. In this scenario, this method
 will throw an exception.

Parameters:
instant - the instant to convert
Returns:
an Timestamp representing the same point on the time-line as
  the provided instant
Throws:
NullPointerException - if instant is null.
IllegalArgumentException - if the instant is too large to
  represent as a Timesamp
Since:
1.8


"
Timestamp,getNanos(),int,Gets this Timestamp object's nanos value.,"

getNanos
public int getNanos()
Gets this Timestamp object's nanos value.

Returns:
this Timestamp object's fractional seconds component
See Also:
setNanos(int)


"
Timestamp,getTime(),long,"Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Timestamp object.","

getTime
public long getTime()
Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
 represented by this Timestamp object.

Overrides:
getTime in class Date
Returns:
the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by this date.
See Also:
setTime(long)


"
Timestamp,hashCode(),int,Returns a hash code value for this object.,"

hashCode
public int hashCode()
Returns a hash code value for this object. The result is the
 exclusive OR of the two halves of the primitive long
 value returned by the Date.getTime()
 method. That is, the hash code is the value of the expression:
 
 (int)(this.getTime()^(this.getTime() >>> 32))
 

 The hashCode method uses the underlying java.util.Date
 implementation and therefore does not include nanos in its computation.

Overrides:
hashCode in class Date
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Timestamp,setNanos(int n),void,Sets this Timestamp object's nanos field to the given value.,"

setNanos
public void setNanos(int n)
Sets this Timestamp object's nanos field
 to the given value.

Parameters:
n - the new fractional seconds component
Throws:
IllegalArgumentException - if the given argument
            is greater than 999999999 or less than 0
See Also:
getNanos()


"
Timestamp,setTime(long time),void,"Sets this Timestamp object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.","

setTime
public void setTime(long time)
Sets this Timestamp object to represent a point in time that is
 time milliseconds after January 1, 1970 00:00:00 GMT.

Overrides:
setTime in class Date
Parameters:
time - the number of milliseconds.
See Also:
getTime(), 
Timestamp(long time), 
Calendar


"
Timestamp,toInstant(),Instant,Converts this Timestamp object to an Instant.,"

toInstant
public Instant toInstant()
Converts this Timestamp object to an Instant.
 
 The conversion creates an Instant that represents the same
 point on the time-line as this Timestamp.

Overrides:
toInstant in class Date
Returns:
an instant representing the same point on the time-line
Since:
1.8


"
Timestamp,toLocalDateTime(),LocalDateTime,Converts this Timestamp object to a LocalDateTime.,"

toLocalDateTime
public LocalDateTime toLocalDateTime()
Converts this Timestamp object to a LocalDateTime.
 
 The conversion creates a LocalDateTime that represents the
 same year, month, day of month, hours, minutes, seconds and nanos
 date-time value as this Timestamp in the local time zone.

Returns:
a LocalDateTime object representing the same date-time value
Since:
1.8


"
Timestamp,toString(),String,Formats a timestamp in JDBC timestamp escape format.,"

toString
public String toString()
Formats a timestamp in JDBC timestamp escape format.
         yyyy-mm-dd hh:mm:ss.fffffffff,
 where ffffffffff indicates nanoseconds.
 

Overrides:
toString in class Date
Returns:
a String object in
           yyyy-mm-dd hh:mm:ss.fffffffff format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
Timestamp,valueOf(LocalDateTime dateTime),static Timestamp,"Obtains an instance of Timestamp from a LocalDateTime object, with the same year, month, day of month, hours, minutes, seconds and nanos date-time value as the provided LocalDateTime.","

valueOf
public static Timestamp valueOf(LocalDateTime dateTime)
Obtains an instance of Timestamp from a LocalDateTime
 object, with the same year, month, day of month, hours, minutes,
 seconds and nanos date-time value as the provided LocalDateTime.
 
 The provided LocalDateTime is interpreted as the local
 date-time in the local time zone.

Parameters:
dateTime - a LocalDateTime to convert
Returns:
a Timestamp object
Throws:
NullPointerException - if dateTime is null.
Since:
1.8


"
Timestamp,valueOf(String s),static Timestamp,Converts a String object in JDBC timestamp escape format to a Timestamp value.,"

valueOf
public static Timestamp valueOf(String s)
Converts a String object in JDBC timestamp escape format to a
 Timestamp value.

Parameters:
s - timestamp in format yyyy-[m]m-[d]d hh:mm:ss[.f...].  The
 fractional seconds may be omitted. The leading zero for mm
 and dd may also be omitted.
Returns:
corresponding Timestamp value
Throws:
IllegalArgumentException - if the given argument
 does not have the format yyyy-[m]m-[d]d hh:mm:ss[.f...]


"
