Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Date,1,long getTime(),False,,NULL
0,Date,2,void setTime(long time),True,,"

setTime
public void setTime(long date)
Sets an existing Date object
 using the given milliseconds time value.
 If the given milliseconds value contains time information,
 the driver will set the time components to the
 time in the default time zone (the time zone of the Java virtual
 machine running the application) that corresponds to zero GMT.

Overrides:
setTime in class Date
Parameters:
date - milliseconds since January 1, 1970, 00:00:00 GMT not
        to exceed the milliseconds representation for the year 8099.
        A negative number indicates the number of milliseconds
        before January 1, 1970, 00:00:00 GMT.


"
0,Date,3,Date valueOf(String s),True,,"

valueOf
public static Date valueOf(String s)
Converts a string in JDBC date escape format to
 a Date value.

Parameters:
s - a String object representing a date in
        in the format ""yyyy-[m]m-[d]d"". The leading zero for mm
 and dd may also be omitted.
Returns:
a java.sql.Date object representing the
         given date
Throws:
IllegalArgumentException - if the date given is not in the
         JDBC date escape format (yyyy-[m]m-[d]d)


"
0,Date,4,int compareTo(Date anotherDate),False,,NULL
0,Date,5,String toString(),True,,"

toString
public String toString()
Formats a date in the date escape format yyyy-mm-dd.
 

Overrides:
toString in class Date
Returns:
a String in yyyy-mm-dd format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
1,DriverManager,1,"Connection getConnection(String url, Properties info)",True,,"

getConnection
public static Connection getConnection(String url,
                                       Properties info)
                                throws SQLException
Attempts to establish a connection to the given database URL.
 The DriverManager attempts to select an appropriate driver from
 the set of registered JDBC drivers.

Note: If a property is specified as part of the url and
 is also specified in the Properties object, it is
 implementation-defined as to which value will take precedence.
 For maximum portability, an application should only specify a
 property once.

Parameters:
url - a database url of the form
  jdbc:subprotocol:subname
info - a list of arbitrary string tag/value pairs as
 connection arguments; normally at least a ""user"" and
 ""password"" property should be included
Returns:
a Connection to the URL
Throws:
SQLException - if a database access error occurs or the url is
 null
SQLTimeoutException - when the driver has determined that the
 timeout value specified by the setLoginTimeout method
 has been exceeded and has at least tried to cancel the
 current database connection attempt


"
1,DriverManager,2,PrintWriter getLogWriter(),True,,"

getLogWriter
public static PrintWriter getLogWriter()
Retrieves the log writer.

 The getLogWriter and setLogWriter
 methods should be used instead
 of the get/setlogStream methods, which are deprecated.

Returns:
a java.io.PrintWriter object
Since:
1.2
See Also:
setLogWriter(java.io.PrintWriter)


"
1,DriverManager,3,void setLogWriter(PrintWriter out),True,,"

setLogWriter
public static void setLogWriter(PrintWriter out)
Sets the logging/tracing PrintWriter object
 that is used by the DriverManager and all drivers.
 
 There is a minor versioning problem created by the introduction
 of the method setLogWriter.  The
 method setLogWriter cannot create a PrintStream object
 that will be returned by getLogStream---the Java platform does
 not provide a backward conversion.  As a result, a new application
 that uses setLogWriter and also uses a JDBC 1.0 driver that uses
 getLogStream will likely not see debugging information written
 by that driver.

 Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks
 to see that there is an SQLPermission object before setting
 the logging stream.  If a SecurityManager exists and its
 checkPermission method denies setting the log writer, this
 method throws a java.lang.SecurityException.

Parameters:
out - the new logging/tracing PrintStream object;
      null to disable logging and tracing
Throws:
SecurityException - if a security manager exists and its
    checkPermission method denies
    setting the log writer
Since:
1.2
See Also:
SecurityManager.checkPermission(java.security.Permission), 
getLogWriter()


"
1,DriverManager,4,void setLoginTimeout(int seconds),True,,"

setLoginTimeout
public static void setLoginTimeout(int seconds)
Sets the maximum time in seconds that a driver will wait
 while attempting to connect to a database once the driver has
 been identified.

Parameters:
seconds - the login time limit in seconds; zero means there is no limit
See Also:
getLoginTimeout()


"
1,DriverManager,5,int getLoginTimeout(),True,,"

getLoginTimeout
public static int getLoginTimeout()
Gets the maximum time in seconds that a driver can wait
 when attempting to log in to a database.

Returns:
the driver login time limit in seconds
See Also:
setLoginTimeout(int)


"
2,DriverPropertyInfo,1,String name(),False,,NULL
2,DriverPropertyInfo,2,boolean isRequired(),False,,NULL
2,DriverPropertyInfo,3,String description(),False,,NULL
2,DriverPropertyInfo,4,String value(),False,,NULL
2,DriverPropertyInfo,5,String[] choices(),False,,NULL
3,SQLPermission,1,void setLogWriter(java.io.PrintWriter out),False,,NULL
3,SQLPermission,2,void deregisterDriver(java.sql.Driver driver),False,,NULL
3,SQLPermission,3,"void setNetworkTimeout(java.util.concurrent.Executor executor, int milliseconds)",False,,NULL
3,SQLPermission,4,void abort(java.util.concurrent.Executor executor),False,,NULL
3,SQLPermission,5,void setLogStream(java.io.PrintStream out),False,,NULL
4,Time,1,int compareTo(Time ts),False,,NULL
4,Time,2,String toString(),True,,"

toString
public String toString()
Formats a time in JDBC time escape format.

Overrides:
toString in class Date
Returns:
a String in hh:mm:ss format
See Also:
Date.toLocaleString(), 
Date.toGMTString()


"
4,Time,3,int hashCode(),False,,NULL
4,Time,4,boolean equals(Object obj),False,,NULL
4,Time,5,Time valueOf(String s),True,,"

valueOf
public static Time valueOf(String s)
Converts a string in JDBC time escape format to a Time value.

Parameters:
s - time in format ""hh:mm:ss""
Returns:
a corresponding Time object


"
5,Timestamp,1,long getTime(),True,,"

getTime
public long getTime()
Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT
 represented by this Timestamp object.

Overrides:
getTime in class Date
Returns:
the number of milliseconds since January 1, 1970, 00:00:00 GMT
          represented by this date.
See Also:
setTime(long)


"
5,Timestamp,2,void setTime(long time),True,,"

setTime
public void setTime(long time)
Sets this Timestamp object to represent a point in time that is
 time milliseconds after January 1, 1970 00:00:00 GMT.

Overrides:
setTime in class Date
Parameters:
time - the number of milliseconds.
See Also:
getTime(), 
Timestamp(long time), 
Calendar


"
5,Timestamp,3,int getNanos(),True,,"

getNanos
public int getNanos()
Gets this Timestamp object's nanos value.

Returns:
this Timestamp object's fractional seconds component
See Also:
setNanos(int)


"
5,Timestamp,4,void setNanos(int n),True,,"

setNanos
public void setNanos(int n)
Sets this Timestamp object's nanos field
 to the given value.

Parameters:
n - the new fractional seconds component
Throws:
IllegalArgumentException - if the given argument
            is greater than 999999999 or less than 0
See Also:
getNanos()


"
5,Timestamp,5,Timestamp valueOf(String s),True,,"

valueOf
public static Timestamp valueOf(String s)
Converts a String object in JDBC timestamp escape format to a
 Timestamp value.

Parameters:
s - timestamp in format yyyy-[m]m-[d]d hh:mm:ss[.f...].  The
 fractional seconds may be omitted. The leading zero for mm
 and dd may also be omitted.
Returns:
corresponding Timestamp value
Throws:
IllegalArgumentException - if the given argument
 does not have the format yyyy-[m]m-[d]d hh:mm:ss[.f...]


"
