Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,ArrayType,1,int getDimension(),True,,"

getDimension
public int getDimension()
Returns the dimension of arrays described by this ArrayType instance.

Returns:
the dimension.


"
0,ArrayType,2,OpenType<?> getElementType(),False,,NULL
0,ArrayType,3,boolean isPrimitiveArray(),True,,"

isPrimitiveArray
public boolean isPrimitiveArray()
Returns true if the open data values this open
 type describes are primitive arrays, false otherwise.

Returns:
true if this is a primitive array type.
Since:
1.6


"
0,ArrayType,4,boolean isValue(Object obj),True,,"

isValue
public boolean isValue(Object obj)
Tests whether obj is a value for this ArrayType
 instance.
 
 This method returns true if and only if obj
 is not null, obj is an array and any one of the following
 is true:

 
if this ArrayType instance describes an array of
 SimpleType elements or their corresponding primitive types,
 obj's class name is the same as the className field defined
 for this ArrayType instance (i.e. the class name returned
 by the getClassName method, which
 includes the dimension information), 
if this ArrayType instance describes an array of
 classes implementing the TabularData interface or the
 CompositeData interface, obj is assignable to
 such a declared array, and each element contained in {obj
 is either null or a valid value for the element's open type specified
 by this ArrayType instance.


Specified by:
isValue in class OpenType<T>
Parameters:
obj - the object to be tested.
Returns:
true if obj is a value for this
 ArrayType instance.


"
0,ArrayType,5,String toString(),True,,"

toString
public String toString()
Returns a string representation of this ArrayType instance.
 
 The string representation consists of the name of this class (i.e.
 javax.management.openmbean.ArrayType), the type name,
 the dimension, the elements' open type and the primitive array flag
 defined for this instance.
 
 As ArrayType instances are immutable, the
 string representation for this instance is calculated
 once, on the first call to toString, and
 then the same value is returned for subsequent calls.

Specified by:
toString in class OpenType<T>
Returns:
a string representation of this ArrayType instance


"
1,CompositeDataInvocationHandler,1,Object get(String key),False,,NULL
1,CompositeDataInvocationHandler,2,Set<String> keySet(),False,,NULL
1,CompositeDataInvocationHandler,3,CompositeType getCompositeType(),False,,NULL
1,CompositeDataInvocationHandler,4,boolean containsKey(String key),False,,NULL
1,CompositeDataInvocationHandler,5,int size(),False,,NULL
2,CompositeDataSupport,1,"CompositeDataSupport(Map<String, ?> items)",False,,NULL
2,CompositeDataSupport,2,Object get(String key),True,,"

get
public Object get(String key)
Returns the value of the item whose name is key.

Specified by:
get in interface CompositeData
Parameters:
key - the name of the item.
Returns:
the value associated with this key.
Throws:
IllegalArgumentException - if key is a null or empty String.
InvalidKeyException - if key is not an existing item name for
 this CompositeData instance.


"
2,CompositeDataSupport,3,Set<String> keySet(),False,,NULL
2,CompositeDataSupport,4,boolean containsKey(String key),True,,"

containsKey
public boolean containsKey(String key)
Returns true if and only if this CompositeData instance contains
 an item whose name is key.
 If key is a null or empty String, this method simply returns false.

Specified by:
containsKey in interface CompositeData
Parameters:
key - the key to be tested.
Returns:
true if this CompositeData contains the key.


"
2,CompositeDataSupport,5,int size(),False,,NULL
3,CompositeType,1,String getTypeName(),False,,NULL
3,CompositeType,2,String getDescription(),False,,NULL
3,CompositeType,3,Set<String> keySet(),True,,"

keySet
public Set<String> keySet()
Returns an unmodifiable Set view of all the item names defined by this CompositeType instance.
 The set's iterator will return the item names in ascending order.

Returns:
a Set of String.


"
3,CompositeType,4,CompositeType clone(),False,,NULL
3,CompositeType,5,boolean isValue(Object obj),True,,"

isValue
public boolean isValue(Object obj)
Tests whether obj is a value which could be
 described by this CompositeType instance.

 If obj is null or is not an instance of
 javax.management.openmbean.CompositeData,
 isValue returns false.
If obj is an instance of
 javax.management.openmbean.CompositeData, then let
 ct be its CompositeType as returned by CompositeData.getCompositeType().  The result is true if
 this is assignable from ct.  This
 means that:

this.getTypeName() equals
 ct.getTypeName(), and
 there are no item names present in this that are
 not also present in ct, and
 for every item in this, its type is assignable from
 the type of the corresponding item in ct.
 
A TabularType is assignable from another TabularType if they have the same typeName and index name list, and the
 row type of the first is
 assignable from the row type of the second.

 An ArrayType is assignable from another ArrayType if they have the same dimension; and both are primitive arrays or neither is;
 and the element
 type of the first is assignable from the element type of the
 second.

 In every other case, an OpenType is assignable from
 another OpenType only if they are equal.
These rules mean that extra items can be added to a CompositeData without making it invalid for a CompositeType
 that does not have those items.

Specified by:
isValue in class OpenType<CompositeData>
Parameters:
obj - the value whose open type is to be tested for compatibility
 with this CompositeType instance.
Returns:
true if obj is a value for this
 composite type, false otherwise.


"
4,OpenMBeanAttributeInfoSupport,1,String getDescription(),False,,NULL
4,OpenMBeanAttributeInfoSupport,2,String getName(),False,,NULL
4,OpenMBeanAttributeInfoSupport,3,OpenType<?> getOpenType(),True,,"

getOpenType
public OpenType<?> getOpenType()
Returns the open type for the values of the attribute described
 by this OpenMBeanAttributeInfoSupport instance.

Specified by:
getOpenType in interface OpenMBeanParameterInfo
Returns:
the open type.


"
4,OpenMBeanAttributeInfoSupport,4,Object getDefaultValue(),True,,"

getDefaultValue
public Object getDefaultValue()
Returns the default value for the attribute described by this
 OpenMBeanAttributeInfoSupport instance, if specified,
 or null otherwise.

Specified by:
getDefaultValue in interface OpenMBeanParameterInfo
Returns:
the default value.


"
4,OpenMBeanAttributeInfoSupport,5,boolean isReadable(),False,,NULL
5,OpenMBeanConstructorInfoSupport,1,String getDescription(),False,,NULL
5,OpenMBeanConstructorInfoSupport,2,String getName(),False,,NULL
5,OpenMBeanConstructorInfoSupport,3,OpenType<?> getReturnType(),False,,NULL
5,OpenMBeanConstructorInfoSupport,4,String getSignature(),False,,NULL
5,OpenMBeanConstructorInfoSupport,5,String[] getSignature(),False,,NULL
6,OpenMBeanInfoSupport,1,String getDescription(),False,,NULL
6,OpenMBeanInfoSupport,2,TabularType getTabularType(),False,,NULL
6,OpenMBeanInfoSupport,3,CompositeType getRowType(),False,,NULL
6,OpenMBeanInfoSupport,4,Set<String> getOpenTypeAttributes(),False,,NULL
6,OpenMBeanInfoSupport,5,boolean isValue(Object value),False,,NULL
7,OpenMBeanOperationInfoSupport,1,String getDescription(),False,,NULL
7,OpenMBeanOperationInfoSupport,2,String getName(),False,,NULL
7,OpenMBeanOperationInfoSupport,3,OpenType<?> getReturnType(),False,,NULL
7,OpenMBeanOperationInfoSupport,4,String getImpact(),False,,NULL
7,OpenMBeanOperationInfoSupport,5,String getReturnTypeDescription(),False,,NULL
8,OpenMBeanParameterInfoSupport,1,String getDescription(),False,,NULL
8,OpenMBeanParameterInfoSupport,2,String getName(),False,,NULL
8,OpenMBeanParameterInfoSupport,3,OpenType<?> getOpenType(),True,,"

getOpenType
public OpenType<?> getOpenType()
Returns the open type for the values of the parameter described
 by this OpenMBeanParameterInfoSupport instance.

Specified by:
getOpenType in interface OpenMBeanParameterInfo
Returns:
the open type.


"
8,OpenMBeanParameterInfoSupport,4,Object getDefaultValue(),True,,"

getDefaultValue
public Object getDefaultValue()
Returns the default value for the parameter described by this
 OpenMBeanParameterInfoSupport instance, if specified,
 or null otherwise.

Specified by:
getDefaultValue in interface OpenMBeanParameterInfo
Returns:
the default value.


"
8,OpenMBeanParameterInfoSupport,5,boolean hasDefaultValue(),True,,"

hasDefaultValue
public boolean hasDefaultValue()
Returns true if this OpenMBeanParameterInfoSupport instance specifies a non-null
 default value for the described parameter, false
 otherwise.

Specified by:
hasDefaultValue in interface OpenMBeanParameterInfo
Returns:
true if there is a default value.


"
9,OpenType,1,String getTypeName(),True,,"

getTypeName
public String getTypeName()
Returns the name of this OpenType instance.

Returns:
the type name.


"
9,OpenType,2,String getDescription(),True,,"

getDescription
public String getDescription()
Returns the text description of this OpenType instance.

Returns:
the description.


"
9,OpenType,3,boolean isValue(Object obj),True,,"

isValue
public abstract boolean isValue(Object obj)
Tests whether obj is a value for this open type.

Parameters:
obj - the object to be tested for validity.
Returns:
true if obj is a value for this
 open type, false otherwise.


"
9,OpenType,4,boolean isAssignableFrom(OpenType<?> openType),False,,NULL
9,OpenType,5,boolean equals(Object obj),True,,"

equals
public abstract boolean equals(Object obj)
Compares the specified obj parameter with this
 open type instance for equality.

Overrides:
equals in class Object
Parameters:
obj - the object to compare to.
Returns:
true if this object and obj are equal.
See Also:
Object.hashCode(), 
HashMap


"
10,SimpleType,1,SimpleType<?> forName(String typeName),False,,NULL
10,SimpleType,2,boolean isValue(Object obj),True,,"

isValue
public boolean isValue(Object obj)
Tests whether obj is a value for this
 SimpleType instance.   This method returns
 true if and only if obj is not null and
 obj's class name is the same as the className field
 defined for this SimpleType instance (ie the class
 name returned by the getClassName method).

Specified by:
isValue in class OpenType<T>
Parameters:
obj - the object to be tested.
Returns:
true if obj is a value for this
 SimpleType instance.


"
10,SimpleType,3,"boolean isValue(Object obj, String[] path, int index)",False,,NULL
10,SimpleType,4,"boolean isValue(Object obj, String[] path, CompositeType ct)",False,,NULL
10,SimpleType,5,"boolean isValue(Object obj, CompositeData cd)",False,,NULL
11,TabularDataSupport,1,TabularDataSupport clone(),False,,NULL
11,TabularDataSupport,2,CompositeData getCompositeData(CompositeData key),False,,NULL
11,TabularDataSupport,3,void put(CompositeData value),True,,"

put
public void put(CompositeData value)
Description copied from interface: TabularData
Adds value to this TabularData instance.
 The composite type of value must be the same as this
 instance's row type (ie the composite type returned by
 this.getTabularType().getRowType()), and there must not already be an existing
 value in this TabularData instance whose index is the
 same as the one calculated for the value to be
 added. The index for value is calculated according
 to this TabularData instance's TabularType
 definition (see TabularType.getIndexNames()).

Specified by:
put in interface TabularData
Parameters:
value - the composite data value to be added as a new row to this TabularData instance;
                                    must be of the same composite type as this instance's row type;
                                    must not be null.


"
11,TabularDataSupport,4,void remove(CompositeData key),False,,NULL
11,TabularDataSupport,5,Collection<CompositeData> values(),False,,NULL
12,TabularType,1,String getDescription(),False,,NULL
12,TabularType,2,TabularType clone(),False,,NULL
12,TabularType,3,TabularDataSupport newTabularData(),False,,NULL
12,TabularType,4,boolean isValue(Object value),True,,"

isValue
public boolean isValue(Object obj)
Tests whether obj is a value which could be
 described by this TabularType instance.

 If obj is null or is not an instance of
 javax.management.openmbean.TabularData,
 isValue returns false.
If obj is an instance of
 javax.management.openmbean.TabularData, say td, the result is true if this TabularType is
 assignable from td.getTabularType(), as defined in CompositeType.isValue.

Specified by:
isValue in class OpenType<TabularData>
Parameters:
obj - the value whose open type is to be tested for
 compatibility with this TabularType instance.
Returns:
true if obj is a value for this
 tabular type, false otherwise.


"
12,TabularType,5,TabularType[] getTabularTypes(),False,,NULL
