ClassName,Method,Return Type,Description,Full Description
DatatypeConstants.Field,getId(),int,Get id of this Field.,"

getId
public int getId()
Get id of this Field.

Returns:
Id of field.


"
DatatypeConstants.Field,toString(),String,Returns a field name in English.,"

toString
public String toString()
Returns a field name in English. This method
 is intended to be used for debugging/diagnosis
 and not for display to end-users.

Overrides:
toString in class Object
Returns:
a non-null valid String constant.


"
DatatypeFactory,"newDuration(boolean isPositive, BigInteger years, BigInteger months, BigInteger days, BigInteger hours, BigInteger minutes, BigDecimal seconds)",abstract Duration,"Obtain a new instance of a Duration specifying the Duration as isPositive, years, months, days, hours, minutes, seconds.","

newDuration
public abstract Duration newDuration(boolean isPositive,
                                     BigInteger years,
                                     BigInteger months,
                                     BigInteger days,
                                     BigInteger hours,
                                     BigInteger minutes,
                                     BigDecimal seconds)
Obtain a new instance of a Duration
 specifying the Duration as isPositive, years, months, days, hours, minutes, seconds.
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.
A null value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
years - of this Duration
months - of this Duration
days - of this Duration
hours - of this Duration
minutes - of this Duration
seconds - of this Duration
Returns:
New Duration created from the specified values.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if all the fields (years, months, ...) are null or
 if any of the fields is negative.
UnsupportedOperationException - If implementation cannot support requested values.


"
DatatypeFactory,"newDuration(boolean isPositive, int years, int months, int days, int hours, int minutes, int seconds)",Duration,"Obtain a new instance of a Duration specifying the Duration as isPositive, years, months, days, hours, minutes, seconds.","

newDuration
public Duration newDuration(boolean isPositive,
                            int years,
                            int months,
                            int days,
                            int hours,
                            int minutes,
                            int seconds)
Obtain a new instance of a Duration
 specifying the Duration as isPositive, years, months, days, hours, minutes, seconds.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
years - of this Duration
months - of this Duration
days - of this Duration
hours - of this Duration
minutes - of this Duration
seconds - of this Duration
Returns:
New Duration created from the specified values.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if any of the fields is negative.
See Also:
newDuration(
   boolean isPositive,
   BigInteger years,
   BigInteger months,
   BigInteger days,
   BigInteger hours,
   BigInteger minutes,
   BigDecimal seconds)


"
DatatypeFactory,newDuration(long durationInMilliSeconds),abstract Duration,Obtain a new instance of a Duration specifying the Duration as milliseconds.,"

newDuration
public abstract Duration newDuration(long durationInMilliSeconds)
Obtain a new instance of a Duration
 specifying the Duration as milliseconds.
XML Schema Part 2: Datatypes, 3.2.6 duration, defines duration as:

 duration represents a duration of time.
 The value space of duration is a six-dimensional space where the coordinates designate the
 Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.
 These components are ordered in their significance by their order of appearance i.e. as
 year, month, day, hour, minute, and second.
 
All six values are set by computing their values from the specified milliseconds
 and are available using the get methods of  the created Duration.
 The values conform to and are defined by:

ISO 8601:2000(E) Section 5.5.3.2 Alternative format

     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats

XMLGregorianCalendar  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation

The default start instance is defined by GregorianCalendar's use of the start of the epoch: i.e.,
 Calendar.YEAR = 1970,
 Calendar.MONTH = Calendar.JANUARY,
 Calendar.DATE = 1, etc.
 This is important as there are variations in the Gregorian Calendar,
 e.g. leap years have different days in the month = Calendar.FEBRUARY
 so the result of Duration.getMonths() and Duration.getDays() can be influenced.

Parameters:
durationInMilliSeconds - Duration in milliseconds to create.
Returns:
New Duration representing durationInMilliSeconds.


"
DatatypeFactory,newDuration(String lexicalRepresentation),abstract Duration,"Obtain a new instance of a Duration specifying the Duration as its string representation, ""PnYnMnDTnHnMnS"", as defined in XML Schema 1.0 section 3.2.6.1.","

newDuration
public abstract Duration newDuration(String lexicalRepresentation)
Obtain a new instance of a Duration
 specifying the Duration as its string representation, ""PnYnMnDTnHnMnS"",
 as defined in XML Schema 1.0 section 3.2.6.1.
XML Schema Part 2: Datatypes, 3.2.6 duration, defines duration as:

 duration represents a duration of time.
 The value space of duration is a six-dimensional space where the coordinates designate the
 Gregorian year, month, day, hour, minute, and second components defined in Section 5.5.3.2 of [ISO 8601], respectively.
 These components are ordered in their significance by their order of appearance i.e. as
 year, month, day, hour, minute, and second.
 
All six values are set and available from the created Duration
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.

Parameters:
lexicalRepresentation - String representation of a Duration.
Returns:
New Duration created from parsing the lexicalRepresentation.
Throws:
IllegalArgumentException - If lexicalRepresentation is not a valid representation of a Duration.
UnsupportedOperationException - If implementation cannot support requested values.
NullPointerException - if lexicalRepresentation is null.


"
DatatypeFactory,"newDurationDayTime(boolean isPositive, BigInteger day, BigInteger hour, BigInteger minute, BigInteger second)",Duration,"Create a Duration of type xdt:dayTimeDuration using the specified day, hour, minute and second as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.","

newDurationDayTime
public Duration newDurationDayTime(boolean isPositive,
                                   BigInteger day,
                                   BigInteger hour,
                                   BigInteger minute,
                                   BigInteger second)
Create a Duration of type xdt:dayTimeDuration using the specified
 day, hour, minute and second as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.
The datatype xdt:dayTimeDuration is a subtype of xs:duration
 whose lexical representation contains only day, hour, minute, and second components.
 This datatype resides in the namespace http://www.w3.org/2003/11/xpath-datatypes.
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.
A null value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
day - Day of Duration.
hour - Hour of Duration.
minute - Minute of Duration.
second - Second of Duration.
Returns:
New Duration created with the specified day, hour, minute
 and second.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if all the fields (day, hour, ...) are null or
 if any of the fields is negative.
UnsupportedOperationException - If implementation cannot support requested values.


"
DatatypeFactory,"newDurationDayTime(boolean isPositive, int day, int hour, int minute, int second)",Duration,"Create a Duration of type xdt:dayTimeDuration using the specified day, hour, minute and second as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.","

newDurationDayTime
public Duration newDurationDayTime(boolean isPositive,
                                   int day,
                                   int hour,
                                   int minute,
                                   int second)
Create a Duration of type xdt:dayTimeDuration using the specified
 day, hour, minute and second as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.
The datatype xdt:dayTimeDuration is a subtype of xs:duration
 whose lexical representation contains only day, hour, minute, and second components.
 This datatype resides in the namespace http://www.w3.org/2003/11/xpath-datatypes.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
day - Day of Duration.
hour - Hour of Duration.
minute - Minute of Duration.
second - Second of Duration.
Returns:
New Duration created with the specified day, hour, minute
 and second.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if any of the fields (day, hour, ...) is negative.


"
DatatypeFactory,newDurationDayTime(long durationInMilliseconds),Duration,"Create a Duration of type xdt:dayTimeDuration using the specified milliseconds as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.","

newDurationDayTime
public Duration newDurationDayTime(long durationInMilliseconds)
Create a Duration of type xdt:dayTimeDuration using the specified milliseconds as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.
The datatype xdt:dayTimeDuration is a subtype of xs:duration
 whose lexical representation contains only day, hour, minute, and second components.
 This datatype resides in the namespace http://www.w3.org/2003/11/xpath-datatypes.
All four values are set by computing their values from the specified milliseconds
 and are available using the get methods of  the created Duration.
 The values conform to and are defined by:

ISO 8601:2000(E) Section 5.5.3.2 Alternative format

     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats

XMLGregorianCalendar  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation

The default start instance is defined by GregorianCalendar's use of the start of the epoch: i.e.,
 Calendar.YEAR = 1970,
 Calendar.MONTH = Calendar.JANUARY,
 Calendar.DATE = 1, etc.
 This is important as there are variations in the Gregorian Calendar,
 e.g. leap years have different days in the month = Calendar.FEBRUARY
 so the result of Duration.getDays() can be influenced.
Any remaining milliseconds after determining the day, hour, minute and second are discarded.

Parameters:
durationInMilliseconds - Milliseconds of Duration to create.
Returns:
New Duration created with the specified durationInMilliseconds.
See Also:

   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration


"
DatatypeFactory,newDurationDayTime(String lexicalRepresentation),Duration,"Create a Duration of type xdt:dayTimeDuration by parsing its String representation, ""PnDTnHnMnS"", XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.","

newDurationDayTime
public Duration newDurationDayTime(String lexicalRepresentation)
Create a Duration of type xdt:dayTimeDuration by parsing its String representation,
 ""PnDTnHnMnS"", 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:dayTimeDuration.
The datatype xdt:dayTimeDuration is a subtype of xs:duration
 whose lexical representation contains only day, hour, minute, and second components.
 This datatype resides in the namespace http://www.w3.org/2003/11/xpath-datatypes.
All four values are set and available from the created Duration
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.

Parameters:
lexicalRepresentation - Lexical representation of a duration.
Returns:
New Duration created using the specified lexicalRepresentation.
Throws:
IllegalArgumentException - If lexicalRepresentation is not a valid representation of a Duration expressed only in terms of days and time.
UnsupportedOperationException - If implementation cannot support requested values.
NullPointerException - If lexicalRepresentation is null.


"
DatatypeFactory,"newDurationYearMonth(boolean isPositive, BigInteger year, BigInteger month)",Duration,"Create a Duration of type xdt:yearMonthDuration using the specified year and month as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.","

newDurationYearMonth
public Duration newDurationYearMonth(boolean isPositive,
                                     BigInteger year,
                                     BigInteger month)
Create a Duration of type xdt:yearMonthDuration using the specified
 year and month as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.
A null value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
year - Year of Duration.
month - Month of Duration.
Returns:
New Duration created using the specified year and month.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if all of the fields (year, month) are null or
 if any of the fields is negative.
UnsupportedOperationException - If implementation cannot support requested values.


"
DatatypeFactory,"newDurationYearMonth(boolean isPositive, int year, int month)",Duration,"Create a Duration of type xdt:yearMonthDuration using the specified year and month as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.","

newDurationYearMonth
public Duration newDurationYearMonth(boolean isPositive,
                                     int year,
                                     int month)
Create a Duration of type xdt:yearMonthDuration using the specified
 year and month as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
isPositive - Set to false to create a negative duration. When the length
   of the duration is zero, this parameter will be ignored.
year - Year of Duration.
month - Month of Duration.
Returns:
New Duration created using the specified year and month.
Throws:
IllegalArgumentException - If the values are not a valid representation of a
 Duration: if any of the fields (year, month) is negative.


"
DatatypeFactory,newDurationYearMonth(long durationInMilliseconds),Duration,"Create a Duration of type xdt:yearMonthDuration using the specified milliseconds as defined in XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.","

newDurationYearMonth
public Duration newDurationYearMonth(long durationInMilliseconds)
Create a Duration of type xdt:yearMonthDuration using the specified milliseconds as defined in
 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.
The datatype xdt:yearMonthDuration is a subtype of xs:duration
 whose lexical representation contains only year and month components.
 This datatype resides in the namespace XMLConstants.W3C_XPATH_DATATYPE_NS_URI.
Both values are set by computing their values from the specified milliseconds
 and are available using the get methods of  the created Duration.
 The values conform to and are defined by:

ISO 8601:2000(E) Section 5.5.3.2 Alternative format

     W3C XML Schema 1.0 Part 2, Appendix D, ISO 8601 Date and Time Formats

XMLGregorianCalendar  Date/Time Datatype Field Mapping Between XML Schema 1.0 and Java Representation

The default start instance is defined by GregorianCalendar's use of the start of the epoch: i.e.,
 Calendar.YEAR = 1970,
 Calendar.MONTH = Calendar.JANUARY,
 Calendar.DATE = 1, etc.
 This is important as there are variations in the Gregorian Calendar,
 e.g. leap years have different days in the month = Calendar.FEBRUARY
 so the result of Duration.getMonths() can be influenced.
Any remaining milliseconds after determining the year and month are discarded.

Parameters:
durationInMilliseconds - Milliseconds of Duration to create.
Returns:
New Duration created using the specified durationInMilliseconds.


"
DatatypeFactory,newDurationYearMonth(String lexicalRepresentation),Duration,"Create a Duration of type xdt:yearMonthDuration by parsing its String representation, ""PnYnM"", XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.","

newDurationYearMonth
public Duration newDurationYearMonth(String lexicalRepresentation)
Create a Duration of type xdt:yearMonthDuration by parsing its String representation,
 ""PnYnM"", 
   XQuery 1.0 and XPath 2.0 Data Model, xdt:yearMonthDuration.
The datatype xdt:yearMonthDuration is a subtype of xs:duration
 whose lexical representation contains only year and month components.
 This datatype resides in the namespace XMLConstants.W3C_XPATH_DATATYPE_NS_URI.
Both values are set and available from the created Duration
The XML Schema specification states that values can be of an arbitrary size.
 Implementations may chose not to or be incapable of supporting arbitrarily large and/or small values.
 An UnsupportedOperationException will be thrown with a message indicating implementation limits
 if implementation capacities are exceeded.

Parameters:
lexicalRepresentation - Lexical representation of a duration.
Returns:
New Duration created using the specified lexicalRepresentation.
Throws:
IllegalArgumentException - If lexicalRepresentation is not a valid representation of a Duration expressed only in terms of years and months.
UnsupportedOperationException - If implementation cannot support requested values.
NullPointerException - If lexicalRepresentation is null.


"
DatatypeFactory,newInstance(),static DatatypeFactory,Obtain a new instance of a DatatypeFactory.,"

newInstance
public static DatatypeFactory newInstance()
                                   throws DatatypeConfigurationException
Obtain a new instance of a DatatypeFactory.
The implementation resolution mechanisms are defined in this
 Class's documentation.

Returns:
New instance of a DatatypeFactory
Throws:
DatatypeConfigurationException - If the implementation is not
   available or cannot be instantiated.
See Also:
newInstance(String factoryClassName, ClassLoader classLoader)


"
DatatypeFactory,"newInstance(String factoryClassName, ClassLoader classLoader)",static DatatypeFactory,Obtain a new instance of a DatatypeFactory from class name.,"

newInstance
public static DatatypeFactory newInstance(String factoryClassName,
                                          ClassLoader classLoader)
                                   throws DatatypeConfigurationException
Obtain a new instance of a DatatypeFactory from class name.
 This function is useful when there are multiple providers in the classpath.
 It gives more control to the application as it can specify which provider
 should be loaded.
Once an application has obtained a reference to a DatatypeFactory
 it can use the factory to configure and obtain datatype instances.
Tip for Trouble-shooting
Setting the jaxp.debug system property will cause
 this method to print a lot of debug messages
 to System.err about what it is doing and where it is looking at.
 If you have problems try:

 java -Djaxp.debug=1 YourProgram ....
 

Parameters:
factoryClassName - fully qualified factory class name that provides implementation of javax.xml.datatype.DatatypeFactory.
classLoader - ClassLoader used to load the factory class. If null
                     current Thread's context classLoader is used to load the factory class.
Returns:
New instance of a DatatypeFactory
Throws:
DatatypeConfigurationException - if factoryClassName is null, or
                                   the factory class cannot be loaded, instantiated.
Since:
1.6
See Also:
newInstance()


"
DatatypeFactory,newXMLGregorianCalendar(),abstract XMLGregorianCalendar,Create a new instance of an XMLGregorianCalendar.,"

newXMLGregorianCalendar
public abstract XMLGregorianCalendar newXMLGregorianCalendar()
Create a new instance of an XMLGregorianCalendar.
All date/time datatype fields set to DatatypeConstants.FIELD_UNDEFINED or null.

Returns:
New XMLGregorianCalendar with all date/time datatype fields set to
   DatatypeConstants.FIELD_UNDEFINED or null.


"
DatatypeFactory,"newXMLGregorianCalendar(BigInteger year, int month, int day, int hour, int minute, int second, BigDecimal fractionalSecond, int timezone)",abstract XMLGregorianCalendar,Constructor allowing for complete value spaces allowed by W3C XML Schema 1.0 recommendation for xsd:dateTime and related builtin datatypes.,"

newXMLGregorianCalendar
public abstract XMLGregorianCalendar newXMLGregorianCalendar(BigInteger year,
                                                             int month,
                                                             int day,
                                                             int hour,
                                                             int minute,
                                                             int second,
                                                             BigDecimal fractionalSecond,
                                                             int timezone)
Constructor allowing for complete value spaces allowed by
 W3C XML Schema 1.0 recommendation for xsd:dateTime and related
 builtin datatypes. Note that year parameter supports
 arbitrarily large numbers and fractionalSecond has infinite
 precision.
A null value indicates that field is not set.

Parameters:
year - of XMLGregorianCalendar to be created.
month - of XMLGregorianCalendar to be created.
day - of XMLGregorianCalendar to be created.
hour - of XMLGregorianCalendar to be created.
minute - of XMLGregorianCalendar to be created.
second - of XMLGregorianCalendar to be created.
fractionalSecond - of XMLGregorianCalendar to be created.
timezone - of XMLGregorianCalendar to be created.
Returns:
XMLGregorianCalendar created from specified values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().


"
DatatypeFactory,newXMLGregorianCalendar(GregorianCalendar cal),abstract XMLGregorianCalendar,Create an XMLGregorianCalendar from a GregorianCalendar.,"

newXMLGregorianCalendar
public abstract XMLGregorianCalendar newXMLGregorianCalendar(GregorianCalendar cal)
Create an XMLGregorianCalendar from a GregorianCalendar.




          Field by Field Conversion from
          GregorianCalendar to an XMLGregorianCalendar



java.util.GregorianCalendar field
javax.xml.datatype.XMLGregorianCalendar field




ERA == GregorianCalendar.BC ? -YEAR : YEAR
XMLGregorianCalendar.setYear(int year)


MONTH + 1
XMLGregorianCalendar.setMonth(int month)


DAY_OF_MONTH
XMLGregorianCalendar.setDay(int day)


HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND
XMLGregorianCalendar.setTime(int hour, int minute, int second, BigDecimal fractional)



(ZONE_OFFSET + DST_OFFSET) / (60*1000)
(in minutes)

XMLGregorianCalendar.setTimezone(int offset)*




*conversion loss of information. It is not possible to represent
 a java.util.GregorianCalendar daylight savings timezone id in the
 XML Schema 1.0 date/time datatype representation.
To compute the return value's TimeZone field,
 
when this.getTimezone() != FIELD_UNDEFINED,
 create a java.util.TimeZone with a custom timezone id
 using the this.getTimezone().
else use the GregorianCalendar default timezone value
 for the host is defined as specified by
 java.util.TimeZone.getDefault().

Parameters:
cal - java.util.GregorianCalendar used to create XMLGregorianCalendar
Returns:
XMLGregorianCalendar created from java.util.GregorianCalendar
Throws:
NullPointerException - If cal is null.


"
DatatypeFactory,"newXMLGregorianCalendar(int year, int month, int day, int hour, int minute, int second, int millisecond, int timezone)",XMLGregorianCalendar,Constructor of value spaces that a java.util.GregorianCalendar instance would need to convert to an XMLGregorianCalendar instance.,"

newXMLGregorianCalendar
public XMLGregorianCalendar newXMLGregorianCalendar(int year,
                                                    int month,
                                                    int day,
                                                    int hour,
                                                    int minute,
                                                    int second,
                                                    int millisecond,
                                                    int timezone)
Constructor of value spaces that a
 java.util.GregorianCalendar instance would need to convert to an
 XMLGregorianCalendar instance.
XMLGregorianCalendar eon and
 fractionalSecond are set to null
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
year - of XMLGregorianCalendar to be created.
month - of XMLGregorianCalendar to be created.
day - of XMLGregorianCalendar to be created.
hour - of XMLGregorianCalendar to be created.
minute - of XMLGregorianCalendar to be created.
second - of XMLGregorianCalendar to be created.
millisecond - of XMLGregorianCalendar to be created.
timezone - of XMLGregorianCalendar to be created.
Returns:
XMLGregorianCalendar created from specified values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().


"
DatatypeFactory,newXMLGregorianCalendar(String lexicalRepresentation),abstract XMLGregorianCalendar,Create a new XMLGregorianCalendar by parsing the String as a lexical representation.,"

newXMLGregorianCalendar
public abstract XMLGregorianCalendar newXMLGregorianCalendar(String lexicalRepresentation)
Create a new XMLGregorianCalendar by parsing the String as a lexical representation.
Parsing the lexical string representation is defined in
 XML Schema 1.0 Part 2, Section 3.2.[7-14].1,
 Lexical Representation.
The string representation may not have any leading and trailing whitespaces.
The parsing is done field by field so that
 the following holds for any lexically correct String x:

 newXMLGregorianCalendar(x).toXMLFormat().equals(x)
 
Except for the noted lexical/canonical representation mismatches
 listed in 
 XML Schema 1.0 errata, Section 3.2.7.2.

Parameters:
lexicalRepresentation - Lexical representation of one the eight XML Schema date/time datatypes.
Returns:
XMLGregorianCalendar created from the lexicalRepresentation.
Throws:
IllegalArgumentException - If the lexicalRepresentation is not a valid XMLGregorianCalendar.
NullPointerException - If lexicalRepresentation is null.


"
DatatypeFactory,"newXMLGregorianCalendarDate(int year, int month, int day, int timezone)",XMLGregorianCalendar,Create a Java representation of XML Schema builtin datatype date or g*.,"

newXMLGregorianCalendarDate
public XMLGregorianCalendar newXMLGregorianCalendarDate(int year,
                                                        int month,
                                                        int day,
                                                        int timezone)
Create a Java representation of XML Schema builtin datatype date or g*.
For example, an instance of gYear can be created invoking this factory
 with month and day parameters set to
 DatatypeConstants.FIELD_UNDEFINED.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
year - of XMLGregorianCalendar to be created.
month - of XMLGregorianCalendar to be created.
day - of XMLGregorianCalendar to be created.
timezone - offset in minutes. DatatypeConstants.FIELD_UNDEFINED indicates optional field is not set.
Returns:
XMLGregorianCalendar created from parameter values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().
See Also:
DatatypeConstants.FIELD_UNDEFINED


"
DatatypeFactory,"newXMLGregorianCalendarTime(int hours, int minutes, int seconds, BigDecimal fractionalSecond, int timezone)",XMLGregorianCalendar,Create a Java instance of XML Schema builtin datatype time.,"

newXMLGregorianCalendarTime
public XMLGregorianCalendar newXMLGregorianCalendarTime(int hours,
                                                        int minutes,
                                                        int seconds,
                                                        BigDecimal fractionalSecond,
                                                        int timezone)
Create a Java instance of XML Schema builtin datatype time.
A null value indicates that field is not set.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
hours - number of hours
minutes - number of minutes
seconds - number of seconds
fractionalSecond - value of null indicates that this optional field is not set.
timezone - offset in minutes. DatatypeConstants.FIELD_UNDEFINED indicates optional field is not set.
Returns:
XMLGregorianCalendar created from parameter values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().
See Also:
DatatypeConstants.FIELD_UNDEFINED


"
DatatypeFactory,"newXMLGregorianCalendarTime(int hours, int minutes, int seconds, int timezone)",XMLGregorianCalendar,Create a Java instance of XML Schema builtin datatype time.,"

newXMLGregorianCalendarTime
public XMLGregorianCalendar newXMLGregorianCalendarTime(int hours,
                                                        int minutes,
                                                        int seconds,
                                                        int timezone)
Create a Java instance of XML Schema builtin datatype time.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
hours - number of hours
minutes - number of minutes
seconds - number of seconds
timezone - offset in minutes. DatatypeConstants.FIELD_UNDEFINED indicates optional field is not set.
Returns:
XMLGregorianCalendar created from parameter values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().
See Also:
DatatypeConstants.FIELD_UNDEFINED


"
DatatypeFactory,"newXMLGregorianCalendarTime(int hours, int minutes, int seconds, int milliseconds, int timezone)",XMLGregorianCalendar,Create a Java instance of XML Schema builtin datatype time.,"

newXMLGregorianCalendarTime
public XMLGregorianCalendar newXMLGregorianCalendarTime(int hours,
                                                        int minutes,
                                                        int seconds,
                                                        int milliseconds,
                                                        int timezone)
Create a Java instance of XML Schema builtin datatype time.
A DatatypeConstants.FIELD_UNDEFINED value indicates that field is not set.

Parameters:
hours - number of hours
minutes - number of minutes
seconds - number of seconds
milliseconds - number of milliseconds
timezone - offset in minutes. DatatypeConstants.FIELD_UNDEFINED indicates optional field is not set.
Returns:
XMLGregorianCalendar created from parameter values.
Throws:
IllegalArgumentException - If any individual parameter's value is outside the maximum value constraint for the field
   as determined by the Date/Time Data Mapping table in XMLGregorianCalendar
   or if the composite values constitute an invalid XMLGregorianCalendar instance
   as determined by XMLGregorianCalendar.isValid().
See Also:
DatatypeConstants.FIELD_UNDEFINED


"
Duration,add(Duration rhs),abstract Duration,Computes a new duration whose value is this+rhs.,"

add
public abstract Duration add(Duration rhs)
Computes a new duration whose value is this+rhs.
For example,

 ""1 day"" + ""-3 days"" = ""-2 days""
 ""1 year"" + ""1 day"" = ""1 year and 1 day""
 ""-(1 hour,50 minutes)"" + ""-20 minutes"" = ""-(1 hours,70 minutes)""
 ""15 hours"" + ""-3 days"" = ""-(2 days,9 hours)""
 ""1 year"" + ""-1 day"" = IllegalStateException
 
Since there's no way to meaningfully subtract 1 day from 1 month,
 there are cases where the operation fails in
 IllegalStateException.

 Formally, the computation is defined as follows.

 Firstly, we can assume that two Durations to be added
 are both positive without losing generality (i.e.,
 (-X)+Y=Y-X, X+(-Y)=X-Y,
 (-X)+(-Y)=-(X+Y))

 
 Addition of two positive Durations are simply defined as
 field by field addition where missing fields are treated as 0.
 
 A field of the resulting Duration will be unset if and
 only if respective fields of two input Durations are unset.
 
 Note that lhs.add(rhs) will be always successful if
 lhs.signum()*rhs.signum()!=-1 or both of them are
 normalized.

Parameters:
rhs - Duration to add to this Duration
Returns:
non-null valid Duration object.
Throws:
NullPointerException - If the rhs parameter is null.
IllegalStateException - If two durations cannot be meaningfully added. For
      example, adding negative one day to one month causes
      this exception.
See Also:
subtract(Duration)


"
Duration,addTo(Calendar calendar),abstract void,Adds this duration to a Calendar object.,"

addTo
public abstract void addTo(Calendar calendar)
Adds this duration to a Calendar object.

 
 Calls Calendar.add(int,int) in the
 order of YEARS, MONTHS, DAYS, HOURS, MINUTES, SECONDS, and MILLISECONDS
 if those fields are present. Because the Calendar class
 uses int to hold values, there are cases where this method
 won't work correctly (for example if values of fields
 exceed the range of int.)
 

 Also, since this duration class is a Gregorian duration, this
 method will not work correctly if the given Calendar
 object is based on some other calendar systems.
 

 Any fractional parts of this Duration object
 beyond milliseconds will be simply ignored. For example, if
 this duration is ""P1.23456S"", then 1 is added to SECONDS,
 234 is added to MILLISECONDS, and the rest will be unused.
 

 Note that because Calendar.add(int, int) is using
 int, Duration with values beyond the
 range of int in its fields
 will cause overflow/underflow to the given Calendar.
 XMLGregorianCalendar.add(Duration) provides the same
 basic operation as this method while avoiding
 the overflow/underflow issues.

Parameters:
calendar - A calendar object whose value will be modified.
Throws:
NullPointerException - if the calendar parameter is null.


"
Duration,addTo(Date date),void,Adds this duration to a Date object.,"

addTo
public void addTo(Date date)
Adds this duration to a Date object.

 
 The given date is first converted into
 a GregorianCalendar, then the duration
 is added exactly like the addTo(Calendar) method.

 
 The updated time instant is then converted back into a
 Date object and used to update the given Date object.

 
 This somewhat redundant computation is necessary to unambiguously
 determine the duration of months and years.

Parameters:
date - A date object whose value will be modified.
Throws:
NullPointerException - if the date parameter is null.


"
Duration,compare(Duration duration),abstract int,Partial order relation comparison with this Duration instance.,"

compare
public abstract int compare(Duration duration)
Partial order relation comparison with this Duration instance.
Comparison result must be in accordance with
 W3C XML Schema 1.0 Part 2, Section 3.2.7.6.2,
 Order relation on duration.
Return:

DatatypeConstants.LESSER if this Duration is shorter than duration parameter
DatatypeConstants.EQUAL if this Duration is equal to duration parameter
DatatypeConstants.GREATER if this Duration is longer than duration parameter
DatatypeConstants.INDETERMINATE if a conclusive partial order relation cannot be determined


Parameters:
duration - to compare
Returns:
the relationship between this Durationand duration parameter as
   DatatypeConstants.LESSER, DatatypeConstants.EQUAL, DatatypeConstants.GREATER
   or DatatypeConstants.INDETERMINATE.
Throws:
UnsupportedOperationException - If the underlying implementation
   cannot reasonably process the request, e.g. W3C XML Schema allows for
   arbitrarily large/small/precise values, the request may be beyond the
   implementations capability.
NullPointerException - if duration is null.
See Also:
isShorterThan(Duration), 
isLongerThan(Duration)


"
Duration,equals(Object duration),boolean,Checks if this duration object has the same duration as another Duration object.,"

equals
public boolean equals(Object duration)
Checks if this duration object has the same duration
 as another Duration object.
For example, ""P1D"" (1 day) is equal to ""PT24H"" (24 hours).
Duration X is equal to Y if and only if time instant
 t+X and t+Y are the same for all the test time instants
 specified in the section 3.2.6.2 of the XML Schema 1.0
 specification.
Note that there are cases where two Durations are
 ""incomparable"" to each other, like one month and 30 days.
 For example,

 !new Duration(""P1M"").isShorterThan(new Duration(""P30D""))
 !new Duration(""P1M"").isLongerThan(new Duration(""P30D""))
 !new Duration(""P1M"").equals(new Duration(""P30D""))
 

Overrides:
equals in class Object
Parameters:
duration - The object to compare this Duration against.
Returns:
true if this duration is the same length as
         duration.
      false if duration is null,
         is not a
         Duration object,
         or its length is different from this duration.
Throws:
UnsupportedOperationException - If the underlying implementation
   cannot reasonably process the request, e.g. W3C XML Schema allows for
   arbitrarily large/small/precise values, the request may be beyond the
   implementations capability.
See Also:
compare(Duration duration)


"
Duration,getDays(),int,"Obtains the value of the DAYS field as an integer value, or 0 if not present.","

getDays
public int getDays()
Obtains the value of the DAYS field as an integer value,
 or 0 if not present.

 This method works just like getYears() except
 that this method works on the DAYS field.

Returns:
Days of this Duration.


"
Duration,getField(DatatypeConstants.Field field),abstract Number,Gets the value of a field.,"

getField
public abstract Number getField(DatatypeConstants.Field field)
Gets the value of a field.

 Fields of a duration object may contain arbitrary large value.
 Therefore this method is designed to return a Number object.

 In case of YEARS, MONTHS, DAYS, HOURS, and MINUTES, the returned
 number will be a non-negative integer. In case of seconds,
 the returned number may be a non-negative decimal value.

Parameters:
field - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,
      MINUTES, or SECONDS.)
Returns:
If the specified field is present, this method returns
      a non-null non-negative Number object that
      represents its value. If it is not present, return null.
      For YEARS, MONTHS, DAYS, HOURS, and MINUTES, this method
      returns a BigInteger object. For SECONDS, this
      method returns a BigDecimal.
Throws:
NullPointerException - If the field is null.


"
Duration,getHours(),int,"Obtains the value of the HOURS field as an integer value, or 0 if not present.","

getHours
public int getHours()
Obtains the value of the HOURS field as an integer value,
 or 0 if not present.

 This method works just like getYears() except
 that this method works on the HOURS field.

Returns:
Hours of this Duration.


"
Duration,getMinutes(),int,"Obtains the value of the MINUTES field as an integer value, or 0 if not present.","

getMinutes
public int getMinutes()
Obtains the value of the MINUTES field as an integer value,
 or 0 if not present.

 This method works just like getYears() except
 that this method works on the MINUTES field.

Returns:
Minutes of this Duration.


"
Duration,getMonths(),int,"Obtains the value of the MONTHS field as an integer value, or 0 if not present.","

getMonths
public int getMonths()
Obtains the value of the MONTHS field as an integer value,
 or 0 if not present.

 This method works just like getYears() except
 that this method works on the MONTHS field.

Returns:
Months of this Duration.


"
Duration,getSeconds(),int,"Obtains the value of the SECONDS field as an integer value, or 0 if not present.","

getSeconds
public int getSeconds()
Obtains the value of the SECONDS field as an integer value,
 or 0 if not present.

 This method works just like getYears() except
 that this method works on the SECONDS field.

Returns:
seconds in the integer value. The fraction of seconds
   will be discarded (for example, if the actual value is 2.5,
   this method returns 2)


"
Duration,getSign(),abstract int,"Returns the sign of this duration in -1,0, or 1.","

getSign
public abstract int getSign()
Returns the sign of this duration in -1,0, or 1.

Returns:
-1 if this duration is negative, 0 if the duration is zero,
      and 1 if the duration is positive.


"
Duration,getTimeInMillis(Calendar startInstant),long,Returns the length of the duration in milli-seconds.,"

getTimeInMillis
public long getTimeInMillis(Calendar startInstant)
Returns the length of the duration in milli-seconds.
If the seconds field carries more digits than milli-second order,
 those will be simply discarded (or in other words, rounded to zero.)
 For example, for any Calendar value x,

 new Duration(""PT10.00099S"").getTimeInMills(x) == 10000.
 new Duration(""-PT10.00099S"").getTimeInMills(x) == -10000.
 

 Note that this method uses the addTo(Calendar) method,
 which may work incorrectly with Duration objects with
 very large values in its fields. See the addTo(Calendar)
 method for details.

Parameters:
startInstant - The length of a month/year varies. The startInstant is
      used to disambiguate this variance. Specifically, this method
      returns the difference between startInstant and
      startInstant+duration
Returns:
milliseconds between startInstant and
   startInstant plus this Duration
Throws:
NullPointerException - if startInstant parameter
 is null.


"
Duration,getTimeInMillis(Date startInstant),long,Returns the length of the duration in milli-seconds.,"

getTimeInMillis
public long getTimeInMillis(Date startInstant)
Returns the length of the duration in milli-seconds.
If the seconds field carries more digits than milli-second order,
 those will be simply discarded (or in other words, rounded to zero.)
 For example, for any Date value x,

 new Duration(""PT10.00099S"").getTimeInMills(x) == 10000.
 new Duration(""-PT10.00099S"").getTimeInMills(x) == -10000.
 

 Note that this method uses the addTo(Date) method,
 which may work incorrectly with Duration objects with
 very large values in its fields. See the addTo(Date)
 method for details.

Parameters:
startInstant - The length of a month/year varies. The startInstant is
      used to disambiguate this variance. Specifically, this method
      returns the difference between startInstant and
      startInstant+duration.
Returns:
milliseconds between startInstant and
   startInstant plus this Duration
Throws:
NullPointerException - If the startInstant parameter is null.
See Also:
getTimeInMillis(Calendar)


"
Duration,getXMLSchemaType(),QName,Return the name of the XML Schema date/time type that this instance maps to.,"

getXMLSchemaType
public QName getXMLSchemaType()
Return the name of the XML Schema date/time type that this instance
 maps to. Type is computed based on fields that are set,
 i.e. isSet(DatatypeConstants.Field field) == true.




         Required fields for XML Schema 1.0 Date/Time Datatypes.
(timezone is optional for all date/time datatypes)





Datatype
year
month
day
hour
minute
second


DatatypeConstants.DURATION
X
X
X
X
X
X


DatatypeConstants.DURATION_DAYTIME


X
X
X
X


DatatypeConstants.DURATION_YEARMONTH
X
X








Returns:
one of the following constants:
   DatatypeConstants.DURATION,
   DatatypeConstants.DURATION_DAYTIME or
   DatatypeConstants.DURATION_YEARMONTH.
Throws:
IllegalStateException - If the combination of set fields does not match one of the XML Schema date/time datatypes.


"
Duration,getYears(),int,Get the years value of this Duration as an int or 0 if not present.,"

getYears
public int getYears()
Get the years value of this Duration as an int or 0 if not present.
getYears() is a convenience method for
 getField(DatatypeConstants.YEARS).
As the return value is an int, an incorrect value will be returned for Durations
 with years that go beyond the range of an int.
 Use getField(DatatypeConstants.YEARS) to avoid possible loss of precision.

Returns:
If the years field is present, return its value as an int, else return 0.


"
Duration,hashCode(),abstract int,Returns a hash code consistent with the definition of the equals method.,"

hashCode
public abstract int hashCode()
Returns a hash code consistent with the definition of the equals method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.hashCode()


"
Duration,isLongerThan(Duration duration),boolean,Checks if this duration object is strictly longer than another Duration object.,"

isLongerThan
public boolean isLongerThan(Duration duration)
Checks if this duration object is strictly longer than
 another Duration object.
Duration X is ""longer"" than Y if and only if X>Y
 as defined in the section 3.2.6.2 of the XML Schema 1.0
 specification.
For example, ""P1D"" (one day) > ""PT12H"" (12 hours) and
 ""P2Y"" (two years) > ""P23M"" (23 months).

Parameters:
duration - Duration to test this Duration against.
Returns:
true if the duration represented by this object
      is longer than the given duration. false otherwise.
Throws:
UnsupportedOperationException - If the underlying implementation
   cannot reasonably process the request, e.g. W3C XML Schema allows for
   arbitrarily large/small/precise values, the request may be beyond the
   implementations capability.
NullPointerException - If duration is null.
See Also:
isShorterThan(Duration), 
compare(Duration duration)


"
Duration,isSet(DatatypeConstants.Field field),abstract boolean,Checks if a field is set.,"

isSet
public abstract boolean isSet(DatatypeConstants.Field field)
Checks if a field is set.

 A field of a duration object may or may not be present.
 This method can be used to test if a field is present.

Parameters:
field - one of the six Field constants (YEARS,MONTHS,DAYS,HOURS,
      MINUTES, or SECONDS.)
Returns:
true if the field is present. false if not.
Throws:
NullPointerException - If the field parameter is null.


"
Duration,isShorterThan(Duration duration),boolean,Checks if this duration object is strictly shorter than another Duration object.,"

isShorterThan
public boolean isShorterThan(Duration duration)
Checks if this duration object is strictly shorter than
 another Duration object.

Parameters:
duration - Duration to test this Duration against.
Returns:
true if duration parameter is shorter than this Duration,
   else false.
Throws:
UnsupportedOperationException - If the underlying implementation
   cannot reasonably process the request, e.g. W3C XML Schema allows for
   arbitrarily large/small/precise values, the request may be beyond the
   implementations capability.
NullPointerException - if duration is null.
See Also:
isLongerThan(Duration duration), 
compare(Duration duration)


"
Duration,multiply(BigDecimal factor),abstract Duration,Computes a new duration whose value is factor times longer than the value of this duration.,"

multiply
public abstract Duration multiply(BigDecimal factor)
Computes a new duration whose value is factor times
 longer than the value of this duration.

 
 For example,
 
 ""P1M"" (1 month) * ""12"" = ""P12M"" (12 months)
 ""PT1M"" (1 min) * ""0.3"" = ""PT18S"" (18 seconds)
 ""P1M"" (1 month) * ""1.5"" = IllegalStateException
 

 Since the Duration class is immutable, this method
 doesn't change the value of this object. It simply computes
 a new Duration object and returns it.

 
 The operation will be performed field by field with the precision
 of BigDecimal. Since all the fields except seconds are
 restricted to hold integers,
 any fraction produced by the computation will be
 carried down toward the next lower unit. For example,
 if you multiply ""P1D"" (1 day) with ""0.5"", then it will be 0.5 day,
 which will be carried down to ""PT12H"" (12 hours).
 When fractions of month cannot be meaningfully carried down
 to days, or year to months, this will cause an
 IllegalStateException to be thrown.
 For example if you multiple one month by 0.5.

 To avoid IllegalStateException, use
 the normalizeWith(Calendar) method to remove the years
 and months fields.

Parameters:
factor - to multiply by
Returns:
returns a non-null valid Duration object
Throws:
IllegalStateException - if operation produces fraction in
 the months field.
NullPointerException - if the factor parameter is
 null.


"
Duration,multiply(int factor),Duration,Computes a new duration whose value is factor times longer than the value of this duration.,"

multiply
public Duration multiply(int factor)
Computes a new duration whose value is factor times
 longer than the value of this duration.
This method is provided for the convenience.
 It is functionally equivalent to the following code:

 multiply(new BigDecimal(String.valueOf(factor)))
 

Parameters:
factor - Factor times longer of new Duration to create.
Returns:
New Duration that is factortimes longer than this Duration.
See Also:
multiply(BigDecimal)


"
Duration,negate(),abstract Duration,Returns a new Duration object whose value is -this.,"

negate
public abstract Duration negate()
Returns a new Duration object whose
 value is -this.

 
 Since the Duration class is immutable, this method
 doesn't change the value of this object. It simply computes
 a new Duration object and returns it.

Returns:
always return a non-null valid Duration object.


"
Duration,normalizeWith(Calendar startTimeInstant),abstract Duration,Converts the years and months fields into the days field by using a specific time instant as the reference point.,"

normalizeWith
public abstract Duration normalizeWith(Calendar startTimeInstant)
Converts the years and months fields into the days field
 by using a specific time instant as the reference point.
For example, duration of one month normalizes to 31 days
 given the start time instance ""July 8th 2003, 17:40:32"".
Formally, the computation is done as follows:

the given Calendar object is cloned
the years, months and days fields will be added to the Calendar object
      by using the Calendar.add(int,int) method
the difference between the two Calendars in computed in milliseconds and converted to days,
     if a remainder occurs due to Daylight Savings Time, it is discarded
the computed days, along with the hours, minutes and seconds
      fields of this duration object is used to construct a new
      Duration object.

Note that since the Calendar class uses int to
 hold the value of year and month, this method may produce
 an unexpected result if this duration object holds
 a very large value in the years or months fields.

Parameters:
startTimeInstant - Calendar reference point.
Returns:
Duration of years and months of this Duration as days.
Throws:
NullPointerException - If the startTimeInstant parameter is null.


"
Duration,subtract(Duration rhs),Duration,Computes a new duration whose value is this-rhs.,"

subtract
public Duration subtract(Duration rhs)
Computes a new duration whose value is this-rhs.
For example:

 ""1 day"" - ""-3 days"" = ""4 days""
 ""1 year"" - ""1 day"" = IllegalStateException
 ""-(1 hour,50 minutes)"" - ""-20 minutes"" = ""-(1hours,30 minutes)""
 ""15 hours"" - ""-3 days"" = ""3 days and 15 hours""
 ""1 year"" - ""-1 day"" = ""1 year and 1 day""
 
Since there's no way to meaningfully subtract 1 day from 1 month,
 there are cases where the operation fails in IllegalStateException.
Formally the computation is defined as follows.
 First, we can assume that two Durations are both positive
 without losing generality.  (i.e.,
 (-X)-Y=-(X+Y), X-(-Y)=X+Y,
 (-X)-(-Y)=-(X-Y))
Then two durations are subtracted field by field.
 If the sign of any non-zero field F is different from
 the sign of the most significant field,
 1 (if F is negative) or -1 (otherwise)
 will be borrowed from the next bigger unit of F.
This process is repeated until all the non-zero fields have
 the same sign.
If a borrow occurs in the days field (in other words, if
 the computation needs to borrow 1 or -1 month to compensate
 days), then the computation fails by throwing an
 IllegalStateException.

Parameters:
rhs - Duration to subtract from this Duration.
Returns:
New Duration created from subtracting rhs from this Duration.
Throws:
IllegalStateException - If two durations cannot be meaningfully subtracted. For
      example, subtracting one day from one month causes
      this exception.
NullPointerException - If the rhs parameter is null.
See Also:
add(Duration)


"
Duration,toString(),String,Returns a String representation of this Duration Object.,"

toString
public String toString()
Returns a String representation of this Duration Object.
The result is formatted according to the XML Schema 1.0 spec and can be always parsed back later into the
 equivalent Duration Object by DatatypeFactory.newDuration(String  lexicalRepresentation).
Formally, the following holds for any Duration
Object x:

 new Duration(x.toString()).equals(x)
 

Overrides:
toString in class Object
Returns:
A non-null valid String representation of this Duration.


"
XMLGregorianCalendar,add(Duration duration),abstract void,Add duration to this instance.,"

add
public abstract void add(Duration duration)
Add duration to this instance.
The computation is specified in
 XML Schema 1.0 Part 2, Appendix E,
 Adding durations to dateTimes>.
 date/time field mapping table
 defines the mapping from XML Schema 1.0 dateTime fields
 to this class' representation of those fields.

Parameters:
duration - Duration to add to this XMLGregorianCalendar.
Throws:
NullPointerException - when duration parameter is null.


"
XMLGregorianCalendar,clear(),abstract void,Unset all fields to undefined.,"

clear
public abstract void clear()
Unset all fields to undefined.
Set all int fields to DatatypeConstants.FIELD_UNDEFINED and reference fields
 to null.

"
XMLGregorianCalendar,clone(),abstract Object,Creates and returns a copy of this object.,"

clone
public abstract Object clone()
Creates and returns a copy of this object.

Overrides:
clone in class Object
Returns:
copy of this Object
See Also:
Cloneable


"
XMLGregorianCalendar,compare(XMLGregorianCalendar xmlGregorianCalendar),abstract int,"Compare two instances of W3C XML Schema 1.0 date/time datatypes according to partial order relation defined in W3C XML Schema 1.0 Part 2, Section 3.2.7.3, Order relation on dateTime.","

compare
public abstract int compare(XMLGregorianCalendar xmlGregorianCalendar)
Compare two instances of W3C XML Schema 1.0 date/time datatypes
 according to partial order relation defined in
 W3C XML Schema 1.0 Part 2, Section 3.2.7.3,
 Order relation on dateTime.
xsd:dateTime datatype field mapping to accessors of
 this class are defined in
 date/time field mapping table.

Parameters:
xmlGregorianCalendar - Instance of XMLGregorianCalendar to compare
Returns:
The relationship between this XMLGregorianCalendar and
   the specified xmlGregorianCalendar as
   DatatypeConstants.LESSER,
   DatatypeConstants.EQUAL,
   DatatypeConstants.GREATER or
   DatatypeConstants.INDETERMINATE.
Throws:
NullPointerException - if xmlGregorianCalendar is null.


"
XMLGregorianCalendar,equals(Object obj),boolean,Compares this calendar to the specified object.,"

equals
public boolean equals(Object obj)
Compares this calendar to the specified object. The result is
 true if and only if the argument is not null and is an
 XMLGregorianCalendar object that represents the same
 instant in time as this object.

Overrides:
equals in class Object
Parameters:
obj - to compare.
Returns:
true when obj is an instance of
 XMLGregorianCalendar and
 compare(XMLGregorianCalendar obj)
 returns DatatypeConstants.EQUAL,
 otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
XMLGregorianCalendar,getDay(),abstract int,Return day in month or DatatypeConstants.FIELD_UNDEFINED.,"

getDay
public abstract int getDay()
Return day in month or DatatypeConstants.FIELD_UNDEFINED.
Value constraints for this value are summarized in
 day field of date/time field mapping table.

See Also:
setDay(int)


"
XMLGregorianCalendar,getEon(),abstract BigInteger,Return high order component for XML Schema 1.0 dateTime datatype field for year.,"

getEon
public abstract BigInteger getEon()
Return high order component for XML Schema 1.0 dateTime datatype field for
 year.
 null if this optional part of the year field is not defined.
Value constraints for this value are summarized in
 year field of date/time field mapping table.

Returns:
eon of this XMLGregorianCalendar. The value
 returned is an integer multiple of 10^9.
See Also:
getYear(), 
getEonAndYear()


"
XMLGregorianCalendar,getEonAndYear(),abstract BigInteger,Return XML Schema 1.0 dateTime datatype field for year.,"

getEonAndYear
public abstract BigInteger getEonAndYear()
Return XML Schema 1.0 dateTime datatype field for
 year.
Value constraints for this value are summarized in
 year field of date/time field mapping table.

Returns:
sum of eon and BigInteger.valueOf(year)
 when both fields are defined. When only year is defined,
 return it. When both eon and year are not
 defined, return null.
See Also:
getEon(), 
getYear()


"
XMLGregorianCalendar,getFractionalSecond(),abstract BigDecimal,Return fractional seconds.,"

getFractionalSecond
public abstract BigDecimal getFractionalSecond()
Return fractional seconds.
null is returned when this optional field is not defined.
Value constraints are detailed in
 second field of date/time field mapping table.
This optional field can only have a defined value when the
 xs:dateTime second field, represented by getSecond(),
 does not return DatatypeConstants.FIELD_UNDEFINED.

Returns:
fractional seconds  of this XMLGregorianCalendar.
See Also:
getSecond(), 
setTime(int, int, int, BigDecimal)


"
XMLGregorianCalendar,getHour(),abstract int,Return hours or DatatypeConstants.FIELD_UNDEFINED.,"

getHour
public abstract int getHour()
Return hours or DatatypeConstants.FIELD_UNDEFINED.
 Returns DatatypeConstants.FIELD_UNDEFINED if this field is not defined.

 Value constraints for this value are summarized in
 hour field of date/time field mapping table.

See Also:
setTime(int, int, int)


"
XMLGregorianCalendar,getMillisecond(),int,Return millisecond precision of getFractionalSecond().,"

getMillisecond
public int getMillisecond()
Return millisecond precision of getFractionalSecond().
This method represents a convenience accessor to infinite
 precision fractional second value returned by
 getFractionalSecond(). The returned value is the rounded
 down to milliseconds value of
 getFractionalSecond(). When getFractionalSecond()
 returns null, this method must return
 DatatypeConstants.FIELD_UNDEFINED.
Value constraints for this value are summarized in
 second field of date/time field mapping table.

Returns:
Millisecond  of this XMLGregorianCalendar.
See Also:
getFractionalSecond(), 
setTime(int, int, int)


"
XMLGregorianCalendar,getMinute(),abstract int,Return minutes or DatatypeConstants.FIELD_UNDEFINED.,"

getMinute
public abstract int getMinute()
Return minutes or DatatypeConstants.FIELD_UNDEFINED.
 Returns DatatypeConstants.FIELD_UNDEFINED if this field is not defined.

 Value constraints for this value are summarized in
 minute field of date/time field mapping table.

See Also:
setTime(int, int, int)


"
XMLGregorianCalendar,getMonth(),abstract int,Return number of month or DatatypeConstants.FIELD_UNDEFINED.,"

getMonth
public abstract int getMonth()
Return number of month or DatatypeConstants.FIELD_UNDEFINED.
Value constraints for this value are summarized in
 month field of date/time field mapping table.

Returns:
year  of this XMLGregorianCalendar.


"
XMLGregorianCalendar,getSecond(),abstract int,Return seconds or DatatypeConstants.FIELD_UNDEFINED.,"

getSecond
public abstract int getSecond()
Return seconds or DatatypeConstants.FIELD_UNDEFINED.
Returns DatatypeConstants.FIELD_UNDEFINED if this field is not defined.
 When this field is not defined, the optional xs:dateTime
 fractional seconds field, represented by
 getFractionalSecond() and getMillisecond(),
 must not be defined.
Value constraints for this value are summarized in
 second field of date/time field mapping table.

Returns:
Second  of this XMLGregorianCalendar.
See Also:
getFractionalSecond(), 
getMillisecond(), 
setTime(int, int, int)


"
XMLGregorianCalendar,getTimezone(),abstract int,Return timezone offset in minutes or DatatypeConstants.FIELD_UNDEFINED if this optional field is not defined.,"

getTimezone
public abstract int getTimezone()
Return timezone offset in minutes or
 DatatypeConstants.FIELD_UNDEFINED if this optional field is not defined.

 Value constraints for this value are summarized in
 timezone field of date/time field mapping table.

See Also:
setTimezone(int)


"
XMLGregorianCalendar,getTimeZone(int defaultZoneoffset),abstract TimeZone,Returns a java.util.TimeZone for this class.,"

getTimeZone
public abstract TimeZone getTimeZone(int defaultZoneoffset)
Returns a java.util.TimeZone for this class.
If timezone field is defined for this instance,
 returns TimeZone initialized with custom timezone id
 of zoneoffset. If timezone field is undefined,
 try the defaultZoneoffset that was passed in.
 If defaultZoneoffset is FIELD_UNDEFINED, return
 default timezone for this host.
 (Same default as java.util.GregorianCalendar).

Parameters:
defaultZoneoffset - default zoneoffset if this zoneoffset is
 DatatypeConstants.FIELD_UNDEFINED.
Returns:
TimeZone for this.


"
XMLGregorianCalendar,getXMLSchemaType(),abstract QName,Return the name of the XML Schema date/time type that this instance maps to.,"

getXMLSchemaType
public abstract QName getXMLSchemaType()
Return the name of the XML Schema date/time type that this instance
 maps to. Type is computed based on fields that are set.




         Required fields for XML Schema 1.0 Date/Time Datatypes.
(timezone is optional for all date/time datatypes)





Datatype
year
month
day
hour
minute
second


DatatypeConstants.DATETIME
X
X
X
X
X
X


DatatypeConstants.DATE
X
X
X





DatatypeConstants.TIME



X
X
X


DatatypeConstants.GYEARMONTH
X
X






DatatypeConstants.GMONTHDAY

X
X





DatatypeConstants.GYEAR
X







DatatypeConstants.GMONTH

X






DatatypeConstants.GDAY


X







Returns:
One of the following class constants:
   DatatypeConstants.DATETIME,
   DatatypeConstants.TIME,
   DatatypeConstants.DATE,
   DatatypeConstants.GYEARMONTH,
   DatatypeConstants.GMONTHDAY,
   DatatypeConstants.GYEAR,
   DatatypeConstants.GMONTH or
   DatatypeConstants.GDAY.
Throws:
IllegalStateException - if the combination of set fields
    does not match one of the eight defined XML Schema builtin
    date/time datatypes.


"
XMLGregorianCalendar,getYear(),abstract int,Return low order component for XML Schema 1.0 dateTime datatype field for year or DatatypeConstants.FIELD_UNDEFINED.,"

getYear
public abstract int getYear()
Return low order component for XML Schema 1.0 dateTime datatype field for
 year or DatatypeConstants.FIELD_UNDEFINED.
Value constraints for this value are summarized in
 year field of date/time field mapping table.

Returns:
year  of this XMLGregorianCalendar.
See Also:
getEon(), 
getEonAndYear()


"
XMLGregorianCalendar,hashCode(),int,Returns a hash code consistent with the definition of the equals method.,"

hashCode
public int hashCode()
Returns a hash code consistent with the definition of the equals method.

Overrides:
hashCode in class Object
Returns:
hash code of this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
XMLGregorianCalendar,isValid(),abstract boolean,Validate instance by getXMLSchemaType() constraints.,"

isValid
public abstract boolean isValid()
Validate instance by getXMLSchemaType() constraints.

Returns:
true if data values are valid.


"
XMLGregorianCalendar,normalize(),abstract XMLGregorianCalendar,Normalize this instance to UTC.,"

normalize
public abstract XMLGregorianCalendar normalize()
Normalize this instance to UTC.
2000-03-04T23:00:00+03:00 normalizes to 2000-03-04T20:00:00Z
Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).

Returns:
this XMLGregorianCalendar normalized to UTC.


"
XMLGregorianCalendar,reset(),abstract void,Reset this XMLGregorianCalendar to its original values.,"

reset
public abstract void reset()
Reset this XMLGregorianCalendar to its original values.
XMLGregorianCalendar is reset to the same values as when it was created with
 DatatypeFactory.newXMLGregorianCalendar(),
 DatatypeFactory.newXMLGregorianCalendar(String lexicalRepresentation),
 DatatypeFactory.newXMLGregorianCalendar(
   BigInteger year,
   int month,
   int day,
   int hour,
   int minute,
   int second,
   BigDecimal fractionalSecond,
   int timezone),
 DatatypeFactory.newXMLGregorianCalendar(
   int year,
   int month,
   int day,
   int hour,
   int minute,
   int second,
   int millisecond,
   int timezone),
 DatatypeFactory.newXMLGregorianCalendar(GregorianCalendar cal),
 DatatypeFactory.newXMLGregorianCalendarDate(
   int year,
   int month,
   int day,
   int timezone),
 DatatypeFactory.newXMLGregorianCalendarTime(
   int hours,
   int minutes,
   int seconds,
   int timezone),
 DatatypeFactory.newXMLGregorianCalendarTime(
   int hours,
   int minutes,
   int seconds,
   BigDecimal fractionalSecond,
   int timezone) or
 DatatypeFactory.newXMLGregorianCalendarTime(
   int hours,
   int minutes,
   int seconds,
   int milliseconds,
   int timezone).
 
reset() is designed to allow the reuse of existing XMLGregorianCalendars
 thus saving resources associated with the creation of new XMLGregorianCalendars.

"
XMLGregorianCalendar,setDay(int day),abstract void,Set days in month.,"

setDay
public abstract void setDay(int day)
Set days in month.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
day - value constraints summarized in day field of date/time field mapping table.
Throws:
IllegalArgumentException - if day parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,setFractionalSecond(BigDecimal fractional),abstract void,Set fractional seconds.,"

setFractionalSecond
public abstract void setFractionalSecond(BigDecimal fractional)
Set fractional seconds.
Unset this field by invoking the setter with a parameter value of null.

Parameters:
fractional - value constraints summarized in
   second field of date/time field mapping table.
Throws:
IllegalArgumentException - if fractional parameter is outside value constraints for the field as specified
   in date/time field mapping table.


"
XMLGregorianCalendar,setHour(int hour),abstract void,Set hours.,"

setHour
public abstract void setHour(int hour)
Set hours.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
hour - value constraints summarized in hour field of date/time field mapping table.
Throws:
IllegalArgumentException - if hour parameter is outside value constraints for the field as specified in
   date/time field mapping table.


"
XMLGregorianCalendar,setMillisecond(int millisecond),abstract void,Set milliseconds.,"

setMillisecond
public abstract void setMillisecond(int millisecond)
Set milliseconds.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
millisecond - value constraints summarized in
   second field of date/time field mapping table.
Throws:
IllegalArgumentException - if millisecond parameter is outside value constraints for the field as specified
   in date/time field mapping table.


"
XMLGregorianCalendar,setMinute(int minute),abstract void,Set minutes.,"

setMinute
public abstract void setMinute(int minute)
Set minutes.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
minute - value constraints summarized in minute field of date/time field mapping table.
Throws:
IllegalArgumentException - if minute parameter is outside value constraints for the field as specified in
   date/time field mapping table.


"
XMLGregorianCalendar,setMonth(int month),abstract void,Set month.,"

setMonth
public abstract void setMonth(int month)
Set month.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
month - value constraints summarized in month field of date/time field mapping table.
Throws:
IllegalArgumentException - if month parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,setSecond(int second),abstract void,Set seconds.,"

setSecond
public abstract void setSecond(int second)
Set seconds.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
second - value constraints summarized in second field of date/time field mapping table.
Throws:
IllegalArgumentException - if second parameter is outside value constraints for the field as specified in
   date/time field mapping table.


"
XMLGregorianCalendar,"setTime(int hour, int minute, int second)",void,Set time as one unit.,"

setTime
public void setTime(int hour,
                    int minute,
                    int second)
Set time as one unit.

Parameters:
hour - value constraints are summarized in
 hour field of date/time field mapping table.
minute - value constraints are summarized in
 minute field of date/time field mapping table.
second - value constraints are summarized in
 second field of date/time field mapping table.
Throws:
IllegalArgumentException - if any parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.
See Also:
setTime(int, int, int, BigDecimal)


"
XMLGregorianCalendar,"setTime(int hour, int minute, int second, BigDecimal fractional)",void,"Set time as one unit, including the optional infinite precision fractional seconds.","

setTime
public void setTime(int hour,
                    int minute,
                    int second,
                    BigDecimal fractional)
Set time as one unit, including the optional infinite precision
 fractional seconds.

Parameters:
hour - value constraints are summarized in
 hour field of date/time field mapping table.
minute - value constraints are summarized in
 minute field of date/time field mapping table.
second - value constraints are summarized in
 second field of date/time field mapping table.
fractional - value of null indicates this optional
   field is not set.
Throws:
IllegalArgumentException - if any parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,"setTime(int hour, int minute, int second, int millisecond)",void,"Set time as one unit, including optional milliseconds.","

setTime
public void setTime(int hour,
                    int minute,
                    int second,
                    int millisecond)
Set time as one unit, including optional milliseconds.

Parameters:
hour - value constraints are summarized in
 hour field of date/time field mapping table.
minute - value constraints are summarized in
 minute field of date/time field mapping table.
second - value constraints are summarized in
 second field of date/time field mapping table.
millisecond - value of DatatypeConstants.FIELD_UNDEFINED indicates this
                    optional field is not set.
Throws:
IllegalArgumentException - if any parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,setTimezone(int offset),abstract void,Set the number of minutes in the timezone offset.,"

setTimezone
public abstract void setTimezone(int offset)
Set the number of minutes in the timezone offset.
Unset this field by invoking the setter with a parameter value of DatatypeConstants.FIELD_UNDEFINED.

Parameters:
offset - value constraints summarized in 
   timezone field of date/time field mapping table.
Throws:
IllegalArgumentException - if offset parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,setYear(BigInteger year),abstract void,Set low and high order component of XSD dateTime year field.,"

setYear
public abstract void setYear(BigInteger year)
Set low and high order component of XSD dateTime year field.
Unset this field by invoking the setter with a parameter value of null.

Parameters:
year - value constraints summarized in year field of date/time field mapping table.
Throws:
IllegalArgumentException - if year parameter is
 outside value constraints for the field as specified in
 date/time field mapping table.


"
XMLGregorianCalendar,setYear(int year),abstract void,Set year of XSD dateTime year field.,"

setYear
public abstract void setYear(int year)
Set year of XSD dateTime year field.
Unset this field by invoking the setter with a parameter value of
 DatatypeConstants.FIELD_UNDEFINED.
Note: if the absolute value of the year parameter
 is less than 10^9, the eon component of the XSD year field is set to
 null by this method.

Parameters:
year - value constraints are summarized in year field of date/time field mapping table.
   If year is DatatypeConstants.FIELD_UNDEFINED, then eon is set to null.


"
XMLGregorianCalendar,toGregorianCalendar(),abstract GregorianCalendar,Convert this XMLGregorianCalendar to a GregorianCalendar.,"

toGregorianCalendar
public abstract GregorianCalendar toGregorianCalendar()
Convert this XMLGregorianCalendar to a GregorianCalendar.
When this instance has an undefined field, this
 conversion relies on the java.util.GregorianCalendar default
 for its corresponding field. A notable difference between
 XML Schema 1.0 date/time datatypes and java.util.GregorianCalendar
 is that Timezone value is optional for date/time datatypes and it is
 a required field for java.util.GregorianCalendar. See javadoc
 for java.util.TimeZone.getDefault() on how the default
 is determined. To explicitly specify the TimeZone
 instance, see
 toGregorianCalendar(TimeZone, Locale, XMLGregorianCalendar).




          Field by Field Conversion from this class to
          java.util.GregorianCalendar





java.util.GregorianCalendar field
javax.xml.datatype.XMLGregorianCalendar field


ERA
getEonAndYear().signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD


YEAR
getEonAndYear().abs().intValue()*


MONTH
getMonth() - DatatypeConstants.JANUARY + Calendar.JANUARY


DAY_OF_MONTH
getDay()


HOUR_OF_DAY
getHour()


MINUTE
getMinute()


SECOND
getSecond()


MILLISECOND
get millisecond order from getFractionalSecond()* 


GregorianCalendar.setTimeZone(TimeZone)
getTimezone() formatted into Custom timezone id



* designates possible loss of precision during the conversion due
 to source datatype having higher precision than target datatype.

 To ensure consistency in conversion implementations, the new
 GregorianCalendar should be instantiated in following
 manner.
 
Using timeZone value as defined above, create a new
 java.util.GregorianCalendar(timeZone,Locale.getDefault()).
   
Initialize all GregorianCalendar fields by calling Calendar.clear().
Obtain a pure Gregorian Calendar by invoking
   GregorianCalendar.setGregorianChange(
   new Date(Long.MIN_VALUE)).
Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,
       MINUTE, SECOND and MILLISECOND are set using the method
       Calendar.set(int,int)



See Also:
toGregorianCalendar(java.util.TimeZone, java.util.Locale, XMLGregorianCalendar)


"
XMLGregorianCalendar,"toGregorianCalendar(TimeZone timezone, Locale aLocale, XMLGregorianCalendar defaults)",abstract GregorianCalendar,Convert this XMLGregorianCalendar along with provided parameters to a GregorianCalendar instance.,"

toGregorianCalendar
public abstract GregorianCalendar toGregorianCalendar(TimeZone timezone,
                                                      Locale aLocale,
                                                      XMLGregorianCalendar defaults)
Convert this XMLGregorianCalendar along with provided parameters
 to a GregorianCalendar instance.
 Since XML Schema 1.0 date/time datetypes has no concept of
 timezone ids or daylight savings timezone ids, this conversion operation
 allows the user to explicitly specify one with
 timezone parameter.
To compute the return value's TimeZone field,
 
when parameter timeZone is non-null,
 it is the timezone field.
else when this.getTimezone() != FIELD_UNDEFINED,
 create a java.util.TimeZone with a custom timezone id
 using the this.getTimezone().
else when defaults.getTimezone() != FIELD_UNDEFINED,
 create a java.util.TimeZone with a custom timezone id
 using defaults.getTimezone().
else use the GregorianCalendar default timezone value
 for the host is defined as specified by
 java.util.TimeZone.getDefault().
To ensure consistency in conversion implementations, the new
 GregorianCalendar should be instantiated in following
 manner.
 
Create a new java.util.GregorianCalendar(TimeZone,
       Locale) with TimeZone set as specified above and the
       Locale parameter.
   
Initialize all GregorianCalendar fields by calling Calendar.clear()
Obtain a pure Gregorian Calendar by invoking
   GregorianCalendar.setGregorianChange(
   new Date(Long.MIN_VALUE)).
Its fields ERA, YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY,
       MINUTE, SECOND and MILLISECOND are set using the method
       Calendar.set(int,int)


Parameters:
timezone - provide Timezone. null is a legal value.
aLocale - provide explicit Locale. Use default GregorianCalendar locale if
                 value is null.
defaults - provide default field values to use when corresponding
                 field for this instance is FIELD_UNDEFINED or null.
                 If defaultsis null or a field
                 within the specified defaults is undefined,
                 just use java.util.GregorianCalendar defaults.
Returns:
a java.util.GregorianCalendar conversion of this instance.


"
XMLGregorianCalendar,toString(),String,Returns a String representation of this XMLGregorianCalendar Object.,"

toString
public String toString()
Returns a String representation of this XMLGregorianCalendar Object.
The result is a lexical representation generated by toXMLFormat().

Overrides:
toString in class Object
Returns:
A non-null valid String representation of this XMLGregorianCalendar.
Throws:
IllegalStateException - if the combination of set fields
    does not match one of the eight defined XML Schema builtin date/time datatypes.
See Also:
toXMLFormat()


"
XMLGregorianCalendar,toXMLFormat(),abstract String,Return the lexical representation of this instance.,"

toXMLFormat
public abstract String toXMLFormat()
Return the lexical representation of this instance.
 The format is specified in
 XML Schema 1.0 Part 2, Section 3.2.[7-14].1,
 Lexical Representation"".
Specific target lexical representation format is determined by
 getXMLSchemaType().

Returns:
XML, as String, representation of this XMLGregorianCalendar
Throws:
IllegalStateException - if the combination of set fields
    does not match one of the eight defined XML Schema builtin date/time datatypes.


"
