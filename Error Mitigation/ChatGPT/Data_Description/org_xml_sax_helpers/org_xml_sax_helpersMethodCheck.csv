Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AttributeListImpl,1,void setName(String name),False,,NULL
0,AttributeListImpl,2,void setType(String type),False,,NULL
0,AttributeListImpl,3,void setValue(String value),False,,NULL
0,AttributeListImpl,4,String getName(),False,,NULL
0,AttributeListImpl,5,String getType(),False,,NULL
1,AttributesImpl,1,void clear(),True,,"

clear
public void clear()
Clear the attribute list for reuse.

 Note that little memory is freed by this call:
 the current array is kept so it can be
 reused.

"
1,AttributesImpl,2,"void setAttribute(int index, String uri, String localName, String qName, String type, String value)",True,,"

setAttribute
public void setAttribute(int index,
                         String uri,
                         String localName,
                         String qName,
                         String type,
                         String value)
Set an attribute in the list.

 For the sake of speed, this method does no checking
 for name conflicts or well-formedness: such checks are the
 responsibility of the application.

Parameters:
index - The index of the attribute (zero-based).
uri - The Namespace URI, or the empty string if
        none is available or Namespace processing is not
        being performed.
localName - The local name, or the empty string if
        Namespace processing is not being performed.
qName - The qualified name, or the empty string
        if qualified names are not available.
type - The attribute type as a string.
value - The attribute value.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
1,AttributesImpl,3,void removeAttribute(int index),True,,"

removeAttribute
public void removeAttribute(int index)
Remove an attribute from the list.

Parameters:
index - The index of the attribute (zero-based).
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
1,AttributesImpl,4,void setAttributes(Attributes atts),True,,"

setAttributes
public void setAttributes(Attributes atts)
Copy an entire Attributes object.

 It may be more efficient to reuse an existing object
 rather than constantly allocating new ones.

Parameters:
atts - The attributes to copy.


"
1,AttributesImpl,5,"void setLocalName(int index, String localName)",True,,"

setLocalName
public void setLocalName(int index,
                         String localName)
Set the local name of a specific attribute.

Parameters:
index - The index of the attribute (zero-based).
localName - The attribute's local name, or the empty
        string for none.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not point to an attribute
            in the list.


"
2,DefaultHandler,1,"void characters(char[] ch, int start, int length)",True,,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Receive notification of character data inside an element.

 By default, do nothing.  Application writers may override this
 method to take specific actions for each chunk of character data
 (such as adding the data to a node or buffer, or printing it to
 a file).

Specified by:
characters in interface ContentHandler
Parameters:
ch - The characters.
start - The start position in the character array.
length - The number of characters to use from the
               character array.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.characters(char[], int, int)


"
2,DefaultHandler,2,void endDocument(),True,,"

endDocument
public void endDocument()
                 throws SAXException
Receive notification of the end of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end
 of a document (such as finalising a tree or closing an output
 file).

Specified by:
endDocument in interface ContentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.endDocument()


"
2,DefaultHandler,3,"void endElement(String uri, String localName, String qName)",True,,"

endElement
public void endElement(String uri,
                       String localName,
                       String qName)
                throws SAXException
Receive notification of the end of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end of
 each element (such as finalising a tree node or writing
 output to a file).

Specified by:
endElement in interface ContentHandler
Parameters:
uri - The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.
localName - The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.
qName - The qualified name (with prefix), or the
        empty string if qualified names are not available.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String)


"
2,DefaultHandler,4,void startDocument(),True,,"

startDocument
public void startDocument()
                   throws SAXException
Receive notification of the beginning of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the beginning
 of a document (such as allocating the root node of a tree or
 creating an output file).

Specified by:
startDocument in interface ContentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.startDocument()


"
2,DefaultHandler,5,"void startElement(String uri, String localName, String qName, Attributes attributes)",True,,"

startElement
public void startElement(String uri,
                         String localName,
                         String qName,
                         Attributes attributes)
                  throws SAXException
Receive notification of the start of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the start of
 each element (such as allocating a new tree node or writing
 output to a file).

Specified by:
startElement in interface ContentHandler
Parameters:
uri - The Namespace URI, or the empty string if the
        element has no Namespace URI or if Namespace
        processing is not being performed.
localName - The local name (without prefix), or the
        empty string if Namespace processing is not being
        performed.
qName - The qualified name (with prefix), or the
        empty string if qualified names are not available.
attributes - The attributes attached to the element.  If
        there are no attributes, it shall be an empty
        Attributes object.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ContentHandler.startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)


"
3,LocatorImpl,1,int getColumnNumber(),True,,"

getColumnNumber
public int getColumnNumber()
Return the saved column number (1-based).

Specified by:
getColumnNumber in interface Locator
Returns:
The column number as an integer, or -1 if none is available.
See Also:
Locator.getColumnNumber(), 
setColumnNumber(int)


"
3,LocatorImpl,2,int getLineNumber(),True,,"

getLineNumber
public int getLineNumber()
Return the saved line number (1-based).

Specified by:
getLineNumber in interface Locator
Returns:
The line number as an integer, or -1 if none is available.
See Also:
Locator.getLineNumber(), 
setLineNumber(int)


"
3,LocatorImpl,3,String getPublicId(),True,,"

getPublicId
public String getPublicId()
Return the saved public identifier.

Specified by:
getPublicId in interface Locator
Returns:
The public identifier as a string, or null if none
         is available.
See Also:
Locator.getPublicId(), 
setPublicId(java.lang.String)


"
3,LocatorImpl,4,String getSystemId(),True,,"

getSystemId
public String getSystemId()
Return the saved system identifier.

Specified by:
getSystemId in interface Locator
Returns:
The system identifier as a string, or null if none
         is available.
See Also:
Locator.getSystemId(), 
setSystemId(java.lang.String)


"
3,LocatorImpl,5,void setColumnNumber(int columnNumber),True,,"

setColumnNumber
public void setColumnNumber(int columnNumber)
Set the column number for this locator (1-based).

Parameters:
columnNumber - The column number, or -1 if none is available.
See Also:
getColumnNumber()


"
4,NamespaceSupport,1,void pushContext(),True,,"

pushContext
public void pushContext()
Start a new Namespace context.
 The new context will automatically inherit
 the declarations of its parent context, but it will also keep
 track of which declarations were made within this context.

 Event callback code should start a new context once per element.
 This means being ready to call this in either of two places.
 For elements that don't include namespace declarations, the
 ContentHandler.startElement() callback is the right place.
 For elements with such a declaration, it'd done in the first
 ContentHandler.startPrefixMapping() callback.
 A boolean flag can be used to
 track whether a context has been started yet.  When either of
 those methods is called, it checks the flag to see if a new context
 needs to be started.  If so, it starts the context and sets the
 flag.  After ContentHandler.startElement()
 does that, it always clears the flag.

 Normally, SAX drivers would push a new context at the beginning
 of each XML element.  Then they perform a first pass over the
 attributes to process all namespace declarations, making
 ContentHandler.startPrefixMapping() callbacks.
 Then a second pass is made, to determine the namespace-qualified
 names for all attributes and for the element name.
 Finally all the information for the
 ContentHandler.startElement() callback is available,
 so it can then be made.

 The Namespace support object always starts with a base context
 already in force: in this context, only the ""xml"" prefix is
 declared.

See Also:
ContentHandler, 
popContext()


"
4,NamespaceSupport,2,void popContext(),True,,"

popContext
public void popContext()
Revert to the previous Namespace context.

 Normally, you should pop the context at the end of each
 XML element.  After popping the context, all Namespace prefix
 mappings that were previously in force are restored.
You must not attempt to declare additional Namespace
 prefixes after popping a context, unless you push another
 context first.

See Also:
pushContext()


"
4,NamespaceSupport,3,"void declarePrefix(String prefix, String uri)",False,,NULL
4,NamespaceSupport,4,String getURI(String prefix),True,,"

getURI
public String getURI(String prefix)
Look up a prefix and get the currently-mapped Namespace URI.

 This method looks up the prefix in the current context.
 Use the empty string ("""") for the default Namespace.

Parameters:
prefix - The prefix to look up.
Returns:
The associated Namespace URI, or null if the prefix
         is undeclared in this context.
See Also:
getPrefix(java.lang.String), 
getPrefixes()


"
4,NamespaceSupport,5,String getPrefix(String uri),True,,"

getPrefix
public String getPrefix(String uri)
Return one of the prefixes mapped to a Namespace URI.

 If more than one prefix is currently mapped to the same
 URI, this method will make an arbitrary selection; if you
 want all of the prefixes, use the getPrefixes()
 method instead.
Note: this will never return the empty (default) prefix;
 to check for a default prefix, use the getURI
 method with an argument of """".

Parameters:
uri - the namespace URI
Returns:
one of the prefixes currently mapped to the URI supplied,
         or null if none is mapped or if the URI is assigned to
         the default namespace
See Also:
getPrefixes(java.lang.String), 
getURI(java.lang.String)


"
5,ParserAdapter,1,void setDocumentHandler(DocumentHandler handler),False,,NULL
5,ParserAdapter,2,void setEntityResolver(EntityResolver resolver),True,,"

setEntityResolver
public void setEntityResolver(EntityResolver resolver)
Set the entity resolver.

Specified by:
setEntityResolver in interface XMLReader
Parameters:
resolver - The new entity resolver.
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
5,ParserAdapter,3,void setErrorHandler(ErrorHandler handler),True,,"

setErrorHandler
public void setErrorHandler(ErrorHandler handler)
Set the error handler.

Specified by:
setErrorHandler in interface XMLReader
Parameters:
handler - The new error handler.
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
5,ParserAdapter,4,void setDTDHandler(DTDHandler handler),True,,"

setDTDHandler
public void setDTDHandler(DTDHandler handler)
Set the DTD handler.

Specified by:
setDTDHandler in interface XMLReader
Parameters:
handler - the new DTD handler
See Also:
XMLReader.setEntityResolver(org.xml.sax.EntityResolver)


"
5,ParserAdapter,5,void setLocale(Locale locale),False,,NULL
6,ParserFactory,1,org.xml.sax.Parser makeParser(),False,,NULL
6,ParserFactory,2,org.xml.sax.Parser makeParser(String className),False,,NULL
6,ParserFactory,3,"org.xml.sax.Parser makeParser(String className, ClassLoader loader)",False,,NULL
6,ParserFactory,4,"org.xml.sax.Parser makeParser(String className, ClassLoader loader, String parserName)",False,,NULL
6,ParserFactory,5,"org.xml.sax.Parser makeParser(String className, ClassLoader loader, String parserName, boolean namespaceAware)",False,,NULL
7,XMLFilterImpl,1,void startDocument(),True,,"

startDocument
public void startDocument()
                   throws SAXException
Filter a start document event.

Specified by:
startDocument in interface ContentHandler
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.endDocument()


"
7,XMLFilterImpl,2,void endDocument(),True,,"

endDocument
public void endDocument()
                 throws SAXException
Filter an end document event.

Specified by:
endDocument in interface ContentHandler
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.startDocument()


"
7,XMLFilterImpl,3,"void startElement(String uri, String localName, String qName, Attributes atts)",True,,"

startElement
public void startElement(String uri,
                         String localName,
                         String qName,
                         Attributes atts)
                  throws SAXException
Filter a start element event.

Specified by:
startElement in interface ContentHandler
Parameters:
uri - The element's Namespace URI, or the empty string.
localName - The element's local name, or the empty string.
qName - The element's qualified (prefixed) name, or the empty
        string.
atts - The element's attributes.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.endElement(java.lang.String, java.lang.String, java.lang.String), 
Attributes, 
AttributesImpl


"
7,XMLFilterImpl,4,"void endElement(String uri, String localName, String qName)",True,,"

endElement
public void endElement(String uri,
                       String localName,
                       String qName)
                throws SAXException
Filter an end element event.

Specified by:
endElement in interface ContentHandler
Parameters:
uri - The element's Namespace URI, or the empty string.
localName - The element's local name, or the empty string.
qName - The element's qualified (prefixed) name, or the empty
        string.
Throws:
SAXException - The client may throw
            an exception during processing.


"
7,XMLFilterImpl,5,"void characters(char[] ch, int start, int length)",True,,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Filter a character data event.

Specified by:
characters in interface ContentHandler
Parameters:
ch - An array of characters.
start - The starting position in the array.
length - The number of characters to use from the array.
Throws:
SAXException - The client may throw
            an exception during processing.
See Also:
ContentHandler.ignorableWhitespace(char[], int, int), 
Locator


"
8,XMLReaderAdapter,1,void setEntityResolver(EntityResolver resolver),True,,"

setEntityResolver
public void setEntityResolver(EntityResolver resolver)
Register the entity resolver.

Specified by:
setEntityResolver in interface Parser
Parameters:
resolver - The new resolver.
See Also:
Parser.setEntityResolver(org.xml.sax.EntityResolver)


"
8,XMLReaderAdapter,2,void setDTDHandler(DTDHandler handler),True,,"

setDTDHandler
public void setDTDHandler(DTDHandler handler)
Register the DTD event handler.

Specified by:
setDTDHandler in interface Parser
Parameters:
handler - The new DTD event handler.
See Also:
Parser.setDTDHandler(org.xml.sax.DTDHandler)


"
8,XMLReaderAdapter,3,void setContentHandler(ContentHandler handler),False,,NULL
8,XMLReaderAdapter,4,void setErrorHandler(ErrorHandler handler),True,,"

setErrorHandler
public void setErrorHandler(ErrorHandler handler)
Register the error event handler.

Specified by:
setErrorHandler in interface Parser
Parameters:
handler - The new error event handler.
See Also:
Parser.setErrorHandler(org.xml.sax.ErrorHandler)


"
8,XMLReaderAdapter,5,"void setFeature(String name, boolean value)",False,,NULL
9,XMLReaderFactory,1,XMLReader createXMLReader(),True,,"

createXMLReader
public static XMLReader createXMLReader()
                                 throws SAXException
Attempt to create an XMLReader from system defaults.
 In environments which can support it, the name of the XMLReader
 class is determined by trying each these options in order, and
 using the first one which succeeds: 
If the system property org.xml.sax.driver
 has a value, that is used as an XMLReader class name. 
The JAR ""Services API"" is used to look for a class name
 in the META-INF/services/org.xml.sax.driver file in
 jarfiles available to the runtime.
 SAX parser distributions are strongly encouraged to provide
 a default XMLReader class name that will take effect only when
 previous options (on this list) are not successful.
Finally, if ParserFactory.makeParser() can
 return a system default SAX1 parser, that parser is wrapped in
 a ParserAdapter.  (This is a migration aid for SAX1
 environments, where the org.xml.sax.parser system
 property will often be usable.) 

 In environments such as small embedded systems, which can not
 support that flexibility, other mechanisms to determine the default
 may be used. 
Note that many Java environments allow system properties to be
 initialized on a command line.  This means that in most cases
 setting a good value for that property ensures that calls to this
 method will succeed, except when security policies intervene.
 This will also maximize application portability to older SAX
 environments, with less robust implementations of this method.
 

Returns:
A new XMLReader.
Throws:
SAXException - If no default XMLReader class
            can be identified and instantiated.
See Also:
createXMLReader(java.lang.String)


"
9,XMLReaderFactory,2,XMLReader createXMLReader(String className),True,,"

createXMLReader
public static XMLReader createXMLReader(String className)
                                 throws SAXException
Attempt to create an XML reader from a class name.

 Given a class name, this method attempts to load
 and instantiate the class as an XML reader.
Note that this method will not be usable in environments where
 the caller (perhaps an applet) is not permitted to load classes
 dynamically.

Returns:
A new XML reader.
Throws:
SAXException - If the class cannot be
            loaded, instantiated, and cast to XMLReader.
See Also:
createXMLReader()


"
9,XMLReaderFactory,3,XMLReader createXMLReader(boolean useServices),False,,NULL
9,XMLReaderFactory,4,"XMLReader createXMLReader(String className, boolean useServices)",False,,NULL
9,XMLReaderFactory,5,"XMLReader createXMLReader(String className, ClassLoader loader)",False,,NULL
