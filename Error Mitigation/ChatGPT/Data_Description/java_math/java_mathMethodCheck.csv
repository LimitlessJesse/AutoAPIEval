Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BigDecimal,1,BigDecimal add(BigDecimal augend),True,,"

add
public BigDecimal add(BigDecimal augend)
Returns a BigDecimal whose value is (this +
 augend), and whose scale is max(this.scale(),
 augend.scale()).

Parameters:
augend - value to be added to this BigDecimal.
Returns:
this + augend


"
0,BigDecimal,2,BigDecimal subtract(BigDecimal subtrahend),True,,"

subtract
public BigDecimal subtract(BigDecimal subtrahend)
Returns a BigDecimal whose value is (this -
 subtrahend), and whose scale is max(this.scale(),
 subtrahend.scale()).

Parameters:
subtrahend - value to be subtracted from this BigDecimal.
Returns:
this - subtrahend


"
0,BigDecimal,3,BigDecimal multiply(BigDecimal multiplicand),True,,"

multiply
public BigDecimal multiply(BigDecimal multiplicand)
Returns a BigDecimal whose value is (this Ã—
 multiplicand), and whose scale is (this.scale() +
 multiplicand.scale()).

Parameters:
multiplicand - value to be multiplied by this BigDecimal.
Returns:
this * multiplicand


"
0,BigDecimal,4,BigDecimal divide(BigDecimal divisor),True,,"

divide
public BigDecimal divide(BigDecimal divisor)
Returns a BigDecimal whose value is (this /
 divisor), and whose preferred scale is (this.scale() -
 divisor.scale()); if the exact quotient cannot be
 represented (because it has a non-terminating decimal
 expansion) an ArithmeticException is thrown.

Parameters:
divisor - value by which this BigDecimal is to be divided.
Returns:
this / divisor
Throws:
ArithmeticException - if the exact quotient does not have a
         terminating decimal expansion
Since:
1.5


"
0,BigDecimal,5,int compareTo(BigDecimal val),True,,"

compareTo
public int compareTo(BigDecimal val)
Compares this BigDecimal with the specified
 BigDecimal.  Two BigDecimal objects that are
 equal in value but have a different scale (like 2.0 and 2.00)
 are considered equal by this method.  This method is provided
 in preference to individual methods for each of the six boolean
 comparison operators (<, ==,
 >, >=, !=, <=).  The
 suggested idiom for performing these comparisons is:
 (x.compareTo(y) <op> 0), where
 <op> is one of the six comparison operators.

Specified by:
compareTo in interface Comparable<BigDecimal>
Parameters:
val - BigDecimal to which this BigDecimal is
         to be compared.
Returns:
-1, 0, or 1 as this BigDecimal is numerically
          less than, equal to, or greater than val.


"
1,BigInteger,1,BigInteger add(BigInteger val),True,,"

add
public BigInteger add(BigInteger val)
Returns a BigInteger whose value is (this + val).

Parameters:
val - value to be added to this BigInteger.
Returns:
this + val


"
1,BigInteger,2,BigInteger subtract(BigInteger val),True,,"

subtract
public BigInteger subtract(BigInteger val)
Returns a BigInteger whose value is (this - val).

Parameters:
val - value to be subtracted from this BigInteger.
Returns:
this - val


"
1,BigInteger,3,BigInteger multiply(BigInteger val),True,,"

multiply
public BigInteger multiply(BigInteger val)
Returns a BigInteger whose value is (this * val).

Implementation Note:
An implementation may offer better algorithmic
 performance when val == this.
Parameters:
val - value to be multiplied by this BigInteger.
Returns:
this * val


"
1,BigInteger,4,BigInteger divide(BigInteger val),True,,"

divide
public BigInteger divide(BigInteger val)
Returns a BigInteger whose value is (this / val).

Parameters:
val - value by which this BigInteger is to be divided.
Returns:
this / val
Throws:
ArithmeticException - if val is zero.


"
1,BigInteger,5,BigInteger pow(int exponent),True,,"

pow
public BigInteger pow(int exponent)
Returns a BigInteger whose value is (thisexponent).
 Note that exponent is an integer rather than a BigInteger.

Parameters:
exponent - exponent to which this BigInteger is to be raised.
Returns:
thisexponent
Throws:
ArithmeticException - exponent is negative.  (This would
         cause the operation to yield a non-integer value.)


"
2,MathContext,1,int getPrecision(),True,,"

getPrecision
public int getPrecision()
Returns the precision setting.
 This value is always non-negative.

Returns:
an int which is the value of the precision
         setting


"
2,MathContext,2,RoundingMode getRoundingMode(),True,,"

getRoundingMode
public RoundingMode getRoundingMode()
Returns the roundingMode setting.
 This will be one of
 RoundingMode.CEILING,
 RoundingMode.DOWN,
 RoundingMode.FLOOR,
 RoundingMode.HALF_DOWN,
 RoundingMode.HALF_EVEN,
 RoundingMode.HALF_UP,
 RoundingMode.UNNECESSARY, or
 RoundingMode.UP.

Returns:
a RoundingMode object which is the value of the
         roundingMode setting


"
2,MathContext,3,MathContext precision(int precision),False,,NULL
2,MathContext,4,MathContext roundingMode(RoundingMode roundingMode),False,,NULL
2,MathContext,5,String toString(),True,,"

toString
public String toString()
Returns the string representation of this MathContext.
 The String returned represents the settings of the
 MathContext object as two space-delimited words
 (separated by a single space character, '\u0020',
 and with no leading or trailing white space), as follows:
 

 The string ""precision="", immediately followed
 by the value of the precision setting as a numeric string as if
 generated by the Integer.toString
 method.

 
 The string ""roundingMode="", immediately
 followed by the value of the roundingMode setting as a
 word.  This word will be the same as the name of the
 corresponding public constant in the RoundingMode
 enum.
 

 For example:
 
 precision=9 roundingMode=HALF_UP
 

 Additional words may be appended to the result of
 toString in the future if more properties are added to
 this class.

Overrides:
toString in class Object
Returns:
a String representing the context settings


"
