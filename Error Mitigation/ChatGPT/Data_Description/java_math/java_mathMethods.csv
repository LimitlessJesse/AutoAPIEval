ClassName,Method,Return Type,Description,Full Description
BigDecimal,abs(),BigDecimal,"Returns a BigDecimal whose value is the absolute value of this BigDecimal, and whose scale is this.scale().","

abs
public BigDecimal abs()
Returns a BigDecimal whose value is the absolute value
 of this BigDecimal, and whose scale is
 this.scale().

Returns:
abs(this)


"
BigDecimal,abs(MathContext mc),BigDecimal,"Returns a BigDecimal whose value is the absolute value of this BigDecimal, with rounding according to the context settings.","

abs
public BigDecimal abs(MathContext mc)
Returns a BigDecimal whose value is the absolute value
 of this BigDecimal, with rounding according to the
 context settings.

Parameters:
mc - the context to use.
Returns:
abs(this), rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5


"
BigDecimal,add(BigDecimal augend),BigDecimal,"Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale()).","

add
public BigDecimal add(BigDecimal augend)
Returns a BigDecimal whose value is (this +
 augend), and whose scale is max(this.scale(),
 augend.scale()).

Parameters:
augend - value to be added to this BigDecimal.
Returns:
this + augend


"
BigDecimal,"add(BigDecimal augend, MathContext mc)",BigDecimal,"Returns a BigDecimal whose value is (this + augend), with rounding according to the context settings.","

add
public BigDecimal add(BigDecimal augend,
                      MathContext mc)
Returns a BigDecimal whose value is (this + augend),
 with rounding according to the context settings.

 If either number is zero and the precision setting is nonzero then
 the other number, rounded if necessary, is used as the result.

Parameters:
augend - value to be added to this BigDecimal.
mc - the context to use.
Returns:
this + augend, rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5


"
BigDecimal,byteValueExact(),byte,"Converts this BigDecimal to a byte, checking for lost information.","

byteValueExact
public byte byteValueExact()
Converts this BigDecimal to a byte, checking
 for lost information.  If this BigDecimal has a
 nonzero fractional part or is out of the possible range for a
 byte result then an ArithmeticException is
 thrown.

Returns:
this BigDecimal converted to a byte.
Throws:
ArithmeticException - if this has a nonzero
         fractional part, or will not fit in a byte.
Since:
1.5


"
BigDecimal,compareTo(BigDecimal val),int,Compares this BigDecimal with the specified BigDecimal.,"

compareTo
public int compareTo(BigDecimal val)
Compares this BigDecimal with the specified
 BigDecimal.  Two BigDecimal objects that are
 equal in value but have a different scale (like 2.0 and 2.00)
 are considered equal by this method.  This method is provided
 in preference to individual methods for each of the six boolean
 comparison operators (<, ==,
 >, >=, !=, <=).  The
 suggested idiom for performing these comparisons is:
 (x.compareTo(y) <op> 0), where
 <op> is one of the six comparison operators.

Specified by:
compareTo in interface Comparable<BigDecimal>
Parameters:
val - BigDecimal to which this BigDecimal is
         to be compared.
Returns:
-1, 0, or 1 as this BigDecimal is numerically
          less than, equal to, or greater than val.


"
BigDecimal,divide(BigDecimal divisor),BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.","

divide
public BigDecimal divide(BigDecimal divisor)
Returns a BigDecimal whose value is (this /
 divisor), and whose preferred scale is (this.scale() -
 divisor.scale()); if the exact quotient cannot be
 represented (because it has a non-terminating decimal
 expansion) an ArithmeticException is thrown.

Parameters:
divisor - value by which this BigDecimal is to be divided.
Returns:
this / divisor
Throws:
ArithmeticException - if the exact quotient does not have a
         terminating decimal expansion
Since:
1.5


"
BigDecimal,"divide(BigDecimal divisor, int roundingMode)",BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale().","

divide
public BigDecimal divide(BigDecimal divisor,
                         int roundingMode)
Returns a BigDecimal whose value is (this /
 divisor), and whose scale is this.scale().  If
 rounding must be performed to generate a result with the given
 scale, the specified rounding mode is applied.

 The new divide(BigDecimal, RoundingMode) method
 should be used in preference to this legacy method.

Parameters:
divisor - value by which this BigDecimal is to be divided.
roundingMode - rounding mode to apply.
Returns:
this / divisor
Throws:
ArithmeticException - if divisor==0, or
         roundingMode==ROUND_UNNECESSARY and
         this.scale() is insufficient to represent the result
         of the division exactly.
IllegalArgumentException - if roundingMode does not
         represent a valid rounding mode.
See Also:
ROUND_UP, 
ROUND_DOWN, 
ROUND_CEILING, 
ROUND_FLOOR, 
ROUND_HALF_UP, 
ROUND_HALF_DOWN, 
ROUND_HALF_EVEN, 
ROUND_UNNECESSARY


"
BigDecimal,"divide(BigDecimal divisor, int scale, int roundingMode)",BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified.","

divide
public BigDecimal divide(BigDecimal divisor,
                         int scale,
                         int roundingMode)
Returns a BigDecimal whose value is (this /
 divisor), and whose scale is as specified.  If rounding must
 be performed to generate a result with the specified scale, the
 specified rounding mode is applied.

 The new divide(BigDecimal, int, RoundingMode) method
 should be used in preference to this legacy method.

Parameters:
divisor - value by which this BigDecimal is to be divided.
scale - scale of the BigDecimal quotient to be returned.
roundingMode - rounding mode to apply.
Returns:
this / divisor
Throws:
ArithmeticException - if divisor is zero,
         roundingMode==ROUND_UNNECESSARY and
         the specified scale is insufficient to represent the result
         of the division exactly.
IllegalArgumentException - if roundingMode does not
         represent a valid rounding mode.
See Also:
ROUND_UP, 
ROUND_DOWN, 
ROUND_CEILING, 
ROUND_FLOOR, 
ROUND_HALF_UP, 
ROUND_HALF_DOWN, 
ROUND_HALF_EVEN, 
ROUND_UNNECESSARY


"
BigDecimal,"divide(BigDecimal divisor, int scale, RoundingMode roundingMode)",BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose scale is as specified.","

divide
public BigDecimal divide(BigDecimal divisor,
                         int scale,
                         RoundingMode roundingMode)
Returns a BigDecimal whose value is (this /
 divisor), and whose scale is as specified.  If rounding must
 be performed to generate a result with the specified scale, the
 specified rounding mode is applied.

Parameters:
divisor - value by which this BigDecimal is to be divided.
scale - scale of the BigDecimal quotient to be returned.
roundingMode - rounding mode to apply.
Returns:
this / divisor
Throws:
ArithmeticException - if divisor is zero,
         roundingMode==RoundingMode.UNNECESSARY and
         the specified scale is insufficient to represent the result
         of the division exactly.
Since:
1.5


"
BigDecimal,"divide(BigDecimal divisor, MathContext mc)",BigDecimal,"Returns a BigDecimal whose value is (this / divisor), with rounding according to the context settings.","

divide
public BigDecimal divide(BigDecimal divisor,
                         MathContext mc)
Returns a BigDecimal whose value is (this /
 divisor), with rounding according to the context settings.

Parameters:
divisor - value by which this BigDecimal is to be divided.
mc - the context to use.
Returns:
this / divisor, rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY or
         mc.precision == 0 and the quotient has a
         non-terminating decimal expansion.
Since:
1.5


"
BigDecimal,"divide(BigDecimal divisor, RoundingMode roundingMode)",BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose scale is this.scale().","

divide
public BigDecimal divide(BigDecimal divisor,
                         RoundingMode roundingMode)
Returns a BigDecimal whose value is (this /
 divisor), and whose scale is this.scale().  If
 rounding must be performed to generate a result with the given
 scale, the specified rounding mode is applied.

Parameters:
divisor - value by which this BigDecimal is to be divided.
roundingMode - rounding mode to apply.
Returns:
this / divisor
Throws:
ArithmeticException - if divisor==0, or
         roundingMode==RoundingMode.UNNECESSARY and
         this.scale() is insufficient to represent the result
         of the division exactly.
Since:
1.5


"
BigDecimal,divideAndRemainder(BigDecimal divisor),BigDecimal[],Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands.,"

divideAndRemainder
public BigDecimal[] divideAndRemainder(BigDecimal divisor)
Returns a two-element BigDecimal array containing the
 result of divideToIntegralValue followed by the result of
 remainder on the two operands.

 Note that if both the integer quotient and remainder are
 needed, this method is faster than using the
 divideToIntegralValue and remainder methods
 separately because the division need only be carried out once.

Parameters:
divisor - value by which this BigDecimal is to be divided,
         and the remainder computed.
Returns:
a two element BigDecimal array: the quotient
         (the result of divideToIntegralValue) is the initial element
         and the remainder is the final element.
Throws:
ArithmeticException - if divisor==0
Since:
1.5
See Also:
divideToIntegralValue(java.math.BigDecimal, java.math.MathContext), 
remainder(java.math.BigDecimal, java.math.MathContext)


"
BigDecimal,"divideAndRemainder(BigDecimal divisor, MathContext mc)",BigDecimal[],Returns a two-element BigDecimal array containing the result of divideToIntegralValue followed by the result of remainder on the two operands calculated with rounding according to the context settings.,"

divideAndRemainder
public BigDecimal[] divideAndRemainder(BigDecimal divisor,
                                       MathContext mc)
Returns a two-element BigDecimal array containing the
 result of divideToIntegralValue followed by the result of
 remainder on the two operands calculated with rounding
 according to the context settings.

 Note that if both the integer quotient and remainder are
 needed, this method is faster than using the
 divideToIntegralValue and remainder methods
 separately because the division need only be carried out once.

Parameters:
divisor - value by which this BigDecimal is to be divided,
         and the remainder computed.
mc - the context to use.
Returns:
a two element BigDecimal array: the quotient
         (the result of divideToIntegralValue) is the
         initial element and the remainder is the final element.
Throws:
ArithmeticException - if divisor==0
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY, or mc.precision
         > 0 and the result of this.divideToIntgralValue(divisor) would
         require a precision of more than mc.precision digits.
Since:
1.5
See Also:
divideToIntegralValue(java.math.BigDecimal, java.math.MathContext), 
remainder(java.math.BigDecimal, java.math.MathContext)


"
BigDecimal,divideToIntegralValue(BigDecimal divisor),BigDecimal,Returns a BigDecimal whose value is the integer part of the quotient (this / divisor) rounded down.,"

divideToIntegralValue
public BigDecimal divideToIntegralValue(BigDecimal divisor)
Returns a BigDecimal whose value is the integer part
 of the quotient (this / divisor) rounded down.  The
 preferred scale of the result is (this.scale() -
 divisor.scale()).

Parameters:
divisor - value by which this BigDecimal is to be divided.
Returns:
The integer part of this / divisor.
Throws:
ArithmeticException - if divisor==0
Since:
1.5


"
BigDecimal,"divideToIntegralValue(BigDecimal divisor, MathContext mc)",BigDecimal,Returns a BigDecimal whose value is the integer part of (this / divisor).,"

divideToIntegralValue
public BigDecimal divideToIntegralValue(BigDecimal divisor,
                                        MathContext mc)
Returns a BigDecimal whose value is the integer part
 of (this / divisor).  Since the integer part of the
 exact quotient does not depend on the rounding mode, the
 rounding mode does not affect the values returned by this
 method.  The preferred scale of the result is
 (this.scale() - divisor.scale()).  An
 ArithmeticException is thrown if the integer part of
 the exact quotient needs more than mc.precision
 digits.

Parameters:
divisor - value by which this BigDecimal is to be divided.
mc - the context to use.
Returns:
The integer part of this / divisor.
Throws:
ArithmeticException - if divisor==0
ArithmeticException - if mc.precision > 0 and the result
         requires a precision of more than mc.precision digits.
Since:
1.5


"
BigDecimal,doubleValue(),double,Converts this BigDecimal to a double.,"

doubleValue
public double doubleValue()
Converts this BigDecimal to a double.
 This conversion is similar to the
 narrowing primitive conversion from double to
 float as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigDecimal has too great a
 magnitude represent as a double, it will be
 converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigDecimal
 value.

Specified by:
doubleValue in class Number
Returns:
this BigDecimal converted to a double.


"
BigDecimal,equals(Object x),boolean,Compares this BigDecimal with the specified Object for equality.,"

equals
public boolean equals(Object x)
Compares this BigDecimal with the specified
 Object for equality.  Unlike compareTo, this method considers two
 BigDecimal objects equal only if they are equal in
 value and scale (thus 2.0 is not equal to 2.00 when compared by
 this method).

Overrides:
equals in class Object
Parameters:
x - Object to which this BigDecimal is
         to be compared.
Returns:
true if and only if the specified Object is a
         BigDecimal whose value and scale are equal to this
         BigDecimal's.
See Also:
compareTo(java.math.BigDecimal), 
hashCode()


"
BigDecimal,floatValue(),float,Converts this BigDecimal to a float.,"

floatValue
public float floatValue()
Converts this BigDecimal to a float.
 This conversion is similar to the
 narrowing primitive conversion from double to
 float as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigDecimal has too great a
 magnitude to represent as a float, it will be
 converted to Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigDecimal
 value.

Specified by:
floatValue in class Number
Returns:
this BigDecimal converted to a float.


"
BigDecimal,hashCode(),int,Returns the hash code for this BigDecimal.,"

hashCode
public int hashCode()
Returns the hash code for this BigDecimal.  Note that
 two BigDecimal objects that are numerically equal but
 differ in scale (like 2.0 and 2.00) will generally not
 have the same hash code.

Overrides:
hashCode in class Object
Returns:
hash code for this BigDecimal.
See Also:
equals(Object)


"
BigDecimal,intValue(),int,Converts this BigDecimal to an int.,"

intValue
public int intValue()
Converts this BigDecimal to an int.
 This conversion is analogous to the
 narrowing primitive conversion from double to
 short as defined in section 5.1.3 of
 The Java™ Language Specification:
 any fractional part of this
 BigDecimal will be discarded, and if the resulting
 ""BigInteger"" is too big to fit in an
 int, only the low-order 32 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude and precision of this BigDecimal
 value as well as return a result with the opposite sign.

Specified by:
intValue in class Number
Returns:
this BigDecimal converted to an int.


"
BigDecimal,intValueExact(),int,"Converts this BigDecimal to an int, checking for lost information.","

intValueExact
public int intValueExact()
Converts this BigDecimal to an int, checking
 for lost information.  If this BigDecimal has a
 nonzero fractional part or is out of the possible range for an
 int result then an ArithmeticException is
 thrown.

Returns:
this BigDecimal converted to an int.
Throws:
ArithmeticException - if this has a nonzero
         fractional part, or will not fit in an int.
Since:
1.5


"
BigDecimal,longValue(),long,Converts this BigDecimal to a long.,"

longValue
public long longValue()
Converts this BigDecimal to a long.
 This conversion is analogous to the
 narrowing primitive conversion from double to
 short as defined in section 5.1.3 of
 The Java™ Language Specification:
 any fractional part of this
 BigDecimal will be discarded, and if the resulting
 ""BigInteger"" is too big to fit in a
 long, only the low-order 64 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude and precision of this BigDecimal value as well
 as return a result with the opposite sign.

Specified by:
longValue in class Number
Returns:
this BigDecimal converted to a long.


"
BigDecimal,longValueExact(),long,"Converts this BigDecimal to a long, checking for lost information.","

longValueExact
public long longValueExact()
Converts this BigDecimal to a long, checking
 for lost information.  If this BigDecimal has a
 nonzero fractional part or is out of the possible range for a
 long result then an ArithmeticException is
 thrown.

Returns:
this BigDecimal converted to a long.
Throws:
ArithmeticException - if this has a nonzero
         fractional part, or will not fit in a long.
Since:
1.5


"
BigDecimal,max(BigDecimal val),BigDecimal,Returns the maximum of this BigDecimal and val.,"

max
public BigDecimal max(BigDecimal val)
Returns the maximum of this BigDecimal and val.

Parameters:
val - value with which the maximum is to be computed.
Returns:
the BigDecimal whose value is the greater of this
         BigDecimal and val.  If they are equal,
         as defined by the compareTo
         method, this is returned.
See Also:
compareTo(java.math.BigDecimal)


"
BigDecimal,min(BigDecimal val),BigDecimal,Returns the minimum of this BigDecimal and val.,"

min
public BigDecimal min(BigDecimal val)
Returns the minimum of this BigDecimal and
 val.

Parameters:
val - value with which the minimum is to be computed.
Returns:
the BigDecimal whose value is the lesser of this
         BigDecimal and val.  If they are equal,
         as defined by the compareTo
         method, this is returned.
See Also:
compareTo(java.math.BigDecimal)


"
BigDecimal,movePointLeft(int n),BigDecimal,Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left.,"

movePointLeft
public BigDecimal movePointLeft(int n)
Returns a BigDecimal which is equivalent to this one
 with the decimal point moved n places to the left.  If
 n is non-negative, the call merely adds n to
 the scale.  If n is negative, the call is equivalent
 to movePointRight(-n).  The BigDecimal
 returned by this call has value (this ×
 10-n) and scale max(this.scale()+n,
 0).

Parameters:
n - number of places to move the decimal point to the left.
Returns:
a BigDecimal which is equivalent to this one with the
         decimal point moved n places to the left.
Throws:
ArithmeticException - if scale overflows.


"
BigDecimal,movePointRight(int n),BigDecimal,Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the right.,"

movePointRight
public BigDecimal movePointRight(int n)
Returns a BigDecimal which is equivalent to this one
 with the decimal point moved n places to the right.
 If n is non-negative, the call merely subtracts
 n from the scale.  If n is negative, the call
 is equivalent to movePointLeft(-n).  The
 BigDecimal returned by this call has value (this
 × 10n) and scale max(this.scale()-n,
 0).

Parameters:
n - number of places to move the decimal point to the right.
Returns:
a BigDecimal which is equivalent to this one
         with the decimal point moved n places to the right.
Throws:
ArithmeticException - if scale overflows.


"
BigDecimal,multiply(BigDecimal multiplicand),BigDecimal,"Returns a BigDecimal whose value is (this × multiplicand), and whose scale is (this.scale() + multiplicand.scale()).","

multiply
public BigDecimal multiply(BigDecimal multiplicand)
Returns a BigDecimal whose value is (this ×
 multiplicand), and whose scale is (this.scale() +
 multiplicand.scale()).

Parameters:
multiplicand - value to be multiplied by this BigDecimal.
Returns:
this * multiplicand


"
BigDecimal,"multiply(BigDecimal multiplicand, MathContext mc)",BigDecimal,"Returns a BigDecimal whose value is (this × multiplicand), with rounding according to the context settings.","

multiply
public BigDecimal multiply(BigDecimal multiplicand,
                           MathContext mc)
Returns a BigDecimal whose value is (this ×
 multiplicand), with rounding according to the context settings.

Parameters:
multiplicand - value to be multiplied by this BigDecimal.
mc - the context to use.
Returns:
this * multiplicand, rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5


"
BigDecimal,negate(),BigDecimal,"Returns a BigDecimal whose value is (-this), and whose scale is this.scale().","

negate
public BigDecimal negate()
Returns a BigDecimal whose value is (-this),
 and whose scale is this.scale().

Returns:
-this.


"
BigDecimal,negate(MathContext mc),BigDecimal,"Returns a BigDecimal whose value is (-this), with rounding according to the context settings.","

negate
public BigDecimal negate(MathContext mc)
Returns a BigDecimal whose value is (-this),
 with rounding according to the context settings.

Parameters:
mc - the context to use.
Returns:
-this, rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5


"
BigDecimal,plus(),BigDecimal,"Returns a BigDecimal whose value is (+this), and whose scale is this.scale().","

plus
public BigDecimal plus()
Returns a BigDecimal whose value is (+this), and whose
 scale is this.scale().

 This method, which simply returns this BigDecimal
 is included for symmetry with the unary minus method negate().

Returns:
this.
Since:
1.5
See Also:
negate()


"
BigDecimal,plus(MathContext mc),BigDecimal,"Returns a BigDecimal whose value is (+this), with rounding according to the context settings.","

plus
public BigDecimal plus(MathContext mc)
Returns a BigDecimal whose value is (+this),
 with rounding according to the context settings.

 The effect of this method is identical to that of the round(MathContext) method.

Parameters:
mc - the context to use.
Returns:
this, rounded as necessary.  A zero result will
         have a scale of 0.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5
See Also:
round(MathContext)


"
BigDecimal,pow(int n),BigDecimal,"Returns a BigDecimal whose value is (thisn), The power is computed exactly, to unlimited precision.","

pow
public BigDecimal pow(int n)
Returns a BigDecimal whose value is
 (thisn), The power is computed exactly, to
 unlimited precision.

 The parameter n must be in the range 0 through
 999999999, inclusive.  ZERO.pow(0) returns ONE.

 Note that future releases may expand the allowable exponent
 range of this method.

Parameters:
n - power to raise this BigDecimal to.
Returns:
thisn
Throws:
ArithmeticException - if n is out of range.
Since:
1.5


"
BigDecimal,"pow(int n, MathContext mc)",BigDecimal,Returns a BigDecimal whose value is (thisn).,"

pow
public BigDecimal pow(int n,
                      MathContext mc)
Returns a BigDecimal whose value is
 (thisn).  The current implementation uses
 the core algorithm defined in ANSI standard X3.274-1996 with
 rounding according to the context settings.  In general, the
 returned numerical value is within two ulps of the exact
 numerical value for the chosen precision.  Note that future
 releases may use a different algorithm with a decreased
 allowable error bound and increased allowable exponent range.

 The X3.274-1996 algorithm is:

 
 An ArithmeticException exception is thrown if
  
abs(n) > 999999999
mc.precision == 0 and n < 0
mc.precision > 0 and n has more than
    mc.precision decimal digits
  
 if n is zero, ONE is returned even if
 this is zero, otherwise
 
 if n is positive, the result is calculated via
   the repeated squaring technique into a single accumulator.
   The individual multiplications with the accumulator use the
   same math context settings as in mc except for a
   precision increased to mc.precision + elength + 1
   where elength is the number of decimal digits in
   n.

    if n is negative, the result is calculated as if
   n were positive; this value is then divided into one
   using the working precision specified above.

    The final value from either the positive or negative case
   is then rounded to the destination precision.
   


Parameters:
n - power to raise this BigDecimal to.
mc - the context to use.
Returns:
thisn using the ANSI standard X3.274-1996
         algorithm
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY, or n is out
         of range.
Since:
1.5


"
BigDecimal,precision(),int,Returns the precision of this BigDecimal.,"

precision
public int precision()
Returns the precision of this BigDecimal.  (The
 precision is the number of digits in the unscaled value.)

 The precision of a zero value is 1.

Returns:
the precision of this BigDecimal.
Since:
1.5


"
BigDecimal,remainder(BigDecimal divisor),BigDecimal,Returns a BigDecimal whose value is (this % divisor).,"

remainder
public BigDecimal remainder(BigDecimal divisor)
Returns a BigDecimal whose value is (this % divisor).

 The remainder is given by
 this.subtract(this.divideToIntegralValue(divisor).multiply(divisor)).
 Note that this is not the modulo operation (the result can be
 negative).

Parameters:
divisor - value by which this BigDecimal is to be divided.
Returns:
this % divisor.
Throws:
ArithmeticException - if divisor==0
Since:
1.5


"
BigDecimal,"remainder(BigDecimal divisor, MathContext mc)",BigDecimal,"Returns a BigDecimal whose value is (this % divisor), with rounding according to the context settings.","

remainder
public BigDecimal remainder(BigDecimal divisor,
                            MathContext mc)
Returns a BigDecimal whose value is (this %
 divisor), with rounding according to the context settings.
 The MathContext settings affect the implicit divide
 used to compute the remainder.  The remainder computation
 itself is by definition exact.  Therefore, the remainder may
 contain more than mc.getPrecision() digits.

 The remainder is given by
 this.subtract(this.divideToIntegralValue(divisor,
 mc).multiply(divisor)).  Note that this is not the modulo
 operation (the result can be negative).

Parameters:
divisor - value by which this BigDecimal is to be divided.
mc - the context to use.
Returns:
this % divisor, rounded as necessary.
Throws:
ArithmeticException - if divisor==0
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY, or mc.precision
         > 0 and the result of this.divideToIntgralValue(divisor) would
         require a precision of more than mc.precision digits.
Since:
1.5
See Also:
divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)


"
BigDecimal,round(MathContext mc),BigDecimal,Returns a BigDecimal rounded according to the MathContext settings.,"

round
public BigDecimal round(MathContext mc)
Returns a BigDecimal rounded according to the
 MathContext settings.  If the precision setting is 0 then
 no rounding takes place.

 The effect of this method is identical to that of the
 plus(MathContext) method.

Parameters:
mc - the context to use.
Returns:
a BigDecimal rounded according to the
         MathContext settings.
Throws:
ArithmeticException - if the rounding mode is
         UNNECESSARY and the
         BigDecimal  operation would require rounding.
Since:
1.5
See Also:
plus(MathContext)


"
BigDecimal,scale(),int,Returns the scale of this BigDecimal.,"

scale
public int scale()
Returns the scale of this BigDecimal.  If zero
 or positive, the scale is the number of digits to the right of
 the decimal point.  If negative, the unscaled value of the
 number is multiplied by ten to the power of the negation of the
 scale.  For example, a scale of -3 means the unscaled
 value is multiplied by 1000.

Returns:
the scale of this BigDecimal.


"
BigDecimal,scaleByPowerOfTen(int n),BigDecimal,Returns a BigDecimal whose numerical value is equal to (this * 10n).,"

scaleByPowerOfTen
public BigDecimal scaleByPowerOfTen(int n)
Returns a BigDecimal whose numerical value is equal to
 (this * 10n).  The scale of
 the result is (this.scale() - n).

Parameters:
n - the exponent power of ten to scale by
Returns:
a BigDecimal whose numerical value is equal to
 (this * 10n)
Throws:
ArithmeticException - if the scale would be
         outside the range of a 32-bit integer.
Since:
1.5


"
BigDecimal,setScale(int newScale),BigDecimal,"Returns a BigDecimal whose scale is the specified value, and whose value is numerically equal to this BigDecimal's.","

setScale
public BigDecimal setScale(int newScale)
Returns a BigDecimal whose scale is the specified
 value, and whose value is numerically equal to this
 BigDecimal's.  Throws an ArithmeticException
 if this is not possible.

 This call is typically used to increase the scale, in which
 case it is guaranteed that there exists a BigDecimal
 of the specified scale and the correct value.  The call can
 also be used to reduce the scale if the caller knows that the
 BigDecimal has sufficiently many zeros at the end of
 its fractional part (i.e., factors of ten in its integer value)
 to allow for the rescaling without changing its value.

 This method returns the same result as the two-argument
 versions of setScale, but saves the caller the trouble
 of specifying a rounding mode in cases where it is irrelevant.

 Note that since BigDecimal objects are immutable,
 calls of this method do not result in the original
 object being modified, contrary to the usual convention of
 having methods named setX mutate field
 X.  Instead, setScale returns an
 object with the proper scale; the returned object may or may
 not be newly allocated.

Parameters:
newScale - scale of the BigDecimal value to be returned.
Returns:
a BigDecimal whose scale is the specified value, and
         whose unscaled value is determined by multiplying or dividing
         this BigDecimal's unscaled value by the appropriate
         power of ten to maintain its overall value.
Throws:
ArithmeticException - if the specified scaling operation would
         require rounding.
See Also:
setScale(int, int), 
setScale(int, RoundingMode)


"
BigDecimal,"setScale(int newScale, int roundingMode)",BigDecimal,"Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value.","

setScale
public BigDecimal setScale(int newScale,
                           int roundingMode)
Returns a BigDecimal whose scale is the specified
 value, and whose unscaled value is determined by multiplying or
 dividing this BigDecimal's unscaled value by the
 appropriate power of ten to maintain its overall value.  If the
 scale is reduced by the operation, the unscaled value must be
 divided (rather than multiplied), and the value may be changed;
 in this case, the specified rounding mode is applied to the
 division.

 Note that since BigDecimal objects are immutable, calls of
 this method do not result in the original object being
 modified, contrary to the usual convention of having methods
 named setX mutate field X.
 Instead, setScale returns an object with the proper
 scale; the returned object may or may not be newly allocated.

 The new setScale(int, RoundingMode) method should
 be used in preference to this legacy method.

Parameters:
newScale - scale of the BigDecimal value to be returned.
roundingMode - The rounding mode to apply.
Returns:
a BigDecimal whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this BigDecimal's unscaled value by the
         appropriate power of ten to maintain its overall value.
Throws:
ArithmeticException - if roundingMode==ROUND_UNNECESSARY
         and the specified scaling operation would require
         rounding.
IllegalArgumentException - if roundingMode does not
         represent a valid rounding mode.
See Also:
ROUND_UP, 
ROUND_DOWN, 
ROUND_CEILING, 
ROUND_FLOOR, 
ROUND_HALF_UP, 
ROUND_HALF_DOWN, 
ROUND_HALF_EVEN, 
ROUND_UNNECESSARY


"
BigDecimal,"setScale(int newScale, RoundingMode roundingMode)",BigDecimal,"Returns a BigDecimal whose scale is the specified value, and whose unscaled value is determined by multiplying or dividing this BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value.","

setScale
public BigDecimal setScale(int newScale,
                           RoundingMode roundingMode)
Returns a BigDecimal whose scale is the specified
 value, and whose unscaled value is determined by multiplying or
 dividing this BigDecimal's unscaled value by the
 appropriate power of ten to maintain its overall value.  If the
 scale is reduced by the operation, the unscaled value must be
 divided (rather than multiplied), and the value may be changed;
 in this case, the specified rounding mode is applied to the
 division.

 Note that since BigDecimal objects are immutable, calls of
 this method do not result in the original object being
 modified, contrary to the usual convention of having methods
 named setX mutate field X.
 Instead, setScale returns an object with the proper
 scale; the returned object may or may not be newly allocated.

Parameters:
newScale - scale of the BigDecimal value to be returned.
roundingMode - The rounding mode to apply.
Returns:
a BigDecimal whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this BigDecimal's unscaled value by the
         appropriate power of ten to maintain its overall value.
Throws:
ArithmeticException - if roundingMode==UNNECESSARY
         and the specified scaling operation would require
         rounding.
Since:
1.5
See Also:
RoundingMode


"
BigDecimal,shortValueExact(),short,"Converts this BigDecimal to a short, checking for lost information.","

shortValueExact
public short shortValueExact()
Converts this BigDecimal to a short, checking
 for lost information.  If this BigDecimal has a
 nonzero fractional part or is out of the possible range for a
 short result then an ArithmeticException is
 thrown.

Returns:
this BigDecimal converted to a short.
Throws:
ArithmeticException - if this has a nonzero
         fractional part, or will not fit in a short.
Since:
1.5


"
BigDecimal,signum(),int,Returns the signum function of this BigDecimal.,"

signum
public int signum()
Returns the signum function of this BigDecimal.

Returns:
-1, 0, or 1 as the value of this BigDecimal
         is negative, zero, or positive.


"
BigDecimal,stripTrailingZeros(),BigDecimal,Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation.,"

stripTrailingZeros
public BigDecimal stripTrailingZeros()
Returns a BigDecimal which is numerically equal to
 this one but with any trailing zeros removed from the
 representation.  For example, stripping the trailing zeros from
 the BigDecimal value 600.0, which has
 [BigInteger, scale] components equals to
 [6000, 1], yields 6E2 with [BigInteger,
 scale] components equals to [6, -2].  If
 this BigDecimal is numerically equal to zero, then
 BigDecimal.ZERO is returned.

Returns:
a numerically equal BigDecimal with any
 trailing zeros removed.
Since:
1.5


"
BigDecimal,subtract(BigDecimal subtrahend),BigDecimal,"Returns a BigDecimal whose value is (this - subtrahend), and whose scale is max(this.scale(), subtrahend.scale()).","

subtract
public BigDecimal subtract(BigDecimal subtrahend)
Returns a BigDecimal whose value is (this -
 subtrahend), and whose scale is max(this.scale(),
 subtrahend.scale()).

Parameters:
subtrahend - value to be subtracted from this BigDecimal.
Returns:
this - subtrahend


"
BigDecimal,"subtract(BigDecimal subtrahend, MathContext mc)",BigDecimal,"Returns a BigDecimal whose value is (this - subtrahend), with rounding according to the context settings.","

subtract
public BigDecimal subtract(BigDecimal subtrahend,
                           MathContext mc)
Returns a BigDecimal whose value is (this - subtrahend),
 with rounding according to the context settings.

 If subtrahend is zero then this, rounded if necessary, is used as the
 result.  If this is zero then the result is subtrahend.negate(mc).

Parameters:
subtrahend - value to be subtracted from this BigDecimal.
mc - the context to use.
Returns:
this - subtrahend, rounded as necessary.
Throws:
ArithmeticException - if the result is inexact but the
         rounding mode is UNNECESSARY.
Since:
1.5


"
BigDecimal,toBigInteger(),BigInteger,Converts this BigDecimal to a BigInteger.,"

toBigInteger
public BigInteger toBigInteger()
Converts this BigDecimal to a BigInteger.
 This conversion is analogous to the
 narrowing primitive conversion from double to
 long as defined in section 5.1.3 of
 The Java™ Language Specification:
 any fractional part of this
 BigDecimal will be discarded.  Note that this
 conversion can lose information about the precision of the
 BigDecimal value.
 
 To have an exception thrown if the conversion is inexact (in
 other words if a nonzero fractional part is discarded), use the
 toBigIntegerExact() method.

Returns:
this BigDecimal converted to a BigInteger.


"
BigDecimal,toBigIntegerExact(),BigInteger,"Converts this BigDecimal to a BigInteger, checking for lost information.","

toBigIntegerExact
public BigInteger toBigIntegerExact()
Converts this BigDecimal to a BigInteger,
 checking for lost information.  An exception is thrown if this
 BigDecimal has a nonzero fractional part.

Returns:
this BigDecimal converted to a BigInteger.
Throws:
ArithmeticException - if this has a nonzero
         fractional part.
Since:
1.5


"
BigDecimal,toEngineeringString(),String,"Returns a string representation of this BigDecimal, using engineering notation if an exponent is needed.","

toEngineeringString
public String toEngineeringString()
Returns a string representation of this BigDecimal,
 using engineering notation if an exponent is needed.

 Returns a string that represents the BigDecimal as
 described in the toString() method, except that if
 exponential notation is used, the power of ten is adjusted to
 be a multiple of three (engineering notation) such that the
 integer part of nonzero values will be in the range 1 through
 999.  If exponential notation is used for zero values, a
 decimal point and one or two fractional zero digits are used so
 that the scale of the zero value is preserved.  Note that
 unlike the output of toString(), the output of this
 method is not guaranteed to recover the same [integer,
 scale] pair of this BigDecimal if the output string is
 converting back to a BigDecimal using the string constructor.  The result of this method meets
 the weaker constraint of always producing a numerically equal
 result from applying the string constructor to the method's output.

Returns:
string representation of this BigDecimal, using
         engineering notation if an exponent is needed.
Since:
1.5


"
BigDecimal,toPlainString(),String,Returns a string representation of this BigDecimal without an exponent field.,"

toPlainString
public String toPlainString()
Returns a string representation of this BigDecimal
 without an exponent field.  For values with a positive scale,
 the number of digits to the right of the decimal point is used
 to indicate scale.  For values with a zero or negative scale,
 the resulting string is generated as if the value were
 converted to a numerically equal value with zero scale and as
 if all the trailing zeros of the zero scale value were present
 in the result.

 The entire string is prefixed by a minus sign character '-'
 ('\u002D') if the unscaled value is less than
 zero. No sign character is prefixed if the unscaled value is
 zero or positive.

 Note that if the result of this method is passed to the
 string constructor, only the
 numerical value of this BigDecimal will necessarily be
 recovered; the representation of the new BigDecimal
 may have a different scale.  In particular, if this
 BigDecimal has a negative scale, the string resulting
 from this method will have a scale of zero when processed by
 the string constructor.

 (This method behaves analogously to the toString
 method in 1.4 and earlier releases.)

Returns:
a string representation of this BigDecimal
 without an exponent field.
Since:
1.5
See Also:
toString(), 
toEngineeringString()


"
BigDecimal,toString(),String,"Returns the string representation of this BigDecimal, using scientific notation if an exponent is needed.","

toString
public String toString()
Returns the string representation of this BigDecimal,
 using scientific notation if an exponent is needed.

 A standard canonical string form of the BigDecimal
 is created as though by the following steps: first, the
 absolute value of the unscaled value of the BigDecimal
 is converted to a string in base ten using the characters
 '0' through '9' with no leading zeros (except
 if its value is zero, in which case a single '0'
 character is used).

 Next, an adjusted exponent is calculated; this is the
 negated scale, plus the number of characters in the converted
 unscaled value, less one.  That is,
 -scale+(ulength-1), where ulength is the
 length of the absolute value of the unscaled value in decimal
 digits (its precision).

 If the scale is greater than or equal to zero and the
 adjusted exponent is greater than or equal to -6, the
 number will be converted to a character form without using
 exponential notation.  In this case, if the scale is zero then
 no decimal point is added and if the scale is positive a
 decimal point will be inserted with the scale specifying the
 number of characters to the right of the decimal point.
 '0' characters are added to the left of the converted
 unscaled value as necessary.  If no character precedes the
 decimal point after this insertion then a conventional
 '0' character is prefixed.

 Otherwise (that is, if the scale is negative, or the
 adjusted exponent is less than -6), the number will be
 converted to a character form using exponential notation.  In
 this case, if the converted BigInteger has more than
 one digit a decimal point is inserted after the first digit.
 An exponent in character form is then suffixed to the converted
 unscaled value (perhaps with inserted decimal point); this
 comprises the letter 'E' followed immediately by the
 adjusted exponent converted to a character form.  The latter is
 in base ten, using the characters '0' through
 '9' with no leading zeros, and is always prefixed by a
 sign character '-' ('\u002D') if the
 adjusted exponent is negative, '+'
 ('\u002B') otherwise).

 Finally, the entire string is prefixed by a minus sign
 character '-' ('\u002D') if the unscaled
 value is less than zero.  No sign character is prefixed if the
 unscaled value is zero or positive.

 Examples:
For each representation [unscaled value, scale]
 on the left, the resulting string is shown on the right.
 
 [123,0]      ""123""
 [-123,0]     ""-123""
 [123,-1]     ""1.23E+3""
 [123,-3]     ""1.23E+5""
 [123,1]      ""12.3""
 [123,5]      ""0.00123""
 [123,10]     ""1.23E-8""
 [-123,12]    ""-1.23E-10""
 
Notes:

There is a one-to-one mapping between the distinguishable
 BigDecimal values and the result of this conversion.
 That is, every distinguishable BigDecimal value
 (unscaled value and scale) has a unique string representation
 as a result of using toString.  If that string
 representation is converted back to a BigDecimal using
 the BigDecimal(String) constructor, then the original
 value will be recovered.

 The string produced for a given number is always the same;
 it is not affected by locale.  This means that it can be used
 as a canonical string representation for exchanging decimal
 data, or as a key for a Hashtable, etc.  Locale-sensitive
 number formatting and parsing is handled by the NumberFormat class and its subclasses.

 The toEngineeringString() method may be used for
 presenting numbers with exponents in engineering notation, and the
 setScale method may be used for
 rounding a BigDecimal so it has a known number of digits after
 the decimal point.

 The digit-to-character mapping provided by
 Character.forDigit is used.

 

Overrides:
toString in class Object
Returns:
string representation of this BigDecimal.
See Also:
Character.forDigit(int, int), 
BigDecimal(java.lang.String)


"
BigDecimal,ulp(),BigDecimal,"Returns the size of an ulp, a unit in the last place, of this BigDecimal.","

ulp
public BigDecimal ulp()
Returns the size of an ulp, a unit in the last place, of this
 BigDecimal.  An ulp of a nonzero BigDecimal
 value is the positive distance between this value and the
 BigDecimal value next larger in magnitude with the
 same number of digits.  An ulp of a zero value is numerically
 equal to 1 with the scale of this.  The result is
 stored with the same scale as this so the result
 for zero and nonzero values is equal to [1,
 this.scale()].

Returns:
the size of an ulp of this
Since:
1.5


"
BigDecimal,unscaledValue(),BigInteger,Returns a BigInteger whose value is the unscaled value of this BigDecimal.,"

unscaledValue
public BigInteger unscaledValue()
Returns a BigInteger whose value is the unscaled
 value of this BigDecimal.  (Computes (this *
 10this.scale()).)

Returns:
the unscaled value of this BigDecimal.
Since:
1.2


"
BigDecimal,valueOf(double val),static BigDecimal,"Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double.toString(double) method.","

valueOf
public static BigDecimal valueOf(double val)
Translates a double into a BigDecimal, using
 the double's canonical string representation provided
 by the Double.toString(double) method.

 Note: This is generally the preferred way to convert
 a double (or float) into a
 BigDecimal, as the value returned is equal to that
 resulting from constructing a BigDecimal from the
 result of using Double.toString(double).

Parameters:
val - double to convert to a BigDecimal.
Returns:
a BigDecimal whose value is equal to or approximately
         equal to the value of val.
Throws:
NumberFormatException - if val is infinite or NaN.
Since:
1.5


"
BigDecimal,valueOf(long val),static BigDecimal,Translates a long value into a BigDecimal with a scale of zero.,"

valueOf
public static BigDecimal valueOf(long val)
Translates a long value into a BigDecimal
 with a scale of zero.  This ""static factory method""
 is provided in preference to a (long) constructor
 because it allows for reuse of frequently used
 BigDecimal values.

Parameters:
val - value of the BigDecimal.
Returns:
a BigDecimal whose value is val.


"
BigDecimal,"valueOf(long unscaledVal, int scale)",static BigDecimal,Translates a long unscaled value and an int scale into a BigDecimal.,"

valueOf
public static BigDecimal valueOf(long unscaledVal,
                                 int scale)
Translates a long unscaled value and an
 int scale into a BigDecimal.  This
 ""static factory method"" is provided in preference to
 a (long, int) constructor because it
 allows for reuse of frequently used BigDecimal values..

Parameters:
unscaledVal - unscaled value of the BigDecimal.
scale - scale of the BigDecimal.
Returns:
a BigDecimal whose value is
         (unscaledVal × 10-scale).


"
BigInteger,abs(),BigInteger,Returns a BigInteger whose value is the absolute value of this BigInteger.,"

abs
public BigInteger abs()
Returns a BigInteger whose value is the absolute value of this
 BigInteger.

Returns:
abs(this)


"
BigInteger,add(BigInteger val),BigInteger,Returns a BigInteger whose value is (this + val).,"

add
public BigInteger add(BigInteger val)
Returns a BigInteger whose value is (this + val).

Parameters:
val - value to be added to this BigInteger.
Returns:
this + val


"
BigInteger,and(BigInteger val),BigInteger,Returns a BigInteger whose value is (this & val).,"

and
public BigInteger and(BigInteger val)
Returns a BigInteger whose value is (this & val).  (This
 method returns a negative BigInteger if and only if this and val are
 both negative.)

Parameters:
val - value to be AND'ed with this BigInteger.
Returns:
this & val


"
BigInteger,andNot(BigInteger val),BigInteger,Returns a BigInteger whose value is (this & ~val).,"

andNot
public BigInteger andNot(BigInteger val)
Returns a BigInteger whose value is (this & ~val).  This
 method, which is equivalent to and(val.not()), is provided as
 a convenience for masking operations.  (This method returns a negative
 BigInteger if and only if this is negative and val is
 positive.)

Parameters:
val - value to be complemented and AND'ed with this BigInteger.
Returns:
this & ~val


"
BigInteger,bitCount(),int,Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit.,"

bitCount
public int bitCount()
Returns the number of bits in the two's complement representation
 of this BigInteger that differ from its sign bit.  This method is
 useful when implementing bit-vector style sets atop BigIntegers.

Returns:
number of bits in the two's complement representation
         of this BigInteger that differ from its sign bit.


"
BigInteger,bitLength(),int,"Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit.","

bitLength
public int bitLength()
Returns the number of bits in the minimal two's-complement
 representation of this BigInteger, excluding a sign bit.
 For positive BigIntegers, this is equivalent to the number of bits in
 the ordinary binary representation.  (Computes
 (ceil(log2(this < 0 ? -this : this+1))).)

Returns:
number of bits in the minimal two's-complement
         representation of this BigInteger, excluding a sign bit.


"
BigInteger,byteValueExact(),byte,"Converts this BigInteger to a byte, checking for lost information.","

byteValueExact
public byte byteValueExact()
Converts this BigInteger to a byte, checking
 for lost information.  If the value of this BigInteger
 is out of the range of the byte type, then an
 ArithmeticException is thrown.

Returns:
this BigInteger converted to a byte.
Throws:
ArithmeticException - if the value of this will
 not exactly fit in a byte.
Since:
1.8
See Also:
Number.byteValue()


"
BigInteger,clearBit(int n),BigInteger,Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared.,"

clearBit
public BigInteger clearBit(int n)
Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit cleared.
 (Computes (this & ~(1<<n)).)

Parameters:
n - index of bit to clear.
Returns:
this & ~(1<<n)
Throws:
ArithmeticException - n is negative.


"
BigInteger,compareTo(BigInteger val),int,Compares this BigInteger with the specified BigInteger.,"

compareTo
public int compareTo(BigInteger val)
Compares this BigInteger with the specified BigInteger.  This
 method is provided in preference to individual methods for each
 of the six boolean comparison operators (<, ==,
 >, >=, !=, <=).  The suggested
 idiom for performing these comparisons is: (x.compareTo(y) <op> 0), where
 <op> is one of the six comparison operators.

Specified by:
compareTo in interface Comparable<BigInteger>
Parameters:
val - BigInteger to which this BigInteger is to be compared.
Returns:
-1, 0 or 1 as this BigInteger is numerically less than, equal
         to, or greater than val.


"
BigInteger,divide(BigInteger val),BigInteger,Returns a BigInteger whose value is (this / val).,"

divide
public BigInteger divide(BigInteger val)
Returns a BigInteger whose value is (this / val).

Parameters:
val - value by which this BigInteger is to be divided.
Returns:
this / val
Throws:
ArithmeticException - if val is zero.


"
BigInteger,divideAndRemainder(BigInteger val),BigInteger[],Returns an array of two BigIntegers containing (this / val) followed by (this % val).,"

divideAndRemainder
public BigInteger[] divideAndRemainder(BigInteger val)
Returns an array of two BigIntegers containing (this / val)
 followed by (this % val).

Parameters:
val - value by which this BigInteger is to be divided, and the
         remainder computed.
Returns:
an array of two BigIntegers: the quotient (this / val)
         is the initial element, and the remainder (this % val)
         is the final element.
Throws:
ArithmeticException - if val is zero.


"
BigInteger,doubleValue(),double,Converts this BigInteger to a double.,"

doubleValue
public double doubleValue()
Converts this BigInteger to a double.  This
 conversion is similar to the
 narrowing primitive conversion from double to
 float as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigInteger has too great a magnitude
 to represent as a double, it will be converted to
 Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigInteger value.

Specified by:
doubleValue in class Number
Returns:
this BigInteger converted to a double.


"
BigInteger,equals(Object x),boolean,Compares this BigInteger with the specified Object for equality.,"

equals
public boolean equals(Object x)
Compares this BigInteger with the specified Object for equality.

Overrides:
equals in class Object
Parameters:
x - Object to which this BigInteger is to be compared.
Returns:
true if and only if the specified Object is a
         BigInteger whose value is numerically equal to this BigInteger.
See Also:
Object.hashCode(), 
HashMap


"
BigInteger,flipBit(int n),BigInteger,Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped.,"

flipBit
public BigInteger flipBit(int n)
Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit flipped.
 (Computes (this ^ (1<<n)).)

Parameters:
n - index of bit to flip.
Returns:
this ^ (1<<n)
Throws:
ArithmeticException - n is negative.


"
BigInteger,floatValue(),float,Converts this BigInteger to a float.,"

floatValue
public float floatValue()
Converts this BigInteger to a float.  This
 conversion is similar to the
 narrowing primitive conversion from double to
 float as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigInteger has too great a magnitude
 to represent as a float, it will be converted to
 Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigInteger value.

Specified by:
floatValue in class Number
Returns:
this BigInteger converted to a float.


"
BigInteger,gcd(BigInteger val),BigInteger,Returns a BigInteger whose value is the greatest common divisor of abs(this) and abs(val).,"

gcd
public BigInteger gcd(BigInteger val)
Returns a BigInteger whose value is the greatest common divisor of
 abs(this) and abs(val).  Returns 0 if
 this == 0 && val == 0.

Parameters:
val - value with which the GCD is to be computed.
Returns:
GCD(abs(this), abs(val))


"
BigInteger,getLowestSetBit(),int,Returns the index of the rightmost (lowest-order) one bit in this BigInteger (the number of zero bits to the right of the rightmost one bit).,"

getLowestSetBit
public int getLowestSetBit()
Returns the index of the rightmost (lowest-order) one bit in this
 BigInteger (the number of zero bits to the right of the rightmost
 one bit).  Returns -1 if this BigInteger contains no one bits.
 (Computes (this == 0? -1 : log2(this & -this)).)

Returns:
index of the rightmost one bit in this BigInteger.


"
BigInteger,hashCode(),int,Returns the hash code for this BigInteger.,"

hashCode
public int hashCode()
Returns the hash code for this BigInteger.

Overrides:
hashCode in class Object
Returns:
hash code for this BigInteger.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
BigInteger,intValue(),int,Converts this BigInteger to an int.,"

intValue
public int intValue()
Converts this BigInteger to an int.  This
 conversion is analogous to a
 narrowing primitive conversion from long to
 int as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigInteger is too big to fit in an
 int, only the low-order 32 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude of the BigInteger value as well as return a
 result with the opposite sign.

Specified by:
intValue in class Number
Returns:
this BigInteger converted to an int.
See Also:
intValueExact()


"
BigInteger,intValueExact(),int,"Converts this BigInteger to an int, checking for lost information.","

intValueExact
public int intValueExact()
Converts this BigInteger to an int, checking
 for lost information.  If the value of this BigInteger
 is out of the range of the int type, then an
 ArithmeticException is thrown.

Returns:
this BigInteger converted to an int.
Throws:
ArithmeticException - if the value of this will
 not exactly fit in a int.
Since:
1.8
See Also:
intValue()


"
BigInteger,isProbablePrime(int certainty),boolean,"Returns true if this BigInteger is probably prime, false if it's definitely composite.","

isProbablePrime
public boolean isProbablePrime(int certainty)
Returns true if this BigInteger is probably prime,
 false if it's definitely composite.  If
 certainty is ≤ 0, true is
 returned.

Parameters:
certainty - a measure of the uncertainty that the caller is
         willing to tolerate: if the call returns true
         the probability that this BigInteger is prime exceeds
         (1 - 1/2certainty).  The execution time of
         this method is proportional to the value of this parameter.
Returns:
true if this BigInteger is probably prime,
         false if it's definitely composite.


"
BigInteger,longValue(),long,Converts this BigInteger to a long.,"

longValue
public long longValue()
Converts this BigInteger to a long.  This
 conversion is analogous to a
 narrowing primitive conversion from long to
 int as defined in section 5.1.3 of
 The Java™ Language Specification:
 if this BigInteger is too big to fit in a
 long, only the low-order 64 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude of the BigInteger value as well as return a
 result with the opposite sign.

Specified by:
longValue in class Number
Returns:
this BigInteger converted to a long.
See Also:
longValueExact()


"
BigInteger,longValueExact(),long,"Converts this BigInteger to a long, checking for lost information.","

longValueExact
public long longValueExact()
Converts this BigInteger to a long, checking
 for lost information.  If the value of this BigInteger
 is out of the range of the long type, then an
 ArithmeticException is thrown.

Returns:
this BigInteger converted to a long.
Throws:
ArithmeticException - if the value of this will
 not exactly fit in a long.
Since:
1.8
See Also:
longValue()


"
BigInteger,max(BigInteger val),BigInteger,Returns the maximum of this BigInteger and val.,"

max
public BigInteger max(BigInteger val)
Returns the maximum of this BigInteger and val.

Parameters:
val - value with which the maximum is to be computed.
Returns:
the BigInteger whose value is the greater of this and
         val.  If they are equal, either may be returned.


"
BigInteger,min(BigInteger val),BigInteger,Returns the minimum of this BigInteger and val.,"

min
public BigInteger min(BigInteger val)
Returns the minimum of this BigInteger and val.

Parameters:
val - value with which the minimum is to be computed.
Returns:
the BigInteger whose value is the lesser of this BigInteger and
         val.  If they are equal, either may be returned.


"
BigInteger,mod(BigInteger m),BigInteger,Returns a BigInteger whose value is (this mod m).,"

mod
public BigInteger mod(BigInteger m)
Returns a BigInteger whose value is (this mod m).  This method
 differs from remainder in that it always returns a
 non-negative BigInteger.

Parameters:
m - the modulus.
Returns:
this mod m
Throws:
ArithmeticException - m ≤ 0
See Also:
remainder(java.math.BigInteger)


"
BigInteger,modInverse(BigInteger m),BigInteger,Returns a BigInteger whose value is (this-1 mod m).,"

modInverse
public BigInteger modInverse(BigInteger m)
Returns a BigInteger whose value is (this-1 mod m).

Parameters:
m - the modulus.
Returns:
this-1 mod m.
Throws:
ArithmeticException - m ≤ 0, or this BigInteger
         has no multiplicative inverse mod m (that is, this BigInteger
         is not relatively prime to m).


"
BigInteger,"modPow(BigInteger exponent, BigInteger m)",BigInteger,Returns a BigInteger whose value is (thisexponent mod m).,"

modPow
public BigInteger modPow(BigInteger exponent,
                         BigInteger m)
Returns a BigInteger whose value is
 (thisexponent mod m).  (Unlike pow, this
 method permits negative exponents.)

Parameters:
exponent - the exponent.
m - the modulus.
Returns:
thisexponent mod m
Throws:
ArithmeticException - m ≤ 0 or the exponent is
         negative and this BigInteger is not relatively
         prime to m.
See Also:
modInverse(java.math.BigInteger)


"
BigInteger,multiply(BigInteger val),BigInteger,Returns a BigInteger whose value is (this * val).,"

multiply
public BigInteger multiply(BigInteger val)
Returns a BigInteger whose value is (this * val).

Implementation Note:
An implementation may offer better algorithmic
 performance when val == this.
Parameters:
val - value to be multiplied by this BigInteger.
Returns:
this * val


"
BigInteger,negate(),BigInteger,Returns a BigInteger whose value is (-this).,"

negate
public BigInteger negate()
Returns a BigInteger whose value is (-this).

Returns:
-this


"
BigInteger,nextProbablePrime(),BigInteger,Returns the first integer greater than this BigInteger that is probably prime.,"

nextProbablePrime
public BigInteger nextProbablePrime()
Returns the first integer greater than this BigInteger that
 is probably prime.  The probability that the number returned by this
 method is composite does not exceed 2-100. This method will
 never skip over a prime when searching: if it returns p, there
 is no prime q such that this < q < p.

Returns:
the first integer greater than this BigInteger that
         is probably prime.
Throws:
ArithmeticException - this < 0 or this is too large.
Since:
1.5


"
BigInteger,not(),BigInteger,Returns a BigInteger whose value is (~this).,"

not
public BigInteger not()
Returns a BigInteger whose value is (~this).  (This method
 returns a negative value if and only if this BigInteger is
 non-negative.)

Returns:
~this


"
BigInteger,or(BigInteger val),BigInteger,Returns a BigInteger whose value is (this | val).,"

or
public BigInteger or(BigInteger val)
Returns a BigInteger whose value is (this | val).  (This method
 returns a negative BigInteger if and only if either this or val is
 negative.)

Parameters:
val - value to be OR'ed with this BigInteger.
Returns:
this | val


"
BigInteger,pow(int exponent),BigInteger,Returns a BigInteger whose value is (thisexponent).,"

pow
public BigInteger pow(int exponent)
Returns a BigInteger whose value is (thisexponent).
 Note that exponent is an integer rather than a BigInteger.

Parameters:
exponent - exponent to which this BigInteger is to be raised.
Returns:
thisexponent
Throws:
ArithmeticException - exponent is negative.  (This would
         cause the operation to yield a non-integer value.)


"
BigInteger,"probablePrime(int bitLength, Random rnd)",static BigInteger,"Returns a positive BigInteger that is probably prime, with the specified bitLength.","

probablePrime
public static BigInteger probablePrime(int bitLength,
                                       Random rnd)
Returns a positive BigInteger that is probably prime, with the
 specified bitLength. The probability that a BigInteger returned
 by this method is composite does not exceed 2-100.

Parameters:
bitLength - bitLength of the returned BigInteger.
rnd - source of random bits used to select candidates to be
         tested for primality.
Returns:
a BigInteger of bitLength bits that is probably prime
Throws:
ArithmeticException - bitLength < 2 or bitLength is too large.
Since:
1.4
See Also:
bitLength()


"
BigInteger,remainder(BigInteger val),BigInteger,Returns a BigInteger whose value is (this % val).,"

remainder
public BigInteger remainder(BigInteger val)
Returns a BigInteger whose value is (this % val).

Parameters:
val - value by which this BigInteger is to be divided, and the
         remainder computed.
Returns:
this % val
Throws:
ArithmeticException - if val is zero.


"
BigInteger,setBit(int n),BigInteger,Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set.,"

setBit
public BigInteger setBit(int n)
Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit set.  (Computes (this | (1<<n)).)

Parameters:
n - index of bit to set.
Returns:
this | (1<<n)
Throws:
ArithmeticException - n is negative.


"
BigInteger,shiftLeft(int n),BigInteger,Returns a BigInteger whose value is (this << n).,"

shiftLeft
public BigInteger shiftLeft(int n)
Returns a BigInteger whose value is (this << n).
 The shift distance, n, may be negative, in which case
 this method performs a right shift.
 (Computes floor(this * 2n).)

Parameters:
n - shift distance, in bits.
Returns:
this << n
See Also:
shiftRight(int)


"
BigInteger,shiftRight(int n),BigInteger,Returns a BigInteger whose value is (this >> n).,"

shiftRight
public BigInteger shiftRight(int n)
Returns a BigInteger whose value is (this >> n).  Sign
 extension is performed.  The shift distance, n, may be
 negative, in which case this method performs a left shift.
 (Computes floor(this / 2n).)

Parameters:
n - shift distance, in bits.
Returns:
this >> n
See Also:
shiftLeft(int)


"
BigInteger,shortValueExact(),short,"Converts this BigInteger to a short, checking for lost information.","

shortValueExact
public short shortValueExact()
Converts this BigInteger to a short, checking
 for lost information.  If the value of this BigInteger
 is out of the range of the short type, then an
 ArithmeticException is thrown.

Returns:
this BigInteger converted to a short.
Throws:
ArithmeticException - if the value of this will
 not exactly fit in a short.
Since:
1.8
See Also:
Number.shortValue()


"
BigInteger,signum(),int,Returns the signum function of this BigInteger.,"

signum
public int signum()
Returns the signum function of this BigInteger.

Returns:
-1, 0 or 1 as the value of this BigInteger is negative, zero or
         positive.


"
BigInteger,subtract(BigInteger val),BigInteger,Returns a BigInteger whose value is (this - val).,"

subtract
public BigInteger subtract(BigInteger val)
Returns a BigInteger whose value is (this - val).

Parameters:
val - value to be subtracted from this BigInteger.
Returns:
this - val


"
BigInteger,testBit(int n),boolean,Returns true if and only if the designated bit is set.,"

testBit
public boolean testBit(int n)
Returns true if and only if the designated bit is set.
 (Computes ((this & (1<<n)) != 0).)

Parameters:
n - index of bit to test.
Returns:
true if and only if the designated bit is set.
Throws:
ArithmeticException - n is negative.


"
BigInteger,toByteArray(),byte[],Returns a byte array containing the two's-complement representation of this BigInteger.,"

toByteArray
public byte[] toByteArray()
Returns a byte array containing the two's-complement
 representation of this BigInteger.  The byte array will be in
 big-endian byte-order: the most significant byte is in
 the zeroth element.  The array will contain the minimum number
 of bytes required to represent this BigInteger, including at
 least one sign bit, which is (ceil((this.bitLength() +
 1)/8)).  (This representation is compatible with the
 (byte[]) constructor.)

Returns:
a byte array containing the two's-complement representation of
         this BigInteger.
See Also:
BigInteger(byte[])


"
BigInteger,toString(),String,Returns the decimal String representation of this BigInteger.,"

toString
public String toString()
Returns the decimal String representation of this BigInteger.
 The digit-to-character mapping provided by
 Character.forDigit is used, and a minus sign is
 prepended if appropriate.  (This representation is compatible
 with the (String) constructor, and
 allows for String concatenation with Java's + operator.)

Overrides:
toString in class Object
Returns:
decimal String representation of this BigInteger.
See Also:
Character.forDigit(int, int), 
BigInteger(java.lang.String)


"
BigInteger,toString(int radix),String,Returns the String representation of this BigInteger in the given radix.,"

toString
public String toString(int radix)
Returns the String representation of this BigInteger in the
 given radix.  If the radix is outside the range from Character.MIN_RADIX to Character.MAX_RADIX inclusive,
 it will default to 10 (as is the case for
 Integer.toString).  The digit-to-character mapping
 provided by Character.forDigit is used, and a minus
 sign is prepended if appropriate.  (This representation is
 compatible with the (String,
 int) constructor.)

Parameters:
radix - radix of the String representation.
Returns:
String representation of this BigInteger in the given radix.
See Also:
Integer.toString(int, int), 
Character.forDigit(int, int), 
BigInteger(java.lang.String, int)


"
BigInteger,valueOf(long val),static BigInteger,Returns a BigInteger whose value is equal to that of the specified long.,"

valueOf
public static BigInteger valueOf(long val)
Returns a BigInteger whose value is equal to that of the
 specified long.  This ""static factory method"" is
 provided in preference to a (long) constructor
 because it allows for reuse of frequently used BigIntegers.

Parameters:
val - value of the BigInteger to return.
Returns:
a BigInteger with the specified value.


"
BigInteger,xor(BigInteger val),BigInteger,Returns a BigInteger whose value is (this ^ val).,"

xor
public BigInteger xor(BigInteger val)
Returns a BigInteger whose value is (this ^ val).  (This method
 returns a negative BigInteger if and only if exactly one of this and
 val are negative.)

Parameters:
val - value to be XOR'ed with this BigInteger.
Returns:
this ^ val


"
MathContext,equals(Object x),boolean,Compares this MathContext with the specified Object for equality.,"

equals
public boolean equals(Object x)
Compares this MathContext with the specified
 Object for equality.

Overrides:
equals in class Object
Parameters:
x - Object to which this MathContext is to
         be compared.
Returns:
true if and only if the specified Object is
         a MathContext object which has exactly the same
         settings as this object
See Also:
Object.hashCode(), 
HashMap


"
MathContext,getPrecision(),int,Returns the precision setting.,"

getPrecision
public int getPrecision()
Returns the precision setting.
 This value is always non-negative.

Returns:
an int which is the value of the precision
         setting


"
MathContext,getRoundingMode(),RoundingMode,Returns the roundingMode setting.,"

getRoundingMode
public RoundingMode getRoundingMode()
Returns the roundingMode setting.
 This will be one of
 RoundingMode.CEILING,
 RoundingMode.DOWN,
 RoundingMode.FLOOR,
 RoundingMode.HALF_DOWN,
 RoundingMode.HALF_EVEN,
 RoundingMode.HALF_UP,
 RoundingMode.UNNECESSARY, or
 RoundingMode.UP.

Returns:
a RoundingMode object which is the value of the
         roundingMode setting


"
MathContext,hashCode(),int,Returns the hash code for this MathContext.,"

hashCode
public int hashCode()
Returns the hash code for this MathContext.

Overrides:
hashCode in class Object
Returns:
hash code for this MathContext
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MathContext,toString(),String,Returns the string representation of this MathContext.,"

toString
public String toString()
Returns the string representation of this MathContext.
 The String returned represents the settings of the
 MathContext object as two space-delimited words
 (separated by a single space character, '\u0020',
 and with no leading or trailing white space), as follows:
 

 The string ""precision="", immediately followed
 by the value of the precision setting as a numeric string as if
 generated by the Integer.toString
 method.

 
 The string ""roundingMode="", immediately
 followed by the value of the roundingMode setting as a
 word.  This word will be the same as the name of the
 corresponding public constant in the RoundingMode
 enum.
 

 For example:
 
 precision=9 roundingMode=HALF_UP
 

 Additional words may be appended to the result of
 toString in the future if more properties are added to
 this class.

Overrides:
toString in class Object
Returns:
a String representing the context settings


"
