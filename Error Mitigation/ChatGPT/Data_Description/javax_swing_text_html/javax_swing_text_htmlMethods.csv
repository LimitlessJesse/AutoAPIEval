ClassName,Method,Return Type,Description,Full Description
BlockView,"calculateMajorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate the requirements of the block along the major axis (i.e.,"

calculateMajorAxisRequirements
protected SizeRequirements calculateMajorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate the requirements of the block along the major
 axis (i.e. the axis along with it tiles).  This is implemented
 to provide the superclass behavior and then adjust it if the
 CSS width or height attribute is specified and applicable to
 the axis.

Overrides:
calculateMajorAxisRequirements in class BoxView
Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
BlockView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate the requirements of the block along the minor axis (i.e.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate the requirements of the block along the minor
 axis (i.e. the axis orthogonal to the axis along with it tiles).
 This is implemented
 to provide the superclass behavior and then adjust it if the
 CSS width or height attribute is specified and applicable to
 the axis.

Overrides:
calculateMinorAxisRequirements in class BoxView
Parameters:
axis - the axis being studied
r - the SizeRequirements object;
          if null one will be created
Returns:
the newly initialized SizeRequirements object
See Also:
SizeRequirements


"
BlockView,"changedUpdate(DocumentEvent changes, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent changes,
                          Shape a,
                          ViewFactory f)
Description copied from class: View
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.
 To reduce the burden to subclasses, this functionality is
 spread out into the following calls that subclasses can
 reimplement:
 
updateChildren is called
 if there were any changes to the element this view is
 responsible for.  If this view has child views that are
 represent the child elements, then this method should do
 whatever is necessary to make sure the child views correctly
 represent the model.
 forwardUpdate is called
 to forward the DocumentEvent to the appropriate child views.
 updateLayout is called to
 give the view a chance to either repair its layout, to reschedule
 layout, or do nothing.
 

Overrides:
changedUpdate in class View
Parameters:
changes - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
BlockView,getAlignment(int axis),float,Gets the alignment.,"

getAlignment
public float getAlignment(int axis)
Gets the alignment.

Overrides:
getAlignment in class BoxView
Parameters:
axis - may be either X_AXIS or Y_AXIS
Returns:
the alignment


"
BlockView,getAttributes(),AttributeSet,Fetches the attributes to use when rendering.,"

getAttributes
public AttributeSet getAttributes()
Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

Overrides:
getAttributes in class View


"
BlockView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.

Overrides:
getMaximumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BlockView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.

Overrides:
getMinimumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BlockView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Overrides:
getPreferredSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS
           or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
Throws:
IllegalArgumentException - for an invalid axis type
See Also:
View.getPreferredSpan(int)


"
BlockView,getResizeWeight(int axis),int,Gets the resize weight.,"

getResizeWeight
public int getResizeWeight(int axis)
Gets the resize weight.

Overrides:
getResizeWeight in class BoxView
Parameters:
axis - may be either X_AXIS or Y_AXIS
Returns:
the weight
Throws:
IllegalArgumentException - for an invalid axis


"
BlockView,getStyleSheet(),protected StyleSheet,NULL,"

getStyleSheet
protected StyleSheet getStyleSheet()

"
BlockView,"layoutMinorAxis(int targetSpan, int axis, int[] offsets, int[] spans)",protected void,Performs layout for the minor axis of the box (i.e.,"

layoutMinorAxis
protected void layoutMinorAxis(int targetSpan,
                               int axis,
                               int[] offsets,
                               int[] spans)
Performs layout for the minor axis of the box (i.e. the
 axis orthogonal to the axis that it represents). The results
 of the layout (the offset and span for each children) are
 placed in the given arrays which represent the allocations to
 the children along the minor axis.

Overrides:
layoutMinorAxis in class BoxView
Parameters:
targetSpan - the total span given to the view, which
  would be used to layout the children.
axis - the axis being layed out
offsets - the offsets from the origin of the view for
  each of the child views; this is a return value and is
  filled in by the implementation of this method
spans - the span of each child view; this is a return
  value and is filled in by the implementation of this method


"
BlockView,"paint(Graphics g, Shape allocation)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape allocation)
Renders using the given rendering surface and area on that
 surface.  This is implemented to delegate to the css box
 painter to paint the border and background prior to the
 interior.

Overrides:
paint in class BoxView
Parameters:
g - the rendering surface to use
allocation - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
BlockView,setParent(View parent),void,Establishes the parent view for this view.,"

setParent
public void setParent(View parent)
Establishes the parent view for this view.  This is
 guaranteed to be called before any other methods if the
 parent view is functioning properly.
 
 This is implemented
 to forward to the superclass as well as call the
 setPropertiesFromAttributes()
 method to set the paragraph properties from the css
 attributes.  The call is made at this time to ensure
 the ability to resolve upward through the parents
 view attributes.

Overrides:
setParent in class CompositeView
Parameters:
parent - the new parent, or null if the view is
  being removed from a parent it was previously added
  to


"
BlockView,setPropertiesFromAttributes(),protected void,Update any cached values that come from attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Update any cached values that come from attributes.

"
CSS,getAllAttributeKeys(),static CSS.Attribute[],Return the set of all possible CSS attribute keys.,"

getAllAttributeKeys
public static CSS.Attribute[] getAllAttributeKeys()
Return the set of all possible CSS attribute keys.

"
CSS,getAttribute(String name),static CSS.Attribute,Translates a string to a CSS.Attribute object.,"

getAttribute
public static final CSS.Attribute getAttribute(String name)
Translates a string to a CSS.Attribute object.
 This will return null if there is no attribute
 by the given name.

Parameters:
name - the name of the CSS attribute to fetch the
  typesafe enumeration for
Returns:
the CSS.Attribute object,
  or null if the string
  doesn't represent a valid attribute key


"
CSS.Attribute,getDefaultValue(),String,Fetch the default value for the attribute.,"

getDefaultValue
public String getDefaultValue()
Fetch the default value for the attribute.
 If there is no default value (such as for
 composite attributes), null will be returned.

"
CSS.Attribute,isInherited(),boolean,Indicates if the attribute should be inherited from the parent or not.,"

isInherited
public boolean isInherited()
Indicates if the attribute should be inherited
 from the parent or not.

"
CSS.Attribute,toString(),String,The string representation of the attribute.,"

toString
public String toString()
The string representation of the attribute.  This
 should exactly match the string specified in the
 CSS specification.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
FormSubmitEvent,getData(),String,Gets the form submission data.,"

getData
public String getData()
Gets the form submission data.

Returns:
the string representing the form submission data.


"
FormSubmitEvent,getMethod(),FormSubmitEvent.MethodType,Gets the form method type.,"

getMethod
public FormSubmitEvent.MethodType getMethod()
Gets the form method type.

Returns:
the form method type, either
 Method.GET or Method.POST.


"
FormView,actionPerformed(ActionEvent evt),void,Responsible for processing the ActionEvent.,"

actionPerformed
public void actionPerformed(ActionEvent evt)
Responsible for processing the ActionEvent.
 If the element associated with the FormView,
 has a type of ""submit"", ""reset"", ""text"" or ""password""
 then the action is processed.  In the case of a ""submit""
 the form is submitted.  In the case of a ""reset""
 the form is reset to its original state.
 In the case of ""text"" or ""password"", if the
 element is the last one of type ""text"" or ""password"",
 the form is submitted.  Otherwise, focus is transferred
 to the next component in the form.

Specified by:
actionPerformed in interface ActionListener
Parameters:
evt - the ActionEvent.


"
FormView,createComponent(),protected Component,Create the component.,"

createComponent
protected Component createComponent()
Create the component.  This is basically a
 big switch statement based upon the tag type
 and html attributes of the associated element.

Overrides:
createComponent in class ComponentView


"
FormView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis. For certain components, the maximum and preferred span are the
 same. For others this will return the value
 returned by Component.getMaximumSize along the
 axis of interest.

Overrides:
getMaximumSpan in class ComponentView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into >= 0.
           Typically the view is told to render into the span
           that is returned, although there is no guarantee.
           The parent may choose to resize or break the view.
Throws:
IllegalArgumentException - for an invalid axis
See Also:
View.getPreferredSpan(int)


"
FormView,imageSubmit(String imageData),protected void,"This method is called to submit a form in response to a click on an image -- an <INPUT> form element of type ""image"".","

imageSubmit
protected void imageSubmit(String imageData)
This method is called to submit a form in response
 to a click on an image -- an <INPUT> form
 element of type ""image"".

Parameters:
imageData - the mouse click coordinates.


"
FormView,submitData(String data),protected void,This method is responsible for submitting the form data.,"

submitData
protected void submitData(String data)
This method is responsible for submitting the form data.
 A thread is forked to undertake the submission.

"
HTML,getAllAttributeKeys(),static HTML.Attribute[],Returns the set of HTML attributes recognized.,"

getAllAttributeKeys
public static HTML.Attribute[] getAllAttributeKeys()
Returns the set of HTML attributes recognized.

Returns:
the set of HTML attributes recognized


"
HTML,getAllTags(),static HTML.Tag[],Returns the set of actual HTML tags that are recognized by the default HTML reader.,"

getAllTags
public static HTML.Tag[] getAllTags()
Returns the set of actual HTML tags that
 are recognized by the default HTML reader.
 This set does not include tags that are
 manufactured by the reader.

"
HTML,getAttributeKey(String attName),static HTML.Attribute,Fetches an attribute constant for a well-known attribute name (i.e.,"

getAttributeKey
public static HTML.Attribute getAttributeKey(String attName)
Fetches an attribute constant for a well-known attribute name
 (i.e. one of the attributes in the set {FACE, COMMENT, SIZE,
 COLOR, CLEAR, BACKGROUND, BGCOLOR, TEXT, LINK, VLINK, ALINK,
 WIDTH, HEIGHT, ALIGN, NAME, HREF, REL, REV, TITLE, TARGET,
 SHAPE, COORDS, ISMAP, NOHREF, ALT, ID, SRC, HSPACE, VSPACE,
 USEMAP, LOWSRC, CODEBASE, CODE, ARCHIVE, VALUE, VALUETYPE,
 TYPE, CLASS, STYLE, LANG, DIR, DECLARE, CLASSID, DATA, CODETYPE,
 STANDBY, BORDER, SHAPES, NOSHADE, COMPACT, START, ACTION, METHOD,
 ENCTYPE, CHECKED, MAXLENGTH, MULTIPLE, SELECTED, ROWS, COLS,
 DUMMY, CELLSPACING, CELLPADDING, VALIGN, HALIGN, NOWRAP, ROWSPAN,
 COLSPAN, PROMPT, HTTPEQUIV, CONTENT, LANGUAGE, VERSION, N,
 FRAMEBORDER, MARGINWIDTH, MARGINHEIGHT, SCROLLING, NORESIZE,
 MEDIA, ENDTAG}).
 If the given name does not represent one of the well-known attributes,
 then null will be returned.

Parameters:
attName - the String requested
Returns:
the Attribute corresponding to attName


"
HTML,"getIntegerAttributeValue(AttributeSet attr, HTML.Attribute key, int def)",static int,Fetches an integer attribute value.,"

getIntegerAttributeValue
public static int getIntegerAttributeValue(AttributeSet attr,
                                           HTML.Attribute key,
                                           int def)
Fetches an integer attribute value.  Attribute values
 are stored as a string, and this is a convenience method
 to convert to an actual integer.

Parameters:
attr - the set of attributes to use to try to fetch a value
key - the key to use to fetch the value
def - the default value to use if the attribute isn't
  defined or there is an error converting to an integer


"
HTML,getTag(String tagName),static HTML.Tag,Fetches a tag constant for a well-known tag name (i.e.,"

getTag
public static HTML.Tag getTag(String tagName)
Fetches a tag constant for a well-known tag name (i.e. one of
 the tags in the set {A, ADDRESS, APPLET, AREA, B,
 BASE, BASEFONT, BIG,
 BLOCKQUOTE, BODY, BR, CAPTION, CENTER, CITE, CODE,
 DD, DFN, DIR, DIV, DL, DT, EM, FONT, FORM, FRAME,
 FRAMESET, H1, H2, H3, H4, H5, H6, HEAD, HR, HTML,
 I, IMG, INPUT, ISINDEX, KBD, LI, LINK, MAP, MENU,
 META, NOBR, NOFRAMES, OBJECT, OL, OPTION, P, PARAM,
 PRE, SAMP, SCRIPT, SELECT, SMALL, SPAN, STRIKE, S,
 STRONG, STYLE, SUB, SUP, TABLE, TD, TEXTAREA,
 TH, TITLE, TR, TT, U, UL, VAR}.  If the given
 name does not represent one of the well-known tags, then
 null will be returned.

Parameters:
tagName - the String name requested
Returns:
a tag constant corresponding to the tagName,
    or null if not found


"
HTML.Attribute,toString(),String,Returns the string representation of this attribute.,"

toString
public String toString()
Returns the string representation of this attribute.

Overrides:
toString in class Object
Returns:
the string representation of this attribute


"
HTML.Tag,breaksFlow(),boolean,"Returns true if this tag causes a line break to the flow of data, otherwise returns false.","

breaksFlow
public boolean breaksFlow()
Returns true if this tag causes a
 line break to the flow of data, otherwise returns
 false.

Returns:
true if this tag causes a
   line break to the flow of data, otherwise returns
   false


"
HTML.Tag,isBlock(),boolean,"Returns true if this tag is a block tag, which is a tag used to add structure to a document.","

isBlock
public boolean isBlock()
Returns true if this tag is a block
 tag, which is a tag used to add structure to a
 document.

Returns:
true if this tag is a block
   tag, otherwise returns false


"
HTML.Tag,isPreformatted(),boolean,"Returns true if this tag is pre-formatted, which is true if the tag is either PRE or TEXTAREA.","

isPreformatted
public boolean isPreformatted()
Returns true if this tag is pre-formatted,
 which is true if the tag is either PRE or
 TEXTAREA.

Returns:
true if this tag is pre-formatted,
   otherwise returns false


"
HTML.Tag,toString(),String,Returns the string representation of the tag.,"

toString
public String toString()
Returns the string representation of the
 tag.

Overrides:
toString in class Object
Returns:
the String representation of the tag


"
HTML.UnknownTag,equals(Object obj),boolean,Compares this object to the specified object.,"

equals
public boolean equals(Object obj)
Compares this object to the specified object.
 The result is true if and only if the argument is not
 null and is an UnknownTag object
 with the same name.

Overrides:
equals in class Object
Parameters:
obj - the object to compare this tag with
Returns:
true if the objects are equal;
            false otherwise
See Also:
Object.hashCode(), 
HashMap


"
HTML.UnknownTag,hashCode(),int,Returns the hash code which corresponds to the string for this tag.,"

hashCode
public int hashCode()
Returns the hash code which corresponds to the string
 for this tag.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
HTMLDocument,create(DefaultStyledDocument.ElementSpec[] data),protected void,Replaces the contents of the document with the given element specifications.,"

create
protected void create(DefaultStyledDocument.ElementSpec[] data)
Replaces the contents of the document with the given
 element specifications.  This is called before insert if
 the loading is done in bursts.  This is the only method called
 if loading the document entirely in one burst.

Overrides:
create in class DefaultStyledDocument
Parameters:
data - the new contents of the document


"
HTMLDocument,"createBranchElement(Element parent, AttributeSet a)",protected Element,"Creates a document branch element, that can contain other elements.","

createBranchElement
protected Element createBranchElement(Element parent,
                                      AttributeSet a)
Creates a document branch element, that can contain other elements.
 This is implemented to return an element of type
 HTMLDocument.BlockElement.

Overrides:
createBranchElement in class AbstractDocument
Parameters:
parent - the parent element
a - the attributes
Returns:
the element


"
HTMLDocument,createDefaultRoot(),protected AbstractDocument.AbstractElement,Creates the root element to be used to represent the default document structure.,"

createDefaultRoot
protected AbstractDocument.AbstractElement createDefaultRoot()
Creates the root element to be used to represent the
 default document structure.

Overrides:
createDefaultRoot in class DefaultStyledDocument
Returns:
the element base


"
HTMLDocument,"createLeafElement(Element parent, AttributeSet a, int p0, int p1)",protected Element,Creates a document leaf element that directly represents text (doesn't have any children).,"

createLeafElement
protected Element createLeafElement(Element parent,
                                    AttributeSet a,
                                    int p0,
                                    int p1)
Creates a document leaf element that directly represents
 text (doesn't have any children).  This is implemented
 to return an element of type
 HTMLDocument.RunElement.

Overrides:
createLeafElement in class AbstractDocument
Parameters:
parent - the parent element
a - the attributes for the element
p0 - the beginning of the range (must be at least 0)
p1 - the end of the range (must be at least p0)
Returns:
the new element


"
HTMLDocument,fireChangedUpdate(DocumentEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireChangedUpdate
protected void fireChangedUpdate(DocumentEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Overrides:
fireChangedUpdate in class AbstractDocument
Parameters:
e - the event
See Also:
EventListenerList


"
HTMLDocument,fireUndoableEditUpdate(UndoableEditEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireUndoableEditUpdate
protected void fireUndoableEditUpdate(UndoableEditEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Overrides:
fireUndoableEditUpdate in class AbstractDocument
Parameters:
e - the event
See Also:
EventListenerList


"
HTMLDocument,getBase(),URL,Returns the location to resolve relative URLs against.,"

getBase
public URL getBase()
Returns the location to resolve relative URLs against.  By
 default this will be the document's URL if the document
 was loaded from a URL.  If a base tag is found and
 can be parsed, it will be used as the base location.

Returns:
the base location


"
HTMLDocument,"getElement(Element e, Object attribute, Object value)",Element,"Returns the child element of e that contains the attribute, attribute with value value, or null if one isn't found.","

getElement
public Element getElement(Element e,
                          Object attribute,
                          Object value)
Returns the child element of e that contains the
 attribute, attribute with value value, or
 null if one isn't found. This is not thread-safe.

Parameters:
e - the root element where the search begins
attribute - the desired Attribute
value - the values for the specified Attribute
Returns:
the element with the specified Attribute
          and the specified value, or null
          if it can't be found
Since:
1.3
See Also:
HTML.Attribute


"
HTMLDocument,getElement(String id),Element,Returns the element that has the given id Attribute.,"

getElement
public Element getElement(String id)
Returns the element that has the given id Attribute.
 If the element can't be found, null is returned.
 Note that this method works on an Attribute,
 not a character tag.  In the following HTML snippet:
 <a id=""HelloThere""> the attribute is
 'id' and the character tag is 'a'.
 This is a convenience method for
 getElement(RootElement, HTML.Attribute.id, id).
 This is not thread-safe.

Parameters:
id - the string representing the desired Attribute
Returns:
the element with the specified Attribute
          or null if it can't be found,
          or null if id is null
Since:
1.3
See Also:
HTML.Attribute


"
HTMLDocument,getIterator(HTML.Tag t),HTMLDocument.Iterator,Fetches an iterator for the specified HTML tag.,"

getIterator
public HTMLDocument.Iterator getIterator(HTML.Tag t)
Fetches an iterator for the specified HTML tag.
 This can be used for things like iterating over the
 set of anchors contained, or iterating over the input
 elements.

Parameters:
t - the requested HTML.Tag
Returns:
the Iterator for the given HTML tag
See Also:
HTML.Tag


"
HTMLDocument,getParser(),HTMLEditorKit.Parser,Returns the parser that is used when inserting HTML into the existing document.,"

getParser
public HTMLEditorKit.Parser getParser()
Returns the parser that is used when inserting HTML into the existing
 document.

Returns:
the parser used for text insertion
Since:
1.3


"
HTMLDocument,getPreservesUnknownTags(),boolean,Returns the behavior the parser observes when encountering unknown tags.,"

getPreservesUnknownTags
public boolean getPreservesUnknownTags()
Returns the behavior the parser observes when encountering
 unknown tags.

Returns:
true if unknown tags are to be preserved when parsing
See Also:
HTML.Tag


"
HTMLDocument,getReader(int pos),HTMLEditorKit.ParserCallback,Fetches the reader for the parser to use when loading the document with HTML.,"

getReader
public HTMLEditorKit.ParserCallback getReader(int pos)
Fetches the reader for the parser to use when loading the document
 with HTML.  This is implemented to return an instance of
 HTMLDocument.HTMLReader.
 Subclasses can reimplement this
 method to change how the document gets structured if desired.
 (For example, to handle custom tags, or structurally represent character
 style elements.)

Parameters:
pos - the starting position
Returns:
the reader used by the parser to load the document


"
HTMLDocument,"getReader(int pos, int popDepth, int pushDepth, HTML.Tag insertTag)",HTMLEditorKit.ParserCallback,Returns the reader for the parser to use to load the document with HTML.,"

getReader
public HTMLEditorKit.ParserCallback getReader(int pos,
                                              int popDepth,
                                              int pushDepth,
                                              HTML.Tag insertTag)
Returns the reader for the parser to use to load the document
 with HTML.  This is implemented to return an instance of
 HTMLDocument.HTMLReader.
 Subclasses can reimplement this
 method to change how the document gets structured if desired.
 (For example, to handle custom tags, or structurally represent character
 style elements.)
 This is a convenience method for
 getReader(int, int, int, HTML.Tag, TRUE).

Parameters:
popDepth - the number of ElementSpec.EndTagTypes
          to generate before inserting
pushDepth - the number of ElementSpec.StartTagTypes
          with a direction of ElementSpec.JoinNextDirection
          that should be generated before inserting,
          but after the end tags have been generated
insertTag - the first tag to start inserting into document
Returns:
the reader used by the parser to load the document


"
HTMLDocument,getStyleSheet(),StyleSheet,Fetches the StyleSheet with the document-specific display rules (CSS) that were specified in the HTML document itself.,"

getStyleSheet
public StyleSheet getStyleSheet()
Fetches the StyleSheet with the document-specific display
 rules (CSS) that were specified in the HTML document itself.

Returns:
the StyleSheet


"
HTMLDocument,getTokenThreshold(),int,Gets the number of tokens to buffer before trying to update the documents element structure.,"

getTokenThreshold
public int getTokenThreshold()
Gets the number of tokens to buffer before trying to update
 the documents element structure.  The default value is
 Integer.MAX_VALUE.

Returns:
the number of tokens to buffer


"
HTMLDocument,"insert(int offset, DefaultStyledDocument.ElementSpec[] data)",protected void,Inserts new elements in bulk.,"

insert
protected void insert(int offset,
                      DefaultStyledDocument.ElementSpec[] data)
               throws BadLocationException
Inserts new elements in bulk.  This is how elements get created
 in the document.  The parsing determines what structure is needed
 and creates the specification as a set of tokens that describe the
 edit while leaving the document free of a write-lock.  This method
 can then be called in bursts by the reader to acquire a write-lock
 for a shorter duration (i.e. while the document is actually being
 altered).

Overrides:
insert in class DefaultStyledDocument
Parameters:
offset - the starting offset
data - the element data
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document.


"
HTMLDocument,"insertAfterEnd(Element elem, String htmlText)",void,Inserts the HTML specified as a string after the the end of the given element.,"

insertAfterEnd
public void insertAfterEnd(Element elem,
                           String htmlText)
                    throws BadLocationException,
                           IOException
Inserts the HTML specified as a string after the the end of the
 given element.

 Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking insertAfterEnd(elem, ""<ul><li>"")
 results in the following structure (new elements are in red).

        <body>
         /  \
      <div> <ul>
       / \    \
     <p> <p>  <li>
 
Unlike the insertBeforeEnd method, new elements
 become siblings of the specified element, not
 children.
If either elem or htmlText
 parameter is null, no changes are made to the
 document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case
 if the document was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the element the content is inserted after
htmlText - the string to be parsed and inserted after elem
Throws:
IllegalStateException - if an HTMLEditorKit.Parser has not
         been set on the document
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"insertAfterStart(Element elem, String htmlText)",void,Inserts the HTML specified as a string at the start of the element.,"

insertAfterStart
public void insertAfterStart(Element elem,
                             String htmlText)
                      throws BadLocationException,
                             IOException
Inserts the HTML specified as a string at the start
 of the element.

 Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking insertAfterStart(elem,
 ""<ul><li>"") results in the following structure
 (new elements are in red).

        <body>
          |
        <div>
       /  |  \
    <ul> <p> <p>
     /
  <li>
 
Unlike the insertBeforeStart method, new
  elements become children of the specified element,
  not siblings.
Parameter elem must not be a leaf element,
 otherwise an IllegalArgumentException is thrown.
 If either elem or htmlText parameter
 is null, no changes are made to the document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case
 if the document was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the branch element to be the root for the new text
htmlText - the string to be parsed and assigned to elem
Throws:
IllegalArgumentException - if elem is a leaf
IllegalStateException - if an HTMLEditorKit.Parser has not
         been set on the document
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"insertBeforeEnd(Element elem, String htmlText)",void,Inserts the HTML specified as a string at the end of the element.,"

insertBeforeEnd
public void insertBeforeEnd(Element elem,
                            String htmlText)
                     throws BadLocationException,
                            IOException
Inserts the HTML specified as a string at the end of
 the element.

  If elem's children are leaves, and the
 character at a elem.getEndOffset() - 1 is a newline,
 this will insert before the newline so that there isn't text after
 the newline.
Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking insertBeforeEnd(elem, ""<ul><li>"")
 results in the following structure (new elements are in red).

        <body>
          |
        <div>
       /  |  \
     <p> <p> <ul>
               \
               <li>
 
Unlike the insertAfterEnd method, new elements
 become children of the specified element, not
 siblings.
Parameter elem must not be a leaf element,
 otherwise an IllegalArgumentException is thrown.
 If either elem or htmlText parameter
 is null, no changes are made to the document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case
 if the document was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the element to be the root for the new text
htmlText - the string to be parsed and assigned to elem
Throws:
IllegalArgumentException - if elem is a leaf
IllegalStateException - if an HTMLEditorKit.Parser has not
         been set on the document
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"insertBeforeStart(Element elem, String htmlText)",void,Inserts the HTML specified as a string before the start of the given element.,"

insertBeforeStart
public void insertBeforeStart(Element elem,
                              String htmlText)
                       throws BadLocationException,
                              IOException
Inserts the HTML specified as a string before the start of
 the given element.

 Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking insertBeforeStart(elem,
 ""<ul><li>"") results in the following structure
 (new elements are in red).

        <body>
         /  \
      <ul> <div>
       /    /  \
     <li> <p>  <p>
 
Unlike the insertAfterStart method, new
 elements become siblings of the specified element, not
 children.
If either elem or htmlText
 parameter is null, no changes are made to the
 document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case
 if the document was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the element the content is inserted before
htmlText - the string to be parsed and inserted before elem
Throws:
IllegalStateException - if an HTMLEditorKit.Parser has not
         been set on the document
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr)",protected void,Updates document structure as a result of text insertion.,"

insertUpdate
protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng,
                            AttributeSet attr)
Updates document structure as a result of text insertion.  This
 will happen within a write lock.  This implementation simply
 parses the inserted content for line breaks and builds up a set
 of instructions for the element buffer.

Overrides:
insertUpdate in class DefaultStyledDocument
Parameters:
chng - a description of the document change
attr - the attributes


"
HTMLDocument,processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent e),void,Processes HyperlinkEvents that are generated by documents in an HTML frame.,"

processHTMLFrameHyperlinkEvent
public void processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent e)
Processes HyperlinkEvents that
 are generated by documents in an HTML frame.
 The HyperlinkEvent type, as the parameter suggests,
 is HTMLFrameHyperlinkEvent.
 In addition to the typical information contained in a
 HyperlinkEvent,
 this event contains the element that corresponds to the frame in
 which the click happened (the source element) and the
 target name.  The target name has 4 possible values:
 
  _self
   _parent
   _top
   a named frame
 

 If target is _self, the action is to change the value of the
 HTML.Attribute.SRC attribute and fires a
 ChangedUpdate event.

 If the target is _parent, then it deletes the parent element,
 which is a <FRAMESET> element, and inserts a new <FRAME>
 element, and sets its HTML.Attribute.SRC attribute
 to have a value equal to the destination URL and fire a
 RemovedUpdate and InsertUpdate.

 If the target is _top, this method does nothing. In the implementation
 of the view for a frame, namely the FrameView,
 the processing of _top is handled.  Given that _top implies
 replacing the entire document, it made sense to handle this outside
 of the document that it will replace.

 If the target is a named frame, then the element hierarchy is searched
 for an element with a name equal to the target, its
 HTML.Attribute.SRC attribute is updated and a
 ChangedUpdate event is fired.

Parameters:
e - the event


"
HTMLDocument,setBase(URL u),void,Sets the location to resolve relative URLs against.,"

setBase
public void setBase(URL u)
Sets the location to resolve relative URLs against.  By
 default this will be the document's URL if the document
 was loaded from a URL.  If a base tag is found and
 can be parsed, it will be used as the base location.
 This also sets the base of the StyleSheet
 to be u as well as the base of the document.

Parameters:
u - the desired base URL


"
HTMLDocument,"setInnerHTML(Element elem, String htmlText)",void,Replaces the children of the given element with the contents specified as an HTML string.,"

setInnerHTML
public void setInnerHTML(Element elem,
                         String htmlText)
                  throws BadLocationException,
                         IOException
Replaces the children of the given element with the contents
 specified as an HTML string.

 This will be seen as at least two events, n inserts followed by
 a remove.
Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking setInnerHTML(elem, ""<ul><li>"")
 results in the following structure (new elements are in red).

     <body>
       |
     <div>
         \
         <ul>
           \
           <li>
 
Parameter elem must not be a leaf element,
 otherwise an IllegalArgumentException is thrown.
 If either elem or htmlText parameter
 is null, no changes are made to the document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case
 if the document was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the branch element whose children will be replaced
htmlText - the string to be parsed and assigned to elem
Throws:
IllegalArgumentException - if elem is a leaf
IllegalStateException - if an HTMLEditorKit.Parser
         has not been defined
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"setOuterHTML(Element elem, String htmlText)",void,Replaces the given element in the parent with the contents specified as an HTML string.,"

setOuterHTML
public void setOuterHTML(Element elem,
                         String htmlText)
                  throws BadLocationException,
                         IOException
Replaces the given element in the parent with the contents
 specified as an HTML string.

 This will be seen as at least two events, n inserts followed by
 a remove.
When replacing a leaf this will attempt to make sure there is
 a newline present if one is needed. This may result in an additional
 element being inserted. Consider, if you were to replace a character
 element that contained a newline with <img> this would create
 two elements, one for the image, and one for the newline.
If you try to replace the element at length you will most
 likely end up with two elements, eg
 setOuterHTML(getCharacterElement (getLength()),
 ""blah"") will result in two leaf elements at the end, one
 representing 'blah', and the other representing the end
 element.
Consider the following structure (the elem
 parameter is in bold).

     <body>
       |
     <div>
      /  \
    <p>   <p>
 
Invoking setOuterHTML(elem, ""<ul><li>"")
 results in the following structure (new elements are in red).

    <body>
      |
     <ul>
       \
       <li>
 
If either elem or htmlText
 parameter is null, no changes are made to the
 document.
For this to work correctly, the document must have an
 HTMLEditorKit.Parser set. This will be the case if the document
 was created from an HTMLEditorKit via the
 createDefaultDocument method.

Parameters:
elem - the element to replace
htmlText - the string to be parsed and inserted in place of elem
Throws:
IllegalStateException - if an HTMLEditorKit.Parser has not
         been set
BadLocationException
IOException
Since:
1.3


"
HTMLDocument,"setParagraphAttributes(int offset, int length, AttributeSet s, boolean replace)",void,Sets attributes for a paragraph.,"

setParagraphAttributes
public void setParagraphAttributes(int offset,
                                   int length,
                                   AttributeSet s,
                                   boolean replace)
Sets attributes for a paragraph.
 
 This method is thread safe, although most Swing methods
 are not. Please see
 Concurrency
 in Swing for more information.

Specified by:
setParagraphAttributes in interface StyledDocument
Overrides:
setParagraphAttributes in class DefaultStyledDocument
Parameters:
offset - the offset into the paragraph (must be at least 0)
length - the number of characters affected (must be at least 0)
s - the attributes
replace - whether to replace existing attributes, or merge them


"
HTMLDocument,setParser(HTMLEditorKit.Parser parser),void,"Sets the parser that is used by the methods that insert html into the existing document, such as setInnerHTML, and setOuterHTML.","

setParser
public void setParser(HTMLEditorKit.Parser parser)
Sets the parser that is used by the methods that insert html
 into the existing document, such as setInnerHTML,
 and setOuterHTML.
 
HTMLEditorKit.createDefaultDocument will set the parser
 for you. If you create an HTMLDocument by hand,
 be sure and set the parser accordingly.

Parameters:
parser - the parser to be used for text insertion
Since:
1.3


"
HTMLDocument,setPreservesUnknownTags(boolean preservesTags),void,Determines how unknown tags are handled by the parser.,"

setPreservesUnknownTags
public void setPreservesUnknownTags(boolean preservesTags)
Determines how unknown tags are handled by the parser.
 If set to true, unknown
 tags are put in the model, otherwise they are dropped.

Parameters:
preservesTags - true if unknown tags should be
          saved in the model, otherwise tags are dropped
See Also:
HTML.Tag


"
HTMLDocument,setTokenThreshold(int n),void,Sets the number of tokens to buffer before trying to update the documents element structure.,"

setTokenThreshold
public void setTokenThreshold(int n)
Sets the number of tokens to buffer before trying to update
 the documents element structure.

Parameters:
n - the number of tokens to buffer


"
HTMLDocument.Iterator,getAttributes(),abstract AttributeSet,Return the attributes for this tag.,"

getAttributes
public abstract AttributeSet getAttributes()
Return the attributes for this tag.

Returns:
the AttributeSet for this tag, or
      null if none can be found


"
HTMLDocument.Iterator,getEndOffset(),abstract int,Returns the end of the range for which the current occurrence of the tag is defined and has the same attributes.,"

getEndOffset
public abstract int getEndOffset()
Returns the end of the range for which the current occurrence of
 the tag is defined and has the same attributes.

Returns:
the end of the range


"
HTMLDocument.Iterator,getStartOffset(),abstract int,Returns the start of the range for which the current occurrence of the tag is defined and has the same attributes.,"

getStartOffset
public abstract int getStartOffset()
Returns the start of the range for which the current occurrence of
 the tag is defined and has the same attributes.

Returns:
the start of the range, or -1 if it can't be found


"
HTMLDocument.Iterator,getTag(),abstract HTML.Tag,Type of tag this iterator represents.,"

getTag
public abstract HTML.Tag getTag()
Type of tag this iterator represents.

"
HTMLDocument.Iterator,isValid(),abstract boolean,Indicates if the iterator is currently representing an occurrence of a tag.,"

isValid
public abstract boolean isValid()
Indicates if the iterator is currently
 representing an occurrence of a tag.  If
 false there are no more tags for this iterator.

Returns:
true if the iterator is currently representing an
              occurrence of a tag, otherwise returns false


"
HTMLDocument.Iterator,next(),abstract void,Move the iterator forward to the next occurrence of the tag it represents.,"

next
public abstract void next()
Move the iterator forward to the next occurrence
 of the tag it represents.

"
HTMLEditorKit,clone(),Object,Creates a copy of the editor kit.,"

clone
public Object clone()
Creates a copy of the editor kit.

Overrides:
clone in class StyledEditorKit
Returns:
the copy
See Also:
Cloneable


"
HTMLEditorKit,createDefaultDocument(),Document,Create an uninitialized text storage model that is appropriate for this type of editor.,"

createDefaultDocument
public Document createDefaultDocument()
Create an uninitialized text storage model
 that is appropriate for this type of editor.

Overrides:
createDefaultDocument in class StyledEditorKit
Returns:
the model


"
HTMLEditorKit,"createInputAttributes(Element element, MutableAttributeSet set)",protected void,Copies the key/values in elements AttributeSet into set.,"

createInputAttributes
protected void createInputAttributes(Element element,
                                     MutableAttributeSet set)
Copies the key/values in elements AttributeSet into
 set. This does not copy component, icon, or element
 names attributes. Subclasses may wish to refine what is and what
 isn't copied here. But be sure to first remove all the attributes that
 are in set.
 This is called anytime the caret moves over a different location.

Overrides:
createInputAttributes in class StyledEditorKit


"
HTMLEditorKit,deinstall(JEditorPane c),void,Called when the kit is being removed from the JEditorPane.,"

deinstall
public void deinstall(JEditorPane c)
Called when the kit is being removed from the
 JEditorPane.  This is used to unregister any
 listeners that were attached.

Overrides:
deinstall in class StyledEditorKit
Parameters:
c - the JEditorPane


"
HTMLEditorKit,getAccessibleContext(),AccessibleContext,returns the AccessibleContext associated with this editor kit,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
returns the AccessibleContext associated with this editor kit

Specified by:
getAccessibleContext in interface Accessible
Returns:
the AccessibleContext associated with this editor kit
Since:
1.4


"
HTMLEditorKit,getActions(),Action[],Fetches the command list for the editor.,"

getActions
public Action[] getActions()
Fetches the command list for the editor.  This is
 the list of commands supported by the superclass
 augmented by the collection of commands defined
 locally for style operations.

Overrides:
getActions in class StyledEditorKit
Returns:
the command list


"
HTMLEditorKit,getContentType(),String,Get the MIME type of the data that this kit represents support for.,"

getContentType
public String getContentType()
Get the MIME type of the data that this
 kit represents support for.  This kit supports
 the type text/html.

Overrides:
getContentType in class DefaultEditorKit
Returns:
the type


"
HTMLEditorKit,getDefaultCursor(),Cursor,Returns the default cursor.,"

getDefaultCursor
public Cursor getDefaultCursor()
Returns the default cursor.

Since:
1.3


"
HTMLEditorKit,getInputAttributes(),MutableAttributeSet,Gets the input attributes used for the styled editing actions.,"

getInputAttributes
public MutableAttributeSet getInputAttributes()
Gets the input attributes used for the styled
 editing actions.

Overrides:
getInputAttributes in class StyledEditorKit
Returns:
the attribute set


"
HTMLEditorKit,getLinkCursor(),Cursor,Returns the cursor to use over hyper links.,"

getLinkCursor
public Cursor getLinkCursor()
Returns the cursor to use over hyper links.

Since:
1.3


"
HTMLEditorKit,getParser(),protected HTMLEditorKit.Parser,Fetch the parser to use for reading HTML streams.,"

getParser
protected HTMLEditorKit.Parser getParser()
Fetch the parser to use for reading HTML streams.
 This can be reimplemented to provide a different
 parser.  The default implementation is loaded dynamically
 to avoid the overhead of loading the default parser if
 it's not used.  The default parser is the HotJava parser
 using an HTML 3.2 DTD.

"
HTMLEditorKit,getStyleSheet(),StyleSheet,Get the set of styles currently being used to render the HTML elements.,"

getStyleSheet
public StyleSheet getStyleSheet()
Get the set of styles currently being used to render the
 HTML elements.  By default the resource specified by
 DEFAULT_CSS gets loaded, and is shared by all HTMLEditorKit
 instances.

"
HTMLEditorKit,getViewFactory(),ViewFactory,Fetch a factory that is suitable for producing views of any models that are produced by this kit.,"

getViewFactory
public ViewFactory getViewFactory()
Fetch a factory that is suitable for producing
 views of any models that are produced by this
 kit.

Overrides:
getViewFactory in class StyledEditorKit
Returns:
the factory


"
HTMLEditorKit,"insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)",void,Inserts HTML into an existing document.,"

insertHTML
public void insertHTML(HTMLDocument doc,
                       int offset,
                       String html,
                       int popDepth,
                       int pushDepth,
                       HTML.Tag insertTag)
                throws BadLocationException,
                       IOException
Inserts HTML into an existing document.

Parameters:
doc - the document to insert into
offset - the offset to insert HTML at
popDepth - the number of ElementSpec.EndTagTypes to generate before
        inserting
pushDepth - the number of ElementSpec.StartTagTypes with a direction
        of ElementSpec.JoinNextDirection that should be generated
        before inserting, but after the end tags have been generated
insertTag - the first tag to start inserting into document
Throws:
RuntimeException - (will eventually be a BadLocationException)
            if pos is invalid
BadLocationException
IOException


"
HTMLEditorKit,install(JEditorPane c),void,Called when the kit is being installed into the a JEditorPane.,"

install
public void install(JEditorPane c)
Called when the kit is being installed into the
 a JEditorPane.

Overrides:
install in class StyledEditorKit
Parameters:
c - the JEditorPane


"
HTMLEditorKit,isAutoFormSubmission(),boolean,Indicates whether an html form submission is processed automatically or only FormSubmitEvent is fired.,"

isAutoFormSubmission
public boolean isAutoFormSubmission()
Indicates whether an html form submission is processed automatically
 or only FormSubmitEvent is fired.

Returns:
true  if html form submission is processed automatically,
         false otherwise.
Since:
1.5
See Also:
setAutoFormSubmission(boolean)


"
HTMLEditorKit,"read(Reader in, Document doc, int pos)",void,Inserts content from the given stream.,"

read
public void read(Reader in,
                 Document doc,
                 int pos)
          throws IOException,
                 BadLocationException
Inserts content from the given stream. If doc is
 an instance of HTMLDocument, this will read
 HTML 3.2 text. Inserting HTML into a non-empty document must be inside
 the body Element, if you do not insert into the body an exception will
 be thrown. When inserting into a non-empty document all tags outside
 of the body (head, title) will be dropped.

Overrides:
read in class DefaultEditorKit
Parameters:
in - the stream to read from
doc - the destination for the insertion
pos - the location in the document to place the
   content
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document
RuntimeException - (will eventually be a BadLocationException)
            if pos is invalid


"
HTMLEditorKit,setAutoFormSubmission(boolean isAuto),void,Specifies if an html form submission is processed automatically or only FormSubmitEvent is fired.,"

setAutoFormSubmission
public void setAutoFormSubmission(boolean isAuto)
Specifies if an html form submission is processed
 automatically or only FormSubmitEvent is fired.
 By default it is set to true.

Since:
1.5
See Also:
isAutoFormSubmission(), 
FormSubmitEvent


"
HTMLEditorKit,setDefaultCursor(Cursor cursor),void,Sets the default cursor.,"

setDefaultCursor
public void setDefaultCursor(Cursor cursor)
Sets the default cursor.

Since:
1.3


"
HTMLEditorKit,setLinkCursor(Cursor cursor),void,Sets the cursor to use over links.,"

setLinkCursor
public void setLinkCursor(Cursor cursor)
Sets the cursor to use over links.

Since:
1.3


"
HTMLEditorKit,setStyleSheet(StyleSheet s),void,Set the set of styles to be used to render the various HTML elements.,"

setStyleSheet
public void setStyleSheet(StyleSheet s)
Set the set of styles to be used to render the various
 HTML elements.  These styles are specified in terms of
 CSS specifications.  Each document produced by the kit
 will have a copy of the sheet which it can add the
 document specific styles to.  By default, the StyleSheet
 specified is shared by all HTMLEditorKit instances.
 This should be reimplemented to provide a finer granularity
 if desired.

"
HTMLEditorKit,"write(Writer out, Document doc, int pos, int len)",void,Write content from a document to the given stream in a format appropriate for this kind of content handler.,"

write
public void write(Writer out,
                  Document doc,
                  int pos,
                  int len)
           throws IOException,
                  BadLocationException
Write content from a document to the given stream
 in a format appropriate for this kind of content handler.

Overrides:
write in class DefaultEditorKit
Parameters:
out - the stream to write to
doc - the source for the write
pos - the location in the document to fetch the
   content
len - the amount to write out
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
   location within the document


"
HTMLEditorKit.HTMLFactory,create(Element elem),View,Creates a view from an element.,"

create
public View create(Element elem)
Creates a view from an element.

Specified by:
create in interface ViewFactory
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
HTMLEditorKit.HTMLTextAction,"elementCountToTag(HTMLDocument doc, int offset, HTML.Tag tag)",protected int,"Returns number of elements, starting at the deepest leaf, needed to get to an element representing tag.","

elementCountToTag
protected int elementCountToTag(HTMLDocument doc,
                                int offset,
                                HTML.Tag tag)
Returns number of elements, starting at the deepest leaf, needed
 to get to an element representing tag. This will
 return -1 if no elements is found representing tag,
 or 0 if the parent of the leaf at offset represents
 tag.

"
HTMLEditorKit.HTMLTextAction,"findElementMatchingTag(HTMLDocument doc, int offset, HTML.Tag tag)",protected Element,Returns the deepest element at offset matching tag.,"

findElementMatchingTag
protected Element findElementMatchingTag(HTMLDocument doc,
                                         int offset,
                                         HTML.Tag tag)
Returns the deepest element at offset matching
 tag.

"
HTMLEditorKit.HTMLTextAction,"getElementsAt(HTMLDocument doc, int offset)",protected Element[],Returns an array of the Elements that contain offset.,"

getElementsAt
protected Element[] getElementsAt(HTMLDocument doc,
                                  int offset)
Returns an array of the Elements that contain offset.
 The first elements corresponds to the root.

"
HTMLEditorKit.HTMLTextAction,getHTMLDocument(JEditorPane e),protected HTMLDocument,NULL,"

getHTMLDocument
protected HTMLDocument getHTMLDocument(JEditorPane e)

Returns:
HTMLDocument of e.


"
HTMLEditorKit.HTMLTextAction,getHTMLEditorKit(JEditorPane e),protected HTMLEditorKit,NULL,"

getHTMLEditorKit
protected HTMLEditorKit getHTMLEditorKit(JEditorPane e)

Returns:
HTMLEditorKit for e.


"
HTMLEditorKit.InsertHTMLTextAction,actionPerformed(ActionEvent ae),void,Inserts the HTML into the document.,"

actionPerformed
public void actionPerformed(ActionEvent ae)
Inserts the HTML into the document.

Parameters:
ae - the event


"
HTMLEditorKit.InsertHTMLTextAction,"insertAtBoundary(JEditorPane editor, HTMLDocument doc, int offset, Element insertElement, String html, HTML.Tag parentTag, HTML.Tag addTag)",protected void,This is invoked when inserting at a boundary.,"

insertAtBoundary
protected void insertAtBoundary(JEditorPane editor,
                                HTMLDocument doc,
                                int offset,
                                Element insertElement,
                                String html,
                                HTML.Tag parentTag,
                                HTML.Tag addTag)
This is invoked when inserting at a boundary. It determines
 the number of pops, and then the number of pushes that need
 to be performed, and then invokes insertHTML.

Since:
1.3


"
HTMLEditorKit.InsertHTMLTextAction,"insertAtBoundry(JEditorPane editor, HTMLDocument doc, int offset, Element insertElement, String html, HTML.Tag parentTag, HTML.Tag addTag)",protected void,"Deprecated. As of Java 2 platform v1.3, use insertAtBoundary","

insertAtBoundry
@Deprecated
protected void insertAtBoundry(JEditorPane editor,
                                           HTMLDocument doc,
                                           int offset,
                                           Element insertElement,
                                           String html,
                                           HTML.Tag parentTag,
                                           HTML.Tag addTag)
Deprecated. As of Java 2 platform v1.3, use insertAtBoundary
This is invoked when inserting at a boundary. It determines
 the number of pops, and then the number of pushes that need
 to be performed, and then invokes insertHTML.

"
HTMLEditorKit.InsertHTMLTextAction,"insertHTML(JEditorPane editor, HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag addTag)",protected void,A cover for HTMLEditorKit.insertHTML.,"

insertHTML
protected void insertHTML(JEditorPane editor,
                          HTMLDocument doc,
                          int offset,
                          String html,
                          int popDepth,
                          int pushDepth,
                          HTML.Tag addTag)
A cover for HTMLEditorKit.insertHTML. If an exception it
 thrown it is wrapped in a RuntimeException and thrown.

"
HTMLEditorKit.LinkController,"activateLink(int pos, JEditorPane editor)",protected void,Calls linkActivated on the associated JEditorPane if the given position represents a link.,"

activateLink
protected void activateLink(int pos,
                            JEditorPane editor)
Calls linkActivated on the associated JEditorPane
 if the given position represents a link.This is implemented
 to forward to the method with the same name, but with the following
 args both == -1.

Parameters:
pos - the position
editor - the editor pane


"
HTMLEditorKit.LinkController,mouseClicked(MouseEvent e),void,Called for a mouse click event.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Called for a mouse click event.
 If the component is read-only (ie a browser) then
 the clicked event is used to drive an attempt to
 follow the reference specified by a link.

Specified by:
mouseClicked in interface MouseListener
Overrides:
mouseClicked in class MouseAdapter
Parameters:
e - the mouse event
See Also:
MouseListener.mouseClicked(java.awt.event.MouseEvent)


"
HTMLEditorKit.LinkController,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component and then dragged.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Description copied from class: MouseAdapter
Invoked when a mouse button is pressed on a component and then
 dragged.  MOUSE_DRAGGED events will continue to be
 delivered to the component where the drag originated until the
 mouse button is released (regardless of whether the mouse position
 is within the bounds of the component).
 
 Due to platform-dependent Drag&Drop implementations,
 MOUSE_DRAGGED events may not be delivered during a native
 Drag&Drop operation.

Specified by:
mouseDragged in interface MouseMotionListener
Overrides:
mouseDragged in class MouseAdapter


"
HTMLEditorKit.LinkController,mouseMoved(MouseEvent e),void,Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.,"

mouseMoved
public void mouseMoved(MouseEvent e)
Description copied from class: MouseAdapter
Invoked when the mouse cursor has been moved onto a component
 but no buttons have been pushed.

Specified by:
mouseMoved in interface MouseMotionListener
Overrides:
mouseMoved in class MouseAdapter


"
HTMLEditorKit.Parser,"parse(Reader r, HTMLEditorKit.ParserCallback cb, boolean ignoreCharSet)",abstract void,Parse the given stream and drive the given callback with the results of the parse.,"

parse
public abstract void parse(Reader r,
                           HTMLEditorKit.ParserCallback cb,
                           boolean ignoreCharSet)
                    throws IOException
Parse the given stream and drive the given callback
 with the results of the parse.  This method should
 be implemented to be thread-safe.

Throws:
IOException


"
HTMLEditorKit.ParserCallback,flush(),void,NULL,"

flush
public void flush()
           throws BadLocationException

Throws:
BadLocationException


"
HTMLEditorKit.ParserCallback,"handleComment(char[] data, int pos)",void,NULL,"

handleComment
public void handleComment(char[] data,
                          int pos)

"
HTMLEditorKit.ParserCallback,handleEndOfLineString(String eol),void,"This is invoked after the stream has been parsed, but before flush.","

handleEndOfLineString
public void handleEndOfLineString(String eol)
This is invoked after the stream has been parsed, but before
 flush. eol will be one of \n, \r
 or \r\n, which ever is encountered the most in parsing the
 stream.

Since:
1.3


"
HTMLEditorKit.ParserCallback,"handleEndTag(HTML.Tag t, int pos)",void,NULL,"

handleEndTag
public void handleEndTag(HTML.Tag t,
                         int pos)

"
HTMLEditorKit.ParserCallback,"handleError(String errorMsg, int pos)",void,NULL,"

handleError
public void handleError(String errorMsg,
                        int pos)

"
HTMLEditorKit.ParserCallback,"handleSimpleTag(HTML.Tag t, MutableAttributeSet a, int pos)",void,NULL,"

handleSimpleTag
public void handleSimpleTag(HTML.Tag t,
                            MutableAttributeSet a,
                            int pos)

"
HTMLEditorKit.ParserCallback,"handleStartTag(HTML.Tag t, MutableAttributeSet a, int pos)",void,NULL,"

handleStartTag
public void handleStartTag(HTML.Tag t,
                           MutableAttributeSet a,
                           int pos)

"
HTMLEditorKit.ParserCallback,"handleText(char[] data, int pos)",void,NULL,"

handleText
public void handleText(char[] data,
                       int pos)

"
HTMLFrameHyperlinkEvent,getTarget(),String,returns the target for the link.,"

getTarget
public String getTarget()
returns the target for the link.

"
HTMLWriter,closeOutUnwantedEmbeddedTags(AttributeSet attr),protected void,Searches the attribute set and for each tag that is stored in the tag vector.,"

closeOutUnwantedEmbeddedTags
protected void closeOutUnwantedEmbeddedTags(AttributeSet attr)
                                     throws IOException
Searches the attribute set and for each tag
 that is stored in the tag vector.  If the tag is not found,
 then the tag is removed from the vector and a corresponding
 end tag is written out.

Throws:
IOException - on any I/O error


"
HTMLWriter,comment(Element elem),protected void,Writes out comments.,"

comment
protected void comment(Element elem)
                throws BadLocationException,
                       IOException
Writes out comments.

Parameters:
elem - an Element
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
HTMLWriter,emptyTag(Element elem),protected void,Writes out all empty elements (all tags that have no corresponding end tag).,"

emptyTag
protected void emptyTag(Element elem)
                 throws BadLocationException,
                        IOException
Writes out all empty elements (all tags that have no
 corresponding end tag).

Parameters:
elem - an Element
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
HTMLWriter,endTag(Element elem),protected void,Writes out an end tag for the element.,"

endTag
protected void endTag(Element elem)
               throws IOException
Writes out an end tag for the element.

Parameters:
elem - an Element
Throws:
IOException - on any I/O error


"
HTMLWriter,isBlockTag(AttributeSet attr),protected boolean,Determines if the HTML.Tag associated with the element is a block tag.,"

isBlockTag
protected boolean isBlockTag(AttributeSet attr)
Determines if the HTML.Tag associated with the
 element is a block tag.

Parameters:
attr - an AttributeSet
Returns:
true if tag is block tag, false otherwise.


"
HTMLWriter,"matchNameAttribute(AttributeSet attr, HTML.Tag tag)",protected boolean,Returns true if the StyleConstants.NameAttribute is equal to the tag that is passed in as a parameter.,"

matchNameAttribute
protected boolean matchNameAttribute(AttributeSet attr,
                                     HTML.Tag tag)
Returns true if the StyleConstants.NameAttribute is
 equal to the tag that is passed in as a parameter.

"
HTMLWriter,"output(char[] chars, int start, int length)",protected void,"This method is overriden to map any character entities, such as < to &lt;.","

output
protected void output(char[] chars,
                      int start,
                      int length)
               throws IOException
This method is overriden to map any character entities, such as
 < to &lt;. super.output will be invoked to
 write the content.

Overrides:
output in class AbstractWriter
Throws:
IOException
Since:
1.3


"
HTMLWriter,selectContent(AttributeSet attr),protected void,Writes out the content of the SELECT form element.,"

selectContent
protected void selectContent(AttributeSet attr)
                      throws IOException
Writes out the content of the SELECT form element.

Parameters:
attr - the AttributeSet associated with the form element
Throws:
IOException - on any I/O error


"
HTMLWriter,startTag(Element elem),protected void,Writes out a start tag for the element.,"

startTag
protected void startTag(Element elem)
                 throws IOException,
                        BadLocationException
Writes out a start tag for the element.
 Ignores all synthesized elements.

Parameters:
elem - an Element
Throws:
IOException - on any I/O error
BadLocationException


"
HTMLWriter,synthesizedElement(Element elem),protected boolean,Returns true if the element is a synthesized element.,"

synthesizedElement
protected boolean synthesizedElement(Element elem)
Returns true if the element is a
 synthesized element.  Currently we are only testing
 for the p-implied tag.

"
HTMLWriter,text(Element elem),protected void,Writes out text.,"

text
protected void text(Element elem)
             throws BadLocationException,
                    IOException
Writes out text.  If a range is specified when the constructor
 is invoked, then only the appropriate range of text is written
 out.

Overrides:
text in class AbstractWriter
Parameters:
elem - an Element
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
HTMLWriter,textAreaContent(AttributeSet attr),protected void,Writes out text that is contained in a TEXTAREA form element.,"

textAreaContent
protected void textAreaContent(AttributeSet attr)
                        throws BadLocationException,
                               IOException
Writes out text that is contained in a TEXTAREA form
 element.

Parameters:
attr - an AttributeSet
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
HTMLWriter,write(),void,Iterates over the Element tree and controls the writing out of all the tags and its attributes.,"

write
public void write()
           throws IOException,
                  BadLocationException
Iterates over the
 Element tree and controls the writing out of
 all the tags and its attributes.

Specified by:
write in class AbstractWriter
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
HTMLWriter,writeAttributes(AttributeSet attr),protected void,Writes out the attribute set.,"

writeAttributes
protected void writeAttributes(AttributeSet attr)
                        throws IOException
Writes out the attribute set.  Ignores all
 attributes with a key of type HTML.Tag,
 attributes with a key of type StyleConstants,
 and attributes with a key of type
 HTML.Attribute.ENDTAG.

Overrides:
writeAttributes in class AbstractWriter
Parameters:
attr - an AttributeSet
Throws:
IOException - on any I/O error


"
HTMLWriter,writeEmbeddedTags(AttributeSet attr),protected void,Searches for embedded tags in the AttributeSet and writes them out.,"

writeEmbeddedTags
protected void writeEmbeddedTags(AttributeSet attr)
                          throws IOException
Searches for embedded tags in the AttributeSet
 and writes them out.  It also stores these tags in a vector
 so that when appropriate the corresponding end tags can be
 written out.

Throws:
IOException - on any I/O error


"
HTMLWriter,writeLineSeparator(),protected void,Writes the line separator.,"

writeLineSeparator
protected void writeLineSeparator()
                           throws IOException
Writes the line separator. This is overriden to make sure we don't
 replace the newline content in case it is outside normal ascii.

Overrides:
writeLineSeparator in class AbstractWriter
Throws:
IOException
Since:
1.3


"
HTMLWriter,writeOption(Option option),protected void,Writes out the content of the Option form element.,"

writeOption
protected void writeOption(Option option)
                    throws IOException
Writes out the content of the Option form element.

Parameters:
option - an Option
Throws:
IOException - on any I/O error


"
ImageView,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Invoked when the Elements attributes have changed.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Invoked when the Elements attributes have changed. Recreates the image.

Overrides:
changedUpdate in class View
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
ImageView,getAlignment(int axis),float,Determines the desired alignment for this view along an axis.,"

getAlignment
public float getAlignment(int axis)
Determines the desired alignment for this view along an
 axis.  This is implemented to give the alignment to the
 bottom of the icon along the y axis, and the default
 along the x axis.

Overrides:
getAlignment in class View
Parameters:
axis - may be either X_AXIS or Y_AXIS
Returns:
the desired alignment; this should be a value
   between 0.0 and 1.0 where 0 indicates alignment at the
   origin and 1.0 indicates alignment to the full span
   away from the origin; an alignment of 0.5 would be the
   center of the view


"
ImageView,getAltText(),String,Returns the text to display if the image can't be loaded.,"

getAltText
public String getAltText()
Returns the text to display if the image can't be loaded. This is
 obtained from the Elements attribute set with the attribute name
 HTML.Attribute.ALT.

"
ImageView,getAttributes(),AttributeSet,Fetches the attributes to use when rendering.,"

getAttributes
public AttributeSet getAttributes()
Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

Overrides:
getAttributes in class View


"
ImageView,getImage(),Image,Returns the image to render.,"

getImage
public Image getImage()
Returns the image to render.

"
ImageView,getImageURL(),URL,"Return a URL for the image source, or null if it could not be determined.","

getImageURL
public URL getImageURL()
Return a URL for the image source,
 or null if it could not be determined.

"
ImageView,getLoadingImageIcon(),Icon,Returns the icon to use while in the process of loading the image.,"

getLoadingImageIcon
public Icon getLoadingImageIcon()
Returns the icon to use while in the process of loading the image.

"
ImageView,getLoadsSynchronously(),boolean,Returns true if the image should be loaded when first asked for.,"

getLoadsSynchronously
public boolean getLoadsSynchronously()
Returns true if the image should be loaded when first asked for.

"
ImageView,getNoImageIcon(),Icon,Returns the icon to use if the image couldn't be found.,"

getNoImageIcon
public Icon getNoImageIcon()
Returns the icon to use if the image couldn't be found.

"
ImageView,getPreferredSpan(int axis),float,Determines the preferred span for this view along an axis.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view along an
 axis.

Specified by:
getPreferredSpan in class View
Parameters:
axis - may be either X_AXIS or Y_AXIS
Returns:
the span the view would like to be rendered into;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
See Also:
View.getPreferredSpan(int)


"
ImageView,getStyleSheet(),protected StyleSheet,Convenience method to get the StyleSheet.,"

getStyleSheet
protected StyleSheet getStyleSheet()
Convenience method to get the StyleSheet.

"
ImageView,"getToolTipText(float x, float y, Shape allocation)",String,For images the tooltip text comes from text specified with the ALT attribute.,"

getToolTipText
public String getToolTipText(float x,
                             float y,
                             Shape allocation)
For images the tooltip text comes from text specified with the
 ALT attribute. This is overriden to return
 getAltText.

Overrides:
getToolTipText in class View
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent)


"
ImageView,"modelToView(int pos, Shape a, Position.Bias b)",Shape,Provides a mapping from the document model coordinate space to the coordinate space of the view mapped to it.,"

modelToView
public Shape modelToView(int pos,
                         Shape a,
                         Position.Bias b)
                  throws BadLocationException
Provides a mapping from the document model coordinate space
 to the coordinate space of the view mapped to it.

Specified by:
modelToView in class View
Parameters:
pos - the position to convert
a - the allocated region to render into
b - the bias toward the previous character or the
  next character represented by the offset, in case the
  position is a boundary of two views; b will have one
  of these values:
 
 Position.Bias.Forward
 Position.Bias.Backward

Returns:
the bounding box of the given position
Throws:
BadLocationException - if the given position does not represent a
   valid location in the associated document
See Also:
View.modelToView(int, java.awt.Shape, javax.swing.text.Position.Bias)


"
ImageView,"paint(Graphics g, Shape a)",void,Paints the View.,"

paint
public void paint(Graphics g,
                  Shape a)
Paints the View.

Specified by:
paint in class View
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
ImageView,setLoadsSynchronously(boolean newValue),void,Sets how the image is loaded.,"

setLoadsSynchronously
public void setLoadsSynchronously(boolean newValue)
Sets how the image is loaded. If newValue is true,
 the image we be loaded when first asked for, otherwise it will
 be loaded asynchronously. The default is to not load synchronously,
 that is to load the image asynchronously.

"
ImageView,setParent(View parent),void,Establishes the parent view for this view.,"

setParent
public void setParent(View parent)
Establishes the parent view for this view.
 Seize this moment to cache the AWT Container I'm in.

Overrides:
setParent in class View
Parameters:
parent - the new parent, or null if the view is
          being removed from a parent


"
ImageView,setPropertiesFromAttributes(),protected void,Update any cached values that come from attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Update any cached values that come from attributes.

"
ImageView,"setSize(float width, float height)",void,Sets the size of the view.,"

setSize
public void setSize(float width,
                    float height)
Sets the size of the view.  This should cause
 layout of the view if it has any layout duties.

Overrides:
setSize in class View
Parameters:
width - the width >= 0
height - the height >= 0


"
ImageView,"viewToModel(float x, float y, Shape a, Position.Bias[] bias)",int,Provides a mapping from the view coordinate space to the logical coordinate space of the model.,"

viewToModel
public int viewToModel(float x,
                       float y,
                       Shape a,
                       Position.Bias[] bias)
Provides a mapping from the view coordinate space to the logical
 coordinate space of the model.

Specified by:
viewToModel in class View
Parameters:
x - the X coordinate
y - the Y coordinate
a - the allocated region to render into
Returns:
the location within the model that best represents the
  given point of view
See Also:
View.viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])


"
InlineView,"breakView(int axis, int offset, float pos, float len)",View,Tries to break this view on the given axis.,"

breakView
public View breakView(int axis,
                      int offset,
                      float pos,
                      float len)
Tries to break this view on the given axis. Refer to
 View.breakView(int, int, float, float) for a complete
 description of this method.
 Behavior of this method is unspecified in case axis
 is neither View.X_AXIS nor View.Y_AXIS, and
 in case offset, pos, or len
 is null.

Overrides:
breakView in class GlyphView
Parameters:
axis - may be either View.X_AXIS or
          View.Y_AXIS
offset - the location in the document model
   that a broken fragment would occupy >= 0.  This
   would be the starting offset of the fragment
   returned
pos - the position along the axis that the
  broken view would occupy >= 0.  This may be useful for
  things like tab calculations
len - specifies the distance along the axis
  where a potential break is desired >= 0
Returns:
the fragment of the view that represents the
  given span.
Since:
1.5
See Also:
View.breakView(int, int, float, float)


"
InlineView,"changedUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification from the document that attributes were changed in a location that this view is responsible for.,"

changedUpdate
public void changedUpdate(DocumentEvent e,
                          Shape a,
                          ViewFactory f)
Gives notification from the document that attributes were changed
 in a location that this view is responsible for.

Overrides:
changedUpdate in class LabelView
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
See Also:
View.changedUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
InlineView,getAttributes(),AttributeSet,Fetches the attributes to use when rendering.,"

getAttributes
public AttributeSet getAttributes()
Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

Overrides:
getAttributes in class View


"
InlineView,"getBreakWeight(int axis, float pos, float len)",int,Determines how attractive a break opportunity in this view is.,"

getBreakWeight
public int getBreakWeight(int axis,
                          float pos,
                          float len)
Determines how attractive a break opportunity in
 this view is.  This can be used for determining which
 view is the most attractive to call breakView
 on in the process of formatting.  A view that represents
 text that has whitespace in it might be more attractive
 than a view that has no whitespace, for example.  The
 higher the weight, the more attractive the break.  A
 value equal to or lower than BadBreakWeight
 should not be considered for a break.  A value greater
 than or equal to ForcedBreakWeight should
 be broken.
 
 This is implemented to provide the default behavior
 of returning BadBreakWeight unless the length
 is greater than the length of the view in which case the
 entire view represents the fragment.  Unless a view has
 been written to support breaking behavior, it is not
 attractive to try and break the view.  An example of
 a view that does support breaking is LabelView.
 An example of a view that uses break weight is
 ParagraphView.

Overrides:
getBreakWeight in class GlyphView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
pos - the potential location of the start of the
   broken view >= 0.  This may be useful for calculating tab
   positions.
len - specifies the relative length from pos
   where a potential break is desired >= 0.
Returns:
the weight, which should be a value between
   ForcedBreakWeight and BadBreakWeight.
See Also:
LabelView, 
ParagraphView, 
View.BadBreakWeight, 
View.GoodBreakWeight, 
View.ExcellentBreakWeight, 
View.ForcedBreakWeight


"
InlineView,getStyleSheet(),protected StyleSheet,NULL,"

getStyleSheet
protected StyleSheet getStyleSheet()

"
InlineView,"insertUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was inserted into the document in a location that this view is responsible for.,"

insertUpdate
public void insertUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was inserted into
 the document in a location that this view is responsible for.
 If either parameter is null, behavior of this method is
 implementation dependent.

Overrides:
insertUpdate in class GlyphView
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
Since:
1.5
See Also:
View.insertUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
InlineView,"removeUpdate(DocumentEvent e, Shape a, ViewFactory f)",void,Gives notification that something was removed from the document in a location that this view is responsible for.,"

removeUpdate
public void removeUpdate(DocumentEvent e,
                         Shape a,
                         ViewFactory f)
Gives notification that something was removed from the document
 in a location that this view is responsible for.
 If either parameter is null, behavior of this method is
 implementation dependent.

Overrides:
removeUpdate in class GlyphView
Parameters:
e - the change information from the associated document
a - the current allocation of the view
f - the factory to use to rebuild if the view has children
Since:
1.5
See Also:
View.removeUpdate(javax.swing.event.DocumentEvent, java.awt.Shape, javax.swing.text.ViewFactory)


"
InlineView,setPropertiesFromAttributes(),protected void,Set the cached properties from the attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Set the cached properties from the attributes.

Overrides:
setPropertiesFromAttributes in class LabelView


"
ListView,getAlignment(int axis),float,Calculates the desired shape of the list.,"

getAlignment
public float getAlignment(int axis)
Calculates the desired shape of the list.

Overrides:
getAlignment in class BlockView
Parameters:
axis - may be either X_AXIS or Y_AXIS
Returns:
the desired span
See Also:
View.getPreferredSpan(int)


"
ListView,"paint(Graphics g, Shape allocation)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape allocation)
Renders using the given rendering surface and area on that
 surface.

Overrides:
paint in class BlockView
Parameters:
g - the rendering surface to use
allocation - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
ListView,"paintChild(Graphics g, Rectangle alloc, int index)",protected void,Paints one of the children; called by paint().,"

paintChild
protected void paintChild(Graphics g,
                          Rectangle alloc,
                          int index)
Paints one of the children; called by paint().  By default
 that is all it does, but a subclass can use this to paint
 things relative to the child.

Overrides:
paintChild in class BoxView
Parameters:
g - the graphics context
alloc - the allocated region to render the child into
index - the index of the child


"
ListView,setPropertiesFromAttributes(),protected void,Update any cached values that come from attributes.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Description copied from class: BlockView
Update any cached values that come from attributes.

Overrides:
setPropertiesFromAttributes in class BlockView


"
MinimalHTMLWriter,endFontTag(),protected void,"This is no longer used, instead <span> will be written out.","

endFontTag
protected void endFontTag()
                   throws IOException
This is no longer used, instead <span> will be written out.
 
 Writes out an end tag for the <font> tag.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,inFontTag(),protected boolean,Returns true if we are currently in a <font> tag.,"

inFontTag
protected boolean inFontTag()
Returns true if we are currently in a <font> tag.

"
MinimalHTMLWriter,isText(Element elem),protected boolean,Returns true if the element is a text element.,"

isText
protected boolean isText(Element elem)
Returns true if the element is a text element.

"
MinimalHTMLWriter,startFontTag(String style),protected void,"This is no longer used, instead <span> will be written out.","

startFontTag
protected void startFontTag(String style)
                     throws IOException
This is no longer used, instead <span> will be written out.
 
 Writes out a start tag for the <font> tag.
 Because font tags cannot be nested,
 this method closes out
 any enclosing font tag before writing out a
 new start tag.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,text(Element elem),protected void,Writes out text.,"

text
protected void text(Element elem)
             throws IOException,
                    BadLocationException
Writes out text.

Overrides:
text in class AbstractWriter
Parameters:
elem - an Element.
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
MinimalHTMLWriter,write(),void,Generates HTML output from a StyledDocument.,"

write
public void write()
           throws IOException,
                  BadLocationException
Generates HTML output
 from a StyledDocument.

Specified by:
write in class AbstractWriter
Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
MinimalHTMLWriter,writeAttributes(AttributeSet attr),protected void,"Writes out all the attributes for the following types: StyleConstants.ParagraphConstants, StyleConstants.CharacterConstants, StyleConstants.FontConstants, StyleConstants.ColorConstants.","

writeAttributes
protected void writeAttributes(AttributeSet attr)
                        throws IOException
Writes out all the attributes for the
 following types:
  StyleConstants.ParagraphConstants,
  StyleConstants.CharacterConstants,
  StyleConstants.FontConstants,
  StyleConstants.ColorConstants.
 The attribute name and value are separated by a colon.
 Each pair is separated by a semicolon.

Overrides:
writeAttributes in class AbstractWriter
Parameters:
attr - an AttributeSet.
Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeBody(),protected void,Iterates over the elements in the document and processes elements based on whether they are branch elements or leaf elements.,"

writeBody
protected void writeBody()
                  throws IOException,
                         BadLocationException
Iterates over the elements in the document
 and processes elements based on whether they are
 branch elements or leaf elements.  This method specially handles
 leaf elements that are text.

Throws:
IOException - on any I/O error
BadLocationException


"
MinimalHTMLWriter,writeComponent(Element elem),protected void,Responsible for handling Component Elements; deliberately unimplemented.,"

writeComponent
protected void writeComponent(Element elem)
                       throws IOException
Responsible for handling Component Elements;
 deliberately unimplemented.
 How this method is implemented is a matter of policy.

Throws:
IOException


"
MinimalHTMLWriter,"writeContent(Element elem, boolean needsIndenting)",protected void,Writes out the attribute set in an HTML-compliant manner.,"

writeContent
protected void writeContent(Element elem,
                            boolean needsIndenting)
                     throws IOException,
                            BadLocationException
Writes out the attribute set
 in an HTML-compliant manner.

Throws:
IOException - on any I/O error
BadLocationException - if pos represents an invalid
            location within the document.


"
MinimalHTMLWriter,writeEndParagraph(),protected void,Emits an end tag for a <p> tag.,"

writeEndParagraph
protected void writeEndParagraph()
                          throws IOException
Emits an end tag for a <p>
 tag.  Before writing out the tag, this method ensures
 that all other tags that have been opened are
 appropriately closed off.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeEndTag(String endTag),protected void,Writes out an end tag appropriately indented.,"

writeEndTag
protected void writeEndTag(String endTag)
                    throws IOException
Writes out an end tag appropriately
 indented.  Also decrements the indent level.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeHeader(),protected void,"Writes out the <head> and <style> tags, and then invokes writeStyles() to write out all the named styles as the content of the <style> tag.","

writeHeader
protected void writeHeader()
                    throws IOException
Writes out the <head> and <style>
 tags, and then invokes writeStyles() to write
 out all the named styles as the content of the
 <style> tag.  The content is surrounded by
 valid HTML comment markers to ensure that the
 document is viewable in applications/browsers
 that do not support the tag.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeHTMLTags(AttributeSet attr),protected void,"Generates bold <b>, italic <i>, and <u> tags for the text based on its attribute settings.","

writeHTMLTags
protected void writeHTMLTags(AttributeSet attr)
                      throws IOException
Generates
 bold <b>, italic <i>, and <u> tags for the
 text based on its attribute settings.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeImage(Element elem),protected void,Responsible for handling Icon Elements; deliberately unimplemented.,"

writeImage
protected void writeImage(Element elem)
                   throws IOException
Responsible for handling Icon Elements;
 deliberately unimplemented.  How to implement this method is
 an issue of policy.  For example, if you're generating
 an <img> tag, how should you
 represent the src attribute (the location of the image)?
 In certain cases it could be a URL, in others it could
 be read from a stream.

Parameters:
elem - element of type StyleConstants.IconElementName
Throws:
IOException


"
MinimalHTMLWriter,writeLeaf(Element elem),protected void,Responsible for writing out other non-text leaf elements.,"

writeLeaf
protected void writeLeaf(Element elem)
                  throws IOException
Responsible for writing out other non-text leaf
 elements.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeNonHTMLAttributes(AttributeSet attr),protected void,"Writes out the remaining character-level attributes (attributes other than bold, italic, and underline) in an HTML-compliant way.","

writeNonHTMLAttributes
protected void writeNonHTMLAttributes(AttributeSet attr)
                               throws IOException
Writes out the remaining
 character-level attributes (attributes other than bold,
 italic, and underline) in an HTML-compliant way.  Given that
 attributes such as font family and font size have no direct
 mapping to HTML tags, a <span> tag is generated and its
 style attribute is set to contain the list of remaining
 attributes just like inline styles.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeStartParagraph(Element elem),protected void,Emits the start tag for a paragraph.,"

writeStartParagraph
protected void writeStartParagraph(Element elem)
                            throws IOException
Emits the start tag for a paragraph. If
 the paragraph has a named style associated with it,
 then this method also generates a class attribute for the
 <p> tag and sets its value to be the name of the
 style.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeStartTag(String tag),protected void,Writes out a start tag appropriately indented.,"

writeStartTag
protected void writeStartTag(String tag)
                      throws IOException
Writes out a start tag appropriately
 indented.  Also increments the indent level.

Throws:
IOException - on any I/O error


"
MinimalHTMLWriter,writeStyles(),protected void,Writes out all the named styles as the content of the <style> tag.,"

writeStyles
protected void writeStyles()
                    throws IOException
Writes out all the named styles as the
 content of the <style> tag.

Throws:
IOException - on any I/O error


"
ObjectView,createComponent(),protected Component,Create the component.,"

createComponent
protected Component createComponent()
Create the component.  The classid is used
 as a specification of the classname, which
 we try to load.

Overrides:
createComponent in class ComponentView


"
Option,getAttributes(),AttributeSet,Fetch the attributes associated with this option.,"

getAttributes
public AttributeSet getAttributes()
Fetch the attributes associated with this option.

"
Option,getLabel(),String,Fetch the label associated with the option.,"

getLabel
public String getLabel()
Fetch the label associated with the option.

"
Option,getValue(),String,Convenience method to return the string associated with the value attribute.,"

getValue
public String getValue()
Convenience method to return the string associated
 with the value attribute.  If the
 value has not been specified, the label will be
 returned.

"
Option,isSelected(),boolean,Fetches the selection state associated with this option.,"

isSelected
public boolean isSelected()
Fetches the selection state associated with this option.

"
Option,setLabel(String label),void,Sets the label to be used for the option.,"

setLabel
public void setLabel(String label)
Sets the label to be used for the option.

"
Option,setSelection(boolean state),protected void,Sets the selected state.,"

setSelection
protected void setSelection(boolean state)
Sets the selected state.

"
Option,toString(),String,String representation is the label.,"

toString
public String toString()
String representation is the label.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ParagraphView,"calculateMinorAxisRequirements(int axis, SizeRequirements r)",protected SizeRequirements,Calculate the needs for the paragraph along the minor axis.,"

calculateMinorAxisRequirements
protected SizeRequirements calculateMinorAxisRequirements(int axis,
                                                          SizeRequirements r)
Calculate the needs for the paragraph along the minor axis.

 If size requirements are explicitly specified for the paragraph,
 use that requirements.  Otherwise, use the requirements of the
 superclass ParagraphView.
If the axis parameter is neither View.X_AXIS nor
 View.Y_AXIS, IllegalArgumentException is thrown.  If the
 r parameter is null, a new SizeRequirements
 object is created, otherwise the supplied SizeRequirements
 object is returned.

Overrides:
calculateMinorAxisRequirements in class ParagraphView
Parameters:
axis - the minor axis
r - the input SizeRequirements object
Returns:
the new or adjusted SizeRequirements object
Throws:
IllegalArgumentException - if the axis parameter is invalid
See Also:
SizeRequirements


"
ParagraphView,getAttributes(),AttributeSet,Fetches the attributes to use when rendering.,"

getAttributes
public AttributeSet getAttributes()
Fetches the attributes to use when rendering.  This is
 implemented to multiplex the attributes specified in the
 model with a StyleSheet.

Overrides:
getAttributes in class View


"
ParagraphView,getMaximumSpan(int axis),float,Determines the maximum span for this view along an axis.,"

getMaximumSpan
public float getMaximumSpan(int axis)
Determines the maximum span for this view along an
 axis.  Returns 0 if the view is not visible, otherwise
 it calls the superclass method ot get the maximum span.

Overrides:
getMaximumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or
  View.Y_AXIS
Returns:
the maximum span the view can be rendered into
See Also:
BoxView.getMaximumSpan(int)


"
ParagraphView,getMinimumSpan(int axis),float,Determines the minimum span for this view along an axis.,"

getMinimumSpan
public float getMinimumSpan(int axis)
Determines the minimum span for this view along an
 axis.  Returns 0 if the view is not visible, otherwise
 it calls the superclass method to get the minimum span.

Overrides:
getMinimumSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or
  View.Y_AXIS
Returns:
the minimum span the view can be rendered into
See Also:
BoxView.getMinimumSpan(int)


"
ParagraphView,getPreferredSpan(int axis),float,Determines the preferred span for this view.,"

getPreferredSpan
public float getPreferredSpan(int axis)
Determines the preferred span for this view.  Returns
 0 if the view is not visible, otherwise it calls the
 superclass method to get the preferred span.
 axis.

Overrides:
getPreferredSpan in class BoxView
Parameters:
axis - may be either View.X_AXIS or View.Y_AXIS
Returns:
the span the view would like to be rendered into;
           typically the view is told to render into the span
           that is returned, although there is no guarantee;
           the parent may choose to resize or break the view
See Also:
BoxView.getPreferredSpan(int)


"
ParagraphView,getStyleSheet(),protected StyleSheet,NULL,"

getStyleSheet
protected StyleSheet getStyleSheet()

"
ParagraphView,isVisible(),boolean,Indicates whether or not this view should be displayed.,"

isVisible
public boolean isVisible()
Indicates whether or not this view should be
 displayed.  If none of the children wish to be
 displayed and the only visible child is the
 break that ends the paragraph, the paragraph
 will not be considered visible.  Otherwise,
 it will be considered visible and return true.

Overrides:
isVisible in class View
Returns:
true if the paragraph should be displayed


"
ParagraphView,"paint(Graphics g, Shape a)",void,Renders using the given rendering surface and area on that surface.,"

paint
public void paint(Graphics g,
                  Shape a)
Renders using the given rendering surface and area on that
 surface.  This is implemented to delegate to the superclass
 after stashing the base coordinate for tab calculations.

Overrides:
paint in class ParagraphView
Parameters:
g - the rendering surface to use
a - the allocated region to render into
See Also:
View.paint(java.awt.Graphics, java.awt.Shape)


"
ParagraphView,setParent(View parent),void,Establishes the parent view for this view.,"

setParent
public void setParent(View parent)
Establishes the parent view for this view.  This is
 guaranteed to be called before any other methods if the
 parent view is functioning properly.
 
 This is implemented
 to forward to the superclass as well as call the
 setPropertiesFromAttributes
 method to set the paragraph properties from the css
 attributes.  The call is made at this time to ensure
 the ability to resolve upward through the parents
 view attributes.

Overrides:
setParent in class FlowView
Parameters:
parent - the new parent, or null if the view is
  being removed from a parent it was previously added
  to


"
ParagraphView,setPropertiesFromAttributes(),protected void,Sets up the paragraph from css attributes instead of the values found in StyleConstants (i.e.,"

setPropertiesFromAttributes
protected void setPropertiesFromAttributes()
Sets up the paragraph from css attributes instead of
 the values found in StyleConstants (i.e. which are used
 by the superclass).  Since

Overrides:
setPropertiesFromAttributes in class ParagraphView


"
StyleSheet,"addAttribute(AttributeSet old, Object key, Object value)",AttributeSet,"Adds an attribute to the given set, and returns the new representative set.","

addAttribute
public AttributeSet addAttribute(AttributeSet old,
                                 Object key,
                                 Object value)
Adds an attribute to the given set, and returns
 the new representative set.  This is reimplemented to
 convert StyleConstant attributes to CSS prior to forwarding
 to the superclass behavior.  The StyleConstants attribute
 has no corresponding CSS entry, the StyleConstants attribute
 is stored (but will likely be unused).

Specified by:
addAttribute in interface AbstractDocument.AttributeContext
Overrides:
addAttribute in class StyleContext
Parameters:
old - the old attribute set
key - the non-null attribute key
value - the attribute value
Returns:
the updated attribute set
See Also:
MutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)


"
StyleSheet,"addAttributes(AttributeSet old, AttributeSet attr)",AttributeSet,Adds a set of attributes to the element.,"

addAttributes
public AttributeSet addAttributes(AttributeSet old,
                                  AttributeSet attr)
Adds a set of attributes to the element.  If any of these attributes
 are StyleConstants attributes, they will be converted to CSS prior
 to forwarding to the superclass behavior.

Specified by:
addAttributes in interface AbstractDocument.AttributeContext
Overrides:
addAttributes in class StyleContext
Parameters:
old - the old attribute set
attr - the attributes to add
Returns:
the updated attribute set
See Also:
MutableAttributeSet.addAttribute(java.lang.Object, java.lang.Object)


"
StyleSheet,"addCSSAttribute(MutableAttributeSet attr, CSS.Attribute key, String value)",void,Adds a CSS attribute to the given set.,"

addCSSAttribute
public void addCSSAttribute(MutableAttributeSet attr,
                            CSS.Attribute key,
                            String value)
Adds a CSS attribute to the given set.

Since:
1.3


"
StyleSheet,"addCSSAttributeFromHTML(MutableAttributeSet attr, CSS.Attribute key, String value)",boolean,Adds a CSS attribute to the given set.,"

addCSSAttributeFromHTML
public boolean addCSSAttributeFromHTML(MutableAttributeSet attr,
                                       CSS.Attribute key,
                                       String value)
Adds a CSS attribute to the given set.

Since:
1.3


"
StyleSheet,addRule(String rule),void,Adds a set of rules to the sheet.,"

addRule
public void addRule(String rule)
Adds a set of rules to the sheet.  The rules are expected to
 be in valid CSS format.  Typically this would be called as
 a result of parsing a <style> tag.

"
StyleSheet,addStyleSheet(StyleSheet ss),void,Adds the rules from the StyleSheet ss to those of the receiver.,"

addStyleSheet
public void addStyleSheet(StyleSheet ss)
Adds the rules from the StyleSheet ss to those of
 the receiver. ss's rules will override the rules of
 any previously added style sheets. An added StyleSheet will never
 override the rules of the receiving style sheet.

Since:
1.3


"
StyleSheet,createLargeAttributeSet(AttributeSet a),protected MutableAttributeSet,Creates a large set of attributes that should trade off space for time.,"

createLargeAttributeSet
protected MutableAttributeSet createLargeAttributeSet(AttributeSet a)
Creates a large set of attributes that should trade off
 space for time.  This set will not be shared.  This is
 a hook for subclasses that want to alter the behavior
 of the larger attribute storage format (which is
 SimpleAttributeSet by default).   This can be reimplemented
 to return a MutableAttributeSet that provides some sort of
 attribute conversion.

Overrides:
createLargeAttributeSet in class StyleContext
Parameters:
a - The set of attributes to be represented in the
  the larger form.


"
StyleSheet,createSmallAttributeSet(AttributeSet a),protected StyleContext.SmallAttributeSet,Creates a compact set of attributes that might be shared.,"

createSmallAttributeSet
protected StyleContext.SmallAttributeSet createSmallAttributeSet(AttributeSet a)
Creates a compact set of attributes that might be shared.
 This is a hook for subclasses that want to alter the
 behavior of SmallAttributeSet.  This can be reimplemented
 to return an AttributeSet that provides some sort of
 attribute conversion.

Overrides:
createSmallAttributeSet in class StyleContext
Parameters:
a - The set of attributes to be represented in the
  the compact form.


"
StyleSheet,getBackground(AttributeSet a),Color,Takes a set of attributes and turn it into a background color specification.,"

getBackground
public Color getBackground(AttributeSet a)
Takes a set of attributes and turn it into a background color
 specification.  This might be used to specify things
 like brighter, more hue, etc.

Overrides:
getBackground in class StyleContext
Parameters:
a - the set of attributes
Returns:
the color


"
StyleSheet,getBase(),URL,Returns the base.,"

getBase
public URL getBase()
Returns the base.

Since:
1.3


"
StyleSheet,getBoxPainter(AttributeSet a),StyleSheet.BoxPainter,Fetches the box formatter to use for the given set of CSS attributes.,"

getBoxPainter
public StyleSheet.BoxPainter getBoxPainter(AttributeSet a)
Fetches the box formatter to use for the given set
 of CSS attributes.

"
StyleSheet,getDeclaration(String decl),AttributeSet,Translates a CSS declaration to an AttributeSet that represents the CSS declaration.,"

getDeclaration
public AttributeSet getDeclaration(String decl)
Translates a CSS declaration to an AttributeSet that represents
 the CSS declaration.  Typically this would be called as a
 result of encountering an HTML style attribute.

"
StyleSheet,getFont(AttributeSet a),Font,Fetches the font to use for the given set of attributes.,"

getFont
public Font getFont(AttributeSet a)
Fetches the font to use for the given set of attributes.

Overrides:
getFont in class StyleContext
Parameters:
a - the attribute set
Returns:
the font


"
StyleSheet,getForeground(AttributeSet a),Color,Takes a set of attributes and turn it into a foreground color specification.,"

getForeground
public Color getForeground(AttributeSet a)
Takes a set of attributes and turn it into a foreground color
 specification.  This might be used to specify things
 like brighter, more hue, etc.

Overrides:
getForeground in class StyleContext
Parameters:
a - the set of attributes
Returns:
the color


"
StyleSheet,getIndexOfSize(float pt),static int,NULL,"

getIndexOfSize
public static int getIndexOfSize(float pt)

"
StyleSheet,getListPainter(AttributeSet a),StyleSheet.ListPainter,Fetches the list formatter to use for the given set of CSS attributes.,"

getListPainter
public StyleSheet.ListPainter getListPainter(AttributeSet a)
Fetches the list formatter to use for the given set
 of CSS attributes.

"
StyleSheet,getPointSize(int index),float,"Returns the point size, given a size index.","

getPointSize
public float getPointSize(int index)
Returns the point size, given a size index.

"
StyleSheet,getPointSize(String size),float,"Given a string such as ""+2"", ""-2"", or ""2"", returns a point size value.","

getPointSize
public float getPointSize(String size)
Given a string such as ""+2"", ""-2"", or ""2"",
  returns a point size value.

"
StyleSheet,"getRule(HTML.Tag t, Element e)",Style,Fetches the style to use to render the given type of HTML tag.,"

getRule
public Style getRule(HTML.Tag t,
                     Element e)
Fetches the style to use to render the given type
 of HTML tag.  The element given is representing
 the tag and can be used to determine the nesting
 for situations where the attributes will differ
 if nesting inside of elements.

Parameters:
t - the type to translate to visual attributes
e - the element representing the tag; the element
  can be used to determine the nesting for situations where
  the attributes will differ if nested inside of other
  elements
Returns:
the set of CSS attributes to use to render
  the tag


"
StyleSheet,getRule(String selector),Style,Fetches the rule that best matches the selector given in string form.,"

getRule
public Style getRule(String selector)
Fetches the rule that best matches the selector given
 in string form. Where selector is a space separated
 String of the element names. For example, selector
 might be 'html body tr td''
 The attributes of the returned Style will change
 as rules are added and removed. That is if you to ask for a rule
 with a selector ""table p"" and a new rule was added with a selector
 of ""p"" the returned Style would include the new attributes from
 the rule ""p"".

"
StyleSheet,getStyleSheets(),StyleSheet[],Returns an array of the linked StyleSheets.,"

getStyleSheets
public StyleSheet[] getStyleSheets()
Returns an array of the linked StyleSheets. Will return null
 if there are no linked StyleSheets.

Since:
1.3


"
StyleSheet,getViewAttributes(View v),AttributeSet,Fetches a set of attributes to use in the view for displaying.,"

getViewAttributes
public AttributeSet getViewAttributes(View v)
Fetches a set of attributes to use in the view for
 displaying.  This is basically a set of attributes that
 can be used for View.getAttributes.

"
StyleSheet,importStyleSheet(URL url),void,Imports a style sheet from url.,"

importStyleSheet
public void importStyleSheet(URL url)
Imports a style sheet from url. The resulting rules
 are directly added to the receiver. If you do not want the rules
 to become part of the receiver, create a new StyleSheet and use
 addStyleSheet to link it in.

Since:
1.3


"
StyleSheet,"loadRules(Reader in, URL ref)",void,Loads a set of rules that have been specified in terms of CSS1 grammar.,"

loadRules
public void loadRules(Reader in,
                      URL ref)
               throws IOException
Loads a set of rules that have been specified in terms of
 CSS1 grammar.  If there are collisions with existing rules,
 the newly specified rule will win.

Parameters:
in - the stream to read the CSS grammar from
ref - the reference URL.  This value represents the
  location of the stream and may be null.  All relative
  URLs specified in the stream will be based upon this
  parameter.
Throws:
IOException


"
StyleSheet,"removeAttribute(AttributeSet old, Object key)",AttributeSet,Removes an attribute from the set.,"

removeAttribute
public AttributeSet removeAttribute(AttributeSet old,
                                    Object key)
Removes an attribute from the set.  If the attribute is a StyleConstants
 attribute, the request will be converted to a CSS attribute prior to
 forwarding to the superclass behavior.

Specified by:
removeAttribute in interface AbstractDocument.AttributeContext
Overrides:
removeAttribute in class StyleContext
Parameters:
old - the old set of attributes
key - the non-null attribute name
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttribute(java.lang.Object)


"
StyleSheet,"removeAttributes(AttributeSet old, AttributeSet attrs)",AttributeSet,Removes a set of attributes.,"

removeAttributes
public AttributeSet removeAttributes(AttributeSet old,
                                     AttributeSet attrs)
Removes a set of attributes. If any of the attributes
 is a StyleConstants attribute, the request will be converted to a CSS
 attribute prior to forwarding to the superclass behavior.

Specified by:
removeAttributes in interface AbstractDocument.AttributeContext
Overrides:
removeAttributes in class StyleContext
Parameters:
old - the old attribute set
attrs - the attributes
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttributes(java.util.Enumeration<?>)


"
StyleSheet,"removeAttributes(AttributeSet old, Enumeration<?> names)",AttributeSet,Removes a set of attributes for the element.,"

removeAttributes
public AttributeSet removeAttributes(AttributeSet old,
                                     Enumeration<?> names)
Removes a set of attributes for the element.  If any of the attributes
 is a StyleConstants attribute, the request will be converted to a CSS
 attribute prior to forwarding to the superclass behavior.

Specified by:
removeAttributes in interface AbstractDocument.AttributeContext
Overrides:
removeAttributes in class StyleContext
Parameters:
old - the old attribute set
names - the attribute names
Returns:
the updated attribute set
See Also:
MutableAttributeSet.removeAttributes(java.util.Enumeration<?>)


"
StyleSheet,removeStyle(String nm),void,Removes a named style previously added to the document.,"

removeStyle
public void removeStyle(String nm)
Removes a named style previously added to the document.

Overrides:
removeStyle in class StyleContext
Parameters:
nm - the name of the style to remove


"
StyleSheet,removeStyleSheet(StyleSheet ss),void,Removes the StyleSheet ss from those of the receiver.,"

removeStyleSheet
public void removeStyleSheet(StyleSheet ss)
Removes the StyleSheet ss from those of the receiver.

Since:
1.3


"
StyleSheet,setBase(URL base),void,Sets the base.,"

setBase
public void setBase(URL base)
Sets the base. All import statements that are relative, will be
 relative to base.

Since:
1.3


"
StyleSheet,setBaseFontSize(int sz),void,"Sets the base font size, with valid values between 1 and 7.","

setBaseFontSize
public void setBaseFontSize(int sz)
Sets the base font size, with valid values between 1 and 7.

"
StyleSheet,setBaseFontSize(String size),void,Sets the base font size from the passed in String.,"

setBaseFontSize
public void setBaseFontSize(String size)
Sets the base font size from the passed in String. The string
 can either identify a specific font size, with legal values between
 1 and 7, or identify a relative font size such as +1 or -2.

"
StyleSheet,stringToColor(String string),Color,"Converts a color string such as ""RED"" or ""#NNNNNN"" to a Color.","

stringToColor
public Color stringToColor(String string)
Converts a color string such as ""RED"" or ""#NNNNNN"" to a Color.
 Note: This will only convert the HTML3.2 color strings
       or a string of length 7;
       otherwise, it will return null.

"
StyleSheet,translateHTMLToCSS(AttributeSet htmlAttrSet),AttributeSet,Converts a set of HTML attributes to an equivalent set of CSS attributes.,"

translateHTMLToCSS
public AttributeSet translateHTMLToCSS(AttributeSet htmlAttrSet)
Converts a set of HTML attributes to an equivalent
 set of CSS attributes.

Parameters:
htmlAttrSet - AttributeSet containing the HTML attributes.


"
StyleSheet.BoxPainter,"getInset(int side, View v)",float,"Fetches the inset needed on a given side to account for the margin, border, and padding.","

getInset
public float getInset(int side,
                      View v)
Fetches the inset needed on a given side to
 account for the margin, border, and padding.

Parameters:
side - The size of the box to fetch the
  inset for.  This can be View.TOP,
  View.LEFT, View.BOTTOM, or View.RIGHT.
v - the view making the request.  This is
  used to get the AttributeSet, and may be used to
  resolve percentage arguments.
Throws:
IllegalArgumentException - for an invalid direction


"
StyleSheet.BoxPainter,"paint(Graphics g, float x, float y, float w, float h, View v)",void,Paints the CSS box according to the attributes given.,"

paint
public void paint(Graphics g,
                  float x,
                  float y,
                  float w,
                  float h,
                  View v)
Paints the CSS box according to the attributes
 given.  This should paint the border, padding,
 and background.

Parameters:
g - the rendering surface.
x - the x coordinate of the allocated area to
  render into.
y - the y coordinate of the allocated area to
  render into.
w - the width of the allocated area to render into.
h - the height of the allocated area to render into.
v - the view making the request.  This is
  used to get the AttributeSet, and may be used to
  resolve percentage arguments.


"
StyleSheet.ListPainter,"paint(Graphics g, float x, float y, float w, float h, View v, int item)",void,Paints the CSS list decoration according to the attributes given.,"

paint
public void paint(Graphics g,
                  float x,
                  float y,
                  float w,
                  float h,
                  View v,
                  int item)
Paints the CSS list decoration according to the
 attributes given.

Parameters:
g - the rendering surface.
x - the x coordinate of the list item allocation
y - the y coordinate of the list item allocation
w - the width of the list item allocation
h - the height of the list item allocation
v - the allocated area to paint into.
item - which list item is being painted.  This
  is a number greater than or equal to 0.


"
