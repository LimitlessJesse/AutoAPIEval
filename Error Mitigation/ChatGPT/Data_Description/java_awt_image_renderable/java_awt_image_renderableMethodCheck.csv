Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,ParameterBlock,1,void addSource(Object source),False,,NULL
0,ParameterBlock,2,Object getSource(int index),True,,"

getSource
public Object getSource(int index)
Returns a source as a general Object.  The caller must cast it into
 an appropriate type.

Parameters:
index - the index of the source to be returned.
Returns:
an Object that represents the source located
         at the specified index in the sources
Vector.
See Also:
setSource(Object, int)


"
0,ParameterBlock,3,void add(Object param),False,,NULL
0,ParameterBlock,4,Object getParameter(int index),False,,NULL
0,ParameterBlock,5,int size(),False,,NULL
1,RenderableImageOp,1,RenderedImage createRendering(RenderContext renderContext),True,,"

createRendering
public RenderedImage createRendering(RenderContext renderContext)
Creates a RenderedImage which represents this
 RenderableImageOp (including its Renderable sources) rendered
 according to the given RenderContext.

  This method supports chaining of either Renderable or
 RenderedImage operations.  If sources in
 the ParameterBlock used to construct the RenderableImageOp are
 RenderableImages, then a three step process is followed:

 
 mapRenderContext() is called on the associated CRIF for
 each RenderableImage source;
  createRendering() is called on each of the RenderableImage sources
 using the backwards-mapped RenderContexts obtained in step 1,
 resulting in a rendering of each source;
  ContextualRenderedImageFactory.create() is called
 with a new ParameterBlock containing the parameters of
 the RenderableImageOp and the RenderedImages that were created by the
 createRendering() calls.
 
 If the elements of the source Vector of
 the ParameterBlock used to construct the RenderableImageOp are
 instances of RenderedImage, then the CRIF.create() method is
 called immediately using the original ParameterBlock.
 This provides a basis case for the recursion.

  The created RenderedImage may have a property identified
 by the String HINTS_OBSERVED to indicate which RenderingHints
 (from the RenderContext) were used to create the image.
 In addition any RenderedImages
 that are obtained via the getSources() method on the created
 RenderedImage may have such a property.

Specified by:
createRendering in interface RenderableImage
Parameters:
renderContext - The RenderContext to use to perform the rendering.
Returns:
a RenderedImage containing the desired output image.


"
1,RenderableImageOp,2,Rectangle2D getBounds2D(),False,,NULL
1,RenderableImageOp,3,"RenderedImage createScaledRendering(int w, int h, RenderingHints hints)",True,,"

createScaledRendering
public RenderedImage createScaledRendering(int w,
                                           int h,
                                           RenderingHints hints)
Creates a RenderedImage instance of this image with width w, and
 height h in pixels.  The RenderContext is built automatically
 with an appropriate usr2dev transform and an area of interest
 of the full image.  All the rendering hints come from hints
 passed in.

  If w == 0, it will be taken to equal
 Math.round(h*(getWidth()/getHeight())).
 Similarly, if h == 0, it will be taken to equal
 Math.round(w*(getHeight()/getWidth())).  One of
 w or h must be non-zero or else an IllegalArgumentException
 will be thrown.

  The created RenderedImage may have a property identified
 by the String HINTS_OBSERVED to indicate which RenderingHints
 were used to create the image.  In addition any RenderedImages
 that are obtained via the getSources() method on the created
 RenderedImage may have such a property.

Specified by:
createScaledRendering in interface RenderableImage
Parameters:
w - the width of rendered image in pixels, or 0.
h - the height of rendered image in pixels, or 0.
hints - a RenderingHints object containing hints.
Returns:
a RenderedImage containing the rendered data.


"
1,RenderableImageOp,4,RenderedImage createDefaultRendering(),True,,"

createDefaultRendering
public RenderedImage createDefaultRendering()
Gets a RenderedImage instance of this image with a default
 width and height in pixels.  The RenderContext is built
 automatically with an appropriate usr2dev transform and an area
 of interest of the full image.  All the rendering hints come
 from hints passed in.  Implementors of this interface must be
 sure that there is a defined default width and height.

Specified by:
createDefaultRendering in interface RenderableImage
Returns:
a RenderedImage containing the rendered data.


"
1,RenderableImageOp,5,"RenderedImage createRendering(RenderContext renderContext, ColorModel destCM, RenderingHints hints)",False,,NULL
2,RenderableImageProducer,1,void startProduction(ImageConsumer ic),True,,"

startProduction
public void startProduction(ImageConsumer ic)
Adds an ImageConsumer to the list of consumers interested in
 data for this image, and immediately starts delivery of the
 image data through the ImageConsumer interface.

Specified by:
startProduction in interface ImageProducer
Parameters:
ic - the ImageConsumer to be added to the list of consumers.
See Also:
ImageProducer.addConsumer(java.awt.image.ImageConsumer)


"
2,RenderableImageProducer,2,void requestTopDownLeftRightResend(ImageConsumer ic),True,,"

requestTopDownLeftRightResend
public void requestTopDownLeftRightResend(ImageConsumer ic)
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.

Specified by:
requestTopDownLeftRightResend in interface ImageProducer
Parameters:
ic - the ImageConsumer requesting the resend.
See Also:
ImageConsumer.setHints(int)


"
2,RenderableImageProducer,3,void removeConsumer(ImageConsumer ic),True,,"

removeConsumer
public void removeConsumer(ImageConsumer ic)
Remove an ImageConsumer from the list of consumers interested in
 data for this image.

Specified by:
removeConsumer in interface ImageProducer
Parameters:
ic - the ImageConsumer to be removed.


"
2,RenderableImageProducer,4,"void startProduction(ImageConsumer ic, ImageProducer producer)",False,,NULL
2,RenderableImageProducer,5,"void requestTopDownLeftRightResend(ImageConsumer ic, ImageProducer producer)",False,,NULL
3,RenderContext,1,AffineTransform getTransform(),True,,"

getTransform
public AffineTransform getTransform()
Gets the current user-to-device AffineTransform.

Returns:
a reference to the current AffineTransform.
See Also:
setTransform(AffineTransform)


"
3,RenderContext,2,RenderingHints getRenderingHints(),True,,"

getRenderingHints
public RenderingHints getRenderingHints()
Gets the rendering hints of this RenderContext.

Returns:
a RenderingHints object that represents
 the rendering hints of this RenderContext.
See Also:
setRenderingHints(RenderingHints)


"
3,RenderContext,3,ColorModel getColorModel(),False,,NULL
3,RenderContext,4,"WritableRaster getRaster(int x, int y, int w, int h)",False,,NULL
3,RenderContext,5,RenderingHints getRenderingHints(),True,,"

getRenderingHints
public RenderingHints getRenderingHints()
Gets the rendering hints of this RenderContext.

Returns:
a RenderingHints object that represents
 the rendering hints of this RenderContext.
See Also:
setRenderingHints(RenderingHints)


"
