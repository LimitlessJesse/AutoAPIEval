Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DiagnosticCollector,1,List<Diagnostic<? extends JavaFileObject>> getDiagnostics(),False,,NULL
0,DiagnosticCollector,2,void report(),False,,NULL
0,DiagnosticCollector,3,void reset(),False,,NULL
0,DiagnosticCollector,4,int getCount(),False,,NULL
0,DiagnosticCollector,5,boolean isEmpty(),False,,NULL
1,ForwardingFileObject,1,CharSequence getCharContent(boolean ignoreEncodingErrors),True,,"

getCharContent
public CharSequence getCharContent(boolean ignoreEncodingErrors)
                            throws IOException
Description copied from interface: FileObject
Gets the character content of this file object, if available.
 Any byte that cannot be decoded will be replaced by the default
 translation character.  In addition, a diagnostic may be
 reported unless ignoreEncodingErrors is true.

Specified by:
getCharContent in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a CharSequence if available; null otherwise
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
1,ForwardingFileObject,2,Writer openWriter(),True,,"

openWriter
public Writer openWriter()
                  throws IOException
Description copied from interface: FileObject
Gets a Writer for this file object.

Specified by:
openWriter in interface FileObject
Returns:
a Writer
Throws:
IllegalStateException - if this file object was
 opened for reading and does not support writing
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
1,ForwardingFileObject,3,OutputStream openOutputStream(),True,,"

openOutputStream
public OutputStream openOutputStream()
                              throws IOException
Description copied from interface: FileObject
Gets an OutputStream for this file object.

Specified by:
openOutputStream in interface FileObject
Returns:
an OutputStream
Throws:
IllegalStateException - if this file object was
 opened for reading and does not support writing
UnsupportedOperationException - if this kind of
 file object does not support byte access
IOException - if an I/O error occurred


"
1,ForwardingFileObject,4,InputStream openInputStream(),True,,"

openInputStream
public InputStream openInputStream()
                            throws IOException
Description copied from interface: FileObject
Gets an InputStream for this file object.

Specified by:
openInputStream in interface FileObject
Returns:
an InputStream
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of file
 object does not support byte access
IOException - if an I/O error occurred


"
1,ForwardingFileObject,5,boolean delete(),True,,"

delete
public boolean delete()
Description copied from interface: FileObject
Deletes this file object.  In case of errors, returns false.

Specified by:
delete in interface FileObject
Returns:
true if and only if this file object is successfully
 deleted; false otherwise


"
2,ForwardingJavaFileManager,1,void close(),True,,"

close
public void close()
           throws IOException
Description copied from interface: JavaFileManager
Releases any resources opened by this file manager directly or
 indirectly.  This might render this file manager useless and
 the effect of subsequent calls to methods on this object or any
 objects obtained through this object is undefined unless
 explicitly allowed.  However, closing a file manager which has
 already been closed has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface JavaFileManager
Throws:
IOException - if an I/O error occurred
See Also:
JavaFileManager.flush()


"
2,ForwardingJavaFileManager,2,"Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse)",False,,NULL
2,ForwardingJavaFileManager,3,void flush(),True,,"

flush
public void flush()
           throws IOException
Description copied from interface: JavaFileManager
Flushes any resources opened for output by this file manager
 directly or indirectly.  Flushing a closed file manager has no
 effect.

Specified by:
flush in interface Flushable
Specified by:
flush in interface JavaFileManager
Throws:
IOException - if an I/O error occurred
See Also:
JavaFileManager.close()


"
2,ForwardingJavaFileManager,4,"void handleOption(String current, Iterator<String> remaining)",False,,NULL
2,ForwardingJavaFileManager,5,"JavaFileObject getJavaFileForOutput(Location location, String className, JavaFileObject.Kind kind, FileObject sibling)",False,,NULL
3,ForwardingJavaFileObject,1,CharSequence getCharContent(boolean ignoreEncodingErrors),False,,NULL
3,ForwardingJavaFileObject,2,Writer openWriter(),False,,NULL
3,ForwardingJavaFileObject,3,OutputStream openOutputStream(),False,,NULL
3,ForwardingJavaFileObject,4,Reader openReader(boolean ignoreEncodingErrors),False,,NULL
3,ForwardingJavaFileObject,5,InputStream openInputStream(),False,,NULL
4,SimpleJavaFileObject,1,CharSequence getCharContent(boolean ignoreEncodingErrors),True,,"

getCharContent
public CharSequence getCharContent(boolean ignoreEncodingErrors)
                            throws IOException
This implementation always throws UnsupportedOperationException.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
getCharContent in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a CharSequence if available; null otherwise
Throws:
IOException - if an I/O error occurred


"
4,SimpleJavaFileObject,2,Kind getKind(),False,,NULL
4,SimpleJavaFileObject,3,"boolean isNameCompatible(String simpleName, Kind kind)",False,,NULL
4,SimpleJavaFileObject,4,boolean delete(),True,,"

delete
public boolean delete()
This implementation does nothing.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
delete in interface FileObject
Returns:
false


"
4,SimpleJavaFileObject,5,URI toUri(),True,,"

toUri
public URI toUri()
Description copied from interface: FileObject
Returns a URI identifying this file object.

Specified by:
toUri in interface FileObject
Returns:
a URI


"
5,ToolProvider,1,Tool getSystemJavaCompiler(),False,,NULL
5,ToolProvider,2,Iterable<JavaCompiler> getSystemJavaCompilers(),False,,NULL
5,ToolProvider,3,Tool getSystemDocumentationTool(),False,,NULL
5,ToolProvider,4,Iterable<DocumentationTool> getSystemDocumentationTools(),False,,NULL
5,ToolProvider,5,"Tool getSystemFileManager(JavaCompiler compiler, DiagnosticListener<? super JavaFileObject> diagnosticListener, Locale locale, Charset charset)",False,,NULL
