ClassName,Method,Return Type,Description,Full Description
DiagnosticCollector,getDiagnostics(),List<Diagnostic<? extends S>>,Gets a list view of diagnostics collected by this object.,"

getDiagnostics
public List<Diagnostic<? extends S>> getDiagnostics()
Gets a list view of diagnostics collected by this object.

Returns:
a list view of diagnostics


"
DiagnosticCollector,report(Diagnostic<? extends S> diagnostic),void,Invoked when a problem is found.,"

report
public void report(Diagnostic<? extends S> diagnostic)
Description copied from interface: DiagnosticListener
Invoked when a problem is found.

Specified by:
report in interface DiagnosticListener<S>
Parameters:
diagnostic - a diagnostic representing the problem that
 was found


"
ForwardingFileObject,delete(),boolean,Deletes this file object.,"

delete
public boolean delete()
Description copied from interface: FileObject
Deletes this file object.  In case of errors, returns false.

Specified by:
delete in interface FileObject
Returns:
true if and only if this file object is successfully
 deleted; false otherwise


"
ForwardingFileObject,getCharContent(boolean ignoreEncodingErrors),CharSequence,"Gets the character content of this file object, if available.","

getCharContent
public CharSequence getCharContent(boolean ignoreEncodingErrors)
                            throws IOException
Description copied from interface: FileObject
Gets the character content of this file object, if available.
 Any byte that cannot be decoded will be replaced by the default
 translation character.  In addition, a diagnostic may be
 reported unless ignoreEncodingErrors is true.

Specified by:
getCharContent in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a CharSequence if available; null otherwise
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
ForwardingFileObject,getLastModified(),long,Gets the time this file object was last modified.,"

getLastModified
public long getLastModified()
Description copied from interface: FileObject
Gets the time this file object was last modified.  The time is
 measured in milliseconds since the epoch (00:00:00 GMT, January
 1, 1970).

Specified by:
getLastModified in interface FileObject
Returns:
the time this file object was last modified; or 0 if
 the file object does not exist, if an I/O error occurred, or if
 the operation is not supported


"
ForwardingFileObject,getName(),String,Gets a user-friendly name for this file object.,"

getName
public String getName()
Description copied from interface: FileObject
Gets a user-friendly name for this file object.  The exact
 value returned is not specified but implementations should take
 care to preserve names as given by the user.  For example, if
 the user writes the filename ""BobsApp\Test.java"" on
 the command line, this method should return ""BobsApp\Test.java"" whereas the toUri
 method might return file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java.

Specified by:
getName in interface FileObject
Returns:
a user-friendly name


"
ForwardingFileObject,openInputStream(),InputStream,Gets an InputStream for this file object.,"

openInputStream
public InputStream openInputStream()
                            throws IOException
Description copied from interface: FileObject
Gets an InputStream for this file object.

Specified by:
openInputStream in interface FileObject
Returns:
an InputStream
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of file
 object does not support byte access
IOException - if an I/O error occurred


"
ForwardingFileObject,openOutputStream(),OutputStream,Gets an OutputStream for this file object.,"

openOutputStream
public OutputStream openOutputStream()
                              throws IOException
Description copied from interface: FileObject
Gets an OutputStream for this file object.

Specified by:
openOutputStream in interface FileObject
Returns:
an OutputStream
Throws:
IllegalStateException - if this file object was
 opened for reading and does not support writing
UnsupportedOperationException - if this kind of
 file object does not support byte access
IOException - if an I/O error occurred


"
ForwardingFileObject,openReader(boolean ignoreEncodingErrors),Reader,Gets a reader for this object.,"

openReader
public Reader openReader(boolean ignoreEncodingErrors)
                  throws IOException
Description copied from interface: FileObject
Gets a reader for this object.  The returned reader will
 replace bytes that cannot be decoded with the default
 translation character.  In addition, the reader may report a
 diagnostic unless ignoreEncodingErrors is true.

Specified by:
openReader in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a Reader
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
ForwardingFileObject,openWriter(),Writer,Gets a Writer for this file object.,"

openWriter
public Writer openWriter()
                  throws IOException
Description copied from interface: FileObject
Gets a Writer for this file object.

Specified by:
openWriter in interface FileObject
Returns:
a Writer
Throws:
IllegalStateException - if this file object was
 opened for reading and does not support writing
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
ForwardingFileObject,toUri(),URI,Returns a URI identifying this file object.,"

toUri
public URI toUri()
Description copied from interface: FileObject
Returns a URI identifying this file object.

Specified by:
toUri in interface FileObject
Returns:
a URI


"
ForwardingJavaFileManager,close(),void,Releases any resources opened by this file manager directly or indirectly.,"

close
public void close()
           throws IOException
Description copied from interface: JavaFileManager
Releases any resources opened by this file manager directly or
 indirectly.  This might render this file manager useless and
 the effect of subsequent calls to methods on this object or any
 objects obtained through this object is undefined unless
 explicitly allowed.  However, closing a file manager which has
 already been closed has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface JavaFileManager
Throws:
IOException - if an I/O error occurred
See Also:
JavaFileManager.flush()


"
ForwardingJavaFileManager,flush(),void,Flushes any resources opened for output by this file manager directly or indirectly.,"

flush
public void flush()
           throws IOException
Description copied from interface: JavaFileManager
Flushes any resources opened for output by this file manager
 directly or indirectly.  Flushing a closed file manager has no
 effect.

Specified by:
flush in interface Flushable
Specified by:
flush in interface JavaFileManager
Throws:
IOException - if an I/O error occurred
See Also:
JavaFileManager.close()


"
ForwardingJavaFileManager,getClassLoader(JavaFileManager.Location location),ClassLoader,Gets a class loader for loading plug-ins from the given location.,"

getClassLoader
public ClassLoader getClassLoader(JavaFileManager.Location location)
Description copied from interface: JavaFileManager
Gets a class loader for loading plug-ins from the given
 location.  For example, to load annotation processors, a
 compiler will request a class loader for the ANNOTATION_PROCESSOR_PATH location.

Specified by:
getClassLoader in interface JavaFileManager
Parameters:
location - a location
Returns:
a class loader for the given location; or null
 if loading plug-ins from the given location is disabled or if
 the location is not known
Throws:
SecurityException - if a class loader can not be created
 in the current security context
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened


"
ForwardingJavaFileManager,"getFileForInput(JavaFileManager.Location location, String packageName, String relativeName)",FileObject,Gets a file object for input representing the specified relative name in the specified package in the given location.,"

getFileForInput
public FileObject getFileForInput(JavaFileManager.Location location,
                                  String packageName,
                                  String relativeName)
                           throws IOException
Description copied from interface: JavaFileManager
Gets a file object for input
 representing the specified relative
 name in the specified package in the given location.

 If the returned object represents a source or class file, it must be an instance
 of JavaFileObject.

 Informally, the file object returned by this method is
 located in the concatenation of the location, package name, and
 relative name.  For example, to locate the properties file
 ""resources/compiler.properties"" in the package
 ""com.sun.tools.javac"" in the SOURCE_PATH location, this method
 might be called like so:

 getFileForInput(SOURCE_PATH, ""com.sun.tools.javac"", ""resources/compiler.properties"");
If the call was executed on Windows, with SOURCE_PATH set to
 ""C:\Documents and Settings\UncleBob\src\share\classes"",
 a valid result would be a file object representing the file
 ""C:\Documents and Settings\UncleBob\src\share\classes\com\sun\tools\javac\resources\compiler.properties"".

Specified by:
getFileForInput in interface JavaFileManager
Parameters:
location - a location
packageName - a package name
relativeName - a relative name
Returns:
a file object, might return null if the file
 does not exist
Throws:
IllegalArgumentException - if the location is not known
 to this file manager and the file manager does not support
 unknown locations, or if relativeName is not valid
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened
IOException - if an I/O error occurred, or if JavaFileManager.close() has been called and this file manager cannot be
 reopened


"
ForwardingJavaFileManager,"getFileForOutput(JavaFileManager.Location location, String packageName, String relativeName, FileObject sibling)",FileObject,Gets a file object for output representing the specified relative name in the specified package in the given location.,"

getFileForOutput
public FileObject getFileForOutput(JavaFileManager.Location location,
                                   String packageName,
                                   String relativeName,
                                   FileObject sibling)
                            throws IOException
Description copied from interface: JavaFileManager
Gets a file object for output
 representing the specified relative
 name in the specified package in the given location.

 Optionally, this file manager might consider the sibling as
 a hint for where to place the output.  The exact semantics of
 this hint is unspecified.  The JDK compiler, javac, for
 example, will place class files in the same directories as
 originating source files unless a class file output directory
 is provided.  To facilitate this behavior, javac might provide
 the originating source file as sibling when calling this
 method.

 If the returned object represents a source or class file, it must be an instance
 of JavaFileObject.

 Informally, the file object returned by this method is
 located in the concatenation of the location, package name, and
 relative name or next to the sibling argument.  See getFileForInput for an example.

Specified by:
getFileForOutput in interface JavaFileManager
Parameters:
location - a location
packageName - a package name
relativeName - a relative name
sibling - a file object to be used as hint for placement;
 might be null
Returns:
a file object
Throws:
IllegalArgumentException - if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if relativeName is not valid
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened
IOException - if an I/O error occurred, or if JavaFileManager.close() has been called and this file manager cannot be
 reopened


"
ForwardingJavaFileManager,"getJavaFileForInput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind)",JavaFileObject,Gets a file object for input representing the specified class of the specified kind in the given location.,"

getJavaFileForInput
public JavaFileObject getJavaFileForInput(JavaFileManager.Location location,
                                          String className,
                                          JavaFileObject.Kind kind)
                                   throws IOException
Description copied from interface: JavaFileManager
Gets a file object for input
 representing the specified class of the specified kind in the
 given location.

Specified by:
getJavaFileForInput in interface JavaFileManager
Parameters:
location - a location
className - the name of a class
kind - the kind of file, must be one of SOURCE or CLASS
Returns:
a file object, might return null if the
 file does not exist
Throws:
IllegalArgumentException - if the location is not known
 to this file manager and the file manager does not support
 unknown locations, or if the kind is not valid
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened
IOException - if an I/O error occurred, or if JavaFileManager.close() has been called and this file manager cannot be
 reopened


"
ForwardingJavaFileManager,"getJavaFileForOutput(JavaFileManager.Location location, String className, JavaFileObject.Kind kind, FileObject sibling)",JavaFileObject,Gets a file object for output representing the specified class of the specified kind in the given location.,"

getJavaFileForOutput
public JavaFileObject getJavaFileForOutput(JavaFileManager.Location location,
                                           String className,
                                           JavaFileObject.Kind kind,
                                           FileObject sibling)
                                    throws IOException
Description copied from interface: JavaFileManager
Gets a file object for output
 representing the specified class of the specified kind in the
 given location.

 Optionally, this file manager might consider the sibling as
 a hint for where to place the output.  The exact semantics of
 this hint is unspecified.  The JDK compiler, javac, for
 example, will place class files in the same directories as
 originating source files unless a class file output directory
 is provided.  To facilitate this behavior, javac might provide
 the originating source file as sibling when calling this
 method.

Specified by:
getJavaFileForOutput in interface JavaFileManager
Parameters:
location - a location
className - the name of a class
kind - the kind of file, must be one of SOURCE or CLASS
sibling - a file object to be used as hint for placement;
 might be null
Returns:
a file object for output
Throws:
IllegalArgumentException - if sibling is not known to
 this file manager, or if the location is not known to this file
 manager and the file manager does not support unknown
 locations, or if the kind is not valid
IllegalStateException - JavaFileManager.close() has been called
 and this file manager cannot be reopened
IOException - if an I/O error occurred, or if JavaFileManager.close() has been called and this file manager cannot be
 reopened


"
ForwardingJavaFileManager,"handleOption(String current, Iterator<String> remaining)",boolean,Handles one option.,"

handleOption
public boolean handleOption(String current,
                            Iterator<String> remaining)
Description copied from interface: JavaFileManager
Handles one option.  If current is an option to this
 file manager it will consume any arguments to that option from
 remaining and return true, otherwise return false.

Specified by:
handleOption in interface JavaFileManager
Parameters:
current - current option
remaining - remaining options
Returns:
true if this option was handled by this file manager,
 false otherwise
Throws:
IllegalArgumentException - if this option to this file
 manager is used incorrectly
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened


"
ForwardingJavaFileManager,hasLocation(JavaFileManager.Location location),boolean,Determines if a location is known to this file manager.,"

hasLocation
public boolean hasLocation(JavaFileManager.Location location)
Description copied from interface: JavaFileManager
Determines if a location is known to this file manager.

Specified by:
hasLocation in interface JavaFileManager
Parameters:
location - a location
Returns:
true if the location is known


"
ForwardingJavaFileManager,"inferBinaryName(JavaFileManager.Location location, JavaFileObject file)",String,Infers a binary name of a file object based on a location.,"

inferBinaryName
public String inferBinaryName(JavaFileManager.Location location,
                              JavaFileObject file)
Description copied from interface: JavaFileManager
Infers a binary name of a file object based on a location.  The
 binary name returned might not be a valid binary name according to
 The Java™ Language Specification.

Specified by:
inferBinaryName in interface JavaFileManager
Parameters:
location - a location
file - a file object
Returns:
a binary name or null the file object is not
 found in the given location
Throws:
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened


"
ForwardingJavaFileManager,"isSameFile(FileObject a, FileObject b)",boolean,Compares two file objects and return true if they represent the same underlying object.,"

isSameFile
public boolean isSameFile(FileObject a,
                          FileObject b)
Description copied from interface: JavaFileManager
Compares two file objects and return true if they represent the
 same underlying object.

Specified by:
isSameFile in interface JavaFileManager
Parameters:
a - a file object
b - a file object
Returns:
true if the given file objects represent the same
 underlying object
Throws:
IllegalArgumentException - if either of the arguments
 were created with another file manager and this file manager
 does not support foreign file objects


"
ForwardingJavaFileManager,isSupportedOption(String option),int,"Determines if the given option is supported and if so, the number of arguments the option takes.","

isSupportedOption
public int isSupportedOption(String option)
Description copied from interface: OptionChecker
Determines if the given option is supported and if so, the
 number of arguments the option takes.

Specified by:
isSupportedOption in interface OptionChecker
Parameters:
option - an option
Returns:
the number of arguments the given option takes or -1 if
 the option is not supported


"
ForwardingJavaFileManager,"list(JavaFileManager.Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse)",Iterable<JavaFileObject>,Lists all file objects matching the given criteria in the given location.,"

list
public Iterable<JavaFileObject> list(JavaFileManager.Location location,
                                     String packageName,
                                     Set<JavaFileObject.Kind> kinds,
                                     boolean recurse)
                              throws IOException
Description copied from interface: JavaFileManager
Lists all file objects matching the given criteria in the given
 location.  List file objects in ""subpackages"" if recurse is
 true.

 Note: even if the given location is unknown to this file
 manager, it may not return null.  Also, an unknown
 location may not cause an exception.

Specified by:
list in interface JavaFileManager
Parameters:
location - a location
packageName - a package name
kinds - return objects only of these kinds
recurse - if true include ""subpackages""
Returns:
an Iterable of file objects matching the given criteria
Throws:
IOException - if an I/O error occurred, or if JavaFileManager.close() has been called and this file manager cannot be
 reopened
IllegalStateException - if JavaFileManager.close() has been called
 and this file manager cannot be reopened


"
ForwardingJavaFileObject,getAccessLevel(),Modifier,Provides a hint about the access level of the class represented by this file object.,"

getAccessLevel
public Modifier getAccessLevel()
Description copied from interface: JavaFileObject
Provides a hint about the access level of the class represented
 by this file object.  If the access level is not known or if
 this file object does not represent a class file this method
 returns null.

Specified by:
getAccessLevel in interface JavaFileObject
Returns:
the access level


"
ForwardingJavaFileObject,getKind(),JavaFileObject.Kind,Gets the kind of this file object.,"

getKind
public JavaFileObject.Kind getKind()
Description copied from interface: JavaFileObject
Gets the kind of this file object.

Specified by:
getKind in interface JavaFileObject
Returns:
the kind


"
ForwardingJavaFileObject,getNestingKind(),NestingKind,Provides a hint about the nesting level of the class represented by this file object.,"

getNestingKind
public NestingKind getNestingKind()
Description copied from interface: JavaFileObject
Provides a hint about the nesting level of the class
 represented by this file object.  This method may return
 NestingKind.MEMBER to mean
 NestingKind.LOCAL or NestingKind.ANONYMOUS.
 If the nesting level is not known or this file object does not
 represent a class file this method returns null.

Specified by:
getNestingKind in interface JavaFileObject
Returns:
the nesting kind, or null if the nesting kind
 is not known


"
ForwardingJavaFileObject,"isNameCompatible(String simpleName, JavaFileObject.Kind kind)",boolean,Checks if this file object is compatible with the specified simple name and kind.,"

isNameCompatible
public boolean isNameCompatible(String simpleName,
                                JavaFileObject.Kind kind)
Description copied from interface: JavaFileObject
Checks if this file object is compatible with the specified
 simple name and kind.  A simple name is a single identifier
 (not qualified) as defined in
 The Java™ Language Specification,
 section 6.2 ""Names and Identifiers"".

Specified by:
isNameCompatible in interface JavaFileObject
Parameters:
simpleName - a simple name of a class
kind - a kind
Returns:
true if this file object is compatible; false
 otherwise


"
SimpleJavaFileObject,delete(),boolean,This implementation does nothing.,"

delete
public boolean delete()
This implementation does nothing.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
delete in interface FileObject
Returns:
false


"
SimpleJavaFileObject,getAccessLevel(),Modifier,This implementation returns null.,"

getAccessLevel
public Modifier getAccessLevel()
This implementation returns null.  Subclasses can
 change this behavior as long as the contract of
 JavaFileObject is obeyed.

Specified by:
getAccessLevel in interface JavaFileObject
Returns:
the access level


"
SimpleJavaFileObject,getCharContent(boolean ignoreEncodingErrors),CharSequence,This implementation always throws UnsupportedOperationException.,"

getCharContent
public CharSequence getCharContent(boolean ignoreEncodingErrors)
                            throws IOException
This implementation always throws UnsupportedOperationException.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
getCharContent in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a CharSequence if available; null otherwise
Throws:
IOException - if an I/O error occurred


"
SimpleJavaFileObject,getKind(),JavaFileObject.Kind,Gets the kind of this file object.,"

getKind
public JavaFileObject.Kind getKind()
Description copied from interface: JavaFileObject
Gets the kind of this file object.

Specified by:
getKind in interface JavaFileObject
Returns:
this.kind


"
SimpleJavaFileObject,getLastModified(),long,This implementation returns 0L.,"

getLastModified
public long getLastModified()
This implementation returns 0L.  Subclasses can change
 this behavior as long as the contract of FileObject is
 obeyed.

Specified by:
getLastModified in interface FileObject
Returns:
0L


"
SimpleJavaFileObject,getName(),String,Gets a user-friendly name for this file object.,"

getName
public String getName()
Description copied from interface: FileObject
Gets a user-friendly name for this file object.  The exact
 value returned is not specified but implementations should take
 care to preserve names as given by the user.  For example, if
 the user writes the filename ""BobsApp\Test.java"" on
 the command line, this method should return ""BobsApp\Test.java"" whereas the toUri
 method might return file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java.

Specified by:
getName in interface FileObject
Returns:
a user-friendly name


"
SimpleJavaFileObject,getNestingKind(),NestingKind,This implementation returns null.,"

getNestingKind
public NestingKind getNestingKind()
This implementation returns null.  Subclasses can
 change this behavior as long as the contract of
 JavaFileObject is obeyed.

Specified by:
getNestingKind in interface JavaFileObject
Returns:
the nesting kind, or null if the nesting kind
 is not known


"
SimpleJavaFileObject,"isNameCompatible(String simpleName, JavaFileObject.Kind kind)",boolean,This implementation compares the path of its URI to the given simple name.,"

isNameCompatible
public boolean isNameCompatible(String simpleName,
                                JavaFileObject.Kind kind)
This implementation compares the path of its URI to the given
 simple name.  This method returns true if the given kind is
 equal to the kind of this object, and if the path is equal to
 simpleName + kind.extension or if it ends with ""/"" + simpleName + kind.extension.

 This method calls getKind() and toUri() and
 does not access the fields uri and kind
 directly.

 Subclasses can change this behavior as long as the contract
 of JavaFileObject is obeyed.

Specified by:
isNameCompatible in interface JavaFileObject
Parameters:
simpleName - a simple name of a class
kind - a kind
Returns:
true if this file object is compatible; false
 otherwise


"
SimpleJavaFileObject,openInputStream(),InputStream,This implementation always throws UnsupportedOperationException.,"

openInputStream
public InputStream openInputStream()
                            throws IOException
This implementation always throws UnsupportedOperationException.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
openInputStream in interface FileObject
Returns:
an InputStream
Throws:
IOException - if an I/O error occurred


"
SimpleJavaFileObject,openOutputStream(),OutputStream,This implementation always throws UnsupportedOperationException.,"

openOutputStream
public OutputStream openOutputStream()
                              throws IOException
This implementation always throws UnsupportedOperationException.  Subclasses can change this
 behavior as long as the contract of FileObject is
 obeyed.

Specified by:
openOutputStream in interface FileObject
Returns:
an OutputStream
Throws:
IOException - if an I/O error occurred


"
SimpleJavaFileObject,openReader(boolean ignoreEncodingErrors),Reader,Wraps the result of getCharContent(boolean) in a Reader.,"

openReader
public Reader openReader(boolean ignoreEncodingErrors)
                  throws IOException
Wraps the result of getCharContent(boolean) in a Reader.
 Subclasses can change this behavior as long as the contract of
 FileObject is obeyed.

Specified by:
openReader in interface FileObject
Parameters:
ignoreEncodingErrors - ignore encoding errors if true
Returns:
a Reader wrapping the result of getCharContent
Throws:
IllegalStateException - if this file object was
 opened for writing and does not support reading
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
SimpleJavaFileObject,openWriter(),Writer,Wraps the result of openOutputStream in a Writer.,"

openWriter
public Writer openWriter()
                  throws IOException
Wraps the result of openOutputStream in a Writer.  Subclasses
 can change this behavior as long as the contract of FileObject is obeyed.

Specified by:
openWriter in interface FileObject
Returns:
a Writer wrapping the result of openOutputStream
Throws:
IllegalStateException - if this file object was
 opened for reading and does not support writing
UnsupportedOperationException - if this kind of
 file object does not support character access
IOException - if an I/O error occurred


"
SimpleJavaFileObject,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
SimpleJavaFileObject,toUri(),URI,Returns a URI identifying this file object.,"

toUri
public URI toUri()
Description copied from interface: FileObject
Returns a URI identifying this file object.

Specified by:
toUri in interface FileObject
Returns:
a URI


"
ToolProvider,getSystemDocumentationTool(),static DocumentationTool,Gets the Java™ programming language documentation tool provided with this platform.,"

getSystemDocumentationTool
public static DocumentationTool getSystemDocumentationTool()
Gets the Java™ programming language documentation tool provided
 with this platform.

Returns:
the documentation tool provided with this platform or
 null if no documentation tool is provided


"
ToolProvider,getSystemJavaCompiler(),static JavaCompiler,Gets the Java™ programming language compiler provided with this platform.,"

getSystemJavaCompiler
public static JavaCompiler getSystemJavaCompiler()
Gets the Java™ programming language compiler provided
 with this platform.

Returns:
the compiler provided with this platform or
 null if no compiler is provided


"
ToolProvider,getSystemToolClassLoader(),static ClassLoader,Returns the class loader for tools provided with this platform.,"

getSystemToolClassLoader
public static ClassLoader getSystemToolClassLoader()
Returns the class loader for tools provided with this platform.
 This does not include user-installed tools.  Use the
 service provider mechanism
 for locating user installed tools.

Returns:
the class loader for tools provided with this platform
 or null if no tools are provided


"
