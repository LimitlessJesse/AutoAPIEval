ClassName,Method,Return Type,Description,Full Description
Delegate,"create_request(Object obj, Context ctx, String operation, NVList arg_list, NamedValue result)",abstract Request,Creates a Request instance for use in the Dynamic Invocation Interface.,"

create_request
public abstract Request create_request(Object obj,
                                       Context ctx,
                                       String operation,
                                       NVList arg_list,
                                       NamedValue result)
Creates a Request instance for use in the Dynamic Invocation Interface.

Parameters:
obj - The object reference which delegated to this delegate.
ctx - The context to be used.
operation - The name of the operation to be
                                 invoked.
arg_list - The arguments to the operation in the
                                 form of an NVList.
result - A container for the result as a NamedValue.
Returns:
The created Request object.


"
Delegate,"create_request(Object obj, Context ctx, String operation, NVList arg_list, NamedValue result, ExceptionList exclist, ContextList ctxlist)",abstract Request,Creates a Request instance for use in the Dynamic Invocation Interface.,"

create_request
public abstract Request create_request(Object obj,
                                       Context ctx,
                                       String operation,
                                       NVList arg_list,
                                       NamedValue result,
                                       ExceptionList exclist,
                                       ContextList ctxlist)
Creates a Request instance for use in the Dynamic Invocation Interface.

Parameters:
obj - The object reference which delegated to this delegate.
ctx - The context to be used.
operation - The name of the operation to be
                                 invoked.
arg_list - The arguments to the operation in the
                                 form of an NVList.
result - A container for the result as a NamedValue.
exclist - A list of possible exceptions the
                                 operation can throw.
ctxlist - A list of context strings that need
                                 to be resolved and sent with the
                                 Request.
Returns:
The created Request object.


"
Delegate,duplicate(Object obj),abstract Object,Returns a duplicate of the object reference provided.,"

duplicate
public abstract Object duplicate(Object obj)
Returns a duplicate of the object reference provided.

Parameters:
obj - The object reference whose duplicate needs to be returned
Returns:
the duplicate object reference


"
Delegate,"equals(Object self, Object obj)",boolean,Provides the implementation to override the equals(java.lang.Object obj) method of the delegating CORBA object.,"

equals
public boolean equals(Object self,
                      Object obj)
Provides the implementation to override the equals(java.lang.Object obj)
 method of the delegating CORBA object.

Parameters:
self - the object reference that delegated to this delegate
obj - the Object with which to compare
Returns:
true if obj equals self;
         false otherwise


"
Delegate,get_domain_managers(Object self),DomainManager[],Retrieves the DomainManagers of this object.,"

get_domain_managers
public DomainManager[] get_domain_managers(Object self)
Retrieves the DomainManagers of this object.
 This allows administration services (and applications) to retrieve the
 domain managers, and hence the security and other policies applicable
 to individual objects that are members of the domain.

Parameters:
self - The object reference which delegated to this delegate.
Returns:
The list of immediately enclosing domain managers of this object.
  At least one domain manager is always returned in the list since by
 default each object is associated with at least one domain manager at
 creation.
See Also:
portable
 package comments for unimplemented features


"
Delegate,get_interface_def(Object self),abstract Object,Return an InterfaceDef for the object reference provided.,"

get_interface_def
public abstract Object get_interface_def(Object self)
Return an InterfaceDef for the object reference provided.

Parameters:
self - The object reference whose InterfaceDef needs to be returned
Returns:
the InterfaceDef


"
Delegate,"get_policy(Object self, int policy_type)",Policy,Returns the Policy object of the specified type which applies to this object.,"

get_policy
public Policy get_policy(Object self,
                         int policy_type)
Returns the Policy object of the specified type
 which applies to this object.

Parameters:
self - The object reference which delegated to this delegate.
policy_type - The type of policy to be obtained.
Returns:
A Policy object of the type specified by
         the policy_type parameter.
Throws:
BAD_PARAM - raised when the value of policy type
 is not valid either because the specified type is not supported by this
 ORB or because a policy object of that type is not associated with this
 Object.
See Also:
portable
 package comments for unimplemented features


"
Delegate,"hash(Object obj, int max)",abstract int,Returns an ORB-internal identifier (hashcode) for this object reference.,"

hash
public abstract int hash(Object obj,
                         int max)
Returns an ORB-internal identifier (hashcode) for this object reference.

Parameters:
obj - The object reference which delegated to this delegate.
max - specifies an upper bound on the hash value returned by
            the ORB.
Returns:
ORB-internal hash identifier for object reference


"
Delegate,hashCode(Object self),int,Provides the implementation to override the hashCode() method of the delegating CORBA object.,"

hashCode
public int hashCode(Object self)
Provides the implementation to override the hashCode() method
 of the delegating CORBA object.

Parameters:
self - the object reference that delegated to this delegate
Returns:
an int that represents the hashcode for the
         object reference that delegated to this Delegate
         object


"
Delegate,"invoke(Object self, OutputStream output)",InputStream,invoke is called by a stub to invoke an operation.,"

invoke
public InputStream invoke(Object self,
                          OutputStream output)
                   throws ApplicationException,
                          RemarshalException
invoke is called by a stub to invoke an operation. The stub provides an
 OutputStream that was previously returned by a request()
 call. invoke returns an InputStream which contains the
 marshaled reply. If an exception occurs, invoke may throw an
 ApplicationException object which contains an InputStream from
 which the user exception state may be unmarshaled.

Parameters:
self - The object reference which delegated to this delegate.
output - the OutputStream which contains marshaled arguments
Returns:
input the InputStream from which reply parameters can be
 unmarshaled.
Throws:
ApplicationException - thrown when implementation throws
 (upon invocation) an exception defined as part of its remote method
 definition.
RemarshalException - thrown when remarshalling fails.
See Also:
portable
 package comments for unimplemented features


"
Delegate,"is_a(Object obj, String repository_id)",abstract boolean,Checks if the object reference is an instance of the given interface.,"

is_a
public abstract boolean is_a(Object obj,
                             String repository_id)
Checks if the object reference is an instance of the given interface.

Parameters:
obj - The object reference to be checked.
repository_id - The repository identifier of the interface
 to check against.
Returns:
true if the object reference supports the interface


"
Delegate,"is_equivalent(Object obj, Object other)",abstract boolean,Determines if the two object references are equivalent.,"

is_equivalent
public abstract boolean is_equivalent(Object obj,
                                      Object other)
Determines if the two object references are equivalent.

Parameters:
obj - The object reference which delegated to this delegate.
other - The object reference to check equivalence against.
Returns:
true if the objects are CORBA-equivalent.


"
Delegate,is_local(Object self),boolean,Returns true if this object is implemented by a local servant.,"

is_local
public boolean is_local(Object self)
Returns true if this object is implemented by a local servant.

Parameters:
self - The object reference which delegated to this delegate.
Returns:
true only if the servant incarnating this object is located in
 this Java VM. Return false if the servant is not local or the ORB
 does not support local stubs for this particular servant. The default
 behavior of is_local() is to return false.


"
Delegate,non_existent(Object obj),abstract boolean,Determines whether the server object for the object reference has been destroyed.,"

non_existent
public abstract boolean non_existent(Object obj)
Determines whether the server object for the object reference has been
 destroyed.

Parameters:
obj - The object reference which delegated to this delegate.
Returns:
true if the ORB knows authoritatively that the server object does
 not exist, false otherwise


"
Delegate,orb(Object obj),ORB,Provides a reference to the orb associated with its parameter.,"

orb
public ORB orb(Object obj)
Provides a reference to the orb associated with its parameter.

Parameters:
obj - the object reference which delegated to this delegate.
Returns:
the associated orb.
See Also:
portable
 package comments for unimplemented features


"
Delegate,release(Object obj),abstract void,Releases resources associated with the object reference provided.,"

release
public abstract void release(Object obj)
Releases resources associated with the object reference provided.

Parameters:
obj - The object reference whose resources need to be released


"
Delegate,"releaseReply(Object self, InputStream input)",void,releaseReply may optionally be called by a stub to release a reply stream back to the ORB when the unmarshaling has completed.,"

releaseReply
public void releaseReply(Object self,
                         InputStream input)
releaseReply may optionally be called by a stub to release a
 reply stream back to the ORB when the unmarshaling has
 completed. The stub passes the InputStream returned by
 invoke() or ApplicationException.getInputStream(). A null
 value may also be passed to releaseReply, in which case the
 method is a noop.

Parameters:
self - The object reference which delegated to this delegate.
input - the InputStream returned from invoke().
See Also:
portable
 package comments for unimplemented features


"
Delegate,"request(Object obj, String operation)",abstract Request,Creates a Request instance for use in the Dynamic Invocation Interface.,"

request
public abstract Request request(Object obj,
                                String operation)
Creates a Request instance for use in the Dynamic Invocation Interface.

Parameters:
obj - The object reference which delegated to this delegate.
operation - The name of the operation to be invoked using the
                  Request instance.
Returns:
the created Request instance


"
Delegate,"request(Object self, String operation, boolean responseExpected)",OutputStream,request is called by a stub to obtain an OutputStream for marshaling arguments.,"

request
public OutputStream request(Object self,
                            String operation,
                            boolean responseExpected)
request is called by a stub to obtain an OutputStream for
 marshaling arguments. The stub must supply the operation name,
 and indicate if a response is expected (i.e is this a oneway
 call).

Parameters:
self - The object reference which delegated to this delegate.
operation - a string containing the operation name.
 The operation name corresponds to the operation name as it would be
 encoded in a GIOP request.
responseExpected - false if the operation is a one way operation,
 and true otherwise.
Returns:
OutputStream the OutputStream into which request arguments
 can be marshaled.
See Also:
portable
 package comments for unimplemented features


"
Delegate,"servant_postinvoke(Object self, ServantObject servant)",void,servant_postinvoke() is invoked by the local stub after the operation has been invoked on the local servant.,"

servant_postinvoke
public void servant_postinvoke(Object self,
                               ServantObject servant)
servant_postinvoke() is invoked by the local stub after the operation
 has been invoked on the local servant.
 This method must be called if servant_preinvoke() returned a non-null
 value, even if an exception was thrown by the servant's method.
 For this reason, the call to servant_postinvoke() should be placed
 in a Java finally clause.

Parameters:
self - The object reference which delegated to this delegate.
servant - the instance of the ServantObject returned from
  the servant_preinvoke() method.


"
Delegate,"servant_preinvoke(Object self, String operation, Class expectedType)",ServantObject,Returns a Java reference to the servant which should be used for this request.,"

servant_preinvoke
public ServantObject servant_preinvoke(Object self,
                                       String operation,
                                       Class expectedType)
Returns a Java reference to the servant which should be used for this
 request. servant_preinvoke() is invoked by a local stub.
 If a ServantObject object is returned, then its servant field
 has been set to an object of the expected type (Note: the object may
 or may not be the actual servant instance). The local stub may cast
 the servant field to the expected type, and then invoke the operation
 directly. The ServantRequest object is valid for only one invocation,
 and cannot be used for more than one invocation.

Parameters:
self - The object reference which delegated to this delegate.
operation - a string containing the operation name.
 The operation name corresponds to the operation name as it would be
 encoded in a GIOP request.
expectedType - a Class object representing the expected type of the servant.
 The expected type is the Class object associated with the operations
 class of the stub's interface (e.g. A stub for an interface Foo,
 would pass the Class object for the FooOperations interface).
Returns:
a ServantObject object.
 The method may return a null value if it does not wish to support
 this optimization (e.g. due to security, transactions, etc).
 The method must return null if the servant is not of the expected type.


"
Delegate,"set_policy_override(Object self, Policy[] policies, SetOverrideType set_add)",Object,Associates the policies passed in with a newly created object reference that it returns.,"

set_policy_override
public Object set_policy_override(Object self,
                                  Policy[] policies,
                                  SetOverrideType set_add)
Associates the policies passed in
 with a newly created object reference that it returns. Only certain
 policies that pertain to the invocation of an operation at the client
 end can be overridden using this operation. Attempts to override any
 other policy will result in the raising of the CORBA::NO_PERMISSION
 exception.

Parameters:
self - The object reference which delegated to this delegate.
policies - A sequence of references to Policy objects.
set_add - Indicates whether these policies should be added
 onto any otheroverrides that already exist (ADD_OVERRIDE) in
 the object reference, or they should be added to a clean
 override free object reference (SET_OVERRIDE).
Returns:
A new object reference with the new policies associated with it.
See Also:
portable
 package comments for unimplemented features


"
Delegate,toString(Object self),String,Provides the implementation to override the toString() method of the delegating CORBA object.,"

toString
public String toString(Object self)
Provides the implementation to override the toString() method
 of the delegating CORBA object.

Parameters:
self - the object reference that delegated to this delegate
Returns:
a String object that represents the object
         reference that delegated to this Delegate
         object


"
InputStream,orb(),ORB,Returns the ORB that created this InputStream.,"

orb
public ORB orb()
Returns the ORB that created this InputStream.

Returns:
the ORB object that created this stream
See Also:
portable
 package comments for unimplemented features


"
InputStream,read_any(),abstract Any,Reads an Any from this input stream.,"

read_any
public abstract Any read_any()
Reads an Any from this input stream.

Returns:
the Any instance read from this input stream.


"
InputStream,"read_boolean_array(boolean[] value, int offset, int length)",abstract void,Reads an array of booleans from this input stream.,"

read_boolean_array
public abstract void read_boolean_array(boolean[] value,
                                        int offset,
                                        int length)
Reads an array of booleans from this input stream.

Parameters:
value - returned array of booleans.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_boolean(),abstract boolean,Reads a boolean value from this input stream.,"

read_boolean
public abstract boolean read_boolean()
Reads a boolean value from this input stream.

Returns:
the boolean value read from this input stream


"
InputStream,"read_char_array(char[] value, int offset, int length)",abstract void,Reads an array of chars from this input stream.,"

read_char_array
public abstract void read_char_array(char[] value,
                                     int offset,
                                     int length)
Reads an array of chars from this input stream.

Parameters:
value - returned array of chars.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_char(),abstract char,Reads a char value from this input stream.,"

read_char
public abstract char read_char()
Reads a char value from this input stream.

Returns:
the char value read from this input stream


"
InputStream,read_Context(),Context,Reads a CORBA context from the stream.,"

read_Context
public Context read_Context()
Reads a CORBA context from the stream.

Returns:
a CORBA context
See Also:
portable
 package comments for unimplemented features


"
InputStream,"read_double_array(double[] value, int offset, int length)",abstract void,Reads an array of doubles from this input stream.,"

read_double_array
public abstract void read_double_array(double[] value,
                                       int offset,
                                       int length)
Reads an array of doubles from this input stream.

Parameters:
value - returned array of doubles.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_double(),abstract double,Reads a double value from this input stream.,"

read_double
public abstract double read_double()
Reads a double value from this input stream.

Returns:
the double value read from this input stream


"
InputStream,read_fixed(),BigDecimal,Reads a BigDecimal number.,"

read_fixed
public BigDecimal read_fixed()
Reads a BigDecimal number.

Returns:
a java.math.BigDecimal number


"
InputStream,"read_float_array(float[] value, int offset, int length)",abstract void,Reads an array of floats from this input stream.,"

read_float_array
public abstract void read_float_array(float[] value,
                                      int offset,
                                      int length)
Reads an array of floats from this input stream.

Parameters:
value - returned array of floats.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_float(),abstract float,Reads a float value from this input stream.,"

read_float
public abstract float read_float()
Reads a float value from this input stream.

Returns:
the float value read from this input stream


"
InputStream,"read_long_array(int[] value, int offset, int length)",abstract void,"Reads an array of CORBA longs (that is, Java ints) from this input stream.","

read_long_array
public abstract void read_long_array(int[] value,
                                     int offset,
                                     int length)
Reads an array of CORBA longs (that is, Java ints) from this input stream.

Parameters:
value - returned array of CORBA longs (that is, Java ints).
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_long(),abstract int,"Reads a CORBA long (that is, Java int) value from this input stream.","

read_long
public abstract int read_long()
Reads a CORBA long (that is, Java int) value from this input stream.

Returns:
the int value read from this input stream


"
InputStream,"read_longlong_array(long[] value, int offset, int length)",abstract void,"Reads an array of CORBA longlongs (that is, Java longs) from this inputstream.","

read_longlong_array
public abstract void read_longlong_array(long[] value,
                                         int offset,
                                         int length)
Reads an array of CORBA longlongs (that is, Java longs) from this input
stream.

Parameters:
value - returned array of CORBA longs (that is, Java longs).
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_longlong(),abstract long,"Reads a CORBA longlong (that is, Java long) value from this input stream.","

read_longlong
public abstract long read_longlong()
Reads a CORBA longlong (that is, Java long) value from this input stream.

Returns:
the long value read from this input stream


"
InputStream,read_Object(),abstract Object,Reads a CORBA object from this input stream.,"

read_Object
public abstract Object read_Object()
Reads a CORBA object from this input stream.

Returns:
the Object instance read from this input stream.


"
InputStream,read_Object(Class clz),Object,"Unmarshals an object and returns a CORBA Object, which is an instance of the class passed as its argument.","

read_Object
public Object read_Object(Class clz)
Unmarshals an object and returns a CORBA Object,
 which is an instance of the class passed as its argument.
 This class is the stub class of the expected type.

Parameters:
clz - The Class object for the stub class which
 corresponds to the type that is statistically expected, or
 the Class object for the RMI/IDL interface type that
 is statistically expected.
Returns:
an Object instance of clz read from this stream
See Also:
portable
 package comments for unimplemented features


"
InputStream,"read_octet_array(byte[] value, int offset, int length)",abstract void,"Reads an array of octets (that is, bytes) from this input stream.","

read_octet_array
public abstract void read_octet_array(byte[] value,
                                      int offset,
                                      int length)
Reads an array of octets (that is, bytes) from this input stream.

Parameters:
value - returned array of octets (that is, bytes).
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_octet(),abstract byte,"Reads an octet (that is, a byte) value from this input stream.","

read_octet
public abstract byte read_octet()
Reads an octet (that is, a byte) value from this input stream.

Returns:
the byte value read from this input stream


"
InputStream,read_Principal(),Principal,Deprecated. Deprecated by CORBA 2.2.,"

read_Principal
@Deprecated
public Principal read_Principal()
Deprecated. Deprecated by CORBA 2.2.
Returns principal for invocation.

Returns:
Principal for invocation.


"
InputStream,"read_short_array(short[] value, int offset, int length)",abstract void,Reads an array of shorts from this input stream.,"

read_short_array
public abstract void read_short_array(short[] value,
                                      int offset,
                                      int length)
Reads an array of shorts from this input stream.

Parameters:
value - returned array of shorts.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_short(),abstract short,Reads a short value from this input stream.,"

read_short
public abstract short read_short()
Reads a short value from this input stream.

Returns:
the short value read from this input stream


"
InputStream,read_string(),abstract String,Reads a string value from this input stream.,"

read_string
public abstract String read_string()
Reads a string value from this input stream.

Returns:
the String value read from this input stream


"
InputStream,read_TypeCode(),abstract TypeCode,Reads a TypeCode from this input stream.,"

read_TypeCode
public abstract TypeCode read_TypeCode()
Reads a TypeCode from this input stream.

Returns:
the TypeCode instance read from this input stream.


"
InputStream,"read_ulong_array(int[] value, int offset, int length)",abstract void,"Reads an array of unsigned CORBA longs (that is, Java ints) from this inputstream.","

read_ulong_array
public abstract void read_ulong_array(int[] value,
                                      int offset,
                                      int length)
Reads an array of unsigned CORBA longs (that is, Java ints) from this input
stream.

Parameters:
value - returned array of CORBA longs (that is, Java ints).
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_ulong(),abstract int,"Reads an unsigned CORBA long (that is, Java int) value from this inputstream.","

read_ulong
public abstract int read_ulong()
Reads an unsigned CORBA long (that is, Java int) value from this input
stream.

Returns:
the int value read from this input stream


"
InputStream,"read_ulonglong_array(long[] value, int offset, int length)",abstract void,"Reads an array of unsigned CORBA longlongs (that is, Java longs) from thisinput stream.","

read_ulonglong_array
public abstract void read_ulonglong_array(long[] value,
                                          int offset,
                                          int length)
Reads an array of unsigned CORBA longlongs (that is, Java longs) from this
input stream.

Parameters:
value - returned array of CORBA longs (that is, Java longs).
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_ulonglong(),abstract long,"Reads a CORBA unsigned longlong (that is, Java long) value from this inputstream.","

read_ulonglong
public abstract long read_ulonglong()
Reads a CORBA unsigned longlong (that is, Java long) value from this input
stream.

Returns:
the long value read from this input stream


"
InputStream,"read_ushort_array(short[] value, int offset, int length)",abstract void,Reads an array of unsigned shorts from this input stream.,"

read_ushort_array
public abstract void read_ushort_array(short[] value,
                                       int offset,
                                       int length)
Reads an array of unsigned shorts from this input stream.

Parameters:
value - returned array of shorts.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_ushort(),abstract short,Reads a unsigned short value from this input stream.,"

read_ushort
public abstract short read_ushort()
Reads a unsigned short value from this input stream.

Returns:
the short value read from this input stream


"
InputStream,"read_wchar_array(char[] value, int offset, int length)",abstract void,Reads an array of wide chars from this input stream.,"

read_wchar_array
public abstract void read_wchar_array(char[] value,
                                      int offset,
                                      int length)
Reads an array of wide chars from this input stream.

Parameters:
value - returned array of wide chars.
offset - offset on the stream.
length - length of buffer to read.


"
InputStream,read_wchar(),abstract char,Reads a wide char value from this input stream.,"

read_wchar
public abstract char read_wchar()
Reads a wide char value from this input stream.

Returns:
the char value read from this input stream


"
InputStream,read_wstring(),abstract String,Reads a wide string value from this input stream.,"

read_wstring
public abstract String read_wstring()
Reads a wide string value from this input stream.

Returns:
the String value read from this input stream


"
InputStream,read(),int,Reads the next byte of data from the input stream.,"

read
public int read()
         throws IOException
Description copied from class: InputStream
Reads the next byte of data from the input stream. The value byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the stream
 has been reached, the value -1 is returned. This method
 blocks until input data is available, the end of the stream is detected,
 or an exception is thrown.

  A subclass must provide an implementation of this method.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
portable
 package comments for unimplemented features


"
ObjectImpl,"_create_request(Context ctx, String operation, NVList arg_list, NamedValue result)",Request,"Creates a Request object that contains the given context, method, argument list, and container for the result.","

_create_request
public Request _create_request(Context ctx,
                               String operation,
                               NVList arg_list,
                               NamedValue result)
Creates a Request object that contains the given context,
 method, argument list, and container for the result.

Specified by:
_create_request in interface Object
Parameters:
ctx - the Context for the request
operation - the method that the new Request
        object will invoke
arg_list - the arguments for the method; an NVList
        in which each argument is a NamedValue object
result - a NamedValue object to be used for
        returning the result of executing the request's method
Returns:
a new Request object initialized with the
         given context, method, argument list, and container for the
         return value
See Also:
Request, 
NVList, 
NamedValue


"
ObjectImpl,"_create_request(Context ctx, String operation, NVList arg_list, NamedValue result, ExceptionList exceptions, ContextList contexts)",Request,"Creates a Request object that contains the given context, method, argument list, container for the result, exceptions, and list of property names to be used in resolving the context strings.","

_create_request
public Request _create_request(Context ctx,
                               String operation,
                               NVList arg_list,
                               NamedValue result,
                               ExceptionList exceptions,
                               ContextList contexts)
Creates a Request object that contains the given context,
 method, argument list, container for the result, exceptions, and
 list of property names to be used in resolving the context strings.
 This Request object is for use in the Dynamic
 Invocation Interface.

Specified by:
_create_request in interface Object
Parameters:
ctx - the Context object that contains the
        context strings that must be resolved before they are
        sent along with the request
operation - the method that the new Request
        object will invoke
arg_list - the arguments for the method; an NVList
        in which each argument is a NamedValue object
result - a NamedValue object to be used for
        returning the result of executing the request's method
exceptions - a list of the exceptions that the given method
        throws
contexts - a list of the properties that are needed to
        resolve the contexts in ctx; the strings in
        contexts are used as arguments to the method
        Context.get_values,
        which returns the value associated with the given property
Returns:
a new Request object initialized with the
         given context strings to resolve, method, argument list,
         container for the result, exceptions, and list of property
         names to be used in resolving the context strings
See Also:
Request, 
NVList, 
NamedValue, 
ExceptionList, 
ContextList


"
ObjectImpl,_duplicate(),Object,Returns a duplicate of this ObjectImpl object.,"

_duplicate
public Object _duplicate()
Returns a duplicate of this ObjectImpl object.

Specified by:
_duplicate in interface Object
Returns:
an orb.omg.CORBA.Object object that is
         a duplicate of this object


"
ObjectImpl,_get_delegate(),Delegate,Retrieves the reference to the vendor-specific Delegate object to which this ObjectImpl object delegates all methods invoked on it.,"

_get_delegate
public Delegate _get_delegate()
Retrieves the reference to the vendor-specific Delegate
 object to which this ObjectImpl object delegates all
 methods invoked on it.

Returns:
the Delegate contained in this ObjectImpl instance
Throws:
BAD_OPERATION - if the delegate has not been set
See Also:
_set_delegate(org.omg.CORBA.portable.Delegate)


"
ObjectImpl,_get_domain_managers(),DomainManager[],Retrieves a list of the domain managers for this ObjectImpl object.,"

_get_domain_managers
public DomainManager[] _get_domain_managers()
Retrieves a list of the domain managers for this
 ObjectImpl object.

Specified by:
_get_domain_managers in interface Object
Returns:
an array containing the DomainManager
         objects for this instance of ObjectImpl


"
ObjectImpl,_get_interface_def(),Object,Retrieves the interface definition for this ObjectImpl object.,"

_get_interface_def
public Object _get_interface_def()
Retrieves the interface definition for this ObjectImpl
 object.

Specified by:
_get_interface_def in interface Object
Returns:
the org.omg.CORBA.Object instance that is the
         interface definition for this ObjectImpl object


"
ObjectImpl,_get_policy(int policy_type),Policy,Retrieves the Policy object for this ObjectImpl object that has the given policy type.,"

_get_policy
public Policy _get_policy(int policy_type)
Retrieves the Policy object for this
 ObjectImpl object that has the given
 policy type.

Specified by:
_get_policy in interface Object
Parameters:
policy_type - an int indicating the policy type
Returns:
the Policy object that is the specified policy type
         and that applies to this ObjectImpl object
See Also:
PolicyOperations.policy_type()


"
ObjectImpl,_hash(int maximum),int,Retrieves the hash code that serves as an ORB-internal identifier for this ObjectImpl object.,"

_hash
public int _hash(int maximum)
Retrieves the hash code that serves as an ORB-internal identifier for
 this ObjectImpl object.

Specified by:
_hash in interface Object
Parameters:
maximum - an int indicating the upper bound on the hash
        value returned by the ORB
Returns:
an int representing the hash code for this
         ObjectImpl object


"
ObjectImpl,_ids(),abstract String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public abstract String[] _ids()
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
ObjectImpl,_invoke(OutputStream output),InputStream,Invokes an operation and returns an InputStream object for reading the response.,"

_invoke
public InputStream _invoke(OutputStream output)
                    throws ApplicationException,
                           RemarshalException
Invokes an operation and returns an InputStream
 object for reading the response. The stub provides the
 OutputStream object that was previously returned by a
 call to the _request method. The method specified
 as an argument to _request when it was
 called previously is the method that this method invokes.
 
 If an exception occurs, the _invoke method may throw an
 ApplicationException object that contains an InputStream from
 which the user exception state may be unmarshalled.

Parameters:
output - an OutputStream object for dispatching the request
Returns:
an InputStream object containing the marshalled
         response to the method invoked
Throws:
ApplicationException - if the invocation
         meets application-defined exception
RemarshalException - if the invocation leads
         to a remarshalling error
See Also:
_request(java.lang.String)


"
ObjectImpl,_is_a(String repository_id),boolean,Checks whether the object identified by the given repository identifier is an ObjectImpl object.,"

_is_a
public boolean _is_a(String repository_id)
Checks whether the object identified by the given repository
 identifier is an ObjectImpl object.

Specified by:
_is_a in interface Object
Parameters:
repository_id - a String object with the repository
        identifier to check
Returns:
true if the object identified by the given
         repository id is an instance of ObjectImpl;
         false otherwise


"
ObjectImpl,_is_equivalent(Object that),boolean,Checks whether the the given ObjectImpl object is equivalent to this ObjectImpl object.,"

_is_equivalent
public boolean _is_equivalent(Object that)
Checks whether the the given ObjectImpl object is
 equivalent to this ObjectImpl object.

Specified by:
_is_equivalent in interface Object
Parameters:
that - an instance of ObjectImpl to compare with
        this ObjectImpl object
Returns:
true if the given object is equivalent
         to this ObjectImpl object;
         false otherwise


"
ObjectImpl,_is_local(),boolean,Checks whether this ObjectImpl object is implemented by a local servant.,"

_is_local
public boolean _is_local()
Checks whether this ObjectImpl object is implemented
 by a local servant.  If so, local invocation API's may be used.

Returns:
true if this object is implemented by a local
         servant; false otherwise


"
ObjectImpl,_non_existent(),boolean,Checks whether the server object for this ObjectImpl object has been destroyed.,"

_non_existent
public boolean _non_existent()
Checks whether the server object for this ObjectImpl
 object has been destroyed.

Specified by:
_non_existent in interface Object
Returns:
true if the ORB knows authoritatively that the
         server object does not exist; false otherwise


"
ObjectImpl,_orb(),ORB,Returns a reference to the ORB associated with this object and its delegate.,"

_orb
public ORB _orb()
Returns a reference to the ORB associated with this object and
 its delegate.  This is the ORB object that created
 the delegate.

Returns:
the ORB instance that created the
          Delegate object contained in this
          ObjectImpl object


"
ObjectImpl,_release(),void,Releases the resources associated with this ObjectImpl object.,"

_release
public void _release()
Releases the resources associated with this ObjectImpl object.

Specified by:
_release in interface Object


"
ObjectImpl,_releaseReply(InputStream input),void,Releases the given reply stream back to the ORB when unmarshalling has completed after a call to the method _invoke.,"

_releaseReply
public void _releaseReply(InputStream input)
Releases the given
 reply stream back to the ORB when unmarshalling has
 completed after a call to the method _invoke.
 Calling this method is optional for the stub.

Parameters:
input - the InputStream object that was returned
        by the _invoke method or the
        ApplicationException.getInputStream method;
        may be null, in which case this method does
        nothing
See Also:
_invoke(org.omg.CORBA.portable.OutputStream)


"
ObjectImpl,_request(String operation),Request,Creates a Request object containing the given method that can be used with the Dynamic Invocation Interface.,"

_request
public Request _request(String operation)
Creates a Request object containing the given method
 that can be used with the Dynamic Invocation Interface.

Specified by:
_request in interface Object
Parameters:
operation - the method to be invoked by the new Request
        object
Returns:
a new Request object initialized with the
         given method


"
ObjectImpl,"_request(String operation, boolean responseExpected)",OutputStream,Returns an OutputStream object to use for marshalling the arguments of the given method.,"

_request
public OutputStream _request(String operation,
                             boolean responseExpected)
Returns an OutputStream object to use for marshalling
 the arguments of the given method.  This method is called by a stub,
 which must indicate if a response is expected, that is, whether or not
 the call is oneway.

Parameters:
operation - a String giving the name of the method.
responseExpected - a boolean -- true if the
         request is not one way, that is, a response is expected
Returns:
an OutputStream object for dispatching the request


"
ObjectImpl,_servant_postinvoke(ServantObject servant),void,Is called by the local stub after it has invoked an operation on the local servant that was previously retrieved from a call to the method _servant_preinvoke.,"

_servant_postinvoke
public void _servant_postinvoke(ServantObject servant)
Is called by the local stub after it has invoked an operation
 on the local servant that was previously retrieved from a
 call to the method _servant_preinvoke.
 The _servant_postinvoke method must be called
 if the _servant_preinvoke
 method returned a non-null value, even if an exception was thrown
 by the method invoked by the servant. For this reason, the call
 to the method _servant_postinvoke should be placed
 in a Java finally clause.

Parameters:
servant - the instance of the ServantObject
        returned by the _servant_preinvoke method


"
ObjectImpl,"_servant_preinvoke(String operation, Class expectedType)",ServantObject,Returns a Java reference to the local servant that should be used for sending a request for the method specified.,"

_servant_preinvoke
public ServantObject _servant_preinvoke(String operation,
                                        Class expectedType)
Returns a Java reference to the local servant that should be used for sending
 a request for the method specified. If this ObjectImpl
 object is a local stub, it will invoke the _servant_preinvoke
 method before sending a request in order to obtain the
 ServantObject instance to use.
 
 If a ServantObject object is returned, its servant
 field has been set to an object of the expected type (Note: the object may
 or may not be the actual servant instance). The local stub may cast
 the servant field to the expected type, and then invoke the operation
 directly. The ServantRequest object is valid for only one
 invocation and cannot be used for more than one invocation.

Parameters:
operation - a String containing the name of the method
        to be invoked. This name should correspond to the method name as
        it would be encoded in a GIOP request.
expectedType - a Class object representing the
        expected type of the servant that is returned. This expected
        type is the Class object associated with the
        operations class for the stub's interface. For example, a
        stub for an interface Foo would pass the
        Class object for the FooOperations
        interface.
Returns:
(1) a ServantObject object, which may or may
         not be the actual servant instance, or (2) null if
         (a) the servant is not local or (b) the servant has ceased to
         be local due to a ForwardRequest from a POA ServantManager
Throws:
BAD_PARAM - if the servant is not the expected type


"
ObjectImpl,_set_delegate(Delegate delegate),void,Sets the Delegate for this ObjectImpl instance to the given Delegate object.,"

_set_delegate
public void _set_delegate(Delegate delegate)
Sets the Delegate for this ObjectImpl instance to the given
 Delegate object.  All method invocations on this
 ObjectImpl object will be forwarded to this delegate.

Parameters:
delegate - the Delegate instance to which
        all method calls on this ObjectImpl object
        will be delegated; may be implemented by a third-party ORB
See Also:
_get_delegate()


"
ObjectImpl,"_set_policy_override(Policy[] policies, SetOverrideType set_add)",Object,Sets this ObjectImpl object's override type for the given policies to the given instance of SetOverrideType.,"

_set_policy_override
public Object _set_policy_override(Policy[] policies,
                                   SetOverrideType set_add)
Sets this ObjectImpl object's override type for
 the given policies to the given instance of
 SetOverrideType.

Specified by:
_set_policy_override in interface Object
Parameters:
policies - an array of Policy objects with the
         policies that will replace the current policies or be
         added to the current policies
set_add - either SetOverrideType.SET_OVERRIDE,
         indicating that the given policies will replace any existing
         ones, or SetOverrideType.ADD_OVERRIDE, indicating
         that the given policies should be added to any existing ones
Returns:
an Object with the given policies replacing or
         added to its previous policies


"
ObjectImpl,equals(Object obj),boolean,Compares this ObjectImpl object with the given one for equality.,"

equals
public boolean equals(Object obj)
Compares this ObjectImpl object with the given one
 for equality.

Overrides:
equals in class Object
Parameters:
obj - the object with which to compare this object
Returns:
true if the two objects are equal;
        false otherwise
See Also:
Object.hashCode(), 
HashMap


"
ObjectImpl,hashCode(),int,Returns the hash code for this ObjectImpl object.,"

hashCode
public int hashCode()
Returns the hash code for this ObjectImpl object.

Overrides:
hashCode in class Object
Returns:
the hash code for this object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ObjectImpl,toString(),String,Returns a String object that represents this ObjectImpl object.,"

toString
public String toString()
Returns a String object that represents this
 ObjectImpl object.

Overrides:
toString in class Object
Returns:
the String representation of this object


"
OutputStream,create_input_stream(),abstract InputStream,Returns an input stream with the same buffer.,"

create_input_stream
public abstract InputStream create_input_stream()
Returns an input stream with the same buffer.

Returns:
an input stream with the same buffer.


"
OutputStream,orb(),ORB,Returns the ORB that created this OutputStream.,"

orb
public ORB orb()
Returns the ORB that created this OutputStream.

Returns:
the ORB that created this OutputStream
See Also:
portable
 package comments for unimplemented features


"
OutputStream,write_any(Any value),abstract void,Writes an Any on this output stream.,"

write_any
public abstract void write_any(Any value)
Writes an Any on this output stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_boolean_array(boolean[] value, int offset, int length)",abstract void,Writes an array of booleans on this output stream.,"

write_boolean_array
public abstract void write_boolean_array(boolean[] value,
                                         int offset,
                                         int length)
Writes an array of booleans on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_boolean(boolean value),abstract void,Writes a boolean value to this stream.,"

write_boolean
public abstract void write_boolean(boolean value)
Writes a boolean value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_char_array(char[] value, int offset, int length)",abstract void,Writes an array of chars on this output stream.,"

write_char_array
public abstract void write_char_array(char[] value,
                                      int offset,
                                      int length)
Writes an array of chars on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_char(char value),abstract void,Writes a char value to this stream.,"

write_char
public abstract void write_char(char value)
Writes a char value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_Context(Context ctx, ContextList contexts)",void,Writes a CORBA context on this stream.,"

write_Context
public void write_Context(Context ctx,
                          ContextList contexts)
Writes a CORBA context on this stream. The
 Context is marshaled as a sequence of strings.
 Only those Context values specified in the contexts
 parameter are actually written.

Parameters:
ctx - a CORBA context
contexts - a ContextList object containing the list of contexts
        to be written
See Also:
portable
 package comments for unimplemented features


"
OutputStream,"write_double_array(double[] value, int offset, int length)",abstract void,Writes an array of doubles on this output stream.,"

write_double_array
public abstract void write_double_array(double[] value,
                                        int offset,
                                        int length)
Writes an array of doubles on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_double(double value),abstract void,Writes a double value to this stream.,"

write_double
public abstract void write_double(double value)
Writes a double value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_fixed(BigDecimal value),void,Writes a BigDecimal number.,"

write_fixed
public void write_fixed(BigDecimal value)
Writes a BigDecimal number.

Parameters:
value - a BidDecimal--value to be written.


"
OutputStream,"write_float_array(float[] value, int offset, int length)",abstract void,Writes an array of floats on this output stream.,"

write_float_array
public abstract void write_float_array(float[] value,
                                       int offset,
                                       int length)
Writes an array of floats on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_float(float value),abstract void,Writes a float value to this stream.,"

write_float
public abstract void write_float(float value)
Writes a float value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_long_array(int[] value, int offset, int length)",abstract void,Writes an array of CORBA longs (i.e.,"

write_long_array
public abstract void write_long_array(int[] value,
                                      int offset,
                                      int length)
Writes an array of CORBA longs (i.e. Java ints) on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_long(int value),abstract void,Writes a CORBA long (i.e.,"

write_long
public abstract void write_long(int value)
Writes a CORBA long (i.e. Java int) value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_longlong_array(long[] value, int offset, int length)",abstract void,Writes an array of CORBA longlongs (i.e.,"

write_longlong_array
public abstract void write_longlong_array(long[] value,
                                          int offset,
                                          int length)
Writes an array of CORBA longlongs (i.e. Java longs) on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_longlong(long value),abstract void,Writes a CORBA longlong (i.e.,"

write_longlong
public abstract void write_longlong(long value)
Writes a CORBA longlong (i.e. Java long) value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_Object(Object value),abstract void,Writes a CORBA Object on this output stream.,"

write_Object
public abstract void write_Object(Object value)
Writes a CORBA Object on this output stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_octet_array(byte[] value, int offset, int length)",abstract void,Writes an array of CORBA octets (bytes) on this output stream.,"

write_octet_array
public abstract void write_octet_array(byte[] value,
                                       int offset,
                                       int length)
Writes an array of CORBA octets (bytes) on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_octet(byte value),abstract void,Writes a CORBA octet (i.e.,"

write_octet
public abstract void write_octet(byte value)
Writes a CORBA octet (i.e. byte) value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_Principal(Principal value),void,Deprecated. Deprecated by CORBA 2.2.,"

write_Principal
@Deprecated
public void write_Principal(Principal value)
Deprecated. Deprecated by CORBA 2.2.
Writes a Principle on this output stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_short_array(short[] value, int offset, int length)",abstract void,Writes an array of shorts on this output stream.,"

write_short_array
public abstract void write_short_array(short[] value,
                                       int offset,
                                       int length)
Writes an array of shorts on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_short(short value),abstract void,Writes a short value to this stream.,"

write_short
public abstract void write_short(short value)
Writes a short value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_string(String value),abstract void,Writes a string value to this stream.,"

write_string
public abstract void write_string(String value)
Writes a string value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_TypeCode(TypeCode value),abstract void,Writes a TypeCode on this output stream.,"

write_TypeCode
public abstract void write_TypeCode(TypeCode value)
Writes a TypeCode on this output stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_ulong_array(int[] value, int offset, int length)",abstract void,Writes an array of unsigned CORBA longs (i.e.,"

write_ulong_array
public abstract void write_ulong_array(int[] value,
                                       int offset,
                                       int length)
Writes an array of unsigned CORBA longs (i.e. Java ints) on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_ulong(int value),abstract void,Writes an unsigned CORBA long (i.e.,"

write_ulong
public abstract void write_ulong(int value)
Writes an unsigned CORBA long (i.e. Java int) value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_ulonglong_array(long[] value, int offset, int length)",abstract void,Writes an array of unsigned CORBA longlongs (i.e.,"

write_ulonglong_array
public abstract void write_ulonglong_array(long[] value,
                                           int offset,
                                           int length)
Writes an array of unsigned CORBA longlongs (i.e. Java ints) on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_ulonglong(long value),abstract void,Writes an unsigned CORBA longlong (i.e.,"

write_ulonglong
public abstract void write_ulonglong(long value)
Writes an unsigned CORBA longlong (i.e. Java long) value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_ushort_array(short[] value, int offset, int length)",abstract void,Writes an array of unsigned shorts on this output stream.,"

write_ushort_array
public abstract void write_ushort_array(short[] value,
                                        int offset,
                                        int length)
Writes an array of unsigned shorts on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_ushort(short value),abstract void,Writes an unsigned short value to this stream.,"

write_ushort
public abstract void write_ushort(short value)
Writes an unsigned short value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,"write_wchar_array(char[] value, int offset, int length)",abstract void,Writes an array of wide chars on this output stream.,"

write_wchar_array
public abstract void write_wchar_array(char[] value,
                                       int offset,
                                       int length)
Writes an array of wide chars on this output stream.

Parameters:
value - the array to be written.
offset - offset on the stream.
length - length of buffer to write.


"
OutputStream,write_wchar(char value),abstract void,Writes a wide char value to this stream.,"

write_wchar
public abstract void write_wchar(char value)
Writes a wide char value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write_wstring(String value),abstract void,Writes a wide string value to this stream.,"

write_wstring
public abstract void write_wstring(String value)
Writes a wide string value to this stream.

Parameters:
value - the value to be written.


"
OutputStream,write(int b),void,Writes an integer (length of arrays) onto this stream.,"

write
public void write(int b)
           throws IOException
Writes an integer (length of arrays) onto this stream.

Specified by:
write in class OutputStream
Parameters:
b - the value to be written.
Throws:
IOException - if there is an input/output error
See Also:
portable
 package comments for unimplemented features


"
