Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,LockInfo,1,String getClassName(),True,,"

getClassName
public String getClassName()
Returns the fully qualified name of the class of the lock object.

Returns:
the fully qualified name of the class of the lock object.


"
0,LockInfo,2,int getIdentityHashCode(),True,,"

getIdentityHashCode
public int getIdentityHashCode()
Returns the identity hash code of the lock object
 returned from the System.identityHashCode(java.lang.Object) method.

Returns:
the identity hash code of the lock object.


"
0,LockInfo,3,String toString(),True,,"

toString
public String toString()
Returns a string representation of a lock.  The returned
 string representation consists of the name of the class of the
 lock object, the at-sign character `@', and the unsigned
 hexadecimal representation of the identity hash code
 of the object.  This method returns a string equals to the value of:
 

 lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))
 
 where lock is the lock object.

Overrides:
toString in class Object
Returns:
the string representation of a lock.


"
0,LockInfo,4,boolean equals(Object obj),False,,NULL
0,LockInfo,5,int hashCode(),False,,NULL
1,ManagementFactory,1,MemoryMXBean getMemoryMXBean(),True,,"

getMemoryMXBean
public static MemoryMXBean getMemoryMXBean()
Returns the managed bean for the memory system of
 the Java virtual machine.

Returns:
a MemoryMXBean object for the Java virtual machine.


"
1,ManagementFactory,2,ThreadMXBean getThreadMXBean(),True,,"

getThreadMXBean
public static ThreadMXBean getThreadMXBean()
Returns the managed bean for the thread system of
 the Java virtual machine.

Returns:
a ThreadMXBean object for the Java virtual machine.


"
1,ManagementFactory,3,OperatingSystemMXBean getOperatingSystemMXBean(),True,,"

getOperatingSystemMXBean
public static OperatingSystemMXBean getOperatingSystemMXBean()
Returns the managed bean for the operating system on which
 the Java virtual machine is running.

Returns:
an OperatingSystemMXBean object for
 the Java virtual machine.


"
1,ManagementFactory,4,RuntimeMXBean getRuntimeMXBean(),True,,"

getRuntimeMXBean
public static RuntimeMXBean getRuntimeMXBean()
Returns the managed bean for the runtime system of
 the Java virtual machine.

Returns:
a RuntimeMXBean object for the Java virtual machine.


"
1,ManagementFactory,5,ClassLoadingMXBean getClassLoadingMXBean(),True,,"

getClassLoadingMXBean
public static ClassLoadingMXBean getClassLoadingMXBean()
Returns the managed bean for the class loading system of
 the Java virtual machine.

Returns:
a ClassLoadingMXBean object for
 the Java virtual machine.


"
3,MemoryNotificationInfo,1,String getPoolName(),True,,"

getPoolName
public String getPoolName()
Returns the name of the memory pool that triggers this notification.
 The memory pool usage has crossed a threshold.

Returns:
the name of the memory pool that triggers this notification.


"
3,MemoryNotificationInfo,2,MemoryUsage getUsage(),True,,"

getUsage
public MemoryUsage getUsage()
Returns the memory usage of the memory pool
 when this notification was constructed.

Returns:
the memory usage of the memory pool
 when this notification was constructed.


"
3,MemoryNotificationInfo,3,MemoryUsage getUsageBeforeGc(),False,,NULL
3,MemoryNotificationInfo,4,String getMemoryManagerName(),False,,NULL
3,MemoryNotificationInfo,5,String getEventType(),False,,NULL
4,MemoryUsage,1,long getInit(),True,,"

getInit
public long getInit()
Returns the amount of memory in bytes that the Java virtual machine
 initially requests from the operating system for memory management.
 This method returns -1 if the initial memory size is undefined.

Returns:
the initial size of memory in bytes;
 -1 if undefined.


"
4,MemoryUsage,2,long getUsed(),True,,"

getUsed
public long getUsed()
Returns the amount of used memory in bytes.

Returns:
the amount of used memory in bytes.


"
4,MemoryUsage,3,long getCommitted(),True,,"

getCommitted
public long getCommitted()
Returns the amount of memory in bytes that is committed for
 the Java virtual machine to use.  This amount of memory is
 guaranteed for the Java virtual machine to use.

Returns:
the amount of committed memory in bytes.


"
4,MemoryUsage,4,long getMax(),True,,"

getMax
public long getMax()
Returns the maximum amount of memory in bytes that can be
 used for memory management.  This method returns -1
 if the maximum memory size is undefined.

  This amount of memory is not guaranteed to be available
 for memory management if it is greater than the amount of
 committed memory.  The Java virtual machine may fail to allocate
 memory even if the amount of used memory does not exceed this
 maximum size.

Returns:
the maximum amount of memory in bytes;
 -1 if undefined.


"
4,MemoryUsage,5,String toString(),True,,"

toString
public String toString()
Returns a descriptive representation of this memory usage.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
5,MonitorInfo,1,int getLockedStackDepth(),True,,"

getLockedStackDepth
public int getLockedStackDepth()
Returns the depth in the stack trace where the object monitor
 was locked.  The depth is the index to the StackTraceElement
 array returned in the ThreadInfo.getStackTrace() method.

Returns:
the depth in the stack trace where the object monitor
         was locked, or a negative number if not available.


"
5,MonitorInfo,2,int getLockedStackFrame(),False,,NULL
5,MonitorInfo,3,long getLockedTime(),False,,NULL
5,MonitorInfo,4,String getClassName(),False,,NULL
5,MonitorInfo,5,String getIdentityHashCode(),False,,NULL
6,ThreadInfo,1,long getThreadId(),True,,"

getThreadId
public long getThreadId()
Returns the ID of the thread associated with this ThreadInfo.

Returns:
the ID of the associated thread.


"
6,ThreadInfo,2,String getThreadName(),True,,"

getThreadName
public String getThreadName()
Returns the name of the thread associated with this ThreadInfo.

Returns:
the name of the associated thread.


"
6,ThreadInfo,3,Thread.State getThreadState(),True,,"

getThreadState
public Thread.State getThreadState()
Returns the state of the thread associated with this ThreadInfo.

Returns:
Thread.State of the associated thread.


"
6,ThreadInfo,4,StackTraceElement[] getStackTrace(),True,,"

getStackTrace
public StackTraceElement[] getStackTrace()
Returns the stack trace of the thread
 associated with this ThreadInfo.
 If no stack trace was requested for this thread info, this method
 will return a zero-length array.
 If the returned array is of non-zero length then the first element of
 the array represents the top of the stack, which is the most recent
 method invocation in the sequence.  The last element of the array
 represents the bottom of the stack, which is the least recent method
 invocation in the sequence.

 Some Java virtual machines may, under some circumstances, omit one
 or more stack frames from the stack trace.  In the extreme case,
 a virtual machine that has no stack trace information concerning
 the thread associated with this ThreadInfo
 is permitted to return a zero-length array from this method.

Returns:
an array of StackTraceElement objects of the thread.


"
6,ThreadInfo,5,LockInfo getLockInfo(),True,,"

getLockInfo
public LockInfo getLockInfo()
Returns the LockInfo of an object for which
 the thread associated with this ThreadInfo
 is blocked waiting.
 A thread can be blocked waiting for one of the following:
 
an object monitor to be acquired for entering or reentering
     a synchronization block/method.
     The thread is in the BLOCKED
     state waiting to enter the synchronized statement
     or method.
     
an object monitor to be notified by another thread.
     The thread is in the WAITING
     or TIMED_WAITING state
     due to a call to the Object.wait method.
     
a synchronization object responsible for the thread parking.
     The thread is in the WAITING
     or TIMED_WAITING state
     due to a call to the
     LockSupport.park method.  The synchronization object
     is the object returned from
     LockSupport.getBlocker method. Typically it is an
      ownable synchronizer
     or a Condition.

This method returns null if the thread is not in any of
 the above conditions.

Returns:
LockInfo of an object for which the thread
         is blocked waiting if any; null otherwise.
Since:
1.6


"
