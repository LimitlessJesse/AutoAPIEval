ClassName,Method,Return Type,Description,Full Description
LockInfo,from(CompositeData cd),static LockInfo,Returns a LockInfo object represented by the given CompositeData.,"

from
public static LockInfo from(CompositeData cd)
Returns a LockInfo object represented by the
 given CompositeData.
 The given CompositeData must contain the following attributes:
 


Attribute Name
Type


className
java.lang.String


identityHashCode
java.lang.Integer




Parameters:
cd - CompositeData representing a LockInfo
Returns:
a LockInfo object represented
         by cd if cd is not null;
         null otherwise.
Throws:
IllegalArgumentException - if cd does not
   represent a LockInfo with the attributes described
   above.
Since:
1.8


"
LockInfo,getClassName(),String,Returns the fully qualified name of the class of the lock object.,"

getClassName
public String getClassName()
Returns the fully qualified name of the class of the lock object.

Returns:
the fully qualified name of the class of the lock object.


"
LockInfo,getIdentityHashCode(),int,Returns the identity hash code of the lock object returned from the System.identityHashCode(java.lang.Object) method.,"

getIdentityHashCode
public int getIdentityHashCode()
Returns the identity hash code of the lock object
 returned from the System.identityHashCode(java.lang.Object) method.

Returns:
the identity hash code of the lock object.


"
LockInfo,toString(),String,Returns a string representation of a lock.,"

toString
public String toString()
Returns a string representation of a lock.  The returned
 string representation consists of the name of the class of the
 lock object, the at-sign character `@', and the unsigned
 hexadecimal representation of the identity hash code
 of the object.  This method returns a string equals to the value of:
 

 lock.getClass().getName() + '@' + Integer.toHexString(System.identityHashCode(lock))
 
 where lock is the lock object.

Overrides:
toString in class Object
Returns:
the string representation of a lock.


"
ManagementFactory,getClassLoadingMXBean(),static ClassLoadingMXBean,Returns the managed bean for the class loading system of the Java virtual machine.,"

getClassLoadingMXBean
public static ClassLoadingMXBean getClassLoadingMXBean()
Returns the managed bean for the class loading system of
 the Java virtual machine.

Returns:
a ClassLoadingMXBean object for
 the Java virtual machine.


"
ManagementFactory,getCompilationMXBean(),static CompilationMXBean,Returns the managed bean for the compilation system of the Java virtual machine.,"

getCompilationMXBean
public static CompilationMXBean getCompilationMXBean()
Returns the managed bean for the compilation system of
 the Java virtual machine.  This method returns null
 if the Java virtual machine has no compilation system.

Returns:
a CompilationMXBean object for the Java virtual
   machine or null if the Java virtual machine has
   no compilation system.


"
ManagementFactory,getGarbageCollectorMXBeans(),static List<GarbageCollectorMXBean>,Returns a list of GarbageCollectorMXBean objects in the Java virtual machine.,"

getGarbageCollectorMXBeans
public static List<GarbageCollectorMXBean> getGarbageCollectorMXBeans()
Returns a list of GarbageCollectorMXBean objects
 in the Java virtual machine.
 The Java virtual machine may have one or more
 GarbageCollectorMXBean objects.
 It may add or remove GarbageCollectorMXBean
 during execution.

Returns:
a list of GarbageCollectorMXBean objects.


"
ManagementFactory,getMemoryManagerMXBeans(),static List<MemoryManagerMXBean>,Returns a list of MemoryManagerMXBean objects in the Java virtual machine.,"

getMemoryManagerMXBeans
public static List<MemoryManagerMXBean> getMemoryManagerMXBeans()
Returns a list of MemoryManagerMXBean objects
 in the Java virtual machine.
 The Java virtual machine can have one or more memory managers.
 It may add or remove memory managers during execution.

Returns:
a list of MemoryManagerMXBean objects.


"
ManagementFactory,getMemoryMXBean(),static MemoryMXBean,Returns the managed bean for the memory system of the Java virtual machine.,"

getMemoryMXBean
public static MemoryMXBean getMemoryMXBean()
Returns the managed bean for the memory system of
 the Java virtual machine.

Returns:
a MemoryMXBean object for the Java virtual machine.


"
ManagementFactory,getMemoryPoolMXBeans(),static List<MemoryPoolMXBean>,Returns a list of MemoryPoolMXBean objects in the Java virtual machine.,"

getMemoryPoolMXBeans
public static List<MemoryPoolMXBean> getMemoryPoolMXBeans()
Returns a list of MemoryPoolMXBean objects in the
 Java virtual machine.
 The Java virtual machine can have one or more memory pools.
 It may add or remove memory pools during execution.

Returns:
a list of MemoryPoolMXBean objects.


"
ManagementFactory,getOperatingSystemMXBean(),static OperatingSystemMXBean,Returns the managed bean for the operating system on which the Java virtual machine is running.,"

getOperatingSystemMXBean
public static OperatingSystemMXBean getOperatingSystemMXBean()
Returns the managed bean for the operating system on which
 the Java virtual machine is running.

Returns:
an OperatingSystemMXBean object for
 the Java virtual machine.


"
ManagementFactory,getPlatformManagementInterfaces(),static Set<Class<? extends PlatformManagedObject>>,"Returns the set of Class objects, subinterface of PlatformManagedObject, representing all management interfaces for monitoring and managing the Java platform.","

getPlatformManagementInterfaces
public static Set<Class<? extends PlatformManagedObject>> getPlatformManagementInterfaces()
Returns the set of Class objects, subinterface of
 PlatformManagedObject, representing
 all management interfaces for
 monitoring and managing the Java platform.

Returns:
the set of Class objects, subinterface of
 PlatformManagedObject representing
 the management interfaces for
 monitoring and managing the Java platform.
Since:
1.7


"
ManagementFactory,getPlatformMBeanServer(),static MBeanServer,Returns the platform MBeanServer.,"

getPlatformMBeanServer
public static MBeanServer getPlatformMBeanServer()
Returns the platform MBeanServer.
 On the first call to this method, it first creates the platform
 MBeanServer by calling the
 MBeanServerFactory.createMBeanServer
 method and registers each platform MXBean in this platform
 MBeanServer with its
 ObjectName.
 This method, in subsequent calls, will simply return the
 initially created platform MBeanServer.
 
 MXBeans that get created and destroyed dynamically, for example,
 memory pools and
 managers,
 will automatically be registered and deregistered into the platform
 MBeanServer.
 
 If the system property javax.management.builder.initial
 is set, the platform MBeanServer creation will be done
 by the specified MBeanServerBuilder.
 
 It is recommended that this platform MBeanServer also be used
 to register other application managed beans
 besides the platform MXBeans.
 This will allow all MBeans to be published through the same
 MBeanServer and hence allow for easier network publishing
 and discovery.
 Name conflicts with the platform MXBeans should be avoided.

Returns:
the platform MBeanServer; the platform
         MXBeans are registered into the platform MBeanServer
         at the first time this method is called.
Throws:
SecurityException - if there is a security manager
 and the caller does not have the permission required by
 MBeanServerFactory.createMBeanServer().
See Also:
MBeanServerFactory, 
MBeanServerFactory.createMBeanServer()


"
ManagementFactory,getPlatformMXBean(Class<T> mxbeanInterface),static <T extends PlatformManagedObject> T,Returns the platform MXBean implementing the given mxbeanInterface which is specified to have one single instance in the Java virtual machine.,"

getPlatformMXBean
public static <T extends PlatformManagedObject> T getPlatformMXBean(Class<T> mxbeanInterface)
Returns the platform MXBean implementing
 the given mxbeanInterface which is specified
 to have one single instance in the Java virtual machine.
 This method may return null if the management interface
 is not implemented in the Java virtual machine (for example,
 a Java virtual machine with no compilation system does not
 implement CompilationMXBean);
 otherwise, this method is equivalent to calling:
 
    getPlatformMXBeans(mxbeanInterface).get(0);
 

Type Parameters:
T - an mxbeanInterface type parameter
Parameters:
mxbeanInterface - a management interface for a platform
     MXBean with one single instance in the Java virtual machine
     if implemented.
Returns:
the platform MXBean that implements
 mxbeanInterface, or null if not exist.
Throws:
IllegalArgumentException - if mxbeanInterface
 is not a platform management interface or
 not a singleton platform MXBean.
Since:
1.7


"
ManagementFactory,"getPlatformMXBean(MBeanServerConnection connection, Class<T> mxbeanInterface)",static <T extends PlatformManagedObject> T,Returns the platform MXBean proxy for mxbeanInterface which is specified to have one single instance in a Java virtual machine and the proxy will forward the method calls through the given MBeanServerConnection.,"

getPlatformMXBean
public static <T extends PlatformManagedObject> T getPlatformMXBean(MBeanServerConnection connection,
                                                                    Class<T> mxbeanInterface)
                                                             throws IOException
Returns the platform MXBean proxy for
 mxbeanInterface which is specified to have one single
 instance in a Java virtual machine and the proxy will
 forward the method calls through the given MBeanServerConnection.
 This method may return null if the management interface
 is not implemented in the Java virtual machine being monitored
 (for example, a Java virtual machine with no compilation system
 does not implement CompilationMXBean);
 otherwise, this method is equivalent to calling:
 
     getPlatformMXBeans(connection, mxbeanInterface).get(0);
 

Type Parameters:
T - an mxbeanInterface type parameter
Parameters:
connection - the MBeanServerConnection to forward to.
mxbeanInterface - a management interface for a platform
     MXBean with one single instance in the Java virtual machine
     being monitored, if implemented.
Returns:
the platform MXBean proxy for
 forwarding the method calls of the mxbeanInterface
 through the given MBeanServerConnection,
 or null if not exist.
Throws:
IllegalArgumentException - if mxbeanInterface
 is not a platform management interface or
 not a singleton platform MXBean.
IOException - if a communication problem
 occurred when accessing the MBeanServerConnection.
Since:
1.7
See Also:
newPlatformMXBeanProxy(javax.management.MBeanServerConnection, java.lang.String, java.lang.Class<T>)


"
ManagementFactory,getPlatformMXBeans(Class<T> mxbeanInterface),static <T extends PlatformManagedObject> List<T>,Returns the list of platform MXBeans implementing the given mxbeanInterface in the Java virtual machine.,"

getPlatformMXBeans
public static <T extends PlatformManagedObject> List<T> getPlatformMXBeans(Class<T> mxbeanInterface)
Returns the list of platform MXBeans implementing
 the given mxbeanInterface in the Java
 virtual machine.
 The returned list may contain zero, one, or more instances.
 The number of instances in the returned list is defined
 in the specification of the given management interface.
 The order is undefined and there is no guarantee that
 the list returned is in the same order as previous invocations.

Type Parameters:
T - an mxbeanInterface type parameter
Parameters:
mxbeanInterface - a management interface for a platform
                        MXBean
Returns:
the list of platform MXBeans that implement
 mxbeanInterface.
Throws:
IllegalArgumentException - if mxbeanInterface
 is not a platform management interface.
Since:
1.7


"
ManagementFactory,"getPlatformMXBeans(MBeanServerConnection connection, Class<T> mxbeanInterface)",static <T extends PlatformManagedObject> List<T>,Returns the list of the platform MXBean proxies for forwarding the method calls of the mxbeanInterface through the given MBeanServerConnection.,"

getPlatformMXBeans
public static <T extends PlatformManagedObject> List<T> getPlatformMXBeans(MBeanServerConnection connection,
                                                                           Class<T> mxbeanInterface)
                                                                    throws IOException
Returns the list of the platform MXBean proxies for
 forwarding the method calls of the mxbeanInterface
 through the given MBeanServerConnection.
 The returned list may contain zero, one, or more instances.
 The number of instances in the returned list is defined
 in the specification of the given management interface.
 The order is undefined and there is no guarantee that
 the list returned is in the same order as previous invocations.

Type Parameters:
T - an mxbeanInterface type parameter
Parameters:
connection - the MBeanServerConnection to forward to.
mxbeanInterface - a management interface for a platform
                        MXBean
Returns:
the list of platform MXBean proxies for
 forwarding the method calls of the mxbeanInterface
 through the given MBeanServerConnection.
Throws:
IllegalArgumentException - if mxbeanInterface
 is not a platform management interface.
IOException - if a communication problem
 occurred when accessing the MBeanServerConnection.
Since:
1.7
See Also:
newPlatformMXBeanProxy(javax.management.MBeanServerConnection, java.lang.String, java.lang.Class<T>)


"
ManagementFactory,getRuntimeMXBean(),static RuntimeMXBean,Returns the managed bean for the runtime system of the Java virtual machine.,"

getRuntimeMXBean
public static RuntimeMXBean getRuntimeMXBean()
Returns the managed bean for the runtime system of
 the Java virtual machine.

Returns:
a RuntimeMXBean object for the Java virtual machine.


"
ManagementFactory,getThreadMXBean(),static ThreadMXBean,Returns the managed bean for the thread system of the Java virtual machine.,"

getThreadMXBean
public static ThreadMXBean getThreadMXBean()
Returns the managed bean for the thread system of
 the Java virtual machine.

Returns:
a ThreadMXBean object for the Java virtual machine.


"
ManagementFactory,"newPlatformMXBeanProxy(MBeanServerConnection connection, String mxbeanName, Class<T> mxbeanInterface)",static <T> T,Returns a proxy for a platform MXBean interface of a given MXBean name that forwards its method calls through the given MBeanServerConnection.,"

newPlatformMXBeanProxy
public static <T> T newPlatformMXBeanProxy(MBeanServerConnection connection,
                                           String mxbeanName,
                                           Class<T> mxbeanInterface)
                                    throws IOException
Returns a proxy for a platform MXBean interface of a
 given MXBean name
 that forwards its method calls through the given
 MBeanServerConnection.

 This method is equivalent to:
 
Proxy.newProxyInstance(mxbeanInterface.getClassLoader(),
        new Class[] { mxbeanInterface }, handler)


 where handler is an InvocationHandler to which method invocations to the MXBean interface
 are dispatched. This handler converts an input parameter
 from an MXBean data type to its mapped open type before forwarding
 to the MBeanServer and converts a return value from
 an MXBean method call through the MBeanServer
 from an open type to the corresponding return type declared in
 the MXBean interface.

 
 If the MXBean is a notification emitter (i.e.,
 it implements
 NotificationEmitter),
 both the mxbeanInterface and NotificationEmitter
 will be implemented by this proxy.

 
Notes:

Using an MXBean proxy is a convenience remote access to
 a platform MXBean of a running virtual machine.  All method
 calls to the MXBean proxy are forwarded to an
 MBeanServerConnection where
 IOException may be thrown
 when the communication problem occurs with the connector server.
 An application remotely accesses the platform MXBeans using
 proxy should prepare to catch IOException as if
 accessing with the MBeanServerConnector interface.
When a client application is designed to remotely access MXBeans
 for a running virtual machine whose version is different than
 the version on which the application is running,
 it should prepare to catch
 InvalidObjectException
 which is thrown when an MXBean proxy receives a name of an
 enum constant which is missing in the enum class loaded in
 the client application. 
MBeanServerInvocationHandler or its
 newProxyInstance method cannot be used to create
 a proxy for a platform MXBean. The proxy object created
 by MBeanServerInvocationHandler does not handle
 the properties of the platform MXBeans described in
 the class specification.



Type Parameters:
T - an mxbeanInterface type parameter
Parameters:
connection - the MBeanServerConnection to forward to.
mxbeanName - the name of a platform MXBean within
 connection to forward to. mxbeanName must be
 in the format of ObjectName.
mxbeanInterface - the MXBean interface to be implemented
 by the proxy.
Returns:
a proxy for a platform MXBean interface of a
 given MXBean name
 that forwards its method calls through the given
 MBeanServerConnection, or null if not exist.
Throws:
IllegalArgumentException - if
 
mxbeanName is not with a valid
     ObjectName format, or
the named MXBean in the connection is
     not a MXBean provided by the platform, or
the named MXBean is not registered in the
     MBeanServerConnection, or
the named MXBean is not an instance of the given
     mxbeanInterface

IOException - if a communication problem
 occurred when accessing the MBeanServerConnection.


"
MemoryNotificationInfo,from(CompositeData cd),static MemoryNotificationInfo,Returns a MemoryNotificationInfo object represented by the given CompositeData.,"

from
public static MemoryNotificationInfo from(CompositeData cd)
Returns a MemoryNotificationInfo object represented by the
 given CompositeData.
 The given CompositeData must contain
 the following attributes:
 


Attribute Name
Type


poolName
java.lang.String


usage
javax.management.openmbean.CompositeData


count
java.lang.Long




Parameters:
cd - CompositeData representing a
           MemoryNotificationInfo
Returns:
a MemoryNotificationInfo object represented
         by cd if cd is not null;
         null otherwise.
Throws:
IllegalArgumentException - if cd does not
   represent a MemoryNotificationInfo object.


"
MemoryNotificationInfo,getCount(),long,Returns the number of times that the memory usage has crossed a threshold when the notification was constructed.,"

getCount
public long getCount()
Returns the number of times that the memory usage has crossed
 a threshold when the notification was constructed.
 For usage threshold notifications, this count will be the
 threshold
 count.  For collection threshold notifications,
 this count will be the
 collection usage threshold count.

Returns:
the number of times that the memory usage has crossed
 a threshold when the notification was constructed.


"
MemoryNotificationInfo,getPoolName(),String,Returns the name of the memory pool that triggers this notification.,"

getPoolName
public String getPoolName()
Returns the name of the memory pool that triggers this notification.
 The memory pool usage has crossed a threshold.

Returns:
the name of the memory pool that triggers this notification.


"
MemoryNotificationInfo,getUsage(),MemoryUsage,Returns the memory usage of the memory pool when this notification was constructed.,"

getUsage
public MemoryUsage getUsage()
Returns the memory usage of the memory pool
 when this notification was constructed.

Returns:
the memory usage of the memory pool
 when this notification was constructed.


"
MemoryUsage,from(CompositeData cd),static MemoryUsage,Returns a MemoryUsage object represented by the given CompositeData.,"

from
public static MemoryUsage from(CompositeData cd)
Returns a MemoryUsage object represented by the
 given CompositeData. The given CompositeData
 must contain the following attributes:

 


Attribute Name
Type


init
java.lang.Long


used
java.lang.Long


committed
java.lang.Long


max
java.lang.Long




Parameters:
cd - CompositeData representing a MemoryUsage
Returns:
a MemoryUsage object represented by cd
         if cd is not null;
         null otherwise.
Throws:
IllegalArgumentException - if cd does not
   represent a MemoryUsage with the attributes described
   above.


"
MemoryUsage,getCommitted(),long,Returns the amount of memory in bytes that is committed for the Java virtual machine to use.,"

getCommitted
public long getCommitted()
Returns the amount of memory in bytes that is committed for
 the Java virtual machine to use.  This amount of memory is
 guaranteed for the Java virtual machine to use.

Returns:
the amount of committed memory in bytes.


"
MemoryUsage,getInit(),long,Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management.,"

getInit
public long getInit()
Returns the amount of memory in bytes that the Java virtual machine
 initially requests from the operating system for memory management.
 This method returns -1 if the initial memory size is undefined.

Returns:
the initial size of memory in bytes;
 -1 if undefined.


"
MemoryUsage,getMax(),long,Returns the maximum amount of memory in bytes that can be used for memory management.,"

getMax
public long getMax()
Returns the maximum amount of memory in bytes that can be
 used for memory management.  This method returns -1
 if the maximum memory size is undefined.

  This amount of memory is not guaranteed to be available
 for memory management if it is greater than the amount of
 committed memory.  The Java virtual machine may fail to allocate
 memory even if the amount of used memory does not exceed this
 maximum size.

Returns:
the maximum amount of memory in bytes;
 -1 if undefined.


"
MemoryUsage,getUsed(),long,Returns the amount of used memory in bytes.,"

getUsed
public long getUsed()
Returns the amount of used memory in bytes.

Returns:
the amount of used memory in bytes.


"
MemoryUsage,toString(),String,Returns a descriptive representation of this memory usage.,"

toString
public String toString()
Returns a descriptive representation of this memory usage.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MonitorInfo,from(CompositeData cd),static MonitorInfo,Returns a MonitorInfo object represented by the given CompositeData.,"

from
public static MonitorInfo from(CompositeData cd)
Returns a MonitorInfo object represented by the
 given CompositeData.
 The given CompositeData must contain the following attributes
 as well as the attributes specified in the
 
 mapped type for the LockInfo class:
 


Attribute Name
Type


lockedStackFrame
CompositeData as specified in the
       stackTrace
       attribute defined in the ThreadInfo.from method.
       


lockedStackDepth
java.lang.Integer




Parameters:
cd - CompositeData representing a MonitorInfo
Returns:
a MonitorInfo object represented
         by cd if cd is not null;
         null otherwise.
Throws:
IllegalArgumentException - if cd does not
   represent a MonitorInfo with the attributes described
   above.


"
MonitorInfo,getLockedStackDepth(),int,Returns the depth in the stack trace where the object monitor was locked.,"

getLockedStackDepth
public int getLockedStackDepth()
Returns the depth in the stack trace where the object monitor
 was locked.  The depth is the index to the StackTraceElement
 array returned in the ThreadInfo.getStackTrace() method.

Returns:
the depth in the stack trace where the object monitor
         was locked, or a negative number if not available.


"
MonitorInfo,getLockedStackFrame(),StackTraceElement,Returns the stack frame that locked the object monitor.,"

getLockedStackFrame
public StackTraceElement getLockedStackFrame()
Returns the stack frame that locked the object monitor.

Returns:
StackTraceElement that locked the object monitor,
         or null if not available.


"
ThreadInfo,from(CompositeData cd),static ThreadInfo,Returns a ThreadInfo object represented by the given CompositeData.,"

from
public static ThreadInfo from(CompositeData cd)
Returns a ThreadInfo object represented by the
 given CompositeData.
 The given CompositeData must contain the following attributes
 unless otherwise specified below:
 


Attribute Name
Type


threadId
java.lang.Long


threadName
java.lang.String


threadState
java.lang.String


suspended
java.lang.Boolean


inNative
java.lang.Boolean


blockedCount
java.lang.Long


blockedTime
java.lang.Long


waitedCount
java.lang.Long


waitedTime
java.lang.Long


lockInfo
javax.management.openmbean.CompositeData
       - the mapped type for LockInfo as specified in the
         LockInfo.from(javax.management.openmbean.CompositeData) method.
       
       If cd does not contain this attribute,
       the LockInfo object will be constructed from
       the value of the lockName attribute. 


lockName
java.lang.String


lockOwnerId
java.lang.Long


lockOwnerName
java.lang.String


stackTrace
javax.management.openmbean.CompositeData[]

       Each element is a CompositeData representing
       StackTraceElement containing the following attributes:
       


Attribute Name
Type


className
java.lang.String


methodName
java.lang.String


fileName
java.lang.String


lineNumber
java.lang.Integer


nativeMethod
java.lang.Boolean






lockedMonitors
javax.management.openmbean.CompositeData[]
       whose element type is the mapped type for
       MonitorInfo as specified in the
       Monitor.from method.
       
       If cd does not contain this attribute,
       this attribute will be set to an empty array. 


lockedSynchronizers
javax.management.openmbean.CompositeData[]
       whose element type is the mapped type for
       LockInfo as specified in the LockInfo.from(javax.management.openmbean.CompositeData) method.
       
       If cd does not contain this attribute,
       this attribute will be set to an empty array. 




Parameters:
cd - CompositeData representing a ThreadInfo
Returns:
a ThreadInfo object represented
         by cd if cd is not null;
         null otherwise.
Throws:
IllegalArgumentException - if cd does not
   represent a ThreadInfo with the attributes described
   above.


"
ThreadInfo,getBlockedCount(),long,Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor.,"

getBlockedCount
public long getBlockedCount()
Returns the total number of times that
 the thread associated with this ThreadInfo
 blocked to enter or reenter a monitor.
 I.e. the number of times a thread has been in the
 BLOCKED state.

Returns:
the total number of times that the thread
 entered the BLOCKED state.


"
ThreadInfo,getBlockedTime(),long,Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled.,"

getBlockedTime
public long getBlockedTime()
Returns the approximate accumulated elapsed time (in milliseconds)
 that the thread associated with this ThreadInfo
 has blocked to enter or reenter a monitor
 since thread contention monitoring is enabled.
 I.e. the total accumulated time the thread has been in the
 BLOCKED state since thread
 contention monitoring was last enabled.
 This method returns -1 if thread contention monitoring
 is disabled.

 The Java virtual machine may measure the time with a high
 resolution timer.  This statistic is reset when
 the thread contention monitoring is reenabled.

Returns:
the approximate accumulated elapsed time in milliseconds
 that a thread entered the BLOCKED state;
 -1 if thread contention monitoring is disabled.
Throws:
UnsupportedOperationException - if the Java
 virtual machine does not support this operation.
See Also:
ThreadMXBean.isThreadContentionMonitoringSupported(), 
ThreadMXBean.setThreadContentionMonitoringEnabled(boolean)


"
ThreadInfo,getLockedMonitors(),MonitorInfo[],"Returns an array of MonitorInfo objects, each of which represents an object monitor currently locked by the thread associated with this ThreadInfo.","

getLockedMonitors
public MonitorInfo[] getLockedMonitors()
Returns an array of MonitorInfo objects, each of which
 represents an object monitor currently locked by the thread
 associated with this ThreadInfo.
 If no locked monitor was requested for this thread info or
 no monitor is locked by the thread, this method
 will return a zero-length array.

Returns:
an array of MonitorInfo objects representing
         the object monitors locked by the thread.
Since:
1.6


"
ThreadInfo,getLockedSynchronizers(),LockInfo[],"Returns an array of LockInfo objects, each of which represents an ownable synchronizer currently locked by the thread associated with this ThreadInfo.","

getLockedSynchronizers
public LockInfo[] getLockedSynchronizers()
Returns an array of LockInfo objects, each of which
 represents an ownable
 synchronizer currently locked by the thread associated with
 this ThreadInfo.  If no locked synchronizer was
 requested for this thread info or no synchronizer is locked by
 the thread, this method will return a zero-length array.

Returns:
an array of LockInfo objects representing
         the ownable synchronizers locked by the thread.
Since:
1.6


"
ThreadInfo,getLockInfo(),LockInfo,Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting.,"

getLockInfo
public LockInfo getLockInfo()
Returns the LockInfo of an object for which
 the thread associated with this ThreadInfo
 is blocked waiting.
 A thread can be blocked waiting for one of the following:
 
an object monitor to be acquired for entering or reentering
     a synchronization block/method.
     The thread is in the BLOCKED
     state waiting to enter the synchronized statement
     or method.
     
an object monitor to be notified by another thread.
     The thread is in the WAITING
     or TIMED_WAITING state
     due to a call to the Object.wait method.
     
a synchronization object responsible for the thread parking.
     The thread is in the WAITING
     or TIMED_WAITING state
     due to a call to the
     LockSupport.park method.  The synchronization object
     is the object returned from
     LockSupport.getBlocker method. Typically it is an
      ownable synchronizer
     or a Condition.

This method returns null if the thread is not in any of
 the above conditions.

Returns:
LockInfo of an object for which the thread
         is blocked waiting if any; null otherwise.
Since:
1.6


"
ThreadInfo,getLockName(),String,Returns the string representation of an object for which the thread associated with this ThreadInfo is blocked waiting.,"

getLockName
public String getLockName()
Returns the string representation
 of an object for which the thread associated with this
 ThreadInfo is blocked waiting.
 This method is equivalent to calling:
 

 getLockInfo().toString()
 
This method will return null if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.

Returns:
the string representation of the object on which
 the thread is blocked if any;
 null otherwise.
See Also:
getLockInfo()


"
ThreadInfo,getLockOwnerId(),long,Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting.,"

getLockOwnerId
public long getLockOwnerId()
Returns the ID of the thread which owns the object
 for which the thread associated with this ThreadInfo
 is blocked waiting.
 This method will return -1 if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.

Returns:
the thread ID of the owner thread of the object
 this thread is blocked on;
 -1 if this thread is not blocked
 or if the object is not owned by any thread.
See Also:
getLockInfo()


"
ThreadInfo,getLockOwnerName(),String,Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting.,"

getLockOwnerName
public String getLockOwnerName()
Returns the name of the thread which owns the object
 for which the thread associated with this ThreadInfo
 is blocked waiting.
 This method will return null if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.

Returns:
the name of the thread that owns the object
 this thread is blocked on;
 null if this thread is not blocked
 or if the object is not owned by any thread.
See Also:
getLockInfo()


"
ThreadInfo,getStackTrace(),StackTraceElement[],Returns the stack trace of the thread associated with this ThreadInfo.,"

getStackTrace
public StackTraceElement[] getStackTrace()
Returns the stack trace of the thread
 associated with this ThreadInfo.
 If no stack trace was requested for this thread info, this method
 will return a zero-length array.
 If the returned array is of non-zero length then the first element of
 the array represents the top of the stack, which is the most recent
 method invocation in the sequence.  The last element of the array
 represents the bottom of the stack, which is the least recent method
 invocation in the sequence.

 Some Java virtual machines may, under some circumstances, omit one
 or more stack frames from the stack trace.  In the extreme case,
 a virtual machine that has no stack trace information concerning
 the thread associated with this ThreadInfo
 is permitted to return a zero-length array from this method.

Returns:
an array of StackTraceElement objects of the thread.


"
ThreadInfo,getThreadId(),long,Returns the ID of the thread associated with this ThreadInfo.,"

getThreadId
public long getThreadId()
Returns the ID of the thread associated with this ThreadInfo.

Returns:
the ID of the associated thread.


"
ThreadInfo,getThreadName(),String,Returns the name of the thread associated with this ThreadInfo.,"

getThreadName
public String getThreadName()
Returns the name of the thread associated with this ThreadInfo.

Returns:
the name of the associated thread.


"
ThreadInfo,getThreadState(),Thread.State,Returns the state of the thread associated with this ThreadInfo.,"

getThreadState
public Thread.State getThreadState()
Returns the state of the thread associated with this ThreadInfo.

Returns:
Thread.State of the associated thread.


"
ThreadInfo,getWaitedCount(),long,Returns the total number of times that the thread associated with this ThreadInfo waited for notification.,"

getWaitedCount
public long getWaitedCount()
Returns the total number of times that
 the thread associated with this ThreadInfo
 waited for notification.
 I.e. the number of times that a thread has been
 in the WAITING
 or TIMED_WAITING state.

Returns:
the total number of times that the thread
 was in the WAITING or TIMED_WAITING state.


"
ThreadInfo,getWaitedTime(),long,Returns the approximate accumulated elapsed time (in milliseconds) that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled.,"

getWaitedTime
public long getWaitedTime()
Returns the approximate accumulated elapsed time (in milliseconds)
 that the thread associated with this ThreadInfo
 has waited for notification
 since thread contention monitoring is enabled.
 I.e. the total accumulated time the thread has been in the
 WAITING
 or TIMED_WAITING state
 since thread contention monitoring is enabled.
 This method returns -1 if thread contention monitoring
 is disabled.

 The Java virtual machine may measure the time with a high
 resolution timer.  This statistic is reset when
 the thread contention monitoring is reenabled.

Returns:
the approximate accumulated elapsed time in milliseconds
 that a thread has been in the WAITING or
 TIMED_WAITING state;
 -1 if thread contention monitoring is disabled.
Throws:
UnsupportedOperationException - if the Java
 virtual machine does not support this operation.
See Also:
ThreadMXBean.isThreadContentionMonitoringSupported(), 
ThreadMXBean.setThreadContentionMonitoringEnabled(boolean)


"
ThreadInfo,isInNative(),boolean,Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface (JNI).,"

isInNative
public boolean isInNative()
Tests if the thread associated with this ThreadInfo
 is executing native code via the Java Native Interface (JNI).
 The JNI native code does not include
 the virtual machine support code or the compiled native
 code generated by the virtual machine.

Returns:
true if the thread is executing native code;
         false otherwise.


"
ThreadInfo,isSuspended(),boolean,Tests if the thread associated with this ThreadInfo is suspended.,"

isSuspended
public boolean isSuspended()
Tests if the thread associated with this ThreadInfo
 is suspended.  This method returns true if
 Thread.suspend() has been called.

Returns:
true if the thread is suspended;
         false otherwise.


"
ThreadInfo,toString(),String,Returns a string representation of this thread info.,"

toString
public String toString()
Returns a string representation of this thread info.
 The format of this string depends on the implementation.
 The returned string will typically include
 the thread name,
 the thread ID,
 its state,
 and a stack trace if any.

Overrides:
toString in class Object
Returns:
a string representation of this thread info.


"
