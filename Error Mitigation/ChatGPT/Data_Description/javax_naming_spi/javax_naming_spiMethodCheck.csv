Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DirectoryManager,1,"Object getAttribute(DirContext ctx, Name name)",False,,NULL
0,DirectoryManager,2,"Attributes getAttributes(DirContext ctx, Name name)",False,,NULL
0,DirectoryManager,3,"void modifyAttributes(DirContext ctx, Name name, ModificationItem[] mods)",False,,NULL
0,DirectoryManager,4,"void bind(DirContext ctx, Name name, Object obj, Attributes attrs)",False,,NULL
0,DirectoryManager,5,"void rebind(DirContext ctx, Name name, Object obj, Attributes attrs)",False,,NULL
1,DirStateFactory.Result,1,Object getObject(),True,,"

getObject
public Object getObject()
Retrieves the object to be bound.

Returns:
The possibly null object to be bound.


"
1,DirStateFactory.Result,2,Attributes getAttributes(),True,,"

getAttributes
public Attributes getAttributes()
Retrieves the attributes to be bound.

Returns:
The possibly null attributes to be bound.


"
1,DirStateFactory.Result,3,NameParser getParser(),False,,NULL
1,DirStateFactory.Result,4,Name getName(),False,,NULL
1,DirStateFactory.Result,5,Object getState(),False,,NULL
2,NamingManager,1,"Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)",True,,"

getObjectInstance
public static Object getObjectInstance(Object refInfo,
                                       Name name,
                                       Context nameCtx,
                                       Hashtable<?,?> environment)
                                throws Exception
Creates an instance of an object for the specified object
 and environment.
 
 If an object factory builder has been installed, it is used to
 create a factory for creating the object.
 Otherwise, the following rules are used to create the object:

If refInfo is a Reference
    or Referenceable containing a factory class name,
    use the named factory to create the object.
    Return refInfo if the factory cannot be created.
    Under JDK 1.1, if the factory class must be loaded from a location
    specified in the reference, a SecurityManager must have
    been installed or the factory creation will fail.
    If an exception is encountered while creating the factory,
    it is passed up to the caller.
 If refInfo is a Reference or
    Referenceable with no factory class name,
    and the address or addresses are StringRefAddrs with
    address type ""URL"",
    try the URL context factory corresponding to each URL's scheme id
    to create the object (see getURLContext()).
    If that fails, continue to the next step.
  Use the object factories specified in
    the Context.OBJECT_FACTORIES property of the environment,
    and of the provider resource file associated with
    nameCtx, in that order.
    The value of this property is a colon-separated list of factory
    class names that are tried in order, and the first one that succeeds
    in creating an object is the one used.
    If none of the factories can be loaded,
    return refInfo.
    If an exception is encountered while creating the object, the
    exception is passed up to the caller.


 Service providers that implement the DirContext
 interface should use
 DirectoryManager.getObjectInstance(), not this method.
 Service providers that implement only the Context
 interface should use this method.
 
 Note that an object factory (an object that implements the ObjectFactory
 interface) must be public and must have a public constructor that
 accepts no arguments.
 
 The name and nameCtx parameters may
 optionally be used to specify the name of the object being created.
 name is the name of the object, relative to context
 nameCtx.  This information could be useful to the object
 factory or to the object implementation.
  If there are several possible contexts from which the object
  could be named -- as will often be the case -- it is up to
  the caller to select one.  A good rule of thumb is to select the
 ""deepest"" context available.
 If nameCtx is null, name is relative
 to the default initial context.  If no name is being specified, the
 name parameter should be null.

Parameters:
refInfo - The possibly null object for which to create an object.
name - The name of this object relative to nameCtx.
          Specifying a name is optional; if it is
          omitted, name should be null.
nameCtx - The context relative to which the name
          parameter is specified.  If null, name is
          relative to the default initial context.
environment - The possibly null environment to
          be used in the creation of the object factory and the object.
Returns:
An object created using refInfo; or
          refInfo if an object cannot be created using
          the algorithm described above.
Throws:
NamingException - if a naming exception was encountered
  while attempting to get a URL context, or if one of the
          factories accessed throws a NamingException.
Exception - if one of the factories accessed throws an
          exception, or if an error was encountered while loading
          and instantiating the factory and object classes.
          A factory should only throw an exception if it does not want
          other factories to be used in an attempt to create an object.
  See ObjectFactory.getObjectInstance().
See Also:
getURLContext(java.lang.String, java.util.Hashtable<?, ?>), 
ObjectFactory, 
ObjectFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)


"
2,NamingManager,2,"Context getInitialContext(Hashtable<?, ?> environment)",True,,"

getInitialContext
public static Context getInitialContext(Hashtable<?,?> env)
                                 throws NamingException
Creates an initial context using the specified environment
 properties.

 If an InitialContextFactoryBuilder has been installed,
 it is used to create the factory for creating the initial context.
 Otherwise, the class specified in the
 Context.INITIAL_CONTEXT_FACTORY environment property is used.
 Note that an initial context factory (an object that implements the
 InitialContextFactory interface) must be public and must have a
 public constructor that accepts no arguments.

Parameters:
env - The possibly null environment properties used when
                  creating the context.
Returns:
A non-null initial context.
Throws:
NoInitialContextException - If the
          Context.INITIAL_CONTEXT_FACTORY property
         is not found or names a nonexistent
         class or a class that cannot be instantiated,
          or if the initial context could not be created for some other
          reason.
NamingException - If some other naming exception was encountered.
See Also:
InitialContext, 
InitialDirContext


"
2,NamingManager,3,"Object getStateToBind(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)",True,,"

getStateToBind
public static Object getStateToBind(Object obj,
                                    Name name,
                                    Context nameCtx,
                                    Hashtable<?,?> environment)
                             throws NamingException
Retrieves the state of an object for binding.
 
 Service providers that implement the DirContext interface
 should use DirectoryManager.getStateToBind(), not this method.
 Service providers that implement only the Context interface
 should use this method.

 This method uses the specified state factories in
 the Context.STATE_FACTORIES property from the environment
 properties, and from the provider resource file associated with
 nameCtx, in that order.
    The value of this property is a colon-separated list of factory
    class names that are tried in order, and the first one that succeeds
    in returning the object's state is the one used.
 If no object's state can be retrieved in this way, return the
 object itself.
    If an exception is encountered while retrieving the state, the
    exception is passed up to the caller.
 
 Note that a state factory
 (an object that implements the StateFactory
 interface) must be public and must have a public constructor that
 accepts no arguments.
 
 The name and nameCtx parameters may
 optionally be used to specify the name of the object being created.
 See the description of ""Name and Context Parameters"" in
 ObjectFactory.getObjectInstance()
 for details.
 
 This method may return a Referenceable object.  The
 service provider obtaining this object may choose to store it
 directly, or to extract its reference (using
 Referenceable.getReference()) and store that instead.

Parameters:
obj - The non-null object for which to get state to bind.
name - The name of this object relative to nameCtx,
          or null if no name is specified.
nameCtx - The context relative to which the name
          parameter is specified, or null if name is
          relative to the default initial context.
environment - The possibly null environment to
          be used in the creation of the state factory and
  the object's state.
Returns:
The non-null object representing obj's state for
  binding.  It could be the object (obj) itself.
Throws:
NamingException - If one of the factories accessed throws an
          exception, or if an error was encountered while loading
          and instantiating the factory and object classes.
          A factory should only throw an exception if it does not want
          other factories to be used in an attempt to create an object.
  See StateFactory.getStateToBind().
Since:
1.3
See Also:
StateFactory, 
StateFactory.getStateToBind(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>), 
DirectoryManager.getStateToBind(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>, javax.naming.directory.Attributes)


"
2,NamingManager,4,"Object getURLContext(String scheme, Hashtable<?, ?> environment)",False,,NULL
2,NamingManager,5,Object getContinuationContext(CannotProceedException cpe),False,,NULL
3,ResolveResult,1,Object getResolvedObj(),True,,"

getResolvedObj
public Object getResolvedObj()
Retrieves the Object to which resolution was successful.

Returns:
The Object to which resolution was successful. Cannot be null.
See Also:
setResolvedObj(java.lang.Object)


"
3,ResolveResult,2,NameParser getParser(),False,,NULL
3,ResolveResult,3,Name getName(),False,,NULL
3,ResolveResult,4,Object getRemainingName(),False,,NULL
3,ResolveResult,5,boolean isRelative(),False,,NULL
