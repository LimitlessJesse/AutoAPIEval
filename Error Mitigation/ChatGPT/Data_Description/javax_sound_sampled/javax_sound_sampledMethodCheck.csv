Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AudioFileFormat,1,int getByteLength(),True,,"

getByteLength
public int getByteLength()
Obtains the size in bytes of the entire audio file (not just its audio data).

Returns:
the audio file length in bytes
See Also:
AudioSystem.NOT_SPECIFIED


"
0,AudioFileFormat,2,int getFrameLength(),True,,"

getFrameLength
public int getFrameLength()
Obtains the length of the audio data contained in the file, expressed in sample frames.

Returns:
the number of sample frames of audio data in the file
See Also:
AudioSystem.NOT_SPECIFIED


"
0,AudioFileFormat,3,AudioFormat getFormat(),True,,"

getFormat
public AudioFormat getFormat()
Obtains the format of the audio data contained in the audio file.

Returns:
the audio data format


"
0,AudioFileFormat,4,"Map<String, Object> properties()",False,,NULL
0,AudioFileFormat,5,String getType(),False,,NULL
1,AudioFileFormat.Type,1,String toString(),True,,"

toString
public final String toString()
Provides the file type's name as the String representation
 of the file type.

Overrides:
toString in class Object
Returns:
the file type's name


"
1,AudioFileFormat.Type,2,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
1,AudioFileFormat.Type,3,int hashCode(),True,,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
1,AudioFileFormat.Type,4,AudioFileFormat.Type[] values(),False,,NULL
1,AudioFileFormat.Type,5,AudioFileFormat.Type valueOf(String name),False,,NULL
2,AudioFormat,1,int getChannels(),True,,"

getChannels
public int getChannels()
Obtains the number of channels.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a return value of
 AudioSystem.NOT_SPECIFIED means that any (positive) number of channels is
 acceptable.

Returns:
The number of channels (1 for mono, 2 for stereo, etc.),
 or AudioSystem.NOT_SPECIFIED
See Also:
AudioSystem.NOT_SPECIFIED


"
2,AudioFormat,2,float getSampleRate(),True,,"

getSampleRate
public float getSampleRate()
Obtains the sample rate.
 For compressed formats, the return value is the sample rate of the uncompressed
 audio data.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample rate of
 AudioSystem.NOT_SPECIFIED means that any sample rate is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the sample rate is not defined for this audio format.

Returns:
the number of samples per second,
 or AudioSystem.NOT_SPECIFIED
See Also:
getFrameRate(), 
AudioSystem.NOT_SPECIFIED


"
2,AudioFormat,3,int getSampleSizeInBits(),True,,"

getSampleSizeInBits
public int getSampleSizeInBits()
Obtains the size of a sample.
 For compressed formats, the return value is the sample size of the
 uncompressed audio data.
 When this AudioFormat is used for queries (e.g. AudioSystem.isConversionSupported) or capabilities (e.g. DataLine.Info.getFormats), a sample size of
 AudioSystem.NOT_SPECIFIED means that any sample size is
 acceptable. AudioSystem.NOT_SPECIFIED is also returned when
 the sample size is not defined for this audio format.

Returns:
the number of bits in each sample,
 or AudioSystem.NOT_SPECIFIED
See Also:
getFrameSize(), 
AudioSystem.NOT_SPECIFIED


"
2,AudioFormat,4,boolean isBigEndian(),True,,"

isBigEndian
public boolean isBigEndian()
Indicates whether the audio data is stored in big-endian or little-endian
 byte order.  If the sample size is not more than one byte, the return value is
 irrelevant.

Returns:
true if the data is stored in big-endian byte order,
 false if little-endian


"
2,AudioFormat,5,boolean isSigned(),False,,NULL
3,AudioFormat.Encoding,1,String toString(),True,,"

toString
public final String toString()
Provides the String representation of the encoding.  This String is
 the same name that was passed to the constructor.  For the predefined encodings, the name
 is similar to the encoding's variable (field) name.  For example, PCM_SIGNED.toString() returns
 the name ""pcm_signed"".

Overrides:
toString in class Object
Returns:
the encoding name


"
3,AudioFormat.Encoding,2,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
3,AudioFormat.Encoding,3,int hashCode(),True,,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
3,AudioFormat.Encoding,4,Encoding[] values(),False,,NULL
3,AudioFormat.Encoding,5,Encoding valueOf(String name),False,,NULL
4,AudioInputStream,1,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to a specified maximum number of bytes of data from the audio
 stream, putting them into the given byte array.
 This method will always read an integral number of frames.
 If len does not specify an integral number
 of frames, a maximum of len - (len % frameSize)
  bytes will be read.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read
off - the offset, from the beginning of array b, at which
 the data will be written
len - the maximum number of bytes to read
Returns:
the total number of bytes read into the buffer, or -1 if there
 is no more data because the end of the stream has been reached
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[]), 
read(), 
skip(long), 
available()


"
4,AudioInputStream,2,int available(),True,,"

available
public int available()
              throws IOException
Returns the maximum number of bytes that can be read (or skipped over) from this
 audio input stream without blocking.  This limit applies only to the next invocation of
 a read or skip method for this audio input stream; the limit
 can vary each time these methods are invoked.
 Depending on the underlying stream,an IOException may be thrown if this
 stream is closed.

Overrides:
available in class InputStream
Returns:
the number of bytes that can be read from this audio input stream without blocking
Throws:
IOException - if an input or output error occurs
See Also:
read(byte[], int, int), 
read(byte[]), 
read(), 
skip(long)


"
4,AudioInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skips over and discards a specified number of bytes from this
 audio input stream.

Overrides:
skip in class InputStream
Parameters:
n - the requested number of bytes to be skipped
Returns:
the actual number of bytes skipped
Throws:
IOException - if an input or output error occurs
See Also:
read(), 
available()


"
4,AudioInputStream,4,int getFrameLength(),False,,NULL
4,AudioInputStream,5,AudioFormat getFormat(),True,,"

getFormat
public AudioFormat getFormat()
Obtains the audio format of the sound data in this audio input stream.

Returns:
an audio format object describing this stream's format


"
5,AudioPermission,1,void checkPermission(AudioPermission perm),False,,NULL
5,AudioPermission,2,String getActions(),False,,NULL
5,AudioPermission,3,boolean implies(Permission permission),False,,NULL
5,AudioPermission,4,PermissionCollection newPermissionCollection(),False,,NULL
5,AudioPermission,5,String toString(),False,,NULL
6,AudioSystem,1,Mixer.Info[] getMixerInfo(),True,,"

getMixerInfo
public static Mixer.Info[] getMixerInfo()
Obtains an array of mixer info objects that represents
 the set of audio mixers that are currently installed on the system.

Returns:
an array of info objects for the currently installed mixers.  If no mixers
 are available on the system, an array of length 0 is returned.
See Also:
getMixer(javax.sound.sampled.Mixer.Info)


"
6,AudioSystem,2,Line.Info[] getSourceLineInfo(Line.Info info),True,,"

getSourceLineInfo
public static Line.Info[] getSourceLineInfo(Line.Info info)
Obtains information about all source lines of a particular type that are supported
 by the installed mixers.

Parameters:
info - a Line.Info object that specifies the kind of
 lines about which information is requested
Returns:
an array of Line.Info objects describing source lines matching
 the type requested.  If no matching source lines are supported, an array of length 0
 is returned.
See Also:
Mixer.getSourceLineInfo(Line.Info)


"
6,AudioSystem,3,Line.Info[] getTargetLineInfo(Line.Info info),True,,"

getTargetLineInfo
public static Line.Info[] getTargetLineInfo(Line.Info info)
Obtains information about all target lines of a particular type that are supported
 by the installed mixers.

Parameters:
info - a Line.Info object that specifies the kind of
 lines about which information is requested
Returns:
an array of Line.Info objects describing target lines matching
 the type requested.  If no matching target lines are supported, an array of length 0
 is returned.
See Also:
Mixer.getTargetLineInfo(Line.Info)


"
6,AudioSystem,4,Clip getClip(),True,,"

getClip
public static Clip getClip()
                    throws LineUnavailableException
Obtains a clip that can be used for playing back
 an audio file or an audio stream. The returned clip
 will be provided by the default system mixer, or,
 if not possible, by any other mixer installed in the
 system that supports a Clip
 object.

 The returned clip must be opened with the
 open(AudioFormat) or
 open(AudioInputStream) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 If the system property
 javax.sound.sampled.Clip
 is defined or it is defined in the file ""sound.properties"",
 it is used to retrieve the default clip.
 For details, refer to the class description.

Returns:
the desired clip object
Throws:
LineUnavailableException - if a clip object
 is not available due to resource restrictions
SecurityException - if a clip object
 is not available due to security restrictions
IllegalArgumentException - if the system does not
 support at least one clip instance through any installed mixer
Since:
1.5
See Also:
getClip(Mixer.Info)


"
6,AudioSystem,5,SourceDataLine getSourceDataLine(AudioFormat format),True,,"

getSourceDataLine
public static SourceDataLine getSourceDataLine(AudioFormat format)
                                        throws LineUnavailableException
Obtains a source data line that can be used for playing back
 audio data in the format specified by the
 AudioFormat object. The returned line
 will be provided by the default system mixer, or,
 if not possible, by any other mixer installed in the
 system that supports a matching
 SourceDataLine object.

 The returned line should be opened with the
 open(AudioFormat) or
 open(AudioFormat, int) method.

 This is a high-level method that uses getMixer
 and getLine internally.

 The returned SourceDataLine's default
 audio format will be initialized with format.

 If the system property
 javax.sound.sampled.SourceDataLine
 is defined or it is defined in the file ""sound.properties"",
 it is used to retrieve the default source data line.
 For details, refer to the class description.

Parameters:
format - an AudioFormat object specifying
        the supported audio format of the returned line,
        or null for any audio format
Returns:
the desired SourceDataLine object
Throws:
LineUnavailableException - if a matching source data line
         is not available due to resource restrictions
SecurityException - if a matching source data line
         is not available due to security restrictions
IllegalArgumentException - if the system does not
         support at least one source data line supporting the
         specified audio format through any installed mixer
Since:
1.5
See Also:
getSourceDataLine(AudioFormat, Mixer.Info)


"
7,BooleanControl,1,boolean getValue(),True,,"

getValue
public boolean getValue()
Obtains this control's current value.

Returns:
current value.


"
7,BooleanControl,2,void setValue(boolean value),True,,"

setValue
public void setValue(boolean value)
Sets the current value for the control.  The default
 implementation simply sets the value as indicated.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
value - desired new value.


"
7,BooleanControl,3,boolean getMin(),False,,NULL
7,BooleanControl,4,boolean getMax(),False,,NULL
7,BooleanControl,5,String toString(),True,,"

toString
public String toString()
Provides a string representation of the control

Overrides:
toString in class Control
Returns:
a string description


"
8,BooleanControl.Type,1,String toString(),False,,NULL
8,BooleanControl.Type,2,boolean equals(Object obj),False,,NULL
8,BooleanControl.Type,3,int hashCode(),False,,NULL
8,BooleanControl.Type,4,BooleanControl.Type valueOf(String name),False,,NULL
8,BooleanControl.Type,5,String name(),False,,NULL
9,CompoundControl,1,Control[] getMemberControls(),True,,"

getMemberControls
public Control[] getMemberControls()
Returns the set of member controls that comprise the compound control.

Returns:
the set of member controls.


"
9,CompoundControl,2,String getType(),False,,NULL
9,CompoundControl,3,String toString(),True,,"

toString
public String toString()
Provides a string representation of the control

Overrides:
toString in class Control
Returns:
a string description


"
9,CompoundControl,4,boolean isControlSupported(Control control),False,,NULL
9,CompoundControl,5,Control getControl(Control.Type controlType),False,,NULL
10,CompoundControl.Type,1,String toString(),False,,NULL
10,CompoundControl.Type,2,boolean equals(Object obj),False,,NULL
10,CompoundControl.Type,3,int hashCode(),False,,NULL
10,CompoundControl.Type,4,String getSimpleName(),False,,NULL
10,CompoundControl.Type,5,Class<? extends Control> getControlType(),False,,NULL
11,Control,1,Control[] getControls(),False,,NULL
11,Control,2,Control getControl(Type controlType),False,,NULL
11,Control,3,void addLineListener(LineListener listener),False,,NULL
11,Control,4,void removeLineListener(LineListener listener),False,,NULL
11,Control,5,void open(),False,,NULL
12,Control.Type,1,String toString(),True,,"

toString
public final String toString()
Provides the String representation of the control type.  This String is
 the same name that was passed to the constructor.

Overrides:
toString in class Object
Returns:
the control type name


"
12,Control.Type,2,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Finalizes the equals method

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
12,Control.Type,3,int hashCode(),True,,"

hashCode
public final int hashCode()
Finalizes the hashCode method

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
12,Control.Type,4,String getDisplayName(),False,,NULL
12,Control.Type,5,Class<?> getControlType(),False,,NULL
13,DataLine.Info,1,boolean isFormatSupported(AudioFormat format),True,,"

isFormatSupported
public boolean isFormatSupported(AudioFormat format)
Indicates whether this data line supports a particular audio format.
 The default implementation of this method simply returns true if
 the specified format matches any of the supported formats.

Parameters:
format - the audio format for which support is queried.
Returns:
true if the format is supported, otherwise false
See Also:
getFormats(), 
AudioFormat.matches(javax.sound.sampled.AudioFormat)


"
13,DataLine.Info,2,AudioFormat[] getFormats(),True,,"

getFormats
public AudioFormat[] getFormats()
Obtains a set of audio formats supported by the data line.
 Note that isFormatSupported(AudioFormat) might return
 true for certain additional formats that are missing from
 the set returned by getFormats().  The reverse is not
 the case: isFormatSupported(AudioFormat) is guaranteed to return
 true for all formats returned by getFormats().

 Some fields in the AudioFormat instances can be set to
 NOT_SPECIFIED
 if that field does not apply to the format,
 or if the format supports a wide range of values for that field.
 For example, a multi-channel device supporting up to
 64 channels, could set the channel field in the
 AudioFormat instances returned by this
 method to NOT_SPECIFIED.

Returns:
a set of supported audio formats.
See Also:
isFormatSupported(AudioFormat)


"
13,DataLine.Info,3,boolean isSource(),False,,NULL
13,DataLine.Info,4,boolean isTarget(),False,,NULL
13,DataLine.Info,5,Line.Info getLineInfo(),False,,NULL
14,EnumControl,1,Object[] getValues(),True,,"

getValues
public Object[] getValues()
Returns the set of possible values for this control.

Returns:
the set of possible values


"
14,EnumControl,2,Object getValue(),True,,"

getValue
public Object getValue()
Obtains this control's current value.

Returns:
the current value


"
14,EnumControl,3,void setValue(Object value),True,,"

setValue
public void setValue(Object value)
Sets the current value for the control.  The default implementation
 simply sets the value as indicated.  If the value indicated is not
 supported, an IllegalArgumentException is thrown.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
value - the desired new value
Throws:
IllegalArgumentException - if the value indicated does not fall
 within the allowable range


"
14,EnumControl,4,String toString(),True,,"

toString
public String toString()
Provides a string representation of the control.

Overrides:
toString in class Control
Returns:
a string description


"
14,EnumControl,5,boolean isValueSupported(Object value),False,,NULL
15,EnumControl.Type,1,String toString(),False,,NULL
15,EnumControl.Type,2,boolean equals(Object obj),False,,NULL
15,EnumControl.Type,3,int hashCode(),False,,NULL
15,EnumControl.Type,4,EnumControl.Type valueOf(String name),False,,NULL
15,EnumControl.Type,5,int compareTo(EnumControl.Type o),False,,NULL
16,FloatControl,1,float getMinimum(),True,,"

getMinimum
public float getMinimum()
Obtains the minimum value permitted.

Returns:
the minimum allowable value


"
16,FloatControl,2,float getMaximum(),True,,"

getMaximum
public float getMaximum()
Obtains the maximum value permitted.

Returns:
the maximum allowable value


"
16,FloatControl,3,float getPrecision(),True,,"

getPrecision
public float getPrecision()
Obtains the resolution or granularity of the control, in the units
 that the control measures.
 The precision is the size of the increment between discrete valid values
 for this control, over the set of supported floating-point values.

Returns:
the control's precision


"
16,FloatControl,4,void setValue(float value),True,,"

setValue
public void setValue(float newValue)
Sets the current value for the control.  The default implementation
 simply sets the value as indicated.  If the value indicated is greater
 than the maximum value, or smaller than the minimum value, an
 IllegalArgumentException is thrown.
 Some controls require that their line be open before they can be affected
 by setting a value.

Parameters:
newValue - desired new value
Throws:
IllegalArgumentException - if the value indicated does not fall
 within the allowable range


"
16,FloatControl,5,float getValue(),True,,"

getValue
public float getValue()
Obtains this control's current value.

Returns:
the current value


"
17,FloatControl.Type,1,String toString(),False,,NULL
17,FloatControl.Type,2,boolean equals(Object obj),False,,NULL
17,FloatControl.Type,3,int hashCode(),False,,NULL
17,FloatControl.Type,4,FloatControl.Type[] values(),False,,NULL
17,FloatControl.Type,5,FloatControl.Type valueOf(String name),False,,NULL
18,Line.Info,1,Line.Info(Class<?> lineClass),False,,NULL
18,Line.Info,2,boolean matches(Line.Info info),True,,"

matches
public boolean matches(Line.Info info)
Indicates whether the specified info object matches this one.
 To match, the specified object must be identical to or
 a special case of this one.  The specified info object
 must be either an instance of the same class as this one,
 or an instance of a sub-type of this one.  In addition, the
 attributes of the specified object must be compatible with the
 capabilities of this one.  Specifically, the routing configuration
 for the specified info object must be compatible with that of this
 one.
 Subclasses may add other criteria to determine whether the two objects
 match.

Parameters:
info - the info object which is being compared to this one
Returns:
true if the specified object matches this one,
 false otherwise


"
18,Line.Info,3,boolean isSource(),False,,NULL
18,Line.Info,4,boolean isTarget(),False,,NULL
18,Line.Info,5,String toString(),True,,"

toString
public String toString()
Obtains a textual description of the line info.

Overrides:
toString in class Object
Returns:
a string description


"
19,LineEvent,1,LineEvent.Type getType(),True,,"

getType
public final LineEvent.Type getType()
Obtains the event's type.

Returns:
this event's type (LineEvent.Type.OPEN, LineEvent.Type.CLOSE,
 LineEvent.Type.START, or LineEvent.Type.STOP)


"
19,LineEvent,2,Line getLine(),True,,"

getLine
public final Line getLine()
Obtains the audio line that is the source of this event.

Returns:
the line responsible for this event


"
19,LineEvent,3,long getFramePosition(),True,,"

getFramePosition
public final long getFramePosition()
Obtains the position in the line's audio data when the event occurred, expressed in sample frames.
 For example, if a source line had already played back 14 sample frames at the time it was
 paused, the pause event would report the line's position as 14.  The next frame to be processed
 would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
 
 Note that this field is relevant only to certain events generated by
 data lines, such as START and STOP.  For
 events generated by lines that do not count sample frames, and for any
 other events for which this value is not known, the position value
 should be AudioSystem.NOT_SPECIFIED.

Returns:
the line's position as a sample frame number


"
19,LineEvent,4,long getMicrosecondPosition(),False,,NULL
19,LineEvent,5,String toString(),True,,"

toString
public String toString()
Obtains a string representation of the event.  The contents of the string may vary
 between implementations of Java Sound.

Overrides:
toString in class EventObject
Returns:
a string describing the event.


"
20,LineEvent.Type,1,LineEvent.Type getSource(),False,,NULL
20,LineEvent.Type,2,String toString(),True,,"

toString
public String toString()
Returns the type name as the string representation.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
20,LineEvent.Type,3,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Indicates whether the specified object is equal to this event type,
 returning true if the objects are identical.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare
Returns:
true if this event type is the same as
 obj; false otherwise
See Also:
Object.hashCode(), 
HashMap


"
20,LineEvent.Type,4,int hashCode(),True,,"

hashCode
public final int hashCode()
Finalizes the hashcode method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
20,LineEvent.Type,5,LineEvent.Type valueOf(String name),False,,NULL
21,Mixer.Info,1,String getName(),True,,"

getName
public final String getName()
Obtains the name of the mixer.

Returns:
a string that names the mixer


"
21,Mixer.Info,2,String getDescription(),True,,"

getDescription
public final String getDescription()
Obtains the description of the mixer.

Returns:
a textual description of the mixer


"
21,Mixer.Info,3,String getVendor(),True,,"

getVendor
public final String getVendor()
Obtains the vendor of the mixer.

Returns:
a string that names the mixer's vendor


"
21,Mixer.Info,4,String getVersion(),True,,"

getVersion
public final String getVersion()
Obtains the version of the mixer.

Returns:
textual version information for the mixer


"
21,Mixer.Info,5,boolean isSource(),False,,NULL
23,ReverbType,1,float getDecayTime(),False,,NULL
23,ReverbType,2,float getDensity(),False,,NULL
23,ReverbType,3,float getDiffusion(),False,,NULL
23,ReverbType,4,float getReflectionsDelay(),False,,NULL
23,ReverbType,5,float getReflectionsLevel(),False,,NULL
