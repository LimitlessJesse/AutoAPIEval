ClassName,Method,Return Type,Description,Full Description
Attribute,equals(Object object),boolean,Compares the current Attribute Object with another Attribute Object.,"

equals
public boolean equals(Object object)
Compares the current Attribute Object with another Attribute Object.

Overrides:
equals in class Object
Parameters:
object - The Attribute that the current Attribute is to be compared with.
Returns:
True if the two Attribute objects are equal, otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
Attribute,getName(),String,Returns a String containing the name of the attribute.,"

getName
public String getName()
Returns a String containing the  name of the attribute.

Returns:
the name of the attribute.


"
Attribute,getValue(),Object,Returns an Object that is the value of this attribute.,"

getValue
public Object getValue()
Returns an Object that is the value of this attribute.

Returns:
the value of the attribute.


"
Attribute,hashCode(),int,Returns a hash code value for this attribute.,"

hashCode
public int hashCode()
Returns a hash code value for this attribute.

Overrides:
hashCode in class Object
Returns:
a hash code value for this attribute.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Attribute,toString(),String,Returns a String object representing this Attribute's value.,"

toString
public String toString()
Returns a String object representing this Attribute's value. The format of this
 string is not specified, but users can expect that two Attributes return the
 same string if and only if they are equal.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
AttributeChangeNotification,getAttributeName(),String,Gets the name of the attribute which has changed.,"

getAttributeName
public String getAttributeName()
Gets the name of the attribute which has changed.

Returns:
A String containing the name of the attribute.


"
AttributeChangeNotification,getAttributeType(),String,Gets the type of the attribute which has changed.,"

getAttributeType
public String getAttributeType()
Gets the type of the attribute which has changed.

Returns:
A String containing the type of the attribute.


"
AttributeChangeNotification,getNewValue(),Object,Gets the new value of the attribute which has changed.,"

getNewValue
public Object getNewValue()
Gets the new value of the attribute which has changed.

Returns:
An Object containing the new value of the attribute.


"
AttributeChangeNotification,getOldValue(),Object,Gets the old value of the attribute which has changed.,"

getOldValue
public Object getOldValue()
Gets the old value of the attribute which has changed.

Returns:
An Object containing the old value of the attribute.


"
AttributeChangeNotificationFilter,disableAllAttributes(),void,Disables all the attribute names.,"

disableAllAttributes
public void disableAllAttributes()
Disables all the attribute names.

"
AttributeChangeNotificationFilter,disableAttribute(String name),void,Disables all the attribute change notifications the attribute name of which equals the specified attribute name to be sent to the listener.,"

disableAttribute
public void disableAttribute(String name)
Disables all the attribute change notifications the attribute name of which equals
 the specified attribute name to be sent to the listener.
 If the specified name is not in the list of enabled attribute names,
 this method has no effect.

Parameters:
name - The attribute name.


"
AttributeChangeNotificationFilter,enableAttribute(String name),void,Enables all the attribute change notifications the attribute name of which equals the specified name to be sent to the listener.,"

enableAttribute
public void enableAttribute(String name)
                     throws IllegalArgumentException
Enables all the attribute change notifications the attribute name of which equals
 the specified name to be sent to the listener.
 If the specified name is already in the list of enabled attribute names,
 this method has no effect.

Parameters:
name - The attribute name.
Throws:
IllegalArgumentException - The attribute name parameter is null.


"
AttributeChangeNotificationFilter,getEnabledAttributes(),Vector<String>,Gets all the enabled attribute names for this filter.,"

getEnabledAttributes
public Vector<String> getEnabledAttributes()
Gets all the enabled attribute names for this filter.

Returns:
The list containing all the enabled attribute names.


"
AttributeChangeNotificationFilter,isNotificationEnabled(Notification notification),boolean,Invoked before sending the specified notification to the listener.,"

isNotificationEnabled
public boolean isNotificationEnabled(Notification notification)
Invoked before sending the specified notification to the listener.
 This filter compares the attribute name of the specified attribute change notification
 with each enabled attribute name.
 If the attribute name equals one of the enabled attribute names,
 the notification must be sent to the listener and this method returns true.

Specified by:
isNotificationEnabled in interface NotificationFilter
Parameters:
notification - The attribute change notification to be sent.
Returns:
true if the notification has to be sent to the listener, false otherwise.


"
AttributeList,add(Attribute object),void,Adds the Attribute specified as the last element of the list.,"

add
public void add(Attribute object)
Adds the Attribute specified as the last element of the list.

Parameters:
object - The attribute to be added.


"
AttributeList,"add(int index, Attribute object)",void,Inserts the attribute specified as an element at the position specified.,"

add
public void add(int index,
                Attribute object)
Inserts the attribute specified as an element at the position specified.
 Elements with an index greater than or equal to the current position are
 shifted up. If the index is out of range (index < 0 || index >
 size()) a RuntimeOperationsException should be raised, wrapping the
 java.lang.IndexOutOfBoundsException thrown.

Parameters:
object - The Attribute object to be inserted.
index - The position in the list where the new Attribute
 object is to be inserted.


"
AttributeList,"add(int index, Object element)",void,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                Object element)
Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

Specified by:
add in interface List<Object>
Overrides:
add in class ArrayList<Object>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
IllegalArgumentException - if this AttributeList is
 type-safe and element is not an
 Attribute.


"
AttributeList,add(Object element),boolean,Appends the specified element to the end of this list.,"

add
public boolean add(Object element)
Appends the specified element to the end of this list.

Specified by:
add in interface Collection<Object>
Specified by:
add in interface List<Object>
Overrides:
add in class ArrayList<Object>
Parameters:
element - element to be appended to this list
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalArgumentException - if this AttributeList is
 type-safe and element is not an
 Attribute.


"
AttributeList,addAll(AttributeList list),boolean,"Appends all the elements in the AttributeList specified to the end of the list, in the order in which they are returned by the Iterator of the AttributeList specified.","

addAll
public boolean addAll(AttributeList list)
Appends all the elements in the AttributeList specified to
 the end of the list, in the order in which they are returned by the
 Iterator of the AttributeList specified.

Parameters:
list - Elements to be inserted into the list.
Returns:
true if this list changed as a result of the call.
See Also:
ArrayList.addAll(java.util.Collection)


"
AttributeList,addAll(Collection<?> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.","

addAll
public boolean addAll(Collection<?> c)
Appends all of the elements in the specified collection to the end of
 this list, in the order that they are returned by the
 specified collection's Iterator.  The behavior of this operation is
 undefined if the specified collection is modified while the operation
 is in progress.  (This implies that the behavior of this call is
 undefined if the specified collection is this list, and this
 list is nonempty.)

Specified by:
addAll in interface Collection<Object>
Specified by:
addAll in interface List<Object>
Overrides:
addAll in class ArrayList<Object>
Parameters:
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
IllegalArgumentException - if this AttributeList is
 type-safe and c contains an
 element that is not an Attribute.
See Also:
AbstractCollection.add(Object)


"
AttributeList,"addAll(int index, AttributeList list)",boolean,"Inserts all of the elements in the AttributeList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the AttributeList specified.","

addAll
public boolean addAll(int index,
                      AttributeList list)
Inserts all of the elements in the AttributeList specified
 into this list, starting at the specified position, in the order in which
 they are returned by the Iterator of the AttributeList specified.
 If the index is out of range (index < 0 || index > size()) a
 RuntimeOperationsException should be raised, wrapping the
 java.lang.IndexOutOfBoundsException thrown.

Parameters:
list - Elements to be inserted into the list.
index - Position at which to insert the first element from the
 AttributeList specified.
Returns:
true if this list changed as a result of the call.
See Also:
ArrayList.addAll(int, java.util.Collection)


"
AttributeList,"addAll(int index, Collection<?> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position.","

addAll
public boolean addAll(int index,
                      Collection<?> c)
Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in the list in the order that they are returned by the
 specified collection's iterator.

Specified by:
addAll in interface List<Object>
Overrides:
addAll in class ArrayList<Object>
Parameters:
index - index at which to insert the first element from the
              specified collection
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
IllegalArgumentException - if this AttributeList is
 type-safe and c contains an
 element that is not an Attribute.


"
AttributeList,asList(),List<Attribute>,Return a view of this list as a List<Attribute>.,"

asList
public List<Attribute> asList()
Return a view of this list as a List<Attribute>.
 Changes to the returned value are reflected by changes
 to the original AttributeList and vice versa.

Returns:
a List<Attribute> whose contents
 reflect the contents of this AttributeList.

 If this method has ever been called on a given
 AttributeList instance, a subsequent attempt to add
 an object to that instance which is not an Attribute
 will fail with a IllegalArgumentException. For compatibility
 reasons, an AttributeList on which this method has never
 been called does allow objects other than Attributes to
 be added.
Throws:
IllegalArgumentException - if this AttributeList contains
 an element that is not an Attribute.
Since:
1.6


"
AttributeList,"set(int index, Attribute object)",void,Sets the element at the position specified to be the attribute specified.,"

set
public void set(int index,
                Attribute object)
Sets the element at the position specified to be the attribute specified.
 The previous element at that position is discarded. If the index is
 out of range (index < 0 || index > size()) a RuntimeOperationsException
 should be raised, wrapping the java.lang.IndexOutOfBoundsException thrown.

Parameters:
object - The value to which the attribute element should be set.
index - The position specified.


"
AttributeList,"set(int index, Object element)",Object,Replaces the element at the specified position in this list with the specified element.,"

set
public Object set(int index,
                  Object element)
Replaces the element at the specified position in this list with
 the specified element.

Specified by:
set in interface List<Object>
Overrides:
set in class ArrayList<Object>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
IllegalArgumentException - if this AttributeList is
 type-safe and element is not an
 Attribute.


"
AttributeValueExp,apply(ObjectName name),ValueExp,Applies the AttributeValueExp on an MBean.,"

apply
public ValueExp apply(ObjectName name)
               throws BadStringOperationException,
                      BadBinaryOpValueExpException,
                      BadAttributeValueExpException,
                      InvalidApplicationException
Applies the AttributeValueExp on an MBean.
 This method calls getAttribute(name) and wraps
 the result as a ValueExp.  The value returned by
 getAttribute must be a Number, String,
 or Boolean; otherwise this method throws a
 BadAttributeValueExpException, which will cause
 the containing query to be false for this name.

Specified by:
apply in interface ValueExp
Parameters:
name - The name of the MBean on which the AttributeValueExp will be applied.
Returns:
The ValueExp.
Throws:
BadAttributeValueExpException
InvalidApplicationException
BadStringOperationException
BadBinaryOpValueExpException


"
AttributeValueExp,getAttribute(ObjectName name),protected Object,Return the value of the given attribute in the named MBean.,"

getAttribute
protected Object getAttribute(ObjectName name)
Return the value of the given attribute in the named MBean.
 If the attempt to access the attribute generates an exception,
 return null.
The MBean Server used is the one returned by QueryEval.getMBeanServer().

Parameters:
name - the name of the MBean whose attribute is to be returned.
Returns:
the value of the attribute, or null if it could not be
 obtained.


"
AttributeValueExp,getAttributeName(),String,Returns a string representation of the name of the attribute.,"

getAttributeName
public String getAttributeName()
Returns a string representation of the name of the attribute.

Returns:
the attribute name.


"
AttributeValueExp,setMBeanServer(MBeanServer s),void,Deprecated. This method has no effect. The MBean Server used to obtain an attribute value is QueryEval.getMBeanServer().,"

setMBeanServer
@Deprecated
public void setMBeanServer(MBeanServer s)
Deprecated. This method has no effect.  The MBean Server used to
 obtain an attribute value is QueryEval.getMBeanServer().
Sets the MBean server on which the query is to be performed.

Specified by:
setMBeanServer in interface ValueExp
Parameters:
s - The MBean server on which the query is to be performed.


"
AttributeValueExp,toString(),String,Returns the string representing its value.,"

toString
public String toString()
Returns the string representing its value.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
DefaultLoaderRepository,loadClass(String className),static Class<?>,Deprecated.,"

loadClass
public static Class<?> loadClass(String className)
                          throws ClassNotFoundException
Deprecated. 
Go through the list of class loaders and try to load the requested class.
 The method will stop as soon as the class is found. If the class
 is not found the method will throw a ClassNotFoundException
 exception.

Parameters:
className - The name of the class to be loaded.
Returns:
the loaded class.
Throws:
ClassNotFoundException - The specified class could not be found.


"
DefaultLoaderRepository,"loadClassWithout(ClassLoader loader, String className)",static Class<?>,Deprecated.,"

loadClassWithout
public static Class<?> loadClassWithout(ClassLoader loader,
                                        String className)
                                 throws ClassNotFoundException
Deprecated. 
Go through the list of class loaders but exclude the given class loader, then try to load
 the requested class.
 The method will stop as soon as the class is found. If the class
 is not found the method will throw a ClassNotFoundException
 exception.

Parameters:
className - The name of the class to be loaded.
loader - The class loader to be excluded.
Returns:
the loaded class.
Throws:
ClassNotFoundException - The specified class could not be found.


"
ImmutableDescriptor,clone(),Descriptor,Returns a descriptor which is equal to this descriptor.,"

clone
public Descriptor clone()
Returns a descriptor which is equal to this descriptor.
 Changes to the returned descriptor will have no effect on this
 descriptor, and vice versa.
This method returns the object on which it is called.
 A subclass can override it
 to return another object provided the contract is respected.

Specified by:
clone in interface Descriptor
Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
RuntimeOperationsException - for illegal value for field Names
 or field Values.
 If the descriptor construction fails for any reason, this exception will
 be thrown.
See Also:
Cloneable


"
ImmutableDescriptor,equals(Object o),boolean,Compares this descriptor to the given object.,"

equals
public boolean equals(Object o)
Compares this descriptor to the given object.  The objects are equal if
 the given object is also a Descriptor, and if the two Descriptors have
 the same field names (possibly differing in case) and the same
 associated values.  The respective values for a field in the two
 Descriptors are equal if the following conditions hold:

 
If one value is null then the other must be too.
If one value is a primitive array then the other must be a primitive
 array of the same type with the same elements.
If one value is an object array then the other must be too and
 Arrays.deepEquals(Object[],Object[]) must return true.
Otherwise Object.equals(Object) must return true.


Specified by:
equals in interface Descriptor
Overrides:
equals in class Object
Parameters:
o - the object to compare with.
Returns:
true if the objects are the same; false
 otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ImmutableDescriptor,getFieldNames(),String[],Returns all the field names in the descriptor.,"

getFieldNames
public final String[] getFieldNames()
Description copied from interface: Descriptor
Returns all the field names in the descriptor.

Specified by:
getFieldNames in interface Descriptor
Returns:
String array of field names. If the descriptor is empty,
 you will get an empty array.


"
ImmutableDescriptor,getFields(),String[],Returns all of the fields contained in this descriptor as a string array.,"

getFields
public final String[] getFields()
Description copied from interface: Descriptor
Returns all of the fields contained in this descriptor as a string array.

Specified by:
getFields in interface Descriptor
Returns:
String array of fields in the format fieldName=fieldValue
If the value of a field is not a String, then the toString() method
 will be called on it and the returned value, enclosed in parentheses,
 used as the value for the field in the returned array. If the value
 of a field is null, then the value of the field in the returned array
 will be empty.  If the descriptor is empty, you will get
 an empty array.
See Also:
Descriptor.setFields(java.lang.String[], java.lang.Object[])


"
ImmutableDescriptor,getFieldValue(String fieldName),Object,"Returns the value for a specific field name, or null if no value is present for that name.","

getFieldValue
public final Object getFieldValue(String fieldName)
Description copied from interface: Descriptor
Returns the value for a specific field name, or null if no value
 is present for that name.

Specified by:
getFieldValue in interface Descriptor
Parameters:
fieldName - the field name.
Returns:
the corresponding value, or null if the field is not present.


"
ImmutableDescriptor,getFieldValues(String... fieldNames),Object[],Returns all the field values in the descriptor as an array of Objects.,"

getFieldValues
public final Object[] getFieldValues(String... fieldNames)
Description copied from interface: Descriptor
Returns all the field values in the descriptor as an array of Objects. The
 returned values are in the same order as the fieldNames String array parameter.

Specified by:
getFieldValues in interface Descriptor
Parameters:
fieldNames - String array of the names of the fields that
 the values should be returned for.  If the array is empty then
 an empty array will be returned.  If the array is null then all
 values will be returned, as if the parameter were the array
 returned by Descriptor.getFieldNames().  If a field name in the
 array does not exist, including the case where it is null or
 the empty string, then null is returned for the matching array
 element being returned.
Returns:
Object array of field values. If the list of fieldNames
 is empty, you will get an empty array.


"
ImmutableDescriptor,hashCode(),int,Returns the hash code value for this descriptor.,"

hashCode
public int hashCode()
Returns the hash code value for this descriptor.  The hash
 code is computed as the sum of the hash codes for each field in
 the descriptor.  The hash code of a field with name n
 and value v is n.toLowerCase().hashCode() ^ h.
 Here h is the hash code of v, computed as
 follows:

If v is null then h is 0.
If v is a primitive array then h is computed using
 the appropriate overloading of java.util.Arrays.hashCode.
If v is an object array then h is computed using
 Arrays.deepHashCode(Object[]).
Otherwise h is v.hashCode().


Specified by:
hashCode in interface Descriptor
Overrides:
hashCode in class Object
Returns:
A hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ImmutableDescriptor,isValid(),boolean,Returns true if all of the fields have legal values given their names.,"

isValid
public boolean isValid()
Returns true if all of the fields have legal values given their
 names.  This method always returns true, but a subclass can
 override it to return false when appropriate.

Specified by:
isValid in interface Descriptor
Returns:
true if the values are legal.
Throws:
RuntimeOperationsException - if the validity checking fails.
 The method returns false if the descriptor is not valid, but throws
 this exception if the attempt to determine validity fails.


"
ImmutableDescriptor,removeField(String fieldName),void,Removes a field from the descriptor.,"

removeField
public final void removeField(String fieldName)
Removes a field from the descriptor.

Specified by:
removeField in interface Descriptor
Parameters:
fieldName - String name of the field to be removed.
 If the field name is illegal or the field is not found,
 no exception is thrown.
Throws:
RuntimeOperationsException - if a field of the given name
 exists and the descriptor is immutable.  The wrapped exception will
 be an UnsupportedOperationException.


"
ImmutableDescriptor,"setField(String fieldName, Object fieldValue)",void,This operation is unsupported since this class is immutable.,"

setField
public final void setField(String fieldName,
                           Object fieldValue)
                    throws RuntimeOperationsException
This operation is unsupported since this class is immutable.  If
 this call would change a mutable descriptor with the same contents,
 then a RuntimeOperationsException wrapping an
 UnsupportedOperationException is thrown.  Otherwise,
 the behavior is the same as it would be for a mutable descriptor:
 either an exception is thrown because of illegal parameters, or
 there is no effect.

Specified by:
setField in interface Descriptor
Parameters:
fieldName - The field name to be set. Cannot be null or empty.
fieldValue - The field value to be set for the field
 name. Can be null if that is a valid value for the field.
Throws:
RuntimeOperationsException - if the field name or field value
 is illegal (wrapped exception is IllegalArgumentException); or
 if the descriptor is immutable (wrapped exception is
 UnsupportedOperationException).


"
ImmutableDescriptor,"setFields(String[] fieldNames, Object[] fieldValues)",void,This operation is unsupported since this class is immutable.,"

setFields
public final void setFields(String[] fieldNames,
                            Object[] fieldValues)
                     throws RuntimeOperationsException
This operation is unsupported since this class is immutable.  If
 this call would change a mutable descriptor with the same contents,
 then a RuntimeOperationsException wrapping an
 UnsupportedOperationException is thrown.  Otherwise,
 the behavior is the same as it would be for a mutable descriptor:
 either an exception is thrown because of illegal parameters, or
 there is no effect.

Specified by:
setFields in interface Descriptor
Parameters:
fieldNames - String array of field names. The array and array
 elements cannot be null.
fieldValues - Object array of the corresponding field values.
 The array cannot be null. Elements of the array can be null.
Throws:
RuntimeOperationsException - if the change fails for any reason.
 Wrapped exception is IllegalArgumentException if
 fieldNames or fieldValues is null, or if
 the arrays are of different lengths, or if there is an
 illegal value in one of them.
 Wrapped exception is UnsupportedOperationException
 if the descriptor is immutable, and the call would change
 its contents.
See Also:
Descriptor.getFields()


"
ImmutableDescriptor,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ImmutableDescriptor,union(Descriptor... descriptors),static ImmutableDescriptor,Return an ImmutableDescriptor whose contents are the union of the given descriptors.,"

union
public static ImmutableDescriptor union(Descriptor... descriptors)
Return an ImmutableDescriptor whose contents are the union of
 the given descriptors.  Every field name that appears in any of
 the descriptors will appear in the result with the
 value that it has when the method is called.  Subsequent changes
 to any of the descriptors do not affect the ImmutableDescriptor
 returned here.
In the simplest case, there is only one descriptor and the
 returned ImmutableDescriptor is a copy of its fields at the
 time this method is called:

 Descriptor d = something();
 ImmutableDescriptor copy = ImmutableDescriptor.union(d);
 

Parameters:
descriptors - the descriptors to be combined.  Any of the
 descriptors can be null, in which case it is skipped.
Returns:
an ImmutableDescriptor that is the union of the given
 descriptors.  The returned object may be identical to one of the
 input descriptors if it is an ImmutableDescriptor that contains all of
 the required fields.
Throws:
IllegalArgumentException - if two Descriptors contain the
 same field name with different associated values.  Primitive array
 values are considered the same if they are of the same type with
 the same elements.  Object array values are considered the same if
 Arrays.deepEquals(Object[],Object[]) returns true.


"
JMX,isMXBeanInterface(Class<?> interfaceClass),static boolean,Test whether an interface is an MXBean interface.,"

isMXBeanInterface
public static boolean isMXBeanInterface(Class<?> interfaceClass)
Test whether an interface is an MXBean interface.
 An interface is an MXBean interface if it is public,
 annotated @MXBean or @MXBean(true)
 or if it does not have an @MXBean annotation
 and its name ends with ""MXBean"".

Parameters:
interfaceClass - The candidate interface.
Returns:
true if interfaceClass is a
 compliant MXBean interface
Throws:
NullPointerException - if interfaceClass is null.


"
JMX,"newMBeanProxy(MBeanServerConnection connection, ObjectName objectName, Class<T> interfaceClass)",static <T> T,Make a proxy for a Standard MBean in a local or remote MBean Server.,"

newMBeanProxy
public static <T> T newMBeanProxy(MBeanServerConnection connection,
                                  ObjectName objectName,
                                  Class<T> interfaceClass)
Make a proxy for a Standard MBean in a local or remote
 MBean Server.
If you have an MBean Server mbs containing an MBean
 with ObjectName name, and if the MBean's
 management interface is described by the Java interface
 MyMBean, you can construct a proxy for the MBean like
 this:

 MyMBean proxy = JMX.newMBeanProxy(mbs, name, MyMBean.class);
 
Suppose, for example, MyMBean looks like this:

 public interface MyMBean {
     public String getSomeAttribute();
     public void setSomeAttribute(String value);
     public void someOperation(String param1, int param2);
 }
 
Then you can execute:

proxy.getSomeAttribute() which will result in a
 call to mbs.getAttribute(name, ""SomeAttribute"").

 proxy.setSomeAttribute(""whatever"") which will result
 in a call to mbs.setAttribute(name, new Attribute(""SomeAttribute"", ""whatever"")).

 proxy.someOperation(""param1"", 2) which will be
 translated into a call to mbs.invoke(name, ""someOperation"", <etc>).

 
The object returned by this method is a
 Proxy whose InvocationHandler is an
 MBeanServerInvocationHandler.
This method is equivalent to newMBeanProxy(connection, objectName, interfaceClass,
 false).

Type Parameters:
T - allows the compiler to know that if the interfaceClass parameter is MyMBean.class, for
 example, then the return type is MyMBean.
Parameters:
connection - the MBean server to forward to.
objectName - the name of the MBean within
 connection to forward to.
interfaceClass - the management interface that the MBean
 exports, which will also be implemented by the returned proxy.
Returns:
the new proxy instance.
Throws:
IllegalArgumentException - if interfaceClass is not
 a compliant MBean
 interface


"
JMX,"newMBeanProxy(MBeanServerConnection connection, ObjectName objectName, Class<T> interfaceClass, boolean notificationEmitter)",static <T> T,Make a proxy for a Standard MBean in a local or remote MBean Server that may also support the methods of NotificationEmitter.,"

newMBeanProxy
public static <T> T newMBeanProxy(MBeanServerConnection connection,
                                  ObjectName objectName,
                                  Class<T> interfaceClass,
                                  boolean notificationEmitter)
Make a proxy for a Standard MBean in a local or remote MBean
 Server that may also support the methods of NotificationEmitter.
This method behaves the same as newMBeanProxy(MBeanServerConnection, ObjectName, Class), but
 additionally, if notificationEmitter is true, then the MBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the
 returned proxy will implement NotificationEmitter as
 well as interfaceClass.  A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy
 will result in a call to MBeanServerConnection.addNotificationListener(ObjectName,
 NotificationListener, NotificationFilter, Object), and
 likewise for the other methods of NotificationBroadcaster and NotificationEmitter.

Type Parameters:
T - allows the compiler to know that if the interfaceClass parameter is MyMBean.class, for
 example, then the return type is MyMBean.
Parameters:
connection - the MBean server to forward to.
objectName - the name of the MBean within
 connection to forward to.
interfaceClass - the management interface that the MBean
 exports, which will also be implemented by the returned proxy.
notificationEmitter - make the returned proxy
 implement NotificationEmitter by forwarding its methods
 via connection.
Returns:
the new proxy instance.
Throws:
IllegalArgumentException - if interfaceClass is not
 a compliant MBean
 interface


"
JMX,"newMXBeanProxy(MBeanServerConnection connection, ObjectName objectName, Class<T> interfaceClass)",static <T> T,Make a proxy for an MXBean in a local or remote MBean Server.,"

newMXBeanProxy
public static <T> T newMXBeanProxy(MBeanServerConnection connection,
                                   ObjectName objectName,
                                   Class<T> interfaceClass)
Make a proxy for an MXBean in a local or remote MBean Server.

 If you have an MBean Server mbs containing an
 MXBean with ObjectName name, and if the
 MXBean's management interface is described by the Java
 interface MyMXBean, you can construct a proxy for
 the MXBean like this:

 MyMXBean proxy = JMX.newMXBeanProxy(mbs, name, MyMXBean.class);
 
Suppose, for example, MyMXBean looks like this:

 public interface MyMXBean {
     public String getSimpleAttribute();
     public void setSimpleAttribute(String value);
     public MemoryUsage getMappedAttribute();
     public void setMappedAttribute(MemoryUsage memoryUsage);
     public MemoryUsage someOperation(String param1, MemoryUsage param2);
 }
 
Then:

proxy.getSimpleAttribute() will result in a
 call to mbs.getAttribute(name, ""SimpleAttribute"").
proxy.setSimpleAttribute(""whatever"") will result
 in a call to mbs.setAttribute(name,
 new Attribute(""SimpleAttribute"", ""whatever"")).
Because String is a simple type, in the
     sense of SimpleType, it
     is not changed in the context of an MXBean.  The MXBean
     proxy behaves the same as a Standard MBean proxy (see
     newMBeanProxy) for the attribute SimpleAttribute.
proxy.getMappedAttribute() will result in a call
 to mbs.getAttribute(""MappedAttribute"").  The MXBean
 mapping rules mean that the actual type of the attribute MappedAttribute will be CompositeData and
 that is what the mbs.getAttribute call will return.
 The proxy will then convert the CompositeData back into
 the expected type MemoryUsage using the MXBean mapping
 rules.
Similarly, proxy.setMappedAttribute(memoryUsage)
 will convert the MemoryUsage argument into a CompositeData before calling mbs.setAttribute.
proxy.someOperation(""whatever"", memoryUsage)
 will convert the MemoryUsage argument into a CompositeData and call mbs.invoke.  The value returned
 by mbs.invoke will be also be a CompositeData,
 and the proxy will convert this into the expected type MemoryUsage using the MXBean mapping rules.

The object returned by this method is a
 Proxy whose InvocationHandler is an
 MBeanServerInvocationHandler.
This method is equivalent to newMXBeanProxy(connection, objectName, interfaceClass,
 false).

Type Parameters:
T - allows the compiler to know that if the interfaceClass parameter is MyMXBean.class, for
 example, then the return type is MyMXBean.
Parameters:
connection - the MBean server to forward to.
objectName - the name of the MBean within
 connection to forward to.
interfaceClass - the MXBean interface,
 which will also be implemented by the returned proxy.
Returns:
the new proxy instance.
Throws:
IllegalArgumentException - if interfaceClass is not
 a compliant MXBean interface


"
JMX,"newMXBeanProxy(MBeanServerConnection connection, ObjectName objectName, Class<T> interfaceClass, boolean notificationEmitter)",static <T> T,Make a proxy for an MXBean in a local or remote MBean Server that may also support the methods of NotificationEmitter.,"

newMXBeanProxy
public static <T> T newMXBeanProxy(MBeanServerConnection connection,
                                   ObjectName objectName,
                                   Class<T> interfaceClass,
                                   boolean notificationEmitter)
Make a proxy for an MXBean in a local or remote MBean
 Server that may also support the methods of NotificationEmitter.
This method behaves the same as newMXBeanProxy(MBeanServerConnection, ObjectName, Class), but
 additionally, if notificationEmitter is true, then the MXBean is assumed to be a NotificationBroadcaster or NotificationEmitter and the
 returned proxy will implement NotificationEmitter as
 well as interfaceClass.  A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy
 will result in a call to MBeanServerConnection.addNotificationListener(ObjectName,
 NotificationListener, NotificationFilter, Object), and
 likewise for the other methods of NotificationBroadcaster and NotificationEmitter.

Type Parameters:
T - allows the compiler to know that if the interfaceClass parameter is MyMXBean.class, for
 example, then the return type is MyMXBean.
Parameters:
connection - the MBean server to forward to.
objectName - the name of the MBean within
 connection to forward to.
interfaceClass - the MXBean interface,
 which will also be implemented by the returned proxy.
notificationEmitter - make the returned proxy
 implement NotificationEmitter by forwarding its methods
 via connection.
Returns:
the new proxy instance.
Throws:
IllegalArgumentException - if interfaceClass is not
 a compliant MXBean interface


"
MBeanAttributeInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.
 The clone is obtained by simply calling super.clone(),
 thus calling the default native shallow cloning mechanism
 implemented by Object.clone().
 No deeper cloning of any internal field is made.
Since this class is immutable, cloning is chiefly of
 interest to subclasses.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanAttributeInfo,equals(Object o),boolean,Compare this MBeanAttributeInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanAttributeInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanAttributeInfo such
 that its MBeanFeatureInfo.getName(), getType(), MBeanFeatureInfo.getDescription(), isReadable(), isWritable(), and isIs() values are equal (not
 necessarily identical) to those of this MBeanAttributeInfo.
See Also:
Object.hashCode(), 
HashMap


"
MBeanAttributeInfo,getType(),String,Returns the class name of the attribute.,"

getType
public String getType()
Returns the class name of the attribute.

Returns:
the class name.


"
MBeanAttributeInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanAttributeInfo,isIs(),boolean,"Indicates if this attribute has an ""is"" getter.","

isIs
public boolean isIs()
Indicates if this attribute has an ""is"" getter.

Returns:
true if this attribute has an ""is"" getter.


"
MBeanAttributeInfo,isReadable(),boolean,Whether the value of the attribute can be read.,"

isReadable
public boolean isReadable()
Whether the value of the attribute can be read.

Returns:
True if the attribute can be read, false otherwise.


"
MBeanAttributeInfo,isWritable(),boolean,Whether new values can be written to the attribute.,"

isWritable
public boolean isWritable()
Whether new values can be written to the attribute.

Returns:
True if the attribute can be written to, false otherwise.


"
MBeanAttributeInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanConstructorInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.  The clone is
 obtained by simply calling super.clone(), thus calling
 the default native shallow cloning mechanism implemented by
 Object.clone().  No deeper cloning of any internal
 field is made.
Since this class is immutable, cloning is chiefly of
 interest to subclasses.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanConstructorInfo,equals(Object o),boolean,Compare this MBeanConstructorInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanConstructorInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanConstructorInfo such
 that its MBeanFeatureInfo.getName(), MBeanFeatureInfo.getDescription(),
 getSignature(), and MBeanFeatureInfo.getDescriptor()
 values are equal (not necessarily
 identical) to those of this MBeanConstructorInfo.  Two
 signature arrays are equal if their elements are pairwise
 equal.
See Also:
Object.hashCode(), 
HashMap


"
MBeanConstructorInfo,getSignature(),MBeanParameterInfo[],Returns the list of parameters for this constructor.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this constructor.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
MBeanConstructorInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanConstructorInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanFeatureInfo,equals(Object o),boolean,Compare this MBeanFeatureInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanFeatureInfo to another.

Overrides:
equals in class Object
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanFeatureInfo such
 that its getName(), getDescription(), and
 getDescriptor()
 values are equal (not necessarily identical) to those of this
 MBeanFeatureInfo.
See Also:
Object.hashCode(), 
HashMap


"
MBeanFeatureInfo,getDescription(),String,Returns the human-readable description of the feature.,"

getDescription
public String getDescription()
Returns the human-readable description of the feature.

Returns:
the human-readable description of the feature.


"
MBeanFeatureInfo,getDescriptor(),Descriptor,Returns the descriptor for the feature.,"

getDescriptor
public Descriptor getDescriptor()
Returns the descriptor for the feature.  Changing the returned value
 will have no affect on the original descriptor.

Specified by:
getDescriptor in interface DescriptorRead
Returns:
a descriptor that is either immutable or a copy of the original.
Since:
1.6


"
MBeanFeatureInfo,getName(),String,Returns the name of the feature.,"

getName
public String getName()
Returns the name of the feature.

Returns:
the name of the feature.


"
MBeanFeatureInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.
 The clone is obtained by simply calling super.clone(),
 thus calling the default native shallow cloning mechanism
 implemented by Object.clone().
 No deeper cloning of any internal field is made.
Since this class is immutable, the clone method is chiefly of
 interest to subclasses.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanInfo,equals(Object o),boolean,Compare this MBeanInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanInfo to another.  Two MBeanInfo objects
 are equal if and only if they return equal values for getClassName(), for getDescription(), and for
 getDescriptor(), and the
 arrays returned by the two objects for getAttributes(), getOperations(), getConstructors(), and getNotifications() are
 pairwise equal.  Here ""equal"" means Object.equals(Object), not identity.
If two MBeanInfo objects return the same values in one of
 their arrays but in a different order then they are not equal.

Overrides:
equals in class Object
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanInfo that is equal
 to this one according to the rules above.
See Also:
Object.hashCode(), 
HashMap


"
MBeanInfo,getAttributes(),MBeanAttributeInfo[],Returns the list of attributes exposed for management.,"

getAttributes
public MBeanAttributeInfo[] getAttributes()
Returns the list of attributes exposed for management.
 Each attribute is described by an MBeanAttributeInfo object.

 The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanAttributeInfo objects
 but that each referenced MBeanAttributeInfo object is not copied.

Returns:
An array of MBeanAttributeInfo objects.


"
MBeanInfo,getClassName(),String,Returns the name of the Java class of the MBean described by this MBeanInfo.,"

getClassName
public String getClassName()
Returns the name of the Java class of the MBean described by
 this MBeanInfo.

Returns:
the class name.


"
MBeanInfo,getConstructors(),MBeanConstructorInfo[],Returns the list of the public constructors of the MBean.,"

getConstructors
public MBeanConstructorInfo[] getConstructors()
Returns the list of the public constructors of the MBean.
 Each constructor is described by an
 MBeanConstructorInfo object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanConstructorInfo objects but
 that each referenced MBeanConstructorInfo object
 is not copied.
The returned list is not necessarily exhaustive.  That is,
 the MBean may have a public constructor that is not in the
 list.  In this case, the MBean server can construct another
 instance of this MBean's class using that constructor, even
 though it is not listed here.

Returns:
An array of MBeanConstructorInfo objects.


"
MBeanInfo,getDescription(),String,Returns a human readable description of the MBean.,"

getDescription
public String getDescription()
Returns a human readable description of the MBean.

Returns:
the description.


"
MBeanInfo,getDescriptor(),Descriptor,Get the descriptor of this MBeanInfo.,"

getDescriptor
public Descriptor getDescriptor()
Get the descriptor of this MBeanInfo.  Changing the returned value
 will have no affect on the original descriptor.

Specified by:
getDescriptor in interface DescriptorRead
Returns:
a descriptor that is either immutable or a copy of the original.
Since:
1.6


"
MBeanInfo,getNotifications(),MBeanNotificationInfo[],Returns the list of the notifications emitted by the MBean.,"

getNotifications
public MBeanNotificationInfo[] getNotifications()
Returns the list of the notifications emitted by the MBean.
 Each notification is described by an MBeanNotificationInfo object.

 The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanNotificationInfo objects
 but that each referenced MBeanNotificationInfo object is not copied.

Returns:
An array of MBeanNotificationInfo objects.


"
MBeanInfo,getOperations(),MBeanOperationInfo[],Returns the list of operations of the MBean.,"

getOperations
public MBeanOperationInfo[] getOperations()
Returns the list of operations  of the MBean.
 Each operation is described by an MBeanOperationInfo object.

 The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanOperationInfo objects
 but that each referenced MBeanOperationInfo object is not copied.

Returns:
An array of MBeanOperationInfo objects.


"
MBeanInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanNotificationInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.
 The clone is obtained by simply calling super.clone(),
 thus calling the default native shallow cloning mechanism
 implemented by Object.clone().
 No deeper cloning of any internal field is made.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanNotificationInfo,equals(Object o),boolean,Compare this MBeanNotificationInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanNotificationInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanNotificationInfo
 such that its MBeanFeatureInfo.getName(), MBeanFeatureInfo.getDescription(),
 MBeanFeatureInfo.getDescriptor(),
 and getNotifTypes() values are equal (not necessarily
 identical) to those of this MBeanNotificationInfo.  Two
 notification type arrays are equal if their corresponding
 elements are equal.  They are not equal if they have the same
 elements but in a different order.
See Also:
Object.hashCode(), 
HashMap


"
MBeanNotificationInfo,getNotifTypes(),String[],Returns the array of strings (in dot notation) containing the notification types that the MBean may emit.,"

getNotifTypes
public String[] getNotifTypes()
Returns the array of strings (in dot notation) containing the
 notification types that the MBean may emit.

Returns:
the array of strings.  Changing the returned array has no
 effect on this MBeanNotificationInfo.


"
MBeanNotificationInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanNotificationInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanOperationInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.
 The clone is obtained by simply calling super.clone(),
 thus calling the default native shallow cloning mechanism
 implemented by Object.clone().
 No deeper cloning of any internal field is made.
Since this class is immutable, cloning is chiefly of interest
 to subclasses.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanOperationInfo,equals(Object o),boolean,Compare this MBeanOperationInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanOperationInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanOperationInfo such
 that its MBeanFeatureInfo.getName(), getReturnType(), MBeanFeatureInfo.getDescription(), getImpact(), MBeanFeatureInfo.getDescriptor()
 and getSignature() values are equal (not necessarily identical)
 to those of this MBeanConstructorInfo.  Two signature arrays
 are equal if their elements are pairwise equal.
See Also:
Object.hashCode(), 
HashMap


"
MBeanOperationInfo,getImpact(),int,"Returns the impact of the method, one of INFO, ACTION, ACTION_INFO, UNKNOWN.","

getImpact
public int getImpact()
Returns the impact of the method, one of
 INFO, ACTION, ACTION_INFO, UNKNOWN.

Returns:
the impact code.


"
MBeanOperationInfo,getReturnType(),String,Returns the type of the method's return value.,"

getReturnType
public String getReturnType()
Returns the type of the method's return value.

Returns:
the return type.


"
MBeanOperationInfo,getSignature(),MBeanParameterInfo[],Returns the list of parameters for this operation.,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
MBeanOperationInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanOperationInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanParameterInfo,clone(),Object,Returns a shallow clone of this instance.,"

clone
public Object clone()
Returns a shallow clone of this instance.
 The clone is obtained by simply calling super.clone(),
 thus calling the default native shallow cloning mechanism
 implemented by Object.clone().
 No deeper cloning of any internal field is made.
Since this class is immutable, cloning is chiefly of
 interest to subclasses.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
MBeanParameterInfo,equals(Object o),boolean,Compare this MBeanParameterInfo to another.,"

equals
public boolean equals(Object o)
Compare this MBeanParameterInfo to another.

Overrides:
equals in class MBeanFeatureInfo
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanParameterInfo such
 that its MBeanFeatureInfo.getName(), getType(),
 MBeanFeatureInfo.getDescriptor(), and MBeanFeatureInfo.getDescription() values are equal (not necessarily identical)
 to those of this MBeanParameterInfo.
See Also:
Object.hashCode(), 
HashMap


"
MBeanParameterInfo,getType(),String,Returns the type or class name of the data.,"

getType
public String getType()
Returns the type or class name of the data.

Returns:
the type string.


"
MBeanParameterInfo,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class MBeanFeatureInfo
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanParameterInfo,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
MBeanPermission,equals(Object obj),boolean,Checks two MBeanPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two MBeanPermission objects for equality. Checks
 that obj is an MBeanPermission, and has the same
 name and actions as this object.
 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an MBeanPermission, and has the
 same name and actions as this MBeanPermission object.
See Also:
Object.hashCode(), 
HashMap


"
MBeanPermission,getActions(),String,"Returns the ""canonical string representation"" of the actions.","

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions. That is,
 this method always returns present actions in alphabetical order.

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
MBeanPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanPermission,implies(Permission p),boolean,"Checks if this MBeanPermission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this MBeanPermission object ""implies"" the
 specified permission.
More specifically, this method returns true if:

 p is an instance of MBeanPermission; and
 p has a null className or p's className
 matches this object's className; and
 p has a null member or p's member matches this
 object's member; and
 p has a null object name or p's
 object name matches this object's object name; and
 p's actions are a subset of this object's actions

If this object's className is ""*"", p's
 className always matches it.  If it is ""a.*"", p's
 className matches it if it begins with ""a."".
If this object's member is ""*"", p's
 member always matches it.
If this object's objectName n1 is an object name pattern,
 p's objectName n2 matches it if
 n1.equals(n2) or if
 n1.apply(n2).
A permission that includes the queryMBeans action
 is considered to include queryNames as well.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
MBeanServerBuilder,"newMBeanServer(String defaultDomain, MBeanServer outer, MBeanServerDelegate delegate)",MBeanServer,This method creates a new MBeanServer implementation object.,"

newMBeanServer
public MBeanServer newMBeanServer(String defaultDomain,
                                  MBeanServer outer,
                                  MBeanServerDelegate delegate)
This method creates a new MBeanServer implementation object.
 When creating a new MBeanServer the
 MBeanServerFactory first calls
 newMBeanServerDelegate() in order to obtain a new
 MBeanServerDelegate for the new
 MBeanServer. Then it calls
 newMBeanServer(defaultDomain,outer,delegate)
 passing the delegate that should be used by the MBeanServer
 implementation.
 Note that the passed delegate might not be directly the
 MBeanServerDelegate that was returned by this implementation. It could
 be, for instance, a new object wrapping the previously
 returned delegate.
 The outer parameter is a pointer to the MBeanServer that
 should be passed to the MBeanRegistration
 interface when registering MBeans inside the MBeanServer.
 If outer is null, then the MBeanServer
 implementation must use its own this reference when
 invoking the MBeanRegistration interface.
 This makes it possible for a MBeanServer implementation to wrap
 another MBeanServer implementation, in order to implement, e.g,
 security checks, or to prevent access to the actual MBeanServer
 implementation by returning a pointer to a wrapping object.

Parameters:
defaultDomain - Default domain of the new MBeanServer.
outer - A pointer to the MBeanServer object that must be
        passed to the MBeans when invoking their
        MBeanRegistration interface.
delegate - A pointer to the MBeanServerDelegate associated
        with the new MBeanServer. The new MBeanServer must register
        this MBean in its MBean repository.
Returns:
A new private implementation of an MBeanServer.


"
MBeanServerBuilder,newMBeanServerDelegate(),MBeanServerDelegate,This method creates a new MBeanServerDelegate for a new MBeanServer.,"

newMBeanServerDelegate
public MBeanServerDelegate newMBeanServerDelegate()
This method creates a new MBeanServerDelegate for a new MBeanServer.
 When creating a new MBeanServer the
 MBeanServerFactory first calls this method
 in order to create a new MBeanServerDelegate.
 Then it calls
 newMBeanServer(defaultDomain,outer,delegate)
 passing the delegate that should be used by the MBeanServer
 implementation.
 Note that the passed delegate might not be directly the
 MBeanServerDelegate that was returned by this method. It could
 be, for instance, a new object wrapping the previously
 returned object.

Returns:
A new MBeanServerDelegate.


"
MBeanServerDelegate,"addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Adds a listener to this MBean.,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
                             throws IllegalArgumentException
Description copied from interface: NotificationBroadcaster
Adds a listener to this MBean.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener object which will handle the
 notifications emitted by the broadcaster.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
Throws:
IllegalArgumentException - Listener parameter is null.
See Also:
NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)


"
MBeanServerDelegate,getImplementationName(),String,Returns the JMX implementation name (the name of this product).,"

getImplementationName
public String getImplementationName()
Returns the JMX implementation name (the name of this product).

Specified by:
getImplementationName in interface MBeanServerDelegateMBean
Returns:
the implementation name.


"
MBeanServerDelegate,getImplementationVendor(),String,Returns the JMX implementation vendor (the vendor of this product).,"

getImplementationVendor
public String getImplementationVendor()
Returns the JMX implementation vendor (the vendor of this product).

Specified by:
getImplementationVendor in interface MBeanServerDelegateMBean
Returns:
the implementation vendor.


"
MBeanServerDelegate,getImplementationVersion(),String,Returns the JMX implementation version (the version of this product).,"

getImplementationVersion
public String getImplementationVersion()
Returns the JMX implementation version (the version of this product).

Specified by:
getImplementationVersion in interface MBeanServerDelegateMBean
Returns:
the implementation version.


"
MBeanServerDelegate,getMBeanServerId(),String,Returns the MBean server agent identity.,"

getMBeanServerId
public String getMBeanServerId()
Returns the MBean server agent identity.

Specified by:
getMBeanServerId in interface MBeanServerDelegateMBean
Returns:
the identity.


"
MBeanServerDelegate,getNotificationInfo(),MBeanNotificationInfo[],"Returns an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type.","

getNotificationInfo
public MBeanNotificationInfo[] getNotificationInfo()
Description copied from interface: NotificationBroadcaster
Returns an array indicating, for each notification this
 MBean may send, the name of the Java class of the notification
 and the notification type.
It is not illegal for the MBean to send notifications not
 described in this array.  However, some clients of the MBean
 server may depend on the array being complete for their correct
 functioning.

Specified by:
getNotificationInfo in interface NotificationBroadcaster
Returns:
the array of possible notifications.


"
MBeanServerDelegate,getSpecificationName(),String,Returns the full name of the JMX specification implemented by this product.,"

getSpecificationName
public String getSpecificationName()
Returns the full name of the JMX specification implemented
 by this product.

Specified by:
getSpecificationName in interface MBeanServerDelegateMBean
Returns:
the specification name.


"
MBeanServerDelegate,getSpecificationVendor(),String,Returns the vendor of the JMX specification implemented by this product.,"

getSpecificationVendor
public String getSpecificationVendor()
Returns the vendor of the JMX specification implemented
 by this product.

Specified by:
getSpecificationVendor in interface MBeanServerDelegateMBean
Returns:
the specification vendor.


"
MBeanServerDelegate,getSpecificationVersion(),String,Returns the version of the JMX specification implemented by this product.,"

getSpecificationVersion
public String getSpecificationVersion()
Returns the version of the JMX specification implemented
 by this product.

Specified by:
getSpecificationVersion in interface MBeanServerDelegateMBean
Returns:
the specification version.


"
MBeanServerDelegate,removeNotificationListener(NotificationListener listener),void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
MBeanServerDelegate,"removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
MBeanServerDelegate,sendNotification(Notification notification),void,Enables the MBean server to send a notification.,"

sendNotification
public void sendNotification(Notification notification)
Enables the MBean server to send a notification.
 If the passed notification has a sequence number lesser
 or equal to 0, then replace it with the delegate's own sequence
 number.

Parameters:
notification - The notification to send.


"
MBeanServerFactory,createMBeanServer(),static MBeanServer,Return a new object implementing the MBeanServer interface with a standard default domain name.,"

createMBeanServer
public static MBeanServer createMBeanServer()
Return a new object implementing the MBeanServer interface
 with a standard default domain name.  The default domain name
 is used as the domain part in the ObjectName of MBeans when the
 domain is specified by the user is null.
The standard default domain name is
 DefaultDomain.
The MBeanServer reference is internally kept. This will
 allow findMBeanServer to return a reference to
 this MBeanServer object.
This method is equivalent to createMBeanServer(null).

Returns:
the newly created MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and the
 caller's permissions do not include or imply MBeanServerPermission(""createMBeanServer"").
JMRuntimeException - if the property
 javax.management.builder.initial exists but the
 class it names cannot be instantiated through a public
 no-argument constructor; or if the instantiated builder returns
 null from its newMBeanServerDelegate or newMBeanServer methods.
ClassCastException - if the property
 javax.management.builder.initial exists and can be
 instantiated but is not assignment compatible with MBeanServerBuilder.


"
MBeanServerFactory,createMBeanServer(String domain),static MBeanServer,Return a new object implementing the MBeanServer interface with the specified default domain name.,"

createMBeanServer
public static MBeanServer createMBeanServer(String domain)
Return a new object implementing the MBeanServer
 interface with the specified default domain name.  The given
 domain name is used as the domain part in the ObjectName of
 MBeans when the domain is specified by the user is null.
The MBeanServer reference is internally kept. This will
 allow findMBeanServer to return a reference to
 this MBeanServer object.

Parameters:
domain - the default domain name for the created
 MBeanServer.  This is the value that will be returned by MBeanServer.getDefaultDomain().
Returns:
the newly created MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and
 the caller's permissions do not include or imply MBeanServerPermission(""createMBeanServer"").
JMRuntimeException - if the property
 javax.management.builder.initial exists but the
 class it names cannot be instantiated through a public
 no-argument constructor; or if the instantiated builder returns
 null from its newMBeanServerDelegate or newMBeanServer methods.
ClassCastException - if the property
 javax.management.builder.initial exists and can be
 instantiated but is not assignment compatible with MBeanServerBuilder.


"
MBeanServerFactory,findMBeanServer(String agentId),static ArrayList<MBeanServer>,Return a list of registered MBeanServer objects.,"

findMBeanServer
public static ArrayList<MBeanServer> findMBeanServer(String agentId)
Return a list of registered MBeanServer objects.  A
 registered MBeanServer object is one that was created by one of
 the createMBeanServer methods and not subsequently
 released with releaseMBeanServer.

Parameters:
agentId - The agent identifier of the MBeanServer to
 retrieve.  If this parameter is null, all registered
 MBeanServers in this JVM are returned.  Otherwise, only
 MBeanServers whose id is equal to agentId are
 returned.  The id of an MBeanServer is the
 MBeanServerId attribute of its delegate MBean.
Returns:
A list of MBeanServer objects.
Throws:
SecurityException - if there is a SecurityManager and the
 caller's permissions do not include or imply MBeanServerPermission(""findMBeanServer"").


"
MBeanServerFactory,getClassLoaderRepository(MBeanServer server),static ClassLoaderRepository,Return the ClassLoaderRepository used by the given MBeanServer.,"

getClassLoaderRepository
public static ClassLoaderRepository getClassLoaderRepository(MBeanServer server)
Return the ClassLoaderRepository used by the given MBeanServer.
 This method is equivalent to server.getClassLoaderRepository().

Parameters:
server - The MBeanServer under examination. Since JMX 1.2,
 if server is null, the result is a
 NullPointerException.  This behavior differs from what
 was implemented in JMX 1.1 - where the possibility to use
 null was deprecated.
Returns:
The Class Loader Repository used by the given MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and
 the caller's permissions do not include or imply MBeanPermission(""getClassLoaderRepository"").
NullPointerException - if server is null.


"
MBeanServerFactory,newMBeanServer(),static MBeanServer,"Return a new object implementing the MBeanServer interface with a standard default domain name, without keeping an internal reference to this new object.","

newMBeanServer
public static MBeanServer newMBeanServer()
Return a new object implementing the MBeanServer interface
 with a standard default domain name, without keeping an
 internal reference to this new object.  The default domain name
 is used as the domain part in the ObjectName of MBeans when the
 domain is specified by the user is null.
The standard default domain name is
 DefaultDomain.
No reference is kept. findMBeanServer will not
 be able to return a reference to this MBeanServer object, but
 the garbage collector will be able to remove the MBeanServer
 object when it is no longer referenced.
This method is equivalent to newMBeanServer(null).

Returns:
the newly created MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and the
 caller's permissions do not include or imply MBeanServerPermission(""newMBeanServer"").
JMRuntimeException - if the property
 javax.management.builder.initial exists but the
 class it names cannot be instantiated through a public
 no-argument constructor; or if the instantiated builder returns
 null from its newMBeanServerDelegate or newMBeanServer methods.
ClassCastException - if the property
 javax.management.builder.initial exists and can be
 instantiated but is not assignment compatible with MBeanServerBuilder.


"
MBeanServerFactory,newMBeanServer(String domain),static MBeanServer,"Return a new object implementing the MBeanServer interface with the specified default domain name, without keeping an internal reference to this new object.","

newMBeanServer
public static MBeanServer newMBeanServer(String domain)
Return a new object implementing the MBeanServer interface
 with the specified default domain name, without keeping an
 internal reference to this new object.  The given domain name
 is used as the domain part in the ObjectName of MBeans when the
 domain is specified by the user is null.
No reference is kept. findMBeanServer will not
 be able to return a reference to this MBeanServer object, but
 the garbage collector will be able to remove the MBeanServer
 object when it is no longer referenced.

Parameters:
domain - the default domain name for the created
 MBeanServer.  This is the value that will be returned by MBeanServer.getDefaultDomain().
Returns:
the newly created MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and the
 caller's permissions do not include or imply MBeanServerPermission(""newMBeanServer"").
JMRuntimeException - if the property
 javax.management.builder.initial exists but the
 class it names cannot be instantiated through a public
 no-argument constructor; or if the instantiated builder returns
 null from its newMBeanServerDelegate or newMBeanServer methods.
ClassCastException - if the property
 javax.management.builder.initial exists and can be
 instantiated but is not assignment compatible with MBeanServerBuilder.


"
MBeanServerFactory,releaseMBeanServer(MBeanServer mbeanServer),static void,Remove internal MBeanServerFactory references to a created MBeanServer.,"

releaseMBeanServer
public static void releaseMBeanServer(MBeanServer mbeanServer)
Remove internal MBeanServerFactory references to a created
 MBeanServer. This allows the garbage collector to remove the
 MBeanServer object.

Parameters:
mbeanServer - the MBeanServer object to remove.
Throws:
IllegalArgumentException - if
 mbeanServer was not generated by one of the
 createMBeanServer methods, or if
 releaseMBeanServer was already called on it.
SecurityException - if there is a SecurityManager and
 the caller's permissions do not include or imply MBeanServerPermission(""releaseMBeanServer"").


"
MBeanServerInvocationHandler,getMBeanServerConnection(),MBeanServerConnection,The MBean server connection through which the methods of a proxy using this handler are forwarded.,"

getMBeanServerConnection
public MBeanServerConnection getMBeanServerConnection()
The MBean server connection through which the methods of
 a proxy using this handler are forwarded.

Returns:
the MBean server connection.
Since:
1.6


"
MBeanServerInvocationHandler,getObjectName(),ObjectName,The name of the MBean within the MBean server to which methods are forwarded.,"

getObjectName
public ObjectName getObjectName()
The name of the MBean within the MBean server to which methods
 are forwarded.

Returns:
the object name.
Since:
1.6


"
MBeanServerInvocationHandler,"invoke(Object proxy, Method method, Object[] args)",Object,Processes a method invocation on a proxy instance and returns the result.,"

invoke
public Object invoke(Object proxy,
                     Method method,
                     Object[] args)
              throws Throwable
Description copied from interface: InvocationHandler
Processes a method invocation on a proxy instance and returns
 the result.  This method will be invoked on an invocation handler
 when a method is invoked on a proxy instance that it is
 associated with.

Specified by:
invoke in interface InvocationHandler
Parameters:
proxy - the proxy instance that the method was invoked on
method - the Method instance corresponding to
 the interface method invoked on the proxy instance.  The declaring
 class of the Method object will be the interface that
 the method was declared in, which may be a superinterface of the
 proxy interface that the proxy class inherits the method through.
args - an array of objects containing the values of the
 arguments passed in the method invocation on the proxy instance,
 or null if interface method takes no arguments.
 Arguments of primitive types are wrapped in instances of the
 appropriate primitive wrapper class, such as
 java.lang.Integer or java.lang.Boolean.
Returns:
the value to return from the method invocation on the
 proxy instance.  If the declared return type of the interface
 method is a primitive type, then the value returned by
 this method must be an instance of the corresponding primitive
 wrapper class; otherwise, it must be a type assignable to the
 declared return type.  If the value returned by this method is
 null and the interface method's return type is
 primitive, then a NullPointerException will be
 thrown by the method invocation on the proxy instance.  If the
 value returned by this method is otherwise not compatible with
 the interface method's declared return type as described above,
 a ClassCastException will be thrown by the method
 invocation on the proxy instance.
Throws:
Throwable - the exception to throw from the method
 invocation on the proxy instance.  The exception's type must be
 assignable either to any of the exception types declared in the
 throws clause of the interface method or to the
 unchecked exception types java.lang.RuntimeException
 or java.lang.Error.  If a checked exception is
 thrown by this method that is not assignable to any of the
 exception types declared in the throws clause of
 the interface method, then an
 UndeclaredThrowableException containing the
 exception that was thrown by this method will be thrown by the
 method invocation on the proxy instance.
See Also:
UndeclaredThrowableException


"
MBeanServerInvocationHandler,isMXBean(),boolean,"If true, the proxy is for an MXBean, and appropriate mappings are applied to method parameters and return values.","

isMXBean
public boolean isMXBean()
If true, the proxy is for an MXBean, and appropriate mappings
 are applied to method parameters and return values.

Returns:
whether the proxy is for an MXBean.
Since:
1.6


"
MBeanServerInvocationHandler,"newProxyInstance(MBeanServerConnection connection, ObjectName objectName, Class<T> interfaceClass, boolean notificationBroadcaster)",static <T> T,Return a proxy that implements the given interface by forwarding its methods through the given MBean server to the named MBean.,"

newProxyInstance
public static <T> T newProxyInstance(MBeanServerConnection connection,
                                     ObjectName objectName,
                                     Class<T> interfaceClass,
                                     boolean notificationBroadcaster)
Return a proxy that implements the given interface by
 forwarding its methods through the given MBean server to the
 named MBean.  As of 1.6, the methods JMX.newMBeanProxy(MBeanServerConnection, ObjectName, Class) and
 JMX.newMBeanProxy(MBeanServerConnection, ObjectName, Class,
 boolean) are preferred to this method.
This method is equivalent to Proxy.newProxyInstance(interfaceClass.getClassLoader(),
 interfaces, handler).  Here handler is the
 result of new
 MBeanServerInvocationHandler(connection, objectName), and
 interfaces is an array that has one element if
 notificationBroadcaster is false and two if it is
 true.  The first element of interfaces is
 interfaceClass and the second, if present, is
 NotificationEmitter.class.

Type Parameters:
T - allows the compiler to know that if the interfaceClass parameter is MyMBean.class, for example,
 then the return type is MyMBean.
Parameters:
connection - the MBean server to forward to.
objectName - the name of the MBean within
 connection to forward to.
interfaceClass - the management interface that the MBean
 exports, which will also be implemented by the returned proxy.
notificationBroadcaster - make the returned proxy
 implement NotificationEmitter by forwarding its methods
 via connection. A call to NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object) on the proxy will
 result in a call to MBeanServerConnection.addNotificationListener(ObjectName,
 NotificationListener, NotificationFilter, Object), and likewise
 for the other methods of NotificationBroadcaster and NotificationEmitter.
Returns:
the new proxy instance.
See Also:
JMX.newMBeanProxy(MBeanServerConnection, ObjectName, Class, boolean)


"
MBeanServerNotification,getMBeanName(),ObjectName,Returns the object name of the MBean that caused the notification.,"

getMBeanName
public ObjectName getMBeanName()
Returns the  object name of the MBean that caused the notification.

Returns:
the object name of the MBean that caused the notification.


"
MBeanServerNotification,toString(),String,Returns a String representation of this notification.,"

toString
public String toString()
Description copied from class: Notification
Returns a String representation of this notification.

Overrides:
toString in class Notification
Returns:
A String representation of this notification.


"
MBeanServerPermission,equals(Object obj),boolean,Checks two MBeanServerPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two MBeanServerPermission objects for equality. Checks that
 obj is an MBeanServerPermission, and represents the same
 list of allowable actions as this object.
 

Overrides:
equals in class BasicPermission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if the objects are equal.
See Also:
Object.hashCode(), 
HashMap


"
MBeanServerPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Description copied from class: BasicPermission
Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Overrides:
hashCode in class BasicPermission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MBeanServerPermission,implies(Permission p),boolean,"Checks if this MBeanServerPermission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this MBeanServerPermission object ""implies"" the specified
 permission.
More specifically, this method returns true if:

 p is an instance of MBeanServerPermission,
 p's target names are a subset of this object's target
 names

The createMBeanServer permission implies the
 newMBeanServer permission.

Overrides:
implies in class BasicPermission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
MBeanServerPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing BasicPermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Description copied from class: BasicPermission
Returns a new PermissionCollection object for storing BasicPermission
 objects.

 BasicPermission objects must be stored in a manner that allows them
 to be inserted in any order, but that also enables the
 PermissionCollection implies method
 to be implemented in an efficient (and consistent) manner.

Overrides:
newPermissionCollection in class BasicPermission
Returns:
a new PermissionCollection object suitable for
 storing BasicPermissions.


"
Notification,getMessage(),String,Get the notification message.,"

getMessage
public String getMessage()
Get the notification message.

Returns:
The message string of this notification object.


"
Notification,getSequenceNumber(),long,Get the notification sequence number.,"

getSequenceNumber
public long getSequenceNumber()
Get the notification sequence number.

Returns:
The notification sequence number within the source object. It's a serial number
 identifying a particular instance of notification in the context of the notification source.
 The notification model does not assume that notifications will be received in the same order
 that they are sent. The sequence number helps listeners to sort received notifications.
See Also:
setSequenceNumber(long)


"
Notification,getTimeStamp(),long,Get the notification timestamp.,"

getTimeStamp
public long getTimeStamp()
Get the notification timestamp.

Returns:
The notification timestamp.
See Also:
setTimeStamp(long)


"
Notification,getType(),String,Get the notification type.,"

getType
public String getType()
Get the notification type.

Returns:
The notification type. It's a string expressed in a dot notation
 similar to Java properties. It is recommended that the notification type
 should follow the reverse-domain-name convention used by Java package
 names.  An example of a notification type is com.example.alarm.router.


"
Notification,getUserData(),Object,Get the user data.,"

getUserData
public Object getUserData()
Get the user data.

Returns:
The user data object. It is used for whatever data
 the notification source wishes to communicate to its consumers.
See Also:
setUserData(java.lang.Object)


"
Notification,setSequenceNumber(long sequenceNumber),void,Set the notification sequence number.,"

setSequenceNumber
public void setSequenceNumber(long sequenceNumber)
Set the notification sequence number.

Parameters:
sequenceNumber - The notification sequence number within the source object. It is
 a serial number identifying a particular instance of notification in the
 context of the notification source.
See Also:
getSequenceNumber()


"
Notification,setSource(Object source),void,Sets the source.,"

setSource
public void setSource(Object source)
Sets the source.

Parameters:
source - the new source for this object.
See Also:
EventObject.getSource()


"
Notification,setTimeStamp(long timeStamp),void,Set the notification timestamp.,"

setTimeStamp
public void setTimeStamp(long timeStamp)
Set the notification timestamp.

Parameters:
timeStamp - The notification timestamp. It indicates when the notification was generated.
See Also:
getTimeStamp()


"
Notification,setUserData(Object userData),void,Set the user data.,"

setUserData
public void setUserData(Object userData)
Set the user data.

Parameters:
userData - The user data object. It is used for whatever data
 the notification source wishes to communicate to its consumers.
See Also:
getUserData()


"
Notification,toString(),String,Returns a String representation of this notification.,"

toString
public String toString()
Returns a String representation of this notification.

Overrides:
toString in class EventObject
Returns:
A String representation of this notification.


"
NotificationBroadcasterSupport,"addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Adds a listener.,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
Adds a listener.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener to receive notifications.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
Throws:
IllegalArgumentException - thrown if the listener is null.
See Also:
removeNotificationListener(javax.management.NotificationListener)


"
NotificationBroadcasterSupport,getNotificationInfo(),MBeanNotificationInfo[],"Returns an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type.","

getNotificationInfo
public MBeanNotificationInfo[] getNotificationInfo()
Description copied from interface: NotificationBroadcaster
Returns an array indicating, for each notification this
 MBean may send, the name of the Java class of the notification
 and the notification type.
It is not illegal for the MBean to send notifications not
 described in this array.  However, some clients of the MBean
 server may depend on the array being complete for their correct
 functioning.

Specified by:
getNotificationInfo in interface NotificationBroadcaster
Returns:
the array of possible notifications.


"
NotificationBroadcasterSupport,"handleNotification(NotificationListener listener, Notification notif, Object handback)",protected void,This method is called by sendNotification for each listener in order to send the notification to that listener.,"

handleNotification
protected void handleNotification(NotificationListener listener,
                                  Notification notif,
                                  Object handback)
This method is called by sendNotification for each listener in order to send the
 notification to that listener.  It can be overridden in
 subclasses to change the behavior of notification delivery,
 for instance to deliver the notification in a separate
 thread.
The default implementation of this method is equivalent to
 
 listener.handleNotification(notif, handback);
 

Parameters:
listener - the listener to which the notification is being
 delivered.
notif - the notification being delivered to the listener.
handback - the handback object that was supplied when the
 listener was added.


"
NotificationBroadcasterSupport,removeNotificationListener(NotificationListener listener),void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
NotificationBroadcasterSupport,"removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
NotificationBroadcasterSupport,sendNotification(Notification notification),void,Sends a notification.,"

sendNotification
public void sendNotification(Notification notification)
Sends a notification.

 If an Executor was specified in the constructor, it will be given one
 task per selected listener to deliver the notification to that listener.

Parameters:
notification - The notification to send.


"
NotificationFilterSupport,disableAllTypes(),void,Disables all notification types.,"

disableAllTypes
public void disableAllTypes()
Disables all notification types.

"
NotificationFilterSupport,disableType(String prefix),void,Removes the given prefix from the prefix list.,"

disableType
public void disableType(String prefix)
Removes the given prefix from the prefix list.
 If the specified prefix is not in the list of enabled notification types,
 this method has no effect.

Parameters:
prefix - The prefix.


"
NotificationFilterSupport,enableType(String prefix),void,Enables all the notifications the type of which starts with the specified prefix to be sent to the listener.,"

enableType
public void enableType(String prefix)
                throws IllegalArgumentException
Enables all the notifications the type of which starts with the specified prefix
 to be sent to the listener.
 If the specified prefix is already in the list of enabled notification types,
 this method has no effect.
 
 Example:
 

 // Enables all notifications the type of which starts with ""my_example"" to be sent.
 myFilter.enableType(""my_example"");
 // Enables all notifications the type of which is ""my_example.my_type"" to be sent.
 myFilter.enableType(""my_example.my_type"");
 


 Note that:
 
 myFilter.enableType(""my_example.*"");
 
 will no match any notification type.

Parameters:
prefix - The prefix.
Throws:
IllegalArgumentException - The prefix parameter is null.


"
NotificationFilterSupport,getEnabledTypes(),Vector<String>,Gets all the enabled notification types for this filter.,"

getEnabledTypes
public Vector<String> getEnabledTypes()
Gets all the enabled notification types for this filter.

Returns:
The list containing all the enabled notification types.


"
NotificationFilterSupport,isNotificationEnabled(Notification notification),boolean,Invoked before sending the specified notification to the listener.,"

isNotificationEnabled
public boolean isNotificationEnabled(Notification notification)
Invoked before sending the specified notification to the listener.
 This filter compares the type of the specified notification with each enabled type.
 If the notification type matches one of the enabled types,
 the notification should be sent to the listener and this method returns true.

Specified by:
isNotificationEnabled in interface NotificationFilter
Parameters:
notification - The notification to be sent.
Returns:
true if the notification should be sent to the listener, false otherwise.


"
ObjectInstance,equals(Object object),boolean,Compares the current object instance with another object instance.,"

equals
public boolean equals(Object object)
Compares the current object instance with another object instance.

Overrides:
equals in class Object
Parameters:
object - The object instance that the current object instance is
     to be compared with.
Returns:
True if the two object instances are equal, otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
ObjectInstance,getClassName(),String,Returns the class part.,"

getClassName
public String getClassName()
Returns the class part.

Returns:
the class name.


"
ObjectInstance,getObjectName(),ObjectName,Returns the object name part.,"

getObjectName
public ObjectName getObjectName()
Returns the object name part.

Returns:
the object name.


"
ObjectInstance,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ObjectInstance,toString(),String,Returns a string representing this ObjectInstance object.,"

toString
public String toString()
Returns a string representing this ObjectInstance object. The format of this string
 is not specified, but users can expect that two ObjectInstances return the same
 string if and only if they are equal.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ObjectName,apply(ObjectName name),boolean,"Test whether this ObjectName, which may be a pattern, matches another ObjectName.","

apply
public boolean apply(ObjectName name)
Test whether this ObjectName, which may be a pattern,
 matches another ObjectName.  If name is a pattern,
 the result is false.  If this ObjectName is a pattern, the
 result is true if and only if name matches the
 pattern.  If neither this ObjectName nor name is
 a pattern, the result is true if and only if the two
 ObjectNames are equal as described for the equals(Object) method.

Specified by:
apply in interface QueryExp
Parameters:
name - The name of the MBean to compare to.
Returns:
True if name matches this ObjectName.
Throws:
NullPointerException - if name is null.


"
ObjectName,compareTo(ObjectName name),int,Compares two ObjectName instances.,"

compareTo
public int compareTo(ObjectName name)
Compares two ObjectName instances. The ordering relation between
 ObjectNames is not completely specified but is intended to be such
 that a sorted list of ObjectNames will appear in an order that is
 convenient for a person to read.
In particular, if the two ObjectName instances have different
 domains then their order is the lexicographical order of the domains.
 The ordering of the key property list remains unspecified.
For example, the ObjectName instances below:

Shapes:type=Square,name=3
Colors:type=Red,name=2
Shapes:type=Triangle,side=isosceles,name=2
Colors:type=Red,name=1
Shapes:type=Square,name=1
Colors:type=Blue,name=1
Shapes:type=Square,name=2
JMImplementation:type=MBeanServerDelegate
Shapes:type=Triangle,side=scalene,name=1

could be ordered as follows:

Colors:type=Blue,name=1
Colors:type=Red,name=1
Colors:type=Red,name=2
JMImplementation:type=MBeanServerDelegate
Shapes:type=Square,name=1
Shapes:type=Square,name=2
Shapes:type=Square,name=3
Shapes:type=Triangle,side=scalene,name=1
Shapes:type=Triangle,side=isosceles,name=2


Specified by:
compareTo in interface Comparable<ObjectName>
Parameters:
name - the ObjectName to be compared.
Returns:
a negative integer, zero, or a positive integer as this
         ObjectName is less than, equal to, or greater than the
         specified ObjectName.
Since:
1.6


"
ObjectName,equals(Object object),boolean,Compares the current object name with another object name.,"

equals
public boolean equals(Object object)
Compares the current object name with another object name.  Two
 ObjectName instances are equal if and only if their canonical
 forms are equal.  The canonical form is the string described
 for getCanonicalName().

Overrides:
equals in class Object
Parameters:
object - The object name that the current object name is to be
        compared with.
Returns:
True if object is an ObjectName whose
 canonical form is equal to that of this ObjectName.
See Also:
Object.hashCode(), 
HashMap


"
ObjectName,getCanonicalKeyPropertyListString(),String,"Returns a string representation of the list of key properties, in which the key properties are sorted in lexical order.","

getCanonicalKeyPropertyListString
public String getCanonicalKeyPropertyListString()
Returns a string representation of the list of key properties,
 in which the key properties are sorted in lexical order. This
 is used in lexicographic comparisons performed in order to
 select MBeans based on their key property list.  Lexical order
 is the order implied by String.compareTo(String).

Returns:
The canonical key property list string.  This string is
 independent of whether the ObjectName is a pattern.


"
ObjectName,getCanonicalName(),String,"Returns the canonical form of the name; that is, a string representation where the properties are sorted in lexical order.","

getCanonicalName
public String getCanonicalName()
Returns the canonical form of the name; that is, a string
 representation where the properties are sorted in lexical
 order.
More precisely, the canonical form of the name is a String
 consisting of the domain part, a colon
 (:), the canonical key property list, and
 a pattern indication.
The canonical key property list is the same string
 as described for getCanonicalKeyPropertyListString().
The pattern indication is:
 
empty for an ObjectName
 that is not a property list pattern;
 an asterisk for an ObjectName
 that is a property list pattern with no keys; or
 a comma and an
 asterisk (,*) for an ObjectName that is a property
 list pattern with at least one key.
 

Returns:
The canonical form of the name.


"
ObjectName,getDomain(),String,Returns the domain part.,"

getDomain
public String getDomain()
Returns the domain part.

Returns:
The domain.


"
ObjectName,getInstance(ObjectName name),static ObjectName,Return an instance of ObjectName that can be used anywhere the given object can be used.,"

getInstance
public static ObjectName getInstance(ObjectName name)
Return an instance of ObjectName that can be used anywhere
 the given object can be used.  The returned object may be of a
 subclass of ObjectName.  If name is of a subclass
 of ObjectName, it is not guaranteed that the returned object
 will be of the same class.
The returned value may or may not be identical to
 name.  Calling this method twice with the same
 parameters may return the same object or two equal but not
 identical objects.
Since ObjectName is immutable, it is not usually useful to
 make a copy of an ObjectName.  The principal use of this method
 is to guard against a malicious caller who might pass an
 instance of a subclass with surprising behavior to sensitive
 code.  Such code can call this method to obtain an ObjectName
 that is known not to have surprising behavior.

Parameters:
name - an instance of the ObjectName class or of a subclass
Returns:
an instance of ObjectName or a subclass that is known to
 have the same semantics.  If name respects the
 semantics of ObjectName, then the returned object is equal
 (though not necessarily identical) to name.
Throws:
NullPointerException - The name is null.


"
ObjectName,getInstance(String name),static ObjectName,Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(name) can be used.,"

getInstance
public static ObjectName getInstance(String name)
                              throws MalformedObjectNameException,
                                     NullPointerException
Return an instance of ObjectName that can be used anywhere
 an object obtained with new
 ObjectName(name) can be used.  The returned object may be of
 a subclass of ObjectName.  Calling this method twice with the
 same parameters may return the same object or two equal but
 not identical objects.

Parameters:
name - A string representation of the object name.
Returns:
an ObjectName corresponding to the given String.
Throws:
MalformedObjectNameException - The string passed as a
 parameter does not have the right format.
NullPointerException - The name parameter
 is null.


"
ObjectName,"getInstance(String domain, Hashtable<String,String> table)",static ObjectName,"Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(domain, table) can be used.","

getInstance
public static ObjectName getInstance(String domain,
                                     Hashtable<String,String> table)
                              throws MalformedObjectNameException
Return an instance of ObjectName that can be used anywhere
 an object obtained with new ObjectName(domain, table) can be used.  The returned
 object may be of a subclass of ObjectName.  Calling this method
 twice with the same parameters may return the same object or
 two equal but not identical objects.

Parameters:
domain - The domain part of the object name.
table - A hash table containing one or more key
 properties.  The key of each entry in the table is the key of a
 key property in the object name.  The associated value in the
 table is the associated value in the object name.
Returns:
an ObjectName corresponding to the given domain and
 key mappings.
Throws:
MalformedObjectNameException - The domain
 contains an illegal character, or one of the keys or values in
 table contains an illegal character, or one of the
 values in table does not follow the rules for
 quoting.
NullPointerException - One of the parameters is null.


"
ObjectName,"getInstance(String domain, String key, String value)",static ObjectName,"Return an instance of ObjectName that can be used anywhere an object obtained with new ObjectName(domain, key, value) can be used.","

getInstance
public static ObjectName getInstance(String domain,
                                     String key,
                                     String value)
                              throws MalformedObjectNameException
Return an instance of ObjectName that can be used anywhere
 an object obtained with new ObjectName(domain, key, value) can be used.  The
 returned object may be of a subclass of ObjectName.  Calling
 this method twice with the same parameters may return the same
 object or two equal but not identical objects.

Parameters:
domain - The domain part of the object name.
key - The attribute in the key property of the object name.
value - The value in the key property of the object name.
Returns:
an ObjectName corresponding to the given domain,
 key, and value.
Throws:
MalformedObjectNameException - The
 domain, key, or value
 contains an illegal character, or value does not
 follow the rules for quoting.
NullPointerException - One of the parameters is null.


"
ObjectName,getKeyProperty(String property),String,Obtains the value associated with a key in a key property.,"

getKeyProperty
public String getKeyProperty(String property)
Obtains the value associated with a key in a key property.

Parameters:
property - The property whose value is to be obtained.
Returns:
The value of the property, or null if there is no such
 property in this ObjectName.
Throws:
NullPointerException - If property is null.


"
ObjectName,getKeyPropertyList(),"Hashtable<String,String>",Returns the key properties as a Hashtable.,"

getKeyPropertyList
public Hashtable<String,String> getKeyPropertyList()
Returns the key properties as a Hashtable.  The returned
 value is a Hashtable in which each key is a key in the
 ObjectName's key property list and each value is the associated
 value.
The returned value may be unmodifiable.  If it is
 modifiable, changing it has no effect on this ObjectName.

Returns:
The table of key properties.


"
ObjectName,getKeyPropertyListString(),String,Returns a string representation of the list of key properties specified at creation time.,"

getKeyPropertyListString
public String getKeyPropertyListString()
Returns a string representation of the list of key
 properties specified at creation time.  If this ObjectName was
 constructed with the constructor ObjectName(String),
 the key properties in the returned String will be in the same
 order as in the argument to the constructor.

Returns:
The key property list string.  This string is
 independent of whether the ObjectName is a pattern.


"
ObjectName,hashCode(),int,Returns a hash code for this object name.,"

hashCode
public int hashCode()
Returns a hash code for this object name.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ObjectName,isDomainPattern(),boolean,Checks whether the object name is a pattern on the domain part.,"

isDomainPattern
public boolean isDomainPattern()
Checks whether the object name is a pattern on the domain part.

Returns:
True if the name is a domain pattern, otherwise false.


"
ObjectName,isPattern(),boolean,Checks whether the object name is a pattern.,"

isPattern
public boolean isPattern()
Checks whether the object name is a pattern.
 
 An object name is a pattern if its domain contains a
 wildcard or if the object name is a property pattern.

Returns:
True if the name is a pattern, otherwise false.


"
ObjectName,isPropertyListPattern(),boolean,Checks whether the object name is a pattern on the key property list.,"

isPropertyListPattern
public boolean isPropertyListPattern()
Checks whether the object name is a pattern on the key property list.
 
 For example, ""d:k=v,*"" and ""d:k=*,*"" are key property list patterns
 whereas ""d:k=*"" is not.

Returns:
True if the name is a property list pattern, otherwise false.
Since:
1.6


"
ObjectName,isPropertyPattern(),boolean,Checks whether the object name is a pattern on the key properties.,"

isPropertyPattern
public boolean isPropertyPattern()
Checks whether the object name is a pattern on the key properties.
 
 An object name is a pattern on the key properties if it is a
 pattern on the key property list (e.g. ""d:k=v,*"") or on the
 property values (e.g. ""d:k=*"") or on both (e.g. ""d:k=*,*"").

Returns:
True if the name is a property pattern, otherwise false.


"
ObjectName,isPropertyValuePattern(),boolean,Checks whether the object name is a pattern on the value part of at least one of the key properties.,"

isPropertyValuePattern
public boolean isPropertyValuePattern()
Checks whether the object name is a pattern on the value part
 of at least one of the key properties.
 
 For example, ""d:k=*"" and ""d:k=*,*"" are property value patterns
 whereas ""d:k=v,*"" is not.

Returns:
True if the name is a property value pattern, otherwise false.
Since:
1.6


"
ObjectName,isPropertyValuePattern(String property),boolean,Checks whether the value associated with a key in a key property is a pattern.,"

isPropertyValuePattern
public boolean isPropertyValuePattern(String property)
Checks whether the value associated with a key in a key
 property is a pattern.

Parameters:
property - The property whose value is to be checked.
Returns:
True if the value associated with the given key property
 is a pattern, otherwise false.
Throws:
NullPointerException - If property is null.
IllegalArgumentException - If property is not
 a valid key property for this ObjectName.
Since:
1.6


"
ObjectName,quote(String s),static String,"Returns a quoted form of the given String, suitable for inclusion in an ObjectName.","

quote
public static String quote(String s)
Returns a quoted form of the given String, suitable for
 inclusion in an ObjectName.  The returned value can be used as
 the value associated with a key in an ObjectName.  The String
 s may contain any character.  Appropriate quoting
 ensures that the returned value is legal in an ObjectName.
The returned value consists of a quote ('""'), a sequence of
 characters corresponding to the characters of s,
 and another quote.  Characters in s appear
 unchanged within the returned value except:

A quote ('""') is replaced by a backslash (\) followed by a quote.
An asterisk ('*') is replaced by a backslash (\) followed by an
 asterisk.
A question mark ('?') is replaced by a backslash (\) followed by
 a question mark.
A backslash ('\') is replaced by two backslashes.
A newline character (the character '\n' in Java) is replaced
 by a backslash followed by the character '\n'.


Parameters:
s - the String to be quoted.
Returns:
the quoted String.
Throws:
NullPointerException - if s is null.


"
ObjectName,setMBeanServer(MBeanServer mbs),void,Sets the MBean server on which the query is to be performed.,"

setMBeanServer
public void setMBeanServer(MBeanServer mbs)
Description copied from interface: QueryExp
Sets the MBean server on which the query is to be performed.

Specified by:
setMBeanServer in interface QueryExp
Parameters:
mbs - The MBean server on which the query is to be performed.


"
ObjectName,toString(),String,Returns a string representation of the object name.,"

toString
public String toString()
Returns a string representation of the object name.  The
 format of this string is not specified, but users can expect
 that two ObjectNames return the same string if and only if they
 are equal.

Overrides:
toString in class Object
Returns:
a string representation of this object name.


"
ObjectName,unquote(String q),static String,Returns an unquoted form of the given String.,"

unquote
public static String unquote(String q)
Returns an unquoted form of the given String.  If
 q is a String returned by quote(s),
 then unquote(q).equals(s).  If there is no String
 s for which quote(s).equals(q), then
 unquote(q) throws an IllegalArgumentException.
These rules imply that there is a one-to-one mapping between
 quoted and unquoted forms.

Parameters:
q - the String to be unquoted.
Returns:
the unquoted String.
Throws:
IllegalArgumentException - if q could not
 have been returned by the quote(java.lang.String) method, for instance
 if it does not begin and end with a quote ("").
NullPointerException - if q is null.


"
Query,"and(QueryExp q1, QueryExp q2)",static QueryExp,Returns a query expression that is the conjunction of two other query expressions.,"

and
public static QueryExp and(QueryExp q1,
                           QueryExp q2)
Returns a query expression that is the conjunction of two other query
 expressions.

Parameters:
q1 - A query expression.
q2 - Another query expression.
Returns:
The conjunction of the two arguments.  The returned object
 will be serialized as an instance of the non-public class
 
 javax.management.AndQueryExp.


"
Query,"anySubString(AttributeValueExp a, StringValueExp s)",static QueryExp,Returns a query expression that represents a matching constraint on a string argument.,"

anySubString
public static QueryExp anySubString(AttributeValueExp a,
                                    StringValueExp s)
Returns a query expression that represents a matching constraint on
 a string argument. The value must contain the given literal string
 value.

Parameters:
a - An attribute expression.
s - A string value expression representing the substring.
Returns:
The constraint that a matches s.  The returned object
 will be serialized as an instance of the non-public class

 
 javax.management.MatchQueryExp.


"
Query,attr(String name),static AttributeValueExp,Returns a new attribute expression.,"

attr
public static AttributeValueExp attr(String name)
Returns a new attribute expression.  See AttributeValueExp
 for a detailed description of the semantics of the expression.
Evaluating this expression for a given
 objectName includes performing MBeanServer.getAttribute(objectName,
 name).

Parameters:
name - The name of the attribute.
Returns:
An attribute expression for the attribute named name.


"
Query,"attr(String className, String name)",static AttributeValueExp,Returns a new qualified attribute expression.,"

attr
public static AttributeValueExp attr(String className,
                                     String name)
Returns a new qualified attribute expression.
Evaluating this expression for a given
 objectName includes performing MBeanServer.getObjectInstance(objectName) and MBeanServer.getAttribute(objectName,
 name).

Parameters:
className - The name of the class possessing the attribute.
name - The name of the attribute.
Returns:
An attribute expression for the attribute named name.
 The returned object will be serialized as an instance of the
 non-public class
 
 javax.management.QualifiedAttributeValueExp.


"
Query,"between(ValueExp v1, ValueExp v2, ValueExp v3)",static QueryExp,Returns a query expression that represents the constraint that one value is between two other values.,"

between
public static QueryExp between(ValueExp v1,
                               ValueExp v2,
                               ValueExp v3)
Returns a query expression that represents the constraint that one
 value is between two other values.

Parameters:
v1 - A value expression that is ""between"" v2 and v3.
v2 - Value expression that represents a boundary of the constraint.
v3 - Value expression that represents a boundary of the constraint.
Returns:
The constraint that v1 lies between v2 and v3.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BetweenQueryExp.


"
Query,classattr(),static AttributeValueExp,Returns a new class attribute expression which can be used in any Query call that expects a ValueExp.,"

classattr
public static AttributeValueExp classattr()
Returns a new class attribute expression which can be used in any
 Query call that expects a ValueExp.
Evaluating this expression for a given
 objectName includes performing MBeanServer.getObjectInstance(objectName).

Returns:
A class attribute expression.  The returned object
 will be serialized as an instance of the non-public class
 
 javax.management.ClassAttributeValueExp.


"
Query,"div(ValueExp value1, ValueExp value2)",static ValueExp,Returns a binary expression representing the quotient of two numeric values.,"

div
public static ValueExp div(ValueExp value1,
                           ValueExp value2)
Returns a binary expression representing the quotient of two numeric
 values.

Parameters:
value1 - The first '/' operand.
value2 - The second '/' operand.
Returns:
A ValueExp representing the quotient of two arguments.
 The returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BinaryOpValueExp with an op equal to
 DIV.


"
Query,"eq(ValueExp v1, ValueExp v2)",static QueryExp,Returns a query expression that represents an equality constraint on two values.,"

eq
public static QueryExp eq(ValueExp v1,
                          ValueExp v2)
Returns a query expression that represents an equality constraint on
 two values.

Parameters:
v1 - A value expression.
v2 - Another value expression.
Returns:
A ""equal to"" constraint on the arguments.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BinaryRelQueryExp with a relOp equal
 to EQ.


"
Query,"finalSubString(AttributeValueExp a, StringValueExp s)",static QueryExp,Returns a query expression that represents a matching constraint on a string argument.,"

finalSubString
public static QueryExp finalSubString(AttributeValueExp a,
                                      StringValueExp s)
Returns a query expression that represents a matching constraint on
 a string argument. The value must end with the given literal string
 value.

Parameters:
a - An attribute expression.
s - A string value expression representing the end of the string
 value.
Returns:
The constraint that a matches s.  The returned object
 will be serialized as an instance of the non-public class

 
 javax.management.MatchQueryExp.


"
Query,"geq(ValueExp v1, ValueExp v2)",static QueryExp,"Returns a query expression that represents a ""greater than or equal to"" constraint on two values.","

geq
public static QueryExp geq(ValueExp v1,
                           ValueExp v2)
Returns a query expression that represents a ""greater than or equal
 to"" constraint on two values.

Parameters:
v1 - A value expression.
v2 - Another value expression.
Returns:
A ""greater than or equal to"" constraint on the
 arguments.  The returned object will be serialized as an
 instance of the non-public class
 
 javax.management.BinaryRelQueryExp with a relOp equal
 to GE.


"
Query,"gt(ValueExp v1, ValueExp v2)",static QueryExp,"Returns a query expression that represents a ""greater than"" constraint on two values.","

gt
public static QueryExp gt(ValueExp v1,
                          ValueExp v2)
Returns a query expression that represents a ""greater than"" constraint on
 two values.

Parameters:
v1 - A value expression.
v2 - Another value expression.
Returns:
A ""greater than"" constraint on the arguments.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BinaryRelQueryExp with a relOp equal
 to GT.


"
Query,"in(ValueExp val, ValueExp[] valueList)",static QueryExp,Returns an expression constraining a value to be one of an explicit list.,"

in
public static QueryExp in(ValueExp val,
                          ValueExp[] valueList)
Returns an expression constraining a value to be one of an explicit list.

Parameters:
val - A value to be constrained.
valueList - An array of ValueExps.
Returns:
A QueryExp that represents the constraint.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.InQueryExp.


"
Query,"initialSubString(AttributeValueExp a, StringValueExp s)",static QueryExp,Returns a query expression that represents a matching constraint on a string argument.,"

initialSubString
public static QueryExp initialSubString(AttributeValueExp a,
                                        StringValueExp s)
Returns a query expression that represents a matching constraint on
 a string argument. The value must start with the given literal string
 value.

Parameters:
a - An attribute expression.
s - A string value expression representing the beginning of the
 string value.
Returns:
The constraint that a matches s.  The returned object
 will be serialized as an instance of the non-public class

 
 javax.management.MatchQueryExp.


"
Query,isInstanceOf(StringValueExp classNameValue),static QueryExp,Returns a query expression that represents an inheritance constraint on an MBean class.,"

isInstanceOf
public static QueryExp isInstanceOf(StringValueExp classNameValue)
Returns a query expression that represents an inheritance constraint
 on an MBean class.
 Example: to find MBeans that are instances of
 NotificationBroadcaster, use
 Query.isInstanceOf(Query.value(NotificationBroadcaster.class.getName())).
 
Evaluating this expression for a given
 objectName includes performing MBeanServer.isInstanceOf(objectName,
 ((StringValueExp)classNameValue.apply(objectName)).getValue().

Parameters:
classNameValue - The StringValueExp returning the name
        of the class of which selected MBeans should be instances.
Returns:
a query expression that represents an inheritance
 constraint on an MBean class.  The returned object will be
 serialized as an instance of the non-public class
 
 javax.management.InstanceOfQueryExp.
Since:
1.6


"
Query,"leq(ValueExp v1, ValueExp v2)",static QueryExp,"Returns a query expression that represents a ""less than or equal to"" constraint on two values.","

leq
public static QueryExp leq(ValueExp v1,
                           ValueExp v2)
Returns a query expression that represents a ""less than or equal to""
 constraint on two values.

Parameters:
v1 - A value expression.
v2 - Another value expression.
Returns:
A ""less than or equal to"" constraint on the arguments.
 The returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BinaryRelQueryExp with a relOp equal
 to LE.


"
Query,"lt(ValueExp v1, ValueExp v2)",static QueryExp,"Returns a query expression that represents a ""less than"" constraint on two values.","

lt
public static QueryExp lt(ValueExp v1,
                          ValueExp v2)
Returns a query expression that represents a ""less than"" constraint on
 two values.

Parameters:
v1 - A value expression.
v2 - Another value expression.
Returns:
A ""less than"" constraint on the arguments.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BinaryRelQueryExp with a relOp equal
 to LT.


"
Query,"match(AttributeValueExp a, StringValueExp s)",static QueryExp,Returns a query expression that represents a matching constraint on a string argument.,"

match
public static QueryExp match(AttributeValueExp a,
                             StringValueExp s)
Returns a query expression that represents a matching constraint on
 a string argument. The matching syntax is consistent with file globbing:
 supports ""?"", ""*"", ""["",
 each of which may be escaped with ""\"";
 character classes may use ""!"" for negation and
 ""-"" for range.
 (* for any character sequence,
 ? for a single arbitrary character,
 [...] for a character sequence).
 For example: a*b?c would match a string starting
 with the character a, followed
 by any number of characters, followed by a b,
 any single character, and a c.

Parameters:
a - An attribute expression
s - A string value expression representing a matching constraint
Returns:
A query expression that represents the matching
 constraint on the string argument.  The returned object will
 be serialized as an instance of the non-public class
 
 javax.management.MatchQueryExp.


"
Query,"minus(ValueExp value1, ValueExp value2)",static ValueExp,Returns a binary expression representing the difference between two numeric values.,"

minus
public static ValueExp minus(ValueExp value1,
                             ValueExp value2)
Returns a binary expression representing the difference between two numeric
 values.

Parameters:
value1 - The first '-' operand.
value2 - The second '-' operand.
Returns:
A ValueExp representing the difference between two
 arguments.  The returned object will be serialized as an
 instance of the non-public class
 
 javax.management.BinaryOpValueExp with an op equal to
 MINUS.


"
Query,not(QueryExp queryExp),static QueryExp,Returns a constraint that is the negation of its argument.,"

not
public static QueryExp not(QueryExp queryExp)
Returns a constraint that is the negation of its argument.

Parameters:
queryExp - The constraint to negate.
Returns:
A negated constraint.  The returned object will be
 serialized as an instance of the non-public class
 
 javax.management.NotQueryExp.


"
Query,"or(QueryExp q1, QueryExp q2)",static QueryExp,Returns a query expression that is the disjunction of two other query expressions.,"

or
public static QueryExp or(QueryExp q1,
                          QueryExp q2)
Returns a query expression that is the disjunction of two other query
 expressions.

Parameters:
q1 - A query expression.
q2 - Another query expression.
Returns:
The disjunction of the two arguments.  The returned object
 will be serialized as an instance of the non-public class
 
 javax.management.OrQueryExp.


"
Query,"plus(ValueExp value1, ValueExp value2)",static ValueExp,"Returns a binary expression representing the sum of two numeric values, or the concatenation of two string values.","

plus
public static ValueExp plus(ValueExp value1,
                            ValueExp value2)
Returns a binary expression representing the sum of two numeric values,
 or the concatenation of two string values.

Parameters:
value1 - The first '+' operand.
value2 - The second '+' operand.
Returns:
A ValueExp representing the sum or concatenation of
 the two arguments.  The returned object will be serialized as
 an instance of the non-public class
 
 javax.management.BinaryOpValueExp with an op equal to
 PLUS.


"
Query,"times(ValueExp value1, ValueExp value2)",static ValueExp,Returns a binary expression representing the product of two numeric values.,"

times
public static ValueExp times(ValueExp value1,
                             ValueExp value2)
Returns a binary expression representing the product of two numeric values.

Parameters:
value1 - The first '*' operand.
value2 - The second '*' operand.
Returns:
A ValueExp representing the product.  The returned
 object will be serialized as an instance of the non-public
 class
 
 javax.management.BinaryOpValueExp with an op equal to
 TIMES.


"
Query,value(boolean val),static ValueExp,Returns a boolean value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(boolean val)
Returns a boolean value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - A boolean value.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.BooleanValueExp.


"
Query,value(double val),static ValueExp,Returns a numeric value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(double val)
Returns a numeric value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - A double value.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.NumericValueExp.


"
Query,value(float val),static ValueExp,Returns a numeric value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(float val)
Returns a numeric value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - A float value.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.NumericValueExp.


"
Query,value(int val),static ValueExp,Returns a numeric value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(int val)
Returns a numeric value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - An int value.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.NumericValueExp.


"
Query,value(long val),static ValueExp,Returns a numeric value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(long val)
Returns a numeric value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - A long value.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.NumericValueExp.


"
Query,value(Number val),static ValueExp,Returns a numeric value expression that can be used in any Query call that expects a ValueExp.,"

value
public static ValueExp value(Number val)
Returns a numeric value expression that can be used in any Query call
 that expects a ValueExp.

Parameters:
val - An instance of Number.
Returns:
A ValueExp object containing the argument.  The
 returned object will be serialized as an instance of the
 non-public class
 
 javax.management.NumericValueExp.


"
Query,value(String val),static StringValueExp,Returns a new string expression.,"

value
public static StringValueExp value(String val)
Returns a new string expression.

Parameters:
val - The string value.
Returns:
A ValueExp object containing the string argument.


"
QueryEval,getMBeanServer(),static MBeanServer,Return the MBean server that was most recently given to the setMBeanServer method by this thread.,"

getMBeanServer
public static MBeanServer getMBeanServer()
Return the MBean server that was most recently given to the
 setMBeanServer method by this thread.
 If this thread never called that method, the result is the
 value its parent thread would have obtained from
 getMBeanServer at the moment of the creation of
 this thread, or null if there is no parent thread.

Returns:
the MBean server.
See Also:
setMBeanServer(javax.management.MBeanServer)


"
QueryEval,setMBeanServer(MBeanServer s),void,Sets the MBean server on which the query is to be performed.,"

setMBeanServer
public void setMBeanServer(MBeanServer s)
Sets the MBean server on which the query is to be performed.
 The setting is valid for the thread performing the set.
 It is copied to any threads created by that thread at the moment
 of their creation.
For historical reasons, this method is not static, but its
 behavior does not depend on the instance on which it is
 called.

Parameters:
s - The MBean server on which the query is to be performed.
See Also:
getMBeanServer()


"
StandardEmitterMBean,"addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Adds a listener to this MBean.,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
Description copied from interface: NotificationBroadcaster
Adds a listener to this MBean.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener object which will handle the
 notifications emitted by the broadcaster.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
See Also:
NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)


"
StandardEmitterMBean,getNotificationInfo(),MBeanNotificationInfo[],"Returns an array indicating, for each notification this MBean may send, the name of the Java class of the notification and the notification type.","

getNotificationInfo
public MBeanNotificationInfo[] getNotificationInfo()
Description copied from interface: NotificationBroadcaster
Returns an array indicating, for each notification this
 MBean may send, the name of the Java class of the notification
 and the notification type.
It is not illegal for the MBean to send notifications not
 described in this array.  However, some clients of the MBean
 server may depend on the array being complete for their correct
 functioning.

Specified by:
getNotificationInfo in interface NotificationBroadcaster
Returns:
the array of possible notifications.


"
StandardEmitterMBean,removeNotificationListener(NotificationListener listener),void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
StandardEmitterMBean,"removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",void,Removes a listener from this MBean.,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
StandardEmitterMBean,sendNotification(Notification n),void,Sends a notification.,"

sendNotification
public void sendNotification(Notification n)
Sends a notification.
If the emitter parameter to the constructor was an
 instance of NotificationBroadcasterSupport then this
 method will call emitter.sendNotification.

Parameters:
n - the notification to send.
Throws:
ClassCastException - if the emitter parameter to the
 constructor was not a NotificationBroadcasterSupport.


"
StandardMBean,cacheMBeanInfo(MBeanInfo info),protected void,Customization hook: cache the MBeanInfo built for this object.,"

cacheMBeanInfo
protected void cacheMBeanInfo(MBeanInfo info)
Customization hook:
 cache the MBeanInfo built for this object.

 Subclasses may redefine this method in order to implement
 their own caching policy.  The default implementation stores
 info in this instance.  A subclass can define
 other policies, such as not saving info (so it is
 reconstructed every time getMBeanInfo() is called) or
 sharing a unique MBeanInfo object when several
 StandardMBean instances have equal MBeanInfo values.

Parameters:
info - the new MBeanInfo to cache.  Any
 previously cached value is discarded.  This parameter may be
 null, in which case there is no new cached value.


"
StandardMBean,getAttribute(String attribute),Object,Obtain the value of a specific attribute of the Dynamic MBean.,"

getAttribute
public Object getAttribute(String attribute)
                    throws AttributeNotFoundException,
                           MBeanException,
                           ReflectionException
Description copied from interface: DynamicMBean
Obtain the value of a specific attribute of the Dynamic MBean.

Specified by:
getAttribute in interface DynamicMBean
Parameters:
attribute - The name of the attribute to be retrieved
Returns:
The value of the attribute retrieved.
Throws:
AttributeNotFoundException
MBeanException - Wraps a java.lang.Exception thrown by the MBean's getter.
ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the getter.
See Also:
DynamicMBean.setAttribute(javax.management.Attribute)


"
StandardMBean,getAttributes(String[] attributes),AttributeList,Get the values of several attributes of the Dynamic MBean.,"

getAttributes
public AttributeList getAttributes(String[] attributes)
Description copied from interface: DynamicMBean
Get the values of several attributes of the Dynamic MBean.

Specified by:
getAttributes in interface DynamicMBean
Parameters:
attributes - A list of the attributes to be retrieved.
Returns:
The list of attributes retrieved.
See Also:
DynamicMBean.setAttributes(javax.management.AttributeList)


"
StandardMBean,getCachedMBeanInfo(),protected MBeanInfo,Customization hook: Return the MBeanInfo cached for this object.,"

getCachedMBeanInfo
protected MBeanInfo getCachedMBeanInfo()
Customization hook:
 Return the MBeanInfo cached for this object.

 Subclasses may redefine this method in order to implement their
 own caching policy.  The default implementation stores one
 MBeanInfo object per instance.

Returns:
The cached MBeanInfo, or null if no MBeanInfo is cached.
See Also:
cacheMBeanInfo(MBeanInfo)


"
StandardMBean,getClassName(MBeanInfo info),protected String,Customization hook: Get the className that will be used in the MBeanInfo returned by this MBean.,"

getClassName
protected String getClassName(MBeanInfo info)
Customization hook:
 Get the className that will be used in the MBeanInfo returned by
 this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom class name.  The default implementation returns
 info.getClassName().

Parameters:
info - The default MBeanInfo derived by reflection.
Returns:
the class name for the new MBeanInfo.


"
StandardMBean,"getConstructors(MBeanConstructorInfo[] ctors, Object impl)",protected MBeanConstructorInfo[],Customization hook: Get the MBeanConstructorInfo[] that will be used in the MBeanInfo returned by this MBean.,"

getConstructors
protected MBeanConstructorInfo[] getConstructors(MBeanConstructorInfo[] ctors,
                                                 Object impl)
Customization hook:
 Get the MBeanConstructorInfo[] that will be used in the MBeanInfo
 returned by this MBean.
 
 By default, this method returns null if the wrapped
 implementation is not this. Indeed, if the wrapped
 implementation is not this object itself, it will not be possible
 to recreate a wrapped implementation by calling the implementation
 constructors through MBeanServer.createMBean(...).
 Otherwise, if the wrapped implementation is this,
 ctors is returned.
 
 Subclasses may redefine this method in order to modify this
 behavior, if needed.

Parameters:
ctors - The default MBeanConstructorInfo[] derived by reflection.
impl - The wrapped implementation. If null is
        passed, the wrapped implementation is ignored and
        ctors is returned.
Returns:
the MBeanConstructorInfo[] for the new MBeanInfo.


"
StandardMBean,getDescription(MBeanAttributeInfo info),protected String,Customization hook: Get the description that will be used in the MBeanAttributeInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanAttributeInfo info)
Customization hook:
 Get the description that will be used in the MBeanAttributeInfo
 returned by this MBean.

 Subclasses may redefine this method in order to supply their
 custom description.  The default implementation returns getDescription((MBeanFeatureInfo) info).

Parameters:
info - The default MBeanAttributeInfo derived by reflection.
Returns:
the description for the given MBeanAttributeInfo.


"
StandardMBean,getDescription(MBeanConstructorInfo info),protected String,Customization hook: Get the description that will be used in the MBeanConstructorInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanConstructorInfo info)
Customization hook:
 Get the description that will be used in the MBeanConstructorInfo
 returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom description.
 The default implementation returns getDescription((MBeanFeatureInfo) info).

Parameters:
info - The default MBeanConstructorInfo derived by reflection.
Returns:
the description for the given MBeanConstructorInfo.


"
StandardMBean,"getDescription(MBeanConstructorInfo ctor, MBeanParameterInfo param, int sequence)",protected String,Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanConstructorInfo ctor,
                                MBeanParameterInfo param,
                                int sequence)
Customization hook:
 Get the description that will be used for the  sequence
 MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom description.  The default implementation returns
 param.getDescription().

Parameters:
ctor - The default MBeanConstructorInfo derived by reflection.
param - The default MBeanParameterInfo derived by reflection.
sequence - The sequence number of the parameter considered
        (""0"" for the first parameter, ""1"" for the second parameter,
        etc...).
Returns:
the description for the given MBeanParameterInfo.


"
StandardMBean,getDescription(MBeanFeatureInfo info),protected String,Customization hook: Get the description that will be used in the MBeanFeatureInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanFeatureInfo info)
Customization hook:
 Get the description that will be used in the MBeanFeatureInfo
 returned by this MBean.
Subclasses may redefine this method in order to supply
 their custom description.  The default implementation returns
 info.getDescription().
This method is called by
      getDescription(MBeanAttributeInfo),
      getDescription(MBeanOperationInfo),
      getDescription(MBeanConstructorInfo).

Parameters:
info - The default MBeanFeatureInfo derived by reflection.
Returns:
the description for the given MBeanFeatureInfo.


"
StandardMBean,getDescription(MBeanInfo info),protected String,Customization hook: Get the description that will be used in the MBeanInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanInfo info)
Customization hook:
 Get the description that will be used in the MBeanInfo returned by
 this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom MBean description.  The default implementation returns
 info.getDescription().

Parameters:
info - The default MBeanInfo derived by reflection.
Returns:
the description for the new MBeanInfo.


"
StandardMBean,getDescription(MBeanOperationInfo info),protected String,Customization hook: Get the description that will be used in the MBeanOperationInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanOperationInfo info)
Customization hook:
 Get the description that will be used in the MBeanOperationInfo
 returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom description.  The default implementation returns
 getDescription((MBeanFeatureInfo) info).

Parameters:
info - The default MBeanOperationInfo derived by reflection.
Returns:
the description for the given MBeanOperationInfo.


"
StandardMBean,"getDescription(MBeanOperationInfo op, MBeanParameterInfo param, int sequence)",protected String,Customization hook: Get the description that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.,"

getDescription
protected String getDescription(MBeanOperationInfo op,
                                MBeanParameterInfo param,
                                int sequence)
Customization hook:
 Get the description that will be used for the  sequence
 MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom description.  The default implementation returns
 param.getDescription().

Parameters:
op - The default MBeanOperationInfo derived by reflection.
param - The default MBeanParameterInfo derived by reflection.
sequence - The sequence number of the parameter considered
        (""0"" for the first parameter, ""1"" for the second parameter,
        etc...).
Returns:
the description for the given MBeanParameterInfo.


"
StandardMBean,getImpact(MBeanOperationInfo info),protected int,Customization hook: Get the impact flag of the operation that will be used in the MBeanOperationInfo returned by this MBean.,"

getImpact
protected int getImpact(MBeanOperationInfo info)
Customization hook:
 Get the impact flag of the operation that will be used in
 the MBeanOperationInfo returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom impact flag.  The default implementation returns
 info.getImpact().

Parameters:
info - The default MBeanOperationInfo derived by reflection.
Returns:
the impact flag for the given MBeanOperationInfo.


"
StandardMBean,getImplementation(),Object,Get the implementation of this Standard MBean (or MXBean).,"

getImplementation
public Object getImplementation()
Get the implementation of this Standard MBean (or MXBean).

Returns:
The implementation of this Standard MBean (or MXBean).
See Also:
setImplementation(java.lang.Object)


"
StandardMBean,getImplementationClass(),Class<?>,Get the class of the implementation of this Standard MBean (or MXBean).,"

getImplementationClass
public Class<?> getImplementationClass()
Get the class of the implementation of this Standard MBean (or MXBean).

Returns:
The class of the implementation of this Standard MBean (or MXBean).


"
StandardMBean,getMBeanInfo(),MBeanInfo,Get the MBeanInfo for this MBean.,"

getMBeanInfo
public MBeanInfo getMBeanInfo()
Get the MBeanInfo for this MBean.
 
 This method implements
 DynamicMBean.getMBeanInfo().
 
 This method first calls getCachedMBeanInfo() in order to
 retrieve the cached MBeanInfo for this MBean, if any. If the
 MBeanInfo returned by getCachedMBeanInfo() is not null,
 then it is returned.
 Otherwise, this method builds a default MBeanInfo for this MBean,
 using the Management Interface specified for this MBean.
 
 While building the MBeanInfo, this method calls the customization
 hooks that make it possible for subclasses to supply their custom
 descriptions, parameter names, etc...
 Finally, it calls cacheMBeanInfo() in order to cache the new MBeanInfo.

Specified by:
getMBeanInfo in interface DynamicMBean
Returns:
The cached MBeanInfo for that MBean, if not null, or a
         newly built MBeanInfo if none was cached.


"
StandardMBean,getMBeanInterface(),Class<?>,Get the Management Interface of this Standard MBean (or MXBean).,"

getMBeanInterface
public final Class<?> getMBeanInterface()
Get the Management Interface of this Standard MBean (or MXBean).

Returns:
The management interface of this Standard MBean (or MXBean).


"
StandardMBean,"getParameterName(MBeanConstructorInfo ctor, MBeanParameterInfo param, int sequence)",protected String,Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.,"

getParameterName
protected String getParameterName(MBeanConstructorInfo ctor,
                                  MBeanParameterInfo param,
                                  int sequence)
Customization hook:
 Get the name that will be used for the sequence
 MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom parameter name.  The default implementation returns
 param.getName().

Parameters:
ctor - The default MBeanConstructorInfo derived by reflection.
param - The default MBeanParameterInfo derived by reflection.
sequence - The sequence number of the parameter considered
        (""0"" for the first parameter, ""1"" for the second parameter,
        etc...).
Returns:
the name for the given MBeanParameterInfo.


"
StandardMBean,"getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int sequence)",protected String,Customization hook: Get the name that will be used for the sequence MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.,"

getParameterName
protected String getParameterName(MBeanOperationInfo op,
                                  MBeanParameterInfo param,
                                  int sequence)
Customization hook:
 Get the name that will be used for the sequence
 MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
 
 Subclasses may redefine this method in order to supply their
 custom parameter name.  The default implementation returns
 param.getName().

Parameters:
op - The default MBeanOperationInfo derived by reflection.
param - The default MBeanParameterInfo derived by reflection.
sequence - The sequence number of the parameter considered
        (""0"" for the first parameter, ""1"" for the second parameter,
        etc...).
Returns:
the name to use for the given MBeanParameterInfo.


"
StandardMBean,"invoke(String actionName, Object[] params, String[] signature)",Object,Allows an action to be invoked on the Dynamic MBean.,"

invoke
public Object invoke(String actionName,
                     Object[] params,
                     String[] signature)
              throws MBeanException,
                     ReflectionException
Description copied from interface: DynamicMBean
Allows an action to be invoked on the Dynamic MBean.

Specified by:
invoke in interface DynamicMBean
Parameters:
actionName - The name of the action to be invoked.
params - An array containing the parameters to be set when the action is
 invoked.
signature - An array containing the signature of the action. The class objects will
 be loaded through the same class loader as the one used for loading the
 MBean on which the action is invoked.
Returns:
The object returned by the action, which represents the result of
 invoking the action on the MBean specified.
Throws:
MBeanException - Wraps a java.lang.Exception thrown by the MBean's invoked method.
ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the method


"
StandardMBean,postDeregister(),void,Allows the MBean to perform any operations needed after having been unregistered in the MBean server.,"

postDeregister
public void postDeregister()
Allows the MBean to perform any operations needed after having been
 unregistered in the MBean server.
The default implementation of this method does nothing for
 Standard MBeans.  For MXBeans, it removes any information that
 was recorded by the preRegister method.
It is good practice for a subclass that overrides this method
 to call the overridden method via super.postRegister(...).
 This is necessary if this object is an MXBean that is referenced
 by attributes or operations in other MXBeans.

Specified by:
postDeregister in interface MBeanRegistration
Since:
1.6


"
StandardMBean,postRegister(Boolean registrationDone),void,Allows the MBean to perform any operations needed after having been registered in the MBean server or after the registration has failed.,"

postRegister
public void postRegister(Boolean registrationDone)
Allows the MBean to perform any operations needed after having been
 registered in the MBean server or after the registration has failed.
The default implementation of this method does nothing for
 Standard MBeans.  For MXBeans, it undoes any work done by
 preRegister if registration fails.
It is good practice for a subclass that overrides this method
 to call the overridden method via super.postRegister(...).
 This is necessary if this object is an MXBean that is referenced
 by attributes or operations in other MXBeans.

Specified by:
postRegister in interface MBeanRegistration
Parameters:
registrationDone - Indicates whether or not the MBean has
 been successfully registered in the MBean server. The value
 false means that the registration phase has failed.
Since:
1.6


"
StandardMBean,preDeregister(),void,Allows the MBean to perform any operations it needs before being unregistered by the MBean server.,"

preDeregister
public void preDeregister()
                   throws Exception
Allows the MBean to perform any operations it needs before
 being unregistered by the MBean server.
The default implementation of this method does nothing.
It is good practice for a subclass that overrides this method
 to call the overridden method via super.preDeregister(...).

Specified by:
preDeregister in interface MBeanRegistration
Throws:
Exception - no checked exceptions are throw by this method
 but Exception is declared so that subclasses can override
 this method and throw their own exceptions.
Since:
1.6


"
StandardMBean,"preRegister(MBeanServer server, ObjectName name)",ObjectName,Allows the MBean to perform any operations it needs before being registered in the MBean server.,"

preRegister
public ObjectName preRegister(MBeanServer server,
                              ObjectName name)
                       throws Exception
Allows the MBean to perform any operations it needs before
 being registered in the MBean server.  If the name of the MBean
 is not specified, the MBean can provide a name for its
 registration.  If any exception is raised, the MBean will not be
 registered in the MBean server.
The default implementation of this method returns the name
 parameter.  It does nothing else for
 Standard MBeans.  For MXBeans, it records the MBeanServer
 and ObjectName parameters so they can be used to translate
 inter-MXBean references.
It is good practice for a subclass that overrides this method
 to call the overridden method via super.preRegister(...).
 This is necessary if this object is an MXBean that is referenced
 by attributes or operations in other MXBeans.

Specified by:
preRegister in interface MBeanRegistration
Parameters:
server - The MBean server in which the MBean will be registered.
name - The object name of the MBean.  This name is null if
 the name parameter to one of the createMBean or
 registerMBean methods in the MBeanServer
 interface is null.  In that case, this method must return a
 non-null ObjectName for the new MBean.
Returns:
The name under which the MBean is to be registered.
 This value must not be null.  If the name
 parameter is not null, it will usually but not necessarily be
 the returned value.
Throws:
IllegalArgumentException - if this is an MXBean and
 name is null.
InstanceAlreadyExistsException - if this is an MXBean and
 it has already been registered under another name (in this
 MBean Server or another).
Exception - no other checked exceptions are thrown by
 this method but Exception is declared so that subclasses
 can override the method and throw their own exceptions.
Since:
1.6


"
StandardMBean,setAttribute(Attribute attribute),void,Set the value of a specific attribute of the Dynamic MBean.,"

setAttribute
public void setAttribute(Attribute attribute)
                  throws AttributeNotFoundException,
                         InvalidAttributeValueException,
                         MBeanException,
                         ReflectionException
Description copied from interface: DynamicMBean
Set the value of a specific attribute of the Dynamic MBean.

Specified by:
setAttribute in interface DynamicMBean
Parameters:
attribute - The identification of the attribute to
 be set and  the value it is to be set to.
Throws:
AttributeNotFoundException
InvalidAttributeValueException
MBeanException - Wraps a java.lang.Exception thrown by the MBean's setter.
ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the MBean's setter.
See Also:
DynamicMBean.getAttribute(java.lang.String)


"
StandardMBean,setAttributes(AttributeList attributes),AttributeList,Sets the values of several attributes of the Dynamic MBean.,"

setAttributes
public AttributeList setAttributes(AttributeList attributes)
Description copied from interface: DynamicMBean
Sets the values of several attributes of the Dynamic MBean.

Specified by:
setAttributes in interface DynamicMBean
Parameters:
attributes - A list of attributes: The identification of the
 attributes to be set and  the values they are to be set to.
Returns:
The list of attributes that were set, with their new values.
See Also:
DynamicMBean.getAttributes(java.lang.String[])


"
StandardMBean,setImplementation(Object implementation),void,Replace the implementation object wrapped in this object.,"

setImplementation
public void setImplementation(Object implementation)
                       throws NotCompliantMBeanException
Replace the implementation object wrapped in this object.

Parameters:
implementation - The new implementation of this Standard MBean
 (or MXBean). The implementation object must implement
 the Standard MBean (or MXBean) interface that was supplied when this
 StandardMBean was constructed.
Throws:
IllegalArgumentException - if the given
 implementation is null.
NotCompliantMBeanException - if the given
 implementation does not implement the
 Standard MBean (or MXBean) interface that was
 supplied at construction.
See Also:
getImplementation()


"
StringValueExp,apply(ObjectName name),ValueExp,Applies the ValueExp on a MBean.,"

apply
public ValueExp apply(ObjectName name)
               throws BadStringOperationException,
                      BadBinaryOpValueExpException,
                      BadAttributeValueExpException,
                      InvalidApplicationException
Applies the ValueExp on a MBean.

Specified by:
apply in interface ValueExp
Parameters:
name - The name of the MBean on which the ValueExp will be applied.
Returns:
The ValueExp.
Throws:
BadStringOperationException
BadBinaryOpValueExpException
BadAttributeValueExpException
InvalidApplicationException


"
StringValueExp,getValue(),String,Returns the string represented by the StringValueExp instance.,"

getValue
public String getValue()
Returns the string represented by the
 StringValueExp instance.

Returns:
the string.


"
StringValueExp,setMBeanServer(MBeanServer s),void,Deprecated.,"

setMBeanServer
@Deprecated
public void setMBeanServer(MBeanServer s)
Deprecated. 
Sets the MBean server on which the query is to be performed.

Specified by:
setMBeanServer in interface ValueExp
Parameters:
s - The MBean server on which the query is to be performed.


"
StringValueExp,toString(),String,Returns the string representing the object.,"

toString
public String toString()
Returns the string representing the object.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
