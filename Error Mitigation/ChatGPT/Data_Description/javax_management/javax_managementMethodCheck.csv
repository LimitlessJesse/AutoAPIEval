Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Attribute,1,String getName(),True,,"

getName
public String getName()
Returns a String containing the  name of the attribute.

Returns:
the name of the attribute.


"
0,Attribute,2,Object getValue(),True,,"

getValue
public Object getValue()
Returns an Object that is the value of this attribute.

Returns:
the value of the attribute.


"
0,Attribute,3,void setValue(Object value),False,,NULL
0,Attribute,4,String toString(),True,,"

toString
public String toString()
Returns a String object representing this Attribute's value. The format of this
 string is not specified, but users can expect that two Attributes return the
 same string if and only if they are equal.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
0,Attribute,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object object)
Compares the current Attribute Object with another Attribute Object.

Overrides:
equals in class Object
Parameters:
object - The Attribute that the current Attribute is to be compared with.
Returns:
True if the two Attribute objects are equal, otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
1,AttributeChangeNotification,1,String getAttributeName(),True,,"

getAttributeName
public String getAttributeName()
Gets the name of the attribute which has changed.

Returns:
A String containing the name of the attribute.


"
1,AttributeChangeNotification,2,Object getOldValue(),True,,"

getOldValue
public Object getOldValue()
Gets the old value of the attribute which has changed.

Returns:
An Object containing the old value of the attribute.


"
1,AttributeChangeNotification,3,Object getNewValue(),True,,"

getNewValue
public Object getNewValue()
Gets the new value of the attribute which has changed.

Returns:
An Object containing the new value of the attribute.


"
1,AttributeChangeNotification,4,String getClassName(),False,,NULL
1,AttributeChangeNotification,5,String toString(),False,,NULL
2,AttributeChangeNotificationFilter,1,void enableAttribute(String attributeName),True,,"

enableAttribute
public void enableAttribute(String name)
                     throws IllegalArgumentException
Enables all the attribute change notifications the attribute name of which equals
 the specified name to be sent to the listener.
 If the specified name is already in the list of enabled attribute names,
 this method has no effect.

Parameters:
name - The attribute name.
Throws:
IllegalArgumentException - The attribute name parameter is null.


"
2,AttributeChangeNotificationFilter,2,void disableAttribute(String attributeName),True,,"

disableAttribute
public void disableAttribute(String name)
Disables all the attribute change notifications the attribute name of which equals
 the specified attribute name to be sent to the listener.
 If the specified name is not in the list of enabled attribute names,
 this method has no effect.

Parameters:
name - The attribute name.


"
2,AttributeChangeNotificationFilter,3,String[] getEnabledAttributes(),False,,NULL
2,AttributeChangeNotificationFilter,4,boolean isAttributeEnabled(String attributeName),False,,NULL
2,AttributeChangeNotificationFilter,5,void setAttributeName(String attributeName),False,,NULL
3,AttributeList,1,void add(javax.management.Attribute attribute),False,,NULL
3,AttributeList,2,javax.management.Attribute get(int index),False,,NULL
3,AttributeList,3,javax.management.Attribute remove(int index),False,,NULL
3,AttributeList,4,int size(),False,,NULL
3,AttributeList,5,"void set(int index, javax.management.Attribute attribute)",False,,NULL
4,AttributeValueExp,1,java.lang.String toString(),False,,NULL
4,AttributeValueExp,2,boolean isLong(),False,,NULL
4,AttributeValueExp,3,boolean isDouble(),False,,NULL
4,AttributeValueExp,4,boolean isBoolean(),False,,NULL
4,AttributeValueExp,5,java.lang.Object getValue(),False,,NULL
5,DefaultLoaderRepository,1,ClassLoader loadClass(String className),False,,NULL
5,DefaultLoaderRepository,2,"Class<?> loadClassWithout(ClassLoader loader, String className)",True,,"

loadClassWithout
public static Class<?> loadClassWithout(ClassLoader loader,
                                        String className)
                                 throws ClassNotFoundException
Deprecated. 
Go through the list of class loaders but exclude the given class loader, then try to load
 the requested class.
 The method will stop as soon as the class is found. If the class
 is not found the method will throw a ClassNotFoundException
 exception.

Parameters:
className - The name of the class to be loaded.
loader - The class loader to be excluded.
Returns:
the loaded class.
Throws:
ClassNotFoundException - The specified class could not be found.


"
5,DefaultLoaderRepository,3,void addClassLoader(ClassLoader loader),False,,NULL
5,DefaultLoaderRepository,4,void removeClassLoader(ClassLoader loader),False,,NULL
5,DefaultLoaderRepository,5,ClassLoader getClassLoader(String className),False,,NULL
6,ImmutableDescriptor,1,Object getFieldValue(String fieldName),True,,"

getFieldValue
public final Object getFieldValue(String fieldName)
Description copied from interface: Descriptor
Returns the value for a specific field name, or null if no value
 is present for that name.

Specified by:
getFieldValue in interface Descriptor
Parameters:
fieldName - the field name.
Returns:
the corresponding value, or null if the field is not present.


"
6,ImmutableDescriptor,2,String[] getFieldNames(),True,,"

getFieldNames
public final String[] getFieldNames()
Description copied from interface: Descriptor
Returns all the field names in the descriptor.

Specified by:
getFieldNames in interface Descriptor
Returns:
String array of field names. If the descriptor is empty,
 you will get an empty array.


"
6,ImmutableDescriptor,3,boolean isValid(String fieldName),False,,NULL
6,ImmutableDescriptor,4,ImmutableDescriptor clone(),False,,NULL
6,ImmutableDescriptor,5,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code value for this descriptor.  The hash
 code is computed as the sum of the hash codes for each field in
 the descriptor.  The hash code of a field with name n
 and value v is n.toLowerCase().hashCode() ^ h.
 Here h is the hash code of v, computed as
 follows:

If v is null then h is 0.
If v is a primitive array then h is computed using
 the appropriate overloading of java.util.Arrays.hashCode.
If v is an object array then h is computed using
 Arrays.deepHashCode(Object[]).
Otherwise h is v.hashCode().


Specified by:
hashCode in interface Descriptor
Overrides:
hashCode in class Object
Returns:
A hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
7,JMX,1,ObjectName getInstance(ObjectName name),False,,NULL
7,JMX,2,MBeanServerConnection getMBeanServerConnection(),False,,NULL
7,JMX,3,"void registerMBean(Object object, ObjectName name)",False,,NULL
7,JMX,4,void unregisterMBean(ObjectName name),False,,NULL
7,JMX,5,"void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)",False,,NULL
8,MBeanAttributeInfo,1,String getName(),False,,NULL
8,MBeanAttributeInfo,2,String getDescription(),False,,NULL
8,MBeanAttributeInfo,3,boolean isReadable(),True,,"

isReadable
public boolean isReadable()
Whether the value of the attribute can be read.

Returns:
True if the attribute can be read, false otherwise.


"
8,MBeanAttributeInfo,4,boolean isWritable(),True,,"

isWritable
public boolean isWritable()
Whether new values can be written to the attribute.

Returns:
True if the attribute can be written to, false otherwise.


"
8,MBeanAttributeInfo,5,boolean isIs(),True,,"

isIs
public boolean isIs()
Indicates if this attribute has an ""is"" getter.

Returns:
true if this attribute has an ""is"" getter.


"
9,MBeanConstructorInfo,1,String getDescription(),False,,NULL
9,MBeanConstructorInfo,2,MBeanParameterInfo[] getSignature(),True,,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this constructor.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
9,MBeanConstructorInfo,3,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
9,MBeanConstructorInfo,4,"MBeanConstructorInfo(String description, Constructor<?> constructor)",False,,NULL
9,MBeanConstructorInfo,5,"MBeanConstructorInfo(String description, Constructor<?> constructor, MBeanParameterInfo[] signature)",False,,NULL
10,MBeanFeatureInfo,1,String getDescription(),True,,"

getDescription
public String getDescription()
Returns the human-readable description of the feature.

Returns:
the human-readable description of the feature.


"
10,MBeanFeatureInfo,2,String getName(),True,,"

getName
public String getName()
Returns the name of the feature.

Returns:
the name of the feature.


"
10,MBeanFeatureInfo,3,String toString(),False,,NULL
10,MBeanFeatureInfo,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object o)
Compare this MBeanFeatureInfo to another.

Overrides:
equals in class Object
Parameters:
o - the object to compare to.
Returns:
true if and only if o is an MBeanFeatureInfo such
 that its getName(), getDescription(), and
 getDescriptor()
 values are equal (not necessarily identical) to those of this
 MBeanFeatureInfo.
See Also:
Object.hashCode(), 
HashMap


"
10,MBeanFeatureInfo,5,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
11,MBeanInfo,1,javax.management.MBeanAttributeInfo[] getAttributes(),False,,NULL
11,MBeanInfo,2,javax.management.MBeanConstructorInfo[] getConstructors(),False,,NULL
11,MBeanInfo,3,javax.management.MBeanNotificationInfo[] getNotifications(),False,,NULL
11,MBeanInfo,4,javax.management.MBeanOperationInfo[] getOperations(),False,,NULL
11,MBeanInfo,5,javax.management.MBeanParameterInfo[] getParameters(javax.management.MBeanOperationInfo opInfo),False,,NULL
12,MBeanNotificationInfo,1,String getDescription(),False,,NULL
12,MBeanNotificationInfo,2,String getName(),False,,NULL
12,MBeanNotificationInfo,3,String[] getNotifTypes(),True,,"

getNotifTypes
public String[] getNotifTypes()
Returns the array of strings (in dot notation) containing the
 notification types that the MBean may emit.

Returns:
the array of strings.  Changing the returned array has no
 effect on this MBeanNotificationInfo.


"
12,MBeanNotificationInfo,4,"MBeanNotificationInfo(String[] notifTypes, String name, String description)",False,,NULL
12,MBeanNotificationInfo,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
13,MBeanOperationInfo,1,String getDescription(),False,,NULL
13,MBeanOperationInfo,2,String getName(),False,,NULL
13,MBeanOperationInfo,3,int getImpact(),True,,"

getImpact
public int getImpact()
Returns the impact of the method, one of
 INFO, ACTION, ACTION_INFO, UNKNOWN.

Returns:
the impact code.


"
13,MBeanOperationInfo,4,String getReturnType(),True,,"

getReturnType
public String getReturnType()
Returns the type of the method's return value.

Returns:
the return type.


"
13,MBeanOperationInfo,5,MBeanParameterInfo[] getSignature(),True,,"

getSignature
public MBeanParameterInfo[] getSignature()
Returns the list of parameters for this operation.  Each
 parameter is described by an MBeanParameterInfo
 object.
The returned array is a shallow copy of the internal array,
 which means that it is a copy of the internal array of
 references to the MBeanParameterInfo objects but
 that each referenced MBeanParameterInfo object is
 not copied.

Returns:
An array of MBeanParameterInfo objects.


"
14,MBeanParameterInfo,1,String getDescription(),False,,NULL
14,MBeanParameterInfo,2,String getName(),False,,NULL
14,MBeanParameterInfo,3,String getType(),True,,"

getType
public String getType()
Returns the type or class name of the data.

Returns:
the type string.


"
14,MBeanParameterInfo,4,MBeanParameterInfo clone(),False,,NULL
14,MBeanParameterInfo,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
15,MBeanPermission,1,boolean implies(javax.management.MBeanPermission p),False,,NULL
15,MBeanPermission,2,String getActions(),True,,"

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions. That is,
 this method always returns present actions in alphabetical order.

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
15,MBeanPermission,3,String getClassName(),False,,NULL
15,MBeanPermission,4,ObjectName getObjectName(),False,,NULL
15,MBeanPermission,5,String toString(),False,,NULL
16,MBeanServerBuilder,1,"MBeanServer newMBeanServer(java.lang.String defaultDomain, javax.management.MBeanServer delegate)",False,,NULL
16,MBeanServerBuilder,2,MBeanServerDelegate getMBeanServerDelegate(),False,,NULL
16,MBeanServerBuilder,3,MBeanServerDelegate newMBeanServerDelegate(),True,,"

newMBeanServerDelegate
public MBeanServerDelegate newMBeanServerDelegate()
This method creates a new MBeanServerDelegate for a new MBeanServer.
 When creating a new MBeanServer the
 MBeanServerFactory first calls this method
 in order to create a new MBeanServerDelegate.
 Then it calls
 newMBeanServer(defaultDomain,outer,delegate)
 passing the delegate that should be used by the MBeanServer
 implementation.
 Note that the passed delegate might not be directly the
 MBeanServerDelegate that was returned by this method. It could
 be, for instance, a new object wrapping the previously
 returned object.

Returns:
A new MBeanServerDelegate.


"
16,MBeanServerBuilder,4,MBeanServerBuilder newBuilder(),False,,NULL
16,MBeanServerBuilder,5,MBeanServer newMBeanServer(),False,,NULL
17,MBeanServerDelegate,1,String getImplementationVersion(),True,,"

getImplementationVersion
public String getImplementationVersion()
Returns the JMX implementation version (the version of this product).

Specified by:
getImplementationVersion in interface MBeanServerDelegateMBean
Returns:
the implementation version.


"
17,MBeanServerDelegate,2,String getMBeanServerId(),True,,"

getMBeanServerId
public String getMBeanServerId()
Returns the MBean server agent identity.

Specified by:
getMBeanServerId in interface MBeanServerDelegateMBean
Returns:
the identity.


"
17,MBeanServerDelegate,3,String getSpecificationName(),True,,"

getSpecificationName
public String getSpecificationName()
Returns the full name of the JMX specification implemented
 by this product.

Specified by:
getSpecificationName in interface MBeanServerDelegateMBean
Returns:
the specification name.


"
17,MBeanServerDelegate,4,String getSpecificationVersion(),True,,"

getSpecificationVersion
public String getSpecificationVersion()
Returns the version of the JMX specification implemented
 by this product.

Specified by:
getSpecificationVersion in interface MBeanServerDelegateMBean
Returns:
the specification version.


"
17,MBeanServerDelegate,5,String getImplementationName(),True,,"

getImplementationName
public String getImplementationName()
Returns the JMX implementation name (the name of this product).

Specified by:
getImplementationName in interface MBeanServerDelegateMBean
Returns:
the implementation name.


"
18,MBeanServerFactory,1,MBeanServer createMBeanServer(String defaultDomain),True,,"

createMBeanServer
public static MBeanServer createMBeanServer(String domain)
Return a new object implementing the MBeanServer
 interface with the specified default domain name.  The given
 domain name is used as the domain part in the ObjectName of
 MBeans when the domain is specified by the user is null.
The MBeanServer reference is internally kept. This will
 allow findMBeanServer to return a reference to
 this MBeanServer object.

Parameters:
domain - the default domain name for the created
 MBeanServer.  This is the value that will be returned by MBeanServer.getDefaultDomain().
Returns:
the newly created MBeanServer.
Throws:
SecurityException - if there is a SecurityManager and
 the caller's permissions do not include or imply MBeanServerPermission(""createMBeanServer"").
JMRuntimeException - if the property
 javax.management.builder.initial exists but the
 class it names cannot be instantiated through a public
 no-argument constructor; or if the instantiated builder returns
 null from its newMBeanServerDelegate or newMBeanServer methods.
ClassCastException - if the property
 javax.management.builder.initial exists and can be
 instantiated but is not assignment compatible with MBeanServerBuilder.


"
18,MBeanServerFactory,2,List<MBeanServer> findMBeanServer(String agentId),False,,NULL
18,MBeanServerFactory,3,"MBeanServer newMBeanServer(String defaultDomain, MBeanServer outer, MBeanServerDelegate delegate)",False,,NULL
18,MBeanServerFactory,4,"MBeanServer newMBeanServer(String defaultDomain, MBeanServer outer, MBeanServerDelegate delegate, boolean delegateToOuter, boolean interceptorsEnabled)",False,,NULL
20,MBeanServerNotification,1,String getMBeanServerId(),False,,NULL
20,MBeanServerNotification,2,ObjectName getMBeanName(),True,,"

getMBeanName
public ObjectName getMBeanName()
Returns the  object name of the MBean that caused the notification.

Returns:
the object name of the MBean that caused the notification.


"
20,MBeanServerNotification,3,String getType(),False,,NULL
20,MBeanServerNotification,4,long getTimeStamp(),False,,NULL
20,MBeanServerNotification,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Notification
Returns a String representation of this notification.

Overrides:
toString in class Notification
Returns:
A String representation of this notification.


"
21,MBeanServerPermission,1,String getActions(),False,,NULL
21,MBeanServerPermission,2,boolean implies(Permission p),True,,"

implies
public boolean implies(Permission p)
Checks if this MBeanServerPermission object ""implies"" the specified
 permission.
More specifically, this method returns true if:

 p is an instance of MBeanServerPermission,
 p's target names are a subset of this object's target
 names

The createMBeanServer permission implies the
 newMBeanServer permission.

Overrides:
implies in class BasicPermission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
21,MBeanServerPermission,3,PermissionCollection newPermissionCollection(),True,,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Description copied from class: BasicPermission
Returns a new PermissionCollection object for storing BasicPermission
 objects.

 BasicPermission objects must be stored in a manner that allows them
 to be inserted in any order, but that also enables the
 PermissionCollection implies method
 to be implemented in an efficient (and consistent) manner.

Overrides:
newPermissionCollection in class BasicPermission
Returns:
a new PermissionCollection object suitable for
 storing BasicPermissions.


"
21,MBeanServerPermission,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Checks two MBeanServerPermission objects for equality. Checks that
 obj is an MBeanServerPermission, and represents the same
 list of allowable actions as this object.
 

Overrides:
equals in class BasicPermission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if the objects are equal.
See Also:
Object.hashCode(), 
HashMap


"
21,MBeanServerPermission,5,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: BasicPermission
Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Overrides:
hashCode in class BasicPermission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
22,MBeanTrustPermission,1,String getName(),False,,NULL
22,MBeanTrustPermission,2,boolean implies(Permission p),False,,NULL
22,MBeanTrustPermission,3,PermissionCollection newPermissionCollection(),False,,NULL
22,MBeanTrustPermission,4,boolean equals(Object obj),False,,NULL
22,MBeanTrustPermission,5,int hashCode(),False,,NULL
23,Notification,1,void setSequenceNumber(long sequenceNumber),True,,"

setSequenceNumber
public void setSequenceNumber(long sequenceNumber)
Set the notification sequence number.

Parameters:
sequenceNumber - The notification sequence number within the source object. It is
 a serial number identifying a particular instance of notification in the
 context of the notification source.
See Also:
getSequenceNumber()


"
23,Notification,2,void setSource(Object source),True,,"

setSource
public void setSource(Object source)
Sets the source.

Parameters:
source - the new source for this object.
See Also:
EventObject.getSource()


"
23,Notification,3,void setTimeStamp(long timeStamp),True,,"

setTimeStamp
public void setTimeStamp(long timeStamp)
Set the notification timestamp.

Parameters:
timeStamp - The notification timestamp. It indicates when the notification was generated.
See Also:
getTimeStamp()


"
23,Notification,4,void setUserData(Object userData),True,,"

setUserData
public void setUserData(Object userData)
Set the user data.

Parameters:
userData - The user data object. It is used for whatever data
 the notification source wishes to communicate to its consumers.
See Also:
getUserData()


"
23,Notification,5,String getType(),True,,"

getType
public String getType()
Get the notification type.

Returns:
The notification type. It's a string expressed in a dot notation
 similar to Java properties. It is recommended that the notification type
 should follow the reverse-domain-name convention used by Java package
 names.  An example of a notification type is com.example.alarm.router.


"
24,NotificationBroadcasterSupport,1,void sendNotification(Notification notification),True,,"

sendNotification
public void sendNotification(Notification notification)
Sends a notification.

 If an Executor was specified in the constructor, it will be given one
 task per selected listener to deliver the notification to that listener.

Parameters:
notification - The notification to send.


"
24,NotificationBroadcasterSupport,2,"void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",True,,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
24,NotificationBroadcasterSupport,3,"void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",True,,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
Adds a listener.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener to receive notifications.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
Throws:
IllegalArgumentException - thrown if the listener is null.
See Also:
removeNotificationListener(javax.management.NotificationListener)


"
24,NotificationBroadcasterSupport,4,MBeanNotificationInfo[] getNotificationInfo(),True,,"

getNotificationInfo
public MBeanNotificationInfo[] getNotificationInfo()
Description copied from interface: NotificationBroadcaster
Returns an array indicating, for each notification this
 MBean may send, the name of the Java class of the notification
 and the notification type.
It is not illegal for the MBean to send notifications not
 described in this array.  However, some clients of the MBean
 server may depend on the array being complete for their correct
 functioning.

Specified by:
getNotificationInfo in interface NotificationBroadcaster
Returns:
the array of possible notifications.


"
24,NotificationBroadcasterSupport,5,void removeNotificationListener(NotificationListener listener),True,,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
25,NotificationFilterSupport,1,void enableType(String type),True,,"

enableType
public void enableType(String prefix)
                throws IllegalArgumentException
Enables all the notifications the type of which starts with the specified prefix
 to be sent to the listener.
 If the specified prefix is already in the list of enabled notification types,
 this method has no effect.
 
 Example:
 

 // Enables all notifications the type of which starts with ""my_example"" to be sent.
 myFilter.enableType(""my_example"");
 // Enables all notifications the type of which is ""my_example.my_type"" to be sent.
 myFilter.enableType(""my_example.my_type"");
 


 Note that:
 
 myFilter.enableType(""my_example.*"");
 
 will no match any notification type.

Parameters:
prefix - The prefix.
Throws:
IllegalArgumentException - The prefix parameter is null.


"
25,NotificationFilterSupport,2,void disableType(String type),True,,"

disableType
public void disableType(String prefix)
Removes the given prefix from the prefix list.
 If the specified prefix is not in the list of enabled notification types,
 this method has no effect.

Parameters:
prefix - The prefix.


"
25,NotificationFilterSupport,3,String[] getEnabledTypes(),False,,NULL
25,NotificationFilterSupport,4,boolean isNotificationEnabled(javax.management.Notification notification),False,,NULL
25,NotificationFilterSupport,5,void setEnabledTypes(String[] types),False,,NULL
26,ObjectInstance,1,ObjectName getObjectName(),True,,"

getObjectName
public ObjectName getObjectName()
Returns the object name part.

Returns:
the object name.


"
26,ObjectInstance,2,String getClassName(),True,,"

getClassName
public String getClassName()
Returns the class part.

Returns:
the class name.


"
26,ObjectInstance,3,"ObjectInstance(ObjectName objectName, String className)",False,,NULL
26,ObjectInstance,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object object)
Compares the current object instance with another object instance.

Overrides:
equals in class Object
Parameters:
object - The object instance that the current object instance is
     to be compared with.
Returns:
True if the two object instances are equal, otherwise false.
See Also:
Object.hashCode(), 
HashMap


"
26,ObjectInstance,5,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
27,ObjectName,1,boolean isPattern(),True,,"

isPattern
public boolean isPattern()
Checks whether the object name is a pattern.
 
 An object name is a pattern if its domain contains a
 wildcard or if the object name is a property pattern.

Returns:
True if the name is a pattern, otherwise false.


"
27,ObjectName,2,String getCanonicalName(),True,,"

getCanonicalName
public String getCanonicalName()
Returns the canonical form of the name; that is, a string
 representation where the properties are sorted in lexical
 order.
More precisely, the canonical form of the name is a String
 consisting of the domain part, a colon
 (:), the canonical key property list, and
 a pattern indication.
The canonical key property list is the same string
 as described for getCanonicalKeyPropertyListString().
The pattern indication is:
 
empty for an ObjectName
 that is not a property list pattern;
 an asterisk for an ObjectName
 that is a property list pattern with no keys; or
 a comma and an
 asterisk (,*) for an ObjectName that is a property
 list pattern with at least one key.
 

Returns:
The canonical form of the name.


"
27,ObjectName,3,String getKeyProperty(String key),True,,"

getKeyProperty
public String getKeyProperty(String property)
Obtains the value associated with a key in a key property.

Parameters:
property - The property whose value is to be obtained.
Returns:
The value of the property, or null if there is no such
 property in this ObjectName.
Throws:
NullPointerException - If property is null.


"
27,ObjectName,4,boolean apply(ObjectName name),True,,"

apply
public boolean apply(ObjectName name)
Test whether this ObjectName, which may be a pattern,
 matches another ObjectName.  If name is a pattern,
 the result is false.  If this ObjectName is a pattern, the
 result is true if and only if name matches the
 pattern.  If neither this ObjectName nor name is
 a pattern, the result is true if and only if the two
 ObjectNames are equal as described for the equals(Object) method.

Specified by:
apply in interface QueryExp
Parameters:
name - The name of the MBean to compare to.
Returns:
True if name matches this ObjectName.
Throws:
NullPointerException - if name is null.


"
27,ObjectName,5,boolean applyPattern(String name),False,,NULL
28,Query,1,void setObjectName(ObjectName name),False,,NULL
28,Query,2,void setClassName(String className),False,,NULL
28,Query,3,void setMember(String member),False,,NULL
28,Query,4,void setAttributeValue(AttributeValueExp val),False,,NULL
28,Query,5,void setQuery(QueryExp query),False,,NULL
29,QueryEval,1,Object eval(),False,,NULL
29,QueryEval,2,void setMBeanServer(MBeanServer server),True,,"

setMBeanServer
public void setMBeanServer(MBeanServer s)
Sets the MBean server on which the query is to be performed.
 The setting is valid for the thread performing the set.
 It is copied to any threads created by that thread at the moment
 of their creation.
For historical reasons, this method is not static, but its
 behavior does not depend on the instance on which it is
 called.

Parameters:
s - The MBean server on which the query is to be performed.
See Also:
getMBeanServer()


"
29,QueryEval,3,void setQuery(QueryExp query),False,,NULL
29,QueryEval,4,void setQueryNames(Set<ObjectName> names),False,,NULL
29,QueryEval,5,"void setQueryContext(Map<String, ?> context)",False,,NULL
30,StandardEmitterMBean,1,"void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",True,,"

addNotificationListener
public void addNotificationListener(NotificationListener listener,
                                    NotificationFilter filter,
                                    Object handback)
Description copied from interface: NotificationBroadcaster
Adds a listener to this MBean.

Specified by:
addNotificationListener in interface NotificationBroadcaster
Parameters:
listener - The listener object which will handle the
 notifications emitted by the broadcaster.
filter - The filter object. If filter is null, no
 filtering will be performed before handling notifications.
handback - An opaque object to be sent back to the
 listener when a notification is emitted. This object cannot be
 used by the Notification broadcaster object. It should be
 resent unchanged with the notification to the listener.
See Also:
NotificationBroadcaster.removeNotificationListener(javax.management.NotificationListener)


"
30,StandardEmitterMBean,2,void removeNotificationListener(NotificationListener listener),True,,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener)
                                throws ListenerNotFoundException
Description copied from interface: NotificationBroadcaster
Removes a listener from this MBean.  If the listener
 has been registered with different handback objects or
 notification filters, all entries corresponding to the listener
 will be removed.

Specified by:
removeNotificationListener in interface NotificationBroadcaster
Parameters:
listener - A listener that was previously added to this
 MBean.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean.
See Also:
NotificationBroadcaster.addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object), 
NotificationEmitter.removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)


"
30,StandardEmitterMBean,3,"void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback)",True,,"

removeNotificationListener
public void removeNotificationListener(NotificationListener listener,
                                       NotificationFilter filter,
                                       Object handback)
                                throws ListenerNotFoundException
Description copied from interface: NotificationEmitter
Removes a listener from this MBean.  The MBean must have a
 listener that exactly matches the given listener,
 filter, and handback parameters.  If
 there is more than one such listener, only one is removed.
The filter and handback parameters
 may be null if and only if they are null in a listener to be
 removed.

Specified by:
removeNotificationListener in interface NotificationEmitter
Parameters:
listener - A listener that was previously added to this
 MBean.
filter - The filter that was specified when the listener
 was added.
handback - The handback that was specified when the listener was
 added.
Throws:
ListenerNotFoundException - The listener is not
 registered with the MBean, or it is not registered with the
 given filter and handback.


"
30,StandardEmitterMBean,4,void sendNotification(Notification notification),True,,"

sendNotification
public void sendNotification(Notification n)
Sends a notification.
If the emitter parameter to the constructor was an
 instance of NotificationBroadcasterSupport then this
 method will call emitter.sendNotification.

Parameters:
n - the notification to send.
Throws:
ClassCastException - if the emitter parameter to the
 constructor was not a NotificationBroadcasterSupport.


"
30,StandardEmitterMBean,5,"void sendNotification(String type, Object userData)",False,,NULL
31,StandardMBean,1,void setAttribute(Attribute attribute),True,,"

setAttribute
public void setAttribute(Attribute attribute)
                  throws AttributeNotFoundException,
                         InvalidAttributeValueException,
                         MBeanException,
                         ReflectionException
Description copied from interface: DynamicMBean
Set the value of a specific attribute of the Dynamic MBean.

Specified by:
setAttribute in interface DynamicMBean
Parameters:
attribute - The identification of the attribute to
 be set and  the value it is to be set to.
Throws:
AttributeNotFoundException
InvalidAttributeValueException
MBeanException - Wraps a java.lang.Exception thrown by the MBean's setter.
ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the MBean's setter.
See Also:
DynamicMBean.getAttribute(java.lang.String)


"
31,StandardMBean,2,Attribute getAttribute(String attribute),False,,NULL
31,StandardMBean,3,void setAttributes(AttributeList attributes),False,,NULL
31,StandardMBean,4,AttributeList getAttributes(String[] attributes),True,,"

getAttributes
public AttributeList getAttributes(String[] attributes)
Description copied from interface: DynamicMBean
Get the values of several attributes of the Dynamic MBean.

Specified by:
getAttributes in interface DynamicMBean
Parameters:
attributes - A list of the attributes to be retrieved.
Returns:
The list of attributes retrieved.
See Also:
DynamicMBean.setAttributes(javax.management.AttributeList)


"
31,StandardMBean,5,"Object invoke(String operationName, Object[] params, String[] signature)",True,,"

invoke
public Object invoke(String actionName,
                     Object[] params,
                     String[] signature)
              throws MBeanException,
                     ReflectionException
Description copied from interface: DynamicMBean
Allows an action to be invoked on the Dynamic MBean.

Specified by:
invoke in interface DynamicMBean
Parameters:
actionName - The name of the action to be invoked.
params - An array containing the parameters to be set when the action is
 invoked.
signature - An array containing the signature of the action. The class objects will
 be loaded through the same class loader as the one used for loading the
 MBean on which the action is invoked.
Returns:
The object returned by the action, which represents the result of
 invoking the action on the MBean specified.
Throws:
MBeanException - Wraps a java.lang.Exception thrown by the MBean's invoked method.
ReflectionException - Wraps a java.lang.Exception thrown while trying to invoke the method


"
32,StringValueExp,1,java.lang.String getValue(),False,,NULL
32,StringValueExp,2,void setValue(java.lang.String value),False,,NULL
32,StringValueExp,3,java.lang.String toString(),False,,NULL
32,StringValueExp,4,boolean equals(java.lang.Object obj),False,,NULL
32,StringValueExp,5,int hashCode(),False,,NULL
