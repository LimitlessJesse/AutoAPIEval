Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BinaryRefAddr,1,Object getContent(),True,,"

getContent
public Object getContent()
Retrieves the contents of this address as an Object.
 The result is a byte array.
 Changes to this array will affect this BinaryRefAddr's contents.
 Programs are recommended against changing this array's contents
 and to lock the buffer if they need to change it.

Specified by:
getContent in class RefAddr
Returns:
The non-null buffer containing this address's contents.


"
0,BinaryRefAddr,2,String getContentType(),False,,NULL
0,BinaryRefAddr,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Determines whether obj is equal to this address.  It is equal if
 it contains the same address type and their contents are byte-wise
 equivalent.

Overrides:
equals in class RefAddr
Parameters:
obj - The possibly null object to check.
Returns:
true if the object is equal; false otherwise.
See Also:
RefAddr.getContent(), 
RefAddr.getType()


"
0,BinaryRefAddr,4,int hashCode(),True,,"

hashCode
public int hashCode()
Computes the hash code of this address using its address type and contents.
 Two BinaryRefAddrs have the same hash code if they have
 the same address type and the same contents.
 It is also possible for different BinaryRefAddrs to have
 the same hash code.

Overrides:
hashCode in class RefAddr
Returns:
The hash code of this address as an int.
See Also:
Object.hashCode()


"
0,BinaryRefAddr,5,String toString(),True,,"

toString
public String toString()
Generates the string representation of this address.
 The string consists of the address's type and contents with labels.
 The first 32 bytes of contents are displayed (in hexadecimal).
 If there are more than 32 bytes, ""..."" is used to indicate more.
 This string is meant to used for debugging purposes and not
 meant to be interpreted programmatically.

Overrides:
toString in class RefAddr
Returns:
The non-null string representation of this address.


"
1,Binding,1,Object getObject(),True,,"

getObject
public Object getObject()
Retrieves the object bound to the name of this binding.

Returns:
The object bound; null if this binding does not contain an object.
See Also:
setObject(java.lang.Object)


"
1,Binding,2,Name getName(),False,,NULL
1,Binding,3,int compareTo(Object obj),False,,NULL
1,Binding,4,String toString(),True,,"

toString
public String toString()
Generates the string representation of this binding.
 The string representation consists of the string representation
 of the name/class pair and the string representation of
 this binding's object, separated by ':'.
 The contents of this string is useful
 for debugging and is not meant to be interpreted programmatically.

Overrides:
toString in class NameClassPair
Returns:
The non-null string representation of this binding.


"
1,Binding,5,boolean equals(Object obj),False,,NULL
2,CompositeName,1,"boolean addAll(int posn, Name n)",False,,NULL
2,CompositeName,2,Name clone(),False,,NULL
2,CompositeName,3,Name getPrefix(int posn),True,,"

getPrefix
public Name getPrefix(int posn)
Creates a composite name whose components consist of a prefix of the
 components in this composite name. Subsequent changes to
 this composite name does not affect the name that is returned.

Specified by:
getPrefix in interface Name
Parameters:
posn - The 0-based index of the component at which to stop.
                 Must be in the range [0,size()].
Returns:
A composite name consisting of the components at indexes in
         the range [0,posn).
Throws:
ArrayIndexOutOfBoundsException - If posn is outside the specified range.


"
2,CompositeName,4,Name getSuffix(int posn),True,,"

getSuffix
public Name getSuffix(int posn)
Creates a composite name whose components consist of a suffix of the
 components in this composite name. Subsequent changes to
 this composite name does not affect the name that is returned.

Specified by:
getSuffix in interface Name
Parameters:
posn - The 0-based index of the component at which to start.
                 Must be in the range [0,size()].
Returns:
A composite name consisting of the components at indexes in
         the range [posn,size()).  If posn is equal to
         size(), an empty composite name is returned.
Throws:
ArrayIndexOutOfBoundsException - If posn is outside the specified range.


"
2,CompositeName,5,Name remove(int posn),False,,NULL
3,CompoundName,1,"boolean addAll(int posn, Name n)",False,,NULL
3,CompoundName,2,Name clone(),False,,NULL
3,CompoundName,3,boolean endsWith(Name n),True,,"

endsWith
public boolean endsWith(Name n)
Determines whether a compound name is a suffix of this compound name.
 A compound name 'n' is a suffix if it it is equal to
 getSuffix(size()-n.size())--in other words, this
 compound name ends with 'n'.
 If n is null or not a compound name, false is returned.

 Implementation note: Currently the syntax properties of n
  are not used when doing the comparison. They might be in the future.

Specified by:
endsWith in interface Name
Parameters:
n - The possibly null compound name to check.
Returns:
true if n is a CompoundName and
         is a suffix of this compound name, false otherwise.


"
3,CompoundName,4,Name getPrefix(int posn),True,,"

getPrefix
public Name getPrefix(int posn)
Creates a compound name whose components consist of a prefix of the
 components in this compound name.
 The result and this compound name share the same syntax.
 Subsequent changes to
 this compound name does not affect the name that is returned and
 vice versa.

Specified by:
getPrefix in interface Name
Parameters:
posn - The 0-based index of the component at which to stop.
                 Must be in the range [0,size()].
Returns:
A compound name consisting of the components at indexes in
         the range [0,posn).
Throws:
ArrayIndexOutOfBoundsException - If posn is outside the specified range.


"
3,CompoundName,5,Name getSuffix(int posn),True,,"

getSuffix
public Name getSuffix(int posn)
Creates a compound name whose components consist of a suffix of the
 components in this compound name.
 The result and this compound name share the same syntax.
 Subsequent changes to
 this compound name does not affect the name that is returned.

Specified by:
getSuffix in interface Name
Parameters:
posn - The 0-based index of the component at which to start.
                 Must be in the range [0,size()].
Returns:
A compound name consisting of the components at indexes in
         the range [posn,size()).  If posn is equal to
         size(), an empty compound name is returned.
Throws:
ArrayIndexOutOfBoundsException - If posn is outside the specified range.


"
4,InitialContext,1,Object lookup(String name),True,,"

lookup
public Object lookup(String name)
              throws NamingException
Description copied from interface: Context
Retrieves the named object.
 See Context.lookup(Name) for details.

Specified by:
lookup in interface Context
Parameters:
name - the name of the object to look up
Returns:
the object bound to name
Throws:
NamingException - if a naming exception is encountered


"
4,InitialContext,2,"void bind(String name, Object obj)",True,,"

bind
public void bind(String name,
                 Object obj)
          throws NamingException
Description copied from interface: Context
Binds a name to an object.
 See Context.bind(Name, Object) for details.

Specified by:
bind in interface Context
Parameters:
name - the name to bind; may not be empty
obj - the object to bind; possibly null
Throws:
NameAlreadyBoundException - if name is already bound
InvalidAttributesException - if object did not supply all mandatory attributes
NamingException - if a naming exception is encountered


"
4,InitialContext,3,"void rebind(String name, Object obj)",True,,"

rebind
public void rebind(String name,
                   Object obj)
            throws NamingException
Description copied from interface: Context
Binds a name to an object, overwriting any existing binding.
 See Context.rebind(Name, Object) for details.

Specified by:
rebind in interface Context
Parameters:
name - the name to bind; may not be empty
obj - the object to bind; possibly null
Throws:
InvalidAttributesException - if object did not supply all mandatory attributes
NamingException - if a naming exception is encountered


"
4,InitialContext,4,void unbind(String name),True,,"

unbind
public void unbind(String name)
            throws NamingException
Description copied from interface: Context
Unbinds the named object.
 See Context.unbind(Name) for details.

Specified by:
unbind in interface Context
Parameters:
name - the name to unbind; may not be empty
Throws:
NameNotFoundException - if an intermediate context does not exist
NamingException - if a naming exception is encountered


"
4,InitialContext,5,NamingEnumeration list(String name),False,,NULL
5,LinkRef,1,String getLinkName(),True,,"

getLinkName
public String getLinkName()
                   throws NamingException
Retrieves the name of this link.

Returns:
The non-null name of this link.
Throws:
MalformedLinkException - If a link name could not be extracted
NamingException - If a naming exception was encountered.


"
5,LinkRef,2,void setLinkName(String linkName),False,,NULL
5,LinkRef,3,Reference getReference(),False,,NULL
5,LinkRef,4,void setReference(Reference reference),False,,NULL
5,LinkRef,5,Object clone(),False,,NULL
6,NameClassPair,1,String getName(),True,,"

getName
public String getName()
Retrieves the name of this binding.
 If isRelative() is true, this name is relative to the
 target context (which is named by the first parameter of the
 list()).
 If isRelative() is false, this name is a URL string.

Returns:
The non-null name of this binding.
See Also:
isRelative(), 
setName(java.lang.String)


"
6,NameClassPair,2,String getClassName(),True,,"

getClassName
public String getClassName()
Retrieves the class name of the object bound to the name of this binding.
 If a reference or some other indirect information is bound,
 retrieves the class name of the eventual object that
 will be returned by Binding.getObject().

Returns:
The possibly null class name of object bound.
          It is null if the object bound is null.
See Also:
Binding.getObject(), 
Binding.getClassName(), 
setClassName(java.lang.String)


"
6,NameClassPair,3,boolean isRelative(),True,,"

isRelative
public boolean isRelative()
Determines whether the name of this binding is
 relative to the target context (which is named by
 the first parameter of the list() method).

Returns:
true if the name of this binding is relative to the
          target context;
          false if the name of this binding is a URL string.
See Also:
setRelative(boolean), 
getName()


"
6,NameClassPair,4,void setName(String name),True,,"

setName
public void setName(String name)
Sets the name of this binding.

Parameters:
name - the non-null string to use as the name.
See Also:
getName(), 
setRelative(boolean)


"
6,NameClassPair,5,void setClassName(String className),True,,"

setClassName
public void setClassName(String name)
Sets the class name of this binding.

Parameters:
name - the possibly null string to use as the class name.
 If null, Binding.getClassName() will return
 the actual class name of the object in the binding.
 The class name will be null if the object bound is null.
See Also:
getClassName(), 
Binding.getClassName()


"
7,RefAddr,1,String getType(),True,,"

getType
public String getType()
Retrieves the address type of this address.

Returns:
The non-null address type of this address.


"
7,RefAddr,2,Object getContent(),True,,"

getContent
public abstract Object getContent()
Retrieves the contents of this address.

Returns:
The possibly null address contents.


"
7,RefAddr,3,void setContent(Object content),False,,NULL
7,RefAddr,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Determines whether obj is equal to this RefAddr.

 obj is equal to this RefAddr all of these conditions are true

 non-null
 instance of RefAddr
 obj has the same address type as this RefAddr (using String.compareTo())
 both obj and this RefAddr's contents are null or they are equal
         (using the equals() test).


Overrides:
equals in class Object
Parameters:
obj - possibly null obj to check.
Returns:
true if obj is equal to this refaddr; false otherwise.
See Also:
getContent(), 
getType()


"
7,RefAddr,5,int hashCode(),True,,"

hashCode
public int hashCode()
Computes the hash code of this address using its address type and contents.
 The hash code is the sum of the hash code of the address type and
 the hash code of the address contents.

Overrides:
hashCode in class Object
Returns:
The hash code of this address as an int.
See Also:
Object.hashCode()


"
8,Reference,1,"void add(int posn, RefAddr addr)",True,,"

add
public void add(int posn,
                RefAddr addr)
Adds an address to the list of addresses at index posn.
 All addresses at index posn or greater are shifted up
 the list by one (away from index 0).

Parameters:
posn - The 0-based index of the list to insert addr.
addr - The non-null address to add.
Throws:
ArrayIndexOutOfBoundsException - If posn not in the specified
         range.


"
8,Reference,2,RefAddr get(int posn),True,,"

get
public RefAddr get(int posn)
Retrieves the address at index posn.

Parameters:
posn - The index of the address to retrieve.
Returns:
The address at the 0-based index posn. It must be in the
         range [0,getAddressCount()).
Throws:
ArrayIndexOutOfBoundsException - If posn not in the specified
         range.


"
8,Reference,3,Enumeration<RefAddr> getAll(),True,,"

getAll
public Enumeration<RefAddr> getAll()
Retrieves an enumeration of the addresses in this reference.
 When addresses are added, changed or removed from this reference,
 its effects on this enumeration are undefined.

Returns:
An non-null enumeration of the addresses
         (RefAddr) in this reference.
         If this reference has zero addresses, an enumeration with
         zero elements is returned.


"
8,Reference,4,String getClassName(),True,,"

getClassName
public String getClassName()
Retrieves the class name of the object to which this reference refers.

Returns:
The non-null fully-qualified class name of the object.
         (e.g. ""java.lang.String"")


"
8,Reference,5,String getFactoryClassName(),True,,"

getFactoryClassName
public String getFactoryClassName()
Retrieves the class name of the factory of the object
 to which this reference refers.

Returns:
The possibly null fully-qualified class name of the factory.
         (e.g. ""java.lang.String"")


"
9,StringRefAddr,1,String getType(),False,,NULL
9,StringRefAddr,2,Object getContent(),True,,"

getContent
public Object getContent()
Retrieves the contents of this address. The result is a string.

Specified by:
getContent in class RefAddr
Returns:
The possibly null address contents.


"
9,StringRefAddr,3,boolean equals(Object obj),False,,NULL
9,StringRefAddr,4,int hashCode(),False,,NULL
9,StringRefAddr,5,String toString(),False,,NULL
