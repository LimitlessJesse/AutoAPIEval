ClassName,Method,Return Type,Description,Full Description
BufferedInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method returns the sum of the number of bytes remaining to be read in
 the buffer (count - pos) and the result of calling the
 in.available().

Overrides:
available in class FilterInputStream
Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.


"
BufferedInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 Once the stream has been closed, further read(), available(), reset(),
 or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
BufferedInputStream,mark(int readlimit),void,See the general contract of the mark method of InputStream.,"

mark
public void mark(int readlimit)
See the general contract of the mark
 method of InputStream.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
reset()


"
BufferedInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.,"

markSupported
public boolean markSupported()
Tests if this input stream supports the mark
 and reset methods. The markSupported
 method of BufferedInputStream returns
 true.

Overrides:
markSupported in class FilterInputStream
Returns:
a boolean indicating if this stream type supports
          the mark and reset methods.
See Also:
InputStream.mark(int), 
InputStream.reset()


"
BufferedInputStream,read(),int,See the general contract of the read method of InputStream.,"

read
public int read()
         throws IOException
See
 the general contract of the read
 method of InputStream.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.
See Also:
FilterInputStream.in


"
BufferedInputStream,"read(byte[] b, int off, int len)",int,"Reads bytes from this byte-input stream into the specified byte array, starting at the given offset.","

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads bytes from this byte-input stream into the specified byte array,
 starting at the given offset.

  This method implements the general contract of the corresponding
 read method of
 the InputStream class.  As an additional
 convenience, it attempts to read as many bytes as possible by repeatedly
 invoking the read method of the underlying stream.  This
 iterated read continues until one of the following
 conditions becomes true: 
 The specified number of bytes have been read,

    The read method of the underlying stream returns
   -1, indicating end-of-file, or

    The available method of the underlying stream
   returns zero, indicating that further input requests would block.

  If the first read on the underlying stream returns
 -1 to indicate end-of-file then this method returns
 -1.  Otherwise this method returns the number of bytes
 actually read.

  Subclasses of this class are encouraged, but not required, to
 attempt to read as many bytes as possible in the same fashion.

Overrides:
read in class FilterInputStream
Parameters:
b - destination buffer.
off - offset at which to start storing bytes.
len - maximum number of bytes to read.
Returns:
the number of bytes read, or -1 if the end of
             the stream has been reached.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.
See Also:
FilterInputStream.in


"
BufferedInputStream,reset(),void,See the general contract of the reset method of InputStream.,"

reset
public void reset()
           throws IOException
See the general contract of the reset
 method of InputStream.
 
 If markpos is -1
 (no mark has been set or the mark has been
 invalidated), an IOException
 is thrown. Otherwise, pos is
 set equal to markpos.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if this stream has not been marked or,
                  if the mark has been invalidated, or the stream
                  has been closed by invoking its close()
                  method, or an I/O error occurs.
See Also:
mark(int)


"
BufferedInputStream,skip(long n),long,See the general contract of the skip method of InputStream.,"

skip
public long skip(long n)
          throws IOException
See the general contract of the skip
 method of InputStream.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if this input stream has been closed by
                          invoking its close() method, or an
                          I/O error occurs.


"
BufferedOutputStream,flush(),void,Flushes this buffered output stream.,"

flush
public void flush()
           throws IOException
Flushes this buffered output stream. This forces any buffered
 output bytes to be written out to the underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
BufferedOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this buffered output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this buffered output stream.

  Ordinarily this method stores bytes from the given array into this
 stream's buffer, flushing the buffer to the underlying output stream as
 needed.  If the requested length is at least as large as this stream's
 buffer, however, then this method will flush the buffer and write the
 bytes directly to the underlying output stream.  Thus redundant
 BufferedOutputStreams will not copy data unnecessarily.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.write(int)


"
BufferedOutputStream,write(int b),void,Writes the specified byte to this buffered output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this buffered output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
BufferedReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
BufferedReader,lines(),Stream<String>,"Returns a Stream, the elements of which are lines read from this BufferedReader.","

lines
public Stream<String> lines()
Returns a Stream, the elements of which are lines read from
 this BufferedReader.  The Stream is lazily populated,
 i.e., read only occurs during the
 terminal
 stream operation.

  The reader must not be operated on during the execution of the
 terminal stream operation. Otherwise, the result of the terminal stream
 operation is undefined.

  After execution of the terminal stream operation there are no
 guarantees that the reader will be at a specific position from which to
 read the next character or line.

  If an IOException is thrown when accessing the underlying
 BufferedReader, it is wrapped in an UncheckedIOException which will be thrown from the Stream
 method that caused the read to take place. This method will return a
 Stream if invoked on a BufferedReader that is closed. Any operation on
 that stream that requires reading from the BufferedReader after it is
 closed, will cause an UncheckedIOException to be thrown.

Returns:
a Stream<String> providing the lines of text
         described by this BufferedReader
Since:
1.8


"
BufferedReader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will attempt to reposition the stream to this point.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark. An attempt
                         to reset the stream after reading characters
                         up to this limit or beyond may fail.
                         A limit value larger than the size of the input
                         buffer will cause a new buffer to be allocated
                         whose size is no smaller than limit.
                         Therefore large values should be used with care.
Throws:
IllegalArgumentException - If readAheadLimit < 0
IOException - If an I/O error occurs


"
BufferedReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does.","

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation, which it does.

Overrides:
markSupported in class Reader
Returns:
true if and only if this stream supports the mark operation.


"
BufferedReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range
         0 to 65535 (0x00-0xffff), or -1 if the
         end of the stream has been reached
Throws:
IOException - If an I/O error occurs


"
BufferedReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

  This method implements the general contract of the corresponding
 read method of the
 Reader class.  As an additional convenience, it
 attempts to read as many characters as possible by repeatedly invoking
 the read method of the underlying stream.  This iterated
 read continues until one of the following conditions becomes
 true: 
 The specified number of characters have been read,

    The read method of the underlying stream returns
   -1, indicating end-of-file, or

    The ready method of the underlying stream
   returns false, indicating that further input requests
   would block.

  If the first read on the underlying stream returns
 -1 to indicate end-of-file then this method returns
 -1.  Otherwise this method returns the number of characters
 actually read.

  Subclasses of this class are encouraged, but not required, to
 attempt to read as many characters as possible in the same fashion.

  Ordinarily this method takes characters from this stream's character
 buffer, filling it from the underlying stream as necessary.  If,
 however, the buffer is empty, the mark is not valid, and the requested
 length is at least as large as the buffer, then this method will read
 characters directly from the underlying stream into the given array.
 Thus redundant BufferedReaders will not copy data
 unnecessarily.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
BufferedReader,readLine(),String,Reads a line of text.,"

readLine
public String readLine()
                throws IOException
Reads a line of text.  A line is considered to be terminated by any one
 of a line feed ('\n'), a carriage return ('\r'), or a carriage return
 followed immediately by a linefeed.

Returns:
A String containing the contents of the line, not including
             any line-termination characters, or null if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
BufferedReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  A buffered character
 stream is ready if the buffer is not empty, or if the underlying
 character stream is ready.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
BufferedReader,reset(),void,Resets the stream to the most recent mark.,"

reset
public void reset()
           throws IOException
Resets the stream to the most recent mark.

Overrides:
reset in class Reader
Throws:
IOException - If the stream has never been marked,
                          or if the mark has been invalidated


"
BufferedReader,skip(long n),long,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.

Overrides:
skip in class Reader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IllegalArgumentException - If n is negative.
IOException - If an I/O error occurs


"
BufferedWriter,close(),void,"Closes the stream, flushing it first.","

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
BufferedWriter,flush(),void,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
BufferedWriter,newLine(),void,Writes a line separator.,"

newLine
public void newLine()
             throws IOException
Writes a line separator.  The line separator string is defined by the
 system property line.separator, and is not necessarily a single
 newline ('\n') character.

Throws:
IOException - If an I/O error occurs


"
BufferedWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

  Ordinarily this method stores characters from the given array into
 this stream's buffer, flushing the buffer to the underlying stream as
 needed.  If the requested length is at least as large as the buffer,
 however, then this method will flush the buffer and write the characters
 directly to the underlying stream.  Thus redundant
 BufferedWriters will not copy data unnecessarily.

Specified by:
write in class Writer
Parameters:
cbuf - A character array
off - Offset from which to start reading characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
BufferedWriter,write(int c),void,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
BufferedWriter,"write(String s, int off, int len)",void,Writes a portion of a String.,"

write
public void write(String s,
                  int off,
                  int len)
           throws IOException
Writes a portion of a String.

  If the value of the len parameter is negative then no
 characters are written.  This is contrary to the specification of this
 method in the superclass, which requires that an IndexOutOfBoundsException be
 thrown.

Overrides:
write in class Writer
Parameters:
s - String to be written
off - Offset from which to start reading characters
len - Number of characters to be written
Throws:
IOException - If an I/O error occurs


"
ByteArrayInputStream,available(),int,Returns the number of remaining bytes that can be read (or skipped over) from this input stream.,"

available
public int available()
Returns the number of remaining bytes that can be read (or skipped over)
 from this input stream.
 
 The value returned is count - pos,
 which is the number of bytes remaining to be read from the input buffer.

Overrides:
available in class InputStream
Returns:
the number of remaining bytes that can be read (or skipped
          over) from this input stream without blocking.


"
ByteArrayInputStream,close(),void,Closing a ByteArrayInputStream has no effect.,"

close
public void close()
           throws IOException
Closing a ByteArrayInputStream has no effect. The methods in
 this class can be called after the stream has been closed without
 generating an IOException.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
ByteArrayInputStream,mark(int readAheadLimit),void,Set the current marked position in the stream.,"

mark
public void mark(int readAheadLimit)
Set the current marked position in the stream.
 ByteArrayInputStream objects are marked at position zero by
 default when constructed.  They may be marked at another
 position within the buffer by this method.
 
 If no mark has been set, then the value of the mark is the
 offset passed to the constructor (or 0 if the offset was not
 supplied).

  Note: The readAheadLimit for this class
  has no meaning.

Overrides:
mark in class InputStream
Parameters:
readAheadLimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
Since:
JDK1.1
See Also:
InputStream.reset()


"
ByteArrayInputStream,markSupported(),boolean,Tests if this InputStream supports mark/reset.,"

markSupported
public boolean markSupported()
Tests if this InputStream supports mark/reset. The
 markSupported method of ByteArrayInputStream
 always returns true.

Overrides:
markSupported in class InputStream
Returns:
true if this stream instance supports the mark
          and reset methods; false otherwise.
Since:
JDK1.1
See Also:
InputStream.mark(int), 
InputStream.reset()


"
ByteArrayInputStream,read(),int,Reads the next byte of data from this input stream.,"

read
public int read()
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 This read method
 cannot block.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
          stream has been reached.


"
ByteArrayInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data into an array of bytes from this input stream.,"

read
public int read(byte[] b,
                int off,
                int len)
Reads up to len bytes of data into an array of bytes
 from this input stream.
 If pos equals count,
 then -1 is returned to indicate
 end of file. Otherwise, the  number k
 of bytes read is equal to the smaller of
 len and count-pos.
 If k is positive, then bytes
 buf[pos] through buf[pos+k-1]
 are copied into b[off]  through
 b[off+k-1] in the manner performed
 by System.arraycopy. The
 value k is added into pos
 and k is returned.
 
 This read method cannot block.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
          -1 if there is no more data because the end of
          the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
See Also:
InputStream.read()


"
ByteArrayInputStream,reset(),void,Resets the buffer to the marked position.,"

reset
public void reset()
Resets the buffer to the marked position.  The marked position
 is 0 unless another position was marked or an offset was specified
 in the constructor.

Overrides:
reset in class InputStream
See Also:
InputStream.mark(int), 
IOException


"
ByteArrayInputStream,skip(long n),long,Skips n bytes of input from this input stream.,"

skip
public long skip(long n)
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.
 The actual number k
 of bytes to be skipped is equal to the smaller
 of n and  count-pos.
 The value k is added into pos
 and k is returned.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
ByteArrayOutputStream,close(),void,Closing a ByteArrayOutputStream has no effect.,"

close
public void close()
           throws IOException
Closing a ByteArrayOutputStream has no effect. The methods in
 this class can be called after the stream has been closed without
 generating an IOException.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
ByteArrayOutputStream,reset(),void,"Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded.","

reset
public void reset()
Resets the count field of this byte array output
 stream to zero, so that all currently accumulated output in the
 output stream is discarded. The output stream can be used again,
 reusing the already allocated buffer space.

See Also:
ByteArrayInputStream.count


"
ByteArrayOutputStream,size(),int,Returns the current size of the buffer.,"

size
public int size()
Returns the current size of the buffer.

Returns:
the value of the count field, which is the number
          of valid bytes in this output stream.
See Also:
count


"
ByteArrayOutputStream,toByteArray(),byte[],Creates a newly allocated byte array.,"

toByteArray
public byte[] toByteArray()
Creates a newly allocated byte array. Its size is the current
 size of this output stream and the valid contents of the buffer
 have been copied into it.

Returns:
the current contents of this output stream, as a byte array.
See Also:
size()


"
ByteArrayOutputStream,toString(),String,Converts the buffer's contents into a string decoding bytes using the platform's default character set.,"

toString
public String toString()
Converts the buffer's contents into a string decoding bytes using the
 platform's default character set. The length of the new String
 is a function of the character set, and hence may not be equal to the
 size of the buffer.

  This method always replaces malformed-input and unmappable-character
 sequences with the default replacement string for the platform's
 default character set. The CharsetDecoder
 class should be used when more control over the decoding process is
 required.

Overrides:
toString in class Object
Returns:
String decoded from the buffer's contents.
Since:
JDK1.1


"
ByteArrayOutputStream,toString(int hibyte),String,"Deprecated. This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the toString(String enc) method, which takes an encoding-name argument, or the toString() method, which uses the platform's default character encoding.","

toString
@Deprecated
public String toString(int hibyte)
Deprecated. This method does not properly convert bytes into characters.
 As of JDK 1.1, the preferred way to do this is via the
 toString(String enc) method, which takes an encoding-name
 argument, or the toString() method, which uses the
 platform's default character encoding.
Creates a newly allocated string. Its size is the current size of
 the output stream and the valid contents of the buffer have been
 copied into it. Each character c in the resulting string is
 constructed from the corresponding element b in the byte
 array such that:
 
     c == (char)(((hibyte & 0xff) << 8) | (b & 0xff))
 

Parameters:
hibyte - the high byte of each resulting Unicode character.
Returns:
the current contents of the output stream, as a string.
See Also:
size(), 
toString(String), 
toString()


"
ByteArrayOutputStream,toString(String charsetName),String,Converts the buffer's contents into a string by decoding the bytes using the named charset.,"

toString
public String toString(String charsetName)
                throws UnsupportedEncodingException
Converts the buffer's contents into a string by decoding the bytes using
 the named charset. The length of the new
 String is a function of the charset, and hence may not be equal
 to the length of the byte array.

  This method always replaces malformed-input and unmappable-character
 sequences with this charset's default replacement string. The CharsetDecoder class should be used when more control
 over the decoding process is required.

Parameters:
charsetName - the name of a supported
             charset
Returns:
String decoded from the buffer's contents.
Throws:
UnsupportedEncodingException - If the named charset is not supported
Since:
JDK1.1


"
ByteArrayOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this byte array output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
Writes len bytes from the specified byte array
 starting at offset off to this byte array output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.


"
ByteArrayOutputStream,write(int b),void,Writes the specified byte to this byte array output stream.,"

write
public void write(int b)
Writes the specified byte to this byte array output stream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.


"
ByteArrayOutputStream,writeTo(OutputStream out),void,"Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).","

writeTo
public void writeTo(OutputStream out)
             throws IOException
Writes the complete contents of this byte array output stream to
 the specified output stream argument, as if by calling the output
 stream's write method using out.write(buf, 0, count).

Parameters:
out - the output stream to which to write the data.
Throws:
IOException - if an I/O error occurs.


"
CharArrayReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader


"
CharArrayReader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will reposition the stream to this point.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  Because
                         the stream's input comes from a character array,
                         there is no actual limit; hence this argument is
                         ignored.
Throws:
IOException - If an I/O error occurs


"
CharArrayReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does.","

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation, which it does.

Overrides:
markSupported in class Reader
Returns:
true if and only if this stream supports the mark operation.


"
CharArrayReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
CharArrayReader,"read(char[] b, int off, int len)",int,Reads characters into a portion of an array.,"

read
public int read(char[] b,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
b - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The actual number of characters read, or -1 if
          the end of the stream has been reached
Throws:
IOException - If an I/O error occurs


"
CharArrayReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  Character-array readers
 are always ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
CharArrayReader,reset(),void,"Resets the stream to the most recent mark, or to the beginning if it has never been marked.","

reset
public void reset()
           throws IOException
Resets the stream to the most recent mark, or to the beginning if it has
 never been marked.

Overrides:
reset in class Reader
Throws:
IOException - If an I/O error occurs


"
CharArrayReader,skip(long n),long,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  Returns the number of characters that were skipped.

 The n parameter may be negative, even though the
 skip method of the Reader superclass throws
 an exception in this case. If n is negative, then
 this method does nothing and returns 0.

Overrides:
skip in class Reader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If the stream is closed, or an I/O error occurs


"
CharArrayWriter,append(char c),CharArrayWriter,Appends the specified character to this writer.,"

append
public CharArrayWriter append(char c)
Appends the specified character to this writer.

  An invocation of this method of the form out.append(c)
 behaves in exactly the same way as the invocation

 
     out.write(c) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
c - The 16-bit character to append
Returns:
This writer
Since:
1.5


"
CharArrayWriter,append(CharSequence csq),CharArrayWriter,Appends the specified character sequence to this writer.,"

append
public CharArrayWriter append(CharSequence csq)
Appends the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq)
 behaves in exactly the same way as the invocation

 
     out.write(csq.toString()) 
 Depending on the specification of toString for the
 character sequence csq, the entire sequence may not be
 appended. For instance, invoking the toString method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence to append.  If csq is
         null, then the four characters ""null"" are
         appended to this writer.
Returns:
This writer
Since:
1.5


"
CharArrayWriter,"append(CharSequence csq, int start, int end)",CharArrayWriter,Appends a subsequence of the specified character sequence to this writer.,"

append
public CharArrayWriter append(CharSequence csq,
                              int start,
                              int end)
Appends a subsequence of the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq, start,
 end) when csq is not null, behaves in
 exactly the same way as the invocation

 
     out.write(csq.subSequence(start, end).toString()) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence from which a subsequence will be
         appended.  If csq is null, then characters
         will be appended as if csq contained the four
         characters ""null"".
start - The index of the first character in the subsequence
end - The index of the character following the last character in the
         subsequence
Returns:
This writer
Throws:
IndexOutOfBoundsException - If start or end are negative, start
          is greater than end, or end is greater than
          csq.length()
Since:
1.5


"
CharArrayWriter,close(),void,Close the stream.,"

close
public void close()
Close the stream.  This method does not release the buffer, since its
 contents might still be required. Note: Invoking this method in this class
 will have no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer


"
CharArrayWriter,flush(),void,Flush the stream.,"

flush
public void flush()
Flush the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer


"
CharArrayWriter,reset(),void,Resets the buffer so that you can use it again without throwing away the already allocated buffer.,"

reset
public void reset()
Resets the buffer so that you can use it again without
 throwing away the already allocated buffer.

"
CharArrayWriter,size(),int,Returns the current size of the buffer.,"

size
public int size()
Returns the current size of the buffer.

Returns:
an int representing the current size of the buffer.


"
CharArrayWriter,toCharArray(),char[],Returns a copy of the input data.,"

toCharArray
public char[] toCharArray()
Returns a copy of the input data.

Returns:
an array of chars copied from the input data.


"
CharArrayWriter,toString(),String,Converts input data to a string.,"

toString
public String toString()
Converts input data to a string.

Overrides:
toString in class Object
Returns:
the string.


"
CharArrayWriter,"write(char[] c, int off, int len)",void,Writes characters to the buffer.,"

write
public void write(char[] c,
                  int off,
                  int len)
Writes characters to the buffer.

Specified by:
write in class Writer
Parameters:
c - the data to be written
off - the start offset in the data
len - the number of chars that are written


"
CharArrayWriter,write(int c),void,Writes a character to the buffer.,"

write
public void write(int c)
Writes a character to the buffer.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
CharArrayWriter,"write(String str, int off, int len)",void,Write a portion of a string to the buffer.,"

write
public void write(String str,
                  int off,
                  int len)
Write a portion of a string to the buffer.

Overrides:
write in class Writer
Parameters:
str - String to be written from
off - Offset from which to start reading characters
len - Number of characters to be written


"
CharArrayWriter,writeTo(Writer out),void,Writes the contents of the buffer to another character stream.,"

writeTo
public void writeTo(Writer out)
             throws IOException
Writes the contents of the buffer to another character stream.

Parameters:
out - the output stream to write to
Throws:
IOException - If an I/O error occurs.


"
Console,flush(),void,Flushes the console and forces any buffered output to be written immediately .,"

flush
public void flush()
Flushes the console and forces any buffered output to be written
 immediately .

Specified by:
flush in interface Flushable


"
Console,"format(String fmt, Object... args)",Console,Writes a formatted string to this console's output stream using the specified format string and arguments.,"

format
public Console format(String fmt,
                      Object... args)
Writes a formatted string to this console's output stream using
 the specified format string and arguments.

Parameters:
fmt - A format string as described in Format string syntax
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This console
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section
          of the formatter class specification.


"
Console,"printf(String format, Object... args)",Console,A convenience method to write a formatted string to this console's output stream using the specified format string and arguments.,"

printf
public Console printf(String format,
                      Object... args)
A convenience method to write a formatted string to this console's
 output stream using the specified format string and arguments.

  An invocation of this method of the form con.printf(format,
 args) behaves in exactly the same way as the invocation of
 con.format(format, args).

Parameters:
format - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This console
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.


"
Console,reader(),Reader,Retrieves the unique Reader object associated with this console.,"

reader
public Reader reader()
Retrieves the unique Reader object associated
 with this console.
 
 This method is intended to be used by sophisticated applications, for
 example, a Scanner object which utilizes the rich
 parsing/scanning functionality provided by the Scanner:
 
 Console con = System.console();
 if (con != null) {
     Scanner sc = new Scanner(con.reader());
     ...
 }
 

 For simple applications requiring only line-oriented reading, use
 readLine(java.lang.String, java.lang.Object...).
 
 The bulk read operations read(char[]) ,
 read(char[], int, int)  and
 read(java.nio.CharBuffer)
 on the returned object will not read in characters beyond the line
 bound for each invocation, even if the destination buffer has space for
 more characters. The Reader's read methods may block if a
 line bound has not been entered or reached on the console's input device.
 A line bound is considered to be any one of a line feed ('\n'),
 a carriage return ('\r'), a carriage return followed immediately
 by a linefeed, or an end of stream.

Returns:
The reader associated with this console


"
Console,readLine(),String,Reads a single line of text from the console.,"

readLine
public String readLine()
Reads a single line of text from the console.

Returns:
A string containing the line read from the console, not
          including any line-termination characters, or null
          if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
Console,"readLine(String fmt, Object... args)",String,"Provides a formatted prompt, then reads a single line of text from the console.","

readLine
public String readLine(String fmt,
                       Object... args)
Provides a formatted prompt, then reads a single line of text from the
 console.

Parameters:
fmt - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
Returns:
A string containing the line read from the console, not
          including any line-termination characters, or null
          if an end of stream has been reached.
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section
          of the formatter class specification.
IOError - If an I/O error occurs.


"
Console,readPassword(),char[],Reads a password or passphrase from the console with echoing disabled,"

readPassword
public char[] readPassword()
Reads a password or passphrase from the console with echoing disabled

Returns:
A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or null if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
Console,"readPassword(String fmt, Object... args)",char[],"Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.","

readPassword
public char[] readPassword(String fmt,
                           Object... args)
Provides a formatted prompt, then reads a password or passphrase from
 the console with echoing disabled.

Parameters:
fmt - A format string as described in Format string syntax
         for the prompt text.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
Returns:
A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or null if an end of stream has been reached.
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details
          section of the formatter class specification.
IOError - If an I/O error occurs.


"
Console,writer(),PrintWriter,Retrieves the unique PrintWriter object associated with this console.,"

writer
public PrintWriter writer()
Retrieves the unique PrintWriter object
 associated with this console.

Returns:
The printwriter associated with this console


"
DataInputStream,read(byte[] b),int,Reads some number of bytes from the contained input stream and stores them into the buffer array b.,"

read
public final int read(byte[] b)
               throws IOException
Reads some number of bytes from the contained input stream and
 stores them into the buffer array b. The number of
 bytes actually read is returned as an integer. This method blocks
 until input data is available, end of file is detected, or an
 exception is thrown.

 If b is null, a NullPointerException is
 thrown. If the length of b is zero, then no bytes are
 read and 0 is returned; otherwise, there is an attempt
 to read at least one byte. If no byte is available because the
 stream is at end of file, the value -1 is returned;
 otherwise, at least one byte is read and stored into b.

 The first byte read is stored into element b[0], the
 next one into b[1], and so on. The number of bytes read
 is, at most, equal to the length of b. Let k
 be the number of bytes actually read; these bytes will be stored in
 elements b[0] through b[k-1], leaving
 elements b[k] through b[b.length-1]
 unaffected.

 The read(b) method has the same effect as:
 
 read(b, 0, b.length)
 

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end
             of the stream has been reached.
Throws:
IOException - if the first byte cannot be read for any reason
 other than end of file, the stream has been closed and the underlying
 input stream does not support reading after close, or another I/O
 error occurs.
See Also:
FilterInputStream.in, 
InputStream.read(byte[], int, int)


"
DataInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from the contained input stream into an array of bytes.,"

read
public final int read(byte[] b,
                      int off,
                      int len)
               throws IOException
Reads up to len bytes of data from the contained
 input stream into an array of bytes.  An attempt is made to read
 as many as len bytes, but a smaller number may be read,
 possibly zero. The number of bytes actually read is returned as an
 integer.

  This method blocks until input data is available, end of file is
 detected, or an exception is thrown.

  If len is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at end of
 file, the value -1 is returned; otherwise, at least one
 byte is read and stored into b.

  The first byte read is stored into element b[off], the
 next one into b[off+1], and so on. The number of bytes read
 is, at most, equal to len. Let k be the number of
 bytes actually read; these bytes will be stored in elements
 b[off] through b[off+k-1],
 leaving elements b[off+k] through
 b[off+len-1] unaffected.

  In every case, elements b[0] through
 b[off] and elements b[off+len] through
 b[b.length-1] are unaffected.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end
             of the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if the first byte cannot be read for any reason
 other than end of file, the stream has been closed and the underlying
 input stream does not support reading after close, or another I/O
 error occurs.
See Also:
FilterInputStream.in, 
InputStream.read(byte[], int, int)


"
DataInputStream,readBoolean(),boolean,See the general contract of the readBoolean method of DataInput.,"

readBoolean
public final boolean readBoolean()
                          throws IOException
See the general contract of the readBoolean
 method of DataInput.
 
 Bytes for this operation are read from the contained
 input stream.

Specified by:
readBoolean in interface DataInput
Returns:
the boolean value read.
Throws:
EOFException - if this input stream has reached the end.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readByte(),byte,See the general contract of the readByte method of DataInput.,"

readByte
public final byte readByte()
                    throws IOException
See the general contract of the readByte
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readByte in interface DataInput
Returns:
the next byte of this input stream as a signed 8-bit
             byte.
Throws:
EOFException - if this input stream has reached the end.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readChar(),char,See the general contract of the readChar method of DataInput.,"

readChar
public final char readChar()
                    throws IOException
See the general contract of the readChar
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readChar in interface DataInput
Returns:
the next two bytes of this input stream, interpreted as a
             char.
Throws:
EOFException - if this input stream reaches the end before
               reading two bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readDouble(),double,See the general contract of the readDouble method of DataInput.,"

readDouble
public final double readDouble()
                        throws IOException
See the general contract of the readDouble
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readDouble in interface DataInput
Returns:
the next eight bytes of this input stream, interpreted as a
             double.
Throws:
EOFException - if this input stream reaches the end before
               reading eight bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
readLong(), 
Double.longBitsToDouble(long)


"
DataInputStream,readFloat(),float,See the general contract of the readFloat method of DataInput.,"

readFloat
public final float readFloat()
                      throws IOException
See the general contract of the readFloat
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readFloat in interface DataInput
Returns:
the next four bytes of this input stream, interpreted as a
             float.
Throws:
EOFException - if this input stream reaches the end before
               reading four bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
readInt(), 
Float.intBitsToFloat(int)


"
DataInputStream,readFully(byte[] b),void,See the general contract of the readFully method of DataInput.,"

readFully
public final void readFully(byte[] b)
                     throws IOException
See the general contract of the readFully
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readFully in interface DataInput
Parameters:
b - the buffer into which the data is read.
Throws:
EOFException - if this input stream reaches the end before
             reading all the bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,"readFully(byte[] b, int off, int len)",void,See the general contract of the readFully method of DataInput.,"

readFully
public final void readFully(byte[] b,
                            int off,
                            int len)
                     throws IOException
See the general contract of the readFully
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readFully in interface DataInput
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the number of bytes to read.
Throws:
EOFException - if this input stream reaches the end before
               reading all the bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readInt(),int,See the general contract of the readInt method of DataInput.,"

readInt
public final int readInt()
                  throws IOException
See the general contract of the readInt
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readInt in interface DataInput
Returns:
the next four bytes of this input stream, interpreted as an
             int.
Throws:
EOFException - if this input stream reaches the end before
               reading four bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readLine(),String,"Deprecated. This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the BufferedReader.readLine() method. Programs that use the DataInputStream class to read lines can be converted to use the BufferedReader class by replacing code of the form: DataInputStream d = new DataInputStream(in); with: BufferedReader d = new BufferedReader(new InputStreamReader(in));","

readLine
@Deprecated
public final String readLine()
                                  throws IOException
Deprecated. This method does not properly convert bytes to characters.
 As of JDK 1.1, the preferred way to read lines of text is via the
 BufferedReader.readLine() method.  Programs that use the
 DataInputStream class to read lines can be converted to use
 the BufferedReader class by replacing code of the form:
 
     DataInputStream d = new DataInputStream(in);
 
 with:
 
     BufferedReader d
          = new BufferedReader(new InputStreamReader(in));
 
See the general contract of the readLine
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readLine in interface DataInput
Returns:
the next line of text from this input stream.
Throws:
IOException - if an I/O error occurs.
See Also:
BufferedReader.readLine(), 
FilterInputStream.in


"
DataInputStream,readLong(),long,See the general contract of the readLong method of DataInput.,"

readLong
public final long readLong()
                    throws IOException
See the general contract of the readLong
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readLong in interface DataInput
Returns:
the next eight bytes of this input stream, interpreted as a
             long.
Throws:
EOFException - if this input stream reaches the end before
               reading eight bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readShort(),short,See the general contract of the readShort method of DataInput.,"

readShort
public final short readShort()
                      throws IOException
See the general contract of the readShort
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readShort in interface DataInput
Returns:
the next two bytes of this input stream, interpreted as a
             signed 16-bit number.
Throws:
EOFException - if this input stream reaches the end before
               reading two bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readUnsignedByte(),int,See the general contract of the readUnsignedByte method of DataInput.,"

readUnsignedByte
public final int readUnsignedByte()
                           throws IOException
See the general contract of the readUnsignedByte
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readUnsignedByte in interface DataInput
Returns:
the next byte of this input stream, interpreted as an
             unsigned 8-bit number.
Throws:
EOFException - if this input stream has reached the end.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readUnsignedShort(),int,See the general contract of the readUnsignedShort method of DataInput.,"

readUnsignedShort
public final int readUnsignedShort()
                            throws IOException
See the general contract of the readUnsignedShort
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readUnsignedShort in interface DataInput
Returns:
the next two bytes of this input stream, interpreted as an
             unsigned 16-bit integer.
Throws:
EOFException - if this input stream reaches the end before
             reading two bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
See Also:
FilterInputStream.in


"
DataInputStream,readUTF(),String,See the general contract of the readUTF method of DataInput.,"

readUTF
public final String readUTF()
                     throws IOException
See the general contract of the readUTF
 method of DataInput.
 
 Bytes
 for this operation are read from the contained
 input stream.

Specified by:
readUTF in interface DataInput
Returns:
a Unicode string.
Throws:
EOFException - if this input stream reaches the end before
               reading all the bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
UTFDataFormatException - if the bytes do not represent a valid
             modified UTF-8 encoding of a string.
See Also:
readUTF(java.io.DataInput)


"
DataInputStream,readUTF(DataInput in),static String,Reads from the stream in a representation of a Unicode character string encoded in modified UTF-8 format; this string of characters is then returned as a String.,"

readUTF
public static final String readUTF(DataInput in)
                            throws IOException
Reads from the
 stream in a representation
 of a Unicode  character string encoded in
 modified UTF-8 format;
 this string of characters is then returned as a String.
 The details of the modified UTF-8 representation
 are  exactly the same as for the readUTF
 method of DataInput.

Parameters:
in - a data input stream.
Returns:
a Unicode string.
Throws:
EOFException - if the input stream reaches the end
               before all the bytes.
IOException - the stream has been closed and the contained
             input stream does not support reading after close, or
             another I/O error occurs.
UTFDataFormatException - if the bytes do not represent a
               valid modified UTF-8 encoding of a Unicode string.
See Also:
readUnsignedShort()


"
DataInputStream,skipBytes(int n),int,See the general contract of the skipBytes method of DataInput.,"

skipBytes
public final int skipBytes(int n)
                    throws IOException
See the general contract of the skipBytes
 method of DataInput.
 
 Bytes for this operation are read from the contained
 input stream.

Specified by:
skipBytes in interface DataInput
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the contained input stream does not support
             seek, or the stream has been closed and
             the contained input stream does not support
             reading after close, or another I/O error occurs.


"
DataOutputStream,flush(),void,Flushes this data output stream.,"

flush
public void flush()
           throws IOException
Flushes this data output stream. This forces any buffered output
 bytes to be written out to the stream.
 
 The flush method of DataOutputStream
 calls the flush method of its underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out, 
OutputStream.flush()


"
DataOutputStream,size(),int,"Returns the current value of the counter written, the number of bytes written to this data output stream so far.","

size
public final int size()
Returns the current value of the counter written,
 the number of bytes written to this data output stream so far.
 If the counter overflows, it will be wrapped to Integer.MAX_VALUE.

Returns:
the value of the written field.
See Also:
written


"
DataOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to the underlying output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to the underlying output stream.
 If no exception is thrown, the counter written is
 incremented by len.

Specified by:
write in interface DataOutput
Overrides:
write in class FilterOutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,write(int b),void,Writes the specified byte (the low eight bits of the argument b) to the underlying output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte (the low eight bits of the argument
 b) to the underlying output stream. If no exception
 is thrown, the counter written is incremented by
 1.
 
 Implements the write method of OutputStream.

Specified by:
write in interface DataOutput
Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeBoolean(boolean v),void,Writes a boolean to the underlying output stream as a 1-byte value.,"

writeBoolean
public final void writeBoolean(boolean v)
                        throws IOException
Writes a boolean to the underlying output stream as
 a 1-byte value. The value true is written out as the
 value (byte)1; the value false is
 written out as the value (byte)0. If no exception is
 thrown, the counter written is incremented by
 1.

Specified by:
writeBoolean in interface DataOutput
Parameters:
v - a boolean value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeByte(int v),void,Writes out a byte to the underlying output stream as a 1-byte value.,"

writeByte
public final void writeByte(int v)
                     throws IOException
Writes out a byte to the underlying output stream as
 a 1-byte value. If no exception is thrown, the counter
 written is incremented by 1.

Specified by:
writeByte in interface DataOutput
Parameters:
v - a byte value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeBytes(String s),void,Writes out the string to the underlying output stream as a sequence of bytes.,"

writeBytes
public final void writeBytes(String s)
                      throws IOException
Writes out the string to the underlying output stream as a
 sequence of bytes. Each character in the string is written out, in
 sequence, by discarding its high eight bits. If no exception is
 thrown, the counter written is incremented by the
 length of s.

Specified by:
writeBytes in interface DataOutput
Parameters:
s - a string of bytes to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeChar(int v),void,"Writes a char to the underlying output stream as a 2-byte value, high byte first.","

writeChar
public final void writeChar(int v)
                     throws IOException
Writes a char to the underlying output stream as a
 2-byte value, high byte first. If no exception is thrown, the
 counter written is incremented by 2.

Specified by:
writeChar in interface DataOutput
Parameters:
v - a char value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeChars(String s),void,Writes a string to the underlying output stream as a sequence of characters.,"

writeChars
public final void writeChars(String s)
                      throws IOException
Writes a string to the underlying output stream as a sequence of
 characters. Each character is written to the data output stream as
 if by the writeChar method. If no exception is
 thrown, the counter written is incremented by twice
 the length of s.

Specified by:
writeChars in interface DataOutput
Parameters:
s - a String value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
writeChar(int), 
FilterOutputStream.out


"
DataOutputStream,writeDouble(double v),void,"Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the underlying output stream as an 8-byte quantity, high byte first.","

writeDouble
public final void writeDouble(double v)
                       throws IOException
Converts the double argument to a long using the
 doubleToLongBits method in class Double,
 and then writes that long value to the underlying
 output stream as an 8-byte quantity, high byte first. If no
 exception is thrown, the counter written is
 incremented by 8.

Specified by:
writeDouble in interface DataOutput
Parameters:
v - a double value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out, 
Double.doubleToLongBits(double)


"
DataOutputStream,writeFloat(float v),void,"Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the underlying output stream as a 4-byte quantity, high byte first.","

writeFloat
public final void writeFloat(float v)
                      throws IOException
Converts the float argument to an int using the
 floatToIntBits method in class Float,
 and then writes that int value to the underlying
 output stream as a 4-byte quantity, high byte first. If no
 exception is thrown, the counter written is
 incremented by 4.

Specified by:
writeFloat in interface DataOutput
Parameters:
v - a float value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out, 
Float.floatToIntBits(float)


"
DataOutputStream,writeInt(int v),void,"Writes an int to the underlying output stream as four bytes, high byte first.","

writeInt
public final void writeInt(int v)
                    throws IOException
Writes an int to the underlying output stream as four
 bytes, high byte first. If no exception is thrown, the counter
 written is incremented by 4.

Specified by:
writeInt in interface DataOutput
Parameters:
v - an int to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeLong(long v),void,"Writes a long to the underlying output stream as eight bytes, high byte first.","

writeLong
public final void writeLong(long v)
                     throws IOException
Writes a long to the underlying output stream as eight
 bytes, high byte first. In no exception is thrown, the counter
 written is incremented by 8.

Specified by:
writeLong in interface DataOutput
Parameters:
v - a long to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeShort(int v),void,"Writes a short to the underlying output stream as two bytes, high byte first.","

writeShort
public final void writeShort(int v)
                      throws IOException
Writes a short to the underlying output stream as two
 bytes, high byte first. If no exception is thrown, the counter
 written is incremented by 2.

Specified by:
writeShort in interface DataOutput
Parameters:
v - a short to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
DataOutputStream,writeUTF(String str),void,Writes a string to the underlying output stream using modified UTF-8 encoding in a machine-independent manner.,"

writeUTF
public final void writeUTF(String str)
                    throws IOException
Writes a string to the underlying output stream using
 modified UTF-8
 encoding in a machine-independent manner.
 
 First, two bytes are written to the output stream as if by the
 writeShort method giving the number of bytes to
 follow. This value is the number of bytes actually written out,
 not the length of the string. Following the length, each character
 of the string is output, in sequence, using the modified UTF-8 encoding
 for the character. If no exception is thrown, the counter
 written is incremented by the total number of
 bytes written to the output stream. This will be at least two
 plus the length of str, and at most two plus
 thrice the length of str.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - a string to be written.
Throws:
IOException - if an I/O error occurs.


"
File,canExecute(),boolean,Tests whether the application can execute the file denoted by this abstract pathname.,"

canExecute
public boolean canExecute()
Tests whether the application can execute the file denoted by this
 abstract pathname. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to execute
 files that are not marked executable. Consequently this method may return
 true even though the file does not have execute permissions.

Returns:
true if and only if the abstract pathname exists
          and the application is allowed to execute the file
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkExec(java.lang.String)
          method denies execute access to the file
Since:
1.6


"
File,canRead(),boolean,Tests whether the application can read the file denoted by this abstract pathname.,"

canRead
public boolean canRead()
Tests whether the application can read the file denoted by this
 abstract pathname. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to read
 files that are marked as unreadable. Consequently this method may return
 true even though the file does not have read permissions.

Returns:
true if and only if the file specified by this
          abstract pathname exists and can be read by the
          application; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
File,canWrite(),boolean,Tests whether the application can modify the file denoted by this abstract pathname.,"

canWrite
public boolean canWrite()
Tests whether the application can modify the file denoted by this
 abstract pathname. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to modify
 files that are marked read-only. Consequently this method may return
 true even though the file is marked read-only.

Returns:
true if and only if the file system actually
          contains a file denoted by this abstract pathname and
          the application is allowed to write to the file;
          false otherwise.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file


"
File,compareTo(File pathname),int,Compares two abstract pathnames lexicographically.,"

compareTo
public int compareTo(File pathname)
Compares two abstract pathnames lexicographically.  The ordering
 defined by this method depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not.

Specified by:
compareTo in interface Comparable<File>
Parameters:
pathname - The abstract pathname to be compared to this abstract
                    pathname
Returns:
Zero if the argument is equal to this abstract pathname, a
          value less than zero if this abstract pathname is
          lexicographically less than the argument, or a value greater
          than zero if this abstract pathname is lexicographically
          greater than the argument
Since:
1.2


"
File,createNewFile(),boolean,"Atomically creates a new, empty file named by this abstract pathname if and only if a file with this name does not yet exist.","

createNewFile
public boolean createNewFile()
                      throws IOException
Atomically creates a new, empty file named by this abstract pathname if
 and only if a file with this name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.
 
 Note: this method should not be used for file-locking, as
 the resulting protocol cannot be made to work reliably. The
 FileLock
 facility should be used instead.

Returns:
true if the named file does not exist and was
          successfully created; false if the named file
          already exists
Throws:
IOException - If an I/O error occurred
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.2


"
File,"createTempFile(String prefix, String suffix)",static File,"Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name.","

createTempFile
public static File createTempFile(String prefix,
                                  String suffix)
                           throws IOException
Creates an empty file in the default temporary-file directory, using
 the given prefix and suffix to generate its name. Invoking this method
 is equivalent to invoking createTempFile(prefix, suffix, null).

  The Files.createTempFile method provides an alternative method to create an
 empty file in the temporary-file directory. Files created by that method
 may have more restrictive access permissions to files created by this
 method and so may be more suited to security-sensitive applications.

Parameters:
prefix - The prefix string to be used in generating the file's
                    name; must be at least three characters long
suffix - The suffix string to be used in generating the file's
                    name; may be null, in which case the
                    suffix "".tmp"" will be used
Returns:
An abstract pathname denoting a newly-created empty file
Throws:
IllegalArgumentException - If the prefix argument contains fewer than three
          characters
IOException - If a file could not be created
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not allow a file to be created
Since:
1.2
See Also:
Files.createTempDirectory(String,FileAttribute[])


"
File,"createTempFile(String prefix, String suffix, File directory)",static File,"Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name.","

createTempFile
public static File createTempFile(String prefix,
                                  String suffix,
                                  File directory)
                           throws IOException
 Creates a new empty file in the specified directory, using the
 given prefix and suffix strings to generate its name.  If this method
 returns successfully then it is guaranteed that:

 
 The file denoted by the returned abstract pathname did not exist
      before this method was invoked, and
  Neither this method nor any of its variants will return the same
      abstract pathname again in the current invocation of the virtual
      machine.
 

 This method provides only part of a temporary-file facility.  To arrange
 for a file created by this method to be deleted automatically, use the
 deleteOnExit() method.

  The prefix argument must be at least three characters
 long.  It is recommended that the prefix be a short, meaningful string
 such as ""hjb"" or ""mail"".  The
 suffix argument may be null, in which case the
 suffix "".tmp"" will be used.

  To create the new file, the prefix and the suffix may first be
 adjusted to fit the limitations of the underlying platform.  If the
 prefix is too long then it will be truncated, but its first three
 characters will always be preserved.  If the suffix is too long then it
 too will be truncated, but if it begins with a period character
 ('.') then the period and the first three characters
 following it will always be preserved.  Once these adjustments have been
 made the name of the new file will be generated by concatenating the
 prefix, five or more internally-generated characters, and the suffix.

  If the directory argument is null then the
 system-dependent default temporary-file directory will be used.  The
 default temporary-file directory is specified by the system property
 java.io.tmpdir.  On UNIX systems the default value of this
 property is typically ""/tmp"" or ""/var/tmp""; on
 Microsoft Windows systems it is typically ""C:\\WINNT\\TEMP"".  A different
 value may be given to this system property when the Java virtual machine
 is invoked, but programmatic changes to this property are not guaranteed
 to have any effect upon the temporary directory used by this method.

Parameters:
prefix - The prefix string to be used in generating the file's
                    name; must be at least three characters long
suffix - The suffix string to be used in generating the file's
                    name; may be null, in which case the
                    suffix "".tmp"" will be used
directory - The directory in which the file is to be created, or
                    null if the default temporary-file
                    directory is to be used
Returns:
An abstract pathname denoting a newly-created empty file
Throws:
IllegalArgumentException - If the prefix argument contains fewer than three
          characters
IOException - If a file could not be created
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not allow a file to be created
Since:
1.2


"
File,delete(),boolean,Deletes the file or directory denoted by this abstract pathname.,"

delete
public boolean delete()
Deletes the file or directory denoted by this abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

  Note that the Files class defines the delete method to throw an IOException
 when a file cannot be deleted. This is useful for error reporting and to
 diagnose why a file cannot be deleted.

Returns:
true if and only if the file or directory is
          successfully deleted; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file


"
File,deleteOnExit(),void,Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates.,"

deleteOnExit
public void deleteOnExit()
Requests that the file or directory denoted by this abstract
 pathname be deleted when the virtual machine terminates.
 Files (or directories) are deleted in the reverse order that
 they are registered. Invoking this method to delete a file or
 directory that is already registered for deletion has no effect.
 Deletion will be attempted only for normal termination of the
 virtual machine, as defined by the Java Language Specification.

  Once deletion has been requested, it is not possible to cancel the
 request.  This method should therefore be used with care.

 
 Note: this method should not be used for file-locking, as
 the resulting protocol cannot be made to work reliably. The
 FileLock
 facility should be used instead.

Throws:
SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file
Since:
1.2
See Also:
delete()


"
File,equals(Object obj),boolean,Tests this abstract pathname for equality with the given object.,"

equals
public boolean equals(Object obj)
Tests this abstract pathname for equality with the given object.
 Returns true if and only if the argument is not
 null and is an abstract pathname that denotes the same file
 or directory as this abstract pathname.  Whether or not two abstract
 pathnames are equal depends upon the underlying system.  On UNIX
 systems, alphabetic case is significant in comparing pathnames; on Microsoft Windows
 systems it is not.

Overrides:
equals in class Object
Parameters:
obj - The object to be compared with this abstract pathname
Returns:
true if and only if the objects are the same;
          false otherwise
See Also:
Object.hashCode(), 
HashMap


"
File,exists(),boolean,Tests whether the file or directory denoted by this abstract pathname exists.,"

exists
public boolean exists()
Tests whether the file or directory denoted by this abstract pathname
 exists.

Returns:
true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file or directory


"
File,getAbsoluteFile(),File,Returns the absolute form of this abstract pathname.,"

getAbsoluteFile
public File getAbsoluteFile()
Returns the absolute form of this abstract pathname.  Equivalent to
 new File(this.getAbsolutePath()).

Returns:
The absolute abstract pathname denoting the same file or
          directory as this abstract pathname
Throws:
SecurityException - If a required system property value cannot be accessed.
Since:
1.2


"
File,getAbsolutePath(),String,Returns the absolute pathname string of this abstract pathname.,"

getAbsolutePath
public String getAbsolutePath()
Returns the absolute pathname string of this abstract pathname.

  If this abstract pathname is already absolute, then the pathname
 string is simply returned as if by the getPath()
 method.  If this abstract pathname is the empty abstract pathname then
 the pathname string of the current user directory, which is named by the
 system property user.dir, is returned.  Otherwise this
 pathname is resolved in a system-dependent way.  On UNIX systems, a
 relative pathname is made absolute by resolving it against the current
 user directory.  On Microsoft Windows systems, a relative pathname is made absolute
 by resolving it against the current directory of the drive named by the
 pathname, if any; if not, it is resolved against the current user
 directory.

Returns:
The absolute pathname string denoting the same file or
          directory as this abstract pathname
Throws:
SecurityException - If a required system property value cannot be accessed.
See Also:
isAbsolute()


"
File,getCanonicalFile(),File,Returns the canonical form of this abstract pathname.,"

getCanonicalFile
public File getCanonicalFile()
                      throws IOException
Returns the canonical form of this abstract pathname.  Equivalent to
 new File(this.getCanonicalPath()).

Returns:
The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
IOException - If an I/O error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries
SecurityException - If a required system property value cannot be accessed, or
          if a security manager exists and its SecurityManager.checkRead(java.io.FileDescriptor) method denies
          read access to the file
Since:
1.2
See Also:
Path.toRealPath(java.nio.file.LinkOption...)


"
File,getCanonicalPath(),String,Returns the canonical pathname string of this abstract pathname.,"

getCanonicalPath
public String getCanonicalPath()
                        throws IOException
Returns the canonical pathname string of this abstract pathname.

  A canonical pathname is both absolute and unique.  The precise
 definition of canonical form is system-dependent.  This method first
 converts this pathname to absolute form if necessary, as if by invoking the
 getAbsolutePath() method, and then maps it to its unique form in a
 system-dependent way.  This typically involves removing redundant names
 such as ""."" and "".."" from the pathname, resolving
 symbolic links (on UNIX platforms), and converting drive letters to a
 standard case (on Microsoft Windows platforms).

  Every pathname that denotes an existing file or directory has a
 unique canonical form.  Every pathname that denotes a nonexistent file
 or directory also has a unique canonical form.  The canonical form of
 the pathname of a nonexistent file or directory may be different from
 the canonical form of the same pathname after the file or directory is
 created.  Similarly, the canonical form of the pathname of an existing
 file or directory may be different from the canonical form of the same
 pathname after the file or directory is deleted.

Returns:
The canonical pathname string denoting the same file or
          directory as this abstract pathname
Throws:
IOException - If an I/O error occurs, which is possible because the
          construction of the canonical pathname may require
          filesystem queries
SecurityException - If a required system property value cannot be accessed, or
          if a security manager exists and its SecurityManager.checkRead(java.io.FileDescriptor) method denies
          read access to the file
Since:
JDK1.1
See Also:
Path.toRealPath(java.nio.file.LinkOption...)


"
File,getFreeSpace(),long,Returns the number of unallocated bytes in the partition named by this abstract path name.,"

getFreeSpace
public long getFreeSpace()
Returns the number of unallocated bytes in the partition named by this abstract path name.

  The returned number of unallocated bytes is a hint, but not
 a guarantee, that it is possible to use most or any of these
 bytes.  The number of unallocated bytes is most likely to be
 accurate immediately after this call.  It is likely to be made
 inaccurate by any external I/O operations including those made
 on the system outside of this virtual machine.  This method
 makes no guarantee that write operations to this file system
 will succeed.

Returns:
The number of unallocated bytes on the partition or 0L
          if the abstract pathname does not name a partition.  This
          value will be less than or equal to the total file system size
          returned by getTotalSpace().
Throws:
SecurityException - If a security manager has been installed and it denies
          RuntimePermission(""getFileSystemAttributes"")
          or its SecurityManager.checkRead(String) method denies
          read access to the file named by this abstract pathname
Since:
1.6


"
File,getName(),String,Returns the name of the file or directory denoted by this abstract pathname.,"

getName
public String getName()
Returns the name of the file or directory denoted by this abstract
 pathname.  This is just the last name in the pathname's name
 sequence.  If the pathname's name sequence is empty, then the empty
 string is returned.

Returns:
The name of the file or directory denoted by this abstract
          pathname, or the empty string if this pathname's name sequence
          is empty


"
File,getParent(),String,"Returns the pathname string of this abstract pathname's parent, or null if this pathname does not name a parent directory.","

getParent
public String getParent()
Returns the pathname string of this abstract pathname's parent, or
 null if this pathname does not name a parent directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.

Returns:
The pathname string of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parent


"
File,getParentFile(),File,"Returns the abstract pathname of this abstract pathname's parent, or null if this pathname does not name a parent directory.","

getParentFile
public File getParentFile()
Returns the abstract pathname of this abstract pathname's parent,
 or null if this pathname does not name a parent
 directory.

  The parent of an abstract pathname consists of the
 pathname's prefix, if any, and each name in the pathname's name
 sequence except for the last.  If the name sequence is empty then
 the pathname does not name a parent directory.

Returns:
The abstract pathname of the parent directory named by this
          abstract pathname, or null if this pathname
          does not name a parent
Since:
1.2


"
File,getPath(),String,Converts this abstract pathname into a pathname string.,"

getPath
public String getPath()
Converts this abstract pathname into a pathname string.  The resulting
 string uses the default name-separator character to
 separate the names in the name sequence.

Returns:
The string form of this abstract pathname


"
File,getTotalSpace(),long,Returns the size of the partition named by this abstract pathname.,"

getTotalSpace
public long getTotalSpace()
Returns the size of the partition named by this
 abstract pathname.

Returns:
The size, in bytes, of the partition or 0L if this
          abstract pathname does not name a partition
Throws:
SecurityException - If a security manager has been installed and it denies
          RuntimePermission(""getFileSystemAttributes"")
          or its SecurityManager.checkRead(String) method denies
          read access to the file named by this abstract pathname
Since:
1.6


"
File,getUsableSpace(),long,Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname.,"

getUsableSpace
public long getUsableSpace()
Returns the number of bytes available to this virtual machine on the
 partition named by this abstract pathname.  When
 possible, this method checks for write permissions and other operating
 system restrictions and will therefore usually provide a more accurate
 estimate of how much new data can actually be written than getFreeSpace().

  The returned number of available bytes is a hint, but not a
 guarantee, that it is possible to use most or any of these bytes.  The
 number of unallocated bytes is most likely to be accurate immediately
 after this call.  It is likely to be made inaccurate by any external
 I/O operations including those made on the system outside of this
 virtual machine.  This method makes no guarantee that write operations
 to this file system will succeed.

Returns:
The number of available bytes on the partition or 0L
          if the abstract pathname does not name a partition.  On
          systems where this information is not available, this method
          will be equivalent to a call to getFreeSpace().
Throws:
SecurityException - If a security manager has been installed and it denies
          RuntimePermission(""getFileSystemAttributes"")
          or its SecurityManager.checkRead(String) method denies
          read access to the file named by this abstract pathname
Since:
1.6


"
File,hashCode(),int,Computes a hash code for this abstract pathname.,"

hashCode
public int hashCode()
Computes a hash code for this abstract pathname.  Because equality of
 abstract pathnames is inherently system-dependent, so is the computation
 of their hash codes.  On UNIX systems, the hash code of an abstract
 pathname is equal to the exclusive or of the hash code
 of its pathname string and the decimal value
 1234321.  On Microsoft Windows systems, the hash
 code is equal to the exclusive or of the hash code of
 its pathname string converted to lower case and the decimal
 value 1234321.  Locale is not taken into account on
 lowercasing the pathname string.

Overrides:
hashCode in class Object
Returns:
A hash code for this abstract pathname
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
File,isAbsolute(),boolean,Tests whether this abstract pathname is absolute.,"

isAbsolute
public boolean isAbsolute()
Tests whether this abstract pathname is absolute.  The definition of
 absolute pathname is system dependent.  On UNIX systems, a pathname is
 absolute if its prefix is ""/"".  On Microsoft Windows systems, a
 pathname is absolute if its prefix is a drive specifier followed by
 ""\\"", or if its prefix is ""\\\\"".

Returns:
true if this abstract pathname is absolute,
          false otherwise


"
File,isDirectory(),boolean,Tests whether the file denoted by this abstract pathname is a directory.,"

isDirectory
public boolean isDirectory()
Tests whether the file denoted by this abstract pathname is a
 directory.

  Where it is required to distinguish an I/O exception from the case
 that the file is not a directory, or where several attributes of the
 same file are required at the same time, then the Files.readAttributes method may be used.

Returns:
true if and only if the file denoted by this
          abstract pathname exists and is a directory;
          false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
File,isFile(),boolean,Tests whether the file denoted by this abstract pathname is a normal file.,"

isFile
public boolean isFile()
Tests whether the file denoted by this abstract pathname is a normal
 file.  A file is normal if it is not a directory and, in
 addition, satisfies other system-dependent criteria.  Any non-directory
 file created by a Java application is guaranteed to be a normal file.

  Where it is required to distinguish an I/O exception from the case
 that the file is not a normal file, or where several attributes of the
 same file are required at the same time, then the Files.readAttributes method may be used.

Returns:
true if and only if the file denoted by this
          abstract pathname exists and is a normal file;
          false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
File,isHidden(),boolean,Tests whether the file named by this abstract pathname is a hidden file.,"

isHidden
public boolean isHidden()
Tests whether the file named by this abstract pathname is a hidden
 file.  The exact definition of hidden is system-dependent.  On
 UNIX systems, a file is considered to be hidden if its name begins with
 a period character ('.').  On Microsoft Windows systems, a file is
 considered to be hidden if it has been marked as such in the filesystem.

Returns:
true if and only if the file denoted by this
          abstract pathname is hidden according to the conventions of the
          underlying platform
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file
Since:
1.2


"
File,lastModified(),long,Returns the time that the file denoted by this abstract pathname was last modified.,"

lastModified
public long lastModified()
Returns the time that the file denoted by this abstract pathname was
 last modified.

  Where it is required to distinguish an I/O exception from the case
 where 0L is returned, or where several attributes of the
 same file are required at the same time, or where the time of last
 access or the creation time are required, then the Files.readAttributes method may be used.

Returns:
A long value representing the time the file was
          last modified, measured in milliseconds since the epoch
          (00:00:00 GMT, January 1, 1970), or 0L if the
          file does not exist or if an I/O error occurs
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
File,length(),long,Returns the length of the file denoted by this abstract pathname.,"

length
public long length()
Returns the length of the file denoted by this abstract pathname.
 The return value is unspecified if this pathname denotes a directory.

  Where it is required to distinguish an I/O exception from the case
 that 0L is returned, or where several attributes of the same file
 are required at the same time, then the Files.readAttributes method may be used.

Returns:
The length, in bytes, of the file denoted by this abstract
          pathname, or 0L if the file does not exist.  Some
          operating systems may return 0L for pathnames
          denoting system-dependent entities such as devices or pipes.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file


"
File,list(),String[],Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname.,"

list
public String[] list()
Returns an array of strings naming the files and directories in the
 directory denoted by this abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of strings is
 returned, one for each file or directory in the directory.  Names
 denoting the directory itself and the directory's parent directory are
 not included in the result.  Each string is a file name rather than a
 complete path.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

  Note that the Files class defines the newDirectoryStream method to
 open a directory and iterate over the names of the files in the directory.
 This may use less resources when working with very large directories, and
 may be more responsive when working with remote directories.

Returns:
An array of strings naming the files and directories in the
          directory denoted by this abstract pathname.  The array will be
          empty if the directory is empty.  Returns null if
          this abstract pathname does not denote a directory, or if an
          I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory


"
File,list(FilenameFilter filter),String[],Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.,"

list
public String[] list(FilenameFilter filter)
Returns an array of strings naming the files and directories in the
 directory denoted by this abstract pathname that satisfy the specified
 filter.  The behavior of this method is the same as that of the
 list() method, except that the strings in the returned array
 must satisfy the filter.  If the given filter is null
 then all names are accepted.  Otherwise, a name satisfies the filter if
 and only if the value true results when the FilenameFilter.accept(File, String) method
 of the filter is invoked on this abstract pathname and the name of a
 file or directory in the directory that it denotes.

Parameters:
filter - A filename filter
Returns:
An array of strings naming the files and directories in the
          directory denoted by this abstract pathname that were accepted
          by the given filter.  The array will be empty if the
          directory is empty or if no names were accepted by the filter.
          Returns null if this abstract pathname does not denote
          a directory, or if an I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory
See Also:
Files.newDirectoryStream(Path,String)


"
File,listFiles(),File[],Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname.,"

listFiles
public File[] listFiles()
Returns an array of abstract pathnames denoting the files in the
 directory denoted by this abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of File objects
 is returned, one for each file or directory in the directory.  Pathnames
 denoting the directory itself and the directory's parent directory are
 not included in the result.  Each resulting abstract pathname is
 constructed from this abstract pathname using the File(File, String) constructor.  Therefore if this
 pathname is absolute then each resulting pathname is absolute; if this
 pathname is relative then each resulting pathname will be relative to
 the same directory.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

  Note that the Files class defines the newDirectoryStream method
 to open a directory and iterate over the names of the files in the
 directory. This may use less resources when working with very large
 directories.

Returns:
An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract pathname.
          The array will be empty if the directory is empty.  Returns
          null if this abstract pathname does not denote a
          directory, or if an I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory
Since:
1.2


"
File,listFiles(FileFilter filter),File[],Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.,"

listFiles
public File[] listFiles(FileFilter filter)
Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.  The behavior of this method is the same
 as that of the listFiles() method, except that the pathnames in
 the returned array must satisfy the filter.  If the given filter
 is null then all pathnames are accepted.  Otherwise, a pathname
 satisfies the filter if and only if the value true results when
 the FileFilter.accept(File) method of the
 filter is invoked on the pathname.

Parameters:
filter - A file filter
Returns:
An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract pathname.
          The array will be empty if the directory is empty.  Returns
          null if this abstract pathname does not denote a
          directory, or if an I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory
Since:
1.2
See Also:
Files.newDirectoryStream(Path,java.nio.file.DirectoryStream.Filter)


"
File,listFiles(FilenameFilter filter),File[],Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter.,"

listFiles
public File[] listFiles(FilenameFilter filter)
Returns an array of abstract pathnames denoting the files and
 directories in the directory denoted by this abstract pathname that
 satisfy the specified filter.  The behavior of this method is the same
 as that of the listFiles() method, except that the pathnames in
 the returned array must satisfy the filter.  If the given filter
 is null then all pathnames are accepted.  Otherwise, a pathname
 satisfies the filter if and only if the value true results when
 the FilenameFilter.accept(File, String) method of the filter is
 invoked on this abstract pathname and the name of a file or directory in
 the directory that it denotes.

Parameters:
filter - A filename filter
Returns:
An array of abstract pathnames denoting the files and
          directories in the directory denoted by this abstract pathname.
          The array will be empty if the directory is empty.  Returns
          null if this abstract pathname does not denote a
          directory, or if an I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory
Since:
1.2
See Also:
Files.newDirectoryStream(Path,String)


"
File,listRoots(),static File[],List the available filesystem roots.,"

listRoots
public static File[] listRoots()
List the available filesystem roots.

  A particular Java platform may support zero or more
 hierarchically-organized file systems.  Each file system has a
 root directory from which all other files in that file system
 can be reached.  Windows platforms, for example, have a root directory
 for each active drive; UNIX platforms have a single root directory,
 namely ""/"".  The set of available filesystem roots is affected
 by various system-level operations such as the insertion or ejection of
 removable media and the disconnecting or unmounting of physical or
 virtual disk drives.

  This method returns an array of File objects that denote the
 root directories of the available filesystem roots.  It is guaranteed
 that the canonical pathname of any file physically present on the local
 machine will begin with one of the roots returned by this method.

  The canonical pathname of a file that resides on some other machine
 and is accessed via a remote-filesystem protocol such as SMB or NFS may
 or may not begin with one of the roots returned by this method.  If the
 pathname of a remote file is syntactically indistinguishable from the
 pathname of a local file then it will begin with one of the roots
 returned by this method.  Thus, for example, File objects
 denoting the root directories of the mapped network drives of a Windows
 platform will be returned by this method, while File objects
 containing UNC pathnames will not be returned by this method.

  Unlike most methods in this class, this method does not throw
 security exceptions.  If a security manager exists and its SecurityManager.checkRead(String) method denies read access to a
 particular root directory, then that directory will not appear in the
 result.

Returns:
An array of File objects denoting the available
          filesystem roots, or null if the set of roots could not
          be determined.  The array will be empty if there are no
          filesystem roots.
Since:
1.2
See Also:
FileStore


"
File,mkdir(),boolean,Creates the directory named by this abstract pathname.,"

mkdir
public boolean mkdir()
Creates the directory named by this abstract pathname.

Returns:
true if and only if the directory was
          created; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory to be created


"
File,mkdirs(),boolean,"Creates the directory named by this abstract pathname, including any necessary but nonexistent parent directories.","

mkdirs
public boolean mkdirs()
Creates the directory named by this abstract pathname, including any
 necessary but nonexistent parent directories.  Note that if this
 operation fails it may have succeeded in creating some of the necessary
 parent directories.

Returns:
true if and only if the directory was created,
          along with all necessary parent directories; false
          otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method does not permit verification of the existence of the
          named directory and all necessary parent directories; or if
          the SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory and all necessary
          parent directories to be created


"
File,renameTo(File dest),boolean,Renames the file denoted by this abstract pathname.,"

renameTo
public boolean renameTo(File dest)
Renames the file denoted by this abstract pathname.

  Many aspects of the behavior of this method are inherently
 platform-dependent: The rename operation might not be able to move a
 file from one filesystem to another, it might not be atomic, and it
 might not succeed if a file with the destination abstract pathname
 already exists.  The return value should always be checked to make sure
 that the rename operation was successful.

  Note that the Files class defines the move method to move or rename a file in a
 platform independent manner.

Parameters:
dest - The new abstract pathname for the named file
Returns:
true if and only if the renaming succeeded;
          false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to either the old or new pathnames
NullPointerException - If parameter dest is null


"
File,setExecutable(boolean executable),boolean,A convenience method to set the owner's execute permission for this abstract pathname.,"

setExecutable
public boolean setExecutable(boolean executable)
A convenience method to set the owner's execute permission for this
 abstract pathname. On some platforms it may be possible to start the Java
 virtual machine with special privileges that allow it to execute files
 that are not marked executable.

 An invocation of this method of the form file.setExcutable(arg)
 behaves in exactly the same way as the invocation

 
     file.setExecutable(arg, true) 

Parameters:
executable - If true, sets the access permission to allow execute
          operations; if false to disallow execute operations
Returns:
true if and only if the operation succeeded.  The
           operation will fail if the user does not have permission to
           change the access permissions of this abstract pathname.  If
           executable is false and the underlying
           file system does not implement an execute permission, then the
           operation will fail.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.6


"
File,"setExecutable(boolean executable, boolean ownerOnly)",boolean,Sets the owner's or everybody's execute permission for this abstract pathname.,"

setExecutable
public boolean setExecutable(boolean executable,
                             boolean ownerOnly)
Sets the owner's or everybody's execute permission for this abstract
 pathname. On some platforms it may be possible to start the Java virtual
 machine with special privileges that allow it to execute files that are
 not marked executable.

  The Files class defines methods that operate on
 file attributes including file permissions. This may be used when finer
 manipulation of file permissions is required.

Parameters:
executable - If true, sets the access permission to allow execute
          operations; if false to disallow execute operations
ownerOnly - If true, the execute permission applies only to the
          owner's execute permission; otherwise, it applies to everybody.
          If the underlying file system can not distinguish the owner's
          execute permission from that of others, then the permission will
          apply to everybody, regardless of this value.
Returns:
true if and only if the operation succeeded.  The
          operation will fail if the user does not have permission to
          change the access permissions of this abstract pathname.  If
          executable is false and the underlying
          file system does not implement an execute permission, then the
          operation will fail.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.6


"
File,setLastModified(long time),boolean,Sets the last-modified time of the file or directory named by this abstract pathname.,"

setLastModified
public boolean setLastModified(long time)
Sets the last-modified time of the file or directory named by this
 abstract pathname.

  All platforms support file-modification times to the nearest second,
 but some provide more precision.  The argument will be truncated to fit
 the supported precision.  If the operation succeeds and no intervening
 operations on the file take place, then the next invocation of the
 lastModified() method will return the (possibly
 truncated) time argument that was passed to this method.

Parameters:
time - The new last-modified time, measured in milliseconds since
               the epoch (00:00:00 GMT, January 1, 1970)
Returns:
true if and only if the operation succeeded;
          false otherwise
Throws:
IllegalArgumentException - If the argument is negative
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the named file
Since:
1.2


"
File,setReadable(boolean readable),boolean,A convenience method to set the owner's read permission for this abstract pathname.,"

setReadable
public boolean setReadable(boolean readable)
A convenience method to set the owner's read permission for this abstract
 pathname. On some platforms it may be possible to start the Java virtual
 machine with special privileges that allow it to read files that that are
 marked as unreadable.

 An invocation of this method of the form file.setReadable(arg)
 behaves in exactly the same way as the invocation

 
     file.setReadable(arg, true) 

Parameters:
readable - If true, sets the access permission to allow read
          operations; if false to disallow read operations
Returns:
true if and only if the operation succeeded.  The
          operation will fail if the user does not have permission to
          change the access permissions of this abstract pathname.  If
          readable is false and the underlying
          file system does not implement a read permission, then the
          operation will fail.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.6


"
File,"setReadable(boolean readable, boolean ownerOnly)",boolean,Sets the owner's or everybody's read permission for this abstract pathname.,"

setReadable
public boolean setReadable(boolean readable,
                           boolean ownerOnly)
Sets the owner's or everybody's read permission for this abstract
 pathname. On some platforms it may be possible to start the Java virtual
 machine with special privileges that allow it to read files that are
 marked as unreadable.

  The Files class defines methods that operate on
 file attributes including file permissions. This may be used when finer
 manipulation of file permissions is required.

Parameters:
readable - If true, sets the access permission to allow read
          operations; if false to disallow read operations
ownerOnly - If true, the read permission applies only to the
          owner's read permission; otherwise, it applies to everybody.  If
          the underlying file system can not distinguish the owner's read
          permission from that of others, then the permission will apply to
          everybody, regardless of this value.
Returns:
true if and only if the operation succeeded.  The
          operation will fail if the user does not have permission to
          change the access permissions of this abstract pathname.  If
          readable is false and the underlying
          file system does not implement a read permission, then the
          operation will fail.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.6


"
File,setReadOnly(),boolean,Marks the file or directory named by this abstract pathname so that only read operations are allowed.,"

setReadOnly
public boolean setReadOnly()
Marks the file or directory named by this abstract pathname so that
 only read operations are allowed. After invoking this method the file
 or directory will not change until it is either deleted or marked
 to allow write access. On some platforms it may be possible to start the
 Java virtual machine with special privileges that allow it to modify
 files that are marked read-only. Whether or not a read-only file or
 directory may be deleted depends upon the underlying system.

Returns:
true if and only if the operation succeeded;
          false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the named file
Since:
1.2


"
File,setWritable(boolean writable),boolean,A convenience method to set the owner's write permission for this abstract pathname.,"

setWritable
public boolean setWritable(boolean writable)
A convenience method to set the owner's write permission for this abstract
 pathname. On some platforms it may be possible to start the Java virtual
 machine with special privileges that allow it to modify files that
 disallow write operations.

  An invocation of this method of the form file.setWritable(arg)
 behaves in exactly the same way as the invocation

 
     file.setWritable(arg, true) 

Parameters:
writable - If true, sets the access permission to allow write
          operations; if false to disallow write operations
Returns:
true if and only if the operation succeeded.  The
          operation will fail if the user does not have permission to
          change the access permissions of this abstract pathname.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.6


"
File,"setWritable(boolean writable, boolean ownerOnly)",boolean,Sets the owner's or everybody's write permission for this abstract pathname.,"

setWritable
public boolean setWritable(boolean writable,
                           boolean ownerOnly)
Sets the owner's or everybody's write permission for this abstract
 pathname. On some platforms it may be possible to start the Java virtual
 machine with special privileges that allow it to modify files that
 disallow write operations.

  The Files class defines methods that operate on
 file attributes including file permissions. This may be used when finer
 manipulation of file permissions is required.

Parameters:
writable - If true, sets the access permission to allow write
          operations; if false to disallow write operations
ownerOnly - If true, the write permission applies only to the
          owner's write permission; otherwise, it applies to everybody.  If
          the underlying file system can not distinguish the owner's write
          permission from that of others, then the permission will apply to
          everybody, regardless of this value.
Returns:
true if and only if the operation succeeded. The
          operation will fail if the user does not have permission to change
          the access permissions of this abstract pathname.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the named file
Since:
1.6


"
File,toPath(),Path,Returns a java.nio.file.Path object constructed from the this abstract path.,"

toPath
public Path toPath()
Returns a java.nio.file.Path object constructed from the
 this abstract path. The resulting Path is associated with the
 default-filesystem.

  The first invocation of this method works as if invoking it were
 equivalent to evaluating the expression:
 
 FileSystems.getDefault().getPath(this.getPath());
 
 Subsequent invocations of this method return the same Path.

  If this abstract pathname is the empty abstract pathname then this
 method returns a Path that may be used to access the current
 user directory.

Returns:
a Path constructed from this abstract path
Throws:
InvalidPathException - if a Path object cannot be constructed from the abstract
          path (see FileSystem.getPath)
Since:
1.7
See Also:
Path.toFile()


"
File,toString(),String,Returns the pathname string of this abstract pathname.,"

toString
public String toString()
Returns the pathname string of this abstract pathname.  This is just the
 string returned by the getPath() method.

Overrides:
toString in class Object
Returns:
The string form of this abstract pathname


"
File,toURI(),URI,Constructs a file: URI that represents this abstract pathname.,"

toURI
public URI toURI()
Constructs a file: URI that represents this abstract pathname.

  The exact form of the URI is system-dependent.  If it can be
 determined that the file denoted by this abstract pathname is a
 directory, then the resulting URI will end with a slash.

  For a given abstract pathname f, it is guaranteed that

 
 new File( f.toURI()).equals( f.getAbsoluteFile())
 

 so long as the original abstract pathname, the URI, and the new abstract
 pathname are all created in (possibly different invocations of) the same
 Java virtual machine.  Due to the system-dependent nature of abstract
 pathnames, however, this relationship typically does not hold when a
 file: URI that is created in a virtual machine on one operating
 system is converted into an abstract pathname in a virtual machine on a
 different operating system.

  Note that when this abstract pathname represents a UNC pathname then
 all components of the UNC (including the server name component) are encoded
 in the URI path. The authority component is undefined, meaning
 that it is represented as null. The Path class defines the
 toUri method to encode the server name in the authority
 component of the resulting URI. The toPath method
 may be used to obtain a Path representing this abstract pathname.

Returns:
An absolute, hierarchical URI with a scheme equal to
          ""file"", a path representing this abstract pathname,
          and undefined authority, query, and fragment components
Throws:
SecurityException - If a required system property value cannot
 be accessed.
Since:
1.4
See Also:
File(java.net.URI), 
URI, 
URI.toURL()


"
File,toURL(),URL,"Deprecated. This method does not automatically escape characters that are illegal in URLs. It is recommended that new code convert an abstract pathname into a URL by first converting it into a URI, via the toURI method, and then converting the URI into a URL via the URI.toURL method.","

toURL
@Deprecated
public URL toURL()
                      throws MalformedURLException
Deprecated. This method does not automatically escape characters that
 are illegal in URLs.  It is recommended that new code convert an
 abstract pathname into a URL by first converting it into a URI, via the
 toURI method, and then converting the URI into a URL
 via the URI.toURL method.
Converts this abstract pathname into a file: URL.  The
 exact form of the URL is system-dependent.  If it can be determined that
 the file denoted by this abstract pathname is a directory, then the
 resulting URL will end with a slash.

Returns:
A URL object representing the equivalent file URL
Throws:
MalformedURLException - If the path cannot be parsed as a URL
Since:
1.2
See Also:
toURI(), 
URI, 
URI.toURL(), 
URL


"
FileDescriptor,sync(),void,Force all system buffers to synchronize with the underlying device.,"

sync
public void sync()
          throws SyncFailedException
Force all system buffers to synchronize with the underlying
 device.  This method returns after all modified data and
 attributes of this FileDescriptor have been written to the
 relevant device(s).  In particular, if this FileDescriptor
 refers to a physical storage medium, such as a file in a file
 system, sync will not return until all in-memory modified copies
 of buffers associated with this FileDescriptor have been
 written to the physical medium.

 sync is meant to be used by code that requires physical
 storage (such as a file) to be in a known state  For
 example, a class that provided a simple transaction facility
 might use sync to ensure that all changes to a file caused
 by a given transaction were recorded on a storage medium.

 sync only affects buffers downstream of this FileDescriptor.  If
 any in-memory buffering is being done by the application (for
 example, by a BufferedOutputStream object), those buffers must
 be flushed into the FileDescriptor (for example, by invoking
 OutputStream.flush) before that data will be affected by sync.

Throws:
SyncFailedException - Thrown when the buffers cannot be flushed,
        or because the system cannot guarantee that all the
        buffers have been synchronized with physical media.
Since:
JDK1.1


"
FileDescriptor,valid(),boolean,Tests if this file descriptor object is valid.,"

valid
public boolean valid()
Tests if this file descriptor object is valid.

Returns:
true if the file descriptor object represents a
          valid, open file, socket, or other active I/O connection;
          false otherwise.


"
FileInputStream,available(),int,Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of remaining bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. Returns 0 when the file
 position is beyond EOF. The next invocation might be the same thread
 or another thread. A single read or skip of this many bytes will not
 block, but may read or skip fewer bytes.

  In some cases, a non-blocking read (or skip) may appear to be
 blocked when it is merely slow, for example when reading large
 files over slow networks.

Overrides:
available in class InputStream
Returns:
an estimate of the number of remaining bytes that can be read
             (or skipped over) from this input stream without blocking.
Throws:
IOException - if this file input stream has been closed by calling
             close or an I/O error occurs.


"
FileInputStream,close(),void,Closes this file input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this file input stream and releases any system resources
 associated with the stream.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
FileInputStream,finalize(),protected void,Ensures that the close method of this file input stream is called when there are no more references to it.,"

finalize
protected void finalize()
                 throws IOException
Ensures that the close method of this file input stream is
 called when there are no more references to it.

Overrides:
finalize in class Object
Throws:
IOException - if an I/O error occurs.
See Also:
close()


"
FileInputStream,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file input stream.,"

getChannel
public FileChannel getChannel()
Returns the unique FileChannel
 object associated with this file input stream.

  The initial position of the returned channel will be equal to the
 number of bytes read from the file so far.  Reading bytes from this
 stream will increment the channel's position.  Changing the channel's
 position, either explicitly or by reading, will change this stream's
 file position.

Returns:
the file channel associated with this file input stream
Since:
1.4


"
FileInputStream,getFD(),FileDescriptor,Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.,"

getFD
public final FileDescriptor getFD()
                           throws IOException
Returns the FileDescriptor
 object  that represents the connection to
 the actual file in the file system being
 used by this FileInputStream.

Returns:
the file descriptor object associated with this stream.
Throws:
IOException - if an I/O error occurs.
See Also:
FileDescriptor


"
FileInputStream,read(),int,Reads a byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads a byte of data from this input stream. This method blocks
 if no input is yet available.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             file is reached.
Throws:
IOException - if an I/O error occurs.


"
FileInputStream,read(byte[] b),int,Reads up to b.length bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this input
 stream into an array of bytes. This method blocks until some input
 is available.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
FileInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
FileInputStream,skip(long n),long,Skips over and discards n bytes of data from the input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the
 input stream.

 The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. If n is negative, the method
 will try to skip backwards. In case the backing file does not support
 backward skip at its current position, an IOException is
 thrown. The actual number of bytes skipped is returned. If it skips
 forwards, it returns a positive value. If it skips backwards, it
 returns a negative value.

 This method may skip more bytes than what are remaining in the
 backing file. This produces no exception and the number of bytes skipped
 may include some number of bytes that were beyond the EOF of the
 backing file. Attempting to read from the stream after skipping past
 the end will result in -1 indicating the end of the file.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if n is negative, if the stream does not
             support seek, or if an I/O error occurs.


"
FileOutputStream,close(),void,Closes this file output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this file output stream and releases any system resources
 associated with this stream. This file output stream may no longer
 be used for writing bytes.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
FileOutputStream,finalize(),protected void,"Cleans up the connection to the file, and ensures that the close method of this file output stream is called when there are no more references to this stream.","

finalize
protected void finalize()
                 throws IOException
Cleans up the connection to the file, and ensures that the
 close method of this file output stream is
 called when there are no more references to this stream.

Overrides:
finalize in class Object
Throws:
IOException - if an I/O error occurs.
See Also:
FileInputStream.close()


"
FileOutputStream,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file output stream.,"

getChannel
public FileChannel getChannel()
Returns the unique FileChannel
 object associated with this file output stream.

  The initial position of the returned channel will be equal to the
 number of bytes written to the file so far unless this stream is in
 append mode, in which case it will be equal to the size of the file.
 Writing bytes to this stream will increment the channel's position
 accordingly.  Changing the channel's position, either explicitly or by
 writing, will change this stream's file position.

Returns:
the file channel associated with this file output stream
Since:
1.4


"
FileOutputStream,getFD(),FileDescriptor,Returns the file descriptor associated with this stream.,"

getFD
public final FileDescriptor getFD()
                           throws IOException
Returns the file descriptor associated with this stream.

Returns:
the FileDescriptor object that represents
          the connection to the file in the file system being used
          by this FileOutputStream object.
Throws:
IOException - if an I/O error occurs.
See Also:
FileDescriptor


"
FileOutputStream,write(byte[] b),void,Writes b.length bytes from the specified byte array to this file output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
OutputStream.write(byte[], int, int)


"
FileOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this file output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
FileOutputStream,write(int b),void,Writes the specified byte to this file output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file output stream. Implements
 the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
FilePermission,equals(Object obj),boolean,Checks two FilePermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two FilePermission objects for equality. Checks that obj is
 a FilePermission, and has the same pathname and actions as this object.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is a FilePermission, and has the same
          pathname and actions as this FilePermission object,
          false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
FilePermission,getActions(),String,"Returns the ""canonical string representation"" of the actions.","

getActions
public String getActions()
Returns the ""canonical string representation"" of the actions.
 That is, this method always returns present actions in the following order:
 read, write, execute, delete, readlink. For example, if this FilePermission
 object allows both write and read actions, a call to getActions
 will return the string ""read,write"".

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
FilePermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
FilePermission,implies(Permission p),boolean,"Checks if this FilePermission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this FilePermission object ""implies"" the specified permission.
 
 More specifically, this method returns true if:
 
 p is an instanceof FilePermission,
  p's actions are a proper subset of this
 object's actions, and
  p's pathname is implied by this object's
      pathname. For example, ""/tmp/*"" implies ""/tmp/foo"", since
      ""/tmp/*"" encompasses all files in the ""/tmp"" directory,
      including the one named ""foo"".
 

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is not
                  null and is implied by this object,
                  false otherwise.


"
FilePermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing FilePermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns a new PermissionCollection object for storing FilePermission
 objects.
 
 FilePermission objects must be stored in a manner that allows them
 to be inserted into the collection in any order, but that also enables the
 PermissionCollection implies
 method to be implemented in an efficient (and consistent) manner.

 For example, if you have two FilePermissions:
 
 ""/tmp/-"", ""read""
 ""/tmp/scratch/foo"", ""write""

and you are calling the implies method with the FilePermission:

 
   ""/tmp/scratch/foo"", ""read,write"",
 

 then the implies function must
 take into account both the ""/tmp/-"" and ""/tmp/scratch/foo""
 permissions, so the effective permission is ""read,write"",
 and implies returns true. The ""implies"" semantics for
 FilePermissions are handled properly by the PermissionCollection object
 returned by this newPermissionCollection method.

Overrides:
newPermissionCollection in class Permission
Returns:
a new PermissionCollection object suitable for storing
 FilePermissions.


"
FilterInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next caller of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 caller of a method for this input stream. The next caller might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method returns the result of in.available().

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking.
Throws:
IOException - if an I/O error occurs.


"
FilterInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 This
 method simply performs in.close().

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.
See Also:
in


"
FilterInputStream,mark(int readlimit),void,Marks the current position in this input stream.,"

mark
public void mark(int readlimit)
Marks the current position in this input stream. A subsequent
 call to the reset method repositions this stream at
 the last marked position so that subsequent reads re-read the same bytes.
 
 The readlimit argument tells this input stream to
 allow that many bytes to be read before the mark position gets
 invalidated.
 
 This method simply performs in.mark(readlimit).

Overrides:
mark in class InputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
in, 
reset()


"
FilterInputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.,"

markSupported
public boolean markSupported()
Tests if this input stream supports the mark
 and reset methods.
 This method
 simply performs in.markSupported().

Overrides:
markSupported in class InputStream
Returns:
true if this stream type supports the
          mark and reset method;
          false otherwise.
See Also:
in, 
InputStream.mark(int), 
InputStream.reset()


"
FilterInputStream,read(),int,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.
 
 This method
 simply performs in.read() and returns the result.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
in


"
FilterInputStream,read(byte[] b),int,Reads up to byte.length bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to byte.length bytes of data from this
 input stream into an array of bytes. This method blocks until some
 input is available.
 
 This method simply performs the call
 read(b, 0, b.length) and returns
 the  result. It is important that it does
 not do in.read(b) instead;
 certain subclasses of  FilterInputStream
 depend on the implementation strategy actually
 used.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
read(byte[], int, int)


"
FilterInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.
 
 This method simply performs in.read(b, off, len)
 and returns the result.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
in


"
FilterInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.,"

reset
public void reset()
           throws IOException
Repositions this stream to the position at the time the
 mark method was last called on this input stream.
 
 This method
 simply performs in.reset().
 
 Stream marks are intended to be used in
 situations where you need to read ahead a little to see what's in
 the stream. Often this is most easily done by invoking some
 general parser. If the stream is of the type handled by the
 parse, it just chugs along happily. If the stream is not of
 that type, the parser should toss an exception when it fails.
 If this happens within readlimit bytes, it allows the outer
 code to reset the stream and try another parser.

Overrides:
reset in class InputStream
Throws:
IOException - if the stream has not been marked or if the
               mark has been invalidated.
See Also:
in, 
mark(int)


"
FilterInputStream,skip(long n),long,Skips over and discards n bytes of data from the input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. The actual number of bytes skipped is
 returned.
 
 This method simply performs in.skip(n).

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
FilterOutputStream,close(),void,Closes this output stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this output stream and releases any system resources
 associated with the stream.
 
 The close method of FilterOutputStream
 calls its flush method, and then calls the
 close method of its underlying output stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
flush(), 
out


"
FilterOutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out to the stream.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
 
 The flush method of FilterOutputStream
 calls the flush method of its underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
out


"
FilterOutputStream,write(byte[] b),void,Writes b.length bytes to this output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes to this output stream.
 
 The write method of FilterOutputStream
 calls its write method of three arguments with the
 arguments b, 0, and
 b.length.
 
 Note that this method does not call the one-argument
 write method of its underlying stream with the single
 argument b.

Overrides:
write in class OutputStream
Parameters:
b - the data to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
FilterOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified
 byte array starting at offset off to
 this output stream.
 
 The write method of FilterOutputStream
 calls the write method of one argument on each
 byte to output.
 
 Note that this method does not call the write method
 of its underlying input stream with the same arguments. Subclasses
 of FilterOutputStream should provide a more efficient
 implementation of this method.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
write(int)


"
FilterOutputStream,write(int b),void,Writes the specified byte to this output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this output stream.
 
 The write method of FilterOutputStream
 calls the write method of its underlying output stream,
 that is, it performs out.write(b).
 
 Implements the abstract write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs.


"
FilterReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
FilterReader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  After
                         reading this many characters, attempting to
                         reset the stream may fail.
Throws:
IOException - If an I/O error occurs


"
FilterReader,markSupported(),boolean,Tells whether this stream supports the mark() operation.,"

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation.

Overrides:
markSupported in class Reader
Returns:
true if and only if this stream supports the mark operation.


"
FilterReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
FilterReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
FilterReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
FilterReader,reset(),void,Resets the stream.,"

reset
public void reset()
           throws IOException
Resets the stream.

Overrides:
reset in class Reader
Throws:
IOException - If an I/O error occurs


"
FilterReader,skip(long n),long,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.

Overrides:
skip in class Reader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs


"
FilterWriter,close(),void,"Closes the stream, flushing it first.","

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
FilterWriter,flush(),void,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
FilterWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Buffer of characters to be written
off - Offset from which to start reading characters
len - Number of characters to be written
Throws:
IOException - If an I/O error occurs


"
FilterWriter,write(int c),void,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
FilterWriter,"write(String str, int off, int len)",void,Writes a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Overrides:
write in class Writer
Parameters:
str - String to be written
off - Offset from which to start reading characters
len - Number of characters to be written
Throws:
IOException - If an I/O error occurs


"
InputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation
 might be the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.

  Note that while some implementations of InputStream will return
 the total number of bytes in the stream, many will not.  It is
 never correct to use the return value of this method to allocate
 a buffer intended to hold all data in this stream.

  A subclass' implementation of this method may choose to throw an
 IOException if this input stream has been closed by
 invoking the close() method.

  The available method for class InputStream always
 returns 0.

  This method should be overridden by subclasses.

Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking or 0 when
             it reaches the end of the input stream.
Throws:
IOException - if an I/O error occurs.


"
InputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

  The close method of InputStream does
 nothing.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
InputStream,mark(int readlimit),void,Marks the current position in this input stream.,"

mark
public void mark(int readlimit)
Marks the current position in this input stream. A subsequent call to
 the reset method repositions this stream at the last marked
 position so that subsequent reads re-read the same bytes.

  The readlimit arguments tells this input stream to
 allow that many bytes to be read before the mark position gets
 invalidated.

  The general contract of mark is that, if the method
 markSupported returns true, the stream somehow
 remembers all the bytes read after the call to mark and
 stands ready to supply those same bytes again if and whenever the method
 reset is called.  However, the stream is not required to
 remember any data at all if more than readlimit bytes are
 read from the stream before reset is called.

  Marking a closed stream should not have any effect on the stream.

  The mark method of InputStream does
 nothing.

Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
reset()


"
InputStream,markSupported(),boolean,Tests if this input stream supports the mark and reset methods.,"

markSupported
public boolean markSupported()
Tests if this input stream supports the mark and
 reset methods. Whether or not mark and
 reset are supported is an invariant property of a
 particular input stream instance. The markSupported method
 of InputStream returns false.

Returns:
true if this stream instance supports the mark
          and reset methods; false otherwise.
See Also:
mark(int), 
reset()


"
InputStream,read(),abstract int,Reads the next byte of data from the input stream.,"

read
public abstract int read()
                  throws IOException
Reads the next byte of data from the input stream. The value byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the stream
 has been reached, the value -1 is returned. This method
 blocks until input data is available, the end of the stream is detected,
 or an exception is thrown.

  A subclass must provide an implementation of this method.

Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
InputStream,read(byte[] b),int,Reads some number of bytes from the input stream and stores them into the buffer array b.,"

read
public int read(byte[] b)
         throws IOException
Reads some number of bytes from the input stream and stores them into
 the buffer array b. The number of bytes actually read is
 returned as an integer.  This method blocks until input data is
 available, end of file is detected, or an exception is thrown.

  If the length of b is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at the
 end of the file, the value -1 is returned; otherwise, at
 least one byte is read and stored into b.

  The first byte read is stored into element b[0], the
 next one into b[1], and so on. The number of bytes read is,
 at most, equal to the length of b. Let k be the
 number of bytes actually read; these bytes will be stored in elements
 b[0] through b[k-1],
 leaving elements b[k] through
 b[b.length-1] unaffected.

  The read(b) method for class InputStream
 has the same effect as:  read(b, 0, b.length) 

Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than the end of the file, if the input stream has been closed, or
 if some other I/O error occurs.
NullPointerException - if b is null.
See Also:
read(byte[], int, int)


"
InputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from the input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from the input stream into
 an array of bytes.  An attempt is made to read as many as
 len bytes, but a smaller number may be read.
 The number of bytes actually read is returned as an integer.

  This method blocks until input data is available, end of file is
 detected, or an exception is thrown.

  If len is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at end of
 file, the value -1 is returned; otherwise, at least one
 byte is read and stored into b.

  The first byte read is stored into element b[off], the
 next one into b[off+1], and so on. The number of bytes read
 is, at most, equal to len. Let k be the number of
 bytes actually read; these bytes will be stored in elements
 b[off] through b[off+k-1],
 leaving elements b[off+k] through
 b[off+len-1] unaffected.

  In every case, elements b[0] through
 b[off] and elements b[off+len] through
 b[b.length-1] are unaffected.

  The read(b, off, len) method
 for class InputStream simply calls the method
 read() repeatedly. If the first such call results in an
 IOException, that exception is returned from the call to
 the read(b, off, len) method.  If
 any subsequent call to read() results in a
 IOException, the exception is caught and treated as if it
 were end of file; the bytes read up to that point are stored into
 b and the number of bytes read before the exception
 occurred is returned. The default implementation of this method blocks
 until the requested amount of input data len has been read,
 end of file is detected, or an exception is thrown. Subclasses are encouraged
 to provide a more efficient implementation of this method.

Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes to read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the input stream has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
See Also:
read()


"
InputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.,"

reset
public void reset()
           throws IOException
Repositions this stream to the position at the time the
 mark method was last called on this input stream.

  The general contract of reset is:

 
 If the method markSupported returns
 true, then:

      If the method mark has not been called since
     the stream was created, or the number of bytes read from the stream
     since mark was last called is larger than the argument
     to mark at that last call, then an
     IOException might be thrown.

      If such an IOException is not thrown, then the
     stream is reset to a state such that all the bytes read since the
     most recent call to mark (or since the start of the
     file, if mark has not been called) will be resupplied
     to subsequent callers of the read method, followed by
     any bytes that otherwise would have been the next input data as of
     the time of the call to reset. 
 If the method markSupported returns
 false, then:

      The call to reset may throw an
     IOException.

      If an IOException is not thrown, then the stream
     is reset to a fixed state that depends on the particular type of the
     input stream and how it was created. The bytes that will be supplied
     to subsequent callers of the read method depend on the
     particular type of the input stream. 
The method reset for class InputStream
 does nothing except throw an IOException.

Throws:
IOException - if this stream has not been marked or if the
               mark has been invalidated.
See Also:
mark(int), 
IOException


"
InputStream,skip(long n),long,Skips over and discards n bytes of data from this input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from this input
 stream. The skip method may, for a variety of reasons, end
 up skipping over some smaller number of bytes, possibly 0.
 This may result from any of a number of conditions; reaching end of file
 before n bytes have been skipped is only one possibility.
 The actual number of bytes skipped is returned. If n is
 negative, the skip method for class InputStream always
 returns 0, and no bytes are skipped. Subclasses may handle the negative
 value differently.

  The skip method of this class creates a
 byte array and then repeatedly reads into it until n bytes
 have been read or the end of the stream has been reached. Subclasses are
 encouraged to provide a more efficient implementation of this method.
 For instance, the implementation may depend on the ability to seek.

Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
InputStreamReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
InputStreamReader,getEncoding(),String,Returns the name of the character encoding being used by this stream.,"

getEncoding
public String getEncoding()
Returns the name of the character encoding being used by this stream.

  If the encoding has an historical name then that name is returned;
 otherwise the encoding's canonical name is returned.

  If this instance was created with the InputStreamReader(InputStream, String) constructor then the returned
 name, being unique for the encoding, may differ from the name passed to
 the constructor. This method will return null if the
 stream has been closed.
 

Returns:
The historical name of this encoding, or
         null if the stream has been closed
See Also:
Charset


"
InputStreamReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
         reached
Throws:
IOException - If an I/O error occurs


"
InputStreamReader,"read(char[] cbuf, int offset, int length)",int,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int offset,
                int length)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
offset - Offset at which to start storing characters
length - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
InputStreamReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  An InputStreamReader is
 ready if its input buffer is not empty, or if bytes are available to be
 read from the underlying byte stream.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
LineNumberInputStream,available(),int,Deprecated.,"

available
public int available()
              throws IOException
Deprecated. 
Returns the number of bytes that can be read from this input
 stream without blocking.
 
 Note that if the underlying input stream is able to supply
 k input characters without blocking, the
 LineNumberInputStream can guarantee only to provide
 k/2 characters without blocking, because the
 k characters from the underlying input stream might
 consist of k/2 pairs of '\r' and
 '\n', which are converted to just
 k/2 '\n' characters.

Overrides:
available in class FilterInputStream
Returns:
the number of bytes that can be read from this input stream
             without blocking.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
LineNumberInputStream,getLineNumber(),int,Deprecated.,"

getLineNumber
public int getLineNumber()
Deprecated. 
Returns the current line number.

Returns:
the current line number.
See Also:
setLineNumber(int)


"
LineNumberInputStream,mark(int readlimit),void,Deprecated.,"

mark
public void mark(int readlimit)
Deprecated. 
Marks the current position in this input stream. A subsequent
 call to the reset method repositions this stream at
 the last marked position so that subsequent reads re-read the same bytes.
 
 The mark method of
 LineNumberInputStream remembers the current line
 number in a private variable, and then calls the mark
 method of the underlying input stream.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
FilterInputStream.in, 
reset()


"
LineNumberInputStream,read(),int,Deprecated.,"

read
public int read()
         throws IOException
Deprecated. 
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.
 
 The read method of
 LineNumberInputStream calls the read
 method of the underlying input stream. It checks for carriage
 returns and newline characters in the input, and modifies the
 current line number as appropriate. A carriage-return character or
 a carriage return followed by a newline character are both
 converted into a single newline character.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of this
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in, 
getLineNumber()


"
LineNumberInputStream,"read(byte[] b, int off, int len)",int,Deprecated.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Deprecated. 
Reads up to len bytes of data from this input stream
 into an array of bytes. This method blocks until some input is available.
 
 The read method of
 LineNumberInputStream repeatedly calls the
 read method of zero arguments to fill in the byte array.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             this stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
read()


"
LineNumberInputStream,reset(),void,Deprecated.,"

reset
public void reset()
           throws IOException
Deprecated. 
Repositions this stream to the position at the time the
 mark method was last called on this input stream.
 
 The reset method of
 LineNumberInputStream resets the line number to be
 the line number at the time the mark method was
 called, and then calls the reset method of the
 underlying input stream.
 
 Stream marks are intended to be used in
 situations where you need to read ahead a little to see what's in
 the stream. Often this is most easily done by invoking some
 general parser. If the stream is of the type handled by the
 parser, it just chugs along happily. If the stream is not of
 that type, the parser should toss an exception when it fails,
 which, if it happens within readlimit bytes, allows the outer
 code to reset the stream and try another parser.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in, 
mark(int)


"
LineNumberInputStream,setLineNumber(int lineNumber),void,Deprecated.,"

setLineNumber
public void setLineNumber(int lineNumber)
Deprecated. 
Sets the line number to the specified argument.

Parameters:
lineNumber - the new line number.
See Also:
getLineNumber()


"
LineNumberInputStream,skip(long n),long,Deprecated.,"

skip
public long skip(long n)
          throws IOException
Deprecated. 
Skips over and discards n bytes of data from this
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. The actual number of bytes skipped is
 returned.  If n is negative, no bytes are skipped.
 
 The skip method of LineNumberInputStream creates
 a byte array and then repeatedly reads into it until
 n bytes have been read or the end of the stream has
 been reached.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
LineNumberReader,getLineNumber(),int,Get the current line number.,"

getLineNumber
public int getLineNumber()
Get the current line number.

Returns:
The current line number
See Also:
setLineNumber(int)


"
LineNumberReader,mark(int readAheadLimit),void,Mark the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Mark the present position in the stream.  Subsequent calls to reset()
 will attempt to reposition the stream to this point, and will also reset
 the line number appropriately.

Overrides:
mark in class BufferedReader
Parameters:
readAheadLimit - Limit on the number of characters that may be read while still
         preserving the mark.  After reading this many characters,
         attempting to reset the stream may fail.
Throws:
IOException - If an I/O error occurs


"
LineNumberReader,read(),int,Read a single character.,"

read
public int read()
         throws IOException
Read a single character.  Line terminators are
 compressed into single newline ('\n') characters.  Whenever a line
 terminator is read the current line number is incremented.

Overrides:
read in class BufferedReader
Returns:
The character read, or -1 if the end of the stream has been
          reached
Throws:
IOException - If an I/O error occurs


"
LineNumberReader,"read(char[] cbuf, int off, int len)",int,Read characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Read characters into a portion of an array.  Whenever a line terminator is read the current line number is
 incremented.

Overrides:
read in class BufferedReader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of bytes read, or -1 if the end of the stream has
          already been reached
Throws:
IOException - If an I/O error occurs


"
LineNumberReader,readLine(),String,Read a line of text.,"

readLine
public String readLine()
                throws IOException
Read a line of text.  Whenever a line terminator is
 read the current line number is incremented.

Overrides:
readLine in class BufferedReader
Returns:
A String containing the contents of the line, not including
          any line termination characters, or
          null if the end of the stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
LineNumberReader,reset(),void,Reset the stream to the most recent mark.,"

reset
public void reset()
           throws IOException
Reset the stream to the most recent mark.

Overrides:
reset in class BufferedReader
Throws:
IOException - If the stream has not been marked, or if the mark has been
          invalidated


"
LineNumberReader,setLineNumber(int lineNumber),void,Set the current line number.,"

setLineNumber
public void setLineNumber(int lineNumber)
Set the current line number.

Parameters:
lineNumber - An int specifying the line number
See Also:
getLineNumber()


"
LineNumberReader,skip(long n),long,Skip characters.,"

skip
public long skip(long n)
          throws IOException
Skip characters.

Overrides:
skip in class BufferedReader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs
IllegalArgumentException - If n is negative


"
ObjectInputStream,available(),int,Returns the number of bytes that can be read without blocking.,"

available
public int available()
              throws IOException
Returns the number of bytes that can be read without blocking.

Specified by:
available in interface ObjectInput
Overrides:
available in class InputStream
Returns:
the number of available bytes.
Throws:
IOException - if there are I/O errors while reading from the
          underlying InputStream


"
ObjectInputStream,close(),void,Closes the input stream.,"

close
public void close()
           throws IOException
Closes the input stream. Must be called to release any resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface ObjectInput
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - If an I/O error has occurred.


"
ObjectInputStream,defaultReadObject(),void,Read the non-static and non-transient fields of the current class from this stream.,"

defaultReadObject
public void defaultReadObject()
                       throws IOException,
                              ClassNotFoundException
Read the non-static and non-transient fields of the current class from
 this stream.  This may only be called from the readObject method of the
 class being deserialized. It will throw the NotActiveException if it is
 called otherwise.

Throws:
ClassNotFoundException - if the class of a serialized object
          could not be found.
IOException - if an I/O error occurs.
NotActiveException - if the stream is not currently reading
          objects.


"
ObjectInputStream,enableResolveObject(boolean enable),protected boolean,Enable the stream to allow objects read from the stream to be replaced.,"

enableResolveObject
protected boolean enableResolveObject(boolean enable)
                               throws SecurityException
Enable the stream to allow objects read from the stream to be replaced.
 When enabled, the resolveObject method is called for every object being
 deserialized.

 If enable is true, and there is a security manager installed,
 this method first calls the security manager's
 checkPermission method with the
 SerializablePermission(""enableSubstitution"") permission to
 ensure it's ok to enable the stream to allow objects read from the
 stream to be replaced.

Parameters:
enable - true for enabling use of resolveObject for
          every object being deserialized
Returns:
the previous setting before this method was invoked
Throws:
SecurityException - if a security manager exists and its
          checkPermission method denies enabling the stream
          to allow objects read from the stream to be replaced.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
SerializablePermission


"
ObjectInputStream,read(),int,Reads a byte of data.,"

read
public int read()
         throws IOException
Reads a byte of data. This method will block if no input is available.

Specified by:
read in interface ObjectInput
Specified by:
read in class InputStream
Returns:
the byte read, or -1 if the end of the stream is reached.
Throws:
IOException - If an I/O error has occurred.


"
ObjectInputStream,"read(byte[] buf, int off, int len)",int,Reads into an array of bytes.,"

read
public int read(byte[] buf,
                int off,
                int len)
         throws IOException
Reads into an array of bytes.  This method will block until some input
 is available. Consider using java.io.DataInputStream.readFully to read
 exactly 'length' bytes.

Specified by:
read in interface ObjectInput
Overrides:
read in class InputStream
Parameters:
buf - the buffer into which the data is read
off - the start offset of the data
len - the maximum number of bytes read
Returns:
the actual number of bytes read, -1 is returned when the end of
          the stream is reached.
Throws:
IOException - If an I/O error has occurred.
See Also:
DataInputStream.readFully(byte[],int,int)


"
ObjectInputStream,readBoolean(),boolean,Reads in a boolean.,"

readBoolean
public boolean readBoolean()
                    throws IOException
Reads in a boolean.

Specified by:
readBoolean in interface DataInput
Returns:
the boolean read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readByte(),byte,Reads an 8 bit byte.,"

readByte
public byte readByte()
              throws IOException
Reads an 8 bit byte.

Specified by:
readByte in interface DataInput
Returns:
the 8 bit byte read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readChar(),char,Reads a 16 bit char.,"

readChar
public char readChar()
              throws IOException
Reads a 16 bit char.

Specified by:
readChar in interface DataInput
Returns:
the 16 bit char read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readClassDescriptor(),protected ObjectStreamClass,Read a class descriptor from the serialization stream.,"

readClassDescriptor
protected ObjectStreamClass readClassDescriptor()
                                         throws IOException,
                                                ClassNotFoundException
Read a class descriptor from the serialization stream.  This method is
 called when the ObjectInputStream expects a class descriptor as the next
 item in the serialization stream.  Subclasses of ObjectInputStream may
 override this method to read in class descriptors that have been written
 in non-standard formats (by subclasses of ObjectOutputStream which have
 overridden the writeClassDescriptor method).  By default,
 this method reads class descriptors according to the format defined in
 the Object Serialization specification.

Returns:
the class descriptor read
Throws:
IOException - If an I/O error has occurred.
ClassNotFoundException - If the Class of a serialized object used
          in the class descriptor representation cannot be found
Since:
1.3
See Also:
ObjectOutputStream.writeClassDescriptor(java.io.ObjectStreamClass)


"
ObjectInputStream,readDouble(),double,Reads a 64 bit double.,"

readDouble
public double readDouble()
                  throws IOException
Reads a 64 bit double.

Specified by:
readDouble in interface DataInput
Returns:
the 64 bit double read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readFields(),ObjectInputStream.GetField,Reads the persistent fields from the stream and makes them available by name.,"

readFields
public ObjectInputStream.GetField readFields()
                                      throws IOException,
                                             ClassNotFoundException
Reads the persistent fields from the stream and makes them available by
 name.

Returns:
the GetField object representing the persistent
          fields of the object being deserialized
Throws:
ClassNotFoundException - if the class of a serialized object
          could not be found.
IOException - if an I/O error occurs.
NotActiveException - if the stream is not currently reading
          objects.
Since:
1.2


"
ObjectInputStream,readFloat(),float,Reads a 32 bit float.,"

readFloat
public float readFloat()
                throws IOException
Reads a 32 bit float.

Specified by:
readFloat in interface DataInput
Returns:
the 32 bit float read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readFully(byte[] buf),void,"Reads bytes, blocking until all bytes are read.","

readFully
public void readFully(byte[] buf)
               throws IOException
Reads bytes, blocking until all bytes are read.

Specified by:
readFully in interface DataInput
Parameters:
buf - the buffer into which the data is read
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,"readFully(byte[] buf, int off, int len)",void,"Reads bytes, blocking until all bytes are read.","

readFully
public void readFully(byte[] buf,
                      int off,
                      int len)
               throws IOException
Reads bytes, blocking until all bytes are read.

Specified by:
readFully in interface DataInput
Parameters:
buf - the buffer into which the data is read
off - the start offset of the data
len - the maximum number of bytes to read
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readInt(),int,Reads a 32 bit int.,"

readInt
public int readInt()
            throws IOException
Reads a 32 bit int.

Specified by:
readInt in interface DataInput
Returns:
the 32 bit integer read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readLine(),String,Deprecated. This method does not properly convert bytes to characters. see DataInputStream for the details and alternatives.,"

readLine
@Deprecated
public String readLine()
                            throws IOException
Deprecated. This method does not properly convert bytes to characters.
          see DataInputStream for the details and alternatives.
Reads in a line that has been terminated by a \n, \r, \r\n or EOF.

Specified by:
readLine in interface DataInput
Returns:
a String copy of the line.
Throws:
IOException - if there are I/O errors while reading from the
          underlying InputStream


"
ObjectInputStream,readLong(),long,Reads a 64 bit long.,"

readLong
public long readLong()
              throws IOException
Reads a 64 bit long.

Specified by:
readLong in interface DataInput
Returns:
the read 64 bit long.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readObject(),Object,Read an object from the ObjectInputStream.,"

readObject
public final Object readObject()
                        throws IOException,
                               ClassNotFoundException
Read an object from the ObjectInputStream.  The class of the object, the
 signature of the class, and the values of the non-transient and
 non-static fields of the class and all of its supertypes are read.
 Default deserializing for a class can be overridden using the writeObject
 and readObject methods.  Objects referenced by this object are read
 transitively so that a complete equivalent graph of objects is
 reconstructed by readObject.

 The root object is completely restored when all of its fields and the
 objects it references are completely restored.  At this point the object
 validation callbacks are executed in order based on their registered
 priorities. The callbacks are registered by objects (in the readObject
 special methods) as they are individually restored.

 Exceptions are thrown for problems with the InputStream and for
 classes that should not be deserialized.  All exceptions are fatal to
 the InputStream and leave it in an indeterminate state; it is up to the
 caller to ignore or recover the stream state.

Specified by:
readObject in interface ObjectInput
Returns:
the object read from the stream
Throws:
ClassNotFoundException - Class of a serialized object cannot be
          found.
InvalidClassException - Something is wrong with a class used by
          serialization.
StreamCorruptedException - Control information in the
          stream is inconsistent.
OptionalDataException - Primitive data was found in the
          stream instead of objects.
IOException - Any of the usual Input/Output related exceptions.


"
ObjectInputStream,readObjectOverride(),protected Object,This method is called by trusted subclasses of ObjectInputStream that constructed ObjectInputStream using the protected no-arg constructor.,"

readObjectOverride
protected Object readObjectOverride()
                             throws IOException,
                                    ClassNotFoundException
This method is called by trusted subclasses of ObjectInputStream that
 constructed ObjectInputStream using the protected no-arg constructor.
 The subclass is expected to provide an override method with the modifier
 ""final"".

Returns:
the Object read from the stream.
Throws:
ClassNotFoundException - Class definition of a serialized object
          cannot be found.
OptionalDataException - Primitive data was found in the stream
          instead of objects.
IOException - if I/O errors occurred while reading from the
          underlying stream
Since:
1.2
See Also:
ObjectInputStream(), 
readObject()


"
ObjectInputStream,readShort(),short,Reads a 16 bit short.,"

readShort
public short readShort()
                throws IOException
Reads a 16 bit short.

Specified by:
readShort in interface DataInput
Returns:
the 16 bit short read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readStreamHeader(),protected void,The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers.,"

readStreamHeader
protected void readStreamHeader()
                         throws IOException,
                                StreamCorruptedException
The readStreamHeader method is provided to allow subclasses to read and
 verify their own stream headers. It reads and verifies the magic number
 and version number.

Throws:
IOException - if there are I/O errors while reading from the
          underlying InputStream
StreamCorruptedException - if control information in the stream
          is inconsistent


"
ObjectInputStream,readUnshared(),Object,"Reads an ""unshared"" object from the ObjectInputStream.","

readUnshared
public Object readUnshared()
                    throws IOException,
                           ClassNotFoundException
Reads an ""unshared"" object from the ObjectInputStream.  This method is
 identical to readObject, except that it prevents subsequent calls to
 readObject and readUnshared from returning additional references to the
 deserialized instance obtained via this call.  Specifically:
 
If readUnshared is called to deserialize a back-reference (the
       stream representation of an object which has been written
       previously to the stream), an ObjectStreamException will be
       thrown.

   If readUnshared returns successfully, then any subsequent attempts
       to deserialize back-references to the stream handle deserialized
       by readUnshared will cause an ObjectStreamException to be thrown.
 
 Deserializing an object via readUnshared invalidates the stream handle
 associated with the returned object.  Note that this in itself does not
 always guarantee that the reference returned by readUnshared is unique;
 the deserialized object may define a readResolve method which returns an
 object visible to other parties, or readUnshared may return a Class
 object or enum constant obtainable elsewhere in the stream or through
 external means. If the deserialized object defines a readResolve method
 and the invocation of that method returns an array, then readUnshared
 returns a shallow clone of that array; this guarantees that the returned
 array object is unique and cannot be obtained a second time from an
 invocation of readObject or readUnshared on the ObjectInputStream,
 even if the underlying data stream has been manipulated.

 ObjectInputStream subclasses which override this method can only be
 constructed in security contexts possessing the
 ""enableSubclassImplementation"" SerializablePermission; any attempt to
 instantiate such a subclass without this permission will cause a
 SecurityException to be thrown.

Returns:
reference to deserialized object
Throws:
ClassNotFoundException - if class of an object to deserialize
          cannot be found
StreamCorruptedException - if control information in the stream
          is inconsistent
ObjectStreamException - if object to deserialize has already
          appeared in stream
OptionalDataException - if primitive data is next in stream
IOException - if an I/O error occurs during deserialization
Since:
1.4


"
ObjectInputStream,readUnsignedByte(),int,Reads an unsigned 8 bit byte.,"

readUnsignedByte
public int readUnsignedByte()
                     throws IOException
Reads an unsigned 8 bit byte.

Specified by:
readUnsignedByte in interface DataInput
Returns:
the 8 bit byte read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readUnsignedShort(),int,Reads an unsigned 16 bit short.,"

readUnsignedShort
public int readUnsignedShort()
                      throws IOException
Reads an unsigned 16 bit short.

Specified by:
readUnsignedShort in interface DataInput
Returns:
the 16 bit short read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
ObjectInputStream,readUTF(),String,Reads a String in modified UTF-8 format.,"

readUTF
public String readUTF()
               throws IOException
Reads a String in
 modified UTF-8
 format.

Specified by:
readUTF in interface DataInput
Returns:
the String.
Throws:
IOException - if there are I/O errors while reading from the
          underlying InputStream
UTFDataFormatException - if read bytes do not represent a valid
          modified UTF-8 encoding of a string


"
ObjectInputStream,"registerValidation(ObjectInputValidation obj, int prio)",void,Register an object to be validated before the graph is returned.,"

registerValidation
public void registerValidation(ObjectInputValidation obj,
                               int prio)
                        throws NotActiveException,
                               InvalidObjectException
Register an object to be validated before the graph is returned.  While
 similar to resolveObject these validations are called after the entire
 graph has been reconstituted.  Typically, a readObject method will
 register the object with the stream so that when all of the objects are
 restored a final set of validations can be performed.

Parameters:
obj - the object to receive the validation callback.
prio - controls the order of callbacks;zero is a good default.
          Use higher numbers to be called back earlier, lower numbers for
          later callbacks. Within a priority, callbacks are processed in
          no particular order.
Throws:
NotActiveException - The stream is not currently reading objects
          so it is invalid to register a callback.
InvalidObjectException - The validation object is null.


"
ObjectInputStream,resolveClass(ObjectStreamClass desc),protected Class<?>,Load the local class equivalent of the specified stream class description.,"

resolveClass
protected Class<?> resolveClass(ObjectStreamClass desc)
                         throws IOException,
                                ClassNotFoundException
Load the local class equivalent of the specified stream class
 description.  Subclasses may implement this method to allow classes to
 be fetched from an alternate source.

 The corresponding method in ObjectOutputStream is
 annotateClass.  This method will be invoked only once for
 each unique class in the stream.  This method can be implemented by
 subclasses to use an alternate loading mechanism but must return a
 Class object. Once returned, if the class is not an array
 class, its serialVersionUID is compared to the serialVersionUID of the
 serialized class, and if there is a mismatch, the deserialization fails
 and an InvalidClassException is thrown.

 The default implementation of this method in
 ObjectInputStream returns the result of calling
 
     Class.forName(desc.getName(), false, loader)
 
 where loader is determined as follows: if there is a
 method on the current thread's stack whose declaring class was
 defined by a user-defined class loader (and was not a generated to
 implement reflective invocations), then loader is class
 loader corresponding to the closest such method to the currently
 executing frame; otherwise, loader is
 null. If this call results in a
 ClassNotFoundException and the name of the passed
 ObjectStreamClass instance is the Java language keyword
 for a primitive type or void, then the Class object
 representing that primitive type or void will be returned
 (e.g., an ObjectStreamClass with the name
 ""int"" will be resolved to Integer.TYPE).
 Otherwise, the ClassNotFoundException will be thrown to
 the caller of this method.

Parameters:
desc - an instance of class ObjectStreamClass
Returns:
a Class object corresponding to desc
Throws:
IOException - any of the usual Input/Output exceptions.
ClassNotFoundException - if class of a serialized object cannot
          be found.


"
ObjectInputStream,resolveObject(Object obj),protected Object,This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization.,"

resolveObject
protected Object resolveObject(Object obj)
                        throws IOException
This method will allow trusted subclasses of ObjectInputStream to
 substitute one object for another during deserialization. Replacing
 objects is disabled until enableResolveObject is called. The
 enableResolveObject method checks that the stream requesting to resolve
 object can be trusted. Every reference to serializable objects is passed
 to resolveObject.  To insure that the private state of objects is not
 unintentionally exposed only trusted streams may use resolveObject.

 This method is called after an object has been read but before it is
 returned from readObject.  The default resolveObject method just returns
 the same object.

 When a subclass is replacing objects it must insure that the
 substituted object is compatible with every field where the reference
 will be stored.  Objects whose type is not a subclass of the type of the
 field or array element abort the serialization by raising an exception
 and the object is not be stored.

 This method is called only once when each object is first
 encountered.  All subsequent references to the object will be redirected
 to the new object.

Parameters:
obj - object to be substituted
Returns:
the substituted object
Throws:
IOException - Any of the usual Input/Output exceptions.


"
ObjectInputStream,resolveProxyClass(String[] interfaces),protected Class<?>,"Returns a proxy class that implements the interfaces named in a proxy class descriptor; subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes, allowing them to use an alternate loading mechanism for the interfaces and the proxy class.","

resolveProxyClass
protected Class<?> resolveProxyClass(String[] interfaces)
                              throws IOException,
                                     ClassNotFoundException
Returns a proxy class that implements the interfaces named in a proxy
 class descriptor; subclasses may implement this method to read custom
 data from the stream along with the descriptors for dynamic proxy
 classes, allowing them to use an alternate loading mechanism for the
 interfaces and the proxy class.

 This method is called exactly once for each unique proxy class
 descriptor in the stream.

 The corresponding method in ObjectOutputStream is
 annotateProxyClass.  For a given subclass of
 ObjectInputStream that overrides this method, the
 annotateProxyClass method in the corresponding subclass of
 ObjectOutputStream must write any data or objects read by
 this method.

 The default implementation of this method in
 ObjectInputStream returns the result of calling
 Proxy.getProxyClass with the list of Class
 objects for the interfaces that are named in the interfaces
 parameter.  The Class object for each interface name
 i is the value returned by calling
 
     Class.forName(i, false, loader)
 
 where loader is that of the first non-null
 class loader up the execution stack, or null if no
 non-null class loaders are on the stack (the same class
 loader choice used by the resolveClass method).  Unless any
 of the resolved interfaces are non-public, this same value of
 loader is also the class loader passed to
 Proxy.getProxyClass; if non-public interfaces are present,
 their class loader is passed instead (if more than one non-public
 interface class loader is encountered, an
 IllegalAccessError is thrown).
 If Proxy.getProxyClass throws an
 IllegalArgumentException, resolveProxyClass
 will throw a ClassNotFoundException containing the
 IllegalArgumentException.

Parameters:
interfaces - the list of interface names that were
                deserialized in the proxy class descriptor
Returns:
a proxy class for the specified interfaces
Throws:
IOException - any exception thrown by the underlying
                InputStream
ClassNotFoundException - if the proxy class or any of the
                named interfaces could not be found
Since:
1.3
See Also:
ObjectOutputStream.annotateProxyClass(Class)


"
ObjectInputStream,skipBytes(int len),int,Skips bytes.,"

skipBytes
public int skipBytes(int len)
              throws IOException
Skips bytes.

Specified by:
skipBytes in interface DataInput
Parameters:
len - the number of bytes to be skipped
Returns:
the actual number of bytes skipped.
Throws:
IOException - If an I/O error has occurred.


"
ObjectInputStream.GetField,defaulted(String name),abstract boolean,Return true if the named field is defaulted and has no value in this stream.,"

defaulted
public abstract boolean defaulted(String name)
                           throws IOException
Return true if the named field is defaulted and has no value in this
 stream.

Parameters:
name - the name of the field
Returns:
true, if and only if the named field is defaulted
Throws:
IOException - if there are I/O errors while reading from
         the underlying InputStream
IllegalArgumentException - if name does not
         correspond to a serializable field


"
ObjectInputStream.GetField,"get(String name, boolean val)",abstract boolean,Get the value of the named boolean field from the persistent field.,"

get
public abstract boolean get(String name,
                            boolean val)
                     throws IOException
Get the value of the named boolean field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named boolean field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, byte val)",abstract byte,Get the value of the named byte field from the persistent field.,"

get
public abstract byte get(String name,
                         byte val)
                  throws IOException
Get the value of the named byte field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named byte field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, char val)",abstract char,Get the value of the named char field from the persistent field.,"

get
public abstract char get(String name,
                         char val)
                  throws IOException
Get the value of the named char field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named char field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, double val)",abstract double,Get the value of the named double field from the persistent field.,"

get
public abstract double get(String name,
                           double val)
                    throws IOException
Get the value of the named double field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named double field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, float val)",abstract float,Get the value of the named float field from the persistent field.,"

get
public abstract float get(String name,
                          float val)
                   throws IOException
Get the value of the named float field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named float field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, int val)",abstract int,Get the value of the named int field from the persistent field.,"

get
public abstract int get(String name,
                        int val)
                 throws IOException
Get the value of the named int field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named int field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, long val)",abstract long,Get the value of the named long field from the persistent field.,"

get
public abstract long get(String name,
                         long val)
                  throws IOException
Get the value of the named long field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named long field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, Object val)",abstract Object,Get the value of the named Object field from the persistent field.,"

get
public abstract Object get(String name,
                           Object val)
                    throws IOException
Get the value of the named Object field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named Object field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,"get(String name, short val)",abstract short,Get the value of the named short field from the persistent field.,"

get
public abstract short get(String name,
                          short val)
                   throws IOException
Get the value of the named short field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named short field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
ObjectInputStream.GetField,getObjectStreamClass(),abstract ObjectStreamClass,Get the ObjectStreamClass that describes the fields in the stream.,"

getObjectStreamClass
public abstract ObjectStreamClass getObjectStreamClass()
Get the ObjectStreamClass that describes the fields in the stream.

Returns:
the descriptor class that describes the serializable fields


"
ObjectOutputStream,annotateClass(Class<?> cl),protected void,Subclasses may implement this method to allow class data to be stored in the stream.,"

annotateClass
protected void annotateClass(Class<?> cl)
                      throws IOException
Subclasses may implement this method to allow class data to be stored in
 the stream. By default this method does nothing.  The corresponding
 method in ObjectInputStream is resolveClass.  This method is called
 exactly once for each unique class in the stream.  The class name and
 signature will have already been written to the stream.  This method may
 make free use of the ObjectOutputStream to save any representation of
 the class it deems suitable (for example, the bytes of the class file).
 The resolveClass method in the corresponding subclass of
 ObjectInputStream must read and use any data or objects written by
 annotateClass.

Parameters:
cl - the class to annotate custom data for
Throws:
IOException - Any exception thrown by the underlying
          OutputStream.


"
ObjectOutputStream,annotateProxyClass(Class<?> cl),protected void,Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes.,"

annotateProxyClass
protected void annotateProxyClass(Class<?> cl)
                           throws IOException
Subclasses may implement this method to store custom data in the stream
 along with descriptors for dynamic proxy classes.

 This method is called exactly once for each unique proxy class
 descriptor in the stream.  The default implementation of this method in
 ObjectOutputStream does nothing.

 The corresponding method in ObjectInputStream is
 resolveProxyClass.  For a given subclass of
 ObjectOutputStream that overrides this method, the
 resolveProxyClass method in the corresponding subclass of
 ObjectInputStream must read any data or objects written by
 annotateProxyClass.

Parameters:
cl - the proxy class to annotate custom data for
Throws:
IOException - any exception thrown by the underlying
          OutputStream
Since:
1.3
See Also:
ObjectInputStream.resolveProxyClass(String[])


"
ObjectOutputStream,close(),void,Closes the stream.,"

close
public void close()
           throws IOException
Closes the stream. This method must be called to release any resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface ObjectOutput
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
ObjectOutputStream,defaultWriteObject(),void,Write the non-static and non-transient fields of the current class to this stream.,"

defaultWriteObject
public void defaultWriteObject()
                        throws IOException
Write the non-static and non-transient fields of the current class to
 this stream.  This may only be called from the writeObject method of the
 class being serialized. It will throw the NotActiveException if it is
 called otherwise.

Throws:
IOException - if I/O errors occur while writing to the underlying
          OutputStream


"
ObjectOutputStream,drain(),protected void,Drain any buffered data in ObjectOutputStream.,"

drain
protected void drain()
              throws IOException
Drain any buffered data in ObjectOutputStream.  Similar to flush but
 does not propagate the flush to the underlying stream.

Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,enableReplaceObject(boolean enable),protected boolean,Enable the stream to do replacement of objects in the stream.,"

enableReplaceObject
protected boolean enableReplaceObject(boolean enable)
                               throws SecurityException
Enable the stream to do replacement of objects in the stream.  When
 enabled, the replaceObject method is called for every object being
 serialized.

 If enable is true, and there is a security manager
 installed, this method first calls the security manager's
 checkPermission method with a
 SerializablePermission(""enableSubstitution"") permission to
 ensure it's ok to enable the stream to do replacement of objects in the
 stream.

Parameters:
enable - boolean parameter to enable replacement of objects
Returns:
the previous setting before this method was invoked
Throws:
SecurityException - if a security manager exists and its
          checkPermission method denies enabling the stream
          to do replacement of objects in the stream.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
SerializablePermission


"
ObjectOutputStream,flush(),void,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream. This will write any buffered output bytes and flush
 through to the underlying stream.

Specified by:
flush in interface Flushable
Specified by:
flush in interface ObjectOutput
Overrides:
flush in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
ObjectOutputStream,putFields(),ObjectOutputStream.PutField,Retrieve the object used to buffer persistent fields to be written to the stream.,"

putFields
public ObjectOutputStream.PutField putFields()
                                      throws IOException
Retrieve the object used to buffer persistent fields to be written to
 the stream.  The fields will be written to the stream when writeFields
 method is called.

Returns:
an instance of the class Putfield that holds the serializable
          fields
Throws:
IOException - if I/O errors occur
Since:
1.2


"
ObjectOutputStream,replaceObject(Object obj),protected Object,This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization.,"

replaceObject
protected Object replaceObject(Object obj)
                        throws IOException
This method will allow trusted subclasses of ObjectOutputStream to
 substitute one object for another during serialization. Replacing
 objects is disabled until enableReplaceObject is called. The
 enableReplaceObject method checks that the stream requesting to do
 replacement can be trusted.  The first occurrence of each object written
 into the serialization stream is passed to replaceObject.  Subsequent
 references to the object are replaced by the object returned by the
 original call to replaceObject.  To ensure that the private state of
 objects is not unintentionally exposed, only trusted streams may use
 replaceObject.

 The ObjectOutputStream.writeObject method takes a parameter of type
 Object (as opposed to type Serializable) to allow for cases where
 non-serializable objects are replaced by serializable ones.

 When a subclass is replacing objects it must insure that either a
 complementary substitution must be made during deserialization or that
 the substituted object is compatible with every field where the
 reference will be stored.  Objects whose type is not a subclass of the
 type of the field or array element abort the serialization by raising an
 exception and the object is not be stored.

 This method is called only once when each object is first
 encountered.  All subsequent references to the object will be redirected
 to the new object. This method should return the object to be
 substituted or the original object.

 Null can be returned as the object to be substituted, but may cause
 NullReferenceException in classes that contain references to the
 original object since they may be expecting an object instead of
 null.

Parameters:
obj - the object to be replaced
Returns:
the alternate object that replaced the specified one
Throws:
IOException - Any exception thrown by the underlying
          OutputStream.


"
ObjectOutputStream,reset(),void,Reset will disregard the state of any objects already written to the stream.,"

reset
public void reset()
           throws IOException
Reset will disregard the state of any objects already written to the
 stream.  The state is reset to be the same as a new ObjectOutputStream.
 The current point in the stream is marked as reset so the corresponding
 ObjectInputStream will be reset at the same point.  Objects previously
 written to the stream will not be referred to as already being in the
 stream.  They will be written to the stream again.

Throws:
IOException - if reset() is invoked while serializing an object.


"
ObjectOutputStream,useProtocolVersion(int version),void,Specify stream protocol version to use when writing the stream.,"

useProtocolVersion
public void useProtocolVersion(int version)
                        throws IOException
Specify stream protocol version to use when writing the stream.

 This routine provides a hook to enable the current version of
 Serialization to write in a format that is backwards compatible to a
 previous version of the stream format.

 Every effort will be made to avoid introducing additional
 backwards incompatibilities; however, sometimes there is no
 other alternative.

Parameters:
version - use ProtocolVersion from java.io.ObjectStreamConstants.
Throws:
IllegalStateException - if called after any objects
          have been serialized.
IllegalArgumentException - if invalid version is passed in.
IOException - if I/O errors occur
Since:
1.2
See Also:
ObjectStreamConstants.PROTOCOL_VERSION_1, 
ObjectStreamConstants.PROTOCOL_VERSION_2


"
ObjectOutputStream,write(byte[] buf),void,Writes an array of bytes.,"

write
public void write(byte[] buf)
           throws IOException
Writes an array of bytes. This method will block until the bytes are
 actually written.

Specified by:
write in interface DataOutput
Specified by:
write in interface ObjectOutput
Overrides:
write in class OutputStream
Parameters:
buf - the data to be written
Throws:
IOException - If an I/O error has occurred.
See Also:
OutputStream.write(byte[], int, int)


"
ObjectOutputStream,"write(byte[] buf, int off, int len)",void,Writes a sub array of bytes.,"

write
public void write(byte[] buf,
                  int off,
                  int len)
           throws IOException
Writes a sub array of bytes.

Specified by:
write in interface DataOutput
Specified by:
write in interface ObjectOutput
Overrides:
write in class OutputStream
Parameters:
buf - the data to be written
off - the start offset in the data
len - the number of bytes that are written
Throws:
IOException - If an I/O error has occurred.


"
ObjectOutputStream,write(int val),void,Writes a byte.,"

write
public void write(int val)
           throws IOException
Writes a byte. This method will block until the byte is actually
 written.

Specified by:
write in interface DataOutput
Specified by:
write in interface ObjectOutput
Specified by:
write in class OutputStream
Parameters:
val - the byte to be written to the stream
Throws:
IOException - If an I/O error has occurred.


"
ObjectOutputStream,writeBoolean(boolean val),void,Writes a boolean.,"

writeBoolean
public void writeBoolean(boolean val)
                  throws IOException
Writes a boolean.

Specified by:
writeBoolean in interface DataOutput
Parameters:
val - the boolean to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeByte(int val),void,Writes an 8 bit byte.,"

writeByte
public void writeByte(int val)
               throws IOException
Writes an 8 bit byte.

Specified by:
writeByte in interface DataOutput
Parameters:
val - the byte value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeBytes(String str),void,Writes a String as a sequence of bytes.,"

writeBytes
public void writeBytes(String str)
                throws IOException
Writes a String as a sequence of bytes.

Specified by:
writeBytes in interface DataOutput
Parameters:
str - the String of bytes to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeChar(int val),void,Writes a 16 bit char.,"

writeChar
public void writeChar(int val)
               throws IOException
Writes a 16 bit char.

Specified by:
writeChar in interface DataOutput
Parameters:
val - the char value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeChars(String str),void,Writes a String as a sequence of chars.,"

writeChars
public void writeChars(String str)
                throws IOException
Writes a String as a sequence of chars.

Specified by:
writeChars in interface DataOutput
Parameters:
str - the String of chars to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeClassDescriptor(ObjectStreamClass desc),protected void,Write the specified class descriptor to the ObjectOutputStream.,"

writeClassDescriptor
protected void writeClassDescriptor(ObjectStreamClass desc)
                             throws IOException
Write the specified class descriptor to the ObjectOutputStream.  Class
 descriptors are used to identify the classes of objects written to the
 stream.  Subclasses of ObjectOutputStream may override this method to
 customize the way in which class descriptors are written to the
 serialization stream.  The corresponding method in ObjectInputStream,
 readClassDescriptor, should then be overridden to
 reconstitute the class descriptor from its custom stream representation.
 By default, this method writes class descriptors according to the format
 defined in the Object Serialization specification.

 Note that this method will only be called if the ObjectOutputStream
 is not using the old serialization stream format (set by calling
 ObjectOutputStream's useProtocolVersion method).  If this
 serialization stream is using the old format
 (PROTOCOL_VERSION_1), the class descriptor will be written
 internally in a manner that cannot be overridden or customized.

Parameters:
desc - class descriptor to write to the stream
Throws:
IOException - If an I/O error has occurred.
Since:
1.3
See Also:
ObjectInputStream.readClassDescriptor(), 
useProtocolVersion(int), 
ObjectStreamConstants.PROTOCOL_VERSION_1


"
ObjectOutputStream,writeDouble(double val),void,Writes a 64 bit double.,"

writeDouble
public void writeDouble(double val)
                 throws IOException
Writes a 64 bit double.

Specified by:
writeDouble in interface DataOutput
Parameters:
val - the double value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeFields(),void,Write the buffered fields to the stream.,"

writeFields
public void writeFields()
                 throws IOException
Write the buffered fields to the stream.

Throws:
IOException - if I/O errors occur while writing to the underlying
          stream
NotActiveException - Called when a classes writeObject method was
          not called to write the state of the object.
Since:
1.2


"
ObjectOutputStream,writeFloat(float val),void,Writes a 32 bit float.,"

writeFloat
public void writeFloat(float val)
                throws IOException
Writes a 32 bit float.

Specified by:
writeFloat in interface DataOutput
Parameters:
val - the float value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeInt(int val),void,Writes a 32 bit int.,"

writeInt
public void writeInt(int val)
              throws IOException
Writes a 32 bit int.

Specified by:
writeInt in interface DataOutput
Parameters:
val - the integer value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeLong(long val),void,Writes a 64 bit long.,"

writeLong
public void writeLong(long val)
               throws IOException
Writes a 64 bit long.

Specified by:
writeLong in interface DataOutput
Parameters:
val - the long value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeObject(Object obj),void,Write the specified object to the ObjectOutputStream.,"

writeObject
public final void writeObject(Object obj)
                       throws IOException
Write the specified object to the ObjectOutputStream.  The class of the
 object, the signature of the class, and the values of the non-transient
 and non-static fields of the class and all of its supertypes are
 written.  Default serialization for a class can be overridden using the
 writeObject and the readObject methods.  Objects referenced by this
 object are written transitively so that a complete equivalent graph of
 objects can be reconstructed by an ObjectInputStream.

 Exceptions are thrown for problems with the OutputStream and for
 classes that should not be serialized.  All exceptions are fatal to the
 OutputStream, which is left in an indeterminate state, and it is up to
 the caller to ignore or recover the stream state.

Specified by:
writeObject in interface ObjectOutput
Parameters:
obj - the object to be written
Throws:
InvalidClassException - Something is wrong with a class used by
          serialization.
NotSerializableException - Some object to be serialized does not
          implement the java.io.Serializable interface.
IOException - Any exception thrown by the underlying
          OutputStream.


"
ObjectOutputStream,writeObjectOverride(Object obj),protected void,Method used by subclasses to override the default writeObject method.,"

writeObjectOverride
protected void writeObjectOverride(Object obj)
                            throws IOException
Method used by subclasses to override the default writeObject method.
 This method is called by trusted subclasses of ObjectInputStream that
 constructed ObjectInputStream using the protected no-arg constructor.
 The subclass is expected to provide an override method with the modifier
 ""final"".

Parameters:
obj - object to be written to the underlying stream
Throws:
IOException - if there are I/O errors while writing to the
          underlying stream
Since:
1.2
See Also:
ObjectOutputStream(), 
writeObject(Object)


"
ObjectOutputStream,writeShort(int val),void,Writes a 16 bit short.,"

writeShort
public void writeShort(int val)
                throws IOException
Writes a 16 bit short.

Specified by:
writeShort in interface DataOutput
Parameters:
val - the short value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeStreamHeader(),protected void,The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream.,"

writeStreamHeader
protected void writeStreamHeader()
                          throws IOException
The writeStreamHeader method is provided so subclasses can append or
 prepend their own header to the stream.  It writes the magic number and
 version to the stream.

Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream,writeUnshared(Object obj),void,"Writes an ""unshared"" object to the ObjectOutputStream.","

writeUnshared
public void writeUnshared(Object obj)
                   throws IOException
Writes an ""unshared"" object to the ObjectOutputStream.  This method is
 identical to writeObject, except that it always writes the given object
 as a new, unique object in the stream (as opposed to a back-reference
 pointing to a previously serialized instance).  Specifically:
 
An object written via writeUnshared is always serialized in the
       same manner as a newly appearing object (an object that has not
       been written to the stream yet), regardless of whether or not the
       object has been written previously.

   If writeObject is used to write an object that has been previously
       written with writeUnshared, the previous writeUnshared operation
       is treated as if it were a write of a separate object.  In other
       words, ObjectOutputStream will never generate back-references to
       object data written by calls to writeUnshared.
 
 While writing an object via writeUnshared does not in itself guarantee a
 unique reference to the object when it is deserialized, it allows a
 single object to be defined multiple times in a stream, so that multiple
 calls to readUnshared by the receiver will not conflict.  Note that the
 rules described above only apply to the base-level object written with
 writeUnshared, and not to any transitively referenced sub-objects in the
 object graph to be serialized.

 ObjectOutputStream subclasses which override this method can only be
 constructed in security contexts possessing the
 ""enableSubclassImplementation"" SerializablePermission; any attempt to
 instantiate such a subclass without this permission will cause a
 SecurityException to be thrown.

Parameters:
obj - object to write to stream
Throws:
NotSerializableException - if an object in the graph to be
          serialized does not implement the Serializable interface
InvalidClassException - if a problem exists with the class of an
          object to be serialized
IOException - if an I/O error occurs during serialization
Since:
1.4


"
ObjectOutputStream,writeUTF(String str),void,Primitive data write of this String in modified UTF-8 format.,"

writeUTF
public void writeUTF(String str)
              throws IOException
Primitive data write of this String in
 modified UTF-8
 format.  Note that there is a
 significant difference between writing a String into the stream as
 primitive data or as an Object. A String instance written by writeObject
 is written into the stream as a String initially. Future writeObject()
 calls write references to the string into the stream.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - the String to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
ObjectOutputStream.PutField,"put(String name, boolean val)",abstract void,Put the value of the named boolean field into the persistent field.,"

put
public abstract void put(String name,
                         boolean val)
Put the value of the named boolean field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 boolean


"
ObjectOutputStream.PutField,"put(String name, byte val)",abstract void,Put the value of the named byte field into the persistent field.,"

put
public abstract void put(String name,
                         byte val)
Put the value of the named byte field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 byte


"
ObjectOutputStream.PutField,"put(String name, char val)",abstract void,Put the value of the named char field into the persistent field.,"

put
public abstract void put(String name,
                         char val)
Put the value of the named char field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 char


"
ObjectOutputStream.PutField,"put(String name, double val)",abstract void,Put the value of the named double field into the persistent field.,"

put
public abstract void put(String name,
                         double val)
Put the value of the named double field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 double


"
ObjectOutputStream.PutField,"put(String name, float val)",abstract void,Put the value of the named float field into the persistent field.,"

put
public abstract void put(String name,
                         float val)
Put the value of the named float field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 float


"
ObjectOutputStream.PutField,"put(String name, int val)",abstract void,Put the value of the named int field into the persistent field.,"

put
public abstract void put(String name,
                         int val)
Put the value of the named int field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 int


"
ObjectOutputStream.PutField,"put(String name, long val)",abstract void,Put the value of the named long field into the persistent field.,"

put
public abstract void put(String name,
                         long val)
Put the value of the named long field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 long


"
ObjectOutputStream.PutField,"put(String name, Object val)",abstract void,Put the value of the named Object field into the persistent field.,"

put
public abstract void put(String name,
                         Object val)
Put the value of the named Object field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
         (which may be null)
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not a
 reference type


"
ObjectOutputStream.PutField,"put(String name, short val)",abstract void,Put the value of the named short field into the persistent field.,"

put
public abstract void put(String name,
                         short val)
Put the value of the named short field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 short


"
ObjectOutputStream.PutField,write(ObjectOutput out),abstract void,"Deprecated. This method does not write the values contained by this PutField object in a proper format, and may result in corruption of the serialization stream. The correct way to write PutField data is by calling the ObjectOutputStream.writeFields() method.","

write
@Deprecated
public abstract void write(ObjectOutput out)
                                throws IOException
Deprecated. This method does not write the values contained by this
         PutField object in a proper format, and may
         result in corruption of the serialization stream.  The
         correct way to write PutField data is by
         calling the ObjectOutputStream.writeFields()
         method.
Write the data and fields to the specified ObjectOutput stream,
 which must be the same stream that produced this
 PutField object.

Parameters:
out - the stream to write the data and fields to
Throws:
IOException - if I/O errors occur while writing to the
         underlying stream
IllegalArgumentException - if the specified stream is not
         the same stream that produced this PutField
         object


"
ObjectStreamClass,forClass(),Class<?>,Return the class in the local VM that this version is mapped to.,"

forClass
public Class<?> forClass()
Return the class in the local VM that this version is mapped to.  Null
 is returned if there is no corresponding local class.

Returns:
the Class instance that this descriptor represents


"
ObjectStreamClass,getField(String name),ObjectStreamField,Get the field of this class by name.,"

getField
public ObjectStreamField getField(String name)
Get the field of this class by name.

Parameters:
name - the name of the data field to look for
Returns:
The ObjectStreamField object of the named field or null if
          there is no such named field.


"
ObjectStreamClass,getFields(),ObjectStreamField[],Return an array of the fields of this serializable class.,"

getFields
public ObjectStreamField[] getFields()
Return an array of the fields of this serializable class.

Returns:
an array containing an element for each persistent field of
          this class. Returns an array of length zero if there are no
          fields.
Since:
1.2


"
ObjectStreamClass,getName(),String,Returns the name of the class described by this descriptor.,"

getName
public String getName()
Returns the name of the class described by this descriptor.
 This method returns the name of the class in the format that
 is used by the Class.getName() method.

Returns:
a string representing the name of the class


"
ObjectStreamClass,getSerialVersionUID(),long,Return the serialVersionUID for this class.,"

getSerialVersionUID
public long getSerialVersionUID()
Return the serialVersionUID for this class.  The serialVersionUID
 defines a set of classes all with the same name that have evolved from a
 common root class and agree to be serialized and deserialized using a
 common format.  NonSerializable classes have a serialVersionUID of 0L.

Returns:
the SUID of the class described by this descriptor


"
ObjectStreamClass,lookup(Class<?> cl),static ObjectStreamClass,Find the descriptor for a class that can be serialized.,"

lookup
public static ObjectStreamClass lookup(Class<?> cl)
Find the descriptor for a class that can be serialized.  Creates an
 ObjectStreamClass instance if one does not exist yet for class. Null is
 returned if the specified class does not implement java.io.Serializable
 or java.io.Externalizable.

Parameters:
cl - class for which to get the descriptor
Returns:
the class descriptor for the specified class


"
ObjectStreamClass,lookupAny(Class<?> cl),static ObjectStreamClass,"Returns the descriptor for any class, regardless of whether it implements Serializable.","

lookupAny
public static ObjectStreamClass lookupAny(Class<?> cl)
Returns the descriptor for any class, regardless of whether it
 implements Serializable.

Parameters:
cl - class for which to get the descriptor
Returns:
the class descriptor for the specified class
Since:
1.6


"
ObjectStreamClass,toString(),String,Return a string describing this ObjectStreamClass.,"

toString
public String toString()
Return a string describing this ObjectStreamClass.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
ObjectStreamField,compareTo(Object obj),int,Compare this field with another ObjectStreamField.,"

compareTo
public int compareTo(Object obj)
Compare this field with another ObjectStreamField.  Return
 -1 if this is smaller, 0 if equal, 1 if greater.  Types that are
 primitives are ""smaller"" than object types.  If equal, the field names
 are compared.

Specified by:
compareTo in interface Comparable<Object>
Parameters:
obj - the object to be compared.
Returns:
a negative integer, zero, or a positive integer as this object
          is less than, equal to, or greater than the specified object.


"
ObjectStreamField,getName(),String,Get the name of this field.,"

getName
public String getName()
Get the name of this field.

Returns:
a String representing the name of the serializable
          field


"
ObjectStreamField,getOffset(),int,Offset of field within instance data.,"

getOffset
public int getOffset()
Offset of field within instance data.

Returns:
the offset of this field
See Also:
setOffset(int)


"
ObjectStreamField,getType(),Class<?>,Get the type of the field.,"

getType
public Class<?> getType()
Get the type of the field.  If the type is non-primitive and this
 ObjectStreamField was obtained from a deserialized ObjectStreamClass instance, then Object.class is returned.
 Otherwise, the Class object for the type of the field is
 returned.

Returns:
a Class object representing the type of the
          serializable field


"
ObjectStreamField,getTypeCode(),char,Returns character encoding of field type.,"

getTypeCode
public char getTypeCode()
Returns character encoding of field type.  The encoding is as follows:
 
 B            byte
 C            char
 D            double
 F            float
 I            int
 J            long
 L            class or interface
 S            short
 Z            boolean
 [            array
 

Returns:
the typecode of the serializable field


"
ObjectStreamField,getTypeString(),String,Return the JVM type signature.,"

getTypeString
public String getTypeString()
Return the JVM type signature.

Returns:
null if this field has a primitive type.


"
ObjectStreamField,isPrimitive(),boolean,Return true if this field has a primitive type.,"

isPrimitive
public boolean isPrimitive()
Return true if this field has a primitive type.

Returns:
true if and only if this field corresponds to a primitive type


"
ObjectStreamField,isUnshared(),boolean,Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared.,"

isUnshared
public boolean isUnshared()
Returns boolean value indicating whether or not the serializable field
 represented by this ObjectStreamField instance is unshared.

Returns:
true if this field is unshared
Since:
1.4


"
ObjectStreamField,setOffset(int offset),protected void,Offset within instance data.,"

setOffset
protected void setOffset(int offset)
Offset within instance data.

Parameters:
offset - the offset of the field
See Also:
getOffset()


"
ObjectStreamField,toString(),String,Return a string that describes this field.,"

toString
public String toString()
Return a string that describes this field.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
OutputStream,close(),void,Closes this output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this output stream and releases any system resources
 associated with this stream. The general contract of close
 is that it closes the output stream. A closed stream cannot perform
 output operations and cannot be reopened.
 
 The close method of OutputStream does nothing.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
OutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out. The general contract of flush is
 that calling it is an indication that, if any bytes previously
 written have been buffered by the implementation of the output
 stream, such bytes should immediately be written to their
 intended destination.
 
 If the intended destination of this stream is an abstraction provided by
 the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.
 
 The flush method of OutputStream does nothing.

Specified by:
flush in interface Flushable
Throws:
IOException - if an I/O error occurs.


"
OutputStream,write(byte[] b),void,Writes b.length bytes from the specified byte array to this output stream.,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this output stream. The general contract for write(b)
 is that it should have exactly the same effect as the call
 write(b, 0, b.length).

Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
OutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this output stream.
 The general contract for write(b, off, len) is that
 some of the bytes in the array b are written to the
 output stream in order; element b[off] is the first
 byte written and b[off+len-1] is the last byte written
 by this operation.
 
 The write method of OutputStream calls
 the write method of one argument on each of the bytes to be
 written out. Subclasses are encouraged to override this method and
 provide a more efficient implementation.
 
 If b is null, a
 NullPointerException is thrown.
 
 If off is negative, or len is negative, or
 off+len is greater than the length of the array
 b, then an IndexOutOfBoundsException is thrown.

Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException is thrown if the output
             stream is closed.


"
OutputStream,write(int b),abstract void,Writes the specified byte to this output stream.,"

write
public abstract void write(int b)
                    throws IOException
Writes the specified byte to this output stream. The general
 contract for write is that one byte is written
 to the output stream. The byte to be written is the eight
 low-order bits of the argument b. The 24
 high-order bits of b are ignored.
 
 Subclasses of OutputStream must provide an
 implementation for this method.

Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException may be thrown if the
             output stream has been closed.


"
OutputStreamWriter,close(),void,"Closes the stream, flushing it first.","

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
OutputStreamWriter,flush(),void,Flushes the stream.,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
OutputStreamWriter,getEncoding(),String,Returns the name of the character encoding being used by this stream.,"

getEncoding
public String getEncoding()
Returns the name of the character encoding being used by this stream.

  If the encoding has an historical name then that name is returned;
 otherwise the encoding's canonical name is returned.

  If this instance was created with the OutputStreamWriter(OutputStream, String) constructor then the returned
 name, being unique for the encoding, may differ from the name passed to
 the constructor.  This method may return null if the stream has
 been closed. 

Returns:
The historical name of this encoding, or possibly
         null if the stream has been closed
See Also:
Charset


"
OutputStreamWriter,"write(char[] cbuf, int off, int len)",void,Writes a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Buffer of characters
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
OutputStreamWriter,write(int c),void,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
OutputStreamWriter,"write(String str, int off, int len)",void,Writes a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Overrides:
write in class Writer
Parameters:
str - A String
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
PipedInputStream,available(),int,Returns the number of bytes that can be read from this input stream without blocking.,"

available
public int available()
              throws IOException
Returns the number of bytes that can be read from this input
 stream without blocking.

Overrides:
available in class InputStream
Returns:
the number of bytes that can be read from this input stream
         without blocking, or 0 if this input stream has been
         closed by invoking its close() method, or if the pipe
         is unconnected, or
           broken.
Throws:
IOException - if an I/O error occurs.
Since:
JDK1.0.2


"
PipedInputStream,close(),void,Closes this piped input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this piped input stream and releases any system resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
PipedInputStream,connect(PipedOutputStream src),void,Causes this piped input stream to be connected to the piped output stream src.,"

connect
public void connect(PipedOutputStream src)
             throws IOException
Causes this piped input stream to be connected
 to the piped  output stream src.
 If this object is already connected to some
 other piped output  stream, an IOException
 is thrown.
 
 If src is an
 unconnected piped output stream and snk
 is an unconnected piped input stream, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped output stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
PipedInputStream,read(),int,Reads the next byte of data from this piped input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this piped input stream. The
 value byte is returned as an int in the range
 0 to 255.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           unconnected,
            broken, closed,
           or if an I/O error occurs.


"
PipedInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this piped input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this piped input
 stream into an array of bytes. Less than len bytes
 will be read if the end of the data stream is reached or if
 len exceeds the pipe's buffer size.
 If len  is zero, then no bytes are read and 0 is returned;
 otherwise, the method blocks until at least 1 byte of input is
 available, end of the stream has been detected, or an exception is
 thrown.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if the pipe is  broken,
           unconnected,
           closed, or if an I/O error occurs.
See Also:
InputStream.read()


"
PipedInputStream,receive(int b),protected void,Receives a byte of data.,"

receive
protected void receive(int b)
                throws IOException
Receives a byte of data.  This method will block if no input is
 available.

Parameters:
b - the byte being received
Throws:
IOException - If the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.
Since:
JDK1.1


"
PipedOutputStream,close(),void,Closes this piped output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this piped output stream and releases any system resources
 associated with this stream. This stream may no longer be used for
 writing bytes.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
PipedOutputStream,connect(PipedInputStream snk),void,Connects this piped output stream to a receiver.,"

connect
public void connect(PipedInputStream snk)
             throws IOException
Connects this piped output stream to a receiver. If this object
 is already connected to some other piped input stream, an
 IOException is thrown.
 
 If snk is an unconnected piped input stream and
 src is an unconnected piped output stream, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped input stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
PipedOutputStream,flush(),void,Flushes this output stream and forces any buffered output bytes to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out.
 This will notify any readers that bytes are waiting in the pipe.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
PipedOutputStream,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this piped output stream.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this piped output stream.
 This method blocks until all the bytes are written to the output
 stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
PipedOutputStream,write(int b),void,Writes the specified byte to the piped output stream.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to the piped output stream.
 
 Implements the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
PipedReader,close(),void,Closes this piped stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this piped stream and releases any system resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - if an I/O error occurs.


"
PipedReader,connect(PipedWriter src),void,Causes this piped reader to be connected to the piped writer src.,"

connect
public void connect(PipedWriter src)
             throws IOException
Causes this piped reader to be connected
 to the piped  writer src.
 If this object is already connected to some
 other piped writer, an IOException
 is thrown.
 
 If src is an
 unconnected piped writer and snk
 is an unconnected piped reader, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped writer to connect to.
Throws:
IOException - if an I/O error occurs.


"
PipedReader,read(),int,Reads the next character of data from this piped stream.,"

read
public int read()
         throws IOException
Reads the next character of data from this piped stream.
 If no character is available because the end of the stream
 has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of
 the stream is detected, or an exception is thrown.

Overrides:
read in class Reader
Returns:
the next character of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed,
          or an I/O error occurs.


"
PipedReader,"read(char[] cbuf, int off, int len)",int,Reads up to len characters of data from this piped stream into an array of characters.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads up to len characters of data from this piped
 stream into an array of characters. Less than len characters
 will be read if the end of the data stream is reached or if
 len exceeds the pipe's buffer size. This method
 blocks until at least one character of input is available.

Specified by:
read in class Reader
Parameters:
cbuf - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of characters read.
Returns:
the total number of characters read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if the pipe is
                   broken,
                  unconnected, closed,
                  or an I/O error occurs.


"
PipedReader,ready(),boolean,Tell whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tell whether this stream is ready to be read.  A piped character
 stream is ready if the circular buffer is not empty.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - if the pipe is
                   broken,
                  unconnected, or closed.


"
PipedWriter,close(),void,Closes this piped output stream and releases any system resources associated with this stream.,"

close
public void close()
           throws IOException
Closes this piped output stream and releases any system resources
 associated with this stream. This stream may no longer be used for
 writing characters.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - if an I/O error occurs.


"
PipedWriter,connect(PipedReader snk),void,Connects this piped writer to a receiver.,"

connect
public void connect(PipedReader snk)
             throws IOException
Connects this piped writer to a receiver. If this object
 is already connected to some other piped reader, an
 IOException is thrown.
 
 If snk is an unconnected piped reader and
 src is an unconnected piped writer, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped reader to connect to.
Throws:
IOException - if an I/O error occurs.


"
PipedWriter,flush(),void,Flushes this output stream and forces any buffered output characters to be written out.,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output characters
 to be written out.
 This will notify any readers that characters are waiting in the pipe.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - if the pipe is closed, or an I/O error occurs.


"
PipedWriter,"write(char[] cbuf, int off, int len)",void,Writes len characters from the specified character array starting at offset off to this piped output stream.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes len characters from the specified character array
 starting at offset off to this piped output stream.
 This method blocks until all the characters are written to the output
 stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.

Specified by:
write in class Writer
Parameters:
cbuf - the data.
off - the start offset in the data.
len - the number of characters to write.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
PipedWriter,write(int c),void,Writes the specified char to the piped output stream.,"

write
public void write(int c)
           throws IOException
Writes the specified char to the piped output stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.
 
 Implements the write method of Writer.

Overrides:
write in class Writer
Parameters:
c - the char to be written.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
PrintStream,append(char c),PrintStream,Appends the specified character to this output stream.,"

append
public PrintStream append(char c)
Appends the specified character to this output stream.

  An invocation of this method of the form out.append(c)
 behaves in exactly the same way as the invocation

 
     out.print(c) 

Specified by:
append in interface Appendable
Parameters:
c - The 16-bit character to append
Returns:
This output stream
Since:
1.5


"
PrintStream,append(CharSequence csq),PrintStream,Appends the specified character sequence to this output stream.,"

append
public PrintStream append(CharSequence csq)
Appends the specified character sequence to this output stream.

  An invocation of this method of the form out.append(csq)
 behaves in exactly the same way as the invocation

 
     out.print(csq.toString()) 
 Depending on the specification of toString for the
 character sequence csq, the entire sequence may not be
 appended.  For instance, invoking then toString method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

Specified by:
append in interface Appendable
Parameters:
csq - The character sequence to append.  If csq is
         null, then the four characters ""null"" are
         appended to this output stream.
Returns:
This output stream
Since:
1.5


"
PrintStream,"append(CharSequence csq, int start, int end)",PrintStream,Appends a subsequence of the specified character sequence to this output stream.,"

append
public PrintStream append(CharSequence csq,
                          int start,
                          int end)
Appends a subsequence of the specified character sequence to this output
 stream.

  An invocation of this method of the form out.append(csq, start,
 end) when csq is not null, behaves in
 exactly the same way as the invocation

 
     out.print(csq.subSequence(start, end).toString()) 

Specified by:
append in interface Appendable
Parameters:
csq - The character sequence from which a subsequence will be
         appended.  If csq is null, then characters
         will be appended as if csq contained the four
         characters ""null"".
start - The index of the first character in the subsequence
end - The index of the character following the last character in the
         subsequence
Returns:
This output stream
Throws:
IndexOutOfBoundsException - If start or end are negative, start
          is greater than end, or end is greater than
          csq.length()
Since:
1.5


"
PrintStream,checkError(),boolean,Flushes the stream and checks its error state.,"

checkError
public boolean checkError()
Flushes the stream and checks its error state. The internal error state
 is set to true when the underlying output stream throws an
 IOException other than InterruptedIOException,
 and when the setError method is invoked.  If an operation
 on the underlying output stream throws an
 InterruptedIOException, then the PrintStream
 converts the exception back into an interrupt by doing:
 
     Thread.currentThread().interrupt();
 
 or the equivalent.

Returns:
true if and only if this stream has encountered an
         IOException other than
         InterruptedIOException, or the
         setError method has been invoked


"
PrintStream,clearError(),protected void,Clears the internal error state of this stream.,"

clearError
protected void clearError()
Clears the internal error state of this stream.

  This method will cause subsequent invocations of checkError() to return false until another write
 operation fails and invokes setError().

Since:
1.6


"
PrintStream,close(),void,Closes the stream.,"

close
public void close()
Closes the stream.  This is done by flushing the stream and then closing
 the underlying output stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterOutputStream
See Also:
OutputStream.close()


"
PrintStream,flush(),void,Flushes the stream.,"

flush
public void flush()
Flushes the stream.  This is done by writing any buffered output bytes to
 the underlying output stream and then flushing that stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
See Also:
OutputStream.flush()


"
PrintStream,"format(Locale l, String format, Object... args)",PrintStream,Writes a formatted string to this output stream using the specified format string and arguments.,"

format
public PrintStream format(Locale l,
                          String format,
                          Object... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.

Parameters:
l - The locale to apply during
         formatting.  If l is null then no localization
         is applied.
format - A format string as described in Format string syntax
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This output stream
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintStream,"format(String format, Object... args)",PrintStream,Writes a formatted string to this output stream using the specified format string and arguments.,"

format
public PrintStream format(String format,
                          Object... args)
Writes a formatted string to this output stream using the specified
 format string and arguments.

  The locale always used is the one returned by Locale.getDefault(), regardless of any
 previous invocations of other formatting methods on this object.

Parameters:
format - A format string as described in Format string syntax
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This output stream
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintStream,print(boolean b),void,Prints a boolean value.,"

print
public void print(boolean b)
Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
b - The boolean to be printed


"
PrintStream,print(char c),void,Prints a character.,"

print
public void print(char c)
Prints a character.  The character is translated into one or more bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
c - The char to be printed


"
PrintStream,print(char[] s),void,Prints an array of characters.,"

print
public void print(char[] s)
Prints an array of characters.  The characters are converted into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
s - The array of chars to be printed
Throws:
NullPointerException - If s is null


"
PrintStream,print(double d),void,Prints a double-precision floating-point number.,"

print
public void print(double d)
Prints a double-precision floating-point number.  The string produced by
 String.valueOf(double) is translated into
 bytes according to the platform's default character encoding, and these
 bytes are written in exactly the manner of the write(int) method.

Parameters:
d - The double to be printed
See Also:
Double.toString(double)


"
PrintStream,print(float f),void,Prints a floating-point number.,"

print
public void print(float f)
Prints a floating-point number.  The string produced by String.valueOf(float) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
f - The float to be printed
See Also:
Float.toString(float)


"
PrintStream,print(int i),void,Prints an integer.,"

print
public void print(int i)
Prints an integer.  The string produced by String.valueOf(int) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
i - The int to be printed
See Also:
Integer.toString(int)


"
PrintStream,print(long l),void,Prints a long integer.,"

print
public void print(long l)
Prints a long integer.  The string produced by String.valueOf(long) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
l - The long to be printed
See Also:
Long.toString(long)


"
PrintStream,print(Object obj),void,Prints an object.,"

print
public void print(Object obj)
Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
obj - The Object to be printed
See Also:
Object.toString()


"
PrintStream,print(String s),void,Prints a string.,"

print
public void print(String s)
Prints a string.  If the argument is null then the string
 ""null"" is printed.  Otherwise, the string's characters are
 converted into bytes according to the platform's default character
 encoding, and these bytes are written in exactly the manner of the
 write(int) method.

Parameters:
s - The String to be printed


"
PrintStream,"printf(Locale l, String format, Object... args)",PrintStream,A convenience method to write a formatted string to this output stream using the specified format string and arguments.,"

printf
public PrintStream printf(Locale l,
                          String format,
                          Object... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.

  An invocation of this method of the form out.printf(l, format,
 args) behaves in exactly the same way as the invocation

 
     out.format(l, format, args) 

Parameters:
l - The locale to apply during
         formatting.  If l is null then no localization
         is applied.
format - A format string as described in Format string syntax
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This output stream
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintStream,"printf(String format, Object... args)",PrintStream,A convenience method to write a formatted string to this output stream using the specified format string and arguments.,"

printf
public PrintStream printf(String format,
                          Object... args)
A convenience method to write a formatted string to this output stream
 using the specified format string and arguments.

  An invocation of this method of the form out.printf(format,
 args) behaves in exactly the same way as the invocation

 
     out.format(format, args) 

Parameters:
format - A format string as described in Format string syntax
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This output stream
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintStream,println(),void,Terminates the current line by writing the line separator string.,"

println
public void println()
Terminates the current line by writing the line separator string.  The
 line separator string is defined by the system property
 line.separator, and is not necessarily a single newline
 character ('\n').

"
PrintStream,println(boolean x),void,Prints a boolean and then terminate the line.,"

println
public void println(boolean x)
Prints a boolean and then terminate the line.  This method behaves as
 though it invokes print(boolean) and then
 println().

Parameters:
x - The boolean to be printed


"
PrintStream,println(char x),void,Prints a character and then terminate the line.,"

println
public void println(char x)
Prints a character and then terminate the line.  This method behaves as
 though it invokes print(char) and then
 println().

Parameters:
x - The char to be printed.


"
PrintStream,println(char[] x),void,Prints an array of characters and then terminate the line.,"

println
public void println(char[] x)
Prints an array of characters and then terminate the line.  This method
 behaves as though it invokes print(char[]) and
 then println().

Parameters:
x - an array of chars to print.


"
PrintStream,println(double x),void,Prints a double and then terminate the line.,"

println
public void println(double x)
Prints a double and then terminate the line.  This method behaves as
 though it invokes print(double) and then
 println().

Parameters:
x - The double to be printed.


"
PrintStream,println(float x),void,Prints a float and then terminate the line.,"

println
public void println(float x)
Prints a float and then terminate the line.  This method behaves as
 though it invokes print(float) and then
 println().

Parameters:
x - The float to be printed.


"
PrintStream,println(int x),void,Prints an integer and then terminate the line.,"

println
public void println(int x)
Prints an integer and then terminate the line.  This method behaves as
 though it invokes print(int) and then
 println().

Parameters:
x - The int to be printed.


"
PrintStream,println(long x),void,Prints a long and then terminate the line.,"

println
public void println(long x)
Prints a long and then terminate the line.  This method behaves as
 though it invokes print(long) and then
 println().

Parameters:
x - a The long to be printed.


"
PrintStream,println(Object x),void,Prints an Object and then terminate the line.,"

println
public void println(Object x)
Prints an Object and then terminate the line.  This method calls
 at first String.valueOf(x) to get the printed object's string value,
 then behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The Object to be printed.


"
PrintStream,println(String x),void,Prints a String and then terminate the line.,"

println
public void println(String x)
Prints a String and then terminate the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The String to be printed.


"
PrintStream,setError(),protected void,Sets the error state of the stream to true.,"

setError
protected void setError()
Sets the error state of the stream to true.

  This method will cause subsequent invocations of checkError() to return true until clearError() is invoked.

Since:
JDK1.1


"
PrintStream,"write(byte[] buf, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this stream.,"

write
public void write(byte[] buf,
                  int off,
                  int len)
Writes len bytes from the specified byte array starting at
 offset off to this stream.  If automatic flushing is
 enabled then the flush method will be invoked.

  Note that the bytes will be written as given; to write characters
 that will be translated according to the platform's default character
 encoding, use the print(char) or println(char)
 methods.

Overrides:
write in class FilterOutputStream
Parameters:
buf - A byte array
off - Offset from which to start taking bytes
len - Number of bytes to write
See Also:
FilterOutputStream.write(int)


"
PrintStream,write(int b),void,Writes the specified byte to this stream.,"

write
public void write(int b)
Writes the specified byte to this stream.  If the byte is a newline and
 automatic flushing is enabled then the flush method will be
 invoked.

  Note that the byte is written as given; to write a character that
 will be translated according to the platform's default character
 encoding, use the print(char) or println(char)
 methods.

Overrides:
write in class FilterOutputStream
Parameters:
b - The byte to be written
See Also:
print(char), 
println(char)


"
PrintWriter,append(char c),PrintWriter,Appends the specified character to this writer.,"

append
public PrintWriter append(char c)
Appends the specified character to this writer.

  An invocation of this method of the form out.append(c)
 behaves in exactly the same way as the invocation

 
     out.write(c) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
c - The 16-bit character to append
Returns:
This writer
Since:
1.5


"
PrintWriter,append(CharSequence csq),PrintWriter,Appends the specified character sequence to this writer.,"

append
public PrintWriter append(CharSequence csq)
Appends the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq)
 behaves in exactly the same way as the invocation

 
     out.write(csq.toString()) 
 Depending on the specification of toString for the
 character sequence csq, the entire sequence may not be
 appended. For instance, invoking the toString method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence to append.  If csq is
         null, then the four characters ""null"" are
         appended to this writer.
Returns:
This writer
Since:
1.5


"
PrintWriter,"append(CharSequence csq, int start, int end)",PrintWriter,Appends a subsequence of the specified character sequence to this writer.,"

append
public PrintWriter append(CharSequence csq,
                          int start,
                          int end)
Appends a subsequence of the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq, start,
 end) when csq is not null, behaves in
 exactly the same way as the invocation

 
     out.write(csq.subSequence(start, end).toString()) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence from which a subsequence will be
         appended.  If csq is null, then characters
         will be appended as if csq contained the four
         characters ""null"".
start - The index of the first character in the subsequence
end - The index of the character following the last character in the
         subsequence
Returns:
This writer
Throws:
IndexOutOfBoundsException - If start or end are negative, start
          is greater than end, or end is greater than
          csq.length()
Since:
1.5


"
PrintWriter,checkError(),boolean,Flushes the stream if it's not closed and checks its error state.,"

checkError
public boolean checkError()
Flushes the stream if it's not closed and checks its error state.

Returns:
true if the print stream has encountered an error,
          either on the underlying output stream or during a format
          conversion.


"
PrintWriter,clearError(),protected void,Clears the error state of this stream.,"

clearError
protected void clearError()
Clears the error state of this stream.

  This method will cause subsequent invocations of checkError() to return false until another write
 operation fails and invokes setError().

Since:
1.6


"
PrintWriter,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
Closes the stream and releases any system resources associated
 with it. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
See Also:
checkError()


"
PrintWriter,flush(),void,Flushes the stream.,"

flush
public void flush()
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
See Also:
checkError()


"
PrintWriter,"format(Locale l, String format, Object... args)",PrintWriter,Writes a formatted string to this writer using the specified format string and arguments.,"

format
public PrintWriter format(Locale l,
                          String format,
                          Object... args)
Writes a formatted string to this writer using the specified format
 string and arguments.  If automatic flushing is enabled, calls to this
 method will flush the output buffer.

Parameters:
l - The locale to apply during
         formatting.  If l is null then no localization
         is applied.
format - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This writer
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintWriter,"format(String format, Object... args)",PrintWriter,Writes a formatted string to this writer using the specified format string and arguments.,"

format
public PrintWriter format(String format,
                          Object... args)
Writes a formatted string to this writer using the specified format
 string and arguments.  If automatic flushing is enabled, calls to this
 method will flush the output buffer.

  The locale always used is the one returned by Locale.getDefault(), regardless of any
 previous invocations of other formatting methods on this object.

Parameters:
format - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This writer
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          Formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintWriter,print(boolean b),void,Prints a boolean value.,"

print
public void print(boolean b)
Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int) method.

Parameters:
b - The boolean to be printed


"
PrintWriter,print(char c),void,Prints a character.,"

print
public void print(char c)
Prints a character.  The character is translated into one or more bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int) method.

Parameters:
c - The char to be printed


"
PrintWriter,print(char[] s),void,Prints an array of characters.,"

print
public void print(char[] s)
Prints an array of characters.  The characters are converted into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
s - The array of chars to be printed
Throws:
NullPointerException - If s is null


"
PrintWriter,print(double d),void,Prints a double-precision floating-point number.,"

print
public void print(double d)
Prints a double-precision floating-point number.  The string produced by
 String.valueOf(double) is translated into
 bytes according to the platform's default character encoding, and these
 bytes are written in exactly the manner of the write(int) method.

Parameters:
d - The double to be printed
See Also:
Double.toString(double)


"
PrintWriter,print(float f),void,Prints a floating-point number.,"

print
public void print(float f)
Prints a floating-point number.  The string produced by String.valueOf(float) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
f - The float to be printed
See Also:
Float.toString(float)


"
PrintWriter,print(int i),void,Prints an integer.,"

print
public void print(int i)
Prints an integer.  The string produced by String.valueOf(int) is translated into bytes according
 to the platform's default character encoding, and these bytes are
 written in exactly the manner of the write(int)
 method.

Parameters:
i - The int to be printed
See Also:
Integer.toString(int)


"
PrintWriter,print(long l),void,Prints a long integer.,"

print
public void print(long l)
Prints a long integer.  The string produced by String.valueOf(long) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
l - The long to be printed
See Also:
Long.toString(long)


"
PrintWriter,print(Object obj),void,Prints an object.,"

print
public void print(Object obj)
Prints an object.  The string produced by the String.valueOf(Object) method is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the write(int)
 method.

Parameters:
obj - The Object to be printed
See Also:
Object.toString()


"
PrintWriter,print(String s),void,Prints a string.,"

print
public void print(String s)
Prints a string.  If the argument is null then the string
 ""null"" is printed.  Otherwise, the string's characters are
 converted into bytes according to the platform's default character
 encoding, and these bytes are written in exactly the manner of the
 write(int) method.

Parameters:
s - The String to be printed


"
PrintWriter,"printf(Locale l, String format, Object... args)",PrintWriter,A convenience method to write a formatted string to this writer using the specified format string and arguments.,"

printf
public PrintWriter printf(Locale l,
                          String format,
                          Object... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.  If automatic flushing is
 enabled, calls to this method will flush the output buffer.

  An invocation of this method of the form out.printf(l, format,
 args) behaves in exactly the same way as the invocation

 
     out.format(l, format, args) 

Parameters:
l - The locale to apply during
         formatting.  If l is null then no localization
         is applied.
format - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This writer
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintWriter,"printf(String format, Object... args)",PrintWriter,A convenience method to write a formatted string to this writer using the specified format string and arguments.,"

printf
public PrintWriter printf(String format,
                          Object... args)
A convenience method to write a formatted string to this writer using
 the specified format string and arguments.  If automatic flushing is
 enabled, calls to this method will flush the output buffer.

  An invocation of this method of the form out.printf(format,
 args) behaves in exactly the same way as the invocation

 
     out.format(format, args) 

Parameters:
format - A format string as described in Format string syntax.
args - Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         The Java™ Virtual Machine Specification.
         The behaviour on a
         null argument depends on the conversion.
Returns:
This writer
Throws:
IllegalFormatException - If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the Details section of the
          formatter class specification.
NullPointerException - If the format is null
Since:
1.5


"
PrintWriter,println(),void,Terminates the current line by writing the line separator string.,"

println
public void println()
Terminates the current line by writing the line separator string.  The
 line separator string is defined by the system property
 line.separator, and is not necessarily a single newline
 character ('\n').

"
PrintWriter,println(boolean x),void,Prints a boolean value and then terminates the line.,"

println
public void println(boolean x)
Prints a boolean value and then terminates the line.  This method behaves
 as though it invokes print(boolean) and then
 println().

Parameters:
x - the boolean value to be printed


"
PrintWriter,println(char x),void,Prints a character and then terminates the line.,"

println
public void println(char x)
Prints a character and then terminates the line.  This method behaves as
 though it invokes print(char) and then println().

Parameters:
x - the char value to be printed


"
PrintWriter,println(char[] x),void,Prints an array of characters and then terminates the line.,"

println
public void println(char[] x)
Prints an array of characters and then terminates the line.  This method
 behaves as though it invokes print(char[]) and then
 println().

Parameters:
x - the array of char values to be printed


"
PrintWriter,println(double x),void,Prints a double-precision floating-point number and then terminates the line.,"

println
public void println(double x)
Prints a double-precision floating-point number and then terminates the
 line.  This method behaves as though it invokes print(double) and then println().

Parameters:
x - the double value to be printed


"
PrintWriter,println(float x),void,Prints a floating-point number and then terminates the line.,"

println
public void println(float x)
Prints a floating-point number and then terminates the line.  This method
 behaves as though it invokes print(float) and then
 println().

Parameters:
x - the float value to be printed


"
PrintWriter,println(int x),void,Prints an integer and then terminates the line.,"

println
public void println(int x)
Prints an integer and then terminates the line.  This method behaves as
 though it invokes print(int) and then println().

Parameters:
x - the int value to be printed


"
PrintWriter,println(long x),void,Prints a long integer and then terminates the line.,"

println
public void println(long x)
Prints a long integer and then terminates the line.  This method behaves
 as though it invokes print(long) and then
 println().

Parameters:
x - the long value to be printed


"
PrintWriter,println(Object x),void,Prints an Object and then terminates the line.,"

println
public void println(Object x)
Prints an Object and then terminates the line.  This method calls
 at first String.valueOf(x) to get the printed object's string value,
 then behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The Object to be printed.


"
PrintWriter,println(String x),void,Prints a String and then terminates the line.,"

println
public void println(String x)
Prints a String and then terminates the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - the String value to be printed


"
PrintWriter,setError(),protected void,Indicates that an error has occurred.,"

setError
protected void setError()
Indicates that an error has occurred.

  This method will cause subsequent invocations of checkError() to return true until clearError() is invoked.

"
PrintWriter,write(char[] buf),void,Writes an array of characters.,"

write
public void write(char[] buf)
Writes an array of characters.  This method cannot be inherited from the
 Writer class because it must suppress I/O exceptions.

Overrides:
write in class Writer
Parameters:
buf - Array of characters to be written


"
PrintWriter,"write(char[] buf, int off, int len)",void,Writes A Portion of an array of characters.,"

write
public void write(char[] buf,
                  int off,
                  int len)
Writes A Portion of an array of characters.

Specified by:
write in class Writer
Parameters:
buf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write


"
PrintWriter,write(int c),void,Writes a single character.,"

write
public void write(int c)
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written.


"
PrintWriter,write(String s),void,Writes a string.,"

write
public void write(String s)
Writes a string.  This method cannot be inherited from the Writer class
 because it must suppress I/O exceptions.

Overrides:
write in class Writer
Parameters:
s - String to be written


"
PrintWriter,"write(String s, int off, int len)",void,Writes a portion of a string.,"

write
public void write(String s,
                  int off,
                  int len)
Writes a portion of a string.

Overrides:
write in class Writer
Parameters:
s - A String
off - Offset from which to start writing characters
len - Number of characters to write


"
PushbackInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.

  The method returns the sum of the number of bytes that have been
 pushed back and the value returned by available.

Overrides:
available in class FilterInputStream
Returns:
the number of bytes that can be read (or skipped over) from
             the input stream without blocking.
Throws:
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
FilterInputStream.in, 
InputStream.available()


"
PushbackInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 Once the stream has been closed, further read(), unread(),
 available(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
PushbackInputStream,mark(int readlimit),void,Marks the current position in this input stream.,"

mark
public void mark(int readlimit)
Marks the current position in this input stream.

  The mark method of PushbackInputStream
 does nothing.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
InputStream.reset()


"
PushbackInputStream,markSupported(),boolean,"Tests if this input stream supports the mark and reset methods, which it does not.","

markSupported
public boolean markSupported()
Tests if this input stream supports the mark and
 reset methods, which it does not.

Overrides:
markSupported in class FilterInputStream
Returns:
false, since this class does not support the
           mark and reset methods.
See Also:
InputStream.mark(int), 
InputStream.reset()


"
PushbackInputStream,read(),int,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.

  This method returns the most recently pushed-back byte, if there is
 one, and otherwise calls the read method of its underlying
 input stream and returns whatever value that method returns.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream has been reached.
Throws:
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read()


"
PushbackInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream into
 an array of bytes.  This method first reads any pushed-back bytes; after
 that, if fewer than len bytes have been read then it
 reads from the underlying input stream. If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
PushbackInputStream,reset(),void,Repositions this stream to the position at the time the mark method was last called on this input stream.,"

reset
public void reset()
           throws IOException
Repositions this stream to the position at the time the
 mark method was last called on this input stream.

  The method reset for class
 PushbackInputStream does nothing except throw an
 IOException.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if this method is invoked.
See Also:
InputStream.mark(int), 
IOException


"
PushbackInputStream,skip(long n),long,Skips over and discards n bytes of data from this input stream.,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from this
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly zero.  If n is negative, no bytes are skipped.

  The skip method of PushbackInputStream
 first skips over the bytes in the pushback buffer, if any.  It then
 calls the skip method of the underlying input stream if
 more bytes need to be skipped.  The actual number of bytes skipped
 is returned.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
            or the stream has been closed by
            invoking its close() method,
            or an I/O error occurs.
Since:
1.2
See Also:
FilterInputStream.in, 
InputStream.skip(long n)


"
PushbackInputStream,unread(byte[] b),void,Pushes back an array of bytes by copying it to the front of the pushback buffer.,"

unread
public void unread(byte[] b)
            throws IOException
Pushes back an array of bytes by copying it to the front of the
 pushback buffer.  After this method returns, the next byte to be read
 will have the value b[0], the byte after that will have the
 value b[1], and so forth.

Parameters:
b - the byte array to push back
Throws:
IOException - If there is not enough room in the pushback
            buffer for the specified number of bytes,
            or this input stream has been closed by
            invoking its close() method.
Since:
JDK1.1


"
PushbackInputStream,"unread(byte[] b, int off, int len)",void,Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer.,"

unread
public void unread(byte[] b,
                   int off,
                   int len)
            throws IOException
Pushes back a portion of an array of bytes by copying it to the front
 of the pushback buffer.  After this method returns, the next byte to be
 read will have the value b[off], the byte after that will
 have the value b[off+1], and so forth.

Parameters:
b - the byte array to push back.
off - the start offset of the data.
len - the number of bytes to push back.
Throws:
IOException - If there is not enough room in the pushback
            buffer for the specified number of bytes,
            or this input stream has been closed by
            invoking its close() method.
Since:
JDK1.1


"
PushbackInputStream,unread(int b),void,Pushes back a byte by copying it to the front of the pushback buffer.,"

unread
public void unread(int b)
            throws IOException
Pushes back a byte by copying it to the front of the pushback buffer.
 After this method returns, the next byte to be read will have the value
 (byte)b.

Parameters:
b - the int value whose low-order
                  byte is to be pushed back.
Throws:
IOException - If there is not enough room in the pushback
            buffer for the byte, or this input stream has been closed by
            invoking its close() method.


"
PushbackReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
           throws IOException
Closes the stream and releases any system resources associated with
 it. Once the stream has been closed, further read(),
 unread(), ready(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterReader
Throws:
IOException - If an I/O error occurs


"
PushbackReader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream. The mark
 for class PushbackReader always throws an exception.

Overrides:
mark in class FilterReader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  After
                         reading this many characters, attempting to
                         reset the stream may fail.
Throws:
IOException - Always, since mark is not supported


"
PushbackReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does not.","

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation, which it does
 not.

Overrides:
markSupported in class FilterReader
Returns:
true if and only if this stream supports the mark operation.


"
PushbackReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class FilterReader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
PushbackReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Overrides:
read in class FilterReader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
PushbackReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class FilterReader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
PushbackReader,reset(),void,Resets the stream.,"

reset
public void reset()
           throws IOException
Resets the stream. The reset method of
 PushbackReader always throws an exception.

Overrides:
reset in class FilterReader
Throws:
IOException - Always, since reset is not supported


"
PushbackReader,skip(long n),long,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  This method will block until some characters are
 available, an I/O error occurs, or the end of the stream is reached.

Overrides:
skip in class FilterReader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IllegalArgumentException - If n is negative.
IOException - If an I/O error occurs


"
PushbackReader,unread(char[] cbuf),void,Pushes back an array of characters by copying it to the front of the pushback buffer.,"

unread
public void unread(char[] cbuf)
            throws IOException
Pushes back an array of characters by copying it to the front of the
 pushback buffer.  After this method returns, the next character to be
 read will have the value cbuf[0], the character after that
 will have the value cbuf[1], and so forth.

Parameters:
cbuf - Character array to push back
Throws:
IOException - If there is insufficient room in the pushback
                          buffer, or if some other I/O error occurs


"
PushbackReader,"unread(char[] cbuf, int off, int len)",void,Pushes back a portion of an array of characters by copying it to the front of the pushback buffer.,"

unread
public void unread(char[] cbuf,
                   int off,
                   int len)
            throws IOException
Pushes back a portion of an array of characters by copying it to the
 front of the pushback buffer.  After this method returns, the next
 character to be read will have the value cbuf[off], the
 character after that will have the value cbuf[off+1], and
 so forth.

Parameters:
cbuf - Character array
off - Offset of first character to push back
len - Number of characters to push back
Throws:
IOException - If there is insufficient room in the pushback
                          buffer, or if some other I/O error occurs


"
PushbackReader,unread(int c),void,Pushes back a single character by copying it to the front of the pushback buffer.,"

unread
public void unread(int c)
            throws IOException
Pushes back a single character by copying it to the front of the
 pushback buffer. After this method returns, the next character to be read
 will have the value (char)c.

Parameters:
c - The int value representing a character to be pushed back
Throws:
IOException - If the pushback buffer is full,
                          or if some other I/O error occurs


"
RandomAccessFile,close(),void,Closes this random access file stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this random access file stream and releases any system
 resources associated with the stream. A closed random access
 file cannot perform input or output operations and cannot be
 reopened.

  If this file has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,getChannel(),FileChannel,Returns the unique FileChannel object associated with this file.,"

getChannel
public final FileChannel getChannel()
Returns the unique FileChannel
 object associated with this file.

  The position of the returned channel will always be equal to
 this object's file-pointer offset as returned by the getFilePointer method.  Changing this object's
 file-pointer offset, whether explicitly or by reading or writing bytes,
 will change the position of the channel, and vice versa.  Changing the
 file's length via this object will change the length seen via the file
 channel, and vice versa.

Returns:
the file channel associated with this file
Since:
1.4


"
RandomAccessFile,getFD(),FileDescriptor,Returns the opaque file descriptor object associated with this stream.,"

getFD
public final FileDescriptor getFD()
                           throws IOException
Returns the opaque file descriptor object associated with this
 stream.

Returns:
the file descriptor object associated with this stream.
Throws:
IOException - if an I/O error occurs.
See Also:
FileDescriptor


"
RandomAccessFile,getFilePointer(),long,Returns the current offset in this file.,"

getFilePointer
public long getFilePointer()
                    throws IOException
Returns the current offset in this file.

Returns:
the offset from the beginning of the file, in bytes,
             at which the next read or write occurs.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,length(),long,Returns the length of this file.,"

length
public long length()
            throws IOException
Returns the length of this file.

Returns:
the length of this file, measured in bytes.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,read(),int,Reads a byte of data from this file.,"

read
public int read()
         throws IOException
Reads a byte of data from this file. The byte is returned as an
 integer in the range 0 to 255 (0x00-0x0ff). This
 method blocks if no input is yet available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the same
 way as the InputStream.read() method of
 InputStream.

Returns:
the next byte of data, or -1 if the end of the
             file has been reached.
Throws:
IOException - if an I/O error occurs. Not thrown if
                          end-of-file has been reached.


"
RandomAccessFile,read(byte[] b),int,Reads up to b.length bytes of data from this file into an array of bytes.,"

read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this file
 into an array of bytes. This method blocks until at least one byte
 of input is available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the
 same way as the InputStream.read(byte[]) method of
 InputStream.

Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             this file has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the random access file has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.


"
RandomAccessFile,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this file into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this file into an
 array of bytes. This method blocks until at least one byte of input
 is available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the
 same way as the InputStream.read(byte[], int, int) method of
 InputStream.

Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than end of file, or if the random access file has been closed, or if
 some other I/O error occurs.
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off


"
RandomAccessFile,readBoolean(),boolean,Reads a boolean from this file.,"

readBoolean
public final boolean readBoolean()
                          throws IOException
Reads a boolean from this file. This method reads a
 single byte from the file, starting at the current file pointer.
 A value of 0 represents
 false. Any other value represents true.
 This method blocks until the byte is read, the end of the stream
 is detected, or an exception is thrown.

Specified by:
readBoolean in interface DataInput
Returns:
the boolean value read.
Throws:
EOFException - if this file has reached the end.
IOException - if an I/O error occurs.


"
RandomAccessFile,readByte(),byte,Reads a signed eight-bit value from this file.,"

readByte
public final byte readByte()
                    throws IOException
Reads a signed eight-bit value from this file. This method reads a
 byte from the file, starting from the current file pointer.
 If the byte read is b, where
 0 <= b <= 255,
 then the result is:
 
     (byte)(b)
 

 This method blocks until the byte is read, the end of the stream
 is detected, or an exception is thrown.

Specified by:
readByte in interface DataInput
Returns:
the next byte of this file as a signed eight-bit
             byte.
Throws:
EOFException - if this file has reached the end.
IOException - if an I/O error occurs.


"
RandomAccessFile,readChar(),char,Reads a character from this file.,"

readChar
public final char readChar()
                    throws IOException
Reads a character from this file. This method reads two
 bytes from the file, starting at the current file pointer.
 If the bytes read, in order, are
 b1 and b2, where
 0 <= b1, b2 <= 255,
 then the result is equal to:
 
     (char)((b1 << 8) | b2)
 

 This method blocks until the two bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readChar in interface DataInput
Returns:
the next two bytes of this file, interpreted as a
                  char.
Throws:
EOFException - if this file reaches the end before reading
               two bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readDouble(),double,Reads a double from this file.,"

readDouble
public final double readDouble()
                        throws IOException
Reads a double from this file. This method reads a
 long value, starting at the current file pointer,
 as if by the readLong method
 and then converts that long to a double
 using the longBitsToDouble method in
 class Double.
 
 This method blocks until the eight bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readDouble in interface DataInput
Returns:
the next eight bytes of this file, interpreted as a
             double.
Throws:
EOFException - if this file reaches the end before reading
             eight bytes.
IOException - if an I/O error occurs.
See Also:
readLong(), 
Double.longBitsToDouble(long)


"
RandomAccessFile,readFloat(),float,Reads a float from this file.,"

readFloat
public final float readFloat()
                      throws IOException
Reads a float from this file. This method reads an
 int value, starting at the current file pointer,
 as if by the readInt method
 and then converts that int to a float
 using the intBitsToFloat method in class
 Float.
 
 This method blocks until the four bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readFloat in interface DataInput
Returns:
the next four bytes of this file, interpreted as a
             float.
Throws:
EOFException - if this file reaches the end before reading
             four bytes.
IOException - if an I/O error occurs.
See Also:
readInt(), 
Float.intBitsToFloat(int)


"
RandomAccessFile,readFully(byte[] b),void,"Reads b.length bytes from this file into the byte array, starting at the current file pointer.","

readFully
public final void readFully(byte[] b)
                     throws IOException
Reads b.length bytes from this file into the byte
 array, starting at the current file pointer. This method reads
 repeatedly from the file until the requested number of bytes are
 read. This method blocks until the requested number of bytes are
 read, the end of the stream is detected, or an exception is thrown.

Specified by:
readFully in interface DataInput
Parameters:
b - the buffer into which the data is read.
Throws:
EOFException - if this file reaches the end before reading
               all the bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,"readFully(byte[] b, int off, int len)",void,"Reads exactly len bytes from this file into the byte array, starting at the current file pointer.","

readFully
public final void readFully(byte[] b,
                            int off,
                            int len)
                     throws IOException
Reads exactly len bytes from this file into the byte
 array, starting at the current file pointer. This method reads
 repeatedly from the file until the requested number of bytes are
 read. This method blocks until the requested number of bytes are
 read, the end of the stream is detected, or an exception is thrown.

Specified by:
readFully in interface DataInput
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the number of bytes to read.
Throws:
EOFException - if this file reaches the end before reading
               all the bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readInt(),int,Reads a signed 32-bit integer from this file.,"

readInt
public final int readInt()
                  throws IOException
Reads a signed 32-bit integer from this file. This method reads 4
 bytes from the file, starting at the current file pointer.
 If the bytes read, in order, are b1,
 b2, b3, and b4, where
 0 <= b1, b2, b3, b4 <= 255,
 then the result is equal to:
 
     (b1 << 24) | (b2 << 16) + (b3 << 8) + b4
 

 This method blocks until the four bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readInt in interface DataInput
Returns:
the next four bytes of this file, interpreted as an
             int.
Throws:
EOFException - if this file reaches the end before reading
               four bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readLine(),String,Reads the next line of text from this file.,"

readLine
public final String readLine()
                      throws IOException
Reads the next line of text from this file.  This method successively
 reads bytes from the file, starting at the current file pointer,
 until it reaches a line terminator or the end
 of the file.  Each byte is converted into a character by taking the
 byte's value for the lower eight bits of the character and setting the
 high eight bits of the character to zero.  This method does not,
 therefore, support the full Unicode character set.

  A line of text is terminated by a carriage-return character
 ('\r'), a newline character ('\n'), a
 carriage-return character immediately followed by a newline character,
 or the end of the file.  Line-terminating characters are discarded and
 are not included as part of the string returned.

  This method blocks until a newline character is read, a carriage
 return and the byte following it are read (to see if it is a newline),
 the end of the file is reached, or an exception is thrown.

Specified by:
readLine in interface DataInput
Returns:
the next line of text from this file, or null if end
             of file is encountered before even one byte is read.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,readLong(),long,Reads a signed 64-bit integer from this file.,"

readLong
public final long readLong()
                    throws IOException
Reads a signed 64-bit integer from this file. This method reads eight
 bytes from the file, starting at the current file pointer.
 If the bytes read, in order, are
 b1, b2, b3,
 b4, b5, b6,
 b7, and b8, where:
 
     0 <= b1, b2, b3, b4, b5, b6, b7, b8 <=255,
 

 then the result is equal to:
 
     ((long)b1 << 56) + ((long)b2 << 48)
     + ((long)b3 << 40) + ((long)b4 << 32)
     + ((long)b5 << 24) + ((long)b6 << 16)
     + ((long)b7 << 8) + b8
 

 This method blocks until the eight bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readLong in interface DataInput
Returns:
the next eight bytes of this file, interpreted as a
             long.
Throws:
EOFException - if this file reaches the end before reading
               eight bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readShort(),short,Reads a signed 16-bit number from this file.,"

readShort
public final short readShort()
                      throws IOException
Reads a signed 16-bit number from this file. The method reads two
 bytes from this file, starting at the current file pointer.
 If the two bytes read, in order, are
 b1 and b2, where each of the two values is
 between 0 and 255, inclusive, then the
 result is equal to:
 
     (short)((b1 << 8) | b2)
 

 This method blocks until the two bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readShort in interface DataInput
Returns:
the next two bytes of this file, interpreted as a signed
             16-bit number.
Throws:
EOFException - if this file reaches the end before reading
               two bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readUnsignedByte(),int,Reads an unsigned eight-bit number from this file.,"

readUnsignedByte
public final int readUnsignedByte()
                           throws IOException
Reads an unsigned eight-bit number from this file. This method reads
 a byte from this file, starting at the current file pointer,
 and returns that byte.
 
 This method blocks until the byte is read, the end of the stream
 is detected, or an exception is thrown.

Specified by:
readUnsignedByte in interface DataInput
Returns:
the next byte of this file, interpreted as an unsigned
             eight-bit number.
Throws:
EOFException - if this file has reached the end.
IOException - if an I/O error occurs.


"
RandomAccessFile,readUnsignedShort(),int,Reads an unsigned 16-bit number from this file.,"

readUnsignedShort
public final int readUnsignedShort()
                            throws IOException
Reads an unsigned 16-bit number from this file. This method reads
 two bytes from the file, starting at the current file pointer.
 If the bytes read, in order, are
 b1 and b2, where
 0 <= b1, b2 <= 255,
 then the result is equal to:
 
     (b1 << 8) | b2
 

 This method blocks until the two bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readUnsignedShort in interface DataInput
Returns:
the next two bytes of this file, interpreted as an unsigned
             16-bit integer.
Throws:
EOFException - if this file reaches the end before reading
               two bytes.
IOException - if an I/O error occurs.


"
RandomAccessFile,readUTF(),String,Reads in a string from this file.,"

readUTF
public final String readUTF()
                     throws IOException
Reads in a string from this file. The string has been encoded
 using a
 modified UTF-8
 format.
 
 The first two bytes are read, starting from the current file
 pointer, as if by
 readUnsignedShort. This value gives the number of
 following bytes that are in the encoded string, not
 the length of the resulting string. The following bytes are then
 interpreted as bytes encoding characters in the modified UTF-8 format
 and are converted into characters.
 
 This method blocks until all the bytes are read, the end of the
 stream is detected, or an exception is thrown.

Specified by:
readUTF in interface DataInput
Returns:
a Unicode string.
Throws:
EOFException - if this file reaches the end before
               reading all the bytes.
IOException - if an I/O error occurs.
UTFDataFormatException - if the bytes do not represent
               valid modified UTF-8 encoding of a Unicode string.
See Also:
readUnsignedShort()


"
RandomAccessFile,seek(long pos),void,"Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.","

seek
public void seek(long pos)
          throws IOException
Sets the file-pointer offset, measured from the beginning of this
 file, at which the next read or write occurs.  The offset may be
 set beyond the end of the file. Setting the offset beyond the end
 of the file does not change the file length.  The file length will
 change only by writing after the offset has been set beyond the end
 of the file.

Parameters:
pos - the offset position, measured in bytes from the
                   beginning of the file, at which to set the file
                   pointer.
Throws:
IOException - if pos is less than
                          0 or if an I/O error occurs.


"
RandomAccessFile,setLength(long newLength),void,Sets the length of this file.,"

setLength
public void setLength(long newLength)
               throws IOException
Sets the length of this file.

  If the present length of the file as returned by the
 length method is greater than the newLength
 argument then the file will be truncated.  In this case, if the file
 offset as returned by the getFilePointer method is greater
 than newLength then after this method returns the offset
 will be equal to newLength.

  If the present length of the file as returned by the
 length method is smaller than the newLength
 argument then the file will be extended.  In this case, the contents of
 the extended portion of the file are not defined.

Parameters:
newLength - The desired length of the file
Throws:
IOException - If an I/O error occurs
Since:
1.2


"
RandomAccessFile,skipBytes(int n),int,Attempts to skip over n bytes of input discarding the skipped bytes.,"

skipBytes
public int skipBytes(int n)
              throws IOException
Attempts to skip over n bytes of input discarding the
 skipped bytes.
 

 This method may skip over some smaller number of bytes, possibly zero.
 This may result from any of a number of conditions; reaching end of
 file before n bytes have been skipped is only one
 possibility. This method never throws an EOFException.
 The actual number of bytes skipped is returned.  If n
 is negative, no bytes are skipped.

Specified by:
skipBytes in interface DataInput
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,write(byte[] b),void,"Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.","

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this file, starting at the current file pointer.

Specified by:
write in interface DataOutput
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,"write(byte[] b, int off, int len)",void,Writes len bytes from the specified byte array starting at offset off to this file.,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this file.

Specified by:
write in interface DataOutput
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,write(int b),void,Writes the specified byte to this file.,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file. The write starts at
 the current file pointer.

Specified by:
write in interface DataOutput
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeBoolean(boolean v),void,Writes a boolean to the file as a one-byte value.,"

writeBoolean
public final void writeBoolean(boolean v)
                        throws IOException
Writes a boolean to the file as a one-byte value. The
 value true is written out as the value
 (byte)1; the value false is written out
 as the value (byte)0. The write starts at
 the current position of the file pointer.

Specified by:
writeBoolean in interface DataOutput
Parameters:
v - a boolean value to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeByte(int v),void,Writes a byte to the file as a one-byte value.,"

writeByte
public final void writeByte(int v)
                     throws IOException
Writes a byte to the file as a one-byte value. The
 write starts at the current position of the file pointer.

Specified by:
writeByte in interface DataOutput
Parameters:
v - a byte value to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeBytes(String s),void,Writes the string to the file as a sequence of bytes.,"

writeBytes
public final void writeBytes(String s)
                      throws IOException
Writes the string to the file as a sequence of bytes. Each
 character in the string is written out, in sequence, by discarding
 its high eight bits. The write starts at the current position of
 the file pointer.

Specified by:
writeBytes in interface DataOutput
Parameters:
s - a string of bytes to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeChar(int v),void,"Writes a char to the file as a two-byte value, high byte first.","

writeChar
public final void writeChar(int v)
                     throws IOException
Writes a char to the file as a two-byte value, high
 byte first. The write starts at the current position of the
 file pointer.

Specified by:
writeChar in interface DataOutput
Parameters:
v - a char value to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeChars(String s),void,Writes a string to the file as a sequence of characters.,"

writeChars
public final void writeChars(String s)
                      throws IOException
Writes a string to the file as a sequence of characters. Each
 character is written to the data output stream as if by the
 writeChar method. The write starts at the current
 position of the file pointer.

Specified by:
writeChars in interface DataOutput
Parameters:
s - a String value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
writeChar(int)


"
RandomAccessFile,writeDouble(double v),void,"Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first.","

writeDouble
public final void writeDouble(double v)
                       throws IOException
Converts the double argument to a long using the
 doubleToLongBits method in class Double,
 and then writes that long value to the file as an
 eight-byte quantity, high byte first. The write starts at the current
 position of the file pointer.

Specified by:
writeDouble in interface DataOutput
Parameters:
v - a double value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
Double.doubleToLongBits(double)


"
RandomAccessFile,writeFloat(float v),void,"Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first.","

writeFloat
public final void writeFloat(float v)
                      throws IOException
Converts the float argument to an int using the
 floatToIntBits method in class Float,
 and then writes that int value to the file as a
 four-byte quantity, high byte first. The write starts at the
 current position of the file pointer.

Specified by:
writeFloat in interface DataOutput
Parameters:
v - a float value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
Float.floatToIntBits(float)


"
RandomAccessFile,writeInt(int v),void,"Writes an int to the file as four bytes, high byte first.","

writeInt
public final void writeInt(int v)
                    throws IOException
Writes an int to the file as four bytes, high byte first.
 The write starts at the current position of the file pointer.

Specified by:
writeInt in interface DataOutput
Parameters:
v - an int to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeLong(long v),void,"Writes a long to the file as eight bytes, high byte first.","

writeLong
public final void writeLong(long v)
                     throws IOException
Writes a long to the file as eight bytes, high byte first.
 The write starts at the current position of the file pointer.

Specified by:
writeLong in interface DataOutput
Parameters:
v - a long to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeShort(int v),void,"Writes a short to the file as two bytes, high byte first.","

writeShort
public final void writeShort(int v)
                      throws IOException
Writes a short to the file as two bytes, high byte first.
 The write starts at the current position of the file pointer.

Specified by:
writeShort in interface DataOutput
Parameters:
v - a short to be written.
Throws:
IOException - if an I/O error occurs.


"
RandomAccessFile,writeUTF(String str),void,Writes a string to the file using modified UTF-8 encoding in a machine-independent manner.,"

writeUTF
public final void writeUTF(String str)
                    throws IOException
Writes a string to the file using
 modified UTF-8
 encoding in a machine-independent manner.
 
 First, two bytes are written to the file, starting at the
 current file pointer, as if by the
 writeShort method giving the number of bytes to
 follow. This value is the number of bytes actually written out,
 not the length of the string. Following the length, each character
 of the string is output, in sequence, using the modified UTF-8 encoding
 for each character.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - a string to be written.
Throws:
IOException - if an I/O error occurs.


"
Reader,close(),abstract void,Closes the stream and releases any system resources associated with it.,"

close
public abstract void close()
                    throws IOException
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
Reader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will attempt to reposition the stream to this point.  Not all
 character-input streams support the mark() operation.

Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  After
                         reading this many characters, attempting to
                         reset the stream may fail.
Throws:
IOException - If the stream does not support mark(),
                          or if some other I/O error occurs


"
Reader,markSupported(),boolean,Tells whether this stream supports the mark() operation.,"

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation. The default
 implementation always returns false. Subclasses should override this
 method.

Returns:
true if and only if this stream supports the mark operation.


"
Reader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.  This method will block until a character is
 available, an I/O error occurs, or the end of the stream is reached.

  Subclasses that intend to support efficient single-character input
 should override this method.

Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
Reader,read(char[] cbuf),int,Reads characters into an array.,"

read
public int read(char[] cbuf)
         throws IOException
Reads characters into an array.  This method will block until some input
 is available, an I/O error occurs, or the end of the stream is reached.

Parameters:
cbuf - Destination buffer
Returns:
The number of characters read, or -1
              if the end of the stream
              has been reached
Throws:
IOException - If an I/O error occurs


"
Reader,"read(char[] cbuf, int off, int len)",abstract int,Reads characters into a portion of an array.,"

read
public abstract int read(char[] cbuf,
                         int off,
                         int len)
                  throws IOException
Reads characters into a portion of an array.  This method will block
 until some input is available, an I/O error occurs, or the end of the
 stream is reached.

Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
Reader,read(CharBuffer target),int,Attempts to read characters into the specified character buffer.,"

read
public int read(CharBuffer target)
         throws IOException
Attempts to read characters into the specified character buffer.
 The buffer is used as a repository of characters as-is: the only
 changes made are the results of a put operation. No flipping or
 rewinding of the buffer is performed.

Specified by:
read in interface Readable
Parameters:
target - the buffer to read characters into
Returns:
The number of characters added to the buffer, or
         -1 if this source of characters is at its end
Throws:
IOException - if an I/O error occurs
NullPointerException - if target is null
ReadOnlyBufferException - if target is a read only buffer
Since:
1.5


"
Reader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
Reader,reset(),void,Resets the stream.,"

reset
public void reset()
           throws IOException
Resets the stream.  If the stream has been marked, then attempt to
 reposition it at the mark.  If the stream has not been marked, then
 attempt to reset it in some way appropriate to the particular stream,
 for example by repositioning it to its starting point.  Not all
 character-input streams support the reset() operation, and some support
 reset() without supporting mark().

Throws:
IOException - If the stream has not been marked,
                          or if the mark has been invalidated,
                          or if the stream does not support reset(),
                          or if some other I/O error occurs


"
Reader,skip(long n),long,Skips characters.,"

skip
public long skip(long n)
          throws IOException
Skips characters.  This method will block until some characters are
 available, an I/O error occurs, or the end of the stream is reached.

Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IllegalArgumentException - If n is negative.
IOException - If an I/O error occurs


"
SequenceInputStream,available(),int,Returns an estimate of the number of bytes that can be read (or skipped over) from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream.,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from the current underlying input stream without
 blocking by the next invocation of a method for the current
 underlying input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method simply calls available of the current underlying
 input stream and returns the result.

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or
         skipped over) from the current underlying input stream
         without blocking or 0 if this input stream
         has been closed by invoking its close() method
Throws:
IOException - if an I/O error occurs.
Since:
JDK1.1


"
SequenceInputStream,close(),void,Closes this input stream and releases any system resources associated with the stream.,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 A closed SequenceInputStream
 cannot  perform input operations and cannot
 be reopened.
 
 If this stream was created
 from an enumeration, all remaining elements
 are requested from the enumeration and closed
 before the close method returns.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
SequenceInputStream,read(),int,Reads the next byte of data from this input stream.,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the
 stream has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.
 
 This method
 tries to read one character from the current substream. If it
 reaches the end of the stream, it calls the close
 method of the current substream and begins reading from the next
 substream.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
SequenceInputStream,"read(byte[] b, int off, int len)",int,Reads up to len bytes of data from this input stream into an array of bytes.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes.  If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.
 
 The read method of SequenceInputStream
 tries to read the data from the current substream. If it fails to
 read any characters because the substream has reached the end of
 the stream, it calls the close method of the current
 substream and begins reading from the next substream.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes read.
Returns:
int   the number of bytes read.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
StreamTokenizer,commentChar(int ch),void,Specified that the character argument starts a single-line comment.,"

commentChar
public void commentChar(int ch)
Specified that the character argument starts a single-line
 comment. All characters from the comment character to the end of
 the line are ignored by this stream tokenizer.

 Any other attribute settings for the specified character are cleared.

Parameters:
ch - the character.


"
StreamTokenizer,eolIsSignificant(boolean flag),void,Determines whether or not ends of line are treated as tokens.,"

eolIsSignificant
public void eolIsSignificant(boolean flag)
Determines whether or not ends of line are treated as tokens.
 If the flag argument is true, this tokenizer treats end of lines
 as tokens; the nextToken method returns
 TT_EOL and also sets the ttype field to
 this value when an end of line is read.
 
 A line is a sequence of characters ending with either a
 carriage-return character ('\r') or a newline
 character ('\n'). In addition, a carriage-return
 character followed immediately by a newline character is treated
 as a single end-of-line token.
 
 If the flag is false, end-of-line characters are
 treated as white space and serve only to separate tokens.

Parameters:
flag - true indicates that end-of-line characters
                 are separate tokens; false indicates that
                 end-of-line characters are white space.
See Also:
nextToken(), 
ttype, 
TT_EOL


"
StreamTokenizer,lineno(),int,Return the current line number.,"

lineno
public int lineno()
Return the current line number.

Returns:
the current line number of this stream tokenizer.


"
StreamTokenizer,lowerCaseMode(boolean fl),void,Determines whether or not word token are automatically lowercased.,"

lowerCaseMode
public void lowerCaseMode(boolean fl)
Determines whether or not word token are automatically lowercased.
 If the flag argument is true, then the value in the
 sval field is lowercased whenever a word token is
 returned (the ttype field has the
 value TT_WORD by the nextToken method
 of this tokenizer.
 
 If the flag argument is false, then the
 sval field is not modified.

Parameters:
fl - true indicates that all word tokens should
               be lowercased.
See Also:
nextToken(), 
ttype, 
TT_WORD


"
StreamTokenizer,nextToken(),int,Parses the next token from the input stream of this tokenizer.,"

nextToken
public int nextToken()
              throws IOException
Parses the next token from the input stream of this tokenizer.
 The type of the next token is returned in the ttype
 field. Additional information about the token may be in the
 nval field or the sval field of this
 tokenizer.
 
 Typical clients of this
 class first set up the syntax tables and then sit in a loop
 calling nextToken to parse successive tokens until TT_EOF
 is returned.

Returns:
the value of the ttype field.
Throws:
IOException - if an I/O error occurs.
See Also:
nval, 
sval, 
ttype


"
StreamTokenizer,ordinaryChar(int ch),void,"Specifies that the character argument is ""ordinary"" in this tokenizer.","

ordinaryChar
public void ordinaryChar(int ch)
Specifies that the character argument is ""ordinary""
 in this tokenizer. It removes any special significance the
 character has as a comment character, word component, string
 delimiter, white space, or number character. When such a character
 is encountered by the parser, the parser treats it as a
 single-character token and sets ttype field to the
 character value.

 Making a line terminator character ""ordinary"" may interfere
 with the ability of a StreamTokenizer to count
 lines. The lineno method may no longer reflect
 the presence of such terminator characters in its line count.

Parameters:
ch - the character.
See Also:
ttype


"
StreamTokenizer,"ordinaryChars(int low, int hi)",void,"Specifies that all characters c in the range low <= c <= high are ""ordinary"" in this tokenizer.","

ordinaryChars
public void ordinaryChars(int low,
                          int hi)
Specifies that all characters c in the range
 low <= c <= high
 are ""ordinary"" in this tokenizer. See the
 ordinaryChar method for more information on a
 character being ordinary.

Parameters:
low - the low end of the range.
hi - the high end of the range.
See Also:
ordinaryChar(int)


"
StreamTokenizer,parseNumbers(),void,Specifies that numbers should be parsed by this tokenizer.,"

parseNumbers
public void parseNumbers()
Specifies that numbers should be parsed by this tokenizer. The
 syntax table of this tokenizer is modified so that each of the twelve
 characters:
 
      0 1 2 3 4 5 6 7 8 9 . -
 

 has the ""numeric"" attribute.
 
 When the parser encounters a word token that has the format of a
 double precision floating-point number, it treats the token as a
 number rather than a word, by setting the ttype
 field to the value TT_NUMBER and putting the numeric
 value of the token into the nval field.

See Also:
nval, 
TT_NUMBER, 
ttype


"
StreamTokenizer,pushBack(),void,"Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field, and not to modify the value in the nval or sval field.","

pushBack
public void pushBack()
Causes the next call to the nextToken method of this
 tokenizer to return the current value in the ttype
 field, and not to modify the value in the nval or
 sval field.

See Also:
nextToken(), 
nval, 
sval, 
ttype


"
StreamTokenizer,quoteChar(int ch),void,Specifies that matching pairs of this character delimit string constants in this tokenizer.,"

quoteChar
public void quoteChar(int ch)
Specifies that matching pairs of this character delimit string
 constants in this tokenizer.
 
 When the nextToken method encounters a string
 constant, the ttype field is set to the string
 delimiter and the sval field is set to the body of
 the string.
 
 If a string quote character is encountered, then a string is
 recognized, consisting of all characters after (but not including)
 the string quote character, up to (but not including) the next
 occurrence of that same string quote character, or a line
 terminator, or end of file. The usual escape sequences such as
 ""\n"" and ""\t"" are recognized and
 converted to single characters as the string is parsed.

 Any other attribute settings for the specified character are cleared.

Parameters:
ch - the character.
See Also:
nextToken(), 
sval, 
ttype


"
StreamTokenizer,resetSyntax(),void,"Resets this tokenizer's syntax table so that all characters are ""ordinary."" See the ordinaryChar method for more information on a character being ordinary.","

resetSyntax
public void resetSyntax()
Resets this tokenizer's syntax table so that all characters are
 ""ordinary."" See the ordinaryChar method
 for more information on a character being ordinary.

See Also:
ordinaryChar(int)


"
StreamTokenizer,slashSlashComments(boolean flag),void,Determines whether or not the tokenizer recognizes C++-style comments.,"

slashSlashComments
public void slashSlashComments(boolean flag)
Determines whether or not the tokenizer recognizes C++-style comments.
 If the flag argument is true, this stream tokenizer
 recognizes C++-style comments. Any occurrence of two consecutive
 slash characters ('/') is treated as the beginning of
 a comment that extends to the end of the line.
 
 If the flag argument is false, then C++-style
 comments are not treated specially.

Parameters:
flag - true indicates to recognize and ignore
                 C++-style comments.


"
StreamTokenizer,slashStarComments(boolean flag),void,Determines whether or not the tokenizer recognizes C-style comments.,"

slashStarComments
public void slashStarComments(boolean flag)
Determines whether or not the tokenizer recognizes C-style comments.
 If the flag argument is true, this stream tokenizer
 recognizes C-style comments. All text between successive
 occurrences of /* and */ are discarded.
 
 If the flag argument is false, then C-style comments
 are not treated specially.

Parameters:
flag - true indicates to recognize and ignore
                 C-style comments.


"
StreamTokenizer,toString(),String,Returns the string representation of the current stream token and the line number it occurs on.,"

toString
public String toString()
Returns the string representation of the current stream token and
 the line number it occurs on.

 The precise string returned is unspecified, although the following
 example can be considered typical:

 Token['a'], line 10

Overrides:
toString in class Object
Returns:
a string representation of the token
See Also:
nval, 
sval, 
ttype


"
StreamTokenizer,"whitespaceChars(int low, int hi)",void,Specifies that all characters c in the range low <= c <= high are white space characters.,"

whitespaceChars
public void whitespaceChars(int low,
                            int hi)
Specifies that all characters c in the range
 low <= c <= high
 are white space characters. White space characters serve only to
 separate tokens in the input stream.

 Any other attribute settings for the characters in the specified
 range are cleared.

Parameters:
low - the low end of the range.
hi - the high end of the range.


"
StreamTokenizer,"wordChars(int low, int hi)",void,Specifies that all characters c in the range low <= c <= high are word constituents.,"

wordChars
public void wordChars(int low,
                      int hi)
Specifies that all characters c in the range
 low <= c <= high
 are word constituents. A word token consists of a word constituent
 followed by zero or more word constituents or number constituents.

Parameters:
low - the low end of the range.
hi - the high end of the range.


"
StringBufferInputStream,available(),int,Deprecated.,"

available
public int available()
Deprecated. 
Returns the number of bytes that can be read from the input
 stream without blocking.

Overrides:
available in class InputStream
Returns:
the value of count - pos, which is the
             number of bytes remaining to be read from the input buffer.


"
StringBufferInputStream,read(),int,Deprecated.,"

read
public int read()
Deprecated. 
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 The read method of
 StringBufferInputStream cannot block. It returns the
 low eight bits of the next character in this input stream's buffer.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.


"
StringBufferInputStream,"read(byte[] b, int off, int len)",int,Deprecated.,"

read
public int read(byte[] b,
                int off,
                int len)
Deprecated. 
Reads up to len bytes of data from this input stream
 into an array of bytes.
 
 The read method of
 StringBufferInputStream cannot block. It copies the
 low eight bits from the characters in this input stream's buffer into
 the byte array argument.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
See Also:
InputStream.read()


"
StringBufferInputStream,reset(),void,Deprecated.,"

reset
public void reset()
Deprecated. 
Resets the input stream to begin reading from the first character
 of this input stream's underlying buffer.

Overrides:
reset in class InputStream
See Also:
InputStream.mark(int), 
IOException


"
StringBufferInputStream,skip(long n),long,Deprecated.,"

skip
public long skip(long n)
Deprecated. 
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
StringReader,close(),void,Closes the stream and releases any system resources associated with it.,"

close
public void close()
Closes the stream and releases any system resources associated with
 it. Once the stream has been closed, further read(),
 ready(), mark(), or reset() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader


"
StringReader,mark(int readAheadLimit),void,Marks the present position in the stream.,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will reposition the stream to this point.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  Because
                         the stream's input comes from a string, there
                         is no actual limit, so this argument must not
                         be negative, but is otherwise ignored.
Throws:
IllegalArgumentException - If readAheadLimit < 0
IOException - If an I/O error occurs


"
StringReader,markSupported(),boolean,"Tells whether this stream supports the mark() operation, which it does.","

markSupported
public boolean markSupported()
Tells whether this stream supports the mark() operation, which it does.

Overrides:
markSupported in class Reader
Returns:
true if and only if this stream supports the mark operation.


"
StringReader,read(),int,Reads a single character.,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
StringReader,"read(char[] cbuf, int off, int len)",int,Reads characters into a portion of an array.,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
StringReader,ready(),boolean,Tells whether this stream is ready to be read.,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input
Throws:
IOException - If the stream is closed


"
StringReader,reset(),void,"Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.","

reset
public void reset()
           throws IOException
Resets the stream to the most recent mark, or to the beginning of the
 string if it has never been marked.

Overrides:
reset in class Reader
Throws:
IOException - If an I/O error occurs


"
StringReader,skip(long ns),long,Skips the specified number of characters in the stream.,"

skip
public long skip(long ns)
          throws IOException
Skips the specified number of characters in the stream. Returns
 the number of characters that were skipped.

 The ns parameter may be negative, even though the
 skip method of the Reader superclass throws
 an exception in this case. Negative values of ns cause the
 stream to skip backwards. Negative return values indicate a skip
 backwards. It is not possible to skip backwards past the beginning of
 the string.

 If the entire string has been read or skipped, then this method has
 no effect and always returns 0.

Overrides:
skip in class Reader
Parameters:
ns - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs


"
StringWriter,append(char c),StringWriter,Appends the specified character to this writer.,"

append
public StringWriter append(char c)
Appends the specified character to this writer.

  An invocation of this method of the form out.append(c)
 behaves in exactly the same way as the invocation

 
     out.write(c) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
c - The 16-bit character to append
Returns:
This writer
Since:
1.5


"
StringWriter,append(CharSequence csq),StringWriter,Appends the specified character sequence to this writer.,"

append
public StringWriter append(CharSequence csq)
Appends the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq)
 behaves in exactly the same way as the invocation

 
     out.write(csq.toString()) 
 Depending on the specification of toString for the
 character sequence csq, the entire sequence may not be
 appended. For instance, invoking the toString method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence to append.  If csq is
         null, then the four characters ""null"" are
         appended to this writer.
Returns:
This writer
Since:
1.5


"
StringWriter,"append(CharSequence csq, int start, int end)",StringWriter,Appends a subsequence of the specified character sequence to this writer.,"

append
public StringWriter append(CharSequence csq,
                           int start,
                           int end)
Appends a subsequence of the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq, start,
 end) when csq is not null, behaves in
 exactly the same way as the invocation

 
     out.write(csq.subSequence(start, end).toString()) 

Specified by:
append in interface Appendable
Overrides:
append in class Writer
Parameters:
csq - The character sequence from which a subsequence will be
         appended.  If csq is null, then characters
         will be appended as if csq contained the four
         characters ""null"".
start - The index of the first character in the subsequence
end - The index of the character following the last character in the
         subsequence
Returns:
This writer
Throws:
IndexOutOfBoundsException - If start or end are negative, start
          is greater than end, or end is greater than
          csq.length()
Since:
1.5


"
StringWriter,close(),void,Closing a StringWriter has no effect.,"

close
public void close()
           throws IOException
Closing a StringWriter has no effect. The methods in this
 class can be called after the stream has been closed without generating
 an IOException.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
StringWriter,flush(),void,Flush the stream.,"

flush
public void flush()
Flush the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer


"
StringWriter,getBuffer(),StringBuffer,Return the string buffer itself.,"

getBuffer
public StringBuffer getBuffer()
Return the string buffer itself.

Returns:
StringBuffer holding the current buffer value.


"
StringWriter,toString(),String,Return the buffer's current value as a string.,"

toString
public String toString()
Return the buffer's current value as a string.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
StringWriter,"write(char[] cbuf, int off, int len)",void,Write a portion of an array of characters.,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
Write a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write


"
StringWriter,write(int c),void,Write a single character.,"

write
public void write(int c)
Write a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
StringWriter,write(String str),void,Write a string.,"

write
public void write(String str)
Write a string.

Overrides:
write in class Writer
Parameters:
str - String to be written


"
StringWriter,"write(String str, int off, int len)",void,Write a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
Write a portion of a string.

Overrides:
write in class Writer
Parameters:
str - String to be written
off - Offset from which to start writing characters
len - Number of characters to write


"
Writer,append(char c),Writer,Appends the specified character to this writer.,"

append
public Writer append(char c)
              throws IOException
Appends the specified character to this writer.

  An invocation of this method of the form out.append(c)
 behaves in exactly the same way as the invocation

 
     out.write(c) 

Specified by:
append in interface Appendable
Parameters:
c - The 16-bit character to append
Returns:
This writer
Throws:
IOException - If an I/O error occurs
Since:
1.5


"
Writer,append(CharSequence csq),Writer,Appends the specified character sequence to this writer.,"

append
public Writer append(CharSequence csq)
              throws IOException
Appends the specified character sequence to this writer.

  An invocation of this method of the form out.append(csq)
 behaves in exactly the same way as the invocation

 
     out.write(csq.toString()) 
 Depending on the specification of toString for the
 character sequence csq, the entire sequence may not be
 appended. For instance, invoking the toString method of a
 character buffer will return a subsequence whose content depends upon
 the buffer's position and limit.

Specified by:
append in interface Appendable
Parameters:
csq - The character sequence to append.  If csq is
         null, then the four characters ""null"" are
         appended to this writer.
Returns:
This writer
Throws:
IOException - If an I/O error occurs
Since:
1.5


"
Writer,"append(CharSequence csq, int start, int end)",Writer,Appends a subsequence of the specified character sequence to this writer.,"

append
public Writer append(CharSequence csq,
                     int start,
                     int end)
              throws IOException
Appends a subsequence of the specified character sequence to this writer.
 Appendable.

  An invocation of this method of the form out.append(csq, start,
 end) when csq is not null behaves in exactly the
 same way as the invocation

 
     out.write(csq.subSequence(start, end).toString()) 

Specified by:
append in interface Appendable
Parameters:
csq - The character sequence from which a subsequence will be
         appended.  If csq is null, then characters
         will be appended as if csq contained the four
         characters ""null"".
start - The index of the first character in the subsequence
end - The index of the character following the last character in the
         subsequence
Returns:
This writer
Throws:
IndexOutOfBoundsException - If start or end are negative, start
          is greater than end, or end is greater than
          csq.length()
IOException - If an I/O error occurs
Since:
1.5


"
Writer,close(),abstract void,"Closes the stream, flushing it first.","

close
public abstract void close()
                    throws IOException
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
Writer,flush(),abstract void,Flushes the stream.,"

flush
public abstract void flush()
                    throws IOException
Flushes the stream.  If the stream has saved any characters from the
 various write() methods in a buffer, write them immediately to their
 intended destination.  Then, if that destination is another character or
 byte stream, flush it.  Thus one flush() invocation will flush all the
 buffers in a chain of Writers and OutputStreams.

  If the intended destination of this stream is an abstraction provided
 by the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.

Specified by:
flush in interface Flushable
Throws:
IOException - If an I/O error occurs


"
Writer,write(char[] cbuf),void,Writes an array of characters.,"

write
public void write(char[] cbuf)
           throws IOException
Writes an array of characters.

Parameters:
cbuf - Array of characters to be written
Throws:
IOException - If an I/O error occurs


"
Writer,"write(char[] cbuf, int off, int len)",abstract void,Writes a portion of an array of characters.,"

write
public abstract void write(char[] cbuf,
                           int off,
                           int len)
                    throws IOException
Writes a portion of an array of characters.

Parameters:
cbuf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
Writer,write(int c),void,Writes a single character.,"

write
public void write(int c)
           throws IOException
Writes a single character.  The character to be written is contained in
 the 16 low-order bits of the given integer value; the 16 high-order bits
 are ignored.

  Subclasses that intend to support efficient single-character output
 should override this method.

Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
Writer,write(String str),void,Writes a string.,"

write
public void write(String str)
           throws IOException
Writes a string.

Parameters:
str - String to be written
Throws:
IOException - If an I/O error occurs


"
Writer,"write(String str, int off, int len)",void,Writes a portion of a string.,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Parameters:
str - A String
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IndexOutOfBoundsException - If off is negative, or len is negative,
          or off+len is negative or greater than the length
          of the given string
IOException - If an I/O error occurs


"
