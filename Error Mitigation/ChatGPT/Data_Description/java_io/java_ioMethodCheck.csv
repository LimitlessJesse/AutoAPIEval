Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BufferedInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
See
 the general contract of the read
 method of InputStream.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if this input stream has been closed by
                          invoking its close() method,
                          or an I/O error occurs.
See Also:
FilterInputStream.in


"
0,BufferedInputStream,2,int read(byte[] b),False,,NULL
0,BufferedInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
See the general contract of the skip
 method of InputStream.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if this input stream has been closed by
                          invoking its close() method, or an
                          I/O error occurs.


"
0,BufferedInputStream,4,void mark(int readlimit),True,,"

mark
public void mark(int readlimit)
See the general contract of the mark
 method of InputStream.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
reset()


"
0,BufferedInputStream,5,void reset(),True,,"

reset
public void reset()
           throws IOException
See the general contract of the reset
 method of InputStream.
 
 If markpos is -1
 (no mark has been set or the mark has been
 invalidated), an IOException
 is thrown. Otherwise, pos is
 set equal to markpos.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if this stream has not been marked or,
                  if the mark has been invalidated, or the stream
                  has been closed by invoking its close()
                  method, or an I/O error occurs.
See Also:
mark(int)


"
1,BufferedOutputStream,1,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this buffered output stream.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
1,BufferedOutputStream,2,void write(byte[] b),False,,NULL
1,BufferedOutputStream,3,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this buffered output stream.

  Ordinarily this method stores bytes from the given array into this
 stream's buffer, flushing the buffer to the underlying output stream as
 needed.  If the requested length is at least as large as this stream's
 buffer, however, then this method will flush the buffer and write the
 bytes directly to the underlying output stream.  Thus redundant
 BufferedOutputStreams will not copy data unnecessarily.

Overrides:
write in class FilterOutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.write(int)


"
1,BufferedOutputStream,4,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this buffered output stream. This forces any buffered
 output bytes to be written out to the underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class FilterOutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
1,BufferedOutputStream,5,void close(),False,,NULL
2,BufferedReader,1,String readLine(),True,,"

readLine
public String readLine()
                throws IOException
Reads a line of text.  A line is considered to be terminated by any one
 of a line feed ('\n'), a carriage return ('\r'), or a carriage return
 followed immediately by a linefeed.

Returns:
A String containing the contents of the line, not including
             any line-termination characters, or null if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
2,BufferedReader,2,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range
         0 to 65535 (0x00-0xffff), or -1 if the
         end of the stream has been reached
Throws:
IOException - If an I/O error occurs


"
2,BufferedReader,3,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

  This method implements the general contract of the corresponding
 read method of the
 Reader class.  As an additional convenience, it
 attempts to read as many characters as possible by repeatedly invoking
 the read method of the underlying stream.  This iterated
 read continues until one of the following conditions becomes
 true: 
 The specified number of characters have been read,

    The read method of the underlying stream returns
   -1, indicating end-of-file, or

    The ready method of the underlying stream
   returns false, indicating that further input requests
   would block.

  If the first read on the underlying stream returns
 -1 to indicate end-of-file then this method returns
 -1.  Otherwise this method returns the number of characters
 actually read.

  Subclasses of this class are encouraged, but not required, to
 attempt to read as many characters as possible in the same fashion.

  Ordinarily this method takes characters from this stream's character
 buffer, filling it from the underlying stream as necessary.  If,
 however, the buffer is empty, the mark is not valid, and the requested
 length is at least as large as the buffer, then this method will read
 characters directly from the underlying stream into the given array.
 Thus redundant BufferedReaders will not copy data
 unnecessarily.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
2,BufferedReader,4,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  A buffered character
 stream is ready if the buffer is not empty, or if the underlying
 character stream is ready.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
2,BufferedReader,5,void close(),True,,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,1,void write(String str),False,,NULL
3,BufferedWriter,2,void newLine(),True,,"

newLine
public void newLine()
             throws IOException
Writes a line separator.  The line separator string is defined by the
 system property line.separator, and is not necessarily a single
 newline ('\n') character.

Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,3,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,4,void close(),True,,"

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
3,BufferedWriter,5,"void write(char[] cbuf, int off, int len)",True,,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

  Ordinarily this method stores characters from the given array into
 this stream's buffer, flushing the buffer to the underlying stream as
 needed.  If the requested length is at least as large as the buffer,
 however, then this method will flush the buffer and write the characters
 directly to the underlying stream.  Thus redundant
 BufferedWriters will not copy data unnecessarily.

Specified by:
write in class Writer
Parameters:
cbuf - A character array
off - Offset from which to start reading characters
len - Number of characters to write
Throws:
IOException - If an I/O error occurs


"
4,ByteArrayInputStream,1,int read(),True,,"

read
public int read()
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 This read method
 cannot block.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
          stream has been reached.


"
4,ByteArrayInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
Reads up to len bytes of data into an array of bytes
 from this input stream.
 If pos equals count,
 then -1 is returned to indicate
 end of file. Otherwise, the  number k
 of bytes read is equal to the smaller of
 len and count-pos.
 If k is positive, then bytes
 buf[pos] through buf[pos+k-1]
 are copied into b[off]  through
 b[off+k-1] in the manner performed
 by System.arraycopy. The
 value k is added into pos
 and k is returned.
 
 This read method cannot block.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
          -1 if there is no more data because the end of
          the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
See Also:
InputStream.read()


"
4,ByteArrayInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.
 The actual number k
 of bytes to be skipped is equal to the smaller
 of n and  count-pos.
 The value k is added into pos
 and k is returned.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
4,ByteArrayInputStream,4,int available(),True,,"

available
public int available()
Returns the number of remaining bytes that can be read (or skipped over)
 from this input stream.
 
 The value returned is count - pos,
 which is the number of bytes remaining to be read from the input buffer.

Overrides:
available in class InputStream
Returns:
the number of remaining bytes that can be read (or skipped
          over) from this input stream without blocking.


"
4,ByteArrayInputStream,5,void reset(),True,,"

reset
public void reset()
Resets the buffer to the marked position.  The marked position
 is 0 unless another position was marked or an offset was specified
 in the constructor.

Overrides:
reset in class InputStream
See Also:
InputStream.mark(int), 
IOException


"
5,ByteArrayOutputStream,1,void write(int b),True,,"

write
public void write(int b)
Writes the specified byte to this byte array output stream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.


"
5,ByteArrayOutputStream,2,void write(byte[] b),False,,NULL
5,ByteArrayOutputStream,3,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
Writes len bytes from the specified byte array
 starting at offset off to this byte array output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.


"
5,ByteArrayOutputStream,4,void writeTo(OutputStream out),True,,"

writeTo
public void writeTo(OutputStream out)
             throws IOException
Writes the complete contents of this byte array output stream to
 the specified output stream argument, as if by calling the output
 stream's write method using out.write(buf, 0, count).

Parameters:
out - the output stream to which to write the data.
Throws:
IOException - if an I/O error occurs.


"
5,ByteArrayOutputStream,5,byte[] toByteArray(),True,,"

toByteArray
public byte[] toByteArray()
Creates a newly allocated byte array. Its size is the current
 size of this output stream and the valid contents of the buffer
 have been copied into it.

Returns:
the current contents of this output stream, as a byte array.
See Also:
size()


"
6,CharArrayReader,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
6,CharArrayReader,2,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] b,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
b - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The actual number of characters read, or -1 if
          the end of the stream has been reached
Throws:
IOException - If an I/O error occurs


"
6,CharArrayReader,3,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  Character-array readers
 are always ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
6,CharArrayReader,4,void close(),True,,"

close
public void close()
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader


"
6,CharArrayReader,5,void mark(int readAheadLimit),True,,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.  Subsequent calls to reset()
 will reposition the stream to this point.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  Because
                         the stream's input comes from a character array,
                         there is no actual limit; hence this argument is
                         ignored.
Throws:
IOException - If an I/O error occurs


"
7,CharArrayWriter,1,void write(int c),True,,"

write
public void write(int c)
Writes a character to the buffer.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
7,CharArrayWriter,2,"void write(char[] cbuf, int off, int len)",True,,"

write
public void write(char[] c,
                  int off,
                  int len)
Writes characters to the buffer.

Specified by:
write in class Writer
Parameters:
c - the data to be written
off - the start offset in the data
len - the number of chars that are written


"
7,CharArrayWriter,3,void writeTo(Writer out),True,,"

writeTo
public void writeTo(Writer out)
             throws IOException
Writes the contents of the buffer to another character stream.

Parameters:
out - the output stream to write to
Throws:
IOException - If an I/O error occurs.


"
7,CharArrayWriter,4,void reset(),True,,"

reset
public void reset()
Resets the buffer so that you can use it again without
 throwing away the already allocated buffer.

"
7,CharArrayWriter,5,char[] toCharArray(),True,,"

toCharArray
public char[] toCharArray()
Returns a copy of the input data.

Returns:
an array of chars copied from the input data.


"
8,Console,1,String readLine(),True,,"

readLine
public String readLine()
Reads a single line of text from the console.

Returns:
A string containing the line read from the console, not
          including any line-termination characters, or null
          if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
8,Console,2,char[] readPassword(),True,,"

readPassword
public char[] readPassword()
Reads a password or passphrase from the console with echoing disabled

Returns:
A character array containing the password or passphrase read
          from the console, not including any line-termination characters,
          or null if an end of stream has been reached.
Throws:
IOError - If an I/O error occurs.


"
8,Console,3,Writer writer(),False,,NULL
8,Console,4,Reader reader(),True,,"

reader
public Reader reader()
Retrieves the unique Reader object associated
 with this console.
 
 This method is intended to be used by sophisticated applications, for
 example, a Scanner object which utilizes the rich
 parsing/scanning functionality provided by the Scanner:
 
 Console con = System.console();
 if (con != null) {
     Scanner sc = new Scanner(con.reader());
     ...
 }
 

 For simple applications requiring only line-oriented reading, use
 readLine(java.lang.String, java.lang.Object...).
 
 The bulk read operations read(char[]) ,
 read(char[], int, int)  and
 read(java.nio.CharBuffer)
 on the returned object will not read in characters beyond the line
 bound for each invocation, even if the destination buffer has space for
 more characters. The Reader's read methods may block if a
 line bound has not been entered or reached on the console's input device.
 A line bound is considered to be any one of a line feed ('\n'),
 a carriage return ('\r'), a carriage return followed immediately
 by a linefeed, or an end of stream.

Returns:
The reader associated with this console


"
8,Console,5,void flush(),True,,"

flush
public void flush()
Flushes the console and forces any buffered output to be written
 immediately .

Specified by:
flush in interface Flushable


"
10,DataOutputStream,1,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte (the low eight bits of the argument
 b) to the underlying output stream. If no exception
 is thrown, the counter written is incremented by
 1.
 
 Implements the write method of OutputStream.

Specified by:
write in interface DataOutput
Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
10,DataOutputStream,2,void write(byte[] b),False,,NULL
10,DataOutputStream,3,void writeBoolean(boolean v),True,,"

writeBoolean
public final void writeBoolean(boolean v)
                        throws IOException
Writes a boolean to the underlying output stream as
 a 1-byte value. The value true is written out as the
 value (byte)1; the value false is
 written out as the value (byte)0. If no exception is
 thrown, the counter written is incremented by
 1.

Specified by:
writeBoolean in interface DataOutput
Parameters:
v - a boolean value to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
10,DataOutputStream,4,void writeInt(int v),True,,"

writeInt
public final void writeInt(int v)
                    throws IOException
Writes an int to the underlying output stream as four
 bytes, high byte first. If no exception is thrown, the counter
 written is incremented by 4.

Specified by:
writeInt in interface DataOutput
Parameters:
v - an int to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterOutputStream.out


"
10,DataOutputStream,5,void writeUTF(String str),True,,"

writeUTF
public final void writeUTF(String str)
                    throws IOException
Writes a string to the underlying output stream using
 modified UTF-8
 encoding in a machine-independent manner.
 
 First, two bytes are written to the output stream as if by the
 writeShort method giving the number of bytes to
 follow. This value is the number of bytes actually written out,
 not the length of the string. Following the length, each character
 of the string is output, in sequence, using the modified UTF-8 encoding
 for the character. If no exception is thrown, the counter
 written is incremented by the total number of
 bytes written to the output stream. This will be at least two
 plus the length of str, and at most two plus
 thrice the length of str.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - a string to be written.
Throws:
IOException - if an I/O error occurs.


"
11,File,1,boolean createNewFile(),True,,"

createNewFile
public boolean createNewFile()
                      throws IOException
Atomically creates a new, empty file named by this abstract pathname if
 and only if a file with this name does not yet exist.  The check for the
 existence of the file and the creation of the file if it does not exist
 are a single operation that is atomic with respect to all other
 filesystem activities that might affect the file.
 
 Note: this method should not be used for file-locking, as
 the resulting protocol cannot be made to work reliably. The
 FileLock
 facility should be used instead.

Returns:
true if the named file does not exist and was
          successfully created; false if the named file
          already exists
Throws:
IOException - If an I/O error occurred
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method denies write access to the file
Since:
1.2


"
11,File,2,boolean mkdir(),True,,"

mkdir
public boolean mkdir()
Creates the directory named by this abstract pathname.

Returns:
true if and only if the directory was
          created; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkWrite(java.lang.String)
          method does not permit the named directory to be created


"
11,File,3,String[] list(),True,,"

list
public String[] list()
Returns an array of strings naming the files and directories in the
 directory denoted by this abstract pathname.

  If this abstract pathname does not denote a directory, then this
 method returns null.  Otherwise an array of strings is
 returned, one for each file or directory in the directory.  Names
 denoting the directory itself and the directory's parent directory are
 not included in the result.  Each string is a file name rather than a
 complete path.

  There is no guarantee that the name strings in the resulting array
 will appear in any specific order; they are not, in particular,
 guaranteed to appear in alphabetical order.

  Note that the Files class defines the newDirectoryStream method to
 open a directory and iterate over the names of the files in the directory.
 This may use less resources when working with very large directories, and
 may be more responsive when working with remote directories.

Returns:
An array of strings naming the files and directories in the
          directory denoted by this abstract pathname.  The array will be
          empty if the directory is empty.  Returns null if
          this abstract pathname does not denote a directory, or if an
          I/O error occurs.
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(String) method denies read access to
          the directory


"
11,File,4,boolean delete(),True,,"

delete
public boolean delete()
Deletes the file or directory denoted by this abstract pathname.  If
 this pathname denotes a directory, then the directory must be empty in
 order to be deleted.

  Note that the Files class defines the delete method to throw an IOException
 when a file cannot be deleted. This is useful for error reporting and to
 diagnose why a file cannot be deleted.

Returns:
true if and only if the file or directory is
          successfully deleted; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkDelete(java.lang.String) method denies
          delete access to the file


"
11,File,5,boolean exists(),True,,"

exists
public boolean exists()
Tests whether the file or directory denoted by this abstract pathname
 exists.

Returns:
true if and only if the file or directory denoted
          by this abstract pathname exists; false otherwise
Throws:
SecurityException - If a security manager exists and its SecurityManager.checkRead(java.lang.String)
          method denies read access to the file or directory


"
12,FileDescriptor,1,FileDescriptor dup(),False,,NULL
12,FileDescriptor,2,void sync(),True,,"

sync
public void sync()
          throws SyncFailedException
Force all system buffers to synchronize with the underlying
 device.  This method returns after all modified data and
 attributes of this FileDescriptor have been written to the
 relevant device(s).  In particular, if this FileDescriptor
 refers to a physical storage medium, such as a file in a file
 system, sync will not return until all in-memory modified copies
 of buffers associated with this FileDescriptor have been
 written to the physical medium.

 sync is meant to be used by code that requires physical
 storage (such as a file) to be in a known state  For
 example, a class that provided a simple transaction facility
 might use sync to ensure that all changes to a file caused
 by a given transaction were recorded on a storage medium.

 sync only affects buffers downstream of this FileDescriptor.  If
 any in-memory buffering is being done by the application (for
 example, by a BufferedOutputStream object), those buffers must
 be flushed into the FileDescriptor (for example, by invoking
 OutputStream.flush) before that data will be affected by sync.

Throws:
SyncFailedException - Thrown when the buffers cannot be flushed,
        or because the system cannot guarantee that all the
        buffers have been synchronized with physical media.
Since:
JDK1.1


"
12,FileDescriptor,3,void valid(),False,,NULL
12,FileDescriptor,4,int hashCode(),False,,NULL
12,FileDescriptor,5,String toString(),False,,NULL
13,FileInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a byte of data from this input stream. This method blocks
 if no input is yet available.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             file is reached.
Throws:
IOException - if an I/O error occurs.


"
13,FileInputStream,2,int read(byte[] b),True,,"

read
public int read(byte[] b)
         throws IOException
Reads up to b.length bytes of data from this input
 stream into an array of bytes. This method blocks until some input
 is available.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
13,FileInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the file has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
13,FileInputStream,4,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the
 input stream.

 The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. If n is negative, the method
 will try to skip backwards. In case the backing file does not support
 backward skip at its current position, an IOException is
 thrown. The actual number of bytes skipped is returned. If it skips
 forwards, it returns a positive value. If it skips backwards, it
 returns a negative value.

 This method may skip more bytes than what are remaining in the
 backing file. This produces no exception and the number of bytes skipped
 may include some number of bytes that were beyond the EOF of the
 backing file. Attempting to read from the stream after skipping past
 the end will result in -1 indicating the end of the file.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if n is negative, if the stream does not
             support seek, or if an I/O error occurs.


"
13,FileInputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this file input stream and releases any system resources
 associated with the stream.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,1,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file output stream. Implements
 the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,2,void write(byte[] b),True,,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
OutputStream.write(byte[], int, int)


"
14,FileOutputStream,3,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this file output stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.


"
14,FileOutputStream,4,void flush(),False,,NULL
14,FileOutputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this file output stream and releases any system resources
 associated with this stream. This file output stream may no longer
 be used for writing bytes.

  If this stream has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
15,FilePermission,1,void checkPermission(java.security.Permission perm),False,,NULL
15,FilePermission,2,java.security.PermissionCollection newPermissionCollection(),False,,NULL
15,FilePermission,3,boolean implies(java.security.Permission permission),False,,NULL
15,FilePermission,4,java.lang.String getActions(),False,,NULL
15,FilePermission,5,java.security.PermissionCollection getPermissionCollection(),False,,NULL
16,FileReader,1,int read(),False,,NULL
16,FileReader,2,int read(char[] cbuf),False,,NULL
16,FileReader,3,"int read(char[] cbuf, int off, int len)",False,,NULL
16,FileReader,4,boolean ready(),False,,NULL
16,FileReader,5,void close(),False,,NULL
17,FileWriter,1,void write(int c),False,,NULL
17,FileWriter,2,void write(char[] cbuf),False,,NULL
17,FileWriter,3,void write(String str),False,,NULL
17,FileWriter,4,"void write(String str, int off, int len)",False,,NULL
17,FileWriter,5,void flush(),False,,NULL
18,FilterInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.
 
 This method
 simply performs in.read() and returns the result.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
in


"
18,FilterInputStream,2,int read(byte[] b),True,,"

read
public int read(byte[] b)
         throws IOException
Reads up to byte.length bytes of data from this
 input stream into an array of bytes. This method blocks until some
 input is available.
 
 This method simply performs the call
 read(b, 0, b.length) and returns
 the  result. It is important that it does
 not do in.read(b) instead;
 certain subclasses of  FilterInputStream
 depend on the implementation strategy actually
 used.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
read(byte[], int, int)


"
18,FilterInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes. If len is not zero, the method
 blocks until some input is available; otherwise, no
 bytes are read and 0 is returned.
 
 This method simply performs in.read(b, off, len)
 and returns the result.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
in


"
18,FilterInputStream,4,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from the
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. The actual number of bytes skipped is
 returned.
 
 This method simply performs in.skip(n).

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
18,FilterInputStream,5,int available(),True,,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 caller of a method for this input stream. The next caller might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method returns the result of in.available().

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking.
Throws:
IOException - if an I/O error occurs.


"
19,FilterOutputStream,1,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this output stream.
 
 The write method of FilterOutputStream
 calls the write method of its underlying output stream,
 that is, it performs out.write(b).
 
 Implements the abstract write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs.


"
19,FilterOutputStream,2,void write(byte[] b),True,,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes to this output stream.
 
 The write method of FilterOutputStream
 calls its write method of three arguments with the
 arguments b, 0, and
 b.length.
 
 Note that this method does not call the one-argument
 write method of its underlying stream with the single
 argument b.

Overrides:
write in class OutputStream
Parameters:
b - the data to be written.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
19,FilterOutputStream,3,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified
 byte array starting at offset off to
 this output stream.
 
 The write method of FilterOutputStream
 calls the write method of one argument on each
 byte to output.
 
 Note that this method does not call the write method
 of its underlying input stream with the same arguments. Subclasses
 of FilterOutputStream should provide a more efficient
 implementation of this method.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
See Also:
write(int)


"
19,FilterOutputStream,4,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out to the stream.
 
 The flush method of FilterOutputStream
 calls the flush method of its underlying output stream.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
out


"
19,FilterOutputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this output stream and releases any system resources
 associated with the stream.
 
 The close method of FilterOutputStream
 calls its flush method, and then calls the
 close method of its underlying output stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.
See Also:
flush(), 
out


"
20,FilterReader,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,2,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,3,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,4,void mark(int readAheadLimit),True,,"

mark
public void mark(int readAheadLimit)
          throws IOException
Marks the present position in the stream.

Overrides:
mark in class Reader
Parameters:
readAheadLimit - Limit on the number of characters that may be
                         read while still preserving the mark.  After
                         reading this many characters, attempting to
                         reset the stream may fail.
Throws:
IOException - If an I/O error occurs


"
20,FilterReader,5,void reset(),True,,"

reset
public void reset()
           throws IOException
Resets the stream.

Overrides:
reset in class Reader
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,1,void write(int c),True,,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,2,"void write(char[] cbuf, int off, int len)",True,,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Buffer of characters to be written
off - Offset from which to start reading characters
len - Number of characters to be written
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,3,"void write(String str, int off, int len)",True,,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Overrides:
write in class Writer
Parameters:
str - String to be written
off - Offset from which to start reading characters
len - Number of characters to be written
Throws:
IOException - If an I/O error occurs


"
21,FilterWriter,4,void write(String str),False,,NULL
21,FilterWriter,5,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
22,InputStream,1,int read(),True,,"

read
public abstract int read()
                  throws IOException
Reads the next byte of data from the input stream. The value byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the stream
 has been reached, the value -1 is returned. This method
 blocks until input data is available, the end of the stream is detected,
 or an exception is thrown.

  A subclass must provide an implementation of this method.

Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
22,InputStream,2,int read(byte[] b),True,,"

read
public int read(byte[] b)
         throws IOException
Reads some number of bytes from the input stream and stores them into
 the buffer array b. The number of bytes actually read is
 returned as an integer.  This method blocks until input data is
 available, end of file is detected, or an exception is thrown.

  If the length of b is zero, then no bytes are read and
 0 is returned; otherwise, there is an attempt to read at
 least one byte. If no byte is available because the stream is at the
 end of the file, the value -1 is returned; otherwise, at
 least one byte is read and stored into b.

  The first byte read is stored into element b[0], the
 next one into b[1], and so on. The number of bytes read is,
 at most, equal to the length of b. Let k be the
 number of bytes actually read; these bytes will be stored in elements
 b[0] through b[k-1],
 leaving elements b[k] through
 b[b.length-1] unaffected.

  The read(b) method for class InputStream
 has the same effect as:  read(b, 0, b.length) 

Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - If the first byte cannot be read for any reason
 other than the end of the file, if the input stream has been closed, or
 if some other I/O error occurs.
NullPointerException - if b is null.
See Also:
read(byte[], int, int)


"
22,InputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skips over and discards n bytes of data from this input
 stream. The skip method may, for a variety of reasons, end
 up skipping over some smaller number of bytes, possibly 0.
 This may result from any of a number of conditions; reaching end of file
 before n bytes have been skipped is only one possibility.
 The actual number of bytes skipped is returned. If n is
 negative, the skip method for class InputStream always
 returns 0, and no bytes are skipped. Subclasses may handle the negative
 value differently.

  The skip method of this class creates a
 byte array and then repeatedly reads into it until n bytes
 have been read or the end of the stream has been reached. Subclasses are
 encouraged to provide a more efficient implementation of this method.
 For instance, the implementation may depend on the ability to seek.

Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
22,InputStream,4,int available(),True,,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from this input stream without blocking by the next
 invocation of a method for this input stream. The next invocation
 might be the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.

  Note that while some implementations of InputStream will return
 the total number of bytes in the stream, many will not.  It is
 never correct to use the return value of this method to allocate
 a buffer intended to hold all data in this stream.

  A subclass' implementation of this method may choose to throw an
 IOException if this input stream has been closed by
 invoking the close() method.

  The available method for class InputStream always
 returns 0.

  This method should be overridden by subclasses.

Returns:
an estimate of the number of bytes that can be read (or skipped
             over) from this input stream without blocking or 0 when
             it reaches the end of the input stream.
Throws:
IOException - if an I/O error occurs.


"
22,InputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources associated
 with the stream.

  The close method of InputStream does
 nothing.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
23,InputStreamReader,1,void close(),True,,"

close
public void close()
           throws IOException
Description copied from class: Reader
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,2,String getEncoding(),True,,"

getEncoding
public String getEncoding()
Returns the name of the character encoding being used by this stream.

  If the encoding has an historical name then that name is returned;
 otherwise the encoding's canonical name is returned.

  If this instance was created with the InputStreamReader(InputStream, String) constructor then the returned
 name, being unique for the encoding, may differ from the name passed to
 the constructor. This method will return null if the
 stream has been closed.
 

Returns:
The historical name of this encoding, or
         null if the stream has been closed
See Also:
Charset


"
23,InputStreamReader,3,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
         reached
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,4,"int read(char[] cbuf, int offset, int length)",True,,"

read
public int read(char[] cbuf,
                int offset,
                int length)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
offset - Offset at which to start storing characters
length - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
23,InputStreamReader,5,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.  An InputStreamReader is
 ready if its input buffer is not empty, or if bytes are available to be
 read from the underlying byte stream.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
24,LineNumberInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Deprecated. 
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.
 
 The read method of
 LineNumberInputStream calls the read
 method of the underlying input stream. It checks for carriage
 returns and newline characters in the input, and modifies the
 current line number as appropriate. A carriage-return character or
 a carriage return followed by a newline character are both
 converted into a single newline character.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of this
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in, 
getLineNumber()


"
24,LineNumberInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Deprecated. 
Reads up to len bytes of data from this input stream
 into an array of bytes. This method blocks until some input is available.
 
 The read method of
 LineNumberInputStream repeatedly calls the
 read method of zero arguments to fill in the byte array.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             this stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
read()


"
24,LineNumberInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Deprecated. 
Skips over and discards n bytes of data from this
 input stream. The skip method may, for a variety of
 reasons, end up skipping over some smaller number of bytes,
 possibly 0. The actual number of bytes skipped is
 returned.  If n is negative, no bytes are skipped.
 
 The skip method of LineNumberInputStream creates
 a byte array and then repeatedly reads into it until
 n bytes have been read or the end of the stream has
 been reached.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
24,LineNumberInputStream,4,int available(),True,,"

available
public int available()
              throws IOException
Deprecated. 
Returns the number of bytes that can be read from this input
 stream without blocking.
 
 Note that if the underlying input stream is able to supply
 k input characters without blocking, the
 LineNumberInputStream can guarantee only to provide
 k/2 characters without blocking, because the
 k characters from the underlying input stream might
 consist of k/2 pairs of '\r' and
 '\n', which are converted to just
 k/2 '\n' characters.

Overrides:
available in class FilterInputStream
Returns:
the number of bytes that can be read from this input stream
             without blocking.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
24,LineNumberInputStream,5,void mark(int readlimit),True,,"

mark
public void mark(int readlimit)
Deprecated. 
Marks the current position in this input stream. A subsequent
 call to the reset method repositions this stream at
 the last marked position so that subsequent reads re-read the same bytes.
 
 The mark method of
 LineNumberInputStream remembers the current line
 number in a private variable, and then calls the mark
 method of the underlying input stream.

Overrides:
mark in class FilterInputStream
Parameters:
readlimit - the maximum limit of bytes that can be read before
                      the mark position becomes invalid.
See Also:
FilterInputStream.in, 
reset()


"
25,LineNumberReader,1,int getLineNumber(),True,,"

getLineNumber
public int getLineNumber()
Get the current line number.

Returns:
The current line number
See Also:
setLineNumber(int)


"
25,LineNumberReader,2,void setLineNumber(int lineNumber),True,,"

setLineNumber
public void setLineNumber(int lineNumber)
Set the current line number.

Parameters:
lineNumber - An int specifying the line number
See Also:
getLineNumber()


"
25,LineNumberReader,3,String readLine(),True,,"

readLine
public String readLine()
                throws IOException
Read a line of text.  Whenever a line terminator is
 read the current line number is incremented.

Overrides:
readLine in class BufferedReader
Returns:
A String containing the contents of the line, not including
          any line termination characters, or
          null if the end of the stream has been reached
Throws:
IOException - If an I/O error occurs
See Also:
Files.readAllLines(java.nio.file.Path, java.nio.charset.Charset)


"
25,LineNumberReader,4,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Skip characters.

Overrides:
skip in class BufferedReader
Parameters:
n - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs
IllegalArgumentException - If n is negative


"
25,LineNumberReader,5,void mark(int readAheadLimit),True,,"

mark
public void mark(int readAheadLimit)
          throws IOException
Mark the present position in the stream.  Subsequent calls to reset()
 will attempt to reposition the stream to this point, and will also reset
 the line number appropriately.

Overrides:
mark in class BufferedReader
Parameters:
readAheadLimit - Limit on the number of characters that may be read while still
         preserving the mark.  After reading this many characters,
         attempting to reset the stream may fail.
Throws:
IOException - If an I/O error occurs


"
26,ObjectInputStream,1,Object readObject(),True,,"

readObject
public final Object readObject()
                        throws IOException,
                               ClassNotFoundException
Read an object from the ObjectInputStream.  The class of the object, the
 signature of the class, and the values of the non-transient and
 non-static fields of the class and all of its supertypes are read.
 Default deserializing for a class can be overridden using the writeObject
 and readObject methods.  Objects referenced by this object are read
 transitively so that a complete equivalent graph of objects is
 reconstructed by readObject.

 The root object is completely restored when all of its fields and the
 objects it references are completely restored.  At this point the object
 validation callbacks are executed in order based on their registered
 priorities. The callbacks are registered by objects (in the readObject
 special methods) as they are individually restored.

 Exceptions are thrown for problems with the InputStream and for
 classes that should not be deserialized.  All exceptions are fatal to
 the InputStream and leave it in an indeterminate state; it is up to the
 caller to ignore or recover the stream state.

Specified by:
readObject in interface ObjectInput
Returns:
the object read from the stream
Throws:
ClassNotFoundException - Class of a serialized object cannot be
          found.
InvalidClassException - Something is wrong with a class used by
          serialization.
StreamCorruptedException - Control information in the
          stream is inconsistent.
OptionalDataException - Primitive data was found in the
          stream instead of objects.
IOException - Any of the usual Input/Output related exceptions.


"
26,ObjectInputStream,2,int readInt(),True,,"

readInt
public int readInt()
            throws IOException
Reads a 32 bit int.

Specified by:
readInt in interface DataInput
Returns:
the 32 bit integer read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
26,ObjectInputStream,3,double readDouble(),True,,"

readDouble
public double readDouble()
                  throws IOException
Reads a 64 bit double.

Specified by:
readDouble in interface DataInput
Returns:
the 64 bit double read.
Throws:
EOFException - If end of file is reached.
IOException - If other I/O error has occurred.


"
26,ObjectInputStream,4,String readUTF(),True,,"

readUTF
public String readUTF()
               throws IOException
Reads a String in
 modified UTF-8
 format.

Specified by:
readUTF in interface DataInput
Returns:
the String.
Throws:
IOException - if there are I/O errors while reading from the
          underlying InputStream
UTFDataFormatException - if read bytes do not represent a valid
          modified UTF-8 encoding of a string


"
26,ObjectInputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes the input stream. Must be called to release any resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface ObjectInput
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - If an I/O error has occurred.


"
27,ObjectInputStream.GetField,1,boolean defaulted(String name),True,,"

defaulted
public abstract boolean defaulted(String name)
                           throws IOException
Return true if the named field is defaulted and has no value in this
 stream.

Parameters:
name - the name of the field
Returns:
true, if and only if the named field is defaulted
Throws:
IOException - if there are I/O errors while reading from
         the underlying InputStream
IllegalArgumentException - if name does not
         correspond to a serializable field


"
27,ObjectInputStream.GetField,2,"boolean get(String name, boolean def)",True,,"

get
public abstract boolean get(String name,
                            boolean val)
                     throws IOException
Get the value of the named boolean field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named boolean field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
27,ObjectInputStream.GetField,3,"byte get(String name, byte def)",True,,"

get
public abstract byte get(String name,
                         byte val)
                  throws IOException
Get the value of the named byte field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named byte field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
27,ObjectInputStream.GetField,4,"char get(String name, char def)",True,,"

get
public abstract char get(String name,
                         char val)
                  throws IOException
Get the value of the named char field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named char field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
27,ObjectInputStream.GetField,5,"double get(String name, double def)",True,,"

get
public abstract double get(String name,
                           double val)
                    throws IOException
Get the value of the named double field from the persistent field.

Parameters:
name - the name of the field
val - the default value to use if name does not
         have a value
Returns:
the value of the named double field
Throws:
IOException - if there are I/O errors while reading from the
         underlying InputStream
IllegalArgumentException - if type of name is
         not serializable or if the field type is incorrect


"
28,ObjectOutputStream,1,void writeObject(Object obj),True,,"

writeObject
public final void writeObject(Object obj)
                       throws IOException
Write the specified object to the ObjectOutputStream.  The class of the
 object, the signature of the class, and the values of the non-transient
 and non-static fields of the class and all of its supertypes are
 written.  Default serialization for a class can be overridden using the
 writeObject and the readObject methods.  Objects referenced by this
 object are written transitively so that a complete equivalent graph of
 objects can be reconstructed by an ObjectInputStream.

 Exceptions are thrown for problems with the OutputStream and for
 classes that should not be serialized.  All exceptions are fatal to the
 OutputStream, which is left in an indeterminate state, and it is up to
 the caller to ignore or recover the stream state.

Specified by:
writeObject in interface ObjectOutput
Parameters:
obj - the object to be written
Throws:
InvalidClassException - Something is wrong with a class used by
          serialization.
NotSerializableException - Some object to be serialized does not
          implement the java.io.Serializable interface.
IOException - Any exception thrown by the underlying
          OutputStream.


"
28,ObjectOutputStream,2,void writeInt(int value),True,,"

writeInt
public void writeInt(int val)
              throws IOException
Writes a 32 bit int.

Specified by:
writeInt in interface DataOutput
Parameters:
val - the integer value to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,3,void writeUTF(String str),True,,"

writeUTF
public void writeUTF(String str)
              throws IOException
Primitive data write of this String in
 modified UTF-8
 format.  Note that there is a
 significant difference between writing a String into the stream as
 primitive data or as an Object. A String instance written by writeObject
 is written into the stream as a String initially. Future writeObject()
 calls write references to the string into the stream.

Specified by:
writeUTF in interface DataOutput
Parameters:
str - the String to be written
Throws:
IOException - if I/O errors occur while writing to the underlying
          stream


"
28,ObjectOutputStream,4,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes the stream. This will write any buffered output bytes and flush
 through to the underlying stream.

Specified by:
flush in interface Flushable
Specified by:
flush in interface ObjectOutput
Overrides:
flush in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
28,ObjectOutputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes the stream. This method must be called to release any resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface ObjectOutput
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - If an I/O error has occurred.


"
29,ObjectOutputStream.PutField,1,"void put(String name, boolean value)",True,,"

put
public abstract void put(String name,
                         boolean val)
Put the value of the named boolean field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 boolean


"
29,ObjectOutputStream.PutField,2,"void put(String name, byte value)",True,,"

put
public abstract void put(String name,
                         byte val)
Put the value of the named byte field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 byte


"
29,ObjectOutputStream.PutField,3,"void put(String name, char value)",True,,"

put
public abstract void put(String name,
                         char val)
Put the value of the named char field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 char


"
29,ObjectOutputStream.PutField,4,"void put(String name, double value)",True,,"

put
public abstract void put(String name,
                         double val)
Put the value of the named double field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 double


"
29,ObjectOutputStream.PutField,5,"void put(String name, float value)",True,,"

put
public abstract void put(String name,
                         float val)
Put the value of the named float field into the persistent field.

Parameters:
name - the name of the serializable field
val - the value to assign to the field
Throws:
IllegalArgumentException - if name does not
 match the name of a serializable field for the class whose fields
 are being written, or if the type of the named field is not
 float


"
30,ObjectStreamClass,1,String getName(),True,,"

getName
public String getName()
Returns the name of the class described by this descriptor.
 This method returns the name of the class in the format that
 is used by the Class.getName() method.

Returns:
a string representing the name of the class


"
30,ObjectStreamClass,2,ObjectStreamField getField(String name),True,,"

getField
public ObjectStreamField getField(String name)
Get the field of this class by name.

Parameters:
name - the name of the data field to look for
Returns:
The ObjectStreamField object of the named field or null if
          there is no such named field.


"
30,ObjectStreamClass,3,long getSerialVersionUID(),True,,"

getSerialVersionUID
public long getSerialVersionUID()
Return the serialVersionUID for this class.  The serialVersionUID
 defines a set of classes all with the same name that have evolved from a
 common root class and agree to be serialized and deserialized using a
 common format.  NonSerializable classes have a serialVersionUID of 0L.

Returns:
the SUID of the class described by this descriptor


"
30,ObjectStreamClass,4,ObjectStreamClass getSuperclass(),False,,NULL
30,ObjectStreamClass,5,ObjectStreamField[] getFields(),True,,"

getFields
public ObjectStreamField[] getFields()
Return an array of the fields of this serializable class.

Returns:
an array containing an element for each persistent field of
          this class. Returns an array of length zero if there are no
          fields.
Since:
1.2


"
31,ObjectStreamField,1,String getName(),True,,"

getName
public String getName()
Get the name of this field.

Returns:
a String representing the name of the serializable
          field


"
31,ObjectStreamField,2,Class<?> getType(),True,,"

getType
public Class<?> getType()
Get the type of the field.  If the type is non-primitive and this
 ObjectStreamField was obtained from a deserialized ObjectStreamClass instance, then Object.class is returned.
 Otherwise, the Class object for the type of the field is
 returned.

Returns:
a Class object representing the type of the
          serializable field


"
31,ObjectStreamField,3,char getTypeCode(),True,,"

getTypeCode
public char getTypeCode()
Returns character encoding of field type.  The encoding is as follows:
 
 B            byte
 C            char
 D            double
 F            float
 I            int
 J            long
 L            class or interface
 S            short
 Z            boolean
 [            array
 

Returns:
the typecode of the serializable field


"
31,ObjectStreamField,4,String toString(),True,,"

toString
public String toString()
Return a string that describes this field.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
31,ObjectStreamField,5,long getOffset(),False,,NULL
32,OutputStream,1,void write(int b),True,,"

write
public abstract void write(int b)
                    throws IOException
Writes the specified byte to this output stream. The general
 contract for write is that one byte is written
 to the output stream. The byte to be written is the eight
 low-order bits of the argument b. The 24
 high-order bits of b are ignored.
 
 Subclasses of OutputStream must provide an
 implementation for this method.

Parameters:
b - the byte.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException may be thrown if the
             output stream has been closed.


"
32,OutputStream,2,void write(byte[] b),True,,"

write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array
 to this output stream. The general contract for write(b)
 is that it should have exactly the same effect as the call
 write(b, 0, b.length).

Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
write(byte[], int, int)


"
32,OutputStream,3,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out. The general contract of flush is
 that calling it is an indication that, if any bytes previously
 written have been buffered by the implementation of the output
 stream, such bytes should immediately be written to their
 intended destination.
 
 If the intended destination of this stream is an abstraction provided by
 the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.
 
 The flush method of OutputStream does nothing.

Specified by:
flush in interface Flushable
Throws:
IOException - if an I/O error occurs.


"
32,OutputStream,4,void close(),True,,"

close
public void close()
           throws IOException
Closes this output stream and releases any system resources
 associated with this stream. The general contract of close
 is that it closes the output stream. A closed stream cannot perform
 output operations and cannot be reopened.
 
 The close method of OutputStream does nothing.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs.


"
32,OutputStream,5,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this output stream.
 The general contract for write(b, off, len) is that
 some of the bytes in the array b are written to the
 output stream in order; element b[off] is the first
 byte written and b[off+len-1] is the last byte written
 by this operation.
 
 The write method of OutputStream calls
 the write method of one argument on each of the bytes to be
 written out. Subclasses are encouraged to override this method and
 provide a more efficient implementation.
 
 If b is null, a
 NullPointerException is thrown.
 
 If off is negative, or len is negative, or
 off+len is greater than the length of the array
 b, then an IndexOutOfBoundsException is thrown.

Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs. In particular,
             an IOException is thrown if the output
             stream is closed.


"
33,OutputStreamWriter,1,void write(int c),True,,"

write
public void write(int c)
           throws IOException
Writes a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,2,void write(char[] cbuf),False,,NULL
33,OutputStreamWriter,3,void write(String str),False,,NULL
33,OutputStreamWriter,4,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - If an I/O error occurs


"
33,OutputStreamWriter,5,void close(),True,,"

close
public void close()
           throws IOException
Description copied from class: Writer
Closes the stream, flushing it first. Once the stream has been closed,
 further write() or flush() invocations will cause an IOException to be
 thrown. Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - If an I/O error occurs


"
34,PipedInputStream,1,void connect(PipedOutputStream src),True,,"

connect
public void connect(PipedOutputStream src)
             throws IOException
Causes this piped input stream to be connected
 to the piped  output stream src.
 If this object is already connected to some
 other piped output  stream, an IOException
 is thrown.
 
 If src is an
 unconnected piped output stream and snk
 is an unconnected piped input stream, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped output stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
34,PipedInputStream,2,int read(),True,,"

read
public int read()
         throws IOException
Reads the next byte of data from this piped input stream. The
 value byte is returned as an int in the range
 0 to 255.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           unconnected,
            broken, closed,
           or if an I/O error occurs.


"
34,PipedInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this piped input
 stream into an array of bytes. Less than len bytes
 will be read if the end of the data stream is reached or if
 len exceeds the pipe's buffer size.
 If len  is zero, then no bytes are read and 0 is returned;
 otherwise, the method blocks until at least 1 byte of input is
 available, end of the stream has been detected, or an exception is
 thrown.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if the pipe is  broken,
           unconnected,
           closed, or if an I/O error occurs.
See Also:
InputStream.read()


"
34,PipedInputStream,4,int available(),True,,"

available
public int available()
              throws IOException
Returns the number of bytes that can be read from this input
 stream without blocking.

Overrides:
available in class InputStream
Returns:
the number of bytes that can be read from this input stream
         without blocking, or 0 if this input stream has been
         closed by invoking its close() method, or if the pipe
         is unconnected, or
           broken.
Throws:
IOException - if an I/O error occurs.
Since:
JDK1.0.2


"
34,PipedInputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this piped input stream and releases any system resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
35,PipedOutputStream,1,void connect(PipedInputStream snk),True,,"

connect
public void connect(PipedInputStream snk)
             throws IOException
Connects this piped output stream to a receiver. If this object
 is already connected to some other piped input stream, an
 IOException is thrown.
 
 If snk is an unconnected piped input stream and
 src is an unconnected piped output stream, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped input stream to connect to.
Throws:
IOException - if an I/O error occurs.


"
35,PipedOutputStream,2,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte to the piped output stream.
 
 Implements the write method of OutputStream.

Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
35,PipedOutputStream,3,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Writes len bytes from the specified byte array
 starting at offset off to this piped output stream.
 This method blocks until all the bytes are written to the output
 stream.

Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if the pipe is  broken,
          unconnected,
          closed, or if an I/O error occurs.


"
35,PipedOutputStream,4,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output bytes
 to be written out.
 This will notify any readers that bytes are waiting in the pipe.

Specified by:
flush in interface Flushable
Overrides:
flush in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
35,PipedOutputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this piped output stream and releases any system resources
 associated with this stream. This stream may no longer be used for
 writing bytes.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.


"
36,PipedReader,1,void connect(PipedWriter src),True,,"

connect
public void connect(PipedWriter src)
             throws IOException
Causes this piped reader to be connected
 to the piped  writer src.
 If this object is already connected to some
 other piped writer, an IOException
 is thrown.
 
 If src is an
 unconnected piped writer and snk
 is an unconnected piped reader, they
 may be connected by either the call:

 snk.connect(src) 

 or the call:

 src.connect(snk) 

 The two calls have the same effect.

Parameters:
src - The piped writer to connect to.
Throws:
IOException - if an I/O error occurs.


"
36,PipedReader,2,int read(),True,,"

read
public int read()
         throws IOException
Reads the next character of data from this piped stream.
 If no character is available because the end of the stream
 has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of
 the stream is detected, or an exception is thrown.

Overrides:
read in class Reader
Returns:
the next character of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed,
          or an I/O error occurs.


"
36,PipedReader,3,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads up to len characters of data from this piped
 stream into an array of characters. Less than len characters
 will be read if the end of the data stream is reached or if
 len exceeds the pipe's buffer size. This method
 blocks until at least one character of input is available.

Specified by:
read in class Reader
Parameters:
cbuf - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of characters read.
Returns:
the total number of characters read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if the pipe is
                   broken,
                  unconnected, closed,
                  or an I/O error occurs.


"
36,PipedReader,4,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tell whether this stream is ready to be read.  A piped character
 stream is ready if the circular buffer is not empty.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - if the pipe is
                   broken,
                  unconnected, or closed.


"
36,PipedReader,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this piped stream and releases any system resources
 associated with the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader
Throws:
IOException - if an I/O error occurs.


"
37,PipedWriter,1,void connect(PipedReader snk),True,,"

connect
public void connect(PipedReader snk)
             throws IOException
Connects this piped writer to a receiver. If this object
 is already connected to some other piped reader, an
 IOException is thrown.
 
 If snk is an unconnected piped reader and
 src is an unconnected piped writer, they may
 be connected by either the call:
 
 src.connect(snk)
 or the call:
 
 snk.connect(src)
 The two calls have the same effect.

Parameters:
snk - the piped reader to connect to.
Throws:
IOException - if an I/O error occurs.


"
37,PipedWriter,2,void flush(),True,,"

flush
public void flush()
           throws IOException
Flushes this output stream and forces any buffered output characters
 to be written out.
 This will notify any readers that characters are waiting in the pipe.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
Throws:
IOException - if the pipe is closed, or an I/O error occurs.


"
37,PipedWriter,3,"void write(char[] cbuf, int off, int len)",True,,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
           throws IOException
Writes len characters from the specified character array
 starting at offset off to this piped output stream.
 This method blocks until all the characters are written to the output
 stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.

Specified by:
write in class Writer
Parameters:
cbuf - the data.
off - the start offset in the data.
len - the number of characters to write.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
37,PipedWriter,4,void write(int c),True,,"

write
public void write(int c)
           throws IOException
Writes the specified char to the piped output stream.
 If a thread was reading data characters from the connected piped input
 stream, but the thread is no longer alive, then an
 IOException is thrown.
 
 Implements the write method of Writer.

Overrides:
write in class Writer
Parameters:
c - the char to be written.
Throws:
IOException - if the pipe is
           broken,
          unconnected, closed
          or an I/O error occurs.


"
37,PipedWriter,5,void close(),True,,"

close
public void close()
           throws IOException
Closes this piped output stream and releases any system resources
 associated with this stream. This stream may no longer be used for
 writing characters.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Writer
Throws:
IOException - if an I/O error occurs.


"
38,PrintStream,1,void print(boolean b),True,,"

print
public void print(boolean b)
Prints a boolean value.  The string produced by String.valueOf(boolean) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
b - The boolean to be printed


"
38,PrintStream,2,void print(char c),True,,"

print
public void print(char c)
Prints a character.  The character is translated into one or more bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
c - The char to be printed


"
38,PrintStream,3,void print(double d),True,,"

print
public void print(double d)
Prints a double-precision floating-point number.  The string produced by
 String.valueOf(double) is translated into
 bytes according to the platform's default character encoding, and these
 bytes are written in exactly the manner of the write(int) method.

Parameters:
d - The double to be printed
See Also:
Double.toString(double)


"
38,PrintStream,4,void print(int i),True,,"

print
public void print(int i)
Prints an integer.  The string produced by String.valueOf(int) is translated into bytes
 according to the platform's default character encoding, and these bytes
 are written in exactly the manner of the
 write(int) method.

Parameters:
i - The int to be printed
See Also:
Integer.toString(int)


"
38,PrintStream,5,void println(String x),True,,"

println
public void println(String x)
Prints a String and then terminate the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - The String to be printed.


"
39,PrintWriter,1,void print(String s),True,,"

print
public void print(String s)
Prints a string.  If the argument is null then the string
 ""null"" is printed.  Otherwise, the string's characters are
 converted into bytes according to the platform's default character
 encoding, and these bytes are written in exactly the manner of the
 write(int) method.

Parameters:
s - The String to be printed


"
39,PrintWriter,2,void println(String x),True,,"

println
public void println(String x)
Prints a String and then terminates the line.  This method behaves as
 though it invokes print(String) and then
 println().

Parameters:
x - the String value to be printed


"
39,PrintWriter,3,"void printf(String format, Object... args)",False,,NULL
39,PrintWriter,4,"void write(char[] buf, int off, int len)",True,,"

write
public void write(char[] buf,
                  int off,
                  int len)
Writes A Portion of an array of characters.

Specified by:
write in class Writer
Parameters:
buf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write


"
39,PrintWriter,5,void flush(),True,,"

flush
public void flush()
Flushes the stream.

Specified by:
flush in interface Flushable
Specified by:
flush in class Writer
See Also:
checkError()


"
40,PushbackInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned. This method blocks until input data
 is available, the end of the stream is detected, or an exception
 is thrown.

  This method returns the most recently pushed-back byte, if there is
 one, and otherwise calls the read method of its underlying
 input stream and returns whatever value that method returns.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream has been reached.
Throws:
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read()


"
40,PushbackInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream into
 an array of bytes.  This method first reads any pushed-back bytes; after
 that, if fewer than len bytes have been read then it
 reads from the underlying input stream. If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if this input stream has been closed by
             invoking its close() method,
             or an I/O error occurs.
See Also:
InputStream.read(byte[], int, int)


"
40,PushbackInputStream,3,void unread(int b),True,,"

unread
public void unread(int b)
            throws IOException
Pushes back a byte by copying it to the front of the pushback buffer.
 After this method returns, the next byte to be read will have the value
 (byte)b.

Parameters:
b - the int value whose low-order
                  byte is to be pushed back.
Throws:
IOException - If there is not enough room in the pushback
            buffer for the byte, or this input stream has been closed by
            invoking its close() method.


"
40,PushbackInputStream,4,"void unread(byte[] b, int off, int len)",True,,"

unread
public void unread(byte[] b,
                   int off,
                   int len)
            throws IOException
Pushes back a portion of an array of bytes by copying it to the front
 of the pushback buffer.  After this method returns, the next byte to be
 read will have the value b[off], the byte after that will
 have the value b[off+1], and so forth.

Parameters:
b - the byte array to push back.
off - the start offset of the data.
len - the number of bytes to push back.
Throws:
IOException - If there is not enough room in the pushback
            buffer for the specified number of bytes,
            or this input stream has been closed by
            invoking its close() method.
Since:
JDK1.1


"
40,PushbackInputStream,5,boolean markSupported(),True,,"

markSupported
public boolean markSupported()
Tests if this input stream supports the mark and
 reset methods, which it does not.

Overrides:
markSupported in class FilterInputStream
Returns:
false, since this class does not support the
           mark and reset methods.
See Also:
InputStream.mark(int), 
InputStream.reset()


"
41,PushbackReader,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class FilterReader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,2,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Overrides:
read in class FilterReader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
41,PushbackReader,3,"void unread(char[] cbuf, int off, int len)",True,,"

unread
public void unread(char[] cbuf,
                   int off,
                   int len)
            throws IOException
Pushes back a portion of an array of characters by copying it to the
 front of the pushback buffer.  After this method returns, the next
 character to be read will have the value cbuf[off], the
 character after that will have the value cbuf[off+1], and
 so forth.

Parameters:
cbuf - Character array
off - Offset of first character to push back
len - Number of characters to push back
Throws:
IOException - If there is insufficient room in the pushback
                          buffer, or if some other I/O error occurs


"
41,PushbackReader,4,void unread(int c),True,,"

unread
public void unread(int c)
            throws IOException
Pushes back a single character by copying it to the front of the
 pushback buffer. After this method returns, the next character to be read
 will have the value (char)c.

Parameters:
c - The int value representing a character to be pushed back
Throws:
IOException - If the pushback buffer is full,
                          or if some other I/O error occurs


"
41,PushbackReader,5,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class FilterReader
Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
42,RandomAccessFile,1,void seek(long pos),True,,"

seek
public void seek(long pos)
          throws IOException
Sets the file-pointer offset, measured from the beginning of this
 file, at which the next read or write occurs.  The offset may be
 set beyond the end of the file. Setting the offset beyond the end
 of the file does not change the file length.  The file length will
 change only by writing after the offset has been set beyond the end
 of the file.

Parameters:
pos - the offset position, measured in bytes from the
                   beginning of the file, at which to set the file
                   pointer.
Throws:
IOException - if pos is less than
                          0 or if an I/O error occurs.


"
42,RandomAccessFile,2,int read(),True,,"

read
public int read()
         throws IOException
Reads a byte of data from this file. The byte is returned as an
 integer in the range 0 to 255 (0x00-0x0ff). This
 method blocks if no input is yet available.
 
 Although RandomAccessFile is not a subclass of
 InputStream, this method behaves in exactly the same
 way as the InputStream.read() method of
 InputStream.

Returns:
the next byte of data, or -1 if the end of the
             file has been reached.
Throws:
IOException - if an I/O error occurs. Not thrown if
                          end-of-file has been reached.


"
42,RandomAccessFile,3,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Writes the specified byte to this file. The write starts at
 the current file pointer.

Specified by:
write in interface DataOutput
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,4,long length(),True,,"

length
public long length()
            throws IOException
Returns the length of this file.

Returns:
the length of this file, measured in bytes.
Throws:
IOException - if an I/O error occurs.


"
42,RandomAccessFile,5,void setLength(long newLength),True,,"

setLength
public void setLength(long newLength)
               throws IOException
Sets the length of this file.

  If the present length of the file as returned by the
 length method is greater than the newLength
 argument then the file will be truncated.  In this case, if the file
 offset as returned by the getFilePointer method is greater
 than newLength then after this method returns the offset
 will be equal to newLength.

  If the present length of the file as returned by the
 length method is smaller than the newLength
 argument then the file will be extended.  In this case, the contents of
 the extended portion of the file are not defined.

Parameters:
newLength - The desired length of the file
Throws:
IOException - If an I/O error occurs
Since:
1.2


"
43,Reader,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.  This method will block until a character is
 available, an I/O error occurs, or the end of the stream is reached.

  Subclasses that intend to support efficient single-character input
 should override this method.

Returns:
The character read, as an integer in the range 0 to 65535
             (0x00-0xffff), or -1 if the end of the stream has
             been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,2,int read(char[] cbuf),True,,"

read
public int read(char[] cbuf)
         throws IOException
Reads characters into an array.  This method will block until some input
 is available, an I/O error occurs, or the end of the stream is reached.

Parameters:
cbuf - Destination buffer
Returns:
The number of characters read, or -1
              if the end of the stream
              has been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,3,"int read(char[] cbuf, int off, int len)",True,,"

read
public abstract int read(char[] cbuf,
                         int off,
                         int len)
                  throws IOException
Reads characters into a portion of an array.  This method will block
 until some input is available, an I/O error occurs, or the end of the
 stream is reached.

Parameters:
cbuf - Destination buffer
off - Offset at which to start storing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
43,Reader,4,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Returns:
True if the next read() is guaranteed not to block for input,
 false otherwise.  Note that returning false does not guarantee that the
 next read will block.
Throws:
IOException - If an I/O error occurs


"
43,Reader,5,void close(),True,,"

close
public abstract void close()
                    throws IOException
Closes the stream and releases any system resources associated with
 it.  Once the stream has been closed, further read(), ready(),
 mark(), reset(), or skip() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - If an I/O error occurs


"
44,SequenceInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads the next byte of data from this input stream. The byte is
 returned as an int in the range 0 to
 255. If no byte is available because the end of the
 stream has been reached, the value -1 is returned.
 This method blocks until input data is available, the end of the
 stream is detected, or an exception is thrown.
 
 This method
 tries to read one character from the current substream. If it
 reaches the end of the stream, it calls the close
 method of the current substream and begins reading from the next
 substream.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.


"
44,SequenceInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads up to len bytes of data from this input stream
 into an array of bytes.  If len is not zero, the method
 blocks until at least 1 byte of input is available; otherwise, no
 bytes are read and 0 is returned.
 
 The read method of SequenceInputStream
 tries to read the data from the current substream. If it fails to
 read any characters because the substream has reached the end of
 the stream, it calls the close method of the current
 substream and begins reading from the next substream.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in array b
                   at which the data is written.
len - the maximum number of bytes read.
Returns:
int   the number of bytes read.
Throws:
NullPointerException - If b is null.
IndexOutOfBoundsException - If off is negative,
 len is negative, or len is greater than
 b.length - off
IOException - if an I/O error occurs.
See Also:
InputStream.read()


"
44,SequenceInputStream,3,int available(),True,,"

available
public int available()
              throws IOException
Returns an estimate of the number of bytes that can be read (or
 skipped over) from the current underlying input stream without
 blocking by the next invocation of a method for the current
 underlying input stream. The next invocation might be
 the same thread or another thread.  A single read or skip of this
 many bytes will not block, but may read or skip fewer bytes.
 
 This method simply calls available of the current underlying
 input stream and returns the result.

Overrides:
available in class InputStream
Returns:
an estimate of the number of bytes that can be read (or
         skipped over) from the current underlying input stream
         without blocking or 0 if this input stream
         has been closed by invoking its close() method
Throws:
IOException - if an I/O error occurs.
Since:
JDK1.1


"
44,SequenceInputStream,4,void close(),True,,"

close
public void close()
           throws IOException
Closes this input stream and releases any system resources
 associated with the stream.
 A closed SequenceInputStream
 cannot  perform input operations and cannot
 be reopened.
 
 If this stream was created
 from an enumeration, all remaining elements
 are requested from the enumeration and closed
 before the close method returns.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class InputStream
Throws:
IOException - if an I/O error occurs.


"
44,SequenceInputStream,5,int skip(long n),False,,NULL
45,SerializablePermission,1,String getActions(),False,,NULL
45,SerializablePermission,2,boolean implies(Permission permission),False,,NULL
45,SerializablePermission,3,"void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",False,,NULL
45,SerializablePermission,4,void writeObject(ObjectOutputStream out) throws IOException,False,,NULL
45,SerializablePermission,5,"SerializablePermission(String name, String actions)",False,,NULL
46,StreamTokenizer,1,int nextToken(),True,,"

nextToken
public int nextToken()
              throws IOException
Parses the next token from the input stream of this tokenizer.
 The type of the next token is returned in the ttype
 field. Additional information about the token may be in the
 nval field or the sval field of this
 tokenizer.
 
 Typical clients of this
 class first set up the syntax tables and then sit in a loop
 calling nextToken to parse successive tokens until TT_EOF
 is returned.

Returns:
the value of the ttype field.
Throws:
IOException - if an I/O error occurs.
See Also:
nval, 
sval, 
ttype


"
46,StreamTokenizer,2,String sval(),False,,NULL
46,StreamTokenizer,3,double nval(),False,,NULL
46,StreamTokenizer,4,void eolIsSignificant(boolean flag),True,,"

eolIsSignificant
public void eolIsSignificant(boolean flag)
Determines whether or not ends of line are treated as tokens.
 If the flag argument is true, this tokenizer treats end of lines
 as tokens; the nextToken method returns
 TT_EOL and also sets the ttype field to
 this value when an end of line is read.
 
 A line is a sequence of characters ending with either a
 carriage-return character ('\r') or a newline
 character ('\n'). In addition, a carriage-return
 character followed immediately by a newline character is treated
 as a single end-of-line token.
 
 If the flag is false, end-of-line characters are
 treated as white space and serve only to separate tokens.

Parameters:
flag - true indicates that end-of-line characters
                 are separate tokens; false indicates that
                 end-of-line characters are white space.
See Also:
nextToken(), 
ttype, 
TT_EOL


"
46,StreamTokenizer,5,void resetSyntax(),True,,"

resetSyntax
public void resetSyntax()
Resets this tokenizer's syntax table so that all characters are
 ""ordinary."" See the ordinaryChar method
 for more information on a character being ordinary.

See Also:
ordinaryChar(int)


"
47,StringBufferInputStream,1,int read(),True,,"

read
public int read()
Deprecated. 
Reads the next byte of data from this input stream. The value
 byte is returned as an int in the range
 0 to 255. If no byte is available
 because the end of the stream has been reached, the value
 -1 is returned.
 
 The read method of
 StringBufferInputStream cannot block. It returns the
 low eight bits of the next character in this input stream's buffer.

Specified by:
read in class InputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.


"
47,StringBufferInputStream,2,int read(byte[] b),False,,NULL
47,StringBufferInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
Deprecated. 
Reads up to len bytes of data from this input stream
 into an array of bytes.
 
 The read method of
 StringBufferInputStream cannot block. It copies the
 low eight bits from the characters in this input stream's buffer into
 the byte array argument.

Overrides:
read in class InputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset of the data.
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
See Also:
InputStream.read()


"
47,StringBufferInputStream,4,long skip(long n),True,,"

skip
public long skip(long n)
Deprecated. 
Skips n bytes of input from this input stream. Fewer
 bytes might be skipped if the end of the input stream is reached.

Overrides:
skip in class InputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.


"
47,StringBufferInputStream,5,void close(),False,,NULL
48,StringReader,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a single character.

Overrides:
read in class Reader
Returns:
The character read, or -1 if the end of the stream has been
             reached
Throws:
IOException - If an I/O error occurs


"
48,StringReader,2,"int read(char[] cbuf, int off, int len)",True,,"

read
public int read(char[] cbuf,
                int off,
                int len)
         throws IOException
Reads characters into a portion of an array.

Specified by:
read in class Reader
Parameters:
cbuf - Destination buffer
off - Offset at which to start writing characters
len - Maximum number of characters to read
Returns:
The number of characters read, or -1 if the end of the
             stream has been reached
Throws:
IOException - If an I/O error occurs


"
48,StringReader,3,boolean ready(),True,,"

ready
public boolean ready()
              throws IOException
Tells whether this stream is ready to be read.

Overrides:
ready in class Reader
Returns:
True if the next read() is guaranteed not to block for input
Throws:
IOException - If the stream is closed


"
48,StringReader,4,void close(),True,,"

close
public void close()
Closes the stream and releases any system resources associated with
 it. Once the stream has been closed, further read(),
 ready(), mark(), or reset() invocations will throw an IOException.
 Closing a previously closed stream has no effect.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in class Reader


"
48,StringReader,5,long skip(long n),True,,"

skip
public long skip(long ns)
          throws IOException
Skips the specified number of characters in the stream. Returns
 the number of characters that were skipped.

 The ns parameter may be negative, even though the
 skip method of the Reader superclass throws
 an exception in this case. Negative values of ns cause the
 stream to skip backwards. Negative return values indicate a skip
 backwards. It is not possible to skip backwards past the beginning of
 the string.

 If the entire string has been read or skipped, then this method has
 no effect and always returns 0.

Overrides:
skip in class Reader
Parameters:
ns - The number of characters to skip
Returns:
The number of characters actually skipped
Throws:
IOException - If an I/O error occurs


"
49,StringWriter,1,void write(int c),True,,"

write
public void write(int c)
Write a single character.

Overrides:
write in class Writer
Parameters:
c - int specifying a character to be written


"
49,StringWriter,2,"void write(char[] cbuf, int off, int len)",True,,"

write
public void write(char[] cbuf,
                  int off,
                  int len)
Write a portion of an array of characters.

Specified by:
write in class Writer
Parameters:
cbuf - Array of characters
off - Offset from which to start writing characters
len - Number of characters to write


"
49,StringWriter,3,void write(String str),True,,"

write
public void write(String str)
Write a string.

Overrides:
write in class Writer
Parameters:
str - String to be written


"
49,StringWriter,4,"void write(String str, int off, int len)",True,,"

write
public void write(String str,
                  int off,
                  int len)
Write a portion of a string.

Overrides:
write in class Writer
Parameters:
str - String to be written
off - Offset from which to start writing characters
len - Number of characters to write


"
49,StringWriter,5,String toString(),True,,"

toString
public String toString()
Return the buffer's current value as a string.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
50,Writer,1,void write(char[] cbuf),True,,"

write
public void write(char[] cbuf)
           throws IOException
Writes an array of characters.

Parameters:
cbuf - Array of characters to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,2,void write(String str),True,,"

write
public void write(String str)
           throws IOException
Writes a string.

Parameters:
str - String to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,3,"void write(String str, int off, int len)",True,,"

write
public void write(String str,
                  int off,
                  int len)
           throws IOException
Writes a portion of a string.

Parameters:
str - A String
off - Offset from which to start writing characters
len - Number of characters to write
Throws:
IndexOutOfBoundsException - If off is negative, or len is negative,
          or off+len is negative or greater than the length
          of the given string
IOException - If an I/O error occurs


"
50,Writer,4,void write(int c),True,,"

write
public void write(int c)
           throws IOException
Writes a single character.  The character to be written is contained in
 the 16 low-order bits of the given integer value; the 16 high-order bits
 are ignored.

  Subclasses that intend to support efficient single-character output
 should override this method.

Parameters:
c - int specifying a character to be written
Throws:
IOException - If an I/O error occurs


"
50,Writer,5,void flush(),True,,"

flush
public abstract void flush()
                    throws IOException
Flushes the stream.  If the stream has saved any characters from the
 various write() methods in a buffer, write them immediately to their
 intended destination.  Then, if that destination is another character or
 byte stream, flush it.  Thus one flush() invocation will flush all the
 buffers in a chain of Writers and OutputStreams.

  If the intended destination of this stream is an abstraction provided
 by the underlying operating system, for example a file, then flushing the
 stream guarantees only that bytes previously written to the stream are
 passed to the operating system for writing; it does not guarantee that
 they are actually written to a physical device such as a disk drive.

Specified by:
flush in interface Flushable
Throws:
IOException - If an I/O error occurs


"
