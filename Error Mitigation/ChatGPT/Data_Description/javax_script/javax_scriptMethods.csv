ClassName,Method,Return Type,Description,Full Description
AbstractScriptEngine,eval(Reader reader),Object,"eval(Reader) calls the abstract eval(Reader, ScriptContext) passing the value of the context field.","

eval
public Object eval(Reader reader)
            throws ScriptException
eval(Reader) calls the abstract
 eval(Reader, ScriptContext) passing the value of the context
 field.

Specified by:
eval in interface ScriptEngine
Parameters:
reader - A Reader containing the source of the script.
Returns:
The return value from eval(Reader, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
AbstractScriptEngine,"eval(Reader reader, Bindings bindings)",Object,"eval(Reader, Bindings) calls the abstract eval(Reader, ScriptContext) method, passing it a ScriptContext whose Reader, Writers and Bindings for scopes other that ENGINE_SCOPE are identical to those members of the protected context field.","

eval
public Object eval(Reader reader,
                   Bindings bindings)
            throws ScriptException
eval(Reader, Bindings) calls the abstract
 eval(Reader, ScriptContext) method, passing it a ScriptContext
 whose Reader, Writers and Bindings for scopes other that ENGINE_SCOPE
 are identical to those members of the protected context field.  The specified
 Bindings is used instead of the ENGINE_SCOPE
Bindings of the context field.

Specified by:
eval in interface ScriptEngine
Parameters:
reader - A Reader containing the source of the script.
bindings - A Bindings to use for the ENGINE_SCOPE
 while the script executes.
Returns:
The return value from eval(Reader, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
AbstractScriptEngine,eval(String script),Object,"Same as eval(Reader) except that the abstract eval(String, ScriptContext) is used.","

eval
public Object eval(String script)
            throws ScriptException
Same as eval(Reader) except that the abstract
 eval(String, ScriptContext) is used.

Specified by:
eval in interface ScriptEngine
Parameters:
script - A String containing the source of the script.
Returns:
The return value from eval(String, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
AbstractScriptEngine,"eval(String script, Bindings bindings)",Object,"Same as eval(Reader, Bindings) except that the abstract eval(String, ScriptContext) is used.","

eval
public Object eval(String script,
                   Bindings bindings)
            throws ScriptException
Same as eval(Reader, Bindings) except that the abstract
 eval(String, ScriptContext) is used.

Specified by:
eval in interface ScriptEngine
Parameters:
script - A String containing the source of the script.
bindings - A Bindings to use as the ENGINE_SCOPE
 while the script executes.
Returns:
The return value from eval(String, ScriptContext)
Throws:
ScriptException - if an error occurs in script.
NullPointerException - if any of the parameters is null.


"
AbstractScriptEngine,get(String key),Object,Gets the value for the specified key in the ENGINE_SCOPE of the protected context field.,"

get
public Object get(String key)
Gets the value for the specified key in the ENGINE_SCOPE of the
 protected context field.

Specified by:
get in interface ScriptEngine
Parameters:
key - The key whose value is to be returned
Returns:
The value for the specified key.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key is empty.


"
AbstractScriptEngine,getBindings(int scope),Bindings,Returns the Bindings with the specified scope value in the protected context field.,"

getBindings
public Bindings getBindings(int scope)
Returns the Bindings with the specified scope value in
 the protected context field.

Specified by:
getBindings in interface ScriptEngine
Parameters:
scope - The specified scope
Returns:
The corresponding Bindings.
Throws:
IllegalArgumentException - if the value of scope is
 invalid for the type the protected context field.


"
AbstractScriptEngine,getContext(),ScriptContext,Returns the value of the protected context field.,"

getContext
public ScriptContext getContext()
Returns the value of the protected context field.

Specified by:
getContext in interface ScriptEngine
Returns:
The value of the protected context field.


"
AbstractScriptEngine,getScriptContext(Bindings nn),protected ScriptContext,Returns a SimpleScriptContext.,"

getScriptContext
protected ScriptContext getScriptContext(Bindings nn)
Returns a SimpleScriptContext.  The SimpleScriptContext:


Uses the specified Bindings for its ENGINE_SCOPE

Uses the Bindings returned by the abstract getGlobalScope
 method as its GLOBAL_SCOPE

Uses the Reader and Writer in the default ScriptContext of this
 ScriptEngine



 A SimpleScriptContext returned by this method is used to implement eval methods
 using the abstract eval(Reader,Bindings) and eval(String,Bindings)
 versions.

Parameters:
nn - Bindings to use for the ENGINE_SCOPE
Returns:
The SimpleScriptContext


"
AbstractScriptEngine,"put(String key, Object value)",void,Sets the specified value with the specified key in the ENGINE_SCOPEBindings of the protected context field.,"

put
public void put(String key,
                Object value)
Sets the specified value with the specified key in the ENGINE_SCOPE
Bindings of the protected context field.

Specified by:
put in interface ScriptEngine
Parameters:
key - The specified key.
value - The specified value.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key is empty.


"
AbstractScriptEngine,"setBindings(Bindings bindings, int scope)",void,Sets the Bindings with the corresponding scope value in the context field.,"

setBindings
public void setBindings(Bindings bindings,
                        int scope)
Sets the Bindings with the corresponding scope value in the
 context field.

Specified by:
setBindings in interface ScriptEngine
Parameters:
bindings - The specified Bindings.
scope - The specified scope.
Throws:
IllegalArgumentException - if the value of scope is
 invalid for the type the context field.
NullPointerException - if the bindings is null and the scope is
 ScriptContext.ENGINE_SCOPE


"
AbstractScriptEngine,setContext(ScriptContext ctxt),void,Sets the value of the protected context field to the specified ScriptContext.,"

setContext
public void setContext(ScriptContext ctxt)
Sets the value of the protected context field to the specified
 ScriptContext.

Specified by:
setContext in interface ScriptEngine
Parameters:
ctxt - The specified ScriptContext.
Throws:
NullPointerException - if ctxt is null.


"
CompiledScript,eval(),Object,Executes the program stored in the CompiledScript object.,"

eval
public Object eval()
            throws ScriptException
Executes the program stored in the CompiledScript object.  The
 default ScriptContext of the associated ScriptEngine is used.
 The effect of calling this method is same as that of eval(getEngine().getContext()).

Returns:
The return value from the script execution
Throws:
ScriptException - if an error occurs.


"
CompiledScript,eval(Bindings bindings),Object,Executes the program stored in the CompiledScript object using the supplied Bindings of attributes as the ENGINE_SCOPE of the associated ScriptEngine during script execution.,"

eval
public Object eval(Bindings bindings)
            throws ScriptException
Executes the program stored in the CompiledScript object using
 the supplied Bindings of attributes as the ENGINE_SCOPE of the
 associated ScriptEngine during script execution.  If bindings is null,
 then the effect of calling this method is same as that of eval(getEngine().getContext()).
 .
 The GLOBAL_SCOPE Bindings, Reader and Writer
 associated with the default ScriptContext of the associated ScriptEngine are used.

Parameters:
bindings - The bindings of attributes used for the ENGINE_SCOPE.
Returns:
The return value from the script execution
Throws:
ScriptException - if an error occurs.


"
CompiledScript,eval(ScriptContext context),abstract Object,Executes the program stored in this CompiledScript object.,"

eval
public abstract Object eval(ScriptContext context)
                     throws ScriptException
Executes the program stored in this CompiledScript object.

Parameters:
context - A ScriptContext that is used in the same way as
 the ScriptContext passed to the eval methods of
 ScriptEngine.
Returns:
The value returned by the script execution, if any.  Should return null
 if no value is returned by the script execution.
Throws:
ScriptException - if an error occurs.
NullPointerException - if context is null.


"
CompiledScript,getEngine(),abstract ScriptEngine,Returns the ScriptEngine whose compile method created this CompiledScript.,"

getEngine
public abstract ScriptEngine getEngine()
Returns the ScriptEngine whose compile method created this CompiledScript.
 The CompiledScript will execute in this engine.

Returns:
The ScriptEngine that created this CompiledScript


"
ScriptEngineManager,get(String key),Object,Gets the value for the specified key in the Global Scope,"

get
public Object get(String key)
Gets the value for the specified key in the Global Scope

Parameters:
key - The key whose value is to be returned.
Returns:
The value for the specified key.


"
ScriptEngineManager,getBindings(),Bindings,getBindings returns the value of the globalScope field.,"

getBindings
public Bindings getBindings()
getBindings returns the value of the globalScope field.
 ScriptEngineManager sets this Bindings as global bindings for
 ScriptEngine objects created by it.

Returns:
The globalScope field.


"
ScriptEngineManager,getEngineByExtension(String extension),ScriptEngine,Look up and create a ScriptEngine for a given extension.,"

getEngineByExtension
public ScriptEngine getEngineByExtension(String extension)
Look up and create a ScriptEngine for a given extension.  The algorithm
 used by getEngineByName is used except that the search starts
 by looking for a ScriptEngineFactory registered to handle the
 given extension using registerEngineExtension.

Parameters:
extension - The given extension
Returns:
The engine to handle scripts with this extension.  Returns null
 if not found.
Throws:
NullPointerException - if extension is null.


"
ScriptEngineManager,getEngineByMimeType(String mimeType),ScriptEngine,Look up and create a ScriptEngine for a given mime type.,"

getEngineByMimeType
public ScriptEngine getEngineByMimeType(String mimeType)
Look up and create a ScriptEngine for a given mime type.  The algorithm
 used by getEngineByName is used except that the search starts
 by looking for a ScriptEngineFactory registered to handle the
 given mime type using registerEngineMimeType.

Parameters:
mimeType - The given mime type
Returns:
The engine to handle scripts with this mime type.  Returns null
 if not found.
Throws:
NullPointerException - if mimeType is null.


"
ScriptEngineManager,getEngineByName(String shortName),ScriptEngine,Looks up and creates a ScriptEngine for a given name.,"

getEngineByName
public ScriptEngine getEngineByName(String shortName)
Looks up and creates a ScriptEngine for a given  name.
 The algorithm first searches for a ScriptEngineFactory that has been
 registered as a handler for the specified name using the registerEngineName
 method.
  If one is not found, it searches the set of ScriptEngineFactory instances
 stored by the constructor for one with the specified name.  If a ScriptEngineFactory
 is found by either method, it is used to create instance of ScriptEngine.

Parameters:
shortName - The short name of the ScriptEngine implementation.
 returned by the getNames method of its ScriptEngineFactory.
Returns:
A ScriptEngine created by the factory located in the search.  Returns null
 if no such factory was found.  The ScriptEngineManager sets its own globalScope
Bindings as the GLOBAL_SCOPE Bindings of the newly
 created ScriptEngine.
Throws:
NullPointerException - if shortName is null.


"
ScriptEngineManager,getEngineFactories(),List<ScriptEngineFactory>,Returns a list whose elements are instances of all the ScriptEngineFactory classes found by the discovery mechanism.,"

getEngineFactories
public List<ScriptEngineFactory> getEngineFactories()
Returns a list whose elements are instances of all the ScriptEngineFactory classes
 found by the discovery mechanism.

Returns:
List of all discovered ScriptEngineFactorys.


"
ScriptEngineManager,"put(String key, Object value)",void,Sets the specified key/value pair in the Global Scope.,"

put
public void put(String key,
                Object value)
Sets the specified key/value pair in the Global Scope.

Parameters:
key - Key to set
value - Value to set.
Throws:
NullPointerException - if key is null.
IllegalArgumentException - if key is empty string.


"
ScriptEngineManager,"registerEngineExtension(String extension, ScriptEngineFactory factory)",void,Registers a ScriptEngineFactory to handle an extension.,"

registerEngineExtension
public void registerEngineExtension(String extension,
                                    ScriptEngineFactory factory)
Registers a ScriptEngineFactory to handle an extension.
 Overrides any such association found using the Discovery mechanism.

Parameters:
extension - The extension type  to be associated with the
 ScriptEngineFactory.
factory - The class to associate with the given extension.
Throws:
NullPointerException - if any of the parameters is null.


"
ScriptEngineManager,"registerEngineMimeType(String type, ScriptEngineFactory factory)",void,Registers a ScriptEngineFactory to handle a mime type.,"

registerEngineMimeType
public void registerEngineMimeType(String type,
                                   ScriptEngineFactory factory)
Registers a ScriptEngineFactory to handle a mime type.
 Overrides any such association found using the Discovery mechanism.

Parameters:
type - The mime type  to be associated with the
 ScriptEngineFactory.
factory - The class to associate with the given mime type.
Throws:
NullPointerException - if any of the parameters is null.


"
ScriptEngineManager,"registerEngineName(String name, ScriptEngineFactory factory)",void,Registers a ScriptEngineFactory to handle a language name.,"

registerEngineName
public void registerEngineName(String name,
                               ScriptEngineFactory factory)
Registers a ScriptEngineFactory to handle a language
 name.  Overrides any such association found using the Discovery mechanism.

Parameters:
name - The name to be associated with the ScriptEngineFactory.
factory - The class to associate with the given name.
Throws:
NullPointerException - if any of the parameters is null.


"
ScriptEngineManager,setBindings(Bindings bindings),void,setBindings stores the specified Bindings in the globalScope field.,"

setBindings
public void setBindings(Bindings bindings)
setBindings stores the specified Bindings
 in the globalScope field. ScriptEngineManager sets this
 Bindings as global bindings for ScriptEngine
 objects created by it.

Parameters:
bindings - The specified Bindings
Throws:
IllegalArgumentException - if bindings is null.


"
SimpleBindings,clear(),void,Removes all of the mappings from this map (optional operation).,"

clear
public void clear()
Removes all of the mappings from this map (optional operation).
 The map will be empty after this call returns.

Specified by:
clear in interface Map<String,Object>


"
SimpleBindings,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified
 key.  More formally, returns true if and only if
 this map contains a mapping for a key k such that
 (key==null ? k==null : key.equals(k)).  (There can be
 at most one such mapping.)

Specified by:
containsKey in interface Map<String,Object>
Specified by:
containsKey in interface Bindings
Parameters:
key - key whose presence in this map is to be tested.
Returns:
true if this map contains a mapping for the specified
         key.
Throws:
NullPointerException - if key is null
ClassCastException - if key is not String
IllegalArgumentException - if key is empty String


"
SimpleBindings,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value.  More formally, returns true if and only if
 this map contains at least one mapping to a value v such that
 (value==null ? v==null : value.equals(v)).  This operation
 will probably require time linear in the map size for most
 implementations of the Map interface.

Specified by:
containsValue in interface Map<String,Object>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to the
         specified value


"
SimpleBindings,entrySet(),"Set<Map.Entry<String,Object>>",Returns a Set view of the mappings contained in this map.,"

entrySet
public Set<Map.Entry<String,Object>> entrySet()
Returns a Set view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  If the map is modified
 while an iteration over the set is in progress (except through
 the iterator's own remove operation, or through the
 setValue operation on a map entry returned by the
 iterator) the results of the iteration are undefined.  The set
 supports element removal, which removes the corresponding
 mapping from the map, via the Iterator.remove,
 Set.remove, removeAll, retainAll and
 clear operations.  It does not support the
 add or addAll operations.

Specified by:
entrySet in interface Map<String,Object>
Returns:
a set view of the mappings contained in this map


"
SimpleBindings,get(Object key),Object,Returns the value to which this map maps the specified key.,"

get
public Object get(Object key)
Returns the value to which this map maps the specified key.  Returns
 null if the map contains no mapping for this key.  A return
 value of null does not necessarily indicate that the
 map contains no mapping for the key; it's also possible that the map
 explicitly maps the key to null.  The containsKey
 operation may be used to distinguish these two cases.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key==null ? k==null :
 key.equals(k)), then this method returns v; otherwise
 it returns null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<String,Object>
Specified by:
get in interface Bindings
Parameters:
key - key whose associated value is to be returned.
Returns:
the value to which this map maps the specified key, or
         null if the map contains no mapping for this key.
Throws:
NullPointerException - if key is null
ClassCastException - if key is not String
IllegalArgumentException - if key is empty String


"
SimpleBindings,isEmpty(),boolean,Returns true if this map contains no key-value mappings.,"

isEmpty
public boolean isEmpty()
Returns true if this map contains no key-value mappings.

Specified by:
isEmpty in interface Map<String,Object>
Returns:
true if this map contains no key-value mappings


"
SimpleBindings,keySet(),Set<String>,Returns a Set view of the keys contained in this map.,"

keySet
public Set<String> keySet()
Returns a Set view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  If the map is modified
 while an iteration over the set is in progress (except through
 the iterator's own remove operation), the results of
 the iteration are undefined.  The set supports element removal,
 which removes the corresponding mapping from the map, via the
 Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or addAll
 operations.

Specified by:
keySet in interface Map<String,Object>
Returns:
a set view of the keys contained in this map


"
SimpleBindings,"put(String name, Object value)",Object,Sets the specified key/value in the underlying map field.,"

put
public Object put(String name,
                  Object value)
Sets the specified key/value in the underlying map field.

Specified by:
put in interface Map<String,Object>
Specified by:
put in interface Bindings
Parameters:
name - Name of value
value - Value to set.
Returns:
Previous value for the specified key.  Returns null if key was previously
 unset.
Throws:
NullPointerException - if the name is null.
IllegalArgumentException - if the name is empty.


"
SimpleBindings,"putAll(Map<? extends String,? extends Object> toMerge)",void,putAll is implemented using Map.putAll.,"

putAll
public void putAll(Map<? extends String,? extends Object> toMerge)
putAll is implemented using Map.putAll.

Specified by:
putAll in interface Map<String,Object>
Specified by:
putAll in interface Bindings
Parameters:
toMerge - The Map of values to add.
Throws:
NullPointerException - if toMerge map is null or if some key in the map is null.
IllegalArgumentException - if some key in the map is an empty String.


"
SimpleBindings,remove(Object key),Object,Removes the mapping for this key from this map if it is present (optional operation).,"

remove
public Object remove(Object key)
Removes the mapping for this key from this map if it is present
 (optional operation).   More formally, if this map contains a mapping
 from key k to value v such that
 (key==null ?  k==null : key.equals(k)), that mapping
 is removed.  (The map can contain at most one such mapping.)

 Returns the value to which the map previously associated the key, or
 null if the map contained no mapping for this key.  (A
 null return can also indicate that the map previously
 associated null with the specified key if the implementation
 supports null values.)  The map will not contain a mapping for
 the specified  key once the call returns.

Specified by:
remove in interface Map<String,Object>
Specified by:
remove in interface Bindings
Parameters:
key - key whose mapping is to be removed from the map.
Returns:
previous value associated with specified key, or null
         if there was no mapping for key.
Throws:
NullPointerException - if key is null
ClassCastException - if key is not String
IllegalArgumentException - if key is empty String


"
SimpleBindings,size(),int,Returns the number of key-value mappings in this map.,"

size
public int size()
Returns the number of key-value mappings in this map.  If the
 map contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Map<String,Object>
Returns:
the number of key-value mappings in this map


"
SimpleBindings,values(),Collection<Object>,Returns a Collection view of the values contained in this map.,"

values
public Collection<Object> values()
Returns a Collection view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  If the map is
 modified while an iteration over the collection is in progress
 (except through the iterator's own remove operation),
 the results of the iteration are undefined.  The collection
 supports element removal, which removes the corresponding
 mapping from the map, via the Iterator.remove,
 Collection.remove, removeAll,
 retainAll and clear operations.  It does not
 support the add or addAll operations.

Specified by:
values in interface Map<String,Object>
Returns:
a collection view of the values contained in this map


"
SimpleScriptContext,getAttribute(String name),Object,Retrieves the value of the attribute with the given name in the scope occurring earliest in the search order.,"

getAttribute
public Object getAttribute(String name)
Retrieves the value of the attribute with the given name in
 the scope occurring earliest in the search order.  The order
 is determined by the numeric value of the scope parameter (lowest
 scope values first.)

Specified by:
getAttribute in interface ScriptContext
Parameters:
name - The name of the the attribute to retrieve.
Returns:
The value of the attribute in the lowest scope for
 which an attribute with the given name is defined.  Returns
 null if no attribute with the name exists in any scope.
Throws:
NullPointerException - if the name is null.
IllegalArgumentException - if the name is empty.


"
SimpleScriptContext,"getAttribute(String name, int scope)",Object,Gets the value of an attribute in a given scope.,"

getAttribute
public Object getAttribute(String name,
                           int scope)
Gets the value of an attribute in a given scope.

Specified by:
getAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to retrieve.
scope - The scope in which to retrieve the attribute.
Returns:
The value of the attribute. Returns null is the name
 does not exist in the given scope.
Throws:
IllegalArgumentException - if the name is empty or if the value of scope is invalid.
NullPointerException - if the name is null.


"
SimpleScriptContext,getAttributesScope(String name),int,Get the lowest scope in which an attribute is defined.,"

getAttributesScope
public int getAttributesScope(String name)
Get the lowest scope in which an attribute is defined.

Specified by:
getAttributesScope in interface ScriptContext
Parameters:
name - Name of the attribute
 .
Returns:
The lowest scope.  Returns -1 if no attribute with the given
 name is defined in any scope.
Throws:
NullPointerException - if name is null.
IllegalArgumentException - if name is empty.


"
SimpleScriptContext,getBindings(int scope),Bindings,Returns the value of the engineScope field if specified scope is ENGINE_SCOPE.,"

getBindings
public Bindings getBindings(int scope)
Returns the value of the engineScope field if specified scope is
 ENGINE_SCOPE.  Returns the value of the globalScope field if the specified scope is
 GLOBAL_SCOPE.

Specified by:
getBindings in interface ScriptContext
Parameters:
scope - The specified scope
Returns:
The value of either the  engineScope or globalScope field.
Throws:
IllegalArgumentException - if the value of scope is invalid.


"
SimpleScriptContext,getErrorWriter(),Writer,Returns the Writer used to display error output.,"

getErrorWriter
public Writer getErrorWriter()
Returns the Writer used to display error output.

Specified by:
getErrorWriter in interface ScriptContext
Returns:
The Writer


"
SimpleScriptContext,getReader(),Reader,Returns a Reader to be used by the script to read input.,"

getReader
public Reader getReader()
Returns a Reader to be used by the script to read
 input.

Specified by:
getReader in interface ScriptContext
Returns:
The Reader.


"
SimpleScriptContext,getScopes(),List<Integer>,Returns immutable List of all the valid values for scope in the ScriptContext.,"

getScopes
public List<Integer> getScopes()
Returns immutable List of all the valid values for
 scope in the ScriptContext.

Specified by:
getScopes in interface ScriptContext
Returns:
list of scope values


"
SimpleScriptContext,getWriter(),Writer,Returns the Writer for scripts to use when displaying output.,"

getWriter
public Writer getWriter()
Returns the Writer for scripts to use when displaying output.

Specified by:
getWriter in interface ScriptContext
Returns:
The Writer.


"
SimpleScriptContext,"removeAttribute(String name, int scope)",Object,Remove an attribute in a given scope.,"

removeAttribute
public Object removeAttribute(String name,
                              int scope)
Remove an attribute in a given scope.

Specified by:
removeAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to remove
scope - The scope in which to remove the attribute
Returns:
The removed value.
Throws:
IllegalArgumentException - if the name is empty or if the scope is invalid.
NullPointerException - if the name is null.


"
SimpleScriptContext,"setAttribute(String name, Object value, int scope)",void,Sets the value of an attribute in a given scope.,"

setAttribute
public void setAttribute(String name,
                         Object value,
                         int scope)
Sets the value of an attribute in a given scope.

Specified by:
setAttribute in interface ScriptContext
Parameters:
name - The name of the attribute to set
value - The value of the attribute
scope - The scope in which to set the attribute
Throws:
IllegalArgumentException - if the name is empty or if the scope is invalid.
NullPointerException - if the name is null.


"
SimpleScriptContext,"setBindings(Bindings bindings, int scope)",void,Sets a Bindings of attributes for the given scope.,"

setBindings
public void setBindings(Bindings bindings,
                        int scope)
Sets a Bindings of attributes for the given scope.  If the value
 of scope is ENGINE_SCOPE the given Bindings replaces the
 engineScope field.  If the value
 of scope is GLOBAL_SCOPE the given Bindings replaces the
 globalScope field.

Specified by:
setBindings in interface ScriptContext
Parameters:
bindings - The Bindings of attributes to set.
scope - The value of the scope in which the attributes are set.
Throws:
IllegalArgumentException - if scope is invalid.
NullPointerException - if the value of scope is ENGINE_SCOPE and
 the specified Bindings is null.


"
SimpleScriptContext,setErrorWriter(Writer writer),void,Sets the Writer used to display error output.,"

setErrorWriter
public void setErrorWriter(Writer writer)
Sets the Writer used to display error output.

Specified by:
setErrorWriter in interface ScriptContext
Parameters:
writer - The Writer.


"
SimpleScriptContext,setReader(Reader reader),void,Sets the Reader for scripts to read input .,"

setReader
public void setReader(Reader reader)
Sets the Reader for scripts to read input
 .

Specified by:
setReader in interface ScriptContext
Parameters:
reader - The new Reader.


"
SimpleScriptContext,setWriter(Writer writer),void,Sets the Writer for scripts to use when displaying output.,"

setWriter
public void setWriter(Writer writer)
Sets the Writer for scripts to use when displaying output.

Specified by:
setWriter in interface ScriptContext
Parameters:
writer - The new Writer.


"
