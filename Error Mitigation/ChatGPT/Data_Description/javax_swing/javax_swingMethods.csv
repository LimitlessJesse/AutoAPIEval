ClassName,Method,Return Type,Description,Full Description
AbstractAction,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 
 A PropertyChangeEvent will get fired in response to setting
 a bound property, e.g. setFont, setBackground,
 or setForeground.
 Note that if the current component is inheriting its foreground,
 background, or font from its container, then no event will be
 fired in response to a change in the inherited property.

Specified by:
addPropertyChangeListener in interface Action
Parameters:
listener - The PropertyChangeListener to be added
See Also:
Action.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
AbstractAction,clone(),protected Object,Clones the abstract action.,"

clone
protected Object clone()
                throws CloneNotSupportedException
Clones the abstract action. This gives the clone
 its own copy of the key/value list,
 which is not handled for you by Object.clone().

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
CloneNotSupportedException - if the object's class does not
               support the Cloneable interface. Subclasses
               that override the clone method can also
               throw this exception to indicate that an instance cannot
               be cloned.
See Also:
Cloneable


"
AbstractAction,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Supports reporting bound property changes.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Supports reporting bound property changes.  This method can be called
 when a bound property has changed and it will send the appropriate
 PropertyChangeEvent to any registered
 PropertyChangeListeners.

"
AbstractAction,getKeys(),Object[],"Returns an array of Objects which are keys for which values have been set for this AbstractAction, or null if no keys have values set.","

getKeys
public Object[] getKeys()
Returns an array of Objects which are keys for
 which values have been set for this AbstractAction,
 or null if no keys have values set.

Returns:
an array of key objects, or null if no
                  keys have values set
Since:
1.3


"
AbstractAction,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this AbstractAction with addPropertyChangeListener().,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the PropertyChangeListeners added
 to this AbstractAction with addPropertyChangeListener().

Returns:
all of the PropertyChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractAction,getValue(String key),Object,Gets the Object associated with the specified key.,"

getValue
public Object getValue(String key)
Gets the Object associated with the specified key.

Specified by:
getValue in interface Action
Parameters:
key - a string containing the specified key
Returns:
the binding Object stored with this key; if there
          are no keys, it will return null
See Also:
Action.getValue(java.lang.String)


"
AbstractAction,isEnabled(),boolean,Returns true if the action is enabled.,"

isEnabled
public boolean isEnabled()
Returns true if the action is enabled.

Specified by:
isEnabled in interface Action
Returns:
true if the action is enabled, false otherwise
See Also:
Action.isEnabled()


"
AbstractAction,"putValue(String key, Object newValue)",void,Sets the Value associated with the specified key.,"

putValue
public void putValue(String key,
                     Object newValue)
Sets the Value associated with the specified key.

Specified by:
putValue in interface Action
Parameters:
key - the String that identifies the stored object
newValue - the Object to store using this key
See Also:
Action.putValue(java.lang.String, java.lang.Object)


"
AbstractAction,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Specified by:
removePropertyChangeListener in interface Action
Parameters:
listener - the PropertyChangeListener to be removed
See Also:
Action.removePropertyChangeListener(java.beans.PropertyChangeListener)


"
AbstractAction,setEnabled(boolean newValue),void,Sets whether the Action is enabled.,"

setEnabled
public void setEnabled(boolean newValue)
Sets whether the Action is enabled. The default is true.

Specified by:
setEnabled in interface Action
Parameters:
newValue - true to enable the action, false to
                  disable it
See Also:
Action.setEnabled(boolean)


"
AbstractButton,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the button's state in response to property changes in the associated action.,"

actionPropertyChanged
protected void actionPropertyChanged(Action action,
                                     String propertyName)
Updates the button's state in response to property changes in the
 associated action. This method is invoked from the
 PropertyChangeListener returned from
 createActionPropertyChangeListener. Subclasses do not normally
 need to invoke this. Subclasses that support additional Action
 properties should override this and
 configurePropertiesFromAction.
 
 Refer to the table at 
 Swing Components Supporting Action for a list of
 the properties this method sets.

Parameters:
action - the Action associated with this button
propertyName - the name of the property that changed
Since:
1.6
See Also:
Action, 
configurePropertiesFromAction(javax.swing.Action)


"
AbstractButton,addActionListener(ActionListener l),void,Adds an ActionListener to the button.,"

addActionListener
public void addActionListener(ActionListener l)
Adds an ActionListener to the button.

Parameters:
l - the ActionListener to be added


"
AbstractButton,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the button.

Parameters:
l - the listener to be added


"
AbstractButton,"addImpl(Component comp, Object constraints, int index)",protected void,"Adds the specified component to this container at the specified index, refer to Container.addImpl(Component, Object, int) for a complete description of this method.","

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified component to this container at the specified
 index, refer to
 Container.addImpl(Component, Object, int)
 for a complete description of this method.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be added
constraints - an object expressing layout constraints
                 for this component
index - the position in the container's list at which to
                 insert the component, where -1
                 means append to the end
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
Since:
1.5
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
AbstractButton,addItemListener(ItemListener l),void,Adds an ItemListener to the checkbox.,"

addItemListener
public void addItemListener(ItemListener l)
Adds an ItemListener to the checkbox.

Specified by:
addItemListener in interface ItemSelectable
Parameters:
l - the ItemListener to be added
See Also:
ItemEvent


"
AbstractButton,"checkHorizontalKey(int key, String exception)",protected int,Verify that the key argument is a legal value for the horizontalAlignment and horizontalTextPosition properties.,"

checkHorizontalKey
protected int checkHorizontalKey(int key,
                                 String exception)
Verify that the key argument is a legal value for the
 horizontalAlignment and horizontalTextPosition
 properties. Valid values are:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING


Parameters:
key - the property value to check
exception - the message to use in the
        IllegalArgumentException that is thrown for an invalid
        value
Returns:
the key argument
Throws:
IllegalArgumentException - if key is not one of the legal
            values listed above
See Also:
setHorizontalTextPosition(int), 
setHorizontalAlignment(int)


"
AbstractButton,"checkVerticalKey(int key, String exception)",protected int,Verify that the key argument is a legal value for the vertical properties.,"

checkVerticalKey
protected int checkVerticalKey(int key,
                               String exception)
Verify that the key argument is a legal value for the
 vertical properties. Valid values are:
 
SwingConstants.CENTER
SwingConstants.TOP
SwingConstants.BOTTOM


Parameters:
key - the property value to check
exception - the message to use in the
        IllegalArgumentException that is thrown for an invalid
        value
Returns:
the key argument
Throws:
IllegalArgumentException - if key is not one of the legal
            values listed above


"
AbstractButton,configurePropertiesFromAction(Action a),protected void,Sets the properties on this button to match those in the specified Action.,"

configurePropertiesFromAction
protected void configurePropertiesFromAction(Action a)
Sets the properties on this button to match those in the specified
 Action.  Refer to 
 Swing Components Supporting Action for more
 details as to which properties this sets.

Parameters:
a - the Action from which to get the properties,
          or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
AbstractButton,createActionListener(),protected ActionListener,NULL,"

createActionListener
protected ActionListener createActionListener()

"
AbstractButton,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.,"

createActionPropertyChangeListener
protected PropertyChangeListener createActionPropertyChangeListener(Action a)
Creates and returns a PropertyChangeListener that is
 responsible for listening for changes from the specified
 Action and updating the appropriate properties.
 
Warning: If you subclass this do not create an anonymous
 inner class.  If you do the lifetime of the button will be tied to
 that of the Action.

Parameters:
a - the button's action
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
AbstractButton,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents differently can override this to return another ChangeListener implementation.,"

createChangeListener
protected ChangeListener createChangeListener()
Subclasses that want to handle ChangeEvents differently
 can override this to return another ChangeListener
 implementation.

Returns:
the new ChangeListener


"
AbstractButton,createItemListener(),protected ItemListener,NULL,"

createItemListener
protected ItemListener createItemListener()

"
AbstractButton,doClick(),void,"Programmatically perform a ""click"".","

doClick
public void doClick()
Programmatically perform a ""click"". This does the same
 thing as if the user had pressed and released the button.

"
AbstractButton,doClick(int pressTime),void,"Programmatically perform a ""click"".","

doClick
public void doClick(int pressTime)
Programmatically perform a ""click"". This does the same
 thing as if the user had pressed and released the button.
 The button stays visually ""pressed"" for pressTime
  milliseconds.

Parameters:
pressTime - the time to ""hold down"" the button, in milliseconds


"
AbstractButton,fireActionPerformed(ActionEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionPerformed
protected void fireActionPerformed(ActionEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the event
 parameter.

Parameters:
event - the ActionEvent object
See Also:
EventListenerList


"
AbstractButton,fireItemStateChanged(ItemEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireItemStateChanged
protected void fireItemStateChanged(ItemEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the event parameter.

Parameters:
event - the ItemEvent object
See Also:
EventListenerList


"
AbstractButton,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireStateChanged
protected void fireStateChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created.

See Also:
EventListenerList


"
AbstractButton,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set.","

getAction
public Action getAction()
Returns the currently set Action for this
 ActionEvent source, or null
 if no Action is set.

Returns:
the Action for this ActionEvent
          source, or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
AbstractButton,getActionCommand(),String,Returns the action command for this button.,"

getActionCommand
public String getActionCommand()
Returns the action command for this button.

Returns:
the action command for this button


"
AbstractButton,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this AbstractButton with addActionListener().,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the ActionListeners added
 to this AbstractButton with addActionListener().

Returns:
all of the ActionListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractButton,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this AbstractButton with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this AbstractButton with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractButton,getDisabledIcon(),Icon,Returns the icon used by the button when it's disabled.,"

getDisabledIcon
public Icon getDisabledIcon()
Returns the icon used by the button when it's disabled.
 If no disabled icon has been set this will forward the call to
 the look and feel to construct an appropriate disabled Icon.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Returns:
the disabledIcon property
See Also:
getPressedIcon(), 
setDisabledIcon(javax.swing.Icon), 
LookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon)


"
AbstractButton,getDisabledSelectedIcon(),Icon,Returns the icon used by the button when it's disabled and selected.,"

getDisabledSelectedIcon
public Icon getDisabledSelectedIcon()
Returns the icon used by the button when it's disabled and selected.
 If no disabled selection icon has been set, this will forward
 the call to the LookAndFeel to construct an appropriate disabled
 Icon from the selection icon if it has been set and to
 getDisabledIcon() otherwise.
 
 Some look and feels might not render the disabled selected Icon, in
 which case they will ignore this.

Returns:
the disabledSelectedIcon property
See Also:
getDisabledIcon(), 
setDisabledSelectedIcon(javax.swing.Icon), 
LookAndFeel.getDisabledSelectedIcon(javax.swing.JComponent, javax.swing.Icon)


"
AbstractButton,getDisplayedMnemonicIndex(),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.","

getDisplayedMnemonicIndex
public int getDisplayedMnemonicIndex()
Returns the character, as an index, that the look and feel should
 provide decoration for as representing the mnemonic character.

Returns:
index representing mnemonic character
Since:
1.4
See Also:
setDisplayedMnemonicIndex(int)


"
AbstractButton,getHideActionText(),boolean,"Returns the value of the hideActionText property, which determines whether the button displays text from the Action.","

getHideActionText
public boolean getHideActionText()
Returns the value of the hideActionText property, which
 determines whether the button displays text from the
 Action.  This is useful only if an Action
 has been installed on the button.

Returns:
true if the button's text
         property should not reflect that of the
         Action; the default is false
Since:
1.6


"
AbstractButton,getHorizontalAlignment(),int,Returns the horizontal alignment of the icon and text.,"

getHorizontalAlignment
public int getHorizontalAlignment()
Returns the horizontal alignment of the icon and text.
 AbstractButton's default is SwingConstants.CENTER,
 but subclasses such as JCheckBox may use a different default.

Returns:
the horizontalAlignment property,
             one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING



"
AbstractButton,getHorizontalTextPosition(),int,Returns the horizontal position of the text relative to the icon.,"

getHorizontalTextPosition
public int getHorizontalTextPosition()
Returns the horizontal position of the text relative to the icon.

Returns:
the horizontalTextPosition property,
          one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING (the default)
 


"
AbstractButton,getIcon(),Icon,Returns the default icon.,"

getIcon
public Icon getIcon()
Returns the default icon.

Returns:
the default Icon
See Also:
setIcon(javax.swing.Icon)


"
AbstractButton,getIconTextGap(),int,Returns the amount of space between the text and the icon displayed in this button.,"

getIconTextGap
public int getIconTextGap()
Returns the amount of space between the text and the icon
 displayed in this button.

Returns:
an int equal to the number of pixels between the text
         and the icon.
Since:
1.4
See Also:
setIconTextGap(int)


"
AbstractButton,getItemListeners(),ItemListener[],Returns an array of all the ItemListeners added to this AbstractButton with addItemListener().,"

getItemListeners
public ItemListener[] getItemListeners()
Returns an array of all the ItemListeners added
 to this AbstractButton with addItemListener().

Returns:
all of the ItemListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractButton,getLabel(),String,Deprecated. - Replaced by getText,"

getLabel
@Deprecated
public String getLabel()
Deprecated. - Replaced by getText
Returns the label text.

Returns:
a String containing the label


"
AbstractButton,getMargin(),Insets,Returns the margin between the button's border and the label.,"

getMargin
public Insets getMargin()
Returns the margin between the button's border and
 the label.

Returns:
an Insets object specifying the margin
          between the botton's border and the label
See Also:
setMargin(java.awt.Insets)


"
AbstractButton,getMnemonic(),int,Returns the keyboard mnemonic from the the current model.,"

getMnemonic
public int getMnemonic()
Returns the keyboard mnemonic from the the current model.

Returns:
the keyboard mnemonic from the model


"
AbstractButton,getModel(),ButtonModel,Returns the model that this button represents.,"

getModel
public ButtonModel getModel()
Returns the model that this button represents.

Returns:
the model property
See Also:
setModel(javax.swing.ButtonModel)


"
AbstractButton,getMultiClickThreshhold(),long,Gets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.,"

getMultiClickThreshhold
public long getMultiClickThreshhold()
Gets the amount of time (in milliseconds) required between
 mouse press events for the button to generate the corresponding
 action events.

Returns:
the amount of time required between mouse press events
         to generate corresponding action events
Since:
1.4
See Also:
setMultiClickThreshhold(long)


"
AbstractButton,getPressedIcon(),Icon,Returns the pressed icon for the button.,"

getPressedIcon
public Icon getPressedIcon()
Returns the pressed icon for the button.

Returns:
the pressedIcon property
See Also:
setPressedIcon(javax.swing.Icon)


"
AbstractButton,getRolloverIcon(),Icon,Returns the rollover icon for the button.,"

getRolloverIcon
public Icon getRolloverIcon()
Returns the rollover icon for the button.

Returns:
the rolloverIcon property
See Also:
setRolloverIcon(javax.swing.Icon)


"
AbstractButton,getRolloverSelectedIcon(),Icon,Returns the rollover selection icon for the button.,"

getRolloverSelectedIcon
public Icon getRolloverSelectedIcon()
Returns the rollover selection icon for the button.

Returns:
the rolloverSelectedIcon property
See Also:
setRolloverSelectedIcon(javax.swing.Icon)


"
AbstractButton,getSelectedIcon(),Icon,Returns the selected icon for the button.,"

getSelectedIcon
public Icon getSelectedIcon()
Returns the selected icon for the button.

Returns:
the selectedIcon property
See Also:
setSelectedIcon(javax.swing.Icon)


"
AbstractButton,getSelectedObjects(),Object[],Returns an array (length 1) containing the label or null if the button is not selected.,"

getSelectedObjects
public Object[] getSelectedObjects()
Returns an array (length 1) containing the label or
 null if the button is not selected.

Specified by:
getSelectedObjects in interface ItemSelectable
Returns:
an array containing 1 Object: the text of the button,
         if the item is selected; otherwise null


"
AbstractButton,getText(),String,Returns the button's text.,"

getText
public String getText()
Returns the button's text.

Returns:
the buttons text
See Also:
setText(java.lang.String)


"
AbstractButton,getUI(),ButtonUI,Returns the L&F object that renders this component.,"

getUI
public ButtonUI getUI()
Returns the L&F object that renders this component.

Returns:
the ButtonUI object
See Also:
setUI(javax.swing.plaf.ButtonUI)


"
AbstractButton,getVerticalAlignment(),int,Returns the vertical alignment of the text and icon.,"

getVerticalAlignment
public int getVerticalAlignment()
Returns the vertical alignment of the text and icon.

Returns:
the verticalAlignment property, one of the
          following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM



"
AbstractButton,getVerticalTextPosition(),int,Returns the vertical position of the text relative to the icon.,"

getVerticalTextPosition
public int getVerticalTextPosition()
Returns the vertical position of the text relative to the icon.

Returns:
the verticalTextPosition property,
          one of the following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM



"
AbstractButton,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.,"

imageUpdate
public boolean imageUpdate(Image img,
                           int infoflags,
                           int x,
                           int y,
                           int w,
                           int h)
This is overridden to return false if the current Icon's
 Image is not equal to the
 passed in Image img.

Specified by:
imageUpdate in interface ImageObserver
Overrides:
imageUpdate in class Component
Parameters:
img - the Image to be compared
infoflags - flags used to repaint the button when the image
          is updated and which determine how much is to be painted
x - the x coordinate
y - the y coordinate
w - the width
h - the height
Returns:
false if the infoflags indicate that the
            image is completely loaded; true otherwise.
See Also:
ImageObserver, 
Component.imageUpdate(java.awt.Image, int, int, int, int, int)


"
AbstractButton,"init(String text, Icon icon)",protected void,NULL,"

init
protected void init(String text,
                    Icon icon)

"
AbstractButton,isBorderPainted(),boolean,Gets the borderPainted property.,"

isBorderPainted
public boolean isBorderPainted()
Gets the borderPainted property.

Returns:
the value of the borderPainted property
See Also:
setBorderPainted(boolean)


"
AbstractButton,isContentAreaFilled(),boolean,Gets the contentAreaFilled property.,"

isContentAreaFilled
public boolean isContentAreaFilled()
Gets the contentAreaFilled property.

Returns:
the contentAreaFilled property
See Also:
setContentAreaFilled(boolean)


"
AbstractButton,isFocusPainted(),boolean,Gets the paintFocus property.,"

isFocusPainted
public boolean isFocusPainted()
Gets the paintFocus property.

Returns:
the paintFocus property
See Also:
setFocusPainted(boolean)


"
AbstractButton,isRolloverEnabled(),boolean,Gets the rolloverEnabled property.,"

isRolloverEnabled
public boolean isRolloverEnabled()
Gets the rolloverEnabled property.

Returns:
the value of the rolloverEnabled property
See Also:
setRolloverEnabled(boolean)


"
AbstractButton,isSelected(),boolean,Returns the state of the button.,"

isSelected
public boolean isSelected()
Returns the state of the button. True if the
 toggle button is selected, false if it's not.

Returns:
true if the toggle button is selected, otherwise false


"
AbstractButton,paintBorder(Graphics g),protected void,Paint the button's border if BorderPainted property is true and the button has a border.,"

paintBorder
protected void paintBorder(Graphics g)
Paint the button's border if BorderPainted
 property is true and the button has a border.

Overrides:
paintBorder in class JComponent
Parameters:
g - the Graphics context in which to paint
See Also:
JComponent.paint(java.awt.Graphics), 
JComponent.setBorder(javax.swing.border.Border)


"
AbstractButton,paramString(),protected String,Returns a string representation of this AbstractButton.,"

paramString
protected String paramString()
Returns a string representation of this AbstractButton.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.
 
 Overriding paramString to provide information about the
 specific new aspects of the JFC components.

Overrides:
paramString in class JComponent
Returns:
a string representation of this AbstractButton


"
AbstractButton,removeActionListener(ActionListener l),void,Removes an ActionListener from the button.,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes an ActionListener from the button.
 If the listener is the currently set Action
 for the button, then the Action
 is set to null.

Parameters:
l - the listener to be removed


"
AbstractButton,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the button.

Parameters:
l - the listener to be removed


"
AbstractButton,removeItemListener(ItemListener l),void,Removes an ItemListener from the button.,"

removeItemListener
public void removeItemListener(ItemListener l)
Removes an ItemListener from the button.

Specified by:
removeItemListener in interface ItemSelectable
Parameters:
l - the ItemListener to be removed
See Also:
ItemEvent


"
AbstractButton,removeNotify(),void,Notifies this component that it no longer has a parent component.,"

removeNotify
public void removeNotify()
Notifies this component that it no longer has a parent component.
 When this method is invoked, any KeyboardActions
 set up in the the chain of parent components are removed.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
removeNotify in class JComponent
Since:
1.6
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
AbstractButton,setAction(Action a),void,Sets the Action.,"

setAction
public void setAction(Action a)
Sets the Action.
 The new Action replaces any previously set
 Action but does not affect ActionListeners
 independently added with addActionListener.
 If the Action is already a registered
 ActionListener for the button, it is not re-registered.
 
 Setting the Action results in immediately changing
 all the properties described in 
 Swing Components Supporting Action.
 Subsequently, the button's properties are automatically updated
 as the Action's properties change.
 
 This method uses three other methods to set
 and help track the Action's property values.
 It uses the configurePropertiesFromAction method
 to immediately change the button's properties.
 To track changes in the Action's property values,
 this method registers the PropertyChangeListener
 returned by createActionPropertyChangeListener. The
 default PropertyChangeListener invokes the
 actionPropertyChanged method when a property in the
 Action changes.

Parameters:
a - the Action for the AbstractButton,
          or null
Since:
1.3
See Also:
Action, 
getAction(), 
configurePropertiesFromAction(javax.swing.Action), 
createActionPropertyChangeListener(javax.swing.Action), 
actionPropertyChanged(javax.swing.Action, java.lang.String)


"
AbstractButton,setActionCommand(String actionCommand),void,Sets the action command for this button.,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command for this button.

Parameters:
actionCommand - the action command for this button


"
AbstractButton,setBorderPainted(boolean b),void,Sets the borderPainted property.,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property.
 If true and the button has a border,
 the border is painted. The default value for the
 borderPainted property is true.
 
 Some look and feels might not support
 the borderPainted property,
 in which case they ignore this.

Parameters:
b - if true and border property is not null,
          the border is painted
See Also:
isBorderPainted()


"
AbstractButton,setContentAreaFilled(boolean b),void,Sets the contentAreaFilled property.,"

setContentAreaFilled
public void setContentAreaFilled(boolean b)
Sets the contentAreaFilled property.
 If true the button will paint the content
 area.  If you wish to have a transparent button, such as
 an icon only button, for example, then you should set
 this to false. Do not call setOpaque(false).
 The default value for the the contentAreaFilled
 property is true.
 
 This function may cause the component's opaque property to change.
 
 The exact behavior of calling this function varies on a
 component-by-component and L&F-by-L&F basis.

Parameters:
b - if true, the content should be filled; if false
          the content area is not filled
See Also:
isContentAreaFilled(), 
JComponent.setOpaque(boolean)


"
AbstractButton,setDisabledIcon(Icon disabledIcon),void,Sets the disabled icon for the button.,"

setDisabledIcon
public void setDisabledIcon(Icon disabledIcon)
Sets the disabled icon for the button.

Parameters:
disabledIcon - the icon used as the disabled image
See Also:
getDisabledIcon()


"
AbstractButton,setDisabledSelectedIcon(Icon disabledSelectedIcon),void,Sets the disabled selection icon for the button.,"

setDisabledSelectedIcon
public void setDisabledSelectedIcon(Icon disabledSelectedIcon)
Sets the disabled selection icon for the button.

Parameters:
disabledSelectedIcon - the icon used as the disabled
          selection image
See Also:
getDisabledSelectedIcon()


"
AbstractButton,setDisplayedMnemonicIndex(int index),void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.,"

setDisplayedMnemonicIndex
public void setDisplayedMnemonicIndex(int index)
                               throws IllegalArgumentException
Provides a hint to the look and feel as to which character in the
 text should be decorated to represent the mnemonic. Not all look and
 feels may support this. A value of -1 indicates either there is no
 mnemonic, the mnemonic character is not contained in the string, or
 the developer does not wish the mnemonic to be displayed.
 
 The value of this is updated as the properties relating to the
 mnemonic change (such as the mnemonic itself, the text...).
 You should only ever have to call this if
 you do not wish the default character to be underlined. For example, if
 the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A'
 to be decorated, as 'Save As', you would have to invoke
 setDisplayedMnemonicIndex(5) after invoking
 setMnemonic(KeyEvent.VK_A).

Parameters:
index - Index into the String to underline
Throws:
IllegalArgumentException - will be thrown if index
            is >= length of the text, or < -1
Since:
1.4
See Also:
getDisplayedMnemonicIndex()


"
AbstractButton,setEnabled(boolean b),void,Enables (or disables) the button.,"

setEnabled
public void setEnabled(boolean b)
Enables (or disables) the button.

Overrides:
setEnabled in class JComponent
Parameters:
b - true to enable the button, otherwise false
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
AbstractButton,setFocusPainted(boolean b),void,"Sets the paintFocus property, which must be true for the focus state to be painted.","

setFocusPainted
public void setFocusPainted(boolean b)
Sets the paintFocus property, which must
 be true for the focus state to be painted.
 The default value for the paintFocus property
 is true.
 Some look and feels might not paint focus state;
 they will ignore this property.

Parameters:
b - if true, the focus state should be painted
See Also:
isFocusPainted()


"
AbstractButton,setHideActionText(boolean hideActionText),void,"Sets the hideActionText property, which determines whether the button displays text from the Action.","

setHideActionText
public void setHideActionText(boolean hideActionText)
Sets the hideActionText property, which determines
 whether the button displays text from the Action.
 This is useful only if an Action has been
 installed on the button.

Parameters:
hideActionText - true if the button's
                       text property should not reflect
                       that of the Action; the default is
                       false
Since:
1.6
See Also:
Swing Components Supporting
      Action


"
AbstractButton,setHorizontalAlignment(int alignment),void,Sets the horizontal alignment of the icon and text.,"

setHorizontalAlignment
public void setHorizontalAlignment(int alignment)
Sets the horizontal alignment of the icon and text.
 AbstractButton's default is SwingConstants.CENTER,
 but subclasses such as JCheckBox may use a different default.

Parameters:
alignment - the alignment value, one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING

Throws:
IllegalArgumentException - if the alignment is not one of the
         valid values


"
AbstractButton,setHorizontalTextPosition(int textPosition),void,Sets the horizontal position of the text relative to the icon.,"

setHorizontalTextPosition
public void setHorizontalTextPosition(int textPosition)
Sets the horizontal position of the text relative to the icon.

Parameters:
textPosition - one of the following values:
 
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING (the default)
 
Throws:
IllegalArgumentException - if textPosition
          is not one of the legal values listed above


"
AbstractButton,setIcon(Icon defaultIcon),void,Sets the button's default icon.,"

setIcon
public void setIcon(Icon defaultIcon)
Sets the button's default icon. This icon is
 also used as the ""pressed"" and ""disabled"" icon if
 there is no explicitly set pressed icon.

Parameters:
defaultIcon - the icon used as the default image
See Also:
getIcon(), 
setPressedIcon(javax.swing.Icon)


"
AbstractButton,setIconTextGap(int iconTextGap),void,"If both the icon and text properties are set, this property defines the space between them.","

setIconTextGap
public void setIconTextGap(int iconTextGap)
If both the icon and text properties are set, this property
 defines the space between them.
 
 The default value of this property is 4 pixels.
 
 This is a JavaBeans bound property.

Since:
1.4
See Also:
getIconTextGap()


"
AbstractButton,setLabel(String label),void,Deprecated. - Replaced by setText(text),"

setLabel
@Deprecated
public void setLabel(String label)
Deprecated. - Replaced by setText(text)
Sets the label text.

Parameters:
label - a String containing the text


"
AbstractButton,setLayout(LayoutManager mgr),void,"Sets the layout manager for this container, refer to Container.setLayout(LayoutManager) for a complete description of this method.","

setLayout
public void setLayout(LayoutManager mgr)
Sets the layout manager for this container, refer to
 Container.setLayout(LayoutManager)
 for a complete description of this method.

Overrides:
setLayout in class Container
Parameters:
mgr - the specified layout manager
Since:
1.5
See Also:
Container.doLayout(), 
Container.getLayout(), 
Container.invalidate()


"
AbstractButton,setMargin(Insets m),void,Sets space for margin between the button's border and the label.,"

setMargin
public void setMargin(Insets m)
Sets space for margin between the button's border and
 the label. Setting to null will cause the button to
 use the default margin.  The button's default Border
 object will use this value to create the proper margin.
 However, if a non-default border is set on the button,
 it is that Border object's responsibility to create the
 appropriate margin space (else this property will
 effectively be ignored).

Parameters:
m - the space between the border and the label


"
AbstractButton,setMnemonic(char mnemonic),void,"This method is now obsolete, please use setMnemonic(int) to set the mnemonic for a button.","

setMnemonic
public void setMnemonic(char mnemonic)
This method is now obsolete, please use setMnemonic(int)
 to set the mnemonic for a button.  This method is only designed
 to handle character values which fall between 'a' and 'z' or
 'A' and 'Z'.

Parameters:
mnemonic - a char specifying the mnemonic value
See Also:
setMnemonic(int)


"
AbstractButton,setMnemonic(int mnemonic),void,Sets the keyboard mnemonic on the current model.,"

setMnemonic
public void setMnemonic(int mnemonic)
Sets the keyboard mnemonic on the current model.
 The mnemonic is the key which when combined with the look and feel's
 mouseless modifier (usually Alt) will activate this button
 if focus is contained somewhere within this button's ancestor
 window.
 
 A mnemonic must correspond to a single key on the keyboard
 and should be specified using one of the VK_XXX
 keycodes defined in java.awt.event.KeyEvent.
 These codes and the wider array of codes for international
 keyboards may be obtained through
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.
 Mnemonics are case-insensitive, therefore a key event
 with the corresponding keycode would cause the button to be
 activated whether or not the Shift modifier was pressed.
 
 If the character defined by the mnemonic is found within
 the button's label string, the first occurrence of it
 will be underlined to indicate the mnemonic to the user.

Parameters:
mnemonic - the key code which represents the mnemonic
See Also:
KeyEvent, 
setDisplayedMnemonicIndex(int)


"
AbstractButton,setModel(ButtonModel newModel),void,Sets the model that this button represents.,"

setModel
public void setModel(ButtonModel newModel)
Sets the model that this button represents.

Parameters:
newModel - the new ButtonModel
See Also:
getModel()


"
AbstractButton,setMultiClickThreshhold(long threshhold),void,Sets the amount of time (in milliseconds) required between mouse press events for the button to generate the corresponding action events.,"

setMultiClickThreshhold
public void setMultiClickThreshhold(long threshhold)
Sets the amount of time (in milliseconds) required between
 mouse press events for the button to generate the corresponding
 action events.  After the initial mouse press occurs (and action
 event generated) any subsequent mouse press events which occur
 on intervals less than the threshhold will be ignored and no
 corresponding action event generated.  By default the threshhold is 0,
 which means that for each mouse press, an action event will be
 fired, no matter how quickly the mouse clicks occur.  In buttons
 where this behavior is not desirable (for example, the ""OK"" button
 in a dialog), this threshhold should be set to an appropriate
 positive value.

Parameters:
threshhold - the amount of time required between mouse
        press events to generate corresponding action events
Throws:
IllegalArgumentException - if threshhold < 0
Since:
1.4
See Also:
getMultiClickThreshhold()


"
AbstractButton,setPressedIcon(Icon pressedIcon),void,Sets the pressed icon for the button.,"

setPressedIcon
public void setPressedIcon(Icon pressedIcon)
Sets the pressed icon for the button.

Parameters:
pressedIcon - the icon used as the ""pressed"" image
See Also:
getPressedIcon()


"
AbstractButton,setRolloverEnabled(boolean b),void,"Sets the rolloverEnabled property, which must be true for rollover effects to occur.","

setRolloverEnabled
public void setRolloverEnabled(boolean b)
Sets the rolloverEnabled property, which
 must be true for rollover effects to occur.
 The default value for the rolloverEnabled
 property is false.
 Some look and feels might not implement rollover effects;
 they will ignore this property.

Parameters:
b - if true, rollover effects should be painted
See Also:
isRolloverEnabled()


"
AbstractButton,setRolloverIcon(Icon rolloverIcon),void,Sets the rollover icon for the button.,"

setRolloverIcon
public void setRolloverIcon(Icon rolloverIcon)
Sets the rollover icon for the button.

Parameters:
rolloverIcon - the icon used as the ""rollover"" image
See Also:
getRolloverIcon()


"
AbstractButton,setRolloverSelectedIcon(Icon rolloverSelectedIcon),void,Sets the rollover selected icon for the button.,"

setRolloverSelectedIcon
public void setRolloverSelectedIcon(Icon rolloverSelectedIcon)
Sets the rollover selected icon for the button.

Parameters:
rolloverSelectedIcon - the icon used as the
          ""selected rollover"" image
See Also:
getRolloverSelectedIcon()


"
AbstractButton,setSelected(boolean b),void,Sets the state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the state of the button. Note that this method does not
 trigger an actionEvent.
 Call doClick to perform a programmatic action change.

Parameters:
b - true if the button is selected, otherwise false


"
AbstractButton,setSelectedIcon(Icon selectedIcon),void,Sets the selected icon for the button.,"

setSelectedIcon
public void setSelectedIcon(Icon selectedIcon)
Sets the selected icon for the button.

Parameters:
selectedIcon - the icon used as the ""selected"" image
See Also:
getSelectedIcon()


"
AbstractButton,setText(String text),void,Sets the button's text.,"

setText
public void setText(String text)
Sets the button's text.

Parameters:
text - the string used to set the text
See Also:
getText()


"
AbstractButton,setUI(ButtonUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ButtonUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ButtonUI L&F object
See Also:
getUI()


"
AbstractButton,setVerticalAlignment(int alignment),void,Sets the vertical alignment of the icon and text.,"

setVerticalAlignment
public void setVerticalAlignment(int alignment)
Sets the vertical alignment of the icon and text.

Parameters:
alignment - one of the following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM

Throws:
IllegalArgumentException - if the alignment is not one of the legal
         values listed above


"
AbstractButton,setVerticalTextPosition(int textPosition),void,Sets the vertical position of the text relative to the icon.,"

setVerticalTextPosition
public void setVerticalTextPosition(int textPosition)
Sets the vertical position of the text relative to the icon.

Parameters:
textPosition - one of the following values:
 
SwingConstants.CENTER (the default)
 SwingConstants.TOP
SwingConstants.BOTTOM



"
AbstractButton,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look
 and feel.  Subtypes of AbstractButton
 should override this to update the UI. For
 example, JButton might do the following:
 
      setUI((ButtonUI)UIManager.getUI(
          ""ButtonUI"", ""javax.swing.plaf.basic.BasicButtonUI"", this));
 

Overrides:
updateUI in class JComponent
See Also:
JComponent.setUI(javax.swing.plaf.ComponentUI), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
AbstractCellEditor,addCellEditorListener(CellEditorListener l),void,Adds a CellEditorListener to the listener list.,"

addCellEditorListener
public void addCellEditorListener(CellEditorListener l)
Adds a CellEditorListener to the listener list.

Specified by:
addCellEditorListener in interface CellEditor
Parameters:
l - the new listener to be added


"
AbstractCellEditor,cancelCellEditing(),void,Calls fireEditingCanceled.,"

cancelCellEditing
public void cancelCellEditing()
Calls fireEditingCanceled.

Specified by:
cancelCellEditing in interface CellEditor


"
AbstractCellEditor,fireEditingCanceled(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireEditingCanceled
protected void fireEditingCanceled()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

See Also:
EventListenerList


"
AbstractCellEditor,fireEditingStopped(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireEditingStopped
protected void fireEditingStopped()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

See Also:
EventListenerList


"
AbstractCellEditor,getCellEditorListeners(),CellEditorListener[],Returns an array of all the CellEditorListeners added to this AbstractCellEditor with addCellEditorListener().,"

getCellEditorListeners
public CellEditorListener[] getCellEditorListeners()
Returns an array of all the CellEditorListeners added
 to this AbstractCellEditor with addCellEditorListener().

Returns:
all of the CellEditorListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractCellEditor,isCellEditable(EventObject e),boolean,Returns true.,"

isCellEditable
public boolean isCellEditable(EventObject e)
Returns true.

Specified by:
isCellEditable in interface CellEditor
Parameters:
e - an event object
Returns:
true
See Also:
CellEditor.shouldSelectCell(java.util.EventObject)


"
AbstractCellEditor,removeCellEditorListener(CellEditorListener l),void,Removes a CellEditorListener from the listener list.,"

removeCellEditorListener
public void removeCellEditorListener(CellEditorListener l)
Removes a CellEditorListener from the listener list.

Specified by:
removeCellEditorListener in interface CellEditor
Parameters:
l - the listener to be removed


"
AbstractCellEditor,shouldSelectCell(EventObject anEvent),boolean,Returns true.,"

shouldSelectCell
public boolean shouldSelectCell(EventObject anEvent)
Returns true.

Specified by:
shouldSelectCell in interface CellEditor
Parameters:
anEvent - an event object
Returns:
true
See Also:
CellEditor.isCellEditable(java.util.EventObject)


"
AbstractCellEditor,stopCellEditing(),boolean,Calls fireEditingStopped and returns true.,"

stopCellEditing
public boolean stopCellEditing()
Calls fireEditingStopped and returns true.

Specified by:
stopCellEditing in interface CellEditor
Returns:
true


"
AbstractListModel,addListDataListener(ListDataListener l),void,Adds a listener to the list that's notified each time a change to the data model occurs.,"

addListDataListener
public void addListDataListener(ListDataListener l)
Adds a listener to the list that's notified each time a change
 to the data model occurs.

Specified by:
addListDataListener in interface ListModel<E>
Parameters:
l - the ListDataListener to be added


"
AbstractListModel,"fireContentsChanged(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements of the list change.,"

fireContentsChanged
protected void fireContentsChanged(Object source,
                                   int index0,
                                   int index1)
AbstractListModel subclasses must call this method
 after
 one or more elements of the list change.  The changed elements
 are specified by the closed interval index0, index1 -- the endpoints
 are included.  Note that
 index0 need not be less than or equal to index1.

Parameters:
source - the ListModel that changed, typically ""this""
index0 - one end of the new interval
index1 - the other end of the new interval
See Also:
EventListenerList, 
DefaultListModel


"
AbstractListModel,"fireIntervalAdded(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements are added to the model.,"

fireIntervalAdded
protected void fireIntervalAdded(Object source,
                                 int index0,
                                 int index1)
AbstractListModel subclasses must call this method
 after
 one or more elements are added to the model.  The new elements
 are specified by a closed interval index0, index1 -- the enpoints
 are included.  Note that
 index0 need not be less than or equal to index1.

Parameters:
source - the ListModel that changed, typically ""this""
index0 - one end of the new interval
index1 - the other end of the new interval
See Also:
EventListenerList, 
DefaultListModel


"
AbstractListModel,"fireIntervalRemoved(Object source, int index0, int index1)",protected void,AbstractListModel subclasses must call this method after one or more elements are removed from the model.,"

fireIntervalRemoved
protected void fireIntervalRemoved(Object source,
                                   int index0,
                                   int index1)
AbstractListModel subclasses must call this method
 after one or more elements are removed from the model.
 index0 and index1 are the end points
 of the interval that's been removed.  Note that index0
 need not be less than or equal to index1.

Parameters:
source - the ListModel that changed, typically ""this""
index0 - one end of the removed interval,
               including index0
index1 - the other end of the removed interval,
               including index1
See Also:
EventListenerList, 
DefaultListModel


"
AbstractListModel,getListDataListeners(),ListDataListener[],Returns an array of all the list data listeners registered on this AbstractListModel.,"

getListDataListeners
public ListDataListener[] getListDataListeners()
Returns an array of all the list data listeners
 registered on this AbstractListModel.

Returns:
all of this model's ListDataListeners,
         or an empty array if no list data listeners
         are currently registered
Since:
1.4
See Also:
addListDataListener(javax.swing.event.ListDataListener), 
removeListDataListener(javax.swing.event.ListDataListener)


"
AbstractListModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this model.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a list model
 m
 for its list data listeners
 with the following code:

 ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getListDataListeners()


"
AbstractListModel,removeListDataListener(ListDataListener l),void,Removes a listener from the list that's notified each time a change to the data model occurs.,"

removeListDataListener
public void removeListDataListener(ListDataListener l)
Removes a listener from the list that's notified each time a
 change to the data model occurs.

Specified by:
removeListDataListener in interface ListModel<E>
Parameters:
l - the ListDataListener to be removed


"
AbstractSpinnerModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the model's listener list.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the model's listener list.  The
 ChangeListeners must be notified when the models value changes.

Specified by:
addChangeListener in interface SpinnerModel
Parameters:
l - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
AbstractSpinnerModel,fireStateChanged(),protected void,Run each ChangeListeners stateChanged() method.,"

fireStateChanged
protected void fireStateChanged()
Run each ChangeListeners stateChanged() method.

See Also:
SpinnerModel.setValue(java.lang.Object), 
EventListenerList


"
AbstractSpinnerModel,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this AbstractSpinnerModel with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this AbstractSpinnerModel with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
AbstractSpinnerModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Return an array of all the listeners of the given type that were added to this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Return an array of all the listeners of the given type that
 were added to this model.  For example to find all of the
 ChangeListeners added to this model:
 
 myAbstractSpinnerModel.getListeners(ChangeListener.class);
 

Parameters:
listenerType - the type of listeners to return, e.g. ChangeListener.class
Returns:
all of the objects receiving listenerType notifications
         from this model


"
AbstractSpinnerModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the model's listener list.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the model's listener list.

Specified by:
removeChangeListener in interface SpinnerModel
Parameters:
l - the ChangeListener to remove
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
SpinnerModel.removeChangeListener(javax.swing.event.ChangeListener)


"
ActionMap,allKeys(),Object[],Returns an array of the keys defined in this ActionMap and its parent.,"

allKeys
public Object[] allKeys()
Returns an array of the keys defined in this ActionMap and
 its parent. This method differs from keys() in that
 this method includes the keys defined in the parent.

"
ActionMap,clear(),void,Removes all the mappings from this ActionMap.,"

clear
public void clear()
Removes all the mappings from this ActionMap.

"
ActionMap,get(Object key),Action,"Returns the binding for key, messaging the parent ActionMap if the binding is not locally defined.","

get
public Action get(Object key)
Returns the binding for key, messaging the
 parent ActionMap if the binding is not locally defined.

"
ActionMap,getParent(),ActionMap,Returns this ActionMap's parent.,"

getParent
public ActionMap getParent()
Returns this ActionMap's parent.

Returns:
the ActionMap that is the parent of this one,
         or null if this ActionMap has no parent


"
ActionMap,keys(),Object[],Returns the Action names that are bound in this ActionMap.,"

keys
public Object[] keys()
Returns the Action names that are bound in this ActionMap.

"
ActionMap,"put(Object key, Action action)",void,Adds a binding for key to action.,"

put
public void put(Object key,
                Action action)
Adds a binding for key to action.
 If action is null, this removes the current binding
 for key.
 In most instances, key will be
 action.getValue(NAME).

"
ActionMap,remove(Object key),void,Removes the binding for key from this ActionMap.,"

remove
public void remove(Object key)
Removes the binding for key from this ActionMap.

"
ActionMap,setParent(ActionMap map),void,Sets this ActionMap's parent.,"

setParent
public void setParent(ActionMap map)
Sets this ActionMap's parent.

Parameters:
map - the ActionMap that is the parent of this one


"
ActionMap,size(),int,Returns the number of bindings in this ActionMap.,"

size
public int size()
Returns the number of bindings in this ActionMap.

Returns:
the number of bindings in this ActionMap


"
BorderFactory,createBevelBorder(int type),static Border,"Creates a beveled border of the specified type, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createBevelBorder
public static Border createBevelBorder(int type)
Creates a beveled border of the specified type, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a lowered border, shadows are on top and highlights
  are underneath.)

Parameters:
type - an integer specifying either
                  BevelBorder.LOWERED or
                  BevelBorder.RAISED
Returns:
the Border object


"
BorderFactory,"createBevelBorder(int type, Color highlight, Color shadow)",static Border,"Creates a beveled border of the specified type, using the specified highlighting and shadowing.","

createBevelBorder
public static Border createBevelBorder(int type,
                                       Color highlight,
                                       Color shadow)
Creates a beveled border of the specified type, using
 the specified highlighting and shadowing. The outer
 edge of the highlighted area uses a brighter shade of
 the highlight color. The inner edge of the shadow area
 uses a brighter shade of the shadow color.

Parameters:
type - an integer specifying either
                  BevelBorder.LOWERED or
                  BevelBorder.RAISED
highlight - a Color object for highlights
shadow - a Color object for shadows
Returns:
the Border object


"
BorderFactory,"createBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)",static Border,"Creates a beveled border of the specified type, using the specified colors for the inner and outer highlight and shadow areas.","

createBevelBorder
public static Border createBevelBorder(int type,
                                       Color highlightOuter,
                                       Color highlightInner,
                                       Color shadowOuter,
                                       Color shadowInner)
Creates a beveled border of the specified type, using
 the specified colors for the inner and outer highlight
 and shadow areas.

Parameters:
type - an integer specifying either
          BevelBorder.LOWERED or
          BevelBorder.RAISED
highlightOuter - a Color object for the
                  outer edge of the highlight area
highlightInner - a Color object for the
                  inner edge of the highlight area
shadowOuter - a Color object for the
                  outer edge of the shadow area
shadowInner - a Color object for the
                  inner edge of the shadow area
Returns:
the Border object


"
BorderFactory,createCompoundBorder(),static CompoundBorder,Creates a compound border with a null inside edge and a null outside edge.,"

createCompoundBorder
public static CompoundBorder createCompoundBorder()
Creates a compound border with a null inside edge and a
 null outside edge.

Returns:
the CompoundBorder object


"
BorderFactory,"createCompoundBorder(Border outsideBorder, Border insideBorder)",static CompoundBorder,Creates a compound border specifying the border objects to use for the outside and inside edges.,"

createCompoundBorder
public static CompoundBorder createCompoundBorder(Border outsideBorder,
                                                  Border insideBorder)
Creates a compound border specifying the border objects to use
 for the outside and inside edges.

Parameters:
outsideBorder - a Border object for the outer
                          edge of the compound border
insideBorder - a Border object for the inner
                          edge of the compound border
Returns:
the CompoundBorder object


"
BorderFactory,createDashedBorder(Paint paint),static Border,Creates a dashed border of the specified paint.,"

createDashedBorder
public static Border createDashedBorder(Paint paint)
Creates a dashed border of the specified paint.
 If the specified paint is null,
 the component's foreground color will be used to render the border.
 The width of a dash line is equal to 1.
 The relative length of a dash line and
 the relative spacing between dash lines are equal to 1.
 A dash line is not rounded.

Parameters:
paint - the Paint object used to generate a color
Returns:
the Border object
Since:
1.7


"
BorderFactory,"createDashedBorder(Paint paint, float length, float spacing)",static Border,"Creates a dashed border of the specified paint, relative length, and relative spacing.","

createDashedBorder
public static Border createDashedBorder(Paint paint,
                                        float length,
                                        float spacing)
Creates a dashed border of the specified paint,
 relative length, and relative spacing.
 If the specified paint is null,
 the component's foreground color will be used to render the border.
 The width of a dash line is equal to 1.
 A dash line is not rounded.

Parameters:
paint - the Paint object used to generate a color
length - the relative length of a dash line
spacing - the relative spacing between dash lines
Returns:
the Border object
Throws:
IllegalArgumentException - if the specified length is less than 1, or
                                  if the specified spacing is less than 0
Since:
1.7


"
BorderFactory,"createDashedBorder(Paint paint, float thickness, float length, float spacing, boolean rounded)",static Border,"Creates a dashed border of the specified paint, thickness, line shape, relative length, and relative spacing.","

createDashedBorder
public static Border createDashedBorder(Paint paint,
                                        float thickness,
                                        float length,
                                        float spacing,
                                        boolean rounded)
Creates a dashed border of the specified paint, thickness,
 line shape, relative length, and relative spacing.
 If the specified paint is null,
 the component's foreground color will be used to render the border.

Parameters:
paint - the Paint object used to generate a color
thickness - the width of a dash line
length - the relative length of a dash line
spacing - the relative spacing between dash lines
rounded - whether or not line ends should be round
Returns:
the Border object
Throws:
IllegalArgumentException - if the specified thickness is less than 1, or
                                  if the specified length is less than 1, or
                                  if the specified spacing is less than 0
Since:
1.7


"
BorderFactory,createEmptyBorder(),static Border,Creates an empty border that takes up no space.,"

createEmptyBorder
public static Border createEmptyBorder()
Creates an empty border that takes up no space. (The width
 of the top, bottom, left, and right sides are all zero.)

Returns:
the Border object


"
BorderFactory,"createEmptyBorder(int top, int left, int bottom, int right)",static Border,"Creates an empty border that takes up space but which does no drawing, specifying the width of the top, left, bottom, and right sides.","

createEmptyBorder
public static Border createEmptyBorder(int top,
                                       int left,
                                       int bottom,
                                       int right)
Creates an empty border that takes up space but which does
 no drawing, specifying the width of the top, left, bottom, and
 right sides.

Parameters:
top - an integer specifying the width of the top,
                  in pixels
left - an integer specifying the width of the left side,
                  in pixels
bottom - an integer specifying the width of the bottom,
                  in pixels
right - an integer specifying the width of the right side,
                  in pixels
Returns:
the Border object


"
BorderFactory,createEtchedBorder(),static Border,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading.","

createEtchedBorder
public static Border createEtchedBorder()
Creates a border with an ""etched"" look using
 the component's current background color for
 highlighting and shading.

Returns:
the Border object


"
BorderFactory,"createEtchedBorder(Color highlight, Color shadow)",static Border,"Creates a border with an ""etched"" look using the specified highlighting and shading colors.","

createEtchedBorder
public static Border createEtchedBorder(Color highlight,
                                        Color shadow)
Creates a border with an ""etched"" look using
 the specified highlighting and shading colors.

Parameters:
highlight - a Color object for the border highlights
shadow - a Color object for the border shadows
Returns:
the Border object


"
BorderFactory,createEtchedBorder(int type),static Border,"Creates a border with an ""etched"" look using the component's current background color for highlighting and shading.","

createEtchedBorder
public static Border createEtchedBorder(int type)
Creates a border with an ""etched"" look using
 the component's current background color for
 highlighting and shading.

Parameters:
type - one of EtchedBorder.RAISED, or
                  EtchedBorder.LOWERED
Returns:
the Border object
Throws:
IllegalArgumentException - if type is not either
                  EtchedBorder.RAISED or
                  EtchedBorder.LOWERED
Since:
1.3


"
BorderFactory,"createEtchedBorder(int type, Color highlight, Color shadow)",static Border,"Creates a border with an ""etched"" look using the specified highlighting and shading colors.","

createEtchedBorder
public static Border createEtchedBorder(int type,
                                        Color highlight,
                                        Color shadow)
Creates a border with an ""etched"" look using
 the specified highlighting and shading colors.

Parameters:
type - one of EtchedBorder.RAISED, or
                  EtchedBorder.LOWERED
highlight - a Color object for the border highlights
shadow - a Color object for the border shadows
Returns:
the Border object
Since:
1.3


"
BorderFactory,createLineBorder(Color color),static Border,Creates a line border withe the specified color.,"

createLineBorder
public static Border createLineBorder(Color color)
Creates a line border withe the specified color.

Parameters:
color - a Color to use for the line
Returns:
the Border object


"
BorderFactory,"createLineBorder(Color color, int thickness)",static Border,Creates a line border with the specified color and width.,"

createLineBorder
public static Border createLineBorder(Color color,
                                      int thickness)
Creates a line border with the specified color
 and width. The width applies to all four sides of the
 border. To specify widths individually for the top,
 bottom, left, and right, use
 createMatteBorder(int,int,int,int,Color).

Parameters:
color - a Color to use for the line
thickness - an integer specifying the width in pixels
Returns:
the Border object


"
BorderFactory,"createLineBorder(Color color, int thickness, boolean rounded)",static Border,"Creates a line border with the specified color, thickness, and corner shape.","

createLineBorder
public static Border createLineBorder(Color color,
                                      int thickness,
                                      boolean rounded)
Creates a line border with the specified color, thickness, and corner shape.

Parameters:
color - the color of the border
thickness - the thickness of the border
rounded - whether or not border corners should be round
Returns:
the Border object
Since:
1.7
See Also:
LineBorder.LineBorder(Color, int, boolean)


"
BorderFactory,createLoweredBevelBorder(),static Border,"Creates a border with a lowered beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createLoweredBevelBorder
public static Border createLoweredBevelBorder()
Creates a border with a lowered beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a lowered border, shadows are on top and highlights
  are underneath.)

Returns:
the Border object


"
BorderFactory,createLoweredSoftBevelBorder(),static Border,"Creates a beveled border with a lowered edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createLoweredSoftBevelBorder
public static Border createLoweredSoftBevelBorder()
Creates a beveled border with a lowered edge and softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 In a lowered border, shadows are on top and highlights are underneath.

Returns:
the Border object
Since:
1.7


"
BorderFactory,"createMatteBorder(int top, int left, int bottom, int right, Color color)",static MatteBorder,Creates a matte-look border using a solid color.,"

createMatteBorder
public static MatteBorder createMatteBorder(int top,
                                            int left,
                                            int bottom,
                                            int right,
                                            Color color)
Creates a matte-look border using a solid color. (The difference between
 this border and a line border is that you can specify the individual
 border dimensions.)

Parameters:
top - an integer specifying the width of the top,
                          in pixels
left - an integer specifying the width of the left side,
                          in pixels
bottom - an integer specifying the width of the right side,
                          in pixels
right - an integer specifying the width of the bottom,
                          in pixels
color - a Color to use for the border
Returns:
the MatteBorder object


"
BorderFactory,"createMatteBorder(int top, int left, int bottom, int right, Icon tileIcon)",static MatteBorder,Creates a matte-look border that consists of multiple tiles of a specified icon.,"

createMatteBorder
public static MatteBorder createMatteBorder(int top,
                                            int left,
                                            int bottom,
                                            int right,
                                            Icon tileIcon)
Creates a matte-look border that consists of multiple tiles of a
 specified icon. Multiple copies of the icon are placed side-by-side
 to fill up the border area.
 
 Note:
 If the icon doesn't load, the border area is painted gray.

Parameters:
top - an integer specifying the width of the top,
                          in pixels
left - an integer specifying the width of the left side,
                          in pixels
bottom - an integer specifying the width of the right side,
                          in pixels
right - an integer specifying the width of the bottom,
                          in pixels
tileIcon - the Icon object used for the border tiles
Returns:
the MatteBorder object


"
BorderFactory,createRaisedBevelBorder(),static Border,"Creates a border with a raised beveled edge, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createRaisedBevelBorder
public static Border createRaisedBevelBorder()
Creates a border with a raised beveled edge, using
 brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 (In a raised border, highlights are on top and shadows
  are underneath.)

Returns:
the Border object


"
BorderFactory,createRaisedSoftBevelBorder(),static Border,"Creates a beveled border with a raised edge and softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createRaisedSoftBevelBorder
public static Border createRaisedSoftBevelBorder()
Creates a beveled border with a raised edge and softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 In a raised border, highlights are on top and shadows are underneath.

Returns:
the Border object
Since:
1.7


"
BorderFactory,createSoftBevelBorder(int type),static Border,"Creates a beveled border of the specified type with softened corners, using brighter shades of the component's current background color for highlighting, and darker shading for shadows.","

createSoftBevelBorder
public static Border createSoftBevelBorder(int type)
Creates a beveled border of the specified type with softened corners,
 using brighter shades of the component's current background color
 for highlighting, and darker shading for shadows.
 The type is either BevelBorder.RAISED or BevelBorder.LOWERED.

Parameters:
type - a type of a bevel
Returns:
the Border object or null
         if the specified type is not valid
Since:
1.7
See Also:
BevelBorder.BevelBorder(int)


"
BorderFactory,"createSoftBevelBorder(int type, Color highlight, Color shadow)",static Border,"Creates a beveled border of the specified type with softened corners, using the specified highlighting and shadowing.","

createSoftBevelBorder
public static Border createSoftBevelBorder(int type,
                                           Color highlight,
                                           Color shadow)
Creates a beveled border of the specified type with softened corners,
 using the specified highlighting and shadowing.
 The type is either BevelBorder.RAISED or BevelBorder.LOWERED.
 The outer edge of the highlight area uses
 a brighter shade of the highlight color.
 The inner edge of the shadow area uses
 a brighter shade of the shadow color.

Parameters:
type - a type of a bevel
highlight - a basic color of the highlight area
shadow - a basic color of the shadow area
Returns:
the Border object
Since:
1.7
See Also:
BevelBorder.BevelBorder(int, Color, Color)


"
BorderFactory,"createSoftBevelBorder(int type, Color highlightOuter, Color highlightInner, Color shadowOuter, Color shadowInner)",static Border,"Creates a beveled border of the specified type with softened corners, using the specified colors for the inner and outer edges of the highlight and the shadow areas.","

createSoftBevelBorder
public static Border createSoftBevelBorder(int type,
                                           Color highlightOuter,
                                           Color highlightInner,
                                           Color shadowOuter,
                                           Color shadowInner)
Creates a beveled border of the specified type with softened corners,
 using the specified colors for the inner and outer edges
 of the highlight and the shadow areas.
 The type is either BevelBorder.RAISED or BevelBorder.LOWERED.
 Note: The shadow inner and outer colors are switched
 for a lowered bevel border.

Parameters:
type - a type of a bevel
highlightOuter - a color of the outer edge of the highlight area
highlightInner - a color of the inner edge of the highlight area
shadowOuter - a color of the outer edge of the shadow area
shadowInner - a color of the inner edge of the shadow area
Returns:
the Border object
Since:
1.7
See Also:
BevelBorder.BevelBorder(int, Color, Color, Color, Color)


"
BorderFactory,createStrokeBorder(BasicStroke stroke),static Border,Creates a border of the specified stroke.,"

createStrokeBorder
public static Border createStrokeBorder(BasicStroke stroke)
Creates a border of the specified stroke.
 The component's foreground color will be used to render the border.

Parameters:
stroke - the BasicStroke object used to stroke a shape
Returns:
the Border object
Throws:
NullPointerException - if the specified stroke is null
Since:
1.7


"
BorderFactory,"createStrokeBorder(BasicStroke stroke, Paint paint)",static Border,Creates a border of the specified stroke and paint.,"

createStrokeBorder
public static Border createStrokeBorder(BasicStroke stroke,
                                        Paint paint)
Creates a border of the specified stroke and paint.
 If the specified paint is null,
 the component's foreground color will be used to render the border.

Parameters:
stroke - the BasicStroke object used to stroke a shape
paint - the Paint object used to generate a color
Returns:
the Border object
Throws:
NullPointerException - if the specified stroke is null
Since:
1.7


"
BorderFactory,createTitledBorder(Border border),static TitledBorder,"Creates a new titled border with an empty title, the specified border object, the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).","

createTitledBorder
public static TitledBorder createTitledBorder(Border border)
Creates a new titled border with an empty title,
 the specified border object,
 the default text position (determined by the current look and feel),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).

Parameters:
border - the Border object to add the title to; if
                   null the Border is determined
                   by the current look and feel.
Returns:
the TitledBorder object


"
BorderFactory,"createTitledBorder(Border border, String title)",static TitledBorder,"Adds a title to an existing border, with default positioning (determined by the current look and feel), default justification (leading) and the default font and text color (determined by the current look and feel).","

createTitledBorder
public static TitledBorder createTitledBorder(Border border,
                                              String title)
Adds a title to an existing border,
 with default positioning (determined by the current look and feel),
 default justification (leading) and the default
 font and text color (determined by the current look and feel).

Parameters:
border - the Border object to add the title to
title - a String containing the text of the title
Returns:
the TitledBorder object


"
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition)",static TitledBorder,"Adds a title to an existing border, with the specified positioning and using the default font and text color (determined by the current look and feel).","

createTitledBorder
public static TitledBorder createTitledBorder(Border border,
                                              String title,
                                              int titleJustification,
                                              int titlePosition)
Adds a title to an existing border, with the specified
 positioning and using the default
 font and text color (determined by the current look and feel).

Parameters:
border - the Border object to add the title to
title - a String containing the text of the title
titleJustification - an integer specifying the justification
        of the title -- one of the following:

TitledBorder.LEFT
TitledBorder.CENTER
TitledBorder.RIGHT
TitledBorder.LEADING
TitledBorder.TRAILING
TitledBorder.DEFAULT_JUSTIFICATION (leading)

titlePosition - an integer specifying the vertical position of
        the text in relation to the border -- one of the following:

 TitledBorder.ABOVE_TOP
TitledBorder.TOP (sitting on the top line)
TitledBorder.BELOW_TOP
TitledBorder.ABOVE_BOTTOM
TitledBorder.BOTTOM (sitting on the bottom line)
TitledBorder.BELOW_BOTTOM
TitledBorder.DEFAULT_POSITION (the title position
  is determined by the current look and feel)

Returns:
the TitledBorder object


"
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont)",static TitledBorder,"Adds a title to an existing border, with the specified positioning and font, and using the default text color (determined by the current look and feel).","

createTitledBorder
public static TitledBorder createTitledBorder(Border border,
                                              String title,
                                              int titleJustification,
                                              int titlePosition,
                                              Font titleFont)
Adds a title to an existing border, with the specified
 positioning and font, and using the default text color
 (determined by the current look and feel).

Parameters:
border - the Border object to add the title to
title - a String containing the text of the title
titleJustification - an integer specifying the justification
        of the title -- one of the following:

TitledBorder.LEFT
TitledBorder.CENTER
TitledBorder.RIGHT
TitledBorder.LEADING
TitledBorder.TRAILING
TitledBorder.DEFAULT_JUSTIFICATION (leading)

titlePosition - an integer specifying the vertical position of
        the text in relation to the border -- one of the following:

 TitledBorder.ABOVE_TOP
TitledBorder.TOP (sitting on the top line)
TitledBorder.BELOW_TOP
TitledBorder.ABOVE_BOTTOM
TitledBorder.BOTTOM (sitting on the bottom line)
TitledBorder.BELOW_BOTTOM
TitledBorder.DEFAULT_POSITION (the title position
  is determined by the current look and feel)

titleFont - a Font object specifying the title font
Returns:
the TitledBorder object


"
BorderFactory,"createTitledBorder(Border border, String title, int titleJustification, int titlePosition, Font titleFont, Color titleColor)",static TitledBorder,"Adds a title to an existing border, with the specified positioning, font and color.","

createTitledBorder
public static TitledBorder createTitledBorder(Border border,
                                              String title,
                                              int titleJustification,
                                              int titlePosition,
                                              Font titleFont,
                                              Color titleColor)
Adds a title to an existing border, with the specified
 positioning, font and color.

Parameters:
border - the Border object to add the title to
title - a String containing the text of the title
titleJustification - an integer specifying the justification
        of the title -- one of the following:

TitledBorder.LEFT
TitledBorder.CENTER
TitledBorder.RIGHT
TitledBorder.LEADING
TitledBorder.TRAILING
TitledBorder.DEFAULT_JUSTIFICATION (leading)

titlePosition - an integer specifying the vertical position of
        the text in relation to the border -- one of the following:

 TitledBorder.ABOVE_TOP
TitledBorder.TOP (sitting on the top line)
TitledBorder.BELOW_TOP
TitledBorder.ABOVE_BOTTOM
TitledBorder.BOTTOM (sitting on the bottom line)
TitledBorder.BELOW_BOTTOM
TitledBorder.DEFAULT_POSITION (the title position
  is determined by the current look and feel)

titleFont - a Font object specifying the title font
titleColor - a Color object specifying the title color
Returns:
the TitledBorder object


"
BorderFactory,createTitledBorder(String title),static TitledBorder,"Creates a new titled border with the specified title, the default border type (determined by the current look and feel), the default text position (determined by the current look and feel), the default justification (leading), and the default font and text color (determined by the current look and feel).","

createTitledBorder
public static TitledBorder createTitledBorder(String title)
Creates a new titled border with the specified title,
 the default border type (determined by the current look and feel),
 the default text position (determined by the current look and feel),
 the default justification (leading), and the default
 font and text color (determined by the current look and feel).

Parameters:
title - a String containing the text of the title
Returns:
the TitledBorder object


"
Box,createGlue(),static Component,"Creates an invisible ""glue"" component that can be useful in a Box whose visible components have a maximum width (for a horizontal box) or height (for a vertical box).","

createGlue
public static Component createGlue()
Creates an invisible ""glue"" component
 that can be useful in a Box
 whose visible components have a maximum width
 (for a horizontal box)
 or height (for a vertical box).
 You can think of the glue component
 as being a gooey substance
 that expands as much as necessary
 to fill the space between its neighboring components.

 

 For example, suppose you have
 a horizontal box that contains two fixed-size components.
 If the box gets extra space,
 the fixed-size components won't become larger,
 so where does the extra space go?
 Without glue,
 the extra space goes to the right of the second component.
 If you put glue between the fixed-size components,
 then the extra space goes there.
 If you put glue before the first fixed-size component,
 the extra space goes there,
 and the fixed-size components are shoved against the right
 edge of the box.
 If you put glue before the first fixed-size component
 and after the second fixed-size component,
 the fixed-size components are centered in the box.

 

 To use glue,
 call Box.createGlue
 and add the returned component to a container.
 The glue component has no minimum or preferred size,
 so it takes no space unless excess space is available.
 If excess space is available,
 then the glue component takes its share of available
 horizontal or vertical space,
 just like any other component that has no maximum width or height.

Returns:
the component


"
Box,createHorizontalBox(),static Box,Creates a Box that displays its components from left to right.,"

createHorizontalBox
public static Box createHorizontalBox()
Creates a Box that displays its components
 from left to right. If you want a Box that
 respects the component orientation you should create the
 Box using the constructor and pass in
 BoxLayout.LINE_AXIS, eg:
 
   Box lineBox = new Box(BoxLayout.LINE_AXIS);
 

Returns:
the box


"
Box,createHorizontalGlue(),static Component,Creates a horizontal glue component.,"

createHorizontalGlue
public static Component createHorizontalGlue()
Creates a horizontal glue component.

Returns:
the component


"
Box,createHorizontalStrut(int width),static Component,"Creates an invisible, fixed-width component.","

createHorizontalStrut
public static Component createHorizontalStrut(int width)
Creates an invisible, fixed-width component.
 In a horizontal box,
 you typically use this method
 to force a certain amount of space between two components.
 In a vertical box,
 you might use this method
 to force the box to be at least the specified width.
 The invisible component has no height
 unless excess space is available,
 in which case it takes its share of available space,
 just like any other component that has no maximum height.

Parameters:
width - the width of the invisible component, in pixels >= 0
Returns:
the component
See Also:
createVerticalStrut(int), 
createGlue(), 
createRigidArea(java.awt.Dimension)


"
Box,createRigidArea(Dimension d),static Component,Creates an invisible component that's always the specified size.,"

createRigidArea
public static Component createRigidArea(Dimension d)
Creates an invisible component that's always the specified size.
 

Parameters:
d - the dimensions of the invisible component
Returns:
the component
See Also:
createGlue(), 
createHorizontalStrut(int), 
createVerticalStrut(int)


"
Box,createVerticalBox(),static Box,Creates a Box that displays its components from top to bottom.,"

createVerticalBox
public static Box createVerticalBox()
Creates a Box that displays its components
 from top to bottom. If you want a Box that
 respects the component orientation you should create the
 Box using the constructor and pass in
 BoxLayout.PAGE_AXIS, eg:
 
   Box lineBox = new Box(BoxLayout.PAGE_AXIS);
 

Returns:
the box


"
Box,createVerticalGlue(),static Component,Creates a vertical glue component.,"

createVerticalGlue
public static Component createVerticalGlue()
Creates a vertical glue component.

Returns:
the component


"
Box,createVerticalStrut(int height),static Component,"Creates an invisible, fixed-height component.","

createVerticalStrut
public static Component createVerticalStrut(int height)
Creates an invisible, fixed-height component.
 In a vertical box,
 you typically use this method
 to force a certain amount of space between two components.
 In a horizontal box,
 you might use this method
 to force the box to be at least the specified height.
 The invisible component has no width
 unless excess space is available,
 in which case it takes its share of available space,
 just like any other component that has no maximum width.

Parameters:
height - the height of the invisible component, in pixels >= 0
Returns:
the component
See Also:
createHorizontalStrut(int), 
createGlue(), 
createRigidArea(java.awt.Dimension)


"
Box,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this Box.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this Box.
 For boxes, the AccessibleContext takes the form of an
 AccessibleBox.
 A new AccessibleAWTBox instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleBox that serves as the
         AccessibleContext of this Box


"
Box,paintComponent(Graphics g),protected void,Paints this Box.,"

paintComponent
protected void paintComponent(Graphics g)
Paints this Box.  If this Box has a UI this
 method invokes super's implementation, otherwise if this
 Box is opaque the Graphics is filled
 using the background.

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics to paint to
Throws:
NullPointerException - if g is null
Since:
1.6
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
Box,setLayout(LayoutManager l),void,"Throws an AWTError, since a Box can use only a BoxLayout.","

setLayout
public void setLayout(LayoutManager l)
Throws an AWTError, since a Box can use only a BoxLayout.

Overrides:
setLayout in class Container
Parameters:
l - the layout manager to use
See Also:
Container.doLayout(), 
Container.getLayout(), 
Container.invalidate()


"
Box.Filler,"changeShape(Dimension min, Dimension pref, Dimension max)",void,Change the size requests for this shape.,"

changeShape
public void changeShape(Dimension min,
                        Dimension pref,
                        Dimension max)
Change the size requests for this shape.  An invalidate() is
 propagated upward as a result so that layout will eventually
 happen with using the new sizes.

Parameters:
min - Value to return for getMinimumSize
pref - Value to return for getPreferredSize
max - Value to return for getMaximumSize


"
Box.Filler,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this Box.Filler.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this Box.Filler.
 For box fillers, the AccessibleContext takes the form of an
 AccessibleBoxFiller.
 A new AccessibleAWTBoxFiller instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleBoxFiller that serves as the
         AccessibleContext of this Box.Filler.


"
Box.Filler,paintComponent(Graphics g),protected void,Paints this Filler.,"

paintComponent
protected void paintComponent(Graphics g)
Paints this Filler.  If this
 Filler has a UI this method invokes super's
 implementation, otherwise if this Filler is
 opaque the Graphics is filled using the
 background.

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics to paint to
Throws:
NullPointerException - if g is null
Since:
1.6
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
BoxLayout,"addLayoutComponent(Component comp, Object constraints)",void,Not used by this class.,"

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component
constraints - constraints


"
BoxLayout,"addLayoutComponent(String name, Component comp)",void,Not used by this class.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component comp)
Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
comp - the component


"
BoxLayout,getAxis(),int,Returns the axis that was used to lay out components.,"

getAxis
public final int getAxis()
Returns the axis that was used to lay out components.
 Returns one of:
 BoxLayout.X_AXIS,
 BoxLayout.Y_AXIS,
 BoxLayout.LINE_AXIS or
 BoxLayout.PAGE_AXIS

Returns:
the axis that was used to lay out components
Since:
1.6


"
BoxLayout,getLayoutAlignmentX(Container target),float,Returns the alignment along the X axis for the container.,"

getLayoutAlignmentX
public float getLayoutAlignmentX(Container target)
Returns the alignment along the X axis for the container.
 If the box is horizontal, the default
 alignment will be returned. Otherwise, the alignment needed
 to place the children along the X axis will be returned.

Specified by:
getLayoutAlignmentX in interface LayoutManager2
Parameters:
target - the container
Returns:
the alignment >= 0.0f && <= 1.0f
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
BoxLayout,getLayoutAlignmentY(Container target),float,Returns the alignment along the Y axis for the container.,"

getLayoutAlignmentY
public float getLayoutAlignmentY(Container target)
Returns the alignment along the Y axis for the container.
 If the box is vertical, the default
 alignment will be returned. Otherwise, the alignment needed
 to place the children along the Y axis will be returned.

Specified by:
getLayoutAlignmentY in interface LayoutManager2
Parameters:
target - the container
Returns:
the alignment >= 0.0f && <= 1.0f
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
BoxLayout,getTarget(),Container,Returns the container that uses this layout manager.,"

getTarget
public final Container getTarget()
Returns the container that uses this layout manager.

Returns:
the container that uses this layout manager
Since:
1.6


"
BoxLayout,invalidateLayout(Container target),void,"Indicates that a child has changed its layout related information, and thus any cached calculations should be flushed.","

invalidateLayout
public void invalidateLayout(Container target)
Indicates that a child has changed its layout related information,
 and thus any cached calculations should be flushed.
 
 This method is called by AWT when the invalidate method is called
 on the Container.  Since the invalidate method may be called
 asynchronously to the event thread, this method may be called
 asynchronously.

Specified by:
invalidateLayout in interface LayoutManager2
Parameters:
target - the affected container
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
BoxLayout,layoutContainer(Container target),void,Called by the AWT when the specified container needs to be laid out.,"

layoutContainer
public void layoutContainer(Container target)
Called by the AWT  when the specified container
 needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
target - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
BoxLayout,maximumLayoutSize(Container target),Dimension,Returns the maximum dimensions the target container can use to lay out the components it contains.,"

maximumLayoutSize
public Dimension maximumLayoutSize(Container target)
Returns the maximum dimensions the target container can use
 to lay out the components it contains.

Specified by:
maximumLayoutSize in interface LayoutManager2
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor
See Also:
preferredLayoutSize(java.awt.Container), 
minimumLayoutSize(java.awt.Container)


"
BoxLayout,minimumLayoutSize(Container target),Dimension,Returns the minimum dimensions needed to lay out the components contained in the specified target container.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor
See Also:
preferredLayoutSize(java.awt.Container), 
maximumLayoutSize(java.awt.Container)


"
BoxLayout,preferredLayoutSize(Container target),Dimension,"Returns the preferred dimensions for this layout, given the components in the specified target container.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Returns the preferred dimensions for this layout, given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor
See Also:
Container, 
minimumLayoutSize(java.awt.Container), 
maximumLayoutSize(java.awt.Container)


"
BoxLayout,removeLayoutComponent(Component comp),void,Not used by this class.,"

removeLayoutComponent
public void removeLayoutComponent(Component comp)
Not used by this class.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
comp - the component


"
ButtonGroup,add(AbstractButton b),void,Adds the button to the group.,"

add
public void add(AbstractButton b)
Adds the button to the group.

Parameters:
b - the button to be added


"
ButtonGroup,clearSelection(),void,Clears the selection such that none of the buttons in the ButtonGroup are selected.,"

clearSelection
public void clearSelection()
Clears the selection such that none of the buttons
 in the ButtonGroup are selected.

Since:
1.6


"
ButtonGroup,getButtonCount(),int,Returns the number of buttons in the group.,"

getButtonCount
public int getButtonCount()
Returns the number of buttons in the group.

Returns:
the button count
Since:
1.3


"
ButtonGroup,getElements(),Enumeration<AbstractButton>,Returns all the buttons that are participating in this group.,"

getElements
public Enumeration<AbstractButton> getElements()
Returns all the buttons that are participating in
 this group.

Returns:
an Enumeration of the buttons in this group


"
ButtonGroup,getSelection(),ButtonModel,Returns the model of the selected button.,"

getSelection
public ButtonModel getSelection()
Returns the model of the selected button.

Returns:
the selected button model


"
ButtonGroup,isSelected(ButtonModel m),boolean,Returns whether a ButtonModel is selected.,"

isSelected
public boolean isSelected(ButtonModel m)
Returns whether a ButtonModel is selected.

Returns:
true if the button is selected,
   otherwise returns false


"
ButtonGroup,remove(AbstractButton b),void,Removes the button from the group.,"

remove
public void remove(AbstractButton b)
Removes the button from the group.

Parameters:
b - the button to be removed


"
ButtonGroup,"setSelected(ButtonModel m, boolean b)",void,Sets the selected value for the ButtonModel.,"

setSelected
public void setSelected(ButtonModel m,
                        boolean b)
Sets the selected value for the ButtonModel.
 Only one button in the group may be selected at a time.

Parameters:
m - the ButtonModel
b - true if this button is to be
   selected, otherwise false


"
CellRendererPane,"addImpl(Component x, Object constraints, int index)",protected void,If the specified component is already a child of this then we don't bother doing anything - stacking order doesn't matter for cell renderer components (CellRendererPane doesn't paint anyway).,"

addImpl
protected void addImpl(Component x,
                       Object constraints,
                       int index)
If the specified component is already a child of this then we don't
 bother doing anything - stacking order doesn't matter for cell
 renderer components (CellRendererPane doesn't paint anyway).

Overrides:
addImpl in class Container
Parameters:
x - the component to be added
constraints - an object expressing layout constraints
                 for this component
index - the position in the container's list at which to
                 insert the component, where -1
                 means append to the end
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
CellRendererPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this CellRendererPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this CellRendererPane.
 For CellRendererPanes, the AccessibleContext takes the form of an
 AccessibleCellRendererPane.
 A new AccessibleCellRendererPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleCellRendererPane that serves as the
         AccessibleContext of this CellRendererPane


"
CellRendererPane,invalidate(),void,Overridden to avoid propagating a invalidate up the tree when the cell renderer child is configured.,"

invalidate
public void invalidate()
Overridden to avoid propagating a invalidate up the tree when the
 cell renderer child is configured.

Overrides:
invalidate in class Container
See Also:
Container.validate(), 
Container.layout(), 
LayoutManager2


"
CellRendererPane,paint(Graphics g),void,Shouldn't be called.,"

paint
public void paint(Graphics g)
Shouldn't be called.

Overrides:
paint in class Container
Parameters:
g - the specified Graphics window
See Also:
Component.update(Graphics)


"
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)",void,"Calls this.paintComponent(g, c, p, x, y, w, h, false).","

paintComponent
public void paintComponent(Graphics g,
                           Component c,
                           Container p,
                           int x,
                           int y,
                           int w,
                           int h)
Calls this.paintComponent(g, c, p, x, y, w, h, false).

"
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h, boolean shouldValidate)",void,Paint a cell renderer component c on graphics object g.,"

paintComponent
public void paintComponent(Graphics g,
                           Component c,
                           Container p,
                           int x,
                           int y,
                           int w,
                           int h,
                           boolean shouldValidate)
Paint a cell renderer component c on graphics object g.  Before the component
 is drawn it's reparented to this (if that's necessary), it's bounds
 are set to w,h and the graphics object is (effectively) translated to x,y.
 If it's a JComponent, double buffering is temporarily turned off. After
 the component is painted it's bounds are reset to -w, -h, 0, 0 so that, if
 it's the last renderer component painted, it will not start consuming input.
 The Container p is the component we're actually drawing on, typically it's
 equal to this.getParent(). If shouldValidate is true the component c will be
 validated before painted.

"
CellRendererPane,"paintComponent(Graphics g, Component c, Container p, Rectangle r)",void,"Calls this.paintComponent() with the rectangles x,y,width,height fields.","

paintComponent
public void paintComponent(Graphics g,
                           Component c,
                           Container p,
                           Rectangle r)
Calls this.paintComponent() with the rectangles x,y,width,height fields.

"
CellRendererPane,update(Graphics g),void,Shouldn't be called.,"

update
public void update(Graphics g)
Shouldn't be called.

Overrides:
update in class Container
Parameters:
g - the specified Graphics window
See Also:
Component.update(Graphics)


"
ComponentInputMap,clear(),void,Removes all the mappings from this object.,"

clear
public void clear()
Removes all the mappings from this object.

Overrides:
clear in class InputMap


"
ComponentInputMap,getComponent(),JComponent,Returns the component the InputMap was created for.,"

getComponent
public JComponent getComponent()
Returns the component the InputMap was created for.

"
ComponentInputMap,"put(KeyStroke keyStroke, Object actionMapKey)",void,Adds a binding for keyStroke to actionMapKey.,"

put
public void put(KeyStroke keyStroke,
                Object actionMapKey)
Adds a binding for keyStroke to actionMapKey.
 If actionMapKey is null, this removes the current binding
 for keyStroke.

Overrides:
put in class InputMap


"
ComponentInputMap,remove(KeyStroke key),void,Removes the binding for key from this object.,"

remove
public void remove(KeyStroke key)
Removes the binding for key from this object.

Overrides:
remove in class InputMap


"
ComponentInputMap,setParent(InputMap map),void,"Sets the parent, which must be a ComponentInputMap associated with the same component as this ComponentInputMap.","

setParent
public void setParent(InputMap map)
Sets the parent, which must be a ComponentInputMap
 associated with the same component as this
 ComponentInputMap.

Overrides:
setParent in class InputMap
Parameters:
map - a ComponentInputMap
Throws:
IllegalArgumentException - if map
         is not a ComponentInputMap
         or is not associated with the same component


"
DebugGraphics,"clearRect(int x, int y, int width, int height)",void,Overrides Graphics.clearRect.,"

clearRect
public void clearRect(int x,
                      int y,
                      int width,
                      int height)
Overrides Graphics.clearRect.

Specified by:
clearRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to clear.
y - the y coordinate of the rectangle to clear.
width - the width of the rectangle to clear.
height - the height of the rectangle to clear.
See Also:
Graphics.fillRect(int, int, int, int), 
Graphics.drawRect(int, int, int, int), 
Graphics.setColor(java.awt.Color), 
Graphics.setPaintMode(), 
Graphics.setXORMode(java.awt.Color)


"
DebugGraphics,"clipRect(int x, int y, int width, int height)",void,Overrides Graphics.clipRect.,"

clipRect
public void clipRect(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.clipRect.

Specified by:
clipRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to intersect the clip with
y - the y coordinate of the rectangle to intersect the clip with
width - the width of the rectangle to intersect the clip with
height - the height of the rectangle to intersect the clip with
See Also:
Graphics.setClip(int, int, int, int), 
Graphics.setClip(Shape)


"
DebugGraphics,"copyArea(int x, int y, int width, int height, int destX, int destY)",void,Overrides Graphics.copyArea.,"

copyArea
public void copyArea(int x,
                     int y,
                     int width,
                     int height,
                     int destX,
                     int destY)
Overrides Graphics.copyArea.

Specified by:
copyArea in class Graphics
Parameters:
x - the x coordinate of the source rectangle.
y - the y coordinate of the source rectangle.
width - the width of the source rectangle.
height - the height of the source rectangle.
destX - the horizontal distance to copy the pixels.
destY - the vertical distance to copy the pixels.


"
DebugGraphics,create(),Graphics,Overrides Graphics.create to return a DebugGraphics object.,"

create
public Graphics create()
Overrides Graphics.create to return a DebugGraphics object.

Specified by:
create in class Graphics
Returns:
a new graphics context that is a copy of
                       this graphics context.


"
DebugGraphics,"create(int x, int y, int width, int height)",Graphics,Overrides Graphics.create to return a DebugGraphics object.,"

create
public Graphics create(int x,
                       int y,
                       int width,
                       int height)
Overrides Graphics.create to return a DebugGraphics object.

Overrides:
create in class Graphics
Parameters:
x - the x coordinate.
y - the y coordinate.
width - the width of the clipping rectangle.
height - the height of the clipping rectangle.
Returns:
a new graphics context.
See Also:
Graphics.translate(int, int), 
Graphics.clipRect(int, int, int, int)


"
DebugGraphics,dispose(),void,Overrides Graphics.dispose.,"

dispose
public void dispose()
Overrides Graphics.dispose.

Specified by:
dispose in class Graphics
See Also:
Graphics.finalize(), 
Component.paint(java.awt.Graphics), 
Component.update(java.awt.Graphics), 
Component.getGraphics(), 
Graphics.create()


"
DebugGraphics,"draw3DRect(int x, int y, int width, int height, boolean raised)",void,Overrides Graphics.draw3DRect.,"

draw3DRect
public void draw3DRect(int x,
                       int y,
                       int width,
                       int height,
                       boolean raised)
Overrides Graphics.draw3DRect.

Overrides:
draw3DRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to be drawn.
y - the y coordinate of the rectangle to be drawn.
width - the width of the rectangle to be drawn.
height - the height of the rectangle to be drawn.
raised - a boolean that determines whether the rectangle
                      appears to be raised above the surface
                      or sunk into the surface.
See Also:
Graphics.fill3DRect(int, int, int, int, boolean)


"
DebugGraphics,"drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)",void,Overrides Graphics.drawArc.,"

drawArc
public void drawArc(int x,
                    int y,
                    int width,
                    int height,
                    int startAngle,
                    int arcAngle)
Overrides Graphics.drawArc.

Specified by:
drawArc in class Graphics
Parameters:
x - the x coordinate of the
                    upper-left corner of the arc to be drawn.
y - the y  coordinate of the
                    upper-left corner of the arc to be drawn.
width - the width of the arc to be drawn.
height - the height of the arc to be drawn.
startAngle - the beginning angle.
arcAngle - the angular extent of the arc,
                    relative to the start angle.
See Also:
Graphics.fillArc(int, int, int, int, int, int)


"
DebugGraphics,"drawBytes(byte[] data, int offset, int length, int x, int y)",void,Overrides Graphics.drawBytes.,"

drawBytes
public void drawBytes(byte[] data,
                      int offset,
                      int length,
                      int x,
                      int y)
Overrides Graphics.drawBytes.

Overrides:
drawBytes in class Graphics
Parameters:
data - the data to be drawn
offset - the start offset in the data
length - the number of bytes that are drawn
x - the x coordinate of the baseline of the text
y - the y coordinate of the baseline of the text
See Also:
Graphics.drawChars(char[], int, int, int, int), 
Graphics.drawString(java.lang.String, int, int)


"
DebugGraphics,"drawChars(char[] data, int offset, int length, int x, int y)",void,Overrides Graphics.drawChars.,"

drawChars
public void drawChars(char[] data,
                      int offset,
                      int length,
                      int x,
                      int y)
Overrides Graphics.drawChars.

Overrides:
drawChars in class Graphics
Parameters:
data - the array of characters to be drawn
offset - the start offset in the data
length - the number of characters to be drawn
x - the x coordinate of the baseline of the text
y - the y coordinate of the baseline of the text
See Also:
Graphics.drawBytes(byte[], int, int, int, int), 
Graphics.drawString(java.lang.String, int, int)


"
DebugGraphics,"drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int x,
                         int y,
                         Color bgcolor,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
               nothing if img is null.
x - the x coordinate.
y - the y coordinate.
bgcolor - the background color to paint under the
                         non-opaque portions of the image.
observer - object to be notified as more of
                          the image is converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawImage(Image img, int x, int y, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int x,
                         int y,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
               nothing if img is null.
x - the x coordinate.
y - the y coordinate.
observer - object to be notified as more of
                          the image is converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int x,
                         int y,
                         int width,
                         int height,
                         Color bgcolor,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
                     nothing if img is null.
x - the x coordinate.
y - the y coordinate.
width - the width of the rectangle.
height - the height of the rectangle.
bgcolor - the background color to paint under the
                         non-opaque portions of the image.
observer - object to be notified as more of
                          the image is converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawImage(Image img, int x, int y, int width, int height, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int x,
                         int y,
                         int width,
                         int height,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
                  nothing if img is null.
x - the x coordinate.
y - the y coordinate.
width - the width of the rectangle.
height - the height of the rectangle.
observer - object to be notified as more of
                          the image is converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, Color bgcolor, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int dx1,
                         int dy1,
                         int dx2,
                         int dy2,
                         int sx1,
                         int sy1,
                         int sx2,
                         int sy2,
                         Color bgcolor,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
                  nothing if img is null.
dx1 - the x coordinate of the first corner of the
                    destination rectangle.
dy1 - the y coordinate of the first corner of the
                    destination rectangle.
dx2 - the x coordinate of the second corner of the
                    destination rectangle.
dy2 - the y coordinate of the second corner of the
                    destination rectangle.
sx1 - the x coordinate of the first corner of the
                    source rectangle.
sy1 - the y coordinate of the first corner of the
                    source rectangle.
sx2 - the x coordinate of the second corner of the
                    source rectangle.
sy2 - the y coordinate of the second corner of the
                    source rectangle.
bgcolor - the background color to paint under the
                    non-opaque portions of the image.
observer - object to be notified as more of the image is
                    scaled and converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2, ImageObserver observer)",boolean,Overrides Graphics.drawImage.,"

drawImage
public boolean drawImage(Image img,
                         int dx1,
                         int dy1,
                         int dx2,
                         int dy2,
                         int sx1,
                         int sy1,
                         int sx2,
                         int sy2,
                         ImageObserver observer)
Overrides Graphics.drawImage.

Specified by:
drawImage in class Graphics
Parameters:
img - the specified image to be drawn. This method does
                  nothing if img is null.
dx1 - the x coordinate of the first corner of the
                    destination rectangle.
dy1 - the y coordinate of the first corner of the
                    destination rectangle.
dx2 - the x coordinate of the second corner of the
                    destination rectangle.
dy2 - the y coordinate of the second corner of the
                    destination rectangle.
sx1 - the x coordinate of the first corner of the
                    source rectangle.
sy1 - the y coordinate of the first corner of the
                    source rectangle.
sx2 - the x coordinate of the second corner of the
                    source rectangle.
sy2 - the y coordinate of the second corner of the
                    source rectangle.
observer - object to be notified as more of the image is
                    scaled and converted.
Returns:
false if the image pixels are still changing;
           true otherwise.
See Also:
Image, 
ImageObserver, 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
DebugGraphics,"drawLine(int x1, int y1, int x2, int y2)",void,Overrides Graphics.drawLine.,"

drawLine
public void drawLine(int x1,
                     int y1,
                     int x2,
                     int y2)
Overrides Graphics.drawLine.

Specified by:
drawLine in class Graphics
Parameters:
x1 - the first point's x coordinate.
y1 - the first point's y coordinate.
x2 - the second point's x coordinate.
y2 - the second point's y coordinate.


"
DebugGraphics,"drawOval(int x, int y, int width, int height)",void,Overrides Graphics.drawOval.,"

drawOval
public void drawOval(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.drawOval.

Specified by:
drawOval in class Graphics
Parameters:
x - the x coordinate of the upper left
                     corner of the oval to be drawn.
y - the y coordinate of the upper left
                     corner of the oval to be drawn.
width - the width of the oval to be drawn.
height - the height of the oval to be drawn.
See Also:
Graphics.fillOval(int, int, int, int)


"
DebugGraphics,"drawPolygon(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.drawPolygon.,"

drawPolygon
public void drawPolygon(int[] xPoints,
                        int[] yPoints,
                        int nPoints)
Overrides Graphics.drawPolygon.

Specified by:
drawPolygon in class Graphics
Parameters:
xPoints - a an array of x coordinates.
yPoints - a an array of y coordinates.
nPoints - a the total number of points.
See Also:
Graphics.fillPolygon(int[], int[], int), 
Graphics.drawPolyline(int[], int[], int)


"
DebugGraphics,"drawPolyline(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.drawPolyline.,"

drawPolyline
public void drawPolyline(int[] xPoints,
                         int[] yPoints,
                         int nPoints)
Overrides Graphics.drawPolyline.

Specified by:
drawPolyline in class Graphics
Parameters:
xPoints - an array of x points
yPoints - an array of y points
nPoints - the total number of points
See Also:
Graphics.drawPolygon(int[], int[], int)


"
DebugGraphics,"drawRect(int x, int y, int width, int height)",void,Overrides Graphics.drawRect.,"

drawRect
public void drawRect(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.drawRect.

Overrides:
drawRect in class Graphics
Parameters:
x - the x coordinate
                         of the rectangle to be drawn.
y - the y coordinate
                         of the rectangle to be drawn.
width - the width of the rectangle to be drawn.
height - the height of the rectangle to be drawn.
See Also:
Graphics.fillRect(int, int, int, int), 
Graphics.clearRect(int, int, int, int)


"
DebugGraphics,"drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",void,Overrides Graphics.drawRoundRect.,"

drawRoundRect
public void drawRoundRect(int x,
                          int y,
                          int width,
                          int height,
                          int arcWidth,
                          int arcHeight)
Overrides Graphics.drawRoundRect.

Specified by:
drawRoundRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to be drawn.
y - the y coordinate of the rectangle to be drawn.
width - the width of the rectangle to be drawn.
height - the height of the rectangle to be drawn.
arcWidth - the horizontal diameter of the arc
                    at the four corners.
arcHeight - the vertical diameter of the arc
                    at the four corners.
See Also:
Graphics.fillRoundRect(int, int, int, int, int, int)


"
DebugGraphics,"drawString(AttributedCharacterIterator iterator, int x, int y)",void,Overrides Graphics.drawString.,"

drawString
public void drawString(AttributedCharacterIterator iterator,
                       int x,
                       int y)
Overrides Graphics.drawString.

Specified by:
drawString in class Graphics
Parameters:
iterator - the iterator whose text is to be drawn
x - the x coordinate.
y - the y coordinate.
See Also:
Graphics.drawBytes(byte[], int, int, int, int), 
Graphics.drawChars(char[], int, int, int, int)


"
DebugGraphics,"drawString(String aString, int x, int y)",void,Overrides Graphics.drawString.,"

drawString
public void drawString(String aString,
                       int x,
                       int y)
Overrides Graphics.drawString.

Specified by:
drawString in class Graphics
Parameters:
aString - the string to be drawn.
x - the x coordinate.
y - the y coordinate.
See Also:
Graphics.drawBytes(byte[], int, int, int, int), 
Graphics.drawChars(char[], int, int, int, int)


"
DebugGraphics,"fill3DRect(int x, int y, int width, int height, boolean raised)",void,Overrides Graphics.fill3DRect.,"

fill3DRect
public void fill3DRect(int x,
                       int y,
                       int width,
                       int height,
                       boolean raised)
Overrides Graphics.fill3DRect.

Overrides:
fill3DRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to be filled.
y - the y coordinate of the rectangle to be filled.
width - the width of the rectangle to be filled.
height - the height of the rectangle to be filled.
raised - a boolean value that determines whether the
                      rectangle appears to be raised above the surface
                      or etched into the surface.
See Also:
Graphics.draw3DRect(int, int, int, int, boolean)


"
DebugGraphics,"fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)",void,Overrides Graphics.fillArc.,"

fillArc
public void fillArc(int x,
                    int y,
                    int width,
                    int height,
                    int startAngle,
                    int arcAngle)
Overrides Graphics.fillArc.

Specified by:
fillArc in class Graphics
Parameters:
x - the x coordinate of the
                    upper-left corner of the arc to be filled.
y - the y  coordinate of the
                    upper-left corner of the arc to be filled.
width - the width of the arc to be filled.
height - the height of the arc to be filled.
startAngle - the beginning angle.
arcAngle - the angular extent of the arc,
                    relative to the start angle.
See Also:
Graphics.drawArc(int, int, int, int, int, int)


"
DebugGraphics,"fillOval(int x, int y, int width, int height)",void,Overrides Graphics.fillOval.,"

fillOval
public void fillOval(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.fillOval.

Specified by:
fillOval in class Graphics
Parameters:
x - the x coordinate of the upper left corner
                     of the oval to be filled.
y - the y coordinate of the upper left corner
                     of the oval to be filled.
width - the width of the oval to be filled.
height - the height of the oval to be filled.
See Also:
Graphics.drawOval(int, int, int, int)


"
DebugGraphics,"fillPolygon(int[] xPoints, int[] yPoints, int nPoints)",void,Overrides Graphics.fillPolygon.,"

fillPolygon
public void fillPolygon(int[] xPoints,
                        int[] yPoints,
                        int nPoints)
Overrides Graphics.fillPolygon.

Specified by:
fillPolygon in class Graphics
Parameters:
xPoints - a an array of x coordinates.
yPoints - a an array of y coordinates.
nPoints - a the total number of points.
See Also:
Graphics.drawPolygon(int[], int[], int)


"
DebugGraphics,"fillRect(int x, int y, int width, int height)",void,Overrides Graphics.fillRect.,"

fillRect
public void fillRect(int x,
                     int y,
                     int width,
                     int height)
Overrides Graphics.fillRect.

Specified by:
fillRect in class Graphics
Parameters:
x - the x coordinate
                         of the rectangle to be filled.
y - the y coordinate
                         of the rectangle to be filled.
width - the width of the rectangle to be filled.
height - the height of the rectangle to be filled.
See Also:
Graphics.clearRect(int, int, int, int), 
Graphics.drawRect(int, int, int, int)


"
DebugGraphics,"fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)",void,Overrides Graphics.fillRoundRect.,"

fillRoundRect
public void fillRoundRect(int x,
                          int y,
                          int width,
                          int height,
                          int arcWidth,
                          int arcHeight)
Overrides Graphics.fillRoundRect.

Specified by:
fillRoundRect in class Graphics
Parameters:
x - the x coordinate of the rectangle to be filled.
y - the y coordinate of the rectangle to be filled.
width - the width of the rectangle to be filled.
height - the height of the rectangle to be filled.
arcWidth - the horizontal diameter
                     of the arc at the four corners.
arcHeight - the vertical diameter
                     of the arc at the four corners.
See Also:
Graphics.drawRoundRect(int, int, int, int, int, int)


"
DebugGraphics,flashColor(),static Color,Returns the Color used to flash drawing operations.,"

flashColor
public static Color flashColor()
Returns the Color used to flash drawing operations.

See Also:
setFlashColor(java.awt.Color)


"
DebugGraphics,flashCount(),static int,Returns the number of times that drawing operations will flash.,"

flashCount
public static int flashCount()
Returns the number of times that drawing operations will flash.

See Also:
setFlashCount(int)


"
DebugGraphics,flashTime(),static int,Returns the time delay of drawing operation flashing.,"

flashTime
public static int flashTime()
Returns the time delay of drawing operation flashing.

See Also:
setFlashTime(int)


"
DebugGraphics,getClip(),Shape,Overrides Graphics.getClip.,"

getClip
public Shape getClip()
Overrides Graphics.getClip.

Specified by:
getClip in class Graphics
Returns:
a Shape object representing the
              current clipping area, or null if
              no clip is set.
See Also:
Graphics.getClipBounds(), 
Graphics.clipRect(int, int, int, int), 
Graphics.setClip(int, int, int, int), 
Graphics.setClip(Shape)


"
DebugGraphics,getClipBounds(),Rectangle,Overrides Graphics.getClipBounds.,"

getClipBounds
public Rectangle getClipBounds()
Overrides Graphics.getClipBounds.

Specified by:
getClipBounds in class Graphics
Returns:
the bounding rectangle of the current clipping area,
              or null if no clip is set.
See Also:
Graphics.getClip(), 
Graphics.clipRect(int, int, int, int), 
Graphics.setClip(int, int, int, int), 
Graphics.setClip(Shape)


"
DebugGraphics,getColor(),Color,Returns the Color used for text drawing operations.,"

getColor
public Color getColor()
Returns the Color used for text drawing operations.

Specified by:
getColor in class Graphics
Returns:
this graphics context's current color.
See Also:
setColor(java.awt.Color)


"
DebugGraphics,getDebugOptions(),int,Returns the current debugging options for this DebugGraphics.,"

getDebugOptions
public int getDebugOptions()
Returns the current debugging options for this DebugGraphics.

See Also:
setDebugOptions(int)


"
DebugGraphics,getFont(),Font,Returns the Font used for text drawing operations.,"

getFont
public Font getFont()
Returns the Font used for text drawing operations.

Specified by:
getFont in class Graphics
Returns:
this graphics context's current font.
See Also:
setFont(java.awt.Font)


"
DebugGraphics,getFontMetrics(),FontMetrics,Overrides Graphics.getFontMetrics.,"

getFontMetrics
public FontMetrics getFontMetrics()
Overrides Graphics.getFontMetrics.

Overrides:
getFontMetrics in class Graphics
Returns:
the font metrics of this graphics
                    context's current font.
See Also:
Graphics.getFont(), 
FontMetrics, 
Graphics.getFontMetrics(Font)


"
DebugGraphics,getFontMetrics(Font f),FontMetrics,Overrides Graphics.getFontMetrics.,"

getFontMetrics
public FontMetrics getFontMetrics(Font f)
Overrides Graphics.getFontMetrics.

Specified by:
getFontMetrics in class Graphics
Parameters:
f - the specified font
Returns:
the font metrics for the specified font.
See Also:
Graphics.getFont(), 
FontMetrics, 
Graphics.getFontMetrics()


"
DebugGraphics,isDrawingBuffer(),boolean,Returns the drawingBuffer value.,"

isDrawingBuffer
public boolean isDrawingBuffer()
Returns the drawingBuffer value.

Returns:
true if this object is drawing from a Buffer


"
DebugGraphics,logStream(),static PrintStream,Returns the stream to which the DebugGraphics logs drawing operations.,"

logStream
public static PrintStream logStream()
Returns the stream to which the DebugGraphics logs drawing operations.

See Also:
setLogStream(java.io.PrintStream)


"
DebugGraphics,"setClip(int x, int y, int width, int height)",void,Overrides Graphics.setClip.,"

setClip
public void setClip(int x,
                    int y,
                    int width,
                    int height)
Overrides Graphics.setClip.

Specified by:
setClip in class Graphics
Parameters:
x - the x coordinate of the new clip rectangle.
y - the y coordinate of the new clip rectangle.
width - the width of the new clip rectangle.
height - the height of the new clip rectangle.
See Also:
Graphics.clipRect(int, int, int, int), 
Graphics.setClip(Shape), 
Graphics.getClip()


"
DebugGraphics,setClip(Shape clip),void,Overrides Graphics.setClip.,"

setClip
public void setClip(Shape clip)
Overrides Graphics.setClip.

Specified by:
setClip in class Graphics
Parameters:
clip - the Shape to use to set the clip
See Also:
Graphics.getClip(), 
Graphics.clipRect(int, int, int, int), 
Graphics.setClip(int, int, int, int)


"
DebugGraphics,setColor(Color aColor),void,Sets the color to be used for drawing and filling lines and shapes.,"

setColor
public void setColor(Color aColor)
Sets the color to be used for drawing and filling lines and shapes.

Specified by:
setColor in class Graphics
Parameters:
aColor - the new rendering color.
See Also:
Color, 
Graphics.getColor()


"
DebugGraphics,setDebugOptions(int options),void,Enables/disables diagnostic information about every graphics operation.,"

setDebugOptions
public void setDebugOptions(int options)
Enables/disables diagnostic information about every graphics
 operation. The value of options indicates how this information
 should be displayed. LOG_OPTION causes a text message to be printed.
 FLASH_OPTION causes the drawing to flash several times. BUFFERED_OPTION
 creates a new Frame that shows each operation on an
 offscreen buffer. The value of options is bitwise OR'd into
 the current value. To disable debugging use NONE_OPTION.

"
DebugGraphics,setFlashColor(Color flashColor),static void,Sets the Color used to flash drawing operations.,"

setFlashColor
public static void setFlashColor(Color flashColor)
Sets the Color used to flash drawing operations.

"
DebugGraphics,setFlashCount(int flashCount),static void,Sets the number of times that drawing operations will flash.,"

setFlashCount
public static void setFlashCount(int flashCount)
Sets the number of times that drawing operations will flash.

"
DebugGraphics,setFlashTime(int flashTime),static void,Sets the time delay of drawing operation flashing.,"

setFlashTime
public static void setFlashTime(int flashTime)
Sets the time delay of drawing operation flashing.

"
DebugGraphics,setFont(Font aFont),void,Sets the Font used for text drawing operations.,"

setFont
public void setFont(Font aFont)
Sets the Font used for text drawing operations.

Specified by:
setFont in class Graphics
Parameters:
aFont - the font.
See Also:
Graphics.getFont(), 
Graphics.drawString(java.lang.String, int, int), 
Graphics.drawBytes(byte[], int, int, int, int), 
Graphics.drawChars(char[], int, int, int, int)


"
DebugGraphics,setLogStream(PrintStream stream),static void,Sets the stream to which the DebugGraphics logs drawing operations.,"

setLogStream
public static void setLogStream(PrintStream stream)
Sets the stream to which the DebugGraphics logs drawing operations.

"
DebugGraphics,setPaintMode(),void,Overrides Graphics.setPaintMode.,"

setPaintMode
public void setPaintMode()
Overrides Graphics.setPaintMode.

Specified by:
setPaintMode in class Graphics


"
DebugGraphics,setXORMode(Color aColor),void,Overrides Graphics.setXORMode.,"

setXORMode
public void setXORMode(Color aColor)
Overrides Graphics.setXORMode.

Specified by:
setXORMode in class Graphics
Parameters:
aColor - the XOR alternation color


"
DebugGraphics,"translate(int x, int y)",void,Overrides Graphics.translate.,"

translate
public void translate(int x,
                      int y)
Overrides Graphics.translate.

Specified by:
translate in class Graphics
Parameters:
x - the x coordinate.
y - the y coordinate.


"
DefaultBoundedRangeModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener.  The change listeners are run each
 time any one of the Bounded Range model properties changes.

Specified by:
addChangeListener in interface BoundedRangeModel
Parameters:
l - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener)


"
DefaultBoundedRangeModel,fireStateChanged(),protected void,Runs each ChangeListener's stateChanged method.,"

fireStateChanged
protected void fireStateChanged()
Runs each ChangeListener's stateChanged method.

See Also:
setRangeProperties(int, int, int, int, boolean), 
EventListenerList


"
DefaultBoundedRangeModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultBoundedRangeModel.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the change listeners
 registered on this DefaultBoundedRangeModel.

Returns:
all of this model's ChangeListeners
         or an empty
         array if no change listeners are currently registered
Since:
1.4
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultBoundedRangeModel,getExtent(),int,Returns the model's extent.,"

getExtent
public int getExtent()
Returns the model's extent.

Specified by:
getExtent in interface BoundedRangeModel
Returns:
the model's extent
See Also:
setExtent(int), 
BoundedRangeModel.getExtent()


"
DefaultBoundedRangeModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this model.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a DefaultBoundedRangeModel
 instance m
 for its change listeners
 with the following code:

 ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getChangeListeners()


"
DefaultBoundedRangeModel,getMaximum(),int,Returns the model's maximum.,"

getMaximum
public int getMaximum()
Returns the model's maximum.

Specified by:
getMaximum in interface BoundedRangeModel
Returns:
the model's maximum
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
DefaultBoundedRangeModel,getMinimum(),int,Returns the model's minimum.,"

getMinimum
public int getMinimum()
Returns the model's minimum.

Specified by:
getMinimum in interface BoundedRangeModel
Returns:
the model's minimum
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
DefaultBoundedRangeModel,getValue(),int,Returns the model's current value.,"

getValue
public int getValue()
Returns the model's current value.

Specified by:
getValue in interface BoundedRangeModel
Returns:
the model's current value
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
DefaultBoundedRangeModel,getValueIsAdjusting(),boolean,Returns true if the value is in the process of changing as a result of actions being taken by the user.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns true if the value is in the process of changing
 as a result of actions being taken by the user.

Specified by:
getValueIsAdjusting in interface BoundedRangeModel
Returns:
the value of the valueIsAdjusting property
See Also:
setValue(int), 
BoundedRangeModel.getValueIsAdjusting()


"
DefaultBoundedRangeModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener.

Specified by:
removeChangeListener in interface BoundedRangeModel
Parameters:
l - the ChangeListener to remove
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultBoundedRangeModel,setExtent(int n),void,Sets the extent to n after ensuring that n is greater than or equal to zero and falls within the model's constraints:,"

setExtent
public void setExtent(int n)
Sets the extent to n after ensuring that n
 is greater than or equal to zero and falls within the model's
 constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setExtent in interface BoundedRangeModel
Parameters:
n - the model's new extent
See Also:
BoundedRangeModel.setExtent(int)


"
DefaultBoundedRangeModel,setMaximum(int n),void,Sets the maximum to n after ensuring that n that the other three properties obey the model's constraints:,"

setMaximum
public void setMaximum(int n)
Sets the maximum to n after ensuring that n
 that the other three properties obey the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setMaximum in interface BoundedRangeModel
Parameters:
n - the model's new maximum
See Also:
BoundedRangeModel.setMaximum(int)


"
DefaultBoundedRangeModel,setMinimum(int n),void,Sets the minimum to n after ensuring that n that the other three properties obey the model's constraints:,"

setMinimum
public void setMinimum(int n)
Sets the minimum to n after ensuring that n
 that the other three properties obey the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setMinimum in interface BoundedRangeModel
Parameters:
n - the model's new minimum
See Also:
getMinimum(), 
BoundedRangeModel.setMinimum(int)


"
DefaultBoundedRangeModel,"setRangeProperties(int newValue, int newExtent, int newMin, int newMax, boolean adjusting)",void,Sets all of the BoundedRangeModel properties after forcing the arguments to obey the usual constraints:,"

setRangeProperties
public void setRangeProperties(int newValue,
                               int newExtent,
                               int newMin,
                               int newMax,
                               boolean adjusting)
Sets all of the BoundedRangeModel properties after forcing
 the arguments to obey the usual constraints:
 
     minimum <= value <= value+extent <= maximum
 

 At most, one ChangeEvent is generated.

Specified by:
setRangeProperties in interface BoundedRangeModel
Parameters:
newValue - an int giving the current value
newExtent - an int giving the amount by which the value can ""jump""
newMin - an int giving the minimum value
newMax - an int giving the maximum value
adjusting - a boolean, true if a series of changes are in
                    progress
See Also:
BoundedRangeModel.setRangeProperties(int, int, int, int, boolean), 
setValue(int), 
setExtent(int), 
setMinimum(int), 
setMaximum(int), 
setValueIsAdjusting(boolean)


"
DefaultBoundedRangeModel,setValue(int n),void,Sets the current value of the model.,"

setValue
public void setValue(int n)
Sets the current value of the model. For a slider, that
 determines where the knob appears. Ensures that the new
 value, n falls within the model's constraints:
 
     minimum <= value <= value+extent <= maximum
 

Specified by:
setValue in interface BoundedRangeModel
Parameters:
n - the model's new value
See Also:
BoundedRangeModel.setValue(int)


"
DefaultBoundedRangeModel,setValueIsAdjusting(boolean b),void,Sets the valueIsAdjusting property.,"

setValueIsAdjusting
public void setValueIsAdjusting(boolean b)
Sets the valueIsAdjusting property.

Specified by:
setValueIsAdjusting in interface BoundedRangeModel
Parameters:
b - true if the upcoming changes to the value property are part of a series
See Also:
getValueIsAdjusting(), 
setValue(int), 
BoundedRangeModel.setValueIsAdjusting(boolean)


"
DefaultBoundedRangeModel,toString(),String,Returns a string that displays all of the BoundedRangeModel properties.,"

toString
public String toString()
Returns a string that displays all of the
 BoundedRangeModel properties.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
DefaultButtonModel,addActionListener(ActionListener l),void,Adds an ActionListener to the model.,"

addActionListener
public void addActionListener(ActionListener l)
Adds an ActionListener to the model.

Specified by:
addActionListener in interface ButtonModel
Parameters:
l - the listener to add


"
DefaultButtonModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the model.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the model.

Specified by:
addChangeListener in interface ButtonModel
Parameters:
l - the listener to add


"
DefaultButtonModel,addItemListener(ItemListener l),void,Adds an ItemListener to the model.,"

addItemListener
public void addItemListener(ItemListener l)
Adds an ItemListener to the model.

Specified by:
addItemListener in interface ItemSelectable
Specified by:
addItemListener in interface ButtonModel
Parameters:
l - the listener to add
See Also:
ItemEvent


"
DefaultButtonModel,fireActionPerformed(ActionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionPerformed
protected void fireActionPerformed(ActionEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
e - the ActionEvent to deliver to listeners
See Also:
EventListenerList


"
DefaultButtonModel,fireItemStateChanged(ItemEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireItemStateChanged
protected void fireItemStateChanged(ItemEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
e - the ItemEvent to deliver to listeners
See Also:
EventListenerList


"
DefaultButtonModel,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireStateChanged
protected void fireStateChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

See Also:
EventListenerList


"
DefaultButtonModel,getActionCommand(),String,Returns the action command string for the button.,"

getActionCommand
public String getActionCommand()
Returns the action command string for the button.

Specified by:
getActionCommand in interface ButtonModel
Returns:
the String that identifies the generated event
See Also:
ButtonModel.setActionCommand(java.lang.String)


"
DefaultButtonModel,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this DefaultButtonModel.,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the action listeners
 registered on this DefaultButtonModel.

Returns:
all of this model's ActionListeners
         or an empty
         array if no action listeners are currently registered
Since:
1.4
See Also:
addActionListener(java.awt.event.ActionListener), 
removeActionListener(java.awt.event.ActionListener)


"
DefaultButtonModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultButtonModel.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the change listeners
 registered on this DefaultButtonModel.

Returns:
all of this model's ChangeListeners
         or an empty
         array if no change listeners are currently registered
Since:
1.4
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultButtonModel,getGroup(),ButtonGroup,Returns the group that the button belongs to.,"

getGroup
public ButtonGroup getGroup()
Returns the group that the button belongs to.
 Normally used with radio buttons, which are mutually
 exclusive within their group.

Returns:
the ButtonGroup that the button belongs to
Since:
1.3


"
DefaultButtonModel,getItemListeners(),ItemListener[],Returns an array of all the item listeners registered on this DefaultButtonModel.,"

getItemListeners
public ItemListener[] getItemListeners()
Returns an array of all the item listeners
 registered on this DefaultButtonModel.

Returns:
all of this model's ItemListeners
         or an empty
         array if no item listeners are currently registered
Since:
1.4
See Also:
addItemListener(java.awt.event.ItemListener), 
removeItemListener(java.awt.event.ItemListener)


"
DefaultButtonModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this model.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a DefaultButtonModel
 instance m
 for its action listeners
 with the following code:

 ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getActionListeners(), 
getChangeListeners(), 
getItemListeners()


"
DefaultButtonModel,getMnemonic(),int,Gets the keyboard mnemonic for the button.,"

getMnemonic
public int getMnemonic()
Gets the keyboard mnemonic for the button.

Specified by:
getMnemonic in interface ButtonModel
Returns:
an int specifying the accelerator key
See Also:
ButtonModel.setMnemonic(int)


"
DefaultButtonModel,getSelectedObjects(),Object[],Overridden to return null.,"

getSelectedObjects
public Object[] getSelectedObjects()
Overridden to return null.

Specified by:
getSelectedObjects in interface ItemSelectable


"
DefaultButtonModel,isArmed(),boolean,Indicates partial commitment towards triggering the button.,"

isArmed
public boolean isArmed()
Indicates partial commitment towards triggering the
 button.

Specified by:
isArmed in interface ButtonModel
Returns:
true if the button is armed,
         and ready to be triggered
See Also:
ButtonModel.setArmed(boolean)


"
DefaultButtonModel,isEnabled(),boolean,"Indicates if the button can be selected or triggered by an input device, such as a mouse pointer.","

isEnabled
public boolean isEnabled()
Indicates if the button can be selected or triggered by
 an input device, such as a mouse pointer.

Specified by:
isEnabled in interface ButtonModel
Returns:
true if the button is enabled


"
DefaultButtonModel,isPressed(),boolean,Indicates if the button is pressed.,"

isPressed
public boolean isPressed()
Indicates if the button is pressed.

Specified by:
isPressed in interface ButtonModel
Returns:
true if the button is pressed


"
DefaultButtonModel,isRollover(),boolean,Indicates that the mouse is over the button.,"

isRollover
public boolean isRollover()
Indicates that the mouse is over the button.

Specified by:
isRollover in interface ButtonModel
Returns:
true if the mouse is over the button


"
DefaultButtonModel,isSelected(),boolean,Indicates if the button has been selected.,"

isSelected
public boolean isSelected()
Indicates if the button has been selected. Only needed for
 certain types of buttons - such as radio buttons and check boxes.

Specified by:
isSelected in interface ButtonModel
Returns:
true if the button is selected


"
DefaultButtonModel,removeActionListener(ActionListener l),void,Removes an ActionListener from the model.,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes an ActionListener from the model.

Specified by:
removeActionListener in interface ButtonModel
Parameters:
l - the listener to remove


"
DefaultButtonModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the model.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the model.

Specified by:
removeChangeListener in interface ButtonModel
Parameters:
l - the listener to remove


"
DefaultButtonModel,removeItemListener(ItemListener l),void,Removes an ItemListener from the model.,"

removeItemListener
public void removeItemListener(ItemListener l)
Removes an ItemListener from the model.

Specified by:
removeItemListener in interface ItemSelectable
Specified by:
removeItemListener in interface ButtonModel
Parameters:
l - the listener to remove
See Also:
ItemEvent


"
DefaultButtonModel,setActionCommand(String actionCommand),void,Sets the action command string that gets sent as part of the ActionEvent when the button is triggered.,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command string that gets sent as part of the
 ActionEvent when the button is triggered.

Specified by:
setActionCommand in interface ButtonModel
Parameters:
actionCommand - the String that identifies the generated event
See Also:
ButtonModel.getActionCommand(), 
ActionEvent.getActionCommand()


"
DefaultButtonModel,setArmed(boolean b),void,Marks the button as armed or unarmed.,"

setArmed
public void setArmed(boolean b)
Marks the button as armed or unarmed.

Specified by:
setArmed in interface ButtonModel
Parameters:
b - whether or not the button should be armed


"
DefaultButtonModel,setEnabled(boolean b),void,Enables or disables the button.,"

setEnabled
public void setEnabled(boolean b)
Enables or disables the button.

Specified by:
setEnabled in interface ButtonModel
Parameters:
b - whether or not the button should be enabled
See Also:
ButtonModel.isEnabled()


"
DefaultButtonModel,setGroup(ButtonGroup group),void,"Identifies the group the button belongs to -- needed for radio buttons, which are mutually exclusive within their group.","

setGroup
public void setGroup(ButtonGroup group)
Identifies the group the button belongs to --
 needed for radio buttons, which are mutually
 exclusive within their group.

Specified by:
setGroup in interface ButtonModel
Parameters:
group - the ButtonGroup the button belongs to


"
DefaultButtonModel,setMnemonic(int key),void,Sets the keyboard mnemonic (shortcut key or accelerator key) for the button.,"

setMnemonic
public void setMnemonic(int key)
Sets the keyboard mnemonic (shortcut key or
 accelerator key) for the button.

Specified by:
setMnemonic in interface ButtonModel
Parameters:
key - an int specifying the accelerator key


"
DefaultButtonModel,setPressed(boolean b),void,Sets the button to pressed or unpressed.,"

setPressed
public void setPressed(boolean b)
Sets the button to pressed or unpressed.

Specified by:
setPressed in interface ButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
DefaultButtonModel,setRollover(boolean b),void,Sets or clears the button's rollover state,"

setRollover
public void setRollover(boolean b)
Sets or clears the button's rollover state

Specified by:
setRollover in interface ButtonModel
Parameters:
b - whether or not the button is in the rollover state
See Also:
ButtonModel.isRollover()


"
DefaultButtonModel,setSelected(boolean b),void,Selects or deselects the button.,"

setSelected
public void setSelected(boolean b)
Selects or deselects the button.

Specified by:
setSelected in interface ButtonModel
Parameters:
b - true selects the button,
          false deselects the button


"
DefaultCellEditor,cancelCellEditing(),void,Forwards the message from the CellEditor to the delegate.,"

cancelCellEditing
public void cancelCellEditing()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
cancelCellEditing in interface CellEditor
Overrides:
cancelCellEditing in class AbstractCellEditor
See Also:
DefaultCellEditor.EditorDelegate.cancelCellEditing()


"
DefaultCellEditor,getCellEditorValue(),Object,Forwards the message from the CellEditor to the delegate.,"

getCellEditorValue
public Object getCellEditorValue()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
getCellEditorValue in interface CellEditor
Returns:
the value contained in the editor
See Also:
DefaultCellEditor.EditorDelegate.getCellEditorValue()


"
DefaultCellEditor,getClickCountToStart(),int,Returns the number of clicks needed to start editing.,"

getClickCountToStart
public int getClickCountToStart()
Returns the number of clicks needed to start editing.

Returns:
the number of clicks needed to start editing


"
DefaultCellEditor,getComponent(),Component,Returns a reference to the editor component.,"

getComponent
public Component getComponent()
Returns a reference to the editor component.

Returns:
the editor Component


"
DefaultCellEditor,"getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)",Component,Implements the TableCellEditor interface.,"

getTableCellEditorComponent
public Component getTableCellEditorComponent(JTable table,
                                             Object value,
                                             boolean isSelected,
                                             int row,
                                             int column)
Implements the TableCellEditor interface.

Specified by:
getTableCellEditorComponent in interface TableCellEditor
Parameters:
table - the JTable that is asking the
                          editor to edit; can be null
value - the value of the cell to be edited; it is
                          up to the specific editor to interpret
                          and draw the value.  For example, if value is
                          the string ""true"", it could be rendered as a
                          string or it could be rendered as a check
                          box that is checked.  null
                          is a valid value
isSelected - true if the cell is to be rendered with
                          highlighting
row - the row of the cell being edited
column - the column of the cell being edited
Returns:
the component for editing


"
DefaultCellEditor,"getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",Component,Implements the TreeCellEditor interface.,"

getTreeCellEditorComponent
public Component getTreeCellEditorComponent(JTree tree,
                                            Object value,
                                            boolean isSelected,
                                            boolean expanded,
                                            boolean leaf,
                                            int row)
Implements the TreeCellEditor interface.

Specified by:
getTreeCellEditorComponent in interface TreeCellEditor
Parameters:
tree - the JTree that is asking the editor to edit;
                          this parameter can be null
value - the value of the cell to be edited
isSelected - true if the cell is to be rendered with
                          selection highlighting
expanded - true if the node is expanded
leaf - true if the node is a leaf node
row - the row index of the node being edited
Returns:
the component for editing


"
DefaultCellEditor,isCellEditable(EventObject anEvent),boolean,Forwards the message from the CellEditor to the delegate.,"

isCellEditable
public boolean isCellEditable(EventObject anEvent)
Forwards the message from the CellEditor to
 the delegate.

Specified by:
isCellEditable in interface CellEditor
Overrides:
isCellEditable in class AbstractCellEditor
Parameters:
anEvent - an event object
Returns:
true
See Also:
DefaultCellEditor.EditorDelegate.isCellEditable(EventObject)


"
DefaultCellEditor,setClickCountToStart(int count),void,Specifies the number of clicks needed to start editing.,"

setClickCountToStart
public void setClickCountToStart(int count)
Specifies the number of clicks needed to start editing.

Parameters:
count - an int specifying the number of clicks needed to start editing
See Also:
getClickCountToStart()


"
DefaultCellEditor,shouldSelectCell(EventObject anEvent),boolean,Forwards the message from the CellEditor to the delegate.,"

shouldSelectCell
public boolean shouldSelectCell(EventObject anEvent)
Forwards the message from the CellEditor to
 the delegate.

Specified by:
shouldSelectCell in interface CellEditor
Overrides:
shouldSelectCell in class AbstractCellEditor
Parameters:
anEvent - an event object
Returns:
true
See Also:
DefaultCellEditor.EditorDelegate.shouldSelectCell(EventObject)


"
DefaultCellEditor,stopCellEditing(),boolean,Forwards the message from the CellEditor to the delegate.,"

stopCellEditing
public boolean stopCellEditing()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
stopCellEditing in interface CellEditor
Overrides:
stopCellEditing in class AbstractCellEditor
Returns:
true
See Also:
DefaultCellEditor.EditorDelegate.stopCellEditing()


"
DefaultComboBoxModel,addElement(E anObject),void,Adds an item at the end of the model.,"

addElement
public void addElement(E anObject)
Description copied from interface: MutableComboBoxModel
Adds an item at the end of the model. The implementation of this method
 should notify all registered ListDataListeners that the
 item has been added.

Specified by:
addElement in interface MutableComboBoxModel<E>
Parameters:
anObject - the item to be added


"
DefaultComboBoxModel,getElementAt(int index),E,Returns the value at the specified index.,"

getElementAt
public E getElementAt(int index)
Description copied from interface: ListModel
Returns the value at the specified index.

Specified by:
getElementAt in interface ListModel<E>
Parameters:
index - the requested index
Returns:
the value at index


"
DefaultComboBoxModel,getIndexOf(Object anObject),int,Returns the index-position of the specified object in the list.,"

getIndexOf
public int getIndexOf(Object anObject)
Returns the index-position of the specified object in the list.

Parameters:
anObject - 
Returns:
an int representing the index position, where 0 is
         the first position


"
DefaultComboBoxModel,getSelectedItem(),Object,Returns the selected item,"

getSelectedItem
public Object getSelectedItem()
Description copied from interface: ComboBoxModel
Returns the selected item

Specified by:
getSelectedItem in interface ComboBoxModel<E>
Returns:
The selected item or null if there is no selection


"
DefaultComboBoxModel,getSize(),int,Returns the length of the list.,"

getSize
public int getSize()
Description copied from interface: ListModel
Returns the length of the list.

Specified by:
getSize in interface ListModel<E>
Returns:
the length of the list


"
DefaultComboBoxModel,"insertElementAt(E anObject, int index)",void,Adds an item at a specific index.,"

insertElementAt
public void insertElementAt(E anObject,
                            int index)
Description copied from interface: MutableComboBoxModel
Adds an item at a specific index.  The implementation of this method
 should notify all registered ListDataListeners that the
 item has been added.

Specified by:
insertElementAt in interface MutableComboBoxModel<E>
Parameters:
anObject - the item to be added
index - location to add the object


"
DefaultComboBoxModel,removeAllElements(),void,Empties the list.,"

removeAllElements
public void removeAllElements()
Empties the list.

"
DefaultComboBoxModel,removeElement(Object anObject),void,Removes an item from the model.,"

removeElement
public void removeElement(Object anObject)
Description copied from interface: MutableComboBoxModel
Removes an item from the model. The implementation of this method should
 should notify all registered ListDataListeners that the
 item has been removed.

Specified by:
removeElement in interface MutableComboBoxModel<E>
Parameters:
anObject - the Object to be removed


"
DefaultComboBoxModel,removeElementAt(int index),void,Removes an item at a specific index.,"

removeElementAt
public void removeElementAt(int index)
Description copied from interface: MutableComboBoxModel
Removes an item at a specific index. The implementation of this method
 should notify all registered ListDataListeners that the
 item has been removed.

Specified by:
removeElementAt in interface MutableComboBoxModel<E>
Parameters:
index - location of the item to be removed


"
DefaultComboBoxModel,setSelectedItem(Object anObject),void,Set the value of the selected item.,"

setSelectedItem
public void setSelectedItem(Object anObject)
Set the value of the selected item. The selected item may be null.

Specified by:
setSelectedItem in interface ComboBoxModel<E>
Parameters:
anObject - The combo box value or null for no selection.


"
DefaultDesktopManager,activateFrame(JInternalFrame f),void,This will activate f moving it to the front.,"

activateFrame
public void activateFrame(JInternalFrame f)
This will activate f moving it to the front. It will
 set the current active frame's (if any)
 IS_SELECTED_PROPERTY to false.
 There can be only one active frame across all Layers.

Specified by:
activateFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be activated


"
DefaultDesktopManager,beginDraggingFrame(JComponent f),void,This method is normally called when the user has indicated that they will begin dragging a component around.,"

beginDraggingFrame
public void beginDraggingFrame(JComponent f)
Description copied from interface: DesktopManager
This method is normally called when the user has indicated that
 they will begin dragging a component around. This method should be called
 prior to any dragFrame() calls to allow the DesktopManager to prepare any
 necessary state. Normally f will be a JInternalFrame.

Specified by:
beginDraggingFrame in interface DesktopManager


"
DefaultDesktopManager,"beginResizingFrame(JComponent f, int direction)",void,This methods is normally called when the user has indicated that they will begin resizing the frame.,"

beginResizingFrame
public void beginResizingFrame(JComponent f,
                               int direction)
Description copied from interface: DesktopManager
This methods is normally called when the user has indicated that
 they will begin resizing the frame. This method should be called
 prior to any resizeFrame() calls to allow the DesktopManager to prepare any
 necessary state.  Normally f will be a JInternalFrame.

Specified by:
beginResizingFrame in interface DesktopManager


"
DefaultDesktopManager,closeFrame(JInternalFrame f),void,"Removes the frame, and, if necessary, the desktopIcon, from its parent.","

closeFrame
public void closeFrame(JInternalFrame f)
Removes the frame, and, if necessary, the
 desktopIcon, from its parent.

Specified by:
closeFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be removed


"
DefaultDesktopManager,deactivateFrame(JInternalFrame f),void,"Generally, indicate that this frame has lost focus.","

deactivateFrame
public void deactivateFrame(JInternalFrame f)
Description copied from interface: DesktopManager
Generally, indicate that this frame has lost focus. This is usually called
 after the JInternalFrame's IS_SELECTED_PROPERTY has been set to false.

Specified by:
deactivateFrame in interface DesktopManager


"
DefaultDesktopManager,deiconifyFrame(JInternalFrame f),void,Removes the desktopIcon from its parent and adds its frame to the parent.,"

deiconifyFrame
public void deiconifyFrame(JInternalFrame f)
Removes the desktopIcon from its parent and adds its frame
 to the parent.

Specified by:
deiconifyFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be de-iconified


"
DefaultDesktopManager,"dragFrame(JComponent f, int newX, int newY)",void,Moves the visible location of the frame being dragged to the location specified.,"

dragFrame
public void dragFrame(JComponent f,
                      int newX,
                      int newY)
Moves the visible location of the frame being dragged
 to the location specified.  The means by which this occurs can vary depending
 on the dragging algorithm being used.  The actual logical location of the frame
 might not change until endDraggingFrame is called.

Specified by:
dragFrame in interface DesktopManager


"
DefaultDesktopManager,endDraggingFrame(JComponent f),void,This method signals the end of the dragging session.,"

endDraggingFrame
public void endDraggingFrame(JComponent f)
Description copied from interface: DesktopManager
This method signals the end of the dragging session. Any state maintained by
 the DesktopManager can be removed here.  Normally f will be a JInternalFrame.

Specified by:
endDraggingFrame in interface DesktopManager


"
DefaultDesktopManager,endResizingFrame(JComponent f),void,This method signals the end of the resize session.,"

endResizingFrame
public void endResizingFrame(JComponent f)
Description copied from interface: DesktopManager
This method signals the end of the resize session. Any state maintained by
 the DesktopManager can be removed here.  Normally f will be a JInternalFrame.

Specified by:
endResizingFrame in interface DesktopManager


"
DefaultDesktopManager,getBoundsForIconOf(JInternalFrame f),protected Rectangle,The iconifyFrame() code calls this to determine the proper bounds for the desktopIcon.,"

getBoundsForIconOf
protected Rectangle getBoundsForIconOf(JInternalFrame f)
The iconifyFrame() code calls this to determine the proper bounds
 for the desktopIcon.

"
DefaultDesktopManager,getPreviousBounds(JInternalFrame f),protected Rectangle,Gets the normal bounds of the component prior to the component being maximized.,"

getPreviousBounds
protected Rectangle getPreviousBounds(JInternalFrame f)
Gets the normal bounds of the component prior to the component
 being maximized.

Parameters:
f - the JInternalFrame of interest
Returns:
the normal bounds of the component


"
DefaultDesktopManager,iconifyFrame(JInternalFrame f),void,Removes the frame from its parent and adds its desktopIcon to the parent.,"

iconifyFrame
public void iconifyFrame(JInternalFrame f)
Removes the frame from its parent and adds its
 desktopIcon to the parent.

Specified by:
iconifyFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be iconified


"
DefaultDesktopManager,maximizeFrame(JInternalFrame f),void,Resizes the frame to fill its parents bounds.,"

maximizeFrame
public void maximizeFrame(JInternalFrame f)
Resizes the frame to fill its parents bounds.

Specified by:
maximizeFrame in interface DesktopManager
Parameters:
f - the frame to be resized


"
DefaultDesktopManager,minimizeFrame(JInternalFrame f),void,Restores the frame back to its size and position prior to a maximizeFrame call.,"

minimizeFrame
public void minimizeFrame(JInternalFrame f)
Restores the frame back to its size and position prior
 to a maximizeFrame call.

Specified by:
minimizeFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be restored


"
DefaultDesktopManager,openFrame(JInternalFrame f),void,Normally this method will not be called.,"

openFrame
public void openFrame(JInternalFrame f)
Normally this method will not be called. If it is, it
 try to determine the appropriate parent from the desktopIcon of the frame.
 Will remove the desktopIcon from its parent if it successfully adds the frame.

Specified by:
openFrame in interface DesktopManager


"
DefaultDesktopManager,removeIconFor(JInternalFrame f),protected void,Convenience method to remove the desktopIcon of f is necessary.,"

removeIconFor
protected void removeIconFor(JInternalFrame f)
Convenience method to remove the desktopIcon of f is necessary.

"
DefaultDesktopManager,"resizeFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)",void,Calls setBoundsForFrame with the new values.,"

resizeFrame
public void resizeFrame(JComponent f,
                        int newX,
                        int newY,
                        int newWidth,
                        int newHeight)
Calls setBoundsForFrame with the new values.

Specified by:
resizeFrame in interface DesktopManager
Parameters:
f - the component to be resized
newX - the new x-coordinate
newY - the new y-coordinate
newWidth - the new width
newHeight - the new height


"
DefaultDesktopManager,"setBoundsForFrame(JComponent f, int newX, int newY, int newWidth, int newHeight)",void,This moves the JComponent and repaints the damaged areas.,"

setBoundsForFrame
public void setBoundsForFrame(JComponent f,
                              int newX,
                              int newY,
                              int newWidth,
                              int newHeight)
This moves the JComponent and repaints the damaged areas.

Specified by:
setBoundsForFrame in interface DesktopManager


"
DefaultDesktopManager,"setPreviousBounds(JInternalFrame f, Rectangle r)",protected void,Stores the bounds of the component just before a maximize call.,"

setPreviousBounds
protected void setPreviousBounds(JInternalFrame f,
                                 Rectangle r)
Stores the bounds of the component just before a maximize call.

Parameters:
f - the component about to be resized
r - the normal bounds to be saved away


"
DefaultDesktopManager,"setWasIcon(JInternalFrame f, Boolean value)",protected void,Sets that the component has been iconized and the bounds of the desktopIcon are valid.,"

setWasIcon
protected void setWasIcon(JInternalFrame f,
                          Boolean value)
Sets that the component has been iconized and the bounds of the
 desktopIcon are valid.

"
DefaultDesktopManager,wasIcon(JInternalFrame f),protected boolean,"Returns true if the component has been iconized and the bounds of the desktopIcon are valid, otherwise returns false.","

wasIcon
protected boolean wasIcon(JInternalFrame f)
Returns true if the component has been iconized
 and the bounds of the desktopIcon are valid,
 otherwise returns false.

Parameters:
f - the JInternalFrame of interest
Returns:
true if the component has been iconized;
    otherwise returns false


"
DefaultFocusManager,"compareTabOrder(Component a, Component b)",boolean,NULL,"

compareTabOrder
public boolean compareTabOrder(Component a,
                               Component b)

"
DefaultFocusManager,"getComponentAfter(Container aContainer, Component aComponent)",Component,NULL,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)

"
DefaultFocusManager,"getComponentBefore(Container aContainer, Component aComponent)",Component,NULL,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)

"
DefaultFocusManager,getFirstComponent(Container aContainer),Component,NULL,"

getFirstComponent
public Component getFirstComponent(Container aContainer)

"
DefaultFocusManager,getLastComponent(Container aContainer),Component,NULL,"

getLastComponent
public Component getLastComponent(Container aContainer)

"
DefaultListCellRenderer,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               boolean oldValue,
                               boolean newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, byte oldValue, byte newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               byte oldValue,
                               byte newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a byte)
newValue - the new value of the property (as a byte)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               char oldValue,
                               char newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a char)
newValue - the new value of the property (as a char)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, double oldValue, double newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               double oldValue,
                               double newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a double)
newValue - the new value of the property (as a double)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, float oldValue, float newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               float oldValue,
                               float newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a float)
newValue - the new value of the property (as a float)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               int oldValue,
                               int newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, long oldValue, long newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               long oldValue,
                               long newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a long)
newValue - the new value of the property (as a long)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Overridden for performance reasons.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultListCellRenderer,"firePropertyChange(String propertyName, short oldValue, short newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               short oldValue,
                               short newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a short)
newValue - the old value of the property (as a short)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultListCellRenderer,"getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus)",Component,Return a component that has been configured to display the specified value.,"

getListCellRendererComponent
public Component getListCellRendererComponent(JList<?> list,
                                              Object value,
                                              int index,
                                              boolean isSelected,
                                              boolean cellHasFocus)
Description copied from interface: ListCellRenderer
Return a component that has been configured to display the specified
 value. That component's paint method is then called to
 ""render"" the cell.  If it is necessary to compute the dimensions
 of a list because the list cells do not have a fixed size, this method
 is called to generate a component on which getPreferredSize
 can be invoked.

Specified by:
getListCellRendererComponent in interface ListCellRenderer<Object>
Parameters:
list - The JList we're painting.
value - The value returned by list.getModel().getElementAt(index).
index - The cells index.
isSelected - True if the specified cell was selected.
cellHasFocus - True if the specified cell has the focus.
Returns:
A component whose paint() method will render the specified value.
See Also:
JList, 
ListSelectionModel, 
ListModel


"
DefaultListCellRenderer,invalidate(),void,Overridden for performance reasons.,"

invalidate
public void invalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
invalidate in class Container
Since:
1.5
See Also:
Container.validate(), 
Container.layout(), 
LayoutManager2


"
DefaultListCellRenderer,isOpaque(),boolean,Overridden for performance reasons.,"

isOpaque
public boolean isOpaque()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
isOpaque in class JComponent
Returns:
true if the background is completely opaque
         and differs from the JList's background;
         false otherwise
Since:
1.5
See Also:
JComponent.setOpaque(boolean)


"
DefaultListCellRenderer,repaint(),void,Overridden for performance reasons.,"

repaint
public void repaint()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class Component
Since:
1.5
See Also:
Component.update(Graphics)


"
DefaultListCellRenderer,"repaint(long tm, int x, int y, int width, int height)",void,Overridden for performance reasons.,"

repaint
public void repaint(long tm,
                    int x,
                    int y,
                    int width,
                    int height)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
tm - this parameter is not used
x - the x value of the dirty region
y - the y value of the dirty region
width - the width of the dirty region
height - the height of the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultListCellRenderer,repaint(Rectangle r),void,Overridden for performance reasons.,"

repaint
public void repaint(Rectangle r)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
r - a Rectangle containing the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultListCellRenderer,revalidate(),void,Overridden for performance reasons.,"

revalidate
public void revalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
revalidate in class JComponent
See Also:
Component.invalidate(), 
Container.validate(), 
JComponent.isValidateRoot(), 
RepaintManager.addInvalidComponent(javax.swing.JComponent)


"
DefaultListCellRenderer,validate(),void,Overridden for performance reasons.,"

validate
public void validate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
validate in class Container
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.isValidateRoot(), 
JComponent.revalidate(), 
Container.validateTree()


"
DefaultListModel,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this list.
 
 Throws an ArrayIndexOutOfBoundsException if the
 index is out of range
 (index < 0 || index > size()).

Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted


"
DefaultListModel,addElement(E element),void,Adds the specified component to the end of this list.,"

addElement
public void addElement(E element)
Adds the specified component to the end of this list.

Parameters:
element - the component to be added
See Also:
Vector.addElement(Object)


"
DefaultListModel,capacity(),int,Returns the current capacity of this list.,"

capacity
public int capacity()
Returns the current capacity of this list.

Returns:
the current capacity
See Also:
Vector.capacity()


"
DefaultListModel,clear(),void,Removes all of the elements from this list.,"

clear
public void clear()
Removes all of the elements from this list.  The list will
 be empty after this call returns (unless it throws an exception).

"
DefaultListModel,contains(Object elem),boolean,Tests whether the specified object is a component in this list.,"

contains
public boolean contains(Object elem)
Tests whether the specified object is a component in this list.

Parameters:
elem - an object
Returns:
true if the specified object
          is the same as a component in this list
See Also:
Vector.contains(Object)


"
DefaultListModel,copyInto(Object[] anArray),void,Copies the components of this list into the specified array.,"

copyInto
public void copyInto(Object[] anArray)
Copies the components of this list into the specified array.
 The array must be big enough to hold all the objects in this list,
 else an IndexOutOfBoundsException is thrown.

Parameters:
anArray - the array into which the components get copied
See Also:
Vector.copyInto(Object[])


"
DefaultListModel,elementAt(int index),E,Returns the component at the specified index.,"

elementAt
public E elementAt(int index)
Returns the component at the specified index.
 Throws an ArrayIndexOutOfBoundsException if the index
 is negative or not less than the size of the list.
 
Note: Although this method is not deprecated, the preferred
    method to use is get(int), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
index - an index into this list
Returns:
the component at the specified index
See Also:
get(int), 
Vector.elementAt(int)


"
DefaultListModel,elements(),Enumeration<E>,Returns an enumeration of the components of this list.,"

elements
public Enumeration<E> elements()
Returns an enumeration of the components of this list.

Returns:
an enumeration of the components of this list
See Also:
Vector.elements()


"
DefaultListModel,ensureCapacity(int minCapacity),void,"Increases the capacity of this list, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument.","

ensureCapacity
public void ensureCapacity(int minCapacity)
Increases the capacity of this list, if necessary, to ensure
 that it can hold at least the number of components specified by
 the minimum capacity argument.

Parameters:
minCapacity - the desired minimum capacity
See Also:
Vector.ensureCapacity(int)


"
DefaultListModel,firstElement(),E,Returns the first component of this list.,"

firstElement
public E firstElement()
Returns the first component of this list.
 Throws a NoSuchElementException if this
 vector has no components.

Returns:
the first component of this list
See Also:
Vector.firstElement()


"
DefaultListModel,get(int index),E,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index is out of range
 (index < 0 || index >= size()).

Parameters:
index - index of element to return


"
DefaultListModel,getElementAt(int index),E,Returns the component at the specified index.,"

getElementAt
public E getElementAt(int index)
Returns the component at the specified index.
 
Note: Although this method is not deprecated, the preferred
    method to use is get(int), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
index - an index into this list
Returns:
the component at the specified index
Throws:
ArrayIndexOutOfBoundsException - if the index
             is negative or greater than the current size of this
             list
See Also:
get(int)


"
DefaultListModel,getSize(),int,Returns the number of components in this list.,"

getSize
public int getSize()
Returns the number of components in this list.
 
 This method is identical to size, which implements the
 List interface defined in the 1.2 Collections framework.
 This method exists in conjunction with setSize so that
 size is identifiable as a JavaBean property.

Returns:
the number of components in this list
See Also:
size()


"
DefaultListModel,indexOf(Object elem),int,Searches for the first occurrence of elem.,"

indexOf
public int indexOf(Object elem)
Searches for the first occurrence of elem.

Parameters:
elem - an object
Returns:
the index of the first occurrence of the argument in this
          list; returns -1 if the object is not found
See Also:
Vector.indexOf(Object)


"
DefaultListModel,"indexOf(Object elem, int index)",int,"Searches for the first occurrence of elem, beginning the search at index.","

indexOf
public int indexOf(Object elem,
                   int index)
Searches for the first occurrence of elem, beginning
 the search at index.

Parameters:
elem - an desired component
index - the index from which to begin searching
Returns:
the index where the first occurrence of elem
          is found after index; returns -1
          if the elem is not found in the list
See Also:
Vector.indexOf(Object,int)


"
DefaultListModel,"insertElementAt(E element, int index)",void,Inserts the specified element as a component in this list at the specified index.,"

insertElementAt
public void insertElementAt(E element,
                            int index)
Inserts the specified element as a component in this list at the
 specified index.
 
 Throws an ArrayIndexOutOfBoundsException if the index
 is invalid.
 
Note: Although this method is not deprecated, the preferred
    method to use is add(int,Object), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
element - the component to insert
index - where to insert the new component
Throws:
ArrayIndexOutOfBoundsException - if the index was invalid
See Also:
add(int,Object), 
Vector.insertElementAt(Object,int)


"
DefaultListModel,isEmpty(),boolean,Tests whether this list has any components.,"

isEmpty
public boolean isEmpty()
Tests whether this list has any components.

Returns:
true if and only if this list has
          no components, that is, its size is zero;
          false otherwise
See Also:
Vector.isEmpty()


"
DefaultListModel,lastElement(),E,Returns the last component of the list.,"

lastElement
public E lastElement()
Returns the last component of the list.
 Throws a NoSuchElementException if this vector
 has no components.

Returns:
the last component of the list
See Also:
Vector.lastElement()


"
DefaultListModel,lastIndexOf(Object elem),int,Returns the index of the last occurrence of elem.,"

lastIndexOf
public int lastIndexOf(Object elem)
Returns the index of the last occurrence of elem.

Parameters:
elem - the desired component
Returns:
the index of the last occurrence of elem
          in the list; returns -1 if the object is not found
See Also:
Vector.lastIndexOf(Object)


"
DefaultListModel,"lastIndexOf(Object elem, int index)",int,"Searches backwards for elem, starting from the specified index, and returns an index to it.","

lastIndexOf
public int lastIndexOf(Object elem,
                       int index)
Searches backwards for elem, starting from the
 specified index, and returns an index to it.

Parameters:
elem - the desired component
index - the index to start searching from
Returns:
the index of the last occurrence of the elem
          in this list at position less than index;
          returns -1 if the object is not found
See Also:
Vector.lastIndexOf(Object,int)


"
DefaultListModel,remove(int index),E,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.
 Returns the element that was removed from the list.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index is out of range
 (index < 0 || index >= size()).

Parameters:
index - the index of the element to removed
Returns:
the element previously at the specified position


"
DefaultListModel,removeAllElements(),void,Removes all components from this list and sets its size to zero.,"

removeAllElements
public void removeAllElements()
Removes all components from this list and sets its size to zero.
 
Note: Although this method is not deprecated, the preferred
    method to use is clear, which implements the
    List interface defined in the 1.2 Collections framework.
 

See Also:
clear(), 
Vector.removeAllElements()


"
DefaultListModel,removeElement(Object obj),boolean,Removes the first (lowest-indexed) occurrence of the argument from this list.,"

removeElement
public boolean removeElement(Object obj)
Removes the first (lowest-indexed) occurrence of the argument
 from this list.

Parameters:
obj - the component to be removed
Returns:
true if the argument was a component of this
          list; false otherwise
See Also:
Vector.removeElement(Object)


"
DefaultListModel,removeElementAt(int index),void,Deletes the component at the specified index.,"

removeElementAt
public void removeElementAt(int index)
Deletes the component at the specified index.
 
 Throws an ArrayIndexOutOfBoundsException if the index
 is invalid.
 
Note: Although this method is not deprecated, the preferred
    method to use is remove(int), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
index - the index of the object to remove
See Also:
remove(int), 
Vector.removeElementAt(int)


"
DefaultListModel,"removeRange(int fromIndex, int toIndex)",void,Deletes the components at the specified range of indexes.,"

removeRange
public void removeRange(int fromIndex,
                        int toIndex)
Deletes the components at the specified range of indexes.
 The removal is inclusive, so specifying a range of (1,5)
 removes the component at index 1 and the component at index 5,
 as well as all components in between.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index was invalid.
 Throws an IllegalArgumentException if
 fromIndex > toIndex.

Parameters:
fromIndex - the index of the lower end of the range
toIndex - the index of the upper end of the range
See Also:
remove(int)


"
DefaultListModel,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element.
 
 Throws an ArrayIndexOutOfBoundsException
 if the index is out of range
 (index < 0 || index >= size()).

Parameters:
index - index of element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position


"
DefaultListModel,"setElementAt(E element, int index)",void,Sets the component at the specified index of this list to be the specified element.,"

setElementAt
public void setElementAt(E element,
                         int index)
Sets the component at the specified index of this
 list to be the specified element. The previous component at that
 position is discarded.
 
 Throws an ArrayIndexOutOfBoundsException if the index
 is invalid.
 
Note: Although this method is not deprecated, the preferred
    method to use is set(int,Object), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
element - what the component is to be set to
index - the specified index
See Also:
set(int,Object), 
Vector.setElementAt(Object,int)


"
DefaultListModel,setSize(int newSize),void,Sets the size of this list.,"

setSize
public void setSize(int newSize)
Sets the size of this list.

Parameters:
newSize - the new size of this list
See Also:
Vector.setSize(int)


"
DefaultListModel,size(),int,Returns the number of components in this list.,"

size
public int size()
Returns the number of components in this list.

Returns:
the number of components in this list
See Also:
Vector.size()


"
DefaultListModel,toArray(),Object[],Returns an array containing all of the elements in this list in the correct order.,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this list in the
 correct order.

Returns:
an array containing the elements of the list
See Also:
Vector.toArray()


"
DefaultListModel,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
DefaultListModel,trimToSize(),void,Trims the capacity of this list to be the list's current size.,"

trimToSize
public void trimToSize()
Trims the capacity of this list to be the list's current size.

See Also:
Vector.trimToSize()


"
DefaultListSelectionModel,addListSelectionListener(ListSelectionListener l),void,Add a listener to the list that's notified each time a change to the selection occurs.,"

addListSelectionListener
public void addListSelectionListener(ListSelectionListener l)
Add a listener to the list that's notified each time a change
 to the selection occurs.

Specified by:
addListSelectionListener in interface ListSelectionModel
Parameters:
l - the ListSelectionListener
See Also:
ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener), 
ListSelectionModel.setSelectionInterval(int, int), 
ListSelectionModel.addSelectionInterval(int, int), 
ListSelectionModel.removeSelectionInterval(int, int), 
ListSelectionModel.clearSelection(), 
ListSelectionModel.insertIndexInterval(int, int, boolean), 
ListSelectionModel.removeIndexInterval(int, int)


"
DefaultListSelectionModel,"addSelectionInterval(int index0, int index1)",void,Changes the selection to be the set union of the current selection and the indices between index0 and index1 inclusive.,"

addSelectionInterval
public void addSelectionInterval(int index0,
                                 int index1)
Changes the selection to be the set union of the current selection
 and the indices between index0 and index1 inclusive.
 
 In SINGLE_SELECTION selection mode, this is equivalent
 to calling setSelectionInterval, and only the second index
 is used. In SINGLE_INTERVAL_SELECTION selection mode, this
 method behaves like setSelectionInterval, unless the given
 interval is immediately adjacent to or overlaps the existing selection,
 and can therefore be used to grow it.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change. Note that
 index0 doesn't have to be less than or equal to index1.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
addSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
setSelectionInterval(int, int)


"
DefaultListSelectionModel,clearSelection(),void,Change the selection to the empty set.,"

clearSelection
public void clearSelection()
Change the selection to the empty set.  If this represents
 a change to the current selection then notify each ListSelectionListener.

Specified by:
clearSelection in interface ListSelectionModel
See Also:
ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)


"
DefaultListSelectionModel,clone(),Object,Returns a clone of this selection model with the same selection.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone of this selection model with the same selection.
 listenerLists are not duplicated.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
CloneNotSupportedException - if the selection model does not
    both (a) implement the Cloneable interface and (b) define a
    clone method.
See Also:
Cloneable


"
DefaultListSelectionModel,fireValueChanged(boolean isAdjusting),protected void,Notifies listeners that we have ended a series of adjustments.,"

fireValueChanged
protected void fireValueChanged(boolean isAdjusting)
Notifies listeners that we have ended a series of adjustments.

"
DefaultListSelectionModel,"fireValueChanged(int firstIndex, int lastIndex)",protected void,"Notifies ListSelectionListeners that the value of the selection, in the closed interval firstIndex, lastIndex, has changed.","

fireValueChanged
protected void fireValueChanged(int firstIndex,
                                int lastIndex)
Notifies ListSelectionListeners that the value
 of the selection, in the closed interval firstIndex,
 lastIndex, has changed.

"
DefaultListSelectionModel,"fireValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)",protected void,NULL,"

fireValueChanged
protected void fireValueChanged(int firstIndex,
                                int lastIndex,
                                boolean isAdjusting)

Parameters:
firstIndex - the first index in the interval
lastIndex - the last index in the interval
isAdjusting - true if this is the final change in a series of
          adjustments
See Also:
EventListenerList


"
DefaultListSelectionModel,getAnchorSelectionIndex(),int,"Return the first index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().","

getAnchorSelectionIndex
public int getAnchorSelectionIndex()
Return the first index argument from the most recent call to
 setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
 The most recent index0 is considered the ""anchor"" and the most recent
 index1 is considered the ""lead"".  Some interfaces display these
 indices specially, e.g. Windows95 displays the lead index with a
 dotted yellow outline.

Specified by:
getAnchorSelectionIndex in interface ListSelectionModel
See Also:
ListSelectionModel.getLeadSelectionIndex(), 
ListSelectionModel.setSelectionInterval(int, int), 
ListSelectionModel.addSelectionInterval(int, int)


"
DefaultListSelectionModel,getLeadSelectionIndex(),int,"Return the second index argument from the most recent call to setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().","

getLeadSelectionIndex
public int getLeadSelectionIndex()
Return the second index argument from the most recent call to
 setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().

Specified by:
getLeadSelectionIndex in interface ListSelectionModel
See Also:
ListSelectionModel.getAnchorSelectionIndex(), 
ListSelectionModel.setSelectionInterval(int, int), 
ListSelectionModel.addSelectionInterval(int, int)


"
DefaultListSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this model.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a DefaultListSelectionModel
 instance m
 for its list selection listeners
 with the following code:

 ListSelectionListener[] lsls = (ListSelectionListener[])(m.getListeners(ListSelectionListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getListSelectionListeners()


"
DefaultListSelectionModel,getListSelectionListeners(),ListSelectionListener[],Returns an array of all the list selection listeners registered on this DefaultListSelectionModel.,"

getListSelectionListeners
public ListSelectionListener[] getListSelectionListeners()
Returns an array of all the list selection listeners
 registered on this DefaultListSelectionModel.

Returns:
all of this model's ListSelectionListeners
         or an empty
         array if no list selection listeners are currently registered
Since:
1.4
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
removeListSelectionListener(javax.swing.event.ListSelectionListener)


"
DefaultListSelectionModel,getMaxSelectionIndex(),int,Returns the last selected index or -1 if the selection is empty.,"

getMaxSelectionIndex
public int getMaxSelectionIndex()
Returns the last selected index or -1 if the selection is empty.

Specified by:
getMaxSelectionIndex in interface ListSelectionModel


"
DefaultListSelectionModel,getMinSelectionIndex(),int,Returns the first selected index or -1 if the selection is empty.,"

getMinSelectionIndex
public int getMinSelectionIndex()
Returns the first selected index or -1 if the selection is empty.

Specified by:
getMinSelectionIndex in interface ListSelectionModel


"
DefaultListSelectionModel,getSelectionMode(),int,Returns the current selection mode.,"

getSelectionMode
public int getSelectionMode()
Returns the current selection mode.

Specified by:
getSelectionMode in interface ListSelectionModel
Returns:
the current selection mode
See Also:
ListSelectionModel.setSelectionMode(int)


"
DefaultListSelectionModel,getValueIsAdjusting(),boolean,Returns true if the selection is undergoing a series of changes.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns true if the selection is undergoing a series of changes.

Specified by:
getValueIsAdjusting in interface ListSelectionModel
Returns:
true if the selection is undergoing a series of changes
See Also:
ListSelectionModel.setValueIsAdjusting(boolean)


"
DefaultListSelectionModel,"insertIndexInterval(int index, int length, boolean before)",void,Insert length indices beginning before/after index.,"

insertIndexInterval
public void insertIndexInterval(int index,
                                int length,
                                boolean before)
Insert length indices beginning before/after index. If the value
 at index is itself selected and the selection mode is not
 SINGLE_SELECTION, set all of the newly inserted items as selected.
 Otherwise leave them unselected. This method is typically
 called to sync the selection model with a corresponding change
 in the data model.

Specified by:
insertIndexInterval in interface ListSelectionModel


"
DefaultListSelectionModel,isLeadAnchorNotificationEnabled(),boolean,Returns the value of the leadAnchorNotificationEnabled flag.,"

isLeadAnchorNotificationEnabled
public boolean isLeadAnchorNotificationEnabled()
Returns the value of the leadAnchorNotificationEnabled flag.
 When leadAnchorNotificationEnabled is true the model
 generates notification events with bounds that cover all the changes to
 the selection plus the changes to the lead and anchor indices.
 Setting the flag to false causes a narrowing of the event's bounds to
 include only the elements that have been selected or deselected since
 the last change. Either way, the model continues to maintain the lead
 and anchor variables internally. The default is true.
 
 Note: It is possible for the lead or anchor to be changed without a
 change to the selection. Notification of these changes is often
 important, such as when the new lead or anchor needs to be updated in
 the view. Therefore, caution is urged when changing the default value.

Returns:
the value of the leadAnchorNotificationEnabled flag
See Also:
setLeadAnchorNotificationEnabled(boolean)


"
DefaultListSelectionModel,isSelectedIndex(int index),boolean,Returns true if the specified index is selected.,"

isSelectedIndex
public boolean isSelectedIndex(int index)
Returns true if the specified index is selected.

Specified by:
isSelectedIndex in interface ListSelectionModel


"
DefaultListSelectionModel,isSelectionEmpty(),boolean,Returns true if no indices are selected.,"

isSelectionEmpty
public boolean isSelectionEmpty()
Returns true if no indices are selected.

Specified by:
isSelectionEmpty in interface ListSelectionModel


"
DefaultListSelectionModel,moveLeadSelectionIndex(int leadIndex),void,"Set the lead selection index, leaving all selection values unchanged.","

moveLeadSelectionIndex
public void moveLeadSelectionIndex(int leadIndex)
Set the lead selection index, leaving all selection values unchanged.
 If leadAnchorNotificationEnabled is true, send a notification covering
 the old and new lead cells.

Parameters:
leadIndex - the new lead selection index
Since:
1.5
See Also:
setAnchorSelectionIndex(int), 
setLeadSelectionIndex(int), 
getLeadSelectionIndex()


"
DefaultListSelectionModel,"removeIndexInterval(int index0, int index1)",void,"Remove the indices in the interval index0,index1 (inclusive) from the selection model.","

removeIndexInterval
public void removeIndexInterval(int index0,
                                int index1)
Remove the indices in the interval index0,index1 (inclusive) from
 the selection model.  This is typically called to sync the selection
 model width a corresponding change in the data model.  Note
 that (as always) index0 need not be <= index1.

Specified by:
removeIndexInterval in interface ListSelectionModel


"
DefaultListSelectionModel,removeListSelectionListener(ListSelectionListener l),void,Remove a listener from the list that's notified each time a change to the selection occurs.,"

removeListSelectionListener
public void removeListSelectionListener(ListSelectionListener l)
Remove a listener from the list that's notified each time a
 change to the selection occurs.

Specified by:
removeListSelectionListener in interface ListSelectionModel
Parameters:
l - the ListSelectionListener
See Also:
ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)


"
DefaultListSelectionModel,"removeSelectionInterval(int index0, int index1)",void,Changes the selection to be the set difference of the current selection and the indices between index0 and index1 inclusive.,"

removeSelectionInterval
public void removeSelectionInterval(int index0,
                                    int index1)
Changes the selection to be the set difference of the current selection
 and the indices between index0 and index1 inclusive.
 index0 doesn't have to be less than or equal to index1.
 
 In SINGLE_INTERVAL_SELECTION selection mode, if the removal
 would produce two disjoint selections, the removal is extended through
 the greater end of the selection. For example, if the selection is
 0-10 and you supply indices 5,6 (in any order) the
 resulting selection is 0-4.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
removeSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
DefaultListSelectionModel,setAnchorSelectionIndex(int anchorIndex),void,"Set the anchor selection index, leaving all selection values unchanged.","

setAnchorSelectionIndex
public void setAnchorSelectionIndex(int anchorIndex)
Set the anchor selection index, leaving all selection values unchanged.
 If leadAnchorNotificationEnabled is true, send a notification covering
 the old and new anchor cells.

Specified by:
setAnchorSelectionIndex in interface ListSelectionModel
See Also:
getAnchorSelectionIndex(), 
setLeadSelectionIndex(int)


"
DefaultListSelectionModel,setLeadAnchorNotificationEnabled(boolean flag),void,Sets the value of the leadAnchorNotificationEnabled flag.,"

setLeadAnchorNotificationEnabled
public void setLeadAnchorNotificationEnabled(boolean flag)
Sets the value of the leadAnchorNotificationEnabled flag.

See Also:
isLeadAnchorNotificationEnabled()


"
DefaultListSelectionModel,setLeadSelectionIndex(int leadIndex),void,"Sets the lead selection index, ensuring that values between the anchor and the new lead are either all selected or all deselected.","

setLeadSelectionIndex
public void setLeadSelectionIndex(int leadIndex)
Sets the lead selection index, ensuring that values between the
 anchor and the new lead are either all selected or all deselected.
 If the value at the anchor index is selected, first clear all the
 values in the range [anchor, oldLeadIndex], then select all the values
 values in the range [anchor, newLeadIndex], where oldLeadIndex is the old
 leadIndex and newLeadIndex is the new one.
 
 If the value at the anchor index is not selected, do the same thing in
 reverse selecting values in the old range and deselecting values in the
 new one.
 
 Generate a single event for this change and notify all listeners.
 For the purposes of generating minimal bounds in this event, do the
 operation in a single pass; that way the first and last index inside the
 ListSelectionEvent that is broadcast will refer to cells that actually
 changed value because of this method. If, instead, this operation were
 done in two steps the effect on the selection state would be the same
 but two events would be generated and the bounds around the changed
 values would be wider, including cells that had been first cleared only
 to later be set.
 
 This method can be used in the mouseDragged method
 of a UI class to extend a selection.

Specified by:
setLeadSelectionIndex in interface ListSelectionModel
See Also:
getLeadSelectionIndex(), 
setAnchorSelectionIndex(int)


"
DefaultListSelectionModel,"setSelectionInterval(int index0, int index1)",void,Changes the selection to be between index0 and index1 inclusive.,"

setSelectionInterval
public void setSelectionInterval(int index0,
                                 int index1)
Changes the selection to be between index0 and index1
 inclusive. index0 doesn't have to be less than or equal to
 index1.
 
 In SINGLE_SELECTION selection mode, only the second index
 is used.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
setSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
DefaultListSelectionModel,setSelectionMode(int selectionMode),void,Sets the selection mode.,"

setSelectionMode
public void setSelectionMode(int selectionMode)
Sets the selection mode. The following list describes the accepted
 selection modes:
 
ListSelectionModel.SINGLE_SELECTION -
   Only one list index can be selected at a time. In this mode,
   setSelectionInterval and addSelectionInterval are
   equivalent, both replacing the current selection with the index
   represented by the second argument (the ""lead"").
 ListSelectionModel.SINGLE_INTERVAL_SELECTION -
   Only one contiguous interval can be selected at a time.
   In this mode, addSelectionInterval behaves like
   setSelectionInterval (replacing the current selection),
   unless the given interval is immediately adjacent to or overlaps
   the existing selection, and can therefore be used to grow it.
 ListSelectionModel.MULTIPLE_INTERVAL_SELECTION -
   In this mode, there's no restriction on what can be selected.
 

Specified by:
setSelectionMode in interface ListSelectionModel
Throws:
IllegalArgumentException - if the selection mode isn't
         one of those allowed
See Also:
ListSelectionModel.getSelectionMode()


"
DefaultListSelectionModel,setValueIsAdjusting(boolean isAdjusting),void,"Sets the valueIsAdjusting property, which indicates whether or not upcoming selection changes should be considered part of a single change.","

setValueIsAdjusting
public void setValueIsAdjusting(boolean isAdjusting)
Sets the valueIsAdjusting property, which indicates whether
 or not upcoming selection changes should be considered part of a single
 change. The value of this property is used to initialize the
 valueIsAdjusting property of the ListSelectionEvents that
 are generated.
 
 For example, if the selection is being updated in response to a user
 drag, this property can be set to true when the drag is initiated
 and set to false when the drag is finished. During the drag,
 listeners receive events with a valueIsAdjusting property
 set to true. At the end of the drag, when the change is
 finalized, listeners receive an event with the value set to false.
 Listeners can use this pattern if they wish to update only when a change
 has been finalized.
 
 Setting this property to true begins a series of changes that
 is to be considered part of a single change. When the property is changed
 back to false, an event is sent out characterizing the entire
 selection change (if there was one), with the event's
 valueIsAdjusting property set to false.

Specified by:
setValueIsAdjusting in interface ListSelectionModel
Parameters:
isAdjusting - the new value of the property
See Also:
ListSelectionModel.getValueIsAdjusting(), 
ListSelectionEvent.getValueIsAdjusting()


"
DefaultListSelectionModel,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
DefaultRowSorter,allRowsChanged(),void,Invoked when the contents of the underlying model have completely changed.,"

allRowsChanged
public void allRowsChanged()
Invoked when the contents of the underlying model have
 completely changed. The structure of the table is the same,
 only the contents have changed. This is typically sent when it
 is too expensive to characterize the change in terms of the
 other methods.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
allRowsChanged in class RowSorter<M>


"
DefaultRowSorter,convertRowIndexToModel(int index),int,Returns the location of index in terms of the underlying model.,"

convertRowIndexToModel
public int convertRowIndexToModel(int index)
Returns the location of index in terms of the
 underlying model.  That is, for the row index in
 the coordinates of the view this returns the row index in terms
 of the underlying model.

Specified by:
convertRowIndexToModel in class RowSorter<M>
Parameters:
index - the row index in terms of the underlying view
Returns:
row index in terms of the view
Throws:
IndexOutOfBoundsException - if index is outside the
         range of the view


"
DefaultRowSorter,convertRowIndexToView(int index),int,Returns the location of index in terms of the view.,"

convertRowIndexToView
public int convertRowIndexToView(int index)
Returns the location of index in terms of the
 view.  That is, for the row index in the
 coordinates of the underlying model this returns the row index
 in terms of the view.

Specified by:
convertRowIndexToView in class RowSorter<M>
Parameters:
index - the row index in terms of the underlying model
Returns:
row index in terms of the view, or -1 if index has been
         filtered out of the view
Throws:
IndexOutOfBoundsException - if index is outside
         the range of the model


"
DefaultRowSorter,getComparator(int column),Comparator<?>,Returns the Comparator for the specified column.,"

getComparator
public Comparator<?> getComparator(int column)
Returns the Comparator for the specified
 column.  This will return null if a Comparator
 has not been specified for the column.

Parameters:
column - the column to fetch the Comparator for, in
        terms of the underlying model
Returns:
the Comparator for the specified column
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the underlying model


"
DefaultRowSorter,getMaxSortKeys(),int,Returns the maximum number of sort keys.,"

getMaxSortKeys
public int getMaxSortKeys()
Returns the maximum number of sort keys.

Returns:
the maximum number of sort keys


"
DefaultRowSorter,getModel(),M,Returns the underlying model.,"

getModel
public final M getModel()
Returns the underlying model.

Specified by:
getModel in class RowSorter<M>
Returns:
the underlying model


"
DefaultRowSorter,getModelRowCount(),int,Returns the number of rows in the underlying model.,"

getModelRowCount
public int getModelRowCount()
Returns the number of rows in the underlying model.

Specified by:
getModelRowCount in class RowSorter<M>
Returns:
number of rows in the underlying model
See Also:
RowSorter.getViewRowCount()


"
DefaultRowSorter,getModelWrapper(),"protected DefaultRowSorter.ModelWrapper<M,I>",Returns the model wrapper providing the data that is being sorted and filtered.,"

getModelWrapper
protected final DefaultRowSorter.ModelWrapper<M,I> getModelWrapper()
Returns the model wrapper providing the data that is being sorted and
 filtered.

Returns:
the model wrapper responsible for providing the data that
         gets sorted and filtered


"
DefaultRowSorter,getRowFilter(),"RowFilter<? super M,? super I>","Returns the filter that determines which rows, if any, should be hidden from view.","

getRowFilter
public RowFilter<? super M,? super I> getRowFilter()
Returns the filter that determines which rows, if any, should
 be hidden from view.

Returns:
the filter


"
DefaultRowSorter,getSortKeys(),List<? extends RowSorter.SortKey>,Returns the current sort keys.,"

getSortKeys
public List<? extends RowSorter.SortKey> getSortKeys()
Returns the current sort keys.  This returns an unmodifiable
 non-null List. If you need to change the sort keys,
 make a copy of the returned List, mutate the copy
 and invoke setSortKeys with the new list.

Specified by:
getSortKeys in class RowSorter<M>
Returns:
the current sort order


"
DefaultRowSorter,getSortsOnUpdates(),boolean,"Returns true if a sort should happen when the underlying model is updated; otherwise, returns false.","

getSortsOnUpdates
public boolean getSortsOnUpdates()
Returns true if  a sort should happen when the underlying
 model is updated; otherwise, returns false.

Returns:
whether or not to sort when the model is updated


"
DefaultRowSorter,getViewRowCount(),int,Returns the number of rows in the view.,"

getViewRowCount
public int getViewRowCount()
Returns the number of rows in the view.  If the contents have
 been filtered this might differ from the row count of the
 underlying model.

Specified by:
getViewRowCount in class RowSorter<M>
Returns:
number of rows in the view
See Also:
RowSorter.getModelRowCount()


"
DefaultRowSorter,isSortable(int column),boolean,"Returns true if the specified column is sortable; otherwise, false.","

isSortable
public boolean isSortable(int column)
Returns true if the specified column is sortable; otherwise, false.

Parameters:
column - the column to check sorting for, in terms of the
        underlying model
Returns:
true if the column is sortable
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the underlying model


"
DefaultRowSorter,modelStructureChanged(),void,Invoked when the underlying model structure has completely changed.,"

modelStructureChanged
public void modelStructureChanged()
Invoked when the underlying model structure has completely
 changed.  For example, if the number of columns in a
 TableModel changed, this method would be invoked.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
modelStructureChanged in class RowSorter<M>


"
DefaultRowSorter,"rowsDeleted(int firstRow, int endRow)",void,Invoked when rows have been deleted from the underlying model in the specified range (inclusive).,"

rowsDeleted
public void rowsDeleted(int firstRow,
                        int endRow)
Invoked when rows have been deleted from the underlying model
 in the specified range (inclusive).
 
 The arguments give the indices of the effected range and
 are in terms of the model before the change.
 For example, if you have a 5-row model and delete 3 items from the end
 of the model the indices are 2, 4.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
rowsDeleted in class RowSorter<M>
Parameters:
firstRow - the first row
endRow - the last row
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the model before the change, or
         firstRow > endRow


"
DefaultRowSorter,"rowsInserted(int firstRow, int endRow)",void,Invoked when rows have been inserted into the underlying model in the specified range (inclusive).,"

rowsInserted
public void rowsInserted(int firstRow,
                         int endRow)
Invoked when rows have been inserted into the underlying model
 in the specified range (inclusive).
 
 The arguments give the indices of the effected range.
 The first argument is in terms of the model before the change, and
 must be less than or equal to the size of the model before the change.
 The second argument is in terms of the model after the change and must
 be less than the size of the model after the change. For example,
 if you have a 5-row model and add 3 items to the end of the model
 the indices are 5, 7.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
rowsInserted in class RowSorter<M>
Parameters:
firstRow - the first row
endRow - the last row
Throws:
IndexOutOfBoundsException - if either argument is invalid, or
         firstRow > endRow


"
DefaultRowSorter,"rowsUpdated(int firstRow, int endRow)",void,Invoked when rows have been changed in the underlying model between the specified range (inclusive).,"

rowsUpdated
public void rowsUpdated(int firstRow,
                        int endRow)
Invoked when rows have been changed in the underlying model
 between the specified range (inclusive).
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
rowsUpdated in class RowSorter<M>
Parameters:
firstRow - the first row, in terms of the underlying model
endRow - the last row, in terms of the underlying model
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the underlying model, or
         firstRow > endRow


"
DefaultRowSorter,"rowsUpdated(int firstRow, int endRow, int column)",void,Invoked when the column in the rows have been updated in the underlying model between the specified range.,"

rowsUpdated
public void rowsUpdated(int firstRow,
                        int endRow,
                        int column)
Invoked when the column in the rows have been updated in
 the underlying model between the specified range.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Specified by:
rowsUpdated in class RowSorter<M>
Parameters:
firstRow - the first row, in terms of the underlying model
endRow - the last row, in terms of the underlying model
column - the column that has changed, in terms of the underlying
        model
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the underlying model after the change,
         firstRow > endRow, or
         column is outside the range of the underlying
          model


"
DefaultRowSorter,"setComparator(int column, Comparator<?> comparator)",void,Sets the Comparator to use when sorting the specified column.,"

setComparator
public void setComparator(int column,
                          Comparator<?> comparator)
Sets the Comparator to use when sorting the specified
 column.  This does not trigger a sort.  If you want to sort after
 setting the comparator you need to explicitly invoke sort.

Parameters:
column - the index of the column the Comparator is
        to be used for, in terms of the underlying model
comparator - the Comparator to use
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the underlying model


"
DefaultRowSorter,setMaxSortKeys(int max),void,Sets the maximum number of sort keys.,"

setMaxSortKeys
public void setMaxSortKeys(int max)
Sets the maximum number of sort keys.  The number of sort keys
 determines how equal values are resolved when sorting.  For
 example, assume a table row sorter is created and
 setMaxSortKeys(2) is invoked on it. The user
 clicks the header for column 1, causing the table rows to be
 sorted based on the items in column 1.  Next, the user clicks
 the header for column 2, causing the table to be sorted based
 on the items in column 2; if any items in column 2 are equal,
 then those particular rows are ordered based on the items in
 column 1. In this case, we say that the rows are primarily
 sorted on column 2, and secondarily on column 1.  If the user
 then clicks the header for column 3, then the items are
 primarily sorted on column 3 and secondarily sorted on column
 2.  Because the maximum number of sort keys has been set to 2
 with setMaxSortKeys, column 1 no longer has an
 effect on the order.
 
 The maximum number of sort keys is enforced by
 toggleSortOrder.  You can specify more sort
 keys by invoking setSortKeys directly and they will
 all be honored.  However if toggleSortOrder is subsequently
 invoked the maximum number of sort keys will be enforced.
 The default value is 3.

Parameters:
max - the maximum number of sort keys
Throws:
IllegalArgumentException - if max < 1


"
DefaultRowSorter,"setModelWrapper(DefaultRowSorter.ModelWrapper<M,I> modelWrapper)",protected void,Sets the model wrapper providing the data that is being sorted and filtered.,"

setModelWrapper
protected final void setModelWrapper(DefaultRowSorter.ModelWrapper<M,I> modelWrapper)
Sets the model wrapper providing the data that is being sorted and
 filtered.

Parameters:
modelWrapper - the model wrapper responsible for providing the
         data that gets sorted and filtered
Throws:
IllegalArgumentException - if modelWrapper is
         null


"
DefaultRowSorter,"setRowFilter(RowFilter<? super M,? super I> filter)",void,"Sets the filter that determines which rows, if any, should be hidden from the view.","

setRowFilter
public void setRowFilter(RowFilter<? super M,? super I> filter)
Sets the filter that determines which rows, if any, should be
 hidden from the view.  The filter is applied before sorting.  A value
 of null indicates all values from the model should be
 included.
 
RowFilter's include method is passed an
 Entry that wraps the underlying model.  The number
 of columns in the Entry corresponds to the
 number of columns in the ModelWrapper.  The identifier
 comes from the ModelWrapper as well.
 
 This method triggers a sort.

Parameters:
filter - the filter used to determine what entries should be
        included


"
DefaultRowSorter,"setSortable(int column, boolean sortable)",void,Sets whether or not the specified column is sortable.,"

setSortable
public void setSortable(int column,
                        boolean sortable)
Sets whether or not the specified column is sortable.  The specified
 value is only checked when toggleSortOrder is invoked.
 It is still possible to sort on a column that has been marked as
 unsortable by directly setting the sort keys.  The default is
 true.

Parameters:
column - the column to enable or disable sorting on, in terms
        of the underlying model
sortable - whether or not the specified column is sortable
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the model
See Also:
toggleSortOrder(int), 
setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>)


"
DefaultRowSorter,setSortKeys(List<? extends RowSorter.SortKey> sortKeys),void,Sets the sort keys.,"

setSortKeys
public void setSortKeys(List<? extends RowSorter.SortKey> sortKeys)
Sets the sort keys. This creates a copy of the supplied
 List; subsequent changes to the supplied
 List do not effect this DefaultRowSorter.
 If the sort keys have changed this triggers a sort.

Specified by:
setSortKeys in class RowSorter<M>
Parameters:
sortKeys - the new SortKeys; null
        is a shorthand for specifying an empty list,
        indicating that the view should be unsorted
Throws:
IllegalArgumentException - if any of the values in
         sortKeys are null or have a column index outside
         the range of the model


"
DefaultRowSorter,setSortsOnUpdates(boolean sortsOnUpdates),void,"If true, specifies that a sort should happen when the underlying model is updated (rowsUpdated is invoked).","

setSortsOnUpdates
public void setSortsOnUpdates(boolean sortsOnUpdates)
If true, specifies that a sort should happen when the underlying
 model is updated (rowsUpdated is invoked).  For
 example, if this is true and the user edits an entry the
 location of that item in the view may change.  The default is
 false.

Parameters:
sortsOnUpdates - whether or not to sort on update events


"
DefaultRowSorter,sort(),void,"Sorts and filters the rows in the view based on the sort keys of the columns currently being sorted and the filter, if any, associated with this sorter.","

sort
public void sort()
Sorts and filters the rows in the view based on the sort keys
 of the columns currently being sorted and the filter, if any,
 associated with this sorter.  An empty sortKeys list
 indicates that the view should unsorted, the same as the model.

See Also:
setRowFilter(javax.swing.RowFilter<? super M, ? super I>), 
setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>)


"
DefaultRowSorter,toggleSortOrder(int column),void,"Reverses the sort order from ascending to descending (or descending to ascending) if the specified column is already the primary sorted column; otherwise, makes the specified column the primary sorted column, with an ascending sort order.","

toggleSortOrder
public void toggleSortOrder(int column)
Reverses the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.  If
 the specified column is not sortable, this method has no
 effect.

Specified by:
toggleSortOrder in class RowSorter<M>
Parameters:
column - index of the column to make the primary sorted column,
        in terms of the underlying model
Throws:
IndexOutOfBoundsException - if column is outside the range of
         the underlying model
See Also:
setSortable(int,boolean), 
setMaxSortKeys(int)


"
DefaultRowSorter,useToString(int column),protected boolean,Returns whether or not to convert the value to a string before doing comparisons when sorting.,"

useToString
protected boolean useToString(int column)
Returns whether or not to convert the value to a string before
 doing comparisons when sorting.  If true
 ModelWrapper.getStringValueAt will be used, otherwise
 ModelWrapper.getValueAt will be used.  It is up to
 subclasses, such as TableRowSorter, to honor this value
 in their ModelWrapper implementation.

Parameters:
column - the index of the column to test, in terms of the
        underlying model
Throws:
IndexOutOfBoundsException - if column is not valid


"
DefaultRowSorter.ModelWrapper,getColumnCount(),abstract int,Returns the number of columns in the model.,"

getColumnCount
public abstract int getColumnCount()
Returns the number of columns in the model.

Returns:
the number of columns in the model


"
DefaultRowSorter.ModelWrapper,getIdentifier(int row),abstract I,Returns the identifier for the specified row.,"

getIdentifier
public abstract I getIdentifier(int row)
Returns the identifier for the specified row.  The return value
 of this is used as the identifier for the
 RowFilter.Entry that is passed to the
 RowFilter.

Parameters:
row - the row to return the identifier for, in terms of
            the underlying model
Returns:
the identifier
See Also:
RowFilter.Entry.getIdentifier()


"
DefaultRowSorter.ModelWrapper,getModel(),abstract M,Returns the underlying model that this Model is wrapping.,"

getModel
public abstract M getModel()
Returns the underlying model that this Model is
 wrapping.

Returns:
the underlying model


"
DefaultRowSorter.ModelWrapper,getRowCount(),abstract int,Returns the number of rows in the model.,"

getRowCount
public abstract int getRowCount()
Returns the number of rows in the model.

Returns:
the number of rows in the model


"
DefaultRowSorter.ModelWrapper,"getStringValueAt(int row, int column)",String,Returns the value as a String at the specified index.,"

getStringValueAt
public String getStringValueAt(int row,
                               int column)
Returns the value as a String at the specified
 index.  This implementation uses toString on
 the result from getValueAt (making sure
 to return an empty string for null values).  Subclasses that
 override this method should never return null.

Parameters:
row - the row index
column - the column index
Returns:
the value at the specified index as a String
Throws:
IndexOutOfBoundsException - if the indices are outside
         the range of the model


"
DefaultRowSorter.ModelWrapper,"getValueAt(int row, int column)",abstract Object,Returns the value at the specified index.,"

getValueAt
public abstract Object getValueAt(int row,
                                  int column)
Returns the value at the specified index.

Parameters:
row - the row index
column - the column index
Returns:
the value at the specified index
Throws:
IndexOutOfBoundsException - if the indices are outside
         the range of the model


"
DefaultSingleSelectionModel,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the button.

Specified by:
addChangeListener in interface SingleSelectionModel
Parameters:
l - the ChangeListener to add


"
DefaultSingleSelectionModel,clearSelection(),void,Clears the selection (to -1).,"

clearSelection
public void clearSelection()
Description copied from interface: SingleSelectionModel
Clears the selection (to -1).

Specified by:
clearSelection in interface SingleSelectionModel


"
DefaultSingleSelectionModel,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireStateChanged
protected void fireStateChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

See Also:
EventListenerList


"
DefaultSingleSelectionModel,getChangeListeners(),ChangeListener[],Returns an array of all the change listeners registered on this DefaultSingleSelectionModel.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the change listeners
 registered on this DefaultSingleSelectionModel.

Returns:
all of this model's ChangeListeners
         or an empty
         array if no change listeners are currently registered
Since:
1.4
See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener)


"
DefaultSingleSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this model.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a DefaultSingleSelectionModel
 instance m
 for its change listeners
 with the following code:

 ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this model,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getChangeListeners()


"
DefaultSingleSelectionModel,getSelectedIndex(),int,Returns the model's selection.,"

getSelectedIndex
public int getSelectedIndex()
Description copied from interface: SingleSelectionModel
Returns the model's selection.

Specified by:
getSelectedIndex in interface SingleSelectionModel
Returns:
the model's selection, or -1 if there is no selection
See Also:
SingleSelectionModel.setSelectedIndex(int)


"
DefaultSingleSelectionModel,isSelected(),boolean,Returns true if the selection model currently has a selected value.,"

isSelected
public boolean isSelected()
Description copied from interface: SingleSelectionModel
Returns true if the selection model currently has a selected value.

Specified by:
isSelected in interface SingleSelectionModel
Returns:
true if a value is currently selected


"
DefaultSingleSelectionModel,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the button.

Specified by:
removeChangeListener in interface SingleSelectionModel
Parameters:
l - the ChangeListener to remove


"
DefaultSingleSelectionModel,setSelectedIndex(int index),void,Sets the model's selected index to index.,"

setSelectedIndex
public void setSelectedIndex(int index)
Description copied from interface: SingleSelectionModel
Sets the model's selected index to index.

 Notifies any listeners if the model changes

Specified by:
setSelectedIndex in interface SingleSelectionModel
Parameters:
index - an int specifying the model selection
See Also:
SingleSelectionModel.getSelectedIndex(), 
SingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener)


"
FocusManager,disableSwingFocusManager(),static void,"Deprecated. as of 1.4, replaced by KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)","

disableSwingFocusManager
@Deprecated
public static void disableSwingFocusManager()
Deprecated. as of 1.4, replaced by
 KeyboardFocusManager.setDefaultFocusTraversalPolicy(FocusTraversalPolicy)
Changes the current KeyboardFocusManager's default
 FocusTraversalPolicy to
 DefaultFocusTraversalPolicy.

See Also:
DefaultFocusTraversalPolicy, 
KeyboardFocusManager.setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy)


"
FocusManager,getCurrentManager(),static FocusManager,Returns the current KeyboardFocusManager instance for the calling thread's context.,"

getCurrentManager
public static FocusManager getCurrentManager()
Returns the current KeyboardFocusManager instance
 for the calling thread's context.

Returns:
this thread's context's KeyboardFocusManager
See Also:
setCurrentManager(javax.swing.FocusManager)


"
FocusManager,isFocusManagerEnabled(),static boolean,"Deprecated. As of 1.4, replaced by KeyboardFocusManager.getDefaultFocusTraversalPolicy()","

isFocusManagerEnabled
@Deprecated
public static boolean isFocusManagerEnabled()
Deprecated. As of 1.4, replaced by
   KeyboardFocusManager.getDefaultFocusTraversalPolicy()
Returns whether the application has invoked
 disableSwingFocusManager().

See Also:
disableSwingFocusManager()


"
FocusManager,setCurrentManager(FocusManager aFocusManager),static void,Sets the current KeyboardFocusManager instance for the calling thread's context.,"

setCurrentManager
public static void setCurrentManager(FocusManager aFocusManager)
                              throws SecurityException
Sets the current KeyboardFocusManager instance
 for the calling thread's context. If null is
 specified, then the current KeyboardFocusManager
 is replaced with a new instance of
 DefaultKeyboardFocusManager.
 
 If a SecurityManager is installed,
 the calling thread must be granted the AWTPermission
 ""replaceKeyboardFocusManager"" in order to replace the
 the current KeyboardFocusManager.
 If this permission is not granted,
 this method will throw a SecurityException,
 and the current KeyboardFocusManager will be unchanged.

Parameters:
aFocusManager - the new KeyboardFocusManager
     for this thread's context
Throws:
SecurityException - if the calling thread does not have permission
         to replace the current KeyboardFocusManager
See Also:
getCurrentManager(), 
DefaultKeyboardFocusManager


"
GrayFilter,createDisabledImage(Image i),static Image,Creates a disabled image,"

createDisabledImage
public static Image createDisabledImage(Image i)
Creates a disabled image

"
GrayFilter,"filterRGB(int x, int y, int rgb)",int,Overrides RGBImageFilter.filterRGB.,"

filterRGB
public int filterRGB(int x,
                     int y,
                     int rgb)
Overrides RGBImageFilter.filterRGB.

Specified by:
filterRGB in class RGBImageFilter
Parameters:
x - the X coordinate of the pixel
y - the Y coordinate of the pixel
rgb - the integer pixel representation in the default RGB
            color model
Returns:
a filtered pixel in the default RGB color model.
See Also:
ColorModel.getRGBdefault(), 
RGBImageFilter.filterRGBPixels(int, int, int, int, int[], int, int)


"
GroupLayout,"addLayoutComponent(Component component, Object constraints)",void,Notification that a Component has been added to the parent container.,"

addLayoutComponent
public void addLayoutComponent(Component component,
                               Object constraints)
Notification that a Component has been added to
 the parent container.  You should not invoke this method
 directly, instead you should use one of the Group
 methods to add a Component.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
component - the component added
constraints - description of where to place the component


"
GroupLayout,"addLayoutComponent(String name, Component component)",void,Notification that a Component has been added to the parent container.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component component)
Notification that a Component has been added to
 the parent container.  You should not invoke this method
 directly, instead you should use one of the Group
 methods to add a Component.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the string to be associated with the component
component - the Component to be added


"
GroupLayout,"createBaselineGroup(boolean resizable, boolean anchorBaselineToTop)",GroupLayout.ParallelGroup,Creates and returns a ParallelGroup that aligns it's elements along the baseline.,"

createBaselineGroup
public GroupLayout.ParallelGroup createBaselineGroup(boolean resizable,
                                                     boolean anchorBaselineToTop)
Creates and returns a ParallelGroup that aligns it's
 elements along the baseline.

Parameters:
resizable - whether the group is resizable
anchorBaselineToTop - whether the baseline is anchored to
        the top or bottom of the group
See Also:
createBaselineGroup(boolean, boolean), 
GroupLayout.ParallelGroup


"
GroupLayout,createParallelGroup(),GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with an alignment of Alignment.LEADING.,"

createParallelGroup
public GroupLayout.ParallelGroup createParallelGroup()
Creates and returns a ParallelGroup with an alignment of
 Alignment.LEADING.  This is a cover method for the more
 general createParallelGroup(Alignment) method.

Returns:
a new ParallelGroup
See Also:
createParallelGroup(Alignment)


"
GroupLayout,createParallelGroup(GroupLayout.Alignment alignment),GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with the specified alignment.,"

createParallelGroup
public GroupLayout.ParallelGroup createParallelGroup(GroupLayout.Alignment alignment)
Creates and returns a ParallelGroup with the specified
 alignment.  This is a cover method for the more general createParallelGroup(Alignment,boolean) method with true
 supplied for the second argument.

Parameters:
alignment - the alignment for the elements of the group
Returns:
a new ParallelGroup
Throws:
IllegalArgumentException - if alignment is null
See Also:
createBaselineGroup(boolean, boolean), 
GroupLayout.ParallelGroup


"
GroupLayout,"createParallelGroup(GroupLayout.Alignment alignment, boolean resizable)",GroupLayout.ParallelGroup,Creates and returns a ParallelGroup with the specified alignment and resize behavior.,"

createParallelGroup
public GroupLayout.ParallelGroup createParallelGroup(GroupLayout.Alignment alignment,
                                                     boolean resizable)
Creates and returns a ParallelGroup with the specified
 alignment and resize behavior. The alignment argument specifies how children elements are
 positioned that do not fill the group. For example, if a ParallelGroup with an alignment of TRAILING is given
 100 and a child only needs 50, the child is
 positioned at the position 50 (with a component orientation of
 left-to-right).
 
 Baseline alignment is only useful when used along the vertical
 axis. A ParallelGroup created with a baseline alignment
 along the horizontal axis is treated as LEADING.
 
 Refer to ParallelGroup for details on
 the behavior of baseline groups.

Parameters:
alignment - the alignment for the elements of the group
resizable - true if the group is resizable; if the group
        is not resizable the preferred size is used for the
        minimum and maximum size of the group
Returns:
a new ParallelGroup
Throws:
IllegalArgumentException - if alignment is null
See Also:
createBaselineGroup(boolean, boolean), 
GroupLayout.ParallelGroup


"
GroupLayout,createSequentialGroup(),GroupLayout.SequentialGroup,Creates and returns a SequentialGroup.,"

createSequentialGroup
public GroupLayout.SequentialGroup createSequentialGroup()
Creates and returns a SequentialGroup.

Returns:
a new SequentialGroup


"
GroupLayout,getAutoCreateContainerGaps(),boolean,Returns true if gaps between the container and components that border the container are automatically created.,"

getAutoCreateContainerGaps
public boolean getAutoCreateContainerGaps()
Returns true if gaps between the container and components that
 border the container are automatically created.

Returns:
true if gaps between the container and components that
         border the container are automatically created


"
GroupLayout,getAutoCreateGaps(),boolean,Returns true if gaps between components are automatically created.,"

getAutoCreateGaps
public boolean getAutoCreateGaps()
Returns true if gaps between components are automatically
 created.

Returns:
true if gaps between components are automatically
         created


"
GroupLayout,getHonorsVisibility(),boolean,Returns whether component visibility is considered when sizing and positioning components.,"

getHonorsVisibility
public boolean getHonorsVisibility()
Returns whether component visibility is considered when sizing and
 positioning components.

Returns:
whether component visibility is considered when sizing and
         positioning components


"
GroupLayout,getLayoutAlignmentX(Container parent),float,Returns the alignment along the x axis.,"

getLayoutAlignmentX
public float getLayoutAlignmentX(Container parent)
Returns the alignment along the x axis.  This specifies how
 the component would like to be aligned relative to other
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

Specified by:
getLayoutAlignmentX in interface LayoutManager2
Parameters:
parent - the Container hosting this LayoutManager
Returns:
the alignment; this implementation returns .5
Throws:
IllegalArgumentException - if parent is not
         the same Container that this was created with


"
GroupLayout,getLayoutAlignmentY(Container parent),float,Returns the alignment along the y axis.,"

getLayoutAlignmentY
public float getLayoutAlignmentY(Container parent)
Returns the alignment along the y axis.  This specifies how
 the component would like to be aligned relative to other
 components.  The value should be a number between 0 and 1
 where 0 represents alignment along the origin, 1 is aligned
 the furthest away from the origin, 0.5 is centered, etc.

Specified by:
getLayoutAlignmentY in interface LayoutManager2
Parameters:
parent - the Container hosting this LayoutManager
Returns:
alignment; this implementation returns .5
Throws:
IllegalArgumentException - if parent is not
         the same Container that this was created with


"
GroupLayout,getLayoutStyle(),LayoutStyle,Returns the LayoutStyle used for calculating the preferred gap between components.,"

getLayoutStyle
public LayoutStyle getLayoutStyle()
Returns the LayoutStyle used for calculating the preferred
 gap between components. This returns the value specified to
 setLayoutStyle, which may be null.

Returns:
the LayoutStyle used for calculating the preferred
         gap between components


"
GroupLayout,invalidateLayout(Container parent),void,"Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.","

invalidateLayout
public void invalidateLayout(Container parent)
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.

Specified by:
invalidateLayout in interface LayoutManager2
Parameters:
parent - the Container hosting this LayoutManager
Throws:
IllegalArgumentException - if parent is not
         the same Container that this was created with


"
GroupLayout,layoutContainer(Container parent),void,Lays out the specified container.,"

layoutContainer
public void layoutContainer(Container parent)
Lays out the specified container.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container to be laid out
Throws:
IllegalStateException - if any of the components added to
         this layout are not in both a horizontal and vertical group


"
GroupLayout,linkSize(Component... components),void,"Forces the specified components to have the same size regardless of their preferred, minimum or maximum sizes.","

linkSize
public void linkSize(Component... components)
Forces the specified components to have the same size
 regardless of their preferred, minimum or maximum sizes. Components that
 are linked are given the maximum of the preferred size of each of
 the linked components. For example, if you link two components with
 a preferred width of 10 and 20, both components are given a width of 20.
 
 This can be used multiple times to force any number of
 components to share the same size.
 
 Linked Components are not be resizable.

Parameters:
components - the Components that are to have the same size
Throws:
IllegalArgumentException - if components is
         null, or contains null
See Also:
linkSize(int,Component[])


"
GroupLayout,"linkSize(int axis, Component... components)",void,"Forces the specified components to have the same size along the specified axis regardless of their preferred, minimum or maximum sizes.","

linkSize
public void linkSize(int axis,
                     Component... components)
Forces the specified components to have the same size along the
 specified axis regardless of their preferred, minimum or
 maximum sizes. Components that are linked are given the maximum
 of the preferred size of each of the linked components. For
 example, if you link two components along the horizontal axis
 and the preferred width is 10 and 20, both components are given
 a width of 20.
 
 This can be used multiple times to force any number of
 components to share the same size.
 
 Linked Components are not be resizable.

Parameters:
components - the Components that are to have the same size
axis - the axis to link the size along; one of
             SwingConstants.HORIZONTAL or
             SwingConstans.VERTICAL
Throws:
IllegalArgumentException - if components is
         null, or contains null; or axis
          is not SwingConstants.HORIZONTAL or
          SwingConstants.VERTICAL


"
GroupLayout,maximumLayoutSize(Container parent),Dimension,Returns the maximum size for the specified container.,"

maximumLayoutSize
public Dimension maximumLayoutSize(Container parent)
Returns the maximum size for the specified container.

Specified by:
maximumLayoutSize in interface LayoutManager2
Parameters:
parent - the container to return the size for
Returns:
the maximum size for parent
Throws:
IllegalArgumentException - if parent is not
         the same Container that this was created with
IllegalStateException - if any of the components added to
         this layout are not in both a horizontal and vertical group
See Also:
Container.getMaximumSize()


"
GroupLayout,minimumLayoutSize(Container parent),Dimension,Returns the minimum size for the specified container.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
Returns the minimum size for the specified container.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the container to return the size for
Returns:
the minimum size for parent
Throws:
IllegalArgumentException - if parent is not
         the same Container that this was created with
IllegalStateException - if any of the components added to
         this layout are not in both a horizontal and vertical group
See Also:
Container.getMinimumSize()


"
GroupLayout,preferredLayoutSize(Container parent),Dimension,Returns the preferred size for the specified container.,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
Returns the preferred size for the specified container.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the container to return the preferred size for
Returns:
the preferred size for parent
Throws:
IllegalArgumentException - if parent is not
         the same Container this was created with
IllegalStateException - if any of the components added to
         this layout are not in both a horizontal and vertical group
See Also:
Container.getPreferredSize()


"
GroupLayout,removeLayoutComponent(Component component),void,Notification that a Component has been removed from the parent container.,"

removeLayoutComponent
public void removeLayoutComponent(Component component)
Notification that a Component has been removed from
 the parent container.  You should not invoke this method
 directly, instead invoke remove on the parent
 Container.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
component - the component to be removed
See Also:
Component.remove(java.awt.MenuComponent)


"
GroupLayout,"replace(Component existingComponent, Component newComponent)",void,Replaces an existing component with a new one.,"

replace
public void replace(Component existingComponent,
                    Component newComponent)
Replaces an existing component with a new one.

Parameters:
existingComponent - the component that should be removed
        and replaced with newComponent
newComponent - the component to put in
        existingComponent's place
Throws:
IllegalArgumentException - if either of the components are
         null or existingComponent is not being managed
         by this layout manager


"
GroupLayout,setAutoCreateContainerGaps(boolean autoCreateContainerPadding),void,Sets whether a gap between the container and components that touch the border of the container should automatically be created.,"

setAutoCreateContainerGaps
public void setAutoCreateContainerGaps(boolean autoCreateContainerPadding)
Sets whether a gap between the container and components that
 touch the border of the container should automatically be
 created. The default is false.

Parameters:
autoCreateContainerPadding - whether a gap between the container and
        components that touch the border of the container should
        automatically be created


"
GroupLayout,setAutoCreateGaps(boolean autoCreatePadding),void,Sets whether a gap between components should automatically be created.,"

setAutoCreateGaps
public void setAutoCreateGaps(boolean autoCreatePadding)
Sets whether a gap between components should automatically be
 created.  For example, if this is true and you add two
 components to a SequentialGroup a gap between the
 two components is automatically be created.  The default is
 false.

Parameters:
autoCreatePadding - whether a gap between components is
        automatically created


"
GroupLayout,setHonorsVisibility(boolean honorsVisibility),void,Sets whether component visibility is considered when sizing and positioning components.,"

setHonorsVisibility
public void setHonorsVisibility(boolean honorsVisibility)
Sets whether component visibility is considered when sizing and
 positioning components. A value of true indicates that
 non-visible components should not be treated as part of the
 layout. A value of false indicates that components should be
 positioned and sized regardless of visibility.
 
 A value of false is useful when the visibility of components
 is dynamically adjusted and you don't want surrounding components and
 the sizing to change.
 
 The specified value is used for components that do not have an
 explicit visibility specified.
 
 The default is true.

Parameters:
honorsVisibility - whether component visibility is considered when
                         sizing and positioning components
See Also:
setHonorsVisibility(Component,Boolean)


"
GroupLayout,"setHonorsVisibility(Component component, Boolean honorsVisibility)",void,Sets whether the component's visibility is considered for sizing and positioning.,"

setHonorsVisibility
public void setHonorsVisibility(Component component,
                                Boolean honorsVisibility)
Sets whether the component's visibility is considered for
 sizing and positioning. A value of Boolean.TRUE
 indicates that if component is not visible it should
 not be treated as part of the layout. A value of false
 indicates that component is positioned and sized
 regardless of it's visibility.  A value of null
 indicates the value specified by the single argument method setHonorsVisibility should be used.
 
 If component is not a child of the Container this
 GroupLayout is managing, it will be added to the
 Container.

Parameters:
component - the component
honorsVisibility - whether visibility of this component should be
              considered for sizing and positioning
Throws:
IllegalArgumentException - if component is null
See Also:
setHonorsVisibility(Component,Boolean)


"
GroupLayout,setHorizontalGroup(GroupLayout.Group group),void,Sets the Group that positions and sizes components along the horizontal axis.,"

setHorizontalGroup
public void setHorizontalGroup(GroupLayout.Group group)
Sets the Group that positions and sizes
 components along the horizontal axis.

Parameters:
group - the Group that positions and sizes
        components along the horizontal axis
Throws:
IllegalArgumentException - if group is null


"
GroupLayout,setLayoutStyle(LayoutStyle layoutStyle),void,Sets the LayoutStyle used to calculate the preferred gaps between components.,"

setLayoutStyle
public void setLayoutStyle(LayoutStyle layoutStyle)
Sets the LayoutStyle used to calculate the preferred
 gaps between components. A value of null indicates the
 shared instance of LayoutStyle should be used.

Parameters:
layoutStyle - the LayoutStyle to use
See Also:
LayoutStyle


"
GroupLayout,setVerticalGroup(GroupLayout.Group group),void,Sets the Group that positions and sizes components along the vertical axis.,"

setVerticalGroup
public void setVerticalGroup(GroupLayout.Group group)
Sets the Group that positions and sizes
 components along the vertical axis.

Parameters:
group - the Group that positions and sizes
        components along the vertical axis
Throws:
IllegalArgumentException - if group is null


"
GroupLayout,toString(),String,Returns a string representation of this GroupLayout.,"

toString
public String toString()
Returns a string representation of this GroupLayout.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class Object
Returns:
a string representation of this GroupLayout


"
ImageIcon,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this ImageIcon.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this ImageIcon.
 For image icons, the AccessibleContext takes the form of an
 AccessibleImageIcon.
 A new AccessibleImageIcon instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Returns:
an AccessibleImageIcon that serves as the
         AccessibleContext of this ImageIcon
Since:
1.3


"
ImageIcon,getDescription(),String,Gets the description of the image.,"

getDescription
public String getDescription()
Gets the description of the image.  This is meant to be a brief
 textual description of the object.  For example, it might be
 presented to a blind user to give an indication of the purpose
 of the image.
 The description may be null.

Returns:
a brief textual description of the image


"
ImageIcon,getIconHeight(),int,Gets the height of the icon.,"

getIconHeight
public int getIconHeight()
Gets the height of the icon.

Specified by:
getIconHeight in interface Icon
Returns:
the height in pixels of this icon


"
ImageIcon,getIconWidth(),int,Gets the width of the icon.,"

getIconWidth
public int getIconWidth()
Gets the width of the icon.

Specified by:
getIconWidth in interface Icon
Returns:
the width in pixels of this icon


"
ImageIcon,getImage(),Image,Returns this icon's Image.,"

getImage
public Image getImage()
Returns this icon's Image.

Returns:
the Image object for this ImageIcon


"
ImageIcon,getImageLoadStatus(),int,Returns the status of the image loading operation.,"

getImageLoadStatus
public int getImageLoadStatus()
Returns the status of the image loading operation.

Returns:
the loading status as defined by java.awt.MediaTracker
See Also:
MediaTracker.ABORTED, 
MediaTracker.ERRORED, 
MediaTracker.COMPLETE


"
ImageIcon,getImageObserver(),ImageObserver,Returns the image observer for the image.,"

getImageObserver
public ImageObserver getImageObserver()
Returns the image observer for the image.

Returns:
the image observer, which may be null


"
ImageIcon,loadImage(Image image),protected void,"Loads the image, returning only when the image is loaded.","

loadImage
protected void loadImage(Image image)
Loads the image, returning only when the image is loaded.

Parameters:
image - the image


"
ImageIcon,"paintIcon(Component c, Graphics g, int x, int y)",void,Paints the icon.,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Paints the icon.
 The top-left corner of the icon is drawn at
 the point (x, y)
 in the coordinate space of the graphics context g.
 If this icon has no image observer,
 this method uses the c component
 as the observer.

Specified by:
paintIcon in interface Icon
Parameters:
c - the component to be used as the observer
          if this icon has no image observer
g - the graphics context
x - the X coordinate of the icon's top-left corner
y - the Y coordinate of the icon's top-left corner


"
ImageIcon,setDescription(String description),void,Sets the description of the image.,"

setDescription
public void setDescription(String description)
Sets the description of the image.  This is meant to be a brief
 textual description of the object.  For example, it might be
 presented to a blind user to give an indication of the purpose
 of the image.

Parameters:
description - a brief textual description of the image


"
ImageIcon,setImage(Image image),void,Sets the image displayed by this icon.,"

setImage
public void setImage(Image image)
Sets the image displayed by this icon.

Parameters:
image - the image


"
ImageIcon,setImageObserver(ImageObserver observer),void,Sets the image observer for the image.,"

setImageObserver
public void setImageObserver(ImageObserver observer)
Sets the image observer for the image.  Set this
 property if the ImageIcon contains an animated GIF, so
 the observer is notified to update its display.
 For example:
 
     icon = new ImageIcon(...)
     button.setIcon(icon);
     icon.setImageObserver(button);
 

Parameters:
observer - the image observer


"
ImageIcon,toString(),String,Returns a string representation of this image.,"

toString
public String toString()
Returns a string representation of this image.

Overrides:
toString in class Object
Returns:
a string representing this image


"
InputMap,allKeys(),KeyStroke[],Returns an array of the KeyStrokes defined in this InputMap and its parent.,"

allKeys
public KeyStroke[] allKeys()
Returns an array of the KeyStrokes defined in this
 InputMap and its parent. This differs from keys() in that
 this method includes the keys defined in the parent.

"
InputMap,clear(),void,Removes all the mappings from this InputMap.,"

clear
public void clear()
Removes all the mappings from this InputMap.

"
InputMap,get(KeyStroke keyStroke),Object,"Returns the binding for keyStroke, messaging the parent InputMap if the binding is not locally defined.","

get
public Object get(KeyStroke keyStroke)
Returns the binding for keyStroke, messaging the
 parent InputMap if the binding is not locally defined.

"
InputMap,getParent(),InputMap,Gets this InputMap's parent.,"

getParent
public InputMap getParent()
Gets this InputMap's parent.

Returns:
map  the InputMap that is the parent of this one,
              or null if this InputMap has no parent


"
InputMap,keys(),KeyStroke[],Returns the KeyStrokes that are bound in this InputMap.,"

keys
public KeyStroke[] keys()
Returns the KeyStrokes that are bound in this InputMap.

"
InputMap,"put(KeyStroke keyStroke, Object actionMapKey)",void,Adds a binding for keyStroke to actionMapKey.,"

put
public void put(KeyStroke keyStroke,
                Object actionMapKey)
Adds a binding for keyStroke to actionMapKey.
 If actionMapKey is null, this removes the current binding
 for keyStroke.

"
InputMap,remove(KeyStroke key),void,Removes the binding for key from this InputMap.,"

remove
public void remove(KeyStroke key)
Removes the binding for key from this
 InputMap.

"
InputMap,setParent(InputMap map),void,Sets this InputMap's parent.,"

setParent
public void setParent(InputMap map)
Sets this InputMap's parent.

Parameters:
map - the InputMap that is the parent of this one


"
InputMap,size(),int,Returns the number of KeyStroke bindings.,"

size
public int size()
Returns the number of KeyStroke bindings.

"
InputVerifier,shouldYieldFocus(JComponent input),boolean,Calls verify(input) to ensure that the input is valid.,"

shouldYieldFocus
public boolean shouldYieldFocus(JComponent input)
Calls verify(input) to ensure that the input is valid.
 This method can have side effects. In particular, this method
 is called when the user attempts to advance focus out of the
 argument component into another Swing component in this window.
 If this method returns true, then the focus is transfered
 normally; if it returns false, then the focus remains in
 the argument component.

Parameters:
input - the JComponent to verify
Returns:
true when valid, false when invalid
See Also:
JComponent.setInputVerifier(javax.swing.InputVerifier), 
JComponent.getInputVerifier()


"
InputVerifier,verify(JComponent input),abstract boolean,Checks whether the JComponent's input is valid.,"

verify
public abstract boolean verify(JComponent input)
Checks whether the JComponent's input is valid. This method should
 have no side effects. It returns a boolean indicating the status
 of the argument's input.

Parameters:
input - the JComponent to verify
Returns:
true when valid, false when invalid
See Also:
JComponent.setInputVerifier(javax.swing.InputVerifier), 
JComponent.getInputVerifier()


"
InternalFrameFocusTraversalPolicy,getInitialComponent(JInternalFrame frame),Component,Returns the Component that should receive the focus when a JInternalFrame is selected for the first time.,"

getInitialComponent
public Component getInitialComponent(JInternalFrame frame)
Returns the Component that should receive the focus when a
 JInternalFrame is selected for the first time. Once the JInternalFrame
 has been selected by a call to setSelected(true), the
 initial Component will not be used again. Instead, if the JInternalFrame
 loses and subsequently regains selection, or is made invisible or
 undisplayable and subsequently made visible and displayable, the
 JInternalFrame's most recently focused Component will become the focus
 owner. The default implementation of this method returns the
 JInternalFrame's default Component to focus.

Parameters:
frame - the JInternalFrame whose initial Component is to be
        returned
Returns:
the Component that should receive the focus when frame is
         selected for the first time, or null if no suitable Component
         can be found
Throws:
IllegalArgumentException - if window is null
See Also:
JInternalFrame.getMostRecentFocusOwner()


"
JApplet,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified child Component.
 This method is overridden to conditionally forward calls to the
 contentPane.
 By default, children are added to the contentPane instead
 of the frame, refer to RootPaneContainer for
 details.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JApplet,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor methods to create the default rootPane.

"
JApplet,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JApplet.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JApplet.
 For JApplets, the AccessibleContext takes the form of an
 AccessibleJApplet.
 A new AccessibleJApplet instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Applet
Returns:
an AccessibleJApplet that serves as the
         AccessibleContext of this JApplet


"
JApplet,getContentPane(),Container,Returns the contentPane object for this applet.,"

getContentPane
public Container getContentPane()
Returns the contentPane object for this applet.

Specified by:
getContentPane in interface RootPaneContainer
Returns:
the value of the contentPane property.
See Also:
setContentPane(java.awt.Container), 
RootPaneContainer.getContentPane()


"
JApplet,getGlassPane(),Component,Returns the glassPane object for this applet.,"

getGlassPane
public Component getGlassPane()
Returns the glassPane object for this applet.

Specified by:
getGlassPane in interface RootPaneContainer
Returns:
the value of the glassPane property.
See Also:
setGlassPane(java.awt.Component), 
RootPaneContainer.getGlassPane()


"
JApplet,getGraphics(),Graphics,Creates a graphics context for this component.,"

getGraphics
public Graphics getGraphics()
Creates a graphics context for this component. This method will
 return null if this component is currently not
 displayable.

Overrides:
getGraphics in class Component
Returns:
a graphics context for this component, or null
             if it has none
Since:
1.6
See Also:
Component.paint(java.awt.Graphics)


"
JApplet,getJMenuBar(),JMenuBar,Returns the menubar set on this applet.,"

getJMenuBar
public JMenuBar getJMenuBar()
Returns the menubar set on this applet.

See Also:
setJMenuBar(javax.swing.JMenuBar)


"
JApplet,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this applet.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Returns the layeredPane object for this applet.

Specified by:
getLayeredPane in interface RootPaneContainer
Returns:
the value of the layeredPane property.
Throws:
IllegalComponentStateException - (a runtime
            exception) if the layered pane parameter is null
See Also:
setLayeredPane(javax.swing.JLayeredPane), 
RootPaneContainer.getLayeredPane()


"
JApplet,getRootPane(),JRootPane,Returns the rootPane object for this applet.,"

getRootPane
public JRootPane getRootPane()
Returns the rootPane object for this applet.

Specified by:
getRootPane in interface RootPaneContainer
Returns:
this components single JRootPane child.
See Also:
setRootPane(javax.swing.JRootPane), 
RootPaneContainer.getRootPane()


"
JApplet,getTransferHandler(),TransferHandler,Gets the transferHandler property.,"

getTransferHandler
public TransferHandler getTransferHandler()
Gets the transferHandler property.

Returns:
the value of the transferHandler property
Since:
1.6
See Also:
TransferHandler, 
setTransferHandler(javax.swing.TransferHandler)


"
JApplet,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.,"

isRootPaneCheckingEnabled
protected boolean isRootPaneCheckingEnabled()
Returns whether calls to add and
 setLayout are forwarded to the contentPane.

Returns:
true if add and setLayout
         are forwarded; false otherwise
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JApplet,paramString(),protected String,Returns a string representation of this JApplet.,"

paramString
protected String paramString()
Returns a string representation of this JApplet. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class Container
Returns:
a string representation of this JApplet.


"
JApplet,remove(Component comp),void,Removes the specified component from the container.,"

remove
public void remove(Component comp)
Removes the specified component from the container. If
 comp is not the rootPane, this will forward
 the call to the contentPane. This will do nothing if
 comp is not a child of the JFrame or
 contentPane.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
Container.add(java.awt.Component), 
RootPaneContainer


"
JApplet,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.,"

repaint
public void repaint(long time,
                    int x,
                    int y,
                    int width,
                    int height)
Repaints the specified rectangle of this component within
 time milliseconds.  Refer to RepaintManager
 for details on how the repaint is handled.

Overrides:
repaint in class Component
Parameters:
time - maximum time in milliseconds before update
x - the x coordinate
y - the y coordinate
width - the width
height - the height
Since:
1.6
See Also:
RepaintManager


"
JApplet,setContentPane(Container contentPane),void,Sets the contentPane property.,"

setContentPane
public void setContentPane(Container contentPane)
Sets the contentPane property.  This method is called by the constructor.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
contentPane - the contentPane object for this applet
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
getContentPane(), 
RootPaneContainer.setContentPane(java.awt.Container)


"
JApplet,setGlassPane(Component glassPane),void,Sets the glassPane property.,"

setGlassPane
public void setGlassPane(Component glassPane)
Sets the glassPane property.
 This method is called by the constructor.

Specified by:
setGlassPane in interface RootPaneContainer
Parameters:
glassPane - the glassPane object for this applet
See Also:
getGlassPane(), 
RootPaneContainer.setGlassPane(java.awt.Component)


"
JApplet,setJMenuBar(JMenuBar menuBar),void,Sets the menubar for this applet.,"

setJMenuBar
public void setJMenuBar(JMenuBar menuBar)
Sets the menubar for this applet.

Parameters:
menuBar - the menubar being placed in the applet
See Also:
getJMenuBar()


"
JApplet,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layeredPane)
Sets the layeredPane property.  This method is called by the constructor.

Specified by:
setLayeredPane in interface RootPaneContainer
Parameters:
layeredPane - the layeredPane object for this applet
See Also:
getLayeredPane(), 
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)


"
JApplet,setLayout(LayoutManager manager),void,Sets the LayoutManager.,"

setLayout
public void setLayout(LayoutManager manager)
Sets the LayoutManager.
 Overridden to conditionally forward the call to the
 contentPane.
 Refer to RootPaneContainer for
 more information.

Overrides:
setLayout in class Container
Parameters:
manager - the LayoutManager
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JApplet,setRootPane(JRootPane root),protected void,Sets the rootPane property.,"

setRootPane
protected void setRootPane(JRootPane root)
Sets the rootPane property.  This method is called by the constructor.

Parameters:
root - the rootPane object for this applet
See Also:
getRootPane()


"
JApplet,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.,"

setRootPaneCheckingEnabled
protected void setRootPaneCheckingEnabled(boolean enabled)
Sets whether calls to add and
 setLayout are forwarded to the contentPane.

Parameters:
enabled - true if add and setLayout
        are forwarded, false if they should operate directly on the
        JApplet.
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
isRootPaneCheckingEnabled(), 
RootPaneContainer


"
JApplet,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component.","

setTransferHandler
public void setTransferHandler(TransferHandler newHandler)
Sets the transferHandler property, which is a mechanism to
 support transfer of data into this component. Use null
 if the component does not support data transfer operations.
 
 If the system property suppressSwingDropSupport is false
 (the default) and the current drop target on this component is either
 null or not a user-set drop target, this method will change the
 drop target as follows: If newHandler is null it will
 clear the drop target. If not null it will install a new
 DropTarget.
 
 Note: When used with JApplet, TransferHandler only
 provides data import capability, as the data export related methods
 are currently typed to JComponent.
 
 Please see
 
 How to Use Drag and Drop and Data Transfer, a section in
 The Java Tutorial, for more information.

Parameters:
newHandler - the new TransferHandler
Since:
1.6
See Also:
TransferHandler, 
getTransferHandler(), 
Component.setDropTarget(java.awt.dnd.DropTarget)


"
JApplet,update(Graphics g),void,Just calls paint(g).,"

update
public void update(Graphics g)
Just calls paint(g).  This method was overridden to
 prevent an unnecessary call to clear the background.

Overrides:
update in class Container
Parameters:
g - the specified Graphics window
See Also:
Component.update(Graphics)


"
JButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JButton.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JButton. For JButtons,
 the AccessibleContext takes the form of an
 AccessibleJButton.
 A new AccessibleJButton instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJButton that serves as the
         AccessibleContext of this JButton


"
JButton,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ButtonUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JButton,isDefaultButton(),boolean,"Gets the value of the defaultButton property, which if true means that this button is the current default button for its JRootPane.","

isDefaultButton
public boolean isDefaultButton()
Gets the value of the defaultButton property,
 which if true means that this button is the current
 default button for its JRootPane.
 Most look and feels render the default button
 differently, and may potentially provide bindings
 to access the default button.

Returns:
the value of the defaultButton property
See Also:
JRootPane.setDefaultButton(javax.swing.JButton), 
isDefaultCapable()


"
JButton,isDefaultCapable(),boolean,Gets the value of the defaultCapable property.,"

isDefaultCapable
public boolean isDefaultCapable()
Gets the value of the defaultCapable property.

Returns:
the value of the defaultCapable property
See Also:
setDefaultCapable(boolean), 
isDefaultButton(), 
JRootPane.setDefaultButton(javax.swing.JButton)


"
JButton,paramString(),protected String,Returns a string representation of this JButton.,"

paramString
protected String paramString()
Returns a string representation of this JButton.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class AbstractButton
Returns:
a string representation of this JButton


"
JButton,removeNotify(),void,"Overrides JComponent.removeNotify to check if this button is currently set as the default button on the RootPane, and if so, sets the RootPane's default button to null to ensure the RootPane doesn't hold onto an invalid button reference.","

removeNotify
public void removeNotify()
Overrides JComponent.removeNotify to check if
 this button is currently set as the default button on the
 RootPane, and if so, sets the RootPane's
 default button to null to ensure the
 RootPane doesn't hold onto an invalid button reference.

Overrides:
removeNotify in class AbstractButton
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JButton,setDefaultCapable(boolean defaultCapable),void,"Sets the defaultCapable property, which determines whether this button can be made the default button for its root pane.","

setDefaultCapable
public void setDefaultCapable(boolean defaultCapable)
Sets the defaultCapable property,
 which determines whether this button can be
 made the default button for its root pane.
 The default value of the defaultCapable
 property is true unless otherwise
 specified by the look and feel.

Parameters:
defaultCapable - true if this button will be
        capable of being the default button on the
        RootPane; otherwise false
See Also:
isDefaultCapable()


"
JButton,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and
 feel.

Overrides:
updateUI in class AbstractButton
See Also:
JComponent.updateUI()


"
JCheckBox,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JCheckBox.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JCheckBox.
 For JCheckBoxes, the AccessibleContext takes the form of an
 AccessibleJCheckBox.
 A new AccessibleJCheckBox instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JToggleButton
Returns:
an AccessibleJCheckBox that serves as the
         AccessibleContext of this JCheckBox


"
JCheckBox,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JToggleButton
Returns:
the string ""CheckBoxUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JCheckBox,isBorderPaintedFlat(),boolean,Gets the value of the borderPaintedFlat property.,"

isBorderPaintedFlat
public boolean isBorderPaintedFlat()
Gets the value of the borderPaintedFlat property.

Returns:
the value of the borderPaintedFlat property
Since:
1.3
See Also:
setBorderPaintedFlat(boolean)


"
JCheckBox,paramString(),protected String,Returns a string representation of this JCheckBox.,"

paramString
protected String paramString()
Returns a string representation of this JCheckBox. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.
 specific new aspects of the JFC components.

Overrides:
paramString in class JToggleButton
Returns:
a string representation of this JCheckBox.


"
JCheckBox,setBorderPaintedFlat(boolean b),void,"Sets the borderPaintedFlat property, which gives a hint to the look and feel as to the appearance of the check box border.","

setBorderPaintedFlat
public void setBorderPaintedFlat(boolean b)
Sets the borderPaintedFlat property,
 which gives a hint to the look and feel as to the
 appearance of the check box border.
 This is usually set to true when a
 JCheckBox instance is used as a
 renderer in a component such as a JTable or
 JTree.  The default value for the
 borderPaintedFlat property is false.
 This method fires a property changed event.
 Some look and feels might not implement flat borders;
 they will ignore this property.

Parameters:
b - true requests that the border be painted flat;
          false requests normal borders
Since:
1.3
See Also:
isBorderPaintedFlat()


"
JCheckBox,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JToggleButton
See Also:
JComponent.updateUI()


"
JCheckBoxMenuItem,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JCheckBoxMenuItem.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JCheckBoxMenuItem.
 For JCheckBoxMenuItems, the AccessibleContext takes the form of an
 AccessibleJCheckBoxMenuItem.
 A new AccessibleJCheckBoxMenuItem instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JMenuItem
Returns:
an AccessibleJCheckBoxMenuItem that serves as the
         AccessibleContext of this AccessibleJCheckBoxMenuItem


"
JCheckBoxMenuItem,getSelectedObjects(),Object[],Returns an array (length 1) containing the check box menu item label or null if the check box is not selected.,"

getSelectedObjects
public Object[] getSelectedObjects()
Returns an array (length 1) containing the check box menu item
 label or null if the check box is not selected.

Specified by:
getSelectedObjects in interface ItemSelectable
Overrides:
getSelectedObjects in class AbstractButton
Returns:
an array containing one Object -- the text of the menu item
         -- if the item is selected; otherwise null


"
JCheckBoxMenuItem,getState(),boolean,Returns the selected-state of the item.,"

getState
public boolean getState()
Returns the selected-state of the item. This method
 exists for AWT compatibility only.  New code should
 use isSelected() instead.

Returns:
true  if the item is selected


"
JCheckBoxMenuItem,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JMenuItem
Returns:
""CheckBoxMenuItemUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JCheckBoxMenuItem,paramString(),protected String,Returns a string representation of this JCheckBoxMenuItem.,"

paramString
protected String paramString()
Returns a string representation of this JCheckBoxMenuItem. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JMenuItem
Returns:
a string representation of this JCheckBoxMenuItem.


"
JCheckBoxMenuItem,setState(boolean b),void,Sets the selected-state of the item.,"

setState
public void setState(boolean b)
Sets the selected-state of the item. This method
 exists for AWT compatibility only.  New code should
 use setSelected() instead.

Parameters:
b - a boolean value indicating the item's
           selected-state, where true=selected


"
JColorChooser,addChooserPanel(AbstractColorChooserPanel panel),void,Adds a color chooser panel to the color chooser.,"

addChooserPanel
public void addChooserPanel(AbstractColorChooserPanel panel)
Adds a color chooser panel to the color chooser.

Parameters:
panel - the AbstractColorChooserPanel to be added


"
JColorChooser,"createDialog(Component c, String title, boolean modal, JColorChooser chooserPane, ActionListener okListener, ActionListener cancelListener)",static JDialog,"Creates and returns a new dialog containing the specified ColorChooser pane along with ""OK"", ""Cancel"", and ""Reset"" buttons.","

createDialog
public static JDialog createDialog(Component c,
                                   String title,
                                   boolean modal,
                                   JColorChooser chooserPane,
                                   ActionListener okListener,
                                   ActionListener cancelListener)
                            throws HeadlessException
Creates and returns a new dialog containing the specified
 ColorChooser pane along with ""OK"", ""Cancel"", and ""Reset""
 buttons. If the ""OK"" or ""Cancel"" buttons are pressed, the dialog is
 automatically hidden (but not disposed).  If the ""Reset""
 button is pressed, the color-chooser's color will be reset to the
 color which was set the last time show was invoked on the
 dialog and the dialog will remain showing.

Parameters:
c - the parent component for the dialog
title - the title for the dialog
modal - a boolean. When true, the remainder of the program
                       is inactive until the dialog is closed.
chooserPane - the color-chooser to be placed inside the dialog
okListener - the ActionListener invoked when ""OK"" is pressed
cancelListener - the ActionListener invoked when ""Cancel"" is pressed
Returns:
a new dialog containing the color-chooser pane
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless()


"
JColorChooser,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JColorChooser.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JColorChooser.
 For color choosers, the AccessibleContext takes the form of an
 AccessibleJColorChooser.
 A new AccessibleJColorChooser instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJColorChooser that serves as the
         AccessibleContext of this JColorChooser


"
JColorChooser,getChooserPanels(),AbstractColorChooserPanel[],Returns the specified color panels.,"

getChooserPanels
public AbstractColorChooserPanel[] getChooserPanels()
Returns the specified color panels.

Returns:
an array of AbstractColorChooserPanel objects


"
JColorChooser,getColor(),Color,Gets the current color value from the color chooser.,"

getColor
public Color getColor()
Gets the current color value from the color chooser.
 By default, this delegates to the model.

Returns:
the current color value of the color chooser


"
JColorChooser,getDragEnabled(),boolean,Gets the value of the dragEnabled property.,"

getDragEnabled
public boolean getDragEnabled()
Gets the value of the dragEnabled property.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JColorChooser,getPreviewPanel(),JComponent,Returns the preview panel that shows a chosen color.,"

getPreviewPanel
public JComponent getPreviewPanel()
Returns the preview panel that shows a chosen color.

Returns:
a JComponent object -- the preview panel


"
JColorChooser,getSelectionModel(),ColorSelectionModel,Returns the data model that handles color selections.,"

getSelectionModel
public ColorSelectionModel getSelectionModel()
Returns the data model that handles color selections.

Returns:
a ColorSelectionModel object


"
JColorChooser,getUI(),ColorChooserUI,Returns the L&F object that renders this component.,"

getUI
public ColorChooserUI getUI()
Returns the L&F object that renders this component.

Returns:
the ColorChooserUI object that renders
          this component


"
JColorChooser,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ColorChooserUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JColorChooser,paramString(),protected String,Returns a string representation of this JColorChooser.,"

paramString
protected String paramString()
Returns a string representation of this JColorChooser.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JColorChooser


"
JColorChooser,removeChooserPanel(AbstractColorChooserPanel panel),AbstractColorChooserPanel,Removes the Color Panel specified.,"

removeChooserPanel
public AbstractColorChooserPanel removeChooserPanel(AbstractColorChooserPanel panel)
Removes the Color Panel specified.

Parameters:
panel - a string that specifies the panel to be removed
Returns:
the color panel
Throws:
IllegalArgumentException - if panel is not in list of
                  known chooser panels


"
JColorChooser,setChooserPanels(AbstractColorChooserPanel[] panels),void,Specifies the Color Panels used to choose a color value.,"

setChooserPanels
public void setChooserPanels(AbstractColorChooserPanel[] panels)
Specifies the Color Panels used to choose a color value.

Parameters:
panels - an array of AbstractColorChooserPanel
          objects


"
JColorChooser,setColor(Color color),void,Sets the current color of the color chooser to the specified color.,"

setColor
public void setColor(Color color)
Sets the current color of the color chooser to the specified color.
 The ColorSelectionModel will fire a ChangeEvent

Parameters:
color - the color to be set in the color chooser
See Also:
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JColorChooser,setColor(int c),void,Sets the current color of the color chooser to the specified color.,"

setColor
public void setColor(int c)
Sets the current color of the color chooser to the
 specified color.

Parameters:
c - an integer value that sets the current color in the chooser
          where the low-order 8 bits specify the Blue value,
          the next 8 bits specify the Green value, and the 8 bits
          above that specify the Red value.


"
JColorChooser,"setColor(int r, int g, int b)",void,Sets the current color of the color chooser to the specified RGB color.,"

setColor
public void setColor(int r,
                     int g,
                     int b)
Sets the current color of the color chooser to the
 specified RGB color.  Note that the values of red, green,
 and blue should be between the numbers 0 and 255, inclusive.

Parameters:
r - an int specifying the amount of Red
g - an int specifying the amount of Green
b - an int specifying the amount of Blue
Throws:
IllegalArgumentException - if r,g,b values are out of range
See Also:
Color


"
JColorChooser,setDragEnabled(boolean b),void,"Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component.","

setDragEnabled
public void setDragEnabled(boolean b)
Sets the dragEnabled property,
 which must be true to enable
 automatic drag handling (the first part of drag and drop)
 on this component.
 The transferHandler property needs to be set
 to a non-null value for the drag to do
 anything.  The default value of the dragEnabled
 property
 is false.

 

 When automatic drag handling is enabled,
 most look and feels begin a drag-and-drop operation
 when the user presses the mouse button over the preview panel.
 Some look and feels might not support automatic drag and drop;
 they will ignore this property.  You can work around such
 look and feels by modifying the component
 to directly call the exportAsDrag method of a
 TransferHandler.

Parameters:
b - the value to set the dragEnabled property to
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JColorChooser,setPreviewPanel(JComponent preview),void,Sets the current preview panel.,"

setPreviewPanel
public void setPreviewPanel(JComponent preview)
Sets the current preview panel.
 This will fire a PropertyChangeEvent for the property
 named ""previewPanel"".

Parameters:
preview - the JComponent which displays the current color
See Also:
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JColorChooser,setSelectionModel(ColorSelectionModel newModel),void,Sets the model containing the selected color.,"

setSelectionModel
public void setSelectionModel(ColorSelectionModel newModel)
Sets the model containing the selected color.

Parameters:
newModel - the new ColorSelectionModel object


"
JColorChooser,setUI(ColorChooserUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ColorChooserUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ColorChooserUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JColorChooser,"showDialog(Component component, String title, Color initialColor)",static Color,Shows a modal color-chooser dialog and blocks until the dialog is hidden.,"

showDialog
public static Color showDialog(Component component,
                               String title,
                               Color initialColor)
                        throws HeadlessException
Shows a modal color-chooser dialog and blocks until the
 dialog is hidden.  If the user presses the ""OK"" button, then
 this method hides/disposes the dialog and returns the selected color.
 If the user presses the ""Cancel"" button or closes the dialog without
 pressing ""OK"", then this method hides/disposes the dialog and returns
 null.

Parameters:
component - the parent Component for the dialog
title - the String containing the dialog's title
initialColor - the initial Color set when the color-chooser is shown
Returns:
the selected color or null if the user opted out
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless()


"
JColorChooser,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JComboBox,actionPerformed(ActionEvent e),void,This method is public as an implementation side effect.,"

actionPerformed
public void actionPerformed(ActionEvent e)
This method is public as an implementation side effect.
 do not call or override.

Specified by:
actionPerformed in interface ActionListener


"
JComboBox,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the combobox's state in response to property changes in associated action.,"

actionPropertyChanged
protected void actionPropertyChanged(Action action,
                                     String propertyName)
Updates the combobox's state in response to property changes in
 associated action. This method is invoked from the
 PropertyChangeListener returned from
 createActionPropertyChangeListener. Subclasses do not normally
 need to invoke this. Subclasses that support additional Action
 properties should override this and
 configurePropertiesFromAction.
 
 Refer to the table at 
 Swing Components Supporting Action for a list of
 the properties this method sets.

Parameters:
action - the Action associated with this combobox
propertyName - the name of the property that changed
Since:
1.6
See Also:
Action, 
configurePropertiesFromAction(javax.swing.Action)


"
JComboBox,addActionListener(ActionListener l),void,Adds an ActionListener.,"

addActionListener
public void addActionListener(ActionListener l)
Adds an ActionListener.
 
 The ActionListener will receive an ActionEvent
 when a selection has been made. If the combo box is editable, then
 an ActionEvent will be fired when editing has stopped.

Parameters:
l - the ActionListener that is to be notified
See Also:
setSelectedItem(java.lang.Object)


"
JComboBox,addItem(E item),void,Adds an item to the item list.,"

addItem
public void addItem(E item)
Adds an item to the item list.
 This method works only if the JComboBox uses a
 mutable data model.
 
Warning:
 Focus and keyboard navigation problems may arise if you add duplicate
 String objects. A workaround is to add new objects instead of String
 objects and make sure that the toString() method is defined.
 For example:
 
   comboBox.addItem(makeObj(""Item 1""));
   comboBox.addItem(makeObj(""Item 1""));
   ...
   private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
   }
 

Parameters:
item - the item to add to the list
See Also:
MutableComboBoxModel


"
JComboBox,addItemListener(ItemListener aListener),void,Adds an ItemListener.,"

addItemListener
public void addItemListener(ItemListener aListener)
Adds an ItemListener.
 
aListener will receive one or two ItemEvents when
 the selected item changes.

Specified by:
addItemListener in interface ItemSelectable
Parameters:
aListener - the ItemListener that is to be notified
See Also:
setSelectedItem(java.lang.Object)


"
JComboBox,addPopupMenuListener(PopupMenuListener l),void,Adds a PopupMenu listener which will listen to notification messages from the popup portion of the combo box.,"

addPopupMenuListener
public void addPopupMenuListener(PopupMenuListener l)
Adds a PopupMenu listener which will listen to notification
 messages from the popup portion of the combo box.
 
 For all standard look and feels shipped with Java, the popup list
 portion of combo box is implemented as a JPopupMenu.
 A custom look and feel may not implement it this way and will
 therefore not receive the notification.

Parameters:
l - the PopupMenuListener to add
Since:
1.4


"
JComboBox,"configureEditor(ComboBoxEditor anEditor, Object anItem)",void,Initializes the editor with the specified item.,"

configureEditor
public void configureEditor(ComboBoxEditor anEditor,
                            Object anItem)
Initializes the editor with the specified item.

Parameters:
anEditor - the ComboBoxEditor that displays
                  the list item in the
                  combo box field and allows it to be edited
anItem - the object to display and edit in the field


"
JComboBox,configurePropertiesFromAction(Action a),protected void,Sets the properties on this combobox to match those in the specified Action.,"

configurePropertiesFromAction
protected void configurePropertiesFromAction(Action a)
Sets the properties on this combobox to match those in the specified
 Action.  Refer to 
 Swing Components Supporting Action for more
 details as to which properties this sets.

Parameters:
a - the Action from which to get the properties,
          or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JComboBox,contentsChanged(ListDataEvent e),void,This method is public as an implementation side effect.,"

contentsChanged
public void contentsChanged(ListDataEvent e)
This method is public as an implementation side effect.
 do not call or override.

Specified by:
contentsChanged in interface ListDataListener
Parameters:
e - a ListDataEvent encapsulating the
    event information


"
JComboBox,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.,"

createActionPropertyChangeListener
protected PropertyChangeListener createActionPropertyChangeListener(Action a)
Creates and returns a PropertyChangeListener that is
 responsible for listening for changes from the specified
 Action and updating the appropriate properties.
 
Warning: If you subclass this do not create an anonymous
 inner class.  If you do the lifetime of the combobox will be tied to
 that of the Action.

Parameters:
a - the combobox's action
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JComboBox,createDefaultKeySelectionManager(),protected JComboBox.KeySelectionManager,Returns an instance of the default key-selection manager.,"

createDefaultKeySelectionManager
protected JComboBox.KeySelectionManager createDefaultKeySelectionManager()
Returns an instance of the default key-selection manager.

Returns:
the KeySelectionManager currently used by the list
See Also:
setKeySelectionManager(javax.swing.JComboBox.KeySelectionManager)


"
JComboBox,fireActionEvent(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionEvent
protected void fireActionEvent()
Notifies all listeners that have registered interest for
 notification on this event type.

See Also:
EventListenerList


"
JComboBox,fireItemStateChanged(ItemEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireItemStateChanged
protected void fireItemStateChanged(ItemEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
e - the event of interest
See Also:
EventListenerList


"
JComboBox,firePopupMenuCanceled(),void,Notifies PopupMenuListeners that the popup portion of the combo box has been canceled.,"

firePopupMenuCanceled
public void firePopupMenuCanceled()
Notifies PopupMenuListeners that the popup portion of the
 combo box has been canceled.
 
 This method is public but should not be called by anything other than
 the UI delegate.

Since:
1.4
See Also:
addPopupMenuListener(javax.swing.event.PopupMenuListener)


"
JComboBox,firePopupMenuWillBecomeInvisible(),void,Notifies PopupMenuListeners that the popup portion of the combo box has become invisible.,"

firePopupMenuWillBecomeInvisible
public void firePopupMenuWillBecomeInvisible()
Notifies PopupMenuListeners that the popup portion of the
 combo box has become invisible.
 
 This method is public but should not be called by anything other than
 the UI delegate.

Since:
1.4
See Also:
addPopupMenuListener(javax.swing.event.PopupMenuListener)


"
JComboBox,firePopupMenuWillBecomeVisible(),void,Notifies PopupMenuListeners that the popup portion of the combo box will become visible.,"

firePopupMenuWillBecomeVisible
public void firePopupMenuWillBecomeVisible()
Notifies PopupMenuListeners that the popup portion of the
 combo box will become visible.
 
 This method is public but should not be called by anything other than
 the UI delegate.

Since:
1.4
See Also:
addPopupMenuListener(javax.swing.event.PopupMenuListener)


"
JComboBox,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JComboBox.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JComboBox.
 For combo boxes, the AccessibleContext takes the form of an
 AccessibleJComboBox.
 A new AccessibleJComboBox instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJComboBox that serves as the
         AccessibleContext of this JComboBox


"
JComboBox,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set.","

getAction
public Action getAction()
Returns the currently set Action for this
 ActionEvent source, or null if no
 Action is set.

Returns:
the Action for this ActionEvent
          source; or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JComboBox,getActionCommand(),String,Returns the action command that is included in the event sent to action listeners.,"

getActionCommand
public String getActionCommand()
Returns the action command that is included in the event sent to
 action listeners.

Returns:
the string containing the ""command"" that is sent
          to action listeners.


"
JComboBox,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this JComboBox with addActionListener().,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the ActionListeners added
 to this JComboBox with addActionListener().

Returns:
all of the ActionListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JComboBox,getEditor(),ComboBoxEditor,Returns the editor used to paint and edit the selected item in the JComboBox field.,"

getEditor
public ComboBoxEditor getEditor()
Returns the editor used to paint and edit the selected item in the
 JComboBox field.

Returns:
the ComboBoxEditor that displays the selected item


"
JComboBox,getItemAt(int index),E,Returns the list item at the specified index.,"

getItemAt
public E getItemAt(int index)
Returns the list item at the specified index.  If index
 is out of range (less than zero or greater than or equal to size)
 it will return null.

Parameters:
index - an integer indicating the list position, where the first
               item starts at zero
Returns:
the item at that list position; or
                  null if out of range


"
JComboBox,getItemCount(),int,Returns the number of items in the list.,"

getItemCount
public int getItemCount()
Returns the number of items in the list.

Returns:
an integer equal to the number of items in the list


"
JComboBox,getItemListeners(),ItemListener[],Returns an array of all the ItemListeners added to this JComboBox with addItemListener().,"

getItemListeners
public ItemListener[] getItemListeners()
Returns an array of all the ItemListeners added
 to this JComboBox with addItemListener().

Returns:
all of the ItemListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JComboBox,getKeySelectionManager(),JComboBox.KeySelectionManager,Returns the list's key-selection manager.,"

getKeySelectionManager
public JComboBox.KeySelectionManager getKeySelectionManager()
Returns the list's key-selection manager.

Returns:
the KeySelectionManager currently in use


"
JComboBox,getMaximumRowCount(),int,Returns the maximum number of items the combo box can display without a scrollbar,"

getMaximumRowCount
public int getMaximumRowCount()
Returns the maximum number of items the combo box can display
 without a scrollbar

Returns:
an integer specifying the maximum number of items that are
         displayed in the list before using a scrollbar


"
JComboBox,getModel(),ComboBoxModel<E>,Returns the data model currently used by the JComboBox.,"

getModel
public ComboBoxModel<E> getModel()
Returns the data model currently used by the JComboBox.

Returns:
the ComboBoxModel that provides the displayed
                  list of items


"
JComboBox,getPopupMenuListeners(),PopupMenuListener[],Returns an array of all the PopupMenuListeners added to this JComboBox with addPopupMenuListener().,"

getPopupMenuListeners
public PopupMenuListener[] getPopupMenuListeners()
Returns an array of all the PopupMenuListeners added
 to this JComboBox with addPopupMenuListener().

Returns:
all of the PopupMenuListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JComboBox,getPrototypeDisplayValue(),E,"Returns the ""prototypical display"" value - an Object used for the calculation of the display height and width.","

getPrototypeDisplayValue
public E getPrototypeDisplayValue()
Returns the ""prototypical display"" value - an Object used
 for the calculation of the display height and width.

Returns:
the value of the prototypeDisplayValue property
Since:
1.4
See Also:
setPrototypeDisplayValue(E)


"
JComboBox,getRenderer(),ListCellRenderer<? super E>,Returns the renderer used to display the selected item in the JComboBox field.,"

getRenderer
public ListCellRenderer<? super E> getRenderer()
Returns the renderer used to display the selected item in the
 JComboBox field.

Returns:
the ListCellRenderer that displays
                  the selected item.


"
JComboBox,getSelectedIndex(),int,Returns the first item in the list that matches the given item.,"

getSelectedIndex
public int getSelectedIndex()
Returns the first item in the list that matches the given item.
 The result is not always defined if the JComboBox
 allows selected items that are not in the list.
 Returns -1 if there is no selected item or if the user specified
 an item which is not in the list.

Returns:
an integer specifying the currently selected list item,
                  where 0 specifies
                  the first item in the list;
                  or -1 if no item is selected or if
                  the currently selected item is not in the list


"
JComboBox,getSelectedItem(),Object,Returns the current selected item.,"

getSelectedItem
public Object getSelectedItem()
Returns the current selected item.
 
 If the combo box is editable, then this value may not have been added
 to the combo box with addItem, insertItemAt
 or the data constructors.

Returns:
the current selected Object
See Also:
setSelectedItem(java.lang.Object)


"
JComboBox,getSelectedObjects(),Object[],Returns an array containing the selected item.,"

getSelectedObjects
public Object[] getSelectedObjects()
Returns an array containing the selected item.
 This method is implemented for compatibility with
 ItemSelectable.

Specified by:
getSelectedObjects in interface ItemSelectable
Returns:
an array of Objects containing one
          element -- the selected item


"
JComboBox,getUI(),ComboBoxUI,Returns the L&F object that renders this component.,"

getUI
public ComboBoxUI getUI()
Returns the L&F object that renders this component.

Returns:
the ComboBoxUI object that renders this component


"
JComboBox,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ComboBoxUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JComboBox,hidePopup(),void,Causes the combo box to close its popup window.,"

hidePopup
public void hidePopup()
Causes the combo box to close its popup window.

See Also:
setPopupVisible(boolean)


"
JComboBox,"insertItemAt(E item, int index)",void,Inserts an item into the item list at a given index.,"

insertItemAt
public void insertItemAt(E item,
                         int index)
Inserts an item into the item list at a given index.
 This method works only if the JComboBox uses a
 mutable data model.

Parameters:
item - the item to add to the list
index - an integer specifying the position at which
                  to add the item
See Also:
MutableComboBoxModel


"
JComboBox,installAncestorListener(),protected void,NULL,"

installAncestorListener
protected void installAncestorListener()

"
JComboBox,intervalAdded(ListDataEvent e),void,This method is public as an implementation side effect.,"

intervalAdded
public void intervalAdded(ListDataEvent e)
This method is public as an implementation side effect.
 do not call or override.

Specified by:
intervalAdded in interface ListDataListener
Parameters:
e - a ListDataEvent encapsulating the
    event information


"
JComboBox,intervalRemoved(ListDataEvent e),void,This method is public as an implementation side effect.,"

intervalRemoved
public void intervalRemoved(ListDataEvent e)
This method is public as an implementation side effect.
 do not call or override.

Specified by:
intervalRemoved in interface ListDataListener
Parameters:
e - a ListDataEvent encapsulating the
    event information


"
JComboBox,isEditable(),boolean,Returns true if the JComboBox is editable.,"

isEditable
public boolean isEditable()
Returns true if the JComboBox is editable.
 By default, a combo box is not editable.

Returns:
true if the JComboBox is editable, else false


"
JComboBox,isLightWeightPopupEnabled(),boolean,Gets the value of the lightWeightPopupEnabled property.,"

isLightWeightPopupEnabled
public boolean isLightWeightPopupEnabled()
Gets the value of the lightWeightPopupEnabled
 property.

Returns:
the value of the lightWeightPopupEnabled
    property
See Also:
setLightWeightPopupEnabled(boolean)


"
JComboBox,isPopupVisible(),boolean,Determines the visibility of the popup.,"

isPopupVisible
public boolean isPopupVisible()
Determines the visibility of the popup.

Returns:
true if the popup is visible, otherwise returns false


"
JComboBox,paramString(),protected String,Returns a string representation of this JComboBox.,"

paramString
protected String paramString()
Returns a string representation of this JComboBox.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JComboBox


"
JComboBox,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.,"

processKeyBinding
protected boolean processKeyBinding(KeyStroke ks,
                                    KeyEvent e,
                                    int condition,
                                    boolean pressed)
Invoked to process the key bindings for ks as the result
 of the KeyEvent e. This obtains
 the appropriate InputMap,
 gets the binding, gets the action from the ActionMap,
 and then (if the action is found and the component
 is enabled) invokes notifyAction to notify the action.

Overrides:
processKeyBinding in class JComponent
Parameters:
ks - the KeyStroke queried
e - the KeyEvent
condition - one of the following values:
 
JComponent.WHEN_FOCUSED
 JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 JComponent.WHEN_IN_FOCUSED_WINDOW
 
pressed - true if the key is pressed
Returns:
true if there was a binding to an action, and the action
         was enabled


"
JComboBox,processKeyEvent(KeyEvent e),void,"Handles KeyEvents, looking for the Tab key.","

processKeyEvent
public void processKeyEvent(KeyEvent e)
Handles KeyEvents, looking for the Tab key.
 If the Tab key is found, the popup window is closed.

Overrides:
processKeyEvent in class JComponent
Parameters:
e - the KeyEvent containing the keyboard
          key that was pressed
See Also:
KeyEvent, 
KeyListener, 
KeyboardFocusManager, 
DefaultKeyboardFocusManager, 
Component.processEvent(java.awt.AWTEvent), 
Component.dispatchEvent(java.awt.AWTEvent), 
Component.addKeyListener(java.awt.event.KeyListener), 
Component.enableEvents(long), 
Component.isShowing()


"
JComboBox,removeActionListener(ActionListener l),void,Removes an ActionListener.,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes an ActionListener.

Parameters:
l - the ActionListener to remove


"
JComboBox,removeAllItems(),void,Removes all items from the item list.,"

removeAllItems
public void removeAllItems()
Removes all items from the item list.

"
JComboBox,removeItem(Object anObject),void,Removes an item from the item list.,"

removeItem
public void removeItem(Object anObject)
Removes an item from the item list.
 This method works only if the JComboBox uses a
 mutable data model.

Parameters:
anObject - the object to remove from the item list
See Also:
MutableComboBoxModel


"
JComboBox,removeItemAt(int anIndex),void,Removes the item at anIndex This method works only if the JComboBox uses a mutable data model.,"

removeItemAt
public void removeItemAt(int anIndex)
Removes the item at anIndex
 This method works only if the JComboBox uses a
 mutable data model.

Parameters:
anIndex - an int specifying the index of the item to remove,
                  where 0
                  indicates the first item in the list
See Also:
MutableComboBoxModel


"
JComboBox,removeItemListener(ItemListener aListener),void,Removes an ItemListener.,"

removeItemListener
public void removeItemListener(ItemListener aListener)
Removes an ItemListener.

Specified by:
removeItemListener in interface ItemSelectable
Parameters:
aListener - the ItemListener to remove
See Also:
ItemEvent


"
JComboBox,removePopupMenuListener(PopupMenuListener l),void,Removes a PopupMenuListener.,"

removePopupMenuListener
public void removePopupMenuListener(PopupMenuListener l)
Removes a PopupMenuListener.

Parameters:
l - the PopupMenuListener to remove
Since:
1.4
See Also:
addPopupMenuListener(javax.swing.event.PopupMenuListener)


"
JComboBox,selectedItemChanged(),protected void,This protected method is implementation specific.,"

selectedItemChanged
protected void selectedItemChanged()
This protected method is implementation specific. Do not access directly
 or override.

"
JComboBox,selectWithKeyChar(char keyChar),boolean,"Selects the list item that corresponds to the specified keyboard character and returns true, if there is an item corresponding to that character.","

selectWithKeyChar
public boolean selectWithKeyChar(char keyChar)
Selects the list item that corresponds to the specified keyboard
 character and returns true, if there is an item corresponding
 to that character.  Otherwise, returns false.

Parameters:
keyChar - a char, typically this is a keyboard key
                  typed by the user


"
JComboBox,setAction(Action a),void,Sets the Action for the ActionEvent source.,"

setAction
public void setAction(Action a)
Sets the Action for the ActionEvent source.
 The new Action replaces any previously set
 Action but does not affect ActionListeners
 independently added with addActionListener.
 If the Action is already a registered
 ActionListener for the ActionEvent source,
 it is not re-registered.
 
 Setting the Action results in immediately changing
 all the properties described in 
 Swing Components Supporting Action.
 Subsequently, the combobox's properties are automatically updated
 as the Action's properties change.
 
 This method uses three other methods to set
 and help track the Action's property values.
 It uses the configurePropertiesFromAction method
 to immediately change the combobox's properties.
 To track changes in the Action's property values,
 this method registers the PropertyChangeListener
 returned by createActionPropertyChangeListener. The
 default PropertyChangeListener invokes the
 actionPropertyChanged method when a property in the
 Action changes.

Parameters:
a - the Action for the JComboBox,
                  or null.
Since:
1.3
See Also:
Action, 
getAction(), 
configurePropertiesFromAction(javax.swing.Action), 
createActionPropertyChangeListener(javax.swing.Action), 
actionPropertyChanged(javax.swing.Action, java.lang.String)


"
JComboBox,setActionCommand(String aCommand),void,Sets the action command that should be included in the event sent to action listeners.,"

setActionCommand
public void setActionCommand(String aCommand)
Sets the action command that should be included in the event
 sent to action listeners.

Parameters:
aCommand - a string containing the ""command"" that is sent
                  to action listeners; the same listener can then
                  do different things depending on the command it
                  receives


"
JComboBox,setEditable(boolean aFlag),void,Determines whether the JComboBox field is editable.,"

setEditable
public void setEditable(boolean aFlag)
Determines whether the JComboBox field is editable.
 An editable JComboBox allows the user to type into the
 field or selected an item from the list to initialize the field,
 after which it can be edited. (The editing affects only the field,
 the list item remains intact.) A non editable JComboBox
 displays the selected item in the field,
 but the selection cannot be modified.

Parameters:
aFlag - a boolean value, where true indicates that the
                  field is editable


"
JComboBox,setEditor(ComboBoxEditor anEditor),void,Sets the editor used to paint and edit the selected item in the JComboBox field.,"

setEditor
public void setEditor(ComboBoxEditor anEditor)
Sets the editor used to paint and edit the selected item in the
 JComboBox field.  The editor is used only if the
 receiving JComboBox is editable. If not editable,
 the combo box uses the renderer to paint the selected item.

Parameters:
anEditor - the ComboBoxEditor that
                  displays the selected item
See Also:
setRenderer(javax.swing.ListCellRenderer<? super E>)


"
JComboBox,setEnabled(boolean b),void,Enables the combo box so that items can be selected.,"

setEnabled
public void setEnabled(boolean b)
Enables the combo box so that items can be selected. When the
 combo box is disabled, items cannot be selected and values
 cannot be typed into its field (if it is editable).

Overrides:
setEnabled in class JComponent
Parameters:
b - a boolean value, where true enables the component and
          false disables it
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
JComboBox,setKeySelectionManager(JComboBox.KeySelectionManager aManager),void,Sets the object that translates a keyboard character into a list selection.,"

setKeySelectionManager
public void setKeySelectionManager(JComboBox.KeySelectionManager aManager)
Sets the object that translates a keyboard character into a list
 selection. Typically, the first selection with a matching first
 character becomes the selected item.

"
JComboBox,setLightWeightPopupEnabled(boolean aFlag),void,"Sets the lightWeightPopupEnabled property, which provides a hint as to whether or not a lightweight Component should be used to contain the JComboBox, versus a heavyweight Component such as a Panel or a Window.","

setLightWeightPopupEnabled
public void setLightWeightPopupEnabled(boolean aFlag)
Sets the lightWeightPopupEnabled property, which
 provides a hint as to whether or not a lightweight
 Component should be used to contain the
 JComboBox, versus a heavyweight
 Component such as a Panel
 or a Window.  The decision of lightweight
 versus heavyweight is ultimately up to the
 JComboBox.  Lightweight windows are more
 efficient than heavyweight windows, but lightweight
 and heavyweight components do not mix well in a GUI.
 If your application mixes lightweight and heavyweight
 components, you should disable lightweight popups.
 The default value for the lightWeightPopupEnabled
 property is true, unless otherwise specified
 by the look and feel.  Some look and feels always use
 heavyweight popups, no matter what the value of this property.
 
 See the article Mixing Heavy and Light Components
 This method fires a property changed event.

Parameters:
aFlag - if true, lightweight popups are desired


"
JComboBox,setMaximumRowCount(int count),void,Sets the maximum number of rows the JComboBox displays.,"

setMaximumRowCount
public void setMaximumRowCount(int count)
Sets the maximum number of rows the JComboBox displays.
 If the number of objects in the model is greater than count,
 the combo box uses a scrollbar.

Parameters:
count - an integer specifying the maximum number of items to
              display in the list before using a scrollbar


"
JComboBox,setModel(ComboBoxModel<E> aModel),void,Sets the data model that the JComboBox uses to obtain the list of items.,"

setModel
public void setModel(ComboBoxModel<E> aModel)
Sets the data model that the JComboBox uses to obtain
 the list of items.

Parameters:
aModel - the ComboBoxModel that provides the
  displayed list of items


"
JComboBox,setPopupVisible(boolean v),void,Sets the visibility of the popup.,"

setPopupVisible
public void setPopupVisible(boolean v)
Sets the visibility of the popup.

"
JComboBox,setPrototypeDisplayValue(E prototypeDisplayValue),void,Sets the prototype display value used to calculate the size of the display for the UI portion.,"

setPrototypeDisplayValue
public void setPrototypeDisplayValue(E prototypeDisplayValue)
Sets the prototype display value used to calculate the size of the display
 for the UI portion.
 
 If a prototype display value is specified, the preferred size of
 the combo box is calculated by configuring the renderer with the
 prototype display value and obtaining its preferred size. Specifying
 the preferred display value is often useful when the combo box will be
 displaying large amounts of data. If no prototype display value has
 been specified, the renderer must be configured for each value from
 the model and its preferred size obtained, which can be
 relatively expensive.

Parameters:
prototypeDisplayValue - 
Since:
1.4
See Also:
getPrototypeDisplayValue()


"
JComboBox,setRenderer(ListCellRenderer<? super E> aRenderer),void,Sets the renderer that paints the list items and the item selected from the list in the JComboBox field.,"

setRenderer
public void setRenderer(ListCellRenderer<? super E> aRenderer)
Sets the renderer that paints the list items and the item selected from the list in
 the JComboBox field. The renderer is used if the JComboBox is not
 editable. If it is editable, the editor is used to render and edit
 the selected item.
 
 The default renderer displays a string or an icon.
 Other renderers can handle graphic images and composite items.
 
 To display the selected item,
 aRenderer.getListCellRendererComponent
 is called, passing the list object and an index of -1.

Parameters:
aRenderer - the ListCellRenderer that
                  displays the selected item
See Also:
setEditor(javax.swing.ComboBoxEditor)


"
JComboBox,setSelectedIndex(int anIndex),void,Selects the item at index anIndex.,"

setSelectedIndex
public void setSelectedIndex(int anIndex)
Selects the item at index anIndex.

Parameters:
anIndex - an integer specifying the list item to select,
                  where 0 specifies the first item in the list and -1 indicates no selection
Throws:
IllegalArgumentException - if anIndex < -1 or
                  anIndex is greater than or equal to size


"
JComboBox,setSelectedItem(Object anObject),void,Sets the selected item in the combo box display area to the object in the argument.,"

setSelectedItem
public void setSelectedItem(Object anObject)
Sets the selected item in the combo box display area to the object in
 the argument.
 If anObject is in the list, the display area shows
 anObject selected.
 
 If anObject is not in the list and the combo box is
 uneditable, it will not change the current selection. For editable
 combo boxes, the selection will change to anObject.
 
 If this constitutes a change in the selected item,
 ItemListeners added to the combo box will be notified with
 one or two ItemEvents.
 If there is a current selected item, an ItemEvent will be
 fired and the state change will be ItemEvent.DESELECTED.
 If anObject is in the list and is not currently selected
 then an ItemEvent will be fired and the state change will
 be ItemEvent.SELECTED.
 
ActionListeners added to the combo box will be notified
 with an ActionEvent when this method is called.

Parameters:
anObject - the list object to select; use null to
                        clear the selection


"
JComboBox,setUI(ComboBoxUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ComboBoxUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ComboBoxUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JComboBox,showPopup(),void,Causes the combo box to display its popup window.,"

showPopup
public void showPopup()
Causes the combo box to display its popup window.

See Also:
setPopupVisible(boolean)


"
JComboBox,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JComponent,addAncestorListener(AncestorListener listener),void,Registers listener so that it will receive AncestorEvents when it or any of its ancestors move or are made visible or invisible.,"

addAncestorListener
public void addAncestorListener(AncestorListener listener)
Registers listener so that it will receive
 AncestorEvents when it or any of its ancestors
 move or are made visible or invisible.
 Events are also sent when the component or its ancestors are added
 or removed from the containment hierarchy.

Parameters:
listener - the AncestorListener to register
See Also:
AncestorEvent


"
JComponent,addNotify(),void,Notifies this component that it now has a parent component.,"

addNotify
public void addNotify()
Notifies this component that it now has a parent component.
 When this method is invoked, the chain of parent components is
 set up with KeyboardAction event listeners.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
addNotify in class Container
See Also:
registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JComponent,addVetoableChangeListener(VetoableChangeListener listener),void,Adds a VetoableChangeListener to the listener list.,"

addVetoableChangeListener
public void addVetoableChangeListener(VetoableChangeListener listener)
Adds a VetoableChangeListener to the listener list.
 The listener is registered for all properties.

Parameters:
listener - the VetoableChangeListener to be added


"
JComponent,computeVisibleRect(Rectangle visibleRect),void,"Returns the Component's ""visible rect rectangle"" - the intersection of the visible rectangles for this component and all of its ancestors.","

computeVisibleRect
public void computeVisibleRect(Rectangle visibleRect)
Returns the Component's ""visible rect rectangle"" -  the
 intersection of the visible rectangles for this component
 and all of its ancestors.  The return value is stored in
 visibleRect.

Parameters:
visibleRect - a Rectangle computed as the
          intersection of all visible rectangles for this
          component and all of its ancestors -- this is the return
          value for this method
See Also:
getVisibleRect()


"
JComponent,"contains(int x, int y)",boolean,Gives the UI delegate an opportunity to define the precise shape of this component for the sake of mouse processing.,"

contains
public boolean contains(int x,
                        int y)
Gives the UI delegate an opportunity to define the precise
 shape of this component for the sake of mouse processing.

Overrides:
contains in class Component
Parameters:
x - the x coordinate of the point
y - the y coordinate of the point
Returns:
true if this component logically contains x,y
See Also:
Component.contains(int, int), 
ComponentUI


"
JComponent,createToolTip(),JToolTip,Returns the instance of JToolTip that should be used to display the tooltip.,"

createToolTip
public JToolTip createToolTip()
Returns the instance of JToolTip that should be used
 to display the tooltip.
 Components typically would not override this method,
 but it can be used to
 cause different tooltips to be displayed differently.

Returns:
the JToolTip used to display this toolTip


"
JComponent,disable(),void,"Deprecated. As of JDK version 1.1, replaced by java.awt.Component.setEnabled(boolean).","

disable
@Deprecated
public void disable()
Deprecated. As of JDK version 1.1,
 replaced by java.awt.Component.setEnabled(boolean).

Overrides:
disable in class Component


"
JComponent,enable(),void,"Deprecated. As of JDK version 1.1, replaced by java.awt.Component.setEnabled(boolean).","

enable
@Deprecated
public void enable()
Deprecated. As of JDK version 1.1,
 replaced by java.awt.Component.setEnabled(boolean).

Overrides:
enable in class Component


"
JComponent,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Support for reporting bound property changes for boolean properties.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               boolean oldValue,
                               boolean newValue)
Support for reporting bound property changes for boolean properties.
 This method can be called when a bound property has changed and it will
 send the appropriate PropertyChangeEvent to any registered
 PropertyChangeListeners.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
JComponent,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Reports a bound property change.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               char oldValue,
                               char newValue)
Description copied from class: Component
Reports a bound property change.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a char)
newValue - the new value of the property (as a char)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
JComponent,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Support for reporting bound property changes for integer properties.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               int oldValue,
                               int newValue)
Support for reporting bound property changes for integer properties.
 This method can be called when a bound property has changed and it will
 send the appropriate PropertyChangeEvent to any registered
 PropertyChangeListeners.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
JComponent,"fireVetoableChange(String propertyName, Object oldValue, Object newValue)",protected void,Supports reporting constrained property changes.,"

fireVetoableChange
protected void fireVetoableChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
                           throws PropertyVetoException
Supports reporting constrained property changes.
 This method can be called when a constrained property has changed
 and it will send the appropriate PropertyChangeEvent
 to any registered VetoableChangeListeners.

Parameters:
propertyName - the name of the property that was listened on
oldValue - the old value of the property
newValue - the new value of the property
Throws:
PropertyVetoException - when the attempt to set the
          property is vetoed by the component


"
JComponent,getActionForKeyStroke(KeyStroke aKeyStroke),ActionListener,Returns the object that will perform the action registered for a given keystroke.,"

getActionForKeyStroke
public ActionListener getActionForKeyStroke(KeyStroke aKeyStroke)
Returns the object that will perform the action registered for a
 given keystroke.

Returns:
the ActionListener
          object invoked when the keystroke occurs


"
JComponent,getActionMap(),ActionMap,Returns the ActionMap used to determine what Action to fire for particular KeyStroke binding.,"

getActionMap
public final ActionMap getActionMap()
Returns the ActionMap used to determine what
 Action to fire for particular KeyStroke
 binding. The returned ActionMap, unless otherwise
 set, will have the ActionMap from the UI set as the parent.

Returns:
the ActionMap containing the key/action bindings
Since:
1.3


"
JComponent,getAlignmentX(),float,Overrides Container.getAlignmentX to return the vertical alignment.,"

getAlignmentX
public float getAlignmentX()
Overrides Container.getAlignmentX to return
 the vertical alignment.

Overrides:
getAlignmentX in class Container
Returns:
the value of the alignmentX property
See Also:
setAlignmentX(float), 
Component.getAlignmentX()


"
JComponent,getAlignmentY(),float,Overrides Container.getAlignmentY to return the horizontal alignment.,"

getAlignmentY
public float getAlignmentY()
Overrides Container.getAlignmentY to return
 the horizontal alignment.

Overrides:
getAlignmentY in class Container
Returns:
the value of the alignmentY property
See Also:
setAlignmentY(float), 
Component.getAlignmentY()


"
JComponent,getAncestorListeners(),AncestorListener[],Returns an array of all the ancestor listeners registered on this component.,"

getAncestorListeners
public AncestorListener[] getAncestorListeners()
Returns an array of all the ancestor listeners
 registered on this component.

Returns:
all of the component's AncestorListeners
         or an empty
         array if no ancestor listeners are currently registered
Since:
1.4
See Also:
addAncestorListener(javax.swing.event.AncestorListener), 
removeAncestorListener(javax.swing.event.AncestorListener)


"
JComponent,getAutoscrolls(),boolean,Gets the autoscrolls property.,"

getAutoscrolls
public boolean getAutoscrolls()
Gets the autoscrolls property.

Returns:
the value of the autoscrolls property
See Also:
JViewport, 
setAutoscrolls(boolean)


"
JComponent,"getBaseline(int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(int width,
                       int height)
Returns the baseline.  The baseline is measured from the top of
 the component.  This method is primarily meant for
 LayoutManagers to align components along their
 baseline.  A return value less than 0 indicates this component
 does not have a reasonable baseline and that
 LayoutManagers should not align this component on
 its baseline.
 
 This method calls into the ComponentUI method of the
 same name.  If this component does not have a ComponentUI
 -1 will be returned.  If a value >= 0 is
 returned, then the component has a valid baseline for any
 size >= the minimum size and getBaselineResizeBehavior
 can be used to determine how the baseline changes with size.

Overrides:
getBaseline in class Component
Parameters:
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
the baseline or < 0 indicating there is no reasonable
         baseline
Throws:
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
getBaselineResizeBehavior(), 
FontMetrics


"
JComponent,getBaselineResizeBehavior(),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior()
Returns an enum indicating how the baseline of the component
 changes as the size changes.  This method is primarily meant for
 layout managers and GUI builders.
 
 This method calls into the ComponentUI method of
 the same name.  If this component does not have a
 ComponentUI
BaselineResizeBehavior.OTHER will be
 returned.  Subclasses should
 never return null; if the baseline can not be
 calculated return BaselineResizeBehavior.OTHER.  Callers
 should first ask for the baseline using
 getBaseline and if a value >= 0 is returned use
 this method.  It is acceptable for this method to return a
 value other than BaselineResizeBehavior.OTHER even if
 getBaseline returns a value less than 0.

Overrides:
getBaselineResizeBehavior in class Component
Returns:
an enum indicating how the baseline changes as the component
         size changes
Since:
1.6
See Also:
getBaseline(int, int)


"
JComponent,getBorder(),Border,Returns the border of this component or null if no border is currently set.,"

getBorder
public Border getBorder()
Returns the border of this component or null if no
 border is currently set.

Returns:
the border object for this component
See Also:
setBorder(javax.swing.border.Border)


"
JComponent,getBounds(Rectangle rv),Rectangle,"Stores the bounds of this component into ""return value"" rv and returns rv.","

getBounds
public Rectangle getBounds(Rectangle rv)
Stores the bounds of this component into ""return value""
 rv and returns rv.
 If rv is null a new Rectangle
 is allocated.  This version of getBounds is useful
 if the caller wants to avoid allocating a new Rectangle
 object on the heap.

Overrides:
getBounds in class Component
Parameters:
rv - the return value, modified to the component's bounds
Returns:
rv; if rv is null
          return a newly created Rectangle with this
          component's bounds


"
JComponent,getClientProperty(Object key),Object,Returns the value of the property with the specified key.,"

getClientProperty
public final Object getClientProperty(Object key)
Returns the value of the property with the specified key.  Only
 properties added with putClientProperty will return
 a non-null value.

Parameters:
key - the being queried
Returns:
the value of this property or null
See Also:
putClientProperty(java.lang.Object, java.lang.Object)


"
JComponent,getComponentGraphics(Graphics g),protected Graphics,Returns the graphics object used to paint this component.,"

getComponentGraphics
protected Graphics getComponentGraphics(Graphics g)
Returns the graphics object used to paint this component.
 If DebugGraphics is turned on we create a new
 DebugGraphics object if necessary.
 Otherwise we just configure the
 specified graphics object's foreground and font.

Parameters:
g - the original Graphics object
Returns:
a Graphics object configured for this component


"
JComponent,getComponentPopupMenu(),JPopupMenu,Returns JPopupMenu that assigned for this component.,"

getComponentPopupMenu
public JPopupMenu getComponentPopupMenu()
Returns JPopupMenu that assigned for this component.
 If this component does not have a JPopupMenu assigned
 to it and getInheritsPopupMenu is true, this
 will return getParent().getComponentPopupMenu() (assuming
 the parent is valid.)

Returns:
JPopupMenu assigned for this component
         or null if no popup assigned
Since:
1.5
See Also:
setComponentPopupMenu(javax.swing.JPopupMenu)


"
JComponent,getConditionForKeyStroke(KeyStroke aKeyStroke),int,Returns the condition that determines whether a registered action occurs in response to the specified keystroke.,"

getConditionForKeyStroke
public int getConditionForKeyStroke(KeyStroke aKeyStroke)
Returns the condition that determines whether a registered action
 occurs in response to the specified keystroke.
 
 For Java 2 platform v1.3, a KeyStroke can be associated
 with more than one condition.
 For example, 'a' could be bound for the two
 conditions WHEN_FOCUSED and
 WHEN_IN_FOCUSED_WINDOW condition.

Returns:
the action-keystroke condition


"
JComponent,getDebugGraphicsOptions(),int,Returns the state of graphics debugging.,"

getDebugGraphicsOptions
public int getDebugGraphicsOptions()
Returns the state of graphics debugging.

Returns:
a bitwise OR'd flag of zero or more of the following options:
 
DebugGraphics.LOG_OPTION - causes a text message to be printed.
 DebugGraphics.FLASH_OPTION - causes the drawing to flash several
 times.
 DebugGraphics.BUFFERED_OPTION - creates an
         ExternalWindow that displays the operations
         performed on the View's offscreen buffer.
 DebugGraphics.NONE_OPTION disables debugging.
 A value of 0 causes no changes to the debugging options.
 
See Also:
setDebugGraphicsOptions(int)


"
JComponent,getDefaultLocale(),static Locale,Returns the default locale used to initialize each JComponent's locale property upon creation.,"

getDefaultLocale
public static Locale getDefaultLocale()
Returns the default locale used to initialize each JComponent's
 locale property upon creation.

 The default locale has ""AppContext"" scope so that applets (and
 potentially multiple lightweight applications running in a single VM)
 can have their own setting. An applet can safely alter its default
 locale because it will have no affect on other applets (or the browser).

Returns:
the default Locale.
Since:
1.4
See Also:
setDefaultLocale(java.util.Locale), 
Component.getLocale(), 
Component.setLocale(java.util.Locale)


"
JComponent,getFontMetrics(Font font),FontMetrics,Gets the FontMetrics for the specified Font.,"

getFontMetrics
public FontMetrics getFontMetrics(Font font)
Gets the FontMetrics for the specified Font.

Overrides:
getFontMetrics in class Component
Parameters:
font - the font for which font metrics is to be
          obtained
Returns:
the font metrics for font
Throws:
NullPointerException - if font is null
Since:
1.5
See Also:
Component.getFont(), 
Component.getPeer(), 
ComponentPeer.getFontMetrics(Font), 
Toolkit.getFontMetrics(Font)


"
JComponent,getGraphics(),Graphics,"Returns this component's graphics context, which lets you draw on a component.","

getGraphics
public Graphics getGraphics()
Returns this component's graphics context, which lets you draw
 on a component. Use this method to get a Graphics object and
 then invoke operations on that object to draw on the component.

Overrides:
getGraphics in class Component
Returns:
this components graphics context
See Also:
Component.paint(java.awt.Graphics)


"
JComponent,getHeight(),int,Returns the current height of this component.,"

getHeight
public int getHeight()
Returns the current height of this component.
 This method is preferable to writing
 component.getBounds().height, or
 component.getSize().height because it doesn't cause any
 heap allocations.

Overrides:
getHeight in class Component
Returns:
the current height of this component


"
JComponent,getInheritsPopupMenu(),boolean,Returns true if the JPopupMenu should be inherited from the parent.,"

getInheritsPopupMenu
public boolean getInheritsPopupMenu()
Returns true if the JPopupMenu should be inherited from the parent.

Since:
1.5
See Also:
setComponentPopupMenu(javax.swing.JPopupMenu)


"
JComponent,getInputMap(),InputMap,Returns the InputMap that is used when the component has focus.,"

getInputMap
public final InputMap getInputMap()
Returns the InputMap that is used when the
 component has focus.
 This is convenience method for getInputMap(WHEN_FOCUSED).

Returns:
the InputMap used when the component has focus
Since:
1.3


"
JComponent,getInputMap(int condition),InputMap,Returns the InputMap that is used during condition.,"

getInputMap
public final InputMap getInputMap(int condition)
Returns the InputMap that is used during
 condition.

Parameters:
condition - one of WHEN_IN_FOCUSED_WINDOW, WHEN_FOCUSED,
        WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
Returns:
the InputMap for the specified
          condition
Since:
1.3


"
JComponent,getInputVerifier(),InputVerifier,Returns the input verifier for this component.,"

getInputVerifier
public InputVerifier getInputVerifier()
Returns the input verifier for this component.

Returns:
the inputVerifier property
Since:
1.3
See Also:
InputVerifier


"
JComponent,getInsets(),Insets,"If a border has been set on this component, returns the border's insets; otherwise calls super.getInsets.","

getInsets
public Insets getInsets()
If a border has been set on this component, returns the
 border's insets; otherwise calls super.getInsets.

Overrides:
getInsets in class Container
Returns:
the value of the insets property
See Also:
setBorder(javax.swing.border.Border)


"
JComponent,getInsets(Insets insets),Insets,Returns an Insets object containing this component's inset values.,"

getInsets
public Insets getInsets(Insets insets)
Returns an Insets object containing this component's inset
 values.  The passed-in Insets object will be reused
 if possible.
 Calling methods cannot assume that the same object will be returned,
 however.  All existing values within this object are overwritten.
 If insets is null, this will allocate a new one.

Parameters:
insets - the Insets object, which can be reused
Returns:
the Insets object
See Also:
getInsets()


"
JComponent,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this JComponent.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this JComponent.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 JComponent c
 for its mouse listeners with the following code:
 MouseListener[] mls = (MouseListener[])(c.getListeners(MouseListener.class));
 If no such listeners exist, this method returns an empty array.

Overrides:
getListeners in class Container
Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getVetoableChangeListeners(), 
getAncestorListeners()


"
JComponent,getLocation(Point rv),Point,"Stores the x,y origin of this component into ""return value"" rv and returns rv.","

getLocation
public Point getLocation(Point rv)
Stores the x,y origin of this component into ""return value""
 rv and returns rv.
 If rv is null a new Point
 is allocated.  This version of getLocation is useful
 if the caller wants to avoid allocating a new Point
 object on the heap.

Overrides:
getLocation in class Component
Parameters:
rv - the return value, modified to the component's location
Returns:
rv


"
JComponent,getMaximumSize(),Dimension,If the maximum size has been set to a non-null value just returns it.,"

getMaximumSize
public Dimension getMaximumSize()
If the maximum size has been set to a non-null value
 just returns it.  If the UI delegate's getMaximumSize
 method returns a non-null value then return that;
 otherwise defer to the component's layout manager.

Overrides:
getMaximumSize in class Container
Returns:
the value of the maximumSize property
See Also:
setMaximumSize(java.awt.Dimension), 
ComponentUI


"
JComponent,getMinimumSize(),Dimension,If the minimum size has been set to a non-null value just returns it.,"

getMinimumSize
public Dimension getMinimumSize()
If the minimum size has been set to a non-null value
 just returns it.  If the UI delegate's getMinimumSize
 method returns a non-null value then return that; otherwise
 defer to the component's layout manager.

Overrides:
getMinimumSize in class Container
Returns:
the value of the minimumSize property
See Also:
setMinimumSize(java.awt.Dimension), 
ComponentUI


"
JComponent,getNextFocusableComponent(),Component,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy.","

getNextFocusableComponent
@Deprecated
public Component getNextFocusableComponent()
Deprecated. As of 1.4, replaced by FocusTraversalPolicy.
In release 1.4, the focus subsystem was rearchitected.
 For more information, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.
 
 Returns the Component set by a prior call to
 setNextFocusableComponent(Component) on this
 JComponent.

Returns:
the Component that will follow this
        JComponent in the focus traversal cycle, or
        null if none has been explicitly specified
See Also:
setNextFocusableComponent(java.awt.Component)


"
JComponent,getPopupLocation(MouseEvent event),Point,Returns the preferred location to display the popup menu in this component's coordinate system.,"

getPopupLocation
public Point getPopupLocation(MouseEvent event)
Returns the preferred location to display the popup menu in this
 component's coordinate system. It is up to the look and feel to
 honor this property, some may choose to ignore it.
 If null, the look and feel will choose a suitable location.

Parameters:
event - the MouseEvent that triggered the popup to be
        shown, or null if the popup is not being shown as the
        result of a mouse event
Returns:
location to display the JPopupMenu, or null
Since:
1.5


"
JComponent,getPreferredSize(),Dimension,If the preferredSize has been set to a non-null value just returns it.,"

getPreferredSize
public Dimension getPreferredSize()
If the preferredSize has been set to a
 non-null value just returns it.
 If the UI delegate's getPreferredSize
 method returns a non null value then return that;
 otherwise defer to the component's layout manager.

Overrides:
getPreferredSize in class Container
Returns:
the value of the preferredSize property
See Also:
setPreferredSize(java.awt.Dimension), 
ComponentUI


"
JComponent,getRegisteredKeyStrokes(),KeyStroke[],Returns the KeyStrokes that will initiate registered actions.,"

getRegisteredKeyStrokes
public KeyStroke[] getRegisteredKeyStrokes()
Returns the KeyStrokes that will initiate
 registered actions.

Returns:
an array of KeyStroke objects
See Also:
registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JComponent,getRootPane(),JRootPane,Returns the JRootPane ancestor for this component.,"

getRootPane
public JRootPane getRootPane()
Returns the JRootPane ancestor for this component.

Returns:
the JRootPane that contains this component,
          or null if no JRootPane is found


"
JComponent,getSize(Dimension rv),Dimension,"Stores the width/height of this component into ""return value"" rv and returns rv.","

getSize
public Dimension getSize(Dimension rv)
Stores the width/height of this component into ""return value""
 rv and returns rv.
 If rv is null a new Dimension
 object is allocated.  This version of getSize
 is useful if the caller wants to avoid allocating a new
 Dimension object on the heap.

Overrides:
getSize in class Component
Parameters:
rv - the return value, modified to the component's size
Returns:
rv


"
JComponent,getToolTipLocation(MouseEvent event),Point,Returns the tooltip location in this component's coordinate system.,"

getToolTipLocation
public Point getToolTipLocation(MouseEvent event)
Returns the tooltip location in this component's coordinate system.
 If null is returned, Swing will choose a location.
 The default implementation returns null.

Parameters:
event - the MouseEvent that caused the
          ToolTipManager to show the tooltip
Returns:
always returns null


"
JComponent,getToolTipText(),String,Returns the tooltip string that has been set with setToolTipText.,"

getToolTipText
public String getToolTipText()
Returns the tooltip string that has been set with
 setToolTipText.

Returns:
the text of the tool tip
See Also:
TOOL_TIP_TEXT_KEY


"
JComponent,getToolTipText(MouseEvent event),String,Returns the string to be used as the tooltip for event.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Returns the string to be used as the tooltip for event.
 By default this returns any string set using
 setToolTipText.  If a component provides
 more extensive API to support differing tooltips at different locations,
 this method should be overridden.

"
JComponent,getTopLevelAncestor(),Container,"Returns the top-level ancestor of this component (either the containing Window or Applet), or null if this component has not been added to any container.","

getTopLevelAncestor
public Container getTopLevelAncestor()
Returns the top-level ancestor of this component (either the
 containing Window or Applet),
 or null if this component has not
 been added to any container.

Returns:
the top-level Container that this component is in,
          or null if not in any container


"
JComponent,getTransferHandler(),TransferHandler,Gets the transferHandler property.,"

getTransferHandler
public TransferHandler getTransferHandler()
Gets the transferHandler property.

Returns:
the value of the transferHandler property
Since:
1.4
See Also:
TransferHandler, 
setTransferHandler(javax.swing.TransferHandler)


"
JComponent,getUIClassID(),String,Returns the UIDefaults key used to look up the name of the swing.plaf.ComponentUI class that defines the look and feel for this component.,"

getUIClassID
public String getUIClassID()
Returns the UIDefaults key used to
 look up the name of the swing.plaf.ComponentUI
 class that defines the look and feel
 for this component.  Most applications will never need to
 call this method.  Subclasses of JComponent that support
 pluggable look and feel should override this method to
 return a UIDefaults key that maps to the
 ComponentUI subclass that defines their look and feel.

Returns:
the UIDefaults key for a
          ComponentUI subclass
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JComponent,getVerifyInputWhenFocusTarget(),boolean,Returns the value that indicates whether the input verifier for the current focus owner will be called before this component requests focus.,"

getVerifyInputWhenFocusTarget
public boolean getVerifyInputWhenFocusTarget()
Returns the value that indicates whether the input verifier for the
 current focus owner will be called before this component requests
 focus.

Returns:
value of the verifyInputWhenFocusTarget property
Since:
1.3
See Also:
InputVerifier, 
setInputVerifier(javax.swing.InputVerifier), 
getInputVerifier(), 
setVerifyInputWhenFocusTarget(boolean)


"
JComponent,getVetoableChangeListeners(),VetoableChangeListener[],Returns an array of all the vetoable change listeners registered on this component.,"

getVetoableChangeListeners
public VetoableChangeListener[] getVetoableChangeListeners()
Returns an array of all the vetoable change listeners
 registered on this component.

Returns:
all of the component's VetoableChangeListeners
         or an empty
         array if no vetoable change listeners are currently registered
Since:
1.4
See Also:
addVetoableChangeListener(java.beans.VetoableChangeListener), 
removeVetoableChangeListener(java.beans.VetoableChangeListener)


"
JComponent,getVisibleRect(),Rectangle,"Returns the Component's ""visible rectangle"" - the intersection of this component's visible rectangle, new Rectangle(0, 0, getWidth(), getHeight()), and all of its ancestors' visible rectangles.","

getVisibleRect
public Rectangle getVisibleRect()
Returns the Component's ""visible rectangle"" -  the
 intersection of this component's visible rectangle,
 new Rectangle(0, 0, getWidth(), getHeight()),
 and all of its ancestors' visible rectangles.

Returns:
the visible rectangle


"
JComponent,getWidth(),int,Returns the current width of this component.,"

getWidth
public int getWidth()
Returns the current width of this component.
 This method is preferable to writing
 component.getBounds().width, or
 component.getSize().width because it doesn't cause any
 heap allocations.

Overrides:
getWidth in class Component
Returns:
the current width of this component


"
JComponent,getX(),int,Returns the current x coordinate of the component's origin.,"

getX
public int getX()
Returns the current x coordinate of the component's origin.
 This method is preferable to writing
 component.getBounds().x, or
 component.getLocation().x because it doesn't cause any
 heap allocations.

Overrides:
getX in class Component
Returns:
the current x coordinate of the component's origin


"
JComponent,getY(),int,Returns the current y coordinate of the component's origin.,"

getY
public int getY()
Returns the current y coordinate of the component's origin.
 This method is preferable to writing
 component.getBounds().y, or
 component.getLocation().y because it doesn't cause any
 heap allocations.

Overrides:
getY in class Component
Returns:
the current y coordinate of the component's origin


"
JComponent,grabFocus(),void,"Requests that this Component get the input focus, and that this Component's top-level ancestor become the focused Window.","

grabFocus
public void grabFocus()
Requests that this Component get the input focus, and that this
 Component's top-level ancestor become the focused Window. This component
 must be displayable, visible, and focusable for the request to be
 granted.
 
 This method is intended for use by focus implementations. Client code
 should not use this method; instead, it should use
 requestFocusInWindow().

See Also:
requestFocusInWindow()


"
JComponent,hide(),void,Deprecated.,"

hide
@Deprecated
public void hide()
Deprecated. 

Overrides:
hide in class Component


"
JComponent,isDoubleBuffered(),boolean,Returns whether this component should use a buffer to paint.,"

isDoubleBuffered
public boolean isDoubleBuffered()
Returns whether this component should use a buffer to paint.

Overrides:
isDoubleBuffered in class Component
Returns:
true if this component is double buffered, otherwise false


"
JComponent,isLightweightComponent(Component c),static boolean,"Returns true if this component is lightweight, that is, if it doesn't have a native window system peer.","

isLightweightComponent
public static boolean isLightweightComponent(Component c)
Returns true if this component is lightweight, that is, if it doesn't
 have a native window system peer.

Returns:
true if this component is lightweight


"
JComponent,isManagingFocus(),boolean,"Deprecated. As of 1.4, replaced by Component.setFocusTraversalKeys(int, Set) and Container.setFocusCycleRoot(boolean).","

isManagingFocus
@Deprecated
public boolean isManagingFocus()
Deprecated. As of 1.4, replaced by
   Component.setFocusTraversalKeys(int, Set) and
   Container.setFocusCycleRoot(boolean).
In release 1.4, the focus subsystem was rearchitected.
 For more information, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.
 
 Changes this JComponent's focus traversal keys to
 CTRL+TAB and CTRL+SHIFT+TAB. Also prevents
 SortingFocusTraversalPolicy from considering descendants
 of this JComponent when computing a focus traversal cycle.

See Also:
Component.setFocusTraversalKeys(int, java.util.Set<? extends java.awt.AWTKeyStroke>), 
SortingFocusTraversalPolicy


"
JComponent,isOpaque(),boolean,Returns true if this component is completely opaque.,"

isOpaque
public boolean isOpaque()
Returns true if this component is completely opaque.
 
 An opaque component paints every pixel within its
 rectangular bounds. A non-opaque component paints only a subset of
 its pixels or none at all, allowing the pixels underneath it to
 ""show through"".  Therefore, a component that does not fully paint
 its pixels provides a degree of transparency.
 
 Subclasses that guarantee to always completely paint their contents
 should override this method and return true.

Overrides:
isOpaque in class Component
Returns:
true if this component is completely opaque
See Also:
setOpaque(boolean)


"
JComponent,isOptimizedDrawingEnabled(),boolean,"Returns true if this component tiles its children -- that is, if it can guarantee that the children will not overlap.","

isOptimizedDrawingEnabled
public boolean isOptimizedDrawingEnabled()
Returns true if this component tiles its children -- that is, if
 it can guarantee that the children will not overlap.  The
 repainting system is substantially more efficient in this
 common case.  JComponent subclasses that can't make this
 guarantee, such as JLayeredPane,
 should override this method to return false.

Returns:
always returns true


"
JComponent,isPaintingForPrint(),boolean,Returns true if the current painting operation on this component is part of a print operation.,"

isPaintingForPrint
public final boolean isPaintingForPrint()
Returns true if the current painting operation on this
 component is part of a print operation. This method is
 useful when you want to customize what you print versus what you show
 on the screen.
 
 You can detect changes in the value of this property by listening for
 property change events on this component with name
 ""paintingForPrint"".
 
 Note: This method provides complimentary functionality to that provided
 by other high level Swing printing APIs. However, it deals strictly with
 painting and should not be confused as providing information on higher
 level print processes. For example, a JTable.print()
 operation doesn't necessarily result in a continuous rendering of the
 full component, and the return value of this method can change multiple
 times during that operation. It is even possible for the component to be
 painted to the screen while the printing process is ongoing. In such a
 case, the return value of this method is true when, and only
 when, the table is being painted as part of the printing process.

Returns:
true if the current painting operation on this component
         is part of a print operation
Since:
1.6
See Also:
print(java.awt.Graphics)


"
JComponent,isPaintingOrigin(),protected boolean,"Returns true if a paint triggered on a child component should cause painting to originate from this Component, or one of its ancestors.","

isPaintingOrigin
protected boolean isPaintingOrigin()
Returns true if a paint triggered on a child component should cause
 painting to originate from this Component, or one of its ancestors.
 
 Calling repaint(long, int, int, int, int) or paintImmediately(int, int, int, int)
 on a Swing component will result in calling
 the paintImmediately(int, int, int, int) method of
 the first ancestor which isPaintingOrigin() returns true, if there are any.
 
JComponent subclasses that need to be painted when any of their
 children are repainted should override this method to return true.

Returns:
always returns false
See Also:
paintImmediately(int, int, int, int)


"
JComponent,isPaintingTile(),boolean,Returns true if the component is currently painting a tile.,"

isPaintingTile
public boolean isPaintingTile()
Returns true if the component is currently painting a tile.
  If this method returns true, paint will be called again for another
  tile. This method returns false if you are not painting a tile or
  if the last tile is painted.
  Use this method to keep some state you might need between tiles.

Returns:
true if the component is currently painting a tile,
          false otherwise


"
JComponent,isRequestFocusEnabled(),boolean,Returns true if this JComponent should get focus; otherwise returns false.,"

isRequestFocusEnabled
public boolean isRequestFocusEnabled()
Returns true if this JComponent should
 get focus; otherwise returns false.
 
 Please see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial,
 for more information.

Returns:
true if this component should get focus,
     otherwise returns false
See Also:
setRequestFocusEnabled(boolean), 
Focus
      Specification, 
Component.isFocusable()


"
JComponent,isValidateRoot(),boolean,"If this method returns true, revalidate calls by descendants of this component will cause the entire tree beginning with this root to be validated.","

isValidateRoot
public boolean isValidateRoot()
If this method returns true, revalidate calls by
 descendants of this component will cause the entire tree
 beginning with this root to be validated.
 Returns false by default.  JScrollPane overrides
 this method and returns true.

Overrides:
isValidateRoot in class Container
Returns:
always returns false
See Also:
revalidate(), 
Component.invalidate(), 
Container.validate(), 
Container.isValidateRoot()


"
JComponent,paint(Graphics g),void,Invoked by Swing to draw components.,"

paint
public void paint(Graphics g)
Invoked by Swing to draw components.
 Applications should not invoke paint directly,
 but should instead use the repaint method to
 schedule the component for redrawing.
 
 This method actually delegates the work of painting to three
 protected methods: paintComponent,
 paintBorder,
 and paintChildren.  They're called in the order
 listed to ensure that children appear on top of component itself.
 Generally speaking, the component and its children should not
 paint in the insets area allocated to the border. Subclasses can
 just override this method, as always.  A subclass that just
 wants to specialize the UI (look and feel) delegate's
 paint method should just override
 paintComponent.

Overrides:
paint in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
paintComponent(java.awt.Graphics), 
paintBorder(java.awt.Graphics), 
paintChildren(java.awt.Graphics), 
getComponentGraphics(java.awt.Graphics), 
repaint(long, int, int, int, int)


"
JComponent,paintBorder(Graphics g),protected void,Paints the component's border.,"

paintBorder
protected void paintBorder(Graphics g)
Paints the component's border.
 
 If you override this in a subclass you should not make permanent
 changes to the passed in Graphics. For example, you
 should not alter the clip Rectangle or modify the
 transform. If you need to do these operations you may find it
 easier to create a new Graphics from the passed in
 Graphics and manipulate it.

Parameters:
g - the Graphics context in which to paint
See Also:
paint(java.awt.Graphics), 
setBorder(javax.swing.border.Border)


"
JComponent,paintChildren(Graphics g),protected void,Paints this component's children.,"

paintChildren
protected void paintChildren(Graphics g)
Paints this component's children.
 If shouldUseBuffer is true,
 no component ancestor has a buffer and
 the component children can use a buffer if they have one.
 Otherwise, one ancestor has a buffer currently in use and children
 should not use a buffer to paint.

Parameters:
g - the Graphics context in which to paint
See Also:
paint(java.awt.Graphics), 
Container.paint(java.awt.Graphics)


"
JComponent,paintComponent(Graphics g),protected void,"Calls the UI delegate's paint method, if the UI delegate is non-null.","

paintComponent
protected void paintComponent(Graphics g)
Calls the UI delegate's paint method, if the UI delegate
 is non-null.  We pass the delegate a copy of the
 Graphics object to protect the rest of the
 paint code from irrevocable changes
 (for example, Graphics.translate).
 
 If you override this in a subclass you should not make permanent
 changes to the passed in Graphics. For example, you
 should not alter the clip Rectangle or modify the
 transform. If you need to do these operations you may find it
 easier to create a new Graphics from the passed in
 Graphics and manipulate it. Further, if you do not
 invoker super's implementation you must honor the opaque property,
 that is
 if this component is opaque, you must completely fill in the background
 in a non-opaque color. If you do not honor the opaque property you
 will likely see visual artifacts.
 
 The passed in Graphics object might
 have a transform other than the identify transform
 installed on it.  In this case, you might get
 unexpected results if you cumulatively apply
 another transform.

Parameters:
g - the Graphics object to protect
See Also:
paint(java.awt.Graphics), 
ComponentUI


"
JComponent,"paintImmediately(int x, int y, int w, int h)",void,"Paints the specified region in this component and all of its descendants that overlap the region, immediately.","

paintImmediately
public void paintImmediately(int x,
                             int y,
                             int w,
                             int h)
Paints the specified region in this component and all of its
 descendants that overlap the region, immediately.
 
 It's rarely necessary to call this method.  In most cases it's
 more efficient to call repaint, which defers the actual painting
 and can collapse redundant requests into a single paint call.
 This method is useful if one needs to update the display while
 the current event is being dispatched.
 
 This method is to be overridden when the dirty region needs to be changed
 for components that are painting origins.

Parameters:
x - the x value of the region to be painted
y - the y value of the region to be painted
w - the width of the region to be painted
h - the height of the region to be painted
See Also:
repaint(long, int, int, int, int), 
isPaintingOrigin()


"
JComponent,paintImmediately(Rectangle r),void,Paints the specified region now.,"

paintImmediately
public void paintImmediately(Rectangle r)
Paints the specified region now.

Parameters:
r - a Rectangle containing the region to be painted


"
JComponent,paramString(),protected String,Returns a string representation of this JComponent.,"

paramString
protected String paramString()
Returns a string representation of this JComponent.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class Container
Returns:
a string representation of this JComponent


"
JComponent,print(Graphics g),void,Invoke this method to print the component to the specified Graphics.,"

print
public void print(Graphics g)
Invoke this method to print the component to the specified
 Graphics. This method will result in invocations
 of printComponent, printBorder and
 printChildren. It is recommended that you override
 one of the previously mentioned methods rather than this one if
 your intention is to customize the way printing looks. However,
 it can be useful to override this method should you want to prepare
 state before invoking the superclass behavior. As an example,
 if you wanted to change the component's background color before
 printing, you could do the following:
 
     public void print(Graphics g) {
         Color orig = getBackground();
         setBackground(Color.WHITE);

         // wrap in try/finally so that we always restore the state
         try {
             super.print(g);
         } finally {
             setBackground(orig);
         }
     }
 

 Alternatively, or for components that delegate painting to other objects,
 you can query during painting whether or not the component is in the
 midst of a print operation. The isPaintingForPrint method provides
 this ability and its return value will be changed by this method: to
 true immediately before rendering and to false
 immediately after. With each change a property change event is fired on
 this component with the name ""paintingForPrint"".
 
 This method sets the component's state such that the double buffer
 will not be used: painting will be done directly on the passed in
 Graphics.

Overrides:
print in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
printComponent(java.awt.Graphics), 
printBorder(java.awt.Graphics), 
printChildren(java.awt.Graphics), 
isPaintingForPrint()


"
JComponent,printAll(Graphics g),void,Invoke this method to print the component.,"

printAll
public void printAll(Graphics g)
Invoke this method to print the component. This method invokes
 print on the component.

Overrides:
printAll in class Component
Parameters:
g - the Graphics context in which to paint
See Also:
print(java.awt.Graphics), 
printComponent(java.awt.Graphics), 
printBorder(java.awt.Graphics), 
printChildren(java.awt.Graphics)


"
JComponent,printBorder(Graphics g),protected void,Prints the component's border.,"

printBorder
protected void printBorder(Graphics g)
Prints the component's border. This is implemented to invoke
 paintBorder on the component. Override this if you
 wish to print the border differently that it is painted.

Parameters:
g - the Graphics context in which to paint
Since:
1.3
See Also:
print(java.awt.Graphics)


"
JComponent,printChildren(Graphics g),protected void,Prints this component's children.,"

printChildren
protected void printChildren(Graphics g)
Prints this component's children. This is implemented to invoke
 paintChildren on the component. Override this if you
 wish to print the children differently than painting.

Parameters:
g - the Graphics context in which to paint
Since:
1.3
See Also:
print(java.awt.Graphics)


"
JComponent,printComponent(Graphics g),protected void,This is invoked during a printing operation.,"

printComponent
protected void printComponent(Graphics g)
This is invoked during a printing operation. This is implemented to
 invoke paintComponent on the component. Override this
 if you wish to add special painting behavior when printing.

Parameters:
g - the Graphics context in which to paint
Since:
1.3
See Also:
print(java.awt.Graphics)


"
JComponent,processComponentKeyEvent(KeyEvent e),protected void,Processes any key events that the component itself recognizes.,"

processComponentKeyEvent
protected void processComponentKeyEvent(KeyEvent e)
Processes any key events that the component itself
 recognizes.  This is called after the focus
 manager and any interested listeners have been
 given a chance to steal away the event.  This
 method is called only if the event has not
 yet been consumed.  This method is called prior
 to the keyboard UI logic.
 
 This method is implemented to do nothing.  Subclasses would
 normally override this method if they process some
 key events themselves.  If the event is processed,
 it should be consumed.

"
JComponent,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.,"

processKeyBinding
protected boolean processKeyBinding(KeyStroke ks,
                                    KeyEvent e,
                                    int condition,
                                    boolean pressed)
Invoked to process the key bindings for ks as the result
 of the KeyEvent e. This obtains
 the appropriate InputMap,
 gets the binding, gets the action from the ActionMap,
 and then (if the action is found and the component
 is enabled) invokes notifyAction to notify the action.

Parameters:
ks - the KeyStroke queried
e - the KeyEvent
condition - one of the following values:
 
JComponent.WHEN_FOCUSED
 JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 JComponent.WHEN_IN_FOCUSED_WINDOW
 
pressed - true if the key is pressed
Returns:
true if there was a binding to an action, and the action
         was enabled
Since:
1.3


"
JComponent,processKeyEvent(KeyEvent e),protected void,Overrides processKeyEvent to process events.,"

processKeyEvent
protected void processKeyEvent(KeyEvent e)
Overrides processKeyEvent to process events.

Overrides:
processKeyEvent in class Component
Parameters:
e - the key event
See Also:
KeyEvent, 
KeyListener, 
KeyboardFocusManager, 
DefaultKeyboardFocusManager, 
Component.processEvent(java.awt.AWTEvent), 
Component.dispatchEvent(java.awt.AWTEvent), 
Component.addKeyListener(java.awt.event.KeyListener), 
Component.enableEvents(long), 
Component.isShowing()


"
JComponent,processMouseEvent(MouseEvent e),protected void,"Processes mouse events occurring on this component by dispatching them to any registered MouseListener objects, refer to Component.processMouseEvent(MouseEvent) for a complete description of this method.","

processMouseEvent
protected void processMouseEvent(MouseEvent e)
Processes mouse events occurring on this component by
 dispatching them to any registered
 MouseListener objects, refer to
 Component.processMouseEvent(MouseEvent)
 for a complete description of this method.

Overrides:
processMouseEvent in class Component
Parameters:
e - the mouse event
Since:
1.5
See Also:
Component.processMouseEvent(java.awt.event.MouseEvent)


"
JComponent,processMouseMotionEvent(MouseEvent e),protected void,"Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.","

processMouseMotionEvent
protected void processMouseMotionEvent(MouseEvent e)
Processes mouse motion events, such as MouseEvent.MOUSE_DRAGGED.

Overrides:
processMouseMotionEvent in class Component
Parameters:
e - the MouseEvent
See Also:
MouseEvent


"
JComponent,"putClientProperty(Object key, Object value)",void,"Adds an arbitrary key/value ""client property"" to this component.","

putClientProperty
public final void putClientProperty(Object key,
                                    Object value)
Adds an arbitrary key/value ""client property"" to this component.
 
 The get/putClientProperty methods provide access to
 a small per-instance hashtable. Callers can use get/putClientProperty
 to annotate components that were created by another module.
 For example, a
 layout manager might store per child constraints this way. For example:
 
 componentA.putClientProperty(""to the left of"", componentB);
 
 If value is null this method will remove the property.
 Changes to client properties are reported with
 PropertyChange events.
 The name of the property (for the sake of PropertyChange
 events) is key.toString().
 
 The clientProperty dictionary is not intended to
 support large
 scale extensions to JComponent nor should be it considered an
 alternative to subclassing when designing a new component.

Parameters:
key - the new client property key
value - the new client property value; if null
          this method will remove the property
See Also:
getClientProperty(java.lang.Object), 
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JComponent,"registerKeyboardAction(ActionListener anAction, KeyStroke aKeyStroke, int aCondition)",void,"This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.","

registerKeyboardAction
public void registerKeyboardAction(ActionListener anAction,
                                   KeyStroke aKeyStroke,
                                   int aCondition)
This method is now obsolete, please use a combination of
 getActionMap() and getInputMap() for
 similar behavior.

"
JComponent,"registerKeyboardAction(ActionListener anAction, String aCommand, KeyStroke aKeyStroke, int aCondition)",void,"This method is now obsolete, please use a combination of getActionMap() and getInputMap() for similar behavior.","

registerKeyboardAction
public void registerKeyboardAction(ActionListener anAction,
                                   String aCommand,
                                   KeyStroke aKeyStroke,
                                   int aCondition)
This method is now obsolete, please use a combination of
 getActionMap() and getInputMap() for
 similar behavior. For example, to bind the KeyStroke
aKeyStroke to the Action anAction
 now use:
 
   component.getInputMap().put(aKeyStroke, aCommand);
   component.getActionMap().put(aCommmand, anAction);
 
 The above assumes you want the binding to be applicable for
 WHEN_FOCUSED. To register bindings for other focus
 states use the getInputMap method that takes an integer.
 
 Register a new keyboard action.
 anAction will be invoked if a key event matching
 aKeyStroke occurs and aCondition is verified.
 The KeyStroke object defines a
 particular combination of a keyboard key and one or more modifiers
 (alt, shift, ctrl, meta).
 
 The aCommand will be set in the delivered event if
 specified.
 
 The aCondition can be one of:
 

WHEN_FOCUSED
 The action will be invoked only when the keystroke occurs
     while the component has the focus.
 WHEN_IN_FOCUSED_WINDOW
 The action will be invoked when the keystroke occurs while
     the component has the focus or if the component is in the
     window that has the focus. Note that the component need not
     be an immediate descendent of the window -- it can be
     anywhere in the window's containment hierarchy. In other
     words, whenever any component in the window has the focus,
     the action registered with this component is invoked.
 WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 The action will be invoked when the keystroke occurs while the
     component has the focus or if the component is an ancestor of
     the component that has the focus.
 


 The combination of keystrokes and conditions lets you define high
 level (semantic) action events for a specified keystroke+modifier
 combination (using the KeyStroke class) and direct to a parent or
 child of a component that has the focus, or to the component itself.
 In other words, in any hierarchical structure of components, an
 arbitrary key-combination can be immediately directed to the
 appropriate component in the hierarchy, and cause a specific method
 to be invoked (usually by way of adapter objects).
 
 If an action has already been registered for the receiving
 container, with the same charCode and the same modifiers,
 anAction will replace the action.

Parameters:
anAction - the Action to be registered
aCommand - the command to be set in the delivered event
aKeyStroke - the KeyStroke to bind to the action
aCondition - the condition that needs to be met, see above
See Also:
KeyStroke


"
JComponent,removeAncestorListener(AncestorListener listener),void,Unregisters listener so that it will no longer receive AncestorEvents.,"

removeAncestorListener
public void removeAncestorListener(AncestorListener listener)
Unregisters listener so that it will no longer receive
 AncestorEvents.

Parameters:
listener - the AncestorListener to be removed
See Also:
addAncestorListener(javax.swing.event.AncestorListener)


"
JComponent,removeNotify(),void,Notifies this component that it no longer has a parent component.,"

removeNotify
public void removeNotify()
Notifies this component that it no longer has a parent component.
 When this method is invoked, any KeyboardActions
 set up in the the chain of parent components are removed.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
removeNotify in class Container
See Also:
registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JComponent,removeVetoableChangeListener(VetoableChangeListener listener),void,Removes a VetoableChangeListener from the listener list.,"

removeVetoableChangeListener
public void removeVetoableChangeListener(VetoableChangeListener listener)
Removes a VetoableChangeListener from the listener list.
 This removes a VetoableChangeListener that was registered
 for all properties.

Parameters:
listener - the VetoableChangeListener to be removed


"
JComponent,"repaint(long tm, int x, int y, int width, int height)",void,Adds the specified region to the dirty region list if the component is showing.,"

repaint
public void repaint(long tm,
                    int x,
                    int y,
                    int width,
                    int height)
Adds the specified region to the dirty region list if the component
 is showing.  The component will be repainted after all of the
 currently pending events have been dispatched.

Overrides:
repaint in class Component
Parameters:
tm - this parameter is not used
x - the x value of the dirty region
y - the y value of the dirty region
width - the width of the dirty region
height - the height of the dirty region
See Also:
isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
JComponent,repaint(Rectangle r),void,Adds the specified region to the dirty region list if the component is showing.,"

repaint
public void repaint(Rectangle r)
Adds the specified region to the dirty region list if the component
 is showing.  The component will be repainted after all of the
 currently pending events have been dispatched.

Parameters:
r - a Rectangle containing the dirty region
See Also:
isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
JComponent,requestDefaultFocus(),boolean,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()","

requestDefaultFocus
@Deprecated
public boolean requestDefaultFocus()
Deprecated. As of 1.4, replaced by
 FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()
In release 1.4, the focus subsystem was rearchitected.
 For more information, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.
 
 Requests focus on this JComponent's
 FocusTraversalPolicy's default Component.
 If this JComponent is a focus cycle root, then its
 FocusTraversalPolicy is used. Otherwise, the
 FocusTraversalPolicy of this JComponent's
 focus-cycle-root ancestor is used.

See Also:
FocusTraversalPolicy.getDefaultComponent(java.awt.Container)


"
JComponent,requestFocus(),void,Requests that this Component gets the input focus.,"

requestFocus
public void requestFocus()
Requests that this Component gets the input focus.
 Refer to Component.requestFocus() for a complete description of
 this method.
 
 Note that the use of this method is discouraged because
 its behavior is platform dependent. Instead we recommend the
 use of requestFocusInWindow().
 If you would like more information on focus, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.

Overrides:
requestFocus in class Component
Since:
1.4
See Also:
Component.requestFocusInWindow(), 
Component.requestFocusInWindow(boolean)


"
JComponent,requestFocus(boolean temporary),boolean,Requests that this Component gets the input focus.,"

requestFocus
public boolean requestFocus(boolean temporary)
Requests that this Component gets the input focus.
 Refer to Component.requestFocus(boolean) for a complete description of
 this method.
 
 Note that the use of this method is discouraged because
 its behavior is platform dependent. Instead we recommend the
 use of requestFocusInWindow(boolean).
 If you would like more information on focus, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.

Overrides:
requestFocus in class Component
Parameters:
temporary - boolean indicating if the focus change is temporary
Returns:
false if the focus change request is guaranteed to
         fail; true if it is likely to succeed
Since:
1.4
See Also:
Component.requestFocusInWindow(), 
Component.requestFocusInWindow(boolean)


"
JComponent,requestFocusInWindow(),boolean,Requests that this Component gets the input focus.,"

requestFocusInWindow
public boolean requestFocusInWindow()
Requests that this Component gets the input focus.
 Refer to Component.requestFocusInWindow() for a complete description of
 this method.
 
 If you would like more information on focus, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.

Overrides:
requestFocusInWindow in class Component
Returns:
false if the focus change request is guaranteed to
         fail; true if it is likely to succeed
Since:
1.4
See Also:
Component.requestFocusInWindow(), 
Component.requestFocusInWindow(boolean)


"
JComponent,requestFocusInWindow(boolean temporary),protected boolean,Requests that this Component gets the input focus.,"

requestFocusInWindow
protected boolean requestFocusInWindow(boolean temporary)
Requests that this Component gets the input focus.
 Refer to Component.requestFocusInWindow(boolean) for a complete description of
 this method.
 
 If you would like more information on focus, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.

Overrides:
requestFocusInWindow in class Component
Parameters:
temporary - boolean indicating if the focus change is temporary
Returns:
false if the focus change request is guaranteed to
         fail; true if it is likely to succeed
Since:
1.4
See Also:
Component.requestFocusInWindow(), 
Component.requestFocusInWindow(boolean)


"
JComponent,resetKeyboardActions(),void,Unregisters all the bindings in the first tier InputMaps and ActionMap.,"

resetKeyboardActions
public void resetKeyboardActions()
Unregisters all the bindings in the first tier InputMaps
 and ActionMap. This has the effect of removing any
 local bindings, and allowing the bindings defined in parent
 InputMap/ActionMaps
 (the UI is usually defined in the second tier) to persist.

"
JComponent,"reshape(int x, int y, int w, int h)",void,"Deprecated. As of JDK 5, replaced by Component.setBounds(int, int, int, int). Moves and resizes this component.","

reshape
@Deprecated
public void reshape(int x,
                                int y,
                                int w,
                                int h)
Deprecated. As of JDK 5,
 replaced by Component.setBounds(int, int, int, int).
 
 Moves and resizes this component.

Overrides:
reshape in class Component
Parameters:
x - the new horizontal location
y - the new vertical location
w - the new width
h - the new height
See Also:
Component.setBounds(int, int, int, int)


"
JComponent,revalidate(),void,Supports deferred automatic layout.,"

revalidate
public void revalidate()
Supports deferred automatic layout.
 
 Calls invalidate and then adds this component's
 validateRoot to a list of components that need to be
 validated.  Validation will occur after all currently pending
 events have been dispatched.  In other words after this method
 is called,  the first validateRoot (if any) found when walking
 up the containment hierarchy of this component will be validated.
 By default, JRootPane, JScrollPane,
 and JTextField return true
 from isValidateRoot.
 
 This method will automatically be called on this component
 when a property value changes such that size, location, or
 internal layout of this component has been affected.  This automatic
 updating differs from the AWT because programs generally no
 longer need to invoke validate to get the contents of the
 GUI to update.

Overrides:
revalidate in class Component
See Also:
Component.invalidate(), 
Container.validate(), 
isValidateRoot(), 
RepaintManager.addInvalidComponent(javax.swing.JComponent)


"
JComponent,scrollRectToVisible(Rectangle aRect),void,Forwards the scrollRectToVisible() message to the JComponent's parent.,"

scrollRectToVisible
public void scrollRectToVisible(Rectangle aRect)
Forwards the scrollRectToVisible() message to the
 JComponent's parent. Components that can service
 the request, such as JViewport,
 override this method and perform the scrolling.

Parameters:
aRect - the visible Rectangle
See Also:
JViewport


"
JComponent,setActionMap(ActionMap am),void,Sets the ActionMap to am.,"

setActionMap
public final void setActionMap(ActionMap am)
Sets the ActionMap to am. This does not set
 the parent of the am to be the ActionMap
 from the UI (if there was one), it is up to the caller to have done this.

Parameters:
am - the new ActionMap
Since:
1.3


"
JComponent,setAlignmentX(float alignmentX),void,Sets the the vertical alignment.,"

setAlignmentX
public void setAlignmentX(float alignmentX)
Sets the the vertical alignment.

Parameters:
alignmentX - the new vertical alignment
See Also:
getAlignmentX()


"
JComponent,setAlignmentY(float alignmentY),void,Sets the the horizontal alignment.,"

setAlignmentY
public void setAlignmentY(float alignmentY)
Sets the the horizontal alignment.

Parameters:
alignmentY - the new horizontal alignment
See Also:
getAlignmentY()


"
JComponent,setAutoscrolls(boolean autoscrolls),void,Sets the autoscrolls property.,"

setAutoscrolls
public void setAutoscrolls(boolean autoscrolls)
Sets the autoscrolls property.
 If true mouse dragged events will be
 synthetically generated when the mouse is dragged
 outside of the component's bounds and mouse motion
 has paused (while the button continues to be held
 down). The synthetic events make it appear that the
 drag gesture has resumed in the direction established when
 the component's boundary was crossed.  Components that
 support autoscrolling must handle mouseDragged
 events by calling scrollRectToVisible with a
 rectangle that contains the mouse event's location.  All of
 the Swing components that support item selection and are
 typically displayed in a JScrollPane
 (JTable, JList, JTree,
 JTextArea, and JEditorPane)
 already handle mouse dragged events in this way.  To enable
 autoscrolling in any other component, add a mouse motion
 listener that calls scrollRectToVisible.
 For example, given a JPanel, myPanel:
 
 MouseMotionListener doScrollRectToVisible = new MouseMotionAdapter() {
     public void mouseDragged(MouseEvent e) {
        Rectangle r = new Rectangle(e.getX(), e.getY(), 1, 1);
        ((JPanel)e.getSource()).scrollRectToVisible(r);
    }
 };
 myPanel.addMouseMotionListener(doScrollRectToVisible);
 
 The default value of the autoScrolls
 property is false.

Parameters:
autoscrolls - if true, synthetic mouse dragged events
   are generated when the mouse is dragged outside of a component's
   bounds and the mouse button continues to be held down; otherwise
   false
See Also:
getAutoscrolls(), 
JViewport, 
JScrollPane


"
JComponent,setBackground(Color bg),void,Sets the background color of this component.,"

setBackground
public void setBackground(Color bg)
Sets the background color of this component.  The background
 color is used only if the component is opaque, and only
 by subclasses of JComponent or
 ComponentUI implementations.  Direct subclasses of
 JComponent must override
 paintComponent to honor this property.
 
 It is up to the look and feel to honor this property, some may
 choose to ignore it.

Overrides:
setBackground in class Component
Parameters:
bg - the desired background Color
See Also:
Component.getBackground(), 
setOpaque(boolean)


"
JComponent,setBorder(Border border),void,Sets the border of this component.,"

setBorder
public void setBorder(Border border)
Sets the border of this component.  The Border object is
 responsible for defining the insets for the component
 (overriding any insets set directly on the component) and
 for optionally rendering any border decorations within the
 bounds of those insets.  Borders should be used (rather
 than insets) for creating both decorative and non-decorative
 (such as margins and padding) regions for a swing component.
 Compound borders can be used to nest multiple borders within a
 single component.
 
 Although technically you can set the border on any object
 that inherits from JComponent, the look and
 feel implementation of many standard Swing components
 doesn't work well with user-set borders.  In general,
 when you want to set a border on a standard Swing
 component other than JPanel or JLabel,
 we recommend that you put the component in a JPanel
 and set the border on the JPanel.
 
 This is a bound property.

Parameters:
border - the border to be rendered for this component
See Also:
Border, 
CompoundBorder


"
JComponent,setComponentPopupMenu(JPopupMenu popup),void,Sets the JPopupMenu for this JComponent.,"

setComponentPopupMenu
public void setComponentPopupMenu(JPopupMenu popup)
Sets the JPopupMenu for this JComponent.
 The UI is responsible for registering bindings and adding the necessary
 listeners such that the JPopupMenu will be shown at
 the appropriate time. When the JPopupMenu is shown
 depends upon the look and feel: some may show it on a mouse event,
 some may enable a key binding.
 
 If popup is null, and getInheritsPopupMenu
 returns true, then getComponentPopupMenu will be delegated
 to the parent. This provides for a way to make all child components
 inherit the popupmenu of the parent.
 
 This is a bound property.

Parameters:
popup - - the popup that will be assigned to this component
                may be null
Since:
1.5
See Also:
getComponentPopupMenu()


"
JComponent,setDebugGraphicsOptions(int debugOptions),void,Enables or disables diagnostic information about every graphics operation performed within the component or one of its children.,"

setDebugGraphicsOptions
public void setDebugGraphicsOptions(int debugOptions)
Enables or disables diagnostic information about every graphics
 operation performed within the component or one of its children.

Parameters:
debugOptions - determines how the component should display
         the information;  one of the following options:
 
DebugGraphics.LOG_OPTION - causes a text message to be printed.
 DebugGraphics.FLASH_OPTION - causes the drawing to flash several
 times.
 DebugGraphics.BUFFERED_OPTION - creates an
         ExternalWindow that displays the operations
         performed on the View's offscreen buffer.
 DebugGraphics.NONE_OPTION disables debugging.
 A value of 0 causes no changes to the debugging options.
 
debugOptions is bitwise OR'd into the current value


"
JComponent,setDefaultLocale(Locale l),static void,Sets the default locale used to initialize each JComponent's locale property upon creation.,"

setDefaultLocale
public static void setDefaultLocale(Locale l)
Sets the default locale used to initialize each JComponent's locale
 property upon creation.  The initial value is the VM's default locale.

 The default locale has ""AppContext"" scope so that applets (and
 potentially multiple lightweight applications running in a single VM)
 can have their own setting. An applet can safely alter its default
 locale because it will have no affect on other applets (or the browser).

Parameters:
l - the desired default Locale for new components.
Since:
1.4
See Also:
getDefaultLocale(), 
Component.getLocale(), 
Component.setLocale(java.util.Locale)


"
JComponent,setDoubleBuffered(boolean aFlag),void,Sets whether this component should use a buffer to paint.,"

setDoubleBuffered
public void setDoubleBuffered(boolean aFlag)
Sets whether this component should use a buffer to paint.
  If set to true, all the drawing from this component will be done
  in an offscreen painting buffer. The offscreen painting buffer will
  the be copied onto the screen.
  If a Component is buffered and one of its ancestor
  is also buffered, the ancestor buffer will be used.

Parameters:
aFlag - if true, set this component to be double buffered


"
JComponent,setEnabled(boolean enabled),void,Sets whether or not this component is enabled.,"

setEnabled
public void setEnabled(boolean enabled)
Sets whether or not this component is enabled.
 A component that is enabled may respond to user input,
 while a component that is not enabled cannot respond to
 user input.  Some components may alter their visual
 representation when they are disabled in order to
 provide feedback to the user that they cannot take input.
 Note: Disabling a component does not disable its children.

 Note: Disabling a lightweight component does not prevent it from
 receiving MouseEvents.

Overrides:
setEnabled in class Component
Parameters:
enabled - true if this component should be enabled, false otherwise
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
JComponent,"setFocusTraversalKeys(int id, Set<? extends AWTKeyStroke> keystrokes)",void,Sets the focus traversal keys for a given traversal operation for this Component.,"

setFocusTraversalKeys
public void setFocusTraversalKeys(int id,
                                  Set<? extends AWTKeyStroke> keystrokes)
Sets the focus traversal keys for a given traversal operation for this
 Component.
 Refer to
 Component.setFocusTraversalKeys(int, java.util.Set<? extends java.awt.AWTKeyStroke>)
 for a complete description of this method.
 
 This method may throw a ClassCastException if any Object
 in keystrokes is not an AWTKeyStroke.

Overrides:
setFocusTraversalKeys in class Container
Parameters:
id - one of KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
        KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
        KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS
keystrokes - the Set of AWTKeyStroke for the specified operation
Throws:
IllegalArgumentException - if id is not one of
         KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
         KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, or
         KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS, or if keystrokes
         contains null, or if any keystroke represents a KEY_TYPED event,
         or if any keystroke already maps to another focus traversal
         operation for this Component
Since:
1.5
See Also:
KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, 
KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, 
KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS


"
JComponent,setFont(Font font),void,Sets the font for this component.,"

setFont
public void setFont(Font font)
Sets the font for this component.

Overrides:
setFont in class Container
Parameters:
font - the desired Font for this component
See Also:
Component.getFont()


"
JComponent,setForeground(Color fg),void,Sets the foreground color of this component.,"

setForeground
public void setForeground(Color fg)
Sets the foreground color of this component.  It is up to the
 look and feel to honor this property, some may choose to ignore
 it.

Overrides:
setForeground in class Component
Parameters:
fg - the desired foreground Color
See Also:
Component.getForeground()


"
JComponent,setInheritsPopupMenu(boolean value),void,Sets whether or not getComponentPopupMenu should delegate to the parent if this component does not have a JPopupMenu assigned to it.,"

setInheritsPopupMenu
public void setInheritsPopupMenu(boolean value)
Sets whether or not getComponentPopupMenu should delegate
 to the parent if this component does not have a JPopupMenu
 assigned to it.
 
 The default value for this is false, but some JComponent
 subclasses that are implemented as a number of JComponents
 may set this to true.
 
 This is a bound property.

Parameters:
value - whether or not the JPopupMenu is inherited
Since:
1.5
See Also:
setComponentPopupMenu(javax.swing.JPopupMenu)


"
JComponent,"setInputMap(int condition, InputMap map)",void,Sets the InputMap to use under the condition condition to map.,"

setInputMap
public final void setInputMap(int condition,
                              InputMap map)
Sets the InputMap to use under the condition
 condition to
 map. A null value implies you
 do not want any bindings to be used, even from the UI. This will
 not reinstall the UI InputMap (if there was one).
 condition has one of the following values:
 
WHEN_IN_FOCUSED_WINDOW
WHEN_FOCUSED
WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

 If condition is WHEN_IN_FOCUSED_WINDOW
 and map is not a ComponentInputMap, an
 IllegalArgumentException will be thrown.
 Similarly, if condition is not one of the values
 listed, an IllegalArgumentException will be thrown.

Parameters:
condition - one of the values listed above
map - the InputMap to use for the given condition
Throws:
IllegalArgumentException - if condition is
          WHEN_IN_FOCUSED_WINDOW and map
          is not an instance of ComponentInputMap; or
          if condition is not one of the legal values
          specified above
Since:
1.3


"
JComponent,setInputVerifier(InputVerifier inputVerifier),void,Sets the input verifier for this component.,"

setInputVerifier
public void setInputVerifier(InputVerifier inputVerifier)
Sets the input verifier for this component.

Parameters:
inputVerifier - the new input verifier
Since:
1.3
See Also:
InputVerifier


"
JComponent,setMaximumSize(Dimension maximumSize),void,Sets the maximum size of this component to a constant value.,"

setMaximumSize
public void setMaximumSize(Dimension maximumSize)
Sets the maximum size of this component to a constant
 value.  Subsequent calls to getMaximumSize will always
 return this value; the component's UI will not be asked
 to compute it.  Setting the maximum size to null
 restores the default behavior.

Overrides:
setMaximumSize in class Component
Parameters:
maximumSize - a Dimension containing the
          desired maximum allowable size
See Also:
getMaximumSize()


"
JComponent,setMinimumSize(Dimension minimumSize),void,Sets the minimum size of this component to a constant value.,"

setMinimumSize
public void setMinimumSize(Dimension minimumSize)
Sets the minimum size of this component to a constant
 value.  Subsequent calls to getMinimumSize will always
 return this value; the component's UI will not be asked
 to compute it.  Setting the minimum size to null
 restores the default behavior.

Overrides:
setMinimumSize in class Component
Parameters:
minimumSize - the new minimum size of this component
See Also:
getMinimumSize()


"
JComponent,setNextFocusableComponent(Component aComponent),void,"Deprecated. As of 1.4, replaced by FocusTraversalPolicy","

setNextFocusableComponent
@Deprecated
public void setNextFocusableComponent(Component aComponent)
Deprecated. As of 1.4, replaced by FocusTraversalPolicy
In release 1.4, the focus subsystem was rearchitected.
 For more information, see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial.
 
 Overrides the default FocusTraversalPolicy for this
 JComponent's focus traversal cycle by unconditionally
 setting the specified Component as the next
 Component in the cycle, and this JComponent
 as the specified Component's previous
 Component in the cycle.

Parameters:
aComponent - the Component that should follow this
        JComponent in the focus traversal cycle
See Also:
getNextFocusableComponent(), 
FocusTraversalPolicy


"
JComponent,setOpaque(boolean isOpaque),void,If true the component paints every pixel within its bounds.,"

setOpaque
public void setOpaque(boolean isOpaque)
If true the component paints every pixel within its bounds.
 Otherwise, the component may not paint some or all of its
 pixels, allowing the underlying pixels to show through.
 
 The default value of this property is false for JComponent.
 However, the default value for this property on most standard
 JComponent subclasses (such as JButton and
 JTree) is look-and-feel dependent.

Parameters:
isOpaque - true if this component should be opaque
See Also:
isOpaque()


"
JComponent,setPreferredSize(Dimension preferredSize),void,Sets the preferred size of this component.,"

setPreferredSize
public void setPreferredSize(Dimension preferredSize)
Sets the preferred size of this component.
 If preferredSize is null, the UI will
 be asked for the preferred size.

Overrides:
setPreferredSize in class Component
Parameters:
preferredSize - The new preferred size, or null
See Also:
Component.getPreferredSize(), 
Component.isPreferredSizeSet()


"
JComponent,setRequestFocusEnabled(boolean requestFocusEnabled),void,Provides a hint as to whether or not this JComponent should get focus.,"

setRequestFocusEnabled
public void setRequestFocusEnabled(boolean requestFocusEnabled)
Provides a hint as to whether or not this JComponent
 should get focus. This is only a hint, and it is up to consumers that
 are requesting focus to honor this property. This is typically honored
 for mouse operations, but not keyboard operations. For example, look
 and feels could verify this property is true before requesting focus
 during a mouse operation. This would often times be used if you did
 not want a mouse press on a JComponent to steal focus,
 but did want the JComponent to be traversable via the
 keyboard. If you do not want this JComponent focusable at
 all, use the setFocusable method instead.
 
 Please see
 
 How to Use the Focus Subsystem,
 a section in The Java Tutorial,
 for more information.

Parameters:
requestFocusEnabled - indicates whether you want this
        JComponent to be focusable or not
See Also:
Focus Specification, 
Component.setFocusable(boolean)


"
JComponent,setToolTipText(String text),void,Registers the text to display in a tool tip.,"

setToolTipText
public void setToolTipText(String text)
Registers the text to display in a tool tip.
 The text displays when the cursor lingers over the component.
 
 See How to Use Tool Tips
 in The Java Tutorial
 for further documentation.

Parameters:
text - the string to display; if the text is null,
              the tool tip is turned off for this component
See Also:
TOOL_TIP_TEXT_KEY


"
JComponent,setTransferHandler(TransferHandler newHandler),void,"Sets the TransferHandler, which provides support for transfer of data into and out of this component via cut/copy/paste and drag and drop.","

setTransferHandler
public void setTransferHandler(TransferHandler newHandler)
Sets the TransferHandler, which provides support for transfer
 of data into and out of this component via cut/copy/paste and drag
 and drop. This may be null if the component does not support
 data transfer operations.
 
 If the new TransferHandler is not null, this method
 also installs a new DropTarget on the component to
 activate drop handling through the TransferHandler and activate
 any built-in support (such as calculating and displaying potential drop
 locations). If you do not wish for this component to respond in any way
 to drops, you can disable drop support entirely either by removing the
 drop target (setDropTarget(null)) or by de-activating it
 (getDropTaget().setActive(false)).
 
 If the new TransferHandler is null, this method removes
 the drop target.
 
 Under two circumstances, this method does not modify the drop target:
 First, if the existing drop target on this component was explicitly
 set by the developer to a non-null value. Second, if the
 system property suppressSwingDropSupport is true. The
 default value for the system property is false.
 
 Please see
 
 How to Use Drag and Drop and Data Transfer,
 a section in The Java Tutorial, for more information.

Parameters:
newHandler - the new TransferHandler
Since:
1.4
See Also:
TransferHandler, 
getTransferHandler()


"
JComponent,setUI(ComponentUI newUI),protected void,Sets the look and feel delegate for this component.,"

setUI
protected void setUI(ComponentUI newUI)
Sets the look and feel delegate for this component.
 JComponent subclasses generally override this method
 to narrow the argument type. For example, in JSlider:
 
 public void setUI(SliderUI newUI) {
     super.setUI(newUI);
 }
  

 Additionally JComponent subclasses must provide a
 getUI method that returns the correct type.  For example:
 
 public SliderUI getUI() {
     return (SliderUI)ui;
 }
 

Parameters:
newUI - the new UI delegate
See Also:
updateUI(), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
JComponent,setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget),void,Sets the value to indicate whether input verifier for the current focus owner will be called before this component requests focus.,"

setVerifyInputWhenFocusTarget
public void setVerifyInputWhenFocusTarget(boolean verifyInputWhenFocusTarget)
Sets the value to indicate whether input verifier for the
 current focus owner will be called before this component requests
 focus. The default is true. Set to false on components such as a
 Cancel button or a scrollbar, which should activate even if the
 input in the current focus owner is not ""passed"" by the input
 verifier for that component.

Parameters:
verifyInputWhenFocusTarget - value for the
        verifyInputWhenFocusTarget property
Since:
1.3
See Also:
InputVerifier, 
setInputVerifier(javax.swing.InputVerifier), 
getInputVerifier(), 
getVerifyInputWhenFocusTarget()


"
JComponent,setVisible(boolean aFlag),void,Makes the component visible or invisible.,"

setVisible
public void setVisible(boolean aFlag)
Makes the component visible or invisible.
 Overrides Component.setVisible.

Overrides:
setVisible in class Component
Parameters:
aFlag - true to make the component visible; false to
          make it invisible
See Also:
Component.isVisible(), 
Component.invalidate()


"
JComponent,unregisterKeyboardAction(KeyStroke aKeyStroke),void,This method is now obsolete.,"

unregisterKeyboardAction
public void unregisterKeyboardAction(KeyStroke aKeyStroke)
This method is now obsolete. To unregister an existing binding
 you can either remove the binding from the
 ActionMap/InputMap, or place a dummy binding the
 InputMap. Removing the binding from the
 InputMap allows bindings in parent InputMaps
 to be active, whereas putting a dummy binding in the
 InputMap effectively disables
 the binding from ever happening.
 
 Unregisters a keyboard action.
 This will remove the binding from the ActionMap
 (if it exists) as well as the InputMaps.

"
JComponent,update(Graphics g),void,Calls paint.,"

update
public void update(Graphics g)
Calls paint.  Doesn't clear the background but see
 ComponentUI.update, which is called by
 paintComponent.

Overrides:
update in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
paint(java.awt.Graphics), 
paintComponent(java.awt.Graphics), 
ComponentUI


"
JComponent,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.
 JComponent subclasses must override this method
 like this:
 
   public void updateUI() {
      setUI((SliderUI)UIManager.getUI(this);
   }
  

See Also:
setUI(javax.swing.plaf.ComponentUI), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
JDesktopPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this container at the specified index.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified component to this container at the specified
 index. This method also notifies the layout manager to add
 the component to this container's layout using the specified
 constraints object via the addLayoutComponent
 method.
 
 The constraints are
 defined by the particular layout manager being used.  For
 example, the BorderLayout class defines five
 constraints: BorderLayout.NORTH,
 BorderLayout.SOUTH, BorderLayout.EAST,
 BorderLayout.WEST, and BorderLayout.CENTER.
 
 The GridBagLayout class requires a
 GridBagConstraints object.  Failure to pass
 the correct type of constraints object results in an
 IllegalArgumentException.
 
 If the current layout manager implements LayoutManager2, then
 LayoutManager2.addLayoutComponent(Component,Object) is invoked on
 it. If the current layout manager does not implement
 LayoutManager2, and constraints is a String, then
 LayoutManager.addLayoutComponent(String,Component) is invoked on it.
 
 If the component is not an ancestor of this container and has a non-null
 parent, it is removed from its current parent before it is added to this
 container.
 
 This is the method to override if a program needs to track
 every add request to a container as all other add methods defer
 to this one. An overriding method should
 usually include a call to the superclass's version of the method:

 
super.addImpl(comp, constraints, index)


 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 display the added component.

Overrides:
addImpl in class JLayeredPane
Parameters:
comp - the component to be added
constraints - an object expressing layout constraints
                 for this component
index - the position in the container's list at which to
                 insert the component, where -1
                 means append to the end
Since:
1.6
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
JDesktopPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDesktopPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JDesktopPane. For desktop panes, the
 AccessibleContext takes the form of an
 AccessibleJDesktopPane.
 A new AccessibleJDesktopPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JLayeredPane
Returns:
an AccessibleJDesktopPane that serves as the
         AccessibleContext of this JDesktopPane


"
JDesktopPane,getAllFrames(),JInternalFrame[],Returns all JInternalFrames currently displayed in the desktop.,"

getAllFrames
public JInternalFrame[] getAllFrames()
Returns all JInternalFrames currently displayed in the
 desktop. Returns iconified frames as well as expanded frames.

Returns:
an array of JInternalFrame objects


"
JDesktopPane,getAllFramesInLayer(int layer),JInternalFrame[],Returns all JInternalFrames currently displayed in the specified layer of the desktop.,"

getAllFramesInLayer
public JInternalFrame[] getAllFramesInLayer(int layer)
Returns all JInternalFrames currently displayed in the
 specified layer of the desktop. Returns iconified frames as well
 expanded frames.

Parameters:
layer - an int specifying the desktop layer
Returns:
an array of JInternalFrame objects
See Also:
JLayeredPane


"
JDesktopPane,getDesktopManager(),DesktopManager,Returns the DesktopManger that handles desktop-specific UI actions.,"

getDesktopManager
public DesktopManager getDesktopManager()
Returns the DesktopManger that handles
 desktop-specific UI actions.

"
JDesktopPane,getDragMode(),int,"Gets the current ""dragging style"" used by the desktop pane.","

getDragMode
public int getDragMode()
Gets the current ""dragging style"" used by the desktop pane.

Returns:
either Live_DRAG_MODE or
   OUTLINE_DRAG_MODE
Since:
1.3
See Also:
setDragMode(int)


"
JDesktopPane,getSelectedFrame(),JInternalFrame,"Returns the currently active JInternalFrame in this JDesktopPane, or null if no JInternalFrame is currently active.","

getSelectedFrame
public JInternalFrame getSelectedFrame()
Returns the currently active JInternalFrame
 in this JDesktopPane, or null
 if no JInternalFrame is currently active.

Returns:
the currently active JInternalFrame or
   null
Since:
1.3


"
JDesktopPane,getUI(),DesktopPaneUI,Returns the L&F object that renders this component.,"

getUI
public DesktopPaneUI getUI()
Returns the L&F object that renders this component.

Returns:
the DesktopPaneUI object that
   renders this component


"
JDesktopPane,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""DesktopPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JDesktopPane,paramString(),protected String,Returns a string representation of this JDesktopPane.,"

paramString
protected String paramString()
Returns a string representation of this JDesktopPane.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JLayeredPane
Returns:
a string representation of this JDesktopPane


"
JDesktopPane,remove(Component comp),void,Removes the specified component from this container.,"

remove
public void remove(Component comp)
Removes the specified component from this container.
 This method also notifies the layout manager to remove the
 component from this container's layout via the
 removeLayoutComponent method.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 reflect the changes.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.remove(int)


"
JDesktopPane,remove(int index),void,Remove the indexed component from this pane.,"

remove
public void remove(int index)
Remove the indexed component from this pane.
 This is the absolute index, ignoring layers.

Overrides:
remove in class JLayeredPane
Parameters:
index - an int specifying the component to remove
Since:
1.6
See Also:
JLayeredPane.getIndexOf(java.awt.Component)


"
JDesktopPane,removeAll(),void,Removes all the components from this container.,"

removeAll
public void removeAll()
Removes all the components from this container.

Overrides:
removeAll in class JLayeredPane
Since:
1.6
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
JDesktopPane,selectFrame(boolean forward),JInternalFrame,Selects the next JInternalFrame in this desktop pane.,"

selectFrame
public JInternalFrame selectFrame(boolean forward)
Selects the next JInternalFrame in this desktop pane.

Parameters:
forward - a boolean indicating which direction to select in;
        true for forward, false for
        backward
Returns:
the JInternalFrame that was selected or null
         if nothing was selected
Since:
1.6


"
JDesktopPane,"setComponentZOrder(Component comp, int index)",void,Moves the specified component to the specified z-order index in the container.,"

setComponentZOrder
public void setComponentZOrder(Component comp,
                               int index)
Moves the specified component to the specified z-order index in
 the container. The z-order determines the order that components
 are painted; the component with the highest z-order paints first
 and the component with the lowest z-order paints last.
 Where components overlap, the component with the lower
 z-order paints over the component with the higher z-order.
 
 If the component is a child of some other container, it is
 removed from that container before being added to this container.
 The important difference between this method and
 java.awt.Container.add(Component, int) is that this method
 doesn't call removeNotify on the component while
 removing it from its previous container unless necessary and when
 allowed by the underlying native windowing system. This way, if the
 component has the keyboard focus, it maintains the focus when
 moved to the new position.
 
 This property is guaranteed to apply only to lightweight
 non-Container components.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.
 
Note: Not all platforms support changing the z-order of
 heavyweight components from one container into another without
 the call to removeNotify. There is no way to detect
 whether a platform supports this, so developers shouldn't make
 any assumptions.

Overrides:
setComponentZOrder in class Container
Parameters:
comp - the component to be moved
index - the position in the container's list to
            insert the component, where getComponentCount()
            appends to the end
Since:
1.6
See Also:
Container.getComponentZOrder(java.awt.Component), 
Container.invalidate()


"
JDesktopPane,setDesktopManager(DesktopManager d),void,Sets the DesktopManger that will handle desktop-specific UI actions.,"

setDesktopManager
public void setDesktopManager(DesktopManager d)
Sets the DesktopManger that will handle
 desktop-specific UI actions. This may be overridden by
 LookAndFeel.

Parameters:
d - the DesktopManager to use


"
JDesktopPane,setDragMode(int dragMode),void,"Sets the ""dragging style"" used by the desktop pane.","

setDragMode
public void setDragMode(int dragMode)
Sets the ""dragging style"" used by the desktop pane.
 You may want to change to one mode or another for
 performance or aesthetic reasons.

Parameters:
dragMode - the style of drag to use for items in the Desktop
Since:
1.3
See Also:
LIVE_DRAG_MODE, 
OUTLINE_DRAG_MODE


"
JDesktopPane,setSelectedFrame(JInternalFrame f),void,Sets the currently active JInternalFrame in this JDesktopPane.,"

setSelectedFrame
public void setSelectedFrame(JInternalFrame f)
Sets the currently active JInternalFrame
  in this JDesktopPane. This method is used to bridge
  the package gap between JDesktopPane and the platform implementation
  code and should not be called directly. To visually select the frame
  the client must call JInternalFrame.setSelected(true) to activate
  the frame.

Parameters:
f - the internal frame that's currently selected
Since:
1.3
See Also:
JInternalFrame.setSelected(boolean)


"
JDesktopPane,setUI(DesktopPaneUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(DesktopPaneUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the DesktopPaneUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JDesktopPane,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JDialog,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified child Component.
 This method is overridden to conditionally forward calls to the
 contentPane.
 By default, children are added to the contentPane instead
 of the frame, refer to RootPaneContainer for
 details.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JDialog,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor methods to create the default
 rootPane.

"
JDialog,dialogInit(),protected void,Called by the constructors to init the JDialog properly.,"

dialogInit
protected void dialogInit()
Called by the constructors to init the JDialog properly.

"
JDialog,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDialog.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JDialog.
 For JDialogs, the AccessibleContext takes the form of an
 AccessibleJDialog.
 A new AccessibleJDialog instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Dialog
Returns:
an AccessibleJDialog that serves as the
         AccessibleContext of this JDialog


"
JDialog,getContentPane(),Container,Returns the contentPane object for this dialog.,"

getContentPane
public Container getContentPane()
Returns the contentPane object for this dialog.

Specified by:
getContentPane in interface RootPaneContainer
Returns:
the contentPane property
See Also:
setContentPane(java.awt.Container), 
RootPaneContainer.getContentPane()


"
JDialog,getDefaultCloseOperation(),int,"Returns the operation which occurs when the user initiates a ""close"" on this dialog.","

getDefaultCloseOperation
public int getDefaultCloseOperation()
Returns the operation which occurs when the user
 initiates a ""close"" on this dialog.

Returns:
an integer indicating the window-close operation
See Also:
setDefaultCloseOperation(int)


"
JDialog,getGlassPane(),Component,Returns the glassPane object for this dialog.,"

getGlassPane
public Component getGlassPane()
Returns the glassPane object for this dialog.

Specified by:
getGlassPane in interface RootPaneContainer
Returns:
the glassPane property
See Also:
setGlassPane(java.awt.Component), 
RootPaneContainer.getGlassPane()


"
JDialog,getGraphics(),Graphics,Creates a graphics context for this component.,"

getGraphics
public Graphics getGraphics()
Creates a graphics context for this component. This method will
 return null if this component is currently not
 displayable.

Overrides:
getGraphics in class Component
Returns:
a graphics context for this component, or null
             if it has none
Since:
1.6
See Also:
Component.paint(java.awt.Graphics)


"
JDialog,getJMenuBar(),JMenuBar,Returns the menubar set on this dialog.,"

getJMenuBar
public JMenuBar getJMenuBar()
Returns the menubar set on this dialog.

See Also:
setJMenuBar(javax.swing.JMenuBar)


"
JDialog,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this dialog.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Returns the layeredPane object for this dialog.

Specified by:
getLayeredPane in interface RootPaneContainer
Returns:
the layeredPane property
See Also:
setLayeredPane(javax.swing.JLayeredPane), 
RootPaneContainer.getLayeredPane()


"
JDialog,getRootPane(),JRootPane,Returns the rootPane object for this dialog.,"

getRootPane
public JRootPane getRootPane()
Returns the rootPane object for this dialog.

Specified by:
getRootPane in interface RootPaneContainer
Returns:
this components single JRootPane child.
See Also:
setRootPane(javax.swing.JRootPane), 
RootPaneContainer.getRootPane()


"
JDialog,getTransferHandler(),TransferHandler,Gets the transferHandler property.,"

getTransferHandler
public TransferHandler getTransferHandler()
Gets the transferHandler property.

Returns:
the value of the transferHandler property
Since:
1.6
See Also:
TransferHandler, 
setTransferHandler(javax.swing.TransferHandler)


"
JDialog,isDefaultLookAndFeelDecorated(),static boolean,Returns true if newly created JDialogs should have their Window decorations provided by the current look and feel.,"

isDefaultLookAndFeelDecorated
public static boolean isDefaultLookAndFeelDecorated()
Returns true if newly created JDialogs should have their
 Window decorations provided by the current look and feel. This is only
 a hint, as certain look and feels may not support this feature.

Returns:
true if look and feel should provide Window decorations.
Since:
1.4


"
JDialog,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.,"

isRootPaneCheckingEnabled
protected boolean isRootPaneCheckingEnabled()
Returns whether calls to add and
 setLayout are forwarded to the contentPane.

Returns:
true if add and setLayout
         are forwarded; false otherwise
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JDialog,paramString(),protected String,Returns a string representation of this JDialog.,"

paramString
protected String paramString()
Returns a string representation of this JDialog.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class Dialog
Returns:
a string representation of this JDialog.


"
JDialog,processWindowEvent(WindowEvent e),protected void,Handles window events depending on the state of the defaultCloseOperation property.,"

processWindowEvent
protected void processWindowEvent(WindowEvent e)
Handles window events depending on the state of the
 defaultCloseOperation property.

Overrides:
processWindowEvent in class Window
Parameters:
e - the window event
See Also:
setDefaultCloseOperation(int)


"
JDialog,remove(Component comp),void,Removes the specified component from the container.,"

remove
public void remove(Component comp)
Removes the specified component from the container. If
 comp is not the rootPane, this will forward
 the call to the contentPane. This will do nothing if
 comp is not a child of the JDialog or
 contentPane.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
Container.add(java.awt.Component), 
RootPaneContainer


"
JDialog,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.,"

repaint
public void repaint(long time,
                    int x,
                    int y,
                    int width,
                    int height)
Repaints the specified rectangle of this component within
 time milliseconds.  Refer to RepaintManager
 for details on how the repaint is handled.

Overrides:
repaint in class Component
Parameters:
time - maximum time in milliseconds before update
x - the x coordinate
y - the y coordinate
width - the width
height - the height
Since:
1.6
See Also:
RepaintManager


"
JDialog,setContentPane(Container contentPane),void,Sets the contentPane property.,"

setContentPane
public void setContentPane(Container contentPane)
Sets the contentPane property.
 This method is called by the constructor.
 
 Swing's painting architecture requires an opaque JComponent
 in the containment hierarchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque JComponent.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
contentPane - the contentPane object for this dialog
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
JRootPane, 
getContentPane(), 
RootPaneContainer.setContentPane(java.awt.Container)


"
JDialog,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this dialog.","

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this dialog.
 You must specify one of the following choices:
 

DO_NOTHING_ON_CLOSE
 (defined in WindowConstants):
 Don't do anything; require the
 program to handle the operation in the windowClosing
 method of a registered WindowListener object.

 HIDE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide the dialog after
 invoking any registered WindowListener
 objects.

 DISPOSE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide and dispose the
 dialog after invoking any registered WindowListener
 objects.
 

 The value is set to HIDE_ON_CLOSE by default. Changes
 to the value of this property cause the firing of a property
 change event, with property name ""defaultCloseOperation"".
 
Note: When the last displayable window within the
 Java virtual machine (VM) is disposed of, the VM may
 terminate.  See 
 AWT Threading Issues for more information.

Parameters:
operation - the operation which should be performed when the
        user closes the dialog
Throws:
IllegalArgumentException - if defaultCloseOperation value
         isn't one of the above valid values
See Also:
Window.addWindowListener(java.awt.event.WindowListener), 
getDefaultCloseOperation(), 
WindowConstants


"
JDialog,setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated),static void,"Provides a hint as to whether or not newly created JDialogs should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel.","

setDefaultLookAndFeelDecorated
public static void setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)
Provides a hint as to whether or not newly created JDialogs
 should have their Window decorations (such as borders, widgets to
 close the window, title...) provided by the current look
 and feel. If defaultLookAndFeelDecorated is true,
 the current LookAndFeel supports providing window
 decorations, and the current window manager supports undecorated
 windows, then newly created JDialogs will have their
 Window decorations provided by the current LookAndFeel.
 Otherwise, newly created JDialogs will have their
 Window decorations provided by the current window manager.
 
 You can get the same effect on a single JDialog by doing the following:
 
    JDialog dialog = new JDialog();
    dialog.setUndecorated(true);
    dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
 

Parameters:
defaultLookAndFeelDecorated - A hint as to whether or not current
        look and feel should provide window decorations
Since:
1.4
See Also:
LookAndFeel.getSupportsWindowDecorations()


"
JDialog,setGlassPane(Component glassPane),void,Sets the glassPane property.,"

setGlassPane
public void setGlassPane(Component glassPane)
Sets the glassPane property.
 This method is called by the constructor.

Specified by:
setGlassPane in interface RootPaneContainer
Parameters:
glassPane - the glassPane object for this dialog
See Also:
getGlassPane(), 
RootPaneContainer.setGlassPane(java.awt.Component)


"
JDialog,setJMenuBar(JMenuBar menu),void,Sets the menubar for this dialog.,"

setJMenuBar
public void setJMenuBar(JMenuBar menu)
Sets the menubar for this dialog.

Parameters:
menu - the menubar being placed in the dialog
See Also:
getJMenuBar()


"
JDialog,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layeredPane)
Sets the layeredPane property.
 This method is called by the constructor.

Specified by:
setLayeredPane in interface RootPaneContainer
Parameters:
layeredPane - the new layeredPane property
Throws:
IllegalComponentStateException - (a runtime
            exception) if the layered pane parameter is null
See Also:
getLayeredPane(), 
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)


"
JDialog,setLayout(LayoutManager manager),void,Sets the LayoutManager.,"

setLayout
public void setLayout(LayoutManager manager)
Sets the LayoutManager.
 Overridden to conditionally forward the call to the
 contentPane.
 Refer to RootPaneContainer for
 more information.

Overrides:
setLayout in class Container
Parameters:
manager - the LayoutManager
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JDialog,setRootPane(JRootPane root),protected void,Sets the rootPane property.,"

setRootPane
protected void setRootPane(JRootPane root)
Sets the rootPane property.
 This method is called by the constructor.

Parameters:
root - the rootPane object for this dialog
See Also:
getRootPane()


"
JDialog,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.,"

setRootPaneCheckingEnabled
protected void setRootPaneCheckingEnabled(boolean enabled)
Sets whether calls to add and
 setLayout are forwarded to the contentPane.

Parameters:
enabled - true if add and setLayout
        are forwarded, false if they should operate directly on the
        JDialog.
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
isRootPaneCheckingEnabled(), 
RootPaneContainer


"
JDialog,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component.","

setTransferHandler
public void setTransferHandler(TransferHandler newHandler)
Sets the transferHandler property, which is a mechanism to
 support transfer of data into this component. Use null
 if the component does not support data transfer operations.
 
 If the system property suppressSwingDropSupport is false
 (the default) and the current drop target on this component is either
 null or not a user-set drop target, this method will change the
 drop target as follows: If newHandler is null it will
 clear the drop target. If not null it will install a new
 DropTarget.
 
 Note: When used with JDialog, TransferHandler only
 provides data import capability, as the data export related methods
 are currently typed to JComponent.
 
 Please see
 
 How to Use Drag and Drop and Data Transfer, a section in
 The Java Tutorial, for more information.

Parameters:
newHandler - the new TransferHandler
Since:
1.6
See Also:
TransferHandler, 
getTransferHandler(), 
Component.setDropTarget(java.awt.dnd.DropTarget)


"
JDialog,update(Graphics g),void,Calls paint(g).,"

update
public void update(Graphics g)
Calls paint(g).  This method was overridden to
 prevent an unnecessary call to clear the background.

Overrides:
update in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
Component.update(Graphics)


"
JEditorPane,addHyperlinkListener(HyperlinkListener listener),void,"Adds a hyperlink listener for notification of any changes, for example when a link is selected and entered.","

addHyperlinkListener
public void addHyperlinkListener(HyperlinkListener listener)
Adds a hyperlink listener for notification of any changes, for example
 when a link is selected and entered.

Parameters:
listener - the listener


"
JEditorPane,createDefaultEditorKit(),protected EditorKit,Creates the default editor kit (PlainEditorKit) for when the component is first created.,"

createDefaultEditorKit
protected EditorKit createDefaultEditorKit()
Creates the default editor kit (PlainEditorKit) for when
 the component is first created.

Returns:
the editor kit


"
JEditorPane,createEditorKitForContentType(String type),static EditorKit,Creates a handler for the given type from the default registry of editor kits.,"

createEditorKitForContentType
public static EditorKit createEditorKitForContentType(String type)
Creates a handler for the given type from the default registry
 of editor kits.  The registry is created if necessary.  If the
 registered class has not yet been loaded, an attempt
 is made to dynamically load the prototype of the kit for the
 given type.  If the type was registered with a ClassLoader,
 that ClassLoader will be used to load the prototype.
 If there was no registered ClassLoader,
 Class.forName will be used to load the prototype.
 
 Once a prototype EditorKit instance is successfully
 located, it is cloned and the clone is returned.

Parameters:
type - the content type
Returns:
the editor kit, or null if there is nothing
   registered for the given type


"
JEditorPane,fireHyperlinkUpdate(HyperlinkEvent e),void,Notifies all listeners that have registered interest for notification on this event type.,"

fireHyperlinkUpdate
public void fireHyperlinkUpdate(HyperlinkEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.  This is normally called
 by the currently installed EditorKit if a content type
 that supports hyperlinks is currently active and there
 was activity with a link.  The listener list is processed
 last to first.

Parameters:
e - the event
See Also:
EventListenerList


"
JEditorPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JEditorPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JEditorPane.
 For editor panes, the AccessibleContext takes the form of an
 AccessibleJEditorPane.
 A new AccessibleJEditorPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JTextComponent
Returns:
an AccessibleJEditorPane that serves as the
         AccessibleContext of this JEditorPane


"
JEditorPane,getContentType(),String,Gets the type of content that this editor is currently set to deal with.,"

getContentType
public final String getContentType()
Gets the type of content that this editor
 is currently set to deal with.  This is
 defined to be the type associated with the
 currently installed EditorKit.

Returns:
the content type, null if no editor kit set


"
JEditorPane,getEditorKit(),EditorKit,Fetches the currently installed kit for handling content.,"

getEditorKit
public EditorKit getEditorKit()
Fetches the currently installed kit for handling content.
 createDefaultEditorKit is called to set up a default
 if necessary.

Returns:
the editor kit


"
JEditorPane,getEditorKitClassNameForContentType(String type),static String,Returns the currently registered EditorKit class name for the type type.,"

getEditorKitClassNameForContentType
public static String getEditorKitClassNameForContentType(String type)
Returns the currently registered EditorKit
 class name for the type type.

Parameters:
type - the non-null content type
Since:
1.3


"
JEditorPane,getEditorKitForContentType(String type),EditorKit,Fetches the editor kit to use for the given type of content.,"

getEditorKitForContentType
public EditorKit getEditorKitForContentType(String type)
Fetches the editor kit to use for the given type
 of content.  This is called when a type is requested
 that doesn't match the currently installed type.
 If the component doesn't have an EditorKit registered
 for the given type, it will try to create an
 EditorKit from the default EditorKit registry.
 If that fails, a PlainEditorKit is used on the
 assumption that all text documents can be represented
 as plain text.
 
 This method can be reimplemented to use some
 other kind of type registry.  This can
 be reimplemented to use the Java Activation
 Framework, for example.

Parameters:
type - the non-null content type
Returns:
the editor kit


"
JEditorPane,getHyperlinkListeners(),HyperlinkListener[],Returns an array of all the HyperLinkListeners added to this JEditorPane with addHyperlinkListener().,"

getHyperlinkListeners
public HyperlinkListener[] getHyperlinkListeners()
Returns an array of all the HyperLinkListeners added
 to this JEditorPane with addHyperlinkListener().

Returns:
all of the HyperLinkListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JEditorPane,getPage(),URL,Gets the current URL being displayed.,"

getPage
public URL getPage()
Gets the current URL being displayed.  If a URL was
 not specified in the creation of the document, this
 will return null, and relative URL's will not be
 resolved.

Returns:
the URL, or null if none


"
JEditorPane,getPreferredSize(),Dimension,Returns the preferred size for the JEditorPane.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size for the JEditorPane.
 The preferred size for JEditorPane is slightly altered
 from the preferred size of the superclass.  If the size
 of the viewport has become smaller than the minimum size
 of the component, the scrollable definition for tracking
 width or height will turn to false.  The default viewport
 layout will give the preferred size, and that is not desired
 in the case where the scrollable is tracking.  In that case
 the normal preferred size is adjusted to the
 minimum size.  This allows things like HTML tables to
 shrink down to their minimum size and then be laid out at
 their minimum size, refusing to shrink any further.

Overrides:
getPreferredSize in class JComponent
Returns:
a Dimension containing the preferred size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
JEditorPane,getScrollableTracksViewportHeight(),boolean,Returns true if a viewport should always force the height of this Scrollable to match the height of the viewport.,"

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns true if a viewport should always force the height of this
 Scrollable to match the height of the viewport.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Overrides:
getScrollableTracksViewportHeight in class JTextComponent
Returns:
true if a viewport should force the
          Scrollable's height to match its own,
          false otherwise


"
JEditorPane,getScrollableTracksViewportWidth(),boolean,Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.,"

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns true if a viewport should always force the width of this
 Scrollable to match the width of the viewport.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Overrides:
getScrollableTracksViewportWidth in class JTextComponent
Returns:
true if a viewport should force the Scrollables width to
 match its own, false otherwise


"
JEditorPane,getStream(URL page),protected InputStream,"Fetches a stream for the given URL, which is about to be loaded by the setPage method.","

getStream
protected InputStream getStream(URL page)
                         throws IOException
Fetches a stream for the given URL, which is about to
 be loaded by the setPage method.  By
 default, this simply opens the URL and returns the
 stream.  This can be reimplemented to do useful things
 like fetch the stream from a cache, monitor the progress
 of the stream, etc.
 
 This method is expected to have the the side effect of
 establishing the content type, and therefore setting the
 appropriate EditorKit to use for loading the stream.
 
 If this the stream was an http connection, redirects
 will be followed and the resulting URL will be set as
 the Document.StreamDescriptionProperty so that relative
 URL's can be properly resolved.

Parameters:
page - the URL of the page
Throws:
IOException


"
JEditorPane,getText(),String,Returns the text contained in this TextComponent in terms of the content type of this editor.,"

getText
public String getText()
Returns the text contained in this TextComponent
 in terms of the
 content type of this editor.  If an exception is thrown while
 attempting to retrieve the text, null will be returned.
 This is implemented to call JTextComponent.write with
 a StringWriter.

Overrides:
getText in class JTextComponent
Returns:
the text
See Also:
setText(java.lang.String)


"
JEditorPane,getUIClassID(),String,Gets the class ID for the UI.,"

getUIClassID
public String getUIClassID()
Gets the class ID for the UI.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""EditorPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JEditorPane,paramString(),protected String,Returns a string representation of this JEditorPane.,"

paramString
protected String paramString()
Returns a string representation of this JEditorPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JTextComponent
Returns:
a string representation of this JEditorPane


"
JEditorPane,"read(InputStream in, Object desc)",void,This method initializes from a stream.,"

read
public void read(InputStream in,
                 Object desc)
          throws IOException
This method initializes from a stream.  If the kit is
 set to be of type HTMLEditorKit, and the
 desc parameter is an HTMLDocument,
 then it invokes the HTMLEditorKit to initiate
 the read. Otherwise it calls the superclass
 method which loads the model as plain text.

Parameters:
in - the stream from which to read
desc - an object describing the stream
Throws:
IOException - as thrown by the stream being
          used to initialize
See Also:
JTextComponent.read(java.io.Reader, java.lang.Object), 
JTextComponent.setDocument(javax.swing.text.Document)


"
JEditorPane,"registerEditorKitForContentType(String type, String classname)",static void,Establishes the default bindings of type to classname.,"

registerEditorKitForContentType
public static void registerEditorKitForContentType(String type,
                                                   String classname)
Establishes the default bindings of type to
 classname.
 The class will be dynamically loaded later when actually
 needed, and can be safely changed before attempted uses
 to avoid loading unwanted classes.  The prototype
 EditorKit will be loaded with Class.forName
 when registered with this method.

Parameters:
type - the non-null content type
classname - the class to load later


"
JEditorPane,"registerEditorKitForContentType(String type, String classname, ClassLoader loader)",static void,Establishes the default bindings of type to classname.,"

registerEditorKitForContentType
public static void registerEditorKitForContentType(String type,
                                                   String classname,
                                                   ClassLoader loader)
Establishes the default bindings of type to
 classname.
 The class will be dynamically loaded later when actually
 needed using the given ClassLoader,
 and can be safely changed
 before attempted uses to avoid loading unwanted classes.

Parameters:
type - the non-null content type
classname - the class to load later
loader - the ClassLoader to use to load the name


"
JEditorPane,removeHyperlinkListener(HyperlinkListener listener),void,Removes a hyperlink listener.,"

removeHyperlinkListener
public void removeHyperlinkListener(HyperlinkListener listener)
Removes a hyperlink listener.

Parameters:
listener - the listener


"
JEditorPane,replaceSelection(String content),void,Replaces the currently selected content with new content represented by the given string.,"

replaceSelection
public void replaceSelection(String content)
Replaces the currently selected content with new content
 represented by the given string.  If there is no selection
 this amounts to an insert of the given text.  If there
 is no replacement text (i.e. the content string is empty
 or null) this amounts to a removal of the
 current selection.  The replacement text will have the
 attributes currently defined for input.  If the component is not
 editable, beep and return.

Overrides:
replaceSelection in class JTextComponent
Parameters:
content - the content to replace the selection with.  This
   value can be null


"
JEditorPane,scrollToReference(String reference),void,"Scrolls the view to the given reference location (that is, the value returned by the UL.getRef method for the URL being displayed).","

scrollToReference
public void scrollToReference(String reference)
Scrolls the view to the given reference location
 (that is, the value returned by the UL.getRef
 method for the URL being displayed).  By default, this
 method only knows how to locate a reference in an
 HTMLDocument.  The implementation calls the
 scrollRectToVisible method to
 accomplish the actual scrolling.  If scrolling to a
 reference location is needed for document types other
 than HTML, this method should be reimplemented.
 This method will have no effect if the component
 is not visible.

Parameters:
reference - the named location to scroll to


"
JEditorPane,setContentType(String type),void,Sets the type of content that this editor handles.,"

setContentType
public final void setContentType(String type)
Sets the type of content that this editor
 handles.  This calls getEditorKitForContentType,
 and then setEditorKit if an editor kit can
 be successfully located.  This is mostly convenience method
 that can be used as an alternative to calling
 setEditorKit directly.
 
 If there is a charset definition specified as a parameter
 of the content type specification, it will be used when
 loading input streams using the associated EditorKit.
 For example if the type is specified as
 text/html; charset=EUC-JP the content
 will be loaded using the EditorKit registered for
 text/html and the Reader provided to
 the EditorKit to load unicode into the document will
 use the EUC-JP charset for translating
 to unicode.  If the type is not recognized, the content
 will be loaded using the EditorKit registered
 for plain text, text/plain.

Parameters:
type - the non-null mime type for the content editing
   support
Throws:
NullPointerException - if the type parameter
          is null
See Also:
getContentType()


"
JEditorPane,setEditorKit(EditorKit kit),void,Sets the currently installed kit for handling content.,"

setEditorKit
public void setEditorKit(EditorKit kit)
Sets the currently installed kit for handling
 content.  This is the bound property that
 establishes the content type of the editor.
 Any old kit is first deinstalled, then if kit is
 non-null,
 the new kit is installed, and a default document created for it.
 A PropertyChange event (""editorKit"") is always fired when
 setEditorKit is called.
 
NOTE: This has the side effect of changing the model,
 because the EditorKit is the source of how a
 particular type
 of content is modeled.  This method will cause setDocument
 to be called on behalf of the caller to ensure integrity
 of the internal state.

Parameters:
kit - the desired editor behavior
See Also:
getEditorKit()


"
JEditorPane,"setEditorKitForContentType(String type, EditorKit k)",void,Directly sets the editor kit to use for the given type.,"

setEditorKitForContentType
public void setEditorKitForContentType(String type,
                                       EditorKit k)
Directly sets the editor kit to use for the given type.  A
 look-and-feel implementation might use this in conjunction
 with createEditorKitForContentType to install handlers for
 content types with a look-and-feel bias.

Parameters:
type - the non-null content type
k - the editor kit to be set


"
JEditorPane,setPage(String url),void,Sets the current URL being displayed.,"

setPage
public void setPage(String url)
             throws IOException
Sets the current URL being displayed.

Parameters:
url - the URL for display
Throws:
IOException - for a null or invalid URL
          specification


"
JEditorPane,setPage(URL page),void,Sets the current URL being displayed.,"

setPage
public void setPage(URL page)
             throws IOException
Sets the current URL being displayed.  The content type of the
 pane is set, and if the editor kit for the pane is
 non-null, then
 a new default document is created and the URL is read into it.
 If the URL contains and reference location, the location will
 be scrolled to by calling the scrollToReference
 method. If the desired URL is the one currently being displayed,
 the document will not be reloaded. To force a document
 reload it is necessary to clear the stream description property
 of the document. The following code shows how this can be done:

 
   Document doc = jEditorPane.getDocument();
   doc.putProperty(Document.StreamDescriptionProperty, null);
 

 If the desired URL is not the one currently being
 displayed, the getStream method is called to
 give subclasses control over the stream provided.
 
 This may load either synchronously or asynchronously
 depending upon the document returned by the EditorKit.
 If the Document is of type
 AbstractDocument and has a value returned by
 AbstractDocument.getAsynchronousLoadPriority
 that is greater than or equal to zero, the page will be
 loaded on a separate thread using that priority.
 
 If the document is loaded synchronously, it will be
 filled in with the stream prior to being installed into
 the editor with a call to setDocument, which
 is bound and will fire a property change event.  If an
 IOException is thrown the partially loaded
 document will
 be discarded and neither the document or page property
 change events will be fired.  If the document is
 successfully loaded and installed, a view will be
 built for it by the UI which will then be scrolled if
 necessary, and then the page property change event
 will be fired.
 
 If the document is loaded asynchronously, the document
 will be installed into the editor immediately using a
 call to setDocument which will fire a
 document property change event, then a thread will be
 created which will begin doing the actual loading.
 In this case, the page property change event will not be
 fired by the call to this method directly, but rather will be
 fired when the thread doing the loading has finished.
 It will also be fired on the event-dispatch thread.
 Since the calling thread can not throw an IOException
 in the event of failure on the other thread, the page
 property change event will be fired when the other
 thread is done whether the load was successful or not.

Parameters:
page - the URL of the page
Throws:
IOException - for a null or invalid
          page specification, or exception from the stream being read
See Also:
getPage()


"
JEditorPane,setText(String t),void,"Sets the text of this TextComponent to the specified content, which is expected to be in the format of the content type of this editor.","

setText
public void setText(String t)
Sets the text of this TextComponent to the specified
 content,
 which is expected to be in the format of the content type of
 this editor.  For example, if the type is set to text/html
 the string should be specified in terms of HTML.
 
 This is implemented to remove the contents of the current document,
 and replace them by parsing the given string using the current
 EditorKit.  This gives the semantics of the
 superclass by not changing
 out the model, while supporting the content type currently set on
 this component.  The assumption is that the previous content is
 relatively
 small, and that the previous content doesn't have side effects.
 Both of those assumptions can be violated and cause undesirable results.
 To avoid this, create a new document,
 getEditorKit().createDefaultDocument(), and replace the
 existing Document with the new one. You are then assured the
 previous Document won't have any lingering state.
 

 Leaving the existing model in place means that the old view will be
 torn down, and a new view created, where replacing the document would
 avoid the tear down of the old view.
 
 Some formats (such as HTML) can install things into the document that
 can influence future contents.  HTML can have style information embedded
 that would influence the next content installed unexpectedly.
 

 An alternative way to load this component with a string would be to
 create a StringReader and call the read method.  In this case the model
 would be replaced after it was initialized with the contents of the
 string.

Overrides:
setText in class JTextComponent
Parameters:
t - the new text to be set; if null the old
    text will be deleted
See Also:
getText()


"
JFileChooser,accept(File f),boolean,Returns true if the file should be displayed.,"

accept
public boolean accept(File f)
Returns true if the file should be displayed.

Parameters:
f - the File
Returns:
true if the file should be displayed, otherwise false
See Also:
FileFilter.accept(java.io.File)


"
JFileChooser,addActionListener(ActionListener l),void,Adds an ActionListener to the file chooser.,"

addActionListener
public void addActionListener(ActionListener l)
Adds an ActionListener to the file chooser.

Parameters:
l - the listener to be added
See Also:
approveSelection(), 
cancelSelection()


"
JFileChooser,addChoosableFileFilter(FileFilter filter),void,Adds a filter to the list of user choosable file filters.,"

addChoosableFileFilter
public void addChoosableFileFilter(FileFilter filter)
Adds a filter to the list of user choosable file filters.
 For information on setting the file selection mode, see
 setFileSelectionMode.

Parameters:
filter - the FileFilter to add to the choosable file
               filter list
See Also:
getChoosableFileFilters(), 
removeChoosableFileFilter(javax.swing.filechooser.FileFilter), 
resetChoosableFileFilters(), 
setFileSelectionMode(int)


"
JFileChooser,approveSelection(),void,"Called by the UI when the user hits the Approve button (labeled ""Open"" or ""Save"", by default).","

approveSelection
public void approveSelection()
Called by the UI when the user hits the Approve button
 (labeled ""Open"" or ""Save"", by default). This can also be
 called by the programmer.
 This method causes an action event to fire
 with the command string equal to
 APPROVE_SELECTION.

See Also:
APPROVE_SELECTION


"
JFileChooser,cancelSelection(),void,Called by the UI when the user chooses the Cancel button.,"

cancelSelection
public void cancelSelection()
Called by the UI when the user chooses the Cancel button.
 This can also be called by the programmer.
 This method causes an action event to fire
 with the command string equal to
 CANCEL_SELECTION.

See Also:
CANCEL_SELECTION


"
JFileChooser,changeToParentDirectory(),void,Changes the directory to be set to the parent of the current directory.,"

changeToParentDirectory
public void changeToParentDirectory()
Changes the directory to be set to the parent of the
 current directory.

See Also:
getCurrentDirectory()


"
JFileChooser,createDialog(Component parent),protected JDialog,Creates and returns a new JDialog wrapping this centered on the parent in the parent's frame.,"

createDialog
protected JDialog createDialog(Component parent)
                        throws HeadlessException
Creates and returns a new JDialog wrapping
 this centered on the parent
 in the parent's frame.
 This method can be overriden to further manipulate the dialog,
 to disable resizing, set the location, etc. Example:
 
     class MyFileChooser extends JFileChooser {
         protected JDialog createDialog(Component parent) throws HeadlessException {
             JDialog dialog = super.createDialog(parent);
             dialog.setLocation(300, 200);
             dialog.setResizable(false);
             return dialog;
         }
     }
 

Parameters:
parent - the parent component of the dialog;
                  can be null
Returns:
a new JDialog containing this instance
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless()


"
JFileChooser,ensureFileIsVisible(File f),void,"Makes sure that the specified file is viewable, and not hidden.","

ensureFileIsVisible
public void ensureFileIsVisible(File f)
Makes sure that the specified file is viewable, and
 not hidden.

Parameters:
f - a File object


"
JFileChooser,fireActionPerformed(String command),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionPerformed
protected void fireActionPerformed(String command)
Notifies all listeners that have registered interest for
 notification on this event type. The event instance
 is lazily created using the command parameter.

See Also:
EventListenerList


"
JFileChooser,getAcceptAllFileFilter(),FileFilter,Returns the AcceptAll file filter.,"

getAcceptAllFileFilter
public FileFilter getAcceptAllFileFilter()
Returns the AcceptAll file filter.
 For example, on Microsoft Windows this would be All Files (*.*).

"
JFileChooser,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JFileChooser.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JFileChooser.
 For file choosers, the AccessibleContext takes the form of an
 AccessibleJFileChooser.
 A new AccessibleJFileChooser instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJFileChooser that serves as the
         AccessibleContext of this JFileChooser


"
JFileChooser,getAccessory(),JComponent,Returns the accessory component.,"

getAccessory
public JComponent getAccessory()
Returns the accessory component.

Returns:
this JFileChooser's accessory component, or null
See Also:
setAccessory(javax.swing.JComponent)


"
JFileChooser,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this file chooser.,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the action listeners
 registered on this file chooser.

Returns:
all of this file chooser's ActionListeners
         or an empty
         array if no action listeners are currently registered
Since:
1.4
See Also:
addActionListener(java.awt.event.ActionListener), 
removeActionListener(java.awt.event.ActionListener)


"
JFileChooser,getApproveButtonMnemonic(),int,Returns the approve button's mnemonic.,"

getApproveButtonMnemonic
public int getApproveButtonMnemonic()
Returns the approve button's mnemonic.

Returns:
an integer value for the mnemonic key
See Also:
setApproveButtonMnemonic(int)


"
JFileChooser,getApproveButtonText(),String,Returns the text used in the ApproveButton in the FileChooserUI.,"

getApproveButtonText
public String getApproveButtonText()
Returns the text used in the ApproveButton in the
 FileChooserUI.
 If null, the UI object will determine the button's text.

 Typically, this would be ""Open"" or ""Save"".

Returns:
the text used in the ApproveButton
See Also:
setApproveButtonText(java.lang.String), 
setDialogType(int), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,getApproveButtonToolTipText(),String,Returns the tooltip text used in the ApproveButton.,"

getApproveButtonToolTipText
public String getApproveButtonToolTipText()
Returns the tooltip text used in the ApproveButton.
 If null, the UI object will determine the button's text.

Returns:
the tooltip text used for the approve button
See Also:
setApproveButtonText(java.lang.String), 
setDialogType(int), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,getChoosableFileFilters(),FileFilter[],Gets the list of user choosable file filters.,"

getChoosableFileFilters
public FileFilter[] getChoosableFileFilters()
Gets the list of user choosable file filters.

Returns:
a FileFilter array containing all the choosable
         file filters
See Also:
addChoosableFileFilter(javax.swing.filechooser.FileFilter), 
removeChoosableFileFilter(javax.swing.filechooser.FileFilter), 
resetChoosableFileFilters()


"
JFileChooser,getControlButtonsAreShown(),boolean,Returns the value of the controlButtonsAreShown property.,"

getControlButtonsAreShown
public boolean getControlButtonsAreShown()
Returns the value of the controlButtonsAreShown
 property.

Returns:
the value of the controlButtonsAreShown
     property
Since:
1.3
See Also:
setControlButtonsAreShown(boolean)


"
JFileChooser,getCurrentDirectory(),File,Returns the current directory.,"

getCurrentDirectory
public File getCurrentDirectory()
Returns the current directory.

Returns:
the current directory
See Also:
setCurrentDirectory(java.io.File)


"
JFileChooser,getDescription(File f),String,Returns the file description.,"

getDescription
public String getDescription(File f)
Returns the file description.

Parameters:
f - the File
Returns:
the String containing the file description for
          f
See Also:
FileView.getDescription(java.io.File)


"
JFileChooser,getDialogTitle(),String,Gets the string that goes in the JFileChooser's titlebar.,"

getDialogTitle
public String getDialogTitle()
Gets the string that goes in the JFileChooser's titlebar.

See Also:
setDialogTitle(java.lang.String)


"
JFileChooser,getDialogType(),int,Returns the type of this dialog.,"

getDialogType
public int getDialogType()
Returns the type of this dialog.  The default is
 JFileChooser.OPEN_DIALOG.

Returns:
the type of dialog to be displayed:
 
JFileChooser.OPEN_DIALOG
 JFileChooser.SAVE_DIALOG
 JFileChooser.CUSTOM_DIALOG
 
See Also:
setDialogType(int)


"
JFileChooser,getDragEnabled(),boolean,Gets the value of the dragEnabled property.,"

getDragEnabled
public boolean getDragEnabled()
Gets the value of the dragEnabled property.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JFileChooser,getFileFilter(),FileFilter,Returns the currently selected file filter.,"

getFileFilter
public FileFilter getFileFilter()
Returns the currently selected file filter.

Returns:
the current file filter
See Also:
setFileFilter(javax.swing.filechooser.FileFilter), 
addChoosableFileFilter(javax.swing.filechooser.FileFilter)


"
JFileChooser,getFileSelectionMode(),int,Returns the current file-selection mode.,"

getFileSelectionMode
public int getFileSelectionMode()
Returns the current file-selection mode.  The default is
 JFilesChooser.FILES_ONLY.

Returns:
the type of files to be displayed, one of the following:
 
JFileChooser.FILES_ONLY
 JFileChooser.DIRECTORIES_ONLY
 JFileChooser.FILES_AND_DIRECTORIES
 
See Also:
setFileSelectionMode(int)


"
JFileChooser,getFileSystemView(),FileSystemView,Returns the file system view.,"

getFileSystemView
public FileSystemView getFileSystemView()
Returns the file system view.

Returns:
the FileSystemView object
See Also:
setFileSystemView(javax.swing.filechooser.FileSystemView)


"
JFileChooser,getFileView(),FileView,Returns the current file view.,"

getFileView
public FileView getFileView()
Returns the current file view.

See Also:
setFileView(javax.swing.filechooser.FileView)


"
JFileChooser,getIcon(File f),Icon,"Returns the icon for this file or type of file, depending on the system.","

getIcon
public Icon getIcon(File f)
Returns the icon for this file or type of file, depending
 on the system.

Parameters:
f - the File
Returns:
the Icon for this file, or type of file
See Also:
FileView.getIcon(java.io.File)


"
JFileChooser,getName(File f),String,Returns the filename.,"

getName
public String getName(File f)
Returns the filename.

Parameters:
f - the File
Returns:
the String containing the filename for
          f
See Also:
FileView.getName(java.io.File)


"
JFileChooser,getSelectedFile(),File,Returns the selected file.,"

getSelectedFile
public File getSelectedFile()
Returns the selected file. This can be set either by the
 programmer via setSelectedFile or by a user action, such as
 either typing the filename into the UI or selecting the
 file from a list in the UI.

Returns:
the selected file
See Also:
setSelectedFile(java.io.File)


"
JFileChooser,getSelectedFiles(),File[],Returns a list of selected files if the file chooser is set to allow multiple selection.,"

getSelectedFiles
public File[] getSelectedFiles()
Returns a list of selected files if the file chooser is
 set to allow multiple selection.

"
JFileChooser,getTypeDescription(File f),String,Returns the file type.,"

getTypeDescription
public String getTypeDescription(File f)
Returns the file type.

Parameters:
f - the File
Returns:
the String containing the file type description for
          f
See Also:
FileView.getTypeDescription(java.io.File)


"
JFileChooser,getUI(),FileChooserUI,Gets the UI object which implements the L&F for this component.,"

getUI
public FileChooserUI getUI()
Gets the UI object which implements the L&F for this component.

Returns:
the FileChooserUI object that implements the FileChooserUI L&F


"
JFileChooser,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""FileChooserUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JFileChooser,isAcceptAllFileFilterUsed(),boolean,Returns whether the AcceptAll FileFilter is used.,"

isAcceptAllFileFilterUsed
public boolean isAcceptAllFileFilterUsed()
Returns whether the AcceptAll FileFilter is used.

Returns:
true if the AcceptAll FileFilter is used
Since:
1.3
See Also:
setAcceptAllFileFilterUsed(boolean)


"
JFileChooser,isDirectorySelectionEnabled(),boolean,Convenience call that determines if directories are selectable based on the current file selection mode.,"

isDirectorySelectionEnabled
public boolean isDirectorySelectionEnabled()
Convenience call that determines if directories are selectable based
 on the current file selection mode.

See Also:
setFileSelectionMode(int), 
getFileSelectionMode()


"
JFileChooser,isFileHidingEnabled(),boolean,"Returns true if hidden files are not shown in the file chooser; otherwise, returns false.","

isFileHidingEnabled
public boolean isFileHidingEnabled()
Returns true if hidden files are not shown in the file chooser;
 otherwise, returns false.

Returns:
the status of the file hiding property
See Also:
setFileHidingEnabled(boolean)


"
JFileChooser,isFileSelectionEnabled(),boolean,Convenience call that determines if files are selectable based on the current file selection mode.,"

isFileSelectionEnabled
public boolean isFileSelectionEnabled()
Convenience call that determines if files are selectable based on the
 current file selection mode.

See Also:
setFileSelectionMode(int), 
getFileSelectionMode()


"
JFileChooser,isMultiSelectionEnabled(),boolean,Returns true if multiple files can be selected.,"

isMultiSelectionEnabled
public boolean isMultiSelectionEnabled()
Returns true if multiple files can be selected.

Returns:
true if multiple files can be selected
See Also:
setMultiSelectionEnabled(boolean)


"
JFileChooser,isTraversable(File f),boolean,Returns true if the file (directory) can be visited.,"

isTraversable
public boolean isTraversable(File f)
Returns true if the file (directory) can be visited.
 Returns false if the directory cannot be traversed.

Parameters:
f - the File
Returns:
true if the file/directory can be traversed, otherwise false
See Also:
FileView.isTraversable(java.io.File)


"
JFileChooser,paramString(),protected String,Returns a string representation of this JFileChooser.,"

paramString
protected String paramString()
Returns a string representation of this JFileChooser.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JFileChooser


"
JFileChooser,removeActionListener(ActionListener l),void,Removes an ActionListener from the file chooser.,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes an ActionListener from the file chooser.

Parameters:
l - the listener to be removed
See Also:
addActionListener(java.awt.event.ActionListener)


"
JFileChooser,removeChoosableFileFilter(FileFilter f),boolean,Removes a filter from the list of user choosable file filters.,"

removeChoosableFileFilter
public boolean removeChoosableFileFilter(FileFilter f)
Removes a filter from the list of user choosable file filters. Returns
 true if the file filter was removed.

See Also:
addChoosableFileFilter(javax.swing.filechooser.FileFilter), 
getChoosableFileFilters(), 
resetChoosableFileFilters()


"
JFileChooser,rescanCurrentDirectory(),void,Tells the UI to rescan its files list from the current directory.,"

rescanCurrentDirectory
public void rescanCurrentDirectory()
Tells the UI to rescan its files list from the current directory.

"
JFileChooser,resetChoosableFileFilters(),void,Resets the choosable file filter list to its starting state.,"

resetChoosableFileFilters
public void resetChoosableFileFilters()
Resets the choosable file filter list to its starting state. Normally,
 this removes all added file filters while leaving the
 AcceptAll file filter.

See Also:
addChoosableFileFilter(javax.swing.filechooser.FileFilter), 
getChoosableFileFilters(), 
removeChoosableFileFilter(javax.swing.filechooser.FileFilter)


"
JFileChooser,setAcceptAllFileFilterUsed(boolean b),void,Determines whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.,"

setAcceptAllFileFilterUsed
public void setAcceptAllFileFilterUsed(boolean b)
Determines whether the AcceptAll FileFilter is used
 as an available choice in the choosable filter list.
 If false, the AcceptAll file filter is removed from
 the list of available file filters.
 If true, the AcceptAll file filter will become the
 the actively used file filter.

Since:
1.3
See Also:
isAcceptAllFileFilterUsed(), 
getAcceptAllFileFilter(), 
setFileFilter(javax.swing.filechooser.FileFilter)


"
JFileChooser,setAccessory(JComponent newAccessory),void,Sets the accessory component.,"

setAccessory
public void setAccessory(JComponent newAccessory)
Sets the accessory component. An accessory is often used to show a
 preview image of the selected file; however, it can be used for anything
 that the programmer wishes, such as extra custom file chooser controls.

 
 Note: if there was a previous accessory, you should unregister
 any listeners that the accessory might have registered with the
 file chooser.

"
JFileChooser,setApproveButtonMnemonic(char mnemonic),void,Sets the approve button's mnemonic using a character.,"

setApproveButtonMnemonic
public void setApproveButtonMnemonic(char mnemonic)
Sets the approve button's mnemonic using a character.

Parameters:
mnemonic - a character value for the mnemonic key
See Also:
getApproveButtonMnemonic()


"
JFileChooser,setApproveButtonMnemonic(int mnemonic),void,Sets the approve button's mnemonic using a numeric keycode.,"

setApproveButtonMnemonic
public void setApproveButtonMnemonic(int mnemonic)
Sets the approve button's mnemonic using a numeric keycode.

Parameters:
mnemonic - an integer value for the mnemonic key
See Also:
getApproveButtonMnemonic()


"
JFileChooser,setApproveButtonText(String approveButtonText),void,Sets the text used in the ApproveButton in the FileChooserUI.,"

setApproveButtonText
public void setApproveButtonText(String approveButtonText)
Sets the text used in the ApproveButton in the
 FileChooserUI.

Parameters:
approveButtonText - the text used in the ApproveButton
See Also:
getApproveButtonText(), 
setDialogType(int), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,setApproveButtonToolTipText(String toolTipText),void,Sets the tooltip text used in the ApproveButton.,"

setApproveButtonToolTipText
public void setApproveButtonToolTipText(String toolTipText)
Sets the tooltip text used in the ApproveButton.
 If null, the UI object will determine the button's text.

Parameters:
toolTipText - the tooltip text for the approve button
See Also:
setApproveButtonText(java.lang.String), 
setDialogType(int), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,setControlButtonsAreShown(boolean b),void,Sets the property that indicates whether the approve and cancel buttons are shown in the file chooser.,"

setControlButtonsAreShown
public void setControlButtonsAreShown(boolean b)
Sets the property
 that indicates whether the approve and cancel
 buttons are shown in the file chooser.  This property
 is true by default.  Look and feels
 that always show these buttons will ignore the value
 of this property.
 This method fires a property-changed event,
 using the string value of
 CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
 as the name of the property.

Parameters:
b - false if control buttons should not be
    shown; otherwise, true
Since:
1.3
See Also:
getControlButtonsAreShown(), 
CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY


"
JFileChooser,setCurrentDirectory(File dir),void,Sets the current directory.,"

setCurrentDirectory
public void setCurrentDirectory(File dir)
Sets the current directory. Passing in null sets the
 file chooser to point to the user's default directory.
 This default depends on the operating system. It is
 typically the ""My Documents"" folder on Windows, and the user's
 home directory on Unix.

 If the file passed in as currentDirectory is not a
 directory, the parent of the file will be used as the currentDirectory.
 If the parent is not traversable, then it will walk up the parent tree
 until it finds a traversable directory, or hits the root of the
 file system.

Parameters:
dir - the current directory to point to
See Also:
getCurrentDirectory()


"
JFileChooser,setDialogTitle(String dialogTitle),void,Sets the string that goes in the JFileChooser window's title bar.,"

setDialogTitle
public void setDialogTitle(String dialogTitle)
Sets the string that goes in the JFileChooser window's
 title bar.

Parameters:
dialogTitle - the new String for the title bar
See Also:
getDialogTitle()


"
JFileChooser,setDialogType(int dialogType),void,Sets the type of this dialog.,"

setDialogType
public void setDialogType(int dialogType)
Sets the type of this dialog. Use OPEN_DIALOG when you
 want to bring up a file chooser that the user can use to open a file.
 Likewise, use SAVE_DIALOG for letting the user choose
 a file for saving.
 Use CUSTOM_DIALOG when you want to use the file
 chooser in a context other than ""Open"" or ""Save"".
 For instance, you might want to bring up a file chooser that allows
 the user to choose a file to execute. Note that you normally would not
 need to set the JFileChooser to use
 CUSTOM_DIALOG
 since a call to setApproveButtonText does this for you.
 The default dialog type is JFileChooser.OPEN_DIALOG.

Parameters:
dialogType - the type of dialog to be displayed:
 
JFileChooser.OPEN_DIALOG
 JFileChooser.SAVE_DIALOG
 JFileChooser.CUSTOM_DIALOG
 
Throws:
IllegalArgumentException - if dialogType is
                          not legal
See Also:
getDialogType(), 
setApproveButtonText(java.lang.String)


"
JFileChooser,setDragEnabled(boolean b),void,"Sets the dragEnabled property, which must be true to enable automatic drag handling (the first part of drag and drop) on this component.","

setDragEnabled
public void setDragEnabled(boolean b)
Sets the dragEnabled property,
 which must be true to enable
 automatic drag handling (the first part of drag and drop)
 on this component.
 The transferHandler property needs to be set
 to a non-null value for the drag to do
 anything.  The default value of the dragEnabled
 property
 is false.

 

 When automatic drag handling is enabled,
 most look and feels begin a drag-and-drop operation
 whenever the user presses the mouse button over an item
 and then moves the mouse a few pixels.
 Setting this property to true
 can therefore have a subtle effect on
 how selections behave.

 

 Some look and feels might not support automatic drag and drop;
 they will ignore this property.  You can work around such
 look and feels by modifying the component
 to directly call the exportAsDrag method of a
 TransferHandler.

Parameters:
b - the value to set the dragEnabled property to
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JFileChooser,setFileFilter(FileFilter filter),void,Sets the current file filter.,"

setFileFilter
public void setFileFilter(FileFilter filter)
Sets the current file filter. The file filter is used by the
 file chooser to filter out files from the user's view.

Parameters:
filter - the new current file filter to use
See Also:
getFileFilter()


"
JFileChooser,setFileHidingEnabled(boolean b),void,Sets file hiding on or off.,"

setFileHidingEnabled
public void setFileHidingEnabled(boolean b)
Sets file hiding on or off. If true, hidden files are not shown
 in the file chooser. The job of determining which files are
 shown is done by the FileView.

Parameters:
b - the boolean value that determines whether file hiding is
          turned on
See Also:
isFileHidingEnabled()


"
JFileChooser,setFileSelectionMode(int mode),void,"Sets the JFileChooser to allow the user to just select files, just select directories, or select both files and directories.","

setFileSelectionMode
public void setFileSelectionMode(int mode)
Sets the JFileChooser to allow the user to just
 select files, just select
 directories, or select both files and directories.  The default is
 JFilesChooser.FILES_ONLY.

Parameters:
mode - the type of files to be displayed:
 
JFileChooser.FILES_ONLY
 JFileChooser.DIRECTORIES_ONLY
 JFileChooser.FILES_AND_DIRECTORIES
 
Throws:
IllegalArgumentException - if mode is an
                          illegal file selection mode
See Also:
getFileSelectionMode()


"
JFileChooser,setFileSystemView(FileSystemView fsv),void,"Sets the file system view that the JFileChooser uses for accessing and creating file system resources, such as finding the floppy drive and getting a list of root drives.","

setFileSystemView
public void setFileSystemView(FileSystemView fsv)
Sets the file system view that the JFileChooser uses for
 accessing and creating file system resources, such as finding
 the floppy drive and getting a list of root drives.

Parameters:
fsv - the new FileSystemView
See Also:
FileSystemView


"
JFileChooser,setFileView(FileView fileView),void,"Sets the file view to used to retrieve UI information, such as the icon that represents a file or the type description of a file.","

setFileView
public void setFileView(FileView fileView)
Sets the file view to used to retrieve UI information, such as
 the icon that represents a file or the type description of a file.

See Also:
getFileView()


"
JFileChooser,setMultiSelectionEnabled(boolean b),void,Sets the file chooser to allow multiple file selections.,"

setMultiSelectionEnabled
public void setMultiSelectionEnabled(boolean b)
Sets the file chooser to allow multiple file selections.

Parameters:
b - true if multiple files may be selected
See Also:
isMultiSelectionEnabled()


"
JFileChooser,setSelectedFile(File file),void,Sets the selected file.,"

setSelectedFile
public void setSelectedFile(File file)
Sets the selected file. If the file's parent directory is
 not the current directory, changes the current directory
 to be the file's parent directory.

Parameters:
file - the selected file
See Also:
getSelectedFile()


"
JFileChooser,setSelectedFiles(File[] selectedFiles),void,Sets the list of selected files if the file chooser is set to allow multiple selection.,"

setSelectedFiles
public void setSelectedFiles(File[] selectedFiles)
Sets the list of selected files if the file chooser is
 set to allow multiple selection.

"
JFileChooser,setup(FileSystemView view),protected void,Performs common constructor initialization and setup.,"

setup
protected void setup(FileSystemView view)
Performs common constructor initialization and setup.

"
JFileChooser,"showDialog(Component parent, String approveButtonText)",int,Pops a custom file chooser dialog with a custom approve button.,"

showDialog
public int showDialog(Component parent,
                      String approveButtonText)
               throws HeadlessException
Pops a custom file chooser dialog with a custom approve button.
 For example, the following code
 pops up a file chooser with a ""Run Application"" button
 (instead of the normal ""Save"" or ""Open"" button):
 
 filechooser.showDialog(parentFrame, ""Run Application"");
 

 Alternatively, the following code does the same thing:
 
    JFileChooser chooser = new JFileChooser(null);
    chooser.setApproveButtonText(""Run Application"");
    chooser.showDialog(parentFrame, null);
 




 The parent argument determines two things:
 the frame on which the open dialog depends and
 the component whose position the look and feel
 should consider when placing the dialog.  If the parent
 is a Frame object (such as a JFrame)
 then the dialog depends on the frame and
 the look and feel positions the dialog
 relative to the frame (for example, centered over the frame).
 If the parent is a component, then the dialog
 depends on the frame containing the component,
 and is positioned relative to the component
 (for example, centered over the component).
 If the parent is null, then the dialog depends on
 no visible window, and it's placed in a
 look-and-feel-dependent position
 such as the center of the screen.

Parameters:
parent - the parent component of the dialog;
                  can be null
approveButtonText - the text of the ApproveButton
Returns:
the return state of the file chooser on popdown:
 
JFileChooser.CANCEL_OPTION
 JFileChooser.APPROVE_OPTION
 JFileChooser.ERROR_OPTION if an error occurs or the
                  dialog is dismissed
 
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless()


"
JFileChooser,showOpenDialog(Component parent),int,"Pops up an ""Open File"" file chooser dialog.","

showOpenDialog
public int showOpenDialog(Component parent)
                   throws HeadlessException
Pops up an ""Open File"" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

Parameters:
parent - the parent component of the dialog,
                  can be null;
                  see showDialog for details
Returns:
the return state of the file chooser on popdown:
 
JFileChooser.CANCEL_OPTION
 JFileChooser.APPROVE_OPTION
 JFileChooser.ERROR_OPTION if an error occurs or the
                  dialog is dismissed
 
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless(), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,showSaveDialog(Component parent),int,"Pops up a ""Save File"" file chooser dialog.","

showSaveDialog
public int showSaveDialog(Component parent)
                   throws HeadlessException
Pops up a ""Save File"" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

Parameters:
parent - the parent component of the dialog,
                  can be null;
                  see showDialog for details
Returns:
the return state of the file chooser on popdown:
 
JFileChooser.CANCEL_OPTION
 JFileChooser.APPROVE_OPTION
 JFileChooser.ERROR_OPTION if an error occurs or the
                  dialog is dismissed
 
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless(), 
showDialog(java.awt.Component, java.lang.String)


"
JFileChooser,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JFormattedTextField,commitEdit(),void,Forces the current value to be taken from the AbstractFormatter and set as the current value.,"

commitEdit
public void commitEdit()
                throws ParseException
Forces the current value to be taken from the
 AbstractFormatter and set as the current value.
 This has no effect if there is no current
 AbstractFormatter installed.

Throws:
ParseException - if the AbstractFormatter is not able
         to format the current value


"
JFormattedTextField,getActions(),Action[],Fetches the command list for the editor.,"

getActions
public Action[] getActions()
Fetches the command list for the editor.  This is
 the list of commands supported by the plugged-in UI
 augmented by the collection of commands that the
 editor itself supports.  These are useful for binding
 to events, such as in a keymap.

Overrides:
getActions in class JTextField
Returns:
the command list


"
JFormattedTextField,getFocusLostBehavior(),int,Returns the behavior when focus is lost.,"

getFocusLostBehavior
public int getFocusLostBehavior()
Returns the behavior when focus is lost. This will be one of
 COMMIT_OR_REVERT,
 COMMIT,
 REVERT or
 PERSIST
 Note that some AbstractFormatters may push changes as
 they occur, so that the value of this will have no effect.

Returns:
returns behavior when focus is lost


"
JFormattedTextField,getFormatter(),JFormattedTextField.AbstractFormatter,Returns the AbstractFormatter that is used to format and parse the current value.,"

getFormatter
public JFormattedTextField.AbstractFormatter getFormatter()
Returns the AbstractFormatter that is used to format and
 parse the current value.

Returns:
AbstractFormatter used for formatting


"
JFormattedTextField,getFormatterFactory(),JFormattedTextField.AbstractFormatterFactory,Returns the current AbstractFormatterFactory.,"

getFormatterFactory
public JFormattedTextField.AbstractFormatterFactory getFormatterFactory()
Returns the current AbstractFormatterFactory.

Returns:
AbstractFormatterFactory used to determine
         AbstractFormatters
See Also:
setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory)


"
JFormattedTextField,getUIClassID(),String,Gets the class ID for a UI.,"

getUIClassID
public String getUIClassID()
Gets the class ID for a UI.

Overrides:
getUIClassID in class JTextField
Returns:
the string ""FormattedTextFieldUI""
See Also:
JComponent.getUIClassID()


"
JFormattedTextField,getValue(),Object,Returns the last valid value.,"

getValue
public Object getValue()
Returns the last valid value. Based on the editing policy of
 the AbstractFormatter this may not return the current
 value. The currently edited value can be obtained by invoking
 commitEdit followed by getValue.

Returns:
Last valid value


"
JFormattedTextField,invalidEdit(),protected void,Invoked when the user inputs an invalid value.,"

invalidEdit
protected void invalidEdit()
Invoked when the user inputs an invalid value. This gives the
 component a chance to provide feedback. The default
 implementation beeps.

"
JFormattedTextField,isEditValid(),boolean,Returns true if the current value being edited is valid.,"

isEditValid
public boolean isEditValid()
Returns true if the current value being edited is valid. The value of
 this is managed by the current AbstractFormatter, as such
 there is no public setter for it.

Returns:
true if the current value being edited is valid.


"
JFormattedTextField,processFocusEvent(FocusEvent e),protected void,"Processes any focus events, such as FocusEvent.FOCUS_GAINED or FocusEvent.FOCUS_LOST.","

processFocusEvent
protected void processFocusEvent(FocusEvent e)
Processes any focus events, such as
 FocusEvent.FOCUS_GAINED or
 FocusEvent.FOCUS_LOST.

Overrides:
processFocusEvent in class Component
Parameters:
e - the FocusEvent
See Also:
FocusEvent


"
JFormattedTextField,processInputMethodEvent(InputMethodEvent e),protected void,"Processes any input method events, such as InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or InputMethodEvent.CARET_POSITION_CHANGED.","

processInputMethodEvent
protected void processInputMethodEvent(InputMethodEvent e)
Processes any input method events, such as
 InputMethodEvent.INPUT_METHOD_TEXT_CHANGED or
 InputMethodEvent.CARET_POSITION_CHANGED.

Overrides:
processInputMethodEvent in class JTextComponent
Parameters:
e - the InputMethodEvent
See Also:
InputMethodEvent


"
JFormattedTextField,setDocument(Document doc),void,Associates the editor with a text document.,"

setDocument
public void setDocument(Document doc)
Associates the editor with a text document.
 The currently registered factory is used to build a view for
 the document, which gets displayed by the editor after revalidation.
 A PropertyChange event (""document"") is propagated to each listener.

Overrides:
setDocument in class JTextField
Parameters:
doc - the document to display/edit
See Also:
JTextComponent.getDocument()


"
JFormattedTextField,setFocusLostBehavior(int behavior),void,Sets the behavior when focus is lost.,"

setFocusLostBehavior
public void setFocusLostBehavior(int behavior)
Sets the behavior when focus is lost. This will be one of
 JFormattedTextField.COMMIT_OR_REVERT,
 JFormattedTextField.REVERT,
 JFormattedTextField.COMMIT or
 JFormattedTextField.PERSIST
 Note that some AbstractFormatters may push changes as
 they occur, so that the value of this will have no effect.
 
 This will throw an IllegalArgumentException if the object
 passed in is not one of the afore mentioned values.
 
 The default value of this property is
 JFormattedTextField.COMMIT_OR_REVERT.

Parameters:
behavior - Identifies behavior when focus is lost
Throws:
IllegalArgumentException - if behavior is not one of the known
         values


"
JFormattedTextField,setFormatter(JFormattedTextField.AbstractFormatter format),protected void,Sets the current AbstractFormatter.,"

setFormatter
protected void setFormatter(JFormattedTextField.AbstractFormatter format)
Sets the current AbstractFormatter.
 
 You should not normally invoke this, instead set the
 AbstractFormatterFactory or set the value.
 JFormattedTextField will
 invoke this as the state of the JFormattedTextField
 changes and requires the value to be reset.
 JFormattedTextField passes in the
 AbstractFormatter obtained from the
 AbstractFormatterFactory.
 
 This is a JavaBeans bound property.

Parameters:
format - AbstractFormatter to use for formatting
See Also:
setFormatterFactory(javax.swing.JFormattedTextField.AbstractFormatterFactory)


"
JFormattedTextField,setFormatterFactory(JFormattedTextField.AbstractFormatterFactory tf),void,Sets the AbstractFormatterFactory.,"

setFormatterFactory
public void setFormatterFactory(JFormattedTextField.AbstractFormatterFactory tf)
Sets the AbstractFormatterFactory.
 AbstractFormatterFactory is
 able to return an instance of AbstractFormatter that is
 used to format a value for display, as well an enforcing an editing
 policy.
 
 If you have not explicitly set an AbstractFormatterFactory
 by way of this method (or a constructor) an
 AbstractFormatterFactory and consequently an
 AbstractFormatter will be used based on the
 Class of the value. NumberFormatter will
 be used for Numbers, DateFormatter will
 be used for Dates, otherwise DefaultFormatter
 will be used.
 
 This is a JavaBeans bound property.

Parameters:
tf - AbstractFormatterFactory used to lookup
          instances of AbstractFormatter


"
JFormattedTextField,setValue(Object value),void,Sets the value that will be formatted by an AbstractFormatter obtained from the current AbstractFormatterFactory.,"

setValue
public void setValue(Object value)
Sets the value that will be formatted by an
 AbstractFormatter obtained from the current
 AbstractFormatterFactory. If no
 AbstractFormatterFactory has been specified, this will
 attempt to create one based on the type of value.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

Parameters:
value - Current value to display


"
JFormattedTextField.AbstractFormatter,clone(),protected Object,Clones the AbstractFormatter.,"

clone
protected Object clone()
                throws CloneNotSupportedException
Clones the AbstractFormatter. The returned instance
 is not associated with a JFormattedTextField.

Overrides:
clone in class Object
Returns:
Copy of the AbstractFormatter
Throws:
CloneNotSupportedException - if the object's class does not
               support the Cloneable interface. Subclasses
               that override the clone method can also
               throw this exception to indicate that an instance cannot
               be cloned.
See Also:
Cloneable


"
JFormattedTextField.AbstractFormatter,getActions(),protected Action[],Subclass and override if you wish to provide a custom set of Actions.,"

getActions
protected Action[] getActions()
Subclass and override if you wish to provide a custom set of
 Actions. install will install these
 on the JFormattedTextField's ActionMap.

Returns:
Array of Actions to install on JFormattedTextField


"
JFormattedTextField.AbstractFormatter,getDocumentFilter(),protected DocumentFilter,Subclass and override if you wish to provide a DocumentFilter to restrict what can be input.,"

getDocumentFilter
protected DocumentFilter getDocumentFilter()
Subclass and override if you wish to provide a
 DocumentFilter to restrict what can be input.
 install will install the returned value onto
 the JFormattedTextField.

Returns:
DocumentFilter to restrict edits


"
JFormattedTextField.AbstractFormatter,getFormattedTextField(),protected JFormattedTextField,Returns the current JFormattedTextField the AbstractFormatter is installed on.,"

getFormattedTextField
protected JFormattedTextField getFormattedTextField()
Returns the current JFormattedTextField the
 AbstractFormatter is installed on.

Returns:
JFormattedTextField formatting for.


"
JFormattedTextField.AbstractFormatter,getNavigationFilter(),protected NavigationFilter,Subclass and override if you wish to provide a filter to restrict where the user can navigate to.,"

getNavigationFilter
protected NavigationFilter getNavigationFilter()
Subclass and override if you wish to provide a filter to restrict
 where the user can navigate to.
 install will install the returned value onto
 the JFormattedTextField.

Returns:
NavigationFilter to restrict navigation


"
JFormattedTextField.AbstractFormatter,install(JFormattedTextField ftf),void,Installs the AbstractFormatter onto a particular JFormattedTextField.,"

install
public void install(JFormattedTextField ftf)
Installs the AbstractFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.  You will only need to invoke this yourself if
 you are subclassing JFormattedTextField and
 installing/uninstalling AbstractFormatter at a
 different time than JFormattedTextField does.

Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
JFormattedTextField.AbstractFormatter,invalidEdit(),protected void,This should be invoked when the user types an invalid character.,"

invalidEdit
protected void invalidEdit()
This should be invoked when the user types an invalid character.
 This forwards the call to the current JFormattedTextField.

"
JFormattedTextField.AbstractFormatter,setEditValid(boolean valid),protected void,Invoke this to update the editValid property of the JFormattedTextField.,"

setEditValid
protected void setEditValid(boolean valid)
Invoke this to update the editValid property of the
 JFormattedTextField. If you an enforce a policy
 such that the JFormattedTextField is always in a
 valid state, you will never need to invoke this.

Parameters:
valid - Valid state of the JFormattedTextField


"
JFormattedTextField.AbstractFormatter,stringToValue(String text),abstract Object,Parses text returning an arbitrary Object.,"

stringToValue
public abstract Object stringToValue(String text)
                              throws ParseException
Parses text returning an arbitrary Object. Some
 formatters may return null.

Parameters:
text - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
JFormattedTextField.AbstractFormatter,uninstall(),void,Uninstalls any state the AbstractFormatter may have installed on the JFormattedTextField.,"

uninstall
public void uninstall()
Uninstalls any state the AbstractFormatter may have
 installed on the JFormattedTextField. This resets the
 DocumentFilter, NavigationFilter
 and additional Actions installed on the
 JFormattedTextField.

"
JFormattedTextField.AbstractFormatter,valueToString(Object value),abstract String,Returns the string value to display for value.,"

valueToString
public abstract String valueToString(Object value)
                              throws ParseException
Returns the string value to display for value.

Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
JFormattedTextField.AbstractFormatterFactory,getFormatter(JFormattedTextField tf),abstract JFormattedTextField.AbstractFormatter,Returns an AbstractFormatter that can handle formatting of the passed in JFormattedTextField.,"

getFormatter
public abstract JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField tf)
Returns an AbstractFormatter that can handle formatting
 of the passed in JFormattedTextField.

Parameters:
tf - JFormattedTextField requesting AbstractFormatter
Returns:
AbstractFormatter to handle formatting duties, a null
         return value implies the JFormattedTextField should behave
         like a normal JTextField


"
JFrame,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified child Component.
 This method is overridden to conditionally forward calls to the
 contentPane.
 By default, children are added to the contentPane instead
 of the frame, refer to RootPaneContainer for
 details.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JFrame,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor methods to create the default
 rootPane.

"
JFrame,frameInit(),protected void,Called by the constructors to init the JFrame properly.,"

frameInit
protected void frameInit()
Called by the constructors to init the JFrame properly.

"
JFrame,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JFrame.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JFrame.
 For JFrames, the AccessibleContext takes the form of an
 AccessibleJFrame.
 A new AccessibleJFrame instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Frame
Returns:
an AccessibleJFrame that serves as the
         AccessibleContext of this JFrame


"
JFrame,getContentPane(),Container,Returns the contentPane object for this frame.,"

getContentPane
public Container getContentPane()
Returns the contentPane object for this frame.

Specified by:
getContentPane in interface RootPaneContainer
Returns:
the contentPane property
See Also:
setContentPane(java.awt.Container), 
RootPaneContainer.getContentPane()


"
JFrame,getDefaultCloseOperation(),int,"Returns the operation that occurs when the user initiates a ""close"" on this frame.","

getDefaultCloseOperation
public int getDefaultCloseOperation()
Returns the operation that occurs when the user
 initiates a ""close"" on this frame.

Returns:
an integer indicating the window-close operation
See Also:
setDefaultCloseOperation(int)


"
JFrame,getGlassPane(),Component,Returns the glassPane object for this frame.,"

getGlassPane
public Component getGlassPane()
Returns the glassPane object for this frame.

Specified by:
getGlassPane in interface RootPaneContainer
Returns:
the glassPane property
See Also:
setGlassPane(java.awt.Component), 
RootPaneContainer.getGlassPane()


"
JFrame,getGraphics(),Graphics,Creates a graphics context for this component.,"

getGraphics
public Graphics getGraphics()
Creates a graphics context for this component. This method will
 return null if this component is currently not
 displayable.

Overrides:
getGraphics in class Component
Returns:
a graphics context for this component, or null
             if it has none
Since:
1.6
See Also:
Component.paint(java.awt.Graphics)


"
JFrame,getJMenuBar(),JMenuBar,Returns the menubar set on this frame.,"

getJMenuBar
public JMenuBar getJMenuBar()
Returns the menubar set on this frame.

Returns:
the menubar for this frame
See Also:
setJMenuBar(javax.swing.JMenuBar)


"
JFrame,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this frame.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Returns the layeredPane object for this frame.

Specified by:
getLayeredPane in interface RootPaneContainer
Returns:
the layeredPane property
See Also:
setLayeredPane(javax.swing.JLayeredPane), 
RootPaneContainer.getLayeredPane()


"
JFrame,getRootPane(),JRootPane,Returns the rootPane object for this frame.,"

getRootPane
public JRootPane getRootPane()
Returns the rootPane object for this frame.

Specified by:
getRootPane in interface RootPaneContainer
Returns:
the rootPane property
See Also:
setRootPane(javax.swing.JRootPane), 
RootPaneContainer.getRootPane()


"
JFrame,getTransferHandler(),TransferHandler,Gets the transferHandler property.,"

getTransferHandler
public TransferHandler getTransferHandler()
Gets the transferHandler property.

Returns:
the value of the transferHandler property
Since:
1.6
See Also:
TransferHandler, 
setTransferHandler(javax.swing.TransferHandler)


"
JFrame,isDefaultLookAndFeelDecorated(),static boolean,Returns true if newly created JFrames should have their Window decorations provided by the current look and feel.,"

isDefaultLookAndFeelDecorated
public static boolean isDefaultLookAndFeelDecorated()
Returns true if newly created JFrames should have their
 Window decorations provided by the current look and feel. This is only
 a hint, as certain look and feels may not support this feature.

Returns:
true if look and feel should provide Window decorations.
Since:
1.4


"
JFrame,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.,"

isRootPaneCheckingEnabled
protected boolean isRootPaneCheckingEnabled()
Returns whether calls to add and
 setLayout are forwarded to the contentPane.

Returns:
true if add and setLayout
         are forwarded; false otherwise
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JFrame,paramString(),protected String,Returns a string representation of this JFrame.,"

paramString
protected String paramString()
Returns a string representation of this JFrame.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class Frame
Returns:
a string representation of this JFrame


"
JFrame,processWindowEvent(WindowEvent e),protected void,Processes window events occurring on this component.,"

processWindowEvent
protected void processWindowEvent(WindowEvent e)
Processes window events occurring on this component.
 Hides the window or disposes of it, as specified by the setting
 of the defaultCloseOperation property.

Overrides:
processWindowEvent in class Window
Parameters:
e - the window event
See Also:
setDefaultCloseOperation(int), 
Window.processWindowEvent(java.awt.event.WindowEvent)


"
JFrame,remove(Component comp),void,Removes the specified component from the container.,"

remove
public void remove(Component comp)
Removes the specified component from the container. If
 comp is not the rootPane, this will forward
 the call to the contentPane. This will do nothing if
 comp is not a child of the JFrame or
 contentPane.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
Container.add(java.awt.Component), 
RootPaneContainer


"
JFrame,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.,"

repaint
public void repaint(long time,
                    int x,
                    int y,
                    int width,
                    int height)
Repaints the specified rectangle of this component within
 time milliseconds.  Refer to RepaintManager
 for details on how the repaint is handled.

Overrides:
repaint in class Component
Parameters:
time - maximum time in milliseconds before update
x - the x coordinate
y - the y coordinate
width - the width
height - the height
Since:
1.6
See Also:
RepaintManager


"
JFrame,setContentPane(Container contentPane),void,Sets the contentPane property.,"

setContentPane
public void setContentPane(Container contentPane)
Sets the contentPane property.
 This method is called by the constructor.
 
 Swing's painting architecture requires an opaque JComponent
 in the containment hierarchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque JComponent.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
contentPane - the contentPane object for this frame
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
getContentPane(), 
RootPaneContainer.setContentPane(java.awt.Container), 
JRootPane


"
JFrame,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this frame.","

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this frame.
 You must specify one of the following choices:
 

DO_NOTHING_ON_CLOSE
 (defined in WindowConstants):
 Don't do anything; require the
 program to handle the operation in the windowClosing
 method of a registered WindowListener object.

 HIDE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide the frame after
 invoking any registered WindowListener
 objects.

 DISPOSE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide and dispose the
 frame after invoking any registered WindowListener
 objects.

 EXIT_ON_CLOSE
 (defined in JFrame):
 Exit the application using the System
exit method.  Use this only in applications.
 

 The value is set to HIDE_ON_CLOSE by default. Changes
 to the value of this property cause the firing of a property
 change event, with property name ""defaultCloseOperation"".
 
Note: When the last displayable window within the
 Java virtual machine (VM) is disposed of, the VM may
 terminate.  See 
 AWT Threading Issues for more information.

Parameters:
operation - the operation which should be performed when the
        user closes the frame
Throws:
IllegalArgumentException - if defaultCloseOperation value
             isn't one of the above valid values
SecurityException - if EXIT_ON_CLOSE has been specified and the
        SecurityManager will
        not allow the caller to invoke System.exit
See Also:
Window.addWindowListener(java.awt.event.WindowListener), 
getDefaultCloseOperation(), 
WindowConstants, 
Runtime.exit(int)


"
JFrame,setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated),static void,"Provides a hint as to whether or not newly created JFrames should have their Window decorations (such as borders, widgets to close the window, title...) provided by the current look and feel.","

setDefaultLookAndFeelDecorated
public static void setDefaultLookAndFeelDecorated(boolean defaultLookAndFeelDecorated)
Provides a hint as to whether or not newly created JFrames
 should have their Window decorations (such as borders, widgets to
 close the window, title...) provided by the current look
 and feel. If defaultLookAndFeelDecorated is true,
 the current LookAndFeel supports providing window
 decorations, and the current window manager supports undecorated
 windows, then newly created JFrames will have their
 Window decorations provided by the current LookAndFeel.
 Otherwise, newly created JFrames will have their
 Window decorations provided by the current window manager.
 
 You can get the same effect on a single JFrame by doing the following:
 
    JFrame frame = new JFrame();
    frame.setUndecorated(true);
    frame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
 

Parameters:
defaultLookAndFeelDecorated - A hint as to whether or not current
        look and feel should provide window decorations
Since:
1.4
See Also:
LookAndFeel.getSupportsWindowDecorations()


"
JFrame,setGlassPane(Component glassPane),void,Sets the glassPane property.,"

setGlassPane
public void setGlassPane(Component glassPane)
Sets the glassPane property.
 This method is called by the constructor.

Specified by:
setGlassPane in interface RootPaneContainer
Parameters:
glassPane - the glassPane object for this frame
See Also:
getGlassPane(), 
RootPaneContainer.setGlassPane(java.awt.Component)


"
JFrame,setIconImage(Image image),void,Sets the image to be displayed as the icon for this window.,"

setIconImage
public void setIconImage(Image image)
Sets the image to be displayed as the icon for this window.
 
 This method can be used instead of setIconImages()
 to specify a single image as a window's icon.
 
 The following statement:
 
     setIconImage(image);
 
 is equivalent to:
 
     ArrayList<Image> imageList = new ArrayList<Image>();
     imageList.add(image);
     setIconImages(imageList);
 

 Note : Native windowing systems may use different images of differing
 dimensions to represent a window, depending on the context (e.g.
 window decoration, window list, taskbar, etc.). They could also use
 just a single image for all contexts or no image at all.

Overrides:
setIconImage in class Frame
Parameters:
image - the icon image to be displayed.
See Also:
Window.setIconImages(java.util.List<? extends java.awt.Image>), 
Window.getIconImages()


"
JFrame,setJMenuBar(JMenuBar menubar),void,Sets the menubar for this frame.,"

setJMenuBar
public void setJMenuBar(JMenuBar menubar)
Sets the menubar for this frame.

Parameters:
menubar - the menubar being placed in the frame
See Also:
getJMenuBar()


"
JFrame,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layeredPane)
Sets the layeredPane property.
 This method is called by the constructor.

Specified by:
setLayeredPane in interface RootPaneContainer
Parameters:
layeredPane - the layeredPane object for this frame
Throws:
IllegalComponentStateException - (a runtime
            exception) if the layered pane parameter is null
See Also:
getLayeredPane(), 
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)


"
JFrame,setLayout(LayoutManager manager),void,Sets the LayoutManager.,"

setLayout
public void setLayout(LayoutManager manager)
Sets the LayoutManager.
 Overridden to conditionally forward the call to the
 contentPane.
 Refer to RootPaneContainer for
 more information.

Overrides:
setLayout in class Container
Parameters:
manager - the LayoutManager
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JFrame,setRootPane(JRootPane root),protected void,Sets the rootPane property.,"

setRootPane
protected void setRootPane(JRootPane root)
Sets the rootPane property.
 This method is called by the constructor.

Parameters:
root - the rootPane object for this frame
See Also:
getRootPane()


"
JFrame,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.,"

setRootPaneCheckingEnabled
protected void setRootPaneCheckingEnabled(boolean enabled)
Sets whether calls to add and
 setLayout are forwarded to the contentPane.

Parameters:
enabled - true if add and setLayout
        are forwarded, false if they should operate directly on the
        JFrame.
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
isRootPaneCheckingEnabled(), 
RootPaneContainer


"
JFrame,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component.","

setTransferHandler
public void setTransferHandler(TransferHandler newHandler)
Sets the transferHandler property, which is a mechanism to
 support transfer of data into this component. Use null
 if the component does not support data transfer operations.
 
 If the system property suppressSwingDropSupport is false
 (the default) and the current drop target on this component is either
 null or not a user-set drop target, this method will change the
 drop target as follows: If newHandler is null it will
 clear the drop target. If not null it will install a new
 DropTarget.
 
 Note: When used with JFrame, TransferHandler only
 provides data import capability, as the data export related methods
 are currently typed to JComponent.
 
 Please see
 
 How to Use Drag and Drop and Data Transfer, a section in
 The Java Tutorial, for more information.

Parameters:
newHandler - the new TransferHandler
Since:
1.6
See Also:
TransferHandler, 
getTransferHandler(), 
Component.setDropTarget(java.awt.dnd.DropTarget)


"
JFrame,update(Graphics g),void,Just calls paint(g).,"

update
public void update(Graphics g)
Just calls paint(g).  This method was overridden to
 prevent an unnecessary call to clear the background.

Overrides:
update in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
Component.update(Graphics)


"
JInternalFrame,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified child Component.
 This method is overridden to conditionally forward calls to the
 contentPane.
 By default, children are added to the contentPane instead
 of the frame, refer to RootPaneContainer for
 details.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JInternalFrame,addInternalFrameListener(InternalFrameListener l),void,Adds the specified listener to receive internal frame events from this internal frame.,"

addInternalFrameListener
public void addInternalFrameListener(InternalFrameListener l)
Adds the specified listener to receive internal
 frame events from this internal frame.

Parameters:
l - the internal frame listener


"
JInternalFrame,createRootPane(),protected JRootPane,Called by the constructor to set up the JRootPane.,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor to set up the JRootPane.

Returns:
a new JRootPane
See Also:
JRootPane


"
JInternalFrame,dispose(),void,"Makes this internal frame invisible, unselected, and closed.","

dispose
public void dispose()
Makes this internal frame
 invisible, unselected, and closed.
 If the frame is not already closed,
 this method fires an
 INTERNAL_FRAME_CLOSED event.
 The results of invoking this method are similar to
 setClosed(true),
 but dispose always succeeds in closing
 the internal frame and does not fire
 an INTERNAL_FRAME_CLOSING event.

See Also:
InternalFrameEvent.INTERNAL_FRAME_CLOSED, 
JComponent.setVisible(boolean), 
setSelected(boolean), 
setClosed(boolean)


"
JInternalFrame,doDefaultCloseAction(),void,Fires an INTERNAL_FRAME_CLOSING event and then performs the action specified by the internal frame's default close operation.,"

doDefaultCloseAction
public void doDefaultCloseAction()
Fires an
 INTERNAL_FRAME_CLOSING event
 and then performs the action specified by
 the internal frame's default close operation.
 This method is typically invoked by the
 look-and-feel-implemented action handler
 for the internal frame's close button.

Since:
1.3
See Also:
setDefaultCloseOperation(int), 
InternalFrameEvent.INTERNAL_FRAME_CLOSING


"
JInternalFrame,fireInternalFrameEvent(int id),protected void,Fires an internal frame event.,"

fireInternalFrameEvent
protected void fireInternalFrameEvent(int id)
Fires an internal frame event.

Parameters:
id - the type of the event being fired; one of the following:
 
InternalFrameEvent.INTERNAL_FRAME_OPENED
InternalFrameEvent.INTERNAL_FRAME_CLOSING
InternalFrameEvent.INTERNAL_FRAME_CLOSED
InternalFrameEvent.INTERNAL_FRAME_ICONIFIED
InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED
InternalFrameEvent.INTERNAL_FRAME_ACTIVATED
InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED

 If the event type is not one of the above, nothing happens.


"
JInternalFrame,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JInternalFrame.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JInternalFrame.
 For internal frames, the AccessibleContext
 takes the form of an
 AccessibleJInternalFrame object.
 A new AccessibleJInternalFrame instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJInternalFrame that serves as the
         AccessibleContext of this
         JInternalFrame
See Also:
JInternalFrame.AccessibleJInternalFrame


"
JInternalFrame,getContentPane(),Container,Returns the content pane for this internal frame.,"

getContentPane
public Container getContentPane()
Returns the content pane for this internal frame.

Specified by:
getContentPane in interface RootPaneContainer
Returns:
the content pane
See Also:
RootPaneContainer.setContentPane(java.awt.Container)


"
JInternalFrame,getDefaultCloseOperation(),int,"Returns the default operation that occurs when the user initiates a ""close"" on this internal frame.","

getDefaultCloseOperation
public int getDefaultCloseOperation()
Returns the default operation that occurs when the user
 initiates a ""close"" on this internal frame.

Returns:
the operation that will occur when the user closes the internal
         frame
See Also:
setDefaultCloseOperation(int)


"
JInternalFrame,getDesktopIcon(),JInternalFrame.JDesktopIcon,Returns the JDesktopIcon used when this JInternalFrame is iconified.,"

getDesktopIcon
public JInternalFrame.JDesktopIcon getDesktopIcon()
Returns the JDesktopIcon used when this
 JInternalFrame is iconified.

Returns:
the JDesktopIcon displayed on the desktop
See Also:
setDesktopIcon(javax.swing.JInternalFrame.JDesktopIcon)


"
JInternalFrame,getDesktopPane(),JDesktopPane,Convenience method that searches the ancestor hierarchy for a JDesktop instance.,"

getDesktopPane
public JDesktopPane getDesktopPane()
Convenience method that searches the ancestor hierarchy for a
 JDesktop instance. If JInternalFrame
 finds none, the desktopIcon tree is searched.

Returns:
the JDesktopPane this internal frame belongs to,
         or null if none is found


"
JInternalFrame,getFocusCycleRootAncestor(),Container,Always returns null because JInternalFrames must always be roots of a focus traversal cycle.,"

getFocusCycleRootAncestor
public final Container getFocusCycleRootAncestor()
Always returns null because JInternalFrames
 must always be roots of a focus
 traversal cycle.

Overrides:
getFocusCycleRootAncestor in class Component
Returns:
null
Since:
1.4
See Also:
Container.isFocusCycleRoot()


"
JInternalFrame,getFocusOwner(),Component,"If this JInternalFrame is active, returns the child that has focus.","

getFocusOwner
public Component getFocusOwner()
If this JInternalFrame is active,
 returns the child that has focus.
 Otherwise, returns null.

Returns:
the component with focus, or null if no children have focus
Since:
1.3


"
JInternalFrame,getFrameIcon(),Icon,Returns the image displayed in the title bar of this internal frame (usually in the top-left corner).,"

getFrameIcon
public Icon getFrameIcon()
Returns the image displayed in the title bar of this internal frame (usually
 in the top-left corner).

Returns:
the Icon displayed in the title bar
See Also:
setFrameIcon(javax.swing.Icon)


"
JInternalFrame,getGlassPane(),Component,Returns the glass pane for this internal frame.,"

getGlassPane
public Component getGlassPane()
Returns the glass pane for this internal frame.

Specified by:
getGlassPane in interface RootPaneContainer
Returns:
the glass pane
See Also:
RootPaneContainer.setGlassPane(java.awt.Component)


"
JInternalFrame,getInternalFrameListeners(),InternalFrameListener[],Returns an array of all the InternalFrameListeners added to this JInternalFrame with addInternalFrameListener.,"

getInternalFrameListeners
public InternalFrameListener[] getInternalFrameListeners()
Returns an array of all the InternalFrameListeners added
 to this JInternalFrame with
 addInternalFrameListener.

Returns:
all of the InternalFrameListeners added or an empty
         array if no listeners have been added
Since:
1.4
See Also:
addInternalFrameListener(javax.swing.event.InternalFrameListener)


"
JInternalFrame,getJMenuBar(),JMenuBar,"Returns the current JMenuBar for this JInternalFrame, or null if no menu bar has been set.","

getJMenuBar
public JMenuBar getJMenuBar()
Returns the current JMenuBar for this
 JInternalFrame, or null
 if no menu bar has been set.

Returns:
the JMenuBar used by this internal frame
See Also:
setJMenuBar(javax.swing.JMenuBar)


"
JInternalFrame,getLastCursor(),Cursor,Returns the last Cursor that was set by the setCursor method that is not a resizable Cursor.,"

getLastCursor
public Cursor getLastCursor()
Returns the last Cursor that was set by the
 setCursor method that is not a resizable
 Cursor.

Returns:
the last non-resizable Cursor
Since:
1.6


"
JInternalFrame,getLayer(),int,Convenience method for getting the layer attribute of this component.,"

getLayer
public int getLayer()
Convenience method for getting the layer attribute of this component.

Returns:
an Integer object specifying this
          frame's desktop layer
See Also:
JLayeredPane


"
JInternalFrame,getLayeredPane(),JLayeredPane,Returns the layered pane for this internal frame.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Returns the layered pane for this internal frame.

Specified by:
getLayeredPane in interface RootPaneContainer
Returns:
a JLayeredPane object
See Also:
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane), 
RootPaneContainer.getLayeredPane()


"
JInternalFrame,getMenuBar(),JMenuBar,"Deprecated. As of Swing version 1.0.3, replaced by getJMenuBar().","

getMenuBar
@Deprecated
public JMenuBar getMenuBar()
Deprecated. As of Swing version 1.0.3,
 replaced by getJMenuBar().
Returns the current JMenuBar for this
 JInternalFrame, or null
 if no menu bar has been set.

Returns:
the current menu bar, or null if none has been set


"
JInternalFrame,getMostRecentFocusOwner(),Component,Returns the child component of this JInternalFrame that will receive the focus when this JInternalFrame is selected.,"

getMostRecentFocusOwner
public Component getMostRecentFocusOwner()
Returns the child component of this JInternalFrame
 that will receive the
 focus when this JInternalFrame is selected.
 If this JInternalFrame is
 currently selected, this method returns the same component as
 the getFocusOwner method.
 If this JInternalFrame is not selected,
 then the child component that most recently requested focus will be
 returned. If no child component has ever requested focus, then this
 JInternalFrame's initial focusable component is returned.
 If no such
 child exists, then this JInternalFrame's default component
 to focus is returned.

Returns:
the child component that will receive focus when this
         JInternalFrame is selected
Since:
1.4
See Also:
getFocusOwner(), 
isSelected


"
JInternalFrame,getNormalBounds(),Rectangle,"If the JInternalFrame is not in maximized state, returns getBounds(); otherwise, returns the bounds that the JInternalFrame would be restored to.","

getNormalBounds
public Rectangle getNormalBounds()
If the JInternalFrame is not in maximized state, returns
 getBounds(); otherwise, returns the bounds that the
 JInternalFrame would be restored to.

Returns:
a Rectangle containing the bounds of this
          frame when in the normal state
Since:
1.3


"
JInternalFrame,getRootPane(),JRootPane,Returns the rootPane object for this internal frame.,"

getRootPane
public JRootPane getRootPane()
Returns the rootPane object for this internal frame.

Specified by:
getRootPane in interface RootPaneContainer
Overrides:
getRootPane in class JComponent
Returns:
the rootPane property
See Also:
RootPaneContainer.getRootPane()


"
JInternalFrame,getTitle(),String,Returns the title of the JInternalFrame.,"

getTitle
public String getTitle()
Returns the title of the JInternalFrame.

Returns:
a String containing this internal frame's title
See Also:
setTitle(java.lang.String)


"
JInternalFrame,getUI(),InternalFrameUI,Returns the look-and-feel object that renders this component.,"

getUI
public InternalFrameUI getUI()
Returns the look-and-feel object that renders this component.

Returns:
the InternalFrameUI object that renders
          this component


"
JInternalFrame,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the look-and-feel
 class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""InternalFrameUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JInternalFrame,getWarningString(),String,Gets the warning string that is displayed with this internal frame.,"

getWarningString
public final String getWarningString()
Gets the warning string that is displayed with this internal frame.
 Since an internal frame is always secure (since it's fully
 contained within a window that might need a warning string)
 this method always returns null.

Returns:
null
See Also:
Window.getWarningString()


"
JInternalFrame,hide(),void,NULL,"

hide
public void hide()
Description copied from class: JComponent

Overrides:
hide in class JComponent


"
JInternalFrame,isClosable(),boolean,Returns whether this JInternalFrame can be closed by some user action.,"

isClosable
public boolean isClosable()
Returns whether this JInternalFrame can be closed by
 some user action.

Returns:
true if this internal frame can be closed


"
JInternalFrame,isClosed(),boolean,Returns whether this JInternalFrame is currently closed.,"

isClosed
public boolean isClosed()
Returns whether this JInternalFrame is currently closed.

Returns:
true if this internal frame is closed, false otherwise


"
JInternalFrame,isFocusCycleRoot(),boolean,Always returns true because all JInternalFrames must be roots of a focus traversal cycle.,"

isFocusCycleRoot
public final boolean isFocusCycleRoot()
Always returns true because all JInternalFrames must be
 roots of a focus traversal cycle.

Overrides:
isFocusCycleRoot in class Container
Returns:
true
Since:
1.4
See Also:
setFocusCycleRoot(boolean), 
Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy), 
Container.getFocusTraversalPolicy()


"
JInternalFrame,isIcon(),boolean,Returns whether the JInternalFrame is currently iconified.,"

isIcon
public boolean isIcon()
Returns whether the JInternalFrame is currently iconified.

Returns:
true if this internal frame is iconified


"
JInternalFrame,isIconifiable(),boolean,"Gets the iconable property, which by default is false.","

isIconifiable
public boolean isIconifiable()
Gets the iconable property,
 which by default is false.

Returns:
the value of the iconable property.
See Also:
setIconifiable(boolean)


"
JInternalFrame,isMaximizable(),boolean,Gets the value of the maximizable property.,"

isMaximizable
public boolean isMaximizable()
Gets the value of the maximizable property.

Returns:
the value of the maximizable property
See Also:
setMaximizable(boolean)


"
JInternalFrame,isMaximum(),boolean,Returns whether the JInternalFrame is currently maximized.,"

isMaximum
public boolean isMaximum()
Returns whether the JInternalFrame is currently maximized.

Returns:
true if this internal frame is maximized, false otherwise


"
JInternalFrame,isResizable(),boolean,Returns whether the JInternalFrame can be resized by some user action.,"

isResizable
public boolean isResizable()
Returns whether the JInternalFrame can be resized
 by some user action.

Returns:
true if this internal frame can be resized, false otherwise


"
JInternalFrame,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.,"

isRootPaneCheckingEnabled
protected boolean isRootPaneCheckingEnabled()
Returns whether calls to add and
 setLayout are forwarded to the contentPane.

Returns:
true if add and setLayout
         are forwarded; false otherwise
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JInternalFrame,isSelected(),boolean,"Returns whether the JInternalFrame is the currently ""selected"" or active frame.","

isSelected
public boolean isSelected()
Returns whether the JInternalFrame is the
 currently ""selected"" or active frame.

Returns:
true if this internal frame is currently selected (active)
See Also:
setSelected(boolean)


"
JInternalFrame,moveToBack(),void,Convenience method that moves this component to position -1 if its parent is a JLayeredPane.,"

moveToBack
public void moveToBack()
Convenience method that moves this component to position -1 if its
 parent is a JLayeredPane.

"
JInternalFrame,moveToFront(),void,Convenience method that moves this component to position 0 if its parent is a JLayeredPane.,"

moveToFront
public void moveToFront()
Convenience method that moves this component to position 0 if its
 parent is a JLayeredPane.

"
JInternalFrame,pack(),void,Causes subcomponents of this JInternalFrame to be laid out at their preferred size.,"

pack
public void pack()
Causes subcomponents of this JInternalFrame
 to be laid out at their preferred size.  Internal frames that are
 iconized or maximized are first restored and then packed.  If the
 internal frame is unable to be restored its state is not changed
 and will not be packed.

See Also:
Window.pack()


"
JInternalFrame,paintComponent(Graphics g),protected void,Overridden to allow optimized painting when the internal frame is being dragged.,"

paintComponent
protected void paintComponent(Graphics g)
Overridden to allow optimized painting when the
 internal frame is being dragged.

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics object to protect
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
JInternalFrame,paramString(),protected String,Returns a string representation of this JInternalFrame.,"

paramString
protected String paramString()
Returns a string representation of this JInternalFrame.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JInternalFrame


"
JInternalFrame,remove(Component comp),void,Removes the specified component from the container.,"

remove
public void remove(Component comp)
Removes the specified component from the container. If
 comp is not a child of the JInternalFrame
 this will forward the call to the contentPane.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
Container.add(java.awt.Component), 
RootPaneContainer


"
JInternalFrame,removeInternalFrameListener(InternalFrameListener l),void,Removes the specified internal frame listener so that it no longer receives internal frame events from this internal frame.,"

removeInternalFrameListener
public void removeInternalFrameListener(InternalFrameListener l)
Removes the specified internal frame listener so that it no longer
 receives internal frame events from this internal frame.

Parameters:
l - the internal frame listener


"
JInternalFrame,"reshape(int x, int y, int width, int height)",void,Moves and resizes this component.,"

reshape
public void reshape(int x,
                    int y,
                    int width,
                    int height)
Moves and resizes this component.  Unlike other components,
 this implementation also forces re-layout, so that frame
 decorations such as the title bar are always redisplayed.

Overrides:
reshape in class JComponent
Parameters:
x - an integer giving the component's new horizontal position
           measured in pixels from the left of its container
y - an integer giving the component's new vertical position,
           measured in pixels from the bottom of its container
width - an integer giving the component's new width in pixels
height - an integer giving the component's new height in pixels
See Also:
Component.setBounds(int, int, int, int)


"
JInternalFrame,restoreSubcomponentFocus(),void,Requests the internal frame to restore focus to the last subcomponent that had focus.,"

restoreSubcomponentFocus
public void restoreSubcomponentFocus()
Requests the internal frame to restore focus to the
 last subcomponent that had focus. This is used by the UI when
 the user selected this internal frame --
 for example, by clicking on the title bar.

Since:
1.3


"
JInternalFrame,setClosable(boolean b),void,Sets whether this JInternalFrame can be closed by some user action.,"

setClosable
public void setClosable(boolean b)
Sets whether this JInternalFrame can be closed by
 some user action.

Parameters:
b - a boolean value, where true means this internal frame can be closed


"
JInternalFrame,setClosed(boolean b),void,Closes this internal frame if the argument is true.,"

setClosed
public void setClosed(boolean b)
               throws PropertyVetoException
Closes this internal frame if the argument is true.
 Do not invoke this method with a false argument;
 the result of invoking setClosed(false)
 is unspecified.

 

 If the internal frame is already closed,
 this method does nothing and returns immediately.
 Otherwise,
 this method begins by firing
 an INTERNAL_FRAME_CLOSING event.
 Then this method sets the closed property to true
 unless a listener vetoes the property change.
 This method finishes by making the internal frame
 invisible and unselected,
 and then firing an INTERNAL_FRAME_CLOSED event.

 
Note:
 To reuse an internal frame that has been closed,
 you must add it to a container
 (even if you never removed it from its previous container).
 Typically, this container will be the JDesktopPane
 that previously contained the internal frame.

Parameters:
b - must be true
Throws:
PropertyVetoException - when the attempt to set the
            property is vetoed by the JInternalFrame
See Also:
isClosed(), 
setDefaultCloseOperation(int), 
dispose(), 
InternalFrameEvent.INTERNAL_FRAME_CLOSING


"
JInternalFrame,setContentPane(Container c),void,Sets this JInternalFrame's contentPane property.,"

setContentPane
public void setContentPane(Container c)
Sets this JInternalFrame's contentPane
 property.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
c - the content pane for this internal frame
Throws:
IllegalComponentStateException - (a runtime
           exception) if the content pane parameter is null
See Also:
RootPaneContainer.getContentPane()


"
JInternalFrame,setCursor(Cursor cursor),void,Sets the cursor image to the specified cursor.,"

setCursor
public void setCursor(Cursor cursor)
Sets the cursor image to the specified cursor.  This cursor
 image is displayed when the contains method for
 this component returns true for the current cursor location, and
 this Component is visible, displayable, and enabled. Setting the
 cursor of a Container causes that cursor to be displayed
 within all of the container's subcomponents, except for those
 that have a non-null cursor.
 
 The method may have no visual effect if the Java platform
 implementation and/or the native system do not support
 changing the mouse cursor shape.

Overrides:
setCursor in class Component
Parameters:
cursor - One of the constants defined
          by the Cursor class;
          if this parameter is null
          then this component will inherit
          the cursor of its parent
Since:
1.6
See Also:
Component.isEnabled(), 
Component.isShowing(), 
Component.getCursor(), 
Component.contains(int, int), 
Toolkit.createCustomCursor(java.awt.Image, java.awt.Point, java.lang.String), 
Cursor


"
JInternalFrame,setDefaultCloseOperation(int operation),void,"Sets the operation that will happen by default when the user initiates a ""close"" on this internal frame.","

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this internal frame.
 The possible choices are:
 

DO_NOTHING_ON_CLOSE
 Do nothing.
      This requires the program to handle the operation
      in the internalFrameClosing method
      of a registered InternalFrameListener object.
 HIDE_ON_CLOSE
 Automatically make the internal frame invisible.
 DISPOSE_ON_CLOSE
 Automatically dispose of the internal frame.
 

 The default value is DISPOSE_ON_CLOSE.
 Before performing the specified close operation,
 the internal frame fires
 an INTERNAL_FRAME_CLOSING event.

Parameters:
operation - one of the following constants defined in
                  javax.swing.WindowConstants
                  (an interface implemented by
                  JInternalFrame):
                  DO_NOTHING_ON_CLOSE,
                  HIDE_ON_CLOSE, or
                  DISPOSE_ON_CLOSE
See Also:
addInternalFrameListener(javax.swing.event.InternalFrameListener), 
getDefaultCloseOperation(), 
JComponent.setVisible(boolean), 
dispose(), 
InternalFrameEvent.INTERNAL_FRAME_CLOSING


"
JInternalFrame,setDesktopIcon(JInternalFrame.JDesktopIcon d),void,Sets the JDesktopIcon associated with this JInternalFrame.,"

setDesktopIcon
public void setDesktopIcon(JInternalFrame.JDesktopIcon d)
Sets the JDesktopIcon associated with this
 JInternalFrame.

Parameters:
d - the JDesktopIcon to display on the desktop
See Also:
getDesktopIcon()


"
JInternalFrame,setFocusCycleRoot(boolean focusCycleRoot),void,Does nothing because JInternalFrames must always be roots of a focus traversal cycle.,"

setFocusCycleRoot
public final void setFocusCycleRoot(boolean focusCycleRoot)
Does nothing because JInternalFrames must always be roots of a focus
 traversal cycle.

Overrides:
setFocusCycleRoot in class Container
Parameters:
focusCycleRoot - this value is ignored
Since:
1.4
See Also:
isFocusCycleRoot(), 
Container.setFocusTraversalPolicy(java.awt.FocusTraversalPolicy), 
Container.getFocusTraversalPolicy()


"
JInternalFrame,setFrameIcon(Icon icon),void,Sets an image to be displayed in the titlebar of this internal frame (usually in the top-left corner).,"

setFrameIcon
public void setFrameIcon(Icon icon)
Sets an image to be displayed in the titlebar of this internal frame (usually
 in the top-left corner).
 This image is not the desktopIcon object, which
 is the image displayed in the JDesktop when
 this internal frame is iconified.

 Passing null to this function is valid,
 but the look and feel
 can choose the
 appropriate behavior for that situation, such as displaying no icon
 or a default icon for the look and feel.

Parameters:
icon - the Icon to display in the title bar
See Also:
getFrameIcon()


"
JInternalFrame,setGlassPane(Component glass),void,Sets this JInternalFrame's glassPane property.,"

setGlassPane
public void setGlassPane(Component glass)
Sets this JInternalFrame's
 glassPane property.

Specified by:
setGlassPane in interface RootPaneContainer
Parameters:
glass - the glass pane for this internal frame
See Also:
RootPaneContainer.getGlassPane()


"
JInternalFrame,setIcon(boolean b),void,"Iconifies or de-iconifies this internal frame, if the look and feel supports iconification.","

setIcon
public void setIcon(boolean b)
             throws PropertyVetoException
Iconifies or de-iconifies this internal frame,
 if the look and feel supports iconification.
 If the internal frame's state changes to iconified,
 this method fires an INTERNAL_FRAME_ICONIFIED event.
 If the state changes to de-iconified,
 an INTERNAL_FRAME_DEICONIFIED event is fired.

Parameters:
b - a boolean, where true means to iconify this internal frame and
          false means to de-iconify it
Throws:
PropertyVetoException - when the attempt to set the
            property is vetoed by the JInternalFrame
See Also:
InternalFrameEvent.INTERNAL_FRAME_ICONIFIED, 
InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED


"
JInternalFrame,setIconifiable(boolean b),void,"Sets the iconable property, which must be true for the user to be able to make the JInternalFrame an icon.","

setIconifiable
public void setIconifiable(boolean b)
Sets the iconable property,
 which must be true
 for the user to be able to
 make the JInternalFrame an icon.
 Some look and feels might not implement iconification;
 they will ignore this property.

Parameters:
b - a boolean, where true means this internal frame can be iconified


"
JInternalFrame,setJMenuBar(JMenuBar m),void,Sets the menuBar property for this JInternalFrame.,"

setJMenuBar
public void setJMenuBar(JMenuBar m)
Sets the menuBar property for this JInternalFrame.

Parameters:
m - the JMenuBar to use in this internal frame
See Also:
getJMenuBar()


"
JInternalFrame,setLayer(int layer),void,Convenience method for setting the layer attribute of this component.,"

setLayer
public void setLayer(int layer)
Convenience method for setting the layer attribute of this component.
 The method setLayer(Integer) should be used for
 layer values predefined in JLayeredPane.
 When using setLayer(int), care must be taken not to
 accidentally clash with those values.

Parameters:
layer - an integer specifying this internal frame's desktop layer
Since:
1.3
See Also:
setLayer(Integer), 
JLayeredPane


"
JInternalFrame,setLayer(Integer layer),void,Convenience method for setting the layer attribute of this component.,"

setLayer
public void setLayer(Integer layer)
Convenience method for setting the layer attribute of this component.

Parameters:
layer - an Integer object specifying this
          frame's desktop layer
See Also:
JLayeredPane


"
JInternalFrame,setLayeredPane(JLayeredPane layered),void,Sets this JInternalFrame's layeredPane property.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layered)
Sets this JInternalFrame's
 layeredPane property.

Specified by:
setLayeredPane in interface RootPaneContainer
Parameters:
layered - the JLayeredPane for this internal frame
Throws:
IllegalComponentStateException - (a runtime
           exception) if the layered pane parameter is null
See Also:
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)


"
JInternalFrame,setLayout(LayoutManager manager),void,"Ensures that, by default, the layout of this component cannot be set.","

setLayout
public void setLayout(LayoutManager manager)
Ensures that, by default, the layout of this component cannot be set.
 Overridden to conditionally forward the call to the
 contentPane.
 Refer to RootPaneContainer for
 more information.

Overrides:
setLayout in class Container
Parameters:
manager - the LayoutManager
See Also:
setRootPaneCheckingEnabled(boolean)


"
JInternalFrame,setMaximizable(boolean b),void,"Sets the maximizable property, which determines whether the JInternalFrame can be maximized by some user action.","

setMaximizable
public void setMaximizable(boolean b)
Sets the maximizable property,
 which determines whether the JInternalFrame
 can be maximized by
 some user action.
 Some look and feels might not support maximizing internal frames;
 they will ignore this property.

Parameters:
b - true to specify that this internal frame should be maximizable; false to specify that it should not be


"
JInternalFrame,setMaximum(boolean b),void,Maximizes and restores this internal frame.,"

setMaximum
public void setMaximum(boolean b)
                throws PropertyVetoException
Maximizes and restores this internal frame.  A maximized frame is resized to
 fully fit the JDesktopPane area associated with the
 JInternalFrame.
 A restored frame's size is set to the JInternalFrame's
 actual size.

Parameters:
b - a boolean, where true maximizes this internal frame and false
           restores it
Throws:
PropertyVetoException - when the attempt to set the
            property is vetoed by the JInternalFrame


"
JInternalFrame,setMenuBar(JMenuBar m),void,Deprecated. As of Swing version 1.0.3 replaced by setJMenuBar(JMenuBar m).,"

setMenuBar
@Deprecated
public void setMenuBar(JMenuBar m)
Deprecated. As of Swing version 1.0.3
  replaced by setJMenuBar(JMenuBar m).
Sets the menuBar property for this JInternalFrame.

Parameters:
m - the JMenuBar to use in this internal frame
See Also:
getJMenuBar()


"
JInternalFrame,setNormalBounds(Rectangle r),void,"Sets the normal bounds for this internal frame, the bounds that this internal frame would be restored to from its maximized state.","

setNormalBounds
public void setNormalBounds(Rectangle r)
Sets the normal bounds for this internal frame, the bounds that
 this internal frame would be restored to from its maximized state.
 This method is intended for use only by desktop managers.

Parameters:
r - the bounds that this internal frame should be restored to
Since:
1.3


"
JInternalFrame,setResizable(boolean b),void,Sets whether the JInternalFrame can be resized by some user action.,"

setResizable
public void setResizable(boolean b)
Sets whether the JInternalFrame can be resized by some
 user action.

Parameters:
b - a boolean, where true means this internal frame can be resized


"
JInternalFrame,setRootPane(JRootPane root),protected void,Sets the rootPane property for this JInternalFrame.,"

setRootPane
protected void setRootPane(JRootPane root)
Sets the rootPane property
 for this JInternalFrame.
 This method is called by the constructor.

Parameters:
root - the new JRootPane object


"
JInternalFrame,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.,"

setRootPaneCheckingEnabled
protected void setRootPaneCheckingEnabled(boolean enabled)
Sets whether calls to add and
 setLayout are forwarded to the contentPane.

Parameters:
enabled - true if add and setLayout
        are forwarded, false if they should operate directly on the
        JInternalFrame.
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
isRootPaneCheckingEnabled(), 
RootPaneContainer


"
JInternalFrame,setSelected(boolean selected),void,Selects or deselects the internal frame if it's showing.,"

setSelected
public void setSelected(boolean selected)
                 throws PropertyVetoException
Selects or deselects the internal frame
 if it's showing.
 A JInternalFrame normally draws its title bar
 differently if it is
 the selected frame, which indicates to the user that this
 internal frame has the focus.
 When this method changes the state of the internal frame
 from deselected to selected, it fires an
 InternalFrameEvent.INTERNAL_FRAME_ACTIVATED event.
 If the change is from selected to deselected,
 an InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED event
 is fired.

Parameters:
selected - a boolean, where true means this internal frame
                  should become selected (currently active)
                  and false means it should become deselected
Throws:
PropertyVetoException - when the attempt to set the
            property is vetoed by the JInternalFrame
See Also:
Component.isShowing(), 
InternalFrameEvent.INTERNAL_FRAME_ACTIVATED, 
InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED


"
JInternalFrame,setTitle(String title),void,Sets the JInternalFrame title.,"

setTitle
public void setTitle(String title)
Sets the JInternalFrame title. title
 may have a null value.

Parameters:
title - the String to display in the title bar
See Also:
getTitle()


"
JInternalFrame,setUI(InternalFrameUI ui),void,Sets the UI delegate for this JInternalFrame.,"

setUI
public void setUI(InternalFrameUI ui)
Sets the UI delegate for this JInternalFrame.

Parameters:
ui - the UI delegate


"
JInternalFrame,show(),void,"If the internal frame is not visible, brings the internal frame to the front, makes it visible, and attempts to select it.","

show
public void show()
If the internal frame is not visible,
 brings the internal frame to the front,
 makes it visible,
 and attempts to select it.
 The first time the internal frame is made visible,
 this method also fires an INTERNAL_FRAME_OPENED event.
 This method does nothing if the internal frame is already visible.
 Invoking this method
 has the same result as invoking
 setVisible(true).

Overrides:
show in class Component
See Also:
moveToFront(), 
setSelected(boolean), 
InternalFrameEvent.INTERNAL_FRAME_OPENED, 
JComponent.setVisible(boolean)


"
JInternalFrame,toBack(),void,Sends this internal frame to the back.,"

toBack
public void toBack()
Sends this internal frame to the back.
 Places this internal frame at the bottom of the stacking order
 and makes the corresponding adjustment to other visible
 internal frames.

See Also:
Window.toBack(), 
moveToBack()


"
JInternalFrame,toFront(),void,Brings this internal frame to the front.,"

toFront
public void toFront()
Brings this internal frame to the front.
 Places this internal frame  at the top of the stacking order
 and makes the corresponding adjustment to other visible internal
 frames.

See Also:
Window.toFront(), 
moveToFront()


"
JInternalFrame,updateUI(),void,Notification from the UIManager that the look and feel has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the look and feel
 has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JInternalFrame.JDesktopIcon,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JDesktopIcon.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JDesktopIcon.
 For desktop icons, the AccessibleContext takes the form of an
 AccessibleJDesktopIcon.
 A new AccessibleJDesktopIcon instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJDesktopIcon that serves as the
         AccessibleContext of this JDesktopIcon


"
JInternalFrame.JDesktopIcon,getDesktopPane(),JDesktopPane,Convenience method to ask the icon for the Desktop object it belongs to.,"

getDesktopPane
public JDesktopPane getDesktopPane()
Convenience method to ask the icon for the Desktop
 object it belongs to.

Returns:
the JDesktopPane that contains this
           icon's internal frame, or null if none found


"
JInternalFrame.JDesktopIcon,getInternalFrame(),JInternalFrame,Returns the JInternalFrame that this DesktopIcon is associated with.,"

getInternalFrame
public JInternalFrame getInternalFrame()
Returns the JInternalFrame that this
 DesktopIcon is associated with.

Returns:
the JInternalFrame with which this icon
              is associated


"
JInternalFrame.JDesktopIcon,getUI(),DesktopIconUI,Returns the look-and-feel object that renders this component.,"

getUI
public DesktopIconUI getUI()
Returns the look-and-feel object that renders this component.

Returns:
the DesktopIconUI object that renders
              this component


"
JInternalFrame.JDesktopIcon,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the look-and-feel
 class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""DesktopIconUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JInternalFrame.JDesktopIcon,setInternalFrame(JInternalFrame f),void,Sets the JInternalFrame with which this DesktopIcon is associated.,"

setInternalFrame
public void setInternalFrame(JInternalFrame f)
Sets the JInternalFrame with which this
 DesktopIcon is associated.

Parameters:
f - the JInternalFrame with which this icon
              is associated


"
JInternalFrame.JDesktopIcon,setUI(DesktopIconUI ui),void,Sets the look-and-feel object that renders this component.,"

setUI
public void setUI(DesktopIconUI ui)
Sets the look-and-feel object that renders this component.

Parameters:
ui - the DesktopIconUI look-and-feel object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JInternalFrame.JDesktopIcon,updateUI(),void,Notification from the UIManager that the look and feel has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the look and feel
 has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JLabel,"checkHorizontalKey(int key, String message)",protected int,Verify that key is a legal value for the horizontalAlignment properties.,"

checkHorizontalKey
protected int checkHorizontalKey(int key,
                                 String message)
Verify that key is a legal value for the horizontalAlignment properties.

Parameters:
key - the property value to check
message - the IllegalArgumentException detail message
Throws:
IllegalArgumentException - if key isn't LEFT, CENTER, RIGHT,
 LEADING or TRAILING.
See Also:
setHorizontalTextPosition(int), 
setHorizontalAlignment(int)


"
JLabel,"checkVerticalKey(int key, String message)",protected int,Verify that key is a legal value for the verticalAlignment or verticalTextPosition properties.,"

checkVerticalKey
protected int checkVerticalKey(int key,
                               String message)
Verify that key is a legal value for the
 verticalAlignment or verticalTextPosition properties.

Parameters:
key - the property value to check
message - the IllegalArgumentException detail message
Throws:
IllegalArgumentException - if key isn't TOP, CENTER, or BOTTOM.
See Also:
setVerticalAlignment(int), 
setVerticalTextPosition(int)


"
JLabel,getAccessibleContext(),AccessibleContext,Get the AccessibleContext of this object,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Get the AccessibleContext of this object

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
the AccessibleContext of this object


"
JLabel,getDisabledIcon(),Icon,Returns the icon used by the label when it's disabled.,"

getDisabledIcon
public Icon getDisabledIcon()
Returns the icon used by the label when it's disabled.
 If no disabled icon has been set this will forward the call to
 the look and feel to construct an appropriate disabled Icon.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Returns:
the disabledIcon property
See Also:
setDisabledIcon(javax.swing.Icon), 
LookAndFeel.getDisabledIcon(javax.swing.JComponent, javax.swing.Icon), 
ImageIcon


"
JLabel,getDisplayedMnemonic(),int,Return the keycode that indicates a mnemonic key.,"

getDisplayedMnemonic
public int getDisplayedMnemonic()
Return the keycode that indicates a mnemonic key.
 This property is used when the label is part of a larger component.
 If the labelFor property of the label is not null, the label will
 call the requestFocus method of the component specified by the
 labelFor property when the mnemonic is activated.

Returns:
int value for the mnemonic key
See Also:
getLabelFor(), 
setLabelFor(java.awt.Component)


"
JLabel,getDisplayedMnemonicIndex(),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.","

getDisplayedMnemonicIndex
public int getDisplayedMnemonicIndex()
Returns the character, as an index, that the look and feel should
 provide decoration for as representing the mnemonic character.

Returns:
index representing mnemonic character
Since:
1.4
See Also:
setDisplayedMnemonicIndex(int)


"
JLabel,getHorizontalAlignment(),int,Returns the alignment of the label's contents along the X axis.,"

getHorizontalAlignment
public int getHorizontalAlignment()
Returns the alignment of the label's contents along the X axis.

Returns:
The value of the horizontalAlignment property, one of the
           following constants defined in SwingConstants:
           LEFT,
           CENTER,
           RIGHT,
           LEADING or
           TRAILING.
See Also:
setHorizontalAlignment(int), 
SwingConstants


"
JLabel,getHorizontalTextPosition(),int,"Returns the horizontal position of the label's text, relative to its image.","

getHorizontalTextPosition
public int getHorizontalTextPosition()
Returns the horizontal position of the label's text,
 relative to its image.

Returns:
One of the following constants
           defined in SwingConstants:
           LEFT,
           CENTER,
           RIGHT,
           LEADING or
           TRAILING.
See Also:
SwingConstants


"
JLabel,getIcon(),Icon,"Returns the graphic image (glyph, icon) that the label displays.","

getIcon
public Icon getIcon()
Returns the graphic image (glyph, icon) that the label displays.

Returns:
an Icon
See Also:
setIcon(javax.swing.Icon)


"
JLabel,getIconTextGap(),int,Returns the amount of space between the text and the icon displayed in this label.,"

getIconTextGap
public int getIconTextGap()
Returns the amount of space between the text and the icon
 displayed in this label.

Returns:
an int equal to the number of pixels between the text
         and the icon.
See Also:
setIconTextGap(int)


"
JLabel,getLabelFor(),Component,Get the component this is labelling.,"

getLabelFor
public Component getLabelFor()
Get the component this is labelling.

Returns:
the Component this is labelling.  Can be null if this
 does not label a Component.  If the displayedMnemonic
 property is set and the labelFor property is also set, the label
 will call the requestFocus method of the component specified by the
 labelFor property when the mnemonic is activated.
See Also:
getDisplayedMnemonic(), 
setDisplayedMnemonic(int)


"
JLabel,getText(),String,Returns the text string that the label displays.,"

getText
public String getText()
Returns the text string that the label displays.

Returns:
a String
See Also:
setText(java.lang.String)


"
JLabel,getUI(),LabelUI,Returns the L&F object that renders this component.,"

getUI
public LabelUI getUI()
Returns the L&F object that renders this component.

Returns:
LabelUI object


"
JLabel,getUIClassID(),String,Returns a string that specifies the name of the l&f class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the l&f class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
String ""LabelUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JLabel,getVerticalAlignment(),int,Returns the alignment of the label's contents along the Y axis.,"

getVerticalAlignment
public int getVerticalAlignment()
Returns the alignment of the label's contents along the Y axis.

Returns:
The value of the verticalAlignment property, one of the
           following constants defined in SwingConstants:
           TOP,
           CENTER, or
           BOTTOM.
See Also:
SwingConstants, 
setVerticalAlignment(int)


"
JLabel,getVerticalTextPosition(),int,"Returns the vertical position of the label's text, relative to its image.","

getVerticalTextPosition
public int getVerticalTextPosition()
Returns the vertical position of the label's text,
 relative to its image.

Returns:
One of the following constants
           defined in SwingConstants:
           TOP,
           CENTER, or
           BOTTOM.
See Also:
setVerticalTextPosition(int), 
SwingConstants


"
JLabel,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,This is overridden to return false if the current Icon's Image is not equal to the passed in Image img.,"

imageUpdate
public boolean imageUpdate(Image img,
                           int infoflags,
                           int x,
                           int y,
                           int w,
                           int h)
This is overridden to return false if the current Icon's Image is
 not equal to the passed in Image img.

Specified by:
imageUpdate in interface ImageObserver
Overrides:
imageUpdate in class Component
Parameters:
img - the image being observed
infoflags - see imageUpdate for more information
x - the x coordinate
y - the y coordinate
w - the width
h - the height
Returns:
false if the infoflags indicate that the
            image is completely loaded; true otherwise.
See Also:
ImageObserver, 
Component.imageUpdate(java.awt.Image, int, int, int, int, int)


"
JLabel,paramString(),protected String,Returns a string representation of this JLabel.,"

paramString
protected String paramString()
Returns a string representation of this JLabel. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JLabel.


"
JLabel,setDisabledIcon(Icon disabledIcon),void,"Set the icon to be displayed if this JLabel is ""disabled"" (JLabel.setEnabled(false)).","

setDisabledIcon
public void setDisabledIcon(Icon disabledIcon)
Set the icon to be displayed if this JLabel is ""disabled""
 (JLabel.setEnabled(false)).
 
 The default value of this property is null.

Parameters:
disabledIcon - the Icon to display when the component is disabled
See Also:
getDisabledIcon(), 
JComponent.setEnabled(boolean)


"
JLabel,setDisplayedMnemonic(char aChar),void,Specifies the displayedMnemonic as a char value.,"

setDisplayedMnemonic
public void setDisplayedMnemonic(char aChar)
Specifies the displayedMnemonic as a char value.

Parameters:
aChar - a char specifying the mnemonic to display
See Also:
setDisplayedMnemonic(int)


"
JLabel,setDisplayedMnemonic(int key),void,Specify a keycode that indicates a mnemonic key.,"

setDisplayedMnemonic
public void setDisplayedMnemonic(int key)
Specify a keycode that indicates a mnemonic key.
 This property is used when the label is part of a larger component.
 If the labelFor property of the label is not null, the label will
 call the requestFocus method of the component specified by the
 labelFor property when the mnemonic is activated.

See Also:
getLabelFor(), 
setLabelFor(java.awt.Component)


"
JLabel,setDisplayedMnemonicIndex(int index),void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.,"

setDisplayedMnemonicIndex
public void setDisplayedMnemonicIndex(int index)
                               throws IllegalArgumentException
Provides a hint to the look and feel as to which character in the
 text should be decorated to represent the mnemonic. Not all look and
 feels may support this. A value of -1 indicates either there is no
 mnemonic, the mnemonic character is not contained in the string, or
 the developer does not wish the mnemonic to be displayed.
 
 The value of this is updated as the properties relating to the
 mnemonic change (such as the mnemonic itself, the text...).
 You should only ever have to call this if
 you do not wish the default character to be underlined. For example, if
 the text was 'Save As', with a mnemonic of 'a', and you wanted the 'A'
 to be decorated, as 'Save As', you would have to invoke
 setDisplayedMnemonicIndex(5) after invoking
 setDisplayedMnemonic(KeyEvent.VK_A).

Parameters:
index - Index into the String to underline
Throws:
IllegalArgumentException - will be thrown if index
            is >= length of the text, or < -1
Since:
1.4


"
JLabel,setHorizontalAlignment(int alignment),void,Sets the alignment of the label's contents along the X axis.,"

setHorizontalAlignment
public void setHorizontalAlignment(int alignment)
Sets the alignment of the label's contents along the X axis.
 
 This is a JavaBeans bound property.

Parameters:
alignment - One of the following constants
           defined in SwingConstants:
           LEFT,
           CENTER (the default for image-only labels),
           RIGHT,
           LEADING (the default for text-only labels) or
           TRAILING.
See Also:
SwingConstants, 
getHorizontalAlignment()


"
JLabel,setHorizontalTextPosition(int textPosition),void,"Sets the horizontal position of the label's text, relative to its image.","

setHorizontalTextPosition
public void setHorizontalTextPosition(int textPosition)
Sets the horizontal position of the label's text,
 relative to its image.

Parameters:
textPosition - One of the following constants
           defined in SwingConstants:
           LEFT,
           CENTER,
           RIGHT,
           LEADING, or
           TRAILING (the default).
Throws:
IllegalArgumentException
See Also:
SwingConstants


"
JLabel,setIcon(Icon icon),void,Defines the icon this component will display.,"

setIcon
public void setIcon(Icon icon)
Defines the icon this component will display.  If
 the value of icon is null, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
getIcon()


"
JLabel,setIconTextGap(int iconTextGap),void,"If both the icon and text properties are set, this property defines the space between them.","

setIconTextGap
public void setIconTextGap(int iconTextGap)
If both the icon and text properties are set, this property
 defines the space between them.
 
 The default value of this property is 4 pixels.
 
 This is a JavaBeans bound property.

See Also:
getIconTextGap()


"
JLabel,setLabelFor(Component c),void,Set the component this is labelling.,"

setLabelFor
public void setLabelFor(Component c)
Set the component this is labelling.  Can be null if this does not
 label a Component.  If the displayedMnemonic property is set
 and the labelFor property is also set, the label will
 call the requestFocus method of the component specified by the
 labelFor property when the mnemonic is activated.

Parameters:
c - the Component this label is for, or null if the label is
           not the label for a component
See Also:
getDisplayedMnemonic(), 
setDisplayedMnemonic(int)


"
JLabel,setText(String text),void,Defines the single line of text this component will display.,"

setText
public void setText(String text)
Defines the single line of text this component will display.  If
 the value of text is null or empty string, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
setIcon(javax.swing.Icon)


"
JLabel,setUI(LabelUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(LabelUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the LabelUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JLabel,setVerticalAlignment(int alignment),void,Sets the alignment of the label's contents along the Y axis.,"

setVerticalAlignment
public void setVerticalAlignment(int alignment)
Sets the alignment of the label's contents along the Y axis.
 
 The default value of this property is CENTER.

Parameters:
alignment - One of the following constants
           defined in SwingConstants:
           TOP,
           CENTER (the default), or
           BOTTOM.
See Also:
SwingConstants, 
getVerticalAlignment()


"
JLabel,setVerticalTextPosition(int textPosition),void,"Sets the vertical position of the label's text, relative to its image.","

setVerticalTextPosition
public void setVerticalTextPosition(int textPosition)
Sets the vertical position of the label's text,
 relative to its image.
 
 The default value of this property is CENTER.
 
 This is a JavaBeans bound property.

Parameters:
textPosition - One of the following constants
           defined in SwingConstants:
           TOP,
           CENTER (the default), or
           BOTTOM.
See Also:
SwingConstants, 
getVerticalTextPosition()


"
JLabel,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JLayer,"addImpl(Component comp, Object constraints, int index)",protected void,This method is not supported by JLayer and always throws UnsupportedOperationException,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
This method is not supported by JLayer
 and always throws UnsupportedOperationException

Overrides:
addImpl in class Container
Parameters:
comp - the component to be added
constraints - an object expressing layout constraints
                 for this component
index - the position in the container's list at which to
                 insert the component, where -1
                 means append to the end
Throws:
UnsupportedOperationException - this method is not supported
See Also:
setView(Component), 
setGlassPane(JPanel)


"
JLayer,addNotify(),void,Notifies this component that it now has a parent component.,"

addNotify
public void addNotify()
Notifies this component that it now has a parent component.
 When this method is invoked, the chain of parent components is
 set up with KeyboardAction event listeners.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
addNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JLayer,createGlassPane(),JPanel,Called by the constructor methods to create a default glassPane.,"

createGlassPane
public JPanel createGlassPane()
Called by the constructor methods to create a default glassPane.
 By default this method creates a new JPanel with visibility set to true
 and opacity set to false.

Returns:
the default glassPane


"
JLayer,doLayout(),void,"Delegates its functionality to the LayerUI.doLayout(JLayer) method, if LayerUI is set.","

doLayout
public void doLayout()
Delegates its functionality to the LayerUI.doLayout(JLayer) method,
 if LayerUI is set.

Overrides:
doLayout in class Container
See Also:
LayoutManager.layoutContainer(java.awt.Container), 
Container.setLayout(java.awt.LayoutManager), 
Container.validate()


"
JLayer,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JLayer.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JLayer.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
the AccessibleContext associated with this JLayer.


"
JLayer,getGlassPane(),JPanel,Returns the JLayer's glassPane component or null.,"

getGlassPane
public JPanel getGlassPane()
Returns the JLayer's glassPane component or null.
 This is a bound property.

Returns:
the JLayer's glassPane component
         or null if none exists
See Also:
setGlassPane(JPanel)


"
JLayer,getLayerEventMask(),long,Returns the bitmap of event mask to receive by this JLayer and its LayerUI.,"

getLayerEventMask
public long getLayerEventMask()
Returns the bitmap of event mask to receive by this JLayer
 and its LayerUI.
 
 It means that LayerUI.eventDispatched(AWTEvent, JLayer) method
 will only receive events that match the event mask.
 
 By default JLayer receives no events.

Returns:
the bitmask of event types to receive for this JLayer


"
JLayer,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport for a view component.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Returns the preferred size of the viewport for a view component.
 
 If the view component of this layer implements Scrollable, this method delegates its
 implementation to the view component.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Returns:
the preferred size of the viewport for a view component
See Also:
Scrollable


"
JLayer,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one block of rows or columns, depending on the value of orientation.","

getScrollableBlockIncrement
public int getScrollableBlockIncrement(Rectangle visibleRect,
                                       int orientation,
                                       int direction)
Returns a scroll increment, which is required for components
 that display logical rows or columns in order to completely expose
 one block of rows or columns, depending on the value of orientation.
 
 If the view component of this layer implements Scrollable, this method delegates its
 implementation to the view component.

Specified by:
getScrollableBlockIncrement in interface Scrollable
Parameters:
visibleRect - The view area visible within the viewport
orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
direction - Less than zero to scroll up/left, greater than zero for down/right.
Returns:
the ""block"" increment for scrolling in the specified direction
See Also:
Scrollable


"
JLayer,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the layer, unless the preferred height of the layer is smaller than the height of the viewport.","

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns false to indicate that the height of the viewport does not
 determine the height of the layer, unless the preferred height
 of the layer is smaller than the height of the viewport.
 
 If the view component of this layer implements Scrollable, this method delegates its
 implementation to the view component.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Returns:
whether the layer should track the height of the viewport
See Also:
Scrollable


"
JLayer,getScrollableTracksViewportWidth(),boolean,"Returns false to indicate that the width of the viewport does not determine the width of the layer, unless the preferred width of the layer is smaller than the width of the viewport.","

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns false to indicate that the width of the viewport does not
 determine the width of the layer, unless the preferred width
 of the layer is smaller than the width of the viewport.
 
 If the view component of this layer implements Scrollable, this method delegates its
 implementation to the view component.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Returns:
whether the layer should track the width of the viewport
See Also:
Scrollable


"
JLayer,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns a scroll increment, which is required for components that display logical rows or columns in order to completely expose one new row or column, depending on the value of orientation.","

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Returns a scroll increment, which is required for components
 that display logical rows or columns in order to completely expose
 one new row or column, depending on the value of orientation.
 Ideally, components should handle a partially exposed row or column
 by returning the distance required to completely expose the item.
 
 Scrolling containers, like JScrollPane, will use this method
 each time the user requests a unit scroll.
 
 If the view component of this layer implements Scrollable, this method delegates its
 implementation to the view component.

Specified by:
getScrollableUnitIncrement in interface Scrollable
Parameters:
visibleRect - The view area visible within the viewport
orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
direction - Less than zero to scroll up/left, greater than zero for down/right.
Returns:
The ""unit"" increment for scrolling in the specified direction.
         This value should always be positive.
See Also:
Scrollable


"
JLayer,getUI(),LayerUI<? super V>,Returns the LayerUI for this JLayer.,"

getUI
public LayerUI<? super V> getUI()
Returns the LayerUI for this JLayer.

Returns:
the LayerUI for this JLayer


"
JLayer,getView(),V,Returns the JLayer's view component or null.,"

getView
public V getView()
Returns the JLayer's view component or null.
 This is a bound property.

Returns:
the JLayer's view component
         or null if none exists
See Also:
setView(Component)


"
JLayer,isOptimizedDrawingEnabled(),boolean,The JLayer overrides the default implementation of this method (in JComponent) to return false.,"

isOptimizedDrawingEnabled
public boolean isOptimizedDrawingEnabled()
The JLayer overrides the default implementation of
 this method (in JComponent) to return false.
 This ensures
 that the drawing machinery will call the JLayer's
 paint
 implementation rather than messaging the JLayer's
 children directly.

Overrides:
isOptimizedDrawingEnabled in class JComponent
Returns:
false


"
JLayer,isPaintingOrigin(),protected boolean,"Always returns true to cause painting to originate from JLayer, or one of its ancestors.","

isPaintingOrigin
protected boolean isPaintingOrigin()
Always returns true to cause painting to originate from JLayer,
 or one of its ancestors.

Overrides:
isPaintingOrigin in class JComponent
Returns:
true
See Also:
JComponent.isPaintingOrigin()


"
JLayer,paint(Graphics g),void,Delegates all painting to the LayerUI object.,"

paint
public void paint(Graphics g)
Delegates all painting to the LayerUI object.

Overrides:
paint in class JComponent
Parameters:
g - the Graphics to render to
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
JLayer,paintComponent(Graphics g),protected void,"This method is empty, because all painting is done by paint(Graphics) and ComponentUI.update(Graphics, JComponent) methods","

paintComponent
protected void paintComponent(Graphics g)
This method is empty, because all painting is done by
 paint(Graphics) and
 ComponentUI.update(Graphics, JComponent) methods

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics object to protect
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
JLayer,"paintImmediately(int x, int y, int w, int h)",void,"Delegates its functionality to the LayerUI.paintImmediately(int, int, int, int, JLayer) method, if LayerUI is set.","

paintImmediately
public void paintImmediately(int x,
                             int y,
                             int w,
                             int h)
Delegates its functionality to the
 LayerUI.paintImmediately(int, int, int, int, JLayer) method,
 if LayerUI is set.

Overrides:
paintImmediately in class JComponent
Parameters:
x - the x value of the region to be painted
y - the y value of the region to be painted
w - the width of the region to be painted
h - the height of the region to be painted
See Also:
JComponent.repaint(long, int, int, int, int), 
JComponent.isPaintingOrigin()


"
JLayer,propertyChange(PropertyChangeEvent evt),void,This method gets called when a bound property is changed.,"

propertyChange
public void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
evt - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
JLayer,remove(Component comp),void,Removes the specified component from this container.,"

remove
public void remove(Component comp)
Removes the specified component from this container.
 This method also notifies the layout manager to remove the
 component from this container's layout via the
 removeLayoutComponent method.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 reflect the changes.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.remove(int)


"
JLayer,removeAll(),void,Removes all the components from this container.,"

removeAll
public void removeAll()
Removes all the components from this container.
 This method also notifies the layout manager to remove the
 components from this container's layout via the
 removeLayoutComponent method.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 reflect the changes.

Overrides:
removeAll in class Container
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
JLayer,removeNotify(),void,Notifies this component that it no longer has a parent component.,"

removeNotify
public void removeNotify()
Notifies this component that it no longer has a parent component.
 When this method is invoked, any KeyboardActions
 set up in the the chain of parent components are removed.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
removeNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JLayer,setBorder(Border border),void,"A non-null border, or non-zero insets, isn't supported, to prevent the geometry of this component from becoming complex enough to inhibit subclassing of LayerUI class.","

setBorder
public void setBorder(Border border)
A non-null border, or non-zero insets, isn't supported, to prevent the geometry
 of this component from becoming complex enough to inhibit
 subclassing of LayerUI class.  To create a JLayer with a border,
 add it to a JPanel that has a border.
 Note:  If border is non-null, this
 method will throw an exception as borders are not supported on
 a JLayer.

Overrides:
setBorder in class JComponent
Parameters:
border - the Border to set
Throws:
IllegalArgumentException - this method is not supported
See Also:
Border, 
CompoundBorder


"
JLayer,setGlassPane(JPanel glassPane),void,"Sets the JLayer's glassPane component, which can be null.","

setGlassPane
public void setGlassPane(JPanel glassPane)
Sets the JLayer's glassPane component, which can be null.
 This is a bound property.

Parameters:
glassPane - the glassPane component of this JLayer
See Also:
getGlassPane()


"
JLayer,setLayerEventMask(long layerEventMask),void,"Enables the events from JLayer and all its descendants defined by the specified event mask parameter to be delivered to the LayerUI.eventDispatched(AWTEvent, JLayer) method.","

setLayerEventMask
public void setLayerEventMask(long layerEventMask)
Enables the events from JLayer and all its descendants
 defined by the specified event mask parameter
 to be delivered to the
 LayerUI.eventDispatched(AWTEvent, JLayer) method.
 
 Events are delivered provided that LayerUI is set
 for this JLayer and the JLayer
 is displayable.
 
 The following example shows how to correctly use this method
 in the LayerUI implementations:
 
    public void installUI(JComponent c) {
       super.installUI(c);
       JLayer l = (JLayer) c;
       // this LayerUI will receive only key and focus events
       l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK);
    }

    public void uninstallUI(JComponent c) {
       super.uninstallUI(c);
       JLayer l = (JLayer) c;
       // JLayer must be returned to its initial state
       l.setLayerEventMask(0);
    }
 

 By default JLayer receives no events and its event mask is 0.

Parameters:
layerEventMask - the bitmask of event types to receive
See Also:
getLayerEventMask(), 
LayerUI.eventDispatched(AWTEvent, JLayer), 
Component.isDisplayable()


"
JLayer,setLayout(LayoutManager mgr),void,Sets the layout manager for this container.,"

setLayout
public void setLayout(LayoutManager mgr)
Sets the layout manager for this container.  This method is
 overridden to prevent the layout manager from being set.
 Note:  If mgr is non-null, this
 method will throw an exception as layout managers are not supported on
 a JLayer.

Overrides:
setLayout in class Container
Parameters:
mgr - the specified layout manager
Throws:
IllegalArgumentException - this method is not supported
See Also:
Container.doLayout(), 
Container.getLayout(), 
Container.invalidate()


"
JLayer,setUI(LayerUI<? super V> ui),void,Sets the LayerUI which will perform painting and receive input events for this JLayer.,"

setUI
public void setUI(LayerUI<? super V> ui)
Sets the LayerUI which will perform painting
 and receive input events for this JLayer.

Parameters:
ui - the LayerUI for this JLayer


"
JLayer,setView(V view),void,"Sets the JLayer's view component, which can be null.","

setView
public void setView(V view)
Sets the JLayer's view component, which can be null.
 This is a bound property.

Parameters:
view - the view component for this JLayer
See Also:
getView()


"
JLayer,updateUI(),void,"Delegates its functionality to the LayerUI.updateUI(JLayer) method, if LayerUI is set.","

updateUI
public void updateUI()
Delegates its functionality to the LayerUI.updateUI(JLayer) method,
 if LayerUI is set.

Overrides:
updateUI in class JComponent
See Also:
JComponent.setUI(javax.swing.plaf.ComponentUI), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
JLayeredPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this container at the specified index.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Description copied from class: Container
Adds the specified component to this container at the specified
 index. This method also notifies the layout manager to add
 the component to this container's layout using the specified
 constraints object via the addLayoutComponent
 method.
 
 The constraints are
 defined by the particular layout manager being used.  For
 example, the BorderLayout class defines five
 constraints: BorderLayout.NORTH,
 BorderLayout.SOUTH, BorderLayout.EAST,
 BorderLayout.WEST, and BorderLayout.CENTER.
 
 The GridBagLayout class requires a
 GridBagConstraints object.  Failure to pass
 the correct type of constraints object results in an
 IllegalArgumentException.
 
 If the current layout manager implements LayoutManager2, then
 LayoutManager2.addLayoutComponent(Component,Object) is invoked on
 it. If the current layout manager does not implement
 LayoutManager2, and constraints is a String, then
 LayoutManager.addLayoutComponent(String,Component) is invoked on it.
 
 If the component is not an ancestor of this container and has a non-null
 parent, it is removed from its current parent before it is added to this
 container.
 
 This is the method to override if a program needs to track
 every add request to a container as all other add methods defer
 to this one. An overriding method should
 usually include a call to the superclass's version of the method:

 
super.addImpl(comp, constraints, index)


 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 display the added component.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be added
constraints - an object expressing layout constraints
                 for this component
index - the position in the container's list at which to
                 insert the component, where -1
                 means append to the end
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
JLayeredPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JLayeredPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JLayeredPane.
 For layered panes, the AccessibleContext takes the form of an
 AccessibleJLayeredPane.
 A new AccessibleJLayeredPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJLayeredPane that serves as the
         AccessibleContext of this JLayeredPane


"
JLayeredPane,getComponentCountInLayer(int layer),int,Returns the number of children currently in the specified layer.,"

getComponentCountInLayer
public int getComponentCountInLayer(int layer)
Returns the number of children currently in the specified layer.

Parameters:
layer - an int specifying the layer to check
Returns:
an int specifying the number of components in that layer


"
JLayeredPane,getComponentsInLayer(int layer),Component[],Returns an array of the components in the specified layer.,"

getComponentsInLayer
public Component[] getComponentsInLayer(int layer)
Returns an array of the components in the specified layer.

Parameters:
layer - an int specifying the layer to check
Returns:
an array of Components contained in that layer


"
JLayeredPane,getComponentToLayer(),"protected Hashtable<Component,Integer>",Returns the hashtable that maps components to layers.,"

getComponentToLayer
protected Hashtable<Component,Integer> getComponentToLayer()
Returns the hashtable that maps components to layers.

Returns:
the Hashtable used to map components to their layers


"
JLayeredPane,getIndexOf(Component c),int,Returns the index of the specified Component.,"

getIndexOf
public int getIndexOf(Component c)
Returns the index of the specified Component.
 This is the absolute index, ignoring layers.
 Index numbers, like position numbers, have the topmost component
 at index zero. Larger numbers are closer to the bottom.

Parameters:
c - the Component to check
Returns:
an int specifying the component's index


"
JLayeredPane,getLayer(Component c),int,Returns the layer attribute for the specified Component.,"

getLayer
public int getLayer(Component c)
Returns the layer attribute for the specified Component.

Parameters:
c - the Component to check
Returns:
an int specifying the component's current layer


"
JLayeredPane,getLayer(JComponent c),static int,"Gets the layer property for a JComponent, it does not cause any side effects like setLayer().","

getLayer
public static int getLayer(JComponent c)
Gets the layer property for a JComponent, it
 does not cause any side effects like setLayer(). (painting, add/remove, etc)
 Normally you should use the instance method getLayer().

Parameters:
c - the JComponent to check
Returns:
an int specifying the component's layer


"
JLayeredPane,getLayeredPaneAbove(Component c),static JLayeredPane,Convenience method that returns the first JLayeredPane which contains the specified component.,"

getLayeredPaneAbove
public static JLayeredPane getLayeredPaneAbove(Component c)
Convenience method that returns the first JLayeredPane which
 contains the specified component. Note that all JFrames have a
 JLayeredPane at their root, so any component in a JFrame will
 have a JLayeredPane parent.

Parameters:
c - the Component to check
Returns:
the JLayeredPane that contains the component, or
         null if no JLayeredPane is found in the component
         hierarchy
See Also:
JFrame, 
JRootPane


"
JLayeredPane,getObjectForLayer(int layer),protected Integer,Returns the Integer object associated with a specified layer.,"

getObjectForLayer
protected Integer getObjectForLayer(int layer)
Returns the Integer object associated with a specified layer.

Parameters:
layer - an int specifying the layer
Returns:
an Integer object for that layer


"
JLayeredPane,getPosition(Component c),int,Get the relative position of the component within its layer.,"

getPosition
public int getPosition(Component c)
Get the relative position of the component within its layer.

Parameters:
c - the Component to check
Returns:
an int giving the component's position, where 0 is the
         topmost position and the highest index value = the count
         count of components at that layer, minus 1
See Also:
getComponentCountInLayer(int)


"
JLayeredPane,highestLayer(),int,Returns the highest layer value from all current children.,"

highestLayer
public int highestLayer()
Returns the highest layer value from all current children.
 Returns 0 if there are no children.

Returns:
an int indicating the layer of the topmost component in the
         pane, or zero if there are no children


"
JLayeredPane,"insertIndexForLayer(int layer, int position)",protected int,Primitive method that determines the proper location to insert a new child based on layer and position requests.,"

insertIndexForLayer
protected int insertIndexForLayer(int layer,
                                  int position)
Primitive method that determines the proper location to
 insert a new child based on layer and position requests.

Parameters:
layer - an int specifying the layer
position - an int specifying the position within the layer
Returns:
an int giving the (absolute) insertion-index
See Also:
getIndexOf(java.awt.Component)


"
JLayeredPane,isOptimizedDrawingEnabled(),boolean,"Returns false if components in the pane can overlap, which makes optimized drawing impossible.","

isOptimizedDrawingEnabled
public boolean isOptimizedDrawingEnabled()
Returns false if components in the pane can overlap, which makes
 optimized drawing impossible. Otherwise, returns true.

Overrides:
isOptimizedDrawingEnabled in class JComponent
Returns:
false if components can overlap, else true
See Also:
JComponent.isOptimizedDrawingEnabled()


"
JLayeredPane,lowestLayer(),int,Returns the lowest layer value from all current children.,"

lowestLayer
public int lowestLayer()
Returns the lowest layer value from all current children.
 Returns 0 if there are no children.

Returns:
an int indicating the layer of the bottommost component in the
         pane, or zero if there are no children


"
JLayeredPane,moveToBack(Component c),void,Moves the component to the bottom of the components in its current layer (position -1).,"

moveToBack
public void moveToBack(Component c)
Moves the component to the bottom of the components in its current layer
 (position -1).

Parameters:
c - the Component to move
See Also:
setPosition(Component, int)


"
JLayeredPane,moveToFront(Component c),void,Moves the component to the top of the components in its current layer (position 0).,"

moveToFront
public void moveToFront(Component c)
Moves the component to the top of the components in its current layer
 (position 0).

Parameters:
c - the Component to move
See Also:
setPosition(Component, int)


"
JLayeredPane,paint(Graphics g),void,Paints this JLayeredPane within the specified graphics context.,"

paint
public void paint(Graphics g)
Paints this JLayeredPane within the specified graphics context.

Overrides:
paint in class JComponent
Parameters:
g - the Graphics context within which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
JLayeredPane,paramString(),protected String,Returns a string representation of this JLayeredPane.,"

paramString
protected String paramString()
Returns a string representation of this JLayeredPane. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JLayeredPane.


"
JLayeredPane,"putLayer(JComponent c, int layer)",static void,Sets the layer property on a JComponent.,"

putLayer
public static void putLayer(JComponent c,
                            int layer)
Sets the layer property on a JComponent. This method does not cause
 any side effects like setLayer() (painting, add/remove, etc).
 Normally you should use the instance method setLayer(), in order to
 get the desired side-effects (like repainting).

Parameters:
c - the JComponent to move
layer - an int specifying the layer to move it to
See Also:
setLayer(java.awt.Component, int)


"
JLayeredPane,remove(int index),void,Remove the indexed component from this pane.,"

remove
public void remove(int index)
Remove the indexed component from this pane.
 This is the absolute index, ignoring layers.

Overrides:
remove in class Container
Parameters:
index - an int specifying the component to remove
See Also:
getIndexOf(java.awt.Component)


"
JLayeredPane,removeAll(),void,Removes all the components from this container.,"

removeAll
public void removeAll()
Removes all the components from this container.

Overrides:
removeAll in class Container
Since:
1.5
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
JLayeredPane,"setLayer(Component c, int layer)",void,"Sets the layer attribute on the specified component, making it the bottommost component in that layer.","

setLayer
public void setLayer(Component c,
                     int layer)
Sets the layer attribute on the specified component,
 making it the bottommost component in that layer.
 Should be called before adding to parent.

Parameters:
c - the Component to set the layer for
layer - an int specifying the layer to set, where
              lower numbers are closer to the bottom


"
JLayeredPane,"setLayer(Component c, int layer, int position)",void,Sets the layer attribute for the specified component and also sets its position within that layer.,"

setLayer
public void setLayer(Component c,
                     int layer,
                     int position)
Sets the layer attribute for the specified component and
 also sets its position within that layer.

Parameters:
c - the Component to set the layer for
layer - an int specifying the layer to set, where
                  lower numbers are closer to the bottom
position - an int specifying the position within the
                  layer, where 0 is the topmost position and -1
                  is the bottommost position


"
JLayeredPane,"setPosition(Component c, int position)",void,"Moves the component to position within its current layer, where 0 is the topmost position within the layer and -1 is the bottommost position.","

setPosition
public void setPosition(Component c,
                        int position)
Moves the component to position within its current layer,
 where 0 is the topmost position within the layer and -1 is the bottommost
 position.
 
Note: Position numbering is defined by java.awt.Container, and
 is the opposite of layer numbering. Lower position numbers are closer
 to the top (0 is topmost), and higher position numbers are closer to
 the bottom.

Parameters:
c - the Component to move
position - an int in the range -1..N-1, where N is the number of
                  components in the component's current layer


"
JList,addListSelectionListener(ListSelectionListener listener),void,"Adds a listener to the list, to be notified each time a change to the selection occurs; the preferred way of listening for selection state changes.","

addListSelectionListener
public void addListSelectionListener(ListSelectionListener listener)
Adds a listener to the list, to be notified each time a change to the
 selection occurs; the preferred way of listening for selection state
 changes. JList takes care of listening for selection state
 changes in the selection model, and notifies the given listener of
 each change. ListSelectionEvents sent to the listener have a
 source property set to this list.

Parameters:
listener - the ListSelectionListener to add
See Also:
getSelectionModel(), 
getListSelectionListeners()


"
JList,"addSelectionInterval(int anchor, int lead)",void,Sets the selection to be the union of the specified interval with current selection.,"

addSelectionInterval
public void addSelectionInterval(int anchor,
                                 int lead)
Sets the selection to be the union of the specified interval with current
 selection. Both the anchor and lead indices are
 included. anchor doesn't have to be less than or
 equal to lead. This is a cover method that delegates to the
 method of the same name on the list's selection model.
 
 Refer to the documentation of the selection model class being used
 for details on how values less than 0 are handled.

Parameters:
anchor - the first index to add to the selection
lead - the last index to add to the selection
See Also:
ListSelectionModel.addSelectionInterval(int, int), 
DefaultListSelectionModel.addSelectionInterval(int, int), 
createSelectionModel(), 
setSelectionInterval(int, int), 
removeSelectionInterval(int, int)


"
JList,clearSelection(),void,"Clears the selection; after calling this method, isSelectionEmpty will return true.","

clearSelection
public void clearSelection()
Clears the selection; after calling this method, isSelectionEmpty
 will return true. This is a cover method that delegates to the
 method of the same name on the list's selection model.

See Also:
ListSelectionModel.clearSelection(), 
isSelectionEmpty()


"
JList,createSelectionModel(),protected ListSelectionModel,Returns an instance of DefaultListSelectionModel; called during construction to initialize the list's selection model property.,"

createSelectionModel
protected ListSelectionModel createSelectionModel()
Returns an instance of DefaultListSelectionModel; called
 during construction to initialize the list's selection model
 property.

Returns:
a DefaultListSelecitonModel, used to initialize
         the list's selection model property during construction
See Also:
setSelectionModel(javax.swing.ListSelectionModel), 
DefaultListSelectionModel


"
JList,ensureIndexIsVisible(int index),void,Scrolls the list within an enclosing viewport to make the specified cell completely visible.,"

ensureIndexIsVisible
public void ensureIndexIsVisible(int index)
Scrolls the list within an enclosing viewport to make the specified
 cell completely visible. This calls scrollRectToVisible with
 the bounds of the specified cell. For this method to work, the
 JList must be within a JViewport.
 
 If the given index is outside the list's range of cells, this method
 results in nothing.

Parameters:
index - the index of the cell to make visible
See Also:
JComponent.scrollRectToVisible(java.awt.Rectangle), 
JComponent.getVisibleRect()


"
JList,"fireSelectionValueChanged(int firstIndex, int lastIndex, boolean isAdjusting)",protected void,Notifies ListSelectionListeners added directly to the list of selection changes made to the selection model.,"

fireSelectionValueChanged
protected void fireSelectionValueChanged(int firstIndex,
                                         int lastIndex,
                                         boolean isAdjusting)
Notifies ListSelectionListeners added directly to the list
 of selection changes made to the selection model. JList
 listens for changes made to the selection in the selection model,
 and forwards notification to listeners added to the list directly,
 by calling this method.
 
 This method constructs a ListSelectionEvent with this list
 as the source, and the specified arguments, and sends it to the
 registered ListSelectionListeners.

Parameters:
firstIndex - the first index in the range, <= lastIndex
lastIndex - the last index in the range, >= firstIndex
isAdjusting - whether or not this is one in a series of
        multiple events, where changes are still being made
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
removeListSelectionListener(javax.swing.event.ListSelectionListener), 
ListSelectionEvent, 
EventListenerList


"
JList,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JList.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JList.
 For JList, the AccessibleContext takes the form of an
 AccessibleJList.
 
 A new AccessibleJList instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJList that serves as the
         AccessibleContext of this JList


"
JList,getAnchorSelectionIndex(),int,Returns the anchor selection index.,"

getAnchorSelectionIndex
public int getAnchorSelectionIndex()
Returns the anchor selection index. This is a cover method that
 delegates to the method of the same name on the list's selection model.

Returns:
the anchor selection index
See Also:
ListSelectionModel.getAnchorSelectionIndex()


"
JList,"getCellBounds(int index0, int index1)",Rectangle,"Returns the bounding rectangle, in the list's coordinate system, for the range of cells specified by the two indices.","

getCellBounds
public Rectangle getCellBounds(int index0,
                               int index1)
Returns the bounding rectangle, in the list's coordinate system,
 for the range of cells specified by the two indices.
 These indices can be supplied in any order.
 
 If the smaller index is outside the list's range of cells, this method
 returns null. If the smaller index is valid, but the larger
 index is outside the list's range, the bounds of just the first index
 is returned. Otherwise, the bounds of the valid range is returned.
 
 This is a cover method that delegates to the method of the same name
 in the list's ListUI. It returns null if the list has
 no ListUI.

Parameters:
index0 - the first index in the range
index1 - the second index in the range
Returns:
the bounding rectangle for the range of cells, or null


"
JList,getCellRenderer(),ListCellRenderer<? super E>,Returns the object responsible for painting list items.,"

getCellRenderer
public ListCellRenderer<? super E> getCellRenderer()
Returns the object responsible for painting list items.

Returns:
the value of the cellRenderer property
See Also:
setCellRenderer(javax.swing.ListCellRenderer<? super E>)


"
JList,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.,"

getDragEnabled
public boolean getDragEnabled()
Returns whether or not automatic drag handling is enabled.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JList,getDropLocation(),JList.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.","

getDropLocation
public final JList.DropLocation getDropLocation()
Returns the location that this component should visually indicate
 as the drop location during a DnD operation over the component,
 or null if no location is to currently be shown.
 
 This method is not meant for querying the drop location
 from a TransferHandler, as the drop location is only
 set after the TransferHandler's canImport
 has returned and has allowed for the location to be shown.
 
 When this property changes, a property change event with
 name ""dropLocation"" is fired by the component.
 
 By default, responsibility for listening for changes to this property
 and indicating the drop location visually lies with the list's
 ListUI, which may paint it directly and/or install a cell
 renderer to do so. Developers wishing to implement custom drop location
 painting and/or replace the default cell renderer, may need to honor
 this property.

Returns:
the drop location
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode), 
TransferHandler.canImport(TransferHandler.TransferSupport)


"
JList,getDropMode(),DropMode,Returns the drop mode for this component.,"

getDropMode
public final DropMode getDropMode()
Returns the drop mode for this component.

Returns:
the drop mode for this component
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode)


"
JList,getFirstVisibleIndex(),int,Returns the smallest list index that is currently visible.,"

getFirstVisibleIndex
public int getFirstVisibleIndex()
Returns the smallest list index that is currently visible.
 In a left-to-right componentOrientation, the first visible
 cell is found closest to the list's upper-left corner. In right-to-left
 orientation, it is found closest to the upper-right corner.
 If nothing is visible or the list is empty, -1 is returned.
 Note that the returned cell may only be partially visible.

Returns:
the index of the first visible cell
See Also:
getLastVisibleIndex(), 
JComponent.getVisibleRect()


"
JList,getFixedCellHeight(),int,Returns the value of the fixedCellHeight property.,"

getFixedCellHeight
public int getFixedCellHeight()
Returns the value of the fixedCellHeight property.

Returns:
the fixed cell height
See Also:
setFixedCellHeight(int)


"
JList,getFixedCellWidth(),int,Returns the value of the fixedCellWidth property.,"

getFixedCellWidth
public int getFixedCellWidth()
Returns the value of the fixedCellWidth property.

Returns:
the fixed cell width
See Also:
setFixedCellWidth(int)


"
JList,getLastVisibleIndex(),int,Returns the largest list index that is currently visible.,"

getLastVisibleIndex
public int getLastVisibleIndex()
Returns the largest list index that is currently visible.
 If nothing is visible or the list is empty, -1 is returned.
 Note that the returned cell may only be partially visible.

Returns:
the index of the last visible cell
See Also:
getFirstVisibleIndex(), 
JComponent.getVisibleRect()


"
JList,getLayoutOrientation(),int,"Returns the layout orientation property for the list: VERTICAL if the layout is a single column of cells, VERTICAL_WRAP if the layout is ""newspaper style"" with the content flowing vertically then horizontally, or HORIZONTAL_WRAP if the layout is ""newspaper style"" with the content flowing horizontally then vertically.","

getLayoutOrientation
public int getLayoutOrientation()
Returns the layout orientation property for the list: VERTICAL
 if the layout is a single column of cells, VERTICAL_WRAP if the
 layout is ""newspaper style"" with the content flowing vertically then
 horizontally, or HORIZONTAL_WRAP if the layout is ""newspaper
 style"" with the content flowing horizontally then vertically.

Returns:
the value of the layoutOrientation property
Since:
1.4
See Also:
setLayoutOrientation(int)


"
JList,getLeadSelectionIndex(),int,Returns the lead selection index.,"

getLeadSelectionIndex
public int getLeadSelectionIndex()
Returns the lead selection index. This is a cover method that
 delegates to the method of the same name on the list's selection model.

Returns:
the lead selection index
See Also:
ListSelectionModel.getLeadSelectionIndex()


"
JList,getListSelectionListeners(),ListSelectionListener[],Returns an array of all the ListSelectionListeners added to this JList by way of addListSelectionListener.,"

getListSelectionListeners
public ListSelectionListener[] getListSelectionListeners()
Returns an array of all the ListSelectionListeners added
 to this JList by way of addListSelectionListener.

Returns:
all of the ListSelectionListeners on this list, or
         an empty array if no listeners have been added
Since:
1.4
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getMaxSelectionIndex(),int,"Returns the largest selected cell index, or -1 if the selection is empty.","

getMaxSelectionIndex
public int getMaxSelectionIndex()
Returns the largest selected cell index, or -1 if the selection
 is empty. This is a cover method that delegates to the method of the same
 name on the list's selection model.

Returns:
the largest selected cell index
See Also:
ListSelectionModel.getMaxSelectionIndex()


"
JList,getMinSelectionIndex(),int,"Returns the smallest selected cell index, or -1 if the selection is empty.","

getMinSelectionIndex
public int getMinSelectionIndex()
Returns the smallest selected cell index, or -1 if the selection
 is empty. This is a cover method that delegates to the method of the same
 name on the list's selection model.

Returns:
the smallest selected cell index, or -1
See Also:
ListSelectionModel.getMinSelectionIndex()


"
JList,getModel(),ListModel<E>,Returns the data model that holds the list of items displayed by the JList component.,"

getModel
public ListModel<E> getModel()
Returns the data model that holds the list of items displayed
 by the JList component.

Returns:
the ListModel that provides the displayed
                          list of items
See Also:
setModel(javax.swing.ListModel<E>)


"
JList,"getNextMatch(String prefix, int startIndex, Position.Bias bias)",int,Returns the next list element whose toString value starts with the given prefix.,"

getNextMatch
public int getNextMatch(String prefix,
                        int startIndex,
                        Position.Bias bias)
Returns the next list element whose toString value
 starts with the given prefix.

Parameters:
prefix - the string to test for a match
startIndex - the index for starting the search
bias - the search direction, either
 Position.Bias.Forward or Position.Bias.Backward.
Returns:
the index of the next list element that
 starts with the prefix; otherwise -1
Throws:
IllegalArgumentException - if prefix is null
 or startIndex is out of bounds
Since:
1.4


"
JList,getPreferredScrollableViewportSize(),Dimension,Computes the size of viewport needed to display visibleRowCount rows.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Computes the size of viewport needed to display visibleRowCount
 rows. The value returned by this method depends on the layout
 orientation:
 
VERTICAL:

 This is trivial if both fixedCellWidth and fixedCellHeight
 have been set (either explicitly or by specifying a prototype cell value).
 The width is simply the fixedCellWidth plus the list's horizontal
 insets. The height is the fixedCellHeight multiplied by the
 visibleRowCount, plus the list's vertical insets.
 
 If either fixedCellWidth or fixedCellHeight haven't been
 specified, heuristics are used. If the model is empty, the width is
 the fixedCellWidth, if greater than 0, or a hard-coded
 value of 256. The height is the fixedCellHeight multiplied
 by visibleRowCount, if fixedCellHeight is greater than
 0, otherwise it is a hard-coded value of 16 multiplied by
 visibleRowCount.
 
 If the model isn't empty, the width is the preferred size's width,
 typically the width of the widest list element. The height is the
 fixedCellHeight multiplied by the visibleRowCount,
 plus the list's vertical insets.
 
VERTICAL_WRAP or HORIZONTAL_WRAP:

 This method simply returns the value from getPreferredSize.
 The list's ListUI is expected to override getPreferredSize
 to return an appropriate value.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Returns:
a dimension containing the size of the viewport needed
          to display visibleRowCount rows
See Also:
getPreferredScrollableViewportSize(), 
setPrototypeCellValue(E)


"
JList,getPrototypeCellValue(),E,"Returns the ""prototypical"" cell value -- a value used to calculate a fixed width and height for cells.","

getPrototypeCellValue
public E getPrototypeCellValue()
Returns the ""prototypical"" cell value -- a value used to calculate a
 fixed width and height for cells. This can be null if there
 is no such value.

Returns:
the value of the prototypeCellValue property
See Also:
setPrototypeCellValue(E)


"
JList,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the distance to scroll to expose the next or previous block.,"

getScrollableBlockIncrement
public int getScrollableBlockIncrement(Rectangle visibleRect,
                                       int orientation,
                                       int direction)
Returns the distance to scroll to expose the next or previous block.
 
 For vertical scrolling, the following rules are used:
 
if scrolling down, returns the distance to scroll so that the last
 visible element becomes the first completely visible element
 if scrolling up, returns the distance to scroll so that the first
 visible element becomes the last completely visible element
 returns visibleRect.height if the list is empty
 

 For horizontal scrolling, when the layout orientation is either
 VERTICAL_WRAP or HORIZONTAL_WRAP:
 
if scrolling right, returns the distance to scroll so that the
 last visible element becomes
 the first completely visible element
 if scrolling left, returns the distance to scroll so that the first
 visible element becomes the last completely visible element
 returns visibleRect.width if the list is empty
 

 For horizontal scrolling and VERTICAL orientation,
 returns visibleRect.width.
 
 Note that the value of visibleRect must be the equal to
 this.getVisibleRect().

Specified by:
getScrollableBlockIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - SwingConstants.HORIZONTAL or
                    SwingConstants.VERTICAL
direction - less or equal to zero to scroll up/back,
                  greater than zero for down/forward
Returns:
the ""block"" increment for scrolling in the specified direction;
         always positive
Throws:
IllegalArgumentException - if visibleRect is null, or
         orientation isn't one of SwingConstants.VERTICAL or
         SwingConstants.HORIZONTAL
See Also:
getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
JList,getScrollableTracksViewportHeight(),boolean,"Returns true if this JList is displayed in a JViewport and the viewport is taller than the list's preferred height, or if the layout orientation is VERTICAL_WRAP and visibleRowCount <= 0; otherwise returns false.","

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns true if this JList is displayed in a
 JViewport and the viewport is taller than the list's
 preferred height, or if the layout orientation is VERTICAL_WRAP
 and visibleRowCount <= 0; otherwise returns false.
 
 If false, then don't track the viewport's height. This allows
 vertical scrolling if the JViewport is itself embedded in a
 JScrollPane.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Returns:
whether or not an enclosing viewport should force the list's
         height to match its own
See Also:
Scrollable.getScrollableTracksViewportHeight()


"
JList,getScrollableTracksViewportWidth(),boolean,"Returns true if this JList is displayed in a JViewport and the viewport is wider than the list's preferred width, or if the layout orientation is HORIZONTAL_WRAP and visibleRowCount <= 0; otherwise returns false.","

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns true if this JList is displayed in a
 JViewport and the viewport is wider than the list's
 preferred width, or if the layout orientation is HORIZONTAL_WRAP
 and visibleRowCount <= 0; otherwise returns false.
 
 If false, then don't track the viewport's width. This allows
 horizontal scrolling if the JViewport is itself embedded in a
 JScrollPane.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Returns:
whether or not an enclosing viewport should force the list's
         width to match its own
See Also:
Scrollable.getScrollableTracksViewportWidth()


"
JList,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the distance to scroll to expose the next or previous row (for vertical scrolling) or column (for horizontal scrolling).,"

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Returns the distance to scroll to expose the next or previous
 row (for vertical scrolling) or column (for horizontal scrolling).
 
 For horizontal scrolling, if the layout orientation is VERTICAL,
 then the list's font size is returned (or 1 if the font is
 null).

Specified by:
getScrollableUnitIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - SwingConstants.HORIZONTAL or
                    SwingConstants.VERTICAL
direction - less or equal to zero to scroll up/back,
                  greater than zero for down/forward
Returns:
the ""unit"" increment for scrolling in the specified direction;
         always positive
Throws:
IllegalArgumentException - if visibleRect is null, or
         orientation isn't one of SwingConstants.VERTICAL or
         SwingConstants.HORIZONTAL
See Also:
getScrollableBlockIncrement(java.awt.Rectangle, int, int), 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)


"
JList,getSelectedIndex(),int,Returns the smallest selected cell index; the selection when only a single item is selected in the list.,"

getSelectedIndex
public int getSelectedIndex()
Returns the smallest selected cell index; the selection when only
 a single item is selected in the list. When multiple items are selected,
 it is simply the smallest selected index. Returns -1 if there is
 no selection.
 
 This method is a cover that delegates to getMinSelectionIndex.

Returns:
the smallest selected cell index
See Also:
getMinSelectionIndex(), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getSelectedIndices(),int[],"Returns an array of all of the selected indices, in increasing order.","

getSelectedIndices
public int[] getSelectedIndices()
Returns an array of all of the selected indices, in increasing
 order.

Returns:
all of the selected indices, in increasing order,
         or an empty array if nothing is selected
See Also:
removeSelectionInterval(int, int), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getSelectedValue(),E,Returns the value for the smallest selected cell index; the selected value when only a single item is selected in the list.,"

getSelectedValue
public E getSelectedValue()
Returns the value for the smallest selected cell index;
 the selected value when only a single item is selected in the
 list. When multiple items are selected, it is simply the value for the
 smallest selected index. Returns null if there is no selection.
 
 This is a convenience method that simply returns the model value for
 getMinSelectionIndex.

Returns:
the first selected value
See Also:
getMinSelectionIndex(), 
getModel(), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getSelectedValues(),Object[],"Deprecated. As of JDK 1.7, replaced by getSelectedValuesList()","

getSelectedValues
@Deprecated
public Object[] getSelectedValues()
Deprecated. As of JDK 1.7, replaced by getSelectedValuesList()
Returns an array of all the selected values, in increasing order based
 on their indices in the list.

Returns:
the selected values, or an empty array if nothing is selected
See Also:
isSelectedIndex(int), 
getModel(), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getSelectedValuesList(),List<E>,"Returns a list of all the selected items, in increasing order based on their indices in the list.","

getSelectedValuesList
public List<E> getSelectedValuesList()
Returns a list of all the selected items, in increasing order based
 on their indices in the list.

Returns:
the selected items, or an empty list if nothing is selected
Since:
1.7
See Also:
isSelectedIndex(int), 
getModel(), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,getSelectionBackground(),Color,Returns the color used to draw the background of selected items.,"

getSelectionBackground
public Color getSelectionBackground()
Returns the color used to draw the background of selected items.
 DefaultListCellRenderer uses this color to draw the background
 of items in the selected state, as do the renderers installed by most
 ListUI implementations.

Returns:
the color to draw the background of selected items
See Also:
setSelectionBackground(java.awt.Color), 
DefaultListCellRenderer


"
JList,getSelectionForeground(),Color,Returns the color used to draw the foreground of selected items.,"

getSelectionForeground
public Color getSelectionForeground()
Returns the color used to draw the foreground of selected items.
 DefaultListCellRenderer uses this color to draw the foreground
 of items in the selected state, as do the renderers installed by most
 ListUI implementations.

Returns:
the color to draw the foreground of selected items
See Also:
setSelectionForeground(java.awt.Color), 
DefaultListCellRenderer


"
JList,getSelectionMode(),int,Returns the current selection mode for the list.,"

getSelectionMode
public int getSelectionMode()
Returns the current selection mode for the list. This is a cover
 method that delegates to the method of the same name on the
 list's selection model.

Returns:
the current selection mode
See Also:
setSelectionMode(int)


"
JList,getSelectionModel(),ListSelectionModel,Returns the current selection model.,"

getSelectionModel
public ListSelectionModel getSelectionModel()
Returns the current selection model. The selection model maintains the
 selection state of the list. See the class level documentation for more
 details.

Returns:
the ListSelectionModel that maintains the
         list's selections
See Also:
setSelectionModel(javax.swing.ListSelectionModel), 
ListSelectionModel


"
JList,getToolTipText(MouseEvent event),String,Returns the tooltip text to be used for the given event.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Returns the tooltip text to be used for the given event. This overrides
 JComponent's getToolTipText to first check the cell
 renderer component for the cell over which the event occurred, returning
 its tooltip text, if any. This implementation allows you to specify
 tooltip text on the cell level, by using setToolTipText on your
 cell renderer component.
 
Note: For JList to properly display the
 tooltips of its renderers in this manner, JList must be a
 registered component with the ToolTipManager. This registration
 is done automatically in the constructor. However, if at a later point
 JList is unregistered, by way of a call to
 setToolTipText(null), tips from the renderers will no longer display.

Overrides:
getToolTipText in class JComponent
Parameters:
event - the MouseEvent to fetch the tooltip text for
See Also:
JComponent.setToolTipText(java.lang.String), 
JComponent.getToolTipText()


"
JList,getUI(),ListUI,"Returns the ListUI, the look and feel object that renders this component.","

getUI
public ListUI getUI()
Returns the ListUI, the look and feel object that
 renders this component.

Returns:
the ListUI object that renders this component


"
JList,getUIClassID(),String,"Returns ""ListUI"", the UIDefaults key used to look up the name of the javax.swing.plaf.ListUI class that defines the look and feel for this component.","

getUIClassID
public String getUIClassID()
Returns ""ListUI"", the UIDefaults key used to look
 up the name of the javax.swing.plaf.ListUI class that defines
 the look and feel for this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ListUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JList,getValueIsAdjusting(),boolean,Returns the value of the selection model's isAdjusting property.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns the value of the selection model's isAdjusting property.
 
 This is a cover method that delegates to the method of the same name on
 the list's selection model.

Returns:
the value of the selection model's isAdjusting property.
See Also:
setValueIsAdjusting(boolean), 
ListSelectionModel.getValueIsAdjusting()


"
JList,getVisibleRowCount(),int,Returns the value of the visibleRowCount property.,"

getVisibleRowCount
public int getVisibleRowCount()
Returns the value of the visibleRowCount property. See the
 documentation for setVisibleRowCount(int) for details on how to
 interpret this value.

Returns:
the value of the visibleRowCount property.
See Also:
setVisibleRowCount(int)


"
JList,indexToLocation(int index),Point,Returns the origin of the specified item in the list's coordinate system.,"

indexToLocation
public Point indexToLocation(int index)
Returns the origin of the specified item in the list's coordinate
 system. This method returns null if the index isn't valid.
 
 This is a cover method that delegates to the method of the same name
 in the list's ListUI. It returns null if the list has
 no ListUI.

Parameters:
index - the cell index
Returns:
the origin of the cell, or null


"
JList,isSelectedIndex(int index),boolean,"Returns true if the specified index is selected, else false.","

isSelectedIndex
public boolean isSelectedIndex(int index)
Returns true if the specified index is selected,
 else false. This is a cover method that delegates to the method
 of the same name on the list's selection model.

Parameters:
index - index to be queried for selection state
Returns:
true if the specified index is selected,
         else false
See Also:
ListSelectionModel.isSelectedIndex(int), 
setSelectedIndex(int)


"
JList,isSelectionEmpty(),boolean,"Returns true if nothing is selected, else false.","

isSelectionEmpty
public boolean isSelectionEmpty()
Returns true if nothing is selected, else false.
 This is a cover method that delegates to the method of the same
 name on the list's selection model.

Returns:
true if nothing is selected, else false
See Also:
ListSelectionModel.isSelectionEmpty(), 
clearSelection()


"
JList,locationToIndex(Point location),int,Returns the cell index closest to the given location in the list's coordinate system.,"

locationToIndex
public int locationToIndex(Point location)
Returns the cell index closest to the given location in the list's
 coordinate system. To determine if the cell actually contains the
 specified location, compare the point against the cell's bounds,
 as provided by getCellBounds. This method returns -1
 if the model is empty
 
 This is a cover method that delegates to the method of the same name
 in the list's ListUI. It returns -1 if the list has
 no ListUI.

Parameters:
location - the coordinates of the point
Returns:
the cell index closest to the given location, or -1


"
JList,paramString(),protected String,Returns a String representation of this JList.,"

paramString
protected String paramString()
Returns a String representation of this JList.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned String may vary
 between implementations. The returned String may be empty,
 but may not be null.

Overrides:
paramString in class JComponent
Returns:
a String representation of this JList.


"
JList,removeListSelectionListener(ListSelectionListener listener),void,Removes a selection listener from the list.,"

removeListSelectionListener
public void removeListSelectionListener(ListSelectionListener listener)
Removes a selection listener from the list.

Parameters:
listener - the ListSelectionListener to remove
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
getSelectionModel()


"
JList,"removeSelectionInterval(int index0, int index1)",void,Sets the selection to be the set difference of the specified interval and the current selection.,"

removeSelectionInterval
public void removeSelectionInterval(int index0,
                                    int index1)
Sets the selection to be the set difference of the specified interval
 and the current selection. Both the index0 and index1
 indices are removed. index0 doesn't have to be less than or
 equal to index1. This is a cover method that delegates to the
 method of the same name on the list's selection model.
 
 Refer to the documentation of the selection model class being used
 for details on how values less than 0 are handled.

Parameters:
index0 - the first index to remove from the selection
index1 - the last index to remove from the selection
See Also:
ListSelectionModel.removeSelectionInterval(int, int), 
DefaultListSelectionModel.removeSelectionInterval(int, int), 
createSelectionModel(), 
setSelectionInterval(int, int), 
addSelectionInterval(int, int)


"
JList,setCellRenderer(ListCellRenderer<? super E> cellRenderer),void,Sets the delegate that is used to paint each cell in the list.,"

setCellRenderer
public void setCellRenderer(ListCellRenderer<? super E> cellRenderer)
Sets the delegate that is used to paint each cell in the list.
 The job of a cell renderer is discussed in detail in the
 class level documentation.
 
 If the prototypeCellValue property is non-null,
 setting the cell renderer also causes the fixedCellWidth and
 fixedCellHeight properties to be re-calculated. Only one
 PropertyChangeEvent is generated however -
 for the cellRenderer property.
 
 The default value of this property is provided by the ListUI
 delegate, i.e. by the look and feel implementation.
 
 This is a JavaBeans bound property.

Parameters:
cellRenderer - the ListCellRenderer
                          that paints list cells
See Also:
getCellRenderer()


"
JList,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.,"

setDragEnabled
public void setDragEnabled(boolean b)
Turns on or off automatic drag handling. In order to enable automatic
 drag handling, this property should be set to true, and the
 list's TransferHandler needs to be non-null.
 The default value of the dragEnabled property is false.
 
 The job of honoring this property, and recognizing a user drag gesture,
 lies with the look and feel implementation, and in particular, the list's
 ListUI. When automatic drag handling is enabled, most look and
 feels (including those that subclass BasicLookAndFeel) begin a
 drag and drop operation whenever the user presses the mouse button over
 an item and then moves the mouse a few pixels. Setting this property to
 true can therefore have a subtle effect on how selections behave.
 
 If a look and feel is used that ignores this property, you can still
 begin a drag and drop operation by calling exportAsDrag on the
 list's TransferHandler.

Parameters:
b - whether or not to enable automatic drag handling
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JList,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.,"

setDropMode
public final void setDropMode(DropMode dropMode)
Sets the drop mode for this component. For backward compatibility,
 the default for this property is DropMode.USE_SELECTION.
 Usage of one of the other modes is recommended, however, for an
 improved user experience. DropMode.ON, for instance,
 offers similar behavior of showing items as selected, but does so without
 affecting the actual selection in the list.
 
JList supports the following drop modes:
 
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.ON_OR_INSERT

 The drop mode is only meaningful if this component has a
 TransferHandler that accepts drops.

Parameters:
dropMode - the drop mode to use
Throws:
IllegalArgumentException - if the drop mode is unsupported
         or null
Since:
1.6
See Also:
getDropMode(), 
getDropLocation(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JList,setFixedCellHeight(int height),void,Sets a fixed value to be used for the height of every cell in the list.,"

setFixedCellHeight
public void setFixedCellHeight(int height)
Sets a fixed value to be used for the height of every cell in the list.
 If height is -1, cell heights are computed in the ListUI
 by applying getPreferredSize to the cell renderer component
 for each list element.
 
 The default value of this property is -1.
 
 This is a JavaBeans bound property.

Parameters:
height - the height to be used for for all cells in the list
See Also:
setPrototypeCellValue(E), 
setFixedCellWidth(int), 
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JList,setFixedCellWidth(int width),void,Sets a fixed value to be used for the width of every cell in the list.,"

setFixedCellWidth
public void setFixedCellWidth(int width)
Sets a fixed value to be used for the width of every cell in the list.
 If width is -1, cell widths are computed in the ListUI
 by applying getPreferredSize to the cell renderer component
 for each list element.
 
 The default value of this property is -1.
 
 This is a JavaBeans bound property.

Parameters:
width - the width to be used for all cells in the list
See Also:
setPrototypeCellValue(E), 
setFixedCellWidth(int), 
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JList,setLayoutOrientation(int layoutOrientation),void,Defines the way list cells are layed out.,"

setLayoutOrientation
public void setLayoutOrientation(int layoutOrientation)
Defines the way list cells are layed out. Consider a JList
 with five cells. Cells can be layed out in one of the following ways:

 
 VERTICAL:          0
                    1
                    2
                    3
                    4

 HORIZONTAL_WRAP:   0  1  2
                    3  4

 VERTICAL_WRAP:     0  3
                    1  4
                    2
 

 A description of these layouts follows:

 
ValueDescription
VERTICAL
Cells are layed out vertically in a single column.
   HORIZONTAL_WRAP
Cells are layed out horizontally, wrapping to a new row as
           necessary. If the visibleRowCount property is less than
           or equal to zero, wrapping is determined by the width of the
           list; otherwise wrapping is done in such a way as to ensure
           visibleRowCount rows in the list.
   VERTICAL_WRAP
Cells are layed out vertically, wrapping to a new column as
           necessary. If the visibleRowCount property is less than
           or equal to zero, wrapping is determined by the height of the
           list; otherwise wrapping is done at visibleRowCount rows.
  

 The default value of this property is VERTICAL.

Parameters:
layoutOrientation - the new layout orientation, one of:
        VERTICAL, HORIZONTAL_WRAP or VERTICAL_WRAP
Throws:
IllegalArgumentException - if layoutOrientation isn't one of the
         allowable values
Since:
1.4
See Also:
getLayoutOrientation(), 
setVisibleRowCount(int), 
getScrollableTracksViewportHeight(), 
getScrollableTracksViewportWidth()


"
JList,setListData(E[] listData),void,"Constructs a read-only ListModel from an array of items, and calls setModel with this model.","

setListData
public void setListData(E[] listData)
Constructs a read-only ListModel from an array of items,
 and calls setModel with this model.
 
 Attempts to pass a null value to this method results in
 undefined behavior and, most likely, exceptions. The created model
 references the given array directly. Attempts to modify the array
 after invoking this method results in undefined behavior.

Parameters:
listData - an array of E containing the items to
        display in the list
See Also:
setModel(javax.swing.ListModel<E>)


"
JList,setListData(Vector<? extends E> listData),void,Constructs a read-only ListModel from a Vector and calls setModel with this model.,"

setListData
public void setListData(Vector<? extends E> listData)
Constructs a read-only ListModel from a Vector
 and calls setModel with this model.
 
 Attempts to pass a null value to this method results in
 undefined behavior and, most likely, exceptions. The created model
 references the given Vector directly. Attempts to modify the
 Vector after invoking this method results in undefined behavior.

Parameters:
listData - a Vector containing the items to
                                          display in the list
See Also:
setModel(javax.swing.ListModel<E>)


"
JList,setModel(ListModel<E> model),void,"Sets the model that represents the contents or ""value"" of the list, notifies property change listeners, and then clears the list's selection.","

setModel
public void setModel(ListModel<E> model)
Sets the model that represents the contents or ""value"" of the
 list, notifies property change listeners, and then clears the
 list's selection.
 
 This is a JavaBeans bound property.

Parameters:
model - the ListModel that provides the
                                          list of items for display
Throws:
IllegalArgumentException - if model is
                                          null
See Also:
getModel(), 
clearSelection()


"
JList,setPrototypeCellValue(E prototypeCellValue),void,"Sets the prototypeCellValue property, and then (if the new value is non-null), computes the fixedCellWidth and fixedCellHeight properties by requesting the cell renderer component for the given value (and index 0) from the cell renderer, and using that component's preferred size.","

setPrototypeCellValue
public void setPrototypeCellValue(E prototypeCellValue)
Sets the prototypeCellValue property, and then (if the new value
 is non-null), computes the fixedCellWidth and
 fixedCellHeight properties by requesting the cell renderer
 component for the given value (and index 0) from the cell renderer, and
 using that component's preferred size.
 
 This method is useful when the list is too long to allow the
 ListUI to compute the width/height of each cell, and there is a
 single cell value that is known to occupy as much space as any of the
 others, a so-called prototype.
 
 While all three of the prototypeCellValue,
 fixedCellHeight, and fixedCellWidth properties may be
 modified by this method, PropertyChangeEvent notifications are
 only sent when the prototypeCellValue property changes.
 
 To see an example which sets this property, see the
 class description above.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

Parameters:
prototypeCellValue - the value on which to base
                          fixedCellWidth and
                          fixedCellHeight
See Also:
getPrototypeCellValue(), 
setFixedCellWidth(int), 
setFixedCellHeight(int), 
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
JList,setSelectedIndex(int index),void,Selects a single cell.,"

setSelectedIndex
public void setSelectedIndex(int index)
Selects a single cell. Does nothing if the given index is greater
 than or equal to the model size. This is a convenience method that uses
 setSelectionInterval on the selection model. Refer to the
 documentation for the selection model class being used for details on
 how values less than 0 are handled.

Parameters:
index - the index of the cell to select
See Also:
ListSelectionModel.setSelectionInterval(int, int), 
isSelectedIndex(int), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,setSelectedIndices(int[] indices),void,Changes the selection to be the set of indices specified by the given array.,"

setSelectedIndices
public void setSelectedIndices(int[] indices)
Changes the selection to be the set of indices specified by the given
 array. Indices greater than or equal to the model size are ignored.
 This is a convenience method that clears the selection and then uses
 addSelectionInterval on the selection model to add the indices.
 Refer to the documentation of the selection model class being used for
 details on how values less than 0 are handled.

Parameters:
indices - an array of the indices of the cells to select,
                non-null
Throws:
NullPointerException - if the given array is null
See Also:
ListSelectionModel.addSelectionInterval(int, int), 
isSelectedIndex(int), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
JList,"setSelectedValue(Object anObject, boolean shouldScroll)",void,Selects the specified object from the list.,"

setSelectedValue
public void setSelectedValue(Object anObject,
                             boolean shouldScroll)
Selects the specified object from the list.

Parameters:
anObject - the object to select
shouldScroll - true if the list should scroll to display
                      the selected object, if one exists; otherwise false


"
JList,setSelectionBackground(Color selectionBackground),void,"Sets the color used to draw the background of selected items, which cell renderers can use fill selected cells.","

setSelectionBackground
public void setSelectionBackground(Color selectionBackground)
Sets the color used to draw the background of selected items, which
 cell renderers can use fill selected cells.
 DefaultListCellRenderer uses this color to fill the background
 of items in the selected state, as do the renderers installed by most
 ListUI implementations.
 
 The default value of this property is defined by the look
 and feel implementation.
 
 This is a JavaBeans bound property.

Parameters:
selectionBackground - the Color to use for the
                             background of selected cells
See Also:
getSelectionBackground(), 
setSelectionForeground(java.awt.Color), 
JComponent.setForeground(java.awt.Color), 
JComponent.setBackground(java.awt.Color), 
JComponent.setFont(java.awt.Font), 
DefaultListCellRenderer


"
JList,setSelectionForeground(Color selectionForeground),void,"Sets the color used to draw the foreground of selected items, which cell renderers can use to render text and graphics.","

setSelectionForeground
public void setSelectionForeground(Color selectionForeground)
Sets the color used to draw the foreground of selected items, which
 cell renderers can use to render text and graphics.
 DefaultListCellRenderer uses this color to draw the foreground
 of items in the selected state, as do the renderers installed by most
 ListUI implementations.
 
 The default value of this property is defined by the look and feel
 implementation.
 
 This is a JavaBeans bound property.

Parameters:
selectionForeground - the Color to use in the foreground
                             for selected list items
See Also:
getSelectionForeground(), 
setSelectionBackground(java.awt.Color), 
JComponent.setForeground(java.awt.Color), 
JComponent.setBackground(java.awt.Color), 
JComponent.setFont(java.awt.Font), 
DefaultListCellRenderer


"
JList,"setSelectionInterval(int anchor, int lead)",void,Selects the specified interval.,"

setSelectionInterval
public void setSelectionInterval(int anchor,
                                 int lead)
Selects the specified interval. Both anchor and lead
 indices are included. anchor doesn't have to be less than or
 equal to lead. This is a cover method that delegates to the
 method of the same name on the list's selection model.
 
 Refer to the documentation of the selection model class being used
 for details on how values less than 0 are handled.

Parameters:
anchor - the first index to select
lead - the last index to select
See Also:
ListSelectionModel.setSelectionInterval(int, int), 
DefaultListSelectionModel.setSelectionInterval(int, int), 
createSelectionModel(), 
addSelectionInterval(int, int), 
removeSelectionInterval(int, int)


"
JList,setSelectionMode(int selectionMode),void,Sets the selection mode for the list.,"

setSelectionMode
public void setSelectionMode(int selectionMode)
Sets the selection mode for the list. This is a cover method that sets
 the selection mode directly on the selection model.
 
 The following list describes the accepted selection modes:
 
ListSelectionModel.SINGLE_SELECTION -
   Only one list index can be selected at a time. In this mode,
   setSelectionInterval and addSelectionInterval are
   equivalent, both replacing the current selection with the index
   represented by the second argument (the ""lead"").
 ListSelectionModel.SINGLE_INTERVAL_SELECTION -
   Only one contiguous interval can be selected at a time.
   In this mode, addSelectionInterval behaves like
   setSelectionInterval (replacing the current selection},
   unless the given interval is immediately adjacent to or overlaps
   the existing selection, and can be used to grow the selection.
 ListSelectionModel.MULTIPLE_INTERVAL_SELECTION -
   In this mode, there's no restriction on what can be selected.
   This mode is the default.
 

Parameters:
selectionMode - the selection mode
Throws:
IllegalArgumentException - if the selection mode isn't
         one of those allowed
See Also:
getSelectionMode()


"
JList,setSelectionModel(ListSelectionModel selectionModel),void,Sets the selectionModel for the list to a non-null ListSelectionModel implementation.,"

setSelectionModel
public void setSelectionModel(ListSelectionModel selectionModel)
Sets the selectionModel for the list to a
 non-null ListSelectionModel
 implementation. The selection model handles the task of making single
 selections, selections of contiguous ranges, and non-contiguous
 selections.
 
 This is a JavaBeans bound property.

Parameters:
selectionModel - the ListSelectionModel that
                          implements the selections
Throws:
IllegalArgumentException - if selectionModel
                                          is null
See Also:
getSelectionModel()


"
JList,setUI(ListUI ui),void,"Sets the ListUI, the look and feel object that renders this component.","

setUI
public void setUI(ListUI ui)
Sets the ListUI, the look and feel object that
 renders this component.

Parameters:
ui - the ListUI object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JList,setValueIsAdjusting(boolean b),void,Sets the selection model's valueIsAdjusting property.,"

setValueIsAdjusting
public void setValueIsAdjusting(boolean b)
Sets the selection model's valueIsAdjusting property. When
 true, upcoming changes to selection should be considered part
 of a single change. This property is used internally and developers
 typically need not call this method. For example, when the model is being
 updated in response to a user drag, the value of the property is set
 to true when the drag is initiated and set to false
 when the drag is finished. This allows listeners to update only
 when a change has been finalized, rather than handling all of the
 intermediate values.
 
 You may want to use this directly if making a series of changes
 that should be considered part of a single change.
 
 This is a cover method that delegates to the method of the same name on
 the list's selection model. See the documentation for
 ListSelectionModel.setValueIsAdjusting(boolean) for
 more details.

Parameters:
b - the new value for the property
See Also:
ListSelectionModel.setValueIsAdjusting(boolean), 
ListSelectionEvent.getValueIsAdjusting(), 
getValueIsAdjusting()


"
JList,setVisibleRowCount(int visibleRowCount),void,"Sets the visibleRowCount property, which has different meanings depending on the layout orientation: For a VERTICAL layout orientation, this sets the preferred number of rows to display without requiring scrolling; for other orientations, it affects the wrapping of cells.","

setVisibleRowCount
public void setVisibleRowCount(int visibleRowCount)
Sets the visibleRowCount property, which has different meanings
 depending on the layout orientation: For a VERTICAL layout
 orientation, this sets the preferred number of rows to display without
 requiring scrolling; for other orientations, it affects the wrapping of
 cells.
 
 In VERTICAL orientation:
 Setting this property affects the return value of the
 getPreferredScrollableViewportSize() method, which is used to
 calculate the preferred size of an enclosing viewport. See that method's
 documentation for more details.
 
 In HORIZONTAL_WRAP and VERTICAL_WRAP orientations:
 This affects how cells are wrapped. See the documentation of
 setLayoutOrientation(int) for more details.
 
 The default value of this property is 8.
 
 Calling this method with a negative value results in the property
 being set to 0.
 
 This is a JavaBeans bound property.

Parameters:
visibleRowCount - an integer specifying the preferred number of
                         rows to display without requiring scrolling
See Also:
getVisibleRowCount(), 
getPreferredScrollableViewportSize(), 
setLayoutOrientation(int), 
JComponent.getVisibleRect(), 
JViewport


"
JList,updateUI(),void,Resets the ListUI property by setting it to the value provided by the current look and feel.,"

updateUI
public void updateUI()
Resets the ListUI property by setting it to the value provided
 by the current look and feel. If the current cell renderer was installed
 by the developer (rather than the look and feel itself), this also causes
 the cell renderer and its children to be updated, by calling
 SwingUtilities.updateComponentTreeUI on it.

Overrides:
updateUI in class JComponent
See Also:
UIManager.getUI(javax.swing.JComponent), 
SwingUtilities.updateComponentTreeUI(java.awt.Component)


"
JList.DropLocation,getIndex(),int,Returns the index where dropped data should be placed in the list.,"

getIndex
public int getIndex()
Returns the index where dropped data should be placed in the
 list. Interpretation of the value depends on the drop mode set on
 the associated component. If the drop mode is either
 DropMode.USE_SELECTION or DropMode.ON,
 the return value is an index of a row in the list. If the drop mode is
 DropMode.INSERT, the return value refers to the index
 where the data should be inserted. If the drop mode is
 DropMode.ON_OR_INSERT, the value of
 isInsert() indicates whether the index is an index
 of a row, or an insert index.
 
-1 indicates that the drop occurred over empty space,
 and no index could be calculated.

Returns:
the drop index


"
JList.DropLocation,isInsert(),boolean,Returns whether or not this location represents an insert location.,"

isInsert
public boolean isInsert()
Returns whether or not this location represents an insert
 location.

Returns:
whether or not this is an insert location


"
JList.DropLocation,toString(),String,Returns a string representation of this drop location.,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class TransferHandler.DropLocation
Returns:
a string representation of this drop location


"
JMenu,add(Action a),JMenuItem,Creates a new menu item attached to the specified Action object and appends it to the end of this menu.,"

add
public JMenuItem add(Action a)
Creates a new menu item attached to the specified
 Action object and appends it to the end of this menu.

Parameters:
a - the Action for the menu item to be added
See Also:
Action


"
JMenu,add(Component c),Component,Appends a component to the end of this menu.,"

add
public Component add(Component c)
Appends a component to the end of this menu.
 Returns the component added.

Overrides:
add in class Container
Parameters:
c - the Component to add
Returns:
the Component added
See Also:
Container.addImpl(java.awt.Component, java.lang.Object, int), 
Container.invalidate(), 
Container.validate(), 
JComponent.revalidate()


"
JMenu,"add(Component c, int index)",Component,Adds the specified component to this container at the given position.,"

add
public Component add(Component c,
                     int index)
Adds the specified component to this container at the given
 position. If index equals -1, the component will
 be appended to the end.

Overrides:
add in class Container
Parameters:
c - the Component to add
index - the position at which to insert the component
Returns:
the Component added
See Also:
remove(javax.swing.JMenuItem), 
Container.add(Component, int)


"
JMenu,add(JMenuItem menuItem),JMenuItem,Appends a menu item to the end of this menu.,"

add
public JMenuItem add(JMenuItem menuItem)
Appends a menu item to the end of this menu.
 Returns the menu item added.

Parameters:
menuItem - the JMenuitem to be added
Returns:
the JMenuItem added


"
JMenu,add(String s),JMenuItem,Creates a new menu item with the specified text and appends it to the end of this menu.,"

add
public JMenuItem add(String s)
Creates a new menu item with the specified text and appends
 it to the end of this menu.

Parameters:
s - the string for the menu item to be added


"
JMenu,addMenuListener(MenuListener l),void,Adds a listener for menu events.,"

addMenuListener
public void addMenuListener(MenuListener l)
Adds a listener for menu events.

Parameters:
l - the listener to be added


"
JMenu,addSeparator(),void,Appends a new separator to the end of the menu.,"

addSeparator
public void addSeparator()
Appends a new separator to the end of the menu.

"
JMenu,applyComponentOrientation(ComponentOrientation o),void,Sets the ComponentOrientation property of this menu and all components contained within it.,"

applyComponentOrientation
public void applyComponentOrientation(ComponentOrientation o)
Sets the ComponentOrientation property of this menu
 and all components contained within it. This includes all
 components returned by getMenuComponents.

Overrides:
applyComponentOrientation in class Container
Parameters:
o - the new component orientation of this menu and
        the components contained within it.
Throws:
NullPointerException - if orientation is null.
Since:
1.4
See Also:
Component.setComponentOrientation(java.awt.ComponentOrientation), 
Component.getComponentOrientation()


"
JMenu,createActionChangeListener(JMenuItem b),protected PropertyChangeListener,Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.,"

createActionChangeListener
protected PropertyChangeListener createActionChangeListener(JMenuItem b)
Returns a properly configured PropertyChangeListener
 which updates the control as changes to the Action occur.

"
JMenu,createActionComponent(Action a),protected JMenuItem,Factory method which creates the JMenuItem for Actions added to the JMenu.,"

createActionComponent
protected JMenuItem createActionComponent(Action a)
Factory method which creates the JMenuItem for
 Actions added to the JMenu.

Parameters:
a - the Action for the menu item to be added
Returns:
the new menu item
Since:
1.3
See Also:
Action


"
JMenu,createWinListener(JPopupMenu p),protected JMenu.WinListener,Creates a window-closing listener for the popup.,"

createWinListener
protected JMenu.WinListener createWinListener(JPopupMenu p)
Creates a window-closing listener for the popup.

Parameters:
p - the JPopupMenu
Returns:
the new window-closing listener
See Also:
JMenu.WinListener


"
JMenu,doClick(int pressTime),void,"Programmatically performs a ""click"".","

doClick
public void doClick(int pressTime)
Programmatically performs a ""click"".  This overrides the method
 AbstractButton.doClick in order to make the menu pop up.

Overrides:
doClick in class AbstractButton
Parameters:
pressTime - indicates the number of milliseconds the
          button was pressed for


"
JMenu,fireMenuCanceled(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuCanceled
protected void fireMenuCanceled()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

Throws:
Error - if there is a null listener
See Also:
EventListenerList


"
JMenu,fireMenuDeselected(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuDeselected
protected void fireMenuDeselected()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

Throws:
Error - if there is a null listener
See Also:
EventListenerList


"
JMenu,fireMenuSelected(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuSelected
protected void fireMenuSelected()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

Throws:
Error - if there is a null listener
See Also:
EventListenerList


"
JMenu,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JMenu.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JMenu.
 For JMenus, the AccessibleContext takes the form of an
 AccessibleJMenu.
 A new AccessibleJMenu instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JMenuItem
Returns:
an AccessibleJMenu that serves as the
         AccessibleContext of this JMenu


"
JMenu,getComponent(),Component,Returns the java.awt.Component used to paint this MenuElement.,"

getComponent
public Component getComponent()
Returns the java.awt.Component used to
 paint this MenuElement.
 The returned component is used to convert events and detect if
 an event is inside a menu component.

Specified by:
getComponent in interface MenuElement
Overrides:
getComponent in class JMenuItem
Returns:
the Component that paints this menu item


"
JMenu,getDelay(),int,"Returns the suggested delay, in milliseconds, before submenus are popped up or down.","

getDelay
public int getDelay()
Returns the suggested delay, in milliseconds, before submenus
 are popped up or down.
 Each look and feel (L&F) may determine its own policy for
 observing the delay property.
 In most cases, the delay is not observed for top level menus
 or while dragging.  The default for delay is 0.
 This method is a property of the look and feel code and is used
 to manage the idiosyncrasies of the various UI implementations.

Returns:
the delay property


"
JMenu,getItem(int pos),JMenuItem,Returns the JMenuItem at the specified position.,"

getItem
public JMenuItem getItem(int pos)
Returns the JMenuItem at the specified position.
 If the component at pos is not a menu item,
 null is returned.
 This method is included for AWT compatibility.

Parameters:
pos - an integer specifying the position
Returns:
the menu item at the specified position; or null
          if the item as the specified position is not a menu item
Throws:
IllegalArgumentException - if the value of
                       pos < 0


"
JMenu,getItemCount(),int,"Returns the number of items on the menu, including separators.","

getItemCount
public int getItemCount()
Returns the number of items on the menu, including separators.
 This method is included for AWT compatibility.

Returns:
an integer equal to the number of items on the menu
See Also:
getMenuComponentCount()


"
JMenu,getMenuComponent(int n),Component,Returns the component at position n.,"

getMenuComponent
public Component getMenuComponent(int n)
Returns the component at position n.

Parameters:
n - the position of the component to be returned
Returns:
the component requested, or null
                  if there is no popup menu


"
JMenu,getMenuComponentCount(),int,Returns the number of components on the menu.,"

getMenuComponentCount
public int getMenuComponentCount()
Returns the number of components on the menu.

Returns:
an integer containing the number of components on the menu


"
JMenu,getMenuComponents(),Component[],Returns an array of Components of the menu's subcomponents.,"

getMenuComponents
public Component[] getMenuComponents()
Returns an array of Components of the menu's
 subcomponents.  Note that this returns all Components
 in the popup menu, including separators.

Returns:
an array of Components or an empty array
          if there is no popup menu


"
JMenu,getMenuListeners(),MenuListener[],Returns an array of all the MenuListeners added to this JMenu with addMenuListener().,"

getMenuListeners
public MenuListener[] getMenuListeners()
Returns an array of all the MenuListeners added
 to this JMenu with addMenuListener().

Returns:
all of the MenuListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JMenu,getPopupMenu(),JPopupMenu,Returns the popupmenu associated with this menu.,"

getPopupMenu
public JPopupMenu getPopupMenu()
Returns the popupmenu associated with this menu.  If there is
 no popupmenu, it will create one.

"
JMenu,getPopupMenuOrigin(),protected Point,Computes the origin for the JMenu's popup menu.,"

getPopupMenuOrigin
protected Point getPopupMenuOrigin()
Computes the origin for the JMenu's popup menu.
 This method uses Look and Feel properties named
 Menu.menuPopupOffsetX,
 Menu.menuPopupOffsetY,
 Menu.submenuPopupOffsetX, and
 Menu.submenuPopupOffsetY
 to adjust the exact location of popup.

Returns:
a Point in the coordinate space of the
          menu which should be used as the origin
          of the JMenu's popup menu
Since:
1.3


"
JMenu,getSubElements(),MenuElement[],Returns an array of MenuElements containing the submenu for this menu component.,"

getSubElements
public MenuElement[] getSubElements()
Returns an array of MenuElements containing the submenu
 for this menu component.  If popup menu is null returns
 an empty array.  This method is required to conform to the
 MenuElement interface.  Note that since
 JSeparators do not conform to the MenuElement
 interface, this array will only contain JMenuItems.

Specified by:
getSubElements in interface MenuElement
Overrides:
getSubElements in class JMenuItem
Returns:
an array of MenuElement objects


"
JMenu,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JMenuItem
Returns:
the string ""MenuUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JMenu,"insert(Action a, int pos)",JMenuItem,Inserts a new menu item attached to the specified Action object at a given position.,"

insert
public JMenuItem insert(Action a,
                        int pos)
Inserts a new menu item attached to the specified Action
 object at a given position.

Parameters:
a - the Action object for the menu item to add
pos - an integer specifying the position at which to add the
               new menu item
Throws:
IllegalArgumentException - if the value of
                  pos < 0


"
JMenu,"insert(JMenuItem mi, int pos)",JMenuItem,Inserts the specified JMenuitem at a given position.,"

insert
public JMenuItem insert(JMenuItem mi,
                        int pos)
Inserts the specified JMenuitem at a given position.

Parameters:
mi - the JMenuitem to add
pos - an integer specifying the position at which to add the
               new JMenuitem
Returns:
the new menu item
Throws:
IllegalArgumentException - if the value of
                  pos < 0


"
JMenu,"insert(String s, int pos)",void,Inserts a new menu item with the specified text at a given position.,"

insert
public void insert(String s,
                   int pos)
Inserts a new menu item with the specified text at a
 given position.

Parameters:
s - the text for the menu item to add
pos - an integer specifying the position at which to add the
               new menu item
Throws:
IllegalArgumentException - when the value of
                  pos < 0


"
JMenu,insertSeparator(int index),void,Inserts a separator at the specified position.,"

insertSeparator
public void insertSeparator(int index)
Inserts a separator at the specified position.

Parameters:
index - an integer specifying the position at which to
                    insert the menu separator
Throws:
IllegalArgumentException - if the value of
                       index < 0


"
JMenu,isMenuComponent(Component c),boolean,Returns true if the specified component exists in the submenu hierarchy.,"

isMenuComponent
public boolean isMenuComponent(Component c)
Returns true if the specified component exists in the
 submenu hierarchy.

Parameters:
c - the Component to be tested
Returns:
true if the Component exists, false otherwise


"
JMenu,isPopupMenuVisible(),boolean,Returns true if the menu's popup window is visible.,"

isPopupMenuVisible
public boolean isPopupMenuVisible()
Returns true if the menu's popup window is visible.

Returns:
true if the menu is visible, else false


"
JMenu,isSelected(),boolean,Returns true if the menu is currently selected (highlighted).,"

isSelected
public boolean isSelected()
Returns true if the menu is currently selected (highlighted).

Overrides:
isSelected in class AbstractButton
Returns:
true if the menu is selected, else false


"
JMenu,isTearOff(),boolean,Returns true if the menu can be torn off.,"

isTearOff
public boolean isTearOff()
Returns true if the menu can be torn off.  This method is not
 yet implemented.

Returns:
true if the menu can be torn off, else false
Throws:
Error - if invoked -- this method is not yet implemented


"
JMenu,isTopLevelMenu(),boolean,"Returns true if the menu is a 'top-level menu', that is, if it is the direct child of a menubar.","

isTopLevelMenu
public boolean isTopLevelMenu()
Returns true if the menu is a 'top-level menu', that is, if it is
 the direct child of a menubar.

Returns:
true if the menu is activated from the menu bar;
         false if the menu is activated from a menu item
         on another menu


"
JMenu,menuSelectionChanged(boolean isIncluded),void,Messaged when the menubar selection changes to activate or deactivate this menu.,"

menuSelectionChanged
public void menuSelectionChanged(boolean isIncluded)
Messaged when the menubar selection changes to activate or
 deactivate this menu.
 Overrides JMenuItem.menuSelectionChanged.

Specified by:
menuSelectionChanged in interface MenuElement
Overrides:
menuSelectionChanged in class JMenuItem
Parameters:
isIncluded - true if this menu is active, false if
        it is not
See Also:
MenuSelectionManager.setSelectedPath(MenuElement[])


"
JMenu,paramString(),protected String,Returns a string representation of this JMenu.,"

paramString
protected String paramString()
Returns a string representation of this JMenu. This
 method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JMenuItem
Returns:
a string representation of this JMenu.


"
JMenu,processKeyEvent(KeyEvent evt),protected void,Processes key stroke events such as mnemonics and accelerators.,"

processKeyEvent
protected void processKeyEvent(KeyEvent evt)
Processes key stroke events such as mnemonics and accelerators.

Overrides:
processKeyEvent in class JComponent
Parameters:
evt - the key event to be processed
See Also:
KeyEvent, 
KeyListener, 
KeyboardFocusManager, 
DefaultKeyboardFocusManager, 
Component.processEvent(java.awt.AWTEvent), 
Component.dispatchEvent(java.awt.AWTEvent), 
Component.addKeyListener(java.awt.event.KeyListener), 
Component.enableEvents(long), 
Component.isShowing()


"
JMenu,remove(Component c),void,Removes the component c from this menu.,"

remove
public void remove(Component c)
Removes the component c from this menu.

Overrides:
remove in class Container
Parameters:
c - the component to be removed
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.remove(int)


"
JMenu,remove(int pos),void,Removes the menu item at the specified index from this menu.,"

remove
public void remove(int pos)
Removes the menu item at the specified index from this menu.

Overrides:
remove in class Container
Parameters:
pos - the position of the item to be removed
Throws:
IllegalArgumentException - if the value of
                       pos < 0, or if pos
                       is greater than the number of menu items
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.getComponentCount()


"
JMenu,remove(JMenuItem item),void,Removes the specified menu item from this menu.,"

remove
public void remove(JMenuItem item)
Removes the specified menu item from this menu.  If there is no
 popup menu, this method will have no effect.

Parameters:
item - the JMenuItem to be removed from the menu


"
JMenu,removeAll(),void,Removes all menu items from this menu.,"

removeAll
public void removeAll()
Removes all menu items from this menu.

Overrides:
removeAll in class Container
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
JMenu,removeMenuListener(MenuListener l),void,Removes a listener for menu events.,"

removeMenuListener
public void removeMenuListener(MenuListener l)
Removes a listener for menu events.

Parameters:
l - the listener to be removed


"
JMenu,setAccelerator(KeyStroke keyStroke),void,setAccelerator is not defined for JMenu.,"

setAccelerator
public void setAccelerator(KeyStroke keyStroke)
setAccelerator is not defined for JMenu.
 Use setMnemonic instead.

Overrides:
setAccelerator in class JMenuItem
Parameters:
keyStroke - the keystroke combination which will invoke
                  the JMenuItem's actionlisteners
                  without navigating the menu hierarchy
Throws:
Error - if invoked -- this method is not defined for JMenu.
                  Use setMnemonic instead


"
JMenu,setComponentOrientation(ComponentOrientation o),void,Sets the language-sensitive orientation that is to be used to order the elements or text within this component.,"

setComponentOrientation
public void setComponentOrientation(ComponentOrientation o)
Description copied from class: Component
Sets the language-sensitive orientation that is to be used to order
 the elements or text within this component.  Language-sensitive
 LayoutManager and Component
 subclasses will use this property to
 determine how to lay out and draw components.
 
 At construction time, a component's orientation is set to
 ComponentOrientation.UNKNOWN,
 indicating that it has not been specified
 explicitly.  The UNKNOWN orientation behaves the same as
 ComponentOrientation.LEFT_TO_RIGHT.
 
 To set the orientation of a single component, use this method.
 To set the orientation of an entire component
 hierarchy, use
 applyComponentOrientation.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Overrides:
setComponentOrientation in class Component
See Also:
ComponentOrientation, 
Component.invalidate()


"
JMenu,setDelay(int d),void,Sets the suggested delay before the menu's PopupMenu is popped up or down.,"

setDelay
public void setDelay(int d)
Sets the suggested delay before the menu's PopupMenu
 is popped up or down.  Each look and feel (L&F) may determine
 it's own policy for observing the delay property.  In most cases,
 the delay is not observed for top level menus or while dragging.
 This method is a property of the look and feel code and is used
 to manage the idiosyncrasies of the various UI implementations.

Parameters:
d - the number of milliseconds to delay
Throws:
IllegalArgumentException - if d
                       is less than 0


"
JMenu,"setMenuLocation(int x, int y)",void,Sets the location of the popup component.,"

setMenuLocation
public void setMenuLocation(int x,
                            int y)
Sets the location of the popup component.

Parameters:
x - the x coordinate of the popup's new position
y - the y coordinate of the popup's new position


"
JMenu,setModel(ButtonModel newModel),void,"Sets the data model for the ""menu button"" -- the label that the user clicks to open or close the menu.","

setModel
public void setModel(ButtonModel newModel)
Sets the data model for the ""menu button"" -- the label
 that the user clicks to open or close the menu.

Overrides:
setModel in class JMenuItem
Parameters:
newModel - the ButtonModel
See Also:
AbstractButton.getModel()


"
JMenu,setPopupMenuVisible(boolean b),void,Sets the visibility of the menu's popup.,"

setPopupMenuVisible
public void setPopupMenuVisible(boolean b)
Sets the visibility of the menu's popup.  If the menu is
 not enabled, this method will have no effect.

Parameters:
b - a boolean value -- true to make the menu visible,
           false to hide it


"
JMenu,setSelected(boolean b),void,Sets the selection status of the menu.,"

setSelected
public void setSelected(boolean b)
Sets the selection status of the menu.

Overrides:
setSelected in class AbstractButton
Parameters:
b - true to select (highlight) the menu; false to de-select
          the menu


"
JMenu,updateUI(),void,Resets the UI property with a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property with a value from the current look and feel.

Overrides:
updateUI in class JMenuItem
See Also:
JComponent.updateUI()


"
JMenuBar,add(JMenu c),JMenu,Appends the specified menu to the end of the menu bar.,"

add
public JMenu add(JMenu c)
Appends the specified menu to the end of the menu bar.

Parameters:
c - the JMenu component to add
Returns:
the menu component


"
JMenuBar,addNotify(),void,Overrides JComponent.addNotify to register this menu bar with the current keyboard manager.,"

addNotify
public void addNotify()
Overrides JComponent.addNotify to register this
 menu bar with the current keyboard manager.

Overrides:
addNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JMenuBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JMenuBar.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JMenuBar.
 For JMenuBars, the AccessibleContext takes the form of an
 AccessibleJMenuBar.
 A new AccessibleJMenuBar instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJMenuBar that serves as the
         AccessibleContext of this JMenuBar


"
JMenuBar,getComponent(),Component,Implemented to be a MenuElement.,"

getComponent
public Component getComponent()
Implemented to be a MenuElement. Returns this object.

Specified by:
getComponent in interface MenuElement
Returns:
the current Component (this)
See Also:
getSubElements()


"
JMenuBar,getComponentAtIndex(int i),Component,Deprecated. replaced by getComponent(int i),"

getComponentAtIndex
@Deprecated
public Component getComponentAtIndex(int i)
Deprecated. replaced by getComponent(int i)
Returns the component at the specified index.

Parameters:
i - an integer specifying the position, where 0 is first
Returns:
the Component at the position,
          or null for an invalid index


"
JMenuBar,getComponentIndex(Component c),int,Returns the index of the specified component.,"

getComponentIndex
public int getComponentIndex(Component c)
Returns the index of the specified component.

Parameters:
c - the Component to find
Returns:
an integer giving the component's position, where 0 is first;
          or -1 if it can't be found


"
JMenuBar,getHelpMenu(),JMenu,Gets the help menu for the menu bar.,"

getHelpMenu
public JMenu getHelpMenu()
Gets the help menu for the menu bar.  This method is not yet
 implemented and will throw an exception.

Returns:
the JMenu that delivers help to the user


"
JMenuBar,getMargin(),Insets,Returns the margin between the menubar's border and its menus.,"

getMargin
public Insets getMargin()
Returns the margin between the menubar's border and
 its menus.  If there is no previous margin, it will create
 a default margin with zero size.

Returns:
an Insets object containing the margin values
See Also:
Insets


"
JMenuBar,getMenu(int index),JMenu,Returns the menu at the specified position in the menu bar.,"

getMenu
public JMenu getMenu(int index)
Returns the menu at the specified position in the menu bar.

Parameters:
index - an integer giving the position in the menu bar, where
               0 is the first position
Returns:
the JMenu at that position, or null if
          if there is no JMenu at that position (ie. if
          it is a JMenuItem)


"
JMenuBar,getMenuCount(),int,Returns the number of items in the menu bar.,"

getMenuCount
public int getMenuCount()
Returns the number of items in the menu bar.

Returns:
the number of items in the menu bar


"
JMenuBar,getSelectionModel(),SingleSelectionModel,Returns the model object that handles single selections.,"

getSelectionModel
public SingleSelectionModel getSelectionModel()
Returns the model object that handles single selections.

Returns:
the SingleSelectionModel property
See Also:
SingleSelectionModel


"
JMenuBar,getSubElements(),MenuElement[],Implemented to be a MenuElement -- returns the menus in this menu bar.,"

getSubElements
public MenuElement[] getSubElements()
Implemented to be a MenuElement -- returns the
 menus in this menu bar.
 This is the reason for implementing the MenuElement
 interface -- so that the menu bar can be treated the same as
 other menu elements.

Specified by:
getSubElements in interface MenuElement
Returns:
an array of menu items in the menu bar.


"
JMenuBar,getUI(),MenuBarUI,Returns the menubar's current UI.,"

getUI
public MenuBarUI getUI()
Returns the menubar's current UI.

See Also:
setUI(javax.swing.plaf.MenuBarUI)


"
JMenuBar,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""MenuBarUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JMenuBar,isBorderPainted(),boolean,Returns true if the menu bars border should be painted.,"

isBorderPainted
public boolean isBorderPainted()
Returns true if the menu bars border should be painted.

Returns:
true if the border should be painted, else false


"
JMenuBar,isSelected(),boolean,Returns true if the menu bar currently has a component selected.,"

isSelected
public boolean isSelected()
Returns true if the menu bar currently has a component selected.

Returns:
true if a selection has been made, else false


"
JMenuBar,menuSelectionChanged(boolean isIncluded),void,Implemented to be a MenuElement -- does nothing.,"

menuSelectionChanged
public void menuSelectionChanged(boolean isIncluded)
Implemented to be a MenuElement -- does nothing.

Specified by:
menuSelectionChanged in interface MenuElement
See Also:
getSubElements()


"
JMenuBar,paintBorder(Graphics g),protected void,Paints the menubar's border if BorderPainted property is true.,"

paintBorder
protected void paintBorder(Graphics g)
Paints the menubar's border if BorderPainted
 property is true.

Overrides:
paintBorder in class JComponent
Parameters:
g - the Graphics context to use for painting
See Also:
JComponent.paint(java.awt.Graphics), 
JComponent.setBorder(javax.swing.border.Border)


"
JMenuBar,paramString(),protected String,Returns a string representation of this JMenuBar.,"

paramString
protected String paramString()
Returns a string representation of this JMenuBar.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JMenuBar


"
JMenuBar,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Subclassed to check all the child menus.,"

processKeyBinding
protected boolean processKeyBinding(KeyStroke ks,
                                    KeyEvent e,
                                    int condition,
                                    boolean pressed)
Subclassed to check all the child menus.

Overrides:
processKeyBinding in class JComponent
Parameters:
ks - the KeyStroke queried
e - the KeyEvent
condition - one of the following values:
 
JComponent.WHEN_FOCUSED
 JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 JComponent.WHEN_IN_FOCUSED_WINDOW
 
pressed - true if the key is pressed
Returns:
true if there was a binding to an action, and the action
         was enabled
Since:
1.3


"
JMenuBar,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,Implemented to be a MenuElement -- does nothing.,"

processKeyEvent
public void processKeyEvent(KeyEvent e,
                            MenuElement[] path,
                            MenuSelectionManager manager)
Implemented to be a MenuElement -- does nothing.

Specified by:
processKeyEvent in interface MenuElement
See Also:
getSubElements()


"
JMenuBar,"processMouseEvent(MouseEvent event, MenuElement[] path, MenuSelectionManager manager)",void,Implemented to be a MenuElement -- does nothing.,"

processMouseEvent
public void processMouseEvent(MouseEvent event,
                              MenuElement[] path,
                              MenuSelectionManager manager)
Implemented to be a MenuElement -- does nothing.

Specified by:
processMouseEvent in interface MenuElement
See Also:
getSubElements()


"
JMenuBar,removeNotify(),void,Overrides JComponent.removeNotify to unregister this menu bar with the current keyboard manager.,"

removeNotify
public void removeNotify()
Overrides JComponent.removeNotify to unregister this
 menu bar with the current keyboard manager.

Overrides:
removeNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JMenuBar,setBorderPainted(boolean b),void,Sets whether the border should be painted.,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets whether the border should be painted.

Parameters:
b - if true and border property is not null,
          the border is painted.
See Also:
isBorderPainted()


"
JMenuBar,setHelpMenu(JMenu menu),void,"Sets the help menu that appears when the user selects the ""help"" option in the menu bar.","

setHelpMenu
public void setHelpMenu(JMenu menu)
Sets the help menu that appears when the user selects the
 ""help"" option in the menu bar. This method is not yet implemented
 and will throw an exception.

Parameters:
menu - the JMenu that delivers help to the user


"
JMenuBar,setMargin(Insets m),void,Sets the margin between the menubar's border and its menus.,"

setMargin
public void setMargin(Insets m)
Sets the margin between the menubar's border and
 its menus. Setting to null will cause the menubar to
 use the default margins.

Parameters:
m - an Insets object containing the margin values
See Also:
Insets


"
JMenuBar,setSelected(Component sel),void,"Sets the currently selected component, producing a a change to the selection model.","

setSelected
public void setSelected(Component sel)
Sets the currently selected component, producing a
 a change to the selection model.

Parameters:
sel - the Component to select


"
JMenuBar,setSelectionModel(SingleSelectionModel model),void,Sets the model object to handle single selections.,"

setSelectionModel
public void setSelectionModel(SingleSelectionModel model)
Sets the model object to handle single selections.

Parameters:
model - the SingleSelectionModel to use
See Also:
SingleSelectionModel


"
JMenuBar,setUI(MenuBarUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(MenuBarUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the new MenuBarUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JMenuBar,updateUI(),void,Resets the UI property with a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property with a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JMenuItem,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the button's state in response to property changes in the associated action.,"

actionPropertyChanged
protected void actionPropertyChanged(Action action,
                                     String propertyName)
Updates the button's state in response to property changes in the
 associated action. This method is invoked from the
 PropertyChangeListener returned from
 createActionPropertyChangeListener. Subclasses do not normally
 need to invoke this. Subclasses that support additional Action
 properties should override this and
 configurePropertiesFromAction.
 
 Refer to the table at 
 Swing Components Supporting Action for a list of
 the properties this method sets.

Overrides:
actionPropertyChanged in class AbstractButton
Parameters:
action - the Action associated with this button
propertyName - the name of the property that changed
Since:
1.6
See Also:
Action, 
AbstractButton.configurePropertiesFromAction(javax.swing.Action)


"
JMenuItem,addMenuDragMouseListener(MenuDragMouseListener l),void,Adds a MenuDragMouseListener to the menu item.,"

addMenuDragMouseListener
public void addMenuDragMouseListener(MenuDragMouseListener l)
Adds a MenuDragMouseListener to the menu item.

Parameters:
l - the MenuDragMouseListener to be added


"
JMenuItem,addMenuKeyListener(MenuKeyListener l),void,Adds a MenuKeyListener to the menu item.,"

addMenuKeyListener
public void addMenuKeyListener(MenuKeyListener l)
Adds a MenuKeyListener to the menu item.

Parameters:
l - the MenuKeyListener to be added


"
JMenuItem,configurePropertiesFromAction(Action a),protected void,Sets the properties on this button to match those in the specified Action.,"

configurePropertiesFromAction
protected void configurePropertiesFromAction(Action a)
Sets the properties on this button to match those in the specified
 Action.  Refer to 
 Swing Components Supporting Action for more
 details as to which properties this sets.

Overrides:
configurePropertiesFromAction in class AbstractButton
Parameters:
a - the Action from which to get the properties,
          or null
Since:
1.3
See Also:
Action, 
AbstractButton.setAction(javax.swing.Action)


"
JMenuItem,fireMenuDragMouseDragged(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuDragMouseDragged
protected void fireMenuDragMouseDragged(MenuDragMouseEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuDragMouseEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuDragMouseEntered(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuDragMouseEntered
protected void fireMenuDragMouseEntered(MenuDragMouseEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuMouseDragEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuDragMouseExited(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuDragMouseExited
protected void fireMenuDragMouseExited(MenuDragMouseEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuDragMouseEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuDragMouseReleased(MenuDragMouseEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuDragMouseReleased
protected void fireMenuDragMouseReleased(MenuDragMouseEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuDragMouseEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuKeyPressed(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuKeyPressed
protected void fireMenuKeyPressed(MenuKeyEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuKeyEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuKeyReleased(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuKeyReleased
protected void fireMenuKeyReleased(MenuKeyEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuKeyEvent
See Also:
EventListenerList


"
JMenuItem,fireMenuKeyTyped(MenuKeyEvent event),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireMenuKeyTyped
protected void fireMenuKeyTyped(MenuKeyEvent event)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
event - a MenuKeyEvent
See Also:
EventListenerList


"
JMenuItem,getAccelerator(),KeyStroke,Returns the KeyStroke which serves as an accelerator for the menu item.,"

getAccelerator
public KeyStroke getAccelerator()
Returns the KeyStroke which serves as an accelerator
 for the menu item.

Returns:
a KeyStroke object identifying the
          accelerator key


"
JMenuItem,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JMenuItem.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Returns the AccessibleContext associated with this
 JMenuItem. For JMenuItems,
 the AccessibleContext takes the form of an
 AccessibleJMenuItem.
 A new AccessibleJMenuItme instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJMenuItem that serves as the
         AccessibleContext of this JMenuItem


"
JMenuItem,getComponent(),Component,Returns the java.awt.Component used to paint this object.,"

getComponent
public Component getComponent()
Returns the java.awt.Component used to paint
 this object. The returned component will be used to convert
 events and detect if an event is inside a menu component.

Specified by:
getComponent in interface MenuElement
Returns:
the Component that paints this menu item


"
JMenuItem,getMenuDragMouseListeners(),MenuDragMouseListener[],Returns an array of all the MenuDragMouseListeners added to this JMenuItem with addMenuDragMouseListener().,"

getMenuDragMouseListeners
public MenuDragMouseListener[] getMenuDragMouseListeners()
Returns an array of all the MenuDragMouseListeners added
 to this JMenuItem with addMenuDragMouseListener().

Returns:
all of the MenuDragMouseListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JMenuItem,getMenuKeyListeners(),MenuKeyListener[],Returns an array of all the MenuKeyListeners added to this JMenuItem with addMenuKeyListener().,"

getMenuKeyListeners
public MenuKeyListener[] getMenuKeyListeners()
Returns an array of all the MenuKeyListeners added
 to this JMenuItem with addMenuKeyListener().

Returns:
all of the MenuKeyListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JMenuItem,getSubElements(),MenuElement[],This method returns an array containing the sub-menu components for this menu component.,"

getSubElements
public MenuElement[] getSubElements()
This method returns an array containing the sub-menu
 components for this menu component.

Specified by:
getSubElements in interface MenuElement
Returns:
an array of MenuElements


"
JMenuItem,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.,"

getUIClassID
public String getUIClassID()
Returns the suffix used to construct the name of the L&F class used to
 render this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""MenuItemUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JMenuItem,"init(String text, Icon icon)",protected void,Initializes the menu item with the specified text and icon.,"

init
protected void init(String text,
                    Icon icon)
Initializes the menu item with the specified text and icon.

Overrides:
init in class AbstractButton
Parameters:
text - the text of the JMenuItem
icon - the icon of the JMenuItem


"
JMenuItem,isArmed(),boolean,"Returns whether the menu item is ""armed"".","

isArmed
public boolean isArmed()
Returns whether the menu item is ""armed"".

Returns:
true if the menu item is armed, and it can be selected
See Also:
setArmed(boolean)


"
JMenuItem,menuSelectionChanged(boolean isIncluded),void,Called by the MenuSelectionManager when the MenuElement is selected or unselected.,"

menuSelectionChanged
public void menuSelectionChanged(boolean isIncluded)
Called by the MenuSelectionManager when the
 MenuElement is selected or unselected.

Specified by:
menuSelectionChanged in interface MenuElement
Parameters:
isIncluded - true if this menu item is on the part of the menu
                    path that changed, false if this menu is part of the
                    a menu path that changed, but this particular part of
                    that path is still the same
See Also:
MenuSelectionManager.setSelectedPath(MenuElement[])


"
JMenuItem,paramString(),protected String,Returns a string representation of this JMenuItem.,"

paramString
protected String paramString()
Returns a string representation of this JMenuItem.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class AbstractButton
Returns:
a string representation of this JMenuItem


"
JMenuItem,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API.","

processKeyEvent
public void processKeyEvent(KeyEvent e,
                            MenuElement[] path,
                            MenuSelectionManager manager)
Processes a key event forwarded from the
 MenuSelectionManager and changes the menu selection,
 if necessary, by using MenuSelectionManager's API.
 
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the MenuSelectionManager.

Specified by:
processKeyEvent in interface MenuElement
Parameters:
e - a KeyEvent
path - the MenuElement path array
manager - the MenuSelectionManager


"
JMenuItem,processMenuDragMouseEvent(MenuDragMouseEvent e),void,Handles mouse drag in a menu.,"

processMenuDragMouseEvent
public void processMenuDragMouseEvent(MenuDragMouseEvent e)
Handles mouse drag in a menu.

Parameters:
e - a MenuDragMouseEvent object


"
JMenuItem,processMenuKeyEvent(MenuKeyEvent e),void,Handles a keystroke in a menu.,"

processMenuKeyEvent
public void processMenuKeyEvent(MenuKeyEvent e)
Handles a keystroke in a menu.

Parameters:
e - a MenuKeyEvent object


"
JMenuItem,"processMouseEvent(MouseEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a mouse event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using the MenuSelectionManager's API.","

processMouseEvent
public void processMouseEvent(MouseEvent e,
                              MenuElement[] path,
                              MenuSelectionManager manager)
Processes a mouse event forwarded from the
 MenuSelectionManager and changes the menu
 selection, if necessary, by using the
 MenuSelectionManager's API.
 
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the MenuSelectionManager.

Specified by:
processMouseEvent in interface MenuElement
Parameters:
e - a MouseEvent
path - the MenuElement path array
manager - the MenuSelectionManager


"
JMenuItem,removeMenuDragMouseListener(MenuDragMouseListener l),void,Removes a MenuDragMouseListener from the menu item.,"

removeMenuDragMouseListener
public void removeMenuDragMouseListener(MenuDragMouseListener l)
Removes a MenuDragMouseListener from the menu item.

Parameters:
l - the MenuDragMouseListener to be removed


"
JMenuItem,removeMenuKeyListener(MenuKeyListener l),void,Removes a MenuKeyListener from the menu item.,"

removeMenuKeyListener
public void removeMenuKeyListener(MenuKeyListener l)
Removes a MenuKeyListener from the menu item.

Parameters:
l - the MenuKeyListener to be removed


"
JMenuItem,setAccelerator(KeyStroke keyStroke),void,Sets the key combination which invokes the menu item's action listeners without navigating the menu hierarchy.,"

setAccelerator
public void setAccelerator(KeyStroke keyStroke)
Sets the key combination which invokes the menu item's
 action listeners without navigating the menu hierarchy. It is the
 UI's responsibility to install the correct action.  Note that
 when the keyboard accelerator is typed, it will work whether or
 not the menu is currently displayed.

Parameters:
keyStroke - the KeyStroke which will
          serve as an accelerator


"
JMenuItem,setArmed(boolean b),void,"Identifies the menu item as ""armed"".","

setArmed
public void setArmed(boolean b)
Identifies the menu item as ""armed"". If the mouse button is
 released while it is over this item, the menu's action event
 will fire. If the mouse button is released elsewhere, the
 event will not fire and the menu item will be disarmed.

Parameters:
b - true to arm the menu item so it can be selected


"
JMenuItem,setEnabled(boolean b),void,Enables or disables the menu item.,"

setEnabled
public void setEnabled(boolean b)
Enables or disables the menu item.

Overrides:
setEnabled in class AbstractButton
Parameters:
b - true to enable the item
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
JMenuItem,setModel(ButtonModel newModel),void,Sets the model that this button represents.,"

setModel
public void setModel(ButtonModel newModel)
Sets the model that this button represents.

Overrides:
setModel in class AbstractButton
Parameters:
newModel - the new ButtonModel
See Also:
AbstractButton.getModel()


"
JMenuItem,setUI(MenuItemUI ui),void,Sets the look and feel object that renders this component.,"

setUI
public void setUI(MenuItemUI ui)
Sets the look and feel object that renders this component.

Parameters:
ui - the JMenuItemUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JMenuItem,updateUI(),void,Resets the UI property with a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property with a value from the current look and feel.

Overrides:
updateUI in class AbstractButton
See Also:
JComponent.updateUI()


"
JOptionPane,"createDialog(Component parentComponent, String title)",JDialog,Creates and returns a new JDialog wrapping this centered on the parentComponent in the parentComponent's frame.,"

createDialog
public JDialog createDialog(Component parentComponent,
                            String title)
                     throws HeadlessException
Creates and returns a new JDialog wrapping
 this centered on the parentComponent
 in the parentComponent's frame.
 title is the title of the returned dialog.
 The returned JDialog will not be resizable by the
 user, however programs can invoke setResizable on
 the JDialog instance to change this property.
 The returned JDialog will be set up such that
 once it is closed, or the user clicks on one of the buttons,
 the optionpane's value property will be set accordingly and
 the dialog will be closed.  Each time the dialog is made visible,
 it will reset the option pane's value property to
 JOptionPane.UNINITIALIZED_VALUE to ensure the
 user's subsequent action closes the dialog properly.

Parameters:
parentComponent - determines the frame in which the dialog
          is displayed; if the parentComponent has
          no Frame, a default Frame is used
title - the title string for the dialog
Returns:
a new JDialog containing this instance
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,createDialog(String title),JDialog,Creates and returns a new parentless JDialog with the specified title.,"

createDialog
public JDialog createDialog(String title)
                     throws HeadlessException
Creates and returns a new parentless JDialog
 with the specified title.
 The returned JDialog will not be resizable by the
 user, however programs can invoke setResizable on
 the JDialog instance to change this property.
 The returned JDialog will be set up such that
 once it is closed, or the user clicks on one of the buttons,
 the optionpane's value property will be set accordingly and
 the dialog will be closed.  Each time the dialog is made visible,
 it will reset the option pane's value property to
 JOptionPane.UNINITIALIZED_VALUE to ensure the
 user's subsequent action closes the dialog properly.

Parameters:
title - the title string for the dialog
Returns:
a new JDialog containing this instance
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
Since:
1.6
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"createInternalFrame(Component parentComponent, String title)",JInternalFrame,Creates and returns an instance of JInternalFrame.,"

createInternalFrame
public JInternalFrame createInternalFrame(Component parentComponent,
                                          String title)
Creates and returns an instance of JInternalFrame.
 The internal frame is created with the specified title,
 and wrapping the JOptionPane.
 The returned JInternalFrame is
 added to the JDesktopPane ancestor of
 parentComponent, or components
 parent if one its ancestors isn't a JDesktopPane,
 or if parentComponent
 doesn't have a parent then a RuntimeException is thrown.

Parameters:
parentComponent - the parent Component for
          the internal frame
title - the String to display in the
          frame's title bar
Returns:
a JInternalFrame containing a
          JOptionPane
Throws:
RuntimeException - if parentComponent does
          not have a valid parent


"
JOptionPane,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JOptionPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Returns the AccessibleContext associated with this JOptionPane.
 For option panes, the AccessibleContext takes the form of an
 AccessibleJOptionPane.
 A new AccessibleJOptionPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJOptionPane that serves as the
         AccessibleContext of this AccessibleJOptionPane


"
JOptionPane,getDesktopPaneForComponent(Component parentComponent),static JDesktopPane,Returns the specified component's desktop pane.,"

getDesktopPaneForComponent
public static JDesktopPane getDesktopPaneForComponent(Component parentComponent)
Returns the specified component's desktop pane.

Parameters:
parentComponent - the Component to check for a
          desktop
Returns:
the JDesktopPane that contains the component,
          or null if the component is null
          or does not have an ancestor that is a
          JInternalFrame


"
JOptionPane,getFrameForComponent(Component parentComponent),static Frame,Returns the specified component's Frame.,"

getFrameForComponent
public static Frame getFrameForComponent(Component parentComponent)
                                  throws HeadlessException
Returns the specified component's Frame.

Parameters:
parentComponent - the Component to check for a
          Frame
Returns:
the Frame that contains the component,
          or getRootFrame
          if the component is null,
          or does not have a valid Frame parent
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
getRootFrame(), 
GraphicsEnvironment.isHeadless()


"
JOptionPane,getIcon(),Icon,Returns the icon this pane displays.,"

getIcon
public Icon getIcon()
Returns the icon this pane displays.

Returns:
the Icon that is displayed
See Also:
setIcon(javax.swing.Icon)


"
JOptionPane,getInitialSelectionValue(),Object,Returns the input value that is displayed as initially selected to the user.,"

getInitialSelectionValue
public Object getInitialSelectionValue()
Returns the input value that is displayed as initially selected to the user.

Returns:
the initially selected value
See Also:
setInitialSelectionValue(java.lang.Object), 
setSelectionValues(java.lang.Object[])


"
JOptionPane,getInitialValue(),Object,Returns the initial value.,"

getInitialValue
public Object getInitialValue()
Returns the initial value.

Returns:
the Object that gets the initial keyboard focus
See Also:
setInitialValue(java.lang.Object)


"
JOptionPane,getInputValue(),Object,"Returns the value the user has input, if wantsInput is true.","

getInputValue
public Object getInputValue()
Returns the value the user has input, if wantsInput
 is true.

Returns:
the Object the user specified,
          if it was one of the objects, or a
          String if it was a value typed into a
          field
See Also:
setSelectionValues(java.lang.Object[]), 
setWantsInput(boolean), 
setInputValue(java.lang.Object)


"
JOptionPane,getMaxCharactersPerLineCount(),int,Returns the maximum number of characters to place on a line in a message.,"

getMaxCharactersPerLineCount
public int getMaxCharactersPerLineCount()
Returns the maximum number of characters to place on a line in a
 message. Default is to return Integer.MAX_VALUE.
 The value can be
 changed by overriding this method in a subclass.

Returns:
an integer giving the maximum number of characters on a line


"
JOptionPane,getMessage(),Object,Returns the message-object this pane displays.,"

getMessage
public Object getMessage()
Returns the message-object this pane displays.

Returns:
the Object that is displayed
See Also:
setMessage(java.lang.Object)


"
JOptionPane,getMessageType(),int,Returns the message type.,"

getMessageType
public int getMessageType()
Returns the message type.

Returns:
an integer specifying the message type
See Also:
setMessageType(int)


"
JOptionPane,getOptions(),Object[],Returns the choices the user can make.,"

getOptions
public Object[] getOptions()
Returns the choices the user can make.

Returns:
the array of Objects that give the user's choices
See Also:
setOptions(java.lang.Object[])


"
JOptionPane,getOptionType(),int,Returns the type of options that are displayed.,"

getOptionType
public int getOptionType()
Returns the type of options that are displayed.

Returns:
an integer specifying the user-selectable options
See Also:
setOptionType(int)


"
JOptionPane,getRootFrame(),static Frame,Returns the Frame to use for the class methods in which a frame is not provided.,"

getRootFrame
public static Frame getRootFrame()
                          throws HeadlessException
Returns the Frame to use for the class methods in
 which a frame is not provided.

Returns:
the default Frame to use
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
setRootFrame(java.awt.Frame), 
GraphicsEnvironment.isHeadless()


"
JOptionPane,getSelectionValues(),Object[],Returns the input selection values.,"

getSelectionValues
public Object[] getSelectionValues()
Returns the input selection values.

Returns:
the array of Objects the user can select
See Also:
setSelectionValues(java.lang.Object[])


"
JOptionPane,getUI(),OptionPaneUI,Returns the UI object which implements the L&F for this component.,"

getUI
public OptionPaneUI getUI()
Returns the UI object which implements the L&F for this component.

Returns:
the OptionPaneUI object


"
JOptionPane,getUIClassID(),String,Returns the name of the UI class that implements the L&F for this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the UI class that implements the
 L&F for this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""OptionPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JOptionPane,getValue(),Object,Returns the value the user has selected.,"

getValue
public Object getValue()
Returns the value the user has selected. UNINITIALIZED_VALUE
 implies the user has not yet made a choice, null means the
 user closed the window with out choosing anything. Otherwise
 the returned value will be one of the options defined in this
 object.

Returns:
the Object chosen by the user,
         UNINITIALIZED_VALUE
         if the user has not yet made a choice, or null if
         the user closed the window without making a choice
See Also:
setValue(java.lang.Object)


"
JOptionPane,getWantsInput(),boolean,Returns the value of the wantsInput property.,"

getWantsInput
public boolean getWantsInput()
Returns the value of the wantsInput property.

Returns:
true if an input component will be provided
See Also:
setWantsInput(boolean)


"
JOptionPane,paramString(),protected String,Returns a string representation of this JOptionPane.,"

paramString
protected String paramString()
Returns a string representation of this JOptionPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JOptionPane


"
JOptionPane,selectInitialValue(),void,"Requests that the initial value be selected, which will set focus to the initial value.","

selectInitialValue
public void selectInitialValue()
Requests that the initial value be selected, which will set
 focus to the initial value. This method
 should be invoked after the window containing the option pane
 is made visible.

"
JOptionPane,setIcon(Icon newIcon),void,Sets the icon to display.,"

setIcon
public void setIcon(Icon newIcon)
Sets the icon to display. If non-null, the look and feel
 does not provide an icon.

Parameters:
newIcon - the Icon to display
See Also:
getIcon()


"
JOptionPane,setInitialSelectionValue(Object newValue),void,Sets the input value that is initially displayed as selected to the user.,"

setInitialSelectionValue
public void setInitialSelectionValue(Object newValue)
Sets the input value that is initially displayed as selected to the user.
 Only used if wantsInput is true.

Parameters:
newValue - the initially selected value
See Also:
setSelectionValues(java.lang.Object[]), 
getInitialSelectionValue()


"
JOptionPane,setInitialValue(Object newInitialValue),void,Sets the initial value that is to be enabled -- the Component that has the focus when the pane is initially displayed.,"

setInitialValue
public void setInitialValue(Object newInitialValue)
Sets the initial value that is to be enabled -- the
 Component
 that has the focus when the pane is initially displayed.

Parameters:
newInitialValue - the Object that gets the initial
                         keyboard focus
See Also:
getInitialValue()


"
JOptionPane,setInputValue(Object newValue),void,Sets the input value that was selected or input by the user.,"

setInputValue
public void setInputValue(Object newValue)
Sets the input value that was selected or input by the user.
 Only used if wantsInput is true.  Note that this method
 is invoked internally by the option pane (in response to user action)
 and should generally not be called by client programs.  To set the
 input value initially displayed as selected to the user, use
 setInitialSelectionValue.

Parameters:
newValue - the Object used to set the
          value that the user specified (usually in a text field)
See Also:
setSelectionValues(java.lang.Object[]), 
setInitialSelectionValue(java.lang.Object), 
setWantsInput(boolean), 
getInputValue()


"
JOptionPane,setMessage(Object newMessage),void,Sets the option pane's message-object.,"

setMessage
public void setMessage(Object newMessage)
Sets the option pane's message-object.

Parameters:
newMessage - the Object to display
See Also:
getMessage()


"
JOptionPane,setMessageType(int newType),void,Sets the option pane's message type.,"

setMessageType
public void setMessageType(int newType)
Sets the option pane's message type.
 The message type is used by the Look and Feel to determine the
 icon to display (if not supplied) as well as potentially how to
 lay out the parentComponent.

Parameters:
newType - an integer specifying the kind of message to display:
                ERROR_MESSAGE, INFORMATION_MESSAGE,
                WARNING_MESSAGE,
                QUESTION_MESSAGE, or PLAIN_MESSAGE
Throws:
RuntimeException - if newType is not one of the
          legal values listed above
See Also:
getMessageType()


"
JOptionPane,setOptions(Object[] newOptions),void,Sets the options this pane displays.,"

setOptions
public void setOptions(Object[] newOptions)
Sets the options this pane displays. If an element in
 newOptions is a Component
 it is added directly to the pane,
 otherwise a button is created for the element.

Parameters:
newOptions - an array of Objects that create the
          buttons the user can click on, or arbitrary
          Components to add to the pane
See Also:
getOptions()


"
JOptionPane,setOptionType(int newType),void,Sets the options to display.,"

setOptionType
public void setOptionType(int newType)
Sets the options to display.
 The option type is used by the Look and Feel to
 determine what buttons to show (unless options are supplied).

Parameters:
newType - an integer specifying the options the L&F is to display:
                  DEFAULT_OPTION,
                  YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
Throws:
RuntimeException - if newType is not one of
          the legal values listed above
See Also:
getOptionType(), 
setOptions(java.lang.Object[])


"
JOptionPane,setRootFrame(Frame newRootFrame),static void,Sets the frame to use for class methods in which a frame is not provided.,"

setRootFrame
public static void setRootFrame(Frame newRootFrame)
Sets the frame to use for class methods in which a frame is
 not provided.
 
Note:
 It is recommended that rather than using this method you supply a valid parent.

Parameters:
newRootFrame - the default Frame to use


"
JOptionPane,setSelectionValues(Object[] newValues),void,Sets the input selection values for a pane that provides the user with a list of items to choose from.,"

setSelectionValues
public void setSelectionValues(Object[] newValues)
Sets the input selection values for a pane that provides the user
 with a list of items to choose from. (The UI provides a widget
 for choosing one of the values.)  A null value
 implies the user can input whatever they wish, usually by means
 of a JTextField.
 
 Sets wantsInput to true. Use
 setInitialSelectionValue to specify the initially-chosen
 value. After the pane as been enabled, inputValue is
 set to the value the user has selected.

Parameters:
newValues - an array of Objects the user to be
                  displayed
                  (usually in a list or combo-box) from which
                  the user can make a selection
See Also:
setWantsInput(boolean), 
setInitialSelectionValue(java.lang.Object), 
getSelectionValues()


"
JOptionPane,setUI(OptionPaneUI ui),void,Sets the UI object which implements the L&F for this component.,"

setUI
public void setUI(OptionPaneUI ui)
Sets the UI object which implements the L&F for this component.

Parameters:
ui - the OptionPaneUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JOptionPane,setValue(Object newValue),void,Sets the value the user has chosen.,"

setValue
public void setValue(Object newValue)
Sets the value the user has chosen.

Parameters:
newValue - the chosen value
See Also:
getValue()


"
JOptionPane,setWantsInput(boolean newValue),void,Sets the wantsInput property.,"

setWantsInput
public void setWantsInput(boolean newValue)
Sets the wantsInput property.
 If newValue is true, an input component
 (such as a text field or combo box) whose parent is
 parentComponent is provided to
 allow the user to input a value. If getSelectionValues
 returns a non-null array, the input value is one of the
 objects in that array. Otherwise the input value is whatever
 the user inputs.
 
 This is a bound property.

See Also:
setSelectionValues(java.lang.Object[]), 
setInputValue(java.lang.Object)


"
JOptionPane,"showConfirmDialog(Component parentComponent, Object message)",static int,"Brings up a dialog with the options Yes, No and Cancel; with the title, Select an Option.","

showConfirmDialog
public static int showConfirmDialog(Component parentComponent,
                                    Object message)
                             throws HeadlessException
Brings up a dialog with the options Yes,
 No and Cancel; with the
 title, Select an Option.

Parameters:
parentComponent - determines the Frame in which the
                  dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
Returns:
an integer indicating the option selected by the user
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType)",static int,Brings up a dialog where the number of choices is determined by the optionType parameter.,"

showConfirmDialog
public static int showConfirmDialog(Component parentComponent,
                                    Object message,
                                    String title,
                                    int optionType)
                             throws HeadlessException
Brings up a dialog where the number of choices is determined
 by the optionType parameter.

Parameters:
parentComponent - determines the Frame in which the
                  dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
title - the title string for the dialog
optionType - an int designating the options available on the dialog:
                  YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
Returns:
an int indicating the option selected by the user
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType)",static int,"Brings up a dialog where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display.","

showConfirmDialog
public static int showConfirmDialog(Component parentComponent,
                                    Object message,
                                    String title,
                                    int optionType,
                                    int messageType)
                             throws HeadlessException
Brings up a dialog where the number of choices is determined
 by the optionType parameter, where the
 messageType
 parameter determines the icon to display.
 The messageType parameter is primarily used to supply
 a default icon from the Look and Feel.

Parameters:
parentComponent - determines the Frame in
                  which the dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used.
message - the Object to display
title - the title string for the dialog
optionType - an integer designating the options available
                   on the dialog: YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
messageType - an integer designating the kind of message this is;
                  primarily used to determine the icon from the pluggable
                  Look and Feel: ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
Returns:
an integer indicating the option selected by the user
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon)",static int,"Brings up a dialog with a specified icon, where the number of choices is determined by the optionType parameter.","

showConfirmDialog
public static int showConfirmDialog(Component parentComponent,
                                    Object message,
                                    String title,
                                    int optionType,
                                    int messageType,
                                    Icon icon)
                             throws HeadlessException
Brings up a dialog with a specified icon, where the number of
 choices is determined by the optionType parameter.
 The messageType parameter is primarily used to supply
 a default icon from the look and feel.

Parameters:
parentComponent - determines the Frame in which the
                  dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
title - the title string for the dialog
optionType - an int designating the options available on the dialog:
                  YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
messageType - an int designating the kind of message this is,
                  primarily used to determine the icon from the pluggable
                  Look and Feel: ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - the icon to display in the dialog
Returns:
an int indicating the option selected by the user
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showInputDialog(Component parentComponent, Object message)",static String,Shows a question-message dialog requesting input from the user parented to parentComponent.,"

showInputDialog
public static String showInputDialog(Component parentComponent,
                                     Object message)
                              throws HeadlessException
Shows a question-message dialog requesting input from the user
 parented to parentComponent.
 The dialog is displayed on top of the Component's
 frame, and is usually positioned below the Component.

Parameters:
parentComponent - the parent Component for the
          dialog
message - the Object to display
Throws:
HeadlessException - if
    GraphicsEnvironment.isHeadless returns
    true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showInputDialog(Component parentComponent, Object message, Object initialSelectionValue)",static String,Shows a question-message dialog requesting input from the user and parented to parentComponent.,"

showInputDialog
public static String showInputDialog(Component parentComponent,
                                     Object message,
                                     Object initialSelectionValue)
Shows a question-message dialog requesting input from the user and
 parented to parentComponent. The input value will be
 initialized to initialSelectionValue.
 The dialog is displayed on top of the Component's
 frame, and is usually positioned below the Component.

Parameters:
parentComponent - the parent Component for the
          dialog
message - the Object to display
initialSelectionValue - the value used to initialize the input
                 field
Since:
1.4


"
JOptionPane,"showInputDialog(Component parentComponent, Object message, String title, int messageType)",static String,Shows a dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.,"

showInputDialog
public static String showInputDialog(Component parentComponent,
                                     Object message,
                                     String title,
                                     int messageType)
                              throws HeadlessException
Shows a dialog requesting input from the user parented to
 parentComponent with the dialog having the title
 title and message type messageType.

Parameters:
parentComponent - the parent Component for the
                  dialog
message - the Object to display
title - the String to display in the dialog
                  title bar
messageType - the type of message that is to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showInputDialog(Component parentComponent, Object message, String title, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue)",static Object,"Prompts the user for input in a blocking dialog where the initial selection, possible selections, and all other options can be specified.","

showInputDialog
public static Object showInputDialog(Component parentComponent,
                                     Object message,
                                     String title,
                                     int messageType,
                                     Icon icon,
                                     Object[] selectionValues,
                                     Object initialSelectionValue)
                              throws HeadlessException
Prompts the user for input in a blocking dialog where the
 initial selection, possible selections, and all other options can
 be specified. The user will able to choose from
 selectionValues, where null implies the
 user can input
 whatever they wish, usually by means of a JTextField.
 initialSelectionValue is the initial value to prompt
 the user with. It is up to the UI to decide how best to represent
 the selectionValues, but usually a
 JComboBox, JList, or
 JTextField will be used.

Parameters:
parentComponent - the parent Component for the
                  dialog
message - the Object to display
title - the String to display in the
                  dialog title bar
messageType - the type of message to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - the Icon image to display
selectionValues - an array of Objects that
                  gives the possible selections
initialSelectionValue - the value used to initialize the input
                 field
Returns:
user's input, or null meaning the user
                  canceled the input
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,showInputDialog(Object message),static String,Shows a question-message dialog requesting input from the user.,"

showInputDialog
public static String showInputDialog(Object message)
                              throws HeadlessException
Shows a question-message dialog requesting input from the user. The
 dialog uses the default frame, which usually means it is centered on
 the screen.

Parameters:
message - the Object to display
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showInputDialog(Object message, Object initialSelectionValue)",static String,"Shows a question-message dialog requesting input from the user, with the input value initialized to initialSelectionValue.","

showInputDialog
public static String showInputDialog(Object message,
                                     Object initialSelectionValue)
Shows a question-message dialog requesting input from the user, with
 the input value initialized to initialSelectionValue. The
 dialog uses the default frame, which usually means it is centered on
 the screen.

Parameters:
message - the Object to display
initialSelectionValue - the value used to initialize the input
                 field
Since:
1.4


"
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message)",static int,"Brings up an internal dialog panel with the options Yes, No and Cancel; with the title, Select an Option.","

showInternalConfirmDialog
public static int showInternalConfirmDialog(Component parentComponent,
                                            Object message)
Brings up an internal dialog panel with the options Yes, No
 and Cancel; with the title, Select an Option.

Parameters:
parentComponent - determines the Frame in
          which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
Returns:
an integer indicating the option selected by the user


"
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType)",static int,Brings up a internal dialog panel where the number of choices is determined by the optionType parameter.,"

showInternalConfirmDialog
public static int showInternalConfirmDialog(Component parentComponent,
                                            Object message,
                                            String title,
                                            int optionType)
Brings up a internal dialog panel where the number of choices
 is determined by the optionType parameter.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the object to display in the dialog; a
          Component object is rendered as a
          Component; a String
          object is rendered as a string; other objects
          are converted to a String using the
          toString method
title - the title string for the dialog
optionType - an integer designating the options
          available on the dialog: YES_NO_OPTION,
          or YES_NO_CANCEL_OPTION
Returns:
an integer indicating the option selected by the user


"
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType)",static int,"Brings up an internal dialog panel where the number of choices is determined by the optionType parameter, where the messageType parameter determines the icon to display.","

showInternalConfirmDialog
public static int showInternalConfirmDialog(Component parentComponent,
                                            Object message,
                                            String title,
                                            int optionType,
                                            int messageType)
Brings up an internal dialog panel where the number of choices
 is determined by the optionType parameter, where
 the messageType parameter determines the icon to display.
 The messageType parameter is primarily used to supply
 a default icon from the Look and Feel.

Parameters:
parentComponent - determines the Frame in
          which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the object to display in the dialog; a
          Component object is rendered as a
          Component; a String
          object is rendered as a string; other objects are
          converted to a String using the
          toString method
title - the title string for the dialog
optionType - an integer designating the options
          available on the dialog:
          YES_NO_OPTION, or YES_NO_CANCEL_OPTION
messageType - an integer designating the kind of message this is,
          primarily used to determine the icon from the
          pluggable Look and Feel: ERROR_MESSAGE,
          INFORMATION_MESSAGE,
          WARNING_MESSAGE, QUESTION_MESSAGE,
          or PLAIN_MESSAGE
Returns:
an integer indicating the option selected by the user


"
JOptionPane,"showInternalConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon)",static int,"Brings up an internal dialog panel with a specified icon, where the number of choices is determined by the optionType parameter.","

showInternalConfirmDialog
public static int showInternalConfirmDialog(Component parentComponent,
                                            Object message,
                                            String title,
                                            int optionType,
                                            int messageType,
                                            Icon icon)
Brings up an internal dialog panel with a specified icon, where
 the number of choices is determined by the optionType
 parameter.
 The messageType parameter is primarily used to supply
 a default icon from the look and feel.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no Frame, a
          default Frame is used
message - the object to display in the dialog; a
          Component object is rendered as a
          Component; a String
          object is rendered as a string; other objects are
          converted to a String using the
          toString method
title - the title string for the dialog
optionType - an integer designating the options available
          on the dialog:
          YES_NO_OPTION, or
          YES_NO_CANCEL_OPTION.
messageType - an integer designating the kind of message this is,
          primarily used to determine the icon from the pluggable
          Look and Feel: ERROR_MESSAGE,
          INFORMATION_MESSAGE,
          WARNING_MESSAGE, QUESTION_MESSAGE,
          or PLAIN_MESSAGE
icon - the icon to display in the dialog
Returns:
an integer indicating the option selected by the user


"
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message)",static String,Shows an internal question-message dialog requesting input from the user parented to parentComponent.,"

showInternalInputDialog
public static String showInternalInputDialog(Component parentComponent,
                                             Object message)
Shows an internal question-message dialog requesting input from
 the user parented to parentComponent. The dialog
 is displayed in the Component's frame,
 and is usually positioned below the Component.

Parameters:
parentComponent - the parent Component
          for the dialog
message - the Object to display


"
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message, String title, int messageType)",static String,Shows an internal dialog requesting input from the user parented to parentComponent with the dialog having the title title and message type messageType.,"

showInternalInputDialog
public static String showInternalInputDialog(Component parentComponent,
                                             Object message,
                                             String title,
                                             int messageType)
Shows an internal dialog requesting input from the user parented
 to parentComponent with the dialog having the title
 title and message type messageType.

Parameters:
parentComponent - the parent Component for the dialog
message - the Object to display
title - the String to display in the
          dialog title bar
messageType - the type of message that is to be displayed:
                    ERROR_MESSAGE, INFORMATION_MESSAGE, WARNING_MESSAGE,
                    QUESTION_MESSAGE, or PLAIN_MESSAGE


"
JOptionPane,"showInternalInputDialog(Component parentComponent, Object message, String title, int messageType, Icon icon, Object[] selectionValues, Object initialSelectionValue)",static Object,"Prompts the user for input in a blocking internal dialog where the initial selection, possible selections, and all other options can be specified.","

showInternalInputDialog
public static Object showInternalInputDialog(Component parentComponent,
                                             Object message,
                                             String title,
                                             int messageType,
                                             Icon icon,
                                             Object[] selectionValues,
                                             Object initialSelectionValue)
Prompts the user for input in a blocking internal dialog where
 the initial selection, possible selections, and all other
 options can be specified. The user will able to choose from
 selectionValues, where null
 implies the user can input
 whatever they wish, usually by means of a JTextField.
 initialSelectionValue is the initial value to prompt
 the user with. It is up to the UI to decide how best to represent
 the selectionValues, but usually a
 JComboBox, JList, or
 JTextField will be used.

Parameters:
parentComponent - the parent Component for the dialog
message - the Object to display
title - the String to display in the dialog
          title bar
messageType - the type of message to be displayed:
                  ERROR_MESSAGE, INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE, or PLAIN_MESSAGE
icon - the Icon image to display
selectionValues - an array of Objects that
                  gives the possible selections
initialSelectionValue - the value used to initialize the input
                  field
Returns:
user's input, or null meaning the user
          canceled the input


"
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message)",static void,Brings up an internal confirmation dialog panel.,"

showInternalMessageDialog
public static void showInternalMessageDialog(Component parentComponent,
                                             Object message)
Brings up an internal confirmation dialog panel. The dialog
 is a information-message dialog titled ""Message"".

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the object to display


"
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message, String title, int messageType)",static void,Brings up an internal dialog panel that displays a message using a default icon determined by the messageType parameter.,"

showInternalMessageDialog
public static void showInternalMessageDialog(Component parentComponent,
                                             Object message,
                                             String title,
                                             int messageType)
Brings up an internal dialog panel that displays a message
 using a default icon determined by the messageType
 parameter.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
title - the title string for the dialog
messageType - the type of message to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE


"
JOptionPane,"showInternalMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)",static void,"Brings up an internal dialog panel displaying a message, specifying all parameters.","

showInternalMessageDialog
public static void showInternalMessageDialog(Component parentComponent,
                                             Object message,
                                             String title,
                                             int messageType,
                                             Icon icon)
Brings up an internal dialog panel displaying a message,
 specifying all parameters.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
title - the title string for the dialog
messageType - the type of message to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - an icon to display in the dialog that helps the user
                  identify the kind of message that is being displayed


"
JOptionPane,"showInternalOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)",static int,"Brings up an internal dialog panel with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter.","

showInternalOptionDialog
public static int showInternalOptionDialog(Component parentComponent,
                                           Object message,
                                           String title,
                                           int optionType,
                                           int messageType,
                                           Icon icon,
                                           Object[] options,
                                           Object initialValue)
Brings up an internal dialog panel with a specified icon, where
 the initial choice is determined by the initialValue
 parameter and the number of choices is determined by the
 optionType parameter.
 
 If optionType is YES_NO_OPTION, or
 YES_NO_CANCEL_OPTION
 and the options parameter is null,
 then the options are supplied by the Look and Feel.
 
 The messageType parameter is primarily used to supply
 a default icon from the look and feel.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the object to display in the dialog; a
          Component object is rendered as a
          Component; a String
          object is rendered as a string. Other objects are
          converted to a String using the
          toString method
title - the title string for the dialog
optionType - an integer designating the options available
          on the dialog: YES_NO_OPTION,
          or YES_NO_CANCEL_OPTION
messageType - an integer designating the kind of message this is;
          primarily used to determine the icon from the
          pluggable Look and Feel: ERROR_MESSAGE,
          INFORMATION_MESSAGE,
          WARNING_MESSAGE, QUESTION_MESSAGE,
          or PLAIN_MESSAGE
icon - the icon to display in the dialog
options - an array of objects indicating the possible choices
          the user can make; if the objects are components, they
          are rendered properly; non-String
          objects are rendered using their toString
          methods; if this parameter is null,
          the options are determined by the Look and Feel
initialValue - the object that represents the default selection
          for the dialog; only meaningful if options
          is used; can be null
Returns:
an integer indicating the option chosen by the user,
          or CLOSED_OPTION if the user closed the Dialog


"
JOptionPane,"showMessageDialog(Component parentComponent, Object message)",static void,"Brings up an information-message dialog titled ""Message"".","

showMessageDialog
public static void showMessageDialog(Component parentComponent,
                                     Object message)
                              throws HeadlessException
Brings up an information-message dialog titled ""Message"".

Parameters:
parentComponent - determines the Frame in
          which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showMessageDialog(Component parentComponent, Object message, String title, int messageType)",static void,Brings up a dialog that displays a message using a default icon determined by the messageType parameter.,"

showMessageDialog
public static void showMessageDialog(Component parentComponent,
                                     Object message,
                                     String title,
                                     int messageType)
                              throws HeadlessException
Brings up a dialog that displays a message using a default
 icon determined by the messageType parameter.

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
title - the title string for the dialog
messageType - the type of message to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)",static void,"Brings up a dialog displaying a message, specifying all parameters.","

showMessageDialog
public static void showMessageDialog(Component parentComponent,
                                     Object message,
                                     String title,
                                     int messageType,
                                     Icon icon)
                              throws HeadlessException
Brings up a dialog displaying a message, specifying all parameters.

Parameters:
parentComponent - determines the Frame in which the
                  dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
title - the title string for the dialog
messageType - the type of message to be displayed:
                  ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - an icon to display in the dialog that helps the user
                  identify the kind of message that is being displayed
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,"showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)",static int,"Brings up a dialog with a specified icon, where the initial choice is determined by the initialValue parameter and the number of choices is determined by the optionType parameter.","

showOptionDialog
public static int showOptionDialog(Component parentComponent,
                                   Object message,
                                   String title,
                                   int optionType,
                                   int messageType,
                                   Icon icon,
                                   Object[] options,
                                   Object initialValue)
                            throws HeadlessException
Brings up a dialog with a specified icon, where the initial
 choice is determined by the initialValue parameter and
 the number of choices is determined by the optionType
 parameter.
 
 If optionType is YES_NO_OPTION,
 or YES_NO_CANCEL_OPTION
 and the options parameter is null,
 then the options are
 supplied by the look and feel.
 
 The messageType parameter is primarily used to supply
 a default icon from the look and feel.

Parameters:
parentComponent - determines the Frame
                  in which the dialog is displayed;  if
                  null, or if the
                  parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
title - the title string for the dialog
optionType - an integer designating the options available on the
                  dialog: DEFAULT_OPTION,
                  YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
messageType - an integer designating the kind of message this is,
                  primarily used to determine the icon from the
                  pluggable Look and Feel: ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - the icon to display in the dialog
options - an array of objects indicating the possible choices
                  the user can make; if the objects are components, they
                  are rendered properly; non-String
                  objects are
                  rendered using their toString methods;
                  if this parameter is null,
                  the options are determined by the Look and Feel
initialValue - the object that represents the default selection
                  for the dialog; only meaningful if options
                  is used; can be null
Returns:
an integer indicating the option chosen by the user,
                  or CLOSED_OPTION if the user closed
                  the dialog
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
JOptionPane,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JPanel,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JPanel.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JPanel.
 For JPanels, the AccessibleContext takes the form of an
 AccessibleJPanel.
 A new AccessibleJPanel instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJPanel that serves as the
         AccessibleContext of this JPanel


"
JPanel,getUI(),PanelUI,Returns the look and feel (L&amp;F) object that renders this component.,"

getUI
public PanelUI getUI()
Returns the look and feel (L&amp;F) object that renders this component.

Returns:
the PanelUI object that renders this component
Since:
1.4


"
JPanel,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
""PanelUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JPanel,paramString(),protected String,Returns a string representation of this JPanel.,"

paramString
protected String paramString()
Returns a string representation of this JPanel. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JPanel.


"
JPanel,setUI(PanelUI ui),void,Sets the look and feel (L&F) object that renders this component.,"

setUI
public void setUI(PanelUI ui)
Sets the look and feel (L&F) object that renders this component.

Parameters:
ui - the PanelUI L&F object
Since:
1.4
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JPanel,updateUI(),void,Resets the UI property with a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property with a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JPasswordField,copy(),void,"Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep.","

copy
public void copy()
Invokes provideErrorFeedback on the current
 look and feel, which typically initiates an error beep.
 The normal behavior of transferring the
 currently selected range in the associated text model
 to the system clipboard, and leaving the contents from
 the model, is not acceptable for a password field.

Overrides:
copy in class JTextComponent
See Also:
Toolkit.getSystemClipboard(), 
Clipboard


"
JPasswordField,cut(),void,"Invokes provideErrorFeedback on the current look and feel, which typically initiates an error beep.","

cut
public void cut()
Invokes provideErrorFeedback on the current
 look and feel, which typically initiates an error beep.
 The normal behavior of transferring the
 currently selected range in the associated text model
 to the system clipboard, and removing the contents from
 the model, is not acceptable for a password field.

Overrides:
cut in class JTextComponent
See Also:
Toolkit.getSystemClipboard(), 
Clipboard


"
JPasswordField,echoCharIsSet(),boolean,Returns true if this JPasswordField has a character set for echoing.,"

echoCharIsSet
public boolean echoCharIsSet()
Returns true if this JPasswordField has a character
 set for echoing.  A character is considered to be set if the echo
 character is not 0.

Returns:
true if a character is set for echoing
See Also:
setEchoChar(char), 
getEchoChar()


"
JPasswordField,getAccessibleContext(),AccessibleContext,Returns the AccessibleContext associated with this JPasswordField.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Returns the AccessibleContext associated with this
 JPasswordField. For password fields, the
 AccessibleContext takes the form of an
 AccessibleJPasswordField.
 A new AccessibleJPasswordField instance is created
 if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JTextField
Returns:
an AccessibleJPasswordField that serves as the
         AccessibleContext of this
         JPasswordField


"
JPasswordField,getEchoChar(),char,Returns the character to be used for echoing.,"

getEchoChar
public char getEchoChar()
Returns the character to be used for echoing.  The default is '*'.
 The default may be different depending on the currently running Look
 and Feel. For example, Metal/Ocean's default is a bullet character.

Returns:
the echo character, 0 if unset
See Also:
setEchoChar(char), 
echoCharIsSet()


"
JPasswordField,getPassword(),char[],Returns the text contained in this TextComponent.,"

getPassword
public char[] getPassword()
Returns the text contained in this TextComponent.
 If the underlying document is null, will give a
 NullPointerException.  For stronger
 security, it is recommended that the returned character array be
 cleared after use by setting each character to zero.

Returns:
the text


"
JPasswordField,getText(),String,"Deprecated. As of Java 2 platform v1.2, replaced by getPassword.","

getText
@Deprecated
public String getText()
Deprecated. As of Java 2 platform v1.2,
 replaced by getPassword.
Returns the text contained in this TextComponent.
 If the underlying document is null, will give a
 NullPointerException.
 
 For security reasons, this method is deprecated.  Use the
     * getPassword method instead.

Overrides:
getText in class JTextComponent
Returns:
the text
See Also:
JTextComponent.setText(java.lang.String)


"
JPasswordField,"getText(int offs, int len)",String,"Deprecated. As of Java 2 platform v1.2, replaced by getPassword.","

getText
@Deprecated
public String getText(int offs,
                                  int len)
                           throws BadLocationException
Deprecated. As of Java 2 platform v1.2,
 replaced by getPassword.
Fetches a portion of the text represented by the
 component.  Returns an empty string if length is 0.
 
 For security reasons, this method is deprecated.  Use the
 getPassword method instead.

Overrides:
getText in class JTextComponent
Parameters:
offs - the offset >= 0
len - the length >= 0
Returns:
the text
Throws:
BadLocationException - if the offset or length are invalid


"
JPasswordField,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JTextField
Returns:
the string ""PasswordFieldUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JPasswordField,paramString(),protected String,Returns a string representation of this JPasswordField.,"

paramString
protected String paramString()
Returns a string representation of this JPasswordField.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JTextField
Returns:
a string representation of this JPasswordField


"
JPasswordField,setEchoChar(char c),void,Sets the echo character for this JPasswordField.,"

setEchoChar
public void setEchoChar(char c)
Sets the echo character for this JPasswordField.
 Note that this is largely a suggestion, since the
 view that gets installed can use whatever graphic techniques
 it desires to represent the field.  Setting a value of 0 indicates
 that you wish to see the text as it is typed, similar to
 the behavior of a standard JTextField.

Parameters:
c - the echo character to display
See Also:
echoCharIsSet(), 
getEchoChar()


"
JPasswordField,setText(String t),void,Sets the text of this TextComponent to the specified text.,"

setText
public void setText(String t)
Sets the text of this TextComponent
 to the specified text.  If the text is null
 or empty, has the effect of simply deleting the old text.
 When text has been inserted, the resulting caret location
 is determined by the implementation of the caret class.

 
 Note that text is not a bound property, so no PropertyChangeEvent
  is fired when it changes. To listen for changes to the text,
 use DocumentListener.

Overrides:
setText in class JTextComponent
Parameters:
t - the new text to be set
See Also:
getText(), 
DefaultCaret


"
JPasswordField,updateUI(),void,Reloads the pluggable UI.,"

updateUI
public void updateUI()
Reloads the pluggable UI.  The key used to fetch the
 new interface is getUIClassID().  The type of
 the UI is TextUI.  invalidate
 is called after setting the UI.

Overrides:
updateUI in class JTextComponent
Since:
1.6
See Also:
JComponent.setUI(javax.swing.plaf.ComponentUI), 
UIManager.getLookAndFeel(), 
UIManager.getUI(javax.swing.JComponent)


"
JPopupMenu,add(Action a),JMenuItem,Appends a new menu item to the end of the menu which dispatches the specified Action object.,"

add
public JMenuItem add(Action a)
Appends a new menu item to the end of the menu which
 dispatches the specified Action object.

Parameters:
a - the Action to add to the menu
Returns:
the new menu item
See Also:
Action


"
JPopupMenu,add(JMenuItem menuItem),JMenuItem,Appends the specified menu item to the end of this menu.,"

add
public JMenuItem add(JMenuItem menuItem)
Appends the specified menu item to the end of this menu.

Parameters:
menuItem - the JMenuItem to add
Returns:
the JMenuItem added


"
JPopupMenu,add(String s),JMenuItem,Creates a new menu item with the specified text and appends it to the end of this menu.,"

add
public JMenuItem add(String s)
Creates a new menu item with the specified text and appends
 it to the end of this menu.

Parameters:
s - the string for the menu item to be added


"
JPopupMenu,addMenuKeyListener(MenuKeyListener l),void,Adds a MenuKeyListener to the popup menu.,"

addMenuKeyListener
public void addMenuKeyListener(MenuKeyListener l)
Adds a MenuKeyListener to the popup menu.

Parameters:
l - the MenuKeyListener to be added
Since:
1.5


"
JPopupMenu,addPopupMenuListener(PopupMenuListener l),void,Adds a PopupMenu listener.,"

addPopupMenuListener
public void addPopupMenuListener(PopupMenuListener l)
Adds a PopupMenu listener.

Parameters:
l - the PopupMenuListener to add


"
JPopupMenu,addSeparator(),void,Appends a new separator at the end of the menu.,"

addSeparator
public void addSeparator()
Appends a new separator at the end of the menu.

"
JPopupMenu,createActionChangeListener(JMenuItem b),protected PropertyChangeListener,Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur.,"

createActionChangeListener
protected PropertyChangeListener createActionChangeListener(JMenuItem b)
Returns a properly configured PropertyChangeListener
 which updates the control as changes to the Action occur.

"
JPopupMenu,createActionComponent(Action a),protected JMenuItem,Factory method which creates the JMenuItem for Actions added to the JPopupMenu.,"

createActionComponent
protected JMenuItem createActionComponent(Action a)
Factory method which creates the JMenuItem for
 Actions added to the JPopupMenu.

Parameters:
a - the Action for the menu item to be added
Returns:
the new menu item
Since:
1.3
See Also:
Action


"
JPopupMenu,firePopupMenuCanceled(),protected void,Notifies PopupMenuListeners that this popup menu is cancelled.,"

firePopupMenuCanceled
protected void firePopupMenuCanceled()
Notifies PopupMenuListeners that this popup menu is
 cancelled.

"
JPopupMenu,firePopupMenuWillBecomeInvisible(),protected void,Notifies PopupMenuListeners that this popup menu will become invisible.,"

firePopupMenuWillBecomeInvisible
protected void firePopupMenuWillBecomeInvisible()
Notifies PopupMenuListeners that this popup menu will
 become invisible.

"
JPopupMenu,firePopupMenuWillBecomeVisible(),protected void,Notifies PopupMenuListeners that this popup menu will become visible.,"

firePopupMenuWillBecomeVisible
protected void firePopupMenuWillBecomeVisible()
Notifies PopupMenuListeners that this popup menu will
 become visible.

"
JPopupMenu,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JPopupMenu.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JPopupMenu.
 For JPopupMenus, the AccessibleContext takes the form of an
 AccessibleJPopupMenu.
 A new AccessibleJPopupMenu instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJPopupMenu that serves as the
         AccessibleContext of this JPopupMenu


"
JPopupMenu,getComponent(),Component,Returns this JPopupMenu component.,"

getComponent
public Component getComponent()
Returns this JPopupMenu component.

Specified by:
getComponent in interface MenuElement
Returns:
this JPopupMenu object
See Also:
MenuElement.getComponent()


"
JPopupMenu,getComponentAtIndex(int i),Component,Deprecated. replaced by Container.getComponent(int),"

getComponentAtIndex
@Deprecated
public Component getComponentAtIndex(int i)
Deprecated. replaced by Container.getComponent(int)
Returns the component at the specified index.

Parameters:
i - the index of the component, where 0 is the first
Returns:
the Component at that index


"
JPopupMenu,getComponentIndex(Component c),int,Returns the index of the specified component.,"

getComponentIndex
public int getComponentIndex(Component c)
Returns the index of the specified component.

Parameters:
c - the Component to find
Returns:
the index of the component, where 0 is the first;
         or -1 if the component is not found


"
JPopupMenu,getDefaultLightWeightPopupEnabled(),static boolean,"Gets the defaultLightWeightPopupEnabled property, which by default is true.","

getDefaultLightWeightPopupEnabled
public static boolean getDefaultLightWeightPopupEnabled()
Gets the defaultLightWeightPopupEnabled property,
  which by default is true.

Returns:
the value of the defaultLightWeightPopupEnabled
          property
See Also:
setDefaultLightWeightPopupEnabled(boolean)


"
JPopupMenu,getInvoker(),Component,Returns the component which is the 'invoker' of this popup menu.,"

getInvoker
public Component getInvoker()
Returns the component which is the 'invoker' of this
 popup menu.

Returns:
the Component in which the popup menu is displayed


"
JPopupMenu,getLabel(),String,Returns the popup menu's label,"

getLabel
public String getLabel()
Returns the popup menu's label

Returns:
a string containing the popup menu's label
See Also:
setLabel(java.lang.String)


"
JPopupMenu,getMargin(),Insets,"Returns the margin, in pixels, between the popup menu's border and its containers.","

getMargin
public Insets getMargin()
Returns the margin, in pixels, between the popup menu's border and
 its containers.

Returns:
an Insets object containing the margin values.


"
JPopupMenu,getMenuKeyListeners(),MenuKeyListener[],Returns an array of all the MenuKeyListeners added to this JPopupMenu with addMenuKeyListener().,"

getMenuKeyListeners
public MenuKeyListener[] getMenuKeyListeners()
Returns an array of all the MenuKeyListeners added
 to this JPopupMenu with addMenuKeyListener().

Returns:
all of the MenuKeyListeners added or an empty
         array if no listeners have been added
Since:
1.5


"
JPopupMenu,getPopupMenuListeners(),PopupMenuListener[],Returns an array of all the PopupMenuListeners added to this JMenuItem with addPopupMenuListener().,"

getPopupMenuListeners
public PopupMenuListener[] getPopupMenuListeners()
Returns an array of all the PopupMenuListeners added
 to this JMenuItem with addPopupMenuListener().

Returns:
all of the PopupMenuListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JPopupMenu,getSelectionModel(),SingleSelectionModel,Returns the model object that handles single selections.,"

getSelectionModel
public SingleSelectionModel getSelectionModel()
Returns the model object that handles single selections.

Returns:
the selectionModel property
See Also:
SingleSelectionModel


"
JPopupMenu,getSubElements(),MenuElement[],Returns an array of MenuElements containing the submenu for this menu component.,"

getSubElements
public MenuElement[] getSubElements()
Returns an array of MenuElements containing the submenu
 for this menu component.  It will only return items conforming to
 the JMenuElement interface.
 If popup menu is null returns
 an empty array.  This method is required to conform to the
 MenuElement interface.

Specified by:
getSubElements in interface MenuElement
Returns:
an array of MenuElement objects
See Also:
MenuElement.getSubElements()


"
JPopupMenu,getUI(),PopupMenuUI,Returns the look and feel (L&F) object that renders this component.,"

getUI
public PopupMenuUI getUI()
Returns the look and feel (L&F) object that renders this component.

Returns:
the PopupMenuUI object that renders this component


"
JPopupMenu,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""PopupMenuUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JPopupMenu,"insert(Action a, int index)",void,Inserts a menu item for the specified Action object at a given position.,"

insert
public void insert(Action a,
                   int index)
Inserts a menu item for the specified Action object at
 a given position.

Parameters:
a - the Action object to insert
index - specifies the position at which to insert the
                   Action, where 0 is the first
Throws:
IllegalArgumentException - if index < 0
See Also:
Action


"
JPopupMenu,"insert(Component component, int index)",void,Inserts the specified component into the menu at a given position.,"

insert
public void insert(Component component,
                   int index)
Inserts the specified component into the menu at a given
 position.

Parameters:
component - the Component to insert
index - specifies the position at which
                   to insert the component, where 0 is the first
Throws:
IllegalArgumentException - if index < 0


"
JPopupMenu,isBorderPainted(),boolean,Checks whether the border should be painted.,"

isBorderPainted
public boolean isBorderPainted()
Checks whether the border should be painted.

Returns:
true if the border is painted, false otherwise
See Also:
setBorderPainted(boolean)


"
JPopupMenu,isLightWeightPopupEnabled(),boolean,Gets the lightWeightPopupEnabled property.,"

isLightWeightPopupEnabled
public boolean isLightWeightPopupEnabled()
Gets the lightWeightPopupEnabled property.

Returns:
the value of the lightWeightPopupEnabled property
See Also:
setLightWeightPopupEnabled(boolean)


"
JPopupMenu,isPopupTrigger(MouseEvent e),boolean,Returns true if the MouseEvent is considered a popup trigger by the JPopupMenu's currently installed UI.,"

isPopupTrigger
public boolean isPopupTrigger(MouseEvent e)
Returns true if the MouseEvent is considered a popup trigger
 by the JPopupMenu's currently installed UI.

Returns:
true if the mouse event is a popup trigger
Since:
1.3


"
JPopupMenu,isVisible(),boolean,Returns true if the popup menu is visible (currently being displayed).,"

isVisible
public boolean isVisible()
Returns true if the popup menu is visible (currently
 being displayed).

Overrides:
isVisible in class Component
Returns:
true if the component is visible,
 false otherwise
See Also:
Component.setVisible(boolean)


"
JPopupMenu,menuSelectionChanged(boolean isIncluded),void,Messaged when the menubar selection changes to activate or deactivate this menu.,"

menuSelectionChanged
public void menuSelectionChanged(boolean isIncluded)
Messaged when the menubar selection changes to activate or
 deactivate this menu. This implements the
 javax.swing.MenuElement interface.
 Overrides MenuElement.menuSelectionChanged.

Specified by:
menuSelectionChanged in interface MenuElement
Parameters:
isIncluded - true if this menu is active, false if
        it is not
See Also:
MenuElement.menuSelectionChanged(boolean)


"
JPopupMenu,pack(),void,Lays out the container so that it uses the minimum space needed to display its contents.,"

pack
public void pack()
Lays out the container so that it uses the minimum space
 needed to display its contents.

"
JPopupMenu,paintBorder(Graphics g),protected void,Paints the popup menu's border if the borderPainted property is true.,"

paintBorder
protected void paintBorder(Graphics g)
Paints the popup menu's border if the borderPainted
 property is true.

Overrides:
paintBorder in class JComponent
Parameters:
g - the Graphics object
See Also:
JComponent.paint(java.awt.Graphics), 
JComponent.setBorder(javax.swing.border.Border)


"
JPopupMenu,paramString(),protected String,Returns a string representation of this JPopupMenu.,"

paramString
protected String paramString()
Returns a string representation of this JPopupMenu.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JPopupMenu.


"
JPopupMenu,processFocusEvent(FocusEvent evt),protected void,Processes focus events occurring on this component by dispatching them to any registered FocusListener objects.,"

processFocusEvent
protected void processFocusEvent(FocusEvent evt)
Description copied from class: Component
Processes focus events occurring on this component by
 dispatching them to any registered
 FocusListener objects.
 
 This method is not called unless focus events are
 enabled for this component. Focus events are enabled
 when one of the following occurs:
 
A FocusListener object is registered
 via addFocusListener.
 Focus events are enabled via enableEvents.
 

 If focus events are enabled for a Component,
 the current KeyboardFocusManager determines
 whether or not a focus event should be dispatched to
 registered FocusListener objects.  If the
 events are to be dispatched, the KeyboardFocusManager
 calls the Component's dispatchEvent
 method, which results in a call to the Component's
 processFocusEvent method.
 
 If focus events are enabled for a Component, calling
 the Component's dispatchEvent method
 with a FocusEvent as the argument will result in a
 call to the Component's processFocusEvent
 method regardless of the current KeyboardFocusManager.

 Note that if the event parameter is null
 the behavior is unspecified and may result in an
 exception.

Overrides:
processFocusEvent in class Component
Parameters:
evt - the focus event
See Also:
FocusEvent, 
FocusListener, 
KeyboardFocusManager, 
Component.addFocusListener(java.awt.event.FocusListener), 
Component.enableEvents(long), 
Component.dispatchEvent(java.awt.AWTEvent)


"
JPopupMenu,processKeyEvent(KeyEvent evt),protected void,Processes key stroke events such as mnemonics and accelerators.,"

processKeyEvent
protected void processKeyEvent(KeyEvent evt)
Processes key stroke events such as mnemonics and accelerators.

Overrides:
processKeyEvent in class JComponent
Parameters:
evt - the key event to be processed
See Also:
KeyEvent, 
KeyListener, 
KeyboardFocusManager, 
DefaultKeyboardFocusManager, 
Component.processEvent(java.awt.AWTEvent), 
Component.dispatchEvent(java.awt.AWTEvent), 
Component.addKeyListener(java.awt.event.KeyListener), 
Component.enableEvents(long), 
Component.isShowing()


"
JPopupMenu,"processKeyEvent(KeyEvent e, MenuElement[] path, MenuSelectionManager manager)",void,"Processes a key event forwarded from the MenuSelectionManager and changes the menu selection, if necessary, by using MenuSelectionManager's API.","

processKeyEvent
public void processKeyEvent(KeyEvent e,
                            MenuElement[] path,
                            MenuSelectionManager manager)
Processes a key event forwarded from the
 MenuSelectionManager and changes the menu selection,
 if necessary, by using MenuSelectionManager's API.
 
 Note: you do not have to forward the event to sub-components.
 This is done automatically by the MenuSelectionManager.

Specified by:
processKeyEvent in interface MenuElement
Parameters:
e - a KeyEvent
path - the MenuElement path array
manager - the MenuSelectionManager


"
JPopupMenu,"processMouseEvent(MouseEvent event, MenuElement[] path, MenuSelectionManager manager)",void,"This method is required to conform to the MenuElement interface, but it not implemented.","

processMouseEvent
public void processMouseEvent(MouseEvent event,
                              MenuElement[] path,
                              MenuSelectionManager manager)
This method is required to conform to the
 MenuElement interface, but it not implemented.

Specified by:
processMouseEvent in interface MenuElement
See Also:
MenuElement.processMouseEvent(MouseEvent, MenuElement[], MenuSelectionManager)


"
JPopupMenu,remove(int pos),void,Removes the component at the specified index from this popup menu.,"

remove
public void remove(int pos)
Removes the component at the specified index from this popup menu.

Overrides:
remove in class Container
Parameters:
pos - the position of the item to be removed
Throws:
IllegalArgumentException - if the value of
                          pos < 0, or if the value of
                          pos is greater than the
                          number of items
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.getComponentCount()


"
JPopupMenu,removeMenuKeyListener(MenuKeyListener l),void,Removes a MenuKeyListener from the popup menu.,"

removeMenuKeyListener
public void removeMenuKeyListener(MenuKeyListener l)
Removes a MenuKeyListener from the popup menu.

Parameters:
l - the MenuKeyListener to be removed
Since:
1.5


"
JPopupMenu,removePopupMenuListener(PopupMenuListener l),void,Removes a PopupMenu listener.,"

removePopupMenuListener
public void removePopupMenuListener(PopupMenuListener l)
Removes a PopupMenu listener.

Parameters:
l - the PopupMenuListener to remove


"
JPopupMenu,setBorderPainted(boolean b),void,Sets whether the border should be painted.,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets whether the border should be painted.

Parameters:
b - if true, the border is painted.
See Also:
isBorderPainted()


"
JPopupMenu,setDefaultLightWeightPopupEnabled(boolean aFlag),static void,Sets the default value of the lightWeightPopupEnabled property.,"

setDefaultLightWeightPopupEnabled
public static void setDefaultLightWeightPopupEnabled(boolean aFlag)
Sets the default value of the lightWeightPopupEnabled
  property.

Parameters:
aFlag - true if popups can be lightweight,
               otherwise false
See Also:
getDefaultLightWeightPopupEnabled(), 
setLightWeightPopupEnabled(boolean)


"
JPopupMenu,setInvoker(Component invoker),void,Sets the invoker of this popup menu -- the component in which the popup menu menu is to be displayed.,"

setInvoker
public void setInvoker(Component invoker)
Sets the invoker of this popup menu -- the component in which
 the popup menu menu is to be displayed.

Parameters:
invoker - the Component in which the popup
          menu is displayed


"
JPopupMenu,setLabel(String label),void,Sets the popup menu's label.,"

setLabel
public void setLabel(String label)
Sets the popup menu's label.  Different look and feels may choose
 to display or not display this.

Parameters:
label - a string specifying the label for the popup menu
See Also:
setLabel(java.lang.String)


"
JPopupMenu,setLightWeightPopupEnabled(boolean aFlag),void,"Sets the value of the lightWeightPopupEnabled property, which by default is true.","

setLightWeightPopupEnabled
public void setLightWeightPopupEnabled(boolean aFlag)
Sets the value of the lightWeightPopupEnabled property,
 which by default is true.
 By default, when a look and feel displays a popup,
 it can choose to
 use a lightweight (all-Java) popup.
 Lightweight popup windows are more efficient than heavyweight
 (native peer) windows,
 but lightweight and heavyweight components do not mix well in a GUI.
 If your application mixes lightweight and heavyweight components,
 you should disable lightweight popups.
 Some look and feels might always use heavyweight popups,
 no matter what the value of this property.

Parameters:
aFlag - false to disable lightweight popups
See Also:
isLightWeightPopupEnabled()


"
JPopupMenu,"setLocation(int x, int y)",void,"Sets the location of the upper left corner of the popup menu using x, y coordinates.","

setLocation
public void setLocation(int x,
                        int y)
Sets the location of the upper left corner of the
 popup menu using x, y coordinates.
 
 The method changes the geometry-related data. Therefore,
 the native windowing system may ignore such requests, or it may modify
 the requested data, so that the JPopupMenu object is placed and sized
 in a way that corresponds closely to the desktop settings.

Overrides:
setLocation in class Component
Parameters:
x - the x coordinate of the popup's new position
          in the screen's coordinate space
y - the y coordinate of the popup's new position
          in the screen's coordinate space
See Also:
Component.getLocation(), 
Component.setBounds(int, int, int, int), 
Component.invalidate()


"
JPopupMenu,setPopupSize(Dimension d),void,Sets the size of the Popup window using a Dimension object.,"

setPopupSize
public void setPopupSize(Dimension d)
Sets the size of the Popup window using a Dimension object.
 This is equivalent to setPreferredSize(d).

Parameters:
d - the Dimension specifying the new size
 of this component.


"
JPopupMenu,"setPopupSize(int width, int height)",void,Sets the size of the Popup window to the specified width and height.,"

setPopupSize
public void setPopupSize(int width,
                         int height)
Sets the size of the Popup window to the specified width and
 height. This is equivalent to
  setPreferredSize(new Dimension(width, height)).

Parameters:
width - the new width of the Popup in pixels
height - the new height of the Popup in pixels


"
JPopupMenu,setSelected(Component sel),void,"Sets the currently selected component, This will result in a change to the selection model.","

setSelected
public void setSelected(Component sel)
Sets the currently selected component,  This will result
 in a change to the selection model.

Parameters:
sel - the Component to select


"
JPopupMenu,setSelectionModel(SingleSelectionModel model),void,Sets the model object to handle single selections.,"

setSelectionModel
public void setSelectionModel(SingleSelectionModel model)
Sets the model object to handle single selections.

Parameters:
model - the new SingleSelectionModel
See Also:
SingleSelectionModel


"
JPopupMenu,setUI(PopupMenuUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(PopupMenuUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the new PopupMenuUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JPopupMenu,setVisible(boolean b),void,Sets the visibility of the popup menu.,"

setVisible
public void setVisible(boolean b)
Sets the visibility of the popup menu.

Overrides:
setVisible in class JComponent
Parameters:
b - true to make the popup visible, or false to
          hide it
See Also:
Component.isVisible(), 
Component.invalidate()


"
JPopupMenu,"show(Component invoker, int x, int y)",void,"Displays the popup menu at the position x,y in the coordinate space of the component invoker.","

show
public void show(Component invoker,
                 int x,
                 int y)
Displays the popup menu at the position x,y in the coordinate
 space of the component invoker.

Parameters:
invoker - the component in whose space the popup menu is to appear
x - the x coordinate in invoker's coordinate space at which
 the popup menu is to be displayed
y - the y coordinate in invoker's coordinate space at which
 the popup menu is to be displayed


"
JPopupMenu,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JPopupMenu.Separator,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JSeparator
Returns:
the string ""PopupMenuSeparatorUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JProgressBar,addChangeListener(ChangeListener l),void,Adds the specified ChangeListener to the progress bar.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds the specified ChangeListener to the progress bar.

Parameters:
l - the ChangeListener to add


"
JProgressBar,createChangeListener(),protected ChangeListener,Subclasses that want to handle change events from the model differently can override this to return an instance of a custom ChangeListener implementation.,"

createChangeListener
protected ChangeListener createChangeListener()
Subclasses that want to handle change events
 from the model differently
 can override this to return
 an instance of a custom ChangeListener implementation.
 The default ChangeListener simply calls the
 fireStateChanged method to forward ChangeEvents
 to the ChangeListeners that have been added directly to the
 progress bar.

See Also:
changeListener, 
fireStateChanged(), 
ChangeListener, 
BoundedRangeModel


"
JProgressBar,fireStateChanged(),protected void,"Send a ChangeEvent, whose source is this JProgressBar, to all ChangeListeners that have registered interest in ChangeEvents.","

fireStateChanged
protected void fireStateChanged()
Send a ChangeEvent, whose source is this JProgressBar, to
 all ChangeListeners that have registered interest in
 ChangeEvents.
 This method is called each time a ChangeEvent is received from
 the model.
 

 The event instance is created if necessary, and stored in
 changeEvent.

See Also:
addChangeListener(javax.swing.event.ChangeListener), 
EventListenerList


"
JProgressBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JProgressBar.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JProgressBar. For progress bars, the
 AccessibleContext takes the form of an
 AccessibleJProgressBar.
 A new AccessibleJProgressBar instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJProgressBar that serves as the
         AccessibleContext of this JProgressBar


"
JProgressBar,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this progress bar with addChangeListener.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this progress bar with addChangeListener.

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JProgressBar,getMaximum(),int,Returns the progress bar's maximum value from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the progress bar's maximum value
 from the BoundedRangeModel.

Returns:
the progress bar's maximum value
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
JProgressBar,getMinimum(),int,Returns the progress bar's minimum value from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the progress bar's minimum value
 from the BoundedRangeModel.

Returns:
the progress bar's minimum value
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
JProgressBar,getModel(),BoundedRangeModel,Returns the data model used by this progress bar.,"

getModel
public BoundedRangeModel getModel()
Returns the data model used by this progress bar.

Returns:
the BoundedRangeModel currently in use
See Also:
setModel(javax.swing.BoundedRangeModel), 
BoundedRangeModel


"
JProgressBar,getOrientation(),int,"Returns SwingConstants.VERTICAL or SwingConstants.HORIZONTAL, depending on the orientation of the progress bar.","

getOrientation
public int getOrientation()
Returns SwingConstants.VERTICAL or
 SwingConstants.HORIZONTAL, depending on the orientation
 of the progress bar. The default orientation is
 SwingConstants.HORIZONTAL.

Returns:
HORIZONTAL or VERTICAL
See Also:
setOrientation(int)


"
JProgressBar,getPercentComplete(),double,Returns the percent complete for the progress bar.,"

getPercentComplete
public double getPercentComplete()
Returns the percent complete for the progress bar.
 Note that this number is between 0.0 and 1.0.

Returns:
the percent complete for this progress bar


"
JProgressBar,getString(),String,Returns a String representation of the current progress.,"

getString
public String getString()
Returns a String representation of the current progress.
 By default, this returns a simple percentage String based on
 the value returned from getPercentComplete.  An example
 would be the ""42%"".  You can change this by calling setString.

Returns:
the value of the progress string, or a simple percentage string
         if the progress string is null
See Also:
setString(java.lang.String)


"
JProgressBar,getUI(),ProgressBarUI,Returns the look-and-feel object that renders this component.,"

getUI
public ProgressBarUI getUI()
Returns the look-and-feel object that renders this component.

Returns:
the ProgressBarUI object that renders this component


"
JProgressBar,getUIClassID(),String,Returns the name of the look-and-feel class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the look-and-feel class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ProgressBarUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JProgressBar,getValue(),int,Returns the progress bar's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the progress bar's current value
 from the BoundedRangeModel.
 The value is always between the
 minimum and maximum values, inclusive.

Returns:
the current value of the progress bar
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
JProgressBar,isBorderPainted(),boolean,Returns the borderPainted property.,"

isBorderPainted
public boolean isBorderPainted()
Returns the borderPainted property.

Returns:
the value of the borderPainted property
See Also:
setBorderPainted(boolean)


"
JProgressBar,isIndeterminate(),boolean,Returns the value of the indeterminate property.,"

isIndeterminate
public boolean isIndeterminate()
Returns the value of the indeterminate property.

Returns:
the value of the indeterminate property
Since:
1.4
See Also:
setIndeterminate(boolean)


"
JProgressBar,isStringPainted(),boolean,Returns the value of the stringPainted property.,"

isStringPainted
public boolean isStringPainted()
Returns the value of the stringPainted property.

Returns:
the value of the stringPainted property
See Also:
setStringPainted(boolean), 
setString(java.lang.String)


"
JProgressBar,paintBorder(Graphics g),protected void,Paints the progress bar's border if the borderPainted property is true.,"

paintBorder
protected void paintBorder(Graphics g)
Paints the progress bar's border if the borderPainted
 property is true.

Overrides:
paintBorder in class JComponent
Parameters:
g - the Graphics context within which to paint the border
See Also:
JComponent.paint(java.awt.Graphics), 
JComponent.setBorder(javax.swing.border.Border), 
isBorderPainted(), 
setBorderPainted(boolean)


"
JProgressBar,paramString(),protected String,Returns a string representation of this JProgressBar.,"

paramString
protected String paramString()
Returns a string representation of this JProgressBar.
 This method is intended to be used only for debugging purposes. The
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JProgressBar


"
JProgressBar,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the progress bar.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the progress bar.

Parameters:
l - the ChangeListener to remove


"
JProgressBar,setBorderPainted(boolean b),void,"Sets the borderPainted property, which is true if the progress bar should paint its border.","

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property, which is
 true if the progress bar should paint its border.
 The default value for this property is true.
 Some look and feels might not implement painted borders;
 they will ignore this property.

Parameters:
b - true if the progress bar
                  should paint its border;
                  otherwise, false
See Also:
isBorderPainted()


"
JProgressBar,setIndeterminate(boolean newValue),void,"Sets the indeterminate property of the progress bar, which determines whether the progress bar is in determinate or indeterminate mode.","

setIndeterminate
public void setIndeterminate(boolean newValue)
Sets the indeterminate property of the progress bar,
 which determines whether the progress bar is in determinate
 or indeterminate mode.
 An indeterminate progress bar continuously displays animation
 indicating that an operation of unknown length is occurring.
 By default, this property is false.
 Some look and feels might not support indeterminate progress bars;
 they will ignore this property.

 

 See
 How to Monitor Progress
 for examples of using indeterminate progress bars.

Parameters:
newValue - true if the progress bar
                  should change to indeterminate mode;
                  false if it should revert to normal.
Since:
1.4
See Also:
isIndeterminate(), 
BasicProgressBarUI


"
JProgressBar,setMaximum(int n),void,Sets the progress bar's maximum value (stored in the progress bar's data model) to n.,"

setMaximum
public void setMaximum(int n)
Sets the progress bar's maximum value
 (stored in the progress bar's data model) to n.
 
 The underlying BoundedRangeModel handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the maximum value is different from the previous maximum,
 all change listeners are notified.

Parameters:
n - the new maximum
See Also:
getMaximum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMaximum(int)


"
JProgressBar,setMinimum(int n),void,Sets the progress bar's minimum value (stored in the progress bar's data model) to n.,"

setMinimum
public void setMinimum(int n)
Sets the progress bar's minimum value
 (stored in the progress bar's data model) to n.
 
 The data model (a BoundedRangeModel instance)
 handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the minimum value is different from the previous minimum,
 all change listeners are notified.

Parameters:
n - the new minimum
See Also:
getMinimum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMinimum(int)


"
JProgressBar,setModel(BoundedRangeModel newModel),void,Sets the data model used by the JProgressBar.,"

setModel
public void setModel(BoundedRangeModel newModel)
Sets the data model used by the JProgressBar.
 Note that the BoundedRangeModel's extent is not used,
 and is set to 0.

Parameters:
newModel - the BoundedRangeModel to use


"
JProgressBar,setOrientation(int newOrientation),void,"Sets the progress bar's orientation to newOrientation, which must be SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.","

setOrientation
public void setOrientation(int newOrientation)
Sets the progress bar's orientation to newOrientation,
 which must be SwingConstants.VERTICAL or
 SwingConstants.HORIZONTAL. The default orientation
 is SwingConstants.HORIZONTAL.

Parameters:
newOrientation - HORIZONTAL or VERTICAL
Throws:
IllegalArgumentException - if newOrientation
                                              is an illegal value
See Also:
getOrientation()


"
JProgressBar,setString(String s),void,Sets the value of the progress string.,"

setString
public void setString(String s)
Sets the value of the progress string. By default,
 this string is null, implying the built-in behavior of
 using a simple percent string.
 If you have provided a custom progress string and want to revert to
 the built-in behavior, set the string back to null.
 
 The progress string is painted only if
 the isStringPainted method returns true.

Parameters:
s - the value of the progress string
See Also:
getString(), 
setStringPainted(boolean), 
isStringPainted()


"
JProgressBar,setStringPainted(boolean b),void,"Sets the value of the stringPainted property, which determines whether the progress bar should render a progress string.","

setStringPainted
public void setStringPainted(boolean b)
Sets the value of the stringPainted property,
 which determines whether the progress bar
 should render a progress string.
 The default is false, meaning
 no string is painted.
 Some look and feels might not support progress strings
 or might support them only when the progress bar is in determinate mode.

Parameters:
b - true if the progress bar should render a string
See Also:
isStringPainted(), 
setString(java.lang.String)


"
JProgressBar,setUI(ProgressBarUI ui),void,Sets the look-and-feel object that renders this component.,"

setUI
public void setUI(ProgressBarUI ui)
Sets the look-and-feel object that renders this component.

Parameters:
ui - a ProgressBarUI object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JProgressBar,setValue(int n),void,Sets the progress bar's current value to n.,"

setValue
public void setValue(int n)
Sets the progress bar's current value to n.  This method
 forwards the new value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new value is different from the previous value,
 all change listeners are notified.

Parameters:
n - the new value
See Also:
getValue(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setValue(int)


"
JProgressBar,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JRadioButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRadioButton.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JRadioButton.
 For JRadioButtons, the AccessibleContext takes the form of an
 AccessibleJRadioButton.
 A new AccessibleJRadioButton instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JToggleButton
Returns:
an AccessibleJRadioButton that serves as the
         AccessibleContext of this JRadioButton


"
JRadioButton,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JToggleButton
Returns:
String ""RadioButtonUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JRadioButton,paramString(),protected String,Returns a string representation of this JRadioButton.,"

paramString
protected String paramString()
Returns a string representation of this JRadioButton. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JToggleButton
Returns:
a string representation of this JRadioButton.


"
JRadioButton,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JToggleButton
See Also:
JComponent.updateUI()


"
JRadioButtonMenuItem,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRadioButtonMenuItem.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JRadioButtonMenuItem.
 For JRadioButtonMenuItems, the AccessibleContext takes the form of an
 AccessibleJRadioButtonMenuItem.
 A new AccessibleJRadioButtonMenuItem instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JMenuItem
Returns:
an AccessibleJRadioButtonMenuItem that serves as the
         AccessibleContext of this JRadioButtonMenuItem


"
JRadioButtonMenuItem,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JMenuItem
Returns:
the string ""RadioButtonMenuItemUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JRadioButtonMenuItem,paramString(),protected String,Returns a string representation of this JRadioButtonMenuItem.,"

paramString
protected String paramString()
Returns a string representation of this
 JRadioButtonMenuItem.  This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JMenuItem
Returns:
a string representation of this
          JRadioButtonMenuItem


"
JRootPane,"addImpl(Component comp, Object constraints, int index)",protected void,Overridden to enforce the position of the glass component as the zero child.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Overridden to enforce the position of the glass component as
 the zero child.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
JRootPane,addNotify(),void,Notifies this component that it now has a parent component.,"

addNotify
public void addNotify()
Notifies this component that it now has a parent component.
 When this method is invoked, the chain of parent components is
 set up with KeyboardAction event listeners.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
addNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JRootPane,createContentPane(),protected Container,Called by the constructor methods to create the default contentPane.,"

createContentPane
protected Container createContentPane()
Called by the constructor methods to create the default
 contentPane.
 By default this method creates a new JComponent add sets a
 BorderLayout as its LayoutManager.

Returns:
the default contentPane


"
JRootPane,createGlassPane(),protected Component,Called by the constructor methods to create the default glassPane.,"

createGlassPane
protected Component createGlassPane()
Called by the constructor methods to create the default
 glassPane.
 By default this method creates a new JComponent
 with visibility set to false.

Returns:
the default glassPane


"
JRootPane,createLayeredPane(),protected JLayeredPane,Called by the constructor methods to create the default layeredPane.,"

createLayeredPane
protected JLayeredPane createLayeredPane()
Called by the constructor methods to create the default
 layeredPane.
 Bt default it creates a new JLayeredPane.

Returns:
the default layeredPane


"
JRootPane,createRootLayout(),protected LayoutManager,Called by the constructor methods to create the default layoutManager.,"

createRootLayout
protected LayoutManager createRootLayout()
Called by the constructor methods to create the default
 layoutManager.

Returns:
the default layoutManager.


"
JRootPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JRootPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JRootPane. For root panes, the
 AccessibleContext takes the form of an
 AccessibleJRootPane.
 A new AccessibleJRootPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJRootPane that serves as the
         AccessibleContext of this JRootPane


"
JRootPane,getContentPane(),Container,Returns the content pane -- the container that holds the components parented by the root pane.,"

getContentPane
public Container getContentPane()
Returns the content pane -- the container that holds the components
 parented by the root pane.

Returns:
the Container that holds the component-contents


"
JRootPane,getDefaultButton(),JButton,Returns the value of the defaultButton property.,"

getDefaultButton
public JButton getDefaultButton()
Returns the value of the defaultButton property.

Returns:
the JButton which is currently the default button
See Also:
setDefaultButton(javax.swing.JButton)


"
JRootPane,getGlassPane(),Component,Returns the current glass pane for this JRootPane.,"

getGlassPane
public Component getGlassPane()
Returns the current glass pane for this JRootPane.

Returns:
the current glass pane
See Also:
setGlassPane(java.awt.Component)


"
JRootPane,getJMenuBar(),JMenuBar,Returns the menu bar from the layered pane.,"

getJMenuBar
public JMenuBar getJMenuBar()
Returns the menu bar from the layered pane.

Returns:
the JMenuBar used in the pane


"
JRootPane,getLayeredPane(),JLayeredPane,Gets the layered pane used by the root pane.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Gets the layered pane used by the root pane. The layered pane
 typically holds a content pane and an optional JMenuBar.

Returns:
the JLayeredPane currently in use


"
JRootPane,getMenuBar(),JMenuBar,Deprecated. As of Swing version 1.0.3 replaced by getJMenuBar().,"

getMenuBar
@Deprecated
public JMenuBar getMenuBar()
Deprecated. As of Swing version 1.0.3
  replaced by getJMenuBar().
Returns the menu bar value.

Returns:
the JMenuBar used in the pane


"
JRootPane,getUI(),RootPaneUI,Returns the L&F object that renders this component.,"

getUI
public RootPaneUI getUI()
Returns the L&F object that renders this component.

Returns:
LabelUI object
Since:
1.3


"
JRootPane,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""RootPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JRootPane,getWindowDecorationStyle(),int,Returns a constant identifying the type of Window decorations the JRootPane is providing.,"

getWindowDecorationStyle
public int getWindowDecorationStyle()
Returns a constant identifying the type of Window decorations the
 JRootPane is providing.

Returns:
One of NONE, FRAME,
        PLAIN_DIALOG, INFORMATION_DIALOG,
        ERROR_DIALOG, COLOR_CHOOSER_DIALOG,
        FILE_CHOOSER_DIALOG, QUESTION_DIALOG or
        WARNING_DIALOG.
Since:
1.4
See Also:
setWindowDecorationStyle(int)


"
JRootPane,isOptimizedDrawingEnabled(),boolean,"The glassPane and contentPane have the same bounds, which means JRootPane does not tiles its children and this should return false.","

isOptimizedDrawingEnabled
public boolean isOptimizedDrawingEnabled()
The glassPane and contentPane
 have the same bounds, which means JRootPane
 does not tiles its children and this should return false.
 On the other hand, the glassPane
 is normally not visible, and so this can return true if the
 glassPane isn't visible. Therefore, the
 return value here depends upon the visibility of the
 glassPane.

Overrides:
isOptimizedDrawingEnabled in class JComponent
Returns:
true if this component's children don't overlap


"
JRootPane,isValidateRoot(),boolean,"If a descendant of this JRootPane calls revalidate, validate from here on down.","

isValidateRoot
public boolean isValidateRoot()
If a descendant of this JRootPane calls
 revalidate, validate from here on down.

 Deferred requests to layout a component and its descendents again.
 For example, calls to revalidate, are pushed upwards to
 either a JRootPane or a JScrollPane
 because both classes override isValidateRoot to return true.

Overrides:
isValidateRoot in class JComponent
Returns:
true
See Also:
JComponent.isValidateRoot(), 
Container.isValidateRoot()


"
JRootPane,paramString(),protected String,Returns a string representation of this JRootPane.,"

paramString
protected String paramString()
Returns a string representation of this JRootPane.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JRootPane.


"
JRootPane,removeNotify(),void,Notifies this component that it no longer has a parent component.,"

removeNotify
public void removeNotify()
Notifies this component that it no longer has a parent component.
 When this method is invoked, any KeyboardActions
 set up in the the chain of parent components are removed.
 This method is called by the toolkit internally and should
 not be called directly by programs.

Overrides:
removeNotify in class JComponent
See Also:
JComponent.registerKeyboardAction(java.awt.event.ActionListener, java.lang.String, javax.swing.KeyStroke, int)


"
JRootPane,setContentPane(Container content),void,Sets the content pane -- the container that holds the components parented by the root pane.,"

setContentPane
public void setContentPane(Container content)
Sets the content pane -- the container that holds the components
 parented by the root pane.
 
 Swing's painting architecture requires an opaque JComponent
 in the containment hierarchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque JComponent.

Parameters:
content - the Container to use for component-contents
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null


"
JRootPane,setDefaultButton(JButton defaultButton),void,"Sets the defaultButton property, which determines the current default button for this JRootPane.","

setDefaultButton
public void setDefaultButton(JButton defaultButton)
Sets the defaultButton property,
 which determines the current default button for this JRootPane.
 The default button is the button which will be activated
 when a UI-defined activation event (typically the Enter key)
 occurs in the root pane regardless of whether or not the button
 has keyboard focus (unless there is another component within
 the root pane which consumes the activation event,
 such as a JTextPane).
 For default activation to work, the button must be an enabled
 descendent of the root pane when activation occurs.
 To remove a default button from this root pane, set this
 property to null.

Parameters:
defaultButton - the JButton which is to be the default button
See Also:
JButton.isDefaultButton()


"
JRootPane,setDoubleBuffered(boolean aFlag),void,Sets whether this component should use a buffer to paint.,"

setDoubleBuffered
public void setDoubleBuffered(boolean aFlag)
Sets whether this component should use a buffer to paint.
  If set to true, all the drawing from this component will be done
  in an offscreen painting buffer. The offscreen painting buffer will
  the be copied onto the screen.
  If a Component is buffered and one of its ancestor
  is also buffered, the ancestor buffer will be used.

Overrides:
setDoubleBuffered in class JComponent
Parameters:
aFlag - if true, set this component to be double buffered
Since:
1.6


"
JRootPane,setGlassPane(Component glass),void,Sets a specified Component to be the glass pane for this root pane.,"

setGlassPane
public void setGlassPane(Component glass)
Sets a specified Component to be the glass pane for this
 root pane.  The glass pane should normally be a lightweight,
 transparent component, because it will be made visible when
 ever the root pane needs to grab input events.
 
 The new glass pane's visibility is changed to match that of
 the current glass pane.  An implication of this is that care
 must be taken when you want to replace the glass pane and
 make it visible.  Either of the following will work:
 
   root.setGlassPane(newGlassPane);
   newGlassPane.setVisible(true);
 
 or:
 
   root.getGlassPane().setVisible(true);
   root.setGlassPane(newGlassPane);
 

Parameters:
glass - the Component to use as the glass pane
              for this JRootPane
Throws:
NullPointerException - if the glass parameter is
          null


"
JRootPane,setJMenuBar(JMenuBar menu),void,Adds or changes the menu bar used in the layered pane.,"

setJMenuBar
public void setJMenuBar(JMenuBar menu)
Adds or changes the menu bar used in the layered pane.

Parameters:
menu - the JMenuBar to add


"
JRootPane,setLayeredPane(JLayeredPane layered),void,Sets the layered pane for the root pane.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layered)
Sets the layered pane for the root pane. The layered pane
 typically holds a content pane and an optional JMenuBar.

Parameters:
layered - the JLayeredPane to use
Throws:
IllegalComponentStateException - (a runtime
            exception) if the layered pane parameter is null


"
JRootPane,setMenuBar(JMenuBar menu),void,Deprecated. As of Swing version 1.0.3 replaced by setJMenuBar(JMenuBar menu).,"

setMenuBar
@Deprecated
public void setMenuBar(JMenuBar menu)
Deprecated. As of Swing version 1.0.3
  replaced by setJMenuBar(JMenuBar menu).
Specifies the menu bar value.

Parameters:
menu - the JMenuBar to add.


"
JRootPane,setUI(RootPaneUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(RootPaneUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the LabelUI L&F object
Since:
1.3
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JRootPane,setWindowDecorationStyle(int windowDecorationStyle),void,"Sets the type of Window decorations (such as borders, widgets for closing a Window, title ...) the JRootPane should provide.","

setWindowDecorationStyle
public void setWindowDecorationStyle(int windowDecorationStyle)
Sets the type of Window decorations (such as borders, widgets for
 closing a Window, title ...) the JRootPane should
 provide. The default is to provide no Window decorations
 (NONE).
 
 This is only a hint, and some look and feels may not support
 this.
 This is a bound property.

Parameters:
windowDecorationStyle - Constant identifying Window decorations
        to provide.
Throws:
IllegalArgumentException - if style is
        not one of: NONE, FRAME,
        PLAIN_DIALOG, INFORMATION_DIALOG,
        ERROR_DIALOG, COLOR_CHOOSER_DIALOG,
        FILE_CHOOSER_DIALOG, QUESTION_DIALOG, or
        WARNING_DIALOG.
Since:
1.4
See Also:
JDialog.setDefaultLookAndFeelDecorated(boolean), 
JFrame.setDefaultLookAndFeelDecorated(boolean), 
LookAndFeel.getSupportsWindowDecorations()


"
JRootPane,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JScrollBar,addAdjustmentListener(AdjustmentListener l),void,Adds an AdjustmentListener.,"

addAdjustmentListener
public void addAdjustmentListener(AdjustmentListener l)
Adds an AdjustmentListener.  Adjustment listeners are notified
 each time the scrollbar's model changes.  Adjustment events are
 provided for backwards compatibility with java.awt.Scrollbar.
 
 Note that the AdjustmentEvents type property will always have a
 placeholder value of AdjustmentEvent.TRACK because all changes
 to a BoundedRangeModels value are considered equivalent.  To change
 the value of a BoundedRangeModel one just sets its value property,
 i.e. model.setValue(123).  No information about the origin of the
 change, e.g. it's a block decrement, is provided.  We don't try
 fabricate the origin of the change here.

Specified by:
addAdjustmentListener in interface Adjustable
Parameters:
l - the AdjustmentLister to add
See Also:
removeAdjustmentListener(java.awt.event.AdjustmentListener), 
BoundedRangeModel.addChangeListener(javax.swing.event.ChangeListener)


"
JScrollBar,"fireAdjustmentValueChanged(int id, int type, int value)",protected void,Notify listeners that the scrollbar's model has changed.,"

fireAdjustmentValueChanged
protected void fireAdjustmentValueChanged(int id,
                                          int type,
                                          int value)
Notify listeners that the scrollbar's model has changed.

See Also:
addAdjustmentListener(java.awt.event.AdjustmentListener), 
EventListenerList


"
JScrollBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JScrollBar.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JScrollBar.
 For JScrollBar, the AccessibleContext takes the form of an
 AccessibleJScrollBar.
 A new AccessibleJScrollBar instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJScrollBar that serves as the
         AccessibleContext of this JScrollBar


"
JScrollBar,getAdjustmentListeners(),AdjustmentListener[],Returns an array of all the AdjustmentListeners added to this JScrollBar with addAdjustmentListener().,"

getAdjustmentListeners
public AdjustmentListener[] getAdjustmentListeners()
Returns an array of all the AdjustmentListeners added
 to this JScrollBar with addAdjustmentListener().

Returns:
all of the AdjustmentListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JScrollBar,getBlockIncrement(),int,For backwards compatibility with java.awt.Scrollbar.,"

getBlockIncrement
public int getBlockIncrement()
For backwards compatibility with java.awt.Scrollbar.

Specified by:
getBlockIncrement in interface Adjustable
Returns:
the block value increment for the adjustable object
See Also:
Adjustable.getBlockIncrement(), 
getBlockIncrement(int)


"
JScrollBar,getBlockIncrement(int direction),int,"Returns the amount to change the scrollbar's value by, given a block (usually ""page"") up/down request.","

getBlockIncrement
public int getBlockIncrement(int direction)
Returns the amount to change the scrollbar's value by,
 given a block (usually ""page"") up/down request.  A ScrollBarUI
 implementation typically calls this method when the user clicks
 above or below the scrollbar ""knob"" to change the value
 up or down by large amount.  Subclasses my override this
 method to compute a value, e.g. the change required to scroll
 up or down one paragraph in a text document.
 
 The JScrollPane component creates scrollbars (by default)
 that override this method and delegate to the viewports
 Scrollable view, if it has one.  The Scrollable interface
 provides a more specialized version of this method.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Parameters:
direction - is -1 or 1 for up/down respectively
Returns:
the value of the blockIncrement property
See Also:
setBlockIncrement(int), 
setValue(int), 
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
JScrollBar,getMaximum(),int,The maximum value of the scrollbar is maximum - extent.,"

getMaximum
public int getMaximum()
The maximum value of the scrollbar is maximum - extent.

Specified by:
getMaximum in interface Adjustable
Returns:
the value of the model's maximum property
See Also:
setMaximum(int)


"
JScrollBar,getMaximumSize(),Dimension,The scrollbar is flexible along it's scrolling axis and rigid along the other axis.,"

getMaximumSize
public Dimension getMaximumSize()
The scrollbar is flexible along it's scrolling axis and
 rigid along the other axis.

Overrides:
getMaximumSize in class JComponent
Returns:
the value of the maximumSize property
See Also:
JComponent.setMaximumSize(java.awt.Dimension), 
ComponentUI


"
JScrollBar,getMinimum(),int,Returns the minimum value supported by the scrollbar (usually zero).,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the scrollbar
 (usually zero).

Specified by:
getMinimum in interface Adjustable
Returns:
the value of the model's minimum property
See Also:
setMinimum(int)


"
JScrollBar,getMinimumSize(),Dimension,The scrollbar is flexible along it's scrolling axis and rigid along the other axis.,"

getMinimumSize
public Dimension getMinimumSize()
The scrollbar is flexible along it's scrolling axis and
 rigid along the other axis.

Overrides:
getMinimumSize in class JComponent
Returns:
the value of the minimumSize property
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
JScrollBar,getModel(),BoundedRangeModel,"Returns data model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.","

getModel
public BoundedRangeModel getModel()
Returns data model that handles the scrollbar's four
 fundamental properties: minimum, maximum, value, extent.

See Also:
setModel(javax.swing.BoundedRangeModel)


"
JScrollBar,getOrientation(),int,Returns the component's orientation (horizontal or vertical).,"

getOrientation
public int getOrientation()
Returns the component's orientation (horizontal or vertical).

Specified by:
getOrientation in interface Adjustable
Returns:
VERTICAL or HORIZONTAL
See Also:
setOrientation(int), 
Adjustable.getOrientation()


"
JScrollBar,getUI(),ScrollBarUI,Returns the delegate that implements the look and feel for this component.,"

getUI
public ScrollBarUI getUI()
Returns the delegate that implements the look and feel for
 this component.

See Also:
JComponent.setUI(javax.swing.plaf.ComponentUI)


"
JScrollBar,getUIClassID(),String,Returns the name of the LookAndFeel class for this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the LookAndFeel class for this component.

Overrides:
getUIClassID in class JComponent
Returns:
""ScrollBarUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JScrollBar,getUnitIncrement(),int,For backwards compatibility with java.awt.Scrollbar.,"

getUnitIncrement
public int getUnitIncrement()
For backwards compatibility with java.awt.Scrollbar.

Specified by:
getUnitIncrement in interface Adjustable
Returns:
the unit value increment for the adjustable object
See Also:
Adjustable.getUnitIncrement(), 
getUnitIncrement(int)


"
JScrollBar,getUnitIncrement(int direction),int,"Returns the amount to change the scrollbar's value by, given a unit up/down request.","

getUnitIncrement
public int getUnitIncrement(int direction)
Returns the amount to change the scrollbar's value by,
 given a unit up/down request.  A ScrollBarUI implementation
 typically calls this method when the user clicks on a scrollbar
 up/down arrow and uses the result to update the scrollbar's
 value.   Subclasses my override this method to compute
 a value, e.g. the change required to scroll up or down one
 (variable height) line text or one row in a table.
 
 The JScrollPane component creates scrollbars (by default)
 that override this method and delegate to the viewports
 Scrollable view, if it has one.  The Scrollable interface
 provides a more specialized version of this method.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Parameters:
direction - is -1 or 1 for up/down respectively
Returns:
the value of the unitIncrement property
See Also:
setUnitIncrement(int), 
setValue(int), 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)


"
JScrollBar,getValue(),int,Returns the scrollbar's value.,"

getValue
public int getValue()
Returns the scrollbar's value.

Specified by:
getValue in interface Adjustable
Returns:
the model's value property
See Also:
setValue(int)


"
JScrollBar,getValueIsAdjusting(),boolean,True if the scrollbar knob is being dragged.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
True if the scrollbar knob is being dragged.

Returns:
the value of the model's valueIsAdjusting property
See Also:
setValueIsAdjusting(boolean)


"
JScrollBar,getVisibleAmount(),int,"Returns the scrollbar's extent, aka its ""visibleAmount"".","

getVisibleAmount
public int getVisibleAmount()
Returns the scrollbar's extent, aka its ""visibleAmount"".  In many
 scrollbar look and feel implementations the size of the
 scrollbar ""knob"" or ""thumb"" is proportional to the extent.

Specified by:
getVisibleAmount in interface Adjustable
Returns:
the value of the model's extent property
See Also:
setVisibleAmount(int)


"
JScrollBar,paramString(),protected String,Returns a string representation of this JScrollBar.,"

paramString
protected String paramString()
Returns a string representation of this JScrollBar. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JScrollBar.


"
JScrollBar,removeAdjustmentListener(AdjustmentListener l),void,Removes an AdjustmentEvent listener.,"

removeAdjustmentListener
public void removeAdjustmentListener(AdjustmentListener l)
Removes an AdjustmentEvent listener.

Specified by:
removeAdjustmentListener in interface Adjustable
Parameters:
l - the AdjustmentLister to remove
See Also:
addAdjustmentListener(java.awt.event.AdjustmentListener)


"
JScrollBar,setBlockIncrement(int blockIncrement),void,Sets the blockIncrement property.,"

setBlockIncrement
public void setBlockIncrement(int blockIncrement)
Sets the blockIncrement property.
 
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Specified by:
setBlockIncrement in interface Adjustable
Parameters:
blockIncrement - the block increment
See Also:
getBlockIncrement()


"
JScrollBar,setEnabled(boolean x),void,Enables the component so that the knob position can be changed.,"

setEnabled
public void setEnabled(boolean x)
Enables the component so that the knob position can be changed.
 When the disabled, the knob position cannot be changed.

Overrides:
setEnabled in class JComponent
Parameters:
x - a boolean value, where true enables the component and
          false disables it
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
JScrollBar,setMaximum(int maximum),void,Sets the model's maximum property.,"

setMaximum
public void setMaximum(int maximum)
Sets the model's maximum property.  Note that the scrollbar's value
 can only be set to maximum - extent.

Specified by:
setMaximum in interface Adjustable
Parameters:
maximum - the maximum value
See Also:
getMaximum(), 
BoundedRangeModel.setMaximum(int)


"
JScrollBar,setMinimum(int minimum),void,Sets the model's minimum property.,"

setMinimum
public void setMinimum(int minimum)
Sets the model's minimum property.

Specified by:
setMinimum in interface Adjustable
Parameters:
minimum - the minimum value
See Also:
getMinimum(), 
BoundedRangeModel.setMinimum(int)


"
JScrollBar,setModel(BoundedRangeModel newModel),void,"Sets the model that handles the scrollbar's four fundamental properties: minimum, maximum, value, extent.","

setModel
public void setModel(BoundedRangeModel newModel)
Sets the model that handles the scrollbar's four
 fundamental properties: minimum, maximum, value, extent.

See Also:
getModel()


"
JScrollBar,setOrientation(int orientation),void,Set the scrollbar's orientation to either VERTICAL or HORIZONTAL.,"

setOrientation
public void setOrientation(int orientation)
Set the scrollbar's orientation to either VERTICAL or
 HORIZONTAL.

Throws:
IllegalArgumentException - if orientation is not one of VERTICAL, HORIZONTAL
See Also:
getOrientation()


"
JScrollBar,setUI(ScrollBarUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ScrollBarUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ScrollBarUI L&F object
Since:
1.4
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JScrollBar,setUnitIncrement(int unitIncrement),void,Sets the unitIncrement property.,"

setUnitIncrement
public void setUnitIncrement(int unitIncrement)
Sets the unitIncrement property.
 
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Specified by:
setUnitIncrement in interface Adjustable
Parameters:
unitIncrement - the unit increment
See Also:
getUnitIncrement(int)


"
JScrollBar,setValue(int value),void,Sets the scrollbar's value.,"

setValue
public void setValue(int value)
Sets the scrollbar's value.  This method just forwards the value
 to the model.

Specified by:
setValue in interface Adjustable
Parameters:
value - the current value, between minimum
    and maximum - visibleAmount
See Also:
getValue(), 
BoundedRangeModel.setValue(int)


"
JScrollBar,setValueIsAdjusting(boolean b),void,Sets the model's valueIsAdjusting property.,"

setValueIsAdjusting
public void setValueIsAdjusting(boolean b)
Sets the model's valueIsAdjusting property.  Scrollbar look and
 feel implementations should set this property to true when
 a knob drag begins, and to false when the drag ends.  The
 scrollbar model will not generate ChangeEvents while
 valueIsAdjusting is true.

See Also:
getValueIsAdjusting(), 
BoundedRangeModel.setValueIsAdjusting(boolean)


"
JScrollBar,"setValues(int newValue, int newExtent, int newMin, int newMax)",void,Sets the four BoundedRangeModel properties after forcing the arguments to obey the usual constraints:,"

setValues
public void setValues(int newValue,
                      int newExtent,
                      int newMin,
                      int newMax)
Sets the four BoundedRangeModel properties after forcing
 the arguments to obey the usual constraints:
 
 minimum ≤ value ≤ value+extent ≤ maximum
 

See Also:
BoundedRangeModel.setRangeProperties(int, int, int, int, boolean), 
setValue(int), 
setVisibleAmount(int), 
setMinimum(int), 
setMaximum(int)


"
JScrollBar,setVisibleAmount(int extent),void,Set the model's extent property.,"

setVisibleAmount
public void setVisibleAmount(int extent)
Set the model's extent property.

Specified by:
setVisibleAmount in interface Adjustable
Parameters:
extent - the length of the indicator
See Also:
getVisibleAmount(), 
BoundedRangeModel.setExtent(int)


"
JScrollBar,updateUI(),void,Overrides JComponent.updateUI.,"

updateUI
public void updateUI()
Overrides JComponent.updateUI.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JScrollPane,createHorizontalScrollBar(),JScrollBar,Returns a JScrollPane.ScrollBar by default.,"

createHorizontalScrollBar
public JScrollBar createHorizontalScrollBar()
Returns a JScrollPane.ScrollBar by default.
 Subclasses may override this method to force ScrollPaneUI
 implementations to use a JScrollBar subclass.
 Used by ScrollPaneUI implementations to
 create the horizontal scrollbar.

Returns:
a JScrollBar with a horizontal orientation
See Also:
JScrollBar


"
JScrollPane,createVerticalScrollBar(),JScrollBar,Returns a JScrollPane.ScrollBar by default.,"

createVerticalScrollBar
public JScrollBar createVerticalScrollBar()
Returns a JScrollPane.ScrollBar by default.  Subclasses
 may override this method to force ScrollPaneUI
 implementations to use a JScrollBar subclass.
 Used by ScrollPaneUI implementations to create the
 vertical scrollbar.

Returns:
a JScrollBar with a vertical orientation
See Also:
JScrollBar


"
JScrollPane,createViewport(),protected JViewport,Returns a new JViewport by default.,"

createViewport
protected JViewport createViewport()
Returns a new JViewport by default.
 Used to create the
 viewport (as needed) in setViewportView,
 setRowHeaderView, and setColumnHeaderView.
 Subclasses may override this method to return a subclass of
 JViewport.

Returns:
a new JViewport


"
JScrollPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JScrollPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JScrollPane.
 For scroll panes, the AccessibleContext takes the form of an
 AccessibleJScrollPane.
 A new AccessibleJScrollPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJScrollPane that serves as the
         AccessibleContext of this JScrollPane


"
JScrollPane,getColumnHeader(),JViewport,Returns the column header.,"

getColumnHeader
public JViewport getColumnHeader()
Returns the column header.

Returns:
the columnHeader property
See Also:
setColumnHeader(javax.swing.JViewport)


"
JScrollPane,getCorner(String key),Component,Returns the component at the specified corner.,"

getCorner
public Component getCorner(String key)
Returns the component at the specified corner. The
 key value specifying the corner is one of:
 
ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 ScrollPaneConstants.LOWER_LEADING_CORNER
 ScrollPaneConstants.LOWER_TRAILING_CORNER
 ScrollPaneConstants.UPPER_LEADING_CORNER
 ScrollPaneConstants.UPPER_TRAILING_CORNER
 

Parameters:
key - one of the values as shown above
Returns:
the corner component (which may be null)
         identified by the given key, or null
         if the key is invalid
See Also:
setCorner(java.lang.String, java.awt.Component)


"
JScrollPane,getHorizontalScrollBar(),JScrollBar,Returns the horizontal scroll bar that controls the viewport's horizontal view position.,"

getHorizontalScrollBar
public JScrollBar getHorizontalScrollBar()
Returns the horizontal scroll bar that controls the viewport's
 horizontal view position.

Returns:
the horizontalScrollBar property
See Also:
setHorizontalScrollBar(javax.swing.JScrollBar)


"
JScrollPane,getHorizontalScrollBarPolicy(),int,Returns the horizontal scroll bar policy value.,"

getHorizontalScrollBarPolicy
public int getHorizontalScrollBarPolicy()
Returns the horizontal scroll bar policy value.

Returns:
the horizontalScrollBarPolicy property
See Also:
setHorizontalScrollBarPolicy(int)


"
JScrollPane,getRowHeader(),JViewport,Returns the row header.,"

getRowHeader
public JViewport getRowHeader()
Returns the row header.

Returns:
the rowHeader property
See Also:
setRowHeader(javax.swing.JViewport)


"
JScrollPane,getUI(),ScrollPaneUI,Returns the look and feel (L&F) object that renders this component.,"

getUI
public ScrollPaneUI getUI()
Returns the look and feel (L&F) object that renders this component.

Returns:
the ScrollPaneUI object that renders this
                          component
See Also:
setUI(javax.swing.plaf.ScrollPaneUI)


"
JScrollPane,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.,"

getUIClassID
public String getUIClassID()
Returns the suffix used to construct the name of the L&F class used to
 render this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ScrollPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JScrollPane,getVerticalScrollBar(),JScrollBar,Returns the vertical scroll bar that controls the viewports vertical view position.,"

getVerticalScrollBar
public JScrollBar getVerticalScrollBar()
Returns the vertical scroll bar that controls the viewports
 vertical view position.

Returns:
the verticalScrollBar property
See Also:
setVerticalScrollBar(javax.swing.JScrollBar)


"
JScrollPane,getVerticalScrollBarPolicy(),int,Returns the vertical scroll bar policy value.,"

getVerticalScrollBarPolicy
public int getVerticalScrollBarPolicy()
Returns the vertical scroll bar policy value.

Returns:
the verticalScrollBarPolicy property
See Also:
setVerticalScrollBarPolicy(int)


"
JScrollPane,getViewport(),JViewport,Returns the current JViewport.,"

getViewport
public JViewport getViewport()
Returns the current JViewport.

Returns:
the viewport property
See Also:
setViewport(javax.swing.JViewport)


"
JScrollPane,getViewportBorder(),Border,Returns the Border object that surrounds the viewport.,"

getViewportBorder
public Border getViewportBorder()
Returns the Border object that surrounds the viewport.

Returns:
the viewportBorder property
See Also:
setViewportBorder(javax.swing.border.Border)


"
JScrollPane,getViewportBorderBounds(),Rectangle,Returns the bounds of the viewport's border.,"

getViewportBorderBounds
public Rectangle getViewportBorderBounds()
Returns the bounds of the viewport's border.

Returns:
a Rectangle object specifying the viewport border


"
JScrollPane,isValidateRoot(),boolean,Overridden to return true so that any calls to revalidate on any descendants of this JScrollPane will cause the entire tree beginning with this JScrollPane to be validated.,"

isValidateRoot
public boolean isValidateRoot()
Overridden to return true so that any calls to revalidate
 on any descendants of this JScrollPane will cause the
 entire tree beginning with this JScrollPane to be
 validated.

Overrides:
isValidateRoot in class JComponent
Returns:
true
See Also:
Container.validate(), 
JComponent.revalidate(), 
JComponent.isValidateRoot(), 
Container.isValidateRoot()


"
JScrollPane,isWheelScrollingEnabled(),boolean,Indicates whether or not scrolling will take place in response to the mouse wheel.,"

isWheelScrollingEnabled
public boolean isWheelScrollingEnabled()
Indicates whether or not scrolling will take place in response to the
 mouse wheel.  Wheel scrolling is enabled by default.

Since:
1.4
See Also:
setWheelScrollingEnabled(boolean)


"
JScrollPane,paramString(),protected String,Returns a string representation of this JScrollPane.,"

paramString
protected String paramString()
Returns a string representation of this JScrollPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JScrollPane.


"
JScrollPane,setColumnHeader(JViewport columnHeader),void,"Removes the old columnHeader, if it exists; if the new columnHeader isn't null, syncs the x coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane.","

setColumnHeader
public void setColumnHeader(JViewport columnHeader)
Removes the old columnHeader, if it exists; if the new columnHeader
 isn't null, syncs the x coordinate of its viewPosition
 with the viewport (if there is one) and then adds it to the scroll pane.
 
 Most applications will find it more convenient to use
 setColumnHeaderView
 to add a column header component and its viewport to the scroll pane.

See Also:
getColumnHeader(), 
setColumnHeaderView(java.awt.Component)


"
JScrollPane,setColumnHeaderView(Component view),void,"Creates a column-header viewport if necessary, sets its view, and then adds the column-header viewport to the scrollpane.","

setColumnHeaderView
public void setColumnHeaderView(Component view)
Creates a column-header viewport if necessary, sets
 its view, and then adds the column-header viewport
 to the scrollpane.  For example:
 
 JScrollPane scrollpane = new JScrollPane();
 scrollpane.setViewportView(myBigComponentToScroll);
 scrollpane.setColumnHeaderView(myBigComponentsColumnHeader);
 

Parameters:
view - the component to display as the column header
See Also:
setColumnHeader(javax.swing.JViewport), 
JViewport.setView(java.awt.Component)


"
JScrollPane,setComponentOrientation(ComponentOrientation co),void,Sets the orientation for the vertical and horizontal scrollbars as determined by the ComponentOrientation argument.,"

setComponentOrientation
public void setComponentOrientation(ComponentOrientation co)
Sets the orientation for the vertical and horizontal
 scrollbars as determined by the
 ComponentOrientation argument.

Overrides:
setComponentOrientation in class Component
Parameters:
co - one of the following values:
 
java.awt.ComponentOrientation.LEFT_TO_RIGHT
 java.awt.ComponentOrientation.RIGHT_TO_LEFT
 java.awt.ComponentOrientation.UNKNOWN
 
See Also:
ComponentOrientation


"
JScrollPane,"setCorner(String key, Component corner)",void,"Adds a child that will appear in one of the scroll panes corners, if there's room.","

setCorner
public void setCorner(String key,
                      Component corner)
Adds a child that will appear in one of the scroll panes
 corners, if there's room.   For example with both scrollbars
 showing (on the right and bottom edges of the scrollpane)
 the lower left corner component will be shown in the space
 between ends of the two scrollbars. Legal values for
 the key are:
 
ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 ScrollPaneConstants.LOWER_LEADING_CORNER
 ScrollPaneConstants.LOWER_TRAILING_CORNER
 ScrollPaneConstants.UPPER_LEADING_CORNER
 ScrollPaneConstants.UPPER_TRAILING_CORNER
 

 Although ""corner"" doesn't match any beans property
 signature, PropertyChange events are generated with the
 property name set to the corner key.

Parameters:
key - identifies which corner the component will appear in
corner - one of the following components:
 
lowerLeft
 lowerRight
 upperLeft
 upperRight
 
Throws:
IllegalArgumentException - if corner key is invalid


"
JScrollPane,setHorizontalScrollBar(JScrollBar horizontalScrollBar),void,Adds the scrollbar that controls the viewport's horizontal view position to the scrollpane.,"

setHorizontalScrollBar
public void setHorizontalScrollBar(JScrollBar horizontalScrollBar)
Adds the scrollbar that controls the viewport's horizontal view
 position to the scrollpane.
 This is usually unnecessary, as JScrollPane creates
 horizontal and vertical scrollbars by default.

Parameters:
horizontalScrollBar - the horizontal scrollbar to be added
See Also:
createHorizontalScrollBar(), 
getHorizontalScrollBar()


"
JScrollPane,setHorizontalScrollBarPolicy(int policy),void,Determines when the horizontal scrollbar appears in the scrollpane.,"

setHorizontalScrollBarPolicy
public void setHorizontalScrollBarPolicy(int policy)
Determines when the horizontal scrollbar appears in the scrollpane.
 The options are:
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getHorizontalScrollBarPolicy()


"
JScrollPane,setLayout(LayoutManager layout),void,Sets the layout manager for this JScrollPane.,"

setLayout
public void setLayout(LayoutManager layout)
Sets the layout manager for this JScrollPane.
 This method overrides setLayout in
 java.awt.Container to ensure that only
 LayoutManagers which
 are subclasses of ScrollPaneLayout can be used in a
 JScrollPane. If layout is non-null, this
 will invoke syncWithScrollPane on it.

Overrides:
setLayout in class Container
Parameters:
layout - the specified layout manager
Throws:
ClassCastException - if layout is not a
                  ScrollPaneLayout
See Also:
Container.getLayout(), 
Container.setLayout(java.awt.LayoutManager)


"
JScrollPane,setRowHeader(JViewport rowHeader),void,"Removes the old rowHeader, if it exists; if the new rowHeader isn't null, syncs the y coordinate of its viewPosition with the viewport (if there is one) and then adds it to the scroll pane.","

setRowHeader
public void setRowHeader(JViewport rowHeader)
Removes the old rowHeader, if it exists; if the new rowHeader
 isn't null, syncs the y coordinate of its
 viewPosition with
 the viewport (if there is one) and then adds it to the scroll pane.
 
 Most applications will find it more convenient to use
 setRowHeaderView
 to add a row header component and its viewport to the scroll pane.

Parameters:
rowHeader - the new row header to be used; if null
          the old row header is still removed and the new rowHeader
          is set to null
See Also:
getRowHeader(), 
setRowHeaderView(java.awt.Component)


"
JScrollPane,setRowHeaderView(Component view),void,"Creates a row-header viewport if necessary, sets its view and then adds the row-header viewport to the scrollpane.","

setRowHeaderView
public void setRowHeaderView(Component view)
Creates a row-header viewport if necessary, sets
 its view and then adds the row-header viewport
 to the scrollpane.  For example:
 
 JScrollPane scrollpane = new JScrollPane();
 scrollpane.setViewportView(myBigComponentToScroll);
 scrollpane.setRowHeaderView(myBigComponentsRowHeader);
 

Parameters:
view - the component to display as the row header
See Also:
setRowHeader(javax.swing.JViewport), 
JViewport.setView(java.awt.Component)


"
JScrollPane,setUI(ScrollPaneUI ui),void,Sets the ScrollPaneUI object that provides the look and feel (L&F) for this component.,"

setUI
public void setUI(ScrollPaneUI ui)
Sets the ScrollPaneUI object that provides the
 look and feel (L&F) for this component.

Parameters:
ui - the ScrollPaneUI L&F object
See Also:
getUI()


"
JScrollPane,setVerticalScrollBar(JScrollBar verticalScrollBar),void,Adds the scrollbar that controls the viewports vertical view position to the scrollpane.,"

setVerticalScrollBar
public void setVerticalScrollBar(JScrollBar verticalScrollBar)
Adds the scrollbar that controls the viewports vertical view position
 to the scrollpane.  This is usually unnecessary,
 as JScrollPane creates vertical and
 horizontal scrollbars by default.

Parameters:
verticalScrollBar - the new vertical scrollbar to be added
See Also:
createVerticalScrollBar(), 
getVerticalScrollBar()


"
JScrollPane,setVerticalScrollBarPolicy(int policy),void,Determines when the vertical scrollbar appears in the scrollpane.,"

setVerticalScrollBarPolicy
public void setVerticalScrollBarPolicy(int policy)
Determines when the vertical scrollbar appears in the scrollpane.
 Legal values are:
 
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getVerticalScrollBarPolicy()


"
JScrollPane,setViewport(JViewport viewport),void,"Removes the old viewport (if there is one); forces the viewPosition of the new viewport to be in the +x,+y quadrant; syncs up the row and column headers (if there are any) with the new viewport; and finally syncs the scrollbars and headers with the new viewport.","

setViewport
public void setViewport(JViewport viewport)
Removes the old viewport (if there is one); forces the
 viewPosition of the new viewport to be in the +x,+y quadrant;
 syncs up the row and column headers (if there are any) with the
 new viewport; and finally syncs the scrollbars and
 headers with the new viewport.
 
 Most applications will find it more convenient to use
 setViewportView
 to add a viewport and a view to the scrollpane.

Parameters:
viewport - the new viewport to be used; if viewport is
          null, the old viewport is still removed
          and the new viewport is set to null
See Also:
createViewport(), 
getViewport(), 
setViewportView(java.awt.Component)


"
JScrollPane,setViewportBorder(Border viewportBorder),void,Adds a border around the viewport.,"

setViewportBorder
public void setViewportBorder(Border viewportBorder)
Adds a border around the viewport.  Note that the border isn't
 set on the viewport directly, JViewport doesn't support
 the JComponent border property.
 Similarly setting the JScrollPanes
 viewport doesn't affect the viewportBorder property.
 
 The default value of this property is computed by the look
 and feel implementation.

Parameters:
viewportBorder - the border to be added
See Also:
getViewportBorder(), 
setViewport(javax.swing.JViewport)


"
JScrollPane,setViewportView(Component view),void,Creates a viewport if necessary and then sets its view.,"

setViewportView
public void setViewportView(Component view)
Creates a viewport if necessary and then sets its view.  Applications
 that don't provide the view directly to the JScrollPane
 constructor
 should use this method to specify the scrollable child that's going
 to be displayed in the scrollpane. For example:
 
 JScrollPane scrollpane = new JScrollPane();
 scrollpane.setViewportView(myBigComponentToScroll);
 
 Applications should not add children directly to the scrollpane.

Parameters:
view - the component to add to the viewport
See Also:
setViewport(javax.swing.JViewport), 
JViewport.setView(java.awt.Component)


"
JScrollPane,setWheelScrollingEnabled(boolean handleWheel),void,Enables/disables scrolling in response to movement of the mouse wheel.,"

setWheelScrollingEnabled
public void setWheelScrollingEnabled(boolean handleWheel)
Enables/disables scrolling in response to movement of the mouse wheel.
 Wheel scrolling is enabled by default.

Parameters:
handleWheel - true if scrolling should be done
                      automatically for a MouseWheelEvent,
                      false otherwise.
Since:
1.4
See Also:
isWheelScrollingEnabled(), 
MouseWheelEvent, 
MouseWheelListener


"
JScrollPane,updateUI(),void,Replaces the current ScrollPaneUI object with a version from the current default look and feel.,"

updateUI
public void updateUI()
Replaces the current ScrollPaneUI object with a version
 from the current default look and feel.
 To be called when the default look and feel changes.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI(), 
UIManager.getUI(javax.swing.JComponent)


"
JSeparator,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSeparator.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JSeparator.
 For separators, the AccessibleContext takes the form of an
 AccessibleJSeparator.
 A new AccessibleJSeparator instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJSeparator that serves as the
         AccessibleContext of this JSeparator


"
JSeparator,getOrientation(),int,Returns the orientation of this separator.,"

getOrientation
public int getOrientation()
Returns the orientation of this separator.

Returns:
The value of the orientation property, one of the
           following constants defined in SwingConstants:
           VERTICAL, or
           HORIZONTAL.
See Also:
SwingConstants, 
setOrientation(int)


"
JSeparator,getUI(),SeparatorUI,Returns the L&F object that renders this component.,"

getUI
public SeparatorUI getUI()
Returns the L&F object that renders this component.

Returns:
the SeparatorUI object that renders this component


"
JSeparator,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""SeparatorUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JSeparator,paramString(),protected String,Returns a string representation of this JSeparator.,"

paramString
protected String paramString()
Returns a string representation of this JSeparator.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JSeparator


"
JSeparator,setOrientation(int orientation),void,Sets the orientation of the separator.,"

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the separator.
 The default value of this property is HORIZONTAL.

Parameters:
orientation - either SwingConstants.HORIZONTAL
                  or SwingConstants.VERTICAL
Throws:
IllegalArgumentException - if orientation
          is neither SwingConstants.HORIZONTAL
          nor SwingConstants.VERTICAL
See Also:
SwingConstants, 
getOrientation()


"
JSeparator,setUI(SeparatorUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(SeparatorUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the SeparatorUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JSeparator,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JSlider,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the slider.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the slider.

Parameters:
l - the ChangeListener to add
See Also:
fireStateChanged(), 
removeChangeListener(javax.swing.event.ChangeListener)


"
JSlider,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents from the model differently can override this to return an instance of a custom ChangeListener implementation.,"

createChangeListener
protected ChangeListener createChangeListener()
Subclasses that want to handle ChangeEvents
 from the model differently
 can override this to return
 an instance of a custom ChangeListener implementation.
 The default ChangeListener simply calls the
 fireStateChanged method to forward ChangeEvents
 to the ChangeListeners that have been added directly to the
 slider.

See Also:
changeListener, 
fireStateChanged(), 
ChangeListener, 
BoundedRangeModel


"
JSlider,createStandardLabels(int increment),Hashtable,"Creates a Hashtable of numerical text labels, starting at the slider minimum, and using the increment specified.","

createStandardLabels
public Hashtable createStandardLabels(int increment)
Creates a Hashtable of numerical text labels, starting at the
 slider minimum, and using the increment specified.
 For example, if you call createStandardLabels( 10 )
 and the slider minimum is zero,
 then labels will be created for the values 0, 10, 20, 30, and so on.
 
 For the labels to be drawn on the slider, the returned Hashtable
 must be passed into setLabelTable, and setPaintLabels
 must be set to true.
 
 For further details on the makeup of the returned Hashtable, see
 the setLabelTable documentation.

Parameters:
increment - distance between labels in the generated hashtable
Returns:
a new Hashtable of labels
Throws:
IllegalArgumentException - if increment is less than or
          equal to zero
See Also:
setLabelTable(java.util.Dictionary), 
setPaintLabels(boolean)


"
JSlider,"createStandardLabels(int increment, int start)",Hashtable,"Creates a Hashtable of numerical text labels, starting at the starting point specified, and using the increment specified.","

createStandardLabels
public Hashtable createStandardLabels(int increment,
                                      int start)
Creates a Hashtable of numerical text labels, starting at the
 starting point specified, and using the increment specified.
 For example, if you call
 createStandardLabels( 10, 2 ),
 then labels will be created for the values 2, 12, 22, 32, and so on.
 
 For the labels to be drawn on the slider, the returned Hashtable
 must be passed into setLabelTable, and setPaintLabels
 must be set to true.
 
 For further details on the makeup of the returned Hashtable, see
 the setLabelTable documentation.

Parameters:
increment - distance between labels in the generated hashtable
start - value at which the labels will begin
Returns:
a new Hashtable of labels
Throws:
IllegalArgumentException - if start is
          out of range, or if increment is less than or equal
          to zero
See Also:
setLabelTable(java.util.Dictionary), 
setPaintLabels(boolean)


"
JSlider,fireStateChanged(),protected void,"Send a ChangeEvent, whose source is this JSlider, to all ChangeListeners that have registered interest in ChangeEvents.","

fireStateChanged
protected void fireStateChanged()
Send a ChangeEvent, whose source is this JSlider, to
 all ChangeListeners that have registered interest in
 ChangeEvents.
 This method is called each time a ChangeEvent is received from
 the model.
 
 The event instance is created if necessary, and stored in
 changeEvent.

See Also:
addChangeListener(javax.swing.event.ChangeListener), 
EventListenerList


"
JSlider,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSlider.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JSlider.
 For sliders, the AccessibleContext takes the form of an
 AccessibleJSlider.
 A new AccessibleJSlider instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJSlider that serves as the
         AccessibleContext of this JSlider


"
JSlider,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JSlider with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this JSlider with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JSlider,getExtent(),int,"Returns the ""extent"" from the BoundedRangeModel.","

getExtent
public int getExtent()
Returns the ""extent"" from the BoundedRangeModel.
 This represents the range of values ""covered"" by the knob.

Returns:
an int representing the extent
See Also:
setExtent(int), 
BoundedRangeModel.getExtent()


"
JSlider,getInverted(),boolean,"Returns true if the value-range shown for the slider is reversed,","

getInverted
public boolean getInverted()
Returns true if the value-range shown for the slider is reversed,

Returns:
true if the slider values are reversed from their normal order
See Also:
setInverted(boolean)


"
JSlider,getLabelTable(),Dictionary,Returns the dictionary of what labels to draw at which values.,"

getLabelTable
public Dictionary getLabelTable()
Returns the dictionary of what labels to draw at which values.

Returns:
the Dictionary containing labels and
    where to draw them


"
JSlider,getMajorTickSpacing(),int,This method returns the major tick spacing.,"

getMajorTickSpacing
public int getMajorTickSpacing()
This method returns the major tick spacing.  The number that is returned
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between major ticks
See Also:
setMajorTickSpacing(int)


"
JSlider,getMaximum(),int,Returns the maximum value supported by the slider from the BoundedRangeModel.,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
JSlider,getMinimum(),int,Returns the minimum value supported by the slider from the BoundedRangeModel.,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
JSlider,getMinorTickSpacing(),int,This method returns the minor tick spacing.,"

getMinorTickSpacing
public int getMinorTickSpacing()
This method returns the minor tick spacing.  The number that is returned
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.

Returns:
the number of values between minor ticks
See Also:
getMinorTickSpacing()


"
JSlider,getModel(),BoundedRangeModel,"Returns the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value.","

getModel
public BoundedRangeModel getModel()
Returns the BoundedRangeModel that handles the slider's three
 fundamental properties: minimum, maximum, value.

Returns:
the data model for this component
See Also:
setModel(javax.swing.BoundedRangeModel), 
BoundedRangeModel


"
JSlider,getOrientation(),int,Return this slider's vertical or horizontal orientation.,"

getOrientation
public int getOrientation()
Return this slider's vertical or horizontal orientation.

Returns:
SwingConstants.VERTICAL or
  SwingConstants.HORIZONTAL
See Also:
setOrientation(int)


"
JSlider,getPaintLabels(),boolean,Tells if labels are to be painted.,"

getPaintLabels
public boolean getPaintLabels()
Tells if labels are to be painted.

Returns:
true if labels are painted, else false
See Also:
setPaintLabels(boolean)


"
JSlider,getPaintTicks(),boolean,Tells if tick marks are to be painted.,"

getPaintTicks
public boolean getPaintTicks()
Tells if tick marks are to be painted.

Returns:
true if tick marks are painted, else false
See Also:
setPaintTicks(boolean)


"
JSlider,getPaintTrack(),boolean,Tells if the track (area the slider slides in) is to be painted.,"

getPaintTrack
public boolean getPaintTrack()
Tells if the track (area the slider slides in) is to be painted.

Returns:
true if track is painted, else false
See Also:
setPaintTrack(boolean)


"
JSlider,getSnapToTicks(),boolean,Returns true if the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.,"

getSnapToTicks
public boolean getSnapToTicks()
Returns true if the knob (and the data value it represents)
 resolve to the closest tick mark next to where the user
 positioned the knob.

Returns:
true if the value snaps to the nearest tick mark, else false
See Also:
setSnapToTicks(boolean)


"
JSlider,getUI(),SliderUI,Gets the UI object which implements the L&F for this component.,"

getUI
public SliderUI getUI()
Gets the UI object which implements the L&F for this component.

Returns:
the SliderUI object that implements the Slider L&F


"
JSlider,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
""SliderUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JSlider,getValue(),int,Returns the slider's current value from the BoundedRangeModel.,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
JSlider,getValueIsAdjusting(),boolean,Returns the valueIsAdjusting property from the model.,"

getValueIsAdjusting
public boolean getValueIsAdjusting()
Returns the valueIsAdjusting property from the model.  For
 details on how this is used, see the setValueIsAdjusting
 documentation.

Returns:
the value of the model's valueIsAdjusting property
See Also:
setValueIsAdjusting(boolean)


"
JSlider,"imageUpdate(Image img, int infoflags, int x, int y, int w, int h)",boolean,Repaints the component when the image has changed.,"

imageUpdate
public boolean imageUpdate(Image img,
                           int infoflags,
                           int x,
                           int y,
                           int w,
                           int h)
Repaints the component when the image has changed.
 This imageUpdate method of an ImageObserver
 is called when more information about an
 image which had been previously requested using an asynchronous
 routine such as the drawImage method of
 Graphics becomes available.
 See the definition of imageUpdate for
 more information on this method and its arguments.
 
 The imageUpdate method of Component
 incrementally draws an image on the component as more of the bits
 of the image are available.
 
 If the system property awt.image.incrementaldraw
 is missing or has the value true, the image is
 incrementally drawn. If the system property has any other value,
 then the image is not drawn until it has been completely loaded.
 
 Also, if incremental drawing is in effect, the value of the
 system property awt.image.redrawrate is interpreted
 as an integer to give the maximum redraw rate, in milliseconds. If
 the system property is missing or cannot be interpreted as an
 integer, the redraw rate is once every 100ms.
 
 The interpretation of the x, y,
 width, and height arguments depends on
 the value of the infoflags argument.

Specified by:
imageUpdate in interface ImageObserver
Overrides:
imageUpdate in class Component
Parameters:
img - the image being observed
infoflags - see imageUpdate for more information
x - the x coordinate
y - the y coordinate
w - the width
h - the height
Returns:
false if the infoflags indicate that the
            image is completely loaded; true otherwise.
Since:
1.7
See Also:
ImageObserver, 
Graphics.drawImage(Image, int, int, Color, java.awt.image.ImageObserver), 
Graphics.drawImage(Image, int, int, java.awt.image.ImageObserver), 
Graphics.drawImage(Image, int, int, int, int, Color, java.awt.image.ImageObserver), 
Graphics.drawImage(Image, int, int, int, int, java.awt.image.ImageObserver), 
ImageObserver.imageUpdate(java.awt.Image, int, int, int, int, int)


"
JSlider,paramString(),protected String,Returns a string representation of this JSlider.,"

paramString
protected String paramString()
Returns a string representation of this JSlider. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JSlider.


"
JSlider,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the slider.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the slider.

Parameters:
l - the ChangeListener to remove
See Also:
fireStateChanged(), 
addChangeListener(javax.swing.event.ChangeListener)


"
JSlider,setExtent(int extent),void,"Sets the size of the range ""covered"" by the knob.","

setExtent
public void setExtent(int extent)
Sets the size of the range ""covered"" by the knob.  Most look
 and feel implementations will change the value by this amount
 if the user clicks on either side of the knob.  This method just
 forwards the new extent value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new extent value is different from the previous extent value,
 all change listeners are notified.

Parameters:
extent - the new extent
See Also:
getExtent(), 
BoundedRangeModel.setExtent(int)


"
JSlider,setFont(Font font),void,Sets the font for this component.,"

setFont
public void setFont(Font font)
Sets the font for this component.

Overrides:
setFont in class JComponent
Parameters:
font - the desired Font for this component
Since:
1.6
See Also:
Component.getFont()


"
JSlider,setInverted(boolean b),void,Specify true to reverse the value-range shown for the slider and false to put the value range in the normal order.,"

setInverted
public void setInverted(boolean b)
Specify true to reverse the value-range shown for the slider and false to
 put the value range in the normal order.  The order depends on the
 slider's ComponentOrientation property.  Normal (non-inverted)
 horizontal sliders with a ComponentOrientation value of
 LEFT_TO_RIGHT have their maximum on the right.
 Normal horizontal sliders with a ComponentOrientation value of
 RIGHT_TO_LEFT have their maximum on the left.  Normal vertical
 sliders have their maximum on the top.  These labels are reversed when the
 slider is inverted.
 
 By default, the value of this property is false.

Parameters:
b - true to reverse the slider values from their normal order


"
JSlider,setLabelTable(Dictionary labels),void,Used to specify what label will be drawn at any given value.,"

setLabelTable
public void setLabelTable(Dictionary labels)
Used to specify what label will be drawn at any given value.
 The key-value pairs are of this format:
 { Integer value, java.swing.JComponent label }.
 
 An easy way to generate a standard table of value labels is by using the
 createStandardLabels method.
 
 Once the labels have been set, this method calls updateLabelUIs().
 Note that the labels are only painted if the paintLabels
 property is true.

Parameters:
labels - new Dictionary of labels, or null to
        remove all labels
See Also:
createStandardLabels(int), 
getLabelTable(), 
setPaintLabels(boolean)


"
JSlider,setMajorTickSpacing(int n),void,This method sets the major tick spacing.,"

setMajorTickSpacing
public void setMajorTickSpacing(int n)
This method sets the major tick spacing.  The number that is passed in
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.
 
 In order for major ticks to be painted, setPaintTicks must be
 set to true.
 
 This method will also set up a label table for you.
 If there is not already a label table, and the major tick spacing is
 > 0, and getPaintLabels returns
 true, a standard label table will be generated (by calling
 createStandardLabels) with labels at the major tick marks.
 For the example above, you would get text labels: ""0"",
 ""10"", ""20"", ""30"", ""40"", ""50"".
 The label table is then set on the slider by calling
 setLabelTable.

Parameters:
n - new value for the majorTickSpacing property
See Also:
getMajorTickSpacing(), 
setPaintTicks(boolean), 
setLabelTable(java.util.Dictionary), 
createStandardLabels(int)


"
JSlider,setMaximum(int maximum),void,Sets the slider's maximum value to maximum.,"

setMaximum
public void setMaximum(int maximum)
Sets the slider's maximum value to maximum.  This method
 forwards the new maximum value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new maximum value is different from the previous maximum value,
 all change listeners are notified.

Parameters:
maximum - the new maximum
See Also:
getMaximum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMaximum(int)


"
JSlider,setMinimum(int minimum),void,Sets the slider's minimum value to minimum.,"

setMinimum
public void setMinimum(int minimum)
Sets the slider's minimum value to minimum.  This method
 forwards the new minimum value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new minimum value is different from the previous minimum value,
 all change listeners are notified.

Parameters:
minimum - the new minimum
See Also:
getMinimum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMinimum(int)


"
JSlider,setMinorTickSpacing(int n),void,This method sets the minor tick spacing.,"

setMinorTickSpacing
public void setMinorTickSpacing(int n)
This method sets the minor tick spacing.  The number that is passed in
 represents the distance, measured in values, between each minor tick mark.
 If you have a slider with a range from 0 to 50 and the minor tick spacing
 is set to 10, you will get minor ticks next to the following values:
 0, 10, 20, 30, 40, 50.
 
 In order for minor ticks to be painted, setPaintTicks must be
 set to true.

Parameters:
n - new value for the minorTickSpacing property
See Also:
getMinorTickSpacing(), 
setPaintTicks(boolean)


"
JSlider,setModel(BoundedRangeModel newModel),void,"Sets the BoundedRangeModel that handles the slider's three fundamental properties: minimum, maximum, value.","

setModel
public void setModel(BoundedRangeModel newModel)
Sets the BoundedRangeModel that handles the slider's three
 fundamental properties: minimum, maximum, value.

 Attempts to pass a null model to this method result in
 undefined behavior, and, most likely, exceptions.

Parameters:
newModel - the new, non-null BoundedRangeModel to use
See Also:
getModel(), 
BoundedRangeModel


"
JSlider,setOrientation(int orientation),void,Set the slider's orientation to either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.,"

setOrientation
public void setOrientation(int orientation)
Set the slider's orientation to either SwingConstants.VERTICAL or
 SwingConstants.HORIZONTAL.

Parameters:
orientation - HORIZONTAL or VERTICAL
Throws:
IllegalArgumentException - if orientation is not one of VERTICAL, HORIZONTAL
See Also:
getOrientation()


"
JSlider,setPaintLabels(boolean b),void,Determines whether labels are painted on the slider.,"

setPaintLabels
public void setPaintLabels(boolean b)
Determines whether labels are painted on the slider.
 
 This method will also set up a label table for you.
 If there is not already a label table, and the major tick spacing is
 > 0,
 a standard label table will be generated (by calling
 createStandardLabels) with labels at the major tick marks.
 The label table is then set on the slider by calling
 setLabelTable.
 
 By default, this property is false.

Parameters:
b - whether or not to paint labels
See Also:
getPaintLabels(), 
getLabelTable(), 
createStandardLabels(int)


"
JSlider,setPaintTicks(boolean b),void,Determines whether tick marks are painted on the slider.,"

setPaintTicks
public void setPaintTicks(boolean b)
Determines whether tick marks are painted on the slider.
 By default, this property is false.

Parameters:
b - whether or not tick marks should be painted
See Also:
getPaintTicks()


"
JSlider,setPaintTrack(boolean b),void,Determines whether the track is painted on the slider.,"

setPaintTrack
public void setPaintTrack(boolean b)
Determines whether the track is painted on the slider.
 By default, this property is true.

Parameters:
b - whether or not to paint the slider track
See Also:
getPaintTrack()


"
JSlider,setSnapToTicks(boolean b),void,Specifying true makes the knob (and the data value it represents) resolve to the closest tick mark next to where the user positioned the knob.,"

setSnapToTicks
public void setSnapToTicks(boolean b)
Specifying true makes the knob (and the data value it represents)
 resolve to the closest tick mark next to where the user
 positioned the knob.
 By default, this property is false.

Parameters:
b - true to snap the knob to the nearest tick mark
See Also:
getSnapToTicks()


"
JSlider,setUI(SliderUI ui),void,Sets the UI object which implements the L&F for this component.,"

setUI
public void setUI(SliderUI ui)
Sets the UI object which implements the L&F for this component.

Parameters:
ui - the SliderUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JSlider,setValue(int n),void,Sets the slider's current value to n.,"

setValue
public void setValue(int n)
Sets the slider's current value to n.  This method
 forwards the new value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new value is different from the previous value,
 all change listeners are notified.

Parameters:
n - the new value
See Also:
getValue(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setValue(int)


"
JSlider,setValueIsAdjusting(boolean b),void,Sets the model's valueIsAdjusting property.,"

setValueIsAdjusting
public void setValueIsAdjusting(boolean b)
Sets the model's valueIsAdjusting property.  Slider look and
 feel implementations should set this property to true when
 a knob drag begins, and to false when the drag ends.

Parameters:
b - the new value for the valueIsAdjusting property
See Also:
getValueIsAdjusting(), 
BoundedRangeModel.setValueIsAdjusting(boolean)


"
JSlider,updateLabelUIs(),protected void,Updates the UIs for the labels in the label table by calling updateUI on each label.,"

updateLabelUIs
protected void updateLabelUIs()
Updates the UIs for the labels in the label table by calling
 updateUI on each label.  The UIs are updated from
 the current look and feel.  The labels are also set to their
 preferred size.

See Also:
setLabelTable(java.util.Dictionary), 
JComponent.updateUI()


"
JSlider,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JSpinner,addChangeListener(ChangeListener listener),void,Adds a listener to the list that is notified each time a change to the model occurs.,"

addChangeListener
public void addChangeListener(ChangeListener listener)
Adds a listener to the list that is notified each time a change
 to the model occurs.  The source of ChangeEvents
 delivered to ChangeListeners will be this
 JSpinner.  Note also that replacing the model
 will not affect listeners added directly to JSpinner.
 Applications can add listeners to  the model directly.  In that
 case is that the source of the event would be the
 SpinnerModel.

Parameters:
listener - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
getModel()


"
JSpinner,commitEdit(),void,Commits the currently edited value to the SpinnerModel.,"

commitEdit
public void commitEdit()
                throws ParseException
Commits the currently edited value to the SpinnerModel.
 
 If the editor is an instance of DefaultEditor, the
 call if forwarded to the editor, otherwise this does nothing.

Throws:
ParseException - if the currently edited value couldn't
         be committed.


"
JSpinner,createEditor(SpinnerModel model),protected JComponent,This method is called by the constructors to create the JComponent that displays the current value of the sequence.,"

createEditor
protected JComponent createEditor(SpinnerModel model)
This method is called by the constructors to create the
 JComponent
 that displays the current value of the sequence.  The editor may
 also allow the user to enter an element of the sequence directly.
 An editor must listen for ChangeEvents on the
 model and keep the value it displays
 in sync with the value of the model.
 
 Subclasses may override this method to add support for new
 SpinnerModel classes.  Alternatively one can just
 replace the editor created here with the setEditor
 method.  The default mapping from model type to editor is:
 
 SpinnerNumberModel => JSpinner.NumberEditor
 SpinnerDateModel => JSpinner.DateEditor
 SpinnerListModel => JSpinner.ListEditor
 all others => JSpinner.DefaultEditor


Parameters:
model - the value of getModel
Returns:
a component that displays the current value of the sequence
See Also:
getModel(), 
setEditor(javax.swing.JComponent)


"
JSpinner,fireStateChanged(),protected void,"Sends a ChangeEvent, whose source is this JSpinner, to each ChangeListener.","

fireStateChanged
protected void fireStateChanged()
Sends a ChangeEvent, whose source is this
 JSpinner, to each ChangeListener.
 When a ChangeListener has been added
 to the spinner, this method method is called each time
 a ChangeEvent is received from the model.

See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener), 
EventListenerList


"
JSpinner,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext for the JSpinner,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext for the JSpinner

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
the AccessibleContext for the JSpinner
Since:
1.5


"
JSpinner,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JSpinner with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this JSpinner with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JSpinner,getEditor(),JComponent,Returns the component that displays and potentially changes the model's value.,"

getEditor
public JComponent getEditor()
Returns the component that displays and potentially
 changes the model's value.

Returns:
the component that displays and potentially
    changes the model's value
See Also:
setEditor(javax.swing.JComponent), 
createEditor(javax.swing.SpinnerModel)


"
JSpinner,getModel(),SpinnerModel,Returns the SpinnerModel that defines this spinners sequence of values.,"

getModel
public SpinnerModel getModel()
Returns the SpinnerModel that defines
 this spinners sequence of values.

Returns:
the value of the model property
See Also:
setModel(javax.swing.SpinnerModel)


"
JSpinner,getNextValue(),Object,Returns the object in the sequence that comes after the object returned by getValue().,"

getNextValue
public Object getNextValue()
Returns the object in the sequence that comes after the object returned
 by getValue(). If the end of the sequence has been reached
 then return null.
 Calling this method does not effect value.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().getNextValue()
 

Returns:
the next legal value or null if one doesn't exist
See Also:
getValue(), 
getPreviousValue(), 
SpinnerModel.getNextValue()


"
JSpinner,getPreviousValue(),Object,Returns the object in the sequence that comes before the object returned by getValue().,"

getPreviousValue
public Object getPreviousValue()
Returns the object in the sequence that comes
 before the object returned by getValue().
 If the end of the sequence has been reached then
 return null. Calling this method does
 not effect value.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().getPreviousValue()
 

Returns:
the previous legal value or null
   if one doesn't exist
See Also:
getValue(), 
getNextValue(), 
SpinnerModel.getPreviousValue()


"
JSpinner,getUI(),SpinnerUI,Returns the look and feel (L&F) object that renders this component.,"

getUI
public SpinnerUI getUI()
Returns the look and feel (L&F) object that renders this component.

Returns:
the SpinnerUI object that renders this component


"
JSpinner,getUIClassID(),String,Returns the suffix used to construct the name of the look and feel (L&F) class used to render this component.,"

getUIClassID
public String getUIClassID()
Returns the suffix used to construct the name of the look and feel
 (L&F) class used to render this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""SpinnerUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JSpinner,getValue(),Object,"Returns the current value of the model, typically this value is displayed by the editor.","

getValue
public Object getValue()
Returns the current value of the model, typically
 this value is displayed by the editor. If the
 user has changed the value displayed by the editor it is
 possible for the model's value to differ from that of
 the editor, refer to the class level javadoc for examples
 of how to deal with this.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().getValue()
 

See Also:
setValue(java.lang.Object), 
SpinnerModel.getValue()


"
JSpinner,removeChangeListener(ChangeListener listener),void,Removes a ChangeListener from this spinner.,"

removeChangeListener
public void removeChangeListener(ChangeListener listener)
Removes a ChangeListener from this spinner.

Parameters:
listener - the ChangeListener to remove
See Also:
fireStateChanged(), 
addChangeListener(javax.swing.event.ChangeListener)


"
JSpinner,setEditor(JComponent editor),void,Changes the JComponent that displays the current value of the SpinnerModel.,"

setEditor
public void setEditor(JComponent editor)
Changes the JComponent that displays the current value
 of the SpinnerModel.  It is the responsibility of this
 method to disconnect the old editor from the model and to
 connect the new editor.  This may mean removing the
 old editors ChangeListener from the model or the
 spinner itself and adding one for the new editor.

Parameters:
editor - the new editor
Throws:
IllegalArgumentException - if editor is null
See Also:
getEditor(), 
createEditor(javax.swing.SpinnerModel), 
getModel()


"
JSpinner,setModel(SpinnerModel model),void,Changes the model that represents the value of this spinner.,"

setModel
public void setModel(SpinnerModel model)
Changes the model that represents the value of this spinner.
 If the editor property has not been explicitly set,
 the editor property is (implicitly) set after the ""model""
PropertyChangeEvent has been fired.  The editor
 property is set to the value returned by createEditor,
 as in:
 
 setEditor(createEditor(model));
 

Parameters:
model - the new SpinnerModel
Throws:
IllegalArgumentException - if model is null
See Also:
getModel(), 
getEditor(), 
setEditor(javax.swing.JComponent)


"
JSpinner,setUI(SpinnerUI ui),void,Sets the look and feel (L&F) object that renders this component.,"

setUI
public void setUI(SpinnerUI ui)
Sets the look and feel (L&F) object that renders this component.

Parameters:
ui - the SpinnerUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JSpinner,setValue(Object value),void,"Changes current value of the model, typically this value is displayed by the editor.","

setValue
public void setValue(Object value)
Changes current value of the model, typically
 this value is displayed by the editor.
 If the SpinnerModel implementation
 doesn't support the specified value then an
 IllegalArgumentException is thrown.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().setValue(value)
 

Throws:
IllegalArgumentException - if value isn't allowed
See Also:
getValue(), 
SpinnerModel.setValue(java.lang.Object)


"
JSpinner,updateUI(),void,Resets the UI property with the value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property with the value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
UIManager.getUI(javax.swing.JComponent)


"
JSpinner.DateEditor,getFormat(),SimpleDateFormat,Returns the java.text.SimpleDateFormat object the JFormattedTextField uses to parse and format numbers.,"

getFormat
public SimpleDateFormat getFormat()
Returns the java.text.SimpleDateFormat object the
 JFormattedTextField uses to parse and format
 numbers.

Returns:
the value of getTextField().getFormatter().getFormat().
See Also:
JSpinner.DefaultEditor.getTextField(), 
SimpleDateFormat


"
JSpinner.DateEditor,getModel(),SpinnerDateModel,Return our spinner ancestor's SpinnerDateModel.,"

getModel
public SpinnerDateModel getModel()
Return our spinner ancestor's SpinnerDateModel.

Returns:
getSpinner().getModel()
See Also:
JSpinner.DefaultEditor.getSpinner(), 
JSpinner.DefaultEditor.getTextField()


"
JSpinner.DefaultEditor,"addLayoutComponent(String name, Component child)",void,This LayoutManager method does nothing.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component child)
This LayoutManager method does nothing.  We're
 only managing a single child and there's no support
 for layout constraints.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - ignored
child - ignored


"
JSpinner.DefaultEditor,commitEdit(),void,Pushes the currently edited value to the SpinnerModel.,"

commitEdit
public void commitEdit()
                throws ParseException
Pushes the currently edited value to the SpinnerModel.
 
 The default implementation invokes commitEdit on the
 JFormattedTextField.

Throws:
ParseException - if the edited value is not legal


"
JSpinner.DefaultEditor,dismiss(JSpinner spinner),void,Disconnect this editor from the specified JSpinner.,"

dismiss
public void dismiss(JSpinner spinner)
Disconnect this editor from the specified
 JSpinner.  By default, this method removes
 itself from the spinners ChangeListener list.

Parameters:
spinner - the JSpinner to disconnect this
    editor from; the same spinner as was passed to the constructor.


"
JSpinner.DefaultEditor,"getBaseline(int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class JComponent
Parameters:
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
the baseline or < 0 indicating there is no reasonable
         baseline
Throws:
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int,int), 
JComponent.getBaselineResizeBehavior()


"
JSpinner.DefaultEditor,getBaselineResizeBehavior(),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior()
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class JComponent
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
JSpinner.DefaultEditor,getSpinner(),JSpinner,Returns the JSpinner ancestor of this editor or null if none of the ancestors are a JSpinner.,"

getSpinner
public JSpinner getSpinner()
Returns the JSpinner ancestor of this editor or
 null if none of the ancestors are a
 JSpinner.
 Typically the editor's parent is a JSpinner however
 subclasses of JSpinner may override the
 the createEditor method and insert one or more containers
 between the JSpinner and it's editor.

Returns:
JSpinner ancestor; null
         if none of the ancestors are a JSpinner
See Also:
JSpinner.createEditor(javax.swing.SpinnerModel)


"
JSpinner.DefaultEditor,getTextField(),JFormattedTextField,Returns the JFormattedTextField child of this editor.,"

getTextField
public JFormattedTextField getTextField()
Returns the JFormattedTextField child of this
 editor.  By default the text field is the first and only
 child of editor.

Returns:
the JFormattedTextField that gives the user
     access to the SpinnerDateModel's value.
See Also:
getSpinner(), 
JSpinner.getModel()


"
JSpinner.DefaultEditor,layoutContainer(Container parent),void,Resize the one (and only) child to completely fill the area within the parents insets.,"

layoutContainer
public void layoutContainer(Container parent)
Resize the one (and only) child to completely fill the area
 within the parents insets.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container to be laid out


"
JSpinner.DefaultEditor,minimumLayoutSize(Container parent),Dimension,Returns the minimum size of first (and only) child plus the size of the parents insets.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
Returns the minimum size of first (and only) child plus the
 size of the parents insets.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the Container that's managing the layout
Returns:
the minimum dimensions needed to lay out the subcomponents
          of the specified container.
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
JSpinner.DefaultEditor,preferredLayoutSize(Container parent),Dimension,Returns the preferred size of first (and only) child plus the size of the parents insets.,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
Returns the preferred size of first (and only) child plus the
 size of the parents insets.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the Container that's managing the layout
Returns:
the preferred dimensions to lay out the subcomponents
          of the specified container.
See Also:
LayoutManager.minimumLayoutSize(java.awt.Container)


"
JSpinner.DefaultEditor,propertyChange(PropertyChangeEvent e),void,Called by the JFormattedTextFieldPropertyChangeListener.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Called by the JFormattedTextField
PropertyChangeListener.  When the ""value""
 property changes, which implies that the user has typed a new
 number, we set the value of the spinners model.
 
 This class ignores PropertyChangeEvents whose
 source is not the JFormattedTextField, so subclasses
 may safely make this DefaultEditor a
 PropertyChangeListener on other objects.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - the PropertyChangeEvent whose source is
    the JFormattedTextField created by this class.
See Also:
getTextField()


"
JSpinner.DefaultEditor,removeLayoutComponent(Component child),void,This LayoutManager method does nothing.,"

removeLayoutComponent
public void removeLayoutComponent(Component child)
This LayoutManager method does nothing.  There
 isn't any per-child state.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
child - ignored


"
JSpinner.DefaultEditor,stateChanged(ChangeEvent e),void,This method is called when the spinner's model's state changes.,"

stateChanged
public void stateChanged(ChangeEvent e)
This method is called when the spinner's model's state changes.
 It sets the value of the text field to the current
 value of the spinners model.

Specified by:
stateChanged in interface ChangeListener
Parameters:
e - the ChangeEvent whose source is the
 JSpinner whose model has changed.
See Also:
getTextField(), 
JSpinner.getValue()


"
JSpinner.ListEditor,getModel(),SpinnerListModel,Return our spinner ancestor's SpinnerNumberModel.,"

getModel
public SpinnerListModel getModel()
Return our spinner ancestor's SpinnerNumberModel.

Returns:
getSpinner().getModel()
See Also:
JSpinner.DefaultEditor.getSpinner(), 
JSpinner.DefaultEditor.getTextField()


"
JSpinner.NumberEditor,getFormat(),DecimalFormat,Returns the java.text.DecimalFormat object the JFormattedTextField uses to parse and format numbers.,"

getFormat
public DecimalFormat getFormat()
Returns the java.text.DecimalFormat object the
 JFormattedTextField uses to parse and format
 numbers.

Returns:
the value of getTextField().getFormatter().getFormat().
See Also:
JSpinner.DefaultEditor.getTextField(), 
DecimalFormat


"
JSpinner.NumberEditor,getModel(),SpinnerNumberModel,Return our spinner ancestor's SpinnerNumberModel.,"

getModel
public SpinnerNumberModel getModel()
Return our spinner ancestor's SpinnerNumberModel.

Returns:
getSpinner().getModel()
See Also:
JSpinner.DefaultEditor.getSpinner(), 
JSpinner.DefaultEditor.getTextField()


"
JSplitPane,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified component to this split pane.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified component to this split pane.
 If constraints identifies the left/top or
 right/bottom child component, and a component with that identifier
 was previously added, it will be removed and then comp
 will be added in its place. If constraints is not
 one of the known identifiers the layout manager may throw an
 IllegalArgumentException.
 
 The possible constraints objects (Strings) are:
 
JSplitPane.TOP
 JSplitPane.LEFT
 JSplitPane.BOTTOM
 JSplitPane.RIGHT
 
 If the constraints object is null,
 the component is added in the
 first available position (left/top if open, else right/bottom).

Overrides:
addImpl in class Container
Parameters:
comp - the component to add
constraints - an Object specifying the
                    layout constraints
                    (position) for this component
index - an integer specifying the index in the container's
                    list.
Throws:
IllegalArgumentException - if the constraints
          object does not match an existing component
See Also:
Container.addImpl(Component, Object, int)


"
JSplitPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JSplitPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JSplitPane.
 For split panes, the AccessibleContext takes the form of an
 AccessibleJSplitPane.
 A new AccessibleJSplitPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJSplitPane that serves as the
         AccessibleContext of this JSplitPane


"
JSplitPane,getBottomComponent(),Component,"Returns the component below, or to the right of the divider.","

getBottomComponent
public Component getBottomComponent()
Returns the component below, or to the right of the divider.

Returns:
the Component displayed in that position


"
JSplitPane,getDividerLocation(),int,Returns the last value passed to setDividerLocation.,"

getDividerLocation
public int getDividerLocation()
Returns the last value passed to setDividerLocation.
 The value returned from this method may differ from the actual
 divider location (if setDividerLocation was passed a
 value bigger than the current size).

Returns:
an integer specifying the location of the divider


"
JSplitPane,getDividerSize(),int,Returns the size of the divider.,"

getDividerSize
public int getDividerSize()
Returns the size of the divider.

Returns:
an integer giving the size of the divider in pixels


"
JSplitPane,getLastDividerLocation(),int,Returns the last location the divider was at.,"

getLastDividerLocation
public int getLastDividerLocation()
Returns the last location the divider was at.

Returns:
an integer specifying the last divider location as a count
       of pixels from the left (or upper) edge of the pane to the
       left (or upper) edge of the divider


"
JSplitPane,getLeftComponent(),Component,Returns the component to the left (or above) the divider.,"

getLeftComponent
public Component getLeftComponent()
Returns the component to the left (or above) the divider.

Returns:
the Component displayed in that position


"
JSplitPane,getMaximumDividerLocation(),int,Returns the maximum location of the divider from the look and feel implementation.,"

getMaximumDividerLocation
public int getMaximumDividerLocation()
Returns the maximum location of the divider from the look and feel
 implementation.

Returns:
an integer specifying a UI-specific value for the maximum
          location (typically a pixel count); or -1 if the  UI is
          null


"
JSplitPane,getMinimumDividerLocation(),int,Returns the minimum location of the divider from the look and feel implementation.,"

getMinimumDividerLocation
public int getMinimumDividerLocation()
Returns the minimum location of the divider from the look and feel
 implementation.

Returns:
an integer specifying a UI-specific value for the minimum
          location (typically a pixel count); or -1 if the UI is
          null


"
JSplitPane,getOrientation(),int,Returns the orientation.,"

getOrientation
public int getOrientation()
Returns the orientation.

Returns:
an integer giving the orientation
See Also:
setOrientation(int)


"
JSplitPane,getResizeWeight(),double,Returns the number that determines how extra space is distributed.,"

getResizeWeight
public double getResizeWeight()
Returns the number that determines how extra space is distributed.

Returns:
how extra space is to be distributed on a resize of the
         split pane
Since:
1.3


"
JSplitPane,getRightComponent(),Component,Returns the component to the right (or below) the divider.,"

getRightComponent
public Component getRightComponent()
Returns the component to the right (or below) the divider.

Returns:
the Component displayed in that position


"
JSplitPane,getTopComponent(),Component,"Returns the component above, or to the left of the divider.","

getTopComponent
public Component getTopComponent()
Returns the component above, or to the left of the divider.

Returns:
the Component displayed in that position


"
JSplitPane,getUI(),SplitPaneUI,Returns the SplitPaneUI that is providing the current look and feel.,"

getUI
public SplitPaneUI getUI()
Returns the SplitPaneUI that is providing the
 current look and feel.

Returns:
the SplitPaneUI object that renders this component


"
JSplitPane,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""SplitPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JSplitPane,isContinuousLayout(),boolean,Gets the continuousLayout property.,"

isContinuousLayout
public boolean isContinuousLayout()
Gets the continuousLayout property.

Returns:
the value of the continuousLayout property
See Also:
setContinuousLayout(boolean)


"
JSplitPane,isOneTouchExpandable(),boolean,Gets the oneTouchExpandable property.,"

isOneTouchExpandable
public boolean isOneTouchExpandable()
Gets the oneTouchExpandable property.

Returns:
the value of the oneTouchExpandable property
See Also:
setOneTouchExpandable(boolean)


"
JSplitPane,isValidateRoot(),boolean,"Returns true, so that calls to revalidate on any descendant of this JSplitPane will cause a request to be queued that will validate the JSplitPane and all its descendants.","

isValidateRoot
public boolean isValidateRoot()
Returns true, so that calls to revalidate
 on any descendant of this JSplitPane
 will cause a request to be queued that
 will validate the JSplitPane and all its descendants.

Overrides:
isValidateRoot in class JComponent
Returns:
true
See Also:
JComponent.revalidate(), 
Container.isValidateRoot()


"
JSplitPane,paintChildren(Graphics g),protected void,"Subclassed to message the UI with finishedPaintingChildren after super has been messaged, as well as painting the border.","

paintChildren
protected void paintChildren(Graphics g)
Subclassed to message the UI with finishedPaintingChildren
 after super has been messaged, as well as painting the border.

Overrides:
paintChildren in class JComponent
Parameters:
g - the Graphics context within which to paint
See Also:
JComponent.paint(java.awt.Graphics), 
Container.paint(java.awt.Graphics)


"
JSplitPane,paramString(),protected String,Returns a string representation of this JSplitPane.,"

paramString
protected String paramString()
Returns a string representation of this JSplitPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JSplitPane.


"
JSplitPane,remove(Component component),void,"Removes the child component, component from the pane.","

remove
public void remove(Component component)
Removes the child component, component from the
 pane. Resets the leftComponent or
 rightComponent instance variable, as necessary.

Overrides:
remove in class Container
Parameters:
component - the Component to remove
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.remove(int)


"
JSplitPane,remove(int index),void,Removes the Component at the specified index.,"

remove
public void remove(int index)
Removes the Component at the specified index.
 Updates the leftComponent and rightComponent
 instance variables as necessary, and then messages super.

Overrides:
remove in class Container
Parameters:
index - an integer specifying the component to remove, where
        1 specifies the left/top component and 2 specifies the
        bottom/right component
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.getComponentCount()


"
JSplitPane,removeAll(),void,Removes all the child components from the split pane.,"

removeAll
public void removeAll()
Removes all the child components from the split pane. Resets the
 leftComonent and rightComponent
 instance variables.

Overrides:
removeAll in class Container
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
JSplitPane,resetToPreferredSizes(),void,Lays out the JSplitPane layout based on the preferred size of the children components.,"

resetToPreferredSizes
public void resetToPreferredSizes()
Lays out the JSplitPane layout based on the preferred size
 of the children components. This will likely result in changing
 the divider location.

"
JSplitPane,setBottomComponent(Component comp),void,"Sets the component below, or to the right of the divider.","

setBottomComponent
public void setBottomComponent(Component comp)
Sets the component below, or to the right of the divider.

Parameters:
comp - the Component to display in that position


"
JSplitPane,setContinuousLayout(boolean newContinuousLayout),void,"Sets the value of the continuousLayout property, which must be true for the child components to be continuously redisplayed and laid out during user intervention.","

setContinuousLayout
public void setContinuousLayout(boolean newContinuousLayout)
Sets the value of the continuousLayout property,
 which must be true for the child components
 to be continuously
 redisplayed and laid out during user intervention.
 The default value of this property is look and feel dependent.
 Some look and feels might not support continuous layout;
 they will ignore this property.

Parameters:
newContinuousLayout - true if the components
        should continuously be redrawn as the divider changes position
See Also:
isContinuousLayout()


"
JSplitPane,setDividerLocation(double proportionalLocation),void,Sets the divider location as a percentage of the JSplitPane's size.,"

setDividerLocation
public void setDividerLocation(double proportionalLocation)
Sets the divider location as a percentage of the
 JSplitPane's size.
 
 This method is implemented in terms of
 setDividerLocation(int).
 This method immediately changes the size of the split pane based on
 its current size. If the split pane is not correctly realized and on
 screen, this method will have no effect (new divider location will
 become (current size * proportionalLocation) which is 0).

Parameters:
proportionalLocation - a double-precision floating point value
        that specifies a percentage, from zero (top/left) to 1.0
        (bottom/right)
Throws:
IllegalArgumentException - if the specified location is < 0
            or > 1.0


"
JSplitPane,setDividerLocation(int location),void,Sets the location of the divider.,"

setDividerLocation
public void setDividerLocation(int location)
Sets the location of the divider. This is passed off to the
 look and feel implementation, and then listeners are notified. A value
 less than 0 implies the divider should be reset to a value that
 attempts to honor the preferred size of the left/top component.
 After notifying the listeners, the last divider location is updated,
 via setLastDividerLocation.

Parameters:
location - an int specifying a UI-specific value (typically a
        pixel count)


"
JSplitPane,setDividerSize(int newSize),void,Sets the size of the divider.,"

setDividerSize
public void setDividerSize(int newSize)
Sets the size of the divider.

Parameters:
newSize - an integer giving the size of the divider in pixels


"
JSplitPane,setLastDividerLocation(int newLastLocation),void,Sets the last location the divider was at to newLastLocation.,"

setLastDividerLocation
public void setLastDividerLocation(int newLastLocation)
Sets the last location the divider was at to
 newLastLocation.

Parameters:
newLastLocation - an integer specifying the last divider location
        in pixels, from the left (or upper) edge of the pane to the
        left (or upper) edge of the divider


"
JSplitPane,setLeftComponent(Component comp),void,Sets the component to the left (or above) the divider.,"

setLeftComponent
public void setLeftComponent(Component comp)
Sets the component to the left (or above) the divider.

Parameters:
comp - the Component to display in that position


"
JSplitPane,setOneTouchExpandable(boolean newValue),void,"Sets the value of the oneTouchExpandable property, which must be true for the JSplitPane to provide a UI widget on the divider to quickly expand/collapse the divider.","

setOneTouchExpandable
public void setOneTouchExpandable(boolean newValue)
Sets the value of the oneTouchExpandable property,
 which must be true for the
 JSplitPane to provide a UI widget
 on the divider to quickly expand/collapse the divider.
 The default value of this property is false.
 Some look and feels might not support one-touch expanding;
 they will ignore this property.

Parameters:
newValue - true to specify that the split pane should provide a
        collapse/expand widget
See Also:
isOneTouchExpandable()


"
JSplitPane,setOrientation(int orientation),void,"Sets the orientation, or how the splitter is divided.","

setOrientation
public void setOrientation(int orientation)
Sets the orientation, or how the splitter is divided. The options
 are:
JSplitPane.VERTICAL_SPLIT  (above/below orientation of components)
 JSplitPane.HORIZONTAL_SPLIT  (left/right orientation of components)
 

Parameters:
orientation - an integer specifying the orientation
Throws:
IllegalArgumentException - if orientation is not one of:
        HORIZONTAL_SPLIT or VERTICAL_SPLIT.


"
JSplitPane,setResizeWeight(double value),void,Specifies how to distribute extra space when the size of the split pane changes.,"

setResizeWeight
public void setResizeWeight(double value)
Specifies how to distribute extra space when the size of the split pane
 changes. A value of 0, the default,
 indicates the right/bottom component gets all the extra space (the
 left/top component acts fixed), where as a value of 1 specifies the
 left/top component gets all the extra space (the right/bottom component
 acts fixed). Specifically, the left/top component gets (weight * diff)
 extra space and the right/bottom component gets (1 - weight) * diff
 extra space.

Parameters:
value - as described above
Throws:
IllegalArgumentException - if value is < 0 or > 1
Since:
1.3


"
JSplitPane,setRightComponent(Component comp),void,Sets the component to the right (or below) the divider.,"

setRightComponent
public void setRightComponent(Component comp)
Sets the component to the right (or below) the divider.

Parameters:
comp - the Component to display in that position


"
JSplitPane,setTopComponent(Component comp),void,"Sets the component above, or to the left of the divider.","

setTopComponent
public void setTopComponent(Component comp)
Sets the component above, or to the left of the divider.

Parameters:
comp - the Component to display in that position


"
JSplitPane,setUI(SplitPaneUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(SplitPaneUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the SplitPaneUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JSplitPane,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JTabbedPane,add(Component component),Component,Adds a component with a tab title defaulting to the name of the component which is the result of calling component.getName.,"

add
public Component add(Component component)
Adds a component with a tab title defaulting to
 the name of the component which is the result of calling
 component.getName.
 Cover method for insertTab.

Overrides:
add in class Container
Parameters:
component - the component to be displayed when this tab is clicked
Returns:
the component
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"add(Component component, int index)",Component,Adds a component at the specified tab index with a tab title defaulting to the name of the component.,"

add
public Component add(Component component,
                     int index)
Adds a component at the specified tab index with a tab
 title defaulting to the name of the component.
 Cover method for insertTab.

Overrides:
add in class Container
Parameters:
component - the component to be displayed when this tab is clicked
index - the position to insert this new tab
Returns:
the component
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"add(Component component, Object constraints)",void,Adds a component to the tabbed pane.,"

add
public void add(Component component,
                Object constraints)
Adds a component to the tabbed pane.
 If constraints is a String or an
 Icon, it will be used for the tab title,
 otherwise the component's name will be used as the tab title.
 Cover method for insertTab.

Overrides:
add in class Container
Parameters:
component - the component to be displayed when this tab is clicked
constraints - the object to be displayed in the tab
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"add(Component component, Object constraints, int index)",void,Adds a component at the specified tab index.,"

add
public void add(Component component,
                Object constraints,
                int index)
Adds a component at the specified tab index.
 If constraints is a String or an
 Icon, it will be used for the tab title,
 otherwise the component's name will be used as the tab title.
 Cover method for insertTab.

Overrides:
add in class Container
Parameters:
component - the component to be displayed when this tab is clicked
constraints - the object to be displayed in the tab
index - the position to insert this new tab
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"add(String title, Component component)",Component,Adds a component with the specified tab title.,"

add
public Component add(String title,
                     Component component)
Adds a component with the specified tab title.
 Cover method for insertTab.

Overrides:
add in class Container
Parameters:
title - the title to be displayed in this tab
component - the component to be displayed when this tab is clicked
Returns:
the component
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,addChangeListener(ChangeListener l),void,Adds a ChangeListener to this tabbedpane.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to this tabbedpane.

Parameters:
l - the ChangeListener to add
See Also:
fireStateChanged(), 
removeChangeListener(javax.swing.event.ChangeListener)


"
JTabbedPane,"addTab(String title, Component component)",void,Adds a component represented by a title and no icon.,"

addTab
public void addTab(String title,
                   Component component)
Adds a component represented by a title
 and no icon.
 Cover method for insertTab.

Parameters:
title - the title to be displayed in this tab
component - the component to be displayed when this tab is clicked
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"addTab(String title, Icon icon, Component component)",void,"Adds a component represented by a title and/or icon, either of which can be null.","

addTab
public void addTab(String title,
                   Icon icon,
                   Component component)
Adds a component represented by a title
 and/or icon, either of which can be null.
 Cover method for insertTab.

Parameters:
title - the title to be displayed in this tab
icon - the icon to be displayed in this tab
component - the component to be displayed when this tab is clicked
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,"addTab(String title, Icon icon, Component component, String tip)",void,"Adds a component and tip represented by a title and/or icon, either of which can be null.","

addTab
public void addTab(String title,
                   Icon icon,
                   Component component,
                   String tip)
Adds a component and tip
 represented by a title and/or icon,
 either of which can be null.
 Cover method for insertTab.

Parameters:
title - the title to be displayed in this tab
icon - the icon to be displayed in this tab
component - the component to be displayed when this tab is clicked
tip - the tooltip to be displayed for this tab
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
JTabbedPane,createChangeListener(),protected ChangeListener,Subclasses that want to handle ChangeEvents differently can override this to return a subclass of ModelListener or another ChangeListener implementation.,"

createChangeListener
protected ChangeListener createChangeListener()
Subclasses that want to handle ChangeEvents differently
 can override this to return a subclass of ModelListener or
 another ChangeListener implementation.

See Also:
fireStateChanged()


"
JTabbedPane,fireStateChanged(),protected void,"Sends a ChangeEvent, with this JTabbedPane as the source, to each registered listener.","

fireStateChanged
protected void fireStateChanged()
Sends a ChangeEvent, with this JTabbedPane as the source,
 to each registered listener. This method is called each time there is
 a change to either the selected index or the selected tab in the
 JTabbedPane. Usually, the selected index and selected tab change
 together. However, there are some cases, such as tab addition, where the
 selected index changes and the same tab remains selected. There are other
 cases, such as deleting the selected tab, where the index remains the
 same, but a new tab moves to that index. Events are fired for all of
 these cases.

See Also:
addChangeListener(javax.swing.event.ChangeListener), 
EventListenerList


"
JTabbedPane,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTabbedPane.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JTabbedPane.
 For tabbed panes, the AccessibleContext takes the form of an
 AccessibleJTabbedPane.
 A new AccessibleJTabbedPane instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJTabbedPane that serves as the
         AccessibleContext of this JTabbedPane


"
JTabbedPane,getBackgroundAt(int index),Color,Returns the tab background color at index.,"

getBackgroundAt
public Color getBackgroundAt(int index)
Returns the tab background color at index.

Parameters:
index - the index of the item being queried
Returns:
the Color of the tab background at
          index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setBackgroundAt(int, java.awt.Color)


"
JTabbedPane,getBoundsAt(int index),Rectangle,Returns the tab bounds at index.,"

getBoundsAt
public Rectangle getBoundsAt(int index)
Returns the tab bounds at index.  If the tab at
 this index is not currently visible in the UI, then returns
 null.
 If there is no UI set on this tabbedpane,
 then returns null.

Parameters:
index - the index to be queried
Returns:
a Rectangle containing the tab bounds at
          index, or null if tab at
          index is not currently visible in the UI,
          or if there is no UI set on this tabbedpane
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)


"
JTabbedPane,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JTabbedPane with addChangeListener.,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this JTabbedPane with addChangeListener.

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JTabbedPane,getComponentAt(int index),Component,Returns the component at index.,"

getComponentAt
public Component getComponentAt(int index)
Returns the component at index.

Parameters:
index - the index of the item being queried
Returns:
the Component at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setComponentAt(int, java.awt.Component)


"
JTabbedPane,getDisabledIconAt(int index),Icon,Returns the tab disabled icon at index.,"

getDisabledIconAt
public Icon getDisabledIconAt(int index)
Returns the tab disabled icon at index.
 If the tab disabled icon doesn't exist at index
 this will forward the call to the look and feel to construct
 an appropriate disabled Icon from the corresponding enabled
 Icon. Some look and feels might not render the disabled Icon,
 in which case it won't be created.

Parameters:
index - the index of the item being queried
Returns:
the icon at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setDisabledIconAt(int, javax.swing.Icon)


"
JTabbedPane,getDisplayedMnemonicIndexAt(int tabIndex),int,"Returns the character, as an index, that the look and feel should provide decoration for as representing the mnemonic character.","

getDisplayedMnemonicIndexAt
public int getDisplayedMnemonicIndexAt(int tabIndex)
Returns the character, as an index, that the look and feel should
 provide decoration for as representing the mnemonic character.

Parameters:
tabIndex - the index of the tab that the mnemonic refers to
Returns:
index representing mnemonic character if one exists;
    otherwise returns -1
Throws:
IndexOutOfBoundsException - if index is out of range
            (tabIndex < 0 ||
              tabIndex >= tab count)
Since:
1.4
See Also:
setDisplayedMnemonicIndexAt(int,int), 
setMnemonicAt(int,int)


"
JTabbedPane,getForegroundAt(int index),Color,Returns the tab foreground color at index.,"

getForegroundAt
public Color getForegroundAt(int index)
Returns the tab foreground color at index.

Parameters:
index - the index of the item being queried
Returns:
the Color of the tab foreground at
          index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setForegroundAt(int, java.awt.Color)


"
JTabbedPane,getIconAt(int index),Icon,Returns the tab icon at index.,"

getIconAt
public Icon getIconAt(int index)
Returns the tab icon at index.

Parameters:
index - the index of the item being queried
Returns:
the icon at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setIconAt(int, javax.swing.Icon)


"
JTabbedPane,getMnemonicAt(int tabIndex),int,Returns the keyboard mnemonic for accessing the specified tab.,"

getMnemonicAt
public int getMnemonicAt(int tabIndex)
Returns the keyboard mnemonic for accessing the specified tab.
 The mnemonic is the key which when combined with the look and feel's
 mouseless modifier (usually Alt) will activate the specified
 tab.

Parameters:
tabIndex - the index of the tab that the mnemonic refers to
Returns:
the key code which represents the mnemonic;
         -1 if a mnemonic is not specified for the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (tabIndex < 0 ||
              tabIndex >= tab count)
Since:
1.4
See Also:
setDisplayedMnemonicIndexAt(int,int), 
setMnemonicAt(int,int)


"
JTabbedPane,getModel(),SingleSelectionModel,Returns the model associated with this tabbedpane.,"

getModel
public SingleSelectionModel getModel()
Returns the model associated with this tabbedpane.

See Also:
setModel(javax.swing.SingleSelectionModel)


"
JTabbedPane,getSelectedComponent(),Component,Returns the currently selected component for this tabbedpane.,"

getSelectedComponent
public Component getSelectedComponent()
Returns the currently selected component for this tabbedpane.
 Returns null if there is no currently selected tab.

Returns:
the component corresponding to the selected tab
See Also:
setSelectedComponent(java.awt.Component)


"
JTabbedPane,getSelectedIndex(),int,Returns the currently selected index for this tabbedpane.,"

getSelectedIndex
public int getSelectedIndex()
Returns the currently selected index for this tabbedpane.
 Returns -1 if there is no currently selected tab.

Returns:
the index of the selected tab
See Also:
setSelectedIndex(int)


"
JTabbedPane,getTabComponentAt(int index),Component,Returns the tab component at index.,"

getTabComponentAt
public Component getTabComponentAt(int index)
Returns the tab component at index.

Parameters:
index - the index of the item being queried
Returns:
the tab component at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
Since:
1.6
See Also:
setTabComponentAt(int, java.awt.Component)


"
JTabbedPane,getTabCount(),int,Returns the number of tabs in this tabbedpane.,"

getTabCount
public int getTabCount()
Returns the number of tabs in this tabbedpane.

Returns:
an integer specifying the number of tabbed pages


"
JTabbedPane,getTabLayoutPolicy(),int,Returns the policy used by the tabbedpane to layout the tabs when all the tabs will not fit within a single run.,"

getTabLayoutPolicy
public int getTabLayoutPolicy()
Returns the policy used by the tabbedpane to layout the tabs when all the
 tabs will not fit within a single run.

Since:
1.4
See Also:
setTabLayoutPolicy(int)


"
JTabbedPane,getTabPlacement(),int,Returns the placement of the tabs for this tabbedpane.,"

getTabPlacement
public int getTabPlacement()
Returns the placement of the tabs for this tabbedpane.

See Also:
setTabPlacement(int)


"
JTabbedPane,getTabRunCount(),int,Returns the number of tab runs currently used to display the tabs.,"

getTabRunCount
public int getTabRunCount()
Returns the number of tab runs currently used to display
 the tabs.

Returns:
an integer giving the number of rows if the
          tabPlacement
          is TOP or BOTTOM
          and the number of columns if
          tabPlacement
          is LEFT or RIGHT,
          or 0 if there is no UI set on this tabbedpane


"
JTabbedPane,getTitleAt(int index),String,Returns the tab title at index.,"

getTitleAt
public String getTitleAt(int index)
Returns the tab title at index.

Parameters:
index - the index of the item being queried
Returns:
the title at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setTitleAt(int, java.lang.String)


"
JTabbedPane,getToolTipText(MouseEvent event),String,Returns the tooltip text for the component determined by the mouse event location.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Returns the tooltip text for the component determined by the
 mouse event location.

Overrides:
getToolTipText in class JComponent
Parameters:
event - the MouseEvent that tells where the
          cursor is lingering
Returns:
the String containing the tooltip text


"
JTabbedPane,getToolTipTextAt(int index),String,Returns the tab tooltip text at index.,"

getToolTipTextAt
public String getToolTipTextAt(int index)
Returns the tab tooltip text at index.

Parameters:
index - the index of the item being queried
Returns:
a string containing the tool tip text at index
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
Since:
1.3
See Also:
setToolTipTextAt(int, java.lang.String)


"
JTabbedPane,getUI(),TabbedPaneUI,Returns the UI object which implements the L&F for this component.,"

getUI
public TabbedPaneUI getUI()
Returns the UI object which implements the L&F for this component.

Returns:
a TabbedPaneUI object
See Also:
setUI(javax.swing.plaf.TabbedPaneUI)


"
JTabbedPane,getUIClassID(),String,Returns the name of the UI class that implements the L&F for this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the UI class that implements the
 L&F for this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""TabbedPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTabbedPane,"indexAtLocation(int x, int y)",int,Returns the tab index corresponding to the tab whose bounds intersect the specified location.,"

indexAtLocation
public int indexAtLocation(int x,
                           int y)
Returns the tab index corresponding to the tab whose bounds
 intersect the specified location.  Returns -1 if no tab
 intersects the location.

Parameters:
x - the x location relative to this tabbedpane
y - the y location relative to this tabbedpane
Returns:
the tab index which intersects the location, or
         -1 if no tab intersects the location
Since:
1.4


"
JTabbedPane,indexOfComponent(Component component),int,Returns the index of the tab for the specified component.,"

indexOfComponent
public int indexOfComponent(Component component)
Returns the index of the tab for the specified component.
 Returns -1 if there is no tab for this component.

Parameters:
component - the component for the tab
Returns:
the first tab which matches this component, or -1
          if there is no tab for this component


"
JTabbedPane,indexOfTab(Icon icon),int,"Returns the first tab index with a given icon, or -1 if no tab has this icon.","

indexOfTab
public int indexOfTab(Icon icon)
Returns the first tab index with a given icon,
 or -1 if no tab has this icon.

Parameters:
icon - the icon for the tab
Returns:
the first tab index which matches icon,
          or -1 if no tab has this icon


"
JTabbedPane,indexOfTab(String title),int,"Returns the first tab index with a given title, or -1 if no tab has this title.","

indexOfTab
public int indexOfTab(String title)
Returns the first tab index with a given title,  or
 -1 if no tab has this title.

Parameters:
title - the title for the tab
Returns:
the first tab index which matches title, or
          -1 if no tab has this title


"
JTabbedPane,indexOfTabComponent(Component tabComponent),int,Returns the index of the tab for the specified tab component.,"

indexOfTabComponent
public int indexOfTabComponent(Component tabComponent)
Returns the index of the tab for the specified tab component.
 Returns -1 if there is no tab for this tab component.

Parameters:
tabComponent - the tab component for the tab
Returns:
the first tab which matches this tab component, or -1
          if there is no tab for this tab component
Since:
1.6
See Also:
setTabComponentAt(int, java.awt.Component), 
getTabComponentAt(int)


"
JTabbedPane,"insertTab(String title, Icon icon, Component component, String tip, int index)",void,"Inserts a new tab for the given component, at the given index, represented by the given title and/or icon, either of which may be null.","

insertTab
public void insertTab(String title,
                      Icon icon,
                      Component component,
                      String tip,
                      int index)
Inserts a new tab for the given component, at the given index,
 represented by the given title and/or icon, either of which may
 be null.

Parameters:
title - the title to be displayed on the tab
icon - the icon to be displayed on the tab
component - the component to be displayed when this tab is clicked.
tip - the tooltip to be displayed for this tab
index - the position to insert this new tab
       (> 0 and <= getTabCount())
Throws:
IndexOutOfBoundsException - if the index is out of range
         (< 0 or > getTabCount())
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
JTabbedPane,isEnabledAt(int index),boolean,Returns whether or not the tab at index is currently enabled.,"

isEnabledAt
public boolean isEnabledAt(int index)
Returns whether or not the tab at index is
 currently enabled.

Parameters:
index - the index of the item being queried
Returns:
true if the tab at index is enabled;
          false otherwise
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setEnabledAt(int, boolean)


"
JTabbedPane,paramString(),protected String,Returns a string representation of this JTabbedPane.,"

paramString
protected String paramString()
Returns a string representation of this JTabbedPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JTabbedPane.


"
JTabbedPane,remove(Component component),void,Removes the specified Component from the JTabbedPane.,"

remove
public void remove(Component component)
Removes the specified Component from the
 JTabbedPane. The method does nothing
 if the component is null.

Overrides:
remove in class Container
Parameters:
component - the component to remove from the tabbedpane
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
JTabbedPane,remove(int index),void,Removes the tab and component which corresponds to the specified index.,"

remove
public void remove(int index)
Removes the tab and component which corresponds to the specified index.

Overrides:
remove in class Container
Parameters:
index - the index of the component to remove from the
          tabbedpane
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
JTabbedPane,removeAll(),void,Removes all the tabs and their corresponding components from the tabbedpane.,"

removeAll
public void removeAll()
Removes all the tabs and their corresponding components
 from the tabbedpane.

Overrides:
removeAll in class Container
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
JTabbedPane,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from this tabbedpane.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from this tabbedpane.

Parameters:
l - the ChangeListener to remove
See Also:
fireStateChanged(), 
addChangeListener(javax.swing.event.ChangeListener)


"
JTabbedPane,removeTabAt(int index),void,Removes the tab at index.,"

removeTabAt
public void removeTabAt(int index)
Removes the tab at index.
 After the component associated with index is removed,
 its visibility is reset to true to ensure it will be visible
 if added to other containers.

Parameters:
index - the index of the tab to be removed
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int)


"
JTabbedPane,"setBackgroundAt(int index, Color background)",void,"Sets the background color at index to background which can be null, in which case the tab's background color will default to the background color of the tabbedpane.","

setBackgroundAt
public void setBackgroundAt(int index,
                            Color background)
Sets the background color at index to
 background
 which can be null, in which case the tab's background color
 will default to the background color of the tabbedpane.
 An internal exception is raised if there is no tab at that index.
 
 It is up to the look and feel to honor this property, some may
 choose to ignore it.

Parameters:
index - the tab index where the background should be set
background - the color to be displayed in the tab's background
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getBackgroundAt(int)


"
JTabbedPane,"setComponentAt(int index, Component component)",void,Sets the component at index to component.,"

setComponentAt
public void setComponentAt(int index,
                           Component component)
Sets the component at index to component.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where this component is being placed
component - the component for the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getComponentAt(int)


"
JTabbedPane,"setDisabledIconAt(int index, Icon disabledIcon)",void,Sets the disabled icon at index to icon which can be null.,"

setDisabledIconAt
public void setDisabledIconAt(int index,
                              Icon disabledIcon)
Sets the disabled icon at index to icon
 which can be null.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the disabled icon should be set
disabledIcon - the icon to be displayed in the tab when disabled
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getDisabledIconAt(int)


"
JTabbedPane,"setDisplayedMnemonicIndexAt(int tabIndex, int mnemonicIndex)",void,Provides a hint to the look and feel as to which character in the text should be decorated to represent the mnemonic.,"

setDisplayedMnemonicIndexAt
public void setDisplayedMnemonicIndexAt(int tabIndex,
                                        int mnemonicIndex)
Provides a hint to the look and feel as to which character in the
 text should be decorated to represent the mnemonic. Not all look and
 feels may support this. A value of -1 indicates either there is
 no mnemonic for this tab, or you do not wish the mnemonic to be
 displayed for this tab.
 
 The value of this is updated as the properties relating to the
 mnemonic change (such as the mnemonic itself, the text...).
 You should only ever have to call this if
 you do not wish the default character to be underlined. For example, if
 the text at tab index 3 was 'Apple Price', with a mnemonic of 'p',
 and you wanted the 'P'
 to be decorated, as 'Apple Price', you would have to invoke
 setDisplayedMnemonicIndex(3, 6) after invoking
 setMnemonicAt(3, KeyEvent.VK_P).
 Note that it is the programmer's responsibility to ensure
 that each tab has a unique mnemonic or unpredictable results may
 occur.

Parameters:
tabIndex - the index of the tab that the mnemonic refers to
mnemonicIndex - index into the String to underline
Throws:
IndexOutOfBoundsException - if tabIndex is
            out of range (tabIndex < 0 || tabIndex >= tab
            count)
IllegalArgumentException - will be thrown if
            mnemonicIndex is >= length of the tab
            title , or < -1
Since:
1.4
See Also:
setMnemonicAt(int,int), 
getDisplayedMnemonicIndexAt(int)


"
JTabbedPane,"setEnabledAt(int index, boolean enabled)",void,Sets whether or not the tab at index is enabled.,"

setEnabledAt
public void setEnabledAt(int index,
                         boolean enabled)
Sets whether or not the tab at index is enabled.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index which should be enabled/disabled
enabled - whether or not the tab should be enabled
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
isEnabledAt(int)


"
JTabbedPane,"setForegroundAt(int index, Color foreground)",void,"Sets the foreground color at index to foreground which can be null, in which case the tab's foreground color will default to the foreground color of this tabbedpane.","

setForegroundAt
public void setForegroundAt(int index,
                            Color foreground)
Sets the foreground color at index to
 foreground which can be
 null, in which case the tab's foreground color
 will default to the foreground color of this tabbedpane.
 An internal exception is raised if there is no tab at that index.
 
 It is up to the look and feel to honor this property, some may
 choose to ignore it.

Parameters:
index - the tab index where the foreground should be set
foreground - the color to be displayed as the tab's foreground
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getForegroundAt(int)


"
JTabbedPane,"setIconAt(int index, Icon icon)",void,Sets the icon at index to icon which can be null.,"

setIconAt
public void setIconAt(int index,
                      Icon icon)
Sets the icon at index to icon which can be
 null. This does not set disabled icon at icon.
 If the new Icon is different than the current Icon and disabled icon
 is not explicitly set, the LookAndFeel will be asked to generate a disabled
 Icon. To explicitly set disabled icon, use setDisableIconAt().
 The icon is not shown if a tab component for this tab was specified.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the icon should be set
icon - the icon to be displayed in the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
setDisabledIconAt(int, javax.swing.Icon), 
getIconAt(int), 
getDisabledIconAt(int), 
setTabComponentAt(int, java.awt.Component)


"
JTabbedPane,"setMnemonicAt(int tabIndex, int mnemonic)",void,Sets the keyboard mnemonic for accessing the specified tab.,"

setMnemonicAt
public void setMnemonicAt(int tabIndex,
                          int mnemonic)
Sets the keyboard mnemonic for accessing the specified tab.
 The mnemonic is the key which when combined with the look and feel's
 mouseless modifier (usually Alt) will activate the specified
 tab.
 
 A mnemonic must correspond to a single key on the keyboard
 and should be specified using one of the VK_XXX
 keycodes defined in java.awt.event.KeyEvent
 or one of the extended keycodes obtained through
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.
 Mnemonics are case-insensitive, therefore a key event
 with the corresponding keycode would cause the button to be
 activated whether or not the Shift modifier was pressed.
 
 This will update the displayed mnemonic property for the specified
 tab.

Parameters:
tabIndex - the index of the tab that the mnemonic refers to
mnemonic - the key code which represents the mnemonic
Throws:
IndexOutOfBoundsException - if tabIndex is out
            of range (tabIndex < 0 || tabIndex >= tab count)
Since:
1.4
See Also:
getMnemonicAt(int), 
setDisplayedMnemonicIndexAt(int,int)


"
JTabbedPane,setModel(SingleSelectionModel model),void,Sets the model to be used with this tabbedpane.,"

setModel
public void setModel(SingleSelectionModel model)
Sets the model to be used with this tabbedpane.

Parameters:
model - the model to be used
See Also:
getModel()


"
JTabbedPane,setSelectedComponent(Component c),void,Sets the selected component for this tabbedpane.,"

setSelectedComponent
public void setSelectedComponent(Component c)
Sets the selected component for this tabbedpane.  This
 will automatically set the selectedIndex to the index
 corresponding to the specified component.

Throws:
IllegalArgumentException - if component not found in tabbed
          pane
See Also:
getSelectedComponent()


"
JTabbedPane,setSelectedIndex(int index),void,Sets the selected index for this tabbedpane.,"

setSelectedIndex
public void setSelectedIndex(int index)
Sets the selected index for this tabbedpane. The index must be
 a valid tab index or -1, which indicates that no tab should be selected
 (can also be used when there are no tabs in the tabbedpane).  If a -1
 value is specified when the tabbedpane contains one or more tabs, then
 the results will be implementation defined.

Parameters:
index - the index to be selected
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < -1 || index >= tab count)
See Also:
getSelectedIndex(), 
SingleSelectionModel.setSelectedIndex(int)


"
JTabbedPane,"setTabComponentAt(int index, Component component)",void,Sets the component that is responsible for rendering the title for the specified tab.,"

setTabComponentAt
public void setTabComponentAt(int index,
                              Component component)
Sets the component that is responsible for rendering the
 title for the specified tab.  A null value means
 JTabbedPane will render the title and/or icon for
 the specified tab.  A non-null value means the component will
 render the title and JTabbedPane will not render
 the title and/or icon.
 
 Note: The component must not be one that the developer has
       already added to the tabbed pane.

Parameters:
index - the tab index where the component should be set
component - the component to render the title for the
                  specified tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
IllegalArgumentException - if component has already been
            added to this JTabbedPane
Since:
1.6
See Also:
getTabComponentAt(int)


"
JTabbedPane,setTabLayoutPolicy(int tabLayoutPolicy),void,Sets the policy which the tabbedpane will use in laying out the tabs when all the tabs will not fit within a single run.,"

setTabLayoutPolicy
public void setTabLayoutPolicy(int tabLayoutPolicy)
Sets the policy which the tabbedpane will use in laying out the tabs
 when all the tabs will not fit within a single run.
 Possible values are:
 
JTabbedPane.WRAP_TAB_LAYOUT
JTabbedPane.SCROLL_TAB_LAYOUT


 The default value, if not set by the UI, is JTabbedPane.WRAP_TAB_LAYOUT.
 
 Some look and feels might only support a subset of the possible
 layout policies, in which case the value of this property may be
 ignored.

Parameters:
tabLayoutPolicy - the policy used to layout the tabs
Throws:
IllegalArgumentException - if layoutPolicy value isn't one
                          of the above valid values
Since:
1.4
See Also:
getTabLayoutPolicy()


"
JTabbedPane,setTabPlacement(int tabPlacement),void,Sets the tab placement for this tabbedpane.,"

setTabPlacement
public void setTabPlacement(int tabPlacement)
Sets the tab placement for this tabbedpane.
 Possible values are:
JTabbedPane.TOP
JTabbedPane.BOTTOM
JTabbedPane.LEFT
JTabbedPane.RIGHT

 The default value, if not set, is SwingConstants.TOP.

Parameters:
tabPlacement - the placement for the tabs relative to the content
Throws:
IllegalArgumentException - if tab placement value isn't one
                          of the above valid values


"
JTabbedPane,"setTitleAt(int index, String title)",void,Sets the title at index to title which can be null.,"

setTitleAt
public void setTitleAt(int index,
                       String title)
Sets the title at index to title which
 can be null.
 The title is not shown if a tab component for this tab was specified.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the title should be set
title - the title to be displayed in the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
getTitleAt(int), 
setTabComponentAt(int, java.awt.Component)


"
JTabbedPane,"setToolTipTextAt(int index, String toolTipText)",void,Sets the tooltip text at index to toolTipText which can be null.,"

setToolTipTextAt
public void setToolTipTextAt(int index,
                             String toolTipText)
Sets the tooltip text at index to toolTipText
 which can be null.
 An internal exception is raised if there is no tab at that index.

Parameters:
index - the tab index where the tooltip text should be set
toolTipText - the tooltip text to be displayed for the tab
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
Since:
1.3
See Also:
getToolTipTextAt(int)


"
JTabbedPane,setUI(TabbedPaneUI ui),void,Sets the UI object which implements the L&F for this component.,"

setUI
public void setUI(TabbedPaneUI ui)
Sets the UI object which implements the L&F for this component.

Parameters:
ui - the new UI object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JTabbedPane,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JTable,addColumn(TableColumn aColumn),void,Appends aColumn to the end of the array of columns held by this JTable's column model.,"

addColumn
public void addColumn(TableColumn aColumn)
Appends aColumn to the end of the array of columns held by
  this JTable's column model.
  If the column name of aColumn is null,
  sets the column name of aColumn to the name
  returned by getModel().getColumnName().
  
  To add a column to this JTable to display the
  modelColumn'th column of data in the model with a
  given width, cellRenderer,
  and cellEditor you can use:
  

      addColumn(new TableColumn(modelColumn, width, cellRenderer, cellEditor));

  
  [Any of the TableColumn constructors can be used
  instead of this one.]
  The model column number is stored inside the TableColumn
  and is used during rendering and editing to locate the appropriates
  data values in the model. The model column number does not change
  when columns are reordered in the view.

Parameters:
aColumn - the TableColumn to be added
See Also:
removeColumn(javax.swing.table.TableColumn)


"
JTable,"addColumnSelectionInterval(int index0, int index1)",void,"Adds the columns from index0 to index1, inclusive, to the current selection.","

addColumnSelectionInterval
public void addColumnSelectionInterval(int index0,
                                       int index1)
Adds the columns from index0 to index1,
 inclusive, to the current selection.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or
                                          index1 lie outside
                                          [0, getColumnCount()-1]


"
JTable,addNotify(),void,Calls the configureEnclosingScrollPane method.,"

addNotify
public void addNotify()
Calls the configureEnclosingScrollPane method.

Overrides:
addNotify in class JComponent
See Also:
configureEnclosingScrollPane()


"
JTable,"addRowSelectionInterval(int index0, int index1)",void,"Adds the rows from index0 to index1, inclusive, to the current selection.","

addRowSelectionInterval
public void addRowSelectionInterval(int index0,
                                    int index1)
Adds the rows from index0 to index1, inclusive, to
 the current selection.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or index1
                                          lie outside [0, getRowCount()-1]


"
JTable,"changeSelection(int rowIndex, int columnIndex, boolean toggle, boolean extend)",void,"Updates the selection models of the table, depending on the state of the two flags: toggle and extend.","

changeSelection
public void changeSelection(int rowIndex,
                            int columnIndex,
                            boolean toggle,
                            boolean extend)
Updates the selection models of the table, depending on the state of the
 two flags: toggle and extend. Most changes
 to the selection that are the result of keyboard or mouse events received
 by the UI are channeled through this method so that the behavior may be
 overridden by a subclass. Some UIs may need more functionality than
 this method provides, such as when manipulating the lead for discontiguous
 selection, and may not call into this method for some selection changes.
 
 This implementation uses the following conventions:
 
 toggle: false, extend: false.
      Clear the previous selection and ensure the new cell is selected.
  toggle: false, extend: true.
      Extend the previous selection from the anchor to the specified cell,
      clearing all other selections.
  toggle: true, extend: false.
      If the specified cell is selected, deselect it. If it is not selected, select it.
  toggle: true, extend: true.
      Apply the selection state of the anchor to all cells between it and the
      specified cell.
 

Parameters:
rowIndex - affects the selection at row
columnIndex - affects the selection at column
toggle - see description above
extend - if true, extend the current selection
Since:
1.3


"
JTable,clearSelection(),void,Deselects all selected columns and rows.,"

clearSelection
public void clearSelection()
Deselects all selected columns and rows.

"
JTable,columnAdded(TableColumnModelEvent e),void,Invoked when a column is added to the table column model.,"

columnAdded
public void columnAdded(TableColumnModelEvent e)
Invoked when a column is added to the table column model.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnAdded in interface TableColumnModelListener
See Also:
TableColumnModelListener


"
JTable,columnAtPoint(Point point),int,"Returns the index of the column that point lies in, or -1 if the result is not in the range [0, getColumnCount()-1].","

columnAtPoint
public int columnAtPoint(Point point)
Returns the index of the column that point lies in,
 or -1 if the result is not in the range
 [0, getColumnCount()-1].

Parameters:
point - the location of interest
Returns:
the index of the column that point lies in,
          or -1 if the result is not in the range
          [0, getColumnCount()-1]
See Also:
rowAtPoint(java.awt.Point)


"
JTable,columnMarginChanged(ChangeEvent e),void,Invoked when a column is moved due to a margin change.,"

columnMarginChanged
public void columnMarginChanged(ChangeEvent e)
Invoked when a column is moved due to a margin change.
 If a cell is being edited, then editing is stopped and the cell
 is redrawn.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnMarginChanged in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTable,columnMoved(TableColumnModelEvent e),void,Invoked when a column is repositioned.,"

columnMoved
public void columnMoved(TableColumnModelEvent e)
Invoked when a column is repositioned. If a cell is being
 edited, then editing is stopped and the cell is redrawn.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnMoved in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTable,columnRemoved(TableColumnModelEvent e),void,Invoked when a column is removed from the table column model.,"

columnRemoved
public void columnRemoved(TableColumnModelEvent e)
Invoked when a column is removed from the table column model.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnRemoved in interface TableColumnModelListener
See Also:
TableColumnModelListener


"
JTable,columnSelectionChanged(ListSelectionEvent e),void,Invoked when the selection model of the TableColumnModel is changed.,"

columnSelectionChanged
public void columnSelectionChanged(ListSelectionEvent e)
Invoked when the selection model of the TableColumnModel
 is changed.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
columnSelectionChanged in interface TableColumnModelListener
Parameters:
e - the event received
See Also:
TableColumnModelListener


"
JTable,configureEnclosingScrollPane(),protected void,"If this JTable is the viewportView of an enclosing JScrollPane (the usual situation), configure this ScrollPane by, amongst other things, installing the table's tableHeader as the columnHeaderView of the scroll pane.","

configureEnclosingScrollPane
protected void configureEnclosingScrollPane()
If this JTable is the viewportView of an enclosing JScrollPane
 (the usual situation), configure this ScrollPane by, amongst other things,
 installing the table's tableHeader as the columnHeaderView of the scroll pane.
 When a JTable is added to a JScrollPane in the usual way,
 using new JScrollPane(myTable), addNotify is
 called in the JTable (when the table is added to the viewport).
 JTable's addNotify method in turn calls this method,
 which is protected so that this default installation procedure can
 be overridden by a subclass.

See Also:
addNotify()


"
JTable,convertColumnIndexToModel(int viewColumnIndex),int,Maps the index of the column in the view at viewColumnIndex to the index of the column in the table model.,"

convertColumnIndexToModel
public int convertColumnIndexToModel(int viewColumnIndex)
Maps the index of the column in the view at
 viewColumnIndex to the index of the column
 in the table model.  Returns the index of the corresponding
 column in the model.  If viewColumnIndex
 is less than zero, returns viewColumnIndex.

Parameters:
viewColumnIndex - the index of the column in the view
Returns:
the index of the corresponding column in the model
See Also:
convertColumnIndexToView(int)


"
JTable,convertColumnIndexToView(int modelColumnIndex),int,Maps the index of the column in the table model at modelColumnIndex to the index of the column in the view.,"

convertColumnIndexToView
public int convertColumnIndexToView(int modelColumnIndex)
Maps the index of the column in the table model at
 modelColumnIndex to the index of the column
 in the view.  Returns the index of the
 corresponding column in the view; returns -1 if this column is not
 being displayed.  If modelColumnIndex is less than zero,
 returns modelColumnIndex.

Parameters:
modelColumnIndex - the index of the column in the model
Returns:
the index of the corresponding column in the view
See Also:
convertColumnIndexToModel(int)


"
JTable,convertRowIndexToModel(int viewRowIndex),int,Maps the index of the row in terms of the view to the underlying TableModel.,"

convertRowIndexToModel
public int convertRowIndexToModel(int viewRowIndex)
Maps the index of the row in terms of the view to the
 underlying TableModel.  If the contents of the
 model are not sorted the model and view indices are the same.

Parameters:
viewRowIndex - the index of the row in the view
Returns:
the index of the corresponding row in the model
Throws:
IndexOutOfBoundsException - if sorting is enabled and passed an
         index outside the range of the JTable as
         determined by the method getRowCount
Since:
1.6
See Also:
TableRowSorter, 
getRowCount()


"
JTable,convertRowIndexToView(int modelRowIndex),int,Maps the index of the row in terms of the TableModel to the view.,"

convertRowIndexToView
public int convertRowIndexToView(int modelRowIndex)
Maps the index of the row in terms of the
 TableModel to the view.  If the contents of the
 model are not sorted the model and view indices are the same.

Parameters:
modelRowIndex - the index of the row in terms of the model
Returns:
the index of the corresponding row in the view, or -1 if
         the row isn't visible
Throws:
IndexOutOfBoundsException - if sorting is enabled and passed an
         index outside the number of rows of the TableModel
Since:
1.6
See Also:
TableRowSorter


"
JTable,createDefaultColumnModel(),protected TableColumnModel,"Returns the default column model object, which is a DefaultTableColumnModel.","

createDefaultColumnModel
protected TableColumnModel createDefaultColumnModel()
Returns the default column model object, which is
 a DefaultTableColumnModel.  A subclass can override this
 method to return a different column model object.

Returns:
the default column model object
See Also:
DefaultTableColumnModel


"
JTable,createDefaultColumnsFromModel(),void,Creates default columns for the table from the data model using the getColumnCount method defined in the TableModel interface.,"

createDefaultColumnsFromModel
public void createDefaultColumnsFromModel()
Creates default columns for the table from
 the data model using the getColumnCount method
 defined in the TableModel interface.
 
 Clears any existing columns before creating the
 new columns based on information from the model.

See Also:
getAutoCreateColumnsFromModel()


"
JTable,createDefaultDataModel(),protected TableModel,"Returns the default table model object, which is a DefaultTableModel.","

createDefaultDataModel
protected TableModel createDefaultDataModel()
Returns the default table model object, which is
 a DefaultTableModel.  A subclass can override this
 method to return a different table model object.

Returns:
the default table model object
See Also:
DefaultTableModel


"
JTable,createDefaultEditors(),protected void,"Creates default cell editors for objects, numbers, and boolean values.","

createDefaultEditors
protected void createDefaultEditors()
Creates default cell editors for objects, numbers, and boolean values.

See Also:
DefaultCellEditor


"
JTable,createDefaultRenderers(),protected void,"Creates default cell renderers for objects, numbers, doubles, dates, booleans, and icons.","

createDefaultRenderers
protected void createDefaultRenderers()
Creates default cell renderers for objects, numbers, doubles, dates,
 booleans, and icons.

See Also:
DefaultTableCellRenderer


"
JTable,createDefaultSelectionModel(),protected ListSelectionModel,"Returns the default selection model object, which is a DefaultListSelectionModel.","

createDefaultSelectionModel
protected ListSelectionModel createDefaultSelectionModel()
Returns the default selection model object, which is
 a DefaultListSelectionModel.  A subclass can override this
 method to return a different selection model object.

Returns:
the default selection model object
See Also:
DefaultListSelectionModel


"
JTable,createDefaultTableHeader(),protected JTableHeader,"Returns the default table header object, which is a JTableHeader.","

createDefaultTableHeader
protected JTableHeader createDefaultTableHeader()
Returns the default table header object, which is
 a JTableHeader.  A subclass can override this
 method to return a different table header object.

Returns:
the default table header object
See Also:
JTableHeader


"
JTable,createScrollPaneForTable(JTable aTable),static JScrollPane,"Deprecated. As of Swing version 1.0.2, replaced by new JScrollPane(aTable).","

createScrollPaneForTable
@Deprecated
public static JScrollPane createScrollPaneForTable(JTable aTable)
Deprecated. As of Swing version 1.0.2,
 replaced by new JScrollPane(aTable).
Equivalent to new JScrollPane(aTable).

"
JTable,doLayout(),void,Causes this table to lay out its rows and columns.,"

doLayout
public void doLayout()
Causes this table to lay out its rows and columns.  Overridden so
 that columns can be resized to accommodate a change in the size of
 a containing parent.
 Resizes one or more of the columns in the table
 so that the total width of all of this JTable's
 columns is equal to the width of the table.
 
 Before the layout begins the method gets the
 resizingColumn of the tableHeader.
 When the method is called as a result of the resizing of an enclosing window,
 the resizingColumn is null. This means that resizing
 has taken place ""outside"" the JTable and the change -
 or ""delta"" - should be distributed to all of the columns regardless
 of this JTable's automatic resize mode.
 
 If the resizingColumn is not null, it is one of
 the columns in the table that has changed size rather than
 the table itself. In this case the auto-resize modes govern
 the way the extra (or deficit) space is distributed
 amongst the available columns.
 
 The modes are:
 
  AUTO_RESIZE_OFF: Don't automatically adjust the column's
 widths at all. Use a horizontal scrollbar to accommodate the
 columns when their sum exceeds the width of the
 Viewport.  If the JTable is not
 enclosed in a JScrollPane this may
 leave parts of the table invisible.
   AUTO_RESIZE_NEXT_COLUMN: Use just the column after the
 resizing column. This results in the ""boundary"" or divider
 between adjacent cells being independently adjustable.
   AUTO_RESIZE_SUBSEQUENT_COLUMNS: Use all columns after the
 one being adjusted to absorb the changes.  This is the
 default behavior.
   AUTO_RESIZE_LAST_COLUMN: Automatically adjust the
 size of the last column only. If the bounds of the last column
 prevent the desired size from being allocated, set the
 width of the last column to the appropriate limit and make
 no further adjustments.
   AUTO_RESIZE_ALL_COLUMNS: Spread the delta amongst all the columns
 in the JTable, including the one that is being
 adjusted.
 

Note: When a JTable makes adjustments
   to the widths of the columns it respects their minimum and
   maximum values absolutely.  It is therefore possible that,
   even after this method is called, the total width of the columns
   is still not equal to the width of the table. When this happens
   the JTable does not put itself
   in AUTO_RESIZE_OFF mode to bring up a scroll bar, or break other
   commitments of its current auto-resize mode -- instead it
   allows its bounds to be set larger (or smaller) than the total of the
   column minimum or maximum, meaning, either that there
   will not be enough room to display all of the columns, or that the
   columns will not fill the JTable's bounds.
   These respectively, result in the clipping of some columns
   or an area being painted in the JTable's
   background color during painting.
 
   The mechanism for distributing the delta amongst the available
   columns is provided in a private method in the JTable
   class:
 
   adjustSizes(long targetSize, final Resizable3 r, boolean inverse)
 
   an explanation of which is provided in the following section.
   Resizable3 is a private
   interface that allows any data structure containing a collection
   of elements with a size, preferred size, maximum size and minimum size
   to have its elements manipulated by the algorithm.

  Distributing the delta 
 Overview 

 Call ""DELTA"" the difference between the target size and the
 sum of the preferred sizes of the elements in r. The individual
 sizes are calculated by taking the original preferred
 sizes and adding a share of the DELTA - that share being based on
 how far each preferred size is from its limiting bound (minimum or
 maximum).

 Definition

 Call the individual constraints min[i], max[i], and pref[i].
 
 Call their respective sums: MIN, MAX, and PREF.
 
 Each new size will be calculated using:

 
          size[i] = pref[i] + delta[i]
 
 where each individual delta[i] is calculated according to:
 
 If (DELTA < 0) we are in shrink mode where:

 
                        DELTA
          delta[i] = ------------ * (pref[i] - min[i])
                     (PREF - MIN)
 
 If (DELTA > 0) we are in expand mode where:

 
                        DELTA
          delta[i] = ------------ * (max[i] - pref[i])
                      (MAX - PREF)
 

 The overall effect is that the total size moves that same percentage,
 k, towards the total minimum or maximum and that percentage guarantees
 accommodation of the required space, DELTA.

 Details

 Naive evaluation of the formulae presented here would be subject to
 the aggregated rounding errors caused by doing this operation in finite
 precision (using ints). To deal with this, the multiplying factor above,
 is constantly recalculated and this takes account of the rounding
 errors in the previous iterations. The result is an algorithm that
 produces a set of integers whose values exactly sum to the supplied
 targetSize, and does so by spreading the rounding
 errors evenly over the given elements.

 When the MAX and MIN bounds are hit

 When targetSize is outside the [MIN, MAX] range,
 the algorithm sets all sizes to their appropriate limiting value
 (maximum or minimum).

Overrides:
doLayout in class Container
See Also:
LayoutManager.layoutContainer(java.awt.Container), 
Container.setLayout(java.awt.LayoutManager), 
Container.validate()


"
JTable,"editCellAt(int row, int column)",boolean,"Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable.","

editCellAt
public boolean editCellAt(int row,
                          int column)
Programmatically starts editing the cell at row and
 column, if those indices are in the valid range, and
 the cell at those indices is editable.
 Note that this is a convenience method for
 editCellAt(int, int, null).

Parameters:
row - the row to be edited
column - the column to be edited
Returns:
false if for any reason the cell cannot be edited,
                or if the indices are invalid


"
JTable,"editCellAt(int row, int column, EventObject e)",boolean,"Programmatically starts editing the cell at row and column, if those indices are in the valid range, and the cell at those indices is editable.","

editCellAt
public boolean editCellAt(int row,
                          int column,
                          EventObject e)
Programmatically starts editing the cell at row and
 column, if those indices are in the valid range, and
 the cell at those indices is editable.
 To prevent the JTable from
 editing a particular table, column or cell value, return false from
 the isCellEditable method in the TableModel
 interface.

Parameters:
row - the row to be edited
column - the column to be edited
e - event to pass into shouldSelectCell;
                  note that as of Java 2 platform v1.2, the call to
                  shouldSelectCell is no longer made
Returns:
false if for any reason the cell cannot be edited,
                or if the indices are invalid


"
JTable,editingCanceled(ChangeEvent e),void,Invoked when editing is canceled.,"

editingCanceled
public void editingCanceled(ChangeEvent e)
Invoked when editing is canceled. The editor object is discarded
 and the cell is rendered once again.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
editingCanceled in interface CellEditorListener
Parameters:
e - the event received
See Also:
CellEditorListener


"
JTable,editingStopped(ChangeEvent e),void,Invoked when editing is finished.,"

editingStopped
public void editingStopped(ChangeEvent e)
Invoked when editing is finished. The changes are saved and the
 editor is discarded.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
editingStopped in interface CellEditorListener
Parameters:
e - the event received
See Also:
CellEditorListener


"
JTable,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTable.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JTable.
 For tables, the AccessibleContext takes the form of an
 AccessibleJTable.
 A new AccessibleJTable instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJTable that serves as the
         AccessibleContext of this JTable


"
JTable,getAutoCreateColumnsFromModel(),boolean,Determines whether the table will create default columns from the model.,"

getAutoCreateColumnsFromModel
public boolean getAutoCreateColumnsFromModel()
Determines whether the table will create default columns from the model.
 If true, setModel will clear any existing columns and
 create new columns from the new model.  Also, if the event in
 the tableChanged notification specifies that the
 entire table changed, then the columns will be rebuilt.
 The default is true.

Returns:
the autoCreateColumnsFromModel of the table
See Also:
setAutoCreateColumnsFromModel(boolean), 
createDefaultColumnsFromModel()


"
JTable,getAutoCreateRowSorter(),boolean,"Returns true if whenever the model changes, a new RowSorter should be created and installed as the table's sorter; otherwise, returns false.","

getAutoCreateRowSorter
public boolean getAutoCreateRowSorter()
Returns true if whenever the model changes, a new
 RowSorter should be created and installed
 as the table's sorter; otherwise, returns false.

Returns:
true if a RowSorter should be created when
         the model changes
Since:
1.6


"
JTable,getAutoResizeMode(),int,Returns the auto resize mode of the table.,"

getAutoResizeMode
public int getAutoResizeMode()
Returns the auto resize mode of the table.  The default mode
 is AUTO_RESIZE_SUBSEQUENT_COLUMNS.

Returns:
the autoResizeMode of the table
See Also:
setAutoResizeMode(int), 
doLayout()


"
JTable,getCellEditor(),TableCellEditor,"Returns the active cell editor, which is null if the table is not currently editing.","

getCellEditor
public TableCellEditor getCellEditor()
Returns the active cell editor, which is null if the table
 is not currently editing.

Returns:
the TableCellEditor that does the editing,
         or null if the table is not currently editing.
See Also:
cellEditor, 
getCellEditor(int, int)


"
JTable,"getCellEditor(int row, int column)",TableCellEditor,Returns an appropriate editor for the cell specified by row and column.,"

getCellEditor
public TableCellEditor getCellEditor(int row,
                                     int column)
Returns an appropriate editor for the cell specified by
 row and column. If the
 TableColumn for this column has a non-null editor,
 returns that.  If not, finds the class of the data in this
 column (using getColumnClass)
 and returns the default editor for this type of data.
 
Note:
 Throughout the table package, the internal implementations always
 use this method to provide editors so that this default behavior
 can be safely overridden by a subclass.

Parameters:
row - the row of the cell to edit, where 0 is the first row
column - the column of the cell to edit,
                  where 0 is the first column
Returns:
the editor for this cell;
                  if null return the default editor for
                  this type of cell
See Also:
DefaultCellEditor


"
JTable,"getCellRect(int row, int column, boolean includeSpacing)",Rectangle,Returns a rectangle for the cell that lies at the intersection of row and column.,"

getCellRect
public Rectangle getCellRect(int row,
                             int column,
                             boolean includeSpacing)
Returns a rectangle for the cell that lies at the intersection of
 row and column.
 If includeSpacing is true then the value returned
 has the full height and width of the row and column
 specified. If it is false, the returned rectangle is inset by the
 intercell spacing to return the true bounds of the rendering or
 editing component as it will be set during rendering.
 
 If the column index is valid but the row index is less
 than zero the method returns a rectangle with the
 y and height values set appropriately
 and the x and width values both set
 to zero. In general, when either the row or column indices indicate a
 cell outside the appropriate range, the method returns a rectangle
 depicting the closest edge of the closest cell that is within
 the table's range. When both row and column indices are out
 of range the returned rectangle covers the closest
 point of the closest cell.
 
 In all cases, calculations that use this method to calculate
 results along one axis will not fail because of anomalies in
 calculations along the other axis. When the cell is not valid
 the includeSpacing parameter is ignored.

Parameters:
row - the row index where the desired cell
                                is located
column - the column index where the desired cell
                                is located in the display; this is not
                                necessarily the same as the column index
                                in the data model for the table; the
                                convertColumnIndexToView(int)
                                method may be used to convert a data
                                model column index to a display
                                column index
includeSpacing - if false, return the true cell bounds -
                                computed by subtracting the intercell
                                spacing from the height and widths of
                                the column and row models
Returns:
the rectangle containing the cell at location
          row,column
See Also:
getIntercellSpacing()


"
JTable,"getCellRenderer(int row, int column)",TableCellRenderer,Returns an appropriate renderer for the cell specified by this row and column.,"

getCellRenderer
public TableCellRenderer getCellRenderer(int row,
                                         int column)
Returns an appropriate renderer for the cell specified by this row and
 column. If the TableColumn for this column has a non-null
 renderer, returns that.  If not, finds the class of the data in
 this column (using getColumnClass)
 and returns the default renderer for this type of data.
 
Note:
 Throughout the table package, the internal implementations always
 use this method to provide renderers so that this default behavior
 can be safely overridden by a subclass.

Parameters:
row - the row of the cell to render, where 0 is the first row
column - the column of the cell to render,
                  where 0 is the first column
Returns:
the assigned renderer; if null
                  returns the default renderer
                  for this type of object
See Also:
DefaultTableCellRenderer, 
TableColumn.setCellRenderer(javax.swing.table.TableCellRenderer), 
setDefaultRenderer(java.lang.Class<?>, javax.swing.table.TableCellRenderer)


"
JTable,getCellSelectionEnabled(),boolean,Returns true if both row and column selection models are enabled.,"

getCellSelectionEnabled
public boolean getCellSelectionEnabled()
Returns true if both row and column selection models are enabled.
 Equivalent to getRowSelectionAllowed() &&
 getColumnSelectionAllowed().

Returns:
true if both row and column selection models are enabled
See Also:
setCellSelectionEnabled(boolean)


"
JTable,getColumn(Object identifier),TableColumn,"Returns the TableColumn object for the column in the table whose identifier is equal to identifier, when compared using equals.","

getColumn
public TableColumn getColumn(Object identifier)
Returns the TableColumn object for the column in the table
 whose identifier is equal to identifier, when compared using
 equals.

Parameters:
identifier - the identifier object
Returns:
the TableColumn object that matches the identifier
Throws:
IllegalArgumentException - if identifier is null or no TableColumn has this identifier


"
JTable,getColumnClass(int column),Class<?>,Returns the type of the column appearing in the view at column position column.,"

getColumnClass
public Class<?> getColumnClass(int column)
Returns the type of the column appearing in the view at
 column position column.

Parameters:
column - the column in the view being queried
Returns:
the type of the column at position column
          in the view where the first column is column 0


"
JTable,getColumnCount(),int,Returns the number of columns in the column model.,"

getColumnCount
public int getColumnCount()
Returns the number of columns in the column model. Note that this may
 be different from the number of columns in the table model.

Returns:
the number of columns in the table
See Also:
getRowCount(), 
removeColumn(javax.swing.table.TableColumn)


"
JTable,getColumnModel(),TableColumnModel,Returns the TableColumnModel that contains all column information of this table.,"

getColumnModel
public TableColumnModel getColumnModel()
Returns the TableColumnModel that contains all column information
 of this table.

Returns:
the object that provides the column state of the table
See Also:
setColumnModel(javax.swing.table.TableColumnModel)


"
JTable,getColumnName(int column),String,Returns the name of the column appearing in the view at column position column.,"

getColumnName
public String getColumnName(int column)
Returns the name of the column appearing in the view at
 column position column.

Parameters:
column - the column in the view being queried
Returns:
the name of the column at position column
                        in the view where the first column is column 0


"
JTable,getColumnSelectionAllowed(),boolean,Returns true if columns can be selected.,"

getColumnSelectionAllowed
public boolean getColumnSelectionAllowed()
Returns true if columns can be selected.

Returns:
true if columns can be selected, otherwise false
See Also:
setColumnSelectionAllowed(boolean)


"
JTable,getDefaultEditor(Class<?> columnClass),TableCellEditor,Returns the editor to be used when no editor has been set in a TableColumn.,"

getDefaultEditor
public TableCellEditor getDefaultEditor(Class<?> columnClass)
Returns the editor to be used when no editor has been set in
 a TableColumn. During the editing of cells the editor is fetched from
 a Hashtable of entries according to the class of the cells in the column. If
 there is no entry for this columnClass the method returns
 the entry for the most specific superclass. The JTable installs entries
 for Object, Number, and Boolean, all of which can be modified
 or replaced.

Parameters:
columnClass - return the default cell editor for this columnClass
Returns:
the default cell editor to be used for this columnClass
See Also:
setDefaultEditor(java.lang.Class<?>, javax.swing.table.TableCellEditor), 
getColumnClass(int)


"
JTable,getDefaultRenderer(Class<?> columnClass),TableCellRenderer,Returns the cell renderer to be used when no renderer has been set in a TableColumn.,"

getDefaultRenderer
public TableCellRenderer getDefaultRenderer(Class<?> columnClass)
Returns the cell renderer to be used when no renderer has been set in
 a TableColumn. During the rendering of cells the renderer is fetched from
 a Hashtable of entries according to the class of the cells in the column. If
 there is no entry for this columnClass the method returns
 the entry for the most specific superclass. The JTable installs entries
 for Object, Number, and Boolean, all of which can be modified
 or replaced.

Parameters:
columnClass - return the default cell renderer
                        for this columnClass
Returns:
the renderer for this columnClass
See Also:
setDefaultRenderer(java.lang.Class<?>, javax.swing.table.TableCellRenderer), 
getColumnClass(int)


"
JTable,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.,"

getDragEnabled
public boolean getDragEnabled()
Returns whether or not automatic drag handling is enabled.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JTable,getDropLocation(),JTable.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.","

getDropLocation
public final JTable.DropLocation getDropLocation()
Returns the location that this component should visually indicate
 as the drop location during a DnD operation over the component,
 or null if no location is to currently be shown.
 
 This method is not meant for querying the drop location
 from a TransferHandler, as the drop location is only
 set after the TransferHandler's canImport
 has returned and has allowed for the location to be shown.
 
 When this property changes, a property change event with
 name ""dropLocation"" is fired by the component.

Returns:
the drop location
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode), 
TransferHandler.canImport(TransferHandler.TransferSupport)


"
JTable,getDropMode(),DropMode,Returns the drop mode for this component.,"

getDropMode
public final DropMode getDropMode()
Returns the drop mode for this component.

Returns:
the drop mode for this component
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode)


"
JTable,getEditingColumn(),int,Returns the index of the column that contains the cell currently being edited.,"

getEditingColumn
public int getEditingColumn()
Returns the index of the column that contains the cell currently
 being edited.  If nothing is being edited, returns -1.

Returns:
the index of the column that contains the cell currently
          being edited; returns -1 if nothing being edited
See Also:
editingRow


"
JTable,getEditingRow(),int,Returns the index of the row that contains the cell currently being edited.,"

getEditingRow
public int getEditingRow()
Returns the index of the row that contains the cell currently
 being edited.  If nothing is being edited, returns -1.

Returns:
the index of the row that contains the cell currently
          being edited; returns -1 if nothing being edited
See Also:
editingColumn


"
JTable,getEditorComponent(),Component,Returns the component that is handling the editing session.,"

getEditorComponent
public Component getEditorComponent()
Returns the component that is handling the editing session.
 If nothing is being edited, returns null.

Returns:
Component handling editing session


"
JTable,getFillsViewportHeight(),boolean,Returns whether or not this table is always made large enough to fill the height of an enclosing viewport.,"

getFillsViewportHeight
public boolean getFillsViewportHeight()
Returns whether or not this table is always made large enough
 to fill the height of an enclosing viewport.

Returns:
whether or not this table is always made large enough
         to fill the height of an enclosing viewport
Since:
1.6
See Also:
setFillsViewportHeight(boolean)


"
JTable,getGridColor(),Color,Returns the color used to draw grid lines.,"

getGridColor
public Color getGridColor()
Returns the color used to draw grid lines.
 The default color is look and feel dependent.

Returns:
the color used to draw grid lines
See Also:
setGridColor(java.awt.Color)


"
JTable,getIntercellSpacing(),Dimension,Returns the horizontal and vertical space between cells.,"

getIntercellSpacing
public Dimension getIntercellSpacing()
Returns the horizontal and vertical space between cells.
 The default spacing is look and feel dependent.

Returns:
the horizontal and vertical spacing between cells
See Also:
setIntercellSpacing(java.awt.Dimension)


"
JTable,getModel(),TableModel,Returns the TableModel that provides the data displayed by this JTable.,"

getModel
public TableModel getModel()
Returns the TableModel that provides the data displayed by this
 JTable.

Returns:
the TableModel that provides the data displayed by this JTable
See Also:
setModel(javax.swing.table.TableModel)


"
JTable,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport for this table.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Returns the preferred size of the viewport for this table.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Returns:
a Dimension object containing the preferredSize of the JViewport
         which displays this table
See Also:
Scrollable.getPreferredScrollableViewportSize()


"
JTable,"getPrintable(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat)",Printable,Return a Printable for use in printing this JTable.,"

getPrintable
public Printable getPrintable(JTable.PrintMode printMode,
                              MessageFormat headerFormat,
                              MessageFormat footerFormat)
Return a Printable for use in printing this JTable.
 
 This method is meant for those wishing to customize the default
 Printable implementation used by JTable's
 print methods. Developers wanting simply to print the table
 should use one of those methods directly.
 
 The Printable can be requested in one of two printing modes.
 In both modes, it spreads table rows naturally in sequence across
 multiple pages, fitting as many rows as possible per page.
 PrintMode.NORMAL specifies that the table be
 printed at its current size. In this mode, there may be a need to spread
 columns across pages in a similar manner to that of the rows. When the
 need arises, columns are distributed in an order consistent with the
 table's ComponentOrientation.
 PrintMode.FIT_WIDTH specifies that the output be
 scaled smaller, if necessary, to fit the table's entire width
 (and thereby all columns) on each page. Width and height are scaled
 equally, maintaining the aspect ratio of the output.
 
 The Printable heads the portion of table on each page
 with the appropriate section from the table's JTableHeader,
 if it has one.
 
 Header and footer text can be added to the output by providing
 MessageFormat arguments. The printing code requests
 Strings from the formats, providing a single item which may be included
 in the formatted string: an Integer representing the current
 page number.
 
 You are encouraged to read the documentation for
 MessageFormat as some characters, such as single-quote,
 are special and need to be escaped.
 
 Here's an example of creating a MessageFormat that can be
 used to print ""Duke's Table: Page - "" and the current page number:

 
     // notice the escaping of the single quote
     // notice how the page number is included with ""{0}""
     MessageFormat format = new MessageFormat(""Duke''s Table: Page - {0}"");
 

 The Printable constrains what it draws to the printable
 area of each page that it prints. Under certain circumstances, it may
 find it impossible to fit all of a page's content into that area. In
 these cases the output may be clipped, but the implementation
 makes an effort to do something reasonable. Here are a few situations
 where this is known to occur, and how they may be handled by this
 particular implementation:
 
In any mode, when the header or footer text is too wide to fit
       completely in the printable area -- print as much of the text as
       possible starting from the beginning, as determined by the table's
       ComponentOrientation.
   In any mode, when a row is too tall to fit in the
       printable area -- print the upper-most portion of the row
       and paint no lower border on the table.
   In PrintMode.NORMAL when a column
       is too wide to fit in the printable area -- print the center
       portion of the column and leave the left and right borders
       off the table.
 

 It is entirely valid for this Printable to be wrapped
 inside another in order to create complex reports and documents. You may
 even request that different pages be rendered into different sized
 printable areas. The implementation must be prepared to handle this
 (possibly by doing its layout calculations on the fly). However,
 providing different heights to each page will likely not work well
 with PrintMode.NORMAL when it has to spread columns
 across pages.
 
 As far as customizing how the table looks in the printed result,
 JTable itself will take care of hiding the selection
 and focus during printing. For additional customizations, your
 renderers or painting code can customize the look based on the value
 of JComponent.isPaintingForPrint()

 Also, before calling this method you may wish to first
 modify the state of the table, such as to cancel cell editing or
 have the user size the table appropriately. However, you must not
 modify the state of the table after this Printable
 has been fetched (invalid modifications include changes in size or
 underlying data). The behavior of the returned Printable
 is undefined once the table has been changed.

Parameters:
printMode - the printing mode that the printable should use
headerFormat - a MessageFormat specifying the text to
                       be used in printing a header, or null for none
footerFormat - a MessageFormat specifying the text to
                       be used in printing a footer, or null for none
Returns:
a Printable for printing this JTable
Since:
1.5
See Also:
print(JTable.PrintMode, MessageFormat, MessageFormat,
             boolean, PrintRequestAttributeSet, boolean), 
Printable, 
PrinterJob


"
JTable,getRowCount(),int,"Returns the number of rows that can be shown in the JTable, given unlimited space.","

getRowCount
public int getRowCount()
Returns the number of rows that can be shown in the
 JTable, given unlimited space.  If a
 RowSorter with a filter has been specified, the
 number of rows returned may differ from that of the underlying
 TableModel.

Returns:
the number of rows shown in the JTable
See Also:
getColumnCount()


"
JTable,getRowHeight(),int,"Returns the height of a table row, in pixels.","

getRowHeight
public int getRowHeight()
Returns the height of a table row, in pixels.

Returns:
the height in pixels of a table row
See Also:
setRowHeight(int)


"
JTable,getRowHeight(int row),int,"Returns the height, in pixels, of the cells in row.","

getRowHeight
public int getRowHeight(int row)
Returns the height, in pixels, of the cells in row.

Parameters:
row - the row whose height is to be returned
Returns:
the height, in pixels, of the cells in the row
Since:
1.3


"
JTable,getRowMargin(),int,"Gets the amount of empty space, in pixels, between cells.","

getRowMargin
public int getRowMargin()
Gets the amount of empty space, in pixels, between cells. Equivalent to:
 getIntercellSpacing().height.

Returns:
the number of pixels between cells in a row
See Also:
setRowMargin(int)


"
JTable,getRowSelectionAllowed(),boolean,Returns true if rows can be selected.,"

getRowSelectionAllowed
public boolean getRowSelectionAllowed()
Returns true if rows can be selected.

Returns:
true if rows can be selected, otherwise false
See Also:
setRowSelectionAllowed(boolean)


"
JTable,getRowSorter(),RowSorter<? extends TableModel>,Returns the object responsible for sorting.,"

getRowSorter
public RowSorter<? extends TableModel> getRowSorter()
Returns the object responsible for sorting.

Returns:
the object responsible for sorting
Since:
1.6


"
JTable,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns visibleRect.height or visibleRect.width, depending on this table's orientation.","

getScrollableBlockIncrement
public int getScrollableBlockIncrement(Rectangle visibleRect,
                                       int orientation,
                                       int direction)
Returns visibleRect.height or
 visibleRect.width,
 depending on this table's orientation.  Note that as of Swing 1.1.1
 (Java 2 v 1.2.2) the value
 returned will ensure that the viewport is cleanly aligned on
 a row boundary.

Specified by:
getScrollableBlockIncrement in interface Scrollable
Parameters:
visibleRect - The view area visible within the viewport
orientation - Either SwingConstants.VERTICAL or SwingConstants.HORIZONTAL.
direction - Less than zero to scroll up/left, greater than zero for down/right.
Returns:
visibleRect.height or
                                  visibleRect.width
                                  per the orientation
See Also:
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
JTable,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the table, unless getFillsViewportHeight is true and the preferred height of the table is smaller than the viewport's height.","

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns false to indicate that the height of the viewport does
 not determine the height of the table, unless
 getFillsViewportHeight is true and the preferred height
 of the table is smaller than the viewport's height.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Returns:
false unless getFillsViewportHeight is
         true and the table needs to be stretched to fill
         the viewport
See Also:
Scrollable.getScrollableTracksViewportHeight(), 
setFillsViewportHeight(boolean), 
getFillsViewportHeight()


"
JTable,getScrollableTracksViewportWidth(),boolean,"Returns false if autoResizeMode is set to AUTO_RESIZE_OFF, which indicates that the width of the viewport does not determine the width of the table.","

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns false if autoResizeMode is set to
 AUTO_RESIZE_OFF, which indicates that the
 width of the viewport does not determine the width
 of the table.  Otherwise returns true.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Returns:
false if autoResizeMode is set
   to AUTO_RESIZE_OFF, otherwise returns true
See Also:
Scrollable.getScrollableTracksViewportWidth()


"
JTable,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the scroll increment (in pixels) that completely exposes one new row or column (depending on the orientation).,"

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Returns the scroll increment (in pixels) that completely exposes one new
 row or column (depending on the orientation).
 
 This method is called each time the user requests a unit scroll.

Specified by:
getScrollableUnitIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - either SwingConstants.VERTICAL
                  or SwingConstants.HORIZONTAL
direction - less than zero to scroll up/left,
                  greater than zero for down/right
Returns:
the ""unit"" increment for scrolling in the specified direction
See Also:
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int)


"
JTable,getSelectedColumn(),int,"Returns the index of the first selected column, -1 if no column is selected.","

getSelectedColumn
public int getSelectedColumn()
Returns the index of the first selected column,
 -1 if no column is selected.

Returns:
the index of the first selected column


"
JTable,getSelectedColumnCount(),int,Returns the number of selected columns.,"

getSelectedColumnCount
public int getSelectedColumnCount()
Returns the number of selected columns.

Returns:
the number of selected columns, 0 if no columns are selected


"
JTable,getSelectedColumns(),int[],Returns the indices of all selected columns.,"

getSelectedColumns
public int[] getSelectedColumns()
Returns the indices of all selected columns.

Returns:
an array of integers containing the indices of all selected columns,
         or an empty array if no column is selected
See Also:
getSelectedColumn()


"
JTable,getSelectedRow(),int,"Returns the index of the first selected row, -1 if no row is selected.","

getSelectedRow
public int getSelectedRow()
Returns the index of the first selected row, -1 if no row is selected.

Returns:
the index of the first selected row


"
JTable,getSelectedRowCount(),int,Returns the number of selected rows.,"

getSelectedRowCount
public int getSelectedRowCount()
Returns the number of selected rows.

Returns:
the number of selected rows, 0 if no rows are selected


"
JTable,getSelectedRows(),int[],Returns the indices of all selected rows.,"

getSelectedRows
public int[] getSelectedRows()
Returns the indices of all selected rows.

Returns:
an array of integers containing the indices of all selected rows,
         or an empty array if no row is selected
See Also:
getSelectedRow()


"
JTable,getSelectionBackground(),Color,Returns the background color for selected cells.,"

getSelectionBackground
public Color getSelectionBackground()
Returns the background color for selected cells.

Returns:
the Color used for the background of selected list items
See Also:
setSelectionBackground(java.awt.Color), 
setSelectionForeground(java.awt.Color)


"
JTable,getSelectionForeground(),Color,Returns the foreground color for selected cells.,"

getSelectionForeground
public Color getSelectionForeground()
Returns the foreground color for selected cells.

Returns:
the Color object for the foreground property
See Also:
setSelectionForeground(java.awt.Color), 
setSelectionBackground(java.awt.Color)


"
JTable,getSelectionModel(),ListSelectionModel,Returns the ListSelectionModel that is used to maintain row selection state.,"

getSelectionModel
public ListSelectionModel getSelectionModel()
Returns the ListSelectionModel that is used to maintain row
 selection state.

Returns:
the object that provides row selection state, null
          if row selection is not allowed
See Also:
setSelectionModel(javax.swing.ListSelectionModel)


"
JTable,getShowHorizontalLines(),boolean,"Returns true if the table draws horizontal lines between cells, false if it doesn't.","

getShowHorizontalLines
public boolean getShowHorizontalLines()
Returns true if the table draws horizontal lines between cells, false if it
 doesn't. The default value is look and feel dependent.

Returns:
true if the table draws horizontal lines between cells, false if it
          doesn't
See Also:
setShowHorizontalLines(boolean)


"
JTable,getShowVerticalLines(),boolean,"Returns true if the table draws vertical lines between cells, false if it doesn't.","

getShowVerticalLines
public boolean getShowVerticalLines()
Returns true if the table draws vertical lines between cells, false if it
 doesn't. The default value is look and feel dependent.

Returns:
true if the table draws vertical lines between cells, false if it
          doesn't
See Also:
setShowVerticalLines(boolean)


"
JTable,getSurrendersFocusOnKeystroke(),boolean,Returns true if the editor should get the focus when keystrokes cause the editor to be activated,"

getSurrendersFocusOnKeystroke
public boolean getSurrendersFocusOnKeystroke()
Returns true if the editor should get the focus
 when keystrokes cause the editor to be activated

Returns:
true if the editor should get the focus
          when keystrokes cause the editor to be
          activated
Since:
1.4
See Also:
setSurrendersFocusOnKeystroke(boolean)


"
JTable,getTableHeader(),JTableHeader,Returns the tableHeader used by this JTable.,"

getTableHeader
public JTableHeader getTableHeader()
Returns the tableHeader used by this JTable.

Returns:
the tableHeader used by this table
See Also:
setTableHeader(javax.swing.table.JTableHeader)


"
JTable,getToolTipText(MouseEvent event),String,Overrides JComponent's getToolTipText method in order to allow the renderer's tips to be used if it has text set.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Overrides JComponent's getToolTipText
 method in order to allow the renderer's tips to be used
 if it has text set.
 
Note: For JTable to properly display
 tooltips of its renderers
 JTable must be a registered component with the
 ToolTipManager.
 This is done automatically in initializeLocalVars,
 but if at a later point JTable is told
 setToolTipText(null) it will unregister the table
 component, and no tips from renderers will display anymore.

Overrides:
getToolTipText in class JComponent
See Also:
JComponent.getToolTipText()


"
JTable,getUI(),TableUI,Returns the L&F object that renders this component.,"

getUI
public TableUI getUI()
Returns the L&F object that renders this component.

Returns:
the TableUI object that renders this component


"
JTable,getUIClassID(),String,Returns the suffix used to construct the name of the L&F class used to render this component.,"

getUIClassID
public String getUIClassID()
Returns the suffix used to construct the name of the L&F class used to
 render this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""TableUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTable,getUpdateSelectionOnSort(),boolean,Returns true if the selection should be updated after sorting.,"

getUpdateSelectionOnSort
public boolean getUpdateSelectionOnSort()
Returns true if the selection should be updated after sorting.

Returns:
whether to update the selection on a sort
Since:
1.6


"
JTable,"getValueAt(int row, int column)",Object,Returns the cell value at row and column.,"

getValueAt
public Object getValueAt(int row,
                         int column)
Returns the cell value at row and column.
 
Note: The column is specified in the table view's display
              order, and not in the TableModel's column
              order.  This is an important distinction because as the
              user rearranges the columns in the table,
              the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

Parameters:
row - the row whose value is to be queried
column - the column whose value is to be queried
Returns:
the Object at the specified cell


"
JTable,initializeLocalVars(),protected void,Initializes table properties to their default values.,"

initializeLocalVars
protected void initializeLocalVars()
Initializes table properties to their default values.

"
JTable,"isCellEditable(int row, int column)",boolean,Returns true if the cell at row and column is editable.,"

isCellEditable
public boolean isCellEditable(int row,
                              int column)
Returns true if the cell at row and column
 is editable.  Otherwise, invoking setValueAt on the cell
 will have no effect.
 
Note: The column is specified in the table view's display
              order, and not in the TableModel's column
              order.  This is an important distinction because as the
              user rearranges the columns in the table,
              the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

Parameters:
row - the row whose value is to be queried
column - the column whose value is to be queried
Returns:
true if the cell is editable
See Also:
setValueAt(java.lang.Object, int, int)


"
JTable,"isCellSelected(int row, int column)",boolean,Returns true if the specified indices are in the valid range of rows and columns and the cell at the specified position is selected.,"

isCellSelected
public boolean isCellSelected(int row,
                              int column)
Returns true if the specified indices are in the valid range of rows
 and columns and the cell at the specified position is selected.

Parameters:
row - the row being queried
column - the column being queried
Returns:
true if row and column are valid indices
              and the cell at index (row, column) is selected,
              where the first row and first column are at index 0


"
JTable,isColumnSelected(int column),boolean,"Returns true if the specified index is in the valid range of columns, and the column at that index is selected.","

isColumnSelected
public boolean isColumnSelected(int column)
Returns true if the specified index is in the valid range of columns,
 and the column at that index is selected.

Parameters:
column - the column in the column model
Returns:
true if column is a valid index and the column at
              that index is selected (where 0 is the first column)


"
JTable,isEditing(),boolean,Returns true if a cell is being edited.,"

isEditing
public boolean isEditing()
Returns true if a cell is being edited.

Returns:
true if the table is editing a cell
See Also:
editingColumn, 
editingRow


"
JTable,isRowSelected(int row),boolean,"Returns true if the specified index is in the valid range of rows, and the row at that index is selected.","

isRowSelected
public boolean isRowSelected(int row)
Returns true if the specified index is in the valid range of rows,
 and the row at that index is selected.

Returns:
true if row is a valid index and the row at
              that index is selected (where 0 is the first row)


"
JTable,"moveColumn(int column, int targetColumn)",void,Moves the column column to the position currently occupied by the column targetColumn in the view.,"

moveColumn
public void moveColumn(int column,
                       int targetColumn)
Moves the column column to the position currently
 occupied by the column targetColumn in the view.
 The old column at targetColumn is
 shifted left or right to make room.

Parameters:
column - the index of column to be moved
targetColumn - the new index of the column


"
JTable,paramString(),protected String,Returns a string representation of this table.,"

paramString
protected String paramString()
Returns a string representation of this table. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this table


"
JTable,"prepareEditor(TableCellEditor editor, int row, int column)",Component,"Prepares the editor by querying the data model for the value and selection state of the cell at row, column.","

prepareEditor
public Component prepareEditor(TableCellEditor editor,
                               int row,
                               int column)
Prepares the editor by querying the data model for the value and
 selection state of the cell at row, column.
 
Note:
 Throughout the table package, the internal implementations always
 use this method to prepare editors so that this default behavior
 can be safely overridden by a subclass.

Parameters:
editor - the TableCellEditor to set up
row - the row of the cell to edit,
                where 0 is the first row
column - the column of the cell to edit,
                where 0 is the first column
Returns:
the Component being edited


"
JTable,"prepareRenderer(TableCellRenderer renderer, int row, int column)",Component,"Prepares the renderer by querying the data model for the value and selection state of the cell at row, column.","

prepareRenderer
public Component prepareRenderer(TableCellRenderer renderer,
                                 int row,
                                 int column)
Prepares the renderer by querying the data model for the
 value and selection state
 of the cell at row, column.
 Returns the component (may be a Component
 or a JComponent) under the event location.
 
 During a printing operation, this method will configure the
 renderer without indicating selection or focus, to prevent
 them from appearing in the printed output. To do other
 customizations based on whether or not the table is being
 printed, you can check the value of
 JComponent.isPaintingForPrint(), either here
 or within custom renderers.
 
Note:
 Throughout the table package, the internal implementations always
 use this method to prepare renderers so that this default behavior
 can be safely overridden by a subclass.

Parameters:
renderer - the TableCellRenderer to prepare
row - the row of the cell to render, where 0 is the first row
column - the column of the cell to render,
                  where 0 is the first column
Returns:
the Component under the event location


"
JTable,print(),boolean,"A convenience method that displays a printing dialog, and then prints this JTable in mode PrintMode.FIT_WIDTH, with no header or footer text.","

print
public boolean print()
              throws PrinterException
A convenience method that displays a printing dialog, and then prints
 this JTable in mode PrintMode.FIT_WIDTH,
 with no header or footer text. A modal progress dialog, with an abort
 option, will be shown for the duration of printing.
 
 Note: In headless mode, no dialogs are shown and printing
 occurs on the default printer.

Returns:
true, unless printing is cancelled by the user
Throws:
SecurityException - if this thread is not allowed to
                           initiate a print job request
PrinterException - if an error in the print system causes the job
                          to be aborted
Since:
1.5
See Also:
print(JTable.PrintMode, MessageFormat, MessageFormat,
             boolean, PrintRequestAttributeSet, boolean, PrintService), 
getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)


"
JTable,print(JTable.PrintMode printMode),boolean,"A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with no header or footer text.","

print
public boolean print(JTable.PrintMode printMode)
              throws PrinterException
A convenience method that displays a printing dialog, and then prints
 this JTable in the given printing mode,
 with no header or footer text. A modal progress dialog, with an abort
 option, will be shown for the duration of printing.
 
 Note: In headless mode, no dialogs are shown and printing
 occurs on the default printer.

Parameters:
printMode - the printing mode that the printable should use
Returns:
true, unless printing is cancelled by the user
Throws:
SecurityException - if this thread is not allowed to
                           initiate a print job request
PrinterException - if an error in the print system causes the job
                          to be aborted
Since:
1.5
See Also:
print(JTable.PrintMode, MessageFormat, MessageFormat,
             boolean, PrintRequestAttributeSet, boolean, PrintService), 
getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)


"
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat)",boolean,"A convenience method that displays a printing dialog, and then prints this JTable in the given printing mode, with the specified header and footer text.","

print
public boolean print(JTable.PrintMode printMode,
                     MessageFormat headerFormat,
                     MessageFormat footerFormat)
              throws PrinterException
A convenience method that displays a printing dialog, and then prints
 this JTable in the given printing mode,
 with the specified header and footer text. A modal progress dialog,
 with an abort option, will be shown for the duration of printing.
 
 Note: In headless mode, no dialogs are shown and printing
 occurs on the default printer.

Parameters:
printMode - the printing mode that the printable should use
headerFormat - a MessageFormat specifying the text
                          to be used in printing a header,
                          or null for none
footerFormat - a MessageFormat specifying the text
                          to be used in printing a footer,
                          or null for none
Returns:
true, unless printing is cancelled by the user
Throws:
SecurityException - if this thread is not allowed to
                           initiate a print job request
PrinterException - if an error in the print system causes the job
                          to be aborted
Since:
1.5
See Also:
print(JTable.PrintMode, MessageFormat, MessageFormat,
             boolean, PrintRequestAttributeSet, boolean, PrintService), 
getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)


"
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintRequestAttributeSet attr, boolean interactive)",boolean,"Prints this table, as specified by the fully featured print method, with the default printer specified as the print service.","

print
public boolean print(JTable.PrintMode printMode,
                     MessageFormat headerFormat,
                     MessageFormat footerFormat,
                     boolean showPrintDialog,
                     PrintRequestAttributeSet attr,
                     boolean interactive)
              throws PrinterException,
                     HeadlessException
Prints this table, as specified by the fully featured
 print
 method, with the default printer specified as the print service.

Parameters:
printMode - the printing mode that the printable should use
headerFormat - a MessageFormat specifying the text
                          to be used in printing a header,
                          or null for none
footerFormat - a MessageFormat specifying the text
                          to be used in printing a footer,
                          or null for none
showPrintDialog - whether or not to display a print dialog
attr - a PrintRequestAttributeSet
                          specifying any printing attributes,
                          or null for none
interactive - whether or not to print in an interactive mode
Returns:
true, unless printing is cancelled by the user
Throws:
HeadlessException - if the method is asked to show a printing
                           dialog or run interactively, and
                           GraphicsEnvironment.isHeadless
                           returns true
SecurityException - if this thread is not allowed to
                           initiate a print job request
PrinterException - if an error in the print system causes the job
                          to be aborted
Since:
1.5
See Also:
print(JTable.PrintMode, MessageFormat, MessageFormat,
             boolean, PrintRequestAttributeSet, boolean, PrintService), 
getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat)


"
JTable,"print(JTable.PrintMode printMode, MessageFormat headerFormat, MessageFormat footerFormat, boolean showPrintDialog, PrintRequestAttributeSet attr, boolean interactive, PrintService service)",boolean,Prints this JTable.,"

print
public boolean print(JTable.PrintMode printMode,
                     MessageFormat headerFormat,
                     MessageFormat footerFormat,
                     boolean showPrintDialog,
                     PrintRequestAttributeSet attr,
                     boolean interactive,
                     PrintService service)
              throws PrinterException,
                     HeadlessException
Prints this JTable. Takes steps that the majority of
 developers would take in order to print a JTable.
 In short, it prepares the table, calls getPrintable to
 fetch an appropriate Printable, and then sends it to the
 printer.
 
 A boolean parameter allows you to specify whether or not
 a printing dialog is displayed to the user. When it is, the user may
 use the dialog to change the destination printer or printing attributes,
 or even to cancel the print. Another two parameters allow for a
 PrintService and printing attributes to be specified.
 These parameters can be used either to provide initial values for the
 print dialog, or to specify values when the dialog is not shown.
 
 A second boolean parameter allows you to specify whether
 or not to perform printing in an interactive mode. If true,
 a modal progress dialog, with an abort option, is displayed for the
 duration of printing . This dialog also prevents any user action which
 may affect the table. However, it can not prevent the table from being
 modified by code (for example, another thread that posts updates using
 SwingUtilities.invokeLater). It is therefore the
 responsibility of the developer to ensure that no other code modifies
 the table in any way during printing (invalid modifications include
 changes in: size, renderers, or underlying data). Printing behavior is
 undefined when the table is changed during printing.
 
 If false is specified for this parameter, no dialog will
 be displayed and printing will begin immediately on the event-dispatch
 thread. This blocks any other events, including repaints, from being
 processed until printing is complete. Although this effectively prevents
 the table from being changed, it doesn't provide a good user experience.
 For this reason, specifying false is only recommended when
 printing from an application with no visible GUI.
 
 Note: Attempting to show the printing dialog or run interactively, while
 in headless mode, will result in a HeadlessException.
 
 Before fetching the printable, this method will gracefully terminate
 editing, if necessary, to prevent an editor from showing in the printed
 result. Additionally, JTable will prepare its renderers
 during printing such that selection and focus are not indicated.
 As far as customizing further how the table looks in the printout,
 developers can provide custom renderers or paint code that conditionalize
 on the value of JComponent.isPaintingForPrint().
 
 See getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat) for more description on how the table is
 printed.

Parameters:
printMode - the printing mode that the printable should use
headerFormat - a MessageFormat specifying the text
                          to be used in printing a header,
                          or null for none
footerFormat - a MessageFormat specifying the text
                          to be used in printing a footer,
                          or null for none
showPrintDialog - whether or not to display a print dialog
attr - a PrintRequestAttributeSet
                          specifying any printing attributes,
                          or null for none
interactive - whether or not to print in an interactive mode
service - the destination PrintService,
                          or null to use the default printer
Returns:
true, unless printing is cancelled by the user
Throws:
HeadlessException - if the method is asked to show a printing
                           dialog or run interactively, and
                           GraphicsEnvironment.isHeadless
                           returns true
SecurityException - if a security manager exists and its
          SecurityManager.checkPrintJobAccess()
          method disallows this thread from creating a print job request
PrinterException - if an error in the print system causes the job
                          to be aborted
Since:
1.6
See Also:
getPrintable(javax.swing.JTable.PrintMode, java.text.MessageFormat, java.text.MessageFormat), 
GraphicsEnvironment.isHeadless()


"
JTable,"processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed)",protected boolean,Invoked to process the key bindings for ks as the result of the KeyEvent e.,"

processKeyBinding
protected boolean processKeyBinding(KeyStroke ks,
                                    KeyEvent e,
                                    int condition,
                                    boolean pressed)
Description copied from class: JComponent
Invoked to process the key bindings for ks as the result
 of the KeyEvent e. This obtains
 the appropriate InputMap,
 gets the binding, gets the action from the ActionMap,
 and then (if the action is found and the component
 is enabled) invokes notifyAction to notify the action.

Overrides:
processKeyBinding in class JComponent
Parameters:
ks - the KeyStroke queried
e - the KeyEvent
condition - one of the following values:
 
JComponent.WHEN_FOCUSED
 JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 JComponent.WHEN_IN_FOCUSED_WINDOW
 
pressed - true if the key is pressed
Returns:
true if there was a binding to an action, and the action
         was enabled


"
JTable,removeColumn(TableColumn aColumn),void,Removes aColumn from this JTable's array of columns.,"

removeColumn
public void removeColumn(TableColumn aColumn)
Removes aColumn from this JTable's
  array of columns.  Note: this method does not remove the column
  of data from the model; it just removes the TableColumn
  that was responsible for displaying it.

Parameters:
aColumn - the TableColumn to be removed
See Also:
addColumn(javax.swing.table.TableColumn)


"
JTable,"removeColumnSelectionInterval(int index0, int index1)",void,"Deselects the columns from index0 to index1, inclusive.","

removeColumnSelectionInterval
public void removeColumnSelectionInterval(int index0,
                                          int index1)
Deselects the columns from index0 to index1, inclusive.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or
                                          index1 lie outside
                                          [0, getColumnCount()-1]


"
JTable,removeEditor(),void,Discards the editor object and frees the real estate it used for cell rendering.,"

removeEditor
public void removeEditor()
Discards the editor object and frees the real estate it used for
 cell rendering.

"
JTable,removeNotify(),void,Calls the unconfigureEnclosingScrollPane method.,"

removeNotify
public void removeNotify()
Calls the unconfigureEnclosingScrollPane method.

Overrides:
removeNotify in class JComponent
See Also:
unconfigureEnclosingScrollPane()


"
JTable,"removeRowSelectionInterval(int index0, int index1)",void,"Deselects the rows from index0 to index1, inclusive.","

removeRowSelectionInterval
public void removeRowSelectionInterval(int index0,
                                       int index1)
Deselects the rows from index0 to index1, inclusive.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or
                                          index1 lie outside
                                          [0, getRowCount()-1]


"
JTable,resizeAndRepaint(),protected void,Equivalent to revalidate followed by repaint.,"

resizeAndRepaint
protected void resizeAndRepaint()
Equivalent to revalidate followed by repaint.

"
JTable,rowAtPoint(Point point),int,"Returns the index of the row that point lies in, or -1 if the result is not in the range [0, getRowCount()-1].","

rowAtPoint
public int rowAtPoint(Point point)
Returns the index of the row that point lies in,
 or -1 if the result is not in the range
 [0, getRowCount()-1].

Parameters:
point - the location of interest
Returns:
the index of the row that point lies in,
          or -1 if the result is not in the range
          [0, getRowCount()-1]
See Also:
columnAtPoint(java.awt.Point)


"
JTable,selectAll(),void,"Selects all rows, columns, and cells in the table.","

selectAll
public void selectAll()
Selects all rows, columns, and cells in the table.

"
JTable,setAutoCreateColumnsFromModel(boolean autoCreateColumnsFromModel),void,Sets this table's autoCreateColumnsFromModel flag.,"

setAutoCreateColumnsFromModel
public void setAutoCreateColumnsFromModel(boolean autoCreateColumnsFromModel)
Sets this table's autoCreateColumnsFromModel flag.
 This method calls createDefaultColumnsFromModel if
 autoCreateColumnsFromModel changes from false to true.

Parameters:
autoCreateColumnsFromModel - true if JTable should automatically create columns
See Also:
getAutoCreateColumnsFromModel(), 
createDefaultColumnsFromModel()


"
JTable,setAutoCreateRowSorter(boolean autoCreateRowSorter),void,Specifies whether a RowSorter should be created for the table whenever its model changes.,"

setAutoCreateRowSorter
public void setAutoCreateRowSorter(boolean autoCreateRowSorter)
Specifies whether a RowSorter should be created for the
 table whenever its model changes.
 
 When setAutoCreateRowSorter(true) is invoked, a TableRowSorter is immediately created and installed on the
 table.  While the autoCreateRowSorter property remains
 true, every time the model is changed, a new TableRowSorter is created and set as the table's row sorter.
 The default value for the autoCreateRowSorter
 property is false.

Parameters:
autoCreateRowSorter - whether or not a RowSorter
        should be automatically created
Since:
1.6
See Also:
TableRowSorter


"
JTable,setAutoResizeMode(int mode),void,Sets the table's auto resize mode when the table is resized.,"

setAutoResizeMode
public void setAutoResizeMode(int mode)
Sets the table's auto resize mode when the table is resized.  For further
 information on how the different resize modes work, see
 doLayout().

Parameters:
mode - One of 5 legal values:
                   AUTO_RESIZE_OFF,
                   AUTO_RESIZE_NEXT_COLUMN,
                   AUTO_RESIZE_SUBSEQUENT_COLUMNS,
                   AUTO_RESIZE_LAST_COLUMN,
                   AUTO_RESIZE_ALL_COLUMNS
See Also:
getAutoResizeMode(), 
doLayout()


"
JTable,setCellEditor(TableCellEditor anEditor),void,Sets the active cell editor.,"

setCellEditor
public void setCellEditor(TableCellEditor anEditor)
Sets the active cell editor.

Parameters:
anEditor - the active cell editor
See Also:
cellEditor


"
JTable,setCellSelectionEnabled(boolean cellSelectionEnabled),void,Sets whether this table allows both a column selection and a row selection to exist simultaneously.,"

setCellSelectionEnabled
public void setCellSelectionEnabled(boolean cellSelectionEnabled)
Sets whether this table allows both a column selection and a
 row selection to exist simultaneously. When set,
 the table treats the intersection of the row and column selection
 models as the selected cells. Override isCellSelected to
 change this default behavior. This method is equivalent to setting
 both the rowSelectionAllowed property and
 columnSelectionAllowed property of the
 columnModel to the supplied value.

Parameters:
cellSelectionEnabled - true if simultaneous row and column
                                  selection is allowed
See Also:
getCellSelectionEnabled(), 
isCellSelected(int, int)


"
JTable,setColumnModel(TableColumnModel columnModel),void,Sets the column model for this table to newModel and registers for listener notifications from the new column model.,"

setColumnModel
public void setColumnModel(TableColumnModel columnModel)
Sets the column model for this table to newModel and registers
 for listener notifications from the new column model. Also sets
 the column model of the JTableHeader to columnModel.

Parameters:
columnModel - the new data source for this table
Throws:
IllegalArgumentException - if columnModel is null
See Also:
getColumnModel()


"
JTable,setColumnSelectionAllowed(boolean columnSelectionAllowed),void,Sets whether the columns in this model can be selected.,"

setColumnSelectionAllowed
public void setColumnSelectionAllowed(boolean columnSelectionAllowed)
Sets whether the columns in this model can be selected.

Parameters:
columnSelectionAllowed - true if this model will allow column selection
See Also:
getColumnSelectionAllowed()


"
JTable,"setColumnSelectionInterval(int index0, int index1)",void,"Selects the columns from index0 to index1, inclusive.","

setColumnSelectionInterval
public void setColumnSelectionInterval(int index0,
                                       int index1)
Selects the columns from index0 to index1,
 inclusive.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or
                                          index1 lie outside
                                          [0, getColumnCount()-1]


"
JTable,"setDefaultEditor(Class<?> columnClass, TableCellEditor editor)",void,Sets a default cell editor to be used if no editor has been set in a TableColumn.,"

setDefaultEditor
public void setDefaultEditor(Class<?> columnClass,
                             TableCellEditor editor)
Sets a default cell editor to be used if no editor has been set in
 a TableColumn. If no editing is required in a table, or a
 particular column in a table, uses the isCellEditable
 method in the TableModel interface to ensure that this
 JTable will not start an editor in these columns.
 If editor is null, removes the default editor for this
 column class.

Parameters:
columnClass - set the default cell editor for this columnClass
editor - default cell editor to be used for this columnClass
See Also:
TableModel.isCellEditable(int, int), 
getDefaultEditor(java.lang.Class<?>), 
setDefaultRenderer(java.lang.Class<?>, javax.swing.table.TableCellRenderer)


"
JTable,"setDefaultRenderer(Class<?> columnClass, TableCellRenderer renderer)",void,Sets a default cell renderer to be used if no renderer has been set in a TableColumn.,"

setDefaultRenderer
public void setDefaultRenderer(Class<?> columnClass,
                               TableCellRenderer renderer)
Sets a default cell renderer to be used if no renderer has been set in
 a TableColumn. If renderer is null,
 removes the default renderer for this column class.

Parameters:
columnClass - set the default cell renderer for this columnClass
renderer - default cell renderer to be used for this
                         columnClass
See Also:
getDefaultRenderer(java.lang.Class<?>), 
setDefaultEditor(java.lang.Class<?>, javax.swing.table.TableCellEditor)


"
JTable,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.,"

setDragEnabled
public void setDragEnabled(boolean b)
Turns on or off automatic drag handling. In order to enable automatic
 drag handling, this property should be set to true, and the
 table's TransferHandler needs to be non-null.
 The default value of the dragEnabled property is false.
 
 The job of honoring this property, and recognizing a user drag gesture,
 lies with the look and feel implementation, and in particular, the table's
 TableUI. When automatic drag handling is enabled, most look and
 feels (including those that subclass BasicLookAndFeel) begin a
 drag and drop operation whenever the user presses the mouse button over
 an item (in single selection mode) or a selection (in other selection
 modes) and then moves the mouse a few pixels. Setting this property to
 true can therefore have a subtle effect on how selections behave.
 
 If a look and feel is used that ignores this property, you can still
 begin a drag and drop operation by calling exportAsDrag on the
 table's TransferHandler.

Parameters:
b - whether or not to enable automatic drag handling
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTable,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.,"

setDropMode
public final void setDropMode(DropMode dropMode)
Sets the drop mode for this component. For backward compatibility,
 the default for this property is DropMode.USE_SELECTION.
 Usage of one of the other modes is recommended, however, for an
 improved user experience. DropMode.ON, for instance,
 offers similar behavior of showing items as selected, but does so without
 affecting the actual selection in the table.
 
JTable supports the following drop modes:
 
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.INSERT_ROWS
DropMode.INSERT_COLS
DropMode.ON_OR_INSERT
DropMode.ON_OR_INSERT_ROWS
DropMode.ON_OR_INSERT_COLS


 The drop mode is only meaningful if this component has a
 TransferHandler that accepts drops.

Parameters:
dropMode - the drop mode to use
Throws:
IllegalArgumentException - if the drop mode is unsupported
         or null
Since:
1.6
See Also:
getDropMode(), 
getDropLocation(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTable,setEditingColumn(int aColumn),void,Sets the editingColumn variable.,"

setEditingColumn
public void setEditingColumn(int aColumn)
Sets the editingColumn variable.

Parameters:
aColumn - the column of the cell to be edited
See Also:
editingColumn


"
JTable,setEditingRow(int aRow),void,Sets the editingRow variable.,"

setEditingRow
public void setEditingRow(int aRow)
Sets the editingRow variable.

Parameters:
aRow - the row of the cell to be edited
See Also:
editingRow


"
JTable,setFillsViewportHeight(boolean fillsViewportHeight),void,Sets whether or not this table is always made large enough to fill the height of an enclosing viewport.,"

setFillsViewportHeight
public void setFillsViewportHeight(boolean fillsViewportHeight)
Sets whether or not this table is always made large enough
 to fill the height of an enclosing viewport. If the preferred
 height of the table is smaller than the viewport, then the table
 will be stretched to fill the viewport. In other words, this
 ensures the table is never smaller than the viewport.
 The default for this property is false.

Parameters:
fillsViewportHeight - whether or not this table is always
        made large enough to fill the height of an enclosing
        viewport
Since:
1.6
See Also:
getFillsViewportHeight(), 
getScrollableTracksViewportHeight()


"
JTable,setGridColor(Color gridColor),void,Sets the color used to draw grid lines to gridColor and redisplays.,"

setGridColor
public void setGridColor(Color gridColor)
Sets the color used to draw grid lines to gridColor and redisplays.
 The default color is look and feel dependent.

Parameters:
gridColor - the new color of the grid lines
Throws:
IllegalArgumentException - if gridColor is null
See Also:
getGridColor()


"
JTable,setIntercellSpacing(Dimension intercellSpacing),void,Sets the rowMargin and the columnMargin -- the height and width of the space between cells -- to intercellSpacing.,"

setIntercellSpacing
public void setIntercellSpacing(Dimension intercellSpacing)
Sets the rowMargin and the columnMargin --
 the height and width of the space between cells -- to
 intercellSpacing.

Parameters:
intercellSpacing - a Dimension
                                  specifying the new width
                                  and height between cells
See Also:
getIntercellSpacing()


"
JTable,setModel(TableModel dataModel),void,Sets the data model for this table to newModel and registers with it for listener notifications from the new data model.,"

setModel
public void setModel(TableModel dataModel)
Sets the data model for this table to newModel and registers
 with it for listener notifications from the new data model.

Parameters:
dataModel - the new data source for this table
Throws:
IllegalArgumentException - if newModel is null
See Also:
getModel()


"
JTable,setPreferredScrollableViewportSize(Dimension size),void,Sets the preferred size of the viewport for this table.,"

setPreferredScrollableViewportSize
public void setPreferredScrollableViewportSize(Dimension size)
Sets the preferred size of the viewport for this table.

Parameters:
size - a Dimension object specifying the preferredSize of a
              JViewport whose view is this table
See Also:
Scrollable.getPreferredScrollableViewportSize()


"
JTable,setRowHeight(int rowHeight),void,"Sets the height, in pixels, of all cells to rowHeight, revalidates, and repaints.","

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height, in pixels, of all cells to rowHeight,
 revalidates, and repaints.
 The height of the cells will be equal to the row height minus
 the row margin.

Parameters:
rowHeight - new row height
Throws:
IllegalArgumentException - if rowHeight is
                                          less than 1
See Also:
getRowHeight()


"
JTable,"setRowHeight(int row, int rowHeight)",void,"Sets the height for row to rowHeight, revalidates, and repaints.","

setRowHeight
public void setRowHeight(int row,
                         int rowHeight)
Sets the height for row to rowHeight,
 revalidates, and repaints. The height of the cells in this row
 will be equal to the row height minus the row margin.

Parameters:
row - the row whose height is being
                                                changed
rowHeight - new row height, in pixels
Throws:
IllegalArgumentException - if rowHeight is
                                          less than 1
Since:
1.3


"
JTable,setRowMargin(int rowMargin),void,Sets the amount of empty space between cells in adjacent rows.,"

setRowMargin
public void setRowMargin(int rowMargin)
Sets the amount of empty space between cells in adjacent rows.

Parameters:
rowMargin - the number of pixels between cells in a row
See Also:
getRowMargin()


"
JTable,setRowSelectionAllowed(boolean rowSelectionAllowed),void,Sets whether the rows in this model can be selected.,"

setRowSelectionAllowed
public void setRowSelectionAllowed(boolean rowSelectionAllowed)
Sets whether the rows in this model can be selected.

Parameters:
rowSelectionAllowed - true if this model will allow row selection
See Also:
getRowSelectionAllowed()


"
JTable,"setRowSelectionInterval(int index0, int index1)",void,"Selects the rows from index0 to index1, inclusive.","

setRowSelectionInterval
public void setRowSelectionInterval(int index0,
                                    int index1)
Selects the rows from index0 to index1,
 inclusive.

Parameters:
index0 - one end of the interval
index1 - the other end of the interval
Throws:
IllegalArgumentException - if index0 or
                                          index1 lie outside
                                          [0, getRowCount()-1]


"
JTable,setRowSorter(RowSorter<? extends TableModel> sorter),void,Sets the RowSorter.,"

setRowSorter
public void setRowSorter(RowSorter<? extends TableModel> sorter)
Sets the RowSorter.  RowSorter is used
 to provide sorting and filtering to a JTable.
 
 This method clears the selection and resets any variable row heights.
 
 This method fires a PropertyChangeEvent when appropriate,
 with the property name ""rowSorter"".  For
 backward-compatibility, this method fires an additional event with the
 property name ""sorter"".
 
 If the underlying model of the RowSorter differs from
 that of this JTable undefined behavior will result.

Parameters:
sorter - the RowSorter; null turns
        sorting off
Since:
1.6
See Also:
TableRowSorter


"
JTable,setSelectionBackground(Color selectionBackground),void,Sets the background color for selected cells.,"

setSelectionBackground
public void setSelectionBackground(Color selectionBackground)
Sets the background color for selected cells.  Cell renderers
 can use this color to the fill selected cells.
 
 The default value of this property is defined by the look
 and feel implementation.
 
 This is a JavaBeans bound property.

Parameters:
selectionBackground - the Color to use for the background
                             of selected cells
See Also:
getSelectionBackground(), 
setSelectionForeground(java.awt.Color), 
JComponent.setForeground(java.awt.Color), 
JComponent.setBackground(java.awt.Color), 
JComponent.setFont(java.awt.Font)


"
JTable,setSelectionForeground(Color selectionForeground),void,Sets the foreground color for selected cells.,"

setSelectionForeground
public void setSelectionForeground(Color selectionForeground)
Sets the foreground color for selected cells.  Cell renderers
 can use this color to render text and graphics for selected
 cells.
 
 The default value of this property is defined by the look
 and feel implementation.
 
 This is a JavaBeans bound property.

Parameters:
selectionForeground - the Color to use in the foreground
                             for selected list items
See Also:
getSelectionForeground(), 
setSelectionBackground(java.awt.Color), 
JComponent.setForeground(java.awt.Color), 
JComponent.setBackground(java.awt.Color), 
JComponent.setFont(java.awt.Font)


"
JTable,setSelectionMode(int selectionMode),void,"Sets the table's selection mode to allow only single selections, a single contiguous interval, or multiple intervals.","

setSelectionMode
public void setSelectionMode(int selectionMode)
Sets the table's selection mode to allow only single selections, a single
 contiguous interval, or multiple intervals.
 
Note:
JTable provides all the methods for handling
 column and row selection.  When setting states,
 such as setSelectionMode, it not only
 updates the mode for the row selection model but also sets similar
 values in the selection model of the columnModel.
 If you want to have the row and column selection models operating
 in different modes, set them both directly.
 
 Both the row and column selection models for JTable
 default to using a DefaultListSelectionModel
 so that JTable works the same way as the
 JList. See the setSelectionMode method
 in JList for details about the modes.

See Also:
JList.setSelectionMode(int)


"
JTable,setSelectionModel(ListSelectionModel newModel),void,Sets the row selection model for this table to newModel and registers for listener notifications from the new selection model.,"

setSelectionModel
public void setSelectionModel(ListSelectionModel newModel)
Sets the row selection model for this table to newModel
 and registers for listener notifications from the new selection model.

Parameters:
newModel - the new selection model
Throws:
IllegalArgumentException - if newModel is null
See Also:
getSelectionModel()


"
JTable,setShowGrid(boolean showGrid),void,Sets whether the table draws grid lines around cells.,"

setShowGrid
public void setShowGrid(boolean showGrid)
Sets whether the table draws grid lines around cells.
  If showGrid is true it does; if it is false it doesn't.
  There is no getShowGrid method as this state is held
  in two variables -- showHorizontalLines and showVerticalLines --
  each of which can be queried independently.

Parameters:
showGrid - true if table view should draw grid lines
See Also:
setShowVerticalLines(boolean), 
setShowHorizontalLines(boolean)


"
JTable,setShowHorizontalLines(boolean showHorizontalLines),void,Sets whether the table draws horizontal lines between cells.,"

setShowHorizontalLines
public void setShowHorizontalLines(boolean showHorizontalLines)
Sets whether the table draws horizontal lines between cells.
  If showHorizontalLines is true it does; if it is false it doesn't.

Parameters:
showHorizontalLines - true if table view should draw horizontal lines
See Also:
getShowHorizontalLines(), 
setShowGrid(boolean), 
setShowVerticalLines(boolean)


"
JTable,setShowVerticalLines(boolean showVerticalLines),void,Sets whether the table draws vertical lines between cells.,"

setShowVerticalLines
public void setShowVerticalLines(boolean showVerticalLines)
Sets whether the table draws vertical lines between cells.
  If showVerticalLines is true it does; if it is false it doesn't.

Parameters:
showVerticalLines - true if table view should draw vertical lines
See Also:
getShowVerticalLines(), 
setShowGrid(boolean), 
setShowHorizontalLines(boolean)


"
JTable,setSurrendersFocusOnKeystroke(boolean surrendersFocusOnKeystroke),void,Sets whether editors in this JTable get the keyboard focus when an editor is activated as a result of the JTable forwarding keyboard events for a cell.,"

setSurrendersFocusOnKeystroke
public void setSurrendersFocusOnKeystroke(boolean surrendersFocusOnKeystroke)
Sets whether editors in this JTable get the keyboard focus
 when an editor is activated as a result of the JTable
 forwarding keyboard events for a cell.
 By default, this property is false, and the JTable
 retains the focus unless the cell is clicked.

Parameters:
surrendersFocusOnKeystroke - true if the editor should get the focus
          when keystrokes cause the editor to be
          activated
Since:
1.4
See Also:
getSurrendersFocusOnKeystroke()


"
JTable,setTableHeader(JTableHeader tableHeader),void,Sets the tableHeader working with this JTable to newHeader.,"

setTableHeader
public void setTableHeader(JTableHeader tableHeader)
Sets the tableHeader working with this JTable to newHeader.
 It is legal to have a null tableHeader.

Parameters:
tableHeader - new tableHeader
See Also:
getTableHeader()


"
JTable,setUI(TableUI ui),void,Sets the L&F object that renders this component and repaints.,"

setUI
public void setUI(TableUI ui)
Sets the L&F object that renders this component and repaints.

Parameters:
ui - the TableUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JTable,setUpdateSelectionOnSort(boolean update),void,Specifies whether the selection should be updated after sorting.,"

setUpdateSelectionOnSort
public void setUpdateSelectionOnSort(boolean update)
Specifies whether the selection should be updated after sorting.
 If true, on sorting the selection is reset such that
 the same rows, in terms of the model, remain selected.  The default
 is true.

Parameters:
update - whether or not to update the selection on sorting
Since:
1.6


"
JTable,"setValueAt(Object aValue, int row, int column)",void,Sets the value for the cell in the table model at row and column.,"

setValueAt
public void setValueAt(Object aValue,
                       int row,
                       int column)
Sets the value for the cell in the table model at row
 and column.
 
Note: The column is specified in the table view's display
              order, and not in the TableModel's column
              order.  This is an important distinction because as the
              user rearranges the columns in the table,
              the column at a given index in the view will change.
              Meanwhile the user's actions never affect the model's
              column ordering.

 aValue is the new value.

Parameters:
aValue - the new value
row - the row of the cell to be changed
column - the column of the cell to be changed
See Also:
getValueAt(int, int)


"
JTable,sizeColumnsToFit(boolean lastColumnOnly),void,"Deprecated. As of Swing version 1.0.3, replaced by doLayout().","

sizeColumnsToFit
@Deprecated
public void sizeColumnsToFit(boolean lastColumnOnly)
Deprecated. As of Swing version 1.0.3,
 replaced by doLayout().
Sizes the table columns to fit the available space.

See Also:
doLayout()


"
JTable,sizeColumnsToFit(int resizingColumn),void,Obsolete as of Java 2 platform v1.4.,"

sizeColumnsToFit
public void sizeColumnsToFit(int resizingColumn)
Obsolete as of Java 2 platform v1.4.  Please use the
 doLayout() method instead.

Parameters:
resizingColumn - the column whose resizing made this adjustment
                          necessary or -1 if there is no such column
See Also:
doLayout()


"
JTable,sorterChanged(RowSorterEvent e),void,RowSorterListener notification that the RowSorter has changed in some way.,"

sorterChanged
public void sorterChanged(RowSorterEvent e)
RowSorterListener notification that the
 RowSorter has changed in some way.

Specified by:
sorterChanged in interface RowSorterListener
Parameters:
e - the RowSorterEvent describing the change
Throws:
NullPointerException - if e is null
Since:
1.6


"
JTable,tableChanged(TableModelEvent e),void,Invoked when this table's TableModel generates a TableModelEvent.,"

tableChanged
public void tableChanged(TableModelEvent e)
Invoked when this table's TableModel generates
 a TableModelEvent.
 The TableModelEvent should be constructed in the
 coordinate system of the model; the appropriate mapping to the
 view coordinate system is performed by this JTable
 when it receives the event.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.
 
 Note that as of 1.3, this method clears the selection, if any.

Specified by:
tableChanged in interface TableModelListener


"
JTable,unconfigureEnclosingScrollPane(),protected void,Reverses the effect of configureEnclosingScrollPane by replacing the columnHeaderView of the enclosing scroll pane with null.,"

unconfigureEnclosingScrollPane
protected void unconfigureEnclosingScrollPane()
Reverses the effect of configureEnclosingScrollPane
 by replacing the columnHeaderView of the enclosing
 scroll pane with null. JTable's
 removeNotify method calls
 this method, which is protected so that this default uninstallation
 procedure can be overridden by a subclass.

Since:
1.3
See Also:
removeNotify(), 
configureEnclosingScrollPane()


"
JTable,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JTable,valueChanged(ListSelectionEvent e),void,Invoked when the row selection changes -- repaints to show the new selection.,"

valueChanged
public void valueChanged(ListSelectionEvent e)
Invoked when the row selection changes -- repaints to show the new
 selection.
 
 Application code will not use these methods explicitly, they
 are used internally by JTable.

Specified by:
valueChanged in interface ListSelectionListener
Parameters:
e - the event received
See Also:
ListSelectionListener


"
JTable.DropLocation,getColumn(),int,Returns the column index where a dropped item should be placed in the table.,"

getColumn
public int getColumn()
Returns the column index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertColumn(). If that method returns
 true this value indicates the index where a new
 column should be inserted. Otherwise, it represents the value
 of an existing column on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no column could be calculated.

Returns:
the drop row


"
JTable.DropLocation,getRow(),int,Returns the row index where a dropped item should be placed in the table.,"

getRow
public int getRow()
Returns the row index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertRow(). If that method returns
 true this value indicates the index where a new
 row should be inserted. Otherwise, it represents the value
 of an existing row on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no row could be calculated.

Returns:
the drop row


"
JTable.DropLocation,isInsertColumn(),boolean,Returns whether or not this location represents an insert of a column.,"

isInsertColumn
public boolean isInsertColumn()
Returns whether or not this location represents an insert
 of a column.

Returns:
whether or not this is an insert column


"
JTable.DropLocation,isInsertRow(),boolean,Returns whether or not this location represents an insert of a row.,"

isInsertRow
public boolean isInsertRow()
Returns whether or not this location represents an insert
 of a row.

Returns:
whether or not this is an insert row


"
JTable.DropLocation,toString(),String,Returns a string representation of this drop location.,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class TransferHandler.DropLocation
Returns:
a string representation of this drop location


"
JTextArea,append(String str),void,Appends the given text to the end of the document.,"

append
public void append(String str)
Appends the given text to the end of the document.  Does nothing if
 the model is null or the string is null or empty.

Parameters:
str - the text to insert
See Also:
insert(java.lang.String, int)


"
JTextArea,createDefaultModel(),protected Document,Creates the default implementation of the model to be used at construction if one isn't explicitly given.,"

createDefaultModel
protected Document createDefaultModel()
Creates the default implementation of the model
 to be used at construction if one isn't explicitly
 given.  A new instance of PlainDocument is returned.

Returns:
the default document model


"
JTextArea,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTextArea.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JTextArea.
 For JTextAreas, the AccessibleContext takes the form of an
 AccessibleJTextArea.
 A new AccessibleJTextArea instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JTextComponent
Returns:
an AccessibleJTextArea that serves as the
         AccessibleContext of this JTextArea


"
JTextArea,getColumns(),int,Returns the number of columns in the TextArea.,"

getColumns
public int getColumns()
Returns the number of columns in the TextArea.

Returns:
number of columns >= 0


"
JTextArea,getColumnWidth(),protected int,Gets column width.,"

getColumnWidth
protected int getColumnWidth()
Gets column width.
 The meaning of what a column is can be considered a fairly weak
 notion for some fonts.  This method is used to define the width
 of a column.  By default this is defined to be the width of the
 character m for the font used.  This method can be
 redefined to be some alternative amount.

Returns:
the column width >= 1


"
JTextArea,getLineCount(),int,Determines the number of lines contained in the area.,"

getLineCount
public int getLineCount()
Determines the number of lines contained in the area.

Returns:
the number of lines > 0


"
JTextArea,getLineEndOffset(int line),int,Determines the offset of the end of the given line.,"

getLineEndOffset
public int getLineEndOffset(int line)
                     throws BadLocationException
Determines the offset of the end of the given line.

Parameters:
line - the line >= 0
Returns:
the offset >= 0
Throws:
BadLocationException - Thrown if the line is
 less than zero or greater or equal to the number of
 lines contained in the document (as reported by
 getLineCount).


"
JTextArea,getLineOfOffset(int offset),int,Translates an offset into the components text to a line number.,"

getLineOfOffset
public int getLineOfOffset(int offset)
                    throws BadLocationException
Translates an offset into the components text to a
 line number.

Parameters:
offset - the offset >= 0
Returns:
the line number >= 0
Throws:
BadLocationException - thrown if the offset is
   less than zero or greater than the document length.


"
JTextArea,getLineStartOffset(int line),int,Determines the offset of the start of the given line.,"

getLineStartOffset
public int getLineStartOffset(int line)
                       throws BadLocationException
Determines the offset of the start of the given line.

Parameters:
line - the line number to translate >= 0
Returns:
the offset >= 0
Throws:
BadLocationException - thrown if the line is
 less than zero or greater or equal to the number of
 lines contained in the document (as reported by
 getLineCount).


"
JTextArea,getLineWrap(),boolean,Gets the line-wrapping policy of the text area.,"

getLineWrap
public boolean getLineWrap()
Gets the line-wrapping policy of the text area.  If set
 to true the lines will be wrapped if they are too long
 to fit within the allocated width.  If set to false,
 the lines will always be unwrapped.

Returns:
if lines will be wrapped


"
JTextArea,getPreferredScrollableViewportSize(),Dimension,Returns the preferred size of the viewport if this component is embedded in a JScrollPane.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Returns the preferred size of the viewport if this component
 is embedded in a JScrollPane.  This uses the desired column
 and row settings if they have been set, otherwise the superclass
 behavior is used.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Overrides:
getPreferredScrollableViewportSize in class JTextComponent
Returns:
The preferredSize of a JViewport whose view is this Scrollable.
See Also:
JComponent.getPreferredSize()


"
JTextArea,getPreferredSize(),Dimension,Returns the preferred size of the TextArea.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size of the TextArea.  This is the
 maximum of the size needed to display the text and the
 size requested for the viewport.

Overrides:
getPreferredSize in class JComponent
Returns:
the size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
JTextArea,getRowHeight(),protected int,Defines the meaning of the height of a row.,"

getRowHeight
protected int getRowHeight()
Defines the meaning of the height of a row.  This defaults to
 the height of the font.

Returns:
the height >= 1


"
JTextArea,getRows(),int,Returns the number of rows in the TextArea.,"

getRows
public int getRows()
Returns the number of rows in the TextArea.

Returns:
the number of rows >= 0


"
JTextArea,getScrollableTracksViewportWidth(),boolean,Returns true if a viewport should always force the width of this Scrollable to match the width of the viewport.,"

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns true if a viewport should always force the width of this
 Scrollable to match the width of the viewport.  This is implemented
 to return true if the line wrapping policy is true, and false
 if lines are not being wrapped.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Overrides:
getScrollableTracksViewportWidth in class JTextComponent
Returns:
true if a viewport should force the Scrollables width
 to match its own.


"
JTextArea,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Components that display logical rows or columns should compute the scroll increment that will completely expose one new row or column, depending on the value of orientation.","

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Components that display logical rows or columns should compute
 the scroll increment that will completely expose one new row
 or column, depending on the value of orientation.  This is implemented
 to use the values returned by the getRowHeight and
 getColumnWidth methods.
 
 Scrolling containers, like JScrollPane, will use this method
 each time the user requests a unit scroll.

Specified by:
getScrollableUnitIncrement in interface Scrollable
Overrides:
getScrollableUnitIncrement in class JTextComponent
Parameters:
visibleRect - the view area visible within the viewport
orientation - Either SwingConstants.VERTICAL or
   SwingConstants.HORIZONTAL.
direction - Less than zero to scroll up/left,
   greater than zero for down/right.
Returns:
The ""unit"" increment for scrolling in the specified direction
Throws:
IllegalArgumentException - for an invalid orientation
See Also:
JScrollBar.setUnitIncrement(int), 
getRowHeight(), 
getColumnWidth()


"
JTextArea,getTabSize(),int,Gets the number of characters used to expand tabs.,"

getTabSize
public int getTabSize()
Gets the number of characters used to expand tabs.  If the document is
 null or doesn't have a tab setting, return a default of 8.

Returns:
the number of characters


"
JTextArea,getUIClassID(),String,Returns the class ID for the UI.,"

getUIClassID
public String getUIClassID()
Returns the class ID for the UI.

Overrides:
getUIClassID in class JComponent
Returns:
the ID (""TextAreaUI"")
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTextArea,getWrapStyleWord(),boolean,Gets the style of wrapping used if the text area is wrapping lines.,"

getWrapStyleWord
public boolean getWrapStyleWord()
Gets the style of wrapping used if the text area is wrapping
 lines.  If set to true the lines will be wrapped at word
 boundaries (ie whitespace) if they are too long
 to fit within the allocated width.  If set to false,
 the lines will be wrapped at character boundaries.

Returns:
if the wrap style should be word boundaries
  instead of character boundaries
See Also:
setWrapStyleWord(boolean)


"
JTextArea,"insert(String str, int pos)",void,Inserts the specified text at the specified position.,"

insert
public void insert(String str,
                   int pos)
Inserts the specified text at the specified position.  Does nothing
 if the model is null or if the text is null or empty.

Parameters:
str - the text to insert
pos - the position at which to insert >= 0
Throws:
IllegalArgumentException - if pos is an
  invalid position in the model
See Also:
TextComponent.setText(java.lang.String), 
replaceRange(java.lang.String, int, int)


"
JTextArea,paramString(),protected String,Returns a string representation of this JTextArea.,"

paramString
protected String paramString()
Returns a string representation of this JTextArea. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JTextComponent
Returns:
a string representation of this JTextArea.


"
JTextArea,"replaceRange(String str, int start, int end)",void,Replaces text from the indicated start to end position with the new text specified.,"

replaceRange
public void replaceRange(String str,
                         int start,
                         int end)
Replaces text from the indicated start to end position with the
 new text specified.  Does nothing if the model is null.  Simply
 does a delete if the new string is null or empty.

Parameters:
str - the text to use as the replacement
start - the start position >= 0
end - the end position >= start
Throws:
IllegalArgumentException - if part of the range is an
  invalid position in the model
See Also:
insert(java.lang.String, int)


"
JTextArea,setColumns(int columns),void,Sets the number of columns for this TextArea.,"

setColumns
public void setColumns(int columns)
Sets the number of columns for this TextArea.  Does an invalidate()
 after setting the new value.

Parameters:
columns - the number of columns >= 0
Throws:
IllegalArgumentException - if columns is less than 0
See Also:
getColumns()


"
JTextArea,setFont(Font f),void,Sets the current font.,"

setFont
public void setFont(Font f)
Sets the current font.  This removes cached row height and column
 width so the new font will be reflected, and calls revalidate().

Overrides:
setFont in class JComponent
Parameters:
f - the font to use as the current font
See Also:
Component.getFont()


"
JTextArea,setLineWrap(boolean wrap),void,Sets the line-wrapping policy of the text area.,"

setLineWrap
public void setLineWrap(boolean wrap)
Sets the line-wrapping policy of the text area.  If set
 to true the lines will be wrapped if they are too long
 to fit within the allocated width.  If set to false,
 the lines will always be unwrapped.  A PropertyChange
 event (""lineWrap"") is fired when the policy is changed.
 By default this property is false.

Parameters:
wrap - indicates if lines should be wrapped
See Also:
getLineWrap()


"
JTextArea,setRows(int rows),void,Sets the number of rows for this TextArea.,"

setRows
public void setRows(int rows)
Sets the number of rows for this TextArea.  Calls invalidate() after
 setting the new value.

Parameters:
rows - the number of rows >= 0
Throws:
IllegalArgumentException - if rows is less than 0
See Also:
getRows()


"
JTextArea,setTabSize(int size),void,Sets the number of characters to expand tabs to.,"

setTabSize
public void setTabSize(int size)
Sets the number of characters to expand tabs to.
 This will be multiplied by the maximum advance for
 variable width fonts.  A PropertyChange event (""tabSize"") is fired
 when the tab size changes.

Parameters:
size - number of characters to expand to
See Also:
getTabSize()


"
JTextArea,setWrapStyleWord(boolean word),void,Sets the style of wrapping used if the text area is wrapping lines.,"

setWrapStyleWord
public void setWrapStyleWord(boolean word)
Sets the style of wrapping used if the text area is wrapping
 lines.  If set to true the lines will be wrapped at word
 boundaries (whitespace) if they are too long
 to fit within the allocated width.  If set to false,
 the lines will be wrapped at character boundaries.
 By default this property is false.

Parameters:
word - indicates if word boundaries should be used
   for line wrapping
See Also:
getWrapStyleWord()


"
JTextField,"actionPropertyChanged(Action action, String propertyName)",protected void,Updates the textfield's state in response to property changes in associated action.,"

actionPropertyChanged
protected void actionPropertyChanged(Action action,
                                     String propertyName)
Updates the textfield's state in response to property changes in
 associated action. This method is invoked from the
 PropertyChangeListener returned from
 createActionPropertyChangeListener. Subclasses do not normally
 need to invoke this. Subclasses that support additional Action
 properties should override this and
 configurePropertiesFromAction.
 
 Refer to the table at 
 Swing Components Supporting Action for a list of
 the properties this method sets.

Parameters:
action - the Action associated with this textfield
propertyName - the name of the property that changed
Since:
1.6
See Also:
Action, 
configurePropertiesFromAction(javax.swing.Action)


"
JTextField,addActionListener(ActionListener l),void,Adds the specified action listener to receive action events from this textfield.,"

addActionListener
public void addActionListener(ActionListener l)
Adds the specified action listener to receive
 action events from this textfield.

Parameters:
l - the action listener to be added


"
JTextField,configurePropertiesFromAction(Action a),protected void,Sets the properties on this textfield to match those in the specified Action.,"

configurePropertiesFromAction
protected void configurePropertiesFromAction(Action a)
Sets the properties on this textfield to match those in the specified
 Action.  Refer to 
 Swing Components Supporting Action for more
 details as to which properties this sets.

Parameters:
a - the Action from which to get the properties,
          or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JTextField,createActionPropertyChangeListener(Action a),protected PropertyChangeListener,Creates and returns a PropertyChangeListener that is responsible for listening for changes from the specified Action and updating the appropriate properties.,"

createActionPropertyChangeListener
protected PropertyChangeListener createActionPropertyChangeListener(Action a)
Creates and returns a PropertyChangeListener that is
 responsible for listening for changes from the specified
 Action and updating the appropriate properties.
 
Warning: If you subclass this do not create an anonymous
 inner class.  If you do the lifetime of the textfield will be tied to
 that of the Action.

Parameters:
a - the textfield's action
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JTextField,createDefaultModel(),protected Document,Creates the default implementation of the model to be used at construction if one isn't explicitly given.,"

createDefaultModel
protected Document createDefaultModel()
Creates the default implementation of the model
 to be used at construction if one isn't explicitly
 given.  An instance of PlainDocument is returned.

Returns:
the default model implementation


"
JTextField,fireActionPerformed(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionPerformed
protected void fireActionPerformed()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created.
 The listener list is processed in last to
 first order.

See Also:
EventListenerList


"
JTextField,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTextField.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this
 JTextField. For JTextFields,
 the AccessibleContext takes the form of an
 AccessibleJTextField.
 A new AccessibleJTextField instance is created
 if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JTextComponent
Returns:
an AccessibleJTextField that serves as the
         AccessibleContext of this JTextField


"
JTextField,getAction(),Action,"Returns the currently set Action for this ActionEvent source, or null if no Action is set.","

getAction
public Action getAction()
Returns the currently set Action for this
 ActionEvent source, or null
 if no Action is set.

Returns:
the Action for this ActionEvent source,
          or null
Since:
1.3
See Also:
Action, 
setAction(javax.swing.Action)


"
JTextField,getActionListeners(),ActionListener[],Returns an array of all the ActionListeners added to this JTextField with addActionListener().,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the ActionListeners added
 to this JTextField with addActionListener().

Returns:
all of the ActionListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JTextField,getActions(),Action[],Fetches the command list for the editor.,"

getActions
public Action[] getActions()
Fetches the command list for the editor.  This is
 the list of commands supported by the plugged-in UI
 augmented by the collection of commands that the
 editor itself supports.  These are useful for binding
 to events, such as in a keymap.

Overrides:
getActions in class JTextComponent
Returns:
the command list


"
JTextField,getColumns(),int,Returns the number of columns in this TextField.,"

getColumns
public int getColumns()
Returns the number of columns in this TextField.

Returns:
the number of columns >= 0


"
JTextField,getColumnWidth(),protected int,Returns the column width.,"

getColumnWidth
protected int getColumnWidth()
Returns the column width.
 The meaning of what a column is can be considered a fairly weak
 notion for some fonts.  This method is used to define the width
 of a column.  By default this is defined to be the width of the
 character m for the font used.  This method can be
 redefined to be some alternative amount

Returns:
the column width >= 1


"
JTextField,getHorizontalAlignment(),int,Returns the horizontal alignment of the text.,"

getHorizontalAlignment
public int getHorizontalAlignment()
Returns the horizontal alignment of the text.
 Valid keys are:
 
JTextField.LEFT
JTextField.CENTER
JTextField.RIGHT
JTextField.LEADING
JTextField.TRAILING


Returns:
the horizontal alignment


"
JTextField,getHorizontalVisibility(),BoundedRangeModel,Gets the visibility of the text field.,"

getHorizontalVisibility
public BoundedRangeModel getHorizontalVisibility()
Gets the visibility of the text field.  This can
 be adjusted to change the location of the visible
 area if the size of the field is greater than
 the area that was allocated to the field.

 
 The fields look-and-feel implementation manages
 the values of the minimum, maximum, and extent
 properties on the BoundedRangeModel.

Returns:
the visibility
See Also:
BoundedRangeModel


"
JTextField,getPreferredSize(),Dimension,Returns the preferred size Dimensions needed for this TextField.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size Dimensions needed for this
 TextField.  If a non-zero number of columns has been
 set, the width is set to the columns multiplied by
 the column width.

Overrides:
getPreferredSize in class JComponent
Returns:
the dimension of this textfield
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
JTextField,getScrollOffset(),int,"Gets the scroll offset, in pixels.","

getScrollOffset
public int getScrollOffset()
Gets the scroll offset, in pixels.

Returns:
the offset >= 0


"
JTextField,getUIClassID(),String,Gets the class ID for a UI.,"

getUIClassID
public String getUIClassID()
Gets the class ID for a UI.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""TextFieldUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTextField,isValidateRoot(),boolean,"Calls to revalidate that come from within the textfield itself will be handled by validating the textfield, unless the textfield is contained within a JViewport, in which case this returns false.","

isValidateRoot
public boolean isValidateRoot()
Calls to revalidate that come from within the
 textfield itself will
 be handled by validating the textfield, unless the textfield
 is contained within a JViewport,
 in which case this returns false.

Overrides:
isValidateRoot in class JComponent
Returns:
if the parent of this textfield is a JViewPort
          return false, otherwise return true
See Also:
JComponent.revalidate(), 
JComponent.isValidateRoot(), 
Container.isValidateRoot()


"
JTextField,paramString(),protected String,Returns a string representation of this JTextField.,"

paramString
protected String paramString()
Returns a string representation of this JTextField.
 This method is intended to be used only for debugging purposes,
 and the content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JTextComponent
Returns:
a string representation of this JTextField


"
JTextField,postActionEvent(),void,Processes action events occurring on this textfield by dispatching them to any registered ActionListener objects.,"

postActionEvent
public void postActionEvent()
Processes action events occurring on this textfield by
 dispatching them to any registered ActionListener objects.
 This is normally called by the controller registered with
 textfield.

"
JTextField,removeActionListener(ActionListener l),void,Removes the specified action listener so that it no longer receives action events from this textfield.,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes the specified action listener so that it no longer
 receives action events from this textfield.

Parameters:
l - the action listener to be removed


"
JTextField,scrollRectToVisible(Rectangle r),void,Scrolls the field left or right.,"

scrollRectToVisible
public void scrollRectToVisible(Rectangle r)
Scrolls the field left or right.

Overrides:
scrollRectToVisible in class JComponent
Parameters:
r - the region to scroll
See Also:
JViewport


"
JTextField,setAction(Action a),void,Sets the Action for the ActionEvent source.,"

setAction
public void setAction(Action a)
Sets the Action for the ActionEvent source.
 The new Action replaces
 any previously set Action but does not affect
 ActionListeners independently
 added with addActionListener.
 If the Action is already a registered
 ActionListener
 for the ActionEvent source, it is not re-registered.
 
 Setting the Action results in immediately changing
 all the properties described in 
 Swing Components Supporting Action.
 Subsequently, the textfield's properties are automatically updated
 as the Action's properties change.
 
 This method uses three other methods to set
 and help track the Action's property values.
 It uses the configurePropertiesFromAction method
 to immediately change the textfield's properties.
 To track changes in the Action's property values,
 this method registers the PropertyChangeListener
 returned by createActionPropertyChangeListener. The
 default PropertyChangeListener invokes the
 actionPropertyChanged method when a property in the
 Action changes.

Parameters:
a - the Action for the JTextField,
          or null
Since:
1.3
See Also:
Action, 
getAction(), 
configurePropertiesFromAction(javax.swing.Action), 
createActionPropertyChangeListener(javax.swing.Action), 
actionPropertyChanged(javax.swing.Action, java.lang.String)


"
JTextField,setActionCommand(String command),void,Sets the command string used for action events.,"

setActionCommand
public void setActionCommand(String command)
Sets the command string used for action events.

Parameters:
command - the command string


"
JTextField,setColumns(int columns),void,"Sets the number of columns in this TextField, and then invalidate the layout.","

setColumns
public void setColumns(int columns)
Sets the number of columns in this TextField,
 and then invalidate the layout.

Parameters:
columns - the number of columns >= 0
Throws:
IllegalArgumentException - if columns
          is less than 0


"
JTextField,setDocument(Document doc),void,Associates the editor with a text document.,"

setDocument
public void setDocument(Document doc)
Associates the editor with a text document.
 The currently registered factory is used to build a view for
 the document, which gets displayed by the editor after revalidation.
 A PropertyChange event (""document"") is propagated to each listener.

Overrides:
setDocument in class JTextComponent
Parameters:
doc - the document to display/edit
See Also:
JTextComponent.getDocument()


"
JTextField,setFont(Font f),void,Sets the current font.,"

setFont
public void setFont(Font f)
Sets the current font.  This removes cached row height and column
 width so the new font will be reflected.
 revalidate is called after setting the font.

Overrides:
setFont in class JComponent
Parameters:
f - the new font
See Also:
Component.getFont()


"
JTextField,setHorizontalAlignment(int alignment),void,Sets the horizontal alignment of the text.,"

setHorizontalAlignment
public void setHorizontalAlignment(int alignment)
Sets the horizontal alignment of the text.
 Valid keys are:
 
JTextField.LEFT
JTextField.CENTER
JTextField.RIGHT
JTextField.LEADING
JTextField.TRAILING

invalidate and repaint are called when the
 alignment is set,
 and a PropertyChange event (""horizontalAlignment"") is fired.

Parameters:
alignment - the alignment
Throws:
IllegalArgumentException - if alignment
  is not a valid key


"
JTextField,setScrollOffset(int scrollOffset),void,"Sets the scroll offset, in pixels.","

setScrollOffset
public void setScrollOffset(int scrollOffset)
Sets the scroll offset, in pixels.

Parameters:
scrollOffset - the offset >= 0


"
JTextPane,"addStyle(String nm, Style parent)",Style,Adds a new style into the logical style hierarchy.,"

addStyle
public Style addStyle(String nm,
                      Style parent)
Adds a new style into the logical style hierarchy.  Style attributes
 resolve from bottom up so an attribute specified in a child
 will override an attribute specified in the parent.

Parameters:
nm - the name of the style (must be unique within the
   collection of named styles).  The name may be null
   if the style is unnamed, but the caller is responsible
   for managing the reference returned as an unnamed style can't
   be fetched by name.  An unnamed style may be useful for things
   like character attribute overrides such as found in a style
   run.
parent - the parent style.  This may be null
   if unspecified
   attributes need not be resolved in some other style.
Returns:
the new Style


"
JTextPane,createDefaultEditorKit(),protected EditorKit,Creates the EditorKit to use by default.,"

createDefaultEditorKit
protected EditorKit createDefaultEditorKit()
Creates the EditorKit to use by default.  This
 is implemented to return javax.swing.text.StyledEditorKit.

Overrides:
createDefaultEditorKit in class JEditorPane
Returns:
the editor kit


"
JTextPane,getCharacterAttributes(),AttributeSet,"Fetches the character attributes in effect at the current location of the caret, or null.","

getCharacterAttributes
public AttributeSet getCharacterAttributes()
Fetches the character attributes in effect at the
 current location of the caret, or null.

Returns:
the attributes, or null


"
JTextPane,getInputAttributes(),MutableAttributeSet,Gets the input attributes for the pane.,"

getInputAttributes
public MutableAttributeSet getInputAttributes()
Gets the input attributes for the pane.

Returns:
the attributes


"
JTextPane,getLogicalStyle(),Style,"Fetches the logical style assigned to the paragraph represented by the current position of the caret, or null.","

getLogicalStyle
public Style getLogicalStyle()
Fetches the logical style assigned to the paragraph represented
 by the current position of the caret, or null.

Returns:
the Style


"
JTextPane,getParagraphAttributes(),AttributeSet,"Fetches the current paragraph attributes in effect at the location of the caret, or null if none.","

getParagraphAttributes
public AttributeSet getParagraphAttributes()
Fetches the current paragraph attributes in effect
 at the location of the caret, or null if none.

Returns:
the attributes


"
JTextPane,getStyle(String nm),Style,Fetches a named non-null style previously added.,"

getStyle
public Style getStyle(String nm)
Fetches a named non-null style previously added.

Parameters:
nm - the name of the style
Returns:
the Style


"
JTextPane,getStyledDocument(),StyledDocument,Fetches the model associated with the editor.,"

getStyledDocument
public StyledDocument getStyledDocument()
Fetches the model associated with the editor.

Returns:
the model


"
JTextPane,getStyledEditorKit(),protected StyledEditorKit,Gets the editor kit.,"

getStyledEditorKit
protected final StyledEditorKit getStyledEditorKit()
Gets the editor kit.

Returns:
the editor kit


"
JTextPane,getUIClassID(),String,Returns the class ID for the UI.,"

getUIClassID
public String getUIClassID()
Returns the class ID for the UI.

Overrides:
getUIClassID in class JEditorPane
Returns:
the string ""TextPaneUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTextPane,insertComponent(Component c),void,Inserts a component into the document as a replacement for the currently selected content.,"

insertComponent
public void insertComponent(Component c)
Inserts a component into the document as a replacement
 for the currently selected content.  If there is no
 selection the component is effectively inserted at the
 current position of the caret.  This is represented in
 the associated document as an attribute of one character
 of content.
 
 The component given is the actual component used by the
 JTextPane.  Since components cannot be a child of more than
 one container, this method should not be used in situations
 where the model is shared by text components.
 
 The component is placed relative to the text baseline
 according to the value returned by
 Component.getAlignmentY.  For Swing components
 this value can be conveniently set using the method
 JComponent.setAlignmentY.  For example, setting
 a value of 0.75 will cause 75 percent of the
 component to be above the baseline, and 25 percent of the
 component to be below the baseline.

Parameters:
c - the component to insert


"
JTextPane,insertIcon(Icon g),void,Inserts an icon into the document as a replacement for the currently selected content.,"

insertIcon
public void insertIcon(Icon g)
Inserts an icon into the document as a replacement
 for the currently selected content.  If there is no
 selection the icon is effectively inserted at the
 current position of the caret.  This is represented in
 the associated document as an attribute of one character
 of content.

Parameters:
g - the icon to insert
See Also:
Icon


"
JTextPane,paramString(),protected String,Returns a string representation of this JTextPane.,"

paramString
protected String paramString()
Returns a string representation of this JTextPane.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JEditorPane
Returns:
a string representation of this JTextPane


"
JTextPane,removeStyle(String nm),void,Removes a named non-null style previously added to the document.,"

removeStyle
public void removeStyle(String nm)
Removes a named non-null style previously added to
 the document.

Parameters:
nm - the name of the style to remove


"
JTextPane,replaceSelection(String content),void,Replaces the currently selected content with new content represented by the given string.,"

replaceSelection
public void replaceSelection(String content)
Replaces the currently selected content with new content
 represented by the given string.  If there is no selection
 this amounts to an insert of the given text.  If there
 is no replacement text this amounts to a removal of the
 current selection.  The replacement text will have the
 attributes currently defined for input at the point of
 insertion.  If the document is not editable, beep and return.

Overrides:
replaceSelection in class JEditorPane
Parameters:
content - the content to replace the selection with


"
JTextPane,"setCharacterAttributes(AttributeSet attr, boolean replace)",void,Applies the given attributes to character content.,"

setCharacterAttributes
public void setCharacterAttributes(AttributeSet attr,
                                   boolean replace)
Applies the given attributes to character
 content.  If there is a selection, the attributes
 are applied to the selection range.  If there
 is no selection, the attributes are applied to
 the input attribute set which defines the attributes
 for any new text that gets inserted.

Parameters:
attr - the attributes
replace - if true, then replace the existing attributes first


"
JTextPane,setDocument(Document doc),void,Associates the editor with a text document.,"

setDocument
public void setDocument(Document doc)
Associates the editor with a text document.  This
 must be a StyledDocument.

Overrides:
setDocument in class JTextComponent
Parameters:
doc - the document to display/edit
Throws:
IllegalArgumentException - if doc can't
   be narrowed to a StyledDocument which is the
   required type of model for this text component
See Also:
JTextComponent.getDocument()


"
JTextPane,setEditorKit(EditorKit kit),void,Sets the currently installed kit for handling content.,"

setEditorKit
public final void setEditorKit(EditorKit kit)
Sets the currently installed kit for handling
 content.  This is the bound property that
 establishes the content type of the editor.

Overrides:
setEditorKit in class JEditorPane
Parameters:
kit - the desired editor behavior
Throws:
IllegalArgumentException - if kit is not a
          StyledEditorKit
See Also:
JEditorPane.getEditorKit()


"
JTextPane,setLogicalStyle(Style s),void,Sets the logical style to use for the paragraph at the current caret position.,"

setLogicalStyle
public void setLogicalStyle(Style s)
Sets the logical style to use for the paragraph at the
 current caret position.  If attributes aren't explicitly set
 for character and paragraph attributes they will resolve
 through the logical style assigned to the paragraph, which
 in term may resolve through some hierarchy completely
 independent of the element hierarchy in the document.

Parameters:
s - the logical style to assign to the paragraph,
          or null for no style


"
JTextPane,"setParagraphAttributes(AttributeSet attr, boolean replace)",void,Applies the given attributes to paragraphs.,"

setParagraphAttributes
public void setParagraphAttributes(AttributeSet attr,
                                   boolean replace)
Applies the given attributes to paragraphs.  If
 there is a selection, the attributes are applied
 to the paragraphs that intersect the selection.
 If there is no selection, the attributes are applied
 to the paragraph at the current caret position.

Parameters:
attr - the non-null attributes
replace - if true, replace the existing attributes first


"
JTextPane,setStyledDocument(StyledDocument doc),void,Associates the editor with a text document.,"

setStyledDocument
public void setStyledDocument(StyledDocument doc)
Associates the editor with a text document.
 The currently registered factory is used to build a view for
 the document, which gets displayed by the editor.

Parameters:
doc - the document to display/edit


"
JToggleButton,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToggleButton.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JToggleButton.
 For toggle buttons, the AccessibleContext takes the form of an
 AccessibleJToggleButton.
 A new AccessibleJToggleButton instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJToggleButton that serves as the
         AccessibleContext of this JToggleButton


"
JToggleButton,getUIClassID(),String,Returns a string that specifies the name of the l&f class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the l&f class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
String ""ToggleButtonUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JToggleButton,paramString(),protected String,Returns a string representation of this JToggleButton.,"

paramString
protected String paramString()
Returns a string representation of this JToggleButton. This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class AbstractButton
Returns:
a string representation of this JToggleButton.


"
JToggleButton,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class AbstractButton
See Also:
JComponent.updateUI()


"
JToggleButton.ToggleButtonModel,isSelected(),boolean,Checks if the button is selected.,"

isSelected
public boolean isSelected()
Checks if the button is selected.

Specified by:
isSelected in interface ButtonModel
Overrides:
isSelected in class DefaultButtonModel
Returns:
true if the button is selected


"
JToggleButton.ToggleButtonModel,setPressed(boolean b),void,Sets the pressed state of the toggle button.,"

setPressed
public void setPressed(boolean b)
Sets the pressed state of the toggle button.

Specified by:
setPressed in interface ButtonModel
Overrides:
setPressed in class DefaultButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
JToggleButton.ToggleButtonModel,setSelected(boolean b),void,Sets the selected state of the button.,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
JToolBar,add(Action a),JButton,Adds a new JButton which dispatches the action.,"

add
public JButton add(Action a)
Adds a new JButton which dispatches the action.

Parameters:
a - the Action object to add as a new menu item
Returns:
the new button which dispatches the action


"
JToolBar,"addImpl(Component comp, Object constraints, int index)",protected void,"If a JButton is being added, it is initially set to be disabled.","

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
If a JButton is being added, it is initially
 set to be disabled.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be enforced on the component
index - the index of the component
See Also:
Container.add(Component), 
Container.add(Component, int), 
Container.add(Component, java.lang.Object), 
Container.invalidate(), 
LayoutManager, 
LayoutManager2


"
JToolBar,addSeparator(),void,Appends a separator of default size to the end of the tool bar.,"

addSeparator
public void addSeparator()
Appends a separator of default size to the end of the tool bar.
 The default size is determined by the current look and feel.

"
JToolBar,addSeparator(Dimension size),void,Appends a separator of a specified size to the end of the tool bar.,"

addSeparator
public void addSeparator(Dimension size)
Appends a separator of a specified size to the end
 of the tool bar.

Parameters:
size - the Dimension of the separator


"
JToolBar,createActionChangeListener(JButton b),protected PropertyChangeListener,"Returns a properly configured PropertyChangeListener which updates the control as changes to the Action occur, or null if the default property change listener for the control is desired.","

createActionChangeListener
protected PropertyChangeListener createActionChangeListener(JButton b)
Returns a properly configured PropertyChangeListener
 which updates the control as changes to the Action occur,
 or null if the default
 property change listener for the control is desired.

Returns:
null


"
JToolBar,createActionComponent(Action a),protected JButton,Factory method which creates the JButton for Actions added to the JToolBar.,"

createActionComponent
protected JButton createActionComponent(Action a)
Factory method which creates the JButton for
 Actions added to the JToolBar.
 The default name is empty if a null action is passed.

Parameters:
a - the Action for the button to be added
Returns:
the newly created button
Since:
1.3
See Also:
Action


"
JToolBar,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToolBar.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JToolBar.
 For tool bars, the AccessibleContext takes the form of an
 AccessibleJToolBar.
 A new AccessibleJToolBar instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJToolBar that serves as the
         AccessibleContext of this JToolBar


"
JToolBar,getComponentAtIndex(int i),Component,Returns the component at the specified index.,"

getComponentAtIndex
public Component getComponentAtIndex(int i)
Returns the component at the specified index.

Parameters:
i - the component's position, where 0 is first
Returns:
the Component at that position,
          or null for an invalid index


"
JToolBar,getComponentIndex(Component c),int,Returns the index of the specified component.,"

getComponentIndex
public int getComponentIndex(Component c)
Returns the index of the specified component.
 (Note: Separators occupy index positions.)

Parameters:
c - the Component to find
Returns:
an integer indicating the component's position,
          where 0 is first


"
JToolBar,getMargin(),Insets,Returns the margin between the tool bar's border and its buttons.,"

getMargin
public Insets getMargin()
Returns the margin between the tool bar's border and
 its buttons.

Returns:
an Insets object containing the margin values
See Also:
Insets


"
JToolBar,getOrientation(),int,Returns the current orientation of the tool bar.,"

getOrientation
public int getOrientation()
Returns the current orientation of the tool bar.  The value is either
 HORIZONTAL or VERTICAL.

Returns:
an integer representing the current orientation -- either
          HORIZONTAL or VERTICAL
See Also:
setOrientation(int)


"
JToolBar,getUI(),ToolBarUI,Returns the tool bar's current UI.,"

getUI
public ToolBarUI getUI()
Returns the tool bar's current UI.

See Also:
setUI(javax.swing.plaf.ToolBarUI)


"
JToolBar,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ToolBarUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JToolBar,isBorderPainted(),boolean,Gets the borderPainted property.,"

isBorderPainted
public boolean isBorderPainted()
Gets the borderPainted property.

Returns:
the value of the borderPainted property
See Also:
setBorderPainted(boolean)


"
JToolBar,isFloatable(),boolean,Gets the floatable property.,"

isFloatable
public boolean isFloatable()
Gets the floatable property.

Returns:
the value of the floatable property
See Also:
setFloatable(boolean)


"
JToolBar,isRollover(),boolean,Returns the rollover state.,"

isRollover
public boolean isRollover()
Returns the rollover state.

Returns:
true if rollover toolbar buttons are to be drawn; otherwise false
Since:
1.4
See Also:
setRollover(boolean)


"
JToolBar,paintBorder(Graphics g),protected void,Paints the tool bar's border if the borderPainted property is true.,"

paintBorder
protected void paintBorder(Graphics g)
Paints the tool bar's border if the borderPainted property
 is true.

Overrides:
paintBorder in class JComponent
Parameters:
g - the Graphics context in which the painting
         is done
See Also:
JComponent.paint(java.awt.Graphics), 
JComponent.setBorder(javax.swing.border.Border)


"
JToolBar,paramString(),protected String,Returns a string representation of this JToolBar.,"

paramString
protected String paramString()
Returns a string representation of this JToolBar.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JToolBar.


"
JToolBar,setBorderPainted(boolean b),void,"Sets the borderPainted property, which is true if the border should be painted.","

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property, which is
 true if the border should be painted.
 The default value for this property is true.
 Some look and feels might not implement painted borders;
 they will ignore this property.

Parameters:
b - if true, the border is painted
See Also:
isBorderPainted()


"
JToolBar,setFloatable(boolean b),void,"Sets the floatable property, which must be true for the user to move the tool bar.","

setFloatable
public void setFloatable(boolean b)
Sets the floatable property,
 which must be true for the user to move the tool bar.
 Typically, a floatable tool bar can be
 dragged into a different position within the same container
 or out into its own window.
 The default value of this property is true.
 Some look and feels might not implement floatable tool bars;
 they will ignore this property.

Parameters:
b - if true, the tool bar can be moved;
          false otherwise
See Also:
isFloatable()


"
JToolBar,setLayout(LayoutManager mgr),void,Sets the layout manager for this container.,"

setLayout
public void setLayout(LayoutManager mgr)
Description copied from class: Container
Sets the layout manager for this container.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Overrides:
setLayout in class Container
Parameters:
mgr - the specified layout manager
See Also:
Container.doLayout(), 
Container.getLayout(), 
Container.invalidate()


"
JToolBar,setMargin(Insets m),void,Sets the margin between the tool bar's border and its buttons.,"

setMargin
public void setMargin(Insets m)
Sets the margin between the tool bar's border and
 its buttons. Setting to null causes the tool bar to
 use the default margins. The tool bar's default Border
 object uses this value to create the proper margin.
 However, if a non-default border is set on the tool bar,
 it is that Border object's responsibility to create the
 appropriate margin space (otherwise this property will
 effectively be ignored).

Parameters:
m - an Insets object that defines the space
         between the border and the buttons
See Also:
Insets


"
JToolBar,setOrientation(int o),void,Sets the orientation of the tool bar.,"

setOrientation
public void setOrientation(int o)
Sets the orientation of the tool bar.  The orientation must have
 either the value HORIZONTAL or VERTICAL.
 If orientation is
 an invalid value, an exception will be thrown.

Parameters:
o - the new orientation -- either HORIZONTAL or
                  VERTICAL
Throws:
IllegalArgumentException - if orientation is neither
          HORIZONTAL nor VERTICAL
See Also:
getOrientation()


"
JToolBar,setRollover(boolean rollover),void,Sets the rollover state of this toolbar.,"

setRollover
public void setRollover(boolean rollover)
Sets the rollover state of this toolbar. If the rollover state is true
 then the border of the toolbar buttons will be drawn only when the
 mouse pointer hovers over them. The default value of this property
 is false.
 
 The implementation of a look and feel may choose to ignore this
 property.

Parameters:
rollover - true for rollover toolbar buttons; otherwise false
Since:
1.4


"
JToolBar,setUI(ToolBarUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ToolBarUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ToolBarUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JToolBar,updateUI(),void,Notification from the UIFactory that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIFactory that the L&F has changed.
 Called to replace the UI with the latest version from the
 UIFactory.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JToolBar.Separator,getMaximumSize(),Dimension,Returns the maximum size for the separator.,"

getMaximumSize
public Dimension getMaximumSize()
Returns the maximum size for the separator.

Overrides:
getMaximumSize in class JComponent
Returns:
the Dimension object containing the separator's
         maximum size
See Also:
JComponent.setMaximumSize(java.awt.Dimension), 
ComponentUI


"
JToolBar.Separator,getMinimumSize(),Dimension,Returns the minimum size for the separator.,"

getMinimumSize
public Dimension getMinimumSize()
Returns the minimum size for the separator.

Overrides:
getMinimumSize in class JComponent
Returns:
the Dimension object containing the separator's
         minimum size
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
JToolBar.Separator,getPreferredSize(),Dimension,Returns the preferred size for the separator.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size for the separator.

Overrides:
getPreferredSize in class JComponent
Returns:
the Dimension object containing the separator's
         preferred size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
JToolBar.Separator,getSeparatorSize(),Dimension,Returns the size of the separator,"

getSeparatorSize
public Dimension getSeparatorSize()
Returns the size of the separator

Returns:
the Dimension object containing the separator's
         size (This is a reference, NOT a copy!)


"
JToolBar.Separator,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JSeparator
Returns:
the string ""ToolBarSeparatorUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JToolBar.Separator,setSeparatorSize(Dimension size),void,Sets the size of the separator.,"

setSeparatorSize
public void setSeparatorSize(Dimension size)
Sets the size of the separator.

Parameters:
size - the new Dimension of the separator


"
JToolTip,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JToolTip.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JToolTip.
 For tool tips, the AccessibleContext takes the form of an
 AccessibleJToolTip.
 A new AccessibleJToolTip instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJToolTip that serves as the
         AccessibleContext of this JToolTip


"
JToolTip,getComponent(),JComponent,Returns the component the tooltip applies to.,"

getComponent
public JComponent getComponent()
Returns the component the tooltip applies to.
 The returned value may be null.

Returns:
the component that the tooltip describes
See Also:
JComponent.createToolTip()


"
JToolTip,getTipText(),String,Returns the text that is shown when the tool tip is displayed.,"

getTipText
public String getTipText()
Returns the text that is shown when the tool tip is displayed.
 The returned value may be null.

Returns:
the String that is displayed


"
JToolTip,getUI(),ToolTipUI,Returns the L&F object that renders this component.,"

getUI
public ToolTipUI getUI()
Returns the L&F object that renders this component.

Returns:
the ToolTipUI object that renders this component


"
JToolTip,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ToolTipUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JToolTip,paramString(),protected String,Returns a string representation of this JToolTip.,"

paramString
protected String paramString()
Returns a string representation of this JToolTip.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JToolTip


"
JToolTip,setComponent(JComponent c),void,Specifies the component that the tooltip describes.,"

setComponent
public void setComponent(JComponent c)
Specifies the component that the tooltip describes.
 The component c may be null
 and will have no effect.
 
 This is a bound property.

Parameters:
c - the JComponent being described
See Also:
JComponent.createToolTip()


"
JToolTip,setTipText(String tipText),void,Sets the text to show when the tool tip is displayed.,"

setTipText
public void setTipText(String tipText)
Sets the text to show when the tool tip is displayed.
 The string tipText may be null.

Parameters:
tipText - the String to display


"
JToolTip,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JTree,"addSelectionInterval(int index0, int index1)",void,Adds the specified rows (inclusive) to the selection.,"

addSelectionInterval
public void addSelectionInterval(int index0,
                                 int index1)
Adds the specified rows (inclusive) to the selection. If the
 specified indices are within the viewable set of rows, or bound
 the viewable set of rows, then the specified indices are
 constrained by the viewable set of rows. If the indices are not
 within the viewable set of rows, or do not bound the viewable
 set of rows, then the selection is unchanged. For example, if
 the row count is 10, and this method is invoked with
 -1, 20, then the specified indices bounds the viewable
 range, and this is treated as if invoked with 0, 9. On
 the other hand, if this were invoked with -10, -1, then
 the specified indices do not bound the viewable set of rows,
 and the selection is unchanged.
 
 The parameters are not order dependent. That is, addSelectionInterval(x, y) is equivalent to
 addSelectionInterval(y, x).

Parameters:
index0 - the first index in the range to add to the selection
index1 - the last index in the range to add to the selection


"
JTree,addSelectionPath(TreePath path),void,Adds the node identified by the specified TreePath to the current selection.,"

addSelectionPath
public void addSelectionPath(TreePath path)
Adds the node identified by the specified TreePath
 to the current selection. If any component of the path isn't
 viewable, and getExpandsSelectedPaths is true it is
 made viewable.
 
 Note that JTree does not allow duplicate nodes to
 exist as children under the same parent -- each sibling must be
 a unique object.

Parameters:
path - the TreePath to add


"
JTree,addSelectionPaths(TreePath[] paths),void,Adds each path in the array of paths to the current selection.,"

addSelectionPaths
public void addSelectionPaths(TreePath[] paths)
Adds each path in the array of paths to the current selection. If
 any component of any of the paths isn't viewable and
 getExpandsSelectedPaths is true, it is
 made viewable.
 
 Note that JTree does not allow duplicate nodes to
 exist as children under the same parent -- each sibling must be
 a unique object.

Parameters:
paths - an array of TreePath objects that specifies
          the nodes to add


"
JTree,addSelectionRow(int row),void,Adds the path at the specified row to the current selection.,"

addSelectionRow
public void addSelectionRow(int row)
Adds the path at the specified row to the current selection.

Parameters:
row - an integer specifying the row of the node to add,
             where 0 is the first row in the display


"
JTree,addSelectionRows(int[] rows),void,Adds the paths at each of the specified rows to the current selection.,"

addSelectionRows
public void addSelectionRows(int[] rows)
Adds the paths at each of the specified rows to the current selection.

Parameters:
rows - an array of ints specifying the rows to add,
              where 0 indicates the first row in the display


"
JTree,addTreeExpansionListener(TreeExpansionListener tel),void,Adds a listener for TreeExpansion events.,"

addTreeExpansionListener
public void addTreeExpansionListener(TreeExpansionListener tel)
Adds a listener for TreeExpansion events.

Parameters:
tel - a TreeExpansionListener that will be notified when
            a tree node is expanded or collapsed (a ""negative
            expansion"")


"
JTree,addTreeSelectionListener(TreeSelectionListener tsl),void,Adds a listener for TreeSelection events.,"

addTreeSelectionListener
public void addTreeSelectionListener(TreeSelectionListener tsl)
Adds a listener for TreeSelection events.

Parameters:
tsl - the TreeSelectionListener that will be notified
            when a node is selected or deselected (a ""negative
            selection"")


"
JTree,addTreeWillExpandListener(TreeWillExpandListener tel),void,Adds a listener for TreeWillExpand events.,"

addTreeWillExpandListener
public void addTreeWillExpandListener(TreeWillExpandListener tel)
Adds a listener for TreeWillExpand events.

Parameters:
tel - a TreeWillExpandListener that will be notified
            when a tree node will be expanded or collapsed (a ""negative
            expansion"")


"
JTree,cancelEditing(),void,Cancels the current editing session.,"

cancelEditing
public void cancelEditing()
Cancels the current editing session. Has no effect if the
 tree isn't being edited.

"
JTree,clearSelection(),void,Clears the selection.,"

clearSelection
public void clearSelection()
Clears the selection.

"
JTree,clearToggledPaths(),protected void,Clears the cache of toggled tree paths.,"

clearToggledPaths
protected void clearToggledPaths()
Clears the cache of toggled tree paths. This does NOT send out
 any TreeExpansionListener events.

"
JTree,collapsePath(TreePath path),void,Ensures that the node identified by the specified path is collapsed and viewable.,"

collapsePath
public void collapsePath(TreePath path)
Ensures that the node identified by the specified path is
 collapsed and viewable.

Parameters:
path - the TreePath identifying a node


"
JTree,collapseRow(int row),void,Ensures that the node in the specified row is collapsed.,"

collapseRow
public void collapseRow(int row)
Ensures that the node in the specified row is collapsed.
 
 If row is < 0 or >= getRowCount this
 will have no effect.

Parameters:
row - an integer specifying a display row, where 0 is the
             first row in the display


"
JTree,"convertValueToText(Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)",String,Called by the renderers to convert the specified value to text.,"

convertValueToText
public String convertValueToText(Object value,
                                 boolean selected,
                                 boolean expanded,
                                 boolean leaf,
                                 int row,
                                 boolean hasFocus)
Called by the renderers to convert the specified value to
 text. This implementation returns value.toString, ignoring
 all other arguments. To control the conversion, subclass this
 method and use any of the arguments you need.

Parameters:
value - the Object to convert to text
selected - true if the node is selected
expanded - true if the node is expanded
leaf - true if the node is a leaf node
row - an integer specifying the node's display row, where 0 is
             the first row in the display
hasFocus - true if the node has the focus
Returns:
the String representation of the node's value


"
JTree,createTreeModel(Object value),protected static TreeModel,Returns a TreeModel wrapping the specified object.,"

createTreeModel
protected static TreeModel createTreeModel(Object value)
Returns a TreeModel wrapping the specified object.
 If the object is:
an array of Objects,
 a Hashtable, or
 a Vector
then a new root node is created with each of the incoming
 objects as children. Otherwise, a new root is created with
 a value of ""root"".

Parameters:
value - the Object used as the foundation for
          the TreeModel
Returns:
a TreeModel wrapping the specified object


"
JTree,createTreeModelListener(),protected TreeModelListener,Creates and returns an instance of TreeModelHandler.,"

createTreeModelListener
protected TreeModelListener createTreeModelListener()
Creates and returns an instance of TreeModelHandler.
 The returned
 object is responsible for updating the expanded state when the
 TreeModel changes.
 
 For more information on what expanded state means, see the
 JTree description above.

"
JTree,expandPath(TreePath path),void,Ensures that the node identified by the specified path is expanded and viewable.,"

expandPath
public void expandPath(TreePath path)
Ensures that the node identified by the specified path is
 expanded and viewable. If the last item in the path is a
 leaf, this will have no effect.

Parameters:
path - the TreePath identifying a node


"
JTree,expandRow(int row),void,Ensures that the node in the specified row is expanded and viewable.,"

expandRow
public void expandRow(int row)
Ensures that the node in the specified row is expanded and
 viewable.
 
 If row is < 0 or >= getRowCount this
 will have no effect.

Parameters:
row - an integer specifying a display row, where 0 is the
             first row in the display


"
JTree,fireTreeCollapsed(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeCollapsed
public void fireTreeCollapsed(TreePath path)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the path parameter.

Parameters:
path - the TreePath indicating the node that was
          collapsed
See Also:
EventListenerList


"
JTree,fireTreeExpanded(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeExpanded
public void fireTreeExpanded(TreePath path)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the path parameter.

Parameters:
path - the TreePath indicating the node that was
          expanded
See Also:
EventListenerList


"
JTree,fireTreeWillCollapse(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeWillCollapse
public void fireTreeWillCollapse(TreePath path)
                          throws ExpandVetoException
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the path parameter.

Parameters:
path - the TreePath indicating the node that was
          expanded
Throws:
ExpandVetoException
See Also:
EventListenerList


"
JTree,fireTreeWillExpand(TreePath path),void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeWillExpand
public void fireTreeWillExpand(TreePath path)
                        throws ExpandVetoException
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the path parameter.

Parameters:
path - the TreePath indicating the node that was
          expanded
Throws:
ExpandVetoException
See Also:
EventListenerList


"
JTree,fireValueChanged(TreeSelectionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireValueChanged
protected void fireValueChanged(TreeSelectionEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
e - the TreeSelectionEvent to be fired;
          generated by the
          TreeSelectionModel
          when a node is selected or deselected
See Also:
EventListenerList


"
JTree,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JTree.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JTree.
 For JTrees, the AccessibleContext takes the form of an
 AccessibleJTree.
 A new AccessibleJTree instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJTree that serves as the
         AccessibleContext of this JTree


"
JTree,getAnchorSelectionPath(),TreePath,Returns the path identified as the anchor.,"

getAnchorSelectionPath
public TreePath getAnchorSelectionPath()
Returns the path identified as the anchor.

Returns:
path identified as the anchor
Since:
1.3


"
JTree,getCellEditor(),TreeCellEditor,Returns the editor used to edit entries in the tree.,"

getCellEditor
public TreeCellEditor getCellEditor()
Returns the editor used to edit entries in the tree.

Returns:
the TreeCellEditor in use,
          or null if the tree cannot be edited


"
JTree,getCellRenderer(),TreeCellRenderer,Returns the current TreeCellRenderer that is rendering each cell.,"

getCellRenderer
public TreeCellRenderer getCellRenderer()
Returns the current TreeCellRenderer
  that is rendering each cell.

Returns:
the TreeCellRenderer that is rendering each cell


"
JTree,"getClosestPathForLocation(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y.","

getClosestPathForLocation
public TreePath getClosestPathForLocation(int x,
                                          int y)
Returns the path to the node that is closest to x,y.  If
 no nodes are currently viewable, or there is no model, returns
 null, otherwise it always returns a valid path.  To test if
 the node is exactly at x, y, get the node's bounds and
 test x, y against that.

Parameters:
x - an integer giving the number of pixels horizontally from
          the left edge of the display area, minus any left margin
y - an integer giving the number of pixels vertically from
          the top of the display area, minus any top margin
Returns:
the TreePath for the node closest to that location,
          null if nothing is viewable or there is no model
See Also:
getPathForLocation(int, int), 
getPathBounds(javax.swing.tree.TreePath)


"
JTree,"getClosestRowForLocation(int x, int y)",int,"Returns the row to the node that is closest to x,y.","

getClosestRowForLocation
public int getClosestRowForLocation(int x,
                                    int y)
Returns the row to the node that is closest to x,y.  If no nodes
 are viewable or there is no model, returns -1. Otherwise,
 it always returns a valid row.  To test if the returned object is
 exactly at x, y, get the bounds for the node at the returned
 row and test x, y against that.

Parameters:
x - an integer giving the number of pixels horizontally from
          the left edge of the display area, minus any left margin
y - an integer giving the number of pixels vertically from
          the top of the display area, minus any top margin
Returns:
the row closest to the location, -1 if nothing is
         viewable or there is no model
See Also:
getRowForLocation(int, int), 
getRowBounds(int)


"
JTree,getDefaultTreeModel(),protected static TreeModel,Creates and returns a sample TreeModel.,"

getDefaultTreeModel
protected static TreeModel getDefaultTreeModel()
Creates and returns a sample TreeModel.
 Used primarily for beanbuilders to show something interesting.

Returns:
the default TreeModel


"
JTree,getDescendantToggledPaths(TreePath parent),protected Enumeration<TreePath>,Returns an Enumeration of TreePaths that have been expanded that are descendants of parent.,"

getDescendantToggledPaths
protected Enumeration<TreePath> getDescendantToggledPaths(TreePath parent)
Returns an Enumeration of TreePaths
 that have been expanded that
 are descendants of parent.

"
JTree,getDragEnabled(),boolean,Returns whether or not automatic drag handling is enabled.,"

getDragEnabled
public boolean getDragEnabled()
Returns whether or not automatic drag handling is enabled.

Returns:
the value of the dragEnabled property
Since:
1.4
See Also:
setDragEnabled(boolean)


"
JTree,getDropLocation(),JTree.DropLocation,"Returns the location that this component should visually indicate as the drop location during a DnD operation over the component, or null if no location is to currently be shown.","

getDropLocation
public final JTree.DropLocation getDropLocation()
Returns the location that this component should visually indicate
 as the drop location during a DnD operation over the component,
 or null if no location is to currently be shown.
 
 This method is not meant for querying the drop location
 from a TransferHandler, as the drop location is only
 set after the TransferHandler's canImport
 has returned and has allowed for the location to be shown.
 
 When this property changes, a property change event with
 name ""dropLocation"" is fired by the component.

Returns:
the drop location
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode), 
TransferHandler.canImport(TransferHandler.TransferSupport)


"
JTree,getDropMode(),DropMode,Returns the drop mode for this component.,"

getDropMode
public final DropMode getDropMode()
Returns the drop mode for this component.

Returns:
the drop mode for this component
Since:
1.6
See Also:
setDropMode(javax.swing.DropMode)


"
JTree,getEditingPath(),TreePath,Returns the path to the element that is currently being edited.,"

getEditingPath
public TreePath getEditingPath()
Returns the path to the element that is currently being edited.

Returns:
the TreePath for the node being edited


"
JTree,getExpandedDescendants(TreePath parent),Enumeration<TreePath>,Returns an Enumeration of the descendants of the path parent that are currently expanded.,"

getExpandedDescendants
public Enumeration<TreePath> getExpandedDescendants(TreePath parent)
Returns an Enumeration of the descendants of the
 path parent that
 are currently expanded. If parent is not currently
 expanded, this will return null.
 If you expand/collapse nodes while
 iterating over the returned Enumeration
 this may not return all
 the expanded paths, or may return paths that are no longer expanded.

Parameters:
parent - the path which is to be examined
Returns:
an Enumeration of the descendents of
          parent, or null if
          parent is not currently expanded


"
JTree,getExpandsSelectedPaths(),boolean,Returns the expandsSelectedPaths property.,"

getExpandsSelectedPaths
public boolean getExpandsSelectedPaths()
Returns the expandsSelectedPaths property.

Returns:
true if selection changes result in the parent path being
         expanded
Since:
1.3
See Also:
setExpandsSelectedPaths(boolean)


"
JTree,getInvokesStopCellEditing(),boolean,Returns the indicator that tells what happens when editing is interrupted.,"

getInvokesStopCellEditing
public boolean getInvokesStopCellEditing()
Returns the indicator that tells what happens when editing is
 interrupted.

Returns:
the indicator that tells what happens when editing is
         interrupted
See Also:
setInvokesStopCellEditing(boolean)


"
JTree,getLastSelectedPathComponent(),Object,Returns the last path component of the selected path.,"

getLastSelectedPathComponent
public Object getLastSelectedPathComponent()
Returns the last path component of the selected path. This is
 a convenience method for
 getSelectionModel().getSelectionPath().getLastPathComponent().
 This is typically only useful if the selection has one path.

Returns:
the last path component of the selected path, or
         null if nothing is selected
See Also:
TreePath.getLastPathComponent()


"
JTree,getLeadSelectionPath(),TreePath,Returns the path identified as the lead.,"

getLeadSelectionPath
public TreePath getLeadSelectionPath()
Returns the path identified as the lead.

Returns:
path identified as the lead


"
JTree,getLeadSelectionRow(),int,Returns the row index corresponding to the lead path.,"

getLeadSelectionRow
public int getLeadSelectionRow()
Returns the row index corresponding to the lead path.

Returns:
an integer giving the row index of the lead path,
          where 0 is the first row in the display; or -1
          if leadPath is null


"
JTree,getMaxSelectionRow(),int,Returns the largest selected row.,"

getMaxSelectionRow
public int getMaxSelectionRow()
Returns the largest selected row. If the selection is empty, or
 none of the selected paths are viewable, -1 is returned.

Returns:
the largest selected row


"
JTree,getMinSelectionRow(),int,Returns the smallest selected row.,"

getMinSelectionRow
public int getMinSelectionRow()
Returns the smallest selected row. If the selection is empty, or
 none of the selected paths are viewable, -1 is returned.

Returns:
the smallest selected row


"
JTree,getModel(),TreeModel,Returns the TreeModel that is providing the data.,"

getModel
public TreeModel getModel()
Returns the TreeModel that is providing the data.

Returns:
the TreeModel that is providing the data


"
JTree,"getNextMatch(String prefix, int startingRow, Position.Bias bias)",TreePath,Returns the TreePath to the next tree element that begins with a prefix.,"

getNextMatch
public TreePath getNextMatch(String prefix,
                             int startingRow,
                             Position.Bias bias)
Returns the TreePath to the next tree element that
 begins with a prefix. To handle the conversion of a
 TreePath into a String, convertValueToText
 is used.

Parameters:
prefix - the string to test for a match
startingRow - the row for starting the search
bias - the search direction, either
 Position.Bias.Forward or Position.Bias.Backward.
Returns:
the TreePath of the next tree element that
 starts with the prefix; otherwise null
Throws:
IllegalArgumentException - if prefix is null
 or startingRow is out of bounds
Since:
1.4


"
JTree,"getPathBetweenRows(int index0, int index1)",protected TreePath[],Returns the paths (inclusive) between the specified rows.,"

getPathBetweenRows
protected TreePath[] getPathBetweenRows(int index0,
                                        int index1)
Returns the paths (inclusive) between the specified rows. If
 the specified indices are within the viewable set of rows, or
 bound the viewable set of rows, then the indices are
 constrained by the viewable set of rows. If the specified
 indices are not within the viewable set of rows, or do not
 bound the viewable set of rows, then an empty array is
 returned. For example, if the row count is 10, and this
 method is invoked with -1, 20, then the specified
 indices are constrained to the viewable set of rows, and this is
 treated as if invoked with 0, 9. On the other hand, if
 this were invoked with -10, -1, then the specified
 indices do not bound the viewable set of rows, and an empty
 array is returned.
 
 The parameters are not order dependent. That is, getPathBetweenRows(x, y) is equivalent to
 getPathBetweenRows(y, x).
 
 An empty array is returned if the row count is 0, or
 the specified indices do not bound the viewable set of rows.

Parameters:
index0 - the first index in the range
index1 - the last index in the range
Returns:
the paths (inclusive) between the specified row indices


"
JTree,getPathBounds(TreePath path),Rectangle,Returns the Rectangle that the specified node will be drawn into.,"

getPathBounds
public Rectangle getPathBounds(TreePath path)
Returns the Rectangle that the specified node will be drawn
 into. Returns null if any component in the path is hidden
 (under a collapsed parent).
 
 Note:
 This method returns a valid rectangle, even if the specified
 node is not currently displayed.

Parameters:
path - the TreePath identifying the node
Returns:
the Rectangle the node is drawn in,
          or null


"
JTree,"getPathForLocation(int x, int y)",TreePath,Returns the path for the node at the specified location.,"

getPathForLocation
public TreePath getPathForLocation(int x,
                                   int y)
Returns the path for the node at the specified location.

Parameters:
x - an integer giving the number of pixels horizontally from
          the left edge of the display area, minus any left margin
y - an integer giving the number of pixels vertically from
          the top of the display area, minus any top margin
Returns:
the TreePath for the node at that location


"
JTree,getPathForRow(int row),TreePath,Returns the path for the specified row.,"

getPathForRow
public TreePath getPathForRow(int row)
Returns the path for the specified row.  If row is
 not visible, or a TreeUI has not been set, null
 is returned.

Parameters:
row - an integer specifying a row
Returns:
the TreePath to the specified node,
          null if row < 0
          or row >= getRowCount()


"
JTree,getPreferredScrollableViewportSize(),Dimension,Returns the preferred display size of a JTree.,"

getPreferredScrollableViewportSize
public Dimension getPreferredScrollableViewportSize()
Returns the preferred display size of a JTree. The height is
 determined from getVisibleRowCount and the width
 is the current preferred width.

Specified by:
getPreferredScrollableViewportSize in interface Scrollable
Returns:
a Dimension object containing the preferred size
See Also:
JComponent.getPreferredSize()


"
JTree,getRowBounds(int row),Rectangle,Returns the Rectangle that the node at the specified row is drawn in.,"

getRowBounds
public Rectangle getRowBounds(int row)
Returns the Rectangle that the node at the specified row is
 drawn in.

Parameters:
row - the row to be drawn, where 0 is the first row in the
             display
Returns:
the Rectangle the node is drawn in


"
JTree,getRowCount(),int,Returns the number of viewable nodes.,"

getRowCount
public int getRowCount()
Returns the number of viewable nodes. A node is viewable if all of its
 parents are expanded. The root is only included in this count if
 isRootVisible() is true. This returns 0 if
 the UI has not been set.

Returns:
the number of viewable nodes


"
JTree,"getRowForLocation(int x, int y)",int,Returns the row for the specified location.,"

getRowForLocation
public int getRowForLocation(int x,
                             int y)
Returns the row for the specified location.

Parameters:
x - an integer giving the number of pixels horizontally from
          the left edge of the display area, minus any left margin
y - an integer giving the number of pixels vertically from
          the top of the display area, minus any top margin
Returns:
the row corresponding to the location, or -1 if the
         location is not within the bounds of a displayed cell
See Also:
getClosestRowForLocation(int, int)


"
JTree,getRowForPath(TreePath path),int,Returns the row that displays the node identified by the specified path.,"

getRowForPath
public int getRowForPath(TreePath path)
Returns the row that displays the node identified by the specified
 path.

Parameters:
path - the TreePath identifying a node
Returns:
an integer specifying the display row, where 0 is the first
         row in the display, or -1 if any of the elements in path
         are hidden under a collapsed parent.


"
JTree,getRowHeight(),int,Returns the height of each row.,"

getRowHeight
public int getRowHeight()
Returns the height of each row.  If the returned value is less than
 or equal to 0 the height for each row is determined by the
 renderer.

"
JTree,"getScrollableBlockIncrement(Rectangle visibleRect, int orientation, int direction)",int,"Returns the amount for a block increment, which is the height or width of visibleRect, based on orientation.","

getScrollableBlockIncrement
public int getScrollableBlockIncrement(Rectangle visibleRect,
                                       int orientation,
                                       int direction)
Returns the amount for a block increment, which is the height or
 width of visibleRect, based on orientation.

Specified by:
getScrollableBlockIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - either SwingConstants.VERTICAL
          or SwingConstants.HORIZONTAL
direction - less than zero to scroll up/left,
          greater than zero for down/right.
Returns:
the ""block"" increment for scrolling in the specified direction
See Also:
JScrollBar.setBlockIncrement(int)


"
JTree,getScrollableTracksViewportHeight(),boolean,"Returns false to indicate that the height of the viewport does not determine the height of the table, unless the preferred height of the tree is smaller than the viewports height.","

getScrollableTracksViewportHeight
public boolean getScrollableTracksViewportHeight()
Returns false to indicate that the height of the viewport does not
 determine the height of the table, unless the preferred height
 of the tree is smaller than the viewports height.  In other words:
 ensure that the tree is never smaller than its viewport.

Specified by:
getScrollableTracksViewportHeight in interface Scrollable
Returns:
whether the tree should track the height of the viewport
See Also:
Scrollable.getScrollableTracksViewportHeight()


"
JTree,getScrollableTracksViewportWidth(),boolean,"Returns false to indicate that the width of the viewport does not determine the width of the table, unless the preferred width of the tree is smaller than the viewports width.","

getScrollableTracksViewportWidth
public boolean getScrollableTracksViewportWidth()
Returns false to indicate that the width of the viewport does not
 determine the width of the table, unless the preferred width of
 the tree is smaller than the viewports width.  In other words:
 ensure that the tree is never smaller than its viewport.

Specified by:
getScrollableTracksViewportWidth in interface Scrollable
Returns:
whether the tree should track the width of the viewport
See Also:
Scrollable.getScrollableTracksViewportWidth()


"
JTree,"getScrollableUnitIncrement(Rectangle visibleRect, int orientation, int direction)",int,Returns the amount to increment when scrolling.,"

getScrollableUnitIncrement
public int getScrollableUnitIncrement(Rectangle visibleRect,
                                      int orientation,
                                      int direction)
Returns the amount to increment when scrolling. The amount is
 the height of the first displayed row that isn't completely in view
 or, if it is totally displayed, the height of the next row in the
 scrolling direction.

Specified by:
getScrollableUnitIncrement in interface Scrollable
Parameters:
visibleRect - the view area visible within the viewport
orientation - either SwingConstants.VERTICAL
          or SwingConstants.HORIZONTAL
direction - less than zero to scroll up/left,
          greater than zero for down/right
Returns:
the ""unit"" increment for scrolling in the specified direction
See Also:
JScrollBar.setUnitIncrement(int)


"
JTree,getScrollsOnExpand(),boolean,Returns the value of the scrollsOnExpand property.,"

getScrollsOnExpand
public boolean getScrollsOnExpand()
Returns the value of the scrollsOnExpand property.

Returns:
the value of the scrollsOnExpand property


"
JTree,getSelectionCount(),int,Returns the number of nodes selected.,"

getSelectionCount
public int getSelectionCount()
Returns the number of nodes selected.

Returns:
the number of nodes selected


"
JTree,getSelectionModel(),TreeSelectionModel,Returns the model for selections.,"

getSelectionModel
public TreeSelectionModel getSelectionModel()
Returns the model for selections. This should always return a
 non-null value. If you don't want to allow anything
 to be selected
 set the selection model to null, which forces an empty
 selection model to be used.

See Also:
setSelectionModel(javax.swing.tree.TreeSelectionModel)


"
JTree,getSelectionPath(),TreePath,Returns the path to the first selected node.,"

getSelectionPath
public TreePath getSelectionPath()
Returns the path to the first selected node.

Returns:
the TreePath for the first selected node,
          or null if nothing is currently selected


"
JTree,getSelectionPaths(),TreePath[],Returns the paths of all selected values.,"

getSelectionPaths
public TreePath[] getSelectionPaths()
Returns the paths of all selected values.

Returns:
an array of TreePath objects indicating the selected
         nodes, or null if nothing is currently selected


"
JTree,getSelectionRows(),int[],Returns all of the currently selected rows.,"

getSelectionRows
public int[] getSelectionRows()
Returns all of the currently selected rows. This method is simply
 forwarded to the TreeSelectionModel.
 If nothing is selected null or an empty array will
 be returned, based on the TreeSelectionModel
 implementation.

Returns:
an array of integers that identifies all currently selected rows
         where 0 is the first row in the display


"
JTree,getShowsRootHandles(),boolean,Returns the value of the showsRootHandles property.,"

getShowsRootHandles
public boolean getShowsRootHandles()
Returns the value of the showsRootHandles property.

Returns:
the value of the showsRootHandles property
See Also:
showsRootHandles


"
JTree,getToggleClickCount(),int,Returns the number of mouse clicks needed to expand or close a node.,"

getToggleClickCount
public int getToggleClickCount()
Returns the number of mouse clicks needed to expand or close a node.

Returns:
number of mouse clicks before node is expanded
Since:
1.3


"
JTree,getToolTipText(MouseEvent event),String,Overrides JComponent's getToolTipText method in order to allow renderer's tips to be used if it has text set.,"

getToolTipText
public String getToolTipText(MouseEvent event)
Overrides JComponent's getToolTipText
 method in order to allow
 renderer's tips to be used if it has text set.
 
 NOTE: For JTree to properly display tooltips of its
 renderers, JTree must be a registered component with the
 ToolTipManager.  This can be done by invoking
 ToolTipManager.sharedInstance().registerComponent(tree).
 This is not done automatically!

Overrides:
getToolTipText in class JComponent
Parameters:
event - the MouseEvent that initiated the
          ToolTip display
Returns:
a string containing the  tooltip or null
          if event is null


"
JTree,getTreeExpansionListeners(),TreeExpansionListener[],Returns an array of all the TreeExpansionListeners added to this JTree with addTreeExpansionListener().,"

getTreeExpansionListeners
public TreeExpansionListener[] getTreeExpansionListeners()
Returns an array of all the TreeExpansionListeners added
 to this JTree with addTreeExpansionListener().

Returns:
all of the TreeExpansionListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JTree,getTreeSelectionListeners(),TreeSelectionListener[],Returns an array of all the TreeSelectionListeners added to this JTree with addTreeSelectionListener().,"

getTreeSelectionListeners
public TreeSelectionListener[] getTreeSelectionListeners()
Returns an array of all the TreeSelectionListeners added
 to this JTree with addTreeSelectionListener().

Returns:
all of the TreeSelectionListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JTree,getTreeWillExpandListeners(),TreeWillExpandListener[],Returns an array of all the TreeWillExpandListeners added to this JTree with addTreeWillExpandListener().,"

getTreeWillExpandListeners
public TreeWillExpandListener[] getTreeWillExpandListeners()
Returns an array of all the TreeWillExpandListeners added
 to this JTree with addTreeWillExpandListener().

Returns:
all of the TreeWillExpandListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JTree,getUI(),TreeUI,Returns the L&F object that renders this component.,"

getUI
public TreeUI getUI()
Returns the L&F object that renders this component.

Returns:
the TreeUI object that renders this component


"
JTree,getUIClassID(),String,Returns the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns the name of the L&F class that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""TreeUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JTree,getVisibleRowCount(),int,Returns the number of rows that are displayed in the display area.,"

getVisibleRowCount
public int getVisibleRowCount()
Returns the number of rows that are displayed in the display area.

Returns:
the number of rows displayed


"
JTree,hasBeenExpanded(TreePath path),boolean,Returns true if the node identified by the path has ever been expanded.,"

hasBeenExpanded
public boolean hasBeenExpanded(TreePath path)
Returns true if the node identified by the path has ever been
 expanded.

Returns:
true if the path has ever been expanded


"
JTree,isCollapsed(int row),boolean,Returns true if the node at the specified display row is collapsed.,"

isCollapsed
public boolean isCollapsed(int row)
Returns true if the node at the specified display row is collapsed.

Parameters:
row - the row to check, where 0 is the first row in the
             display
Returns:
true if the node is currently collapsed, otherwise false


"
JTree,isCollapsed(TreePath path),boolean,"Returns true if the value identified by path is currently collapsed, this will return false if any of the values in path are currently not being displayed.","

isCollapsed
public boolean isCollapsed(TreePath path)
Returns true if the value identified by path is currently collapsed,
 this will return false if any of the values in path are currently
 not being displayed.

Parameters:
path - the TreePath to check
Returns:
true if any of the nodes in the node's path are collapsed,
               false if all nodes in the path are expanded


"
JTree,isEditable(),boolean,Returns true if the tree is editable.,"

isEditable
public boolean isEditable()
Returns true if the tree is editable.

Returns:
true if the tree is editable


"
JTree,isEditing(),boolean,Returns true if the tree is being edited.,"

isEditing
public boolean isEditing()
Returns true if the tree is being edited. The item that is being
 edited can be obtained using getSelectionPath.

Returns:
true if the user is currently editing a node
See Also:
getSelectionPath()


"
JTree,isExpanded(int row),boolean,Returns true if the node at the specified display row is currently expanded.,"

isExpanded
public boolean isExpanded(int row)
Returns true if the node at the specified display row is currently
 expanded.

Parameters:
row - the row to check, where 0 is the first row in the
             display
Returns:
true if the node is currently expanded, otherwise false


"
JTree,isExpanded(TreePath path),boolean,"Returns true if the node identified by the path is currently expanded,","

isExpanded
public boolean isExpanded(TreePath path)
Returns true if the node identified by the path is currently expanded,

Parameters:
path - the TreePath specifying the node to check
Returns:
false if any of the nodes in the node's path are collapsed,
               true if all nodes in the path are expanded


"
JTree,isFixedRowHeight(),boolean,Returns true if the height of each display row is a fixed size.,"

isFixedRowHeight
public boolean isFixedRowHeight()
Returns true if the height of each display row is a fixed size.

Returns:
true if the height of each row is a fixed size


"
JTree,isLargeModel(),boolean,Returns true if the tree is configured for a large model.,"

isLargeModel
public boolean isLargeModel()
Returns true if the tree is configured for a large model.

Returns:
true if a large model is suggested
See Also:
largeModel


"
JTree,isPathEditable(TreePath path),boolean,Returns isEditable.,"

isPathEditable
public boolean isPathEditable(TreePath path)
Returns isEditable. This is invoked from the UI before
 editing begins to insure that the given path can be edited. This
 is provided as an entry point for subclassers to add filtered
 editing without having to resort to creating a new editor.

Returns:
true if every parent node and the node itself is editable
See Also:
isEditable()


"
JTree,isPathSelected(TreePath path),boolean,Returns true if the item identified by the path is currently selected.,"

isPathSelected
public boolean isPathSelected(TreePath path)
Returns true if the item identified by the path is currently selected.

Parameters:
path - a TreePath identifying a node
Returns:
true if the node is selected


"
JTree,isRootVisible(),boolean,Returns true if the root node of the tree is displayed.,"

isRootVisible
public boolean isRootVisible()
Returns true if the root node of the tree is displayed.

Returns:
true if the root node of the tree is displayed
See Also:
rootVisible


"
JTree,isRowSelected(int row),boolean,Returns true if the node identified by row is selected.,"

isRowSelected
public boolean isRowSelected(int row)
Returns true if the node identified by row is selected.

Parameters:
row - an integer specifying a display row, where 0 is the first
             row in the display
Returns:
true if the node is selected


"
JTree,isSelectionEmpty(),boolean,Returns true if the selection is currently empty.,"

isSelectionEmpty
public boolean isSelectionEmpty()
Returns true if the selection is currently empty.

Returns:
true if the selection is currently empty


"
JTree,isVisible(TreePath path),boolean,"Returns true if the value identified by path is currently viewable, which means it is either the root or all of its parents are expanded.","

isVisible
public boolean isVisible(TreePath path)
Returns true if the value identified by path is currently viewable,
 which means it is either the root or all of its parents are expanded.
 Otherwise, this method returns false.

Returns:
true if the node is viewable, otherwise false


"
JTree,makeVisible(TreePath path),void,Ensures that the node identified by path is currently viewable.,"

makeVisible
public void makeVisible(TreePath path)
Ensures that the node identified by path is currently viewable.

Parameters:
path - the TreePath to make visible


"
JTree,paramString(),protected String,Returns a string representation of this JTree.,"

paramString
protected String paramString()
Returns a string representation of this JTree.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JTree.


"
JTree,"removeDescendantSelectedPaths(TreePath path, boolean includePath)",protected boolean,Removes any paths in the selection that are descendants of path.,"

removeDescendantSelectedPaths
protected boolean removeDescendantSelectedPaths(TreePath path,
                                                boolean includePath)
Removes any paths in the selection that are descendants of
 path. If includePath is true and
 path is selected, it will be removed from the selection.

Returns:
true if a descendant was selected
Since:
1.3


"
JTree,removeDescendantToggledPaths(Enumeration<TreePath> toRemove),protected void,Removes any descendants of the TreePaths in toRemove that have been expanded.,"

removeDescendantToggledPaths
protected void removeDescendantToggledPaths(Enumeration<TreePath> toRemove)
Removes any descendants of the TreePaths in
 toRemove
 that have been expanded.

Parameters:
toRemove - an enumeration of the paths to remove; a value of
        null is ignored
Throws:
ClassCastException - if toRemove contains an
         element that is not a TreePath; null
         values are ignored


"
JTree,"removeSelectionInterval(int index0, int index1)",void,Removes the specified rows (inclusive) from the selection.,"

removeSelectionInterval
public void removeSelectionInterval(int index0,
                                    int index1)
Removes the specified rows (inclusive) from the selection. If
 the specified indices are within the viewable set of rows, or bound
 the viewable set of rows, then the specified indices are constrained by
 the viewable set of rows. If the specified indices are not within the
 viewable set of rows, or do not bound the viewable set of rows, then
 the selection is unchanged. For example, if the row count is 10, and this method is invoked with -1, 20, then the
 specified range bounds the viewable range, and this is treated as
 if invoked with 0, 9. On the other hand, if this were
 invoked with -10, -1, then the specified range does not
 bound the viewable set of rows, and the selection is unchanged.
 
 The parameters are not order dependent. That is, removeSelectionInterval(x, y) is equivalent to
 removeSelectionInterval(y, x).

Parameters:
index0 - the first row to remove from the selection
index1 - the last row to remove from the selection


"
JTree,removeSelectionPath(TreePath path),void,Removes the node identified by the specified path from the current selection.,"

removeSelectionPath
public void removeSelectionPath(TreePath path)
Removes the node identified by the specified path from the current
 selection.

Parameters:
path - the TreePath identifying a node


"
JTree,removeSelectionPaths(TreePath[] paths),void,Removes the nodes identified by the specified paths from the current selection.,"

removeSelectionPaths
public void removeSelectionPaths(TreePath[] paths)
Removes the nodes identified by the specified paths from the
 current selection.

Parameters:
paths - an array of TreePath objects that
              specifies the nodes to remove


"
JTree,removeSelectionRow(int row),void,Removes the row at the index row from the current selection.,"

removeSelectionRow
public void removeSelectionRow(int row)
Removes the row at the index row from the current
 selection.

Parameters:
row - the row to remove


"
JTree,removeSelectionRows(int[] rows),void,Removes the rows that are selected at each of the specified rows.,"

removeSelectionRows
public void removeSelectionRows(int[] rows)
Removes the rows that are selected at each of the specified
 rows.

Parameters:
rows - an array of ints specifying display rows, where 0 is
             the first row in the display


"
JTree,removeTreeExpansionListener(TreeExpansionListener tel),void,Removes a listener for TreeExpansion events.,"

removeTreeExpansionListener
public void removeTreeExpansionListener(TreeExpansionListener tel)
Removes a listener for TreeExpansion events.

Parameters:
tel - the TreeExpansionListener to remove


"
JTree,removeTreeSelectionListener(TreeSelectionListener tsl),void,Removes a TreeSelection listener.,"

removeTreeSelectionListener
public void removeTreeSelectionListener(TreeSelectionListener tsl)
Removes a TreeSelection listener.

Parameters:
tsl - the TreeSelectionListener to remove


"
JTree,removeTreeWillExpandListener(TreeWillExpandListener tel),void,Removes a listener for TreeWillExpand events.,"

removeTreeWillExpandListener
public void removeTreeWillExpandListener(TreeWillExpandListener tel)
Removes a listener for TreeWillExpand events.

Parameters:
tel - the TreeWillExpandListener to remove


"
JTree,scrollPathToVisible(TreePath path),void,Makes sure all the path components in path are expanded (except for the last path component) and scrolls so that the node identified by the path is displayed.,"

scrollPathToVisible
public void scrollPathToVisible(TreePath path)
Makes sure all the path components in path are expanded (except
 for the last path component) and scrolls so that the
 node identified by the path is displayed. Only works when this
 JTree is contained in a JScrollPane.

Parameters:
path - the TreePath identifying the node to
          bring into view


"
JTree,scrollRowToVisible(int row),void,Scrolls the item identified by row until it is displayed.,"

scrollRowToVisible
public void scrollRowToVisible(int row)
Scrolls the item identified by row until it is displayed. The minimum
 of amount of scrolling necessary to bring the row into view
 is performed. Only works when this JTree is contained in a
 JScrollPane.

Parameters:
row - an integer specifying the row to scroll, where 0 is the
             first row in the display


"
JTree,setAnchorSelectionPath(TreePath newPath),void,Sets the path identified as the anchor.,"

setAnchorSelectionPath
public void setAnchorSelectionPath(TreePath newPath)
Sets the path identified as the anchor.
 The anchor is not maintained by JTree, rather the UI will
 update it.
 
 This is a bound property.

Parameters:
newPath - the new anchor path
Since:
1.3


"
JTree,setCellEditor(TreeCellEditor cellEditor),void,Sets the cell editor.,"

setCellEditor
public void setCellEditor(TreeCellEditor cellEditor)
Sets the cell editor.  A null value implies that the
 tree cannot be edited.  If this represents a change in the
 cellEditor, the propertyChange
 method is invoked on all listeners.
 
 This is a bound property.

Parameters:
cellEditor - the TreeCellEditor to use


"
JTree,setCellRenderer(TreeCellRenderer x),void,Sets the TreeCellRenderer that will be used to draw each cell.,"

setCellRenderer
public void setCellRenderer(TreeCellRenderer x)
Sets the TreeCellRenderer that will be used to
 draw each cell.
 
 This is a bound property.

Parameters:
x - the TreeCellRenderer that is to render each cell


"
JTree,setDragEnabled(boolean b),void,Turns on or off automatic drag handling.,"

setDragEnabled
public void setDragEnabled(boolean b)
Turns on or off automatic drag handling. In order to enable automatic
 drag handling, this property should be set to true, and the
 tree's TransferHandler needs to be non-null.
 The default value of the dragEnabled property is false.
 
 The job of honoring this property, and recognizing a user drag gesture,
 lies with the look and feel implementation, and in particular, the tree's
 TreeUI. When automatic drag handling is enabled, most look and
 feels (including those that subclass BasicLookAndFeel) begin a
 drag and drop operation whenever the user presses the mouse button over
 an item and then moves the mouse a few pixels. Setting this property to
 true can therefore have a subtle effect on how selections behave.
 
 If a look and feel is used that ignores this property, you can still
 begin a drag and drop operation by calling exportAsDrag on the
 tree's TransferHandler.

Parameters:
b - whether or not to enable automatic drag handling
Throws:
HeadlessException - if
            b is true and
            GraphicsEnvironment.isHeadless()
            returns true
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless(), 
getDragEnabled(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTree,setDropMode(DropMode dropMode),void,Sets the drop mode for this component.,"

setDropMode
public final void setDropMode(DropMode dropMode)
Sets the drop mode for this component. For backward compatibility,
 the default for this property is DropMode.USE_SELECTION.
 Usage of one of the other modes is recommended, however, for an
 improved user experience. DropMode.ON, for instance,
 offers similar behavior of showing items as selected, but does so without
 affecting the actual selection in the tree.
 
JTree supports the following drop modes:
 
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.ON_OR_INSERT


 The drop mode is only meaningful if this component has a
 TransferHandler that accepts drops.

Parameters:
dropMode - the drop mode to use
Throws:
IllegalArgumentException - if the drop mode is unsupported
         or null
Since:
1.6
See Also:
getDropMode(), 
getDropLocation(), 
JComponent.setTransferHandler(javax.swing.TransferHandler), 
TransferHandler


"
JTree,setEditable(boolean flag),void,Determines whether the tree is editable.,"

setEditable
public void setEditable(boolean flag)
Determines whether the tree is editable. Fires a property
 change event if the new setting is different from the existing
 setting.
 
 This is a bound property.

Parameters:
flag - a boolean value, true if the tree is editable


"
JTree,"setExpandedState(TreePath path, boolean state)",protected void,Sets the expanded state of this JTree.,"

setExpandedState
protected void setExpandedState(TreePath path,
                                boolean state)
Sets the expanded state of this JTree.
 If state is
 true, all parents of path and path are marked as
 expanded. If state is false, all parents of
 path are marked EXPANDED, but path itself
 is marked collapsed.
 This will fail if a TreeWillExpandListener vetos it.

"
JTree,setExpandsSelectedPaths(boolean newValue),void,Configures the expandsSelectedPaths property.,"

setExpandsSelectedPaths
public void setExpandsSelectedPaths(boolean newValue)
Configures the expandsSelectedPaths property. If
 true, any time the selection is changed, either via the
 TreeSelectionModel, or the cover methods provided by
 JTree, the TreePaths parents will be
 expanded to make them visible (visible meaning the parent path is
 expanded, not necessarily in the visible rectangle of the
 JTree). If false, when the selection
 changes the nodes parent is not made visible (all its parents expanded).
 This is useful if you wish to have your selection model maintain paths
 that are not always visible (all parents expanded).
 
 This is a bound property.

Parameters:
newValue - the new value for expandsSelectedPaths
Since:
1.3


"
JTree,setInvokesStopCellEditing(boolean newValue),void,"Determines what happens when editing is interrupted by selecting another node in the tree, a change in the tree's data, or by some other means.","

setInvokesStopCellEditing
public void setInvokesStopCellEditing(boolean newValue)
Determines what happens when editing is interrupted by selecting
 another node in the tree, a change in the tree's data, or by some
 other means. Setting this property to true causes the
 changes to be automatically saved when editing is interrupted.
 
 Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY.

Parameters:
newValue - true means that stopCellEditing is invoked
        when editing is interrupted, and data is saved; false means that
        cancelCellEditing is invoked, and changes are lost


"
JTree,setLargeModel(boolean newValue),void,Specifies whether the UI should use a large model.,"

setLargeModel
public void setLargeModel(boolean newValue)
Specifies whether the UI should use a large model.
 (Not all UIs will implement this.) Fires a property change
 for the LARGE_MODEL_PROPERTY.
 
 This is a bound property.

Parameters:
newValue - true to suggest a large model to the UI
See Also:
largeModel


"
JTree,setLeadSelectionPath(TreePath newPath),void,Sets the path identifies as the lead.,"

setLeadSelectionPath
public void setLeadSelectionPath(TreePath newPath)
Sets the path identifies as the lead. The lead may not be selected.
 The lead is not maintained by JTree,
 rather the UI will update it.
 
 This is a bound property.

Parameters:
newPath - the new lead path
Since:
1.3


"
JTree,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.,"

setModel
public void setModel(TreeModel newModel)
Sets the TreeModel that will provide the data.
 
 This is a bound property.

Parameters:
newModel - the TreeModel that is to provide the data


"
JTree,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.
 
 This is a bound property.

Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
rootVisible


"
JTree,setRowHeight(int rowHeight),void,"Sets the height of each cell, in pixels.","

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell, in pixels.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.
 
 This is a bound property.

Parameters:
rowHeight - the height of each cell, in pixels


"
JTree,setScrollsOnExpand(boolean newValue),void,"Sets the scrollsOnExpand property, which determines whether the tree might scroll to show previously hidden children.","

setScrollsOnExpand
public void setScrollsOnExpand(boolean newValue)
Sets the scrollsOnExpand property,
 which determines whether the
 tree might scroll to show previously hidden children.
 If this property is true (the default),
 when a node expands
 the tree can use scrolling to make
 the maximum possible number of the node's descendants visible.
 In some look and feels, trees might not need to scroll when expanded;
 those look and feels will ignore this property.
 
 This is a bound property.

Parameters:
newValue - false to disable scrolling on expansion;
                 true to enable it
See Also:
getScrollsOnExpand()


"
JTree,"setSelectionInterval(int index0, int index1)",void,Selects the rows in the specified interval (inclusive).,"

setSelectionInterval
public void setSelectionInterval(int index0,
                                 int index1)
Selects the rows in the specified interval (inclusive). If
 the specified indices are within the viewable set of rows, or bound
 the viewable set of rows, then the specified rows are constrained by
 the viewable set of rows. If the specified indices are not within the
 viewable set of rows, or do not bound the viewable set of rows, then
 the selection is cleared. For example, if the row count is 10, and this method is invoked with -1, 20, then the
 specified indices bounds the viewable range, and this is treated as
 if invoked with 0, 9. On the other hand, if this were
 invoked with -10, -1, then the specified indices do not
 bound the viewable set of rows, and the selection is cleared.
 
 The parameters are not order dependent. That is, setSelectionInterval(x, y) is equivalent to
 setSelectionInterval(y, x).

Parameters:
index0 - the first index in the range to select
index1 - the last index in the range to select


"
JTree,setSelectionModel(TreeSelectionModel selectionModel),void,Sets the tree's selection model.,"

setSelectionModel
public void setSelectionModel(TreeSelectionModel selectionModel)
Sets the tree's selection model. When a null value is
 specified an empty
 selectionModel is used, which does not allow selections.
 
 This is a bound property.

Parameters:
selectionModel - the TreeSelectionModel to use,
          or null to disable selections
See Also:
TreeSelectionModel


"
JTree,setSelectionPath(TreePath path),void,Selects the node identified by the specified path.,"

setSelectionPath
public void setSelectionPath(TreePath path)
Selects the node identified by the specified path. If any
 component of the path is hidden (under a collapsed node), and
 getExpandsSelectedPaths is true it is
 exposed (made viewable).

Parameters:
path - the TreePath specifying the node to select


"
JTree,setSelectionPaths(TreePath[] paths),void,Selects the nodes identified by the specified array of paths.,"

setSelectionPaths
public void setSelectionPaths(TreePath[] paths)
Selects the nodes identified by the specified array of paths.
 If any component in any of the paths is hidden (under a collapsed
 node), and getExpandsSelectedPaths is true
 it is exposed (made viewable).

Parameters:
paths - an array of TreePath objects that specifies
          the nodes to select


"
JTree,setSelectionRow(int row),void,Selects the node at the specified row in the display.,"

setSelectionRow
public void setSelectionRow(int row)
Selects the node at the specified row in the display.

Parameters:
row - the row to select, where 0 is the first row in
             the display


"
JTree,setSelectionRows(int[] rows),void,Selects the nodes corresponding to each of the specified rows in the display.,"

setSelectionRows
public void setSelectionRows(int[] rows)
Selects the nodes corresponding to each of the specified rows
 in the display. If a particular element of rows is
 < 0 or >= getRowCount, it will be ignored.
 If none of the elements
 in rows are valid rows, the selection will
 be cleared. That is it will be as if clearSelection
 was invoked.

Parameters:
rows - an array of ints specifying the rows to select,
              where 0 indicates the first row in the display


"
JTree,setShowsRootHandles(boolean newValue),void,"Sets the value of the showsRootHandles property, which specifies whether the node handles should be displayed.","

setShowsRootHandles
public void setShowsRootHandles(boolean newValue)
Sets the value of the showsRootHandles property,
 which specifies whether the node handles should be displayed.
 The default value of this property depends on the constructor
 used to create the JTree.
 Some look and feels might not support handles;
 they will ignore this property.
 
 This is a bound property.

Parameters:
newValue - true if root handles should be displayed;
                 otherwise, false
See Also:
showsRootHandles, 
getShowsRootHandles()


"
JTree,setToggleClickCount(int clickCount),void,Sets the number of mouse clicks before a node will expand or close.,"

setToggleClickCount
public void setToggleClickCount(int clickCount)
Sets the number of mouse clicks before a node will expand or close.
 The default is two.
 
 This is a bound property.

Since:
1.3


"
JTree,setUI(TreeUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(TreeUI ui)
Sets the L&F object that renders this component.
 
 This is a bound property.

Parameters:
ui - the TreeUI L&F object
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JTree,setVisibleRowCount(int newCount),void,Sets the number of rows that are to be displayed.,"

setVisibleRowCount
public void setVisibleRowCount(int newCount)
Sets the number of rows that are to be displayed.
 This will only work if the tree is contained in a
 JScrollPane,
 and will adjust the preferred size and size of that scrollpane.
 
 This is a bound property.

Parameters:
newCount - the number of rows to display


"
JTree,startEditingAtPath(TreePath path),void,Selects the node identified by the specified path and initiates editing.,"

startEditingAtPath
public void startEditingAtPath(TreePath path)
Selects the node identified by the specified path and initiates
 editing.  The edit-attempt fails if the CellEditor
 does not allow
 editing for the specified item.

Parameters:
path - the TreePath identifying a node


"
JTree,stopEditing(),boolean,Ends the current editing session.,"

stopEditing
public boolean stopEditing()
Ends the current editing session.
 (The DefaultTreeCellEditor
 object saves any edits that are currently in progress on a cell.
 Other implementations may operate differently.)
 Has no effect if the tree isn't being edited.
 
Note:
 To make edit-saves automatic whenever the user changes
 their position in the tree, use setInvokesStopCellEditing(boolean).
 

Returns:
true if editing was in progress and is now stopped,
              false if editing was not in progress


"
JTree,treeDidChange(),void,"Sent when the tree has changed enough that we need to resize the bounds, but not enough that we need to remove the expanded node set (e.g nodes were expanded or collapsed, or nodes were inserted into the tree).","

treeDidChange
public void treeDidChange()
Sent when the tree has changed enough that we need to resize
 the bounds, but not enough that we need to remove the
 expanded node set (e.g nodes were expanded or collapsed, or
 nodes were inserted into the tree). You should never have to
 invoke this, the UI will invoke this as it needs to.

"
JTree,updateUI(),void,Notification from the UIManager that the L&F has changed.,"

updateUI
public void updateUI()
Notification from the UIManager that the L&F has changed.
 Replaces the current UI object with the latest version from the
 UIManager.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JTree.DropLocation,getChildIndex(),int,Returns the index where the dropped data should be inserted with respect to the path returned by getPath().,"

getChildIndex
public int getChildIndex()
Returns the index where the dropped data should be inserted
 with respect to the path returned by getPath().
 
 For drop modes DropMode.USE_SELECTION and
 DropMode.ON, this index is unimportant (and it will
 always be -1) as the only interesting data is the
 path over which the drop operation occurred.
 
 For drop mode DropMode.INSERT, this index
 indicates the index at which the data should be inserted into
 the parent path represented by getPath().
 -1 indicates that the drop occurred over the
 parent itself, and in most cases should be treated as inserting
 into either the beginning or the end of the parent's list of
 children.
 
 For DropMode.ON_OR_INSERT, this value will be
 an insert index, as described above, or -1 if
 the drop occurred over the path itself.

Returns:
the child index
See Also:
getPath()


"
JTree.DropLocation,getPath(),TreePath,Returns the path where dropped data should be placed in the tree.,"

getPath
public TreePath getPath()
Returns the path where dropped data should be placed in the
 tree.
 
 Interpretation of this value depends on the drop mode set on the
 component. If the drop mode is DropMode.USE_SELECTION
 or DropMode.ON, the return value is the path in the
 tree over which the data has been (or will be) dropped.
 null indicates that the drop is over empty space,
 not associated with a particular path.
 
 If the drop mode is DropMode.INSERT, the return value
 refers to the path that should become the parent of the new data,
 in which case getChildIndex() indicates where the
 new item should be inserted into this parent path. A
 null path indicates that no parent path has been
 determined, which can happen for multiple reasons:
 
The tree has no model
    There is no root in the tree
    The root is collapsed
    The root is a leaf node
 
 It is up to the developer to decide if and how they wish to handle
 the null case.
 
 If the drop mode is DropMode.ON_OR_INSERT,
 getChildIndex can be used to determine whether the
 drop is on top of the path itself (-1) or the index
 at which it should be inserted into the path (values other than
 -1).

Returns:
the drop path
See Also:
getChildIndex()


"
JTree.DropLocation,toString(),String,Returns a string representation of this drop location.,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class TransferHandler.DropLocation
Returns:
a string representation of this drop location


"
JTree.DynamicUtilTreeNode,children(),Enumeration,"Subclassed to load the children, if necessary.","

children
public Enumeration children()
Subclassed to load the children, if necessary.

Specified by:
children in interface TreeNode
Overrides:
children in class DefaultMutableTreeNode
Returns:
an Enumeration of this node's children


"
JTree.DynamicUtilTreeNode,"createChildren(DefaultMutableTreeNode parent, Object children)",static void,Adds to parent all the children in children.,"

createChildren
public static void createChildren(DefaultMutableTreeNode parent,
                                  Object children)
Adds to parent all the children in children.
 If children is an array or vector all of its
 elements are added is children, otherwise if children
 is a hashtable all the key/value pairs are added in the order
 Enumeration returns them.

"
JTree.DynamicUtilTreeNode,getChildAt(int index),TreeNode,"Subclassed to load the children, if necessary.","

getChildAt
public TreeNode getChildAt(int index)
Subclassed to load the children, if necessary.

Specified by:
getChildAt in interface TreeNode
Overrides:
getChildAt in class DefaultMutableTreeNode
Parameters:
index - an index into this node's child array
Returns:
the TreeNode in this node's child array at  the specified index


"
JTree.DynamicUtilTreeNode,getChildCount(),int,Returns the number of child nodes.,"

getChildCount
public int getChildCount()
Returns the number of child nodes.

Specified by:
getChildCount in interface TreeNode
Overrides:
getChildCount in class DefaultMutableTreeNode
Returns:
the number of child nodes


"
JTree.DynamicUtilTreeNode,isLeaf(),boolean,Returns true if this node allows children.,"

isLeaf
public boolean isLeaf()
Returns true if this node allows children. Whether the node
 allows children depends on how it was created.

Specified by:
isLeaf in interface TreeNode
Overrides:
isLeaf in class DefaultMutableTreeNode
Returns:
true if this node allows children, false otherwise
See Also:
JTree.DynamicUtilTreeNode


"
JTree.DynamicUtilTreeNode,loadChildren(),protected void,Loads the children based on childValue.,"

loadChildren
protected void loadChildren()
Loads the children based on childValue.
 If childValue is a Vector
 or array each element is added as a child,
 if childValue is a Hashtable
 each key/value pair is added in the order that
 Enumeration returns the keys.

"
JTree.EmptySelectionModel,addPropertyChangeListener(PropertyChangeListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
addPropertyChangeListener in interface TreeSelectionModel
Overrides:
addPropertyChangeListener in class DefaultTreeSelectionModel
Parameters:
listener - the listener to add; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,addSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

addSelectionPaths
public void addSelectionPaths(TreePath[] paths)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
addSelectionPaths in interface TreeSelectionModel
Overrides:
addSelectionPaths in class DefaultTreeSelectionModel
Parameters:
paths - the paths to add to the selection; this is ignored


"
JTree.EmptySelectionModel,addTreeSelectionListener(TreeSelectionListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

addTreeSelectionListener
public void addTreeSelectionListener(TreeSelectionListener listener)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
addTreeSelectionListener in interface TreeSelectionModel
Overrides:
addTreeSelectionListener in class DefaultTreeSelectionModel
Parameters:
listener - the listener to add; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,removePropertyChangeListener(PropertyChangeListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
removePropertyChangeListener in interface TreeSelectionModel
Overrides:
removePropertyChangeListener in class DefaultTreeSelectionModel
Parameters:
listener - the listener to remove; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,removeSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

removeSelectionPaths
public void removeSelectionPaths(TreePath[] paths)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
removeSelectionPaths in interface TreeSelectionModel
Overrides:
removeSelectionPaths in class DefaultTreeSelectionModel
Parameters:
paths - the paths to remove; this is ignored


"
JTree.EmptySelectionModel,removeTreeSelectionListener(TreeSelectionListener listener),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

removeTreeSelectionListener
public void removeTreeSelectionListener(TreeSelectionListener listener)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
removeTreeSelectionListener in interface TreeSelectionModel
Overrides:
removeTreeSelectionListener in class DefaultTreeSelectionModel
Parameters:
listener - the listener to remove; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,setRowMapper(RowMapper mapper),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

setRowMapper
public void setRowMapper(RowMapper mapper)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
setRowMapper in interface TreeSelectionModel
Overrides:
setRowMapper in class DefaultTreeSelectionModel
Parameters:
mapper - the RowMapper instance; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,setSelectionMode(int mode),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

setSelectionMode
public void setSelectionMode(int mode)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
setSelectionMode in interface TreeSelectionModel
Overrides:
setSelectionMode in class DefaultTreeSelectionModel
Parameters:
mode - the selection mode; this is ignored
Since:
1.7


"
JTree.EmptySelectionModel,setSelectionPaths(TreePath[] paths),void,This is overriden to do nothing; EmptySelectionModel does not allow a selection.,"

setSelectionPaths
public void setSelectionPaths(TreePath[] paths)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
setSelectionPaths in interface TreeSelectionModel
Overrides:
setSelectionPaths in class DefaultTreeSelectionModel
Parameters:
paths - the paths to select; this is ignored


"
JTree.EmptySelectionModel,sharedInstance(),static JTree.EmptySelectionModel,Returns the single instance of EmptySelectionModel.,"

sharedInstance
public static JTree.EmptySelectionModel sharedInstance()
Returns the single instance of EmptySelectionModel.

Returns:
single instance of EmptySelectionModel


"
JViewport,addChangeListener(ChangeListener l),void,"Adds a ChangeListener to the list that is notified each time the view's size, position, or the viewport's extent size has changed.","

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the list that is
 notified each time the view's
 size, position, or the viewport's extent size has changed.

Parameters:
l - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
setViewPosition(java.awt.Point), 
setViewSize(java.awt.Dimension), 
setExtentSize(java.awt.Dimension)


"
JViewport,"addImpl(Component child, Object constraints, int index)",protected void,"Sets the JViewport's one lightweight child, which can be null.","

addImpl
protected void addImpl(Component child,
                       Object constraints,
                       int index)
Sets the JViewport's one lightweight child,
 which can be null.
 (Since there is only one child which occupies the entire viewport,
 the constraints and index
 arguments are ignored.)

Overrides:
addImpl in class Container
Parameters:
child - the lightweight child of the viewport
constraints - the constraints to be respected
index - the index
See Also:
setView(java.awt.Component)


"
JViewport,"computeBlit(int dx, int dy, Point blitFrom, Point blitTo, Dimension blitSize, Rectangle blitPaint)",protected boolean,Computes the parameters for a blit where the backing store image currently contains oldLoc in the upper left hand corner and we're scrolling to newLoc.,"

computeBlit
protected boolean computeBlit(int dx,
                              int dy,
                              Point blitFrom,
                              Point blitTo,
                              Dimension blitSize,
                              Rectangle blitPaint)
Computes the parameters for a blit where the backing store image
 currently contains oldLoc in the upper left hand corner
 and we're scrolling to newLoc.
 The parameters are modified
 to return the values required for the blit.

Parameters:
dx - the horizontal delta
dy - the vertical delta
blitFrom - the Point we're blitting from
blitTo - the Point we're blitting to
blitSize - the Dimension of the area to blit
blitPaint - the area to blit
Returns:
true if the parameters are modified and we're ready to blit;
          false otherwise


"
JViewport,createLayoutManager(),protected LayoutManager,Subclassers can override this to install a different layout manager (or null) in the constructor.,"

createLayoutManager
protected LayoutManager createLayoutManager()
Subclassers can override this to install a different
 layout manager (or null) in the constructor.  Returns
 the LayoutManager to install on the JViewport.

Returns:
a LayoutManager


"
JViewport,createViewListener(),protected JViewport.ViewListener,Creates a listener for the view.,"

createViewListener
protected JViewport.ViewListener createViewListener()
Creates a listener for the view.

Returns:
a ViewListener


"
JViewport,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Notifies listeners of a property change.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Notifies listeners of a property change. This is subclassed to update
 the windowBlit property.
 (The putClientProperty property is final).

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - a string containing the property name
oldValue - the old value of the property
newValue - the new value of the property


"
JViewport,fireStateChanged(),protected void,"Notifies all ChangeListeners when the views size, position, or the viewports extent size has changed.","

fireStateChanged
protected void fireStateChanged()
Notifies all ChangeListeners when the views
 size, position, or the viewports extent size has changed.

See Also:
addChangeListener(javax.swing.event.ChangeListener), 
removeChangeListener(javax.swing.event.ChangeListener), 
EventListenerList


"
JViewport,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JViewport.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JViewport.
 For viewports, the AccessibleContext takes the form of an
 AccessibleJViewport.
 A new AccessibleJViewport instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Component
Returns:
an AccessibleJViewport that serves as the
         AccessibleContext of this JViewport


"
JViewport,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this JViewport with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this JViewport with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
JViewport,getExtentSize(),Dimension,Returns the size of the visible part of the view in view coordinates.,"

getExtentSize
public Dimension getExtentSize()
Returns the size of the visible part of the view in view coordinates.

Returns:
a Dimension object giving the size of the view


"
JViewport,getInsets(),Insets,"Returns the insets (border) dimensions as (0,0,0,0), since borders are not supported on a JViewport.","

getInsets
public final Insets getInsets()
Returns the insets (border) dimensions as (0,0,0,0), since borders
 are not supported on a JViewport.

Overrides:
getInsets in class JComponent
Returns:
a Rectangle of zero dimension and zero origin
See Also:
setBorder(javax.swing.border.Border)


"
JViewport,getInsets(Insets insets),Insets,Returns an Insets object containing this JViewports inset values.,"

getInsets
public final Insets getInsets(Insets insets)
Returns an Insets object containing this
 JViewports inset values.  The passed-in
 Insets object will be reinitialized, and
 all existing values within this object are overwritten.

Overrides:
getInsets in class JComponent
Parameters:
insets - the Insets object which can be reused
Returns:
this viewports inset values
See Also:
getInsets()


"
JViewport,getScrollMode(),int,Returns the current scrolling mode.,"

getScrollMode
public int getScrollMode()
Returns the current scrolling mode.

Returns:
the scrollMode property
Since:
1.3
See Also:
setScrollMode(int)


"
JViewport,getUI(),ViewportUI,Returns the L&F object that renders this component.,"

getUI
public ViewportUI getUI()
Returns the L&F object that renders this component.

Returns:
a ViewportUI object
Since:
1.3


"
JViewport,getUIClassID(),String,Returns a string that specifies the name of the L&F class that renders this component.,"

getUIClassID
public String getUIClassID()
Returns a string that specifies the name of the L&F class
 that renders this component.

Overrides:
getUIClassID in class JComponent
Returns:
the string ""ViewportUI""
See Also:
JComponent.getUIClassID(), 
UIDefaults.getUI(javax.swing.JComponent)


"
JViewport,getView(),Component,Returns the JViewport's one child or null.,"

getView
public Component getView()
Returns the JViewport's one child or null.

Returns:
the viewports child, or null if none exists
See Also:
setView(java.awt.Component)


"
JViewport,getViewPosition(),Point,"Returns the view coordinates that appear in the upper left hand corner of the viewport, or 0,0 if there's no view.","

getViewPosition
public Point getViewPosition()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.

Returns:
a Point object giving the upper left coordinates


"
JViewport,getViewRect(),Rectangle,Returns a rectangle whose origin is getViewPosition and size is getExtentSize.,"

getViewRect
public Rectangle getViewRect()
Returns a rectangle whose origin is getViewPosition
 and size is getExtentSize.
 This is the visible part of the view, in view coordinates.

Returns:
a Rectangle giving the visible part of
          the view using view coordinates.


"
JViewport,getViewSize(),Dimension,"If the view's size hasn't been explicitly set, return the preferred size, otherwise return the view's current size.","

getViewSize
public Dimension getViewSize()
If the view's size hasn't been explicitly set, return the
 preferred size, otherwise return the view's current size.
 If there is no view, return 0,0.

Returns:
a Dimension object specifying the size of the view


"
JViewport,isBackingStoreEnabled(),boolean,"Deprecated. As of Java 2 platform v1.3, replaced by getScrollMode().","

isBackingStoreEnabled
@Deprecated
public boolean isBackingStoreEnabled()
Deprecated. As of Java 2 platform v1.3, replaced by
             getScrollMode().
Returns true if this viewport is maintaining
 an offscreen image of its contents.

Returns:
true if scrollMode is
    BACKINGSTORE_SCROLL_MODE


"
JViewport,isOptimizedDrawingEnabled(),boolean,The JViewport overrides the default implementation of this method (in JComponent) to return false.,"

isOptimizedDrawingEnabled
public boolean isOptimizedDrawingEnabled()
The JViewport overrides the default implementation of
 this method (in JComponent) to return false.
 This ensures
 that the drawing machinery will call the Viewport's
 paint
 implementation rather than messaging the JViewport's
 children directly.

Overrides:
isOptimizedDrawingEnabled in class JComponent
Returns:
false


"
JViewport,isPaintingOrigin(),protected boolean,"Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause painting to originate from JViewport, or one of its ancestors.","

isPaintingOrigin
protected boolean isPaintingOrigin()
Returns true if scroll mode is a BACKINGSTORE_SCROLL_MODE to cause
 painting to originate from JViewport, or one of its
 ancestors. Otherwise returns false.

Overrides:
isPaintingOrigin in class JComponent
Returns:
true if if scroll mode is a BACKINGSTORE_SCROLL_MODE.
See Also:
JComponent.isPaintingOrigin()


"
JViewport,paint(Graphics g),void,"Depending on whether the backingStore is enabled, either paint the image through the backing store or paint just the recently exposed part, using the backing store to ""blit"" the remainder.","

paint
public void paint(Graphics g)
Depending on whether the backingStore is enabled,
 either paint the image through the backing store or paint
 just the recently exposed part, using the backing store
 to ""blit"" the remainder.
 
 The term ""blit"" is the pronounced version of the PDP-10
 BLT (BLock Transfer) instruction, which copied a block of
 bits. (In case you were curious.)
 

Overrides:
paint in class JComponent
Parameters:
g - the Graphics context within which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
JViewport,paramString(),protected String,Returns a string representation of this JViewport.,"

paramString
protected String paramString()
Returns a string representation of this JViewport.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class JComponent
Returns:
a string representation of this JViewport


"
JViewport,remove(Component child),void,Removes the Viewports one lightweight child.,"

remove
public void remove(Component child)
Removes the Viewports one lightweight child.

Overrides:
remove in class Container
Parameters:
child - the component to be removed
See Also:
setView(java.awt.Component)


"
JViewport,removeChangeListener(ChangeListener l),void,"Removes a ChangeListener from the list that's notified each time the views size, position, or the viewports extent size has changed.","

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the list that's notified each
 time the views size, position, or the viewports extent size
 has changed.

Parameters:
l - the ChangeListener to remove
See Also:
addChangeListener(javax.swing.event.ChangeListener)


"
JViewport,"repaint(long tm, int x, int y, int w, int h)",void,Always repaint in the parents coordinate system to make sure only one paint is performed by the RepaintManager.,"

repaint
public void repaint(long tm,
                    int x,
                    int y,
                    int w,
                    int h)
Always repaint in the parents coordinate system to make sure
 only one paint is performed by the RepaintManager.

Overrides:
repaint in class JComponent
Parameters:
tm - maximum time in milliseconds before update
x - the x coordinate (pixels over from left)
y - the y coordinate (pixels down from top)
w - the width
h - the height
See Also:
Component.update(java.awt.Graphics)


"
JViewport,"reshape(int x, int y, int w, int h)",void,Sets the bounds of this viewport.,"

reshape
public void reshape(int x,
                    int y,
                    int w,
                    int h)
Sets the bounds of this viewport.  If the viewport's width
 or height has changed, fire a StateChanged event.

Overrides:
reshape in class JComponent
Parameters:
x - left edge of the origin
y - top edge of the origin
w - width in pixels
h - height in pixels
See Also:
JComponent.reshape(int, int, int, int)


"
JViewport,scrollRectToVisible(Rectangle contentRect),void,Scrolls the view so that Rectangle within the view becomes visible.,"

scrollRectToVisible
public void scrollRectToVisible(Rectangle contentRect)
Scrolls the view so that Rectangle
 within the view becomes visible.
 
 This attempts to validate the view before scrolling if the
 view is currently not valid - isValid returns false.
 To avoid excessive validation when the containment hierarchy is
 being created this will not validate if one of the ancestors does not
 have a peer, or there is no validate root ancestor, or one of the
 ancestors is not a Window or Applet.
 
 Note that this method will not scroll outside of the
 valid viewport; for example, if contentRect is larger
 than the viewport, scrolling will be confined to the viewport's
 bounds.

Overrides:
scrollRectToVisible in class JComponent
Parameters:
contentRect - the Rectangle to display
See Also:
JComponent.isValidateRoot(), 
Component.isValid(), 
Component.getPeer()


"
JViewport,setBackingStoreEnabled(boolean enabled),void,"Deprecated. As of Java 2 platform v1.3, replaced by setScrollMode().","

setBackingStoreEnabled
@Deprecated
public void setBackingStoreEnabled(boolean enabled)
Deprecated. As of Java 2 platform v1.3, replaced by
             setScrollMode().
If true if this viewport will maintain an offscreen
 image of its contents.  The image is used to reduce the cost
 of small one dimensional changes to the viewPosition.
 Rather than repainting the entire viewport we use
 Graphics.copyArea to effect some of the scroll.

Parameters:
enabled - if true, maintain an offscreen backing store


"
JViewport,setBorder(Border border),void,"The viewport ""scrolls"" its child (called the ""view"") by the normal parent/child clipping (typically the view is moved in the opposite direction of the scroll).","

setBorder
public final void setBorder(Border border)
The viewport ""scrolls"" its child (called the ""view"") by the
 normal parent/child clipping (typically the view is moved in
 the opposite direction of the scroll).  A non-null border,
 or non-zero insets, isn't supported, to prevent the geometry
 of this component from becoming complex enough to inhibit
 subclassing.  To create a JViewport with a border,
 add it to a JPanel that has a border.
 Note:  If border is non-null, this
 method will throw an exception as borders are not supported on
 a JViewPort.

Overrides:
setBorder in class JComponent
Parameters:
border - the Border to set
Throws:
IllegalArgumentException - this method is not implemented
See Also:
Border, 
CompoundBorder


"
JViewport,setExtentSize(Dimension newExtent),void,Sets the size of the visible part of the view using view coordinates.,"

setExtentSize
public void setExtentSize(Dimension newExtent)
Sets the size of the visible part of the view using view coordinates.

Parameters:
newExtent - a Dimension object specifying
          the size of the view


"
JViewport,setScrollMode(int mode),void,Used to control the method of scrolling the viewport contents.,"

setScrollMode
public void setScrollMode(int mode)
Used to control the method of scrolling the viewport contents.
 You may want to change this mode to get maximum performance for your
 use case.

Parameters:
mode - one of the following values:
 
 JViewport.BLIT_SCROLL_MODE
  JViewport.BACKINGSTORE_SCROLL_MODE
  JViewport.SIMPLE_SCROLL_MODE
 
Since:
1.3
See Also:
BLIT_SCROLL_MODE, 
BACKINGSTORE_SCROLL_MODE, 
SIMPLE_SCROLL_MODE


"
JViewport,setUI(ViewportUI ui),void,Sets the L&F object that renders this component.,"

setUI
public void setUI(ViewportUI ui)
Sets the L&F object that renders this component.

Parameters:
ui - the ViewportUI L&F object
Since:
1.3
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
JViewport,setView(Component view),void,"Sets the JViewport's one lightweight child (view), which can be null.","

setView
public void setView(Component view)
Sets the JViewport's one lightweight child
 (view), which can be null.

Parameters:
view - the viewport's new lightweight child
See Also:
getView()


"
JViewport,setViewPosition(Point p),void,"Sets the view coordinates that appear in the upper left hand corner of the viewport, does nothing if there's no view.","

setViewPosition
public void setViewPosition(Point p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.

Parameters:
p - a Point object giving the upper left coordinates


"
JViewport,setViewSize(Dimension newSize),void,Sets the size of the view.,"

setViewSize
public void setViewSize(Dimension newSize)
Sets the size of the view.  A state changed event will be fired.

Parameters:
newSize - a Dimension object specifying the new
          size of the view


"
JViewport,toViewCoordinates(Dimension size),Dimension,Converts a size in pixel coordinates to view coordinates.,"

toViewCoordinates
public Dimension toViewCoordinates(Dimension size)
Converts a size in pixel coordinates to view coordinates.
 Subclasses of viewport that support ""logical coordinates""
 will override this method.

Parameters:
size - a Dimension object using pixel coordinates
Returns:
a Dimension object converted to view coordinates


"
JViewport,toViewCoordinates(Point p),Point,Converts a point in pixel coordinates to view coordinates.,"

toViewCoordinates
public Point toViewCoordinates(Point p)
Converts a point in pixel coordinates to view coordinates.
 Subclasses of viewport that support ""logical coordinates""
 will override this method.

Parameters:
p - a Point object using pixel coordinates
Returns:
a Point object converted to view coordinates


"
JViewport,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JComponent
See Also:
JComponent.updateUI()


"
JWindow,"addImpl(Component comp, Object constraints, int index)",protected void,Adds the specified child Component.,"

addImpl
protected void addImpl(Component comp,
                       Object constraints,
                       int index)
Adds the specified child Component.
 This method is overridden to conditionally forward calls to the
 contentPane.
 By default, children are added to the contentPane instead
 of the frame, refer to RootPaneContainer for
 details.

Overrides:
addImpl in class Container
Parameters:
comp - the component to be enhanced
constraints - the constraints to be respected
index - the index
Throws:
IllegalArgumentException - if index is invalid
IllegalArgumentException - if adding the container's parent
                  to itself
IllegalArgumentException - if adding a window to a container
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JWindow,createRootPane(),protected JRootPane,Called by the constructor methods to create the default rootPane.,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor methods to create the default
 rootPane.

"
JWindow,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this JWindow.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this JWindow.
 For JWindows, the AccessibleContext takes the form of an
 AccessibleJWindow.
 A new AccessibleJWindow instance is created if necessary.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class Window
Returns:
an AccessibleJWindow that serves as the
         AccessibleContext of this JWindow


"
JWindow,getContentPane(),Container,Returns the Container which is the contentPane for this window.,"

getContentPane
public Container getContentPane()
Returns the Container which is the contentPane
 for this window.

Specified by:
getContentPane in interface RootPaneContainer
Returns:
the contentPane property
See Also:
setContentPane(java.awt.Container), 
RootPaneContainer.getContentPane()


"
JWindow,getGlassPane(),Component,Returns the glassPane Component for this window.,"

getGlassPane
public Component getGlassPane()
Returns the glassPane Component for this window.

Specified by:
getGlassPane in interface RootPaneContainer
Returns:
the glassPane property
See Also:
setGlassPane(java.awt.Component), 
RootPaneContainer.getGlassPane()


"
JWindow,getGraphics(),Graphics,Creates a graphics context for this component.,"

getGraphics
public Graphics getGraphics()
Creates a graphics context for this component. This method will
 return null if this component is currently not
 displayable.

Overrides:
getGraphics in class Component
Returns:
a graphics context for this component, or null
             if it has none
Since:
1.6
See Also:
Component.paint(java.awt.Graphics)


"
JWindow,getLayeredPane(),JLayeredPane,Returns the layeredPane object for this window.,"

getLayeredPane
public JLayeredPane getLayeredPane()
Returns the layeredPane object for this window.

Specified by:
getLayeredPane in interface RootPaneContainer
Returns:
the layeredPane property
See Also:
setLayeredPane(javax.swing.JLayeredPane), 
RootPaneContainer.getLayeredPane()


"
JWindow,getRootPane(),JRootPane,Returns the rootPane object for this window.,"

getRootPane
public JRootPane getRootPane()
Returns the rootPane object for this window.

Specified by:
getRootPane in interface RootPaneContainer
Returns:
the rootPane property for this window
See Also:
setRootPane(javax.swing.JRootPane), 
RootPaneContainer.getRootPane()


"
JWindow,getTransferHandler(),TransferHandler,Gets the transferHandler property.,"

getTransferHandler
public TransferHandler getTransferHandler()
Gets the transferHandler property.

Returns:
the value of the transferHandler property
Since:
1.6
See Also:
TransferHandler, 
setTransferHandler(javax.swing.TransferHandler)


"
JWindow,isRootPaneCheckingEnabled(),protected boolean,Returns whether calls to add and setLayout are forwarded to the contentPane.,"

isRootPaneCheckingEnabled
protected boolean isRootPaneCheckingEnabled()
Returns whether calls to add and
 setLayout are forwarded to the contentPane.

Returns:
true if add and setLayout
         are forwarded; false otherwise
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JWindow,paramString(),protected String,Returns a string representation of this JWindow.,"

paramString
protected String paramString()
Returns a string representation of this JWindow.
 This method
 is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not
 be null.

Overrides:
paramString in class Container
Returns:
a string representation of this JWindow


"
JWindow,remove(Component comp),void,Removes the specified component from the container.,"

remove
public void remove(Component comp)
Removes the specified component from the container. If
 comp is not the rootPane, this will forward
 the call to the contentPane. This will do nothing if
 comp is not a child of the JWindow or
 contentPane.

Overrides:
remove in class Container
Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
Container.add(java.awt.Component), 
RootPaneContainer


"
JWindow,"repaint(long time, int x, int y, int width, int height)",void,Repaints the specified rectangle of this component within time milliseconds.,"

repaint
public void repaint(long time,
                    int x,
                    int y,
                    int width,
                    int height)
Repaints the specified rectangle of this component within
 time milliseconds.  Refer to RepaintManager
 for details on how the repaint is handled.

Overrides:
repaint in class Component
Parameters:
time - maximum time in milliseconds before update
x - the x coordinate
y - the y coordinate
width - the width
height - the height
Since:
1.6
See Also:
RepaintManager


"
JWindow,setContentPane(Container contentPane),void,Sets the contentPane property for this window.,"

setContentPane
public void setContentPane(Container contentPane)
Sets the contentPane property for this window.
 This method is called by the constructor.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
contentPane - the new contentPane
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
getContentPane(), 
RootPaneContainer.setContentPane(java.awt.Container)


"
JWindow,setGlassPane(Component glassPane),void,Sets the glassPane property.,"

setGlassPane
public void setGlassPane(Component glassPane)
Sets the glassPane property.
 This method is called by the constructor.

Specified by:
setGlassPane in interface RootPaneContainer
Parameters:
glassPane - the glassPane object for this window
See Also:
getGlassPane(), 
RootPaneContainer.setGlassPane(java.awt.Component)


"
JWindow,setLayeredPane(JLayeredPane layeredPane),void,Sets the layeredPane property.,"

setLayeredPane
public void setLayeredPane(JLayeredPane layeredPane)
Sets the layeredPane property.
 This method is called by the constructor.

Specified by:
setLayeredPane in interface RootPaneContainer
Parameters:
layeredPane - the new layeredPane object
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
getLayeredPane(), 
RootPaneContainer.setLayeredPane(javax.swing.JLayeredPane)


"
JWindow,setLayout(LayoutManager manager),void,Sets the LayoutManager.,"

setLayout
public void setLayout(LayoutManager manager)
Sets the LayoutManager.
 Overridden to conditionally forward the call to the
 contentPane.
 Refer to RootPaneContainer for
 more information.

Overrides:
setLayout in class Container
Parameters:
manager - the LayoutManager
See Also:
setRootPaneCheckingEnabled(boolean), 
RootPaneContainer


"
JWindow,setRootPane(JRootPane root),protected void,Sets the new rootPane object for this window.,"

setRootPane
protected void setRootPane(JRootPane root)
Sets the new rootPane object for this window.
 This method is called by the constructor.

Parameters:
root - the new rootPane property
See Also:
getRootPane()


"
JWindow,setRootPaneCheckingEnabled(boolean enabled),protected void,Sets whether calls to add and setLayout are forwarded to the contentPane.,"

setRootPaneCheckingEnabled
protected void setRootPaneCheckingEnabled(boolean enabled)
Sets whether calls to add and
 setLayout are forwarded to the contentPane.

Parameters:
enabled - true if add and setLayout
        are forwarded, false if they should operate directly on the
        JWindow.
See Also:
addImpl(java.awt.Component, java.lang.Object, int), 
setLayout(java.awt.LayoutManager), 
isRootPaneCheckingEnabled(), 
RootPaneContainer


"
JWindow,setTransferHandler(TransferHandler newHandler),void,"Sets the transferHandler property, which is a mechanism to support transfer of data into this component.","

setTransferHandler
public void setTransferHandler(TransferHandler newHandler)
Sets the transferHandler property, which is a mechanism to
 support transfer of data into this component. Use null
 if the component does not support data transfer operations.
 
 If the system property suppressSwingDropSupport is false
 (the default) and the current drop target on this component is either
 null or not a user-set drop target, this method will change the
 drop target as follows: If newHandler is null it will
 clear the drop target. If not null it will install a new
 DropTarget.
 
 Note: When used with JWindow, TransferHandler only
 provides data import capability, as the data export related methods
 are currently typed to JComponent.
 
 Please see
 
 How to Use Drag and Drop and Data Transfer, a section in
 The Java Tutorial, for more information.

Parameters:
newHandler - the new TransferHandler
Since:
1.6
See Also:
TransferHandler, 
getTransferHandler(), 
Component.setDropTarget(java.awt.dnd.DropTarget)


"
JWindow,update(Graphics g),void,Calls paint(g).,"

update
public void update(Graphics g)
Calls paint(g).  This method was overridden to
 prevent an unnecessary call to clear the background.

Overrides:
update in class Container
Parameters:
g - the Graphics context in which to paint
See Also:
Component.update(Graphics)


"
JWindow,windowInit(),protected void,Called by the constructors to init the JWindow properly.,"

windowInit
protected void windowInit()
Called by the constructors to init the JWindow properly.

"
KeyStroke,getKeyStroke(char keyChar),static KeyStroke,Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified character.,"

getKeyStroke
public static KeyStroke getKeyStroke(char keyChar)
Returns a shared instance of a KeyStroke
 that represents a KEY_TYPED event for the
 specified character.

Parameters:
keyChar - the character value for a keyboard key
Returns:
a KeyStroke object for that key


"
KeyStroke,"getKeyStroke(Character keyChar, int modifiers)",static KeyStroke,Returns a shared instance of a KeyStroke that represents a KEY_TYPED event for the specified Character object and a set of modifiers.,"

getKeyStroke
public static KeyStroke getKeyStroke(Character keyChar,
                                     int modifiers)
Returns a shared instance of a KeyStroke
 that represents a KEY_TYPED event for the
 specified Character object and a
 set of modifiers. Note that the first parameter is of type Character
 rather than char. This is to avoid inadvertent clashes with calls to
 getKeyStroke(int keyCode, int modifiers).

 The modifiers consist of any combination of following:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers listed below also can be used, but they are
 mapped to _DOWN_ modifiers. 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyChar - the Character object for a keyboard character
modifiers - a bitwise-ored combination of any modifiers
Returns:
an KeyStroke object for that key
Throws:
IllegalArgumentException - if keyChar is null
Since:
1.3
See Also:
InputEvent


"
KeyStroke,"getKeyStroke(char keyChar, boolean onKeyRelease)",static KeyStroke,Deprecated. use getKeyStroke(char),"

getKeyStroke
@Deprecated
public static KeyStroke getKeyStroke(char keyChar,
                                                 boolean onKeyRelease)
Deprecated. use getKeyStroke(char)
Returns an instance of a KeyStroke, specifying whether the key is
 considered to be activated when it is pressed or released. Unlike all
 other factory methods in this class, the instances returned by this
 method are not necessarily cached or shared.

Parameters:
keyChar - the character value for a keyboard key
onKeyRelease - true if this KeyStroke corresponds to a
        key release; false otherwise.
Returns:
a KeyStroke object for that key


"
KeyStroke,"getKeyStroke(int keyCode, int modifiers)",static KeyStroke,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers.","

getKeyStroke
public static KeyStroke getKeyStroke(int keyCode,
                                     int modifiers)
Returns a shared instance of a KeyStroke, given a numeric key code and a
 set of modifiers. The returned KeyStroke will correspond to a key press.
 
 The ""virtual key"" constants defined in java.awt.event.KeyEvent can be
 used to specify the key code. For example:
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 Alternatively, the key code may be obtained by calling
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.

 The modifiers consist of any combination of:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyCode - an int specifying the numeric code for a keyboard key
modifiers - a bitwise-ored combination of any modifiers
Returns:
a KeyStroke object for that key
See Also:
KeyEvent, 
InputEvent


"
KeyStroke,"getKeyStroke(int keyCode, int modifiers, boolean onKeyRelease)",static KeyStroke,"Returns a shared instance of a KeyStroke, given a numeric key code and a set of modifiers, specifying whether the key is activated when it is pressed or released.","

getKeyStroke
public static KeyStroke getKeyStroke(int keyCode,
                                     int modifiers,
                                     boolean onKeyRelease)
Returns a shared instance of a KeyStroke, given a numeric key code and a
 set of modifiers, specifying whether the key is activated when it is
 pressed or released.
 
 The ""virtual key"" constants defined in java.awt.event.KeyEvent can be
 used to specify the key code. For example:
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 Alternatively, the key code may be obtained by calling
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.

 The modifiers consist of any combination of:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyCode - an int specifying the numeric code for a keyboard key
modifiers - a bitwise-ored combination of any modifiers
onKeyRelease - true if the KeyStroke should represent
        a key release; false otherwise.
Returns:
a KeyStroke object for that key
See Also:
KeyEvent, 
InputEvent


"
KeyStroke,getKeyStroke(String s),static KeyStroke,Parses a string and returns a KeyStroke.,"

getKeyStroke
public static KeyStroke getKeyStroke(String s)
Parses a string and returns a KeyStroke.
 The string must have the following syntax:
 
    <modifiers>* (<typedID> | <pressedReleasedID>)

    modifiers := shift | control | ctrl | meta | alt | altGraph
    typedID := typed <typedKey>
    typedKey := string of length 1 giving Unicode character.
    pressedReleasedID := (pressed | released) key
    key := KeyEvent key code name, i.e. the name following ""VK_"".
 
 If typed, pressed or released is not specified, pressed is assumed. Here
 are some examples:
 
     ""INSERT"" => getKeyStroke(KeyEvent.VK_INSERT, 0);
     ""control DELETE"" => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
     ""alt shift X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
     ""alt shift released X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
     ""typed a"" => getKeyStroke('a');
 

 In order to maintain backward-compatibility, specifying a null String,
 or a String which is formatted incorrectly, returns null.

Parameters:
s - a String formatted as described above
Returns:
a KeyStroke object for that String, or null if the specified
         String is null, or is formatted incorrectly
See Also:
KeyEvent


"
KeyStroke,getKeyStrokeForEvent(KeyEvent anEvent),static KeyStroke,Returns a KeyStroke which represents the stroke which generated a given KeyEvent.,"

getKeyStrokeForEvent
public static KeyStroke getKeyStrokeForEvent(KeyEvent anEvent)
Returns a KeyStroke which represents the stroke which generated a given
 KeyEvent.
 
 This method obtains the keyChar from a KeyTyped event, and the keyCode
 from a KeyPressed or KeyReleased event. The KeyEvent modifiers are
 obtained for all three types of KeyEvent.

Parameters:
anEvent - the KeyEvent from which to obtain the KeyStroke
Returns:
the KeyStroke that precipitated the event
Throws:
NullPointerException - if anEvent is null


"
LayoutFocusTraversalPolicy,accept(Component aComponent),protected boolean,Determines whether the specified Component is an acceptable choice as the new focus owner.,"

accept
protected boolean accept(Component aComponent)
Determines whether the specified Component
 is an acceptable choice as the new focus owner.
 This method performs the following sequence of operations:
 
Checks whether aComponent is visible, displayable,
     enabled, and focusable.  If any of these properties is
     false, this method returns false.
 If aComponent is an instance of JTable,
     returns true.
 If aComponent is an instance of JComboBox,
     then returns the value of
     aComponent.getUI().isFocusTraversable(aComponent).
 If aComponent is a JComponent
     with a JComponent.WHEN_FOCUSED
InputMap that is neither null
     nor empty, returns true.
 Returns the value of
     DefaultFocusTraversalPolicy.accept(aComponent).
 

Overrides:
accept in class SortingFocusTraversalPolicy
Parameters:
aComponent - the Component whose fitness
                   as a focus owner is to be tested
Returns:
true if aComponent is a valid choice
         for a focus owner;
         otherwise false
See Also:
Component.isVisible(), 
Component.isDisplayable(), 
Component.isEnabled(), 
Component.isFocusable(), 
ComboBoxUI.isFocusTraversable(javax.swing.JComboBox), 
JComponent.getInputMap(int), 
DefaultFocusTraversalPolicy.accept(java.awt.Component)


"
LayoutFocusTraversalPolicy,"getComponentAfter(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus after aComponent.,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent.
 
 By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Overrides:
getComponentAfter in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
LayoutFocusTraversalPolicy,"getComponentBefore(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus before aComponent.,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent.
 
 By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Overrides:
getComponentBefore in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
LayoutFocusTraversalPolicy,getFirstComponent(Container aContainer),Component,Returns the first Component in the traversal cycle.,"

getFirstComponent
public Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Overrides:
getFirstComponent in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        first Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
LayoutFocusTraversalPolicy,getLastComponent(Container aContainer),Component,Returns the last Component in the traversal cycle.,"

getLastComponent
public Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Overrides:
getLastComponent in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        last Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
LayoutStyle,"getContainerGap(JComponent component, int position, Container parent)",abstract int,Returns the amount of space to place between the component and specified edge of its parent.,"

getContainerGap
public abstract int getContainerGap(JComponent component,
                                    int position,
                                    Container parent)
Returns the amount of space to place between the component and specified
 edge of its parent.

Parameters:
component - the JComponent being positioned
position - the position component is being placed
        relative to its parent; one of
        SwingConstants.NORTH,
        SwingConstants.SOUTH,
        SwingConstants.EAST or
        SwingConstants.WEST
parent - the parent of component; this may differ
        from the actual parent and may be null
Returns:
the amount of space to place between the component and specified
         edge
Throws:
IllegalArgumentException - if position is not
         one of SwingConstants.NORTH,
         SwingConstants.SOUTH,
         SwingConstants.EAST or
         SwingConstants.WEST


"
LayoutStyle,getInstance(),static LayoutStyle,Returns the shared instance of LayoutStyle.,"

getInstance
public static LayoutStyle getInstance()
Returns the shared instance of LayoutStyle.  If an instance
 has not been specified in setInstance, this will return
 the LayoutStyle from the current LookAndFeel.

Returns:
the shared instance of LayoutStyle
See Also:
LookAndFeel.getLayoutStyle()


"
LayoutStyle,"getPreferredGap(JComponent component1, JComponent component2, LayoutStyle.ComponentPlacement type, int position, Container parent)",abstract int,Returns the amount of space to use between two components.,"

getPreferredGap
public abstract int getPreferredGap(JComponent component1,
                                    JComponent component2,
                                    LayoutStyle.ComponentPlacement type,
                                    int position,
                                    Container parent)
Returns the amount of space to use between two components.
 The return value indicates the distance to place
 component2 relative to component1.
 For example, the following returns the amount of space to place
 between component2 and component1
 when component2 is placed vertically above
 component1:
 
   int gap = getPreferredGap(component1, component2,
                             ComponentPlacement.RELATED,
                             SwingConstants.NORTH, parent);
 
 The type parameter indicates the relation between
 the two components.  If the two components will be contained in
 the same parent and are showing similar logically related
 items, use RELATED.  If the two components will be
 contained in the same parent but show logically unrelated items
 use UNRELATED.  Some look and feels may not
 distinguish between the RELATED and
 UNRELATED types.
 
 The return value is not intended to take into account the
 current size and position of component2 or
 component1.  The return value may take into
 consideration various properties of the components.  For
 example, the space may vary based on font size, or the preferred
 size of the component.

Parameters:
component1 - the JComponent
component2 is being placed relative to
component2 - the JComponent being placed
position - the position component2 is being placed
        relative to component1; one of
        SwingConstants.NORTH,
        SwingConstants.SOUTH,
        SwingConstants.EAST or
        SwingConstants.WEST
type - how the two components are being placed
parent - the parent of component2; this may differ
        from the actual parent and it may be null
Returns:
the amount of space to place between the two components
Throws:
NullPointerException - if component1,
         component2 or type is
         null
IllegalArgumentException - if position is not
         one of SwingConstants.NORTH,
         SwingConstants.SOUTH,
         SwingConstants.EAST or
         SwingConstants.WEST
Since:
1.6
See Also:
LookAndFeel.getLayoutStyle()


"
LayoutStyle,setInstance(LayoutStyle style),static void,Sets the shared instance of LayoutStyle.,"

setInstance
public static void setInstance(LayoutStyle style)
Sets the shared instance of LayoutStyle.  Specifying
 null results in using the LayoutStyle from
 the current LookAndFeel.

Parameters:
style - the LayoutStyle, or null
See Also:
getInstance()


"
LookAndFeel,getDefaults(),UIDefaults,Returns the look and feel defaults.,"

getDefaults
public UIDefaults getDefaults()
Returns the look and feel defaults. While this method is public,
 it should only be invoked by the UIManager when the
 look and feel is set as the current look and feel and after
 initialize has been invoked.

Returns:
the look and feel defaults
See Also:
initialize(), 
uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
LookAndFeel,getDescription(),abstract String,"Return a one line description of this look and feel implementation, e.g.","

getDescription
public abstract String getDescription()
Return a one line description of this look and feel implementation,
 e.g. ""The CDE/Motif Look and Feel"".   This string is intended for
 the user, e.g. in the title of a window or in a ToolTip message.

Returns:
short description for the look and feel


"
LookAndFeel,"getDesktopPropertyValue(String systemPropertyName, Object fallbackValue)",static Object,Returns the value of the specified system desktop property by invoking Toolkit.getDefaultToolkit().getDesktopProperty().,"

getDesktopPropertyValue
public static Object getDesktopPropertyValue(String systemPropertyName,
                                             Object fallbackValue)
Returns the value of the specified system desktop property by
 invoking Toolkit.getDefaultToolkit().getDesktopProperty().
 If the value of the specified property is null,
 fallbackValue is returned.

Parameters:
systemPropertyName - the name of the system desktop property being queried
fallbackValue - the object to be returned as the value if the system value is null
Returns:
the current value of the desktop property
Since:
1.4
See Also:
Toolkit.getDesktopProperty(java.lang.String)


"
LookAndFeel,"getDisabledIcon(JComponent component, Icon icon)",Icon,Returns an Icon with a disabled appearance.,"

getDisabledIcon
public Icon getDisabledIcon(JComponent component,
                            Icon icon)
Returns an Icon with a disabled appearance.
 This method is used to generate a disabled Icon when
 one has not been specified.  For example, if you create a
 JButton and only specify an Icon via
 setIcon this method will be called to generate the
 disabled Icon. If null is passed as
 icon this method returns null.
 
 Some look and feels might not render the disabled Icon, in which
 case they will ignore this.

Parameters:
component - JComponent that will display the Icon,
         may be null
icon - Icon to generate the disabled icon from
Returns:
disabled Icon, or null if a suitable
         Icon can not be generated
Since:
1.5


"
LookAndFeel,"getDisabledSelectedIcon(JComponent component, Icon icon)",Icon,Returns an Icon for use by disabled components that are also selected.,"

getDisabledSelectedIcon
public Icon getDisabledSelectedIcon(JComponent component,
                                    Icon icon)
Returns an Icon for use by disabled
 components that are also selected. This method is used to generate an
 Icon for components that are in both the disabled and
 selected states but do not have a specific Icon for this
 state.  For example, if you create a JButton and only
 specify an Icon via setIcon this method
 will be called to generate the disabled and selected
 Icon. If null is passed as icon this
 methods returns null.
 
 Some look and feels might not render the disabled and selected
 Icon, in which case they will ignore this.

Parameters:
component - JComponent that will display the Icon,
        may be null
icon - Icon to generate disabled and selected icon from
Returns:
disabled and selected icon, or null if a suitable
         Icon can not be generated.
Since:
1.5


"
LookAndFeel,getID(),abstract String,Return a string that identifies this look and feel.,"

getID
public abstract String getID()
Return a string that identifies this look and feel.  This string
 will be used by applications/services that want to recognize
 well known look and feel implementations.  Presently
 the well known names are ""Motif"", ""Windows"", ""Mac"", ""Metal"".  Note
 that a LookAndFeel derived from a well known superclass
 that doesn't make any fundamental changes to the look or feel
 shouldn't override this method.

Returns:
identifier for the look and feel


"
LookAndFeel,getLayoutStyle(),LayoutStyle,Returns the LayoutStyle for this look and feel.,"

getLayoutStyle
public LayoutStyle getLayoutStyle()
Returns the LayoutStyle for this look
 and feel.  This never returns null.
 
 You generally don't use the LayoutStyle from
 the look and feel, instead use the LayoutStyle
 method getInstance.

Returns:
the LayoutStyle for this look and feel
Since:
1.6
See Also:
LayoutStyle.getInstance()


"
LookAndFeel,getName(),abstract String,"Return a short string that identifies this look and feel, e.g.","

getName
public abstract String getName()
Return a short string that identifies this look and feel, e.g.
 ""CDE/Motif"".  This string should be appropriate for a menu item.
 Distinct look and feels should have different names, e.g.
 a subclass of MotifLookAndFeel that changes the way a few components
 are rendered should be called ""CDE/Motif My Way""; something
 that would be useful to a user trying to select a L&F from a list
 of names.

Returns:
short identifier for the look and feel


"
LookAndFeel,getSupportsWindowDecorations(),boolean,Returns true if the LookAndFeel returned RootPaneUI instances support providing Window decorations in a JRootPane.,"

getSupportsWindowDecorations
public boolean getSupportsWindowDecorations()
Returns true if the LookAndFeel returned
 RootPaneUI instances support providing Window
 decorations in a JRootPane.
 
 The default implementation returns false, subclasses that
 support Window decorations should override this and return
 true.

Returns:
true if the RootPaneUI instances created by
         this look and feel support client side decorations
Since:
1.4
See Also:
JDialog.setDefaultLookAndFeelDecorated(boolean), 
JFrame.setDefaultLookAndFeelDecorated(boolean), 
JRootPane.setWindowDecorationStyle(int)


"
LookAndFeel,initialize(),void,Initializes the look and feel.,"

initialize
public void initialize()
Initializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when a
 look and feel is installed as the current look and feel. This
 method is invoked before the UIManager invokes
 getDefaults. This method is intended to perform any
 initialization for the look and feel. Subclasses
 should do any one-time setup they need here, rather than
 in a static initializer, because look and feel class objects
 may be loaded just to discover that isSupportedLookAndFeel()
 returns false.

See Also:
uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
LookAndFeel,"installBorder(JComponent c, String defaultBorderName)",static void,Convenience method for setting a component's border property with a value from the defaults.,"

installBorder
public static void installBorder(JComponent c,
                                 String defaultBorderName)
Convenience method for setting a component's border property with
 a value from the defaults. The border is only set if the border is
 null or an instance of UIResource.

Parameters:
c - component to set the border on
defaultBorderName - key specifying the border
Throws:
NullPointerException - as described in
         exceptions


"
LookAndFeel,"installColors(JComponent c, String defaultBgName, String defaultFgName)",static void,Convenience method for setting a component's foreground and background color properties with values from the defaults.,"

installColors
public static void installColors(JComponent c,
                                 String defaultBgName,
                                 String defaultFgName)
Convenience method for setting a component's foreground
 and background color properties with values from the
 defaults.  The properties are only set if the current
 value is either null or a UIResource.

Parameters:
c - component to set the colors on
defaultBgName - key for the background
defaultFgName - key for the foreground
Throws:
NullPointerException - as described in
         exceptions
See Also:
installColorsAndFont(javax.swing.JComponent, java.lang.String, java.lang.String, java.lang.String), 
UIManager.getColor(java.lang.Object)


"
LookAndFeel,"installColorsAndFont(JComponent c, String defaultBgName, String defaultFgName, String defaultFontName)",static void,"Convenience method for setting a component's foreground, background and font properties with values from the defaults.","

installColorsAndFont
public static void installColorsAndFont(JComponent c,
                                        String defaultBgName,
                                        String defaultFgName,
                                        String defaultFontName)
Convenience method for setting a component's foreground,
 background and font properties with values from the
 defaults.  The properties are only set if the current
 value is either null or a UIResource.

Parameters:
c - component set to the colors and font on
defaultBgName - key for the background
defaultFgName - key for the foreground
defaultFontName - key for the font
Throws:
NullPointerException - as described in
         exceptions
See Also:
installColors(javax.swing.JComponent, java.lang.String, java.lang.String), 
UIManager.getColor(java.lang.Object), 
UIManager.getFont(java.lang.Object)


"
LookAndFeel,"installProperty(JComponent c, String propertyName, Object propertyValue)",static void,Convenience method for installing a property with the specified name and value on a component if that property has not already been set by the developer.,"

installProperty
public static void installProperty(JComponent c,
                                   String propertyName,
                                   Object propertyValue)
Convenience method for installing a property with the specified name
 and value on a component if that property has not already been set
 by the developer.  This method is intended to be used by
 ui delegate instances that need to specify a default value for a
 property of primitive type (boolean, int, ..), but do not wish
 to override a value set by the client.  Since primitive property
 values cannot be wrapped with the UIResource marker, this method
 uses private state to determine whether the property has been set
 by the client.

Parameters:
c - target component to set the property on
propertyName - name of the property to set
propertyValue - value of the property
Throws:
IllegalArgumentException - if the specified property is not
         one which can be set using this method
ClassCastException - if the property value has not been set
         by the developer and the type does not match the property's type
NullPointerException - if c is null, or the
         named property has not been set by the developer and
         propertyValue is null
Since:
1.5


"
LookAndFeel,isNativeLookAndFeel(),abstract boolean,"If the underlying platform has a ""native"" look and feel, and this is an implementation of it, return true.","

isNativeLookAndFeel
public abstract boolean isNativeLookAndFeel()
If the underlying platform has a ""native"" look and feel, and
 this is an implementation of it, return true.  For
 example, when the underlying platform is Solaris running CDE
 a CDE/Motif look and feel implementation would return true.

Returns:
true if this look and feel represents the underlying
         platform look and feel


"
LookAndFeel,isSupportedLookAndFeel(),abstract boolean,Return true if the underlying platform supports and or permits this look and feel.,"

isSupportedLookAndFeel
public abstract boolean isSupportedLookAndFeel()
Return true if the underlying platform supports and or permits
 this look and feel.  This method returns false if the look
 and feel depends on special resources or legal agreements that
 aren't defined for the current platform.

Returns:
true if this is a supported look and feel
See Also:
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
LookAndFeel,"loadKeyBindings(InputMap retMap, Object[] keys)",static void,Populates an InputMap with the specified bindings.,"

loadKeyBindings
public static void loadKeyBindings(InputMap retMap,
                                   Object[] keys)
Populates an InputMap with the specified bindings.
 The bindings are supplied as a list of alternating
 keystroke-action key pairs. The keystroke is either
 an instance of KeyStroke, or a String
 that identifies the KeyStroke for the binding. Refer
 to KeyStroke.getKeyStroke(String) for the specific
 format. The action key part of the pair is the key
 registered in the InputMap for the KeyStroke.
 
 The following illustrates loading an InputMap with two
 key-action pairs:
 
   LookAndFeel.loadKeyBindings(inputMap, new Object[] {
     ""control X"", ""cut"",
     ""control V"", ""paste""
   });
 

 Supplying a null list of bindings (keys) does not
 change retMap in any way.
 
 Specifying a null action key results in
 removing the keystroke's entry from the InputMap.
 A null keystroke is ignored.

Parameters:
retMap - InputMap to add the key-action
               pairs to
keys - bindings to add to retMap
Throws:
NullPointerException - if keys is
         non-null, not empty, and retMap is
         null
Since:
1.3
See Also:
KeyStroke.getKeyStroke(String), 
InputMap


"
LookAndFeel,"makeComponentInputMap(JComponent c, Object[] keys)",static ComponentInputMap,Creates a ComponentInputMapUIResource from keys.,"

makeComponentInputMap
public static ComponentInputMap makeComponentInputMap(JComponent c,
                                                      Object[] keys)
Creates a ComponentInputMapUIResource from
 keys. This is a convenience method for creating a
 new ComponentInputMapUIResource, invoking loadKeyBindings(map, keys), and returning the ComponentInputMapUIResource.

Parameters:
c - component to create the ComponentInputMapUIResource
          with
keys - alternating pairs of keystroke-action key
        pairs as described in loadKeyBindings(javax.swing.InputMap, java.lang.Object[])
Returns:
newly created and populated InputMapUIResource
Throws:
IllegalArgumentException - if c is null
Since:
1.3
See Also:
loadKeyBindings(javax.swing.InputMap, java.lang.Object[]), 
ComponentInputMapUIResource


"
LookAndFeel,"makeIcon(Class<?> baseClass, String gifFile)",static Object,Creates and returns a UIDefault.LazyValue that loads an image.,"

makeIcon
public static Object makeIcon(Class<?> baseClass,
                              String gifFile)
Creates and returns a UIDefault.LazyValue that loads an
 image. The returned value is an implementation of UIDefaults.LazyValue. When createValue is invoked on
 the returned object, the image is loaded. If the image is non-null, it is then wrapped in an Icon that implements UIResource. The image is loaded using Class.getResourceAsStream(gifFile).
 
 This method does not check the arguments in any way. It is
 strongly recommended that non-null values are supplied else
 exceptions may occur when createValue is invoked on the
 returned object.

Parameters:
baseClass - Class used to load the resource
gifFile - path to the image to load
Returns:
a UIDefaults.LazyValue; when resolved the
         LazyValue loads the specified image
See Also:
UIDefaults.LazyValue, 
Icon, 
Class.getResourceAsStream(String)


"
LookAndFeel,makeInputMap(Object[] keys),static InputMap,Creates a InputMapUIResource from keys.,"

makeInputMap
public static InputMap makeInputMap(Object[] keys)
Creates a InputMapUIResource from keys. This is
 a convenience method for creating a new InputMapUIResource,
 invoking loadKeyBindings(map, keys), and returning the
 InputMapUIResource.

Parameters:
keys - alternating pairs of keystroke-action key
        pairs as described in loadKeyBindings(javax.swing.InputMap, java.lang.Object[])
Returns:
newly created and populated InputMapUIResource
Since:
1.3
See Also:
loadKeyBindings(javax.swing.InputMap, java.lang.Object[])


"
LookAndFeel,makeKeyBindings(Object[] keyBindingList),static JTextComponent.KeyBinding[],Convenience method for building an array of KeyBindings.,"

makeKeyBindings
public static JTextComponent.KeyBinding[] makeKeyBindings(Object[] keyBindingList)
Convenience method for building an array of KeyBindings. While this method is not deprecated, developers
 should instead use ActionMap and InputMap for
 supplying key bindings.
 
 This method returns an array of KeyBindings, one for each
 alternating key-action pair in keyBindingList.
 A key can either be a String in the format
 specified by the KeyStroke.getKeyStroke method, or
 a KeyStroke. The action part of the pair is a
 String that corresponds to the name of the Action.
 
 The following example illustrates creating a KeyBinding array
 from six alternating key-action pairs:
 
  JTextComponent.KeyBinding[] multilineBindings = makeKeyBindings( new Object[] {
          ""UP"", DefaultEditorKit.upAction,
        ""DOWN"", DefaultEditorKit.downAction,
     ""PAGE_UP"", DefaultEditorKit.pageUpAction,
   ""PAGE_DOWN"", DefaultEditorKit.pageDownAction,
       ""ENTER"", DefaultEditorKit.insertBreakAction,
         ""TAB"", DefaultEditorKit.insertTabAction
  });
 
 If keyBindingList's length is odd, the last element is
 ignored.
 
 Supplying a null value for either the key or
 action part of the key-action pair results in
 creating a KeyBinding with the corresponding value
 null. As other parts of Swing's expect non-null values
 in a KeyBinding, you should avoid supplying null as
 either the key or action part of the key-action
 pair.

Parameters:
keyBindingList - an array of key-action pairs
Returns:
an array of KeyBindings
Throws:
NullPointerException - if keyBindingList is null
ClassCastException - if the key part of the pair is
         not a KeyStroke or String, or the
         action part of the pair is not a String
See Also:
ActionMap, 
InputMap, 
KeyStroke.getKeyStroke(char)


"
LookAndFeel,provideErrorFeedback(Component component),void,"Invoked when the user attempts an invalid operation, such as pasting into an uneditable JTextField that has focus.","

provideErrorFeedback
public void provideErrorFeedback(Component component)
Invoked when the user attempts an invalid operation,
 such as pasting into an uneditable JTextField
 that has focus. The default implementation beeps. Subclasses
 that wish different behavior should override this and provide
 the additional feedback.

Parameters:
component - the Component the error occurred in,
                  may be null
                  indicating the error condition is not directly
                  associated with a Component
Since:
1.4


"
LookAndFeel,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
LookAndFeel,uninitialize(),void,Uninitializes the look and feel.,"

uninitialize
public void uninitialize()
Uninitializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when
 the look and feel is uninstalled. For example,
 UIManager.setLookAndFeel invokes this when the look and
 feel is changed.
 
 Subclasses may choose to free up some resources here.

See Also:
initialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
LookAndFeel,uninstallBorder(JComponent c),static void,Convenience method for uninstalling a border.,"

uninstallBorder
public static void uninstallBorder(JComponent c)
Convenience method for uninstalling a border. If the border of
 the component is a UIResource, it is set to null.

Parameters:
c - component to uninstall the border on
Throws:
NullPointerException - if c is null


"
MenuSelectionManager,addChangeListener(ChangeListener l),void,Adds a ChangeListener to the button.,"

addChangeListener
public void addChangeListener(ChangeListener l)
Adds a ChangeListener to the button.

Parameters:
l - the listener to add


"
MenuSelectionManager,clearSelectedPath(),void,Tell the menu selection to close and unselect all the menu components.,"

clearSelectedPath
public void clearSelectedPath()
Tell the menu selection to close and unselect all the menu components. Call this method
 when a choice has been made

"
MenuSelectionManager,"componentForPoint(Component source, Point sourcePoint)",Component,Returns the component in the currently selected path which contains sourcePoint.,"

componentForPoint
public Component componentForPoint(Component source,
                                   Point sourcePoint)
Returns the component in the currently selected path
 which contains sourcePoint.

Parameters:
source - The component in whose coordinate space sourcePoint
        is given
sourcePoint - The point which is being tested
Returns:
The component in the currently selected path which
         contains sourcePoint (relative to the source component's
         coordinate space.  If sourcePoint is not inside a component
         on the currently selected path, null is returned.


"
MenuSelectionManager,defaultManager(),static MenuSelectionManager,Returns the default menu selection manager.,"

defaultManager
public static MenuSelectionManager defaultManager()
Returns the default menu selection manager.

Returns:
a MenuSelectionManager object


"
MenuSelectionManager,fireStateChanged(),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireStateChanged
protected void fireStateChanged()
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is created lazily.

See Also:
EventListenerList


"
MenuSelectionManager,getChangeListeners(),ChangeListener[],Returns an array of all the ChangeListeners added to this MenuSelectionManager with addChangeListener().,"

getChangeListeners
public ChangeListener[] getChangeListeners()
Returns an array of all the ChangeListeners added
 to this MenuSelectionManager with addChangeListener().

Returns:
all of the ChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
MenuSelectionManager,getSelectedPath(),MenuElement[],Returns the path to the currently selected menu item,"

getSelectedPath
public MenuElement[] getSelectedPath()
Returns the path to the currently selected menu item

Returns:
an array of MenuElement objects representing the selected path


"
MenuSelectionManager,isComponentPartOfCurrentMenu(Component c),boolean,Return true if c is part of the currently used menu,"

isComponentPartOfCurrentMenu
public boolean isComponentPartOfCurrentMenu(Component c)
Return true if c is part of the currently used menu

"
MenuSelectionManager,processKeyEvent(KeyEvent e),void,"When a MenuElement receives an event from a KeyListener, it should never process the event directly.","

processKeyEvent
public void processKeyEvent(KeyEvent e)
When a MenuElement receives an event from a KeyListener, it should never process the event
 directly. Instead all MenuElements should call this method with the event.

Parameters:
e - a KeyEvent object


"
MenuSelectionManager,processMouseEvent(MouseEvent event),void,"When a MenuElement receives an event from a MouseListener, it should never process the event directly.","

processMouseEvent
public void processMouseEvent(MouseEvent event)
When a MenuElement receives an event from a MouseListener, it should never process the event
 directly. Instead all MenuElements should call this method with the event.

Parameters:
event - a MouseEvent object


"
MenuSelectionManager,removeChangeListener(ChangeListener l),void,Removes a ChangeListener from the button.,"

removeChangeListener
public void removeChangeListener(ChangeListener l)
Removes a ChangeListener from the button.

Parameters:
l - the listener to remove


"
MenuSelectionManager,setSelectedPath(MenuElement[] path),void,Changes the selection in the menu hierarchy.,"

setSelectedPath
public void setSelectedPath(MenuElement[] path)
Changes the selection in the menu hierarchy.  The elements
 in the array are sorted in order from the root menu
 element to the currently selected menu element.
 
 Note that this method is public but is used by the look and
 feel engine and should not be called by client applications.

Parameters:
path - an array of MenuElement objects specifying
        the selected path


"
OverlayLayout,"addLayoutComponent(Component comp, Object constraints)",void,"Adds the specified component to the layout, using the specified constraint object.","

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Adds the specified component to the layout, using the specified
 constraint object. Used by this class to know when to invalidate
 layout.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component to be added
constraints - where/how the component is added to the layout.


"
OverlayLayout,"addLayoutComponent(String name, Component comp)",void,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component comp)
Adds the specified component to the layout. Used by
 this class to know when to invalidate layout.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
comp - the the component to be added


"
OverlayLayout,getLayoutAlignmentX(Container target),float,Returns the alignment along the x axis for the container.,"

getLayoutAlignmentX
public float getLayoutAlignmentX(Container target)
Returns the alignment along the x axis for the container.

Specified by:
getLayoutAlignmentX in interface LayoutManager2
Parameters:
target - the container
Returns:
the alignment >= 0.0f && <= 1.0f


"
OverlayLayout,getLayoutAlignmentY(Container target),float,Returns the alignment along the y axis for the container.,"

getLayoutAlignmentY
public float getLayoutAlignmentY(Container target)
Returns the alignment along the y axis for the container.

Specified by:
getLayoutAlignmentY in interface LayoutManager2
Parameters:
target - the container
Returns:
the alignment >= 0.0f && <= 1.0f


"
OverlayLayout,getTarget(),Container,Returns the container that uses this layout manager.,"

getTarget
public final Container getTarget()
Returns the container that uses this layout manager.

Returns:
the container that uses this layout manager
Since:
1.6


"
OverlayLayout,invalidateLayout(Container target),void,"Indicates a child has changed its layout related information, which causes any cached calculations to be flushed.","

invalidateLayout
public void invalidateLayout(Container target)
Indicates a child has changed its layout related information,
 which causes any cached calculations to be flushed.

Specified by:
invalidateLayout in interface LayoutManager2
Parameters:
target - the container


"
OverlayLayout,layoutContainer(Container target),void,Called by the AWT when the specified container needs to be laid out.,"

layoutContainer
public void layoutContainer(Container target)
Called by the AWT when the specified container needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
target - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      constructor


"
OverlayLayout,maximumLayoutSize(Container target),Dimension,Returns the maximum dimensions needed to lay out the components contained in the specified target container.,"

maximumLayoutSize
public Dimension maximumLayoutSize(Container target)
Returns the maximum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the
 layout if it has been invalidated, and factors in the inset setting
 returned by getInset.

Specified by:
maximumLayoutSize in interface LayoutManager2
Parameters:
target - the component that needs to be laid out
Returns:
a Dimension object containing the maximum
         dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
OverlayLayout,minimumLayoutSize(Container target),Dimension,Returns the minimum dimensions needed to lay out the components contained in the specified target container.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the layout
 if it has been invalidated, and factors in the current inset setting.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the minimum dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
OverlayLayout,preferredLayoutSize(Container target),Dimension,Returns the preferred dimensions for this layout given the components in the specified target container.,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Returns the preferred dimensions for this layout given the components
 in the specified target container.  Recomputes the layout if it
 has been invalidated.  Factors in the current inset setting returned
 by getInsets().

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the preferred dimensions
See Also:
minimumLayoutSize(java.awt.Container)


"
OverlayLayout,removeLayoutComponent(Component comp),void,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component comp)
Removes the specified component from the layout. Used by
 this class to know when to invalidate layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
comp - the component to remove


"
Popup,hide(),void,Hides and disposes of the Popup.,"

hide
public void hide()
Hides and disposes of the Popup. Once a Popup
 has been disposed you should no longer invoke methods on it. A
 disposed Popup may be reclaimed and later used
 based on the PopupFactory. As such, if you invoke methods
 on a disposed Popup, indeterminate
 behavior will result.

"
Popup,show(),void,Makes the Popup visible.,"

show
public void show()
Makes the Popup visible. If the Popup is
 currently visible, this has no effect.

"
PopupFactory,"getPopup(Component owner, Component contents, int x, int y)",Popup,Creates a Popup for the Component owner containing the Component contents.,"

getPopup
public Popup getPopup(Component owner,
                      Component contents,
                      int x,
                      int y)
               throws IllegalArgumentException
Creates a Popup for the Component owner
 containing the Component contents. owner
 is used to determine which Window the new
 Popup will parent the Component the
 Popup creates to. A null owner implies there
 is no valid parent. x and
 y specify the preferred initial location to place
 the Popup at. Based on screen size, or other paramaters,
 the Popup may not display at x and
 y.

Parameters:
owner - Component mouse coordinates are relative to, may be null
contents - Contents of the Popup
x - Initial x screen coordinate
y - Initial y screen coordinate
Returns:
Popup containing Contents
Throws:
IllegalArgumentException - if contents is null


"
PopupFactory,getSharedInstance(),static PopupFactory,Returns the shared PopupFactory which can be used to obtain Popups.,"

getSharedInstance
public static PopupFactory getSharedInstance()
Returns the shared PopupFactory which can be used
 to obtain Popups.

Returns:
Shared PopupFactory


"
PopupFactory,setSharedInstance(PopupFactory factory),static void,Sets the PopupFactory that will be used to obtain Popups.,"

setSharedInstance
public static void setSharedInstance(PopupFactory factory)
Sets the PopupFactory that will be used to obtain
 Popups.
 This will throw an IllegalArgumentException if
 factory is null.

Parameters:
factory - Shared PopupFactory
Throws:
IllegalArgumentException - if factory is null
See Also:
getPopup(java.awt.Component, java.awt.Component, int, int)


"
ProgressMonitor,close(),void,Indicate that the operation is complete.,"

close
public void close()
Indicate that the operation is complete.  This happens automatically
 when the value set by setProgress is >= max, but it may be called
 earlier if the operation ends early.

"
ProgressMonitor,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext for the ProgressMonitor,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext for the
 ProgressMonitor

Specified by:
getAccessibleContext in interface Accessible
Returns:
the AccessibleContext for the
 ProgressMonitor
Since:
1.5


"
ProgressMonitor,getMaximum(),int,Returns the maximum value -- the higher end of the progress value.,"

getMaximum
public int getMaximum()
Returns the maximum value -- the higher end of the progress value.

Returns:
an int representing the maximum value
See Also:
setMaximum(int)


"
ProgressMonitor,getMillisToDecideToPopup(),int,Returns the amount of time this object waits before deciding whether or not to popup a progress monitor.,"

getMillisToDecideToPopup
public int getMillisToDecideToPopup()
Returns the amount of time this object waits before deciding whether
 or not to popup a progress monitor.

See Also:
setMillisToDecideToPopup(int)


"
ProgressMonitor,getMillisToPopup(),int,Returns the amount of time it will take for the popup to appear.,"

getMillisToPopup
public int getMillisToPopup()
Returns the amount of time it will take for the popup to appear.

See Also:
setMillisToPopup(int)


"
ProgressMonitor,getMinimum(),int,Returns the minimum value -- the lower end of the progress value.,"

getMinimum
public int getMinimum()
Returns the minimum value -- the lower end of the progress value.

Returns:
an int representing the minimum value
See Also:
setMinimum(int)


"
ProgressMonitor,getNote(),String,Specifies the additional note that is displayed along with the progress message.,"

getNote
public String getNote()
Specifies the additional note that is displayed along with the
 progress message.

Returns:
a String specifying the note to display
See Also:
setNote(java.lang.String)


"
ProgressMonitor,isCanceled(),boolean,Returns true if the user hits the Cancel button in the progress dialog.,"

isCanceled
public boolean isCanceled()
Returns true if the user hits the Cancel button in the progress dialog.

"
ProgressMonitor,setMaximum(int m),void,Specifies the maximum value.,"

setMaximum
public void setMaximum(int m)
Specifies the maximum value.

Parameters:
m - an int specifying the maximum value
See Also:
getMaximum()


"
ProgressMonitor,setMillisToDecideToPopup(int millisToDecideToPopup),void,Specifies the amount of time to wait before deciding whether or not to popup a progress monitor.,"

setMillisToDecideToPopup
public void setMillisToDecideToPopup(int millisToDecideToPopup)
Specifies the amount of time to wait before deciding whether or
 not to popup a progress monitor.

Parameters:
millisToDecideToPopup - an int specifying the time to wait,
        in milliseconds
See Also:
getMillisToDecideToPopup()


"
ProgressMonitor,setMillisToPopup(int millisToPopup),void,Specifies the amount of time it will take for the popup to appear.,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
ProgressMonitor,setMinimum(int m),void,Specifies the minimum value.,"

setMinimum
public void setMinimum(int m)
Specifies the minimum value.

Parameters:
m - an int specifying the minimum value
See Also:
getMinimum()


"
ProgressMonitor,setNote(String note),void,Specifies the additional note that is displayed along with the progress message.,"

setNote
public void setNote(String note)
Specifies the additional note that is displayed along with the
 progress message. Used, for example, to show which file the
 is currently being copied during a multiple-file copy.

Parameters:
note - a String specifying the note to display
See Also:
getNote()


"
ProgressMonitor,setProgress(int nv),void,Indicate the progress of the operation being monitored.,"

setProgress
public void setProgress(int nv)
Indicate the progress of the operation being monitored.
 If the specified value is >= the maximum, the progress
 monitor is closed.

Parameters:
nv - an int specifying the current value, between the
        maximum and minimum specified for this component
See Also:
setMinimum(int), 
setMaximum(int), 
close()


"
ProgressMonitorInputStream,close(),void,Overrides FilterInputStream.close to close the progress monitor as well as the stream.,"

close
public void close()
           throws IOException
Overrides FilterInputStream.close
 to close the progress monitor as well as the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
ProgressMonitorInputStream,getProgressMonitor(),ProgressMonitor,Get the ProgressMonitor object being used by this stream.,"

getProgressMonitor
public ProgressMonitor getProgressMonitor()
Get the ProgressMonitor object being used by this stream. Normally
 this isn't needed unless you want to do something like change the
 descriptive text partway through reading the file.

Returns:
the ProgressMonitor object used by this object


"
ProgressMonitorInputStream,read(),int,Overrides FilterInputStream.read to update the progress monitor after the read.,"

read
public int read()
         throws IOException
Overrides FilterInputStream.read
 to update the progress monitor after the read.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
ProgressMonitorInputStream,read(byte[] b),int,Overrides FilterInputStream.read to update the progress monitor after the read.,"

read
public int read(byte[] b)
         throws IOException
Overrides FilterInputStream.read
 to update the progress monitor after the read.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.read(byte[], int, int)


"
ProgressMonitorInputStream,"read(byte[] b, int off, int len)",int,Overrides FilterInputStream.read to update the progress monitor after the read.,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Overrides FilterInputStream.read
 to update the progress monitor after the read.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
ProgressMonitorInputStream,reset(),void,Overrides FilterInputStream.reset to reset the progress monitor as well as the stream.,"

reset
public void reset()
           throws IOException
Overrides FilterInputStream.reset
 to reset the progress monitor as well as the stream.

Overrides:
reset in class FilterInputStream
Throws:
IOException - if the stream has not been marked or if the
               mark has been invalidated.
See Also:
FilterInputStream.in, 
FilterInputStream.mark(int)


"
ProgressMonitorInputStream,skip(long n),long,Overrides FilterInputStream.skip to update the progress monitor after the skip.,"

skip
public long skip(long n)
          throws IOException
Overrides FilterInputStream.skip
 to update the progress monitor after the skip.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
RepaintManager,"addDirtyRegion(Applet applet, int x, int y, int w, int h)",void,Adds applet to the list of Components that need to be repainted.,"

addDirtyRegion
public void addDirtyRegion(Applet applet,
                           int x,
                           int y,
                           int w,
                           int h)
Adds applet to the list of Components that
 need to be repainted.

Parameters:
applet - Applet to repaint, null results in nothing happening.
x - X coordinate of the region to repaint
y - Y coordinate of the region to repaint
w - Width of the region to repaint
h - Height of the region to repaint
Since:
1.6
See Also:
JApplet.repaint(long, int, int, int, int)


"
RepaintManager,"addDirtyRegion(JComponent c, int x, int y, int w, int h)",void,Add a component in the list of components that should be refreshed.,"

addDirtyRegion
public void addDirtyRegion(JComponent c,
                           int x,
                           int y,
                           int w,
                           int h)
Add a component in the list of components that should be refreshed.
 If c already has a dirty region, the rectangle (x,y,w,h)
 will be unioned with the region that should be redrawn.

Parameters:
c - Component to repaint, null results in nothing happening.
x - X coordinate of the region to repaint
y - Y coordinate of the region to repaint
w - Width of the region to repaint
h - Height of the region to repaint
See Also:
JComponent.repaint(long, int, int, int, int)


"
RepaintManager,"addDirtyRegion(Window window, int x, int y, int w, int h)",void,Adds window to the list of Components that need to be repainted.,"

addDirtyRegion
public void addDirtyRegion(Window window,
                           int x,
                           int y,
                           int w,
                           int h)
Adds window to the list of Components that
 need to be repainted.

Parameters:
window - Window to repaint, null results in nothing happening.
x - X coordinate of the region to repaint
y - Y coordinate of the region to repaint
w - Width of the region to repaint
h - Height of the region to repaint
Since:
1.6
See Also:
JFrame.repaint(long, int, int, int, int), 
JWindow.repaint(long, int, int, int, int), 
JDialog.repaint(long, int, int, int, int)


"
RepaintManager,addInvalidComponent(JComponent invalidComponent),void,Mark the component as in need of layout and queue a runnable for the event dispatching thread that will validate the components first isValidateRoot() ancestor.,"

addInvalidComponent
public void addInvalidComponent(JComponent invalidComponent)
Mark the component as in need of layout and queue a runnable
 for the event dispatching thread that will validate the components
 first isValidateRoot() ancestor.

See Also:
JComponent.isValidateRoot(), 
removeInvalidComponent(javax.swing.JComponent)


"
RepaintManager,currentManager(Component c),static RepaintManager,Return the RepaintManager for the calling thread given a Component.,"

currentManager
public static RepaintManager currentManager(Component c)
Return the RepaintManager for the calling thread given a Component.

Parameters:
c - a Component -- unused in the default implementation, but could
          be used by an overridden version to return a different RepaintManager
          depending on the Component
Returns:
the RepaintManager object


"
RepaintManager,currentManager(JComponent c),static RepaintManager,Return the RepaintManager for the calling thread given a JComponent.,"

currentManager
public static RepaintManager currentManager(JComponent c)
Return the RepaintManager for the calling thread given a JComponent.
 
 Note: This method exists for backward binary compatibility with earlier
 versions of the Swing library. It simply returns the result returned by
 currentManager(Component).

Parameters:
c - a JComponent -- unused
Returns:
the RepaintManager object


"
RepaintManager,getDirtyRegion(JComponent aComponent),Rectangle,Return the current dirty region for a component.,"

getDirtyRegion
public Rectangle getDirtyRegion(JComponent aComponent)
Return the current dirty region for a component.
  Return an empty rectangle if the component is not
  dirty.

"
RepaintManager,getDoubleBufferMaximumSize(),Dimension,Returns the maximum double buffer size.,"

getDoubleBufferMaximumSize
public Dimension getDoubleBufferMaximumSize()
Returns the maximum double buffer size.

Returns:
a Dimension object representing the maximum size


"
RepaintManager,"getOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)",Image,Return the offscreen buffer that should be used as a double buffer with the component c.,"

getOffscreenBuffer
public Image getOffscreenBuffer(Component c,
                                int proposedWidth,
                                int proposedHeight)
Return the offscreen buffer that should be used as a double buffer with
 the component c.
 By default there is a double buffer per RepaintManager.
 The buffer might be smaller than (proposedWidth,proposedHeight)
 This happens when the maximum double buffer size as been set for the receiving
 repaint manager.

"
RepaintManager,"getVolatileOffscreenBuffer(Component c, int proposedWidth, int proposedHeight)",Image,Return a volatile offscreen buffer that should be used as a double buffer with the specified component c.,"

getVolatileOffscreenBuffer
public Image getVolatileOffscreenBuffer(Component c,
                                        int proposedWidth,
                                        int proposedHeight)
Return a volatile offscreen buffer that should be used as a
 double buffer with the specified component c.
 The image returned will be an instance of VolatileImage, or null
 if a VolatileImage object could not be instantiated.
 This buffer might be smaller than (proposedWidth,proposedHeight).
 This happens when the maximum double buffer size has been set for this
 repaint manager.

Since:
1.4
See Also:
VolatileImage


"
RepaintManager,isCompletelyDirty(JComponent aComponent),boolean,Convenience method that returns true if aComponent will be completely painted during the next paintDirtyRegions().,"

isCompletelyDirty
public boolean isCompletelyDirty(JComponent aComponent)
Convenience method that returns true if aComponent will be completely
 painted during the next paintDirtyRegions(). If computing dirty regions is
 expensive for your component, use this method and avoid computing dirty region
 if it return true.

"
RepaintManager,isDoubleBufferingEnabled(),boolean,Returns true if this RepaintManager is double buffered.,"

isDoubleBufferingEnabled
public boolean isDoubleBufferingEnabled()
Returns true if this RepaintManager is double buffered.
 The default value for this property may vary from platform
 to platform.  On platforms where native double buffering
 is supported in the AWT, the default value will be false
 to avoid unnecessary buffering in Swing.
 On platforms where native double buffering is not supported,
 the default value will be true.

Returns:
true if this object is double buffered


"
RepaintManager,markCompletelyClean(JComponent aComponent),void,Mark a component completely clean.,"

markCompletelyClean
public void markCompletelyClean(JComponent aComponent)
Mark a component completely clean. aComponent will not
 get painted during the next paintDirtyRegions() call.

"
RepaintManager,markCompletelyDirty(JComponent aComponent),void,Mark a component completely dirty.,"

markCompletelyDirty
public void markCompletelyDirty(JComponent aComponent)
Mark a component completely dirty. aComponent will be
 completely painted during the next paintDirtyRegions() call.

"
RepaintManager,paintDirtyRegions(),void,Paint all of the components that have been marked dirty.,"

paintDirtyRegions
public void paintDirtyRegions()
Paint all of the components that have been marked dirty.

See Also:
addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
RepaintManager,removeInvalidComponent(JComponent component),void,Remove a component from the list of invalid components.,"

removeInvalidComponent
public void removeInvalidComponent(JComponent component)
Remove a component from the list of invalid components.

See Also:
addInvalidComponent(javax.swing.JComponent)


"
RepaintManager,setCurrentManager(RepaintManager aRepaintManager),static void,Set the RepaintManager that should be used for the calling thread.,"

setCurrentManager
public static void setCurrentManager(RepaintManager aRepaintManager)
Set the RepaintManager that should be used for the calling
 thread. aRepaintManager will become the current RepaintManager
 for the calling thread's thread group.

Parameters:
aRepaintManager - the RepaintManager object to use


"
RepaintManager,setDoubleBufferingEnabled(boolean aFlag),void,Enables or disables double buffering in this RepaintManager.,"

setDoubleBufferingEnabled
public void setDoubleBufferingEnabled(boolean aFlag)
Enables or disables double buffering in this RepaintManager.
 CAUTION: The default value for this property is set for optimal
 paint performance on the given platform and it is not recommended
 that programs modify this property directly.

Parameters:
aFlag - true to activate double buffering
See Also:
isDoubleBufferingEnabled()


"
RepaintManager,setDoubleBufferMaximumSize(Dimension d),void,Set the maximum double buffer size.,"

setDoubleBufferMaximumSize
public void setDoubleBufferMaximumSize(Dimension d)
Set the maximum double buffer size.

"
RepaintManager,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
RepaintManager,validateInvalidComponents(),void,Validate all of the components that have been marked invalid.,"

validateInvalidComponents
public void validateInvalidComponents()
Validate all of the components that have been marked invalid.

See Also:
addInvalidComponent(javax.swing.JComponent)


"
RowFilter,"andFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if all of the supplied filters include the entry.,"

andFilter
public static <M,I> RowFilter<M,I> andFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)
Returns a RowFilter that includes entries if all
 of the supplied filters include the entry.
 
 The following example creates a RowFilter that will
 include any entries containing the string ""foo"" and the string
 ""bar"":
 
   List<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>(2);
   filters.add(RowFilter.regexFilter(""foo""));
   filters.add(RowFilter.regexFilter(""bar""));
   RowFilter<Object,Object> fooBarFilter = RowFilter.andFilter(filters);
 

Parameters:
filters - the RowFilters to test
Returns:
a RowFilter implementing the specified criteria
Throws:
IllegalArgumentException - if any of the filters
         are null
NullPointerException - if filters is null
See Also:
Arrays.asList(T...)


"
RowFilter,"dateFilter(RowFilter.ComparisonType type, Date date, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries that have at least one Date value meeting the specified criteria.,"

dateFilter
public static <M,I> RowFilter<M,I> dateFilter(RowFilter.ComparisonType type,
                                              Date date,
                                              int... indices)
Returns a RowFilter that includes entries that
 have at least one Date value meeting the specified
 criteria.  For example, the following RowFilter includes
 only entries with at least one date value after the current date:
 
   RowFilter.dateFilter(ComparisonType.AFTER, new Date());
 

Parameters:
type - the type of comparison to perform
date - the date to compare against
indices - the indices of the values to check.  If not supplied all
               values are evaluated
Returns:
a RowFilter implementing the specified criteria
Throws:
NullPointerException - if date is
          null
IllegalArgumentException - if any of the indices
         are < 0 or type is
         null
See Also:
Calendar, 
Date


"
RowFilter,"include(RowFilter.Entry<? extends M,? extends I> entry)",abstract boolean,Returns true if the specified entry should be shown; returns false if the entry should be hidden.,"

include
public abstract boolean include(RowFilter.Entry<? extends M,? extends I> entry)
Returns true if the specified entry should be shown;
 returns false if the entry should be hidden.
 
 The entry argument is valid only for the duration of
 the invocation.  Using entry after the call returns
 results in undefined behavior.

Parameters:
entry - a non-null object that wraps the underlying
              object from the model
Returns:
true if the entry should be shown


"
RowFilter,"notFilter(RowFilter<M,I> filter)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if the supplied filter does not include the entry.,"

notFilter
public static <M,I> RowFilter<M,I> notFilter(RowFilter<M,I> filter)
Returns a RowFilter that includes entries if the
 supplied filter does not include the entry.

Parameters:
filter - the RowFilter to negate
Returns:
a RowFilter implementing the specified criteria
Throws:
IllegalArgumentException - if filter is
         null


"
RowFilter,"numberFilter(RowFilter.ComparisonType type, Number number, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries that have at least one Number value meeting the specified criteria.,"

numberFilter
public static <M,I> RowFilter<M,I> numberFilter(RowFilter.ComparisonType type,
                                                Number number,
                                                int... indices)
Returns a RowFilter that includes entries that
 have at least one Number value meeting the
 specified criteria.  For example, the following
 filter will only include entries with at
 least one number value equal to 10:
 
   RowFilter.numberFilter(ComparisonType.EQUAL, 10);
 

Parameters:
type - the type of comparison to perform
indices - the indices of the values to check.  If not supplied all
               values are evaluated
Returns:
a RowFilter implementing the specified criteria
Throws:
IllegalArgumentException - if any of the indices
         are < 0, type is null
         or number is null


"
RowFilter,"orFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)","static <M,I> RowFilter<M,I>",Returns a RowFilter that includes entries if any of the supplied filters includes the entry.,"

orFilter
public static <M,I> RowFilter<M,I> orFilter(Iterable<? extends RowFilter<? super M,? super I>> filters)
Returns a RowFilter that includes entries if any
 of the supplied filters includes the entry.
 
 The following example creates a RowFilter that will
 include any entries containing the string ""foo"" or the string
 ""bar"":
 
   List<RowFilter<Object,Object>> filters = new ArrayList<RowFilter<Object,Object>>(2);
   filters.add(RowFilter.regexFilter(""foo""));
   filters.add(RowFilter.regexFilter(""bar""));
   RowFilter<Object,Object> fooBarFilter = RowFilter.orFilter(filters);
 

Parameters:
filters - the RowFilters to test
Returns:
a RowFilter implementing the specified criteria
Throws:
IllegalArgumentException - if any of the filters
         are null
NullPointerException - if filters is null
See Also:
Arrays.asList(T...)


"
RowFilter,"regexFilter(String regex, int... indices)","static <M,I> RowFilter<M,I>",Returns a RowFilter that uses a regular expression to determine which entries to include.,"

regexFilter
public static <M,I> RowFilter<M,I> regexFilter(String regex,
                                               int... indices)
Returns a RowFilter that uses a regular
 expression to determine which entries to include.  Only entries
 with at least one matching value are included.  For
 example, the following creates a RowFilter that
 includes entries with at least one value starting with
 ""a"":
 
   RowFilter.regexFilter(""^a"");
 

 The returned filter uses Matcher.find()
 to test for inclusion.  To test for exact matches use the
 characters '^' and '$' to match the beginning and end of the
 string respectively.  For example, ""^foo$"" includes only rows whose
 string is exactly ""foo"" and not, for example, ""food"".  See
 Pattern for a complete description of
 the supported regular-expression constructs.

Parameters:
regex - the regular expression to filter on
indices - the indices of the values to check.  If not supplied all
               values are evaluated
Returns:
a RowFilter implementing the specified criteria
Throws:
NullPointerException - if regex is
         null
IllegalArgumentException - if any of the indices
         are < 0
PatternSyntaxException - if regex is
         not a valid regular expression.
See Also:
Pattern


"
RowFilter.Entry,getIdentifier(),abstract I,Returns the identifer (in the model) of the entry.,"

getIdentifier
public abstract I getIdentifier()
Returns the identifer (in the model) of the entry.
 For a table this corresponds to the index of the row in the model,
 expressed as an Integer.

Returns:
a model-based (not view-based) identifier for
         this entry


"
RowFilter.Entry,getModel(),abstract M,Returns the underlying model.,"

getModel
public abstract M getModel()
Returns the underlying model.

Returns:
the model containing the data that this entry represents


"
RowFilter.Entry,getStringValue(int index),String,Returns the string value at the specified index.,"

getStringValue
public String getStringValue(int index)
Returns the string value at the specified index.  If
 filtering is being done based on String values
 this method is preferred to that of getValue
 as getValue(index).toString() may return a
 different result than getStringValue(index).
 
 This implementation calls getValue(index).toString()
 after checking for null.  Subclasses that provide
 different string conversion should override this method if
 necessary.

Parameters:
index - the index of the value to get
Returns:
non-null string at the specified index
Throws:
IndexOutOfBoundsException - if index < 0 ||
         >= getValueCount


"
RowFilter.Entry,getValue(int index),abstract Object,Returns the value at the specified index.,"

getValue
public abstract Object getValue(int index)
Returns the value at the specified index.  This may return
 null.  When used with a table, index
 corresponds to the column number in the model.

Parameters:
index - the index of the value to get
Returns:
value at the specified index
Throws:
IndexOutOfBoundsException - if index < 0 or
         >= getValueCount


"
RowFilter.Entry,getValueCount(),abstract int,Returns the number of values in the entry.,"

getValueCount
public abstract int getValueCount()
Returns the number of values in the entry.  For
 example, when used with a table this corresponds to the
 number of columns.

Returns:
number of values in the object being filtered


"
RowSorter,addRowSorterListener(RowSorterListener l),void,Adds a RowSorterListener to receive notification about this RowSorter.,"

addRowSorterListener
public void addRowSorterListener(RowSorterListener l)
Adds a RowSorterListener to receive notification
 about this RowSorter.  If the same
 listener is added more than once it will receive multiple
 notifications.  If l is null nothing
 is done.

Parameters:
l - the RowSorterListener


"
RowSorter,allRowsChanged(),abstract void,Invoked when the contents of the underlying model have completely changed.,"

allRowsChanged
public abstract void allRowsChanged()
Invoked when the contents of the underlying model have
 completely changed. The structure of the table is the same,
 only the contents have changed. This is typically sent when it
 is too expensive to characterize the change in terms of the
 other methods.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

"
RowSorter,convertRowIndexToModel(int index),abstract int,Returns the location of index in terms of the underlying model.,"

convertRowIndexToModel
public abstract int convertRowIndexToModel(int index)
Returns the location of index in terms of the
 underlying model.  That is, for the row index in
 the coordinates of the view this returns the row index in terms
 of the underlying model.

Parameters:
index - the row index in terms of the underlying view
Returns:
row index in terms of the view
Throws:
IndexOutOfBoundsException - if index is outside the
         range of the view


"
RowSorter,convertRowIndexToView(int index),abstract int,Returns the location of index in terms of the view.,"

convertRowIndexToView
public abstract int convertRowIndexToView(int index)
Returns the location of index in terms of the
 view.  That is, for the row index in the
 coordinates of the underlying model this returns the row index
 in terms of the view.

Parameters:
index - the row index in terms of the underlying model
Returns:
row index in terms of the view, or -1 if index has been
         filtered out of the view
Throws:
IndexOutOfBoundsException - if index is outside
         the range of the model


"
RowSorter,fireRowSorterChanged(int[] lastRowIndexToModel),protected void,Notifies listener that the mapping has changed.,"

fireRowSorterChanged
protected void fireRowSorterChanged(int[] lastRowIndexToModel)
Notifies listener that the mapping has changed.

Parameters:
lastRowIndexToModel - the mapping from model indices to
        view indices prior to the sort, may be null


"
RowSorter,fireSortOrderChanged(),protected void,Notifies listener that the sort order has changed.,"

fireSortOrderChanged
protected void fireSortOrderChanged()
Notifies listener that the sort order has changed.

"
RowSorter,getModel(),abstract M,Returns the underlying model.,"

getModel
public abstract M getModel()
Returns the underlying model.

Returns:
the underlying model


"
RowSorter,getModelRowCount(),abstract int,Returns the number of rows in the underlying model.,"

getModelRowCount
public abstract int getModelRowCount()
Returns the number of rows in the underlying model.

Returns:
number of rows in the underlying model
See Also:
getViewRowCount()


"
RowSorter,getSortKeys(),abstract List<? extends RowSorter.SortKey>,Returns the current sort keys.,"

getSortKeys
public abstract List<? extends RowSorter.SortKey> getSortKeys()
Returns the current sort keys.  This must return a non-null List and may return an unmodifiable List. If
 you need to change the sort keys, make a copy of the returned
 List, mutate the copy and invoke setSortKeys
 with the new list.

Returns:
the current sort order


"
RowSorter,getViewRowCount(),abstract int,Returns the number of rows in the view.,"

getViewRowCount
public abstract int getViewRowCount()
Returns the number of rows in the view.  If the contents have
 been filtered this might differ from the row count of the
 underlying model.

Returns:
number of rows in the view
See Also:
getModelRowCount()


"
RowSorter,modelStructureChanged(),abstract void,Invoked when the underlying model structure has completely changed.,"

modelStructureChanged
public abstract void modelStructureChanged()
Invoked when the underlying model structure has completely
 changed.  For example, if the number of columns in a
 TableModel changed, this method would be invoked.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

"
RowSorter,removeRowSorterListener(RowSorterListener l),void,Removes a RowSorterListener.,"

removeRowSorterListener
public void removeRowSorterListener(RowSorterListener l)
Removes a RowSorterListener.  If
 l is null nothing is done.

Parameters:
l - the RowSorterListener


"
RowSorter,"rowsDeleted(int firstRow, int endRow)",abstract void,Invoked when rows have been deleted from the underlying model in the specified range (inclusive).,"

rowsDeleted
public abstract void rowsDeleted(int firstRow,
                                 int endRow)
Invoked when rows have been deleted from the underlying model
 in the specified range (inclusive).
 
 The arguments give the indices of the effected range and
 are in terms of the model before the change.
 For example, if you have a 5-row model and delete 3 items from the end
 of the model the indices are 2, 4.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Parameters:
firstRow - the first row
endRow - the last row
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the model before the change, or
         firstRow > endRow


"
RowSorter,"rowsInserted(int firstRow, int endRow)",abstract void,Invoked when rows have been inserted into the underlying model in the specified range (inclusive).,"

rowsInserted
public abstract void rowsInserted(int firstRow,
                                  int endRow)
Invoked when rows have been inserted into the underlying model
 in the specified range (inclusive).
 
 The arguments give the indices of the effected range.
 The first argument is in terms of the model before the change, and
 must be less than or equal to the size of the model before the change.
 The second argument is in terms of the model after the change and must
 be less than the size of the model after the change. For example,
 if you have a 5-row model and add 3 items to the end of the model
 the indices are 5, 7.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Parameters:
firstRow - the first row
endRow - the last row
Throws:
IndexOutOfBoundsException - if either argument is invalid, or
         firstRow > endRow


"
RowSorter,"rowsUpdated(int firstRow, int endRow)",abstract void,Invoked when rows have been changed in the underlying model between the specified range (inclusive).,"

rowsUpdated
public abstract void rowsUpdated(int firstRow,
                                 int endRow)
Invoked when rows have been changed in the underlying model
 between the specified range (inclusive).
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Parameters:
firstRow - the first row, in terms of the underlying model
endRow - the last row, in terms of the underlying model
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the underlying model, or
         firstRow > endRow


"
RowSorter,"rowsUpdated(int firstRow, int endRow, int column)",abstract void,Invoked when the column in the rows have been updated in the underlying model between the specified range.,"

rowsUpdated
public abstract void rowsUpdated(int firstRow,
                                 int endRow,
                                 int column)
Invoked when the column in the rows have been updated in
 the underlying model between the specified range.
 
 You normally do not call this method.  This method is public
 to allow view classes to call it.

Parameters:
firstRow - the first row, in terms of the underlying model
endRow - the last row, in terms of the underlying model
column - the column that has changed, in terms of the underlying
        model
Throws:
IndexOutOfBoundsException - if either argument is outside
         the range of the underlying model after the change,
         firstRow > endRow, or
         column is outside the range of the underlying
          model


"
RowSorter,setSortKeys(List<? extends RowSorter.SortKey> keys),abstract void,Sets the current sort keys.,"

setSortKeys
public abstract void setSortKeys(List<? extends RowSorter.SortKey> keys)
Sets the current sort keys.

Parameters:
keys - the new SortKeys; null
        is a shorthand for specifying an empty list,
        indicating that the view should be unsorted


"
RowSorter,toggleSortOrder(int column),abstract void,Reverses the sort order of the specified column.,"

toggleSortOrder
public abstract void toggleSortOrder(int column)
Reverses the sort order of the specified column.  It is up to
 subclasses to provide the exact behavior when invoked.  Typically
 this will reverse the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.  If
 the specified column is not sortable, this method has no
 effect.
 
 If this results in changing the sort order and sorting, the
 appropriate RowSorterListener notification will be
 sent.

Parameters:
column - the column to toggle the sort ordering of, in
        terms of the underlying model
Throws:
IndexOutOfBoundsException - if column is outside the range of
         the underlying model


"
RowSorter.SortKey,equals(Object o),boolean,Returns true if this object equals the specified object.,"

equals
public boolean equals(Object o)
Returns true if this object equals the specified object.
 If the specified object is a SortKey and
 references the same column and sort order, the two objects
 are equal.

Overrides:
equals in class Object
Parameters:
o - the object to compare to
Returns:
true if o is equal to this SortKey
See Also:
Object.hashCode(), 
HashMap


"
RowSorter.SortKey,getColumn(),int,Returns the index of the column.,"

getColumn
public final int getColumn()
Returns the index of the column.

Returns:
index of column


"
RowSorter.SortKey,getSortOrder(),SortOrder,Returns the sort order of the column.,"

getSortOrder
public final SortOrder getSortOrder()
Returns the sort order of the column.

Returns:
the sort order of the column


"
RowSorter.SortKey,hashCode(),int,Returns the hash code for this SortKey.,"

hashCode
public int hashCode()
Returns the hash code for this SortKey.

Overrides:
hashCode in class Object
Returns:
hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ScrollPaneLayout,"addLayoutComponent(String s, Component c)",void,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String s,
                               Component c)
Adds the specified component to the layout. The layout is
 identified using one of:
 
ScrollPaneConstants.VIEWPORT
 ScrollPaneConstants.VERTICAL_SCROLLBAR
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR
 ScrollPaneConstants.ROW_HEADER
 ScrollPaneConstants.COLUMN_HEADER
 ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
s - the component identifier
c - the the component to be added
Throws:
IllegalArgumentException - if s is an invalid key


"
ScrollPaneLayout,"addSingletonComponent(Component oldC, Component newC)",protected Component,Removes an existing component.,"

addSingletonComponent
protected Component addSingletonComponent(Component oldC,
                                          Component newC)
Removes an existing component.  When a new component, such as
 the left corner, or vertical scrollbar, is added, the old one,
 if it exists, must be removed.
 
 This method returns newC. If oldC is
 not equal to newC and is non-null,
 it will be removed from its parent.

Parameters:
oldC - the Component to replace
newC - the Component to add
Returns:
the newC


"
ScrollPaneLayout,getColumnHeader(),JViewport,Returns the JViewport object that is the column header.,"

getColumnHeader
public JViewport getColumnHeader()
Returns the JViewport object that is the column header.

Returns:
the JViewport object that is the column header
See Also:
JScrollPane.getColumnHeader()


"
ScrollPaneLayout,getCorner(String key),Component,Returns the Component at the specified corner.,"

getCorner
public Component getCorner(String key)
Returns the Component at the specified corner.

Parameters:
key - the String specifying the corner
Returns:
the Component at the specified corner, as defined in
         ScrollPaneConstants; if key is not one of the
          four corners, null is returned
See Also:
JScrollPane.getCorner(java.lang.String)


"
ScrollPaneLayout,getHorizontalScrollBar(),JScrollBar,Returns the JScrollBar object that handles horizontal scrolling.,"

getHorizontalScrollBar
public JScrollBar getHorizontalScrollBar()
Returns the JScrollBar object that handles horizontal scrolling.

Returns:
the JScrollBar object that handles horizontal scrolling
See Also:
JScrollPane.getHorizontalScrollBar()


"
ScrollPaneLayout,getHorizontalScrollBarPolicy(),int,Returns the horizontal scrollbar-display policy.,"

getHorizontalScrollBarPolicy
public int getHorizontalScrollBarPolicy()
Returns the horizontal scrollbar-display policy.

Returns:
an integer giving the display policy
See Also:
setHorizontalScrollBarPolicy(int)


"
ScrollPaneLayout,getRowHeader(),JViewport,Returns the JViewport object that is the row header.,"

getRowHeader
public JViewport getRowHeader()
Returns the JViewport object that is the row header.

Returns:
the JViewport object that is the row header
See Also:
JScrollPane.getRowHeader()


"
ScrollPaneLayout,getVerticalScrollBar(),JScrollBar,Returns the JScrollBar object that handles vertical scrolling.,"

getVerticalScrollBar
public JScrollBar getVerticalScrollBar()
Returns the JScrollBar object that handles vertical scrolling.

Returns:
the JScrollBar object that handles vertical scrolling
See Also:
JScrollPane.getVerticalScrollBar()


"
ScrollPaneLayout,getVerticalScrollBarPolicy(),int,Returns the vertical scrollbar-display policy.,"

getVerticalScrollBarPolicy
public int getVerticalScrollBarPolicy()
Returns the vertical scrollbar-display policy.

Returns:
an integer giving the display policy
See Also:
setVerticalScrollBarPolicy(int)


"
ScrollPaneLayout,getViewport(),JViewport,Returns the JViewport object that displays the scrollable contents.,"

getViewport
public JViewport getViewport()
Returns the JViewport object that displays the
 scrollable contents.

Returns:
the JViewport object that displays the scrollable contents
See Also:
JScrollPane.getViewport()


"
ScrollPaneLayout,getViewportBorderBounds(JScrollPane scrollpane),Rectangle,Deprecated. As of JDK version Swing1.1 replaced by JScrollPane.getViewportBorderBounds().,"

getViewportBorderBounds
@Deprecated
public Rectangle getViewportBorderBounds(JScrollPane scrollpane)
Deprecated. As of JDK version Swing1.1
    replaced by JScrollPane.getViewportBorderBounds().
Returns the bounds of the border around the specified scroll pane's
 viewport.

Returns:
the size and position of the viewport border


"
ScrollPaneLayout,layoutContainer(Container parent),void,Lays out the scrollpane.,"

layoutContainer
public void layoutContainer(Container parent)
Lays out the scrollpane. The positioning of components depends on
 the following constraints:
 
 The row header, if present and visible, gets its preferred
 width and the viewport's height.

  The column header, if present and visible, gets its preferred
 height and the viewport's width.

  If a vertical scrollbar is needed, i.e. if the viewport's extent
 height is smaller than its view height or if the displayPolicy
 is ALWAYS, it's treated like the row header with respect to its
 dimensions and is made visible.

  If a horizontal scrollbar is needed, it is treated like the
 column header (see the paragraph above regarding the vertical scrollbar).

  If the scrollpane has a non-null
viewportBorder, then space is allocated for that.

  The viewport gets the space available after accounting for
 the previous constraints.

  The corner components, if provided, are aligned with the
 ends of the scrollbars and headers. If there is a vertical
 scrollbar, the right corners appear; if there is a horizontal
 scrollbar, the lower corners appear; a row header gets left
 corners, and a column header gets upper corners.
 

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the Container to lay out


"
ScrollPaneLayout,minimumLayoutSize(Container parent),Dimension,"The minimum size of a ScrollPane is the size of the insets plus minimum size of the viewport, plus the scrollpane's viewportBorder insets, plus the minimum size of the visible headers, plus the minimum size of the scrollbars whose displayPolicy isn't NEVER.","

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
The minimum size of a ScrollPane is the size of the insets
 plus minimum size of the viewport, plus the scrollpane's
 viewportBorder insets, plus the minimum size
 of the visible headers, plus the minimum size of the
 scrollbars whose displayPolicy isn't NEVER.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the minimum size
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
ScrollPaneLayout,preferredLayoutSize(Container parent),Dimension,"The preferred size of a ScrollPane is the size of the insets, plus the preferred size of the viewport, plus the preferred size of the visible headers, plus the preferred size of the scrollbars that will appear given the current view and the current scrollbar displayPolicies.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
The preferred size of a ScrollPane is the size of the insets,
 plus the preferred size of the viewport, plus the preferred size of
 the visible headers, plus the preferred size of the scrollbars
 that will appear given the current view and the current
 scrollbar displayPolicies.
 Note that the rowHeader is calculated as part of the preferred width
 and the colHeader is calculated as part of the preferred size.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the preferred size of the
         viewport and any scrollbars
See Also:
ViewportLayout, 
LayoutManager


"
ScrollPaneLayout,removeLayoutComponent(Component c),void,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the specified component from the layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to remove


"
ScrollPaneLayout,setHorizontalScrollBarPolicy(int x),void,Sets the horizontal scrollbar-display policy.,"

setHorizontalScrollBarPolicy
public void setHorizontalScrollBarPolicy(int x)
Sets the horizontal scrollbar-display policy.
 The options are:
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
 
 Note: Applications should use the JScrollPane version
 of this method.  It only exists for backwards compatibility
 with the Swing 1.0.2 (and earlier) versions of this class.

Parameters:
x - an int giving the display policy
Throws:
IllegalArgumentException - if x is not a valid
          horizontal scrollbar policy, as listed above


"
ScrollPaneLayout,setVerticalScrollBarPolicy(int x),void,Sets the vertical scrollbar-display policy.,"

setVerticalScrollBarPolicy
public void setVerticalScrollBarPolicy(int x)
Sets the vertical scrollbar-display policy. The options
 are:
 
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
 ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
 ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
 
 Note: Applications should use the JScrollPane version
 of this method.  It only exists for backwards compatibility
 with the Swing 1.0.2 (and earlier) versions of this class.

Parameters:
x - an integer giving the display policy
Throws:
IllegalArgumentException - if x is an invalid
          vertical scroll bar policy, as listed above


"
ScrollPaneLayout,syncWithScrollPane(JScrollPane sp),void,This method is invoked after the ScrollPaneLayout is set as the LayoutManager of a JScrollPane.,"

syncWithScrollPane
public void syncWithScrollPane(JScrollPane sp)
This method is invoked after the ScrollPaneLayout is set as the
 LayoutManager of a JScrollPane.
 It initializes all of the internal fields that
 are ordinarily set by addLayoutComponent.  For example:
 
 ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
     public void layoutContainer(Container p) {
         super.layoutContainer(p);
         // do some extra work here ...
     }
 };
 scrollpane.setLayout(mySPLayout):
 

"
SizeRequirements,"adjustSizes(int delta, SizeRequirements[] children)",static int[],Adjust a specified array of sizes by a given amount.,"

adjustSizes
public static int[] adjustSizes(int delta,
                                SizeRequirements[] children)
Adjust a specified array of sizes by a given amount.

Parameters:
delta - an int specifying the size difference
children - an array of SizeRequirements objects
Returns:
an array of ints containing the final size for each item


"
SizeRequirements,"calculateAlignedPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans)",static void,Creates a bunch of offset/span pairs specifying how to lay out a set of components with the specified alignments.,"

calculateAlignedPositions
public static void calculateAlignedPositions(int allocated,
                                             SizeRequirements total,
                                             SizeRequirements[] children,
                                             int[] offsets,
                                             int[] spans)
Creates a bunch of offset/span pairs specifying how to
 lay out a set of components with the specified alignments.
 The resulting span allocations will overlap, with each one
 fitting as well as possible into the given total allocation.
 This method requires that you specify
 the total amount of space to be allocated,
 the size requirements for each component to be placed
 (specified as an array of SizeRequirements), and
 the total size requirements of the set of components
 (only the alignment field of which is actually used).
 You can get the total size requirement by invoking
 getAlignedSizeRequirements.

 Normal alignment will be done with an alignment value of 0.0f
 representing the left/top edge of a component.

Parameters:
allocated - the total span to be allocated >= 0.
total - the total of the children requests.
children - the size requirements for each component.
offsets - the offset from 0 for each child where
   the spans were allocated (determines placement of the span).
spans - the span allocated for each child to make the
   total target span.


"
SizeRequirements,"calculateAlignedPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans, boolean normal)",static void,Creates a set of offset/span pairs specifying how to lay out a set of components with the specified alignments.,"

calculateAlignedPositions
public static void calculateAlignedPositions(int allocated,
                                             SizeRequirements total,
                                             SizeRequirements[] children,
                                             int[] offsets,
                                             int[] spans,
                                             boolean normal)
Creates a set of offset/span pairs specifying how to
 lay out a set of components with the specified alignments.
 The resulting span allocations will overlap, with each one
 fitting as well as possible into the given total allocation.
 This method requires that you specify
 the total amount of space to be allocated,
 the size requirements for each component to be placed
 (specified as an array of SizeRequirements), and
 the total size requirements of the set of components
 (only the alignment field of which is actually used)
 You can get the total size requirement by invoking
 getAlignedSizeRequirements.

 This method also requires a flag indicating whether normal or
 reverse alignment should be performed.  With normal alignment
 the value 0.0f represents the left/top edge of the component
 to be aligned.  With reverse alignment, 0.0f represents the
 right/bottom edge.

Parameters:
allocated - the total span to be allocated >= 0.
total - the total of the children requests.
children - the size requirements for each component.
offsets - the offset from 0 for each child where
   the spans were allocated (determines placement of the span).
spans - the span allocated for each child to make the
   total target span.
normal - when true, the alignment value 0.0f means
   left/top; when false, it means right/bottom.
Since:
1.4


"
SizeRequirements,"calculateTiledPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans)",static void,Creates a set of offset/span pairs representing how to lay out a set of components end-to-end.,"

calculateTiledPositions
public static void calculateTiledPositions(int allocated,
                                           SizeRequirements total,
                                           SizeRequirements[] children,
                                           int[] offsets,
                                           int[] spans)
Creates a set of offset/span pairs representing how to
 lay out a set of components end-to-end.
 This method requires that you specify
 the total amount of space to be allocated,
 the size requirements for each component to be placed
 (specified as an array of SizeRequirements), and
 the total size requirement of the set of components.
 You can get the total size requirement
 by invoking the getTiledSizeRequirements method.  The components
 will be tiled in the forward direction with offsets increasing from 0.

Parameters:
allocated - the total span to be allocated >= 0.
total - the total of the children requests.  This argument
  is optional and may be null.
children - the size requirements for each component.
offsets - the offset from 0 for each child where
   the spans were allocated (determines placement of the span).
spans - the span allocated for each child to make the
   total target span.


"
SizeRequirements,"calculateTiledPositions(int allocated, SizeRequirements total, SizeRequirements[] children, int[] offsets, int[] spans, boolean forward)",static void,Creates a set of offset/span pairs representing how to lay out a set of components end-to-end.,"

calculateTiledPositions
public static void calculateTiledPositions(int allocated,
                                           SizeRequirements total,
                                           SizeRequirements[] children,
                                           int[] offsets,
                                           int[] spans,
                                           boolean forward)
Creates a set of offset/span pairs representing how to
 lay out a set of components end-to-end.
 This method requires that you specify
 the total amount of space to be allocated,
 the size requirements for each component to be placed
 (specified as an array of SizeRequirements), and
 the total size requirement of the set of components.
 You can get the total size requirement
 by invoking the getTiledSizeRequirements method.

 This method also requires a flag indicating whether components
 should be tiled in the forward direction (offsets increasing
 from 0) or reverse direction (offsets decreasing from the end
 of the allocated space).  The forward direction represents
 components tiled from left to right or top to bottom.  The
 reverse direction represents components tiled from right to left
 or bottom to top.

Parameters:
allocated - the total span to be allocated >= 0.
total - the total of the children requests.  This argument
  is optional and may be null.
children - the size requirements for each component.
offsets - the offset from 0 for each child where
   the spans were allocated (determines placement of the span).
spans - the span allocated for each child to make the
   total target span.
forward - tile with offsets increasing from 0 if true
   and with offsets decreasing from the end of the allocated space
   if false.
Since:
1.4


"
SizeRequirements,getAlignedSizeRequirements(SizeRequirements[] children),static SizeRequirements,Determines the total space necessary to align a set of components.,"

getAlignedSizeRequirements
public static SizeRequirements getAlignedSizeRequirements(SizeRequirements[] children)
Determines the total space necessary to
 align a set of components.  The needs
 of each component in the set are represented by an entry in the
 passed-in SizeRequirements array.  The total space required will
 never be more than Integer.MAX_VALUE.

Parameters:
children - the set of child requirements.  If of zero length,
  the returns result will be a default instance of SizeRequirements.
Returns:
the total space requirements.


"
SizeRequirements,getTiledSizeRequirements(SizeRequirements[] children),static SizeRequirements,Determines the total space necessary to place a set of components end-to-end.,"

getTiledSizeRequirements
public static SizeRequirements getTiledSizeRequirements(SizeRequirements[] children)
Determines the total space necessary to
 place a set of components end-to-end.  The needs
 of each component in the set are represented by an entry in the
 passed-in SizeRequirements array.
 The returned SizeRequirements object has an alignment of 0.5
 (centered).  The space requirement is never more than
 Integer.MAX_VALUE.

Parameters:
children - the space requirements for a set of components.
   The vector may be of zero length, which will result in a
   default SizeRequirements object instance being passed back.
Returns:
the total space requirements.


"
SizeRequirements,toString(),String,"Returns a string describing the minimum, preferred, and maximum size requirements, along with the alignment.","

toString
public String toString()
Returns a string describing the minimum, preferred, and maximum
 size requirements, along with the alignment.

Overrides:
toString in class Object
Returns:
the string


"
SizeSequence,getIndex(int position),int,Returns the index of the entry that corresponds to the specified position.,"

getIndex
public int getIndex(int position)
Returns the index of the entry
 that corresponds to the specified position.
 For example, getIndex(0) is 0,
 since the first entry always starts at position 0.

Parameters:
position - the position of the entry
Returns:
the index of the entry that occupies the specified position


"
SizeSequence,getPosition(int index),int,Returns the start position for the specified entry.,"

getPosition
public int getPosition(int index)
Returns the start position for the specified entry.
 For example, getPosition(0) returns 0,
 getPosition(1) is equal to
   getSize(0),
 getPosition(2) is equal to
   getSize(0) + getSize(1),
 and so on.
 Note that if index is greater than
 length the value returned may
 be meaningless.

Parameters:
index - the index of the entry whose position is desired
Returns:
the starting position of the specified entry


"
SizeSequence,getSize(int index),int,Returns the size of the specified entry.,"

getSize
public int getSize(int index)
Returns the size of the specified entry.
 If index is out of the range
 (0 <= index < getSizes().length)
 the behavior is unspecified.

Parameters:
index - the index corresponding to the entry
Returns:
the size of the entry


"
SizeSequence,getSizes(),int[],Returns the size of all entries.,"

getSizes
public int[] getSizes()
Returns the size of all entries.

Returns:
a new array containing the sizes in this object


"
SizeSequence,"insertEntries(int start, int length, int value)",void,Adds a contiguous group of entries to this SizeSequence.,"

insertEntries
public void insertEntries(int start,
                          int length,
                          int value)
Adds a contiguous group of entries to this SizeSequence.
 Note that the values of start and
 length must satisfy the following
 conditions:  (0 <= start < getSizes().length)
 AND (length >= 0).  If these conditions are
 not met, the behavior is unspecified and an exception
 may be thrown.

Parameters:
start - the index to be assigned to the first entry
                in the group
length - the number of entries in the group
value - the size to be assigned to each new entry
Throws:
ArrayIndexOutOfBoundsException - if the parameters
   are outside of the range:
   (0 <= start < (getSizes().length)) AND (length >= 0)


"
SizeSequence,"removeEntries(int start, int length)",void,Removes a contiguous group of entries from this SizeSequence.,"

removeEntries
public void removeEntries(int start,
                          int length)
Removes a contiguous group of entries
 from this SizeSequence.
 Note that the values of start and
 length must satisfy the following
 conditions:  (0 <= start < getSizes().length)
 AND (length >= 0).  If these conditions are
 not met, the behavior is unspecified and an exception
 may be thrown.

Parameters:
start - the index of the first entry to be removed
length - the number of entries to be removed


"
SizeSequence,"setSize(int index, int size)",void,Sets the size of the specified entry.,"

setSize
public void setSize(int index,
                    int size)
Sets the size of the specified entry.
 Note that if the value of index
 does not fall in the range:
 (0 <= index < getSizes().length)
 the behavior is unspecified.

Parameters:
index - the index corresponding to the entry
size - the size of the entry


"
SizeSequence,setSizes(int[] sizes),void,"Resets this SizeSequence object, using the data in the sizes argument.","

setSizes
public void setSizes(int[] sizes)
Resets this SizeSequence object,
 using the data in the sizes argument.
 This method reinitializes this object so that it
 contains as many entries as the sizes array.
 Each entry's size is initialized to the value of the
 corresponding item in sizes.

Parameters:
sizes - the array of sizes to be contained in
               this SizeSequence


"
SortingFocusTraversalPolicy,accept(Component aComponent),protected boolean,Determines whether a Component is an acceptable choice as the new focus owner.,"

accept
protected boolean accept(Component aComponent)
Determines whether a Component is an acceptable choice as the new
 focus owner. By default, this method will accept a Component if and
 only if it is visible, displayable, enabled, and focusable.

Parameters:
aComponent - the Component whose fitness as a focus owner is to
        be tested
Returns:
true if aComponent is visible, displayable,
         enabled, and focusable; false otherwise


"
SortingFocusTraversalPolicy,getComparator(),protected Comparator<? super Component>,Returns the Comparator which will be used to sort the Components in a focus traversal cycle.,"

getComparator
protected Comparator<? super Component> getComparator()
Returns the Comparator which will be used to sort the Components in a
 focus traversal cycle.

Returns:
the Comparator which will be used for sorting


"
SortingFocusTraversalPolicy,"getComponentAfter(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus after aComponent.,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
 
 By default, SortingFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Specified by:
getComponentAfter in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
SortingFocusTraversalPolicy,"getComponentBefore(Container aContainer, Component aComponent)",Component,Returns the Component that should receive the focus before aComponent.,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
 
 By default, SortingFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Specified by:
getComponentBefore in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
SortingFocusTraversalPolicy,getDefaultComponent(Container aContainer),Component,Returns the default Component to focus.,"

getDefaultComponent
public Component getDefaultComponent(Container aContainer)
Returns the default Component to focus. This Component will be the first
 to receive focus when traversing down into a new focus traversal cycle
 rooted at aContainer. The default implementation of this method
 returns the same Component as getFirstComponent.

Specified by:
getDefaultComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        default Component is to be returned
Returns:
the default Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null
See Also:
getFirstComponent(java.awt.Container)


"
SortingFocusTraversalPolicy,getFirstComponent(Container aContainer),Component,Returns the first Component in the traversal cycle.,"

getFirstComponent
public Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Specified by:
getFirstComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        first Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
SortingFocusTraversalPolicy,getImplicitDownCycleTraversal(),boolean,Returns whether this SortingFocusTraversalPolicy transfers focus down- cycle implicitly.,"

getImplicitDownCycleTraversal
public boolean getImplicitDownCycleTraversal()
Returns whether this SortingFocusTraversalPolicy transfers focus down-
 cycle implicitly. If true, during normal focus
 traversal, the Component traversed after a focus cycle root will be the
 focus-cycle-root's default Component to focus. If false,
 the next Component in the focus traversal cycle rooted at the specified
 focus cycle root will be traversed instead.

Returns:
whether this SortingFocusTraversalPolicy transfers focus down-
         cycle implicitly
See Also:
setImplicitDownCycleTraversal(boolean), 
getFirstComponent(java.awt.Container)


"
SortingFocusTraversalPolicy,getLastComponent(Container aContainer),Component,Returns the last Component in the traversal cycle.,"

getLastComponent
public Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Specified by:
getLastComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        last Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
SortingFocusTraversalPolicy,setComparator(Comparator<? super Component> comparator),protected void,Sets the Comparator which will be used to sort the Components in a focus traversal cycle.,"

setComparator
protected void setComparator(Comparator<? super Component> comparator)
Sets the Comparator which will be used to sort the Components in a
 focus traversal cycle.

Parameters:
comparator - the Comparator which will be used for sorting


"
SortingFocusTraversalPolicy,setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal),void,Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle implicitly.,"

setImplicitDownCycleTraversal
public void setImplicitDownCycleTraversal(boolean implicitDownCycleTraversal)
Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle
 implicitly. If true, during normal focus traversal,
 the Component traversed after a focus cycle root will be the focus-
 cycle-root's default Component to focus. If false, the
 next Component in the focus traversal cycle rooted at the specified
 focus cycle root will be traversed instead. The default value for this
 property is true.

Parameters:
implicitDownCycleTraversal - whether this
        SortingFocusTraversalPolicy transfers focus down-cycle implicitly
See Also:
getImplicitDownCycleTraversal(), 
getFirstComponent(java.awt.Container)


"
SpinnerDateModel,getCalendarField(),int,Returns the Calendar field that is added to or subtracted from by the nextValue and previousValue methods.,"

getCalendarField
public int getCalendarField()
Returns the Calendar field that is added to or subtracted from
 by the nextValue and previousValue methods.

Returns:
the value of the calendarField property
See Also:
setCalendarField(int)


"
SpinnerDateModel,getDate(),Date,Returns the current element in this sequence of Dates.,"

getDate
public Date getDate()
Returns the current element in this sequence of Dates.
 This method is equivalent to (Date)getValue.

Returns:
the value property
See Also:
setValue(java.lang.Object)


"
SpinnerDateModel,getEnd(),Comparable,Returns the last Date in the sequence.,"

getEnd
public Comparable getEnd()
Returns the last Date in the sequence.

Returns:
the value of the end property
See Also:
setEnd(java.lang.Comparable)


"
SpinnerDateModel,getNextValue(),Object,"Returns the next Date in the sequence, or null if the next date is after end.","

getNextValue
public Object getNextValue()
Returns the next Date in the sequence, or null if
 the next date is after end.

Specified by:
getNextValue in interface SpinnerModel
Returns:
the next Date in the sequence, or null if
     the next date is after end.
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue(), 
setCalendarField(int)


"
SpinnerDateModel,getPreviousValue(),Object,"Returns the previous Date in the sequence, or null if the previous date is before start.","

getPreviousValue
public Object getPreviousValue()
Returns the previous Date in the sequence, or null
 if the previous date is before start.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
the previous Date in the sequence, or
     null if the previous date
     is before start
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue(), 
setCalendarField(int)


"
SpinnerDateModel,getStart(),Comparable,Returns the first Date in the sequence.,"

getStart
public Comparable getStart()
Returns the first Date in the sequence.

Returns:
the value of the start property
See Also:
setStart(java.lang.Comparable)


"
SpinnerDateModel,getValue(),Object,Returns the current element in this sequence of Dates.,"

getValue
public Object getValue()
Returns the current element in this sequence of Dates.

Specified by:
getValue in interface SpinnerModel
Returns:
the value property
See Also:
setValue(java.lang.Object), 
getDate()


"
SpinnerDateModel,setCalendarField(int calendarField),void,Changes the size of the date value change computed by the nextValue and previousValue methods.,"

setCalendarField
public void setCalendarField(int calendarField)
Changes the size of the date value change computed
 by the nextValue and previousValue methods.
 The calendarField parameter must be one of the
 Calendar field constants like Calendar.MONTH
 or Calendar.MINUTE.
 The nextValue and previousValue methods
 simply move the specified Calendar field forward or backward
 by one unit with the Calendar.add method.
 You should use this method with care as some UIs may set the
 calendarField before committing the edit to spin the field under
 the cursor. If you only want one field to spin you can subclass
 and ignore the setCalendarField calls.

Parameters:
calendarField - one of
  
Calendar.ERA
Calendar.YEAR
Calendar.MONTH
Calendar.WEEK_OF_YEAR
Calendar.WEEK_OF_MONTH
Calendar.DAY_OF_MONTH
Calendar.DAY_OF_YEAR
Calendar.DAY_OF_WEEK
Calendar.DAY_OF_WEEK_IN_MONTH
Calendar.AM_PM
Calendar.HOUR
Calendar.HOUR_OF_DAY
Calendar.MINUTE
Calendar.SECOND
Calendar.MILLISECOND


 This method fires a ChangeEvent if the
 calendarField has changed.
See Also:
getCalendarField(), 
getNextValue(), 
getPreviousValue(), 
Calendar.add(int, int), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerDateModel,setEnd(Comparable end),void,Changes the upper limit for Dates in this sequence.,"

setEnd
public void setEnd(Comparable end)
Changes the upper limit for Dates in this sequence.
 If start is null, then there is no upper
 limit.  No bounds checking is done here: the new
 start value may invalidate the (start <= value <= end)
 invariant enforced by the constructors.  This is to simplify updating
 the model.  Naturally, one should ensure that the invariant is true
 before calling the nextValue, previousValue,
 or setValue methods.
 
 Typically this property is a Date however it's possible to use
 Comparable with a compareTo method for
 Dates.  See setStart for an example.
 
 This method fires a ChangeEvent if the end
 has changed.

Parameters:
end - defines the last date in the sequence
See Also:
getEnd(), 
setStart(java.lang.Comparable), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerDateModel,setStart(Comparable start),void,Changes the lower limit for Dates in this sequence.,"

setStart
public void setStart(Comparable start)
Changes the lower limit for Dates in this sequence.
 If start is null,
 then there is no lower limit.  No bounds checking is done here:
 the new start value may invalidate the
 (start <= value <= end)
 invariant enforced by the constructors.  This is to simplify updating
 the model.  Naturally one should ensure that the invariant is true
 before calling the nextValue, previousValue,
 or setValue methods.
 
 Typically this property is a Date however it's possible to use
 a Comparable with a compareTo method for Dates.
 For example start might be an instance of a class like this:
 
 MyStartDate implements Comparable {
     long t = 12345;
     public int compareTo(Date d) {
            return (t < d.getTime() ? -1 : (t == d.getTime() ? 0 : 1));
     }
     public int compareTo(Object o) {
            return compareTo((Date)o);
     }
 }
 
 Note that the above example will throw a ClassCastException
 if the Object passed to compareTo(Object)
 is not a Date.
 
 This method fires a ChangeEvent if the
 start has changed.

Parameters:
start - defines the first date in the sequence
See Also:
getStart(), 
setEnd(java.lang.Comparable), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerDateModel,setValue(Object value),void,Sets the current Date for this sequence.,"

setValue
public void setValue(Object value)
Sets the current Date for this sequence.
 If value is null,
 an IllegalArgumentException is thrown.  No bounds
 checking is done here:
 the new value may invalidate the (start <= value < end)
 invariant enforced by the constructors.  Naturally, one should ensure
 that the (start <= value <= maximum) invariant is true
 before calling the nextValue, previousValue,
 or setValue methods.
 
 This method fires a ChangeEvent if the
 value has changed.

Specified by:
setValue in interface SpinnerModel
Parameters:
value - the current (non null)
    Date for this sequence
Throws:
IllegalArgumentException - if value is null
    or not a Date
See Also:
getDate(), 
getValue(), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerListModel,getList(),List<?>,Returns the List that defines the sequence for this model.,"

getList
public List<?> getList()
Returns the List that defines the sequence for this model.

Returns:
the value of the list property
See Also:
setList(java.util.List<?>)


"
SpinnerListModel,getNextValue(),Object,Returns the next legal value of the underlying sequence or null if value is already the last element.,"

getNextValue
public Object getNextValue()
Returns the next legal value of the underlying sequence or
 null if value is already the last element.

Specified by:
getNextValue in interface SpinnerModel
Returns:
the next legal value of the underlying sequence or
     null if value is already the last element
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue()


"
SpinnerListModel,getPreviousValue(),Object,Returns the previous element of the underlying sequence or null if value is already the first element.,"

getPreviousValue
public Object getPreviousValue()
Returns the previous element of the underlying sequence or
 null if value is already the first element.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
the previous element of the underlying sequence or
     null if value is already the first element
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue()


"
SpinnerListModel,getValue(),Object,Returns the current element of the sequence.,"

getValue
public Object getValue()
Returns the current element of the sequence.

Specified by:
getValue in interface SpinnerModel
Returns:
the value property
See Also:
SpinnerModel.getValue(), 
setValue(java.lang.Object)


"
SpinnerListModel,setList(List<?> list),void,Changes the list that defines this sequence and resets the index of the models value to zero.,"

setList
public void setList(List<?> list)
Changes the list that defines this sequence and resets the index
 of the models value to zero.  Note that list
 is not copied, the model just stores a reference to it.
 
 This method fires a ChangeEvent if list is
 not equal to the current list.

Parameters:
list - the sequence that this model represents
Throws:
IllegalArgumentException - if list is
    null or zero length
See Also:
getList()


"
SpinnerListModel,setValue(Object elt),void,Changes the current element of the sequence and notifies ChangeListeners.,"

setValue
public void setValue(Object elt)
Changes the current element of the sequence and notifies
 ChangeListeners.  If the specified
 value is not equal to an element of the underlying sequence
 then an IllegalArgumentException is thrown.
 In the following example the setValue call
 would cause an exception to be thrown:
 
 String[] values = {""one"", ""two"", ""free"", ""four""};
 SpinnerModel model = new SpinnerListModel(values);
 model.setValue(""TWO"");
 

Specified by:
setValue in interface SpinnerModel
Parameters:
elt - the sequence element that will be model's current value
Throws:
IllegalArgumentException - if the specified value isn't allowed
See Also:
SpinnerModel.setValue(java.lang.Object), 
getValue()


"
SpinnerNumberModel,getMaximum(),Comparable,Returns the last number in the sequence.,"

getMaximum
public Comparable getMaximum()
Returns the last number in the sequence.

Returns:
the value of the maximum property
See Also:
setMaximum(java.lang.Comparable)


"
SpinnerNumberModel,getMinimum(),Comparable,Returns the first number in this sequence.,"

getMinimum
public Comparable getMinimum()
Returns the first number in this sequence.

Returns:
the value of the minimum property
See Also:
setMinimum(java.lang.Comparable)


"
SpinnerNumberModel,getNextValue(),Object,Returns the next number in the sequence.,"

getNextValue
public Object getNextValue()
Returns the next number in the sequence.

Specified by:
getNextValue in interface SpinnerModel
Returns:
value + stepSize or null if the sum
     exceeds maximum.
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue(), 
setStepSize(java.lang.Number)


"
SpinnerNumberModel,getNumber(),Number,Returns the value of the current element of the sequence.,"

getNumber
public Number getNumber()
Returns the value of the current element of the sequence.

Returns:
the value property
See Also:
setValue(java.lang.Object)


"
SpinnerNumberModel,getPreviousValue(),Object,Returns the previous number in the sequence.,"

getPreviousValue
public Object getPreviousValue()
Returns the previous number in the sequence.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
value - stepSize, or
     null if the sum is less
     than minimum.
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue(), 
setStepSize(java.lang.Number)


"
SpinnerNumberModel,getStepSize(),Number,Returns the size of the value change computed by the getNextValue and getPreviousValue methods.,"

getStepSize
public Number getStepSize()
Returns the size of the value change computed by the
 getNextValue
 and getPreviousValue methods.

Returns:
the value of the stepSize property
See Also:
setStepSize(java.lang.Number)


"
SpinnerNumberModel,getValue(),Object,Returns the value of the current element of the sequence.,"

getValue
public Object getValue()
Returns the value of the current element of the sequence.

Specified by:
getValue in interface SpinnerModel
Returns:
the value property
See Also:
setValue(java.lang.Object), 
getNumber()


"
SpinnerNumberModel,setMaximum(Comparable maximum),void,Changes the upper bound for numbers in this sequence.,"

setMaximum
public void setMaximum(Comparable maximum)
Changes the upper bound for numbers in this sequence.
 If maximum is null, then there
 is no upper bound.  No bounds checking is done here; the new
 maximum value may invalidate the
 (minimum <= value < maximum)
 invariant enforced by the constructors.  This is to simplify updating
 the model, naturally one should ensure that the invariant is true
 before calling the next, previous,
 or setValue methods.
 
 Typically this property is a Number of the same type
 as the value however it's possible to use any
 Comparable with a compareTo
 method for a Number with the same type as the value.
 See 
setMinimum for an example.
 
 This method fires a ChangeEvent if the
 maximum has changed.

Parameters:
maximum - a Comparable that has a
     compareTo method for Numbers with
     the same type as value
See Also:
getMaximum(), 
setMinimum(java.lang.Comparable), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerNumberModel,setMinimum(Comparable minimum),void,Changes the lower bound for numbers in this sequence.,"

setMinimum
public void setMinimum(Comparable minimum)
Changes the lower bound for numbers in this sequence.
 If minimum is null,
 then there is no lower bound.  No bounds checking is done here;
 the new minimum value may invalidate the
 (minimum <= value <= maximum)
 invariant enforced by the constructors.  This is to simplify updating
 the model, naturally one should ensure that the invariant is true
 before calling the getNextValue,
 getPreviousValue, or setValue methods.
 
 Typically this property is a Number of the same type
 as the value however it's possible to use any
 Comparable with a compareTo
 method for a Number with the same type as the value.
 For example if value was a Long,
 minimum might be a Date subclass defined like this:
 
 MyDate extends Date {  // Date already implements Comparable
     public int compareTo(Long o) {
         long t = getTime();
         return (t < o.longValue() ? -1 : (t == o.longValue() ? 0 : 1));
     }
 }
 

 This method fires a ChangeEvent
 if the minimum has changed.

Parameters:
minimum - a Comparable that has a
     compareTo method for Numbers with
     the same type as value
See Also:
getMinimum(), 
setMaximum(java.lang.Comparable), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerNumberModel,setStepSize(Number stepSize),void,Changes the size of the value change computed by the getNextValue and getPreviousValue methods.,"

setStepSize
public void setStepSize(Number stepSize)
Changes the size of the value change computed by the
 getNextValue and getPreviousValue
 methods.  An IllegalArgumentException
 is thrown if stepSize is null.
 
 This method fires a ChangeEvent if the
 stepSize has changed.

Parameters:
stepSize - the size of the value change computed by the
     getNextValue and getPreviousValue methods
See Also:
getNextValue(), 
getPreviousValue(), 
getStepSize(), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
SpinnerNumberModel,setValue(Object value),void,Sets the current value for this sequence.,"

setValue
public void setValue(Object value)
Sets the current value for this sequence.  If value is
 null, or not a Number, an
 IllegalArgumentException is thrown.  No
 bounds checking is done here; the new value may invalidate the
 (minimum <= value <= maximum)
 invariant enforced by the constructors.   It's also possible to set
 the value to be something that wouldn't naturally occur in the sequence,
 i.e. a value that's not modulo the stepSize.
 This is to simplify updating the model, and to accommodate
 spinners that don't want to restrict values that have been
 directly entered by the user. Naturally, one should ensure that the
 (minimum <= value <= maximum) invariant is true
 before calling the next, previous, or
 setValue methods.
 
 This method fires a ChangeEvent if the value has changed.

Specified by:
setValue in interface SpinnerModel
Parameters:
value - the current (non null) Number
         for this sequence
Throws:
IllegalArgumentException - if value is
         null or not a Number
See Also:
getNumber(), 
getValue(), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
Spring,constant(int pref),static Spring,"Returns a strut -- a spring whose minimum, preferred, and maximum values each have the value pref.","

constant
public static Spring constant(int pref)
Returns a strut -- a spring whose minimum, preferred, and
 maximum values each have the value pref.

Parameters:
pref - the minimum, preferred, and
         maximum values of the new spring
Returns:
a spring whose minimum, preferred, and
         maximum values each have the value pref
See Also:
Spring


"
Spring,"constant(int min, int pref, int max)",static Spring,"Returns a spring whose minimum, preferred, and maximum values have the values: min, pref, and max respectively.","

constant
public static Spring constant(int min,
                              int pref,
                              int max)
Returns a spring whose minimum, preferred, and
 maximum values have the values: min, pref,
 and max respectively.

Parameters:
min - the minimum value of the new spring
pref - the preferred value of the new spring
max - the maximum value of the new spring
Returns:
a spring whose minimum, preferred, and
         maximum values have the values: min, pref,
         and max respectively
See Also:
Spring


"
Spring,getMaximumValue(),abstract int,Returns the maximum value of this Spring.,"

getMaximumValue
public abstract int getMaximumValue()
Returns the maximum value of this Spring.

Returns:
the maximumValue property of this Spring


"
Spring,getMinimumValue(),abstract int,Returns the minimum value of this Spring.,"

getMinimumValue
public abstract int getMinimumValue()
Returns the minimum value of this Spring.

Returns:
the minimumValue property of this Spring


"
Spring,getPreferredValue(),abstract int,Returns the preferred value of this Spring.,"

getPreferredValue
public abstract int getPreferredValue()
Returns the preferred value of this Spring.

Returns:
the preferredValue of this Spring


"
Spring,getValue(),abstract int,Returns the current value of this Spring.,"

getValue
public abstract int getValue()
Returns the current value of this Spring.

Returns:
the value property of this Spring
See Also:
setValue(int)


"
Spring,height(Component c),static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are defined by the heights of the minimumSize, preferredSize, maximumSize and size properties of the supplied component.","

height
public static Spring height(Component c)
Returns a spring whose minimum, preferred, maximum
 and value properties are defined by the heights of the minimumSize,
 preferredSize, maximumSize and size properties
 of the supplied component. The returned spring is a 'wrapper' implementation
 whose methods call the appropriate size methods of the supplied component.
 The minimum, preferred, maximum and value properties of the returned spring
 therefore report the current state of the appropriate properties in the
 component and track them as they change.

Parameters:
c - Component used for calculating size
Returns:
a spring whose properties are defined by the vertical component
 of the component's size methods.
Throws:
NullPointerException - if c is null
Since:
1.5


"
Spring,"max(Spring s1, Spring s2)",static Spring,"Returns max(s1, s2): a spring whose value is always greater than (or equal to) the values of both s1 and s2.","

max
public static Spring max(Spring s1,
                         Spring s2)
Returns max(s1, s2): a spring whose value is always greater than (or equal to)
         the values of both s1 and s2.

Returns:
max(s1, s2): a spring whose value is always greater than (or equal to)
         the values of both s1 and s2
See Also:
Spring


"
Spring,minus(Spring s),static Spring,Returns -s: a spring running in the opposite direction to s.,"

minus
public static Spring minus(Spring s)
Returns -s: a spring running in the opposite direction to s.

Returns:
-s: a spring running in the opposite direction to s
See Also:
Spring


"
Spring,"scale(Spring s, float factor)",static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are each multiples of the properties of the argument spring, s.","

scale
public static Spring scale(Spring s,
                           float factor)
Returns a spring whose minimum, preferred, maximum
 and value properties are each multiples of the properties of the
 argument spring, s. Minimum and maximum properties are
 swapped when factor is negative (in accordance with the
 rules of interval arithmetic).
 
 When factor is, for example, 0.5f the result represents 'the mid-point'
 of its input - an operation that is useful for centering components in
 a container.

Parameters:
s - the spring to scale
factor - amount to scale by.
Returns:
a spring whose properties are those of the input spring s
 multiplied by factor
Throws:
NullPointerException - if s is null
Since:
1.5


"
Spring,setValue(int value),abstract void,Sets the current value of this Spring to value.,"

setValue
public abstract void setValue(int value)
Sets the current value of this Spring to value.

Parameters:
value - the new setting of the value property
See Also:
getValue()


"
Spring,"sum(Spring s1, Spring s2)",static Spring,Returns s1+s2: a spring representing s1 and s2 in series.,"

sum
public static Spring sum(Spring s1,
                         Spring s2)
Returns s1+s2: a spring representing s1 and s2
 in series. In a sum, s3, of two springs, s1 and s2,
 the strains of s1, s2, and s3 are maintained
 at the same level (to within the precision implied by their integer values).
 The strain of a spring in compression is:
 
         value - pref
         ------------
          pref - min
 
 and the strain of a spring in tension is:
 
         value - pref
         ------------
          max - pref
 
 When setValue is called on the sum spring, s3, the strain
 in s3 is calculated using one of the formulas above. Once the strain of
 the sum is known, the values of s1 and s2 are
 then set so that they are have a strain equal to that of the sum. The formulas are
 evaluated so as to take rounding errors into account and ensure that the sum of
 the values of s1 and s2 is exactly equal to
 the value of s3.

Returns:
s1+s2: a spring representing s1 and s2 in series
See Also:
Spring


"
Spring,width(Component c),static Spring,"Returns a spring whose minimum, preferred, maximum and value properties are defined by the widths of the minimumSize, preferredSize, maximumSize and size properties of the supplied component.","

width
public static Spring width(Component c)
Returns a spring whose minimum, preferred, maximum
 and value properties are defined by the widths of the minimumSize,
 preferredSize, maximumSize and size properties
 of the supplied component. The returned spring is a 'wrapper' implementation
 whose methods call the appropriate size methods of the supplied component.
 The minimum, preferred, maximum and value properties of the returned spring
 therefore report the current state of the appropriate properties in the
 component and track them as they change.

Parameters:
c - Component used for calculating size
Returns:
a spring whose properties are defined by the horizontal component
 of the component's size methods.
Throws:
NullPointerException - if c is null
Since:
1.5


"
SpringLayout,"addLayoutComponent(Component component, Object constraints)",void,"If constraints is an instance of SpringLayout.Constraints, associates the constraints with the specified component.","

addLayoutComponent
public void addLayoutComponent(Component component,
                               Object constraints)
If constraints is an instance of
 SpringLayout.Constraints,
 associates the constraints with the specified component.
 

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
component - the component being added
constraints - the component's constraints
See Also:
SpringLayout.Constraints


"
SpringLayout,"addLayoutComponent(String name, Component c)",void,"Has no effect, since this layout manager does not use a per-component string.","

addLayoutComponent
public void addLayoutComponent(String name,
                               Component c)
Has no effect,
 since this layout manager does not
 use a per-component string.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the string to be associated with the component
c - the component to be added


"
SpringLayout,"getConstraint(String edgeName, Component c)",Spring,Returns the spring controlling the distance between the specified edge of the component and the top or left edge of its parent.,"

getConstraint
public Spring getConstraint(String edgeName,
                            Component c)
Returns the spring controlling the distance between
 the specified edge of
 the component and the top or left edge of its parent. This
 method, instead of returning the current binding for the
 edge, returns a proxy that tracks the characteristics
 of the edge even if the edge is subsequently rebound.
 Proxies are intended to be used in builder environments
 where it is useful to allow the user to define the
 constraints for a layout in any order. Proxies do, however,
 provide the means to create cyclic dependencies amongst
 the constraints of a layout. Such cycles are detected
 internally by SpringLayout so that
 the layout operation always terminates.

Parameters:
edgeName - must be one of
 SpringLayout.NORTH,
 SpringLayout.SOUTH,
 SpringLayout.EAST,
 SpringLayout.WEST,
 SpringLayout.VERTICAL_CENTER,
 SpringLayout.HORIZONTAL_CENTER or
 SpringLayout.BASELINE
c - the component whose edge spring is desired
Returns:
a proxy for the spring controlling the distance between the
         specified edge and the top or left edge of its parent
See Also:
NORTH, 
SOUTH, 
EAST, 
WEST, 
VERTICAL_CENTER, 
HORIZONTAL_CENTER, 
BASELINE


"
SpringLayout,getConstraints(Component c),SpringLayout.Constraints,Returns the constraints for the specified component.,"

getConstraints
public SpringLayout.Constraints getConstraints(Component c)
Returns the constraints for the specified component.
 Note that,
 unlike the GridBagLayout
getConstraints method,
 this method does not clone constraints.
 If no constraints
 have been associated with this component,
 this method
 returns a default constraints object positioned at
 0,0 relative to the parent's Insets and its width/height
 constrained to the minimum, maximum, and preferred sizes of the
 component. The size characteristics
 are not frozen at the time this method is called;
 instead this method returns a constraints object
 whose characteristics track the characteristics
 of the component as they change.

Parameters:
c - the component whose constraints will be returned
Returns:
the constraints for the specified component


"
SpringLayout,getLayoutAlignmentX(Container p),float,Returns 0.5f (centered).,"

getLayoutAlignmentX
public float getLayoutAlignmentX(Container p)
Returns 0.5f (centered).

Specified by:
getLayoutAlignmentX in interface LayoutManager2


"
SpringLayout,getLayoutAlignmentY(Container p),float,Returns 0.5f (centered).,"

getLayoutAlignmentY
public float getLayoutAlignmentY(Container p)
Returns 0.5f (centered).

Specified by:
getLayoutAlignmentY in interface LayoutManager2


"
SpringLayout,invalidateLayout(Container p),void,"Invalidates the layout, indicating that if the layout manager has cached information it should be discarded.","

invalidateLayout
public void invalidateLayout(Container p)
Description copied from interface: LayoutManager2
Invalidates the layout, indicating that if the layout manager
 has cached information it should be discarded.

Specified by:
invalidateLayout in interface LayoutManager2


"
SpringLayout,layoutContainer(Container parent),void,Lays out the specified container.,"

layoutContainer
public void layoutContainer(Container parent)
Description copied from interface: LayoutManager
Lays out the specified container.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container to be laid out


"
SpringLayout,maximumLayoutSize(Container parent),Dimension,"Calculates the maximum size dimensions for the specified container, given the components it contains.","

maximumLayoutSize
public Dimension maximumLayoutSize(Container parent)
Description copied from interface: LayoutManager2
Calculates the maximum size dimensions for the specified container,
 given the components it contains.

Specified by:
maximumLayoutSize in interface LayoutManager2
See Also:
Component.getMaximumSize(), 
LayoutManager


"
SpringLayout,minimumLayoutSize(Container parent),Dimension,"Calculates the minimum size dimensions for the specified container, given the components it contains.","

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
Description copied from interface: LayoutManager
Calculates the minimum size dimensions for the specified
 container, given the components it contains.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the component to be laid out
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
SpringLayout,preferredLayoutSize(Container parent),Dimension,"Calculates the preferred size dimensions for the specified container, given the components it contains.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
Description copied from interface: LayoutManager
Calculates the preferred size dimensions for the specified
 container, given the components it contains.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the container to be laid out
See Also:
LayoutManager.minimumLayoutSize(java.awt.Container)


"
SpringLayout,"putConstraint(String e1, Component c1, int pad, String e2, Component c2)",void,"Links edge e1 of component c1 to edge e2 of component c2, with a fixed distance between the edges.","

putConstraint
public void putConstraint(String e1,
                          Component c1,
                          int pad,
                          String e2,
                          Component c2)
Links edge e1 of component c1 to
 edge e2 of component c2,
 with a fixed distance between the edges. This
 constraint will cause the assignment
 
     value(e1, c1) = value(e2, c2) + pad
 to take place during all subsequent layout operations.
 

Parameters:
e1 - the edge of the dependent
c1 - the component of the dependent
pad - the fixed distance between dependent and anchor
e2 - the edge of the anchor
c2 - the component of the anchor
See Also:
putConstraint(String, Component, Spring, String, Component)


"
SpringLayout,"putConstraint(String e1, Component c1, Spring s, String e2, Component c2)",void,Links edge e1 of component c1 to edge e2 of component c2.,"

putConstraint
public void putConstraint(String e1,
                          Component c1,
                          Spring s,
                          String e2,
                          Component c2)
Links edge e1 of component c1 to
 edge e2 of component c2. As edge
 (e2, c2) changes value, edge (e1, c1) will
 be calculated by taking the (spring) sum of (e2, c2)
 and s.
 Each edge must have one of the following values:
 SpringLayout.NORTH,
 SpringLayout.SOUTH,
 SpringLayout.EAST,
 SpringLayout.WEST,
 SpringLayout.VERTICAL_CENTER,
 SpringLayout.HORIZONTAL_CENTER or
 SpringLayout.BASELINE.
 

Parameters:
e1 - the edge of the dependent
c1 - the component of the dependent
s - the spring linking dependent and anchor
e2 - the edge of the anchor
c2 - the component of the anchor
See Also:
putConstraint(String, Component, int, String, Component), 
NORTH, 
SOUTH, 
EAST, 
WEST, 
VERTICAL_CENTER, 
HORIZONTAL_CENTER, 
BASELINE


"
SpringLayout,removeLayoutComponent(Component c),void,Removes the constraints associated with the specified component.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the constraints associated with the specified component.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component being removed from the container


"
SpringLayout.Constraints,getConstraint(String edgeName),Spring,"Returns the value of the specified edge, which may be a derived value, or even null.","

getConstraint
public Spring getConstraint(String edgeName)
Returns the value of the specified edge, which may be
 a derived value, or even null.
 The edge must have one of the following values:
 SpringLayout.NORTH,
 SpringLayout.SOUTH,
 SpringLayout.EAST,
 SpringLayout.WEST,
 SpringLayout.HORIZONTAL_CENTER,
 SpringLayout.VERTICAL_CENTER,
 SpringLayout.BASELINE,
 SpringLayout.WIDTH or
 SpringLayout.HEIGHT.
 For any other String value passed as the edge,
 null will be returned. Throws
 NullPointerException for a null edge.

Parameters:
edgeName - the edge whose value
                 is to be returned
Returns:
the spring controlling the specified edge, may be null
Throws:
NullPointerException - if edgeName is null
See Also:
setConstraint(java.lang.String, javax.swing.Spring), 
SpringLayout.NORTH, 
SpringLayout.SOUTH, 
SpringLayout.EAST, 
SpringLayout.WEST, 
SpringLayout.HORIZONTAL_CENTER, 
SpringLayout.VERTICAL_CENTER, 
SpringLayout.BASELINE, 
SpringLayout.WIDTH, 
SpringLayout.HEIGHT, 
SpringLayout.Constraints


"
SpringLayout.Constraints,getHeight(),Spring,Returns the value of the height property.,"

getHeight
public Spring getHeight()
Returns the value of the height property.

Returns:
the spring controlling the height of a component
See Also:
setHeight(javax.swing.Spring), 
SpringLayout.Constraints


"
SpringLayout.Constraints,getWidth(),Spring,Returns the value of the width property.,"

getWidth
public Spring getWidth()
Returns the value of the width property.

Returns:
the spring controlling the width of a component
See Also:
setWidth(javax.swing.Spring), 
SpringLayout.Constraints


"
SpringLayout.Constraints,getX(),Spring,Returns the value of the x property.,"

getX
public Spring getX()
Returns the value of the x property.

Returns:
the spring controlling the x value
         of a component's location
See Also:
setX(javax.swing.Spring), 
SpringLayout.Constraints


"
SpringLayout.Constraints,getY(),Spring,Returns the value of the y property.,"

getY
public Spring getY()
Returns the value of the y property.

Returns:
the spring controlling the y value
         of a component's location
See Also:
setY(javax.swing.Spring), 
SpringLayout.Constraints


"
SpringLayout.Constraints,"setConstraint(String edgeName, Spring s)",void,Sets the spring controlling the specified edge.,"

setConstraint
public void setConstraint(String edgeName,
                          Spring s)
Sets the spring controlling the specified edge.
 The edge must have one of the following values:
 SpringLayout.NORTH,
 SpringLayout.SOUTH,
 SpringLayout.EAST,
 SpringLayout.WEST,
 SpringLayout.HORIZONTAL_CENTER,
 SpringLayout.VERTICAL_CENTER,
 SpringLayout.BASELINE,
 SpringLayout.WIDTH or
 SpringLayout.HEIGHT.
 For any other String value passed as the edge,
 no action is taken. For a null edge, a
 NullPointerException is thrown.
 
Note: This method can affect x and y values
 previously set for this Constraints.

Parameters:
edgeName - the edge to be set
s - the spring controlling the specified edge
Throws:
NullPointerException - if edgeName is null
See Also:
getConstraint(java.lang.String), 
SpringLayout.NORTH, 
SpringLayout.SOUTH, 
SpringLayout.EAST, 
SpringLayout.WEST, 
SpringLayout.HORIZONTAL_CENTER, 
SpringLayout.VERTICAL_CENTER, 
SpringLayout.BASELINE, 
SpringLayout.WIDTH, 
SpringLayout.HEIGHT, 
SpringLayout.Constraints


"
SpringLayout.Constraints,setHeight(Spring height),void,"Sets the height property, which controls the height of a component.","

setHeight
public void setHeight(Spring height)
Sets the height property,
 which controls the height of a component.

Parameters:
height - the spring controlling the height of this Constraints
 object
See Also:
getHeight(), 
SpringLayout.Constraints


"
SpringLayout.Constraints,setWidth(Spring width),void,"Sets the width property, which controls the width of a component.","

setWidth
public void setWidth(Spring width)
Sets the width property,
 which controls the width of a component.

Parameters:
width - the spring controlling the width of this
 Constraints object
See Also:
getWidth(), 
SpringLayout.Constraints


"
SpringLayout.Constraints,setX(Spring x),void,"Sets the x property, which controls the x value of a component's location.","

setX
public void setX(Spring x)
Sets the x property,
 which controls the x value
 of a component's location.

Parameters:
x - the spring controlling the x value
          of a component's location
See Also:
getX(), 
SpringLayout.Constraints


"
SpringLayout.Constraints,setY(Spring y),void,"Sets the y property, which controls the y value of a component's location.","

setY
public void setY(Spring y)
Sets the y property,
 which controls the y value
 of a component's location.

Parameters:
y - the spring controlling the y value
          of a component's location
See Also:
getY(), 
SpringLayout.Constraints


"
SwingUtilities,"calculateInnerArea(JComponent c, Rectangle r)",static Rectangle,Stores the position and size of the inner painting area of the specified component in r and returns r.,"

calculateInnerArea
public static Rectangle calculateInnerArea(JComponent c,
                                           Rectangle r)
Stores the position and size of
 the inner painting area of the specified component
 in r and returns r.
 The position and size specify the bounds of the component,
 adjusted so as not to include the border area (the insets).
 This method is useful for classes
 that implement painting code.

Parameters:
c - the JComponent in question; if null, this method returns null
r - the Rectangle instance to be modified;
           may be null
Returns:
null if the Component is null;
         otherwise, returns the passed-in rectangle (if non-null)
         or a new rectangle specifying position and size information
Since:
1.4


"
SwingUtilities,"computeDifference(Rectangle rectA, Rectangle rectB)",static Rectangle[],Convenience returning an array of rect representing the regions within rectA that do not overlap with rectB.,"

computeDifference
public static Rectangle[] computeDifference(Rectangle rectA,
                                            Rectangle rectB)
Convenience returning an array of rect representing the regions within
 rectA that do not overlap with rectB. If the
 two Rects do not overlap, returns an empty array

"
SwingUtilities,"computeIntersection(int x, int y, int width, int height, Rectangle dest)",static Rectangle,Convenience to calculate the intersection of two rectangles without allocating a new rectangle.,"

computeIntersection
public static Rectangle computeIntersection(int x,
                                            int y,
                                            int width,
                                            int height,
                                            Rectangle dest)
Convenience to calculate the intersection of two rectangles
 without allocating a new rectangle.
 If the two rectangles don't intersect,
 then the returned rectangle begins at (0,0)
 and has zero width and height.

Parameters:
x - the X coordinate of the first rectangle's top-left point
y - the Y coordinate of the first rectangle's top-left point
width - the width of the first rectangle
height - the height of the first rectangle
dest - the second rectangle
Returns:
dest, modified to specify the intersection


"
SwingUtilities,"computeStringWidth(FontMetrics fm, String str)",static int,"Compute the width of the string using a font with the specified ""metrics"" (sizes).","

computeStringWidth
public static int computeStringWidth(FontMetrics fm,
                                     String str)
Compute the width of the string using a font with the specified
 ""metrics"" (sizes).

Parameters:
fm - a FontMetrics object to compute with
str - the String to compute
Returns:
an int containing the string width


"
SwingUtilities,"computeUnion(int x, int y, int width, int height, Rectangle dest)",static Rectangle,Convenience method that calculates the union of two rectangles without allocating a new rectangle.,"

computeUnion
public static Rectangle computeUnion(int x,
                                     int y,
                                     int width,
                                     int height,
                                     Rectangle dest)
Convenience method that calculates the union of two rectangles
 without allocating a new rectangle.

Parameters:
x - the x-coordinate of the first rectangle
y - the y-coordinate of the first rectangle
width - the width of the first rectangle
height - the height of the first rectangle
dest - the coordinates of the second rectangle; the union
    of the two rectangles is returned in this rectangle
Returns:
the dest Rectangle


"
SwingUtilities,"convertMouseEvent(Component source, MouseEvent sourceEvent, Component destination)",static MouseEvent,Returns a MouseEvent similar to sourceEvent except that its x and y members have been converted to destination's coordinate system.,"

convertMouseEvent
public static MouseEvent convertMouseEvent(Component source,
                                           MouseEvent sourceEvent,
                                           Component destination)
Returns a MouseEvent similar to sourceEvent except that its x
 and y members have been converted to destination's coordinate
 system.  If source is null, sourceEvent x and y members
 are assumed to be into destination's root component coordinate system.
 If destination is null, the
 returned MouseEvent will be in source's coordinate system.
 sourceEvent will not be changed. A new event is returned.
 the source field of the returned event will be set
 to destination if destination is non-null
 use the translateMouseEvent() method to translate a mouse event from
 one component to another without changing the source.

"
SwingUtilities,"convertPoint(Component source, int x, int y, Component destination)",static Point,"Convert the point (x,y) in source coordinate system to destination coordinate system.","

convertPoint
public static Point convertPoint(Component source,
                                 int x,
                                 int y,
                                 Component destination)
Convert the point (x,y) in source coordinate system to
 destination coordinate system.
 If source is null, (x,y) is assumed to be in destination's
 root component coordinate system.
 If destination is null, (x,y) will be converted to source's
 root component coordinate system.
 If both source and destination are null, return (x,y)
 without any conversion.

"
SwingUtilities,"convertPoint(Component source, Point aPoint, Component destination)",static Point,Convert a aPoint in source coordinate system to destination coordinate system.,"

convertPoint
public static Point convertPoint(Component source,
                                 Point aPoint,
                                 Component destination)
Convert a aPoint in source coordinate system to
 destination coordinate system.
 If source is null, aPoint is assumed to be in destination's
 root component coordinate system.
 If destination is null, aPoint will be converted to source's
 root component coordinate system.
 If both source and destination are null, return aPoint
 without any conversion.

"
SwingUtilities,"convertPointFromScreen(Point p, Component c)",static void,Convert a point from a screen coordinates to a component's coordinate system,"

convertPointFromScreen
public static void convertPointFromScreen(Point p,
                                          Component c)
Convert a point from a screen coordinates to a component's
 coordinate system

Parameters:
p - a Point object (converted to the new coordinate system)
c - a Component object


"
SwingUtilities,"convertPointToScreen(Point p, Component c)",static void,Convert a point from a component's coordinate system to screen coordinates.,"

convertPointToScreen
public static void convertPointToScreen(Point p,
                                        Component c)
Convert a point from a component's coordinate system to
 screen coordinates.

Parameters:
p - a Point object (converted to the new coordinate system)
c - a Component object


"
SwingUtilities,"convertRectangle(Component source, Rectangle aRectangle, Component destination)",static Rectangle,Convert the rectangle aRectangle in source coordinate system to destination coordinate system.,"

convertRectangle
public static Rectangle convertRectangle(Component source,
                                         Rectangle aRectangle,
                                         Component destination)
Convert the rectangle aRectangle in source coordinate system to
 destination coordinate system.
 If source is null, aRectangle is assumed to be in destination's
 root component coordinate system.
 If destination is null, aRectangle will be converted to source's
 root component coordinate system.
 If both source and destination are null, return aRectangle
 without any conversion.

"
SwingUtilities,findFocusOwner(Component c),static Component,"Deprecated. As of 1.4, replaced by KeyboardFocusManager.getFocusOwner().","

findFocusOwner
@Deprecated
public static Component findFocusOwner(Component c)
Deprecated. As of 1.4, replaced by
   KeyboardFocusManager.getFocusOwner().
Return the child Component of the specified
 Component that is the focus owner, if any.

Parameters:
c - the root of the Component hierarchy to
        search for the focus owner
Returns:
the focus owner, or null if there is no focus
         owner, or if the focus owner is not comp, or a
         descendant of comp
See Also:
KeyboardFocusManager.getFocusOwner()


"
SwingUtilities,"getAccessibleAt(Component c, Point p)",static Accessible,"Returns the Accessible child contained at the local coordinate Point, if one exists.","

getAccessibleAt
public static Accessible getAccessibleAt(Component c,
                                         Point p)
Returns the Accessible child contained at the
 local coordinate Point, if one exists.
 Otherwise returns null.

Returns:
the Accessible at the specified location,
    if it exists; otherwise null


"
SwingUtilities,"getAccessibleChild(Component c, int i)",static Accessible,Return the nth Accessible child of the object.,"

getAccessibleChild
public static Accessible getAccessibleChild(Component c,
                                            int i)
Return the nth Accessible child of the object. 

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

Parameters:
i - zero-based index of child
Returns:
the nth Accessible child of the object


"
SwingUtilities,getAccessibleChildrenCount(Component c),static int,Returns the number of accessible children in the object.,"

getAccessibleChildrenCount
public static int getAccessibleChildrenCount(Component c)
Returns the number of accessible children in the object.  If all
 of the children of this object implement Accessible, than this
 method should return the number of children of this object. 

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

Returns:
the number of accessible children in the object.


"
SwingUtilities,getAccessibleIndexInParent(Component c),static int,Get the index of this object in its accessible parent.,"

getAccessibleIndexInParent
public static int getAccessibleIndexInParent(Component c)
Get the index of this object in its accessible parent.

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

Returns:
-1 of this object does not have an accessible parent.
 Otherwise, the index of the child in its accessible parent.


"
SwingUtilities,getAccessibleStateSet(Component c),static AccessibleStateSet,Get the state of this object.,"

getAccessibleStateSet
public static AccessibleStateSet getAccessibleStateSet(Component c)
Get the state of this object. 

 Note: as of the Java 2 platform v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
 of using this method.

Returns:
an instance of AccessibleStateSet containing the current state
 set of the object
See Also:
AccessibleState


"
SwingUtilities,"getAncestorNamed(String name, Component comp)",static Container,Convenience method for searching above comp in the component hierarchy and returns the first object of name it finds.,"

getAncestorNamed
public static Container getAncestorNamed(String name,
                                         Component comp)
Convenience method for searching above comp in the
 component hierarchy and returns the first object of name it
 finds. Can return null, if name cannot be found.

"
SwingUtilities,"getAncestorOfClass(Class<?> c, Component comp)",static Container,Convenience method for searching above comp in the component hierarchy and returns the first object of class c it finds.,"

getAncestorOfClass
public static Container getAncestorOfClass(Class<?> c,
                                           Component comp)
Convenience method for searching above comp in the
 component hierarchy and returns the first object of class c it
 finds. Can return null, if a class c cannot be found.

"
SwingUtilities,"getDeepestComponentAt(Component parent, int x, int y)",static Component,"Returns the deepest visible descendent Component of parent that contains the location x, y.","

getDeepestComponentAt
public static Component getDeepestComponentAt(Component parent,
                                              int x,
                                              int y)
Returns the deepest visible descendent Component of parent
 that contains the location x, y.
 If parent does not contain the specified location,
 then null is returned.  If parent is not a
 container, or none of parent's visible descendents
 contain the specified location, parent is returned.

Parameters:
parent - the root component to begin the search
x - the x target location
y - the y target location


"
SwingUtilities,getLocalBounds(Component aComponent),static Rectangle,"Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent","

getLocalBounds
public static Rectangle getLocalBounds(Component aComponent)
Return the rectangle (0,0,bounds.width,bounds.height) for the component aComponent

"
SwingUtilities,getRoot(Component c),static Component,Returns the root component for the current component tree.,"

getRoot
public static Component getRoot(Component c)
Returns the root component for the current component tree.

Returns:
the first ancestor of c that's a Window or the last Applet ancestor


"
SwingUtilities,getRootPane(Component c),static JRootPane,If c is a JRootPane descendant return its JRootPane ancestor.,"

getRootPane
public static JRootPane getRootPane(Component c)
If c is a JRootPane descendant return its JRootPane ancestor.
 If c is a RootPaneContainer then return its JRootPane.

Returns:
the JRootPane for Component c or null.


"
SwingUtilities,getUIActionMap(JComponent component),static ActionMap,Returns the ActionMap provided by the UI in component component.,"

getUIActionMap
public static ActionMap getUIActionMap(JComponent component)
Returns the ActionMap provided by the UI
 in component component.
 This will return null if the UI has not installed an ActionMap.

Since:
1.3


"
SwingUtilities,"getUIInputMap(JComponent component, int condition)",static InputMap,Returns the InputMap provided by the UI for condition condition in component component.,"

getUIInputMap
public static InputMap getUIInputMap(JComponent component,
                                     int condition)
Returns the InputMap provided by the UI for condition
 condition in component component.
 This will return null if the UI has not installed a InputMap
 of the specified type.

Since:
1.3


"
SwingUtilities,getUnwrappedParent(Component component),static Container,Returns the first ancestor of the component which is not an instance of JLayer.,"

getUnwrappedParent
public static Container getUnwrappedParent(Component component)
Returns the first ancestor of the component
 which is not an instance of JLayer.

Parameters:
component - Component to get
 the first ancestor of, which is not a JLayer instance.
Returns:
the first ancestor of the component
 which is not an instance of JLayer.
 If such an ancestor can not be found, null is returned.
Throws:
NullPointerException - if component is null
Since:
1.7
See Also:
JLayer


"
SwingUtilities,getUnwrappedView(JViewport viewport),static Component,Returns the first JViewport's descendant which is not an instance of JLayer.,"

getUnwrappedView
public static Component getUnwrappedView(JViewport viewport)
Returns the first JViewport's descendant
 which is not an instance of JLayer.
 If such a descendant can not be found, null is returned.

 If the viewport's view component is not a JLayer,
 this method is equivalent to JViewport.getView()
 otherwise JLayer.getView() will be recursively
 called on all descending JLayers.

Parameters:
viewport - JViewport to get the first descendant of,
 which in not a JLayer instance.
Returns:
the first JViewport's descendant
 which is not an instance of JLayer.
 If such a descendant can not be found, null is returned.
Throws:
NullPointerException - if viewport is null
Since:
1.7
See Also:
JViewport.getView(), 
JLayer


"
SwingUtilities,getWindowAncestor(Component c),static Window,"Returns the first Window ancestor of c, or null if c is not contained inside a Window.","

getWindowAncestor
public static Window getWindowAncestor(Component c)
Returns the first Window  ancestor of c, or
 null if c is not contained inside a Window.

Parameters:
c - Component to get Window ancestor
        of.
Returns:
the first Window  ancestor of c, or
         null if c is not contained inside a
         Window.
Since:
1.3


"
SwingUtilities,invokeAndWait(Runnable doRun),static void,Causes doRun.run() to be executed synchronously on the AWT event dispatching thread.,"

invokeAndWait
public static void invokeAndWait(Runnable doRun)
                          throws InterruptedException,
                                 InvocationTargetException
Causes doRun.run() to be executed synchronously on the
 AWT event dispatching thread.  This call blocks until
 all pending AWT events have been processed and (then)
 doRun.run() returns. This method should
 be used when an application thread needs to update the GUI.
 It shouldn't be called from the event dispatching thread.
 Here's an example that creates a new application thread
 that uses invokeAndWait to print a string from the event
 dispatching thread and then, when that's finished, print
 a string from the application thread.
 
 final Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 Thread appThread = new Thread() {
     public void run() {
         try {
             SwingUtilities.invokeAndWait(doHelloWorld);
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         System.out.println(""Finished on "" + Thread.currentThread());
     }
 };
 appThread.start();
 
 Note that if the Runnable.run method throws an
 uncaught exception
 (on the event dispatching thread) it's caught and rethrown, as
 an InvocationTargetException, on the caller's thread.
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for
 java.awt.EventQueue.invokeAndWait().

Throws:
InterruptedException - if we're interrupted while waiting for
             the event dispatching thread to finish executing
             doRun.run()
InvocationTargetException - if an exception is thrown
             while running doRun
See Also:
invokeLater(java.lang.Runnable)


"
SwingUtilities,invokeLater(Runnable doRun),static void,Causes doRun.run() to be executed asynchronously on the AWT event dispatching thread.,"

invokeLater
public static void invokeLater(Runnable doRun)
Causes doRun.run() to be executed asynchronously on the
 AWT event dispatching thread.  This will happen after all
 pending AWT events have been processed.  This method should
 be used when an application thread needs to update the GUI.
 In the following example the invokeLater call queues
 the Runnable object doHelloWorld
 on the event dispatching thread and
 then prints a message.
 
 Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 SwingUtilities.invokeLater(doHelloWorld);
 System.out.println(""This might well be displayed before the other message."");
 
 If invokeLater is called from the event dispatching thread --
 for example, from a JButton's ActionListener -- the doRun.run() will
 still be deferred until all pending events have been processed.
 Note that if the doRun.run() throws an uncaught exception
 the event dispatching thread will unwind (not the current thread).
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater().
 
 Unlike the rest of Swing, this method can be invoked from any thread.

See Also:
invokeAndWait(java.lang.Runnable)


"
SwingUtilities,"isDescendingFrom(Component a, Component b)",static boolean,Return true if a component a descends from a component b,"

isDescendingFrom
public static boolean isDescendingFrom(Component a,
                                       Component b)
Return true if a component a descends from a component b

"
SwingUtilities,isEventDispatchThread(),static boolean,Returns true if the current thread is an AWT event dispatching thread.,"

isEventDispatchThread
public static boolean isEventDispatchThread()
Returns true if the current thread is an AWT event dispatching thread.
 
 As of 1.3 this method is just a cover for
 java.awt.EventQueue.isDispatchThread().

Returns:
true if the current thread is an AWT event dispatching thread


"
SwingUtilities,isLeftMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the left mouse button.,"

isLeftMouseButton
public static boolean isLeftMouseButton(MouseEvent anEvent)
Returns true if the mouse event specifies the left mouse button.

Parameters:
anEvent - a MouseEvent object
Returns:
true if the left mouse button was active


"
SwingUtilities,isMiddleMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the middle mouse button.,"

isMiddleMouseButton
public static boolean isMiddleMouseButton(MouseEvent anEvent)
Returns true if the mouse event specifies the middle mouse button.

Parameters:
anEvent - a MouseEvent object
Returns:
true if the middle mouse button was active


"
SwingUtilities,"isRectangleContainingRectangle(Rectangle a, Rectangle b)",static boolean,Return true if a contains b,"

isRectangleContainingRectangle
public static final boolean isRectangleContainingRectangle(Rectangle a,
                                                           Rectangle b)
Return true if a contains b

"
SwingUtilities,isRightMouseButton(MouseEvent anEvent),static boolean,Returns true if the mouse event specifies the right mouse button.,"

isRightMouseButton
public static boolean isRightMouseButton(MouseEvent anEvent)
Returns true if the mouse event specifies the right mouse button.

Parameters:
anEvent - a MouseEvent object
Returns:
true if the right mouse button was active


"
SwingUtilities,"layoutCompoundLabel(FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)",static String,"Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string.","

layoutCompoundLabel
public static String layoutCompoundLabel(FontMetrics fm,
                                         String text,
                                         Icon icon,
                                         int verticalAlignment,
                                         int horizontalAlignment,
                                         int verticalTextPosition,
                                         int horizontalTextPosition,
                                         Rectangle viewR,
                                         Rectangle iconR,
                                         Rectangle textR,
                                         int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.  Locations are computed
 relative to the viewR rectangle.
 This layoutCompoundLabel() does not know how to handle LEADING/TRAILING
 values in horizontalTextPosition (they will default to RIGHT) and in
 horizontalAlignment (they will default to CENTER).
 Use the other version of layoutCompoundLabel() instead.

"
SwingUtilities,"layoutCompoundLabel(JComponent c, FontMetrics fm, String text, Icon icon, int verticalAlignment, int horizontalAlignment, int verticalTextPosition, int horizontalTextPosition, Rectangle viewR, Rectangle iconR, Rectangle textR, int textIconGap)",static String,"Compute and return the location of the icons origin, the location of origin of the text baseline, and a possibly clipped version of the compound labels string.","

layoutCompoundLabel
public static String layoutCompoundLabel(JComponent c,
                                         FontMetrics fm,
                                         String text,
                                         Icon icon,
                                         int verticalAlignment,
                                         int horizontalAlignment,
                                         int verticalTextPosition,
                                         int horizontalTextPosition,
                                         Rectangle viewR,
                                         Rectangle iconR,
                                         Rectangle textR,
                                         int textIconGap)
Compute and return the location of the icons origin, the
 location of origin of the text baseline, and a possibly clipped
 version of the compound labels string.  Locations are computed
 relative to the viewR rectangle.
 The JComponents orientation (LEADING/TRAILING) will also be taken
 into account and translated into LEFT/RIGHT values accordingly.

"
SwingUtilities,"notifyAction(Action action, KeyStroke ks, KeyEvent event, Object sender, int modifiers)",static boolean,Invokes actionPerformed on action if action is enabled (and non-null).,"

notifyAction
public static boolean notifyAction(Action action,
                                   KeyStroke ks,
                                   KeyEvent event,
                                   Object sender,
                                   int modifiers)
Invokes actionPerformed on action if
 action is enabled (and non-null). The command for the
 ActionEvent is determined by:
 
If the action was registered via
       registerKeyboardAction, then the command string
       passed in (null will be used if null was passed in).
   Action value with name Action.ACTION_COMMAND_KEY, unless null.
   String value of the KeyEvent, unless getKeyChar
       returns KeyEvent.CHAR_UNDEFINED..
 
 This will return true if action is non-null and
 actionPerformed is invoked on it.

Since:
1.3


"
SwingUtilities,"paintComponent(Graphics g, Component c, Container p, int x, int y, int w, int h)",static void,Paints a component to the specified Graphics.,"

paintComponent
public static void paintComponent(Graphics g,
                                  Component c,
                                  Container p,
                                  int x,
                                  int y,
                                  int w,
                                  int h)
Paints a component to the specified Graphics.
 This method is primarily useful to render
 Components that don't exist as part of the visible
 containment hierarchy, but are used for rendering.  For
 example, if you are doing your own rendering and want to render
 some text (or even HTML), you could make use of
 JLabel's text rendering support and have it paint
 directly by way of this method, without adding the label to the
 visible containment hierarchy.
 
 This method makes use of CellRendererPane to handle
 the actual painting, and is only recommended if you use one
 component for rendering.  If you make use of multiple components
 to handle the rendering, as JTable does, use
 CellRendererPane directly.  Otherwise, as described
 below, you could end up with a CellRendererPane
 per Component.
 
 If c's parent is not a CellRendererPane,
 a new CellRendererPane is created, c is
 added to it, and the CellRendererPane is added to
 p.  If c's parent is a
 CellRendererPane and the CellRendererPanes
 parent is not p, it is added to p.
 
 The component should either descend from JComponent
 or be another kind of lightweight component.
 A lightweight component is one whose ""lightweight"" property
 (returned by the Component
isLightweight method)
 is true. If the Component is not lightweight, bad things map happen:
 crashes, exceptions, painting problems...

Parameters:
g - the Graphics object to draw on
c - the Component to draw
p - the intermediate Container
x - an int specifying the left side of the area draw in, in pixels,
           measured from the left edge of the graphics context
y - an int specifying the top of the area to draw in, in pixels
           measured down from the top edge of the graphics context
w - an int specifying the width of the area draw in, in pixels
h - an int specifying the height of the area draw in, in pixels
See Also:
CellRendererPane, 
Component.isLightweight()


"
SwingUtilities,"paintComponent(Graphics g, Component c, Container p, Rectangle r)",static void,Paints a component to the specified Graphics.,"

paintComponent
public static void paintComponent(Graphics g,
                                  Component c,
                                  Container p,
                                  Rectangle r)
Paints a component to the specified Graphics.  This
 is a cover method for
 paintComponent(Graphics,Component,Container,int,int,int,int).
 Refer to it for more information.

Parameters:
g - the Graphics object to draw on
c - the Component to draw
p - the intermediate Container
r - the Rectangle to draw in
See Also:
paintComponent(Graphics,Component,Container,int,int,int,int), 
CellRendererPane


"
SwingUtilities,processKeyBindings(KeyEvent event),static boolean,Process the key bindings for the Component associated with event.,"

processKeyBindings
public static boolean processKeyBindings(KeyEvent event)
Process the key bindings for the Component associated with
 event. This method is only useful if
 event.getComponent() does not descend from
 JComponent, or your are not invoking
 super.processKeyEvent from within your
 JComponent subclass. JComponent
 automatically processes bindings from within its
 processKeyEvent method, hence you rarely need
 to directly invoke this method.

Parameters:
event - KeyEvent used to identify which bindings to process, as
              well as which Component has focus.
Returns:
true if a binding has found and processed
Since:
1.4


"
SwingUtilities,"replaceUIActionMap(JComponent component, ActionMap uiActionMap)",static void,Convenience method to change the UI ActionMap for component to uiActionMap.,"

replaceUIActionMap
public static void replaceUIActionMap(JComponent component,
                                      ActionMap uiActionMap)
Convenience method to change the UI ActionMap for component
 to uiActionMap. If uiActionMap is null,
 this removes any previously installed UI ActionMap.

Since:
1.3


"
SwingUtilities,"replaceUIInputMap(JComponent component, int type, InputMap uiInputMap)",static void,Convenience method to change the UI InputMap for component to uiInputMap.,"

replaceUIInputMap
public static void replaceUIInputMap(JComponent component,
                                     int type,
                                     InputMap uiInputMap)
Convenience method to change the UI InputMap for component
 to uiInputMap. If uiInputMap is null,
 this removes any previously installed UI InputMap.

Since:
1.3


"
SwingUtilities,updateComponentTreeUI(Component c),static void,"A simple minded look and feel change: ask each node in the tree to updateUI() -- that is, to initialize its UI property with the current look and feel.","

updateComponentTreeUI
public static void updateComponentTreeUI(Component c)
A simple minded look and feel change: ask each node in the tree
 to updateUI() -- that is, to initialize its UI property
 with the current look and feel.

"
SwingUtilities,windowForComponent(Component c),static Window,"Returns the first Window ancestor of c, or null if c is not contained inside a Window.","

windowForComponent
public static Window windowForComponent(Component c)
Returns the first Window  ancestor of c, or
 null if c is not contained inside a Window.
 
 Note: This method provides the same functionality as
 getWindowAncestor.

Parameters:
c - Component to get Window ancestor
        of.
Returns:
the first Window  ancestor of c, or
         null if c is not contained inside a
         Window.


"
SwingWorker,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public final void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list. The listener
 is registered for all properties. The same listener object may be added
 more than once, and will be called as many times as it is added. If
 listener is null, no exception is thrown and no action is taken.

 
 Note: This is merely a convenience wrapper. All work is delegated to
 PropertyChangeSupport from getPropertyChangeSupport().

Parameters:
listener - the PropertyChangeListener to be added


"
SwingWorker,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.,"

cancel
public final boolean cancel(boolean mayInterruptIfRunning)
Attempts to cancel execution of this task.  This attempt will
 fail if the task has already completed, has already been cancelled,
 or could not be cancelled for some other reason. If successful,
 and this task has not started when cancel is called,
 this task should never run.  If the task has already started,
 then the mayInterruptIfRunning parameter determines
 whether the thread executing this task should be interrupted in
 an attempt to stop the task.

 After this method returns, subsequent calls to Future.isDone() will
 always return true.  Subsequent calls to Future.isCancelled()
 will always return true if this method returned true.

Specified by:
cancel in interface Future<T>
Parameters:
mayInterruptIfRunning - true if the thread executing this
 task should be interrupted; otherwise, in-progress tasks are allowed
 to complete
Returns:
false if the task could not be cancelled,
 typically because it has already completed normally;
 true otherwise


"
SwingWorker,doInBackground(),protected abstract T,"Computes a result, or throws an exception if unable to do so.","

doInBackground
protected abstract T doInBackground()
                             throws Exception
Computes a result, or throws an exception if unable to do so.

 
 Note that this method is executed only once.

 
 Note: this method is executed in a background thread.

Returns:
the computed result
Throws:
Exception - if unable to compute a result


"
SwingWorker,done(),protected void,Executed on the Event Dispatch Thread after the doInBackground method is finished.,"

done
protected void done()
Executed on the Event Dispatch Thread after the doInBackground
 method is finished. The default
 implementation does nothing. Subclasses may override this method to
 perform completion actions on the Event Dispatch Thread. Note
 that you can query status inside the implementation of this method to
 determine the result of this task or whether this task has been cancelled.

See Also:
doInBackground(), 
isCancelled(), 
get()


"
SwingWorker,execute(),void,Schedules this SwingWorker for execution on a worker thread.,"

execute
public final void execute()
Schedules this SwingWorker for execution on a worker
 thread. There are a number of worker threads available. In the
 event all worker threads are busy handling other
 SwingWorkers this SwingWorker is placed in a waiting
 queue.

 
 Note:
 SwingWorker is only designed to be executed once.  Executing a
 SwingWorker more than once will not result in invoking the
 doInBackground method twice.

"
SwingWorker,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",void,Reports a bound property update to any registered listeners.,"

firePropertyChange
public final void firePropertyChange(String propertyName,
                                     Object oldValue,
                                     Object newValue)
Reports a bound property update to any registered listeners. No event is
 fired if old and new are equal and non-null.

 
 This SwingWorker will be the source for
 any generated events.

 
 When called off the Event Dispatch Thread
PropertyChangeListeners are notified asynchronously on
 the Event Dispatch Thread.
 
 Note: This is merely a convenience wrapper. All work is delegated to
 PropertyChangeSupport from getPropertyChangeSupport().

Parameters:
propertyName - the programmatic name of the property that was
        changed
oldValue - the old value of the property
newValue - the new value of the property


"
SwingWorker,get(),T,"Waits if necessary for the computation to complete, and then retrieves its result.","

get
public final T get()
            throws InterruptedException,
                   ExecutionException
Waits if necessary for the computation to complete, and then
 retrieves its result.
 
 Note: calling get on the Event Dispatch Thread blocks
 all events, including repaints, from being processed until this
 SwingWorker is complete.

 
 When you want the SwingWorker to block on the Event
 Dispatch Thread we recommend that you use a modal dialog.

 
 For example:

 
 class SwingWorkerCompletionWaiter extends PropertyChangeListener {
     private JDialog dialog;

     public SwingWorkerCompletionWaiter(JDialog dialog) {
         this.dialog = dialog;
     }

     public void propertyChange(PropertyChangeEvent event) {
         if (""state"".equals(event.getPropertyName())
                 && SwingWorker.StateValue.DONE == event.getNewValue()) {
             dialog.setVisible(false);
             dialog.dispose();
         }
     }
 }
 JDialog dialog = new JDialog(owner, true);
 swingWorker.addPropertyChangeListener(
     new SwingWorkerCompletionWaiter(dialog));
 swingWorker.execute();
 //the dialog will be visible until the SwingWorker is done
 dialog.setVisible(true);
 

Specified by:
get in interface Future<T>
Returns:
the computed result
Throws:
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception


"
SwingWorker,"get(long timeout, TimeUnit unit)",T,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","

get
public final T get(long timeout,
                   TimeUnit unit)
            throws InterruptedException,
                   ExecutionException,
                   TimeoutException
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.
 
 Please refer to get() for more details.

Specified by:
get in interface Future<T>
Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the computed result
Throws:
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception
TimeoutException - if the wait timed out


"
SwingWorker,getProgress(),int,Returns the progress bound property.,"

getProgress
public final int getProgress()
Returns the progress bound property.

Returns:
the progress bound property.


"
SwingWorker,getPropertyChangeSupport(),PropertyChangeSupport,Returns the PropertyChangeSupport for this SwingWorker.,"

getPropertyChangeSupport
public final PropertyChangeSupport getPropertyChangeSupport()
Returns the PropertyChangeSupport for this SwingWorker.
 This method is used when flexible access to bound properties support is
 needed.
 
 This SwingWorker will be the source for
 any generated events.

 
 Note: The returned PropertyChangeSupport notifies any
 PropertyChangeListeners asynchronously on the Event Dispatch
 Thread in the event that firePropertyChange or
 fireIndexedPropertyChange are called off the Event Dispatch
 Thread.

Returns:
PropertyChangeSupport for this SwingWorker


"
SwingWorker,getState(),SwingWorker.StateValue,Returns the SwingWorker state bound property.,"

getState
public final SwingWorker.StateValue getState()
Returns the SwingWorker state bound property.

Returns:
the current state


"
SwingWorker,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.,"

isCancelled
public final boolean isCancelled()
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<T>
Returns:
true if this task was cancelled before it completed


"
SwingWorker,isDone(),boolean,Returns true if this task completed.,"

isDone
public final boolean isDone()
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<T>
Returns:
true if this task completed


"
SwingWorker,process(List<V> chunks),protected void,Receives data chunks from the publish method asynchronously on the Event Dispatch Thread.,"

process
protected void process(List<V> chunks)
Receives data chunks from the publish method asynchronously on the
 Event Dispatch Thread.

 
 Please refer to the publish(V...) method for more details.

Parameters:
chunks - intermediate results to process
See Also:
publish(V...)


"
SwingWorker,publish(V... chunks),protected void,Sends data chunks to the process(java.util.List<V>) method.,"

publish
@SafeVarargs
protected final void publish(V... chunks)
Sends data chunks to the process(java.util.List<V>) method. This method is to be
 used from inside the doInBackground method to deliver
 intermediate results
 for processing on the Event Dispatch Thread inside the
 process method.

 
 Because the process method is invoked asynchronously on
 the Event Dispatch Thread
 multiple invocations to the publish method
 might occur before the process method is executed. For
 performance purposes all these invocations are coalesced into one
 invocation with concatenated arguments.

 
 For example:

 
 publish(""1"");
 publish(""2"", ""3"");
 publish(""4"", ""5"", ""6"");
 

 might result in:

 
 process(""1"", ""2"", ""3"", ""4"", ""5"", ""6"")
 

Sample Usage. This code snippet loads some tabular data and
 updates DefaultTableModel with it. Note that it safe to mutate
 the tableModel from inside the process method because it is
 invoked on the Event Dispatch Thread.

 
 class TableSwingWorker extends
         SwingWorker<DefaultTableModel, Object[]> {
     private final DefaultTableModel tableModel;

     public TableSwingWorker(DefaultTableModel tableModel) {
         this.tableModel = tableModel;
     }

      @Override
     protected DefaultTableModel doInBackground() throws Exception {
         for (Object[] row = loadData();
                  ! isCancelled() && row != null;
                  row = loadData()) {
             publish((Object[]) row);
         }
         return tableModel;
     }

      @Override
     protected void process(List<Object[]> chunks) {
         for (Object[] row : chunks) {
             tableModel.addRow(row);
         }
     }
 }
 

Parameters:
chunks - intermediate results to process
See Also:
process(java.util.List<V>)


"
SwingWorker,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public final void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list. This
 removes a PropertyChangeListener that was registered for all
 properties. If listener was added more than once to the same
 event source, it will be notified one less time after being removed. If
 listener is null, or was never added, no exception is
 thrown and no action is taken.

 
 Note: This is merely a convenience wrapper. All work is delegated to
 PropertyChangeSupport from getPropertyChangeSupport().

Parameters:
listener - the PropertyChangeListener to be removed


"
SwingWorker,run(),void,Sets this Future to the result of computation unless it has been cancelled.,"

run
public final void run()
Sets this Future to the result of computation unless
 it has been cancelled.

Specified by:
run in interface Runnable
Specified by:
run in interface RunnableFuture<T>
See Also:
Thread.run()


"
SwingWorker,setProgress(int progress),protected void,Sets the progress bound property.,"

setProgress
protected final void setProgress(int progress)
Sets the progress bound property.
 The value should be from 0 to 100.

 
 Because PropertyChangeListeners are notified asynchronously on
 the Event Dispatch Thread multiple invocations to the
 setProgress method might occur before any
 PropertyChangeListeners are invoked. For performance purposes
 all these invocations are coalesced into one invocation with the last
 invocation argument only.

 
 For example, the following invokations:

 
 setProgress(1);
 setProgress(2);
 setProgress(3);
 

 might result in a single PropertyChangeListener notification with
 the value 3.

Parameters:
progress - the progress value to set
Throws:
IllegalArgumentException - is value not from 0 to 100


"
Timer,addActionListener(ActionListener listener),void,Adds an action listener to the Timer.,"

addActionListener
public void addActionListener(ActionListener listener)
Adds an action listener to the Timer.

Parameters:
listener - the listener to add
See Also:
Timer(int, java.awt.event.ActionListener)


"
Timer,fireActionPerformed(ActionEvent e),protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireActionPerformed
protected void fireActionPerformed(ActionEvent e)
Notifies all listeners that have registered interest for
 notification on this event type.

Parameters:
e - the action event to fire
See Also:
EventListenerList


"
Timer,getActionCommand(),String,Returns the string that will be delivered as the action command in ActionEvents fired by this timer.,"

getActionCommand
public String getActionCommand()
Returns the string that will be delivered as the action command
 in ActionEvents fired by this timer. May be
 null, which is also the default.

Returns:
the action command used in firing events
Since:
1.6


"
Timer,getActionListeners(),ActionListener[],Returns an array of all the action listeners registered on this timer.,"

getActionListeners
public ActionListener[] getActionListeners()
Returns an array of all the action listeners registered
 on this timer.

Returns:
all of the timer's ActionListeners or an empty
         array if no action listeners are currently registered
Since:
1.4
See Also:
addActionListener(java.awt.event.ActionListener), 
removeActionListener(java.awt.event.ActionListener)


"
Timer,getDelay(),int,"Returns the delay, in milliseconds, between firings of action events.","

getDelay
public int getDelay()
Returns the delay, in milliseconds,
 between firings of action events.

See Also:
setDelay(int), 
getInitialDelay()


"
Timer,getInitialDelay(),int,Returns the Timer's initial delay.,"

getInitialDelay
public int getInitialDelay()
Returns the Timer's initial delay.

See Also:
setInitialDelay(int), 
setDelay(int)


"
Timer,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this Timer.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered as
 FooListeners
 upon this Timer.
 FooListeners
 are registered using the addFooListener method.
 
 You can specify the listenerType argument
 with a class literal, such as FooListener.class.
 For example, you can query a Timer
 instance t
 for its action listeners
 with the following code:

 ActionListener[] als = (ActionListener[])(t.getListeners(ActionListener.class));

 If no such listeners exist,
 this method returns an empty array.

Parameters:
listenerType - the type of listeners requested;
          this parameter should specify an interface
          that descends from java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners
          on this timer,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType doesn't
          specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getActionListeners(), 
addActionListener(java.awt.event.ActionListener), 
removeActionListener(java.awt.event.ActionListener)


"
Timer,getLogTimers(),static boolean,Returns true if logging is enabled.,"

getLogTimers
public static boolean getLogTimers()
Returns true if logging is enabled.

Returns:
true if logging is enabled; otherwise, false
See Also:
setLogTimers(boolean)


"
Timer,isCoalesce(),boolean,Returns true if the Timer coalesces multiple pending action events.,"

isCoalesce
public boolean isCoalesce()
Returns true if the Timer coalesces
 multiple pending action events.

See Also:
setCoalesce(boolean)


"
Timer,isRepeats(),boolean,Returns true (the default) if the Timer will send an action event to its listeners multiple times.,"

isRepeats
public boolean isRepeats()
Returns true (the default)
 if the Timer will send
 an action event
 to its listeners multiple times.

See Also:
setRepeats(boolean)


"
Timer,isRunning(),boolean,Returns true if the Timer is running.,"

isRunning
public boolean isRunning()
Returns true if the Timer is running.

See Also:
start()


"
Timer,removeActionListener(ActionListener listener),void,Removes the specified action listener from the Timer.,"

removeActionListener
public void removeActionListener(ActionListener listener)
Removes the specified action listener from the Timer.

Parameters:
listener - the listener to remove


"
Timer,restart(),void,"Restarts the Timer, canceling any pending firings and causing it to fire with its initial delay.","

restart
public void restart()
Restarts the Timer,
 canceling any pending firings and causing
 it to fire with its initial delay.

"
Timer,setActionCommand(String command),void,Sets the string that will be delivered as the action command in ActionEvents fired by this timer.,"

setActionCommand
public void setActionCommand(String command)
Sets the string that will be delivered as the action command
 in ActionEvents fired by this timer.
 null is an acceptable value.

Parameters:
command - the action command
Since:
1.6


"
Timer,setCoalesce(boolean flag),void,Sets whether the Timer coalesces multiple pending ActionEvent firings.,"

setCoalesce
public void setCoalesce(boolean flag)
Sets whether the Timer coalesces multiple pending
 ActionEvent firings.
 A busy application may not be able
 to keep up with a Timer's event generation,
 causing multiple
 action events to be queued.  When processed,
 the application sends these events one after the other, causing the
 Timer's listeners to receive a sequence of
 events with no delay between them. Coalescing avoids this situation
 by reducing multiple pending events to a single event.
 Timers
 coalesce events by default.

Parameters:
flag - specify false to turn off coalescing


"
Timer,setDelay(int delay),void,"Sets the Timer's between-event delay, the number of milliseconds between successive action events.","

setDelay
public void setDelay(int delay)
Sets the Timer's between-event delay, the number of milliseconds
 between successive action events. This does not affect the initial delay
 property, which can be set by the setInitialDelay method.

Parameters:
delay - the delay in milliseconds
See Also:
setInitialDelay(int)


"
Timer,setInitialDelay(int initialDelay),void,"Sets the Timer's initial delay, the time in milliseconds to wait after the timer is started before firing the first event.","

setInitialDelay
public void setInitialDelay(int initialDelay)
Sets the Timer's initial delay, the time
 in milliseconds to wait after the timer is started
 before firing the first event. Upon construction, this
 is set to be the same as the between-event delay,
 but then its value is independent and remains unaffected
 by changes to the between-event delay.

Parameters:
initialDelay - the initial delay, in milliseconds
See Also:
setDelay(int)


"
Timer,setLogTimers(boolean flag),static void,Enables or disables the timer log.,"

setLogTimers
public static void setLogTimers(boolean flag)
Enables or disables the timer log. When enabled, a message
 is posted to System.out whenever the timer goes off.

Parameters:
flag - true to enable logging
See Also:
getLogTimers()


"
Timer,setRepeats(boolean flag),void,"If flag is false, instructs the Timer to send only one action event to its listeners.","

setRepeats
public void setRepeats(boolean flag)
If flag is false,
 instructs the Timer to send only one
 action event to its listeners.

Parameters:
flag - specify false to make the timer
             stop after sending its first action event


"
Timer,start(),void,"Starts the Timer, causing it to start sending action events to its listeners.","

start
public void start()
Starts the Timer,
 causing it to start sending action events
 to its listeners.

See Also:
stop()


"
Timer,stop(),void,"Stops the Timer, causing it to stop sending action events to its listeners.","

stop
public void stop()
Stops the Timer,
 causing it to stop sending action events
 to its listeners.

See Also:
start()


"
ToolTipManager,getDismissDelay(),int,Returns the dismissal delay value.,"

getDismissDelay
public int getDismissDelay()
Returns the dismissal delay value.

Returns:
an integer representing the dismissal delay value,
          in milliseconds
See Also:
setDismissDelay(int)


"
ToolTipManager,getInitialDelay(),int,Returns the initial delay value.,"

getInitialDelay
public int getInitialDelay()
Returns the initial delay value.

Returns:
an integer representing the initial delay value,
          in milliseconds
See Also:
setInitialDelay(int)


"
ToolTipManager,getReshowDelay(),int,Returns the reshow delay property.,"

getReshowDelay
public int getReshowDelay()
Returns the reshow delay property.

Returns:
reshown delay property
See Also:
setReshowDelay(int)


"
ToolTipManager,isEnabled(),boolean,Returns true if this object is enabled.,"

isEnabled
public boolean isEnabled()
Returns true if this object is enabled.

Returns:
true if this object is enabled, false otherwise


"
ToolTipManager,isLightWeightPopupEnabled(),boolean,"Returns true if lightweight (all-Java) Tooltips are in use, or false if heavyweight (native peer) Tooltips are being used.","

isLightWeightPopupEnabled
public boolean isLightWeightPopupEnabled()
Returns true if lightweight (all-Java) Tooltips
 are in use, or false if heavyweight (native peer)
 Tooltips are being used.

Returns:
true if lightweight ToolTips are in use


"
ToolTipManager,mouseDragged(MouseEvent event),void,Called when the mouse is pressed and dragged.,"

mouseDragged
public void mouseDragged(MouseEvent event)
Called when the mouse is pressed and dragged.
  Does nothing.

Specified by:
mouseDragged in interface MouseMotionListener
Overrides:
mouseDragged in class MouseAdapter
Parameters:
event - the event in question


"
ToolTipManager,mouseEntered(MouseEvent event),void,Called when the mouse enters the region of a component.,"

mouseEntered
public void mouseEntered(MouseEvent event)
Called when the mouse enters the region of a component.
  This determines whether the tool tip should be shown.

Specified by:
mouseEntered in interface MouseListener
Overrides:
mouseEntered in class MouseAdapter
Parameters:
event - the event in question


"
ToolTipManager,mouseExited(MouseEvent event),void,Called when the mouse exits the region of a component.,"

mouseExited
public void mouseExited(MouseEvent event)
Called when the mouse exits the region of a component.
  Any tool tip showing should be hidden.

Specified by:
mouseExited in interface MouseListener
Overrides:
mouseExited in class MouseAdapter
Parameters:
event - the event in question


"
ToolTipManager,mouseMoved(MouseEvent event),void,Called when the mouse is moved.,"

mouseMoved
public void mouseMoved(MouseEvent event)
Called when the mouse is moved.
  Determines whether the tool tip should be displayed.

Specified by:
mouseMoved in interface MouseMotionListener
Overrides:
mouseMoved in class MouseAdapter
Parameters:
event - the event in question


"
ToolTipManager,mousePressed(MouseEvent event),void,Called when the mouse is pressed.,"

mousePressed
public void mousePressed(MouseEvent event)
Called when the mouse is pressed.
  Any tool tip showing should be hidden.

Specified by:
mousePressed in interface MouseListener
Overrides:
mousePressed in class MouseAdapter
Parameters:
event - the event in question


"
ToolTipManager,registerComponent(JComponent component),void,Registers a component for tooltip management.,"

registerComponent
public void registerComponent(JComponent component)
Registers a component for tooltip management.
 
 This will register key bindings to show and hide the tooltip text
 only if component has focus bindings. This is done
 so that components that are not normally focus traversable, such
 as JLabel, are not made focus traversable as a result
 of invoking this method.

Parameters:
component - a JComponent object to add
See Also:
Component.isFocusTraversable()


"
ToolTipManager,setDismissDelay(int milliseconds),void,Specifies the dismissal delay value.,"

setDismissDelay
public void setDismissDelay(int milliseconds)
Specifies the dismissal delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        before taking away the tooltip
See Also:
getDismissDelay()


"
ToolTipManager,setEnabled(boolean flag),void,Enables or disables the tooltip.,"

setEnabled
public void setEnabled(boolean flag)
Enables or disables the tooltip.

Parameters:
flag - true to enable the tip, false otherwise


"
ToolTipManager,setInitialDelay(int milliseconds),void,Specifies the initial delay value.,"

setInitialDelay
public void setInitialDelay(int milliseconds)
Specifies the initial delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        (after the cursor has paused) before displaying the
        tooltip
See Also:
getInitialDelay()


"
ToolTipManager,setLightWeightPopupEnabled(boolean aFlag),void,"When displaying the JToolTip, the ToolTipManager chooses to use a lightweight JPanel if it fits.","

setLightWeightPopupEnabled
public void setLightWeightPopupEnabled(boolean aFlag)
When displaying the JToolTip, the
 ToolTipManager chooses to use a lightweight
 JPanel if it fits. This method allows you to
 disable this feature. You have to do disable it if your
 application mixes light weight and heavy weights components.

Parameters:
aFlag - true if a lightweight panel is desired, false otherwise


"
ToolTipManager,setReshowDelay(int milliseconds),void,Used to specify the amount of time before the user has to wait initialDelay milliseconds before a tooltip will be shown.,"

setReshowDelay
public void setReshowDelay(int milliseconds)
Used to specify the amount of time before the user has to wait
 initialDelay milliseconds before a tooltip will be
 shown. That is, if the tooltip is hidden, and the user moves into
 a region of the same Component that has a valid tooltip within
 milliseconds milliseconds the tooltip will immediately
 be shown. Otherwise, if the user moves into a region with a valid
 tooltip after milliseconds milliseconds, the user
 will have to wait an additional initialDelay
 milliseconds before the tooltip is shown again.

Parameters:
milliseconds - time in milliseconds
See Also:
getReshowDelay()


"
ToolTipManager,sharedInstance(),static ToolTipManager,Returns a shared ToolTipManager instance.,"

sharedInstance
public static ToolTipManager sharedInstance()
Returns a shared ToolTipManager instance.

Returns:
a shared ToolTipManager object


"
ToolTipManager,unregisterComponent(JComponent component),void,Removes a component from tooltip control.,"

unregisterComponent
public void unregisterComponent(JComponent component)
Removes a component from tooltip control.

Parameters:
component - a JComponent object to remove


"
TransferHandler,"canImport(JComponent comp, DataFlavor[] transferFlavors)",boolean,Indicates whether a component will accept an import of the given set of data flavors prior to actually attempting to import it.,"

canImport
public boolean canImport(JComponent comp,
                         DataFlavor[] transferFlavors)
Indicates whether a component will accept an import of the given
 set of data flavors prior to actually attempting to import it.
 
 Note: Swing now calls the newer version of canImport
 that takes a TransferSupport, which in turn calls this
 method (only if the component in the TransferSupport is a
 JComponent). Developers are encouraged to call and override the
 newer version as it provides more information (and is the only
 version that supports use with a TransferHandler set directly
 on a JFrame or other non-JComponent).

Parameters:
comp - the component to receive the transfer;
              provided to enable sharing of TransferHandlers
transferFlavors - the data formats available
Returns:
true if the data can be inserted into the component, false otherwise
See Also:
canImport(TransferHandler.TransferSupport)


"
TransferHandler,canImport(TransferHandler.TransferSupport support),boolean,"This method is called repeatedly during a drag and drop operation to allow the developer to configure properties of, and to return the acceptability of transfers; with a return value of true indicating that the transfer represented by the given TransferSupport (which contains all of the details of the transfer) is acceptable at the current time, and a value of false rejecting the transfer.","

canImport
public boolean canImport(TransferHandler.TransferSupport support)
This method is called repeatedly during a drag and drop operation
 to allow the developer to configure properties of, and to return
 the acceptability of transfers; with a return value of true
 indicating that the transfer represented by the given
 TransferSupport (which contains all of the details of the
 transfer) is acceptable at the current time, and a value of false
 rejecting the transfer.
 
 For those components that automatically display a drop location during
 drag and drop, accepting the transfer, by default, tells them to show
 the drop location. This can be changed by calling
 setShowDropLocation on the TransferSupport.
 
 By default, when the transfer is accepted, the chosen drop action is that
 picked by the user via their drag gesture. The developer can override
 this and choose a different action, from the supported source
 actions, by calling setDropAction on the TransferSupport.
 
 On every call to canImport, the TransferSupport contains
 fresh state. As such, any properties set on it must be set on every
 call. Upon a drop, canImport is called one final time before
 calling into importData. Any state set on the
 TransferSupport during that last call will be available in
 importData.
 
 This method is not called internally in response to paste operations.
 As such, it is recommended that implementations of importData
 explicitly call this method for such cases and that this method
 be prepared to return the suitability of paste operations as well.
 
 Note: The TransferSupport object passed to this method
 is only valid for the duration of the method call. It is undefined
 what values it may contain after this method returns.

Parameters:
support - the object containing the details of
        the transfer, not null.
Returns:
true if the import can happen,
         false otherwise
Throws:
NullPointerException - if support is null
Since:
1.6
See Also:
importData(TransferHandler.TransferSupport), 
TransferHandler.TransferSupport.setShowDropLocation(boolean), 
TransferHandler.TransferSupport.setDropAction(int)


"
TransferHandler,createTransferable(JComponent c),protected Transferable,Creates a Transferable to use as the source for a data transfer.,"

createTransferable
protected Transferable createTransferable(JComponent c)
Creates a Transferable to use as the source for
 a data transfer. Returns the representation of the data to
 be transferred, or null if the component's
 property is null

Parameters:
c - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
Returns:
the representation of the data to be transferred, or
  null if the property associated with c
  is null


"
TransferHandler,"exportAsDrag(JComponent comp, InputEvent e, int action)",void,Causes the Swing drag support to be initiated.,"

exportAsDrag
public void exportAsDrag(JComponent comp,
                         InputEvent e,
                         int action)
Causes the Swing drag support to be initiated.  This is called by
 the various UI implementations in the javax.swing.plaf.basic
 package if the dragEnabled property is set on the component.
 This can be called by custom UI
 implementations to use the Swing drag support.  This method can also be called
 by a Swing extension written as a subclass of JComponent
 to take advantage of the Swing drag support.
 
 The transfer will not necessarily have been completed at the
 return of this call (i.e. the call does not block waiting for the drop).
 The transfer will take place through the Swing implementation of the
 java.awt.dnd mechanism, requiring no further effort
 from the developer. The exportDone method will be called
 when the transfer has completed.

Parameters:
comp - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
e - the event that triggered the transfer
action - the transfer action initially requested;
               either COPY, MOVE or LINK;
               the DnD system may change the action used during the
               course of the drag operation


"
TransferHandler,"exportDone(JComponent source, Transferable data, int action)",protected void,Invoked after data has been exported.,"

exportDone
protected void exportDone(JComponent source,
                          Transferable data,
                          int action)
Invoked after data has been exported.  This method should remove
 the data that was transferred if the action was MOVE.
 
 This method is implemented to do nothing since MOVE
 is not a supported action of this implementation
 (getSourceActions does not include MOVE).

Parameters:
source - the component that was the source of the data
data - The data that was transferred or possibly null
               if the action is NONE.
action - the actual action that was performed


"
TransferHandler,"exportToClipboard(JComponent comp, Clipboard clip, int action)",void,Causes a transfer from the given component to the given clipboard.,"

exportToClipboard
public void exportToClipboard(JComponent comp,
                              Clipboard clip,
                              int action)
                       throws IllegalStateException
Causes a transfer from the given component to the
 given clipboard.  This method is called by the default cut and
 copy actions registered in a component's action map.
 
 The transfer will take place using the java.awt.datatransfer
 mechanism, requiring no further effort from the developer. Any data
 transfer will be complete and the exportDone
 method will be called with the action that occurred, before this method
 returns. Should the clipboard be unavailable when attempting to place
 data on it, the IllegalStateException thrown by
 Clipboard.setContents(Transferable, ClipboardOwner) will
 be propagated through this method. However,
 exportDone will first be called with an action
 of NONE for consistency.

Parameters:
comp - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
clip - the clipboard to transfer the data into
action - the transfer action requested; this should
  be a value of either COPY or MOVE;
  the operation performed is the intersection  of the transfer
  capabilities given by getSourceActions and the requested action;
  the intersection may result in an action of NONE
  if the requested action isn't supported
Throws:
IllegalStateException - if the clipboard is currently unavailable
See Also:
Clipboard.setContents(Transferable, ClipboardOwner)


"
TransferHandler,getCopyAction(),static Action,Returns an Action that performs copy operations to the clipboard.,"

getCopyAction
public static Action getCopyAction()
Returns an Action that performs copy operations to the
 clipboard. When performed, this action operates on the JComponent
 source of the ActionEvent by invoking exportToClipboard,
 with a COPY action, on the component's TransferHandler.

Returns:
an Action for performing copies to the clipboard


"
TransferHandler,getCutAction(),static Action,Returns an Action that performs cut operations to the clipboard.,"

getCutAction
public static Action getCutAction()
Returns an Action that performs cut operations to the
 clipboard. When performed, this action operates on the JComponent
 source of the ActionEvent by invoking exportToClipboard,
 with a MOVE action, on the component's TransferHandler.

Returns:
an Action for performing cuts to the clipboard


"
TransferHandler,getDragImage(),Image,Returns the drag image.,"

getDragImage
public Image getDragImage()
Returns the drag image. If there is no image to drag,
 the returned value is null.

Returns:
the reference to the drag image


"
TransferHandler,getDragImageOffset(),Point,Returns an anchor offset for the image to drag.,"

getDragImageOffset
public Point getDragImageOffset()
Returns an anchor offset for the image to drag.

Returns:
a Point object that corresponds
 to coordinates of an anchor offset of the image
 relative to the upper left corner of the image.
 The point (0,0) returns by default.


"
TransferHandler,getPasteAction(),static Action,Returns an Action that performs paste operations from the clipboard.,"

getPasteAction
public static Action getPasteAction()
Returns an Action that performs paste operations from the
 clipboard. When performed, this action operates on the JComponent
 source of the ActionEvent by invoking importData,
 with the clipboard contents, on the component's TransferHandler.

Returns:
an Action for performing pastes from the clipboard


"
TransferHandler,getSourceActions(JComponent c),int,"Returns the type of transfer actions supported by the source; any bitwise-OR combination of COPY, MOVE and LINK.","

getSourceActions
public int getSourceActions(JComponent c)
Returns the type of transfer actions supported by the source;
 any bitwise-OR combination of COPY, MOVE
 and LINK.
 
 Some models are not mutable, so a transfer operation of MOVE
 should not be advertised in that case. Returning NONE
 disables transfers from the component.

Parameters:
c - the component holding the data to be transferred;
           provided to enable sharing of TransferHandlers
Returns:
COPY if the transfer property can be found,
          otherwise returns NONE


"
TransferHandler,getVisualRepresentation(Transferable t),Icon,Returns an object that establishes the look of a transfer.,"

getVisualRepresentation
public Icon getVisualRepresentation(Transferable t)
Returns an object that establishes the look of a transfer.  This is
 useful for both providing feedback while performing a drag operation and for
 representing the transfer in a clipboard implementation that has a visual
 appearance.  The implementation of the Icon interface should
 not alter the graphics clip or alpha level.
 The icon implementation need not be rectangular or paint all of the
 bounding rectangle and logic that calls the icons paint method should
 not assume the all bits are painted. null is a valid return value
 for this method and indicates there is no visual representation provided.
 In that case, the calling logic is free to represent the
 transferable however it wants.
 
 The default Swing logic will not do an alpha blended drag animation if
 the return is null.

Parameters:
t - the data to be transferred; this value is expected to have been
  created by the createTransferable method
Returns:
null, indicating
    there is no default visual representation


"
TransferHandler,"importData(JComponent comp, Transferable t)",boolean,Causes a transfer to a component from a clipboard or a DND drop operation.,"

importData
public boolean importData(JComponent comp,
                          Transferable t)
Causes a transfer to a component from a clipboard or a
 DND drop operation.  The Transferable represents
 the data to be imported into the component.
 
 Note: Swing now calls the newer version of importData
 that takes a TransferSupport, which in turn calls this
 method (if the component in the TransferSupport is a
 JComponent). Developers are encouraged to call and override the
 newer version as it provides more information (and is the only
 version that supports use with a TransferHandler set directly
 on a JFrame or other non-JComponent).

Parameters:
comp - the component to receive the transfer;
              provided to enable sharing of TransferHandlers
t - the data to import
Returns:
true if the data was inserted into the component, false otherwise
See Also:
importData(TransferHandler.TransferSupport)


"
TransferHandler,importData(TransferHandler.TransferSupport support),boolean,Causes a transfer to occur from a clipboard or a drag and drop operation.,"

importData
public boolean importData(TransferHandler.TransferSupport support)
Causes a transfer to occur from a clipboard or a drag and
 drop operation. The Transferable to be
 imported and the component to transfer to are contained
 within the TransferSupport.
 
 While the drag and drop implementation calls canImport
 to determine the suitability of a transfer before calling this
 method, the implementation of paste does not. As such, it cannot
 be assumed that the transfer is acceptable upon a call to
 this method for paste. It is recommended that canImport be
 explicitly called to cover this case.
 
 Note: The TransferSupport object passed to this method
 is only valid for the duration of the method call. It is undefined
 what values it may contain after this method returns.

Parameters:
support - the object containing the details of
        the transfer, not null.
Returns:
true if the data was inserted into the component,
         false otherwise
Throws:
NullPointerException - if support is null
Since:
1.6
See Also:
canImport(TransferHandler.TransferSupport)


"
TransferHandler,setDragImage(Image img),void,Sets the drag image parameter.,"

setDragImage
public void setDragImage(Image img)
Sets the drag image parameter. The image has to be prepared
 for rendering by the moment of the call. The image is stored
 by reference because of some performance reasons.

Parameters:
img - an image to drag


"
TransferHandler,setDragImageOffset(Point p),void,Sets an anchor offset for the image to drag.,"

setDragImageOffset
public void setDragImageOffset(Point p)
Sets an anchor offset for the image to drag.
 It can not be null.

Parameters:
p - a Point object that corresponds
 to coordinates of an anchor offset of the image
 relative to the upper left corner of the image


"
TransferHandler.DropLocation,getDropPoint(),Point,"Returns the drop point, representing the mouse's current location within the component.","

getDropPoint
public final Point getDropPoint()
Returns the drop point, representing the mouse's
 current location within the component.

Returns:
the drop point.


"
TransferHandler.DropLocation,toString(),String,Returns a string representation of this drop location.,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class Object
Returns:
a string representation of this drop location


"
TransferHandler.TransferSupport,getComponent(),Component,Returns the target component of this transfer.,"

getComponent
public Component getComponent()
Returns the target component of this transfer.

Returns:
the target component


"
TransferHandler.TransferSupport,getDataFlavors(),DataFlavor[],Returns the data flavors for this transfer.,"

getDataFlavors
public DataFlavor[] getDataFlavors()
Returns the data flavors for this transfer.

Returns:
the data flavors for this transfer


"
TransferHandler.TransferSupport,getDropAction(),int,"Returns the action chosen for the drop, when this TransferSupport represents a drop.","

getDropAction
public int getDropAction()
Returns the action chosen for the drop, when this
 TransferSupport represents a drop.
 
 Unless explicitly chosen by way of setDropAction,
 this returns the user drop action provided by
 getUserDropAction.
 
 You may wish to query this in TransferHandler's
 importData method to customize processing based
 on the action.
 
 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Returns:
the action chosen for the drop
Throws:
IllegalStateException - if this is not a drop
See Also:
setDropAction(int), 
getUserDropAction(), 
isDrop()


"
TransferHandler.TransferSupport,getDropLocation(),TransferHandler.DropLocation,"Returns the current (non-null) drop location for the component, when this TransferSupport represents a drop.","

getDropLocation
public TransferHandler.DropLocation getDropLocation()
Returns the current (non-null) drop location for the component,
 when this TransferSupport represents a drop.
 
 Note: For components with built-in drop support, this location
 will be a subclass of DropLocation of the same type
 returned by that component's getDropLocation method.
 
 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Returns:
the drop location
Throws:
IllegalStateException - if this is not a drop
See Also:
isDrop()


"
TransferHandler.TransferSupport,getSourceDropActions(),int,"Returns the drag source's supported drop actions, when this TransferSupport represents a drop.","

getSourceDropActions
public int getSourceDropActions()
Returns the drag source's supported drop actions, when this
 TransferSupport represents a drop.
 
 The source actions represent the set of actions supported by the
 source of this transfer, and are represented as some bitwise-OR
 combination of COPY, MOVE and LINK.
 You may wish to query this in TransferHandler's
 canImport method when determining the suitability of a drop
 or when deciding on a drop action to explicitly choose. To determine
 if a particular action is supported by the source, bitwise-AND
 the action with the source drop actions, and then compare the result
 against the original action. For example:
 
 boolean copySupported = (COPY & getSourceDropActions()) == COPY;
 

 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Returns:
the drag source's supported drop actions
Throws:
IllegalStateException - if this is not a drop
See Also:
isDrop()


"
TransferHandler.TransferSupport,getTransferable(),Transferable,Returns the Transferable associated with this transfer.,"

getTransferable
public Transferable getTransferable()
Returns the Transferable associated with this transfer.
 
 Note: Unless it is necessary to fetch the Transferable
 directly, use one of the other methods on this class to inquire about
 the transfer. This may perform better than fetching the
 Transferable and asking it directly.

Returns:
the Transferable associated with this transfer


"
TransferHandler.TransferSupport,getUserDropAction(),int,"Returns the user drop action for the drop, when this TransferSupport represents a drop.","

getUserDropAction
public int getUserDropAction()
Returns the user drop action for the drop, when this
 TransferSupport represents a drop.
 
 The user drop action is chosen for a drop as described in the
 documentation for DropTargetDragEvent and
 DropTargetDropEvent. A different action
 may be chosen as the drop action by way of the setDropAction
 method.
 
 You may wish to query this in TransferHandler's
 canImport method when determining the suitability of a
 drop or when deciding on a drop action to explicitly choose.
 
 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Returns:
the user drop action
Throws:
IllegalStateException - if this is not a drop
See Also:
setDropAction(int), 
getDropAction(), 
isDrop()


"
TransferHandler.TransferSupport,isDataFlavorSupported(DataFlavor df),boolean,Returns whether or not the given data flavor is supported.,"

isDataFlavorSupported
public boolean isDataFlavorSupported(DataFlavor df)
Returns whether or not the given data flavor is supported.

Parameters:
df - the DataFlavor to test
Returns:
whether or not the given flavor is supported.


"
TransferHandler.TransferSupport,isDrop(),boolean,Returns whether or not this TransferSupport represents a drop operation.,"

isDrop
public boolean isDrop()
Returns whether or not this TransferSupport
 represents a drop operation.

Returns:
true if this is a drop operation,
         false otherwise.


"
TransferHandler.TransferSupport,setDropAction(int dropAction),void,"Sets the drop action for the transfer - which must represent a drop - to the given action, instead of the default user drop action.","

setDropAction
public void setDropAction(int dropAction)
Sets the drop action for the transfer - which must represent a drop
 - to the given action,
 instead of the default user drop action. The action must be
 supported by the source's drop actions, and must be one
 of COPY, MOVE or LINK.
 
 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Parameters:
dropAction - the drop action
Throws:
IllegalStateException - if this is not a drop
IllegalArgumentException - if an invalid action is specified
See Also:
getDropAction(), 
getUserDropAction(), 
getSourceDropActions(), 
isDrop()


"
TransferHandler.TransferSupport,setShowDropLocation(boolean showDropLocation),void,Sets whether or not the drop location should be visually indicated for the transfer - which must represent a drop.,"

setShowDropLocation
public void setShowDropLocation(boolean showDropLocation)
Sets whether or not the drop location should be visually indicated
 for the transfer - which must represent a drop. This is applicable to
 those components that automatically
 show the drop location when appropriate during a drag and drop
 operation). By default, the drop location is shown only when the
 TransferHandler has said it can accept the import represented
 by this TransferSupport. With this method you can force the
 drop location to always be shown, or always not be shown.
 
 This method is only for use with drag and drop transfers.
 Calling it when isDrop() is false results
 in an IllegalStateException.

Parameters:
showDropLocation - whether or not to indicate the drop location
Throws:
IllegalStateException - if this is not a drop
See Also:
isDrop()


"
UIDefaults,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 
 A PropertyChangeEvent will get fired whenever a default
 is changed.

Parameters:
listener - the PropertyChangeListener to be added
See Also:
PropertyChangeSupport


"
UIDefaults,addResourceBundle(String bundleName),void,Adds a resource bundle to the list of resource bundles that are searched for localized values.,"

addResourceBundle
public void addResourceBundle(String bundleName)
Adds a resource bundle to the list of resource bundles that are
 searched for localized values.  Resource bundles are searched in the
 reverse order they were added.  In other words, the most recently added
 bundle is searched first.

Parameters:
bundleName - the base name of the resource bundle to be added
Since:
1.4
See Also:
ResourceBundle, 
removeResourceBundle(java.lang.String)


"
UIDefaults,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Support for reporting bound property changes.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Support for reporting bound property changes.  If oldValue and
 newValue are not equal and the PropertyChangeEventx
 listener list isn't empty, then fire a
 PropertyChange event to each listener.

Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property
newValue - the new value of the property
See Also:
PropertyChangeSupport


"
UIDefaults,get(Object key),Object,Returns the value for key.,"

get
public Object get(Object key)
Returns the value for key.  If the value is a
 UIDefaults.LazyValue then the real
 value is computed with LazyValue.createValue(),
 the table entry is replaced, and the real value is returned.
 If the value is an UIDefaults.ActiveValue
 the table entry is not replaced - the value is computed
 with ActiveValue.createValue() for each
 get() call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the locale returned by
 getDefaultLocale.  LazyValues and
 ActiveValues are not supported in the resource bundles.

Specified by:
get in interface Map<Object,Object>
Overrides:
get in class Hashtable<Object,Object>
Parameters:
key - the desired key
Returns:
the value for key
Since:
1.4
See Also:
UIDefaults.LazyValue, 
UIDefaults.ActiveValue, 
Hashtable.get(java.lang.Object), 
getDefaultLocale(), 
addResourceBundle(java.lang.String)


"
UIDefaults,"get(Object key, Locale l)",Object,Returns the value for key associated with the given locale.,"

get
public Object get(Object key,
                  Locale l)
Returns the value for key associated with the given locale.
 If the value is a UIDefaults.LazyValue then the real
 value is computed with LazyValue.createValue(),
 the table entry is replaced, and the real value is returned.
 If the value is an UIDefaults.ActiveValue
 the table entry is not replaced - the value is computed
 with ActiveValue.createValue() for each
 get() call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the given locale.
 LazyValues and ActiveValues are not supported
 in the resource bundles.

Parameters:
key - the desired key
l - the desired locale
Returns:
the value for key
Since:
1.4
See Also:
UIDefaults.LazyValue, 
UIDefaults.ActiveValue, 
Hashtable.get(java.lang.Object), 
addResourceBundle(java.lang.String)


"
UIDefaults,getBoolean(Object key),boolean,"If the value of key is boolean, return the boolean value, otherwise return false.","

getBoolean
public boolean getBoolean(Object key)
If the value of key is boolean, return the
 boolean value, otherwise return false.

Parameters:
key - an Object specifying the key for the desired boolean value
Returns:
if the value of key is boolean, return the
         boolean value, otherwise return false.
Since:
1.4


"
UIDefaults,"getBoolean(Object key, Locale l)",boolean,"If the value of key for the given Locale is boolean, return the boolean value, otherwise return false.","

getBoolean
public boolean getBoolean(Object key,
                          Locale l)
If the value of key for the given Locale
 is boolean, return the boolean value, otherwise return false.

Parameters:
key - an Object specifying the key for the desired boolean value
l - the desired locale
Returns:
if the value for key and Locale
         is boolean, return the
         boolean value, otherwise return false.
Since:
1.4


"
UIDefaults,getBorder(Object key),Border,"If the value of key is a Border return it, otherwise return null.","

getBorder
public Border getBorder(Object key)
If the value of key is a Border return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is a Border,
          return the Border object; otherwise return
          null


"
UIDefaults,"getBorder(Object key, Locale l)",Border,"If the value of key for the given Locale is a Border return it, otherwise return null.","

getBorder
public Border getBorder(Object key,
                        Locale l)
If the value of key for the given Locale
 is a Border return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is a Border,
          return the Border object; otherwise return
          null
Since:
1.4


"
UIDefaults,getColor(Object key),Color,"If the value of key is a Color return it, otherwise return null.","

getColor
public Color getColor(Object key)
If the value of key is a Color return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is a Color,
          return the Color object; otherwise return
          null


"
UIDefaults,"getColor(Object key, Locale l)",Color,"If the value of key for the given Locale is a Color return it, otherwise return null.","

getColor
public Color getColor(Object key,
                      Locale l)
If the value of key for the given Locale
 is a Color return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is a Color,
          return the Color object; otherwise return
          null
Since:
1.4


"
UIDefaults,getDefaultLocale(),Locale,Returns the default locale.,"

getDefaultLocale
public Locale getDefaultLocale()
Returns the default locale.  The default locale is used in retrieving
 localized values via get methods that do not take a
 locale argument.  As of release 1.4, Swing UI objects should retrieve
 localized values using the locale of their component rather than the
 default locale.  The default locale exists to provide compatibility with
 pre 1.4 behaviour.

Returns:
the default locale
Since:
1.4
See Also:
setDefaultLocale(java.util.Locale), 
get(Object), 
get(Object,Locale)


"
UIDefaults,getDimension(Object key),Dimension,"If the value of key is a Dimension return it, otherwise return null.","

getDimension
public Dimension getDimension(Object key)
If the value of key is a Dimension return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is a Dimension,
          return the Dimension object; otherwise return
          null


"
UIDefaults,"getDimension(Object key, Locale l)",Dimension,"If the value of key for the given Locale is a Dimension return it, otherwise return null.","

getDimension
public Dimension getDimension(Object key,
                              Locale l)
If the value of key for the given Locale
 is a Dimension return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is a Dimension,
          return the Dimension object; otherwise return
          null
Since:
1.4


"
UIDefaults,getFont(Object key),Font,"If the value of key is a Font return it, otherwise return null.","

getFont
public Font getFont(Object key)
If the value of key is a Font return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is a Font,
          return the Font object; otherwise return
          null


"
UIDefaults,"getFont(Object key, Locale l)",Font,"If the value of key for the given Locale is a Font return it, otherwise return null.","

getFont
public Font getFont(Object key,
                    Locale l)
If the value of key for the given Locale
 is a Font return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is a Font,
          return the Font object; otherwise return
          null
Since:
1.4


"
UIDefaults,getIcon(Object key),Icon,"If the value of key is an Icon return it, otherwise return null.","

getIcon
public Icon getIcon(Object key)
If the value of key is an Icon return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is an Icon,
          return the Icon object; otherwise return
          null


"
UIDefaults,"getIcon(Object key, Locale l)",Icon,"If the value of key for the given Locale is an Icon return it, otherwise return null.","

getIcon
public Icon getIcon(Object key,
                    Locale l)
If the value of key for the given Locale
 is an Icon return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is an Icon,
          return the Icon object; otherwise return
          null
Since:
1.4


"
UIDefaults,getInsets(Object key),Insets,"If the value of key is an Insets return it, otherwise return null.","

getInsets
public Insets getInsets(Object key)
If the value of key is an Insets return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is an Insets,
          return the Insets object; otherwise return
          null


"
UIDefaults,"getInsets(Object key, Locale l)",Insets,"If the value of key for the given Locale is an Insets return it, otherwise return null.","

getInsets
public Insets getInsets(Object key,
                        Locale l)
If the value of key for the given Locale
 is an Insets return it, otherwise return null.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is an Insets,
          return the Insets object; otherwise return
          null
Since:
1.4


"
UIDefaults,getInt(Object key),int,"If the value of key is an Integer return its integer value, otherwise return 0.","

getInt
public int getInt(Object key)
If the value of key is an Integer return its
 integer value, otherwise return 0.

Parameters:
key - the desired key
Returns:
if the value for key is an Integer,
          return its value, otherwise return 0


"
UIDefaults,"getInt(Object key, Locale l)",int,"If the value of key for the given Locale is an Integer return its integer value, otherwise return 0.","

getInt
public int getInt(Object key,
                  Locale l)
If the value of key for the given Locale
 is an Integer return its integer value, otherwise return 0.

Parameters:
key - the desired key
l - the desired locale
Returns:
if the value for key and Locale
          is an Integer,
          return its value, otherwise return 0
Since:
1.4


"
UIDefaults,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this UIDefaults with addPropertyChangeListener().,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the PropertyChangeListeners added
 to this UIDefaults with addPropertyChangeListener().

Returns:
all of the PropertyChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
UIDefaults,getString(Object key),String,"If the value of key is a String return it, otherwise return null.","

getString
public String getString(Object key)
If the value of key is a String return it,
 otherwise return null.

Parameters:
key - the desired key
Returns:
if the value for key is a String,
          return the String object; otherwise return
          null


"
UIDefaults,"getString(Object key, Locale l)",String,"If the value of key for the given Locale is a String return it, otherwise return null.","

getString
public String getString(Object key,
                        Locale l)
If the value of key for the given Locale
 is a String return it, otherwise return null.

Parameters:
key - the desired key
l - the desired Locale
Returns:
if the value for key for the given
          Locale is a String,
          return the String object; otherwise return
          null
Since:
1.4


"
UIDefaults,getUI(JComponent target),ComponentUI,Creates an ComponentUI implementation for the specified component.,"

getUI
public ComponentUI getUI(JComponent target)
Creates an ComponentUI implementation for the
 specified component.  In other words create the look
 and feel specific delegate object for target.
 This is done in two steps:
 
 Look up the name of the ComponentUI implementation
 class under the value returned by target.getUIClassID().
  Use the implementation classes static createUI()
 method to construct a look and feel delegate.
 

Parameters:
target - the JComponent which needs a UI
Returns:
the ComponentUI object


"
UIDefaults,getUIClass(String uiClassID),Class<? extends ComponentUI>,Returns the L&F class that renders this component.,"

getUIClass
public Class<? extends ComponentUI> getUIClass(String uiClassID)
Returns the L&F class that renders this component.

Parameters:
uiClassID - a string containing the class ID
Returns:
the Class object returned by
          getUIClass(uiClassID, null)


"
UIDefaults,"getUIClass(String uiClassID, ClassLoader uiClassLoader)",Class<? extends ComponentUI>,The value of get(uidClassID) must be the String name of a class that implements the corresponding ComponentUI class.,"

getUIClass
public Class<? extends ComponentUI> getUIClass(String uiClassID,
                                               ClassLoader uiClassLoader)
The value of get(uidClassID) must be the
 String name of a
 class that implements the corresponding ComponentUI
 class.  If the class hasn't been loaded before, this method looks
 up the class with uiClassLoader.loadClass() if a non
 null
 class loader is provided, classForName() otherwise.
 
 If a mapping for uiClassID exists or if the specified
 class can't be found, return null.
 
 This method is used by getUI, it's usually
 not necessary to call it directly.

Parameters:
uiClassID - a string containing the class ID
uiClassLoader - the object which will load the class
Returns:
the value of Class.forName(get(uidClassID))
See Also:
getUI(javax.swing.JComponent)


"
UIDefaults,getUIError(String msg),protected void,"If getUI() fails for any reason, it calls this method before returning null.","

getUIError
protected void getUIError(String msg)
If getUI() fails for any reason,
 it calls this method before returning null.
 Subclasses may choose to do more or less here.

Parameters:
msg - message string to print
See Also:
getUI(javax.swing.JComponent)


"
UIDefaults,"put(Object key, Object value)",Object,Sets the value of key to value for all locales.,"

put
public Object put(Object key,
                  Object value)
Sets the value of key to value for all locales.
 If key is a string and the new value isn't
 equal to the old one, fire a PropertyChangeEvent.
 If value is null, the key is removed from the table.

Specified by:
put in interface Map<Object,Object>
Overrides:
put in class Hashtable<Object,Object>
Parameters:
key - the unique Object who's value will be used
          to retrieve the data value associated with it
value - the new Object to store as data under
          that key
Returns:
the previous Object value, or null
See Also:
putDefaults(java.lang.Object[]), 
Hashtable.put(K, V)


"
UIDefaults,putDefaults(Object[] keyValueList),void,Puts all of the key/value pairs in the database and unconditionally generates one PropertyChangeEvent.,"

putDefaults
public void putDefaults(Object[] keyValueList)
Puts all of the key/value pairs in the database and
 unconditionally generates one PropertyChangeEvent.
 The events oldValue and newValue will be null and its
 propertyName will be ""UIDefaults"".  The key/value pairs are
 added for all locales.

Parameters:
keyValueList - an array of key/value pairs
See Also:
put(java.lang.Object, java.lang.Object), 
Hashtable.put(K, V)


"
UIDefaults,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Parameters:
listener - the PropertyChangeListener to be removed
See Also:
PropertyChangeSupport


"
UIDefaults,removeResourceBundle(String bundleName),void,Removes a resource bundle from the list of resource bundles that are searched for localized defaults.,"

removeResourceBundle
public void removeResourceBundle(String bundleName)
Removes a resource bundle from the list of resource bundles that are
 searched for localized defaults.

Parameters:
bundleName - the base name of the resource bundle to be removed
Since:
1.4
See Also:
ResourceBundle, 
addResourceBundle(java.lang.String)


"
UIDefaults,setDefaultLocale(Locale l),void,Sets the default locale.,"

setDefaultLocale
public void setDefaultLocale(Locale l)
Sets the default locale.  The default locale is used in retrieving
 localized values via get methods that do not take a
 locale argument.  As of release 1.4, Swing UI objects should retrieve
 localized values using the locale of their component rather than the
 default locale.  The default locale exists to provide compatibility with
 pre 1.4 behaviour.

Parameters:
l - the new default locale
Since:
1.4
See Also:
getDefaultLocale(), 
get(Object), 
get(Object,Locale)


"
UIDefaults.LazyInputMap,createValue(UIDefaults table),Object,Creates an InputMap with the bindings that are passed in.,"

createValue
public Object createValue(UIDefaults table)
Creates an InputMap with the bindings that are
 passed in.

Specified by:
createValue in interface UIDefaults.LazyValue
Parameters:
table - a UIDefaults table
Returns:
the InputMap


"
UIDefaults.ProxyLazyValue,createValue(UIDefaults table),Object,Creates the value retrieved from the UIDefaults table.,"

createValue
public Object createValue(UIDefaults table)
Creates the value retrieved from the UIDefaults table.
 The object is created each time it is accessed.

Specified by:
createValue in interface UIDefaults.LazyValue
Parameters:
table - a UIDefaults table
Returns:
the created Object


"
UIManager,addAuxiliaryLookAndFeel(LookAndFeel laf),static void,Adds a LookAndFeel to the list of auxiliary look and feels.,"

addAuxiliaryLookAndFeel
public static void addAuxiliaryLookAndFeel(LookAndFeel laf)
Adds a LookAndFeel to the list of auxiliary look and feels.
 The auxiliary look and feels tell the multiplexing look and feel what
 other LookAndFeel classes for a component instance are to be used
 in addition to the default LookAndFeel class when creating a
 multiplexing UI.  The change will only take effect when a new
 UI class is created or when the default look and feel is changed
 on a component instance.
 Note these are not the same as the installed look and feels.

Parameters:
laf - the LookAndFeel object
See Also:
removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel), 
setLookAndFeel(javax.swing.LookAndFeel), 
getAuxiliaryLookAndFeels(), 
getInstalledLookAndFeels()


"
UIManager,addPropertyChangeListener(PropertyChangeListener listener),static void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public static void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.

Parameters:
listener - the PropertyChangeListener to be added
See Also:
PropertyChangeSupport


"
UIManager,get(Object key),static Object,Returns an object from the defaults.,"

get
public static Object get(Object key)
Returns an object from the defaults.

Parameters:
key - an Object specifying the desired object
Returns:
the Object
Throws:
NullPointerException - if key is null


"
UIManager,"get(Object key, Locale l)",static Object,Returns an object from the defaults that is appropriate for the given locale.,"

get
public static Object get(Object key,
                         Locale l)
Returns an object from the defaults that is appropriate for
 the given locale.

Parameters:
key - an Object specifying the desired object
l - the Locale for which the object is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getAuxiliaryLookAndFeels(),static LookAndFeel[],Returns the list of auxiliary look and feels (can be null).,"

getAuxiliaryLookAndFeels
public static LookAndFeel[] getAuxiliaryLookAndFeels()
Returns the list of auxiliary look and feels (can be null).
 The auxiliary look and feels tell the multiplexing look and feel what
 other LookAndFeel classes for a component instance are
 to be used in addition to the default LookAndFeel class when creating a
 multiplexing UI.
 Note these are not the same as the installed look and feels.

Returns:
list of auxiliary LookAndFeels or null
See Also:
addAuxiliaryLookAndFeel(javax.swing.LookAndFeel), 
removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel), 
setLookAndFeel(javax.swing.LookAndFeel), 
getInstalledLookAndFeels()


"
UIManager,getBoolean(Object key),static boolean,Returns a boolean from the defaults which is associated with the key value.,"

getBoolean
public static boolean getBoolean(Object key)
Returns a boolean from the defaults which is associated with
 the key value. If the key is not found or the key doesn't represent
 a boolean value then false is returned.

Parameters:
key - an Object specifying the key for the desired boolean value
Returns:
the boolean value corresponding to the key
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,"getBoolean(Object key, Locale l)",static boolean,Returns a boolean from the defaults which is associated with the key value and the given Locale.,"

getBoolean
public static boolean getBoolean(Object key,
                                 Locale l)
Returns a boolean from the defaults which is associated with
 the key value and the given Locale. If the key is not
 found or the key doesn't represent
 a boolean value then false will be returned.

Parameters:
key - an Object specifying the key for the desired
             boolean value
l - the Locale for which the boolean is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the boolean value corresponding to the key
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getBorder(Object key),static Border,Returns a border from the defaults.,"

getBorder
public static Border getBorder(Object key)
Returns a border from the defaults. If the value for
 key is not a Border, null is returned.

Parameters:
key - an Object specifying the border
Returns:
the Border object
Throws:
NullPointerException - if key is null


"
UIManager,"getBorder(Object key, Locale l)",static Border,Returns a border from the defaults that is appropriate for the given locale.,"

getBorder
public static Border getBorder(Object key,
                               Locale l)
Returns a border from the defaults that is appropriate
 for the given locale.  If the value for
 key is not a Border, null is returned.

Parameters:
key - an Object specifying the border
l - the Locale for which the border is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Border object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getColor(Object key),static Color,Returns a color from the defaults.,"

getColor
public static Color getColor(Object key)
Returns a color from the defaults. If the value for key is
 not a Color, null is returned.

Parameters:
key - an Object specifying the color
Returns:
the Color object
Throws:
NullPointerException - if key is null


"
UIManager,"getColor(Object key, Locale l)",static Color,Returns a color from the defaults that is appropriate for the given locale.,"

getColor
public static Color getColor(Object key,
                             Locale l)
Returns a color from the defaults that is appropriate
 for the given locale. If the value for key is
 not a Color, null is returned.

Parameters:
key - an Object specifying the color
l - the Locale for which the color is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Color object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getCrossPlatformLookAndFeelClassName(),static String,Returns the name of the LookAndFeel class that implements the default cross platform look and feel -- the Java Look and Feel (JLF).,"

getCrossPlatformLookAndFeelClassName
public static String getCrossPlatformLookAndFeelClassName()
Returns the name of the LookAndFeel class that implements
 the default cross platform look and feel -- the Java
 Look and Feel (JLF).  This value can be overriden by setting the
 swing.crossplatformlaf system property.

Returns:
a string with the JLF implementation-class
See Also:
setLookAndFeel(javax.swing.LookAndFeel), 
getSystemLookAndFeelClassName()


"
UIManager,getDefaults(),static UIDefaults,Returns the defaults.,"

getDefaults
public static UIDefaults getDefaults()
Returns the defaults. The returned defaults resolve using the
 logic specified in the class documentation.

Returns:
a UIDefaults object containing the default values


"
UIManager,getDimension(Object key),static Dimension,Returns a dimension from the defaults.,"

getDimension
public static Dimension getDimension(Object key)
Returns a dimension from the defaults. If the value
 for key is not a Dimension, null is returned.

Parameters:
key - an Object specifying the dimension object
Returns:
the Dimension object
Throws:
NullPointerException - if key is null


"
UIManager,"getDimension(Object key, Locale l)",static Dimension,Returns a dimension from the defaults that is appropriate for the given locale.,"

getDimension
public static Dimension getDimension(Object key,
                                     Locale l)
Returns a dimension from the defaults that is appropriate
 for the given locale. If the value
 for key is not a Dimension, null is returned.

Parameters:
key - an Object specifying the dimension object
l - the Locale for which the object is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Dimension object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getFont(Object key),static Font,Returns a font from the defaults.,"

getFont
public static Font getFont(Object key)
Returns a font from the defaults. If the value for key is
 not a Font, null is returned.

Parameters:
key - an Object specifying the font
Returns:
the Font object
Throws:
NullPointerException - if key is null


"
UIManager,"getFont(Object key, Locale l)",static Font,Returns a font from the defaults that is appropriate for the given locale.,"

getFont
public static Font getFont(Object key,
                           Locale l)
Returns a font from the defaults that is appropriate
 for the given locale. If the value for key is
 not a Font, null is returned.

Parameters:
key - an Object specifying the font
l - the Locale for which the font is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Font object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getIcon(Object key),static Icon,Returns an Icon from the defaults.,"

getIcon
public static Icon getIcon(Object key)
Returns an Icon from the defaults. If the value for
 key is not an Icon, null is returned.

Parameters:
key - an Object specifying the icon
Returns:
the Icon object
Throws:
NullPointerException - if key is null


"
UIManager,"getIcon(Object key, Locale l)",static Icon,Returns an Icon from the defaults that is appropriate for the given locale.,"

getIcon
public static Icon getIcon(Object key,
                           Locale l)
Returns an Icon from the defaults that is appropriate
 for the given locale. If the value for
 key is not an Icon, null is returned.

Parameters:
key - an Object specifying the icon
l - the Locale for which the icon is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Icon object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getInsets(Object key),static Insets,Returns an Insets object from the defaults.,"

getInsets
public static Insets getInsets(Object key)
Returns an Insets object from the defaults. If the value
 for key is not an Insets, null is returned.

Parameters:
key - an Object specifying the Insets object
Returns:
the Insets object
Throws:
NullPointerException - if key is null


"
UIManager,"getInsets(Object key, Locale l)",static Insets,Returns an Insets object from the defaults that is appropriate for the given locale.,"

getInsets
public static Insets getInsets(Object key,
                               Locale l)
Returns an Insets object from the defaults that is
 appropriate for the given locale. If the value
 for key is not an Insets, null is returned.

Parameters:
key - an Object specifying the Insets object
l - the Locale for which the object is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the Insets object
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getInstalledLookAndFeels(),static UIManager.LookAndFeelInfo[],Returns an array of LookAndFeelInfos representing the LookAndFeel implementations currently available.,"

getInstalledLookAndFeels
public static UIManager.LookAndFeelInfo[] getInstalledLookAndFeels()
Returns an array of LookAndFeelInfos representing the
 LookAndFeel implementations currently available. The
 LookAndFeelInfo objects can be used by an
 application to construct a menu of look and feel options for
 the user, or to determine which look and feel to set at startup
 time. To avoid the penalty of creating numerous LookAndFeel objects, LookAndFeelInfo maintains the
 class name of the LookAndFeel class, not the actual
 LookAndFeel instance.
 
 The following example illustrates setting the current look and feel
 from an instance of LookAndFeelInfo:
 
   UIManager.setLookAndFeel(info.getClassName());
 

Returns:
an array of LookAndFeelInfo objects
See Also:
setLookAndFeel(javax.swing.LookAndFeel)


"
UIManager,getInt(Object key),static int,Returns an integer from the defaults.,"

getInt
public static int getInt(Object key)
Returns an integer from the defaults. If the value for
 key is not an Integer, or does not exist,
 0 is returned.

Parameters:
key - an Object specifying the int
Returns:
the int
Throws:
NullPointerException - if key is null


"
UIManager,"getInt(Object key, Locale l)",static int,Returns an integer from the defaults that is appropriate for the given locale.,"

getInt
public static int getInt(Object key,
                         Locale l)
Returns an integer from the defaults that is appropriate
 for the given locale. If the value for
 key is not an Integer, or does not exist,
 0 is returned.

Parameters:
key - an Object specifying the int
l - the Locale for which the int is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the int
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getLookAndFeel(),static LookAndFeel,Returns the current look and feel or null.,"

getLookAndFeel
public static LookAndFeel getLookAndFeel()
Returns the current look and feel or null.

Returns:
current look and feel, or null
See Also:
setLookAndFeel(javax.swing.LookAndFeel)


"
UIManager,getLookAndFeelDefaults(),static UIDefaults,"Returns the UIDefaults from the current look and feel, that were obtained at the time the look and feel was installed.","

getLookAndFeelDefaults
public static UIDefaults getLookAndFeelDefaults()
Returns the UIDefaults from the current look and feel,
 that were obtained at the time the look and feel was installed.
 
 In general, developers should use the UIDefaults returned from
 getDefaults(). As the current look and feel may expect
 certain values to exist, altering the UIDefaults returned
 from this method could have unexpected results.

Returns:
UIDefaults from the current look and feel
See Also:
getDefaults(), 
setLookAndFeel(LookAndFeel), 
LookAndFeel.getDefaults()


"
UIManager,getPropertyChangeListeners(),static PropertyChangeListener[],Returns an array of all the PropertyChangeListeners added to this UIManager with addPropertyChangeListener().,"

getPropertyChangeListeners
public static PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the PropertyChangeListeners added
 to this UIManager with addPropertyChangeListener().

Returns:
all of the PropertyChangeListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
UIManager,getString(Object key),static String,Returns a string from the defaults.,"

getString
public static String getString(Object key)
Returns a string from the defaults. If the value for
 key is not a String, null is returned.

Parameters:
key - an Object specifying the string
Returns:
the String
Throws:
NullPointerException - if key is null


"
UIManager,"getString(Object key, Locale l)",static String,Returns a string from the defaults that is appropriate for the given locale.,"

getString
public static String getString(Object key,
                               Locale l)
Returns a string from the defaults that is appropriate for the
 given locale.  If the value for
 key is not a String, null is returned.

Parameters:
key - an Object specifying the string
l - the Locale for which the string is desired; refer
        to UIDefaults for details on how a null
Locale is handled
Returns:
the String
Throws:
NullPointerException - if key is null
Since:
1.4


"
UIManager,getSystemLookAndFeelClassName(),static String,"Returns the name of the LookAndFeel class that implements the native system look and feel if there is one, otherwise the name of the default cross platform LookAndFeel class.","

getSystemLookAndFeelClassName
public static String getSystemLookAndFeelClassName()
Returns the name of the LookAndFeel class that implements
 the native system look and feel if there is one, otherwise
 the name of the default cross platform LookAndFeel
 class. This value can be overriden by setting the
 swing.systemlaf system property.

Returns:
the String of the LookAndFeel
          class
See Also:
setLookAndFeel(javax.swing.LookAndFeel), 
getCrossPlatformLookAndFeelClassName()


"
UIManager,getUI(JComponent target),static ComponentUI,Returns the appropriate ComponentUI implementation for target.,"

getUI
public static ComponentUI getUI(JComponent target)
Returns the appropriate ComponentUI implementation for
 target. Typically, this is a cover for
 getDefaults().getUI(target). However, if an auxiliary
 look and feel has been installed, this first invokes
 getUI(target) on the multiplexing look and feel's
 defaults, and returns that value if it is non-null.

Parameters:
target - the JComponent to return the
        ComponentUI for
Returns:
the ComponentUI object for target
Throws:
NullPointerException - if target is null
See Also:
UIDefaults.getUI(javax.swing.JComponent)


"
UIManager,"installLookAndFeel(String name, String className)",static void,Adds the specified look and feel to the set of available look and feels.,"

installLookAndFeel
public static void installLookAndFeel(String name,
                                      String className)
Adds the specified look and feel to the set of available look
 and feels. While this method does not check the
 arguments in any way, it is strongly recommended that non-null values be supplied.

Parameters:
name - descriptive name of the look and feel
className - name of the class that implements the look and feel
See Also:
setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[])


"
UIManager,installLookAndFeel(UIManager.LookAndFeelInfo info),static void,Adds the specified look and feel to the set of available look and feels.,"

installLookAndFeel
public static void installLookAndFeel(UIManager.LookAndFeelInfo info)
Adds the specified look and feel to the set of available look
 and feels. While this method allows a null info,
 it is strongly recommended that a non-null value be used.

Parameters:
info - a LookAndFeelInfo object that names the
          look and feel and identifies the class that implements it
See Also:
setInstalledLookAndFeels(javax.swing.UIManager.LookAndFeelInfo[])


"
UIManager,"put(Object key, Object value)",static Object,Stores an object in the developer defaults.,"

put
public static Object put(Object key,
                         Object value)
Stores an object in the developer defaults. This is a cover method
 for getDefaults().put(key, value). This only effects the
 developer defaults, not the system or look and feel defaults.

Parameters:
key - an Object specifying the retrieval key
value - the Object to store; refer to
               UIDefaults for details on how null is
               handled
Returns:
the Object returned by UIDefaults.put(java.lang.Object, java.lang.Object)
Throws:
NullPointerException - if key is null
See Also:
UIDefaults.put(java.lang.Object, java.lang.Object)


"
UIManager,removeAuxiliaryLookAndFeel(LookAndFeel laf),static boolean,Removes a LookAndFeel from the list of auxiliary look and feels.,"

removeAuxiliaryLookAndFeel
public static boolean removeAuxiliaryLookAndFeel(LookAndFeel laf)
Removes a LookAndFeel from the list of auxiliary look and feels.
 The auxiliary look and feels tell the multiplexing look and feel what
 other LookAndFeel classes for a component instance are to be used
 in addition to the default LookAndFeel class when creating a
 multiplexing UI.  The change will only take effect when a new
 UI class is created or when the default look and feel is changed
 on a component instance.
 Note these are not the same as the installed look and feels.

Returns:
true if the LookAndFeel was removed from the list
See Also:
removeAuxiliaryLookAndFeel(javax.swing.LookAndFeel), 
getAuxiliaryLookAndFeels(), 
setLookAndFeel(javax.swing.LookAndFeel), 
getInstalledLookAndFeels()


"
UIManager,removePropertyChangeListener(PropertyChangeListener listener),static void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public static void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Parameters:
listener - the PropertyChangeListener to be removed
See Also:
PropertyChangeSupport


"
UIManager,setInstalledLookAndFeels(UIManager.LookAndFeelInfo[] infos),static void,Sets the set of available look and feels.,"

setInstalledLookAndFeels
public static void setInstalledLookAndFeels(UIManager.LookAndFeelInfo[] infos)
                                     throws SecurityException
Sets the set of available look and feels. While this method does
 not check to ensure all of the LookAndFeelInfos are
 non-null, it is strongly recommended that only non-null
 values are supplied in the infos array.

Parameters:
infos - set of LookAndFeelInfo objects specifying
        the available look and feels
Throws:
NullPointerException - if infos is null
SecurityException
See Also:
getInstalledLookAndFeels()


"
UIManager,setLookAndFeel(LookAndFeel newLookAndFeel),static void,Sets the current look and feel to newLookAndFeel.,"

setLookAndFeel
public static void setLookAndFeel(LookAndFeel newLookAndFeel)
                           throws UnsupportedLookAndFeelException
Sets the current look and feel to newLookAndFeel.
 If the current look and feel is non-null uninitialize is invoked on it. If newLookAndFeel is
 non-null, initialize is invoked on it followed
 by getDefaults. The defaults returned from newLookAndFeel.getDefaults() replace those of the defaults
 from the previous look and feel. If the newLookAndFeel is
 null, the look and feel defaults are set to null.
 
 A value of null can be used to set the look and feel
 to null. As the LookAndFeel is required for
 most of Swing to function, setting the LookAndFeel to
 null is strongly discouraged.
 
 This is a JavaBeans bound property.

Parameters:
newLookAndFeel - LookAndFeel to install
Throws:
UnsupportedLookAndFeelException - if
          newLookAndFeel is non-null and
          newLookAndFeel.isSupportedLookAndFeel() returns
          false
See Also:
getLookAndFeel()


"
UIManager,setLookAndFeel(String className),static void,"Loads the LookAndFeel specified by the given class name, using the current thread's context class loader, and passes it to setLookAndFeel(LookAndFeel).","

setLookAndFeel
public static void setLookAndFeel(String className)
                           throws ClassNotFoundException,
                                  InstantiationException,
                                  IllegalAccessException,
                                  UnsupportedLookAndFeelException
Loads the LookAndFeel specified by the given class
 name, using the current thread's context class loader, and
 passes it to setLookAndFeel(LookAndFeel).

Parameters:
className - a string specifying the name of the class that implements
        the look and feel
Throws:
ClassNotFoundException - if the LookAndFeel
           class could not be found
InstantiationException - if a new instance of the class
          couldn't be created
IllegalAccessException - if the class or initializer isn't accessible
UnsupportedLookAndFeelException - if
          lnf.isSupportedLookAndFeel() is false
ClassCastException - if className does not identify
         a class that extends LookAndFeel


"
UIManager.LookAndFeelInfo,getClassName(),String,Returns the name of the class that implements this look and feel.,"

getClassName
public String getClassName()
Returns the name of the class that implements this look and feel.

Returns:
the name of the class that implements this
              LookAndFeel
See Also:
LookAndFeel


"
UIManager.LookAndFeelInfo,getName(),String,Returns the name of the look and feel in a form suitable for a menu or other presentation,"

getName
public String getName()
Returns the name of the look and feel in a form suitable
 for a menu or other presentation

Returns:
a String containing the name
See Also:
LookAndFeel.getName()


"
UIManager.LookAndFeelInfo,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
ViewportLayout,"addLayoutComponent(String name, Component c)",void,Adds the specified component to the layout.,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component c)
Adds the specified component to the layout. Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
c - the the component to be added


"
ViewportLayout,layoutContainer(Container parent),void,Called by the AWT when the specified container needs to be laid out.,"

layoutContainer
public void layoutContainer(Container parent)
Called by the AWT when the specified container needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
ViewportLayout,minimumLayoutSize(Container parent),Dimension,Returns the minimum dimensions needed to layout the components contained in the specified target container.,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
Returns the minimum dimensions needed to layout the components
 contained in the specified target container.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the component which needs to be laid out
Returns:
a Dimension object containing the minimum
          dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
ViewportLayout,preferredLayoutSize(Container parent),Dimension,Returns the preferred dimensions for this layout given the components in the specified target container.,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
Returns the preferred dimensions for this layout given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the component which needs to be laid out
Returns:
a Dimension object containing the
          preferred dimensions
See Also:
minimumLayoutSize(java.awt.Container)


"
ViewportLayout,removeLayoutComponent(Component c),void,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the specified component from the layout. Not used by
 this class.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to remove


"
