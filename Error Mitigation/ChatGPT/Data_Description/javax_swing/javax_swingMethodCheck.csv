Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractAction,1,Object getValue(String key),True,,"

getValue
public Object getValue(String key)
Gets the Object associated with the specified key.

Specified by:
getValue in interface Action
Parameters:
key - a string containing the specified key
Returns:
the binding Object stored with this key; if there
          are no keys, it will return null
See Also:
Action.getValue(java.lang.String)


"
0,AbstractAction,2,"void putValue(String key, Object value)",True,,"

putValue
public void putValue(String key,
                     Object newValue)
Sets the Value associated with the specified key.

Specified by:
putValue in interface Action
Parameters:
key - the String that identifies the stored object
newValue - the Object to store using this key
See Also:
Action.putValue(java.lang.String, java.lang.Object)


"
0,AbstractAction,3,void actionPerformed(ActionEvent e),False,,NULL
0,AbstractAction,4,void setEnabled(boolean newValue),True,,"

setEnabled
public void setEnabled(boolean newValue)
Sets whether the Action is enabled. The default is true.

Specified by:
setEnabled in interface Action
Parameters:
newValue - true to enable the action, false to
                  disable it
See Also:
Action.setEnabled(boolean)


"
0,AbstractAction,5,void setEnabled(boolean enabled),True,,"

setEnabled
public void setEnabled(boolean newValue)
Sets whether the Action is enabled. The default is true.

Specified by:
setEnabled in interface Action
Parameters:
newValue - true to enable the action, false to
                  disable it
See Also:
Action.setEnabled(boolean)


"
1,AbstractButton,1,void setMnemonic(int mnemonic),True,,"

setMnemonic
public void setMnemonic(int mnemonic)
Sets the keyboard mnemonic on the current model.
 The mnemonic is the key which when combined with the look and feel's
 mouseless modifier (usually Alt) will activate this button
 if focus is contained somewhere within this button's ancestor
 window.
 
 A mnemonic must correspond to a single key on the keyboard
 and should be specified using one of the VK_XXX
 keycodes defined in java.awt.event.KeyEvent.
 These codes and the wider array of codes for international
 keyboards may be obtained through
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.
 Mnemonics are case-insensitive, therefore a key event
 with the corresponding keycode would cause the button to be
 activated whether or not the Shift modifier was pressed.
 
 If the character defined by the mnemonic is found within
 the button's label string, the first occurrence of it
 will be underlined to indicate the mnemonic to the user.

Parameters:
mnemonic - the key code which represents the mnemonic
See Also:
KeyEvent, 
setDisplayedMnemonicIndex(int)


"
1,AbstractButton,2,void setActionCommand(String command),True,,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command for this button.

Parameters:
actionCommand - the action command for this button


"
1,AbstractButton,3,void setBorderPainted(boolean b),True,,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property.
 If true and the button has a border,
 the border is painted. The default value for the
 borderPainted property is true.
 
 Some look and feels might not support
 the borderPainted property,
 in which case they ignore this.

Parameters:
b - if true and border property is not null,
          the border is painted
See Also:
isBorderPainted()


"
1,AbstractButton,4,void setFocusPainted(boolean b),True,,"

setFocusPainted
public void setFocusPainted(boolean b)
Sets the paintFocus property, which must
 be true for the focus state to be painted.
 The default value for the paintFocus property
 is true.
 Some look and feels might not paint focus state;
 they will ignore this property.

Parameters:
b - if true, the focus state should be painted
See Also:
isFocusPainted()


"
1,AbstractButton,5,void setRolloverEnabled(boolean b),True,,"

setRolloverEnabled
public void setRolloverEnabled(boolean b)
Sets the rolloverEnabled property, which
 must be true for rollover effects to occur.
 The default value for the rolloverEnabled
 property is false.
 Some look and feels might not implement rollover effects;
 they will ignore this property.

Parameters:
b - if true, rollover effects should be painted
See Also:
isRolloverEnabled()


"
2,AbstractCellEditor,1,Object getCellEditorValue(),False,,NULL
2,AbstractCellEditor,2,boolean stopCellEditing(),True,,"

stopCellEditing
public boolean stopCellEditing()
Calls fireEditingStopped and returns true.

Specified by:
stopCellEditing in interface CellEditor
Returns:
true


"
2,AbstractCellEditor,3,void cancelCellEditing(),True,,"

cancelCellEditing
public void cancelCellEditing()
Calls fireEditingCanceled.

Specified by:
cancelCellEditing in interface CellEditor


"
2,AbstractCellEditor,4,Component getComponent(),False,,NULL
2,AbstractCellEditor,5,boolean isCellEditable(EventObject anEvent),True,,"

isCellEditable
public boolean isCellEditable(EventObject e)
Returns true.

Specified by:
isCellEditable in interface CellEditor
Parameters:
e - an event object
Returns:
true
See Also:
CellEditor.shouldSelectCell(java.util.EventObject)


"
3,AbstractListModel,1,int getSize(),False,,NULL
3,AbstractListModel,2,Object getElementAt(int index),False,,NULL
3,AbstractListModel,3,void addElement(Object element),False,,NULL
3,AbstractListModel,4,"void insertElementAt(Object element, int index)",False,,NULL
3,AbstractListModel,5,void removeElement(Object element),False,,NULL
4,AbstractSpinnerModel,1,Object getNextValue(),False,,NULL
4,AbstractSpinnerModel,2,Object getPreviousValue(),False,,NULL
4,AbstractSpinnerModel,3,void setValue(Object value),False,,NULL
4,AbstractSpinnerModel,4,void setMinimum(Object minimum),False,,NULL
4,AbstractSpinnerModel,5,void setMaximum(Object maximum),False,,NULL
5,ActionMap,1,"void put(Object key, Action action)",True,,"

put
public void put(Object key,
                Action action)
Adds a binding for key to action.
 If action is null, this removes the current binding
 for key.
 In most instances, key will be
 action.getValue(NAME).

"
5,ActionMap,2,Action get(Object key),True,,"

get
public Action get(Object key)
Returns the binding for key, messaging the
 parent ActionMap if the binding is not locally defined.

"
5,ActionMap,3,void remove(Object key),True,,"

remove
public void remove(Object key)
Removes the binding for key from this ActionMap.

"
5,ActionMap,4,void clear(),True,,"

clear
public void clear()
Removes all the mappings from this ActionMap.

"
5,ActionMap,5,int size(),True,,"

size
public int size()
Returns the number of bindings in this ActionMap.

Returns:
the number of bindings in this ActionMap


"
6,BorderFactory,1,"javax.swing.border.Border createEmptyBorder(int top, int left, int bottom, int right)",False,,NULL
6,BorderFactory,2,javax.swing.border.Border createLineBorder(java.awt.Color color),False,,NULL
6,BorderFactory,3,"javax.swing.border.Border createMatteBorder(int top, int left, int bottom, int right, java.awt.Image tileIcon)",False,,NULL
6,BorderFactory,4,javax.swing.border.Border createEtchedBorder(),False,,NULL
6,BorderFactory,5,"javax.swing.border.Border createCompoundBorder(javax.swing.border.Border outsideBorder, javax.swing.border.Border insideBorder)",False,,NULL
7,Box,1,void add(Component comp),False,,NULL
7,Box,2,void addGlue(),False,,NULL
7,Box,3,void addStrut(int width),False,,NULL
7,Box,4,void createHorizontalGlue(),False,,NULL
7,Box,5,void createVerticalGlue(),False,,NULL
8,Box.Filler,1,Dimension getPreferredSize(),False,,NULL
8,Box.Filler,2,"void changeShape(Dimension min, Dimension pref, Dimension max)",True,,"

changeShape
public void changeShape(Dimension min,
                        Dimension pref,
                        Dimension max)
Change the size requests for this shape.  An invalidate() is
 propagated upward as a result so that layout will eventually
 happen with using the new sizes.

Parameters:
min - Value to return for getMinimumSize
pref - Value to return for getPreferredSize
max - Value to return for getMaximumSize


"
8,Box.Filler,3,void changeShape(Dimension size),False,,NULL
8,Box.Filler,4,void setSpring(int s),False,,NULL
8,Box.Filler,5,void setAlignmentX(float alignmentX),False,,NULL
9,BoxLayout,1,void setAxis(int axis),False,,NULL
9,BoxLayout,2,void addLayoutComponent(Component comp),False,,NULL
9,BoxLayout,3,"void addLayoutComponent(Component comp, Object constraints)",True,,"

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component
constraints - constraints


"
9,BoxLayout,4,void removeLayoutComponent(Component comp),True,,"

removeLayoutComponent
public void removeLayoutComponent(Component comp)
Not used by this class.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
comp - the component


"
9,BoxLayout,5,Dimension preferredLayoutSize(Container target),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Returns the preferred dimensions for this layout, given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor
See Also:
Container, 
minimumLayoutSize(java.awt.Container), 
maximumLayoutSize(java.awt.Container)


"
10,ButtonGroup,1,void add(AbstractButton b),True,,"

add
public void add(AbstractButton b)
Adds the button to the group.

Parameters:
b - the button to be added


"
10,ButtonGroup,2,Enumeration<AbstractButton> getElements(),True,,"

getElements
public Enumeration<AbstractButton> getElements()
Returns all the buttons that are participating in
 this group.

Returns:
an Enumeration of the buttons in this group


"
10,ButtonGroup,3,AbstractButton getSelection(),False,,NULL
10,ButtonGroup,4,"void setSelected(AbstractButton b, boolean selected)",False,,NULL
10,ButtonGroup,5,void clearSelection(),True,,"

clearSelection
public void clearSelection()
Clears the selection such that none of the buttons
 in the ButtonGroup are selected.

Since:
1.6


"
11,CellRendererPane,1,void paintComponent(Graphics g),False,,NULL
11,CellRendererPane,2,void invalidate(),True,,"

invalidate
public void invalidate()
Overridden to avoid propagating a invalidate up the tree when the
 cell renderer child is configured.

Overrides:
invalidate in class Container
See Also:
Container.validate(), 
Container.layout(), 
LayoutManager2


"
11,CellRendererPane,3,void add(Component comp),False,,NULL
11,CellRendererPane,4,void remove(Component comp),False,,NULL
11,CellRendererPane,5,Component getComponent(int n),False,,NULL
12,ComponentInputMap,1,"void put(KeyStroke keyStroke, Object actionMapKey)",True,,"

put
public void put(KeyStroke keyStroke,
                Object actionMapKey)
Adds a binding for keyStroke to actionMapKey.
 If actionMapKey is null, this removes the current binding
 for keyStroke.

Overrides:
put in class InputMap


"
12,ComponentInputMap,2,void remove(KeyStroke key),True,,"

remove
public void remove(KeyStroke key)
Removes the binding for key from this object.

Overrides:
remove in class InputMap


"
12,ComponentInputMap,3,void clear(),True,,"

clear
public void clear()
Removes all the mappings from this object.

Overrides:
clear in class InputMap


"
12,ComponentInputMap,4,Object get(KeyStroke keyStroke),False,,NULL
12,ComponentInputMap,5,KeyStroke[] keys(),False,,NULL
13,DebugGraphics,1,void setDebugOptions(int options),True,,"

setDebugOptions
public void setDebugOptions(int options)
Enables/disables diagnostic information about every graphics
 operation. The value of options indicates how this information
 should be displayed. LOG_OPTION causes a text message to be printed.
 FLASH_OPTION causes the drawing to flash several times. BUFFERED_OPTION
 creates a new Frame that shows each operation on an
 offscreen buffer. The value of options is bitwise OR'd into
 the current value. To disable debugging use NONE_OPTION.

"
13,DebugGraphics,2,int getDebugOptions(),True,,"

getDebugOptions
public int getDebugOptions()
Returns the current debugging options for this DebugGraphics.

See Also:
setDebugOptions(int)


"
13,DebugGraphics,3,void setFlashColor(Color c),True,,"

setFlashColor
public static void setFlashColor(Color flashColor)
Sets the Color used to flash drawing operations.

"
13,DebugGraphics,4,Color getFlashColor(),False,,NULL
13,DebugGraphics,5,void flash(Rectangle r),False,,NULL
14,DefaultBoundedRangeModel,1,int getExtent(),True,,"

getExtent
public int getExtent()
Returns the model's extent.

Specified by:
getExtent in interface BoundedRangeModel
Returns:
the model's extent
See Also:
setExtent(int), 
BoundedRangeModel.getExtent()


"
14,DefaultBoundedRangeModel,2,int getValue(),True,,"

getValue
public int getValue()
Returns the model's current value.

Specified by:
getValue in interface BoundedRangeModel
Returns:
the model's current value
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
14,DefaultBoundedRangeModel,3,int getMinimum(),True,,"

getMinimum
public int getMinimum()
Returns the model's minimum.

Specified by:
getMinimum in interface BoundedRangeModel
Returns:
the model's minimum
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
14,DefaultBoundedRangeModel,4,int getMaximum(),True,,"

getMaximum
public int getMaximum()
Returns the model's maximum.

Specified by:
getMaximum in interface BoundedRangeModel
Returns:
the model's maximum
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
14,DefaultBoundedRangeModel,5,"void setRangeProperties(int value, int extent, int min, int max, boolean adjusting)",True,,"

setRangeProperties
public void setRangeProperties(int newValue,
                               int newExtent,
                               int newMin,
                               int newMax,
                               boolean adjusting)
Sets all of the BoundedRangeModel properties after forcing
 the arguments to obey the usual constraints:
 
     minimum <= value <= value+extent <= maximum
 

 At most, one ChangeEvent is generated.

Specified by:
setRangeProperties in interface BoundedRangeModel
Parameters:
newValue - an int giving the current value
newExtent - an int giving the amount by which the value can ""jump""
newMin - an int giving the minimum value
newMax - an int giving the maximum value
adjusting - a boolean, true if a series of changes are in
                    progress
See Also:
BoundedRangeModel.setRangeProperties(int, int, int, int, boolean), 
setValue(int), 
setExtent(int), 
setMinimum(int), 
setMaximum(int), 
setValueIsAdjusting(boolean)


"
15,DefaultButtonModel,1,void setArmed(boolean b),True,,"

setArmed
public void setArmed(boolean b)
Marks the button as armed or unarmed.

Specified by:
setArmed in interface ButtonModel
Parameters:
b - whether or not the button should be armed


"
15,DefaultButtonModel,2,void setPressed(boolean b),True,,"

setPressed
public void setPressed(boolean b)
Sets the button to pressed or unpressed.

Specified by:
setPressed in interface ButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
15,DefaultButtonModel,3,void setRollover(boolean b),True,,"

setRollover
public void setRollover(boolean b)
Sets or clears the button's rollover state

Specified by:
setRollover in interface ButtonModel
Parameters:
b - whether or not the button is in the rollover state
See Also:
ButtonModel.isRollover()


"
15,DefaultButtonModel,4,void setMnemonic(int key),True,,"

setMnemonic
public void setMnemonic(int key)
Sets the keyboard mnemonic (shortcut key or
 accelerator key) for the button.

Specified by:
setMnemonic in interface ButtonModel
Parameters:
key - an int specifying the accelerator key


"
15,DefaultButtonModel,5,void setActionCommand(String actionCommand),True,,"

setActionCommand
public void setActionCommand(String actionCommand)
Sets the action command string that gets sent as part of the
 ActionEvent when the button is triggered.

Specified by:
setActionCommand in interface ButtonModel
Parameters:
actionCommand - the String that identifies the generated event
See Also:
ButtonModel.getActionCommand(), 
ActionEvent.getActionCommand()


"
16,DefaultCellEditor,1,Object getCellEditorValue(),True,,"

getCellEditorValue
public Object getCellEditorValue()
Forwards the message from the CellEditor to
 the delegate.

Specified by:
getCellEditorValue in interface CellEditor
Returns:
the value contained in the editor
See Also:
DefaultCellEditor.EditorDelegate.getCellEditorValue()


"
16,DefaultCellEditor,2,Component getComponent(),True,,"

getComponent
public Component getComponent()
Returns a reference to the editor component.

Returns:
the editor Component


"
16,DefaultCellEditor,3,void setClickCountToStart(int count),True,,"

setClickCountToStart
public void setClickCountToStart(int count)
Specifies the number of clicks needed to start editing.

Parameters:
count - an int specifying the number of clicks needed to start editing
See Also:
getClickCountToStart()


"
16,DefaultCellEditor,4,void setClickCountToStart(int count),True,,"

setClickCountToStart
public void setClickCountToStart(int count)
Specifies the number of clicks needed to start editing.

Parameters:
count - an int specifying the number of clicks needed to start editing
See Also:
getClickCountToStart()


"
16,DefaultCellEditor,5,void setClickCountToStart(int count),True,,"

setClickCountToStart
public void setClickCountToStart(int count)
Specifies the number of clicks needed to start editing.

Parameters:
count - an int specifying the number of clicks needed to start editing
See Also:
getClickCountToStart()


"
17,DefaultComboBoxModel,1,void removeAllElements(),True,,"

removeAllElements
public void removeAllElements()
Empties the list.

"
17,DefaultComboBoxModel,2,void removeElement(Object anObject),True,,"

removeElement
public void removeElement(Object anObject)
Description copied from interface: MutableComboBoxModel
Removes an item from the model. The implementation of this method should
 should notify all registered ListDataListeners that the
 item has been removed.

Specified by:
removeElement in interface MutableComboBoxModel<E>
Parameters:
anObject - the Object to be removed


"
17,DefaultComboBoxModel,3,"void insertElementAt(Object anObject, int index)",False,,NULL
17,DefaultComboBoxModel,4,Object getElementAt(int index),False,,NULL
17,DefaultComboBoxModel,5,int getSize(),True,,"

getSize
public int getSize()
Description copied from interface: ListModel
Returns the length of the list.

Specified by:
getSize in interface ListModel<E>
Returns:
the length of the list


"
18,DefaultDesktopManager,1,void activateFrame(JInternalFrame f),True,,"

activateFrame
public void activateFrame(JInternalFrame f)
This will activate f moving it to the front. It will
 set the current active frame's (if any)
 IS_SELECTED_PROPERTY to false.
 There can be only one active frame across all Layers.

Specified by:
activateFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be activated


"
18,DefaultDesktopManager,2,void closeFrame(JInternalFrame f),True,,"

closeFrame
public void closeFrame(JInternalFrame f)
Removes the frame, and, if necessary, the
 desktopIcon, from its parent.

Specified by:
closeFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be removed


"
18,DefaultDesktopManager,3,void deiconifyFrame(JInternalFrame f),True,,"

deiconifyFrame
public void deiconifyFrame(JInternalFrame f)
Removes the desktopIcon from its parent and adds its frame
 to the parent.

Specified by:
deiconifyFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be de-iconified


"
18,DefaultDesktopManager,4,void iconifyFrame(JInternalFrame f),True,,"

iconifyFrame
public void iconifyFrame(JInternalFrame f)
Removes the frame from its parent and adds its
 desktopIcon to the parent.

Specified by:
iconifyFrame in interface DesktopManager
Parameters:
f - the JInternalFrame to be iconified


"
18,DefaultDesktopManager,5,void openFrame(JInternalFrame f),True,,"

openFrame
public void openFrame(JInternalFrame f)
Normally this method will not be called. If it is, it
 try to determine the appropriate parent from the desktopIcon of the frame.
 Will remove the desktopIcon from its parent if it successfully adds the frame.

Specified by:
openFrame in interface DesktopManager


"
19,DefaultFocusManager,1,void focusNextComponent(Component aComponent),False,,NULL
19,DefaultFocusManager,2,void focusPreviousComponent(Component aComponent),False,,NULL
19,DefaultFocusManager,3,void upFocusCycle(Component aComponent),False,,NULL
19,DefaultFocusManager,4,void downFocusCycle(Container aContainer),False,,NULL
19,DefaultFocusManager,5,"void processKeyEvent(Component aComponent, KeyEvent keyEvent)",False,,NULL
20,DefaultListCellRenderer,1,"Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)",False,,NULL
20,DefaultListCellRenderer,2,void setValue(Object value),False,,NULL
20,DefaultListCellRenderer,3,void setIcon(Icon icon),False,,NULL
20,DefaultListCellRenderer,4,void setText(String text),False,,NULL
20,DefaultListCellRenderer,5,void setBackground(Color color),False,,NULL
21,DefaultListCellRenderer.UIResource,1,void installUI(JComponent c),False,,NULL
21,DefaultListCellRenderer.UIResource,2,void uninstallUI(JComponent c),False,,NULL
21,DefaultListCellRenderer.UIResource,3,void updateUI(),False,,NULL
21,DefaultListCellRenderer.UIResource,4,void paint(Graphics g),False,,NULL
21,DefaultListCellRenderer.UIResource,5,void validate(),False,,NULL
22,DefaultListModel,1,void addElement(Object obj),False,,NULL
22,DefaultListModel,2,"void insertElementAt(Object obj, int index)",False,,NULL
22,DefaultListModel,3,void removeElement(Object obj),False,,NULL
22,DefaultListModel,4,void removeElementAt(int index),True,,"

removeElementAt
public void removeElementAt(int index)
Deletes the component at the specified index.
 
 Throws an ArrayIndexOutOfBoundsException if the index
 is invalid.
 
Note: Although this method is not deprecated, the preferred
    method to use is remove(int), which implements the
    List interface defined in the 1.2 Collections framework.
 

Parameters:
index - the index of the object to remove
See Also:
remove(int), 
Vector.removeElementAt(int)


"
22,DefaultListModel,5,Object getElementAt(int index),False,,NULL
23,DefaultListSelectionModel,1,"void setSelectionInterval(int anchor, int lead)",True,,"

setSelectionInterval
public void setSelectionInterval(int index0,
                                 int index1)
Changes the selection to be between index0 and index1
 inclusive. index0 doesn't have to be less than or equal to
 index1.
 
 In SINGLE_SELECTION selection mode, only the second index
 is used.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
setSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
23,DefaultListSelectionModel,2,"void addSelectionInterval(int index0, int index1)",True,,"

addSelectionInterval
public void addSelectionInterval(int index0,
                                 int index1)
Changes the selection to be the set union of the current selection
 and the indices between index0 and index1 inclusive.
 
 In SINGLE_SELECTION selection mode, this is equivalent
 to calling setSelectionInterval, and only the second index
 is used. In SINGLE_INTERVAL_SELECTION selection mode, this
 method behaves like setSelectionInterval, unless the given
 interval is immediately adjacent to or overlaps the existing selection,
 and can therefore be used to grow it.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change. Note that
 index0 doesn't have to be less than or equal to index1.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
addSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval.
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener), 
setSelectionInterval(int, int)


"
23,DefaultListSelectionModel,3,"void removeSelectionInterval(int index0, int index1)",True,,"

removeSelectionInterval
public void removeSelectionInterval(int index0,
                                    int index1)
Changes the selection to be the set difference of the current selection
 and the indices between index0 and index1 inclusive.
 index0 doesn't have to be less than or equal to index1.
 
 In SINGLE_INTERVAL_SELECTION selection mode, if the removal
 would produce two disjoint selections, the removal is extended through
 the greater end of the selection. For example, if the selection is
 0-10 and you supply indices 5,6 (in any order) the
 resulting selection is 0-4.
 
 If this represents a change to the current selection, then each
 ListSelectionListener is notified of the change.
 
 If either index is -1, this method does nothing and returns
 without exception. Otherwise, if either index is less than -1,
 an IndexOutOfBoundsException is thrown.

Specified by:
removeSelectionInterval in interface ListSelectionModel
Parameters:
index0 - one end of the interval
index1 - other end of the interval
Throws:
IndexOutOfBoundsException - if either index is less than -1
         (and neither index is -1)
See Also:
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
23,DefaultListSelectionModel,4,"void insertIndexInterval(int index, int length, boolean before)",True,,"

insertIndexInterval
public void insertIndexInterval(int index,
                                int length,
                                boolean before)
Insert length indices beginning before/after index. If the value
 at index is itself selected and the selection mode is not
 SINGLE_SELECTION, set all of the newly inserted items as selected.
 Otherwise leave them unselected. This method is typically
 called to sync the selection model with a corresponding change
 in the data model.

Specified by:
insertIndexInterval in interface ListSelectionModel


"
23,DefaultListSelectionModel,5,"void removeIndexInterval(int index0, int index1)",True,,"

removeIndexInterval
public void removeIndexInterval(int index0,
                                int index1)
Remove the indices in the interval index0,index1 (inclusive) from
 the selection model.  This is typically called to sync the selection
 model width a corresponding change in the data model.  Note
 that (as always) index0 need not be <= index1.

Specified by:
removeIndexInterval in interface ListSelectionModel


"
24,DefaultRowSorter,1,void setSortKeys(List<? extends RowSorter.SortKey> sortKeys),True,,"

setSortKeys
public void setSortKeys(List<? extends RowSorter.SortKey> sortKeys)
Sets the sort keys. This creates a copy of the supplied
 List; subsequent changes to the supplied
 List do not effect this DefaultRowSorter.
 If the sort keys have changed this triggers a sort.

Specified by:
setSortKeys in class RowSorter<M>
Parameters:
sortKeys - the new SortKeys; null
        is a shorthand for specifying an empty list,
        indicating that the view should be unsorted
Throws:
IllegalArgumentException - if any of the values in
         sortKeys are null or have a column index outside
         the range of the model


"
24,DefaultRowSorter,2,void toggleSortOrder(int column),True,,"

toggleSortOrder
public void toggleSortOrder(int column)
Reverses the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.  If
 the specified column is not sortable, this method has no
 effect.

Specified by:
toggleSortOrder in class RowSorter<M>
Parameters:
column - index of the column to make the primary sorted column,
        in terms of the underlying model
Throws:
IndexOutOfBoundsException - if column is outside the range of
         the underlying model
See Also:
setSortable(int,boolean), 
setMaxSortKeys(int)


"
24,DefaultRowSorter,3,"void setSortable(int column, boolean sortable)",True,,"

setSortable
public void setSortable(int column,
                        boolean sortable)
Sets whether or not the specified column is sortable.  The specified
 value is only checked when toggleSortOrder is invoked.
 It is still possible to sort on a column that has been marked as
 unsortable by directly setting the sort keys.  The default is
 true.

Parameters:
column - the column to enable or disable sorting on, in terms
        of the underlying model
sortable - whether or not the specified column is sortable
Throws:
IndexOutOfBoundsException - if column is outside
         the range of the model
See Also:
toggleSortOrder(int), 
setSortKeys(java.util.List<? extends javax.swing.RowSorter.SortKey>)


"
24,DefaultRowSorter,4,"void setRowFilter(RowFilter<? super M, ? super Integer> filter)",False,,NULL
24,DefaultRowSorter,5,void setModel(M model),False,,NULL
25,DefaultRowSorter.ModelWrapper,1,"Object getValueAt(int row, int column)",True,,"

getValueAt
public abstract Object getValueAt(int row,
                                  int column)
Returns the value at the specified index.

Parameters:
row - the row index
column - the column index
Returns:
the value at the specified index
Throws:
IndexOutOfBoundsException - if the indices are outside
         the range of the model


"
25,DefaultRowSorter.ModelWrapper,2,"void setValueAt(Object value, int row, int column)",False,,NULL
25,DefaultRowSorter.ModelWrapper,3,int getColumnCount(),True,,"

getColumnCount
public abstract int getColumnCount()
Returns the number of columns in the model.

Returns:
the number of columns in the model


"
25,DefaultRowSorter.ModelWrapper,4,int getRowCount(),True,,"

getRowCount
public abstract int getRowCount()
Returns the number of rows in the model.

Returns:
the number of rows in the model


"
25,DefaultRowSorter.ModelWrapper,5,void modelStructureChanged(),False,,NULL
26,DefaultSingleSelectionModel,1,void clearSelection(),True,,"

clearSelection
public void clearSelection()
Description copied from interface: SingleSelectionModel
Clears the selection (to -1).

Specified by:
clearSelection in interface SingleSelectionModel


"
26,DefaultSingleSelectionModel,2,int getSelectedIndex(),True,,"

getSelectedIndex
public int getSelectedIndex()
Description copied from interface: SingleSelectionModel
Returns the model's selection.

Specified by:
getSelectedIndex in interface SingleSelectionModel
Returns:
the model's selection, or -1 if there is no selection
See Also:
SingleSelectionModel.setSelectedIndex(int)


"
26,DefaultSingleSelectionModel,3,void setSelectedIndex(int index),True,,"

setSelectedIndex
public void setSelectedIndex(int index)
Description copied from interface: SingleSelectionModel
Sets the model's selected index to index.

 Notifies any listeners if the model changes

Specified by:
setSelectedIndex in interface SingleSelectionModel
Parameters:
index - an int specifying the model selection
See Also:
SingleSelectionModel.getSelectedIndex(), 
SingleSelectionModel.addChangeListener(javax.swing.event.ChangeListener)


"
26,DefaultSingleSelectionModel,4,void moveLeadSelectionIndex(int leadIndex),False,,NULL
26,DefaultSingleSelectionModel,5,void setAnchorSelectionIndex(int anchorIndex),False,,NULL
27,FocusManager,1,Component getComponent(),False,,NULL
27,FocusManager,2,void clearGlobalFocusOwner(),False,,NULL
27,FocusManager,3,void clearFocusOwner(),False,,NULL
27,FocusManager,4,void clearManagingFocus(),False,,NULL
27,FocusManager,5,void clearGlobalPermanentFocusOwner(),False,,NULL
28,GrayFilter,1,"Image filterRGB(Image img, int r, int g, int b)",False,,NULL
28,GrayFilter,2,Image createDisabledImage(Image i),True,,"

createDisabledImage
public static Image createDisabledImage(Image i)
Creates a disabled image

"
28,GrayFilter,3,"Image createDisabledImage(Image i, int r, int g, int b)",False,,NULL
28,GrayFilter,4,"Image createDisabledImage(Image i, int r, int g, int b, int a)",False,,NULL
28,GrayFilter,5,"Image createDisabledImage(Image i, int r, int g, int b, int a, boolean condition)",False,,NULL
29,GroupLayout,1,"Group createParallelGroup(int axis, boolean resizable)",False,,NULL
29,GroupLayout,2,Group createSequentialGroup(),False,,NULL
29,GroupLayout,3,void linkSize(Component... components),True,,"

linkSize
public void linkSize(Component... components)
Forces the specified components to have the same size
 regardless of their preferred, minimum or maximum sizes. Components that
 are linked are given the maximum of the preferred size of each of
 the linked components. For example, if you link two components with
 a preferred width of 10 and 20, both components are given a width of 20.
 
 This can be used multiple times to force any number of
 components to share the same size.
 
 Linked Components are not be resizable.

Parameters:
components - the Components that are to have the same size
Throws:
IllegalArgumentException - if components is
         null, or contains null
See Also:
linkSize(int,Component[])


"
29,GroupLayout,4,void setAutoCreateGaps(boolean autoCreateGaps),True,,"

setAutoCreateGaps
public void setAutoCreateGaps(boolean autoCreatePadding)
Sets whether a gap between components should automatically be
 created.  For example, if this is true and you add two
 components to a SequentialGroup a gap between the
 two components is automatically be created.  The default is
 false.

Parameters:
autoCreatePadding - whether a gap between components is
        automatically created


"
29,GroupLayout,5,void setAutoCreateContainerGaps(boolean autoCreateContainerGaps),True,,"

setAutoCreateContainerGaps
public void setAutoCreateContainerGaps(boolean autoCreateContainerPadding)
Sets whether a gap between the container and components that
 touch the border of the container should automatically be
 created. The default is false.

Parameters:
autoCreateContainerPadding - whether a gap between the container and
        components that touch the border of the container should
        automatically be created


"
30,ImageIcon,1,int getIconHeight(),True,,"

getIconHeight
public int getIconHeight()
Gets the height of the icon.

Specified by:
getIconHeight in interface Icon
Returns:
the height in pixels of this icon


"
30,ImageIcon,2,int getIconWidth(),True,,"

getIconWidth
public int getIconWidth()
Gets the width of the icon.

Specified by:
getIconWidth in interface Icon
Returns:
the width in pixels of this icon


"
30,ImageIcon,3,Image getImage(),True,,"

getImage
public Image getImage()
Returns this icon's Image.

Returns:
the Image object for this ImageIcon


"
30,ImageIcon,4,"void paintIcon(Component c, Graphics g, int x, int y)",True,,"

paintIcon
public void paintIcon(Component c,
                      Graphics g,
                      int x,
                      int y)
Paints the icon.
 The top-left corner of the icon is drawn at
 the point (x, y)
 in the coordinate space of the graphics context g.
 If this icon has no image observer,
 this method uses the c component
 as the observer.

Specified by:
paintIcon in interface Icon
Parameters:
c - the component to be used as the observer
          if this icon has no image observer
g - the graphics context
x - the X coordinate of the icon's top-left corner
y - the Y coordinate of the icon's top-left corner


"
30,ImageIcon,5,void setImage(Image image),True,,"

setImage
public void setImage(Image image)
Sets the image displayed by this icon.

Parameters:
image - the image


"
31,InputMap,1,"void put(KeyStroke keyStroke, Object actionMapKey)",True,,"

put
public void put(KeyStroke keyStroke,
                Object actionMapKey)
Adds a binding for keyStroke to actionMapKey.
 If actionMapKey is null, this removes the current binding
 for keyStroke.

"
31,InputMap,2,void remove(KeyStroke key),True,,"

remove
public void remove(KeyStroke key)
Removes the binding for key from this
 InputMap.

"
31,InputMap,3,void clear(),True,,"

clear
public void clear()
Removes all the mappings from this InputMap.

"
31,InputMap,4,Object get(KeyStroke keyStroke),True,,"

get
public Object get(KeyStroke keyStroke)
Returns the binding for keyStroke, messaging the
 parent InputMap if the binding is not locally defined.

"
31,InputMap,5,KeyStroke[] keys(),True,,"

keys
public KeyStroke[] keys()
Returns the KeyStrokes that are bound in this InputMap.

"
32,InputVerifier,1,boolean verify(JComponent input),True,,"

verify
public abstract boolean verify(JComponent input)
Checks whether the JComponent's input is valid. This method should
 have no side effects. It returns a boolean indicating the status
 of the argument's input.

Parameters:
input - the JComponent to verify
Returns:
true when valid, false when invalid
See Also:
JComponent.setInputVerifier(javax.swing.InputVerifier), 
JComponent.getInputVerifier()


"
32,InputVerifier,2,void shouldYieldFocus(JComponent input),False,,NULL
32,InputVerifier,3,void verify(JComponent input),False,,NULL
32,InputVerifier,4,"void shouldYieldFocus(JComponent input, boolean shouldYield)",False,,NULL
32,InputVerifier,5,"void verify(JComponent input, boolean shouldYield)",False,,NULL
33,InternalFrameFocusTraversalPolicy,1,"Component getComponentAfter(Container aContainer, Component aComponent)",False,,NULL
33,InternalFrameFocusTraversalPolicy,2,"Component getComponentBefore(Container aContainer, Component aComponent)",False,,NULL
33,InternalFrameFocusTraversalPolicy,3,Component getFirstComponent(Container aContainer),False,,NULL
33,InternalFrameFocusTraversalPolicy,4,Component getLastComponent(Container aContainer),False,,NULL
33,InternalFrameFocusTraversalPolicy,5,Component getDefaultComponent(Container aContainer),False,,NULL
34,JApplet,1,void init(),False,,NULL
34,JApplet,2,void start(),False,,NULL
34,JApplet,3,void stop(),False,,NULL
34,JApplet,4,void destroy(),False,,NULL
34,JApplet,5,JRootPane createRootPane(),True,,"

createRootPane
protected JRootPane createRootPane()
Called by the constructor methods to create the default rootPane.

"
35,JButton,1,void setText(String text),False,,NULL
35,JButton,2,String getText(),False,,NULL
35,JButton,3,void setEnabled(boolean enabled),False,,NULL
35,JButton,4,void addActionListener(ActionListener listener),False,,NULL
35,JButton,5,void setToolTipText(String text),False,,NULL
36,JCheckBox,1,void setSelected(boolean selected),False,,NULL
36,JCheckBox,2,boolean isSelected(),False,,NULL
36,JCheckBox,3,void setText(String text),False,,NULL
36,JCheckBox,4,String getText(),False,,NULL
36,JCheckBox,5,void setEnabled(boolean enabled),False,,NULL
37,JCheckBoxMenuItem,1,void setState(boolean b),True,,"

setState
public void setState(boolean b)
Sets the selected-state of the item. This method
 exists for AWT compatibility only.  New code should
 use setSelected() instead.

Parameters:
b - a boolean value indicating the item's
           selected-state, where true=selected


"
37,JCheckBoxMenuItem,2,boolean getState(),True,,"

getState
public boolean getState()
Returns the selected-state of the item. This method
 exists for AWT compatibility only.  New code should
 use isSelected() instead.

Returns:
true  if the item is selected


"
37,JCheckBoxMenuItem,3,void setSelected(boolean b),False,,NULL
37,JCheckBoxMenuItem,4,boolean isSelected(),False,,NULL
37,JCheckBoxMenuItem,5,void setAccelerator(KeyStroke keyStroke),False,,NULL
38,JColorChooser,1,"Color showDialog(Component parent, String title, Color initialColor)",True,,"

showDialog
public static Color showDialog(Component component,
                               String title,
                               Color initialColor)
                        throws HeadlessException
Shows a modal color-chooser dialog and blocks until the
 dialog is hidden.  If the user presses the ""OK"" button, then
 this method hides/disposes the dialog and returns the selected color.
 If the user presses the ""Cancel"" button or closes the dialog without
 pressing ""OK"", then this method hides/disposes the dialog and returns
 null.

Parameters:
component - the parent Component for the dialog
title - the String containing the dialog's title
initialColor - the initial Color set when the color-chooser is shown
Returns:
the selected color or null if the user opted out
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless()


"
38,JColorChooser,2,void setColor(Color color),True,,"

setColor
public void setColor(Color color)
Sets the current color of the color chooser to the specified color.
 The ColorSelectionModel will fire a ChangeEvent

Parameters:
color - the color to be set in the color chooser
See Also:
Container.addPropertyChangeListener(java.beans.PropertyChangeListener)


"
38,JColorChooser,3,Color getColor(),True,,"

getColor
public Color getColor()
Gets the current color value from the color chooser.
 By default, this delegates to the model.

Returns:
the current color value of the color chooser


"
38,JColorChooser,4,void setChooserPanels(AbstractColorChooserPanel[] panels),True,,"

setChooserPanels
public void setChooserPanels(AbstractColorChooserPanel[] panels)
Specifies the Color Panels used to choose a color value.

Parameters:
panels - an array of AbstractColorChooserPanel
          objects


"
39,JComboBox,1,void addItem(Object item),False,,NULL
39,JComboBox,2,"void insertItemAt(Object item, int index)",False,,NULL
39,JComboBox,3,void removeItem(Object item),True,,"

removeItem
public void removeItem(Object anObject)
Removes an item from the item list.
 This method works only if the JComboBox uses a
 mutable data model.

Parameters:
anObject - the object to remove from the item list
See Also:
MutableComboBoxModel


"
39,JComboBox,4,void removeAllItems(),True,,"

removeAllItems
public void removeAllItems()
Removes all items from the item list.

"
39,JComboBox,5,Object getSelectedItem(),True,,"

getSelectedItem
public Object getSelectedItem()
Returns the current selected item.
 
 If the combo box is editable, then this value may not have been added
 to the combo box with addItem, insertItemAt
 or the data constructors.

Returns:
the current selected Object
See Also:
setSelectedItem(java.lang.Object)


"
40,JComponent,1,void setToolTipText(String text),True,,"

setToolTipText
public void setToolTipText(String text)
Registers the text to display in a tool tip.
 The text displays when the cursor lingers over the component.
 
 See How to Use Tool Tips
 in The Java Tutorial
 for further documentation.

Parameters:
text - the string to display; if the text is null,
              the tool tip is turned off for this component
See Also:
TOOL_TIP_TEXT_KEY


"
40,JComponent,2,void setOpaque(boolean isOpaque),True,,"

setOpaque
public void setOpaque(boolean isOpaque)
If true the component paints every pixel within its bounds.
 Otherwise, the component may not paint some or all of its
 pixels, allowing the underlying pixels to show through.
 
 The default value of this property is false for JComponent.
 However, the default value for this property on most standard
 JComponent subclasses (such as JButton and
 JTree) is look-and-feel dependent.

Parameters:
isOpaque - true if this component should be opaque
See Also:
isOpaque()


"
40,JComponent,3,void setBorder(Border border),True,,"

setBorder
public void setBorder(Border border)
Sets the border of this component.  The Border object is
 responsible for defining the insets for the component
 (overriding any insets set directly on the component) and
 for optionally rendering any border decorations within the
 bounds of those insets.  Borders should be used (rather
 than insets) for creating both decorative and non-decorative
 (such as margins and padding) regions for a swing component.
 Compound borders can be used to nest multiple borders within a
 single component.
 
 Although technically you can set the border on any object
 that inherits from JComponent, the look and
 feel implementation of many standard Swing components
 doesn't work well with user-set borders.  In general,
 when you want to set a border on a standard Swing
 component other than JPanel or JLabel,
 we recommend that you put the component in a JPanel
 and set the border on the JPanel.
 
 This is a bound property.

Parameters:
border - the border to be rendered for this component
See Also:
Border, 
CompoundBorder


"
40,JComponent,4,void setPreferredSize(Dimension preferredSize),True,,"

setPreferredSize
public void setPreferredSize(Dimension preferredSize)
Sets the preferred size of this component.
 If preferredSize is null, the UI will
 be asked for the preferred size.

Overrides:
setPreferredSize in class Component
Parameters:
preferredSize - The new preferred size, or null
See Also:
Component.getPreferredSize(), 
Component.isPreferredSizeSet()


"
40,JComponent,5,void setEnabled(boolean enabled),True,,"

setEnabled
public void setEnabled(boolean enabled)
Sets whether or not this component is enabled.
 A component that is enabled may respond to user input,
 while a component that is not enabled cannot respond to
 user input.  Some components may alter their visual
 representation when they are disabled in order to
 provide feedback to the user that they cannot take input.
 Note: Disabling a component does not disable its children.

 Note: Disabling a lightweight component does not prevent it from
 receiving MouseEvents.

Overrides:
setEnabled in class Component
Parameters:
enabled - true if this component should be enabled, false otherwise
See Also:
Component.isEnabled(), 
Component.isLightweight()


"
41,JDesktopPane,1,void setDragMode(int mode),True,,"

setDragMode
public void setDragMode(int dragMode)
Sets the ""dragging style"" used by the desktop pane.
 You may want to change to one mode or another for
 performance or aesthetic reasons.

Parameters:
dragMode - the style of drag to use for items in the Desktop
Since:
1.3
See Also:
LIVE_DRAG_MODE, 
OUTLINE_DRAG_MODE


"
41,JDesktopPane,2,void setDesktopManager(DesktopManager d),True,,"

setDesktopManager
public void setDesktopManager(DesktopManager d)
Sets the DesktopManger that will handle
 desktop-specific UI actions. This may be overridden by
 LookAndFeel.

Parameters:
d - the DesktopManager to use


"
41,JDesktopPane,3,JInternalFrame[] getAllFrames(),True,,"

getAllFrames
public JInternalFrame[] getAllFrames()
Returns all JInternalFrames currently displayed in the
 desktop. Returns iconified frames as well as expanded frames.

Returns:
an array of JInternalFrame objects


"
41,JDesktopPane,4,void selectFrame(boolean doSelect),False,,NULL
41,JDesktopPane,5,"void setComponentZOrder(Component comp, int index)",True,,"

setComponentZOrder
public void setComponentZOrder(Component comp,
                               int index)
Moves the specified component to the specified z-order index in
 the container. The z-order determines the order that components
 are painted; the component with the highest z-order paints first
 and the component with the lowest z-order paints last.
 Where components overlap, the component with the lower
 z-order paints over the component with the higher z-order.
 
 If the component is a child of some other container, it is
 removed from that container before being added to this container.
 The important difference between this method and
 java.awt.Container.add(Component, int) is that this method
 doesn't call removeNotify on the component while
 removing it from its previous container unless necessary and when
 allowed by the underlying native windowing system. This way, if the
 component has the keyboard focus, it maintains the focus when
 moved to the new position.
 
 This property is guaranteed to apply only to lightweight
 non-Container components.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.
 
Note: Not all platforms support changing the z-order of
 heavyweight components from one container into another without
 the call to removeNotify. There is no way to detect
 whether a platform supports this, so developers shouldn't make
 any assumptions.

Overrides:
setComponentZOrder in class Container
Parameters:
comp - the component to be moved
index - the position in the container's list to
            insert the component, where getComponentCount()
            appends to the end
Since:
1.6
See Also:
Container.getComponentZOrder(java.awt.Component), 
Container.invalidate()


"
42,JDialog,1,void setTitle(String title),False,,NULL
42,JDialog,2,void setModal(boolean modal),False,,NULL
42,JDialog,3,void setResizable(boolean resizable),False,,NULL
42,JDialog,4,void setContentPane(Container contentPane),True,,"

setContentPane
public void setContentPane(Container contentPane)
Sets the contentPane property.
 This method is called by the constructor.
 
 Swing's painting architecture requires an opaque JComponent
 in the containment hierarchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque JComponent.

Specified by:
setContentPane in interface RootPaneContainer
Parameters:
contentPane - the contentPane object for this dialog
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null
See Also:
JRootPane, 
getContentPane(), 
RootPaneContainer.setContentPane(java.awt.Container)


"
42,JDialog,5,void setDefaultCloseOperation(int operation),True,,"

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this dialog.
 You must specify one of the following choices:
 

DO_NOTHING_ON_CLOSE
 (defined in WindowConstants):
 Don't do anything; require the
 program to handle the operation in the windowClosing
 method of a registered WindowListener object.

 HIDE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide the dialog after
 invoking any registered WindowListener
 objects.

 DISPOSE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide and dispose the
 dialog after invoking any registered WindowListener
 objects.
 

 The value is set to HIDE_ON_CLOSE by default. Changes
 to the value of this property cause the firing of a property
 change event, with property name ""defaultCloseOperation"".
 
Note: When the last displayable window within the
 Java virtual machine (VM) is disposed of, the VM may
 terminate.  See 
 AWT Threading Issues for more information.

Parameters:
operation - the operation which should be performed when the
        user closes the dialog
Throws:
IllegalArgumentException - if defaultCloseOperation value
         isn't one of the above valid values
See Also:
Window.addWindowListener(java.awt.event.WindowListener), 
getDefaultCloseOperation(), 
WindowConstants


"
43,JEditorPane,1,void setPage(String url),True,,"

setPage
public void setPage(String url)
             throws IOException
Sets the current URL being displayed.

Parameters:
url - the URL for display
Throws:
IOException - for a null or invalid URL
          specification


"
43,JEditorPane,2,void setText(String t),True,,"

setText
public void setText(String t)
Sets the text of this TextComponent to the specified
 content,
 which is expected to be in the format of the content type of
 this editor.  For example, if the type is set to text/html
 the string should be specified in terms of HTML.
 
 This is implemented to remove the contents of the current document,
 and replace them by parsing the given string using the current
 EditorKit.  This gives the semantics of the
 superclass by not changing
 out the model, while supporting the content type currently set on
 this component.  The assumption is that the previous content is
 relatively
 small, and that the previous content doesn't have side effects.
 Both of those assumptions can be violated and cause undesirable results.
 To avoid this, create a new document,
 getEditorKit().createDefaultDocument(), and replace the
 existing Document with the new one. You are then assured the
 previous Document won't have any lingering state.
 

 Leaving the existing model in place means that the old view will be
 torn down, and a new view created, where replacing the document would
 avoid the tear down of the old view.
 
 Some formats (such as HTML) can install things into the document that
 can influence future contents.  HTML can have style information embedded
 that would influence the next content installed unexpectedly.
 

 An alternative way to load this component with a string would be to
 create a StringReader and call the read method.  In this case the model
 would be replaced after it was initialized with the contents of the
 string.

Overrides:
setText in class JTextComponent
Parameters:
t - the new text to be set; if null the old
    text will be deleted
See Also:
getText()


"
43,JEditorPane,3,String getText(),True,,"

getText
public String getText()
Returns the text contained in this TextComponent
 in terms of the
 content type of this editor.  If an exception is thrown while
 attempting to retrieve the text, null will be returned.
 This is implemented to call JTextComponent.write with
 a StringWriter.

Overrides:
getText in class JTextComponent
Returns:
the text
See Also:
setText(java.lang.String)


"
43,JEditorPane,4,void setContentType(String type),True,,"

setContentType
public final void setContentType(String type)
Sets the type of content that this editor
 handles.  This calls getEditorKitForContentType,
 and then setEditorKit if an editor kit can
 be successfully located.  This is mostly convenience method
 that can be used as an alternative to calling
 setEditorKit directly.
 
 If there is a charset definition specified as a parameter
 of the content type specification, it will be used when
 loading input streams using the associated EditorKit.
 For example if the type is specified as
 text/html; charset=EUC-JP the content
 will be loaded using the EditorKit registered for
 text/html and the Reader provided to
 the EditorKit to load unicode into the document will
 use the EUC-JP charset for translating
 to unicode.  If the type is not recognized, the content
 will be loaded using the EditorKit registered
 for plain text, text/plain.

Parameters:
type - the non-null mime type for the content editing
   support
Throws:
NullPointerException - if the type parameter
          is null
See Also:
getContentType()


"
43,JEditorPane,5,void setEditable(boolean editable),False,,NULL
44,JFileChooser,1,int showOpenDialog(Component parent),True,,"

showOpenDialog
public int showOpenDialog(Component parent)
                   throws HeadlessException
Pops up an ""Open File"" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

Parameters:
parent - the parent component of the dialog,
                  can be null;
                  see showDialog for details
Returns:
the return state of the file chooser on popdown:
 
JFileChooser.CANCEL_OPTION
 JFileChooser.APPROVE_OPTION
 JFileChooser.ERROR_OPTION if an error occurs or the
                  dialog is dismissed
 
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless(), 
showDialog(java.awt.Component, java.lang.String)


"
44,JFileChooser,2,int showSaveDialog(Component parent),True,,"

showSaveDialog
public int showSaveDialog(Component parent)
                   throws HeadlessException
Pops up a ""Save File"" file chooser dialog. Note that the
 text that appears in the approve button is determined by
 the L&F.

Parameters:
parent - the parent component of the dialog,
                  can be null;
                  see showDialog for details
Returns:
the return state of the file chooser on popdown:
 
JFileChooser.CANCEL_OPTION
 JFileChooser.APPROVE_OPTION
 JFileChooser.ERROR_OPTION if an error occurs or the
                  dialog is dismissed
 
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless(), 
showDialog(java.awt.Component, java.lang.String)


"
44,JFileChooser,3,File getSelectedFile(),True,,"

getSelectedFile
public File getSelectedFile()
Returns the selected file. This can be set either by the
 programmer via setSelectedFile or by a user action, such as
 either typing the filename into the UI or selecting the
 file from a list in the UI.

Returns:
the selected file
See Also:
setSelectedFile(java.io.File)


"
44,JFileChooser,4,File[] getSelectedFiles(),True,,"

getSelectedFiles
public File[] getSelectedFiles()
Returns a list of selected files if the file chooser is
 set to allow multiple selection.

"
44,JFileChooser,5,void setFileFilter(FileFilter filter),True,,"

setFileFilter
public void setFileFilter(FileFilter filter)
Sets the current file filter. The file filter is used by the
 file chooser to filter out files from the user's view.

Parameters:
filter - the new current file filter to use
See Also:
getFileFilter()


"
45,JFormattedTextField,1,Object getValue(),True,,"

getValue
public Object getValue()
Returns the last valid value. Based on the editing policy of
 the AbstractFormatter this may not return the current
 value. The currently edited value can be obtained by invoking
 commitEdit followed by getValue.

Returns:
Last valid value


"
45,JFormattedTextField,2,void setValue(Object value),True,,"

setValue
public void setValue(Object value)
Sets the value that will be formatted by an
 AbstractFormatter obtained from the current
 AbstractFormatterFactory. If no
 AbstractFormatterFactory has been specified, this will
 attempt to create one based on the type of value.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

Parameters:
value - Current value to display


"
45,JFormattedTextField,3,void setFormatter(AbstractFormatter formatter),False,,NULL
45,JFormattedTextField,4,void setFocusLostBehavior(int behavior),True,,"

setFocusLostBehavior
public void setFocusLostBehavior(int behavior)
Sets the behavior when focus is lost. This will be one of
 JFormattedTextField.COMMIT_OR_REVERT,
 JFormattedTextField.REVERT,
 JFormattedTextField.COMMIT or
 JFormattedTextField.PERSIST
 Note that some AbstractFormatters may push changes as
 they occur, so that the value of this will have no effect.
 
 This will throw an IllegalArgumentException if the object
 passed in is not one of the afore mentioned values.
 
 The default value of this property is
 JFormattedTextField.COMMIT_OR_REVERT.

Parameters:
behavior - Identifies behavior when focus is lost
Throws:
IllegalArgumentException - if behavior is not one of the known
         values


"
45,JFormattedTextField,5,void setPlaceholder(String text),False,,NULL
46,JFormattedTextField.AbstractFormatter,1,Object stringToValue(String text),True,,"

stringToValue
public abstract Object stringToValue(String text)
                              throws ParseException
Parses text returning an arbitrary Object. Some
 formatters may return null.

Parameters:
text - String to convert
Returns:
Object representation of text
Throws:
ParseException - if there is an error in the conversion


"
46,JFormattedTextField.AbstractFormatter,2,String valueToString(Object value),True,,"

valueToString
public abstract String valueToString(Object value)
                              throws ParseException
Returns the string value to display for value.

Parameters:
value - Value to convert
Returns:
String representation of value
Throws:
ParseException - if there is an error in the conversion


"
46,JFormattedTextField.AbstractFormatter,3,void install(JFormattedTextField ftf),True,,"

install
public void install(JFormattedTextField ftf)
Installs the AbstractFormatter onto a particular
 JFormattedTextField.
 This will invoke valueToString to convert the
 current value from the JFormattedTextField to
 a String. This will then install the Actions from
 getActions, the DocumentFilter
 returned from getDocumentFilter and the
 NavigationFilter returned from
 getNavigationFilter onto the
 JFormattedTextField.
 
 Subclasses will typically only need to override this if they
 wish to install additional listeners on the
 JFormattedTextField.
 
 If there is a ParseException in converting the
 current value to a String, this will set the text to an empty
 String, and mark the JFormattedTextField as being
 in an invalid state.
 
 While this is a public method, this is typically only useful
 for subclassers of JFormattedTextField.
 JFormattedTextField will invoke this method at
 the appropriate times when the value changes, or its internal
 state changes.  You will only need to invoke this yourself if
 you are subclassing JFormattedTextField and
 installing/uninstalling AbstractFormatter at a
 different time than JFormattedTextField does.

Parameters:
ftf - JFormattedTextField to format for, may be null indicating
            uninstall from current JFormattedTextField.


"
46,JFormattedTextField.AbstractFormatter,4,void uninstall(),True,,"

uninstall
public void uninstall()
Uninstalls any state the AbstractFormatter may have
 installed on the JFormattedTextField. This resets the
 DocumentFilter, NavigationFilter
 and additional Actions installed on the
 JFormattedTextField.

"
46,JFormattedTextField.AbstractFormatter,5,void setCommitsOnValidEdit(boolean commitsOnValidEdit),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,1,AbstractFormatter getFormatter(JFormattedTextField tf),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,2,JFormattedTextField.AbstractFormatter getFormatterWhenSet(),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,3,void setDefaultFormatter(AbstractFormatter defaultFormatter),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,4,void setDisplayFormatter(AbstractFormatter displayFormatter),False,,NULL
47,JFormattedTextField.AbstractFormatterFactory,5,void setValueClass(Class<?> valueClass),False,,NULL
48,JFrame,1,void setDefaultCloseOperation(int operation),True,,"

setDefaultCloseOperation
public void setDefaultCloseOperation(int operation)
Sets the operation that will happen by default when
 the user initiates a ""close"" on this frame.
 You must specify one of the following choices:
 

DO_NOTHING_ON_CLOSE
 (defined in WindowConstants):
 Don't do anything; require the
 program to handle the operation in the windowClosing
 method of a registered WindowListener object.

 HIDE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide the frame after
 invoking any registered WindowListener
 objects.

 DISPOSE_ON_CLOSE
 (defined in WindowConstants):
 Automatically hide and dispose the
 frame after invoking any registered WindowListener
 objects.

 EXIT_ON_CLOSE
 (defined in JFrame):
 Exit the application using the System
exit method.  Use this only in applications.
 

 The value is set to HIDE_ON_CLOSE by default. Changes
 to the value of this property cause the firing of a property
 change event, with property name ""defaultCloseOperation"".
 
Note: When the last displayable window within the
 Java virtual machine (VM) is disposed of, the VM may
 terminate.  See 
 AWT Threading Issues for more information.

Parameters:
operation - the operation which should be performed when the
        user closes the frame
Throws:
IllegalArgumentException - if defaultCloseOperation value
             isn't one of the above valid values
SecurityException - if EXIT_ON_CLOSE has been specified and the
        SecurityManager will
        not allow the caller to invoke System.exit
See Also:
Window.addWindowListener(java.awt.event.WindowListener), 
getDefaultCloseOperation(), 
WindowConstants, 
Runtime.exit(int)


"
48,JFrame,2,void setTitle(String title),False,,NULL
48,JFrame,3,"void setSize(int width, int height)",False,,NULL
48,JFrame,4,void setVisible(boolean b),False,,NULL
48,JFrame,5,void setResizable(boolean resizable),False,,NULL
49,JInternalFrame,1,void setResizable(boolean resizable),True,,"

setResizable
public void setResizable(boolean b)
Sets whether the JInternalFrame can be resized by some
 user action.

Parameters:
b - a boolean, where true means this internal frame can be resized


"
49,JInternalFrame,2,void setIconifiable(boolean iconifiable),True,,"

setIconifiable
public void setIconifiable(boolean b)
Sets the iconable property,
 which must be true
 for the user to be able to
 make the JInternalFrame an icon.
 Some look and feels might not implement iconification;
 they will ignore this property.

Parameters:
b - a boolean, where true means this internal frame can be iconified


"
49,JInternalFrame,3,void setMaximizable(boolean maximizable),True,,"

setMaximizable
public void setMaximizable(boolean b)
Sets the maximizable property,
 which determines whether the JInternalFrame
 can be maximized by
 some user action.
 Some look and feels might not support maximizing internal frames;
 they will ignore this property.

Parameters:
b - true to specify that this internal frame should be maximizable; false to specify that it should not be


"
49,JInternalFrame,4,void setClosable(boolean closable),True,,"

setClosable
public void setClosable(boolean b)
Sets whether this JInternalFrame can be closed by
 some user action.

Parameters:
b - a boolean value, where true means this internal frame can be closed


"
49,JInternalFrame,5,void setTitle(String title),True,,"

setTitle
public void setTitle(String title)
Sets the JInternalFrame title. title
 may have a null value.

Parameters:
title - the String to display in the title bar
See Also:
getTitle()


"
50,JInternalFrame.JDesktopIcon,1,"void setBounds(int x, int y, int width, int height)",False,,NULL
50,JInternalFrame.JDesktopIcon,2,void setUI(JDesktopIconUI ui),False,,NULL
50,JInternalFrame.JDesktopIcon,3,void setInternalFrame(JInternalFrame f),True,,"

setInternalFrame
public void setInternalFrame(JInternalFrame f)
Sets the JInternalFrame with which this
 DesktopIcon is associated.

Parameters:
f - the JInternalFrame with which this icon
              is associated


"
50,JInternalFrame.JDesktopIcon,4,void setVisible(boolean visible),False,,NULL
50,JInternalFrame.JDesktopIcon,5,void setToolTipText(String text),False,,NULL
51,JLabel,1,void setText(String text),True,,"

setText
public void setText(String text)
Defines the single line of text this component will display.  If
 the value of text is null or empty string, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
setIcon(javax.swing.Icon)


"
51,JLabel,2,String getText(),True,,"

getText
public String getText()
Returns the text string that the label displays.

Returns:
a String
See Also:
setText(java.lang.String)


"
51,JLabel,3,void setIcon(Icon icon),True,,"

setIcon
public void setIcon(Icon icon)
Defines the icon this component will display.  If
 the value of icon is null, nothing is displayed.
 
 The default value of this property is null.
 
 This is a JavaBeans bound property.

See Also:
setVerticalTextPosition(int), 
setHorizontalTextPosition(int), 
getIcon()


"
51,JLabel,4,Icon getIcon(),True,,"

getIcon
public Icon getIcon()
Returns the graphic image (glyph, icon) that the label displays.

Returns:
an Icon
See Also:
setIcon(javax.swing.Icon)


"
51,JLabel,5,void setHorizontalAlignment(int alignment),True,,"

setHorizontalAlignment
public void setHorizontalAlignment(int alignment)
Sets the alignment of the label's contents along the X axis.
 
 This is a JavaBeans bound property.

Parameters:
alignment - One of the following constants
           defined in SwingConstants:
           LEFT,
           CENTER (the default for image-only labels),
           RIGHT,
           LEADING (the default for text-only labels) or
           TRAILING.
See Also:
SwingConstants, 
getHorizontalAlignment()


"
52,JLayer,1,void setView(Component view),False,,NULL
52,JLayer,2,void setLayerEventMask(long mask),True,,"

setLayerEventMask
public void setLayerEventMask(long layerEventMask)
Enables the events from JLayer and all its descendants
 defined by the specified event mask parameter
 to be delivered to the
 LayerUI.eventDispatched(AWTEvent, JLayer) method.
 
 Events are delivered provided that LayerUI is set
 for this JLayer and the JLayer
 is displayable.
 
 The following example shows how to correctly use this method
 in the LayerUI implementations:
 
    public void installUI(JComponent c) {
       super.installUI(c);
       JLayer l = (JLayer) c;
       // this LayerUI will receive only key and focus events
       l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK);
    }

    public void uninstallUI(JComponent c) {
       super.uninstallUI(c);
       JLayer l = (JLayer) c;
       // JLayer must be returned to its initial state
       l.setLayerEventMask(0);
    }
 

 By default JLayer receives no events and its event mask is 0.

Parameters:
layerEventMask - the bitmask of event types to receive
See Also:
getLayerEventMask(), 
LayerUI.eventDispatched(AWTEvent, JLayer), 
Component.isDisplayable()


"
52,JLayer,3,void setUI(LayerUI<? extends Component> ui),False,,NULL
52,JLayer,4,void setGlassPane(Component glassPane),False,,NULL
52,JLayer,5,void setBorder(Border border),True,,"

setBorder
public void setBorder(Border border)
A non-null border, or non-zero insets, isn't supported, to prevent the geometry
 of this component from becoming complex enough to inhibit
 subclassing of LayerUI class.  To create a JLayer with a border,
 add it to a JPanel that has a border.
 Note:  If border is non-null, this
 method will throw an exception as borders are not supported on
 a JLayer.

Overrides:
setBorder in class JComponent
Parameters:
border - the Border to set
Throws:
IllegalArgumentException - this method is not supported
See Also:
Border, 
CompoundBorder


"
53,JLayeredPane,1,"void add(Component comp, Integer layer)",False,,NULL
53,JLayeredPane,2,"void setPosition(Component c, int position)",True,,"

setPosition
public void setPosition(Component c,
                        int position)
Moves the component to position within its current layer,
 where 0 is the topmost position within the layer and -1 is the bottommost
 position.
 
Note: Position numbering is defined by java.awt.Container, and
 is the opposite of layer numbering. Lower position numbers are closer
 to the top (0 is topmost), and higher position numbers are closer to
 the bottom.

Parameters:
c - the Component to move
position - an int in the range -1..N-1, where N is the number of
                  components in the component's current layer


"
53,JLayeredPane,3,"void setLayer(Component c, int layer)",True,,"

setLayer
public void setLayer(Component c,
                     int layer)
Sets the layer attribute on the specified component,
 making it the bottommost component in that layer.
 Should be called before adding to parent.

Parameters:
c - the Component to set the layer for
layer - an int specifying the layer to set, where
              lower numbers are closer to the bottom


"
53,JLayeredPane,4,void moveToFront(Component c),True,,"

moveToFront
public void moveToFront(Component c)
Moves the component to the top of the components in its current layer
 (position 0).

Parameters:
c - the Component to move
See Also:
setPosition(Component, int)


"
53,JLayeredPane,5,void moveToBack(Component c),True,,"

moveToBack
public void moveToBack(Component c)
Moves the component to the bottom of the components in its current layer
 (position -1).

Parameters:
c - the Component to move
See Also:
setPosition(Component, int)


"
54,JList,1,void setListData(Object[] listData),False,,NULL
54,JList,2,int getSelectedIndex(),True,,"

getSelectedIndex
public int getSelectedIndex()
Returns the smallest selected cell index; the selection when only
 a single item is selected in the list. When multiple items are selected,
 it is simply the smallest selected index. Returns -1 if there is
 no selection.
 
 This method is a cover that delegates to getMinSelectionIndex.

Returns:
the smallest selected cell index
See Also:
getMinSelectionIndex(), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
54,JList,3,void setSelectedIndex(int index),True,,"

setSelectedIndex
public void setSelectedIndex(int index)
Selects a single cell. Does nothing if the given index is greater
 than or equal to the model size. This is a convenience method that uses
 setSelectionInterval on the selection model. Refer to the
 documentation for the selection model class being used for details on
 how values less than 0 are handled.

Parameters:
index - the index of the cell to select
See Also:
ListSelectionModel.setSelectionInterval(int, int), 
isSelectedIndex(int), 
addListSelectionListener(javax.swing.event.ListSelectionListener)


"
54,JList,4,Object getSelectedValue(),False,,NULL
54,JList,5,void clearSelection(),True,,"

clearSelection
public void clearSelection()
Clears the selection; after calling this method, isSelectionEmpty
 will return true. This is a cover method that delegates to the
 method of the same name on the list's selection model.

See Also:
ListSelectionModel.clearSelection(), 
isSelectionEmpty()


"
55,JList.DropLocation,1,int getIndex(),True,,"

getIndex
public int getIndex()
Returns the index where dropped data should be placed in the
 list. Interpretation of the value depends on the drop mode set on
 the associated component. If the drop mode is either
 DropMode.USE_SELECTION or DropMode.ON,
 the return value is an index of a row in the list. If the drop mode is
 DropMode.INSERT, the return value refers to the index
 where the data should be inserted. If the drop mode is
 DropMode.ON_OR_INSERT, the value of
 isInsert() indicates whether the index is an index
 of a row, or an insert index.
 
-1 indicates that the drop occurred over empty space,
 and no index could be calculated.

Returns:
the drop index


"
55,JList.DropLocation,2,boolean isInsert(),True,,"

isInsert
public boolean isInsert()
Returns whether or not this location represents an insert
 location.

Returns:
whether or not this is an insert location


"
55,JList.DropLocation,3,boolean isInsertRow(),False,,NULL
55,JList.DropLocation,4,boolean isInsertColumn(),False,,NULL
55,JList.DropLocation,5,boolean isInsertRow(),False,,NULL
56,JMenu,1,void add(JMenuItem menuItem),False,,NULL
56,JMenu,2,"void insert(JMenuItem menuItem, int index)",False,,NULL
56,JMenu,3,void remove(int index),True,,"

remove
public void remove(int pos)
Removes the menu item at the specified index from this menu.

Overrides:
remove in class Container
Parameters:
pos - the position of the item to be removed
Throws:
IllegalArgumentException - if the value of
                       pos < 0, or if pos
                       is greater than the number of menu items
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.getComponentCount()


"
56,JMenu,4,void removeAll(),True,,"

removeAll
public void removeAll()
Removes all menu items from this menu.

Overrides:
removeAll in class Container
See Also:
Container.add(java.awt.Component), 
Container.remove(int), 
Container.invalidate()


"
56,JMenu,5,JMenuItem getItem(int index),True,,"

getItem
public JMenuItem getItem(int pos)
Returns the JMenuItem at the specified position.
 If the component at pos is not a menu item,
 null is returned.
 This method is included for AWT compatibility.

Parameters:
pos - an integer specifying the position
Returns:
the menu item at the specified position; or null
          if the item as the specified position is not a menu item
Throws:
IllegalArgumentException - if the value of
                       pos < 0


"
57,JMenuBar,1,void add(JMenu menu),False,,NULL
57,JMenuBar,2,void remove(int index),False,,NULL
57,JMenuBar,3,JMenu getMenu(int index),True,,"

getMenu
public JMenu getMenu(int index)
Returns the menu at the specified position in the menu bar.

Parameters:
index - an integer giving the position in the menu bar, where
               0 is the first position
Returns:
the JMenu at that position, or null if
          if there is no JMenu at that position (ie. if
          it is a JMenuItem)


"
57,JMenuBar,4,int getMenuCount(),True,,"

getMenuCount
public int getMenuCount()
Returns the number of items in the menu bar.

Returns:
the number of items in the menu bar


"
57,JMenuBar,5,void setHelpMenu(JMenu menu),True,,"

setHelpMenu
public void setHelpMenu(JMenu menu)
Sets the help menu that appears when the user selects the
 ""help"" option in the menu bar. This method is not yet implemented
 and will throw an exception.

Parameters:
menu - the JMenu that delivers help to the user


"
58,JMenuItem,1,void setAccelerator(KeyStroke keyStroke),True,,"

setAccelerator
public void setAccelerator(KeyStroke keyStroke)
Sets the key combination which invokes the menu item's
 action listeners without navigating the menu hierarchy. It is the
 UI's responsibility to install the correct action.  Note that
 when the keyboard accelerator is typed, it will work whether or
 not the menu is currently displayed.

Parameters:
keyStroke - the KeyStroke which will
          serve as an accelerator


"
58,JMenuItem,2,void setArmed(boolean b),True,,"

setArmed
public void setArmed(boolean b)
Identifies the menu item as ""armed"". If the mouse button is
 released while it is over this item, the menu's action event
 will fire. If the mouse button is released elsewhere, the
 event will not fire and the menu item will be disarmed.

Parameters:
b - true to arm the menu item so it can be selected


"
58,JMenuItem,3,void setMnemonic(int mnemonic),False,,NULL
58,JMenuItem,4,void setToolTipText(String text),False,,NULL
58,JMenuItem,5,void setAction(Action a),False,,NULL
59,JOptionPane,1,"int showConfirmDialog(Component parentComponent, Object message)",True,,"

showConfirmDialog
public static int showConfirmDialog(Component parentComponent,
                                    Object message)
                             throws HeadlessException
Brings up a dialog with the options Yes,
 No and Cancel; with the
 title, Select an Option.

Parameters:
parentComponent - determines the Frame in which the
                  dialog is displayed; if null,
                  or if the parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
Returns:
an integer indicating the option selected by the user
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
59,JOptionPane,2,"void showMessageDialog(Component parentComponent, Object message)",True,,"

showMessageDialog
public static void showMessageDialog(Component parentComponent,
                                     Object message)
                              throws HeadlessException
Brings up an information-message dialog titled ""Message"".

Parameters:
parentComponent - determines the Frame in
          which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the Object to display
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
59,JOptionPane,3,"String showInputDialog(Component parentComponent, Object message)",True,,"

showInputDialog
public static String showInputDialog(Component parentComponent,
                                     Object message)
                              throws HeadlessException
Shows a question-message dialog requesting input from the user
 parented to parentComponent.
 The dialog is displayed on top of the Component's
 frame, and is usually positioned below the Component.

Parameters:
parentComponent - the parent Component for the
          dialog
message - the Object to display
Throws:
HeadlessException - if
    GraphicsEnvironment.isHeadless returns
    true
See Also:
GraphicsEnvironment.isHeadless()


"
59,JOptionPane,4,"int showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)",True,,"

showOptionDialog
public static int showOptionDialog(Component parentComponent,
                                   Object message,
                                   String title,
                                   int optionType,
                                   int messageType,
                                   Icon icon,
                                   Object[] options,
                                   Object initialValue)
                            throws HeadlessException
Brings up a dialog with a specified icon, where the initial
 choice is determined by the initialValue parameter and
 the number of choices is determined by the optionType
 parameter.
 
 If optionType is YES_NO_OPTION,
 or YES_NO_CANCEL_OPTION
 and the options parameter is null,
 then the options are
 supplied by the look and feel.
 
 The messageType parameter is primarily used to supply
 a default icon from the look and feel.

Parameters:
parentComponent - determines the Frame
                  in which the dialog is displayed;  if
                  null, or if the
                  parentComponent has no
                  Frame, a
                  default Frame is used
message - the Object to display
title - the title string for the dialog
optionType - an integer designating the options available on the
                  dialog: DEFAULT_OPTION,
                  YES_NO_OPTION,
                  YES_NO_CANCEL_OPTION,
                  or OK_CANCEL_OPTION
messageType - an integer designating the kind of message this is,
                  primarily used to determine the icon from the
                  pluggable Look and Feel: ERROR_MESSAGE,
                  INFORMATION_MESSAGE,
                  WARNING_MESSAGE,
                  QUESTION_MESSAGE,
                  or PLAIN_MESSAGE
icon - the icon to display in the dialog
options - an array of objects indicating the possible choices
                  the user can make; if the objects are components, they
                  are rendered properly; non-String
                  objects are
                  rendered using their toString methods;
                  if this parameter is null,
                  the options are determined by the Look and Feel
initialValue - the object that represents the default selection
                  for the dialog; only meaningful if options
                  is used; can be null
Returns:
an integer indicating the option chosen by the user,
                  or CLOSED_OPTION if the user closed
                  the dialog
Throws:
HeadlessException - if
   GraphicsEnvironment.isHeadless returns
   true
See Also:
GraphicsEnvironment.isHeadless()


"
59,JOptionPane,5,"void showInternalMessageDialog(Component parentComponent, Object message)",True,,"

showInternalMessageDialog
public static void showInternalMessageDialog(Component parentComponent,
                                             Object message)
Brings up an internal confirmation dialog panel. The dialog
 is a information-message dialog titled ""Message"".

Parameters:
parentComponent - determines the Frame
          in which the dialog is displayed; if null,
          or if the parentComponent has no
          Frame, a default Frame is used
message - the object to display


"
60,JPanel,1,void setLayout(LayoutManager layout),False,,NULL
60,JPanel,2,void setOpaque(boolean isOpaque),False,,NULL
60,JPanel,3,void setBorder(Border border),False,,NULL
60,JPanel,4,void setToolTipText(String text),False,,NULL
60,JPanel,5,void setDoubleBuffered(boolean aFlag),False,,NULL
61,JPasswordField,1,char[] getPassword(),True,,"

getPassword
public char[] getPassword()
Returns the text contained in this TextComponent.
 If the underlying document is null, will give a
 NullPointerException.  For stronger
 security, it is recommended that the returned character array be
 cleared after use by setting each character to zero.

Returns:
the text


"
61,JPasswordField,2,void setEchoChar(char c),True,,"

setEchoChar
public void setEchoChar(char c)
Sets the echo character for this JPasswordField.
 Note that this is largely a suggestion, since the
 view that gets installed can use whatever graphic techniques
 it desires to represent the field.  Setting a value of 0 indicates
 that you wish to see the text as it is typed, similar to
 the behavior of a standard JTextField.

Parameters:
c - the echo character to display
See Also:
echoCharIsSet(), 
getEchoChar()


"
61,JPasswordField,3,void setSelectionStart(int selectionStart),False,,NULL
61,JPasswordField,4,void setSelectionEnd(int selectionEnd),False,,NULL
61,JPasswordField,5,void setEditable(boolean editable),False,,NULL
62,JPopupMenu,1,void add(JMenuItem menuItem),False,,NULL
62,JPopupMenu,2,"void show(Component invoker, int x, int y)",True,,"

show
public void show(Component invoker,
                 int x,
                 int y)
Displays the popup menu at the position x,y in the coordinate
 space of the component invoker.

Parameters:
invoker - the component in whose space the popup menu is to appear
x - the x coordinate in invoker's coordinate space at which
 the popup menu is to be displayed
y - the y coordinate in invoker's coordinate space at which
 the popup menu is to be displayed


"
62,JPopupMenu,3,void setVisible(boolean b),True,,"

setVisible
public void setVisible(boolean b)
Sets the visibility of the popup menu.

Overrides:
setVisible in class JComponent
Parameters:
b - true to make the popup visible, or false to
          hide it
See Also:
Component.isVisible(), 
Component.invalidate()


"
62,JPopupMenu,4,void remove(int index),True,,"

remove
public void remove(int pos)
Removes the component at the specified index from this popup menu.

Overrides:
remove in class Container
Parameters:
pos - the position of the item to be removed
Throws:
IllegalArgumentException - if the value of
                          pos < 0, or if the value of
                          pos is greater than the
                          number of items
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.validate(), 
Container.getComponentCount()


"
62,JPopupMenu,5,Component getInvoker(),True,,"

getInvoker
public Component getInvoker()
Returns the component which is the 'invoker' of this
 popup menu.

Returns:
the Component in which the popup menu is displayed


"
63,JPopupMenu.Separator,1,void setUI(SeparatorUI ui),False,,NULL
63,JPopupMenu.Separator,2,SeparatorUI getUI(),False,,NULL
63,JPopupMenu.Separator,3,void setBorder(Border border),False,,NULL
63,JPopupMenu.Separator,4,Border getBorder(),False,,NULL
63,JPopupMenu.Separator,5,void setOrientation(int orientation),False,,NULL
64,JProgressBar,1,void setMinimum(int n),True,,"

setMinimum
public void setMinimum(int n)
Sets the progress bar's minimum value
 (stored in the progress bar's data model) to n.
 
 The data model (a BoundedRangeModel instance)
 handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the minimum value is different from the previous minimum,
 all change listeners are notified.

Parameters:
n - the new minimum
See Also:
getMinimum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMinimum(int)


"
64,JProgressBar,2,void setMaximum(int n),True,,"

setMaximum
public void setMaximum(int n)
Sets the progress bar's maximum value
 (stored in the progress bar's data model) to n.
 
 The underlying BoundedRangeModel handles any mathematical
 issues arising from assigning faulty values.
 See the BoundedRangeModel documentation for details.
 
 If the maximum value is different from the previous maximum,
 all change listeners are notified.

Parameters:
n - the new maximum
See Also:
getMaximum(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setMaximum(int)


"
64,JProgressBar,3,void setValue(int n),True,,"

setValue
public void setValue(int n)
Sets the progress bar's current value to n.  This method
 forwards the new value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new value is different from the previous value,
 all change listeners are notified.

Parameters:
n - the new value
See Also:
getValue(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setValue(int)


"
64,JProgressBar,4,void setStringPainted(boolean b),True,,"

setStringPainted
public void setStringPainted(boolean b)
Sets the value of the stringPainted property,
 which determines whether the progress bar
 should render a progress string.
 The default is false, meaning
 no string is painted.
 Some look and feels might not support progress strings
 or might support them only when the progress bar is in determinate mode.

Parameters:
b - true if the progress bar should render a string
See Also:
isStringPainted(), 
setString(java.lang.String)


"
64,JProgressBar,5,void setIndeterminate(boolean newValue),True,,"

setIndeterminate
public void setIndeterminate(boolean newValue)
Sets the indeterminate property of the progress bar,
 which determines whether the progress bar is in determinate
 or indeterminate mode.
 An indeterminate progress bar continuously displays animation
 indicating that an operation of unknown length is occurring.
 By default, this property is false.
 Some look and feels might not support indeterminate progress bars;
 they will ignore this property.

 

 See
 How to Monitor Progress
 for examples of using indeterminate progress bars.

Parameters:
newValue - true if the progress bar
                  should change to indeterminate mode;
                  false if it should revert to normal.
Since:
1.4
See Also:
isIndeterminate(), 
BasicProgressBarUI


"
65,JRadioButton,1,void setSelected(boolean selected),False,,NULL
65,JRadioButton,2,boolean isSelected(),False,,NULL
65,JRadioButton,3,void setEnabled(boolean enabled),False,,NULL
65,JRadioButton,4,void setText(String text),False,,NULL
65,JRadioButton,5,String getText(),False,,NULL
66,JRadioButtonMenuItem,1,void setSelected(boolean b),False,,NULL
66,JRadioButtonMenuItem,2,boolean isSelected(),False,,NULL
66,JRadioButtonMenuItem,3,void setAccelerator(KeyStroke keyStroke),False,,NULL
66,JRadioButtonMenuItem,4,KeyStroke getAccelerator(),False,,NULL
66,JRadioButtonMenuItem,5,void setActionCommand(String command),False,,NULL
67,JRootPane,1,JMenuBar getJMenuBar(),True,,"

getJMenuBar
public JMenuBar getJMenuBar()
Returns the menu bar from the layered pane.

Returns:
the JMenuBar used in the pane


"
67,JRootPane,2,JLayeredPane getLayeredPane(),True,,"

getLayeredPane
public JLayeredPane getLayeredPane()
Gets the layered pane used by the root pane. The layered pane
 typically holds a content pane and an optional JMenuBar.

Returns:
the JLayeredPane currently in use


"
67,JRootPane,3,Container getContentPane(),True,,"

getContentPane
public Container getContentPane()
Returns the content pane -- the container that holds the components
 parented by the root pane.

Returns:
the Container that holds the component-contents


"
67,JRootPane,4,void setContentPane(Container contentPane),True,,"

setContentPane
public void setContentPane(Container content)
Sets the content pane -- the container that holds the components
 parented by the root pane.
 
 Swing's painting architecture requires an opaque JComponent
 in the containment hierarchy. This is typically provided by the
 content pane. If you replace the content pane it is recommended you
 replace it with an opaque JComponent.

Parameters:
content - the Container to use for component-contents
Throws:
IllegalComponentStateException - (a runtime
            exception) if the content pane parameter is null


"
67,JRootPane,5,void setGlassPane(Component glassPane),True,,"

setGlassPane
public void setGlassPane(Component glass)
Sets a specified Component to be the glass pane for this
 root pane.  The glass pane should normally be a lightweight,
 transparent component, because it will be made visible when
 ever the root pane needs to grab input events.
 
 The new glass pane's visibility is changed to match that of
 the current glass pane.  An implication of this is that care
 must be taken when you want to replace the glass pane and
 make it visible.  Either of the following will work:
 
   root.setGlassPane(newGlassPane);
   newGlassPane.setVisible(true);
 
 or:
 
   root.getGlassPane().setVisible(true);
   root.setGlassPane(newGlassPane);
 

Parameters:
glass - the Component to use as the glass pane
              for this JRootPane
Throws:
NullPointerException - if the glass parameter is
          null


"
68,JScrollBar,1,"void setValues(int value, int extent, int min, int max)",True,,"

setValues
public void setValues(int newValue,
                      int newExtent,
                      int newMin,
                      int newMax)
Sets the four BoundedRangeModel properties after forcing
 the arguments to obey the usual constraints:
 
 minimum ≤ value ≤ value+extent ≤ maximum
 

See Also:
BoundedRangeModel.setRangeProperties(int, int, int, int, boolean), 
setValue(int), 
setVisibleAmount(int), 
setMinimum(int), 
setMaximum(int)


"
68,JScrollBar,2,void setValue(int value),True,,"

setValue
public void setValue(int value)
Sets the scrollbar's value.  This method just forwards the value
 to the model.

Specified by:
setValue in interface Adjustable
Parameters:
value - the current value, between minimum
    and maximum - visibleAmount
See Also:
getValue(), 
BoundedRangeModel.setValue(int)


"
68,JScrollBar,3,void setUnitIncrement(int unitIncrement),True,,"

setUnitIncrement
public void setUnitIncrement(int unitIncrement)
Sets the unitIncrement property.
 
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Specified by:
setUnitIncrement in interface Adjustable
Parameters:
unitIncrement - the unit increment
See Also:
getUnitIncrement(int)


"
68,JScrollBar,4,void setBlockIncrement(int blockIncrement),True,,"

setBlockIncrement
public void setBlockIncrement(int blockIncrement)
Sets the blockIncrement property.
 
 Note, that if the argument is equal to the value of Integer.MIN_VALUE,
 the most look and feels will not provide the scrolling to the right/down.
 
 Some look and feels implement custom scrolling behavior
 and ignore this property.

Specified by:
setBlockIncrement in interface Adjustable
Parameters:
blockIncrement - the block increment
See Also:
getBlockIncrement()


"
68,JScrollBar,5,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int orientation)
Set the scrollbar's orientation to either VERTICAL or
 HORIZONTAL.

Throws:
IllegalArgumentException - if orientation is not one of VERTICAL, HORIZONTAL
See Also:
getOrientation()


"
69,JScrollPane,1,void setViewportView(Component view),True,,"

setViewportView
public void setViewportView(Component view)
Creates a viewport if necessary and then sets its view.  Applications
 that don't provide the view directly to the JScrollPane
 constructor
 should use this method to specify the scrollable child that's going
 to be displayed in the scrollpane. For example:
 
 JScrollPane scrollpane = new JScrollPane();
 scrollpane.setViewportView(myBigComponentToScroll);
 
 Applications should not add children directly to the scrollpane.

Parameters:
view - the component to add to the viewport
See Also:
setViewport(javax.swing.JViewport), 
JViewport.setView(java.awt.Component)


"
69,JScrollPane,2,void setHorizontalScrollBarPolicy(int policy),True,,"

setHorizontalScrollBarPolicy
public void setHorizontalScrollBarPolicy(int policy)
Determines when the horizontal scrollbar appears in the scrollpane.
 The options are:
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getHorizontalScrollBarPolicy()


"
69,JScrollPane,3,void setVerticalScrollBarPolicy(int policy),True,,"

setVerticalScrollBarPolicy
public void setVerticalScrollBarPolicy(int policy)
Determines when the vertical scrollbar appears in the scrollpane.
 Legal values are:
 
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS


Parameters:
policy - one of the three values listed above
Throws:
IllegalArgumentException - if policy
                          is not one of the legal values shown above
See Also:
getVerticalScrollBarPolicy()


"
69,JScrollPane,4,void setWheelScrollingEnabled(boolean handleWheel),True,,"

setWheelScrollingEnabled
public void setWheelScrollingEnabled(boolean handleWheel)
Enables/disables scrolling in response to movement of the mouse wheel.
 Wheel scrolling is enabled by default.

Parameters:
handleWheel - true if scrolling should be done
                      automatically for a MouseWheelEvent,
                      false otherwise.
Since:
1.4
See Also:
isWheelScrollingEnabled(), 
MouseWheelEvent, 
MouseWheelListener


"
69,JScrollPane,5,void setViewportBorder(Border border),True,,"

setViewportBorder
public void setViewportBorder(Border viewportBorder)
Adds a border around the viewport.  Note that the border isn't
 set on the viewport directly, JViewport doesn't support
 the JComponent border property.
 Similarly setting the JScrollPanes
 viewport doesn't affect the viewportBorder property.
 
 The default value of this property is computed by the look
 and feel implementation.

Parameters:
viewportBorder - the border to be added
See Also:
getViewportBorder(), 
setViewport(javax.swing.JViewport)


"
70,JSeparator,1,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int orientation)
Sets the orientation of the separator.
 The default value of this property is HORIZONTAL.

Parameters:
orientation - either SwingConstants.HORIZONTAL
                  or SwingConstants.VERTICAL
Throws:
IllegalArgumentException - if orientation
          is neither SwingConstants.HORIZONTAL
          nor SwingConstants.VERTICAL
See Also:
SwingConstants, 
getOrientation()


"
70,JSeparator,2,int getOrientation(),True,,"

getOrientation
public int getOrientation()
Returns the orientation of this separator.

Returns:
The value of the orientation property, one of the
           following constants defined in SwingConstants:
           VERTICAL, or
           HORIZONTAL.
See Also:
SwingConstants, 
setOrientation(int)


"
70,JSeparator,3,void setForeground(Color fg),False,,NULL
70,JSeparator,4,Color getForeground(),False,,NULL
70,JSeparator,5,void setBorder(Border border),False,,NULL
71,JSlider,1,int getValue(),True,,"

getValue
public int getValue()
Returns the slider's current value
 from the BoundedRangeModel.

Returns:
the current value of the slider
See Also:
setValue(int), 
BoundedRangeModel.getValue()


"
71,JSlider,2,void setValue(int value),True,,"

setValue
public void setValue(int n)
Sets the slider's current value to n.  This method
 forwards the new value to the model.
 
 The data model (an instance of BoundedRangeModel)
 handles any mathematical
 issues arising from assigning faulty values.  See the
 BoundedRangeModel documentation for details.
 
 If the new value is different from the previous value,
 all change listeners are notified.

Parameters:
n - the new value
See Also:
getValue(), 
addChangeListener(javax.swing.event.ChangeListener), 
BoundedRangeModel.setValue(int)


"
71,JSlider,3,int getMinimum(),True,,"

getMinimum
public int getMinimum()
Returns the minimum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's minimum property
See Also:
setMinimum(int), 
BoundedRangeModel.getMinimum()


"
71,JSlider,4,int getMaximum(),True,,"

getMaximum
public int getMaximum()
Returns the maximum value supported by the slider
 from the BoundedRangeModel.

Returns:
the value of the model's maximum property
See Also:
setMaximum(int), 
BoundedRangeModel.getMaximum()


"
71,JSlider,5,void setMajorTickSpacing(int n),True,,"

setMajorTickSpacing
public void setMajorTickSpacing(int n)
This method sets the major tick spacing.  The number that is passed in
 represents the distance, measured in values, between each major tick mark.
 If you have a slider with a range from 0 to 50 and the major tick spacing
 is set to 10, you will get major ticks next to the following values:
 0, 10, 20, 30, 40, 50.
 
 In order for major ticks to be painted, setPaintTicks must be
 set to true.
 
 This method will also set up a label table for you.
 If there is not already a label table, and the major tick spacing is
 > 0, and getPaintLabels returns
 true, a standard label table will be generated (by calling
 createStandardLabels) with labels at the major tick marks.
 For the example above, you would get text labels: ""0"",
 ""10"", ""20"", ""30"", ""40"", ""50"".
 The label table is then set on the slider by calling
 setLabelTable.

Parameters:
n - new value for the majorTickSpacing property
See Also:
getMajorTickSpacing(), 
setPaintTicks(boolean), 
setLabelTable(java.util.Dictionary), 
createStandardLabels(int)


"
72,JSpinner,1,Object getValue(),True,,"

getValue
public Object getValue()
Returns the current value of the model, typically
 this value is displayed by the editor. If the
 user has changed the value displayed by the editor it is
 possible for the model's value to differ from that of
 the editor, refer to the class level javadoc for examples
 of how to deal with this.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().getValue()
 

See Also:
setValue(java.lang.Object), 
SpinnerModel.getValue()


"
72,JSpinner,2,void setValue(Object value),True,,"

setValue
public void setValue(Object value)
Changes current value of the model, typically
 this value is displayed by the editor.
 If the SpinnerModel implementation
 doesn't support the specified value then an
 IllegalArgumentException is thrown.
 
 This method simply delegates to the model.
 It is equivalent to:
 
 getModel().setValue(value)
 

Throws:
IllegalArgumentException - if value isn't allowed
See Also:
getValue(), 
SpinnerModel.setValue(java.lang.Object)


"
72,JSpinner,3,void setModel(SpinnerModel model),True,,"

setModel
public void setModel(SpinnerModel model)
Changes the model that represents the value of this spinner.
 If the editor property has not been explicitly set,
 the editor property is (implicitly) set after the ""model""
PropertyChangeEvent has been fired.  The editor
 property is set to the value returned by createEditor,
 as in:
 
 setEditor(createEditor(model));
 

Parameters:
model - the new SpinnerModel
Throws:
IllegalArgumentException - if model is null
See Also:
getModel(), 
getEditor(), 
setEditor(javax.swing.JComponent)


"
72,JSpinner,4,void setEditor(JComponent editor),True,,"

setEditor
public void setEditor(JComponent editor)
Changes the JComponent that displays the current value
 of the SpinnerModel.  It is the responsibility of this
 method to disconnect the old editor from the model and to
 connect the new editor.  This may mean removing the
 old editors ChangeListener from the model or the
 spinner itself and adding one for the new editor.

Parameters:
editor - the new editor
Throws:
IllegalArgumentException - if editor is null
See Also:
getEditor(), 
createEditor(javax.swing.SpinnerModel), 
getModel()


"
72,JSpinner,5,void addChangeListener(ChangeListener listener),True,,"

addChangeListener
public void addChangeListener(ChangeListener listener)
Adds a listener to the list that is notified each time a change
 to the model occurs.  The source of ChangeEvents
 delivered to ChangeListeners will be this
 JSpinner.  Note also that replacing the model
 will not affect listeners added directly to JSpinner.
 Applications can add listeners to  the model directly.  In that
 case is that the source of the event would be the
 SpinnerModel.

Parameters:
listener - the ChangeListener to add
See Also:
removeChangeListener(javax.swing.event.ChangeListener), 
getModel()


"
73,JSpinner.DateEditor,1,JSpinner.DateEditor(javax.swing.JSpinner spinner),False,,NULL
73,JSpinner.DateEditor,2,void commitEdit(),False,,NULL
73,JSpinner.DateEditor,3,java.awt.Component getUiComponent(),False,,NULL
73,JSpinner.DateEditor,4,void setFormat(java.text.SimpleDateFormat format),False,,NULL
73,JSpinner.DateEditor,5,void setTextFieldEditable(boolean editable),False,,NULL
74,JSpinner.DefaultEditor,1,void stateChanged(ChangeEvent e),True,,"

stateChanged
public void stateChanged(ChangeEvent e)
This method is called when the spinner's model's state changes.
 It sets the value of the text field to the current
 value of the spinners model.

Specified by:
stateChanged in interface ChangeListener
Parameters:
e - the ChangeEvent whose source is the
 JSpinner whose model has changed.
See Also:
getTextField(), 
JSpinner.getValue()


"
74,JSpinner.DefaultEditor,2,void propertyChange(PropertyChangeEvent e),True,,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Called by the JFormattedTextField
PropertyChangeListener.  When the ""value""
 property changes, which implies that the user has typed a new
 number, we set the value of the spinners model.
 
 This class ignores PropertyChangeEvents whose
 source is not the JFormattedTextField, so subclasses
 may safely make this DefaultEditor a
 PropertyChangeListener on other objects.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - the PropertyChangeEvent whose source is
    the JFormattedTextField created by this class.
See Also:
getTextField()


"
74,JSpinner.DefaultEditor,3,void commitEdit(),True,,"

commitEdit
public void commitEdit()
                throws ParseException
Pushes the currently edited value to the SpinnerModel.
 
 The default implementation invokes commitEdit on the
 JFormattedTextField.

Throws:
ParseException - if the edited value is not legal


"
74,JSpinner.DefaultEditor,4,void cancelEdit(),False,,NULL
74,JSpinner.DefaultEditor,5,void setTextField(JFormattedTextField ftf),False,,NULL
75,JSpinner.ListEditor,1,void setListValue(Object value),False,,NULL
75,JSpinner.ListEditor,2,Object getListValue(),False,,NULL
75,JSpinner.ListEditor,3,void selectAll(),False,,NULL
75,JSpinner.ListEditor,4,void setValue(Object value),False,,NULL
75,JSpinner.ListEditor,5,Object getValue(),False,,NULL
76,JSpinner.NumberEditor,1,void setMinimumSize(Dimension size),False,,NULL
76,JSpinner.NumberEditor,2,void setMaximumSize(Dimension size),False,,NULL
76,JSpinner.NumberEditor,3,void setAlignmentX(float alignmentX),False,,NULL
76,JSpinner.NumberEditor,4,void setAlignmentY(float alignmentY),False,,NULL
76,JSpinner.NumberEditor,5,void setBorder(Border border),False,,NULL
77,JSplitPane,1,void setDividerLocation(double proportionalLocation),True,,"

setDividerLocation
public void setDividerLocation(double proportionalLocation)
Sets the divider location as a percentage of the
 JSplitPane's size.
 
 This method is implemented in terms of
 setDividerLocation(int).
 This method immediately changes the size of the split pane based on
 its current size. If the split pane is not correctly realized and on
 screen, this method will have no effect (new divider location will
 become (current size * proportionalLocation) which is 0).

Parameters:
proportionalLocation - a double-precision floating point value
        that specifies a percentage, from zero (top/left) to 1.0
        (bottom/right)
Throws:
IllegalArgumentException - if the specified location is < 0
            or > 1.0


"
77,JSplitPane,2,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int orientation)
Sets the orientation, or how the splitter is divided. The options
 are:
JSplitPane.VERTICAL_SPLIT  (above/below orientation of components)
 JSplitPane.HORIZONTAL_SPLIT  (left/right orientation of components)
 

Parameters:
orientation - an integer specifying the orientation
Throws:
IllegalArgumentException - if orientation is not one of:
        HORIZONTAL_SPLIT or VERTICAL_SPLIT.


"
77,JSplitPane,3,void setLeftComponent(Component comp),True,,"

setLeftComponent
public void setLeftComponent(Component comp)
Sets the component to the left (or above) the divider.

Parameters:
comp - the Component to display in that position


"
77,JSplitPane,4,void setRightComponent(Component comp),True,,"

setRightComponent
public void setRightComponent(Component comp)
Sets the component to the right (or below) the divider.

Parameters:
comp - the Component to display in that position


"
77,JSplitPane,5,void setContinuousLayout(boolean newContinuousLayout),True,,"

setContinuousLayout
public void setContinuousLayout(boolean newContinuousLayout)
Sets the value of the continuousLayout property,
 which must be true for the child components
 to be continuously
 redisplayed and laid out during user intervention.
 The default value of this property is look and feel dependent.
 Some look and feels might not support continuous layout;
 they will ignore this property.

Parameters:
newContinuousLayout - true if the components
        should continuously be redrawn as the divider changes position
See Also:
isContinuousLayout()


"
78,JTabbedPane,1,"void addTab(String title, Component component)",True,,"

addTab
public void addTab(String title,
                   Component component)
Adds a component represented by a title
 and no icon.
 Cover method for insertTab.

Parameters:
title - the title to be displayed in this tab
component - the component to be displayed when this tab is clicked
See Also:
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int), 
removeTabAt(int)


"
78,JTabbedPane,2,"void insertTab(String title, Icon icon, Component component, String tip, int index)",True,,"

insertTab
public void insertTab(String title,
                      Icon icon,
                      Component component,
                      String tip,
                      int index)
Inserts a new tab for the given component, at the given index,
 represented by the given title and/or icon, either of which may
 be null.

Parameters:
title - the title to be displayed on the tab
icon - the icon to be displayed on the tab
component - the component to be displayed when this tab is clicked.
tip - the tooltip to be displayed for this tab
index - the position to insert this new tab
       (> 0 and <= getTabCount())
Throws:
IndexOutOfBoundsException - if the index is out of range
         (< 0 or > getTabCount())
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
removeTabAt(int)


"
78,JTabbedPane,3,void removeTabAt(int index),True,,"

removeTabAt
public void removeTabAt(int index)
Removes the tab at index.
 After the component associated with index is removed,
 its visibility is reset to true to ensure it will be visible
 if added to other containers.

Parameters:
index - the index of the tab to be removed
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
See Also:
addTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String), 
insertTab(java.lang.String, javax.swing.Icon, java.awt.Component, java.lang.String, int)


"
78,JTabbedPane,4,void setSelectedIndex(int index),True,,"

setSelectedIndex
public void setSelectedIndex(int index)
Sets the selected index for this tabbedpane. The index must be
 a valid tab index or -1, which indicates that no tab should be selected
 (can also be used when there are no tabs in the tabbedpane).  If a -1
 value is specified when the tabbedpane contains one or more tabs, then
 the results will be implementation defined.

Parameters:
index - the index to be selected
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < -1 || index >= tab count)
See Also:
getSelectedIndex(), 
SingleSelectionModel.setSelectedIndex(int)


"
78,JTabbedPane,5,Component getSelectedComponent(),True,,"

getSelectedComponent
public Component getSelectedComponent()
Returns the currently selected component for this tabbedpane.
 Returns null if there is no currently selected tab.

Returns:
the component corresponding to the selected tab
See Also:
setSelectedComponent(java.awt.Component)


"
79,JTable,1,void setModel(TableModel dataModel),True,,"

setModel
public void setModel(TableModel dataModel)
Sets the data model for this table to newModel and registers
 with it for listener notifications from the new data model.

Parameters:
dataModel - the new data source for this table
Throws:
IllegalArgumentException - if newModel is null
See Also:
getModel()


"
79,JTable,2,void setRowSelectionAllowed(boolean rowSelectionAllowed),True,,"

setRowSelectionAllowed
public void setRowSelectionAllowed(boolean rowSelectionAllowed)
Sets whether the rows in this model can be selected.

Parameters:
rowSelectionAllowed - true if this model will allow row selection
See Also:
getRowSelectionAllowed()


"
79,JTable,3,void setColumnSelectionAllowed(boolean columnSelectionAllowed),True,,"

setColumnSelectionAllowed
public void setColumnSelectionAllowed(boolean columnSelectionAllowed)
Sets whether the columns in this model can be selected.

Parameters:
columnSelectionAllowed - true if this model will allow column selection
See Also:
getColumnSelectionAllowed()


"
79,JTable,4,void setAutoResizeMode(int mode),True,,"

setAutoResizeMode
public void setAutoResizeMode(int mode)
Sets the table's auto resize mode when the table is resized.  For further
 information on how the different resize modes work, see
 doLayout().

Parameters:
mode - One of 5 legal values:
                   AUTO_RESIZE_OFF,
                   AUTO_RESIZE_NEXT_COLUMN,
                   AUTO_RESIZE_SUBSEQUENT_COLUMNS,
                   AUTO_RESIZE_LAST_COLUMN,
                   AUTO_RESIZE_ALL_COLUMNS
See Also:
getAutoResizeMode(), 
doLayout()


"
79,JTable,5,void setCellSelectionEnabled(boolean cellSelectionEnabled),True,,"

setCellSelectionEnabled
public void setCellSelectionEnabled(boolean cellSelectionEnabled)
Sets whether this table allows both a column selection and a
 row selection to exist simultaneously. When set,
 the table treats the intersection of the row and column selection
 models as the selected cells. Override isCellSelected to
 change this default behavior. This method is equivalent to setting
 both the rowSelectionAllowed property and
 columnSelectionAllowed property of the
 columnModel to the supplied value.

Parameters:
cellSelectionEnabled - true if simultaneous row and column
                                  selection is allowed
See Also:
getCellSelectionEnabled(), 
isCellSelected(int, int)


"
80,JTable.DropLocation,1,int getColumn(),True,,"

getColumn
public int getColumn()
Returns the column index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertColumn(). If that method returns
 true this value indicates the index where a new
 column should be inserted. Otherwise, it represents the value
 of an existing column on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no column could be calculated.

Returns:
the drop row


"
80,JTable.DropLocation,2,int getRow(),True,,"

getRow
public int getRow()
Returns the row index where a dropped item should be placed in the
 table. Interpretation of the value depends on the return of
 isInsertRow(). If that method returns
 true this value indicates the index where a new
 row should be inserted. Otherwise, it represents the value
 of an existing row on which the data was dropped. This index is
 in terms of the view.
 
-1 indicates that the drop occurred over empty space,
 and no row could be calculated.

Returns:
the drop row


"
80,JTable.DropLocation,3,boolean isInsertRow(),True,,"

isInsertRow
public boolean isInsertRow()
Returns whether or not this location represents an insert
 of a row.

Returns:
whether or not this is an insert row


"
80,JTable.DropLocation,4,boolean isInsertColumn(),True,,"

isInsertColumn
public boolean isInsertColumn()
Returns whether or not this location represents an insert
 of a column.

Returns:
whether or not this is an insert column


"
80,JTable.DropLocation,5,String toString(),True,,"

toString
public String toString()
Returns a string representation of this drop location.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class TransferHandler.DropLocation
Returns:
a string representation of this drop location


"
81,JTextArea,1,void append(String str),True,,"

append
public void append(String str)
Appends the given text to the end of the document.  Does nothing if
 the model is null or the string is null or empty.

Parameters:
str - the text to insert
See Also:
insert(java.lang.String, int)


"
81,JTextArea,2,"void insert(String str, int pos)",True,,"

insert
public void insert(String str,
                   int pos)
Inserts the specified text at the specified position.  Does nothing
 if the model is null or if the text is null or empty.

Parameters:
str - the text to insert
pos - the position at which to insert >= 0
Throws:
IllegalArgumentException - if pos is an
  invalid position in the model
See Also:
TextComponent.setText(java.lang.String), 
replaceRange(java.lang.String, int, int)


"
81,JTextArea,3,void setEditable(boolean editable),False,,NULL
81,JTextArea,4,String getText(),False,,NULL
81,JTextArea,5,void setLineWrap(boolean wrap),True,,"

setLineWrap
public void setLineWrap(boolean wrap)
Sets the line-wrapping policy of the text area.  If set
 to true the lines will be wrapped if they are too long
 to fit within the allocated width.  If set to false,
 the lines will always be unwrapped.  A PropertyChange
 event (""lineWrap"") is fired when the policy is changed.
 By default this property is false.

Parameters:
wrap - indicates if lines should be wrapped
See Also:
getLineWrap()


"
82,JTextField,1,void setText(String text),False,,NULL
82,JTextField,2,String getText(),False,,NULL
82,JTextField,3,void setEditable(boolean editable),False,,NULL
82,JTextField,4,void setColumns(int columns),True,,"

setColumns
public void setColumns(int columns)
Sets the number of columns in this TextField,
 and then invalidate the layout.

Parameters:
columns - the number of columns >= 0
Throws:
IllegalArgumentException - if columns
          is less than 0


"
82,JTextField,5,void addActionListener(ActionListener listener),True,,"

addActionListener
public void addActionListener(ActionListener l)
Adds the specified action listener to receive
 action events from this textfield.

Parameters:
l - the action listener to be added


"
83,JTextPane,1,"void setCharacterAttributes(AttributeSet attr, boolean replace)",True,,"

setCharacterAttributes
public void setCharacterAttributes(AttributeSet attr,
                                   boolean replace)
Applies the given attributes to character
 content.  If there is a selection, the attributes
 are applied to the selection range.  If there
 is no selection, the attributes are applied to
 the input attribute set which defines the attributes
 for any new text that gets inserted.

Parameters:
attr - the attributes
replace - if true, then replace the existing attributes first


"
83,JTextPane,2,void insertComponent(Component c),True,,"

insertComponent
public void insertComponent(Component c)
Inserts a component into the document as a replacement
 for the currently selected content.  If there is no
 selection the component is effectively inserted at the
 current position of the caret.  This is represented in
 the associated document as an attribute of one character
 of content.
 
 The component given is the actual component used by the
 JTextPane.  Since components cannot be a child of more than
 one container, this method should not be used in situations
 where the model is shared by text components.
 
 The component is placed relative to the text baseline
 according to the value returned by
 Component.getAlignmentY.  For Swing components
 this value can be conveniently set using the method
 JComponent.setAlignmentY.  For example, setting
 a value of 0.75 will cause 75 percent of the
 component to be above the baseline, and 25 percent of the
 component to be below the baseline.

Parameters:
c - the component to insert


"
83,JTextPane,3,void replaceSelection(String content),True,,"

replaceSelection
public void replaceSelection(String content)
Replaces the currently selected content with new content
 represented by the given string.  If there is no selection
 this amounts to an insert of the given text.  If there
 is no replacement text this amounts to a removal of the
 current selection.  The replacement text will have the
 attributes currently defined for input at the point of
 insertion.  If the document is not editable, beep and return.

Overrides:
replaceSelection in class JEditorPane
Parameters:
content - the content to replace the selection with


"
83,JTextPane,4,"void setParagraphAttributes(AttributeSet attr, boolean replace)",True,,"

setParagraphAttributes
public void setParagraphAttributes(AttributeSet attr,
                                   boolean replace)
Applies the given attributes to paragraphs.  If
 there is a selection, the attributes are applied
 to the paragraphs that intersect the selection.
 If there is no selection, the attributes are applied
 to the paragraph at the current caret position.

Parameters:
attr - the non-null attributes
replace - if true, replace the existing attributes first


"
83,JTextPane,5,void setLogicalStyle(Style s),True,,"

setLogicalStyle
public void setLogicalStyle(Style s)
Sets the logical style to use for the paragraph at the
 current caret position.  If attributes aren't explicitly set
 for character and paragraph attributes they will resolve
 through the logical style assigned to the paragraph, which
 in term may resolve through some hierarchy completely
 independent of the element hierarchy in the document.

Parameters:
s - the logical style to assign to the paragraph,
          or null for no style


"
84,JToggleButton,1,void setSelected(boolean selected),False,,NULL
84,JToggleButton,2,boolean isSelected(),False,,NULL
84,JToggleButton,3,void setActionCommand(String command),False,,NULL
84,JToggleButton,4,String getActionCommand(),False,,NULL
84,JToggleButton,5,void setIcon(Icon icon),False,,NULL
85,JToggleButton.ToggleButtonModel,1,void setSelected(boolean selected),True,,"

setSelected
public void setSelected(boolean b)
Sets the selected state of the button.

Specified by:
setSelected in interface ButtonModel
Overrides:
setSelected in class DefaultButtonModel
Parameters:
b - true selects the toggle button,
          false deselects the toggle button.


"
85,JToggleButton.ToggleButtonModel,2,boolean isSelected(),True,,"

isSelected
public boolean isSelected()
Checks if the button is selected.

Specified by:
isSelected in interface ButtonModel
Overrides:
isSelected in class DefaultButtonModel
Returns:
true if the button is selected


"
85,JToggleButton.ToggleButtonModel,3,void setPressed(boolean pressed),True,,"

setPressed
public void setPressed(boolean b)
Sets the pressed state of the toggle button.

Specified by:
setPressed in interface ButtonModel
Overrides:
setPressed in class DefaultButtonModel
Parameters:
b - whether or not the button should be pressed
See Also:
ButtonModel.isPressed()


"
85,JToggleButton.ToggleButtonModel,4,boolean isPressed(),False,,NULL
85,JToggleButton.ToggleButtonModel,5,void setArmed(boolean armed),False,,NULL
86,JToolBar,1,void addSeparator(),True,,"

addSeparator
public void addSeparator()
Appends a separator of default size to the end of the tool bar.
 The default size is determined by the current look and feel.

"
86,JToolBar,2,void setFloatable(boolean floatable),True,,"

setFloatable
public void setFloatable(boolean b)
Sets the floatable property,
 which must be true for the user to move the tool bar.
 Typically, a floatable tool bar can be
 dragged into a different position within the same container
 or out into its own window.
 The default value of this property is true.
 Some look and feels might not implement floatable tool bars;
 they will ignore this property.

Parameters:
b - if true, the tool bar can be moved;
          false otherwise
See Also:
isFloatable()


"
86,JToolBar,3,void setRollover(boolean rollover),True,,"

setRollover
public void setRollover(boolean rollover)
Sets the rollover state of this toolbar. If the rollover state is true
 then the border of the toolbar buttons will be drawn only when the
 mouse pointer hovers over them. The default value of this property
 is false.
 
 The implementation of a look and feel may choose to ignore this
 property.

Parameters:
rollover - true for rollover toolbar buttons; otherwise false
Since:
1.4


"
86,JToolBar,4,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int o)
Sets the orientation of the tool bar.  The orientation must have
 either the value HORIZONTAL or VERTICAL.
 If orientation is
 an invalid value, an exception will be thrown.

Parameters:
o - the new orientation -- either HORIZONTAL or
                  VERTICAL
Throws:
IllegalArgumentException - if orientation is neither
          HORIZONTAL nor VERTICAL
See Also:
getOrientation()


"
86,JToolBar,5,void setBorderPainted(boolean b),True,,"

setBorderPainted
public void setBorderPainted(boolean b)
Sets the borderPainted property, which is
 true if the border should be painted.
 The default value for this property is true.
 Some look and feels might not implement painted borders;
 they will ignore this property.

Parameters:
b - if true, the border is painted
See Also:
isBorderPainted()


"
87,JToolBar.Separator,1,javax.swing.JToolBar.Separator(),False,,NULL
87,JToolBar.Separator,2,void setOrientation(int orientation),False,,NULL
87,JToolBar.Separator,3,int getOrientation(),False,,NULL
87,JToolBar.Separator,4,void setBorder(Border b),False,,NULL
87,JToolBar.Separator,5,Border getBorder(),False,,NULL
88,JToolTip,1,void setTipText(String tipText),True,,"

setTipText
public void setTipText(String tipText)
Sets the text to show when the tool tip is displayed.
 The string tipText may be null.

Parameters:
tipText - the String to display


"
88,JToolTip,2,String getTipText(),True,,"

getTipText
public String getTipText()
Returns the text that is shown when the tool tip is displayed.
 The returned value may be null.

Returns:
the String that is displayed


"
88,JToolTip,3,void setComponent(JComponent component),True,,"

setComponent
public void setComponent(JComponent c)
Specifies the component that the tooltip describes.
 The component c may be null
 and will have no effect.
 
 This is a bound property.

Parameters:
c - the JComponent being described
See Also:
JComponent.createToolTip()


"
88,JToolTip,4,JComponent getComponent(),True,,"

getComponent
public JComponent getComponent()
Returns the component the tooltip applies to.
 The returned value may be null.

Returns:
the component that the tooltip describes
See Also:
JComponent.createToolTip()


"
88,JToolTip,5,void setDismissDelay(int dismissDelay),False,,NULL
89,JTree,1,void expandRow(int row),True,,"

expandRow
public void expandRow(int row)
Ensures that the node in the specified row is expanded and
 viewable.
 
 If row is < 0 or >= getRowCount this
 will have no effect.

Parameters:
row - an integer specifying a display row, where 0 is the
             first row in the display


"
89,JTree,2,void collapseRow(int row),True,,"

collapseRow
public void collapseRow(int row)
Ensures that the node in the specified row is collapsed.
 
 If row is < 0 or >= getRowCount this
 will have no effect.

Parameters:
row - an integer specifying a display row, where 0 is the
             first row in the display


"
89,JTree,3,TreePath getPathForRow(int row),True,,"

getPathForRow
public TreePath getPathForRow(int row)
Returns the path for the specified row.  If row is
 not visible, or a TreeUI has not been set, null
 is returned.

Parameters:
row - an integer specifying a row
Returns:
the TreePath to the specified node,
          null if row < 0
          or row >= getRowCount()


"
89,JTree,4,void setRootVisible(boolean visible),True,,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.
 
 This is a bound property.

Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
rootVisible


"
89,JTree,5,void setShowsRootHandles(boolean newValue),True,,"

setShowsRootHandles
public void setShowsRootHandles(boolean newValue)
Sets the value of the showsRootHandles property,
 which specifies whether the node handles should be displayed.
 The default value of this property depends on the constructor
 used to create the JTree.
 Some look and feels might not support handles;
 they will ignore this property.
 
 This is a bound property.

Parameters:
newValue - true if root handles should be displayed;
                 otherwise, false
See Also:
showsRootHandles, 
getShowsRootHandles()


"
90,JTree.DropLocation,1,int getChildIndex(),True,,"

getChildIndex
public int getChildIndex()
Returns the index where the dropped data should be inserted
 with respect to the path returned by getPath().
 
 For drop modes DropMode.USE_SELECTION and
 DropMode.ON, this index is unimportant (and it will
 always be -1) as the only interesting data is the
 path over which the drop operation occurred.
 
 For drop mode DropMode.INSERT, this index
 indicates the index at which the data should be inserted into
 the parent path represented by getPath().
 -1 indicates that the drop occurred over the
 parent itself, and in most cases should be treated as inserting
 into either the beginning or the end of the parent's list of
 children.
 
 For DropMode.ON_OR_INSERT, this value will be
 an insert index, as described above, or -1 if
 the drop occurred over the path itself.

Returns:
the child index
See Also:
getPath()


"
90,JTree.DropLocation,2,int getChildIndex(JTree tree),False,,NULL
90,JTree.DropLocation,3,int getPathIndex(),False,,NULL
90,JTree.DropLocation,4,int getRow(),False,,NULL
90,JTree.DropLocation,5,boolean isInsert(),False,,NULL
91,JTree.DynamicUtilTreeNode,1,void setUserObject(Object userObject),False,,NULL
91,JTree.DynamicUtilTreeNode,2,Object getUserObject(),False,,NULL
91,JTree.DynamicUtilTreeNode,3,void add(Object child),False,,NULL
91,JTree.DynamicUtilTreeNode,4,void remove(Object child),False,,NULL
91,JTree.DynamicUtilTreeNode,5,int getChildCount(),True,,"

getChildCount
public int getChildCount()
Returns the number of child nodes.

Specified by:
getChildCount in interface TreeNode
Overrides:
getChildCount in class DefaultMutableTreeNode
Returns:
the number of child nodes


"
92,JTree.EmptySelectionModel,1,void setSelectionPaths(TreePath[] paths),True,,"

setSelectionPaths
public void setSelectionPaths(TreePath[] paths)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
setSelectionPaths in interface TreeSelectionModel
Overrides:
setSelectionPaths in class DefaultTreeSelectionModel
Parameters:
paths - the paths to select; this is ignored


"
92,JTree.EmptySelectionModel,2,void setSelectionRows(int[] rows),False,,NULL
92,JTree.EmptySelectionModel,3,void clearSelection(),False,,NULL
92,JTree.EmptySelectionModel,4,void addSelectionPath(TreePath path),False,,NULL
92,JTree.EmptySelectionModel,5,void addSelectionPaths(TreePath[] paths),True,,"

addSelectionPaths
public void addSelectionPaths(TreePath[] paths)
This is overriden to do nothing; EmptySelectionModel
 does not allow a selection.

Specified by:
addSelectionPaths in interface TreeSelectionModel
Overrides:
addSelectionPaths in class DefaultTreeSelectionModel
Parameters:
paths - the paths to add to the selection; this is ignored


"
93,JViewport,1,void setView(Component view),True,,"

setView
public void setView(Component view)
Sets the JViewport's one lightweight child
 (view), which can be null.

Parameters:
view - the viewport's new lightweight child
See Also:
getView()


"
93,JViewport,2,Component getView(),True,,"

getView
public Component getView()
Returns the JViewport's one child or null.

Returns:
the viewports child, or null if none exists
See Also:
setView(java.awt.Component)


"
93,JViewport,3,void setViewPosition(Point p),True,,"

setViewPosition
public void setViewPosition(Point p)
Sets the view coordinates that appear in the upper left
 hand corner of the viewport, does nothing if there's no view.

Parameters:
p - a Point object giving the upper left coordinates


"
93,JViewport,4,Point getViewPosition(),True,,"

getViewPosition
public Point getViewPosition()
Returns the view coordinates that appear in the upper left
 hand corner of the viewport, or 0,0 if there's no view.

Returns:
a Point object giving the upper left coordinates


"
93,JViewport,5,void scrollRectToVisible(Rectangle contentRect),True,,"

scrollRectToVisible
public void scrollRectToVisible(Rectangle contentRect)
Scrolls the view so that Rectangle
 within the view becomes visible.
 
 This attempts to validate the view before scrolling if the
 view is currently not valid - isValid returns false.
 To avoid excessive validation when the containment hierarchy is
 being created this will not validate if one of the ancestors does not
 have a peer, or there is no validate root ancestor, or one of the
 ancestors is not a Window or Applet.
 
 Note that this method will not scroll outside of the
 valid viewport; for example, if contentRect is larger
 than the viewport, scrolling will be confined to the viewport's
 bounds.

Overrides:
scrollRectToVisible in class JComponent
Parameters:
contentRect - the Rectangle to display
See Also:
JComponent.isValidateRoot(), 
Component.isValid(), 
Component.getPeer()


"
94,JWindow,1,"void setLocation(int x, int y)",False,,NULL
94,JWindow,2,"void setSize(int width, int height)",False,,NULL
94,JWindow,3,void setVisible(boolean visible),False,,NULL
94,JWindow,4,void setAlwaysOnTop(boolean alwaysOnTop),False,,NULL
94,JWindow,5,void setOpacity(float opacity),False,,NULL
95,KeyStroke,1,KeyStroke getKeyStroke(char keyChar),True,,"

getKeyStroke
public static KeyStroke getKeyStroke(char keyChar)
Returns a shared instance of a KeyStroke
 that represents a KEY_TYPED event for the
 specified character.

Parameters:
keyChar - the character value for a keyboard key
Returns:
a KeyStroke object for that key


"
95,KeyStroke,2,"KeyStroke getKeyStroke(int keyCode, int modifiers)",True,,"

getKeyStroke
public static KeyStroke getKeyStroke(int keyCode,
                                     int modifiers)
Returns a shared instance of a KeyStroke, given a numeric key code and a
 set of modifiers. The returned KeyStroke will correspond to a key press.
 
 The ""virtual key"" constants defined in java.awt.event.KeyEvent can be
 used to specify the key code. For example:
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 Alternatively, the key code may be obtained by calling
 java.awt.event.KeyEvent.getExtendedKeyCodeForChar.

 The modifiers consist of any combination of:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyCode - an int specifying the numeric code for a keyboard key
modifiers - a bitwise-ored combination of any modifiers
Returns:
a KeyStroke object for that key
See Also:
KeyEvent, 
InputEvent


"
95,KeyStroke,3,KeyStroke getKeyStroke(String s),True,,"

getKeyStroke
public static KeyStroke getKeyStroke(String s)
Parses a string and returns a KeyStroke.
 The string must have the following syntax:
 
    <modifiers>* (<typedID> | <pressedReleasedID>)

    modifiers := shift | control | ctrl | meta | alt | altGraph
    typedID := typed <typedKey>
    typedKey := string of length 1 giving Unicode character.
    pressedReleasedID := (pressed | released) key
    key := KeyEvent key code name, i.e. the name following ""VK_"".
 
 If typed, pressed or released is not specified, pressed is assumed. Here
 are some examples:
 
     ""INSERT"" => getKeyStroke(KeyEvent.VK_INSERT, 0);
     ""control DELETE"" => getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
     ""alt shift X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
     ""alt shift released X"" => getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
     ""typed a"" => getKeyStroke('a');
 

 In order to maintain backward-compatibility, specifying a null String,
 or a String which is formatted incorrectly, returns null.

Parameters:
s - a String formatted as described above
Returns:
a KeyStroke object for that String, or null if the specified
         String is null, or is formatted incorrectly
See Also:
KeyEvent


"
95,KeyStroke,4,int getKeyCode(),False,,NULL
95,KeyStroke,5,int getModifiers(),False,,NULL
96,LayoutFocusTraversalPolicy,1,"Component getComponentAfter(Container aContainer, Component aComponent)",True,,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent.
 
 By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Overrides:
getComponentAfter in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
96,LayoutFocusTraversalPolicy,2,"Component getComponentBefore(Container aContainer, Component aComponent)",True,,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent.
 
 By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Overrides:
getComponentBefore in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
96,LayoutFocusTraversalPolicy,3,Component getFirstComponent(Container aContainer),True,,"

getFirstComponent
public Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Overrides:
getFirstComponent in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        first Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
96,LayoutFocusTraversalPolicy,4,Component getLastComponent(Container aContainer),True,,"

getLastComponent
public Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Overrides:
getLastComponent in class SortingFocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        last Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
96,LayoutFocusTraversalPolicy,5,Component getDefaultComponent(Container aContainer),False,,NULL
97,LayoutStyle,1,ComponentPlacement getComponentPlacement(Component c),False,,NULL
97,LayoutStyle,2,"int getPreferredGap(ComponentPlacement type, Component c1, Component c2)",False,,NULL
97,LayoutStyle,3,"int getContainerGap(Component c, int type, Container parent)",False,,NULL
97,LayoutStyle,4,"void setComponentPlacement(Component c, ComponentPlacement type)",False,,NULL
97,LayoutStyle,5,void setInstance(LayoutStyle style),True,,"

setInstance
public static void setInstance(LayoutStyle style)
Sets the shared instance of LayoutStyle.  Specifying
 null results in using the LayoutStyle from
 the current LookAndFeel.

Parameters:
style - the LayoutStyle, or null
See Also:
getInstance()


"
98,LookAndFeel,1,String getName(),True,,"

getName
public abstract String getName()
Return a short string that identifies this look and feel, e.g.
 ""CDE/Motif"".  This string should be appropriate for a menu item.
 Distinct look and feels should have different names, e.g.
 a subclass of MotifLookAndFeel that changes the way a few components
 are rendered should be called ""CDE/Motif My Way""; something
 that would be useful to a user trying to select a L&F from a list
 of names.

Returns:
short identifier for the look and feel


"
98,LookAndFeel,2,String getDescription(),True,,"

getDescription
public abstract String getDescription()
Return a one line description of this look and feel implementation,
 e.g. ""The CDE/Motif Look and Feel"".   This string is intended for
 the user, e.g. in the title of a window or in a ToolTip message.

Returns:
short description for the look and feel


"
98,LookAndFeel,3,UIDefaults getDefaults(),True,,"

getDefaults
public UIDefaults getDefaults()
Returns the look and feel defaults. While this method is public,
 it should only be invoked by the UIManager when the
 look and feel is set as the current look and feel and after
 initialize has been invoked.

Returns:
the look and feel defaults
See Also:
initialize(), 
uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
98,LookAndFeel,4,boolean isSupportedLookAndFeel(),True,,"

isSupportedLookAndFeel
public abstract boolean isSupportedLookAndFeel()
Return true if the underlying platform supports and or permits
 this look and feel.  This method returns false if the look
 and feel depends on special resources or legal agreements that
 aren't defined for the current platform.

Returns:
true if this is a supported look and feel
See Also:
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
98,LookAndFeel,5,boolean isNativeLookAndFeel(),True,,"

isNativeLookAndFeel
public abstract boolean isNativeLookAndFeel()
If the underlying platform has a ""native"" look and feel, and
 this is an implementation of it, return true.  For
 example, when the underlying platform is Solaris running CDE
 a CDE/Motif look and feel implementation would return true.

Returns:
true if this look and feel represents the underlying
         platform look and feel


"
99,MenuSelectionManager,1,void clearSelectedPath(),True,,"

clearSelectedPath
public void clearSelectedPath()
Tell the menu selection to close and unselect all the menu components. Call this method
 when a choice has been made

"
99,MenuSelectionManager,2,MenuElement[] getSelectedPath(),True,,"

getSelectedPath
public MenuElement[] getSelectedPath()
Returns the path to the currently selected menu item

Returns:
an array of MenuElement objects representing the selected path


"
99,MenuSelectionManager,3,void processKeyEvent(KeyEvent e),True,,"

processKeyEvent
public void processKeyEvent(KeyEvent e)
When a MenuElement receives an event from a KeyListener, it should never process the event
 directly. Instead all MenuElements should call this method with the event.

Parameters:
e - a KeyEvent object


"
99,MenuSelectionManager,4,void setSelectedPath(MenuElement[] path),True,,"

setSelectedPath
public void setSelectedPath(MenuElement[] path)
Changes the selection in the menu hierarchy.  The elements
 in the array are sorted in order from the root menu
 element to the currently selected menu element.
 
 Note that this method is public but is used by the look and
 feel engine and should not be called by client applications.

Parameters:
path - an array of MenuElement objects specifying
        the selected path


"
99,MenuSelectionManager,5,"void setSelectedPath(MenuElement[] path, boolean push)",False,,NULL
100,OverlayLayout,1,"void addLayoutComponent(Component comp, Object constraints)",True,,"

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Adds the specified component to the layout, using the specified
 constraint object. Used by this class to know when to invalidate
 layout.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component to be added
constraints - where/how the component is added to the layout.


"
100,OverlayLayout,2,void layoutContainer(Container parent),True,,"

layoutContainer
public void layoutContainer(Container target)
Called by the AWT when the specified container needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
target - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      constructor


"
100,OverlayLayout,3,Dimension preferredLayoutSize(Container parent),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Returns the preferred dimensions for this layout given the components
 in the specified target container.  Recomputes the layout if it
 has been invalidated.  Factors in the current inset setting returned
 by getInsets().

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the preferred dimensions
See Also:
minimumLayoutSize(java.awt.Container)


"
100,OverlayLayout,4,Dimension minimumLayoutSize(Container parent),True,,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container target)
Returns the minimum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the layout
 if it has been invalidated, and factors in the current inset setting.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
target - the component which needs to be laid out
Returns:
a Dimension object containing the minimum dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
100,OverlayLayout,5,Dimension maximumLayoutSize(Container target),True,,"

maximumLayoutSize
public Dimension maximumLayoutSize(Container target)
Returns the maximum dimensions needed to lay out the components
 contained in the specified target container.  Recomputes the
 layout if it has been invalidated, and factors in the inset setting
 returned by getInset.

Specified by:
maximumLayoutSize in interface LayoutManager2
Parameters:
target - the component that needs to be laid out
Returns:
a Dimension object containing the maximum
         dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
101,Popup,1,"void show(Component owner, int x, int y)",False,,NULL
101,Popup,2,void hide(),True,,"

hide
public void hide()
Hides and disposes of the Popup. Once a Popup
 has been disposed you should no longer invoke methods on it. A
 disposed Popup may be reclaimed and later used
 based on the PopupFactory. As such, if you invoke methods
 on a disposed Popup, indeterminate
 behavior will result.

"
101,Popup,3,void pack(),False,,NULL
101,Popup,4,void setBorder(Border border),False,,NULL
101,Popup,5,void setLightWeightPopupEnabled(boolean aFlag),False,,NULL
102,PopupFactory,1,"Popup getPopup(Component owner, Component contents, int x, int y)",True,,"

getPopup
public Popup getPopup(Component owner,
                      Component contents,
                      int x,
                      int y)
               throws IllegalArgumentException
Creates a Popup for the Component owner
 containing the Component contents. owner
 is used to determine which Window the new
 Popup will parent the Component the
 Popup creates to. A null owner implies there
 is no valid parent. x and
 y specify the preferred initial location to place
 the Popup at. Based on screen size, or other paramaters,
 the Popup may not display at x and
 y.

Parameters:
owner - Component mouse coordinates are relative to, may be null
contents - Contents of the Popup
x - Initial x screen coordinate
y - Initial y screen coordinate
Returns:
Popup containing Contents
Throws:
IllegalArgumentException - if contents is null


"
102,PopupFactory,2,"Popup getPopup(Component owner, Component contents, int x, int y, int xAdjustment, int yAdjustment)",False,,NULL
102,PopupFactory,3,"Popup getPopup(Component owner, JPopupMenu popup, int x, int y)",False,,NULL
102,PopupFactory,4,"Popup getPopup(Component owner, JPopupMenu popup, int x, int y, int xAdjustment, int yAdjustment)",False,,NULL
102,PopupFactory,5,void setPopupType(int type),False,,NULL
103,ProgressMonitor,1,void setProgress(int progress),True,,"

setProgress
public void setProgress(int nv)
Indicate the progress of the operation being monitored.
 If the specified value is >= the maximum, the progress
 monitor is closed.

Parameters:
nv - an int specifying the current value, between the
        maximum and minimum specified for this component
See Also:
setMinimum(int), 
setMaximum(int), 
close()


"
103,ProgressMonitor,2,void setMillisToDecideToPopup(int millisToDecideToPopup),True,,"

setMillisToDecideToPopup
public void setMillisToDecideToPopup(int millisToDecideToPopup)
Specifies the amount of time to wait before deciding whether or
 not to popup a progress monitor.

Parameters:
millisToDecideToPopup - an int specifying the time to wait,
        in milliseconds
See Also:
getMillisToDecideToPopup()


"
103,ProgressMonitor,3,void setMillisToPopup(int millisToPopup),True,,"

setMillisToPopup
public void setMillisToPopup(int millisToPopup)
Specifies the amount of time it will take for the popup to appear.
 (If the predicted time remaining is less than this time, the popup
 won't be displayed.)

Parameters:
millisToPopup - an int specifying the time in milliseconds
See Also:
getMillisToPopup()


"
103,ProgressMonitor,4,void setNote(String note),True,,"

setNote
public void setNote(String note)
Specifies the additional note that is displayed along with the
 progress message. Used, for example, to show which file the
 is currently being copied during a multiple-file copy.

Parameters:
note - a String specifying the note to display
See Also:
getNote()


"
103,ProgressMonitor,5,void close(),True,,"

close
public void close()
Indicate that the operation is complete.  This happens automatically
 when the value set by setProgress is >= max, but it may be called
 earlier if the operation ends early.

"
104,ProgressMonitorInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Overrides FilterInputStream.read
 to update the progress monitor after the read.

Overrides:
read in class FilterInputStream
Returns:
the next byte of data, or -1 if the end of the
             stream is reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
104,ProgressMonitorInputStream,2,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Overrides FilterInputStream.read
 to update the progress monitor after the read.

Overrides:
read in class FilterInputStream
Parameters:
b - the buffer into which the data is read.
off - the start offset in the destination array b
len - the maximum number of bytes read.
Returns:
the total number of bytes read into the buffer, or
             -1 if there is no more data because the end of
             the stream has been reached.
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
104,ProgressMonitorInputStream,3,long skip(long n),True,,"

skip
public long skip(long n)
          throws IOException
Overrides FilterInputStream.skip
 to update the progress monitor after the skip.

Overrides:
skip in class FilterInputStream
Parameters:
n - the number of bytes to be skipped.
Returns:
the actual number of bytes skipped.
Throws:
IOException - if the stream does not support seek,
                          or if some other I/O error occurs.


"
104,ProgressMonitorInputStream,4,int available(),False,,NULL
104,ProgressMonitorInputStream,5,void close(),True,,"

close
public void close()
           throws IOException
Overrides FilterInputStream.close
 to close the progress monitor as well as the stream.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class FilterInputStream
Throws:
IOException - if an I/O error occurs.
See Also:
FilterInputStream.in


"
105,RepaintManager,1,"void addDirtyRegion(JComponent c, int x, int y, int w, int h)",True,,"

addDirtyRegion
public void addDirtyRegion(JComponent c,
                           int x,
                           int y,
                           int w,
                           int h)
Add a component in the list of components that should be refreshed.
 If c already has a dirty region, the rectangle (x,y,w,h)
 will be unioned with the region that should be redrawn.

Parameters:
c - Component to repaint, null results in nothing happening.
x - X coordinate of the region to repaint
y - Y coordinate of the region to repaint
w - Width of the region to repaint
h - Height of the region to repaint
See Also:
JComponent.repaint(long, int, int, int, int)


"
105,RepaintManager,2,void markCompletelyDirty(JComponent c),True,,"

markCompletelyDirty
public void markCompletelyDirty(JComponent aComponent)
Mark a component completely dirty. aComponent will be
 completely painted during the next paintDirtyRegions() call.

"
105,RepaintManager,3,void markCompletelyClean(JComponent c),True,,"

markCompletelyClean
public void markCompletelyClean(JComponent aComponent)
Mark a component completely clean. aComponent will not
 get painted during the next paintDirtyRegions() call.

"
105,RepaintManager,4,void addInvalidComponent(JComponent invalidComponent),True,,"

addInvalidComponent
public void addInvalidComponent(JComponent invalidComponent)
Mark the component as in need of layout and queue a runnable
 for the event dispatching thread that will validate the components
 first isValidateRoot() ancestor.

See Also:
JComponent.isValidateRoot(), 
removeInvalidComponent(javax.swing.JComponent)


"
105,RepaintManager,5,void validateInvalidComponents(),True,,"

validateInvalidComponents
public void validateInvalidComponents()
Validate all of the components that have been marked invalid.

See Also:
addInvalidComponent(javax.swing.JComponent)


"
106,RowFilter,1,"RowFilter.Entry<M,I> include(int index, M model)",False,,NULL
106,RowFilter,2,"RowFilter.Entry<M,I> exclude(int index, M model)",False,,NULL
106,RowFilter,3,"RowFilter.Entry<M,I> include(javax.swing.RowFilter.Entry<? extends M,? extends I> entry)",False,,NULL
106,RowFilter,4,"RowFilter.Entry<M,I> exclude(javax.swing.RowFilter.Entry<? extends M,? extends I> entry)",False,,NULL
106,RowFilter,5,"RowFilter.Entry<M,I> include(javax.swing.RowFilter<M,I> filter, M model, int index)",False,,NULL
107,RowFilter.Entry,1,Object getValue(int identifier),True,,"

getValue
public abstract Object getValue(int index)
Returns the value at the specified index.  This may return
 null.  When used with a table, index
 corresponds to the column number in the model.

Parameters:
index - the index of the value to get
Returns:
value at the specified index
Throws:
IndexOutOfBoundsException - if index < 0 or
         >= getValueCount


"
107,RowFilter.Entry,2,int getModelRowCount(),False,,NULL
107,RowFilter.Entry,3,int getIdentifier(int index),False,,NULL
107,RowFilter.Entry,4,int getValueCount(),True,,"

getValueCount
public abstract int getValueCount()
Returns the number of values in the entry.  For
 example, when used with a table this corresponds to the
 number of columns.

Returns:
number of values in the object being filtered


"
107,RowFilter.Entry,5,String getStringValue(int identifier),True,,"

getStringValue
public String getStringValue(int index)
Returns the string value at the specified index.  If
 filtering is being done based on String values
 this method is preferred to that of getValue
 as getValue(index).toString() may return a
 different result than getStringValue(index).
 
 This implementation calls getValue(index).toString()
 after checking for null.  Subclasses that provide
 different string conversion should override this method if
 necessary.

Parameters:
index - the index of the value to get
Returns:
non-null string at the specified index
Throws:
IndexOutOfBoundsException - if index < 0 ||
         >= getValueCount


"
108,RowSorter,1,void setSortKeys(List<? extends RowSorter.SortKey> sortKeys),True,,"

setSortKeys
public abstract void setSortKeys(List<? extends RowSorter.SortKey> keys)
Sets the current sort keys.

Parameters:
keys - the new SortKeys; null
        is a shorthand for specifying an empty list,
        indicating that the view should be unsorted


"
108,RowSorter,2,void toggleSortOrder(int column),True,,"

toggleSortOrder
public abstract void toggleSortOrder(int column)
Reverses the sort order of the specified column.  It is up to
 subclasses to provide the exact behavior when invoked.  Typically
 this will reverse the sort order from ascending to descending (or
 descending to ascending) if the specified column is already the
 primary sorted column; otherwise, makes the specified column
 the primary sorted column, with an ascending sort order.  If
 the specified column is not sortable, this method has no
 effect.
 
 If this results in changing the sort order and sorting, the
 appropriate RowSorterListener notification will be
 sent.

Parameters:
column - the column to toggle the sort ordering of, in
        terms of the underlying model
Throws:
IndexOutOfBoundsException - if column is outside the range of
         the underlying model


"
108,RowSorter,3,void setSortKeys(List<? extends RowSorter.SortKey> sortKeys),True,,"

setSortKeys
public abstract void setSortKeys(List<? extends RowSorter.SortKey> keys)
Sets the current sort keys.

Parameters:
keys - the new SortKeys; null
        is a shorthand for specifying an empty list,
        indicating that the view should be unsorted


"
108,RowSorter,4,void setSortsOnUpdates(boolean sortsOnUpdates),False,,NULL
108,RowSorter,5,"void setRowFilter(RowFilter<? super M, ? super Integer> filter)",False,,NULL
109,RowSorter.SortKey,1,int getColumn(),True,,"

getColumn
public final int getColumn()
Returns the index of the column.

Returns:
index of column


"
109,RowSorter.SortKey,2,SortOrder getSortOrder(),True,,"

getSortOrder
public final SortOrder getSortOrder()
Returns the sort order of the column.

Returns:
the sort order of the column


"
109,RowSorter.SortKey,3,"SortKey(int column, SortOrder sortOrder)",False,,NULL
109,RowSorter.SortKey,4,boolean equals(Object o),True,,"

equals
public boolean equals(Object o)
Returns true if this object equals the specified object.
 If the specified object is a SortKey and
 references the same column and sort order, the two objects
 are equal.

Overrides:
equals in class Object
Parameters:
o - the object to compare to
Returns:
true if o is equal to this SortKey
See Also:
Object.hashCode(), 
HashMap


"
109,RowSorter.SortKey,5,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code for this SortKey.

Overrides:
hashCode in class Object
Returns:
hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
110,ScrollPaneLayout,1,void layoutContainer(Container parent),True,,"

layoutContainer
public void layoutContainer(Container parent)
Lays out the scrollpane. The positioning of components depends on
 the following constraints:
 
 The row header, if present and visible, gets its preferred
 width and the viewport's height.

  The column header, if present and visible, gets its preferred
 height and the viewport's width.

  If a vertical scrollbar is needed, i.e. if the viewport's extent
 height is smaller than its view height or if the displayPolicy
 is ALWAYS, it's treated like the row header with respect to its
 dimensions and is made visible.

  If a horizontal scrollbar is needed, it is treated like the
 column header (see the paragraph above regarding the vertical scrollbar).

  If the scrollpane has a non-null
viewportBorder, then space is allocated for that.

  The viewport gets the space available after accounting for
 the previous constraints.

  The corner components, if provided, are aligned with the
 ends of the scrollbars and headers. If there is a vertical
 scrollbar, the right corners appear; if there is a horizontal
 scrollbar, the lower corners appear; a row header gets left
 corners, and a column header gets upper corners.
 

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the Container to lay out


"
110,ScrollPaneLayout,2,Dimension preferredLayoutSize(Container parent),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
The preferred size of a ScrollPane is the size of the insets,
 plus the preferred size of the viewport, plus the preferred size of
 the visible headers, plus the preferred size of the scrollbars
 that will appear given the current view and the current
 scrollbar displayPolicies.
 Note that the rowHeader is calculated as part of the preferred width
 and the colHeader is calculated as part of the preferred size.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the preferred size of the
         viewport and any scrollbars
See Also:
ViewportLayout, 
LayoutManager


"
110,ScrollPaneLayout,3,Dimension minimumLayoutSize(Container parent),True,,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
The minimum size of a ScrollPane is the size of the insets
 plus minimum size of the viewport, plus the scrollpane's
 viewportBorder insets, plus the minimum size
 of the visible headers, plus the minimum size of the
 scrollbars whose displayPolicy isn't NEVER.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the Container that will be laid out
Returns:
a Dimension object specifying the minimum size
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
110,ScrollPaneLayout,4,void syncWithScrollPane(JScrollPane sp),True,,"

syncWithScrollPane
public void syncWithScrollPane(JScrollPane sp)
This method is invoked after the ScrollPaneLayout is set as the
 LayoutManager of a JScrollPane.
 It initializes all of the internal fields that
 are ordinarily set by addLayoutComponent.  For example:
 
 ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
     public void layoutContainer(Container p) {
         super.layoutContainer(p);
         // do some extra work here ...
     }
 };
 scrollpane.setLayout(mySPLayout):
 

"
110,ScrollPaneLayout,5,"void syncWithScrollPane(JScrollPane sp, boolean isVertical)",False,,NULL
111,ScrollPaneLayout.UIResource,1,Dimension preferredLayoutSize(Container parent),False,,NULL
111,ScrollPaneLayout.UIResource,2,Dimension minimumLayoutSize(Container parent),False,,NULL
111,ScrollPaneLayout.UIResource,3,void layoutContainer(Container parent),False,,NULL
111,ScrollPaneLayout.UIResource,4,void syncWithScrollPane(JScrollPane sp),False,,NULL
111,ScrollPaneLayout.UIResource,5,"void syncWithScrollPane(JScrollPane sp, boolean isVertical)",False,,NULL
112,SizeRequirements,1,int getMinimumSize(),False,,NULL
112,SizeRequirements,2,int getPreferredSpan(),False,,NULL
112,SizeRequirements,3,int getMaximumSize(),False,,NULL
112,SizeRequirements,4,void setMinimumSize(int minimumSize),False,,NULL
112,SizeRequirements,5,void setPreferredSpan(int preferredSpan),False,,NULL
113,SizeSequence,1,int getSize(),False,,NULL
113,SizeSequence,2,int getSize(int index),True,,"

getSize
public int getSize(int index)
Returns the size of the specified entry.
 If index is out of the range
 (0 <= index < getSizes().length)
 the behavior is unspecified.

Parameters:
index - the index corresponding to the entry
Returns:
the size of the entry


"
113,SizeSequence,3,"void setSize(int index, int size)",True,,"

setSize
public void setSize(int index,
                    int size)
Sets the size of the specified entry.
 Note that if the value of index
 does not fall in the range:
 (0 <= index < getSizes().length)
 the behavior is unspecified.

Parameters:
index - the index corresponding to the entry
size - the size of the entry


"
113,SizeSequence,4,"void insertSize(int index, int size)",False,,NULL
113,SizeSequence,5,void removeSize(int index),False,,NULL
114,SortingFocusTraversalPolicy,1,"Component getComponentAfter(Container aContainer, Component aComponent)",True,,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
 
 By default, SortingFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Specified by:
getComponentAfter in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
114,SortingFocusTraversalPolicy,2,"Component getComponentBefore(Container aContainer, Component aComponent)",True,,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
 
 By default, SortingFocusTraversalPolicy implicitly transfers focus down-
 cycle. That is, during normal focus traversal, the Component
 traversed after a focus cycle root will be the focus-cycle-root's
 default Component to focus. This behavior can be disabled using the
 setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Specified by:
getComponentBefore in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if either aContainer or
         aComponent is null


"
114,SortingFocusTraversalPolicy,3,Component getFirstComponent(Container aContainer),True,,"

getFirstComponent
public Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Specified by:
getFirstComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        first Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
114,SortingFocusTraversalPolicy,4,Component getLastComponent(Container aContainer),True,,"

getLastComponent
public Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Specified by:
getLastComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        last Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
114,SortingFocusTraversalPolicy,5,Component getDefaultComponent(Container aContainer),True,,"

getDefaultComponent
public Component getDefaultComponent(Container aContainer)
Returns the default Component to focus. This Component will be the first
 to receive focus when traversing down into a new focus traversal cycle
 rooted at aContainer. The default implementation of this method
 returns the same Component as getFirstComponent.

Specified by:
getDefaultComponent in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider whose
        default Component is to be returned
Returns:
the default Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null
See Also:
getFirstComponent(java.awt.Container)


"
115,SpinnerDateModel,1,Date getNextValue(),False,,NULL
115,SpinnerDateModel,2,Date getPreviousValue(),False,,NULL
115,SpinnerDateModel,3,void setStart(Date start),False,,NULL
115,SpinnerDateModel,4,void setEnd(Date end),False,,NULL
115,SpinnerDateModel,5,void setCalendarField(int calendarField),True,,"

setCalendarField
public void setCalendarField(int calendarField)
Changes the size of the date value change computed
 by the nextValue and previousValue methods.
 The calendarField parameter must be one of the
 Calendar field constants like Calendar.MONTH
 or Calendar.MINUTE.
 The nextValue and previousValue methods
 simply move the specified Calendar field forward or backward
 by one unit with the Calendar.add method.
 You should use this method with care as some UIs may set the
 calendarField before committing the edit to spin the field under
 the cursor. If you only want one field to spin you can subclass
 and ignore the setCalendarField calls.

Parameters:
calendarField - one of
  
Calendar.ERA
Calendar.YEAR
Calendar.MONTH
Calendar.WEEK_OF_YEAR
Calendar.WEEK_OF_MONTH
Calendar.DAY_OF_MONTH
Calendar.DAY_OF_YEAR
Calendar.DAY_OF_WEEK
Calendar.DAY_OF_WEEK_IN_MONTH
Calendar.AM_PM
Calendar.HOUR
Calendar.HOUR_OF_DAY
Calendar.MINUTE
Calendar.SECOND
Calendar.MILLISECOND


 This method fires a ChangeEvent if the
 calendarField has changed.
See Also:
getCalendarField(), 
getNextValue(), 
getPreviousValue(), 
Calendar.add(int, int), 
AbstractSpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
116,SpinnerListModel,1,Object getNextValue(),True,,"

getNextValue
public Object getNextValue()
Returns the next legal value of the underlying sequence or
 null if value is already the last element.

Specified by:
getNextValue in interface SpinnerModel
Returns:
the next legal value of the underlying sequence or
     null if value is already the last element
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue()


"
116,SpinnerListModel,2,Object getPreviousValue(),True,,"

getPreviousValue
public Object getPreviousValue()
Returns the previous element of the underlying sequence or
 null if value is already the first element.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
the previous element of the underlying sequence or
     null if value is already the first element
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue()


"
116,SpinnerListModel,3,void setList(List<?> list),True,,"

setList
public void setList(List<?> list)
Changes the list that defines this sequence and resets the index
 of the models value to zero.  Note that list
 is not copied, the model just stores a reference to it.
 
 This method fires a ChangeEvent if list is
 not equal to the current list.

Parameters:
list - the sequence that this model represents
Throws:
IllegalArgumentException - if list is
    null or zero length
See Also:
getList()


"
116,SpinnerListModel,4,"void setList(List<?> list, Object initialValue)",False,,NULL
116,SpinnerListModel,5,void setList(Object[] values),False,,NULL
117,SpinnerNumberModel,1,Object getNextValue(),True,,"

getNextValue
public Object getNextValue()
Returns the next number in the sequence.

Specified by:
getNextValue in interface SpinnerModel
Returns:
value + stepSize or null if the sum
     exceeds maximum.
See Also:
SpinnerModel.getNextValue(), 
getPreviousValue(), 
setStepSize(java.lang.Number)


"
117,SpinnerNumberModel,2,Object getPreviousValue(),True,,"

getPreviousValue
public Object getPreviousValue()
Returns the previous number in the sequence.

Specified by:
getPreviousValue in interface SpinnerModel
Returns:
value - stepSize, or
     null if the sum is less
     than minimum.
See Also:
SpinnerModel.getPreviousValue(), 
getNextValue(), 
setStepSize(java.lang.Number)


"
117,SpinnerNumberModel,3,void setMinimum(Object minimum),False,,NULL
117,SpinnerNumberModel,4,void setMaximum(Object maximum),False,,NULL
117,SpinnerNumberModel,5,void setStepSize(Number stepSize),True,,"

setStepSize
public void setStepSize(Number stepSize)
Changes the size of the value change computed by the
 getNextValue and getPreviousValue
 methods.  An IllegalArgumentException
 is thrown if stepSize is null.
 
 This method fires a ChangeEvent if the
 stepSize has changed.

Parameters:
stepSize - the size of the value change computed by the
     getNextValue and getPreviousValue methods
See Also:
getNextValue(), 
getPreviousValue(), 
getStepSize(), 
SpinnerModel.addChangeListener(javax.swing.event.ChangeListener)


"
118,Spring,1,int getMinimumValue(),True,,"

getMinimumValue
public abstract int getMinimumValue()
Returns the minimum value of this Spring.

Returns:
the minimumValue property of this Spring


"
118,Spring,2,int getPreferredValue(),True,,"

getPreferredValue
public abstract int getPreferredValue()
Returns the preferred value of this Spring.

Returns:
the preferredValue of this Spring


"
118,Spring,3,int getMaximumValue(),True,,"

getMaximumValue
public abstract int getMaximumValue()
Returns the maximum value of this Spring.

Returns:
the maximumValue property of this Spring


"
118,Spring,4,void setMinimumValue(int minValue),False,,NULL
118,Spring,5,void setPreferredValue(int prefValue),False,,NULL
119,SpringLayout,1,"void putConstraint(String edgeName, Component c1, int pad, String relation, Component c2)",True,,"

putConstraint
public void putConstraint(String e1,
                          Component c1,
                          int pad,
                          String e2,
                          Component c2)
Links edge e1 of component c1 to
 edge e2 of component c2,
 with a fixed distance between the edges. This
 constraint will cause the assignment
 
     value(e1, c1) = value(e2, c2) + pad
 to take place during all subsequent layout operations.
 

Parameters:
e1 - the edge of the dependent
c1 - the component of the dependent
pad - the fixed distance between dependent and anchor
e2 - the edge of the anchor
c2 - the component of the anchor
See Also:
putConstraint(String, Component, Spring, String, Component)


"
119,SpringLayout,2,SpringLayout.Constraints getConstraints(Component c),True,,"

getConstraints
public SpringLayout.Constraints getConstraints(Component c)
Returns the constraints for the specified component.
 Note that,
 unlike the GridBagLayout
getConstraints method,
 this method does not clone constraints.
 If no constraints
 have been associated with this component,
 this method
 returns a default constraints object positioned at
 0,0 relative to the parent's Insets and its width/height
 constrained to the minimum, maximum, and preferred sizes of the
 component. The size characteristics
 are not frozen at the time this method is called;
 instead this method returns a constraints object
 whose characteristics track the characteristics
 of the component as they change.

Parameters:
c - the component whose constraints will be returned
Returns:
the constraints for the specified component


"
119,SpringLayout,3,Spring xConstraint(Component c),False,,NULL
119,SpringLayout,4,Spring yConstraint(Component c),False,,NULL
119,SpringLayout,5,void removeLayoutComponent(Component c),True,,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the constraints associated with the specified component.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component being removed from the container


"
120,SpringLayout.Constraints,1,SpringLayout.Constraints(),False,,NULL
120,SpringLayout.Constraints,2,void setX(Spring x),True,,"

setX
public void setX(Spring x)
Sets the x property,
 which controls the x value
 of a component's location.

Parameters:
x - the spring controlling the x value
          of a component's location
See Also:
getX(), 
SpringLayout.Constraints


"
120,SpringLayout.Constraints,3,void setY(Spring y),True,,"

setY
public void setY(Spring y)
Sets the y property,
 which controls the y value
 of a component's location.

Parameters:
y - the spring controlling the y value
          of a component's location
See Also:
getY(), 
SpringLayout.Constraints


"
120,SpringLayout.Constraints,4,void setWidth(Spring width),True,,"

setWidth
public void setWidth(Spring width)
Sets the width property,
 which controls the width of a component.

Parameters:
width - the spring controlling the width of this
 Constraints object
See Also:
getWidth(), 
SpringLayout.Constraints


"
120,SpringLayout.Constraints,5,void setHeight(Spring height),True,,"

setHeight
public void setHeight(Spring height)
Sets the height property,
 which controls the height of a component.

Parameters:
height - the spring controlling the height of this Constraints
 object
See Also:
getHeight(), 
SpringLayout.Constraints


"
121,SwingUtilities,1,void invokeLater(Runnable doRun),True,,"

invokeLater
public static void invokeLater(Runnable doRun)
Causes doRun.run() to be executed asynchronously on the
 AWT event dispatching thread.  This will happen after all
 pending AWT events have been processed.  This method should
 be used when an application thread needs to update the GUI.
 In the following example the invokeLater call queues
 the Runnable object doHelloWorld
 on the event dispatching thread and
 then prints a message.
 
 Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 SwingUtilities.invokeLater(doHelloWorld);
 System.out.println(""This might well be displayed before the other message."");
 
 If invokeLater is called from the event dispatching thread --
 for example, from a JButton's ActionListener -- the doRun.run() will
 still be deferred until all pending events have been processed.
 Note that if the doRun.run() throws an uncaught exception
 the event dispatching thread will unwind (not the current thread).
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for java.awt.EventQueue.invokeLater().
 
 Unlike the rest of Swing, this method can be invoked from any thread.

See Also:
invokeAndWait(java.lang.Runnable)


"
121,SwingUtilities,2,void invokeAndWait(Runnable doRun),True,,"

invokeAndWait
public static void invokeAndWait(Runnable doRun)
                          throws InterruptedException,
                                 InvocationTargetException
Causes doRun.run() to be executed synchronously on the
 AWT event dispatching thread.  This call blocks until
 all pending AWT events have been processed and (then)
 doRun.run() returns. This method should
 be used when an application thread needs to update the GUI.
 It shouldn't be called from the event dispatching thread.
 Here's an example that creates a new application thread
 that uses invokeAndWait to print a string from the event
 dispatching thread and then, when that's finished, print
 a string from the application thread.
 
 final Runnable doHelloWorld = new Runnable() {
     public void run() {
         System.out.println(""Hello World on "" + Thread.currentThread());
     }
 };

 Thread appThread = new Thread() {
     public void run() {
         try {
             SwingUtilities.invokeAndWait(doHelloWorld);
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         System.out.println(""Finished on "" + Thread.currentThread());
     }
 };
 appThread.start();
 
 Note that if the Runnable.run method throws an
 uncaught exception
 (on the event dispatching thread) it's caught and rethrown, as
 an InvocationTargetException, on the caller's thread.
 
 Additional documentation and examples for this method can be
 found in
 Concurrency in Swing.
 
 As of 1.3 this method is just a cover for
 java.awt.EventQueue.invokeAndWait().

Throws:
InterruptedException - if we're interrupted while waiting for
             the event dispatching thread to finish executing
             doRun.run()
InvocationTargetException - if an exception is thrown
             while running doRun
See Also:
invokeLater(java.lang.Runnable)


"
121,SwingUtilities,3,void updateComponentTreeUI(Component c),True,,"

updateComponentTreeUI
public static void updateComponentTreeUI(Component c)
A simple minded look and feel change: ask each node in the tree
 to updateUI() -- that is, to initialize its UI property
 with the current look and feel.

"
121,SwingUtilities,4,void setSystemLookAndFeel(),False,,NULL
121,SwingUtilities,5,void setLookAndFeel(String className),False,,NULL
122,SwingWorker,1,Void doInBackground(),False,,NULL
122,SwingWorker,2,void done(),True,,"

done
protected void done()
Executed on the Event Dispatch Thread after the doInBackground
 method is finished. The default
 implementation does nothing. Subclasses may override this method to
 perform completion actions on the Event Dispatch Thread. Note
 that you can query status inside the implementation of this method to
 determine the result of this task or whether this task has been cancelled.

See Also:
doInBackground(), 
isCancelled(), 
get()


"
122,SwingWorker,3,void execute(),True,,"

execute
public final void execute()
Schedules this SwingWorker for execution on a worker
 thread. There are a number of worker threads available. In the
 event all worker threads are busy handling other
 SwingWorkers this SwingWorker is placed in a waiting
 queue.

 
 Note:
 SwingWorker is only designed to be executed once.  Executing a
 SwingWorker more than once will not result in invoking the
 doInBackground method twice.

"
122,SwingWorker,4,void publish(V... chunks),True,,"

publish
@SafeVarargs
protected final void publish(V... chunks)
Sends data chunks to the process(java.util.List<V>) method. This method is to be
 used from inside the doInBackground method to deliver
 intermediate results
 for processing on the Event Dispatch Thread inside the
 process method.

 
 Because the process method is invoked asynchronously on
 the Event Dispatch Thread
 multiple invocations to the publish method
 might occur before the process method is executed. For
 performance purposes all these invocations are coalesced into one
 invocation with concatenated arguments.

 
 For example:

 
 publish(""1"");
 publish(""2"", ""3"");
 publish(""4"", ""5"", ""6"");
 

 might result in:

 
 process(""1"", ""2"", ""3"", ""4"", ""5"", ""6"")
 

Sample Usage. This code snippet loads some tabular data and
 updates DefaultTableModel with it. Note that it safe to mutate
 the tableModel from inside the process method because it is
 invoked on the Event Dispatch Thread.

 
 class TableSwingWorker extends
         SwingWorker<DefaultTableModel, Object[]> {
     private final DefaultTableModel tableModel;

     public TableSwingWorker(DefaultTableModel tableModel) {
         this.tableModel = tableModel;
     }

      @Override
     protected DefaultTableModel doInBackground() throws Exception {
         for (Object[] row = loadData();
                  ! isCancelled() && row != null;
                  row = loadData()) {
             publish((Object[]) row);
         }
         return tableModel;
     }

      @Override
     protected void process(List<Object[]> chunks) {
         for (Object[] row : chunks) {
             tableModel.addRow(row);
         }
     }
 }
 

Parameters:
chunks - intermediate results to process
See Also:
process(java.util.List<V>)


"
122,SwingWorker,5,void process(List<V> chunks),True,,"

process
protected void process(List<V> chunks)
Receives data chunks from the publish method asynchronously on the
 Event Dispatch Thread.

 
 Please refer to the publish(V...) method for more details.

Parameters:
chunks - intermediate results to process
See Also:
publish(V...)


"
123,Timer,1,void start(),True,,"

start
public void start()
Starts the Timer,
 causing it to start sending action events
 to its listeners.

See Also:
stop()


"
123,Timer,2,void stop(),True,,"

stop
public void stop()
Stops the Timer,
 causing it to stop sending action events
 to its listeners.

See Also:
start()


"
123,Timer,3,void setDelay(int delay),True,,"

setDelay
public void setDelay(int delay)
Sets the Timer's between-event delay, the number of milliseconds
 between successive action events. This does not affect the initial delay
 property, which can be set by the setInitialDelay method.

Parameters:
delay - the delay in milliseconds
See Also:
setInitialDelay(int)


"
123,Timer,4,void setRepeats(boolean flag),True,,"

setRepeats
public void setRepeats(boolean flag)
If flag is false,
 instructs the Timer to send only one
 action event to its listeners.

Parameters:
flag - specify false to make the timer
             stop after sending its first action event


"
123,Timer,5,void addActionListener(ActionListener listener),True,,"

addActionListener
public void addActionListener(ActionListener listener)
Adds an action listener to the Timer.

Parameters:
listener - the listener to add
See Also:
Timer(int, java.awt.event.ActionListener)


"
124,ToolTipManager,1,void setInitialDelay(int milliseconds),True,,"

setInitialDelay
public void setInitialDelay(int milliseconds)
Specifies the initial delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        (after the cursor has paused) before displaying the
        tooltip
See Also:
getInitialDelay()


"
124,ToolTipManager,2,int getInitialDelay(),True,,"

getInitialDelay
public int getInitialDelay()
Returns the initial delay value.

Returns:
an integer representing the initial delay value,
          in milliseconds
See Also:
setInitialDelay(int)


"
124,ToolTipManager,3,void setDismissDelay(int milliseconds),True,,"

setDismissDelay
public void setDismissDelay(int milliseconds)
Specifies the dismissal delay value.

Parameters:
milliseconds - the number of milliseconds to delay
        before taking away the tooltip
See Also:
getDismissDelay()


"
124,ToolTipManager,4,int getDismissDelay(),True,,"

getDismissDelay
public int getDismissDelay()
Returns the dismissal delay value.

Returns:
an integer representing the dismissal delay value,
          in milliseconds
See Also:
setDismissDelay(int)


"
124,ToolTipManager,5,void setReshowDelay(int milliseconds),True,,"

setReshowDelay
public void setReshowDelay(int milliseconds)
Used to specify the amount of time before the user has to wait
 initialDelay milliseconds before a tooltip will be
 shown. That is, if the tooltip is hidden, and the user moves into
 a region of the same Component that has a valid tooltip within
 milliseconds milliseconds the tooltip will immediately
 be shown. Otherwise, if the user moves into a region with a valid
 tooltip after milliseconds milliseconds, the user
 will have to wait an additional initialDelay
 milliseconds before the tooltip is shown again.

Parameters:
milliseconds - time in milliseconds
See Also:
getReshowDelay()


"
125,TransferHandler,1,"void exportAsDrag(JComponent comp, InputEvent e, int action)",True,,"

exportAsDrag
public void exportAsDrag(JComponent comp,
                         InputEvent e,
                         int action)
Causes the Swing drag support to be initiated.  This is called by
 the various UI implementations in the javax.swing.plaf.basic
 package if the dragEnabled property is set on the component.
 This can be called by custom UI
 implementations to use the Swing drag support.  This method can also be called
 by a Swing extension written as a subclass of JComponent
 to take advantage of the Swing drag support.
 
 The transfer will not necessarily have been completed at the
 return of this call (i.e. the call does not block waiting for the drop).
 The transfer will take place through the Swing implementation of the
 java.awt.dnd mechanism, requiring no further effort
 from the developer. The exportDone method will be called
 when the transfer has completed.

Parameters:
comp - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
e - the event that triggered the transfer
action - the transfer action initially requested;
               either COPY, MOVE or LINK;
               the DnD system may change the action used during the
               course of the drag operation


"
125,TransferHandler,2,"void exportToClipboard(JComponent comp, Clipboard clip, int action)",True,,"

exportToClipboard
public void exportToClipboard(JComponent comp,
                              Clipboard clip,
                              int action)
                       throws IllegalStateException
Causes a transfer from the given component to the
 given clipboard.  This method is called by the default cut and
 copy actions registered in a component's action map.
 
 The transfer will take place using the java.awt.datatransfer
 mechanism, requiring no further effort from the developer. Any data
 transfer will be complete and the exportDone
 method will be called with the action that occurred, before this method
 returns. Should the clipboard be unavailable when attempting to place
 data on it, the IllegalStateException thrown by
 Clipboard.setContents(Transferable, ClipboardOwner) will
 be propagated through this method. However,
 exportDone will first be called with an action
 of NONE for consistency.

Parameters:
comp - the component holding the data to be transferred;
              provided to enable sharing of TransferHandlers
clip - the clipboard to transfer the data into
action - the transfer action requested; this should
  be a value of either COPY or MOVE;
  the operation performed is the intersection  of the transfer
  capabilities given by getSourceActions and the requested action;
  the intersection may result in an action of NONE
  if the requested action isn't supported
Throws:
IllegalStateException - if the clipboard is currently unavailable
See Also:
Clipboard.setContents(Transferable, ClipboardOwner)


"
125,TransferHandler,3,"void exportDone(JComponent source, Transferable data, int action)",True,,"

exportDone
protected void exportDone(JComponent source,
                          Transferable data,
                          int action)
Invoked after data has been exported.  This method should remove
 the data that was transferred if the action was MOVE.
 
 This method is implemented to do nothing since MOVE
 is not a supported action of this implementation
 (getSourceActions does not include MOVE).

Parameters:
source - the component that was the source of the data
data - The data that was transferred or possibly null
               if the action is NONE.
action - the actual action that was performed


"
125,TransferHandler,4,boolean canImport(TransferSupport support),False,,NULL
125,TransferHandler,5,boolean importData(TransferSupport support),False,,NULL
126,TransferHandler.DropLocation,1,int getChildIndex(),False,,NULL
126,TransferHandler.DropLocation,2,Point getDropPoint(),True,,"

getDropPoint
public final Point getDropPoint()
Returns the drop point, representing the mouse's
 current location within the component.

Returns:
the drop point.


"
126,TransferHandler.DropLocation,3,boolean isInsert(),False,,NULL
126,TransferHandler.DropLocation,4,boolean isInsertRow(),False,,NULL
126,TransferHandler.DropLocation,5,boolean isInsertColumn(),False,,NULL
127,TransferHandler.TransferSupport,1,boolean isDataFlavorSupported(DataFlavor flavor),True,,"

isDataFlavorSupported
public boolean isDataFlavorSupported(DataFlavor df)
Returns whether or not the given data flavor is supported.

Parameters:
df - the DataFlavor to test
Returns:
whether or not the given flavor is supported.


"
127,TransferHandler.TransferSupport,2,Component getComponent(),True,,"

getComponent
public Component getComponent()
Returns the target component of this transfer.

Returns:
the target component


"
127,TransferHandler.TransferSupport,3,int getSourceActions(),False,,NULL
127,TransferHandler.TransferSupport,4,boolean isDrop(),True,,"

isDrop
public boolean isDrop()
Returns whether or not this TransferSupport
 represents a drop operation.

Returns:
true if this is a drop operation,
         false otherwise.


"
127,TransferHandler.TransferSupport,5,boolean isDataFlavorAvailable(DataFlavor flavor),False,,NULL
128,UIDefaults,1,Object get(Object key),True,,"

get
public Object get(Object key)
Returns the value for key.  If the value is a
 UIDefaults.LazyValue then the real
 value is computed with LazyValue.createValue(),
 the table entry is replaced, and the real value is returned.
 If the value is an UIDefaults.ActiveValue
 the table entry is not replaced - the value is computed
 with ActiveValue.createValue() for each
 get() call.

 If the key is not found in the table then it is searched for in the list
 of resource bundles maintained by this object.  The resource bundles are
 searched most recently added first using the locale returned by
 getDefaultLocale.  LazyValues and
 ActiveValues are not supported in the resource bundles.

Specified by:
get in interface Map<Object,Object>
Overrides:
get in class Hashtable<Object,Object>
Parameters:
key - the desired key
Returns:
the value for key
Since:
1.4
See Also:
UIDefaults.LazyValue, 
UIDefaults.ActiveValue, 
Hashtable.get(java.lang.Object), 
getDefaultLocale(), 
addResourceBundle(java.lang.String)


"
128,UIDefaults,2,void putDefaults(Object[] keyValueList),True,,"

putDefaults
public void putDefaults(Object[] keyValueList)
Puts all of the key/value pairs in the database and
 unconditionally generates one PropertyChangeEvent.
 The events oldValue and newValue will be null and its
 propertyName will be ""UIDefaults"".  The key/value pairs are
 added for all locales.

Parameters:
keyValueList - an array of key/value pairs
See Also:
put(java.lang.Object, java.lang.Object), 
Hashtable.put(K, V)


"
128,UIDefaults,3,void addPropertyChangeListener(PropertyChangeListener listener),True,,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 
 A PropertyChangeEvent will get fired whenever a default
 is changed.

Parameters:
listener - the PropertyChangeListener to be added
See Also:
PropertyChangeSupport


"
128,UIDefaults,4,void removePropertyChangeListener(PropertyChangeListener listener),True,,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Parameters:
listener - the PropertyChangeListener to be removed
See Also:
PropertyChangeSupport


"
128,UIDefaults,5,void setDefaultLocale(Locale l),True,,"

setDefaultLocale
public void setDefaultLocale(Locale l)
Sets the default locale.  The default locale is used in retrieving
 localized values via get methods that do not take a
 locale argument.  As of release 1.4, Swing UI objects should retrieve
 localized values using the locale of their component rather than the
 default locale.  The default locale exists to provide compatibility with
 pre 1.4 behaviour.

Parameters:
l - the new default locale
Since:
1.4
See Also:
getDefaultLocale(), 
get(Object), 
get(Object,Locale)


"
129,UIDefaults.LazyInputMap,1,void createValue(javax.swing.UIDefaults table),False,,NULL
129,UIDefaults.LazyInputMap,2,"void put(javax.swing.KeyStroke keyStroke, java.lang.Object actionMapKey)",False,,NULL
129,UIDefaults.LazyInputMap,3,void remove(javax.swing.KeyStroke key),False,,NULL
129,UIDefaults.LazyInputMap,4,java.lang.Object get(javax.swing.KeyStroke key),False,,NULL
129,UIDefaults.LazyInputMap,5,javax.swing.InputMap getInputMap(),False,,NULL
130,UIDefaults.ProxyLazyValue,1,Object createValue(UIDefaults table),True,,"

createValue
public Object createValue(UIDefaults table)
Creates the value retrieved from the UIDefaults table.
 The object is created each time it is accessed.

Specified by:
createValue in interface UIDefaults.LazyValue
Parameters:
table - a UIDefaults table
Returns:
the created Object


"
130,UIDefaults.ProxyLazyValue,2,boolean equals(Object obj),False,,NULL
130,UIDefaults.ProxyLazyValue,3,int hashCode(),False,,NULL
130,UIDefaults.ProxyLazyValue,4,String toString(),False,,NULL
130,UIDefaults.ProxyLazyValue,5,void setProxy(UIDefaults.ProxyLazyValue.ProxyLazyValueProvider provider),False,,NULL
131,UIManager,1,LookAndFeel getLookAndFeel(),True,,"

getLookAndFeel
public static LookAndFeel getLookAndFeel()
Returns the current look and feel or null.

Returns:
current look and feel, or null
See Also:
setLookAndFeel(javax.swing.LookAndFeel)


"
131,UIManager,2,void setLookAndFeel(LookAndFeel newLookAndFeel),True,,"

setLookAndFeel
public static void setLookAndFeel(LookAndFeel newLookAndFeel)
                           throws UnsupportedLookAndFeelException
Sets the current look and feel to newLookAndFeel.
 If the current look and feel is non-null uninitialize is invoked on it. If newLookAndFeel is
 non-null, initialize is invoked on it followed
 by getDefaults. The defaults returned from newLookAndFeel.getDefaults() replace those of the defaults
 from the previous look and feel. If the newLookAndFeel is
 null, the look and feel defaults are set to null.
 
 A value of null can be used to set the look and feel
 to null. As the LookAndFeel is required for
 most of Swing to function, setting the LookAndFeel to
 null is strongly discouraged.
 
 This is a JavaBeans bound property.

Parameters:
newLookAndFeel - LookAndFeel to install
Throws:
UnsupportedLookAndFeelException - if
          newLookAndFeel is non-null and
          newLookAndFeel.isSupportedLookAndFeel() returns
          false
See Also:
getLookAndFeel()


"
131,UIManager,3,String getSystemLookAndFeelClassName(),True,,"

getSystemLookAndFeelClassName
public static String getSystemLookAndFeelClassName()
Returns the name of the LookAndFeel class that implements
 the native system look and feel if there is one, otherwise
 the name of the default cross platform LookAndFeel
 class. This value can be overriden by setting the
 swing.systemlaf system property.

Returns:
the String of the LookAndFeel
          class
See Also:
setLookAndFeel(javax.swing.LookAndFeel), 
getCrossPlatformLookAndFeelClassName()


"
131,UIManager,4,void addPropertyChangeListener(PropertyChangeListener listener),True,,"

addPropertyChangeListener
public static void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.

Parameters:
listener - the PropertyChangeListener to be added
See Also:
PropertyChangeSupport


"
131,UIManager,5,UIDefaults getDefaults(),True,,"

getDefaults
public static UIDefaults getDefaults()
Returns the defaults. The returned defaults resolve using the
 logic specified in the class documentation.

Returns:
a UIDefaults object containing the default values


"
132,UIManager.LookAndFeelInfo,1,String getClassName(),True,,"

getClassName
public String getClassName()
Returns the name of the class that implements this look and feel.

Returns:
the name of the class that implements this
              LookAndFeel
See Also:
LookAndFeel


"
132,UIManager.LookAndFeelInfo,2,String getName(),True,,"

getName
public String getName()
Returns the name of the look and feel in a form suitable
 for a menu or other presentation

Returns:
a String containing the name
See Also:
LookAndFeel.getName()


"
132,UIManager.LookAndFeelInfo,3,String toString(),True,,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
132,UIManager.LookAndFeelInfo,4,boolean equals(Object obj),False,,NULL
132,UIManager.LookAndFeelInfo,5,int hashCode(),False,,NULL
133,ViewportLayout,1,Dimension preferredLayoutSize(Container parent),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container parent)
Returns the preferred dimensions for this layout given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
parent - the component which needs to be laid out
Returns:
a Dimension object containing the
          preferred dimensions
See Also:
minimumLayoutSize(java.awt.Container)


"
133,ViewportLayout,2,Dimension minimumLayoutSize(Container parent),True,,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container parent)
Returns the minimum dimensions needed to layout the components
 contained in the specified target container.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
parent - the component which needs to be laid out
Returns:
a Dimension object containing the minimum
          dimensions
See Also:
preferredLayoutSize(java.awt.Container)


"
133,ViewportLayout,3,void layoutContainer(Container parent),True,,"

layoutContainer
public void layoutContainer(Container parent)
Called by the AWT when the specified container needs to be laid out.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container to lay out
Throws:
AWTError - if the target isn't the container specified to the
                      BoxLayout constructor


"
133,ViewportLayout,4,"void addLayoutComponent(String name, Component comp)",True,,"

addLayoutComponent
public void addLayoutComponent(String name,
                               Component c)
Adds the specified component to the layout. Not used by this class.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the name of the component
c - the the component to be added


"
133,ViewportLayout,5,void removeLayoutComponent(Component comp),True,,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Removes the specified component from the layout. Not used by
 this class.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to remove


"
