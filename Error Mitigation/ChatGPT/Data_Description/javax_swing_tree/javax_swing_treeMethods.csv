ClassName,Method,Return Type,Description,Full Description
AbstractLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",abstract Rectangle,Returns a rectangle giving the bounds needed to draw path.,"

getBounds
public abstract Rectangle getBounds(TreePath path,
                                    Rectangle placeIn)
Returns a rectangle giving the bounds needed to draw path.

Parameters:
path - a TreePath specifying a node
placeIn - a Rectangle object giving the
          available space
Returns:
a Rectangle object specifying the space to be used


"
AbstractLayoutCache,getExpandedState(TreePath path),abstract boolean,"Returns true if the path is expanded, and visible.","

getExpandedState
public abstract boolean getExpandedState(TreePath path)
Returns true if the path is expanded, and visible.

Parameters:
path - the path being queried
Returns:
true if the path is expanded and visible, false otherwise


"
AbstractLayoutCache,getModel(),TreeModel,Returns the TreeModel that is providing the data.,"

getModel
public TreeModel getModel()
Returns the TreeModel that is providing the data.

Returns:
the TreeModel that is providing the data


"
AbstractLayoutCache,getNodeDimensions(),AbstractLayoutCache.NodeDimensions,"Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes.","

getNodeDimensions
public AbstractLayoutCache.NodeDimensions getNodeDimensions()
Returns the object that renders nodes in the tree, and which is
 responsible for calculating the dimensions of individual nodes.

Returns:
the NodeDimensions object


"
AbstractLayoutCache,"getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle placeIn)",protected Rectangle,"Returns, by reference in placeIn, the size needed to represent value.","

getNodeDimensions
protected Rectangle getNodeDimensions(Object value,
                                      int row,
                                      int depth,
                                      boolean expanded,
                                      Rectangle placeIn)
Returns, by reference in placeIn,
 the size needed to represent value.
 If inPlace is null, a newly created
 Rectangle should be returned, otherwise the value
 should be placed in inPlace and returned. This will
 return null if there is no renderer.

Parameters:
value - the value to be represented
row - row being queried
depth - the depth of the row
expanded - true if row is expanded, false otherwise
placeIn - a Rectangle containing the size needed
          to represent value
Returns:
a Rectangle containing the node dimensions,
          or null if node has no dimension


"
AbstractLayoutCache,"getPathClosestTo(int x, int y)",abstract TreePath,"Returns the path to the node that is closest to x,y.","

getPathClosestTo
public abstract TreePath getPathClosestTo(int x,
                                          int y)
Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null,
 otherwise it'll always return a valid path.
 If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

Parameters:
x - the horizontal component of the desired location
y - the vertical component of the desired location
Returns:
the TreePath closest to the specified point


"
AbstractLayoutCache,getPathForRow(int row),abstract TreePath,Returns the path for passed in row.,"

getPathForRow
public abstract TreePath getPathForRow(int row)
Returns the path for passed in row.  If row is not visible
 null is returned.

Parameters:
row - the row being queried
Returns:
the TreePath for the given row


"
AbstractLayoutCache,getPreferredHeight(),int,Returns the preferred height.,"

getPreferredHeight
public int getPreferredHeight()
Returns the preferred height.

Returns:
the preferred height


"
AbstractLayoutCache,getPreferredWidth(Rectangle bounds),int,Returns the preferred width for the passed in region.,"

getPreferredWidth
public int getPreferredWidth(Rectangle bounds)
Returns the preferred width for the passed in region.
 The region is defined by the path closest to
 (bounds.x, bounds.y) and
 ends at bounds.height + bounds.y.
 If bounds is null,
 the preferred width for all the nodes
 will be returned (and this may be a VERY expensive
 computation).

Parameters:
bounds - the region being queried
Returns:
the preferred width for the passed in region


"
AbstractLayoutCache,getRowCount(),abstract int,Number of rows being displayed.,"

getRowCount
public abstract int getRowCount()
Number of rows being displayed.

Returns:
the number of rows being displayed


"
AbstractLayoutCache,getRowForPath(TreePath path),abstract int,Returns the row that the last item identified in path is visible at.,"

getRowForPath
public abstract int getRowForPath(TreePath path)
Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

Parameters:
path - the TreePath being queried
Returns:
the row where the last item in path is visible or -1
         if any elements in path aren't currently visible


"
AbstractLayoutCache,getRowHeight(),int,Returns the height of each row.,"

getRowHeight
public int getRowHeight()
Returns the height of each row.  If the returned value is less than
 or equal to 0 the height for each row is determined by the
 renderer.

"
AbstractLayoutCache,getRowsForPaths(TreePath[] paths),int[],Returns the rows that the TreePath instances in path are being displayed at.,"

getRowsForPaths
public int[] getRowsForPaths(TreePath[] paths)
Returns the rows that the TreePath instances in
 path are being displayed at.
 This method should return an array of the same length as that passed
 in, and if one of the TreePaths
 in path is not valid its entry in the array should
 be set to -1.

Specified by:
getRowsForPaths in interface RowMapper
Parameters:
paths - the array of TreePaths being queried
Returns:
an array of the same length that is passed in containing
          the rows that each corresponding where each
          TreePath is displayed; if paths
          is null, null is returned


"
AbstractLayoutCache,getSelectionModel(),TreeSelectionModel,Returns the model used to maintain the selection.,"

getSelectionModel
public TreeSelectionModel getSelectionModel()
Returns the model used to maintain the selection.

Returns:
the treeSelectionModel


"
AbstractLayoutCache,getVisibleChildCount(TreePath path),abstract int,Returns the number of visible children for row.,"

getVisibleChildCount
public abstract int getVisibleChildCount(TreePath path)
Returns the number of visible children for row.

Parameters:
path - the path being queried
Returns:
the number of visible children for the specified path


"
AbstractLayoutCache,getVisiblePathsFrom(TreePath path),abstract Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.,"

getVisiblePathsFrom
public abstract Enumeration<TreePath> getVisiblePathsFrom(TreePath path)
Returns an Enumerator that increments over the visible
 paths starting at the passed in location. The ordering of the
 enumeration is based on how the paths are displayed.
 The first element of the returned enumeration will be path,
 unless it isn't visible,
 in which case null will be returned.

Parameters:
path - the starting location for the enumeration
Returns:
the Enumerator starting at the desired location


"
AbstractLayoutCache,invalidatePathBounds(TreePath path),abstract void,"Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.","

invalidatePathBounds
public abstract void invalidatePathBounds(TreePath path)
Instructs the LayoutCache that the bounds for
 path are invalid, and need to be updated.

Parameters:
path - the path being updated


"
AbstractLayoutCache,invalidateSizes(),abstract void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.,"

invalidateSizes
public abstract void invalidateSizes()
Informs the TreeState that it needs to recalculate
 all the sizes it is referencing.

"
AbstractLayoutCache,isExpanded(TreePath path),abstract boolean,Returns true if the value identified by row is currently expanded.,"

isExpanded
public abstract boolean isExpanded(TreePath path)
Returns true if the value identified by row is currently expanded.

"
AbstractLayoutCache,isFixedRowHeight(),protected boolean,Returns true if the height of each row is a fixed size.,"

isFixedRowHeight
protected boolean isFixedRowHeight()
Returns true if the height of each row is a fixed size.

"
AbstractLayoutCache,isRootVisible(),boolean,Returns true if the root node of the tree is displayed.,"

isRootVisible
public boolean isRootVisible()
Returns true if the root node of the tree is displayed.

Returns:
true if the root node of the tree is displayed
See Also:
rootVisible


"
AbstractLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",abstract void,Marks the path path expanded state to isExpanded.,"

setExpandedState
public abstract void setExpandedState(TreePath path,
                                      boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Parameters:
path - the path being expanded or collapsed
isExpanded - true if the path should be expanded, false otherwise


"
AbstractLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.,"

setModel
public void setModel(TreeModel newModel)
Sets the TreeModel that will provide the data.

Parameters:
newModel - the TreeModel that is to
          provide the data


"
AbstractLayoutCache,setNodeDimensions(AbstractLayoutCache.NodeDimensions nd),void,Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.,"

setNodeDimensions
public void setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
Sets the renderer that is responsible for drawing nodes in the tree
 and which is therefore responsible for calculating the dimensions of
 individual nodes.

Parameters:
nd - a NodeDimensions object


"
AbstractLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.

Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
rootVisible


"
AbstractLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.,"

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.

Parameters:
rowHeight - the height of each cell, in pixels


"
AbstractLayoutCache,setSelectionModel(TreeSelectionModel newLSM),void,Sets the TreeSelectionModel used to manage the selection to new LSM.,"

setSelectionModel
public void setSelectionModel(TreeSelectionModel newLSM)
Sets the TreeSelectionModel used to manage the
 selection to new LSM.

Parameters:
newLSM - the new TreeSelectionModel


"
AbstractLayoutCache,treeNodesChanged(TreeModelEvent e),abstract void,Invoked after a node (or a set of siblings) has changed in some way.,"

treeNodesChanged
public abstract void treeNodesChanged(TreeModelEvent e)

 Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.
e.path() returns the path the parent of the changed node(s).
e.childIndices() returns the index(es) of the changed node(s).

Parameters:
e - the TreeModelEvent


"
AbstractLayoutCache,treeNodesInserted(TreeModelEvent e),abstract void,Invoked after nodes have been inserted into the tree.,"

treeNodesInserted
public abstract void treeNodesInserted(TreeModelEvent e)
Invoked after nodes have been inserted into the tree.
e.path() returns the parent of the new nodes
e.childIndices() returns the indices of the new nodes in
 ascending order.

Parameters:
e - the TreeModelEvent


"
AbstractLayoutCache,treeNodesRemoved(TreeModelEvent e),abstract void,Invoked after nodes have been removed from the tree.,"

treeNodesRemoved
public abstract void treeNodesRemoved(TreeModelEvent e)
Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.
e.path() returns the former parent of the deleted nodes.
e.childIndices() returns the indices the nodes had before they were deleted in ascending order.

Parameters:
e - the TreeModelEvent


"
AbstractLayoutCache,treeStructureChanged(TreeModelEvent e),abstract void,Invoked after the tree has drastically changed structure from a given node down.,"

treeStructureChanged
public abstract void treeStructureChanged(TreeModelEvent e)
Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by e.getPath()
 is of length one and the first element does not identify the
 current root node the first element should become the new root
 of the tree.
e.path() holds the path to the node.
e.childIndices() returns null.

Parameters:
e - the TreeModelEvent


"
AbstractLayoutCache.NodeDimensions,"getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle bounds)",abstract Rectangle,"Returns, by reference in bounds, the size and x origin to place value at.","

getNodeDimensions
public abstract Rectangle getNodeDimensions(Object value,
                                            int row,
                                            int depth,
                                            boolean expanded,
                                            Rectangle bounds)
Returns, by reference in bounds, the size and x origin to
 place value at. The calling method is responsible for determining
 the Y location. If bounds is null, a newly created
 Rectangle should be returned,
 otherwise the value should be placed in bounds and returned.

Parameters:
value - the value to be represented
row - row being queried
depth - the depth of the row
expanded - true if row is expanded, false otherwise
bounds - a Rectangle containing the size needed
              to represent value
Returns:
a Rectangle containing the node dimensions,
              or null if node has no dimension


"
DefaultMutableTreeNode,add(MutableTreeNode newChild),void,Removes newChild from its parent and makes it a child of this node by adding it to the end of this node's child array.,"

add
public void add(MutableTreeNode newChild)
Removes newChild from its parent and makes it a child of
 this node by adding it to the end of this node's child array.

Parameters:
newChild - node to add as a child of this node
Throws:
IllegalArgumentException - if newChild
                                          is null
IllegalStateException - if this node does not allow
                                          children
See Also:
insert(javax.swing.tree.MutableTreeNode, int)


"
DefaultMutableTreeNode,breadthFirstEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order.,"

breadthFirstEnumeration
public Enumeration breadthFirstEnumeration()
Creates and returns an enumeration that traverses the subtree rooted at
 this node in breadth-first order.  The first node returned by the
 enumeration's nextElement() method is this node.

 Modifying the tree by inserting, removing, or moving a node invalidates
 any enumerations created before the modification.

Returns:
an enumeration for traversing the tree in breadth-first order
See Also:
depthFirstEnumeration()


"
DefaultMutableTreeNode,children(),Enumeration,Creates and returns a forward-order enumeration of this node's children.,"

children
public Enumeration children()
Creates and returns a forward-order enumeration of this node's
 children.  Modifying this node's child array invalidates any child
 enumerations created before the modification.

Specified by:
children in interface TreeNode
Returns:
an Enumeration of this node's children


"
DefaultMutableTreeNode,clone(),Object,Overridden to make clone public.,"

clone
public Object clone()
Overridden to make clone public.  Returns a shallow copy of this node;
 the new node has no parent or children and has a reference to the same
 user object, if any.

Overrides:
clone in class Object
Returns:
a copy of this node
See Also:
Cloneable


"
DefaultMutableTreeNode,depthFirstEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order.,"

depthFirstEnumeration
public Enumeration depthFirstEnumeration()
Creates and returns an enumeration that traverses the subtree rooted at
 this node in depth-first order.  The first node returned by the
 enumeration's nextElement() method is the leftmost leaf.
 This is the same as a postorder traversal.

 Modifying the tree by inserting, removing, or moving a node invalidates
 any enumerations created before the modification.

Returns:
an enumeration for traversing the tree in depth-first order
See Also:
breadthFirstEnumeration(), 
postorderEnumeration()


"
DefaultMutableTreeNode,getAllowsChildren(),boolean,Returns true if this node is allowed to have children.,"

getAllowsChildren
public boolean getAllowsChildren()
Returns true if this node is allowed to have children.

Specified by:
getAllowsChildren in interface TreeNode
Returns:
true if this node allows children, else false


"
DefaultMutableTreeNode,getChildAfter(TreeNode aChild),TreeNode,"Returns the child in this node's child array that immediately follows aChild, which must be a child of this node.","

getChildAfter
public TreeNode getChildAfter(TreeNode aChild)
Returns the child in this node's child array that immediately
 follows aChild, which must be a child of this node.  If
 aChild is the last child, returns null.  This method
 performs a linear search of this node's children for
 aChild and is O(n) where n is the number of children; to
 traverse the entire array of children, use an enumeration instead.

Returns:
the child of this node that immediately follows
          aChild
Throws:
IllegalArgumentException - if aChild is
                                  null or is not a child of this node
See Also:
children


"
DefaultMutableTreeNode,getChildAt(int index),TreeNode,Returns the child at the specified index in this node's child array.,"

getChildAt
public TreeNode getChildAt(int index)
Returns the child at the specified index in this node's child array.

Specified by:
getChildAt in interface TreeNode
Parameters:
index - an index into this node's child array
Returns:
the TreeNode in this node's child array at  the specified index
Throws:
ArrayIndexOutOfBoundsException - if index
                                          is out of bounds


"
DefaultMutableTreeNode,getChildBefore(TreeNode aChild),TreeNode,"Returns the child in this node's child array that immediately precedes aChild, which must be a child of this node.","

getChildBefore
public TreeNode getChildBefore(TreeNode aChild)
Returns the child in this node's child array that immediately
 precedes aChild, which must be a child of this node.  If
 aChild is the first child, returns null.  This method
 performs a linear search of this node's children for aChild
 and is O(n) where n is the number of children.

Returns:
the child of this node that immediately precedes
          aChild
Throws:
IllegalArgumentException - if aChild is null
                                          or is not a child of this node


"
DefaultMutableTreeNode,getChildCount(),int,Returns the number of children of this node.,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
DefaultMutableTreeNode,getDepth(),int,Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf.,"

getDepth
public int getDepth()
Returns the depth of the tree rooted at this node -- the longest
 distance from this node to a leaf.  If this node has no children,
 returns 0.  This operation is much more expensive than
 getLevel() because it must effectively traverse the entire
 tree rooted at this node.

Returns:
the depth of the tree whose root is this node
See Also:
getLevel()


"
DefaultMutableTreeNode,getFirstChild(),TreeNode,Returns this node's first child.,"

getFirstChild
public TreeNode getFirstChild()
Returns this node's first child.  If this node has no children,
 throws NoSuchElementException.

Returns:
the first child of this node
Throws:
NoSuchElementException - if this node has no children


"
DefaultMutableTreeNode,getFirstLeaf(),DefaultMutableTreeNode,Finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf.,"

getFirstLeaf
public DefaultMutableTreeNode getFirstLeaf()
Finds and returns the first leaf that is a descendant of this node --
 either this node or its first child's first leaf.
 Returns this node if it is a leaf.

Returns:
the first leaf in the subtree rooted at this node
See Also:
isLeaf(), 
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,getIndex(TreeNode aChild),int,Returns the index of the specified child in this node's child array.,"

getIndex
public int getIndex(TreeNode aChild)
Returns the index of the specified child in this node's child array.
 If the specified node is not a child of this node, returns
 -1.  This method performs a linear search and is O(n)
 where n is the number of children.

Specified by:
getIndex in interface TreeNode
Parameters:
aChild - the TreeNode to search for among this node's children
Returns:
an int giving the index of the node in this node's child
          array, or -1 if the specified node is a not
          a child of this node
Throws:
IllegalArgumentException - if aChild
                                                  is null


"
DefaultMutableTreeNode,getLastChild(),TreeNode,Returns this node's last child.,"

getLastChild
public TreeNode getLastChild()
Returns this node's last child.  If this node has no children,
 throws NoSuchElementException.

Returns:
the last child of this node
Throws:
NoSuchElementException - if this node has no children


"
DefaultMutableTreeNode,getLastLeaf(),DefaultMutableTreeNode,Finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf.,"

getLastLeaf
public DefaultMutableTreeNode getLastLeaf()
Finds and returns the last leaf that is a descendant of this node --
 either this node or its last child's last leaf.
 Returns this node if it is a leaf.

Returns:
the last leaf in the subtree rooted at this node
See Also:
isLeaf(), 
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,getLeafCount(),int,Returns the total number of leaves that are descendants of this node.,"

getLeafCount
public int getLeafCount()
Returns the total number of leaves that are descendants of this node.
 If this node is a leaf, returns 1.  This method is O(n)
 where n is the number of descendants of this node.

Returns:
the number of leaves beneath this node
See Also:
isNodeAncestor(javax.swing.tree.TreeNode)


"
DefaultMutableTreeNode,getLevel(),int,Returns the number of levels above this node -- the distance from the root to this node.,"

getLevel
public int getLevel()
Returns the number of levels above this node -- the distance from
 the root to this node.  If this node is the root, returns 0.

Returns:
the number of levels above this node
See Also:
getDepth()


"
DefaultMutableTreeNode,getNextLeaf(),DefaultMutableTreeNode,Returns the leaf after this node or null if this node is the last leaf in the tree.,"

getNextLeaf
public DefaultMutableTreeNode getNextLeaf()
Returns the leaf after this node or null if this node is the
 last leaf in the tree.
 
 In this implementation of the MutableNode interface,
 this operation is very inefficient. In order to determine the
 next node, this method first performs a linear search in the
 parent's child-list in order to find the current node.
 
 That implementation makes the operation suitable for short
 traversals from a known position. But to traverse all of the
 leaves in the tree, you should use depthFirstEnumeration
 to enumerate the nodes in the tree and use isLeaf
 on each node to determine which are leaves.

Returns:
returns the next leaf past this node
See Also:
depthFirstEnumeration(), 
isLeaf()


"
DefaultMutableTreeNode,getNextNode(),DefaultMutableTreeNode,Returns the node that follows this node in a preorder traversal of this node's tree.,"

getNextNode
public DefaultMutableTreeNode getNextNode()
Returns the node that follows this node in a preorder traversal of this
 node's tree.  Returns null if this node is the last node of the
 traversal.  This is an inefficient way to traverse the entire tree; use
 an enumeration, instead.

Returns:
the node that follows this node in a preorder traversal, or
          null if this node is last
See Also:
preorderEnumeration()


"
DefaultMutableTreeNode,getNextSibling(),DefaultMutableTreeNode,Returns the next sibling of this node in the parent's children array.,"

getNextSibling
public DefaultMutableTreeNode getNextSibling()
Returns the next sibling of this node in the parent's children array.
 Returns null if this node has no parent or is the parent's last child.
 This method performs a linear search that is O(n) where n is the number
 of children; to traverse the entire array, use the parent's child
 enumeration instead.

Returns:
the sibling of this node that immediately follows this node
See Also:
children


"
DefaultMutableTreeNode,getParent(),TreeNode,Returns this node's parent or null if this node has no parent.,"

getParent
public TreeNode getParent()
Returns this node's parent or null if this node has no parent.

Specified by:
getParent in interface TreeNode
Returns:
this node's parent TreeNode, or null if this node has no parent


"
DefaultMutableTreeNode,getPath(),TreeNode[],"Returns the path from the root, to get to this node.","

getPath
public TreeNode[] getPath()
Returns the path from the root, to get to this node.  The last
 element in the path is this node.

Returns:
an array of TreeNode objects giving the path, where the
         first element in the path is the root and the last
         element is this node.


"
DefaultMutableTreeNode,"getPathToRoot(TreeNode aNode, int depth)",protected TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array.","

getPathToRoot
protected TreeNode[] getPathToRoot(TreeNode aNode,
                                   int depth)
Builds the parents of node up to and including the root node,
 where the original node is the last element in the returned array.
 The length of the returned array gives the node's depth in the
 tree.

Parameters:
aNode - the TreeNode to get the path for
depth - an int giving the number of steps already taken towards
        the root (on recursive calls), used to size the returned array
Returns:
an array of TreeNodes giving the path from the root to the
         specified node


"
DefaultMutableTreeNode,getPreviousLeaf(),DefaultMutableTreeNode,Returns the leaf before this node or null if this node is the first leaf in the tree.,"

getPreviousLeaf
public DefaultMutableTreeNode getPreviousLeaf()
Returns the leaf before this node or null if this node is the
 first leaf in the tree.
 
 In this implementation of the MutableNode interface,
 this operation is very inefficient. In order to determine the
 previous node, this method first performs a linear search in the
 parent's child-list in order to find the current node.
 
 That implementation makes the operation suitable for short
 traversals from a known position. But to traverse all of the
 leaves in the tree, you should use depthFirstEnumeration
 to enumerate the nodes in the tree and use isLeaf
 on each node to determine which are leaves.

Returns:
returns the leaf before this node
See Also:
depthFirstEnumeration(), 
isLeaf()


"
DefaultMutableTreeNode,getPreviousNode(),DefaultMutableTreeNode,Returns the node that precedes this node in a preorder traversal of this node's tree.,"

getPreviousNode
public DefaultMutableTreeNode getPreviousNode()
Returns the node that precedes this node in a preorder traversal of
 this node's tree.  Returns null if this node is the
 first node of the traversal -- the root of the tree.
 This is an inefficient way to
 traverse the entire tree; use an enumeration, instead.

Returns:
the node that precedes this node in a preorder traversal, or
          null if this node is the first
See Also:
preorderEnumeration()


"
DefaultMutableTreeNode,getPreviousSibling(),DefaultMutableTreeNode,Returns the previous sibling of this node in the parent's children array.,"

getPreviousSibling
public DefaultMutableTreeNode getPreviousSibling()
Returns the previous sibling of this node in the parent's children
 array.  Returns null if this node has no parent or is the parent's
 first child.  This method performs a linear search that is O(n) where n
 is the number of children.

Returns:
the sibling of this node that immediately precedes this node


"
DefaultMutableTreeNode,getRoot(),TreeNode,Returns the root of the tree that contains this node.,"

getRoot
public TreeNode getRoot()
Returns the root of the tree that contains this node.  The root is
 the ancestor with a null parent.

Returns:
the root of the tree that contains this node
See Also:
isNodeAncestor(javax.swing.tree.TreeNode)


"
DefaultMutableTreeNode,getSharedAncestor(DefaultMutableTreeNode aNode),TreeNode,Returns the nearest common ancestor to this node and aNode.,"

getSharedAncestor
public TreeNode getSharedAncestor(DefaultMutableTreeNode aNode)
Returns the nearest common ancestor to this node and aNode.
 Returns null, if no such ancestor exists -- if this node and
 aNode are in different trees or if aNode is
 null.  A node is considered an ancestor of itself.

Parameters:
aNode - node to find common ancestor with
Returns:
nearest ancestor common to this node and aNode,
          or null if none
See Also:
isNodeAncestor(javax.swing.tree.TreeNode), 
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,getSiblingCount(),int,Returns the number of siblings of this node.,"

getSiblingCount
public int getSiblingCount()
Returns the number of siblings of this node.  A node is its own sibling
 (if it has no parent or no siblings, this method returns
 1).

Returns:
the number of siblings of this node


"
DefaultMutableTreeNode,getUserObject(),Object,Returns this node's user object.,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
DefaultMutableTreeNode,getUserObjectPath(),Object[],"Returns the user object path, from the root, to get to this node.","

getUserObjectPath
public Object[] getUserObjectPath()
Returns the user object path, from the root, to get to this node.
 If some of the TreeNodes in the path have null user objects, the
 returned path will contain nulls.

"
DefaultMutableTreeNode,"insert(MutableTreeNode newChild, int childIndex)",void,"Removes newChild from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index childIndex.","

insert
public void insert(MutableTreeNode newChild,
                   int childIndex)
Removes newChild from its present parent (if it has a
 parent), sets the child's parent to this node, and then adds the child
 to this node's child array at index childIndex.
 newChild must not be null and must not be an ancestor of
 this node.

Specified by:
insert in interface MutableTreeNode
Parameters:
newChild - the MutableTreeNode to insert under this node
childIndex - the index in this node's child array
                          where this node is to be inserted
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds
IllegalArgumentException - if
                          newChild is null or is an
                          ancestor of this node
IllegalStateException - if this node does not allow
                                          children
See Also:
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,isLeaf(),boolean,Returns true if this node has no children.,"

isLeaf
public boolean isLeaf()
Returns true if this node has no children.  To distinguish between
 nodes that have no children and nodes that cannot have
 children (e.g. to distinguish files from empty directories), use this
 method in conjunction with getAllowsChildren

Specified by:
isLeaf in interface TreeNode
Returns:
true if this node has no children
See Also:
getAllowsChildren()


"
DefaultMutableTreeNode,isNodeAncestor(TreeNode anotherNode),boolean,"Returns true if anotherNode is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent.","

isNodeAncestor
public boolean isNodeAncestor(TreeNode anotherNode)
Returns true if anotherNode is an ancestor of this node
 -- if it is this node, this node's parent, or an ancestor of this
 node's parent.  (Note that a node is considered an ancestor of itself.)
 If anotherNode is null, this method returns false.  This
 operation is at worst O(h) where h is the distance from the root to
 this node.

Parameters:
anotherNode - node to test as an ancestor of this node
Returns:
true if this node is a descendant of anotherNode
See Also:
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode), 
getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,isNodeChild(TreeNode aNode),boolean,Returns true if aNode is a child of this node.,"

isNodeChild
public boolean isNodeChild(TreeNode aNode)
Returns true if aNode is a child of this node.  If
 aNode is null, this method returns false.

Returns:
true if aNode is a child of this node; false if
                  aNode is null


"
DefaultMutableTreeNode,isNodeDescendant(DefaultMutableTreeNode anotherNode),boolean,"Returns true if anotherNode is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children.","

isNodeDescendant
public boolean isNodeDescendant(DefaultMutableTreeNode anotherNode)
Returns true if anotherNode is a descendant of this node
 -- if it is this node, one of this node's children, or a descendant of
 one of this node's children.  Note that a node is considered a
 descendant of itself.  If anotherNode is null, returns
 false.  This operation is at worst O(h) where h is the distance from the
 root to anotherNode.

Parameters:
anotherNode - node to test as descendant of this node
Returns:
true if this node is an ancestor of anotherNode
See Also:
isNodeAncestor(javax.swing.tree.TreeNode), 
getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,isNodeRelated(DefaultMutableTreeNode aNode),boolean,Returns true if and only if aNode is in the same tree as this node.,"

isNodeRelated
public boolean isNodeRelated(DefaultMutableTreeNode aNode)
Returns true if and only if aNode is in the same tree
 as this node.  Returns false if aNode is null.

Returns:
true if aNode is in the same tree as this node;
          false if aNode is null
See Also:
getSharedAncestor(javax.swing.tree.DefaultMutableTreeNode), 
getRoot()


"
DefaultMutableTreeNode,isNodeSibling(TreeNode anotherNode),boolean,Returns true if anotherNode is a sibling of (has the same parent as) this node.,"

isNodeSibling
public boolean isNodeSibling(TreeNode anotherNode)
Returns true if anotherNode is a sibling of (has the
 same parent as) this node.  A node is its own sibling.  If
 anotherNode is null, returns false.

Parameters:
anotherNode - node to test as sibling of this node
Returns:
true if anotherNode is a sibling of this node


"
DefaultMutableTreeNode,isRoot(),boolean,Returns true if this node is the root of the tree.,"

isRoot
public boolean isRoot()
Returns true if this node is the root of the tree.  The root is
 the only node in the tree with a null parent; every tree has exactly
 one root.

Returns:
true if this node is the root of its tree


"
DefaultMutableTreeNode,pathFromAncestorEnumeration(TreeNode ancestor),Enumeration,Creates and returns an enumeration that follows the path from ancestor to this node.,"

pathFromAncestorEnumeration
public Enumeration pathFromAncestorEnumeration(TreeNode ancestor)
Creates and returns an enumeration that follows the path from
 ancestor to this node.  The enumeration's
 nextElement() method first returns ancestor,
 then the child of ancestor that is an ancestor of this
 node, and so on, and finally returns this node.  Creation of the
 enumeration is O(m) where m is the number of nodes between this node
 and ancestor, inclusive.  Each nextElement()
 message is O(1).

 Modifying the tree by inserting, removing, or moving a node invalidates
 any enumerations created before the modification.

Returns:
an enumeration for following the path from an ancestor of
          this node to this one
Throws:
IllegalArgumentException - if ancestor is
                                          not an ancestor of this node
See Also:
isNodeAncestor(javax.swing.tree.TreeNode), 
isNodeDescendant(javax.swing.tree.DefaultMutableTreeNode)


"
DefaultMutableTreeNode,postorderEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in postorder.,"

postorderEnumeration
public Enumeration postorderEnumeration()
Creates and returns an enumeration that traverses the subtree rooted at
 this node in postorder.  The first node returned by the enumeration's
 nextElement() method is the leftmost leaf.  This is the
 same as a depth-first traversal.

 Modifying the tree by inserting, removing, or moving a node invalidates
 any enumerations created before the modification.

Returns:
an enumeration for traversing the tree in postorder
See Also:
depthFirstEnumeration(), 
preorderEnumeration()


"
DefaultMutableTreeNode,preorderEnumeration(),Enumeration,Creates and returns an enumeration that traverses the subtree rooted at this node in preorder.,"

preorderEnumeration
public Enumeration preorderEnumeration()
Creates and returns an enumeration that traverses the subtree rooted at
 this node in preorder.  The first node returned by the enumeration's
 nextElement() method is this node.

 Modifying the tree by inserting, removing, or moving a node invalidates
 any enumerations created before the modification.

Returns:
an enumeration for traversing the tree in preorder
See Also:
postorderEnumeration()


"
DefaultMutableTreeNode,remove(int childIndex),void,Removes the child at the specified index from this node's children and sets that node's parent to null.,"

remove
public void remove(int childIndex)
Removes the child at the specified index from this node's children
 and sets that node's parent to null. The child node to remove
 must be a MutableTreeNode.

Specified by:
remove in interface MutableTreeNode
Parameters:
childIndex - the index in this node's child array
                          of the child to remove
Throws:
ArrayIndexOutOfBoundsException - if
                          childIndex is out of bounds


"
DefaultMutableTreeNode,remove(MutableTreeNode aChild),void,"Removes aChild from this node's child array, giving it a null parent.","

remove
public void remove(MutableTreeNode aChild)
Removes aChild from this node's child array, giving it a
 null parent.

Specified by:
remove in interface MutableTreeNode
Parameters:
aChild - a child of this node to remove
Throws:
IllegalArgumentException - if aChild
                                  is null or is not a child of this node


"
DefaultMutableTreeNode,removeAllChildren(),void,"Removes all of this node's children, setting their parents to null.","

removeAllChildren
public void removeAllChildren()
Removes all of this node's children, setting their parents to null.
 If this node has no children, this method does nothing.

"
DefaultMutableTreeNode,removeFromParent(),void,"Removes the subtree rooted at this node from the tree, giving this node a null parent.","

removeFromParent
public void removeFromParent()
Removes the subtree rooted at this node from the tree, giving this
 node a null parent.  Does nothing if this node is the root of its
 tree.

Specified by:
removeFromParent in interface MutableTreeNode


"
DefaultMutableTreeNode,setAllowsChildren(boolean allows),void,Determines whether or not this node is allowed to have children.,"

setAllowsChildren
public void setAllowsChildren(boolean allows)
Determines whether or not this node is allowed to have children.
 If allows is false, all of this node's children are
 removed.
 
 Note: By default, a node allows children.

Parameters:
allows - true if this node is allowed to have children


"
DefaultMutableTreeNode,setParent(MutableTreeNode newParent),void,Sets this node's parent to newParent but does not change the parent's child array.,"

setParent
public void setParent(MutableTreeNode newParent)
Sets this node's parent to newParent but does not
 change the parent's child array.  This method is called from
 insert() and remove() to
 reassign a child's parent, it should not be messaged from anywhere
 else.

Specified by:
setParent in interface MutableTreeNode
Parameters:
newParent - this node's new parent


"
DefaultMutableTreeNode,setUserObject(Object userObject),void,Sets the user object for this node to userObject.,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
DefaultMutableTreeNode,toString(),String,"Returns the result of sending toString() to this node's user object, or the empty string if the node has no user object.","

toString
public String toString()
Returns the result of sending toString() to this node's
 user object, or the empty string if the node has no user object.

Overrides:
toString in class Object
Returns:
a string representation of the object.
See Also:
getUserObject()


"
DefaultTreeCellEditor,actionPerformed(ActionEvent e),void,"Messaged when the timer fires, this will start the editing session.","

actionPerformed
public void actionPerformed(ActionEvent e)
Messaged when the timer fires, this will start the editing
 session.

Specified by:
actionPerformed in interface ActionListener


"
DefaultTreeCellEditor,addCellEditorListener(CellEditorListener l),void,Adds the CellEditorListener.,"

addCellEditorListener
public void addCellEditorListener(CellEditorListener l)
Adds the CellEditorListener.

Specified by:
addCellEditorListener in interface CellEditor
Parameters:
l - the listener to be added


"
DefaultTreeCellEditor,cancelCellEditing(),void,Messages cancelCellEditing to the realEditor and removes it from this instance.,"

cancelCellEditing
public void cancelCellEditing()
Messages cancelCellEditing to the
 realEditor and removes it from this instance.

Specified by:
cancelCellEditing in interface CellEditor


"
DefaultTreeCellEditor,canEditImmediately(EventObject event),protected boolean,"Returns true if event is null, or it is a MouseEvent with a click count > 2 and inHitRegion returns true.","

canEditImmediately
protected boolean canEditImmediately(EventObject event)
Returns true if event is null,
 or it is a MouseEvent with a click count > 2
 and inHitRegion returns true.

Parameters:
event - the event being studied


"
DefaultTreeCellEditor,createContainer(),protected Container,Creates the container to manage placement of editingComponent.,"

createContainer
protected Container createContainer()
Creates the container to manage placement of
 editingComponent.

"
DefaultTreeCellEditor,createTreeCellEditor(),protected TreeCellEditor,This is invoked if a TreeCellEditor is not supplied in the constructor.,"

createTreeCellEditor
protected TreeCellEditor createTreeCellEditor()
This is invoked if a TreeCellEditor
 is not supplied in the constructor.
 It returns a TextField editor.

Returns:
a new TextField editor


"
DefaultTreeCellEditor,"determineOffset(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",protected void,NULL,"

determineOffset
protected void determineOffset(JTree tree,
                               Object value,
                               boolean isSelected,
                               boolean expanded,
                               boolean leaf,
                               int row)

"
DefaultTreeCellEditor,getBorderSelectionColor(),Color,Returns the color the border is drawn.,"

getBorderSelectionColor
public Color getBorderSelectionColor()
Returns the color the border is drawn.

Returns:
the border selection color


"
DefaultTreeCellEditor,getCellEditorListeners(),CellEditorListener[],Returns an array of all the CellEditorListeners added to this DefaultTreeCellEditor with addCellEditorListener().,"

getCellEditorListeners
public CellEditorListener[] getCellEditorListeners()
Returns an array of all the CellEditorListeners added
 to this DefaultTreeCellEditor with addCellEditorListener().

Returns:
all of the CellEditorListeners added or an empty
         array if no listeners have been added
Since:
1.4


"
DefaultTreeCellEditor,getCellEditorValue(),Object,Returns the value currently being edited.,"

getCellEditorValue
public Object getCellEditorValue()
Returns the value currently being edited.

Specified by:
getCellEditorValue in interface CellEditor
Returns:
the value currently being edited


"
DefaultTreeCellEditor,getFont(),Font,Gets the font used for editing.,"

getFont
public Font getFont()
Gets the font used for editing.

Returns:
the editing Font
See Also:
setFont(java.awt.Font)


"
DefaultTreeCellEditor,"getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)",Component,Configures the editor.,"

getTreeCellEditorComponent
public Component getTreeCellEditorComponent(JTree tree,
                                            Object value,
                                            boolean isSelected,
                                            boolean expanded,
                                            boolean leaf,
                                            int row)
Configures the editor.  Passed onto the realEditor.

Specified by:
getTreeCellEditorComponent in interface TreeCellEditor
Parameters:
tree - the JTree that is asking the editor to edit;
                          this parameter can be null
value - the value of the cell to be edited
isSelected - true if the cell is to be rendered with
                          selection highlighting
expanded - true if the node is expanded
leaf - true if the node is a leaf node
row - the row index of the node being edited
Returns:
the component for editing


"
DefaultTreeCellEditor,"inHitRegion(int x, int y)",protected boolean,Returns true if the passed in location is a valid mouse location to start editing from.,"

inHitRegion
protected boolean inHitRegion(int x,
                              int y)
Returns true if the passed in location is a valid mouse location
 to start editing from. This is implemented to return false if
 x is <= the width of the icon and icon gap displayed
 by the renderer. In other words this returns true if the user
 clicks over the text part displayed by the renderer, and false
 otherwise.

Parameters:
x - the x-coordinate of the point
y - the y-coordinate of the point
Returns:
true if the passed in location is a valid mouse location


"
DefaultTreeCellEditor,isCellEditable(EventObject event),boolean,"If the realEditor returns true to this message, prepareForEditing is messaged and true is returned.","

isCellEditable
public boolean isCellEditable(EventObject event)
If the realEditor returns true to this
 message, prepareForEditing
 is messaged and true is returned.

Specified by:
isCellEditable in interface CellEditor
Parameters:
event - the event the editor should use to consider
                          whether to begin editing or not
Returns:
true if editing can be started
See Also:
CellEditor.shouldSelectCell(java.util.EventObject)


"
DefaultTreeCellEditor,prepareForEditing(),protected void,Invoked just before editing is to start.,"

prepareForEditing
protected void prepareForEditing()
Invoked just before editing is to start. Will add the
 editingComponent to the
 editingContainer.

"
DefaultTreeCellEditor,removeCellEditorListener(CellEditorListener l),void,Removes the previously added CellEditorListener.,"

removeCellEditorListener
public void removeCellEditorListener(CellEditorListener l)
Removes the previously added CellEditorListener.

Specified by:
removeCellEditorListener in interface CellEditor
Parameters:
l - the listener to be removed


"
DefaultTreeCellEditor,setBorderSelectionColor(Color newColor),void,Sets the color to use for the border.,"

setBorderSelectionColor
public void setBorderSelectionColor(Color newColor)
Sets the color to use for the border.

Parameters:
newColor - the new border color


"
DefaultTreeCellEditor,setFont(Font font),void,Sets the font to edit with.,"

setFont
public void setFont(Font font)
Sets the font to edit with. null indicates
 the renderers font should be used. This will NOT
 override any font you have set in the editor
 the receiver was instantiated with. If null
 for an editor was passed in a default editor will be
 created that will pick up this font.

Parameters:
font - the editing Font
See Also:
getFont()


"
DefaultTreeCellEditor,setTree(JTree newTree),protected void,Sets the tree currently editing for.,"

setTree
protected void setTree(JTree newTree)
Sets the tree currently editing for. This is needed to add
 a selection listener.

Parameters:
newTree - the new tree to be edited


"
DefaultTreeCellEditor,shouldSelectCell(EventObject event),boolean,Messages the realEditor for the return value.,"

shouldSelectCell
public boolean shouldSelectCell(EventObject event)
Messages the realEditor for the return value.

Specified by:
shouldSelectCell in interface CellEditor
Parameters:
event - the event the editor should use to start
                          editing
Returns:
true if the editor would like the editing cell to be selected;
    otherwise returns false
See Also:
CellEditor.isCellEditable(java.util.EventObject)


"
DefaultTreeCellEditor,shouldStartEditingTimer(EventObject event),protected boolean,Returns true if event is a MouseEvent and the click count is 1.,"

shouldStartEditingTimer
protected boolean shouldStartEditingTimer(EventObject event)
Returns true if event is a MouseEvent
 and the click count is 1.

Parameters:
event - the event being studied


"
DefaultTreeCellEditor,startEditingTimer(),protected void,Starts the editing timer.,"

startEditingTimer
protected void startEditingTimer()
Starts the editing timer.

"
DefaultTreeCellEditor,stopCellEditing(),boolean,"If the realEditor will allow editing to stop, the realEditor is removed and true is returned, otherwise false is returned.","

stopCellEditing
public boolean stopCellEditing()
If the realEditor will allow editing to stop,
 the realEditor is removed and true is returned,
 otherwise false is returned.

Specified by:
stopCellEditing in interface CellEditor
Returns:
true if editing was stopped; false otherwise


"
DefaultTreeCellEditor,valueChanged(TreeSelectionEvent e),void,Resets lastPath.,"

valueChanged
public void valueChanged(TreeSelectionEvent e)
Resets lastPath.

Specified by:
valueChanged in interface TreeSelectionListener
Parameters:
e - the event that characterizes the change.


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, boolean oldValue, boolean newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               boolean oldValue,
                               boolean newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, byte oldValue, byte newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               byte oldValue,
                               byte newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a byte)
newValue - the new value of the property (as a byte)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, char oldValue, char newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               char oldValue,
                               char newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a char)
newValue - the new value of the property (as a char)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, double oldValue, double newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               double oldValue,
                               double newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a double)
newValue - the new value of the property (as a double)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, float oldValue, float newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               float oldValue,
                               float newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a float)
newValue - the new value of the property (as a float)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, int oldValue, int newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               int oldValue,
                               int newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class JComponent
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, long oldValue, long newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               long oldValue,
                               long newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a long)
newValue - the new value of the property (as a long)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Overridden for performance reasons.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value


"
DefaultTreeCellRenderer,"firePropertyChange(String propertyName, short oldValue, short newValue)",void,Overridden for performance reasons.,"

firePropertyChange
public void firePropertyChange(String propertyName,
                               short oldValue,
                               short newValue)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
firePropertyChange in class Component
Parameters:
propertyName - the programmatic name of the property
          that was changed
oldValue - the old value of the property (as a short)
newValue - the old value of the property (as a short)
See Also:
Component.firePropertyChange(java.lang.String, java.lang.Object,
          java.lang.Object)


"
DefaultTreeCellRenderer,getBackgroundNonSelectionColor(),Color,Returns the background color to be used for non selected nodes.,"

getBackgroundNonSelectionColor
public Color getBackgroundNonSelectionColor()
Returns the background color to be used for non selected nodes.

"
DefaultTreeCellRenderer,getBackgroundSelectionColor(),Color,Returns the color to use for the background if node is selected.,"

getBackgroundSelectionColor
public Color getBackgroundSelectionColor()
Returns the color to use for the background if node is selected.

"
DefaultTreeCellRenderer,getBorderSelectionColor(),Color,Returns the color the border is drawn.,"

getBorderSelectionColor
public Color getBorderSelectionColor()
Returns the color the border is drawn.

"
DefaultTreeCellRenderer,getClosedIcon(),Icon,Returns the icon used to represent non-leaf nodes that are not expanded.,"

getClosedIcon
public Icon getClosedIcon()
Returns the icon used to represent non-leaf nodes that are not
 expanded.

"
DefaultTreeCellRenderer,getDefaultClosedIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded.","

getDefaultClosedIcon
public Icon getDefaultClosedIcon()
Returns the default icon, for the current laf, that is used to
 represent non-leaf nodes that are not expanded.

"
DefaultTreeCellRenderer,getDefaultLeafIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent leaf nodes.","

getDefaultLeafIcon
public Icon getDefaultLeafIcon()
Returns the default icon, for the current laf, that is used to
 represent leaf nodes.

"
DefaultTreeCellRenderer,getDefaultOpenIcon(),Icon,"Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded.","

getDefaultOpenIcon
public Icon getDefaultOpenIcon()
Returns the default icon, for the current laf, that is used to
 represent non-leaf nodes that are expanded.

"
DefaultTreeCellRenderer,getFont(),Font,Gets the font of this component.,"

getFont
public Font getFont()
Gets the font of this component.

Specified by:
getFont in interface MenuContainer
Overrides:
getFont in class Component
Returns:
this component's font; if a font has not been set
 for this component, the font of its parent is returned
See Also:
Component.setFont(java.awt.Font)


"
DefaultTreeCellRenderer,getLeafIcon(),Icon,Returns the icon used to represent leaf nodes.,"

getLeafIcon
public Icon getLeafIcon()
Returns the icon used to represent leaf nodes.

"
DefaultTreeCellRenderer,getOpenIcon(),Icon,Returns the icon used to represent non-leaf nodes that are expanded.,"

getOpenIcon
public Icon getOpenIcon()
Returns the icon used to represent non-leaf nodes that are expanded.

"
DefaultTreeCellRenderer,getPreferredSize(),Dimension,Overrides JComponent.getPreferredSize to return slightly wider preferred size value.,"

getPreferredSize
public Dimension getPreferredSize()
Overrides JComponent.getPreferredSize to
 return slightly wider preferred size value.

Overrides:
getPreferredSize in class JComponent
Returns:
the value of the preferredSize property
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
DefaultTreeCellRenderer,getTextNonSelectionColor(),Color,Returns the color the text is drawn with when the node isn't selected.,"

getTextNonSelectionColor
public Color getTextNonSelectionColor()
Returns the color the text is drawn with when the node isn't selected.

"
DefaultTreeCellRenderer,getTextSelectionColor(),Color,Returns the color the text is drawn with when the node is selected.,"

getTextSelectionColor
public Color getTextSelectionColor()
Returns the color the text is drawn with when the node is selected.

"
DefaultTreeCellRenderer,"getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)",Component,Configures the renderer based on the passed in components.,"

getTreeCellRendererComponent
public Component getTreeCellRendererComponent(JTree tree,
                                              Object value,
                                              boolean sel,
                                              boolean expanded,
                                              boolean leaf,
                                              int row,
                                              boolean hasFocus)
Configures the renderer based on the passed in components.
 The value is set from messaging the tree with
 convertValueToText, which ultimately invokes
 toString on value.
 The foreground color is set based on the selection and the icon
 is set based on the leaf and expanded
 parameters.

Specified by:
getTreeCellRendererComponent in interface TreeCellRenderer
Returns:
the Component that the renderer uses to draw the value


"
DefaultTreeCellRenderer,invalidate(),void,Overridden for performance reasons.,"

invalidate
public void invalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
invalidate in class Container
Since:
1.5
See Also:
Container.validate(), 
Container.layout(), 
LayoutManager2


"
DefaultTreeCellRenderer,paint(Graphics g),void,Paints the value.,"

paint
public void paint(Graphics g)
Paints the value.  The background is filled based on selected.

Overrides:
paint in class JComponent
Parameters:
g - the Graphics context in which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
DefaultTreeCellRenderer,repaint(),void,Overridden for performance reasons.,"

repaint
public void repaint()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class Component
Since:
1.5
See Also:
Component.update(Graphics)


"
DefaultTreeCellRenderer,"repaint(long tm, int x, int y, int width, int height)",void,Overridden for performance reasons.,"

repaint
public void repaint(long tm,
                    int x,
                    int y,
                    int width,
                    int height)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
tm - this parameter is not used
x - the x value of the dirty region
y - the y value of the dirty region
width - the width of the dirty region
height - the height of the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultTreeCellRenderer,repaint(Rectangle r),void,Overridden for performance reasons.,"

repaint
public void repaint(Rectangle r)
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
repaint in class JComponent
Parameters:
r - a Rectangle containing the dirty region
See Also:
JComponent.isPaintingOrigin(), 
Component.isShowing(), 
RepaintManager.addDirtyRegion(javax.swing.JComponent, int, int, int, int)


"
DefaultTreeCellRenderer,revalidate(),void,Overridden for performance reasons.,"

revalidate
public void revalidate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
revalidate in class JComponent
See Also:
Component.invalidate(), 
Container.validate(), 
JComponent.isValidateRoot(), 
RepaintManager.addInvalidComponent(javax.swing.JComponent)


"
DefaultTreeCellRenderer,setBackground(Color color),void,Subclassed to map ColorUIResources to null.,"

setBackground
public void setBackground(Color color)
Subclassed to map ColorUIResources to null. If
 color is null, or a ColorUIResource, this
 has the effect of letting the background color of the JTree show
 through. On the other hand, if color is non-null, and not
 a ColorUIResource, the background becomes
 color.

Overrides:
setBackground in class JComponent
Parameters:
color - the desired background Color
See Also:
Component.getBackground(), 
JComponent.setOpaque(boolean)


"
DefaultTreeCellRenderer,setBackgroundNonSelectionColor(Color newColor),void,Sets the background color to be used for non selected nodes.,"

setBackgroundNonSelectionColor
public void setBackgroundNonSelectionColor(Color newColor)
Sets the background color to be used for non selected nodes.

"
DefaultTreeCellRenderer,setBackgroundSelectionColor(Color newColor),void,Sets the color to use for the background if node is selected.,"

setBackgroundSelectionColor
public void setBackgroundSelectionColor(Color newColor)
Sets the color to use for the background if node is selected.

"
DefaultTreeCellRenderer,setBorderSelectionColor(Color newColor),void,Sets the color to use for the border.,"

setBorderSelectionColor
public void setBorderSelectionColor(Color newColor)
Sets the color to use for the border.

"
DefaultTreeCellRenderer,setClosedIcon(Icon newIcon),void,Sets the icon used to represent non-leaf nodes that are not expanded.,"

setClosedIcon
public void setClosedIcon(Icon newIcon)
Sets the icon used to represent non-leaf nodes that are not expanded.

"
DefaultTreeCellRenderer,setFont(Font font),void,Subclassed to map FontUIResources to null.,"

setFont
public void setFont(Font font)
Subclassed to map FontUIResources to null. If
 font is null, or a FontUIResource, this
 has the effect of letting the font of the JTree show
 through. On the other hand, if font is non-null, and not
 a FontUIResource, the font becomes font.

Overrides:
setFont in class JComponent
Parameters:
font - the desired Font for this component
See Also:
Component.getFont()


"
DefaultTreeCellRenderer,setLeafIcon(Icon newIcon),void,Sets the icon used to represent leaf nodes.,"

setLeafIcon
public void setLeafIcon(Icon newIcon)
Sets the icon used to represent leaf nodes.

"
DefaultTreeCellRenderer,setOpenIcon(Icon newIcon),void,Sets the icon used to represent non-leaf nodes that are expanded.,"

setOpenIcon
public void setOpenIcon(Icon newIcon)
Sets the icon used to represent non-leaf nodes that are expanded.

"
DefaultTreeCellRenderer,setTextNonSelectionColor(Color newColor),void,Sets the color the text is drawn with when the node isn't selected.,"

setTextNonSelectionColor
public void setTextNonSelectionColor(Color newColor)
Sets the color the text is drawn with when the node isn't selected.

"
DefaultTreeCellRenderer,setTextSelectionColor(Color newColor),void,Sets the color the text is drawn with when the node is selected.,"

setTextSelectionColor
public void setTextSelectionColor(Color newColor)
Sets the color the text is drawn with when the node is selected.

"
DefaultTreeCellRenderer,updateUI(),void,Resets the UI property to a value from the current look and feel.,"

updateUI
public void updateUI()
Resets the UI property to a value from the current look and feel.

Overrides:
updateUI in class JLabel
Since:
1.7
See Also:
JComponent.updateUI()


"
DefaultTreeCellRenderer,validate(),void,Overridden for performance reasons.,"

validate
public void validate()
Overridden for performance reasons.
 See the Implementation Note
 for more information.

Overrides:
validate in class Container
See Also:
Container.add(java.awt.Component), 
Container.invalidate(), 
Container.isValidateRoot(), 
JComponent.revalidate(), 
Container.validateTree()


"
DefaultTreeModel,addTreeModelListener(TreeModelListener l),void,Adds a listener for the TreeModelEvent posted after the tree changes.,"

addTreeModelListener
public void addTreeModelListener(TreeModelListener l)
Adds a listener for the TreeModelEvent posted after the tree changes.

Specified by:
addTreeModelListener in interface TreeModel
Parameters:
l - the listener to add
See Also:
removeTreeModelListener(javax.swing.event.TreeModelListener)


"
DefaultTreeModel,asksAllowsChildren(),boolean,Tells how leaf nodes are determined.,"

asksAllowsChildren
public boolean asksAllowsChildren()
Tells how leaf nodes are determined.

Returns:
true if only nodes which do not allow children are
         leaf nodes, false if nodes which have no children
         (even if allowed) are leaf nodes
See Also:
asksAllowsChildren


"
DefaultTreeModel,"fireTreeNodesChanged(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeNodesChanged
protected void fireTreeNodesChanged(Object source,
                                    Object[] path,
                                    int[] childIndices,
                                    Object[] children)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
source - the source of the TreeModelEvent;
               typically this
path - the path to the parent of the nodes that changed; use
             null to identify the root has changed
childIndices - the indices of the changed elements
children - the changed elements


"
DefaultTreeModel,"fireTreeNodesInserted(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeNodesInserted
protected void fireTreeNodesInserted(Object source,
                                     Object[] path,
                                     int[] childIndices,
                                     Object[] children)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
source - the source of the TreeModelEvent;
               typically this
path - the path to the parent the nodes were added to
childIndices - the indices of the new elements
children - the new elements


"
DefaultTreeModel,"fireTreeNodesRemoved(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeNodesRemoved
protected void fireTreeNodesRemoved(Object source,
                                    Object[] path,
                                    int[] childIndices,
                                    Object[] children)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
source - the source of the TreeModelEvent;
               typically this
path - the path to the parent the nodes were removed from
childIndices - the indices of the removed elements
children - the removed elements


"
DefaultTreeModel,"fireTreeStructureChanged(Object source, Object[] path, int[] childIndices, Object[] children)",protected void,Notifies all listeners that have registered interest for notification on this event type.,"

fireTreeStructureChanged
protected void fireTreeStructureChanged(Object source,
                                        Object[] path,
                                        int[] childIndices,
                                        Object[] children)
Notifies all listeners that have registered interest for
 notification on this event type.  The event instance
 is lazily created using the parameters passed into
 the fire method.

Parameters:
source - the source of the TreeModelEvent;
               typically this
path - the path to the parent of the structure that has changed;
             use null to identify the root has changed
childIndices - the indices of the affected elements
children - the affected elements


"
DefaultTreeModel,"getChild(Object parent, int index)",Object,Returns the child of parent at index index in the parent's child array.,"

getChild
public Object getChild(Object parent,
                       int index)
Returns the child of parent at index index in the parent's
 child array.  parent must be a node previously obtained from
 this data source. This should not return null if index
 is a valid index for parent (that is index >= 0 &&
 index < getChildCount(parent)).

Specified by:
getChild in interface TreeModel
Parameters:
parent - a node in the tree, obtained from this data source
Returns:
the child of parent at index index


"
DefaultTreeModel,getChildCount(Object parent),int,Returns the number of children of parent.,"

getChildCount
public int getChildCount(Object parent)
Returns the number of children of parent.  Returns 0 if the node
 is a leaf or if it has no children.  parent must be a node
 previously obtained from this data source.

Specified by:
getChildCount in interface TreeModel
Parameters:
parent - a node in the tree, obtained from this data source
Returns:
the number of children of the node parent


"
DefaultTreeModel,"getIndexOfChild(Object parent, Object child)",int,Returns the index of child in parent.,"

getIndexOfChild
public int getIndexOfChild(Object parent,
                           Object child)
Returns the index of child in parent.
 If either the parent or child is null, returns -1.

Specified by:
getIndexOfChild in interface TreeModel
Parameters:
parent - a note in the tree, obtained from this data source
child - the node we are interested in
Returns:
the index of the child in the parent, or -1
    if either the parent or the child is null


"
DefaultTreeModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this model.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 DefaultTreeModel m
 for its tree model listeners with the following code:

 TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getTreeModelListeners()


"
DefaultTreeModel,getPathToRoot(TreeNode aNode),TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array.","

getPathToRoot
public TreeNode[] getPathToRoot(TreeNode aNode)
Builds the parents of node up to and including the root node,
 where the original node is the last element in the returned array.
 The length of the returned array gives the node's depth in the
 tree.

Parameters:
aNode - the TreeNode to get the path for


"
DefaultTreeModel,"getPathToRoot(TreeNode aNode, int depth)",protected TreeNode[],"Builds the parents of node up to and including the root node, where the original node is the last element in the returned array.","

getPathToRoot
protected TreeNode[] getPathToRoot(TreeNode aNode,
                                   int depth)
Builds the parents of node up to and including the root node,
 where the original node is the last element in the returned array.
 The length of the returned array gives the node's depth in the
 tree.

Parameters:
aNode - the TreeNode to get the path for
depth - an int giving the number of steps already taken towards
        the root (on recursive calls), used to size the returned array
Returns:
an array of TreeNodes giving the path from the root to the
         specified node


"
DefaultTreeModel,getRoot(),Object,Returns the root of the tree.,"

getRoot
public Object getRoot()
Returns the root of the tree.  Returns null only if the tree has
 no nodes.

Specified by:
getRoot in interface TreeModel
Returns:
the root of the tree


"
DefaultTreeModel,getTreeModelListeners(),TreeModelListener[],Returns an array of all the tree model listeners registered on this model.,"

getTreeModelListeners
public TreeModelListener[] getTreeModelListeners()
Returns an array of all the tree model listeners
 registered on this model.

Returns:
all of this model's TreeModelListeners
         or an empty
         array if no tree model listeners are currently registered
Since:
1.4
See Also:
addTreeModelListener(javax.swing.event.TreeModelListener), 
removeTreeModelListener(javax.swing.event.TreeModelListener)


"
DefaultTreeModel,"insertNodeInto(MutableTreeNode newChild, MutableTreeNode parent, int index)",void,Invoked this to insert newChild at location index in parents children.,"

insertNodeInto
public void insertNodeInto(MutableTreeNode newChild,
                           MutableTreeNode parent,
                           int index)
Invoked this to insert newChild at location index in parents children.
 This will then message nodesWereInserted to create the appropriate
 event. This is the preferred way to add children as it will create
 the appropriate event.

"
DefaultTreeModel,isLeaf(Object node),boolean,Returns whether the specified node is a leaf node.,"

isLeaf
public boolean isLeaf(Object node)
Returns whether the specified node is a leaf node.
 The way the test is performed depends on the
 askAllowsChildren setting.

Specified by:
isLeaf in interface TreeModel
Parameters:
node - the node to check
Returns:
true if the node is a leaf node
See Also:
asksAllowsChildren, 
TreeModel.isLeaf(java.lang.Object)


"
DefaultTreeModel,nodeChanged(TreeNode node),void,Invoke this method after you've changed how node is to be represented in the tree.,"

nodeChanged
public void nodeChanged(TreeNode node)
Invoke this method after you've changed how node is to be
 represented in the tree.

"
DefaultTreeModel,"nodesChanged(TreeNode node, int[] childIndices)",void,Invoke this method after you've changed how the children identified by childIndicies are to be represented in the tree.,"

nodesChanged
public void nodesChanged(TreeNode node,
                         int[] childIndices)
Invoke this method after you've changed how the children identified by
 childIndicies are to be represented in the tree.

"
DefaultTreeModel,nodeStructureChanged(TreeNode node),void,Invoke this method if you've totally changed the children of node and its children's children...,"

nodeStructureChanged
public void nodeStructureChanged(TreeNode node)
Invoke this method if you've totally changed the children of
 node and its children's children...  This will post a
 treeStructureChanged event.

"
DefaultTreeModel,"nodesWereInserted(TreeNode node, int[] childIndices)",void,Invoke this method after you've inserted some TreeNodes into node.,"

nodesWereInserted
public void nodesWereInserted(TreeNode node,
                              int[] childIndices)
Invoke this method after you've inserted some TreeNodes into
 node.  childIndices should be the index of the new elements and
 must be sorted in ascending order.

"
DefaultTreeModel,"nodesWereRemoved(TreeNode node, int[] childIndices, Object[] removedChildren)",void,Invoke this method after you've removed some TreeNodes from node.,"

nodesWereRemoved
public void nodesWereRemoved(TreeNode node,
                             int[] childIndices,
                             Object[] removedChildren)
Invoke this method after you've removed some TreeNodes from
 node.  childIndices should be the index of the removed elements and
 must be sorted in ascending order. And removedChildren should be
 the array of the children objects that were removed.

"
DefaultTreeModel,reload(),void,Invoke this method if you've modified the TreeNodes upon which this model depends.,"

reload
public void reload()
Invoke this method if you've modified the TreeNodes upon which
 this model depends. The model will notify all of its listeners that the
 model has changed.

"
DefaultTreeModel,reload(TreeNode node),void,Invoke this method if you've modified the TreeNodes upon which this model depends.,"

reload
public void reload(TreeNode node)
Invoke this method if you've modified the TreeNodes upon which
 this model depends. The model will notify all of its listeners that the
 model has changed below the given node.

Parameters:
node - the node below which the model has changed


"
DefaultTreeModel,removeNodeFromParent(MutableTreeNode node),void,Message this to remove node from its parent.,"

removeNodeFromParent
public void removeNodeFromParent(MutableTreeNode node)
Message this to remove node from its parent. This will message
 nodesWereRemoved to create the appropriate event. This is the
 preferred way to remove a node as it handles the event creation
 for you.

"
DefaultTreeModel,removeTreeModelListener(TreeModelListener l),void,Removes a listener previously added with addTreeModelListener().,"

removeTreeModelListener
public void removeTreeModelListener(TreeModelListener l)
Removes a listener previously added with addTreeModelListener().

Specified by:
removeTreeModelListener in interface TreeModel
Parameters:
l - the listener to remove
See Also:
addTreeModelListener(javax.swing.event.TreeModelListener)


"
DefaultTreeModel,setAsksAllowsChildren(boolean newValue),void,Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes.,"

setAsksAllowsChildren
public void setAsksAllowsChildren(boolean newValue)
Sets whether or not to test leafness by asking getAllowsChildren()
 or isLeaf() to the TreeNodes.  If newvalue is true, getAllowsChildren()
 is messaged, otherwise isLeaf() is messaged.

"
DefaultTreeModel,setRoot(TreeNode root),void,Sets the root to root.,"

setRoot
public void setRoot(TreeNode root)
Sets the root to root. A null root implies
 the tree is to display nothing, and is legal.

"
DefaultTreeModel,"valueForPathChanged(TreePath path, Object newValue)",void,This sets the user object of the TreeNode identified by path and posts a node changed.,"

valueForPathChanged
public void valueForPathChanged(TreePath path,
                                Object newValue)
This sets the user object of the TreeNode identified by path
 and posts a node changed.  If you use custom user objects in
 the TreeModel you're going to need to subclass this and
 set the user object of the changed node to something meaningful.

Specified by:
valueForPathChanged in interface TreeModel
Parameters:
path - path to the node that the user has altered
newValue - the new value from the TreeCellEditor


"
DefaultTreeSelectionModel,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list.
 The listener is registered for all properties.
 
 A PropertyChangeEvent will get fired when the selection mode
 changes.

Specified by:
addPropertyChangeListener in interface TreeSelectionModel
Parameters:
listener - the PropertyChangeListener to be added


"
DefaultTreeSelectionModel,addSelectionPath(TreePath path),void,Adds path to the current selection.,"

addSelectionPath
public void addSelectionPath(TreePath path)
Adds path to the current selection. If path is not currently
 in the selection the TreeSelectionListeners are notified. This has
 no effect if path is null.

Specified by:
addSelectionPath in interface TreeSelectionModel
Parameters:
path - the new path to add to the current selection


"
DefaultTreeSelectionModel,addSelectionPaths(TreePath[] paths),void,Adds paths to the current selection.,"

addSelectionPaths
public void addSelectionPaths(TreePath[] paths)
Adds paths to the current selection. If any of the paths in
 paths are not currently in the selection the TreeSelectionListeners
 are notified. This has
 no effect if paths is null.
 The lead path is set to the last element in paths.
 If the selection mode is CONTIGUOUS_TREE_SELECTION,
 and adding the new paths would make the selection discontiguous.
 Then two things can result: if the TreePaths in paths
 are contiguous, then the selection becomes these TreePaths,
 otherwise the TreePaths aren't contiguous and the selection becomes
 the first TreePath in paths.

Specified by:
addSelectionPaths in interface TreeSelectionModel
Parameters:
paths - the new path to add to the current selection


"
DefaultTreeSelectionModel,addTreeSelectionListener(TreeSelectionListener x),void,Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.,"

addTreeSelectionListener
public void addTreeSelectionListener(TreeSelectionListener x)
Adds x to the list of listeners that are notified each time the
 set of selected TreePaths changes.

Specified by:
addTreeSelectionListener in interface TreeSelectionModel
Parameters:
x - the new listener to be added


"
DefaultTreeSelectionModel,arePathsContiguous(TreePath[] paths),protected boolean,"Returns true if the paths are contiguous, or this object has no RowMapper.","

arePathsContiguous
protected boolean arePathsContiguous(TreePath[] paths)
Returns true if the paths are contiguous,
 or this object has no RowMapper.

"
DefaultTreeSelectionModel,canPathsBeAdded(TreePath[] paths),protected boolean,Used to test if a particular set of TreePaths can be added.,"

canPathsBeAdded
protected boolean canPathsBeAdded(TreePath[] paths)
Used to test if a particular set of TreePaths can
 be added. This will return true if paths is null (or
 empty), or this object has no RowMapper, or nothing is currently selected,
 or the selection mode is DISCONTIGUOUS_TREE_SELECTION, or
 adding the paths to the current selection still results in a
 contiguous set of TreePaths.

"
DefaultTreeSelectionModel,canPathsBeRemoved(TreePath[] paths),protected boolean,Returns true if the paths can be removed without breaking the continuity of the model.,"

canPathsBeRemoved
protected boolean canPathsBeRemoved(TreePath[] paths)
Returns true if the paths can be removed without breaking the
 continuity of the model.
 This is rather expensive.

"
DefaultTreeSelectionModel,clearSelection(),void,Empties the current selection.,"

clearSelection
public void clearSelection()
Empties the current selection.  If this represents a change in the
 current selection, the selection listeners are notified.

Specified by:
clearSelection in interface TreeSelectionModel


"
DefaultTreeSelectionModel,clone(),Object,Returns a clone of this object with the same selection.,"

clone
public Object clone()
             throws CloneNotSupportedException
Returns a clone of this object with the same selection.
 This method does not duplicate
 selection listeners and property listeners.

Overrides:
clone in class Object
Returns:
a clone of this instance.
Throws:
CloneNotSupportedException - never thrown by instances of
                                       this class
See Also:
Cloneable


"
DefaultTreeSelectionModel,fireValueChanged(TreeSelectionEvent e),protected void,Notifies all listeners that are registered for tree selection events on this object.,"

fireValueChanged
protected void fireValueChanged(TreeSelectionEvent e)
Notifies all listeners that are registered for
 tree selection events on this object.

See Also:
addTreeSelectionListener(javax.swing.event.TreeSelectionListener), 
EventListenerList


"
DefaultTreeSelectionModel,getLeadSelectionPath(),TreePath,Returns the last path that was added.,"

getLeadSelectionPath
public TreePath getLeadSelectionPath()
Returns the last path that was added. This may differ from the
 leadSelectionPath property maintained by the JTree.

Specified by:
getLeadSelectionPath in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getLeadSelectionRow(),int,Returns the lead selection index.,"

getLeadSelectionRow
public int getLeadSelectionRow()
Returns the lead selection index. That is the last index that was
 added.

Specified by:
getLeadSelectionRow in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getListeners(Class<T> listenerType),<T extends EventListener> T[],Returns an array of all the objects currently registered as FooListeners upon this model.,"

getListeners
public <T extends EventListener> T[] getListeners(Class<T> listenerType)
Returns an array of all the objects currently registered
 as FooListeners
 upon this model.
 FooListeners are registered using the
 addFooListener method.

 

 You can specify the listenerType argument
 with a class literal,
 such as
 FooListener.class.
 For example, you can query a
 DefaultTreeSelectionModel m
 for its tree selection listeners with the following code:

 TreeSelectionListener[] tsls = (TreeSelectionListener[])(m.getListeners(TreeSelectionListener.class));

 If no such listeners exist, this method returns an empty array.

Parameters:
listenerType - the type of listeners requested; this parameter
          should specify an interface that descends from
          java.util.EventListener
Returns:
an array of all objects registered as
          FooListeners on this component,
          or an empty array if no such
          listeners have been added
Throws:
ClassCastException - if listenerType
          doesn't specify a class or interface that implements
          java.util.EventListener
Since:
1.3
See Also:
getTreeSelectionListeners(), 
getPropertyChangeListeners()


"
DefaultTreeSelectionModel,getMaxSelectionRow(),int,Returns the largest value obtained from the RowMapper for the current set of selected TreePaths.,"

getMaxSelectionRow
public int getMaxSelectionRow()
Returns the largest value obtained from the RowMapper for the
 current set of selected TreePaths. If nothing is selected,
 or there is no RowMapper, this will return -1.

Specified by:
getMaxSelectionRow in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getMinSelectionRow(),int,Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths.,"

getMinSelectionRow
public int getMinSelectionRow()
Returns the smallest value obtained from the RowMapper for the
 current set of selected TreePaths. If nothing is selected,
 or there is no RowMapper, this will return -1.

Specified by:
getMinSelectionRow in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the property change listeners registered on this DefaultTreeSelectionModel.,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the property change listeners
 registered on this DefaultTreeSelectionModel.

Returns:
all of this model's PropertyChangeListeners
         or an empty
         array if no property change listeners are currently registered
Since:
1.4
See Also:
addPropertyChangeListener(java.beans.PropertyChangeListener), 
removePropertyChangeListener(java.beans.PropertyChangeListener)


"
DefaultTreeSelectionModel,getRowMapper(),RowMapper,Returns the RowMapper instance that is able to map a TreePath to a row.,"

getRowMapper
public RowMapper getRowMapper()
Returns the RowMapper instance that is able to map a TreePath to a
 row.

Specified by:
getRowMapper in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getSelectionCount(),int,Returns the number of paths that are selected.,"

getSelectionCount
public int getSelectionCount()
Returns the number of paths that are selected.

Specified by:
getSelectionCount in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getSelectionMode(),int,"Returns the selection mode, one of SINGLE_TREE_SELECTION, DISCONTIGUOUS_TREE_SELECTION or CONTIGUOUS_TREE_SELECTION.","

getSelectionMode
public int getSelectionMode()
Returns the selection mode, one of SINGLE_TREE_SELECTION,
 DISCONTIGUOUS_TREE_SELECTION or
 CONTIGUOUS_TREE_SELECTION.

Specified by:
getSelectionMode in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getSelectionPath(),TreePath,Returns the first path in the selection.,"

getSelectionPath
public TreePath getSelectionPath()
Returns the first path in the selection. This is useful if there
 if only one item currently selected.

Specified by:
getSelectionPath in interface TreeSelectionModel


"
DefaultTreeSelectionModel,getSelectionPaths(),TreePath[],Returns the selection.,"

getSelectionPaths
public TreePath[] getSelectionPaths()
Returns the selection.

Specified by:
getSelectionPaths in interface TreeSelectionModel
Returns:
the selection


"
DefaultTreeSelectionModel,getSelectionRows(),int[],Returns the selection in terms of rows.,"

getSelectionRows
public int[] getSelectionRows()
Returns the selection in terms of rows. There is not
 necessarily a one-to-one mapping between the TreePaths
 returned from getSelectionPaths and this method. In
 particular, if a TreePath is not viewable (the RowMapper returns -1 for the row corresponding to the
 TreePath), then the corresponding row is not included
 in the returned array. For example, if the selection consists
 of two paths, A and B, with A at row
 10, and B not currently viewable, then this method
 returns an array with the single entry 10.

Specified by:
getSelectionRows in interface TreeSelectionModel
Returns:
the selection in terms of rows


"
DefaultTreeSelectionModel,getTreeSelectionListeners(),TreeSelectionListener[],Returns an array of all the tree selection listeners registered on this model.,"

getTreeSelectionListeners
public TreeSelectionListener[] getTreeSelectionListeners()
Returns an array of all the tree selection listeners
 registered on this model.

Returns:
all of this model's TreeSelectionListeners
         or an empty
         array if no tree selection listeners are currently registered
Since:
1.4
See Also:
addTreeSelectionListener(javax.swing.event.TreeSelectionListener), 
removeTreeSelectionListener(javax.swing.event.TreeSelectionListener)


"
DefaultTreeSelectionModel,insureRowContinuity(),protected void,Makes sure the currently selected TreePaths are valid for the current selection mode.,"

insureRowContinuity
protected void insureRowContinuity()
Makes sure the currently selected TreePaths are valid
 for the current selection mode.
 If the selection mode is CONTIGUOUS_TREE_SELECTION
 and a RowMapper exists, this will make sure all
 the rows are contiguous, that is, when sorted all the rows are
 in order with no gaps.
 If the selection isn't contiguous, the selection is
 reset to contain the first set, when sorted, of contiguous rows.
 
 If the selection mode is SINGLE_TREE_SELECTION and
 more than one TreePath is selected, the selection is reset to
 contain the first path currently selected.

"
DefaultTreeSelectionModel,insureUniqueness(),protected void,This method is obsolete and its implementation is now a noop.,"

insureUniqueness
protected void insureUniqueness()
This method is obsolete and its implementation is now a noop.  It's
 still called by setSelectionPaths and addSelectionPaths, but only
 for backwards compatibility.

"
DefaultTreeSelectionModel,isPathSelected(TreePath path),boolean,"Returns true if the path, path, is in the current selection.","

isPathSelected
public boolean isPathSelected(TreePath path)
Returns true if the path, path,
 is in the current selection.

Specified by:
isPathSelected in interface TreeSelectionModel


"
DefaultTreeSelectionModel,isRowSelected(int row),boolean,Returns true if the row identified by row is selected.,"

isRowSelected
public boolean isRowSelected(int row)
Returns true if the row identified by row is selected.

Specified by:
isRowSelected in interface TreeSelectionModel


"
DefaultTreeSelectionModel,isSelectionEmpty(),boolean,Returns true if the selection is currently empty.,"

isSelectionEmpty
public boolean isSelectionEmpty()
Returns true if the selection is currently empty.

Specified by:
isSelectionEmpty in interface TreeSelectionModel


"
DefaultTreeSelectionModel,"notifyPathChange(Vector<?> changedPaths, TreePath oldLeadSelection)",protected void,Deprecated. As of JDK version 1.7,"

notifyPathChange
@Deprecated
protected void notifyPathChange(Vector<?> changedPaths,
                                            TreePath oldLeadSelection)
Deprecated. As of JDK version 1.7
Notifies listeners of a change in path. changePaths should contain
 instances of PathPlaceHolder.

"
DefaultTreeSelectionModel,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 This removes a PropertyChangeListener that was registered
 for all properties.

Specified by:
removePropertyChangeListener in interface TreeSelectionModel
Parameters:
listener - the PropertyChangeListener to be removed


"
DefaultTreeSelectionModel,removeSelectionPath(TreePath path),void,Removes path from the selection.,"

removeSelectionPath
public void removeSelectionPath(TreePath path)
Removes path from the selection. If path is in the selection
 The TreeSelectionListeners are notified. This has no effect if
 path is null.

Specified by:
removeSelectionPath in interface TreeSelectionModel
Parameters:
path - the path to remove from the selection


"
DefaultTreeSelectionModel,removeSelectionPaths(TreePath[] paths),void,Removes paths from the selection.,"

removeSelectionPaths
public void removeSelectionPaths(TreePath[] paths)
Removes paths from the selection.  If any of the paths in paths
 are in the selection the TreeSelectionListeners are notified.
 This has no effect if paths is null.

Specified by:
removeSelectionPaths in interface TreeSelectionModel
Parameters:
paths - the paths to remove from the selection


"
DefaultTreeSelectionModel,removeTreeSelectionListener(TreeSelectionListener x),void,Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.,"

removeTreeSelectionListener
public void removeTreeSelectionListener(TreeSelectionListener x)
Removes x from the list of listeners that are notified each time
 the set of selected TreePaths changes.

Specified by:
removeTreeSelectionListener in interface TreeSelectionModel
Parameters:
x - the listener to remove


"
DefaultTreeSelectionModel,resetRowSelection(),void,Updates this object's mapping from TreePath to rows.,"

resetRowSelection
public void resetRowSelection()
Updates this object's mapping from TreePath to rows. This should
 be invoked when the mapping from TreePaths to integers has changed
 (for example, a node has been expanded).
 You do not normally have to call this, JTree and its associated
 Listeners will invoke this for you. If you are implementing your own
 View class, then you will have to invoke this.
 This will invoke insureRowContinuity to make sure
 the currently selected TreePaths are still valid based on the
 selection mode.

Specified by:
resetRowSelection in interface TreeSelectionModel


"
DefaultTreeSelectionModel,setRowMapper(RowMapper newMapper),void,Sets the RowMapper instance.,"

setRowMapper
public void setRowMapper(RowMapper newMapper)
Sets the RowMapper instance. This instance is used to determine
 the row for a particular TreePath.

Specified by:
setRowMapper in interface TreeSelectionModel


"
DefaultTreeSelectionModel,setSelectionMode(int mode),void,"Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.","

setSelectionMode
public void setSelectionMode(int mode)
Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
 CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode
 is not one of the defined value,
 DISCONTIGUOUS_TREE_SELECTION is assumed.
 This may change the selection if the current selection is not valid
 for the new mode. For example, if three TreePaths are
 selected when the mode is changed to SINGLE_TREE_SELECTION,
 only one TreePath will remain selected. It is up to the particular
 implementation to decide what TreePath remains selected.
 
 Setting the mode to something other than the defined types will
 result in the mode becoming DISCONTIGUOUS_TREE_SELECTION.

Specified by:
setSelectionMode in interface TreeSelectionModel


"
DefaultTreeSelectionModel,setSelectionPath(TreePath path),void,Sets the selection to path.,"

setSelectionPath
public void setSelectionPath(TreePath path)
Sets the selection to path. If this represents a change, then
 the TreeSelectionListeners are notified. If path is
 null, this has the same effect as invoking clearSelection.

Specified by:
setSelectionPath in interface TreeSelectionModel
Parameters:
path - new path to select


"
DefaultTreeSelectionModel,setSelectionPaths(TreePath[] pPaths),void,Sets the selection.,"

setSelectionPaths
public void setSelectionPaths(TreePath[] pPaths)
Sets the selection. Whether the supplied paths are taken as the
 new selection depends upon the selection mode. If the supplied
 array is null, or empty, the selection is cleared. If
 the selection mode is SINGLE_TREE_SELECTION, only the
 first path in pPaths is used. If the selection
 mode is CONTIGUOUS_TREE_SELECTION and the supplied paths
 are not contiguous, then only the first path in pPaths is
 used. If the selection mode is
 DISCONTIGUOUS_TREE_SELECTION, then all paths are used.
 
 All null paths in pPaths are ignored.
 
 If this represents a change, all registered TreeSelectionListeners are notified.
 
 The lead path is set to the last unique path.
 
 The paths returned from getSelectionPaths are in the same
 order as those supplied to this method.

Specified by:
setSelectionPaths in interface TreeSelectionModel
Parameters:
pPaths - the new selection


"
DefaultTreeSelectionModel,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
DefaultTreeSelectionModel,updateLeadIndex(),protected void,Updates the leadIndex instance variable.,"

updateLeadIndex
protected void updateLeadIndex()
Updates the leadIndex instance variable.

"
FixedHeightLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",Rectangle,Returns a rectangle giving the bounds needed to draw path.,"

getBounds
public Rectangle getBounds(TreePath path,
                           Rectangle placeIn)
Returns a rectangle giving the bounds needed to draw path.

Specified by:
getBounds in class AbstractLayoutCache
Parameters:
path - a TreePath specifying a node
placeIn - a Rectangle object giving the available space
Returns:
a Rectangle object specifying the space to be used


"
FixedHeightLayoutCache,getExpandedState(TreePath path),boolean,"Returns true if the path is expanded, and visible.","

getExpandedState
public boolean getExpandedState(TreePath path)
Returns true if the path is expanded, and visible.

Specified by:
getExpandedState in class AbstractLayoutCache
Parameters:
path - the path being queried
Returns:
true if the path is expanded and visible, false otherwise


"
FixedHeightLayoutCache,"getPathClosestTo(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y.","

getPathClosestTo
public TreePath getPathClosestTo(int x,
                                 int y)
Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

Specified by:
getPathClosestTo in class AbstractLayoutCache
Parameters:
x - the horizontal component of the desired location
y - the vertical component of the desired location
Returns:
the TreePath closest to the specified point


"
FixedHeightLayoutCache,getPathForRow(int row),TreePath,Returns the path for passed in row.,"

getPathForRow
public TreePath getPathForRow(int row)
Returns the path for passed in row.  If row is not visible
 null is returned.

Specified by:
getPathForRow in class AbstractLayoutCache
Parameters:
row - the row being queried
Returns:
the TreePath for the given row


"
FixedHeightLayoutCache,getRowCount(),int,Returns the number of visible rows.,"

getRowCount
public int getRowCount()
Returns the number of visible rows.

Specified by:
getRowCount in class AbstractLayoutCache
Returns:
the number of rows being displayed


"
FixedHeightLayoutCache,getRowForPath(TreePath path),int,Returns the row that the last item identified in path is visible at.,"

getRowForPath
public int getRowForPath(TreePath path)
Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

Specified by:
getRowForPath in class AbstractLayoutCache
Parameters:
path - the TreePath being queried
Returns:
the row where the last item in path is visible or -1
         if any elements in path aren't currently visible


"
FixedHeightLayoutCache,getVisibleChildCount(TreePath path),int,Returns the number of visible children for row.,"

getVisibleChildCount
public int getVisibleChildCount(TreePath path)
Returns the number of visible children for row.

Specified by:
getVisibleChildCount in class AbstractLayoutCache
Parameters:
path - the path being queried
Returns:
the number of visible children for the specified path


"
FixedHeightLayoutCache,getVisiblePathsFrom(TreePath path),Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.,"

getVisiblePathsFrom
public Enumeration<TreePath> getVisiblePathsFrom(TreePath path)
Returns an Enumerator that increments over the visible paths
 starting at the passed in location. The ordering of the enumeration
 is based on how the paths are displayed.

Specified by:
getVisiblePathsFrom in class AbstractLayoutCache
Parameters:
path - the starting location for the enumeration
Returns:
the Enumerator starting at the desired location


"
FixedHeightLayoutCache,invalidatePathBounds(TreePath path),void,"Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change.","

invalidatePathBounds
public void invalidatePathBounds(TreePath path)
Does nothing, FixedHeightLayoutCache doesn't cache width, and that
 is all that could change.

Specified by:
invalidatePathBounds in class AbstractLayoutCache
Parameters:
path - the path being updated


"
FixedHeightLayoutCache,invalidateSizes(),void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.,"

invalidateSizes
public void invalidateSizes()
Informs the TreeState that it needs to recalculate all the sizes
 it is referencing.

Specified by:
invalidateSizes in class AbstractLayoutCache


"
FixedHeightLayoutCache,isExpanded(TreePath path),boolean,Returns true if the value identified by row is currently expanded.,"

isExpanded
public boolean isExpanded(TreePath path)
Returns true if the value identified by row is currently expanded.

Specified by:
isExpanded in class AbstractLayoutCache


"
FixedHeightLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",void,Marks the path path expanded state to isExpanded.,"

setExpandedState
public void setExpandedState(TreePath path,
                             boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Specified by:
setExpandedState in class AbstractLayoutCache
Parameters:
path - the path being expanded or collapsed
isExpanded - true if the path should be expanded, false otherwise


"
FixedHeightLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.,"

setModel
public void setModel(TreeModel newModel)
Sets the TreeModel that will provide the data.

Overrides:
setModel in class AbstractLayoutCache
Parameters:
newModel - the TreeModel that is to provide the data


"
FixedHeightLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.

Overrides:
setRootVisible in class AbstractLayoutCache
Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
AbstractLayoutCache.rootVisible


"
FixedHeightLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.,"

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell. If rowHeight is less than or equal to
 0 this will throw an IllegalArgumentException.

Overrides:
setRowHeight in class AbstractLayoutCache
Parameters:
rowHeight - the height of each cell, in pixels


"
FixedHeightLayoutCache,treeNodesChanged(TreeModelEvent e),void,Invoked after a node (or a set of siblings) has changed in some way.,"

treeNodesChanged
public void treeNodesChanged(TreeModelEvent e)
Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.
e.path() returns the path the parent of the changed node(s).
e.childIndices() returns the index(es) of the changed node(s).

Specified by:
treeNodesChanged in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent


"
FixedHeightLayoutCache,treeNodesInserted(TreeModelEvent e),void,Invoked after nodes have been inserted into the tree.,"

treeNodesInserted
public void treeNodesInserted(TreeModelEvent e)
Invoked after nodes have been inserted into the tree.
e.path() returns the parent of the new nodes
 e.childIndices() returns the indices of the new nodes in
 ascending order.

Specified by:
treeNodesInserted in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent


"
FixedHeightLayoutCache,treeNodesRemoved(TreeModelEvent e),void,Invoked after nodes have been removed from the tree.,"

treeNodesRemoved
public void treeNodesRemoved(TreeModelEvent e)
Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.
e.path() returns the former parent of the deleted nodes.
e.childIndices() returns the indices the nodes had before they were deleted in ascending order.

Specified by:
treeNodesRemoved in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent


"
FixedHeightLayoutCache,treeStructureChanged(TreeModelEvent e),void,Invoked after the tree has drastically changed structure from a given node down.,"

treeStructureChanged
public void treeStructureChanged(TreeModelEvent e)
Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by e.getPath() is of length
 one and the first element does not identify the current root node
 the first element should become the new root of the tree.

 e.path() holds the path to the node.
e.childIndices() returns null.

Specified by:
treeStructureChanged in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent


"
TreePath,equals(Object o),boolean,Compares this TreePath to the specified object.,"

equals
public boolean equals(Object o)
Compares this TreePath to the specified object. This returns
 true if o is a TreePath with the exact
 same elements (as determined by using equals on each
 element of the path).

Overrides:
equals in class Object
Parameters:
o - the object to compare
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
TreePath,getLastPathComponent(),Object,Returns the last element of this path.,"

getLastPathComponent
public Object getLastPathComponent()
Returns the last element of this path.

Returns:
the last element in the path


"
TreePath,getParentPath(),TreePath,Returns the TreePath of the parent.,"

getParentPath
public TreePath getParentPath()
Returns the TreePath of the parent. A return value of
 null indicates this is the root node.

Returns:
the parent path


"
TreePath,getPath(),Object[],Returns an ordered array of the elements of this TreePath.,"

getPath
public Object[] getPath()
Returns an ordered array of the elements of this TreePath.
 The first element is the root.

Returns:
an array of the elements in this TreePath


"
TreePath,getPathComponent(int index),Object,Returns the path element at the specified index.,"

getPathComponent
public Object getPathComponent(int index)
Returns the path element at the specified index.

Parameters:
index - the index of the element requested
Returns:
the element at the specified index
Throws:
IllegalArgumentException - if the index is outside the
         range of this path


"
TreePath,getPathCount(),int,Returns the number of elements in the path.,"

getPathCount
public int getPathCount()
Returns the number of elements in the path.

Returns:
the number of elements in the path


"
TreePath,hashCode(),int,Returns the hash code of this TreePath.,"

hashCode
public int hashCode()
Returns the hash code of this TreePath. The hash code of a
 TreePath is the hash code of the last element in the path.

Overrides:
hashCode in class Object
Returns:
the hashCode for the object
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
TreePath,isDescendant(TreePath aTreePath),boolean,Returns true if aTreePath is a descendant of this TreePath.,"

isDescendant
public boolean isDescendant(TreePath aTreePath)
Returns true if aTreePath is a
 descendant of this
 TreePath. A TreePath P1 is a descendant of a
 TreePath P2
 if P1 contains all of the elements that make up
 P2's path.
 For example, if this object has the path [a, b],
 and aTreePath has the path [a, b, c],
 then aTreePath is a descendant of this object.
 However, if aTreePath has the path [a],
 then it is not a descendant of this object.  By this definition
 a TreePath is always considered a descendant of itself.
 That is, aTreePath.isDescendant(aTreePath) returns
 true.

Parameters:
aTreePath - the TreePath to check
Returns:
true if aTreePath is a descendant of this path


"
TreePath,pathByAddingChild(Object child),TreePath,Returns a new path containing all the elements of this path plus child.,"

pathByAddingChild
public TreePath pathByAddingChild(Object child)
Returns a new path containing all the elements of this path
 plus child. child is the last element
 of the newly created TreePath.

Parameters:
child - the path element to add
Throws:
NullPointerException - if child is null


"
TreePath,toString(),String,Returns a string that displays and identifies this object's properties.,"

toString
public String toString()
Returns a string that displays and identifies this
 object's properties.

Overrides:
toString in class Object
Returns:
a String representation of this object


"
VariableHeightLayoutCache,"getBounds(TreePath path, Rectangle placeIn)",Rectangle,Returns the Rectangle enclosing the label portion into which the item identified by path will be drawn.,"

getBounds
public Rectangle getBounds(TreePath path,
                           Rectangle placeIn)
Returns the Rectangle enclosing the label portion
 into which the item identified by path will be drawn.

Specified by:
getBounds in class AbstractLayoutCache
Parameters:
path - the path to be drawn
placeIn - the bounds of the enclosing rectangle
Returns:
the bounds of the enclosing rectangle or null
    if the node could not be ascertained


"
VariableHeightLayoutCache,getExpandedState(TreePath path),boolean,"Returns true if the path is expanded, and visible.","

getExpandedState
public boolean getExpandedState(TreePath path)
Returns true if the path is expanded, and visible.

Specified by:
getExpandedState in class AbstractLayoutCache
Parameters:
path - the path being queried
Returns:
true if the path is expanded and visible, otherwise false


"
VariableHeightLayoutCache,"getPathClosestTo(int x, int y)",TreePath,"Returns the path to the node that is closest to x,y.","

getPathClosestTo
public TreePath getPathClosestTo(int x,
                                 int y)
Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null,
 otherwise it will always return a valid path.
 If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

Specified by:
getPathClosestTo in class AbstractLayoutCache
Parameters:
x - the x-coordinate
y - the y-coordinate
Returns:
the path to the node that is closest to x, y


"
VariableHeightLayoutCache,getPathForRow(int row),TreePath,Returns the path for row.,"

getPathForRow
public TreePath getPathForRow(int row)
Returns the path for row.  If row
 is not visible, null is returned.

Specified by:
getPathForRow in class AbstractLayoutCache
Parameters:
row - the location of interest
Returns:
the path for row, or null
 if row is not visible


"
VariableHeightLayoutCache,getPreferredHeight(),int,Returns the preferred height.,"

getPreferredHeight
public int getPreferredHeight()
Returns the preferred height.

Overrides:
getPreferredHeight in class AbstractLayoutCache
Returns:
the preferred height


"
VariableHeightLayoutCache,getPreferredWidth(Rectangle bounds),int,Returns the preferred width and height for the region in visibleRegion.,"

getPreferredWidth
public int getPreferredWidth(Rectangle bounds)
Returns the preferred width and height for the region in
 visibleRegion.

Overrides:
getPreferredWidth in class AbstractLayoutCache
Parameters:
bounds - the region being queried
Returns:
the preferred width for the passed in region


"
VariableHeightLayoutCache,getRowCount(),int,Returns the number of visible rows.,"

getRowCount
public int getRowCount()
Returns the number of visible rows.

Specified by:
getRowCount in class AbstractLayoutCache
Returns:
the number of visible rows


"
VariableHeightLayoutCache,getRowForPath(TreePath path),int,Returns the row where the last item identified in path is visible.,"

getRowForPath
public int getRowForPath(TreePath path)
Returns the row where the last item identified in path is visible.
 Will return -1 if any of the elements in path are not
 currently visible.

Specified by:
getRowForPath in class AbstractLayoutCache
Parameters:
path - the TreePath of interest
Returns:
the row where the last item in path is visible


"
VariableHeightLayoutCache,getVisibleChildCount(TreePath path),int,Returns the number of visible children for path.,"

getVisibleChildCount
public int getVisibleChildCount(TreePath path)
Returns the number of visible children for path.

Specified by:
getVisibleChildCount in class AbstractLayoutCache
Parameters:
path - the path being queried
Returns:
the number of visible children for path


"
VariableHeightLayoutCache,getVisiblePathsFrom(TreePath path),Enumeration<TreePath>,Returns an Enumerator that increments over the visible paths starting at the passed in location.,"

getVisiblePathsFrom
public Enumeration<TreePath> getVisiblePathsFrom(TreePath path)
Returns an Enumerator that increments over the visible paths
 starting at the passed in location. The ordering of the enumeration
 is based on how the paths are displayed.

Specified by:
getVisiblePathsFrom in class AbstractLayoutCache
Parameters:
path - the location in the TreePath to start
Returns:
an Enumerator that increments over the visible
     paths


"
VariableHeightLayoutCache,invalidatePathBounds(TreePath path),void,"Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.","

invalidatePathBounds
public void invalidatePathBounds(TreePath path)
Instructs the LayoutCache that the bounds for
 path are invalid, and need to be updated.

Specified by:
invalidatePathBounds in class AbstractLayoutCache
Parameters:
path - the TreePath which is now invalid


"
VariableHeightLayoutCache,invalidateSizes(),void,Informs the TreeState that it needs to recalculate all the sizes it is referencing.,"

invalidateSizes
public void invalidateSizes()
Informs the TreeState that it needs to recalculate
 all the sizes it is referencing.

Specified by:
invalidateSizes in class AbstractLayoutCache


"
VariableHeightLayoutCache,isExpanded(TreePath path),boolean,Returns true if the value identified by path is currently expanded.,"

isExpanded
public boolean isExpanded(TreePath path)
Returns true if the value identified by path is
 currently expanded.

Specified by:
isExpanded in class AbstractLayoutCache
Returns:
true if the value identified by path is
    currently expanded


"
VariableHeightLayoutCache,"setExpandedState(TreePath path, boolean isExpanded)",void,Marks the path path expanded state to isExpanded.,"

setExpandedState
public void setExpandedState(TreePath path,
                             boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Specified by:
setExpandedState in class AbstractLayoutCache
Parameters:
path - the TreePath of interest
isExpanded - true if the path should be expanded, otherwise false


"
VariableHeightLayoutCache,setModel(TreeModel newModel),void,Sets the TreeModel that will provide the data.,"

setModel
public void setModel(TreeModel newModel)
Sets the TreeModel that will provide the data.

Overrides:
setModel in class AbstractLayoutCache
Parameters:
newModel - the TreeModel that is to provide the data


"
VariableHeightLayoutCache,setNodeDimensions(AbstractLayoutCache.NodeDimensions nd),void,Sets the renderer that is responsible for drawing nodes in the tree.,"

setNodeDimensions
public void setNodeDimensions(AbstractLayoutCache.NodeDimensions nd)
Sets the renderer that is responsible for drawing nodes in the tree.

Overrides:
setNodeDimensions in class AbstractLayoutCache
Parameters:
nd - the renderer


"
VariableHeightLayoutCache,setRootVisible(boolean rootVisible),void,Determines whether or not the root node from the TreeModel is visible.,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.

Overrides:
setRootVisible in class AbstractLayoutCache
Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
AbstractLayoutCache.rootVisible


"
VariableHeightLayoutCache,setRowHeight(int rowHeight),void,Sets the height of each cell.,"

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.

Overrides:
setRowHeight in class AbstractLayoutCache
Parameters:
rowHeight - the height of each cell, in pixels


"
VariableHeightLayoutCache,treeNodesChanged(TreeModelEvent e),void,Invoked after a node (or a set of siblings) has changed in some way.,"

treeNodesChanged
public void treeNodesChanged(TreeModelEvent e)
Invoked after a node (or a set of siblings) has changed in some
 way. The node(s) have not changed locations in the tree or
 altered their children arrays, but other attributes have
 changed and may affect presentation. Example: the name of a
 file has changed, but it is in the same location in the file
 system.

 e.path returns the path the parent of the
 changed node(s).

 e.childIndices returns the index(es) of the
 changed node(s).

Specified by:
treeNodesChanged in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent of interest


"
VariableHeightLayoutCache,treeNodesInserted(TreeModelEvent e),void,Invoked after nodes have been inserted into the tree.,"

treeNodesInserted
public void treeNodesInserted(TreeModelEvent e)
Invoked after nodes have been inserted into the tree.

 e.path returns the parent of the new nodes.
 e.childIndices returns the indices of the new nodes in
 ascending order.

Specified by:
treeNodesInserted in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent of interest


"
VariableHeightLayoutCache,treeNodesRemoved(TreeModelEvent e),void,Invoked after nodes have been removed from the tree.,"

treeNodesRemoved
public void treeNodesRemoved(TreeModelEvent e)
Invoked after nodes have been removed from the tree.  Note that
 if a subtree is removed from the tree, this method may only be
 invoked once for the root of the removed subtree, not once for
 each individual set of siblings removed.

 e.path returns the former parent of the deleted nodes.

 e.childIndices returns the indices the nodes had
 before they were deleted in ascending order.

Specified by:
treeNodesRemoved in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent of interest


"
VariableHeightLayoutCache,treeStructureChanged(TreeModelEvent e),void,Invoked after the tree has drastically changed structure from a given node down.,"

treeStructureChanged
public void treeStructureChanged(TreeModelEvent e)
Invoked after the tree has drastically changed structure from a
 given node down.  If the path returned by e.getPath
 is of length one and the first element does not identify the
 current root node the first element should become the new root
 of the tree.

 e.path holds the path to the node.
 e.childIndices returns null.

Specified by:
treeStructureChanged in class AbstractLayoutCache
Parameters:
e - the TreeModelEvent of interest


"
