Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractLayoutCache,1,"void setExpandedState(TreePath path, boolean isExpanded)",True,,"

setExpandedState
public abstract void setExpandedState(TreePath path,
                                      boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Parameters:
path - the path being expanded or collapsed
isExpanded - true if the path should be expanded, false otherwise


"
0,AbstractLayoutCache,2,boolean isExpanded(TreePath path),True,,"

isExpanded
public abstract boolean isExpanded(TreePath path)
Returns true if the value identified by row is currently expanded.

"
0,AbstractLayoutCache,3,void setRowHeight(int rowHeight),True,,"

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell.  If the specified value
 is less than or equal to zero the current cell renderer is
 queried for each row's height.

Parameters:
rowHeight - the height of each cell, in pixels


"
0,AbstractLayoutCache,4,void setRootVisible(boolean rootVisible),True,,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.

Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
rootVisible


"
0,AbstractLayoutCache,5,void setShowsRootHandles(boolean newValue),False,,NULL
1,AbstractLayoutCache.NodeDimensions,1,"int getWidth(Object value, int row, boolean expanded, int offset)",False,,NULL
1,AbstractLayoutCache.NodeDimensions,2,int getHeight(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,3,int getPreferredWidth(Object value),False,,NULL
1,AbstractLayoutCache.NodeDimensions,4,int getPreferredHeight(),False,,NULL
1,AbstractLayoutCache.NodeDimensions,5,"Rectangle getNodeDimensions(Object value, int row, int depth, boolean expanded, Rectangle size)",True,,"

getNodeDimensions
public abstract Rectangle getNodeDimensions(Object value,
                                            int row,
                                            int depth,
                                            boolean expanded,
                                            Rectangle bounds)
Returns, by reference in bounds, the size and x origin to
 place value at. The calling method is responsible for determining
 the Y location. If bounds is null, a newly created
 Rectangle should be returned,
 otherwise the value should be placed in bounds and returned.

Parameters:
value - the value to be represented
row - row being queried
depth - the depth of the row
expanded - true if row is expanded, false otherwise
bounds - a Rectangle containing the size needed
              to represent value
Returns:
a Rectangle containing the node dimensions,
              or null if node has no dimension


"
2,DefaultMutableTreeNode,1,void setUserObject(Object userObject),True,,"

setUserObject
public void setUserObject(Object userObject)
Sets the user object for this node to userObject.

Specified by:
setUserObject in interface MutableTreeNode
Parameters:
userObject - the Object that constitutes this node's
                          user-specified data
See Also:
getUserObject(), 
toString()


"
2,DefaultMutableTreeNode,2,Object getUserObject(),True,,"

getUserObject
public Object getUserObject()
Returns this node's user object.

Returns:
the Object stored at this node by the user
See Also:
setUserObject(java.lang.Object), 
toString()


"
2,DefaultMutableTreeNode,3,void add(DefaultMutableTreeNode newChild),False,,NULL
2,DefaultMutableTreeNode,4,void remove(DefaultMutableTreeNode aChild),False,,NULL
2,DefaultMutableTreeNode,5,int getChildCount(),True,,"

getChildCount
public int getChildCount()
Returns the number of children of this node.

Specified by:
getChildCount in interface TreeNode
Returns:
an int giving the number of children of this node


"
3,DefaultTreeCellEditor,1,void setCellEditorListener(TreeCellEditor.CellEditorListener l),False,,NULL
3,DefaultTreeCellEditor,2,void setClickCountToStart(int count),False,,NULL
3,DefaultTreeCellEditor,3,void setTree(JTree tree),True,,"

setTree
protected void setTree(JTree newTree)
Sets the tree currently editing for. This is needed to add
 a selection listener.

Parameters:
newTree - the new tree to be edited


"
3,DefaultTreeCellEditor,4,void setEditable(boolean editable),False,,NULL
3,DefaultTreeCellEditor,5,void setBorderSelectionColor(Color newColor),True,,"

setBorderSelectionColor
public void setBorderSelectionColor(Color newColor)
Sets the color to use for the border.

Parameters:
newColor - the new border color


"
4,DefaultTreeCellRenderer,1,"Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)",True,,"

getTreeCellRendererComponent
public Component getTreeCellRendererComponent(JTree tree,
                                              Object value,
                                              boolean sel,
                                              boolean expanded,
                                              boolean leaf,
                                              int row,
                                              boolean hasFocus)
Configures the renderer based on the passed in components.
 The value is set from messaging the tree with
 convertValueToText, which ultimately invokes
 toString on value.
 The foreground color is set based on the selection and the icon
 is set based on the leaf and expanded
 parameters.

Specified by:
getTreeCellRendererComponent in interface TreeCellRenderer
Returns:
the Component that the renderer uses to draw the value


"
4,DefaultTreeCellRenderer,2,Icon getClosedIcon(),True,,"

getClosedIcon
public Icon getClosedIcon()
Returns the icon used to represent non-leaf nodes that are not
 expanded.

"
4,DefaultTreeCellRenderer,3,Icon getLeafIcon(),True,,"

getLeafIcon
public Icon getLeafIcon()
Returns the icon used to represent leaf nodes.

"
4,DefaultTreeCellRenderer,4,Icon getOpenIcon(),True,,"

getOpenIcon
public Icon getOpenIcon()
Returns the icon used to represent non-leaf nodes that are expanded.

"
4,DefaultTreeCellRenderer,5,void setClosedIcon(Icon newIcon),True,,"

setClosedIcon
public void setClosedIcon(Icon newIcon)
Sets the icon used to represent non-leaf nodes that are not expanded.

"
6,DefaultTreeSelectionModel,1,void setSelectionMode(int mode),True,,"

setSelectionMode
public void setSelectionMode(int mode)
Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
 CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode
 is not one of the defined value,
 DISCONTIGUOUS_TREE_SELECTION is assumed.
 This may change the selection if the current selection is not valid
 for the new mode. For example, if three TreePaths are
 selected when the mode is changed to SINGLE_TREE_SELECTION,
 only one TreePath will remain selected. It is up to the particular
 implementation to decide what TreePath remains selected.
 
 Setting the mode to something other than the defined types will
 result in the mode becoming DISCONTIGUOUS_TREE_SELECTION.

Specified by:
setSelectionMode in interface TreeSelectionModel


"
6,DefaultTreeSelectionModel,2,void setRowMapper(RowMapper newMapper),True,,"

setRowMapper
public void setRowMapper(RowMapper newMapper)
Sets the RowMapper instance. This instance is used to determine
 the row for a particular TreePath.

Specified by:
setRowMapper in interface TreeSelectionModel


"
6,DefaultTreeSelectionModel,3,void setSelectionPath(TreePath path),True,,"

setSelectionPath
public void setSelectionPath(TreePath path)
Sets the selection to path. If this represents a change, then
 the TreeSelectionListeners are notified. If path is
 null, this has the same effect as invoking clearSelection.

Specified by:
setSelectionPath in interface TreeSelectionModel
Parameters:
path - new path to select


"
6,DefaultTreeSelectionModel,4,void setSelectionPaths(TreePath[] paths),True,,"

setSelectionPaths
public void setSelectionPaths(TreePath[] pPaths)
Sets the selection. Whether the supplied paths are taken as the
 new selection depends upon the selection mode. If the supplied
 array is null, or empty, the selection is cleared. If
 the selection mode is SINGLE_TREE_SELECTION, only the
 first path in pPaths is used. If the selection
 mode is CONTIGUOUS_TREE_SELECTION and the supplied paths
 are not contiguous, then only the first path in pPaths is
 used. If the selection mode is
 DISCONTIGUOUS_TREE_SELECTION, then all paths are used.
 
 All null paths in pPaths are ignored.
 
 If this represents a change, all registered TreeSelectionListeners are notified.
 
 The lead path is set to the last unique path.
 
 The paths returned from getSelectionPaths are in the same
 order as those supplied to this method.

Specified by:
setSelectionPaths in interface TreeSelectionModel
Parameters:
pPaths - the new selection


"
6,DefaultTreeSelectionModel,5,void setSelectionRows(int[] rows),False,,NULL
7,FixedHeightLayoutCache,1,"void setNodeDimensions(int width, int height, int depth, int lastRow)",False,,NULL
7,FixedHeightLayoutCache,2,"void setExpandedState(TreePath path, boolean isExpanded)",True,,"

setExpandedState
public void setExpandedState(TreePath path,
                             boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Specified by:
setExpandedState in class AbstractLayoutCache
Parameters:
path - the path being expanded or collapsed
isExpanded - true if the path should be expanded, false otherwise


"
7,FixedHeightLayoutCache,3,void setRowHeight(int rowHeight),True,,"

setRowHeight
public void setRowHeight(int rowHeight)
Sets the height of each cell. If rowHeight is less than or equal to
 0 this will throw an IllegalArgumentException.

Overrides:
setRowHeight in class AbstractLayoutCache
Parameters:
rowHeight - the height of each cell, in pixels


"
7,FixedHeightLayoutCache,4,void setRootVisible(boolean rootVisible),True,,"

setRootVisible
public void setRootVisible(boolean rootVisible)
Determines whether or not the root node from
 the TreeModel is visible.

Overrides:
setRootVisible in class AbstractLayoutCache
Parameters:
rootVisible - true if the root node of the tree is to be displayed
See Also:
AbstractLayoutCache.rootVisible


"
7,FixedHeightLayoutCache,5,"void setExpandedState(TreePath path, boolean isExpanded, boolean fireEvents)",False,,NULL
8,TreePath,1,Object getLastPathComponent(),True,,"

getLastPathComponent
public Object getLastPathComponent()
Returns the last element of this path.

Returns:
the last element in the path


"
8,TreePath,2,int getPathCount(),True,,"

getPathCount
public int getPathCount()
Returns the number of elements in the path.

Returns:
the number of elements in the path


"
8,TreePath,3,Object[] getPath(),True,,"

getPath
public Object[] getPath()
Returns an ordered array of the elements of this TreePath.
 The first element is the root.

Returns:
an array of the elements in this TreePath


"
8,TreePath,4,TreePath pathByAddingChild(Object child),True,,"

pathByAddingChild
public TreePath pathByAddingChild(Object child)
Returns a new path containing all the elements of this path
 plus child. child is the last element
 of the newly created TreePath.

Parameters:
child - the path element to add
Throws:
NullPointerException - if child is null


"
8,TreePath,5,"TreePath pathByAddingChild(Object child, boolean last)",False,,NULL
9,VariableHeightLayoutCache,1,"void setExpandedState(TreePath path, boolean isExpanded)",True,,"

setExpandedState
public void setExpandedState(TreePath path,
                             boolean isExpanded)
Marks the path path expanded state to
 isExpanded.

Specified by:
setExpandedState in class AbstractLayoutCache
Parameters:
path - the TreePath of interest
isExpanded - true if the path should be expanded, otherwise false


"
9,VariableHeightLayoutCache,2,boolean getExpandedState(TreePath path),True,,"

getExpandedState
public boolean getExpandedState(TreePath path)
Returns true if the path is expanded, and visible.

Specified by:
getExpandedState in class AbstractLayoutCache
Parameters:
path - the path being queried
Returns:
true if the path is expanded and visible, otherwise false


"
9,VariableHeightLayoutCache,3,"void setRowHeight(int row, int height)",False,,NULL
9,VariableHeightLayoutCache,4,int getRowHeight(int row),False,,NULL
9,VariableHeightLayoutCache,5,void setPreferredWidth(int preferredWidth),False,,NULL
