ClassName,Method,Return Type,Description,Full Description
BasicArrowButton,getDirection(),int,Returns the direction of the arrow.,"

getDirection
public int getDirection()
Returns the direction of the arrow.

"
BasicArrowButton,getMaximumSize(),Dimension,Returns the maximum size of the BasicArrowButton.,"

getMaximumSize
public Dimension getMaximumSize()
Returns the maximum size of the BasicArrowButton.

Overrides:
getMaximumSize in class JComponent
Returns:
the maximum size
See Also:
JComponent.setMaximumSize(java.awt.Dimension), 
ComponentUI


"
BasicArrowButton,getMinimumSize(),Dimension,Returns the minimum size of the BasicArrowButton.,"

getMinimumSize
public Dimension getMinimumSize()
Returns the minimum size of the BasicArrowButton.

Overrides:
getMinimumSize in class JComponent
Returns:
the minimum size
See Also:
JComponent.setMinimumSize(java.awt.Dimension), 
ComponentUI


"
BasicArrowButton,getPreferredSize(),Dimension,Returns the preferred size of the BasicArrowButton.,"

getPreferredSize
public Dimension getPreferredSize()
Returns the preferred size of the BasicArrowButton.

Overrides:
getPreferredSize in class JComponent
Returns:
the preferred size
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
BasicArrowButton,isFocusTraversable(),boolean,Returns whether the arrow button should get the focus.,"

isFocusTraversable
public boolean isFocusTraversable()
Returns whether the arrow button should get the focus.
 BasicArrowButtons are used as a child component of
 composite components such as JScrollBar and
 JComboBox. Since the composite component typically gets the
 focus, this method is overriden to return false.

Overrides:
isFocusTraversable in class Component
Returns:
false
See Also:
Component.setFocusable(boolean)


"
BasicArrowButton,paint(Graphics g),void,Invoked by Swing to draw components.,"

paint
public void paint(Graphics g)
Description copied from class: JComponent
Invoked by Swing to draw components.
 Applications should not invoke paint directly,
 but should instead use the repaint method to
 schedule the component for redrawing.
 
 This method actually delegates the work of painting to three
 protected methods: paintComponent,
 paintBorder,
 and paintChildren.  They're called in the order
 listed to ensure that children appear on top of component itself.
 Generally speaking, the component and its children should not
 paint in the insets area allocated to the border. Subclasses can
 just override this method, as always.  A subclass that just
 wants to specialize the UI (look and feel) delegate's
 paint method should just override
 paintComponent.

Overrides:
paint in class JComponent
Parameters:
g - the Graphics context in which to paint
See Also:
JComponent.paintComponent(java.awt.Graphics), 
JComponent.paintBorder(java.awt.Graphics), 
JComponent.paintChildren(java.awt.Graphics), 
JComponent.getComponentGraphics(java.awt.Graphics), 
JComponent.repaint(long, int, int, int, int)


"
BasicArrowButton,"paintTriangle(Graphics g, int x, int y, int size, int direction, boolean isEnabled)",void,Paints a triangle.,"

paintTriangle
public void paintTriangle(Graphics g,
                          int x,
                          int y,
                          int size,
                          int direction,
                          boolean isEnabled)
Paints a triangle.

Parameters:
g - the Graphics to draw to
x - the x coordinate
y - the y coordinate
size - the size of the triangle to draw
direction - the direction in which to draw the arrow;
        one of SwingConstants.NORTH,
        SwingConstants.SOUTH, SwingConstants.EAST or
        SwingConstants.WEST
isEnabled - whether or not the arrow is drawn enabled


"
BasicArrowButton,setDirection(int direction),void,Sets the direction of the arrow.,"

setDirection
public void setDirection(int direction)
Sets the direction of the arrow.

Parameters:
direction - the direction of the arrow; one of
        of SwingConstants.NORTH,
        SwingConstants.SOUTH,
        SwingConstants.EAST or SwingConstants.WEST


"
BasicBorders,getButtonBorder(),static Border,NULL,"

getButtonBorder
public static Border getButtonBorder()

"
BasicBorders,getInternalFrameBorder(),static Border,NULL,"

getInternalFrameBorder
public static Border getInternalFrameBorder()

"
BasicBorders,getMenuBarBorder(),static Border,NULL,"

getMenuBarBorder
public static Border getMenuBarBorder()

"
BasicBorders,getProgressBarBorder(),static Border,NULL,"

getProgressBarBorder
public static Border getProgressBarBorder()

"
BasicBorders,getRadioButtonBorder(),static Border,NULL,"

getRadioButtonBorder
public static Border getRadioButtonBorder()

"
BasicBorders,getSplitPaneBorder(),static Border,NULL,"

getSplitPaneBorder
public static Border getSplitPaneBorder()

"
BasicBorders,getSplitPaneDividerBorder(),static Border,Returns a border instance for a JSplitPane divider,"

getSplitPaneDividerBorder
public static Border getSplitPaneDividerBorder()
Returns a border instance for a JSplitPane divider

Since:
1.3


"
BasicBorders,getTextFieldBorder(),static Border,NULL,"

getTextFieldBorder
public static Border getTextFieldBorder()

"
BasicBorders,getToggleButtonBorder(),static Border,NULL,"

getToggleButtonBorder
public static Border getToggleButtonBorder()

"
BasicBorders.ButtonBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.ButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicBorders.FieldBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.FieldBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicBorders.MarginBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.MenuBarBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.MenuBarBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicBorders.RadioButtonBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.RadioButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicBorders.RolloverButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int w, int h)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
BasicBorders.SplitPaneBorder,getBorderInsets(Component c),Insets,Returns the insets of the border.,"

getBorderInsets
public Insets getBorderInsets(Component c)
Description copied from interface: Border
Returns the insets of the border.

Specified by:
getBorderInsets in interface Border
Parameters:
c - the component for which this border insets value applies


"
BasicBorders.SplitPaneBorder,isBorderOpaque(),boolean,Returns whether or not the border is opaque.,"

isBorderOpaque
public boolean isBorderOpaque()
Description copied from interface: Border
Returns whether or not the border is opaque.  If the border
 is opaque, it is responsible for filling in it's own
 background when painting.

Specified by:
isBorderOpaque in interface Border


"
BasicBorders.SplitPaneBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,Paints the border for the specified component with the specified position and size.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from interface: Border
Paints the border for the specified component with the specified
 position and size.

Specified by:
paintBorder in interface Border
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicBorders.ToggleButtonBorder,"getBorderInsets(Component c, Insets insets)",Insets,Reinitializes the insets parameter with this Border's current Insets.,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
BasicBorders.ToggleButtonBorder,"paintBorder(Component c, Graphics g, int x, int y, int width, int height)",void,This default implementation does no painting.,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
BasicButtonListener,checkOpacity(AbstractButton b),protected void,NULL,"

checkOpacity
protected void checkOpacity(AbstractButton b)

"
BasicButtonListener,focusGained(FocusEvent e),void,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Description copied from interface: FocusListener
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
BasicButtonListener,focusLost(FocusEvent e),void,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Description copied from interface: FocusListener
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
BasicButtonListener,installKeyboardActions(JComponent c),void,"Register default key actions: pressing space to ""click"" a button and registring the keyboard mnemonic (if any).","

installKeyboardActions
public void installKeyboardActions(JComponent c)
Register default key actions: pressing space to ""click"" a
 button and registring the keyboard mnemonic (if any).

"
BasicButtonListener,mouseClicked(MouseEvent e),void,Invoked when the mouse button has been clicked (pressed and released) on a component.,"

mouseClicked
public void mouseClicked(MouseEvent e)
Description copied from interface: MouseListener
Invoked when the mouse button has been clicked (pressed
 and released) on a component.

Specified by:
mouseClicked in interface MouseListener


"
BasicButtonListener,mouseDragged(MouseEvent e),void,Invoked when a mouse button is pressed on a component and then dragged.,"

mouseDragged
public void mouseDragged(MouseEvent e)
Description copied from interface: MouseMotionListener
Invoked when a mouse button is pressed on a component and then
 dragged.  MOUSE_DRAGGED events will continue to be
 delivered to the component where the drag originated until the
 mouse button is released (regardless of whether the mouse position
 is within the bounds of the component).
 
 Due to platform-dependent Drag&Drop implementations,
 MOUSE_DRAGGED events may not be delivered during a native
 Drag&Drop operation.

Specified by:
mouseDragged in interface MouseMotionListener


"
BasicButtonListener,mouseEntered(MouseEvent e),void,Invoked when the mouse enters a component.,"

mouseEntered
public void mouseEntered(MouseEvent e)
Description copied from interface: MouseListener
Invoked when the mouse enters a component.

Specified by:
mouseEntered in interface MouseListener


"
BasicButtonListener,mouseExited(MouseEvent e),void,Invoked when the mouse exits a component.,"

mouseExited
public void mouseExited(MouseEvent e)
Description copied from interface: MouseListener
Invoked when the mouse exits a component.

Specified by:
mouseExited in interface MouseListener


"
BasicButtonListener,mouseMoved(MouseEvent e),void,Invoked when the mouse cursor has been moved onto a component but no buttons have been pushed.,"

mouseMoved
public void mouseMoved(MouseEvent e)
Description copied from interface: MouseMotionListener
Invoked when the mouse cursor has been moved onto a component
 but no buttons have been pushed.

Specified by:
mouseMoved in interface MouseMotionListener


"
BasicButtonListener,mousePressed(MouseEvent e),void,Invoked when a mouse button has been pressed on a component.,"

mousePressed
public void mousePressed(MouseEvent e)
Description copied from interface: MouseListener
Invoked when a mouse button has been pressed on a component.

Specified by:
mousePressed in interface MouseListener


"
BasicButtonListener,mouseReleased(MouseEvent e),void,Invoked when a mouse button has been released on a component.,"

mouseReleased
public void mouseReleased(MouseEvent e)
Description copied from interface: MouseListener
Invoked when a mouse button has been released on a component.

Specified by:
mouseReleased in interface MouseListener


"
BasicButtonListener,propertyChange(PropertyChangeEvent e),void,This method gets called when a bound property is changed.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Description copied from interface: PropertyChangeListener
This method gets called when a bound property is changed.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
BasicButtonListener,stateChanged(ChangeEvent e),void,Invoked when the target of the listener has changed its state.,"

stateChanged
public void stateChanged(ChangeEvent e)
Description copied from interface: ChangeListener
Invoked when the target of the listener has changed its state.

Specified by:
stateChanged in interface ChangeListener
Parameters:
e - a ChangeEvent object


"
BasicButtonListener,uninstallKeyboardActions(JComponent c),void,Unregister's default key actions,"

uninstallKeyboardActions
public void uninstallKeyboardActions(JComponent c)
Unregister's default key actions

"
BasicButtonUI,clearTextShiftOffset(),protected void,NULL,"

clearTextShiftOffset
protected void clearTextShiftOffset()

"
BasicButtonUI,createButtonListener(AbstractButton b),protected BasicButtonListener,NULL,"

createButtonListener
protected BasicButtonListener createButtonListener(AbstractButton b)

"
BasicButtonUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicButtonUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicButtonUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicButtonUI,getDefaultTextIconGap(AbstractButton b),int,NULL,"

getDefaultTextIconGap
public int getDefaultTextIconGap(AbstractButton b)

"
BasicButtonUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicButtonUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicButtonUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicButtonUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

"
BasicButtonUI,getTextShiftOffset(),protected int,NULL,"

getTextShiftOffset
protected int getTextShiftOffset()

"
BasicButtonUI,installDefaults(AbstractButton b),protected void,NULL,"

installDefaults
protected void installDefaults(AbstractButton b)

"
BasicButtonUI,installKeyboardActions(AbstractButton b),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions(AbstractButton b)

"
BasicButtonUI,installListeners(AbstractButton b),protected void,NULL,"

installListeners
protected void installListeners(AbstractButton b)

"
BasicButtonUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicButtonUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicButtonUI,"paintButtonPressed(Graphics g, AbstractButton b)",protected void,NULL,"

paintButtonPressed
protected void paintButtonPressed(Graphics g,
                                  AbstractButton b)

"
BasicButtonUI,"paintFocus(Graphics g, AbstractButton b, Rectangle viewRect, Rectangle textRect, Rectangle iconRect)",protected void,NULL,"

paintFocus
protected void paintFocus(Graphics g,
                          AbstractButton b,
                          Rectangle viewRect,
                          Rectangle textRect,
                          Rectangle iconRect)

"
BasicButtonUI,"paintIcon(Graphics g, JComponent c, Rectangle iconRect)",protected void,NULL,"

paintIcon
protected void paintIcon(Graphics g,
                         JComponent c,
                         Rectangle iconRect)

"
BasicButtonUI,"paintText(Graphics g, AbstractButton b, Rectangle textRect, String text)",protected void,Method which renders the text of the current button.,"

paintText
protected void paintText(Graphics g,
                         AbstractButton b,
                         Rectangle textRect,
                         String text)
Method which renders the text of the current button.
 

Parameters:
g - Graphics context
b - Current button to render
textRect - Bounding rectangle to render the text.
text - String to render
Since:
1.4


"
BasicButtonUI,"paintText(Graphics g, JComponent c, Rectangle textRect, String text)",protected void,As of Java 2 platform v 1.4 this method should not be used or overriden.,"

paintText
protected void paintText(Graphics g,
                         JComponent c,
                         Rectangle textRect,
                         String text)
As of Java 2 platform v 1.4 this method should not be used or overriden.
 Use the paintText method which takes the AbstractButton argument.

"
BasicButtonUI,setTextShiftOffset(),protected void,NULL,"

setTextShiftOffset
protected void setTextShiftOffset()

"
BasicButtonUI,uninstallDefaults(AbstractButton b),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(AbstractButton b)

"
BasicButtonUI,uninstallKeyboardActions(AbstractButton b),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions(AbstractButton b)

"
BasicButtonUI,uninstallListeners(AbstractButton b),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(AbstractButton b)

"
BasicButtonUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicCheckBoxMenuItemUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicCheckBoxMenuItemUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicMenuItemUI


"
BasicCheckBoxMenuItemUI,"processMouseEvent(JMenuItem item, MouseEvent e, MenuElement[] path, MenuSelectionManager manager)",void,NULL,"

processMouseEvent
public void processMouseEvent(JMenuItem item,
                              MouseEvent e,
                              MenuElement[] path,
                              MenuSelectionManager manager)

"
BasicCheckBoxUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
BasicCheckBoxUI,getPropertyPrefix(),String,NULL,"

getPropertyPrefix
public String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicRadioButtonUI


"
BasicColorChooserUI,createDefaultChoosers(),protected AbstractColorChooserPanel[],NULL,"

createDefaultChoosers
protected AbstractColorChooserPanel[] createDefaultChoosers()

"
BasicColorChooserUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicColorChooserUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicColorChooserUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicColorChooserUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicColorChooserUI,installPreviewPanel(),protected void,NULL,"

installPreviewPanel
protected void installPreviewPanel()

"
BasicColorChooserUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicColorChooserUI,uninstallDefaultChoosers(),protected void,NULL,"

uninstallDefaultChoosers
protected void uninstallDefaultChoosers()

"
BasicColorChooserUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicColorChooserUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicColorChooserUI,uninstallPreviewPanel(),protected void,Removes installed preview panel from the UI delegate.,"

uninstallPreviewPanel
protected void uninstallPreviewPanel()
Removes installed preview panel from the UI delegate.

Since:
1.7


"
BasicColorChooserUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicComboBoxEditor,addActionListener(ActionListener l),void,Add an ActionListener.,"

addActionListener
public void addActionListener(ActionListener l)
Description copied from interface: ComboBoxEditor
Add an ActionListener. An action event is generated when the edited item changes

Specified by:
addActionListener in interface ComboBoxEditor


"
BasicComboBoxEditor,createEditorComponent(),protected JTextField,Creates the internal editor component.,"

createEditorComponent
protected JTextField createEditorComponent()
Creates the internal editor component. Override this to provide
 a custom implementation.

Returns:
a new editor component
Since:
1.6


"
BasicComboBoxEditor,focusGained(FocusEvent e),void,Invoked when a component gains the keyboard focus.,"

focusGained
public void focusGained(FocusEvent e)
Description copied from interface: FocusListener
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
BasicComboBoxEditor,focusLost(FocusEvent e),void,Invoked when a component loses the keyboard focus.,"

focusLost
public void focusLost(FocusEvent e)
Description copied from interface: FocusListener
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
BasicComboBoxEditor,getEditorComponent(),Component,Return the component that should be added to the tree hierarchy for this editor,"

getEditorComponent
public Component getEditorComponent()
Description copied from interface: ComboBoxEditor
Return the component that should be added to the tree hierarchy for
 this editor

Specified by:
getEditorComponent in interface ComboBoxEditor


"
BasicComboBoxEditor,getItem(),Object,Return the edited item,"

getItem
public Object getItem()
Description copied from interface: ComboBoxEditor
Return the edited item

Specified by:
getItem in interface ComboBoxEditor


"
BasicComboBoxEditor,removeActionListener(ActionListener l),void,Remove an ActionListener,"

removeActionListener
public void removeActionListener(ActionListener l)
Description copied from interface: ComboBoxEditor
Remove an ActionListener

Specified by:
removeActionListener in interface ComboBoxEditor


"
BasicComboBoxEditor,selectAll(),void,Ask the editor to start editing and to select everything,"

selectAll
public void selectAll()
Description copied from interface: ComboBoxEditor
Ask the editor to start editing and to select everything

Specified by:
selectAll in interface ComboBoxEditor


"
BasicComboBoxEditor,setItem(Object anObject),void,Sets the item that should be edited.,"

setItem
public void setItem(Object anObject)
Sets the item that should be edited.

Specified by:
setItem in interface ComboBoxEditor
Parameters:
anObject - the displayed value of the editor


"
BasicComboBoxRenderer,"getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)",Component,Return a component that has been configured to display the specified value.,"

getListCellRendererComponent
public Component getListCellRendererComponent(JList list,
                                              Object value,
                                              int index,
                                              boolean isSelected,
                                              boolean cellHasFocus)
Description copied from interface: ListCellRenderer
Return a component that has been configured to display the specified
 value. That component's paint method is then called to
 ""render"" the cell.  If it is necessary to compute the dimensions
 of a list because the list cells do not have a fixed size, this method
 is called to generate a component on which getPreferredSize
 can be invoked.

Specified by:
getListCellRendererComponent in interface ListCellRenderer
Parameters:
list - The JList we're painting.
value - The value returned by list.getModel().getElementAt(index).
index - The cells index.
isSelected - True if the specified cell was selected.
cellHasFocus - True if the specified cell has the focus.
Returns:
A component whose paint() method will render the specified value.
See Also:
JList, 
ListSelectionModel, 
ListModel


"
BasicComboBoxRenderer,getPreferredSize(),Dimension,If the preferredSize has been set to a non-null value just returns it.,"

getPreferredSize
public Dimension getPreferredSize()
Description copied from class: JComponent
If the preferredSize has been set to a
 non-null value just returns it.
 If the UI delegate's getPreferredSize
 method returns a non null value then return that;
 otherwise defer to the component's layout manager.

Overrides:
getPreferredSize in class JComponent
Returns:
the value of the preferredSize property
See Also:
JComponent.setPreferredSize(java.awt.Dimension), 
ComponentUI


"
BasicComboBoxUI,addEditor(),void,This public method is implementation specific and should be private.,"

addEditor
public void addEditor()
This public method is implementation specific and should be private.
 do not call or override. To implement a specific editor create a
 custom ComboBoxEditor

See Also:
createEditor(), 
JComboBox.setEditor(javax.swing.ComboBoxEditor), 
ComboBoxEditor


"
BasicComboBoxUI,configureArrowButton(),void,This public method is implementation specific and should be private.,"

configureArrowButton
public void configureArrowButton()
This public method is implementation specific and should be private. Do
 not call or override.

See Also:
createArrowButton()


"
BasicComboBoxUI,configureEditor(),protected void,This protected method is implementation specific and should be private.,"

configureEditor
protected void configureEditor()
This protected method is implementation specific and should be private.
 do not call or override.

See Also:
addEditor()


"
BasicComboBoxUI,createArrowButton(),protected JButton,Creates a button which will be used as the control to show or hide the popup portion of the combo box.,"

createArrowButton
protected JButton createArrowButton()
Creates a button which will be used as the control to show or hide
 the popup portion of the combo box.

Returns:
a button which represents the popup control


"
BasicComboBoxUI,createEditor(),protected ComboBoxEditor,Creates the default editor that will be used in editable combo boxes.,"

createEditor
protected ComboBoxEditor createEditor()
Creates the default editor that will be used in editable combo boxes.
 A default editor will be used only if an editor has not been
 explicitly set with setEditor.

Returns:
a ComboBoxEditor used for the combo box
See Also:
JComboBox.setEditor(javax.swing.ComboBoxEditor)


"
BasicComboBoxUI,createFocusListener(),protected FocusListener,Creates a FocusListener which will be added to the combo box.,"

createFocusListener
protected FocusListener createFocusListener()
Creates a FocusListener which will be added to the combo box.
 If this method returns null then it will not be added to the combo box.

Returns:
an instance of a FocusListener or null


"
BasicComboBoxUI,createItemListener(),protected ItemListener,Creates an ItemListener which will be added to the combo box.,"

createItemListener
protected ItemListener createItemListener()
Creates an ItemListener which will be added to the
 combo box. If this method returns null then it will not
 be added to the combo box.
 
 Subclasses may override this method to return instances of their own
 ItemEvent handlers.

Returns:
an instance of an ItemListener or null


"
BasicComboBoxUI,createKeyListener(),protected KeyListener,Creates a KeyListener which will be added to the combo box.,"

createKeyListener
protected KeyListener createKeyListener()
Creates a KeyListener which will be added to the
 combo box. If this method returns null then it will not be added
 to the combo box.

Returns:
an instance KeyListener or null


"
BasicComboBoxUI,createLayoutManager(),protected LayoutManager,Creates a layout manager for managing the components which make up the combo box.,"

createLayoutManager
protected LayoutManager createLayoutManager()
Creates a layout manager for managing the components which make up the
 combo box.

Returns:
an instance of a layout manager


"
BasicComboBoxUI,createListDataListener(),protected ListDataListener,Creates a list data listener which will be added to the ComboBoxModel.,"

createListDataListener
protected ListDataListener createListDataListener()
Creates a list data listener which will be added to the
 ComboBoxModel. If this method returns null then
 it will not be added to the combo box model.

Returns:
an instance of a ListDataListener or null


"
BasicComboBoxUI,createPopup(),protected ComboPopup,Creates the popup portion of the combo box.,"

createPopup
protected ComboPopup createPopup()
Creates the popup portion of the combo box.

Returns:
an instance of ComboPopup
See Also:
ComboPopup


"
BasicComboBoxUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates a PropertyChangeListener which will be added to the combo box.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates a PropertyChangeListener which will be added to
 the combo box. If this method returns null then it will not
 be added to the combo box.

Returns:
an instance of a PropertyChangeListener or null


"
BasicComboBoxUI,createRenderer(),protected ListCellRenderer,Creates the default renderer that will be used in a non-editiable combo box.,"

createRenderer
protected ListCellRenderer createRenderer()
Creates the default renderer that will be used in a non-editiable combo
 box. A default renderer will used only if a renderer has not been
 explicitly set with setRenderer.

Returns:
a ListCellRender used for the combo box
See Also:
JComboBox.setRenderer(javax.swing.ListCellRenderer<? super E>)


"
BasicComboBoxUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicComboBoxUI,"getAccessibleChild(JComponent c, int i)",Accessible,Returns the ith Accessible child of the object.,"

getAccessibleChild
public Accessible getAccessibleChild(JComponent c,
                                     int i)
Description copied from class: ComponentUI
Returns the ith Accessible child of the object.
 UIs might need to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.

 

 Note: As of v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleChild() instead of
 this method.

Overrides:
getAccessibleChild in class ComponentUI
i - zero-based index of child
Returns:
the ith Accessible child of the object
See Also:
ComponentUI.getAccessibleChildrenCount(javax.swing.JComponent)


"
BasicComboBoxUI,getAccessibleChildrenCount(JComponent c),int,Returns the number of accessible children in the object.,"

getAccessibleChildrenCount
public int getAccessibleChildrenCount(JComponent c)
Description copied from class: ComponentUI
Returns the number of accessible children in the object.  If all
 of the children of this object implement Accessible,
 this
 method should return the number of children of this object.
 UIs might wish to override this if they present areas on the
 screen that can be viewed as components, but actual components
 are not used for presenting those areas.

 Note: As of v1.3, it is recommended that developers call
 Component.AccessibleAWTComponent.getAccessibleChildrenCount() instead
 of this method.

Overrides:
getAccessibleChildrenCount in class ComponentUI
Returns:
the number of accessible children in the object
See Also:
ComponentUI.getAccessibleChild(javax.swing.JComponent, int)


"
BasicComboBoxUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicComboBoxUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicComboBoxUI,getDefaultSize(),protected Dimension,Return the default size of an empty display area of the combo box using the current renderer and font.,"

getDefaultSize
protected Dimension getDefaultSize()
Return the default size of an empty display area of the combo box using
 the current renderer and font.

Returns:
the size of an empty display area
See Also:
getDisplaySize()


"
BasicComboBoxUI,getDisplaySize(),protected Dimension,Returns the calculated size of the display area.,"

getDisplaySize
protected Dimension getDisplaySize()
Returns the calculated size of the display area. The display area is the
 portion of the combo box in which the selected item is displayed. This
 method will use the prototype display value if it has been set.
 
 For combo boxes with a non trivial number of items, it is recommended to
 use a prototype display value to significantly speed up the display
 size calculation.

Returns:
the size of the display area calculated from the combo box items
See Also:
JComboBox.setPrototypeDisplayValue(E)


"
BasicComboBoxUI,getInsets(),protected Insets,Gets the insets from the JComboBox.,"

getInsets
protected Insets getInsets()
Gets the insets from the JComboBox.

"
BasicComboBoxUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicComboBoxUI,getMinimumSize(JComponent c),Dimension,The minimum size is the size of the display area plus insets plus the button.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
The minimum size is the size of the display area plus insets plus the button.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicComboBoxUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicComboBoxUI,getSizeForComponent(Component comp),protected Dimension,Returns the size a component would have if used as a cell renderer.,"

getSizeForComponent
protected Dimension getSizeForComponent(Component comp)
Returns the size a component would have if used as a cell renderer.

Parameters:
comp - a Component to check
Returns:
size of the component
Since:
1.7


"
BasicComboBoxUI,installComponents(),protected void,Creates and initializes the components which make up the aggregate combo box.,"

installComponents
protected void installComponents()
Creates and initializes the components which make up the
 aggregate combo box. This method is called as part of the UI
 installation process.

"
BasicComboBoxUI,installDefaults(),protected void,"Installs the default colors, default font, default renderer, and default editor into the JComboBox.","

installDefaults
protected void installDefaults()
Installs the default colors, default font, default renderer, and default
 editor into the JComboBox.

"
BasicComboBoxUI,installKeyboardActions(),protected void,Adds keyboard actions to the JComboBox.,"

installKeyboardActions
protected void installKeyboardActions()
Adds keyboard actions to the JComboBox.  Actions on enter and esc are already
 supplied.  Add more actions as you need them.

"
BasicComboBoxUI,installListeners(),protected void,Creates and installs listeners for the combo box and its model.,"

installListeners
protected void installListeners()
Creates and installs listeners for the combo box and its model.
 This method is called when the UI is installed.

"
BasicComboBoxUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicComboBoxUI,isFocusTraversable(JComboBox c),boolean,Determines if the JComboBox is focus traversable.,"

isFocusTraversable
public boolean isFocusTraversable(JComboBox c)
Determines if the JComboBox is focus traversable.  If the JComboBox is editable
 this returns false, otherwise it returns true.

Specified by:
isFocusTraversable in class ComboBoxUI


"
BasicComboBoxUI,isNavigationKey(int keyCode),protected boolean,Returns whether or not the supplied keyCode maps to a key that is used for navigation.,"

isNavigationKey
protected boolean isNavigationKey(int keyCode)
Returns whether or not the supplied keyCode maps to a key that is used for
 navigation.  This is used for optimizing key input by only passing non-
 navigation keys to the type-ahead mechanism.  Subclasses should override this
 if they change the navigation keys.

"
BasicComboBoxUI,isPopupVisible(JComboBox c),boolean,Tells if the popup is visible or not.,"

isPopupVisible
public boolean isPopupVisible(JComboBox c)
Tells if the popup is visible or not.

Specified by:
isPopupVisible in class ComboBoxUI


"
BasicComboBoxUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicComboBoxUI,"paintCurrentValue(Graphics g, Rectangle bounds, boolean hasFocus)",void,Paints the currently selected item.,"

paintCurrentValue
public void paintCurrentValue(Graphics g,
                              Rectangle bounds,
                              boolean hasFocus)
Paints the currently selected item.

"
BasicComboBoxUI,"paintCurrentValueBackground(Graphics g, Rectangle bounds, boolean hasFocus)",void,Paints the background of the currently selected item.,"

paintCurrentValueBackground
public void paintCurrentValueBackground(Graphics g,
                                        Rectangle bounds,
                                        boolean hasFocus)
Paints the background of the currently selected item.

"
BasicComboBoxUI,rectangleForCurrentValue(),protected Rectangle,Returns the area that is reserved for drawing the currently selected item.,"

rectangleForCurrentValue
protected Rectangle rectangleForCurrentValue()
Returns the area that is reserved for drawing the currently selected item.

"
BasicComboBoxUI,removeEditor(),void,This public method is implementation specific and should be private.,"

removeEditor
public void removeEditor()
This public method is implementation specific and should be private.
 do not call or override.

See Also:
addEditor()


"
BasicComboBoxUI,selectNextPossibleValue(),protected void,Selects the next item in the list.,"

selectNextPossibleValue
protected void selectNextPossibleValue()
Selects the next item in the list.  It won't change the selection if the
 currently selected item is already the last item.

"
BasicComboBoxUI,selectPreviousPossibleValue(),protected void,Selects the previous item in the list.,"

selectPreviousPossibleValue
protected void selectPreviousPossibleValue()
Selects the previous item in the list.  It won't change the selection if the
 currently selected item is already the first item.

"
BasicComboBoxUI,"setPopupVisible(JComboBox c, boolean v)",void,Hides the popup.,"

setPopupVisible
public void setPopupVisible(JComboBox c,
                            boolean v)
Hides the popup.

Specified by:
setPopupVisible in class ComboBoxUI


"
BasicComboBoxUI,toggleOpenClose(),protected void,Hides the popup if it is showing and shows the popup if it is hidden.,"

toggleOpenClose
protected void toggleOpenClose()
Hides the popup if it is showing and shows the popup if it is hidden.

"
BasicComboBoxUI,unconfigureArrowButton(),void,This public method is implementation specific and should be private.,"

unconfigureArrowButton
public void unconfigureArrowButton()
This public method is implementation specific and should be private. Do
 not call or override.

See Also:
createArrowButton()


"
BasicComboBoxUI,unconfigureEditor(),protected void,This protected method is implementation specific and should be private.,"

unconfigureEditor
protected void unconfigureEditor()
This protected method is implementation specific and should be private.
 Do not call or override.

See Also:
addEditor()


"
BasicComboBoxUI,uninstallComponents(),protected void,The aggregate components which comprise the combo box are unregistered and uninitialized.,"

uninstallComponents
protected void uninstallComponents()
The aggregate components which comprise the combo box are
 unregistered and uninitialized. This method is called as part of the
 UI uninstallation process.

"
BasicComboBoxUI,uninstallDefaults(),protected void,"Uninstalls the default colors, default font, default renderer, and default editor from the combo box.","

uninstallDefaults
protected void uninstallDefaults()
Uninstalls the default colors, default font, default renderer,
 and default editor from the combo box.

"
BasicComboBoxUI,uninstallKeyboardActions(),protected void,Removes the focus InputMap and ActionMap.,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()
Removes the focus InputMap and ActionMap.

"
BasicComboBoxUI,uninstallListeners(),protected void,Removes the installed listeners from the combo box and its model.,"

uninstallListeners
protected void uninstallListeners()
Removes the installed listeners from the combo box and its model.
 The number and types of listeners removed and in this method should be
 the same that was added in installListeners

"
BasicComboBoxUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicComboPopup,autoScrollDown(),protected void,This protected method is implementation specific and should be private.,"

autoScrollDown
protected void autoScrollDown()
This protected method is implementation specific and should be private.
 do not call or override.

"
BasicComboPopup,autoScrollUp(),protected void,This protected method is implementation specific and should be private.,"

autoScrollUp
protected void autoScrollUp()
This protected method is implementation specific and should be private.
 do not call or override.

"
BasicComboPopup,"computePopupBounds(int px, int py, int pw, int ph)",protected Rectangle,Calculate the placement and size of the popup portion of the combo box based on the combo box location and the enclosing screen bounds.,"

computePopupBounds
protected Rectangle computePopupBounds(int px,
                                       int py,
                                       int pw,
                                       int ph)
Calculate the placement and size of the popup portion of the combo box based
 on the combo box location and the enclosing screen bounds. If
 no transformations are required, then the returned rectangle will
 have the same values as the parameters.

Parameters:
px - starting x location
py - starting y location
pw - starting width
ph - starting height
Returns:
a rectangle which represents the placement and size of the popup


"
BasicComboPopup,configureList(),protected void,Configures the list which is used to hold the combo box items in the popup.,"

configureList
protected void configureList()
Configures the list which is used to hold the combo box items in the
 popup. This method is called when the UI class
 is created.

See Also:
createList()


"
BasicComboPopup,configurePopup(),protected void,Configures the popup portion of the combo box.,"

configurePopup
protected void configurePopup()
Configures the popup portion of the combo box. This method is called
 when the UI class is created.

"
BasicComboPopup,configureScroller(),protected void,Configures the scrollable portion which holds the list within the combo box popup.,"

configureScroller
protected void configureScroller()
Configures the scrollable portion which holds the list within
 the combo box popup. This method is called when the UI class
 is created.

"
BasicComboPopup,convertMouseEvent(MouseEvent e),protected MouseEvent,NULL,"

convertMouseEvent
protected MouseEvent convertMouseEvent(MouseEvent e)

"
BasicComboPopup,createItemListener(),protected ItemListener,Creates an ItemListener which will be added to the combo box.,"

createItemListener
protected ItemListener createItemListener()
Creates an ItemListener which will be added to the
 combo box. If this method returns null then it will not
 be added to the combo box.
 
 Subclasses may override this method to return instances of their own
 ItemEvent handlers.

Returns:
an instance of an ItemListener or null


"
BasicComboPopup,createKeyListener(),protected KeyListener,Creates the key listener that will be added to the combo box.,"

createKeyListener
protected KeyListener createKeyListener()
Creates the key listener that will be added to the combo box. If
 this method returns null then it will not be added to the combo box.

Returns:
a KeyListener or null


"
BasicComboPopup,createList(),protected JList,Creates the JList used in the popup to display the items in the combo box model.,"

createList
protected JList createList()
Creates the JList used in the popup to display
 the items in the combo box model. This method is called when the UI class
 is created.

Returns:
a JList used to display the combo box items


"
BasicComboPopup,createListDataListener(),protected ListDataListener,Creates a list data listener which will be added to the ComboBoxModel.,"

createListDataListener
protected ListDataListener createListDataListener()
Creates a list data listener which will be added to the
 ComboBoxModel. If this method returns null then
 it will not be added to the combo box model.

Returns:
an instance of a ListDataListener or null


"
BasicComboPopup,createListMouseListener(),protected MouseListener,Creates a mouse listener that watches for mouse events in the popup's list.,"

createListMouseListener
protected MouseListener createListMouseListener()
Creates a mouse listener that watches for mouse events in
 the popup's list. If this method returns null then it will
 not be added to the combo box.

Returns:
an instance of a MouseListener or null


"
BasicComboPopup,createListMouseMotionListener(),protected MouseMotionListener,Creates a mouse motion listener that watches for mouse motion events in the popup's list.,"

createListMouseMotionListener
protected MouseMotionListener createListMouseMotionListener()
Creates a mouse motion listener that watches for mouse motion
 events in the popup's list. If this method returns null then it will
 not be added to the combo box.

Returns:
an instance of a MouseMotionListener or null


"
BasicComboPopup,createListSelectionListener(),protected ListSelectionListener,Creates a list selection listener that watches for selection changes in the popup's list.,"

createListSelectionListener
protected ListSelectionListener createListSelectionListener()
Creates a list selection listener that watches for selection changes in
 the popup's list.  If this method returns null then it will not
 be added to the popup list.

Returns:
an instance of a ListSelectionListener or null


"
BasicComboPopup,createMouseListener(),protected MouseListener,Creates a listener that will watch for mouse-press and release events on the combo box.,"

createMouseListener
protected MouseListener createMouseListener()
Creates a listener
 that will watch for mouse-press and release events on the combo box.

 Warning:
 When overriding this method, make sure to maintain the existing
 behavior.

Returns:
a MouseListener which will be added to
 the combo box or null


"
BasicComboPopup,createMouseMotionListener(),protected MouseMotionListener,Creates the mouse motion listener which will be added to the combo box.,"

createMouseMotionListener
protected MouseMotionListener createMouseMotionListener()
Creates the mouse motion listener which will be added to the combo
 box.

 Warning:
 When overriding this method, make sure to maintain the existing
 behavior.

Returns:
a MouseMotionListener which will be added to
         the combo box or null


"
BasicComboPopup,createPropertyChangeListener(),protected PropertyChangeListener,Creates a PropertyChangeListener which will be added to the combo box.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates a PropertyChangeListener which will be added to
 the combo box. If this method returns null then it will not
 be added to the combo box.

Returns:
an instance of a PropertyChangeListener or null


"
BasicComboPopup,createScroller(),protected JScrollPane,Creates the scroll pane which houses the scrollable list.,"

createScroller
protected JScrollPane createScroller()
Creates the scroll pane which houses the scrollable list.

"
BasicComboPopup,delegateFocus(MouseEvent e),protected void,This is is a utility method that helps event handlers figure out where to send the focus when the popup is brought up.,"

delegateFocus
protected void delegateFocus(MouseEvent e)
This is is a utility method that helps event handlers figure out where to
 send the focus when the popup is brought up.  The standard implementation
 delegates the focus to the editor (if the combo box is editable) or to
 the JComboBox if it is not editable.

"
BasicComboPopup,firePopupMenuCanceled(),protected void,Notifies PopupMenuListeners that this popup menu is cancelled.,"

firePopupMenuCanceled
protected void firePopupMenuCanceled()
Description copied from class: JPopupMenu
Notifies PopupMenuListeners that this popup menu is
 cancelled.

Overrides:
firePopupMenuCanceled in class JPopupMenu


"
BasicComboPopup,firePopupMenuWillBecomeInvisible(),protected void,Notifies PopupMenuListeners that this popup menu will become invisible.,"

firePopupMenuWillBecomeInvisible
protected void firePopupMenuWillBecomeInvisible()
Description copied from class: JPopupMenu
Notifies PopupMenuListeners that this popup menu will
 become invisible.

Overrides:
firePopupMenuWillBecomeInvisible in class JPopupMenu


"
BasicComboPopup,firePopupMenuWillBecomeVisible(),protected void,Notifies PopupMenuListeners that this popup menu will become visible.,"

firePopupMenuWillBecomeVisible
protected void firePopupMenuWillBecomeVisible()
Description copied from class: JPopupMenu
Notifies PopupMenuListeners that this popup menu will
 become visible.

Overrides:
firePopupMenuWillBecomeVisible in class JPopupMenu


"
BasicComboPopup,getAccessibleContext(),AccessibleContext,Gets the AccessibleContext associated with this BasicComboPopup.,"

getAccessibleContext
public AccessibleContext getAccessibleContext()
Gets the AccessibleContext associated with this BasicComboPopup.
 The AccessibleContext will have its parent set to the ComboBox.

Specified by:
getAccessibleContext in interface Accessible
Overrides:
getAccessibleContext in class JPopupMenu
Returns:
an AccessibleContext for the BasicComboPopup
Since:
1.5


"
BasicComboPopup,getKeyListener(),KeyListener,Implementation of ComboPopup.getKeyListener().,"

getKeyListener
public KeyListener getKeyListener()
Implementation of ComboPopup.getKeyListener().

Specified by:
getKeyListener in interface ComboPopup
Returns:
a KeyListener or null
See Also:
ComboPopup.getKeyListener()


"
BasicComboPopup,getList(),JList,Implementation of ComboPopup.getList().,"

getList
public JList getList()
Implementation of ComboPopup.getList().

Specified by:
getList in interface ComboPopup


"
BasicComboPopup,getMouseListener(),MouseListener,Implementation of ComboPopup.getMouseListener().,"

getMouseListener
public MouseListener getMouseListener()
Implementation of ComboPopup.getMouseListener().

Specified by:
getMouseListener in interface ComboPopup
Returns:
a MouseListener or null
See Also:
ComboPopup.getMouseListener()


"
BasicComboPopup,getMouseMotionListener(),MouseMotionListener,Implementation of ComboPopup.getMouseMotionListener().,"

getMouseMotionListener
public MouseMotionListener getMouseMotionListener()
Implementation of ComboPopup.getMouseMotionListener().

Specified by:
getMouseMotionListener in interface ComboPopup
Returns:
a MouseMotionListener or null
See Also:
ComboPopup.getMouseMotionListener()


"
BasicComboPopup,getPopupHeightForRowCount(int maxRowCount),protected int,Retrieves the height of the popup based on the current ListCellRenderer and the maximum row count.,"

getPopupHeightForRowCount
protected int getPopupHeightForRowCount(int maxRowCount)
Retrieves the height of the popup based on the current
 ListCellRenderer and the maximum row count.

"
BasicComboPopup,hide(),void,Implementation of ComboPopup.hide().,"

hide
public void hide()
Implementation of ComboPopup.hide().

Specified by:
hide in interface ComboPopup
Overrides:
hide in class JComponent


"
BasicComboPopup,installComboBoxListeners(),protected void,This method adds the necessary listeners to the JComboBox.,"

installComboBoxListeners
protected void installComboBoxListeners()
This method adds the necessary listeners to the JComboBox.

"
BasicComboPopup,installComboBoxModelListeners(ComboBoxModel model),protected void,Installs the listeners on the combo box model.,"

installComboBoxModelListeners
protected void installComboBoxModelListeners(ComboBoxModel model)
Installs the listeners on the combo box model. Any listeners installed
 on the combo box model should be removed in
 uninstallComboBoxModelListeners.

Parameters:
model - The combo box model to install listeners
See Also:
uninstallComboBoxModelListeners(javax.swing.ComboBoxModel)


"
BasicComboPopup,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicComboPopup,installListListeners(),protected void,Adds the listeners to the list control.,"

installListListeners
protected void installListListeners()
Adds the listeners to the list control.

"
BasicComboPopup,isFocusTraversable(),boolean,Overridden to unconditionally return false.,"

isFocusTraversable
public boolean isFocusTraversable()
Overridden to unconditionally return false.

Overrides:
isFocusTraversable in class Component
Returns:
true if this Component is
 focusable; false otherwise
See Also:
Component.setFocusable(boolean)


"
BasicComboPopup,show(),void,Implementation of ComboPopup.show().,"

show
public void show()
Implementation of ComboPopup.show().

Specified by:
show in interface ComboPopup
Overrides:
show in class Component


"
BasicComboPopup,startAutoScrolling(int direction),protected void,This protected method is implementation specific and should be private.,"

startAutoScrolling
protected void startAutoScrolling(int direction)
This protected method is implementation specific and should be private.
 do not call or override.

"
BasicComboPopup,stopAutoScrolling(),protected void,This protected method is implementation specific and should be private.,"

stopAutoScrolling
protected void stopAutoScrolling()
This protected method is implementation specific and should be private.
 do not call or override.

"
BasicComboPopup,togglePopup(),protected void,Makes the popup visible if it is hidden and makes it hidden if it is visible.,"

togglePopup
protected void togglePopup()
Makes the popup visible if it is hidden and makes it hidden if it is
 visible.

"
BasicComboPopup,uninstallComboBoxModelListeners(ComboBoxModel model),protected void,Removes the listeners from the combo box model,"

uninstallComboBoxModelListeners
protected void uninstallComboBoxModelListeners(ComboBoxModel model)
Removes the listeners from the combo box model

Parameters:
model - The combo box model to install listeners
See Also:
installComboBoxModelListeners(javax.swing.ComboBoxModel)


"
BasicComboPopup,uninstallingUI(),void,Called when the UI is uninstalling.,"

uninstallingUI
public void uninstallingUI()
Called when the UI is uninstalling.  Since this popup isn't in the component
 tree, it won't get it's uninstallUI() called.  It removes the listeners that
 were added in addComboBoxListeners().

Specified by:
uninstallingUI in interface ComboPopup


"
BasicComboPopup,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicComboPopup,"updateListBoxSelectionForEvent(MouseEvent anEvent, boolean shouldScroll)",protected void,A utility method used by the event listeners.,"

updateListBoxSelectionForEvent
protected void updateListBoxSelectionForEvent(MouseEvent anEvent,
                                              boolean shouldScroll)
A utility method used by the event listeners.  Given a mouse event, it changes
 the list selection to the list item below the mouse.

"
BasicDesktopIconUI,createMouseInputListener(),protected MouseInputListener,NULL,"

createMouseInputListener
protected MouseInputListener createMouseInputListener()

"
BasicDesktopIconUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicDesktopIconUI,deiconize(),void,NULL,"

deiconize
public void deiconize()

"
BasicDesktopIconUI,getInsets(JComponent c),Insets,NULL,"

getInsets
public Insets getInsets(JComponent c)

"
BasicDesktopIconUI,getMaximumSize(JComponent c),Dimension,Desktop icons can not be resized.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Desktop icons can not be resized.  Therefore, we should always
 return the minimum size of the desktop icon.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
getMinimumSize(javax.swing.JComponent)


"
BasicDesktopIconUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicDesktopIconUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicDesktopIconUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

"
BasicDesktopIconUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicDesktopIconUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicDesktopIconUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicDesktopIconUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

"
BasicDesktopIconUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicDesktopIconUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicDesktopIconUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicDesktopPaneUI,createPropertyChangeListener(),protected PropertyChangeListener,Returns the PropertyChangeListener to install on the JDesktopPane.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Returns the PropertyChangeListener to install on
 the JDesktopPane.

Returns:
The PropertyChangeListener that will be added to track
 changes in the desktop pane.
Since:
1.5


"
BasicDesktopPaneUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicDesktopPaneUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicDesktopPaneUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicDesktopPaneUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicDesktopPaneUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicDesktopPaneUI,installDesktopManager(),protected void,NULL,"

installDesktopManager
protected void installDesktopManager()

"
BasicDesktopPaneUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicDesktopPaneUI,installListeners(),protected void,Installs the PropertyChangeListener returned from createPropertyChangeListener on the JDesktopPane.,"

installListeners
protected void installListeners()
Installs the PropertyChangeListener returned from
 createPropertyChangeListener on the
 JDesktopPane.

Since:
1.5
See Also:
createPropertyChangeListener()


"
BasicDesktopPaneUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicDesktopPaneUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicDesktopPaneUI,registerKeyboardActions(),protected void,NULL,"

registerKeyboardActions
protected void registerKeyboardActions()

"
BasicDesktopPaneUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicDesktopPaneUI,uninstallDesktopManager(),protected void,NULL,"

uninstallDesktopManager
protected void uninstallDesktopManager()

"
BasicDesktopPaneUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicDesktopPaneUI,uninstallListeners(),protected void,Uninstalls the PropertyChangeListener returned from createPropertyChangeListener from the JDesktopPane.,"

uninstallListeners
protected void uninstallListeners()
Uninstalls the PropertyChangeListener returned from
 createPropertyChangeListener from the
 JDesktopPane.

Since:
1.5
See Also:
createPropertyChangeListener()


"
BasicDesktopPaneUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicDesktopPaneUI,unregisterKeyboardActions(),protected void,NULL,"

unregisterKeyboardActions
protected void unregisterKeyboardActions()

"
BasicDirectoryModel,addPropertyChangeListener(PropertyChangeListener listener),void,Adds a PropertyChangeListener to the listener list.,"

addPropertyChangeListener
public void addPropertyChangeListener(PropertyChangeListener listener)
Adds a PropertyChangeListener to the listener list. The listener is
 registered for all bound properties of this class.
 
 If listener is null,
 no exception is thrown and no action is performed.

Parameters:
listener - the property change listener to be added
Since:
1.6
See Also:
removePropertyChangeListener(java.beans.PropertyChangeListener), 
getPropertyChangeListeners()


"
BasicDirectoryModel,contains(Object o),boolean,NULL,"

contains
public boolean contains(Object o)

"
BasicDirectoryModel,fireContentsChanged(),void,NULL,"

fireContentsChanged
public void fireContentsChanged()

"
BasicDirectoryModel,"firePropertyChange(String propertyName, Object oldValue, Object newValue)",protected void,Support for reporting bound property changes for boolean properties.,"

firePropertyChange
protected void firePropertyChange(String propertyName,
                                  Object oldValue,
                                  Object newValue)
Support for reporting bound property changes for boolean properties.
 This method can be called when a bound property has changed and it will
 send the appropriate PropertyChangeEvent to any registered
 PropertyChangeListeners.

Parameters:
propertyName - the property whose value has changed
oldValue - the property's previous value
newValue - the property's new value
Since:
1.6


"
BasicDirectoryModel,getDirectories(),Vector<File>,NULL,"

getDirectories
public Vector<File> getDirectories()

"
BasicDirectoryModel,getElementAt(int index),Object,Returns the value at the specified index.,"

getElementAt
public Object getElementAt(int index)
Description copied from interface: ListModel
Returns the value at the specified index.

Specified by:
getElementAt in interface ListModel<Object>
Parameters:
index - the requested index
Returns:
the value at index


"
BasicDirectoryModel,getFiles(),Vector<File>,NULL,"

getFiles
public Vector<File> getFiles()

"
BasicDirectoryModel,getPropertyChangeListeners(),PropertyChangeListener[],Returns an array of all the property change listeners registered on this component.,"

getPropertyChangeListeners
public PropertyChangeListener[] getPropertyChangeListeners()
Returns an array of all the property change listeners
 registered on this component.

Returns:
all of this component's PropertyChangeListeners
         or an empty array if no property change
         listeners are currently registered
Since:
1.6
See Also:
addPropertyChangeListener(java.beans.PropertyChangeListener), 
removePropertyChangeListener(java.beans.PropertyChangeListener), 
PropertyChangeSupport.getPropertyChangeListeners()


"
BasicDirectoryModel,getSize(),int,Returns the length of the list.,"

getSize
public int getSize()
Description copied from interface: ListModel
Returns the length of the list.

Specified by:
getSize in interface ListModel<Object>
Returns:
the length of the list


"
BasicDirectoryModel,indexOf(Object o),int,NULL,"

indexOf
public int indexOf(Object o)

"
BasicDirectoryModel,intervalAdded(ListDataEvent e),void,Obsolete - not used.,"

intervalAdded
public void intervalAdded(ListDataEvent e)
Obsolete - not used.

"
BasicDirectoryModel,intervalRemoved(ListDataEvent e),void,Obsolete - not used.,"

intervalRemoved
public void intervalRemoved(ListDataEvent e)
Obsolete - not used.

"
BasicDirectoryModel,invalidateFileCache(),void,This method is used to interrupt file loading thread.,"

invalidateFileCache
public void invalidateFileCache()
This method is used to interrupt file loading thread.

"
BasicDirectoryModel,"lt(File a, File b)",protected boolean,NULL,"

lt
protected boolean lt(File a,
                     File b)

"
BasicDirectoryModel,propertyChange(PropertyChangeEvent e),void,This method gets called when a bound property is changed.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Description copied from interface: PropertyChangeListener
This method gets called when a bound property is changed.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
BasicDirectoryModel,removePropertyChangeListener(PropertyChangeListener listener),void,Removes a PropertyChangeListener from the listener list.,"

removePropertyChangeListener
public void removePropertyChangeListener(PropertyChangeListener listener)
Removes a PropertyChangeListener from the listener list.
 
 If listener is null, no exception is thrown and no action is performed.

Parameters:
listener - the PropertyChangeListener to be removed
Since:
1.6
See Also:
addPropertyChangeListener(java.beans.PropertyChangeListener), 
getPropertyChangeListeners()


"
BasicDirectoryModel,"renameFile(File oldFile, File newFile)",boolean,Renames a file in the underlying file system.,"

renameFile
public boolean renameFile(File oldFile,
                          File newFile)
Renames a file in the underlying file system.

Parameters:
oldFile - a File object representing
        the existing file
newFile - a File object representing
        the desired new file name
Returns:
true if rename succeeded,
        otherwise false
Since:
1.4


"
BasicDirectoryModel,sort(Vector<? extends File> v),protected void,NULL,"

sort
protected void sort(Vector<? extends File> v)

"
BasicDirectoryModel,validateFileCache(),void,NULL,"

validateFileCache
public void validateFileCache()

"
BasicEditorPaneUI,createUI(JComponent c),static ComponentUI,Creates a UI for the JTextPane.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for the JTextPane.

Parameters:
c - the JTextPane component
Returns:
the UI


"
BasicEditorPaneUI,getEditorKit(JTextComponent tc),EditorKit,Fetches the EditorKit for the UI.,"

getEditorKit
public EditorKit getEditorKit(JTextComponent tc)
Fetches the EditorKit for the UI.  This is whatever is
 currently set in the associated JEditorPane.

Overrides:
getEditorKit in class BasicTextUI
Parameters:
tc - the text component for which this UI is installed
Returns:
the editor capabilities
See Also:
TextUI.getEditorKit(javax.swing.text.JTextComponent)


"
BasicEditorPaneUI,getPropertyPrefix(),protected String,Fetches the name used as a key to lookup properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to lookup properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Specified by:
getPropertyPrefix in class BasicTextUI
Returns:
the name (""EditorPane"")


"
BasicEditorPaneUI,installUI(JComponent c),void,Installs the UI for a component.,"

installUI
public void installUI(JComponent c)
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class BasicTextUI
Parameters:
c - the editor component
Since:
1.5
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
BasicEditorPaneUI,propertyChange(PropertyChangeEvent evt),protected void,This method gets called when a bound property is changed on the associated JTextComponent.,"

propertyChange
protected void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.
 This is implemented to rebuild the ActionMap based upon an
 EditorKit change.

Overrides:
propertyChange in class BasicTextUI
Parameters:
evt - the property change event


"
BasicEditorPaneUI,uninstallUI(JComponent c),void,Deinstalls the UI for a component.,"

uninstallUI
public void uninstallUI(JComponent c)
Deinstalls the UI for a component.  This removes the listeners,
 uninstalls the highlighter, removes views, and nulls out the keymap.

Overrides:
uninstallUI in class BasicTextUI
Parameters:
c - the editor component
Since:
1.5
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)


"
BasicFileChooserUI,clearIconCache(),void,NULL,"

clearIconCache
public void clearIconCache()

"
BasicFileChooserUI,"createDoubleClickListener(JFileChooser fc, JList list)",protected MouseListener,NULL,"

createDoubleClickListener
protected MouseListener createDoubleClickListener(JFileChooser fc,
                                                  JList list)

"
BasicFileChooserUI,createListSelectionListener(JFileChooser fc),ListSelectionListener,NULL,"

createListSelectionListener
public ListSelectionListener createListSelectionListener(JFileChooser fc)

"
BasicFileChooserUI,createModel(),protected void,NULL,"

createModel
protected void createModel()

"
BasicFileChooserUI,createPropertyChangeListener(JFileChooser fc),PropertyChangeListener,NULL,"

createPropertyChangeListener
public PropertyChangeListener createPropertyChangeListener(JFileChooser fc)

"
BasicFileChooserUI,createUI(JComponent c),static ComponentUI,Creates a BasicFileChooserUI implementation for the specified component.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a BasicFileChooserUI implementation
 for the specified component. By default
 the BasicLookAndFeel class uses
 createUI methods of all basic UIs classes
 to instantiate UIs.

Parameters:
c - the JFileChooser which needs a UI
Returns:
the BasicFileChooserUI object
Since:
1.7
See Also:
UIDefaults.getUI(JComponent)


"
BasicFileChooserUI,"ensureFileIsVisible(JFileChooser fc, File f)",void,NULL,"

ensureFileIsVisible
public void ensureFileIsVisible(JFileChooser fc,
                                File f)

Specified by:
ensureFileIsVisible in class FileChooserUI


"
BasicFileChooserUI,getAcceptAllFileFilter(JFileChooser fc),FileFilter,Returns the default accept all file filter,"

getAcceptAllFileFilter
public FileFilter getAcceptAllFileFilter(JFileChooser fc)
Returns the default accept all file filter

Specified by:
getAcceptAllFileFilter in class FileChooserUI


"
BasicFileChooserUI,getAccessoryPanel(),JPanel,NULL,"

getAccessoryPanel
public JPanel getAccessoryPanel()

"
BasicFileChooserUI,getApproveButton(JFileChooser fc),protected JButton,NULL,"

getApproveButton
protected JButton getApproveButton(JFileChooser fc)

"
BasicFileChooserUI,getApproveButtonMnemonic(JFileChooser fc),int,NULL,"

getApproveButtonMnemonic
public int getApproveButtonMnemonic(JFileChooser fc)

"
BasicFileChooserUI,getApproveButtonText(JFileChooser fc),String,NULL,"

getApproveButtonText
public String getApproveButtonText(JFileChooser fc)

Specified by:
getApproveButtonText in class FileChooserUI


"
BasicFileChooserUI,getApproveButtonToolTipText(JFileChooser fc),String,NULL,"

getApproveButtonToolTipText
public String getApproveButtonToolTipText(JFileChooser fc)

"
BasicFileChooserUI,getApproveSelectionAction(),Action,NULL,"

getApproveSelectionAction
public Action getApproveSelectionAction()

"
BasicFileChooserUI,getCancelSelectionAction(),Action,NULL,"

getCancelSelectionAction
public Action getCancelSelectionAction()

"
BasicFileChooserUI,getChangeToParentDirectoryAction(),Action,NULL,"

getChangeToParentDirectoryAction
public Action getChangeToParentDirectoryAction()

"
BasicFileChooserUI,getDefaultButton(JFileChooser fc),JButton,Returns default button for current LookAndFeel.,"

getDefaultButton
public JButton getDefaultButton(JFileChooser fc)
Description copied from class: FileChooserUI
Returns default button for current LookAndFeel.
 JFileChooser will use this button as default button
 for dialog windows.

Overrides:
getDefaultButton in class FileChooserUI


"
BasicFileChooserUI,getDialogTitle(JFileChooser fc),String,Returns the title of this dialog,"

getDialogTitle
public String getDialogTitle(JFileChooser fc)
Returns the title of this dialog

Specified by:
getDialogTitle in class FileChooserUI


"
BasicFileChooserUI,getDirectory(),protected File,Property to remember the directory that is currently selected in the UI.,"

getDirectory
protected File getDirectory()
Property to remember the directory that is currently selected in the UI.

Returns:
the value of the directory property
Since:
1.4
See Also:
setDirectory(java.io.File)


"
BasicFileChooserUI,getDirectoryName(),String,NULL,"

getDirectoryName
public String getDirectoryName()

"
BasicFileChooserUI,getFileChooser(),JFileChooser,NULL,"

getFileChooser
public JFileChooser getFileChooser()

"
BasicFileChooserUI,getFileName(),String,NULL,"

getFileName
public String getFileName()

"
BasicFileChooserUI,getFileView(JFileChooser fc),FileView,NULL,"

getFileView
public FileView getFileView(JFileChooser fc)

Specified by:
getFileView in class FileChooserUI


"
BasicFileChooserUI,getGoHomeAction(),Action,NULL,"

getGoHomeAction
public Action getGoHomeAction()

"
BasicFileChooserUI,getModel(),BasicDirectoryModel,NULL,"

getModel
public BasicDirectoryModel getModel()

"
BasicFileChooserUI,getNewFolderAction(),Action,NULL,"

getNewFolderAction
public Action getNewFolderAction()

"
BasicFileChooserUI,getUpdateAction(),Action,NULL,"

getUpdateAction
public Action getUpdateAction()

"
BasicFileChooserUI,installComponents(JFileChooser fc),void,NULL,"

installComponents
public void installComponents(JFileChooser fc)

"
BasicFileChooserUI,installDefaults(JFileChooser fc),protected void,NULL,"

installDefaults
protected void installDefaults(JFileChooser fc)

"
BasicFileChooserUI,installIcons(JFileChooser fc),protected void,NULL,"

installIcons
protected void installIcons(JFileChooser fc)

"
BasicFileChooserUI,installListeners(JFileChooser fc),protected void,NULL,"

installListeners
protected void installListeners(JFileChooser fc)

"
BasicFileChooserUI,installStrings(JFileChooser fc),protected void,NULL,"

installStrings
protected void installStrings(JFileChooser fc)

"
BasicFileChooserUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicFileChooserUI,isDirectorySelected(),protected boolean,Property to remember whether a directory is currently selected in the UI.,"

isDirectorySelected
protected boolean isDirectorySelected()
Property to remember whether a directory is currently selected in the UI.

Returns:
true iff a directory is currently selected.
Since:
1.4


"
BasicFileChooserUI,rescanCurrentDirectory(JFileChooser fc),void,NULL,"

rescanCurrentDirectory
public void rescanCurrentDirectory(JFileChooser fc)

Specified by:
rescanCurrentDirectory in class FileChooserUI


"
BasicFileChooserUI,setDirectory(File f),protected void,Property to remember the directory that is currently selected in the UI.,"

setDirectory
protected void setDirectory(File f)
Property to remember the directory that is currently selected in the UI.
 This is normally called by the UI on a selection event.

Parameters:
f - the File object representing the directory that is
          currently selected
Since:
1.4


"
BasicFileChooserUI,setDirectoryName(String dirname),void,NULL,"

setDirectoryName
public void setDirectoryName(String dirname)

"
BasicFileChooserUI,setDirectorySelected(boolean b),protected void,Property to remember whether a directory is currently selected in the UI.,"

setDirectorySelected
protected void setDirectorySelected(boolean b)
Property to remember whether a directory is currently selected in the UI.
 This is normally called by the UI on a selection event.

Parameters:
b - iff a directory is currently selected.
Since:
1.4


"
BasicFileChooserUI,setFileName(String filename),void,NULL,"

setFileName
public void setFileName(String filename)

"
BasicFileChooserUI,uninstallComponents(JFileChooser fc),void,NULL,"

uninstallComponents
public void uninstallComponents(JFileChooser fc)

"
BasicFileChooserUI,uninstallDefaults(JFileChooser fc),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JFileChooser fc)

"
BasicFileChooserUI,uninstallIcons(JFileChooser fc),protected void,NULL,"

uninstallIcons
protected void uninstallIcons(JFileChooser fc)

"
BasicFileChooserUI,uninstallListeners(JFileChooser fc),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JFileChooser fc)

"
BasicFileChooserUI,uninstallStrings(JFileChooser fc),protected void,NULL,"

uninstallStrings
protected void uninstallStrings(JFileChooser fc)

"
BasicFileChooserUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicFormattedTextFieldUI,createUI(JComponent c),static ComponentUI,Creates a UI for a JFormattedTextField.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for a JFormattedTextField.

Parameters:
c - the formatted text field
Returns:
the UI


"
BasicFormattedTextFieldUI,getPropertyPrefix(),protected String,Fetches the name used as a key to lookup properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to lookup properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Overrides:
getPropertyPrefix in class BasicTextFieldUI
Returns:
the name ""FormattedTextField""


"
BasicGraphicsUtils,"drawBezel(Graphics g, int x, int y, int w, int h, boolean isPressed, boolean isDefault, Color shadow, Color darkShadow, Color highlight, Color lightHighlight)",static void,NULL,"

drawBezel
public static void drawBezel(Graphics g,
                             int x,
                             int y,
                             int w,
                             int h,
                             boolean isPressed,
                             boolean isDefault,
                             Color shadow,
                             Color darkShadow,
                             Color highlight,
                             Color lightHighlight)

"
BasicGraphicsUtils,"drawDashedRect(Graphics g, int x, int y, int width, int height)",static void,NULL,"

drawDashedRect
public static void drawDashedRect(Graphics g,
                                  int x,
                                  int y,
                                  int width,
                                  int height)

"
BasicGraphicsUtils,"drawEtchedRect(Graphics g, int x, int y, int w, int h, Color shadow, Color darkShadow, Color highlight, Color lightHighlight)",static void,NULL,"

drawEtchedRect
public static void drawEtchedRect(Graphics g,
                                  int x,
                                  int y,
                                  int w,
                                  int h,
                                  Color shadow,
                                  Color darkShadow,
                                  Color highlight,
                                  Color lightHighlight)

"
BasicGraphicsUtils,"drawGroove(Graphics g, int x, int y, int w, int h, Color shadow, Color highlight)",static void,NULL,"

drawGroove
public static void drawGroove(Graphics g,
                              int x,
                              int y,
                              int w,
                              int h,
                              Color shadow,
                              Color highlight)

"
BasicGraphicsUtils,"drawLoweredBezel(Graphics g, int x, int y, int w, int h, Color shadow, Color darkShadow, Color highlight, Color lightHighlight)",static void,NULL,"

drawLoweredBezel
public static void drawLoweredBezel(Graphics g,
                                    int x,
                                    int y,
                                    int w,
                                    int h,
                                    Color shadow,
                                    Color darkShadow,
                                    Color highlight,
                                    Color lightHighlight)

"
BasicGraphicsUtils,"drawString(Graphics g, String text, int underlinedChar, int x, int y)",static void,"Draw a string with the graphics g at location (x,y) just like g.drawString would.","

drawString
public static void drawString(Graphics g,
                              String text,
                              int underlinedChar,
                              int x,
                              int y)
Draw a string with the graphics g at location (x,y)
  just like g.drawString would.
  The first occurrence of underlineChar
  in text will be underlined. The matching algorithm is
  not case sensitive.

"
BasicGraphicsUtils,"drawStringUnderlineCharAt(Graphics g, String text, int underlinedIndex, int x, int y)",static void,"Draw a string with the graphics g at location (x, y) just like g.drawString would.","

drawStringUnderlineCharAt
public static void drawStringUnderlineCharAt(Graphics g,
                                             String text,
                                             int underlinedIndex,
                                             int x,
                                             int y)
Draw a string with the graphics g at location
 (x, y)
 just like g.drawString would.
 The character at index underlinedIndex
 in text will be underlined. If index is beyond the
 bounds of text (including < 0), nothing will be
 underlined.

Parameters:
g - Graphics to draw with
text - String to draw
underlinedIndex - Index of character in text to underline
x - x coordinate to draw at
y - y coordinate to draw at
Since:
1.4


"
BasicGraphicsUtils,getEtchedInsets(),static Insets,Returns the amount of space taken up by a border drawn by drawEtchedRect(),"

getEtchedInsets
public static Insets getEtchedInsets()
Returns the amount of space taken up by a border drawn by
 drawEtchedRect()

Returns:
the inset of an etched rect


"
BasicGraphicsUtils,getGrooveInsets(),static Insets,Returns the amount of space taken up by a border drawn by drawGroove(),"

getGrooveInsets
public static Insets getGrooveInsets()
Returns the amount of space taken up by a border drawn by
 drawGroove()

Returns:
the inset of a groove border


"
BasicGraphicsUtils,"getPreferredButtonSize(AbstractButton b, int textIconGap)",static Dimension,NULL,"

getPreferredButtonSize
public static Dimension getPreferredButtonSize(AbstractButton b,
                                               int textIconGap)

"
BasicHTML,"createHTMLView(JComponent c, String html)",static View,Create an html renderer for the given component and string of html.,"

createHTMLView
public static View createHTMLView(JComponent c,
                                  String html)
Create an html renderer for the given component and
 string of html.

"
BasicHTML,"getHTMLBaseline(View view, int w, int h)",static int,Returns the baseline for the html renderer.,"

getHTMLBaseline
public static int getHTMLBaseline(View view,
                                  int w,
                                  int h)
Returns the baseline for the html renderer.

Parameters:
view - the View to get the baseline for
w - the width to get the baseline for
h - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
FontMetrics, 
JComponent.getBaseline(int,int)


"
BasicHTML,isHTMLString(String s),static boolean,Check the given string to see if it should trigger the html rendering logic in a non-text component that supports html rendering.,"

isHTMLString
public static boolean isHTMLString(String s)
Check the given string to see if it should trigger the
 html rendering logic in a non-text component that supports
 html rendering.

"
BasicHTML,"updateRenderer(JComponent c, String text)",static void,Stash the HTML render for the given text into the client properties of the given JComponent.,"

updateRenderer
public static void updateRenderer(JComponent c,
                                  String text)
Stash the HTML render for the given text into the client
 properties of the given JComponent. If the given text is
 NOT HTML the property will be cleared of any
 renderer.
 
 This method is useful for ComponentUI implementations
 that are static (i.e. shared) and get their state
 entirely from the JComponent.

"
BasicIconFactory,createEmptyFrameIcon(),static Icon,NULL,"

createEmptyFrameIcon
public static Icon createEmptyFrameIcon()

"
BasicIconFactory,getCheckBoxIcon(),static Icon,NULL,"

getCheckBoxIcon
public static Icon getCheckBoxIcon()

"
BasicIconFactory,getCheckBoxMenuItemIcon(),static Icon,NULL,"

getCheckBoxMenuItemIcon
public static Icon getCheckBoxMenuItemIcon()

"
BasicIconFactory,getMenuArrowIcon(),static Icon,NULL,"

getMenuArrowIcon
public static Icon getMenuArrowIcon()

"
BasicIconFactory,getMenuItemArrowIcon(),static Icon,NULL,"

getMenuItemArrowIcon
public static Icon getMenuItemArrowIcon()

"
BasicIconFactory,getMenuItemCheckIcon(),static Icon,NULL,"

getMenuItemCheckIcon
public static Icon getMenuItemCheckIcon()

"
BasicIconFactory,getRadioButtonIcon(),static Icon,NULL,"

getRadioButtonIcon
public static Icon getRadioButtonIcon()

"
BasicIconFactory,getRadioButtonMenuItemIcon(),static Icon,NULL,"

getRadioButtonMenuItemIcon
public static Icon getRadioButtonMenuItemIcon()

"
BasicInternalFrameTitlePane,addSubComponents(),protected void,NULL,"

addSubComponents
protected void addSubComponents()

"
BasicInternalFrameTitlePane,addSystemMenuItems(JMenu systemMenu),protected void,NULL,"

addSystemMenuItems
protected void addSystemMenuItems(JMenu systemMenu)

"
BasicInternalFrameTitlePane,assembleSystemMenu(),protected void,NULL,"

assembleSystemMenu
protected void assembleSystemMenu()

"
BasicInternalFrameTitlePane,createActions(),protected void,NULL,"

createActions
protected void createActions()

"
BasicInternalFrameTitlePane,createButtons(),protected void,NULL,"

createButtons
protected void createButtons()

"
BasicInternalFrameTitlePane,createLayout(),protected LayoutManager,NULL,"

createLayout
protected LayoutManager createLayout()

"
BasicInternalFrameTitlePane,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicInternalFrameTitlePane,createSystemMenu(),protected JMenu,NULL,"

createSystemMenu
protected JMenu createSystemMenu()

"
BasicInternalFrameTitlePane,createSystemMenuBar(),protected JMenuBar,NULL,"

createSystemMenuBar
protected JMenuBar createSystemMenuBar()

"
BasicInternalFrameTitlePane,enableActions(),protected void,NULL,"

enableActions
protected void enableActions()

"
BasicInternalFrameTitlePane,"getTitle(String text, FontMetrics fm, int availTextWidth)",protected String,NULL,"

getTitle
protected String getTitle(String text,
                          FontMetrics fm,
                          int availTextWidth)

"
BasicInternalFrameTitlePane,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicInternalFrameTitlePane,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicInternalFrameTitlePane,installTitlePane(),protected void,NULL,"

installTitlePane
protected void installTitlePane()

"
BasicInternalFrameTitlePane,paintComponent(Graphics g),void,"Calls the UI delegate's paint method, if the UI delegate is non-null.","

paintComponent
public void paintComponent(Graphics g)
Description copied from class: JComponent
Calls the UI delegate's paint method, if the UI delegate
 is non-null.  We pass the delegate a copy of the
 Graphics object to protect the rest of the
 paint code from irrevocable changes
 (for example, Graphics.translate).
 
 If you override this in a subclass you should not make permanent
 changes to the passed in Graphics. For example, you
 should not alter the clip Rectangle or modify the
 transform. If you need to do these operations you may find it
 easier to create a new Graphics from the passed in
 Graphics and manipulate it. Further, if you do not
 invoker super's implementation you must honor the opaque property,
 that is
 if this component is opaque, you must completely fill in the background
 in a non-opaque color. If you do not honor the opaque property you
 will likely see visual artifacts.
 
 The passed in Graphics object might
 have a transform other than the identify transform
 installed on it.  In this case, you might get
 unexpected results if you cumulatively apply
 another transform.

Overrides:
paintComponent in class JComponent
Parameters:
g - the Graphics object to protect
See Also:
JComponent.paint(java.awt.Graphics), 
ComponentUI


"
BasicInternalFrameTitlePane,paintTitleBackground(Graphics g),protected void,Invoked from paintComponent.,"

paintTitleBackground
protected void paintTitleBackground(Graphics g)
Invoked from paintComponent.
 Paints the background of the titlepane.  All text and icons will
 then be rendered on top of this background.

Parameters:
g - the graphics to use to render the background
Since:
1.4


"
BasicInternalFrameTitlePane,postClosingEvent(JInternalFrame frame),protected void,"Post a WINDOW_CLOSING-like event to the frame, so that it can be treated like a regular Frame.","

postClosingEvent
protected void postClosingEvent(JInternalFrame frame)
Post a WINDOW_CLOSING-like event to the frame, so that it can
 be treated like a regular Frame.

"
BasicInternalFrameTitlePane,setButtonIcons(),protected void,NULL,"

setButtonIcons
protected void setButtonIcons()

"
BasicInternalFrameTitlePane,showSystemMenu(),protected void,NULL,"

showSystemMenu
protected void showSystemMenu()

"
BasicInternalFrameTitlePane,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicInternalFrameTitlePane,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicInternalFrameUI,activateFrame(JInternalFrame f),protected void,This method is called when the frame becomes selected.,"

activateFrame
protected void activateFrame(JInternalFrame f)
This method is called when the frame becomes selected.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,closeFrame(JInternalFrame f),protected void,This method is called when the user wants to close the frame.,"

closeFrame
protected void closeFrame(JInternalFrame f)
This method is called when the user wants to close the frame.
 The playCloseSound Action is fired.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,createBorderListener(JInternalFrame w),protected MouseInputAdapter,NULL,"

createBorderListener
protected MouseInputAdapter createBorderListener(JInternalFrame w)

"
BasicInternalFrameUI,createComponentListener(),protected ComponentListener,NULL,"

createComponentListener
protected ComponentListener createComponentListener()

"
BasicInternalFrameUI,createDesktopManager(),protected DesktopManager,NULL,"

createDesktopManager
protected DesktopManager createDesktopManager()

"
BasicInternalFrameUI,createEastPane(JInternalFrame w),protected JComponent,NULL,"

createEastPane
protected JComponent createEastPane(JInternalFrame w)

"
BasicInternalFrameUI,createGlassPaneDispatcher(),protected MouseInputListener,NULL,"

createGlassPaneDispatcher
protected MouseInputListener createGlassPaneDispatcher()

"
BasicInternalFrameUI,createInternalFrameListener(),protected void,NULL,"

createInternalFrameListener
protected void createInternalFrameListener()

"
BasicInternalFrameUI,createLayoutManager(),protected LayoutManager,NULL,"

createLayoutManager
protected LayoutManager createLayoutManager()

"
BasicInternalFrameUI,createNorthPane(JInternalFrame w),protected JComponent,NULL,"

createNorthPane
protected JComponent createNorthPane(JInternalFrame w)

"
BasicInternalFrameUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicInternalFrameUI,createSouthPane(JInternalFrame w),protected JComponent,NULL,"

createSouthPane
protected JComponent createSouthPane(JInternalFrame w)

"
BasicInternalFrameUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
BasicInternalFrameUI,createWestPane(JInternalFrame w),protected JComponent,NULL,"

createWestPane
protected JComponent createWestPane(JInternalFrame w)

"
BasicInternalFrameUI,deactivateFrame(JInternalFrame f),protected void,This method is called when the frame is no longer selected.,"

deactivateFrame
protected void deactivateFrame(JInternalFrame f)
This method is called when the frame is no longer selected.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,deiconifyFrame(JInternalFrame f),protected void,This method is called when the user wants to deiconify the frame.,"

deiconifyFrame
protected void deiconifyFrame(JInternalFrame f)
This method is called when the user wants to deiconify the frame.
 The playRestoreUpSound Action is fired.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,deinstallMouseHandlers(JComponent c),protected void,NULL,"

deinstallMouseHandlers
protected void deinstallMouseHandlers(JComponent c)

"
BasicInternalFrameUI,getDesktopManager(),protected DesktopManager,Returns the proper DesktopManager.,"

getDesktopManager
protected DesktopManager getDesktopManager()
Returns the proper DesktopManager. Calls getDesktopPane() to
 find the JDesktop component and returns the desktopManager from
 it. If this fails, it will return a default DesktopManager that
 should work in arbitrary parents.

"
BasicInternalFrameUI,getEastPane(),JComponent,NULL,"

getEastPane
public JComponent getEastPane()

"
BasicInternalFrameUI,getMaximumSize(JComponent x),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent x)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
x - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicInternalFrameUI,getMinimumSize(JComponent x),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent x)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
x - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicInternalFrameUI,getNorthPane(),JComponent,NULL,"

getNorthPane
public JComponent getNorthPane()

"
BasicInternalFrameUI,getPreferredSize(JComponent x),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent x)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
x - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicInternalFrameUI,getSouthPane(),JComponent,NULL,"

getSouthPane
public JComponent getSouthPane()

"
BasicInternalFrameUI,getWestPane(),JComponent,NULL,"

getWestPane
public JComponent getWestPane()

"
BasicInternalFrameUI,iconifyFrame(JInternalFrame f),protected void,This method is called when the user wants to iconify the frame.,"

iconifyFrame
protected void iconifyFrame(JInternalFrame f)
This method is called when the user wants to iconify the frame.
 The playMinimizeSound Action is fired.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

"
BasicInternalFrameUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicInternalFrameUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicInternalFrameUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Since:
1.3


"
BasicInternalFrameUI,installMouseHandlers(JComponent c),protected void,NULL,"

installMouseHandlers
protected void installMouseHandlers(JComponent c)

"
BasicInternalFrameUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicInternalFrameUI,isKeyBindingActive(),boolean,NULL,"

isKeyBindingActive
public final boolean isKeyBindingActive()

"
BasicInternalFrameUI,isKeyBindingRegistered(),protected boolean,NULL,"

isKeyBindingRegistered
protected final boolean isKeyBindingRegistered()

"
BasicInternalFrameUI,maximizeFrame(JInternalFrame f),protected void,This method is called when the user wants to maximize the frame.,"

maximizeFrame
protected void maximizeFrame(JInternalFrame f)
This method is called when the user wants to maximize the frame.
 The playMaximizeSound Action is fired.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,minimizeFrame(JInternalFrame f),protected void,This method is called when the user wants to minimize the frame.,"

minimizeFrame
protected void minimizeFrame(JInternalFrame f)
This method is called when the user wants to minimize the frame.
 The playRestoreDownSound Action is fired.
 This action is delegated to the desktopManager.

"
BasicInternalFrameUI,"replacePane(JComponent currentPane, JComponent newPane)",protected void,Installs necessary mouse handlers on newPane and adds it to the frame.,"

replacePane
protected void replacePane(JComponent currentPane,
                           JComponent newPane)
Installs necessary mouse handlers on newPane
 and adds it to the frame.
 Reverse process for the currentPane.

"
BasicInternalFrameUI,setEastPane(JComponent c),void,NULL,"

setEastPane
public void setEastPane(JComponent c)

"
BasicInternalFrameUI,setKeyBindingActive(boolean b),protected void,NULL,"

setKeyBindingActive
protected final void setKeyBindingActive(boolean b)

"
BasicInternalFrameUI,setKeyBindingRegistered(boolean b),protected void,NULL,"

setKeyBindingRegistered
protected final void setKeyBindingRegistered(boolean b)

"
BasicInternalFrameUI,setNorthPane(JComponent c),void,NULL,"

setNorthPane
public void setNorthPane(JComponent c)

"
BasicInternalFrameUI,setSouthPane(JComponent c),void,NULL,"

setSouthPane
public void setSouthPane(JComponent c)

"
BasicInternalFrameUI,setupMenuCloseKey(),protected void,NULL,"

setupMenuCloseKey
protected void setupMenuCloseKey()

"
BasicInternalFrameUI,setupMenuOpenKey(),protected void,NULL,"

setupMenuOpenKey
protected void setupMenuOpenKey()

"
BasicInternalFrameUI,setWestPane(JComponent c),void,NULL,"

setWestPane
public void setWestPane(JComponent c)

"
BasicInternalFrameUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

"
BasicInternalFrameUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicInternalFrameUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicInternalFrameUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

Since:
1.3


"
BasicInternalFrameUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicLabelUI,createUI(JComponent c),static ComponentUI,Returns an instance of BasicLabelUI.,"

createUI
public static ComponentUI createUI(JComponent c)
Returns an instance of BasicLabelUI.

Parameters:
c - a component
Returns:
an instance of BasicLabelUI


"
BasicLabelUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicLabelUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicLabelUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
getPreferredSize(c)
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicLabelUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
getPreferredSize(c)
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicLabelUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicLabelUI,installComponents(JLabel c),protected void,Registers components.,"

installComponents
protected void installComponents(JLabel c)
Registers components.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,installDefaults(JLabel c),protected void,Installs default properties.,"

installDefaults
protected void installDefaults(JLabel c)
Installs default properties.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,installKeyboardActions(JLabel l),protected void,Registers keyboard actions.,"

installKeyboardActions
protected void installKeyboardActions(JLabel l)
Registers keyboard actions.

Parameters:
l - an instance of JLabel


"
BasicLabelUI,installListeners(JLabel c),protected void,Registers listeners.,"

installListeners
protected void installListeners(JLabel c)
Registers listeners.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicLabelUI,"layoutCL(JLabel label, FontMetrics fontMetrics, String text, Icon icon, Rectangle viewR, Rectangle iconR, Rectangle textR)",protected String,Forwards the call to SwingUtilities.layoutCompoundLabel().,"

layoutCL
protected String layoutCL(JLabel label,
                          FontMetrics fontMetrics,
                          String text,
                          Icon icon,
                          Rectangle viewR,
                          Rectangle iconR,
                          Rectangle textR)
Forwards the call to SwingUtilities.layoutCompoundLabel().
 This method is here so that a subclass could do Label specific
 layout and to shorten the method name a little.

Parameters:
label - an instance of JLabel
fontMetrics - a font metrics
text - a text
icon - an icon
viewR - a bounding rectangle to lay out label
iconR - a bounding rectangle to lay out icon
textR - a bounding rectangle to lay out text
Returns:
a possibly clipped version of the compound labels string
See Also:
SwingUtilities.layoutCompoundLabel(javax.swing.JComponent, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, int, int, int, int, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle, int)


"
BasicLabelUI,"paint(Graphics g, JComponent c)",void,"Paints the label text with the foreground color, if the label is opaque then paints the entire background with the background color.","

paint
public void paint(Graphics g,
                  JComponent c)
Paints the label text with the foreground color, if the label is opaque
 then paints the entire background with the background color. The Label
 text is drawn by paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int) or paintDisabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int).
 The locations of the label parts are computed by layoutCL(javax.swing.JLabel, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle).

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int), 
paintDisabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int), 
layoutCL(javax.swing.JLabel, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle)


"
BasicLabelUI,"paintDisabledText(JLabel l, Graphics g, String s, int textX, int textY)",protected void,"Paint clippedText at textX, textY with background.lighter() and then shifted down and to the right by one pixel with background.darker().","

paintDisabledText
protected void paintDisabledText(JLabel l,
                                 Graphics g,
                                 String s,
                                 int textX,
                                 int textY)
Paint clippedText at textX, textY with background.lighter() and then
 shifted down and to the right by one pixel with background.darker().

Parameters:
l - an instance of JLabel
g - an instance of Graphics
s - a text
textX - an X coordinate
textY - an Y coordinate
See Also:
paint(java.awt.Graphics, javax.swing.JComponent), 
paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int)


"
BasicLabelUI,"paintEnabledText(JLabel l, Graphics g, String s, int textX, int textY)",protected void,"Paint clippedText at textX, textY with the labels foreground color.","

paintEnabledText
protected void paintEnabledText(JLabel l,
                                Graphics g,
                                String s,
                                int textX,
                                int textY)
Paint clippedText at textX, textY with the labels foreground color.

Parameters:
l - an instance of JLabel
g - an instance of Graphics
s - a text
textX - an X coordinate
textY - an Y coordinate
See Also:
paint(java.awt.Graphics, javax.swing.JComponent), 
paintDisabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int)


"
BasicLabelUI,propertyChange(PropertyChangeEvent e),void,This method gets called when a bound property is changed.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Description copied from interface: PropertyChangeListener
This method gets called when a bound property is changed.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
BasicLabelUI,uninstallComponents(JLabel c),protected void,Unregisters components.,"

uninstallComponents
protected void uninstallComponents(JLabel c)
Unregisters components.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,uninstallDefaults(JLabel c),protected void,Uninstalls default properties.,"

uninstallDefaults
protected void uninstallDefaults(JLabel c)
Uninstalls default properties.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,uninstallKeyboardActions(JLabel c),protected void,Unregisters keyboard actions.,"

uninstallKeyboardActions
protected void uninstallKeyboardActions(JLabel c)
Unregisters keyboard actions.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,uninstallListeners(JLabel c),protected void,Unregisters listeners.,"

uninstallListeners
protected void uninstallListeners(JLabel c)
Unregisters listeners.

Parameters:
c - an instance of JLabel


"
BasicLabelUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicListUI,convertRowToY(int row),protected int,Return the JList relative Y coordinate of the origin of the specified row or -1 if row isn't valid.,"

convertRowToY
protected int convertRowToY(int row)
Return the JList relative Y coordinate of the origin of the specified
 row or -1 if row isn't valid.

Returns:
The Y coordinate of the origin of row, or -1.
See Also:
getRowHeight(int), 
updateLayoutState()


"
BasicListUI,convertYToRow(int y0),protected int,"Convert the JList relative coordinate to the row that contains it, based on the current layout.","

convertYToRow
protected int convertYToRow(int y0)
Convert the JList relative coordinate to the row that contains it,
 based on the current layout.  If y0 doesn't fall within any row,
 return -1.

Returns:
The row that contains y0, or -1.
See Also:
getRowHeight(int), 
updateLayoutState()


"
BasicListUI,createFocusListener(),protected FocusListener,NULL,"

createFocusListener
protected FocusListener createFocusListener()

"
BasicListUI,createListDataListener(),protected ListDataListener,Creates an instance of ListDataListener that's added to the JLists by model as needed.,"

createListDataListener
protected ListDataListener createListDataListener()
Creates an instance of ListDataListener that's added to
 the JLists by model as needed.  Subclasses can override
 this method to return a custom ListDataListener, e.g.
 
 class MyListUI extends BasicListUI {
    protected ListDataListener createListDataListener() {
        return new MyListDataListener();
    }
    public class MyListDataListener extends ListDataHandler {
        public void contentsChanged(ListDataEvent e) {
            // do some extra work when the models contents change
            super.contentsChange(e);
        }
    }
 }
 

See Also:
ListDataListener, 
JList.getModel(), 
installUI(javax.swing.JComponent)


"
BasicListUI,createListSelectionListener(),protected ListSelectionListener,Creates an instance of ListSelectionHandler that's added to the JLists by selectionModel as needed.,"

createListSelectionListener
protected ListSelectionListener createListSelectionListener()
Creates an instance of ListSelectionHandler that's added to
 the JLists by selectionModel as needed.  Subclasses can override
 this method to return a custom ListSelectionListener, e.g.
 
 class MyListUI extends BasicListUI {
    protected ListSelectionListener createListSelectionListener() {
        return new MySelectionListener();
    }
    public class MySelectionListener extends ListSelectionHandler {
        public void valueChanged(ListSelectionEvent e) {
            // do some extra work when the selection changes
            super.valueChange(e);
        }
    }
 }
 

See Also:
BasicListUI.ListSelectionHandler, 
installUI(javax.swing.JComponent)


"
BasicListUI,createMouseInputListener(),protected MouseInputListener,Creates a delegate that implements MouseInputListener.,"

createMouseInputListener
protected MouseInputListener createMouseInputListener()
Creates a delegate that implements MouseInputListener.
 The delegate is added to the corresponding java.awt.Component listener
 lists at installUI() time. Subclasses can override this method to return
 a custom MouseInputListener, e.g.
 
 class MyListUI extends BasicListUI {
    protected MouseInputListener createMouseInputListener() {
        return new MyMouseInputHandler();
    }
    public class MyMouseInputHandler extends MouseInputHandler {
        public void mouseMoved(MouseEvent e) {
            // do some extra work when the mouse moves
            super.mouseMoved(e);
        }
    }
 }
 

See Also:
BasicListUI.MouseInputHandler, 
installUI(javax.swing.JComponent)


"
BasicListUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates an instance of PropertyChangeHandler that's added to the JList by installUI().,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates an instance of PropertyChangeHandler that's added to
 the JList by installUI().  Subclasses can override this method
 to return a custom PropertyChangeListener, e.g.
 
 class MyListUI extends BasicListUI {
    protected PropertyChangeListener createPropertyChangeListener() {
        return new MyPropertyChangeListener();
    }
    public class MyPropertyChangeListener extends PropertyChangeHandler {
        public void propertyChange(PropertyChangeEvent e) {
            if (e.getPropertyName().equals(""model"")) {
                // do some extra work when the model changes
            }
            super.propertyChange(e);
        }
    }
 }
 

See Also:
PropertyChangeListener, 
installUI(javax.swing.JComponent)


"
BasicListUI,createUI(JComponent list),static ComponentUI,Returns a new instance of BasicListUI.,"

createUI
public static ComponentUI createUI(JComponent list)
Returns a new instance of BasicListUI.  BasicListUI delegates are
 allocated one per JList.

Returns:
A new ListUI implementation for the Windows look and feel.


"
BasicListUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicListUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicListUI,"getCellBounds(JList list, int index1, int index2)",Rectangle,"Returns the bounding rectangle, in the given list's coordinate system, for the range of cells specified by the two indices.","

getCellBounds
public Rectangle getCellBounds(JList list,
                               int index1,
                               int index2)
Returns the bounding rectangle, in the given list's coordinate system,
 for the range of cells specified by the two indices.
 The indices can be supplied in any order.
 
 If the smaller index is outside the list's range of cells, this method
 returns null. If the smaller index is valid, but the larger
 index is outside the list's range, the bounds of just the first index
 is returned. Otherwise, the bounds of the valid range is returned.

Specified by:
getCellBounds in class ListUI
Parameters:
list - the list
index1 - the first index in the range
index2 - the second index in the range
Returns:
the bounding rectangle for the range of cells, or null


"
BasicListUI,getPreferredSize(JComponent c),Dimension,The preferredSize of the list depends upon the layout orientation.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
The preferredSize of the list depends upon the layout orientation.
 
Layout OrientationPreferred Size

JList.VERTICAL
   The preferredSize of the list is total height of the rows
       and the maximum width of the cells.  If JList.fixedCellHeight
       is specified then the total height of the rows is just
       (cellVerticalMargins + fixedCellHeight) * model.getSize() where
       rowVerticalMargins is the space we allocate for drawing
       the yellow focus outline.  Similarly if fixedCellWidth is
       specified then we just use that.
   

JList.VERTICAL_WRAP
   If the visible row count is greater than zero, the preferredHeight
       is the maximum cell height * visibleRowCount. If the visible row
       count is <= 0, the preferred height is either the current height
       of the list, or the maximum cell height, whichever is
       bigger. The preferred width is than the maximum cell width *
       number of columns needed. Where the number of columns needs is
       list.height / max cell height. Max cell height is either the fixed
       cell height, or is determined by iterating through all the cells
       to find the maximum height from the ListCellRenderer.
 
JList.HORIZONTAL_WRAP
   If the visible row count is greater than zero, the preferredHeight
       is the maximum cell height * adjustedRowCount.  Where
       visibleRowCount is used to determine the number of columns.
       Because this lays out horizontally the number of rows is
       then determined from the column count.  For example, lets say
       you have a model with 10 items and the visible row count is 8.
       The number of columns needed to display this is 2, but you no
       longer need 8 rows to display this, you only need 5, thus
       the adjustedRowCount is 5.
       If the visible row
       count is <= 0, the preferred height is dictated by the
       number of columns, which will be as many as can fit in the width
       of the JList (width / max cell width), with at
       least one column.  The preferred height then becomes the
       model size / number of columns * maximum cell height.
       Max cell height is either the fixed
       cell height, or is determined by iterating through all the cells
       to find the maximum height from the ListCellRenderer.
 
 The above specifies the raw preferred width and height. The resulting
 preferred width is the above width + insets.left + insets.right and
 the resulting preferred height is the above height + insets.top +
 insets.bottom. Where the Insets are determined from
 list.getInsets().

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - The JList component.
Returns:
The total size of the list.
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicListUI,getRowHeight(int row),protected int,Returns the height of the specified row based on the current layout.,"

getRowHeight
protected int getRowHeight(int row)
Returns the height of the specified row based on the current layout.

Returns:
The specified row height or -1 if row isn't valid.
See Also:
convertYToRow(int), 
convertRowToY(int), 
updateLayoutState()


"
BasicListUI,"indexToLocation(JList list, int index)",Point,"Returns the origin in the given JList, of the specified item, in the list's coordinate system.","

indexToLocation
public Point indexToLocation(JList list,
                             int index)
Returns the origin in the given JList, of the specified item,
 in the list's coordinate system.
 Returns null if the index isn't valid.

Specified by:
indexToLocation in class ListUI
Parameters:
list - the list
index - the cell index
Returns:
the origin of the cell, or null


"
BasicListUI,installDefaults(),protected void,"Initializes list properties such as font, foreground, and background, and adds the CellRendererPane.","

installDefaults
protected void installDefaults()
Initializes list properties such as font, foreground, and background,
 and adds the CellRendererPane. The font, foreground, and background
 properties are only set if their current value is either null
 or a UIResource, other properties are set if the current
 value is null.

See Also:
uninstallDefaults(), 
installUI(javax.swing.JComponent), 
CellRendererPane


"
BasicListUI,installKeyboardActions(),protected void,Registers the keyboard bindings on the JList that the BasicListUI is associated with.,"

installKeyboardActions
protected void installKeyboardActions()
Registers the keyboard bindings on the JList that the
 BasicListUI is associated with. This method is called at
 installUI() time.

See Also:
installUI(javax.swing.JComponent)


"
BasicListUI,installListeners(),protected void,"Creates and installs the listeners for the JList, its model, and its selectionModel.","

installListeners
protected void installListeners()
Creates and installs the listeners for the JList, its model, and its
 selectionModel.  This method is called at installUI() time.

See Also:
installUI(javax.swing.JComponent), 
uninstallListeners()


"
BasicListUI,installUI(JComponent c),void,"Initializes this.list by calling installDefaults(), installListeners(), and installKeyboardActions() in order.","

installUI
public void installUI(JComponent c)
Initializes this.list by calling installDefaults(),
 installListeners(), and installKeyboardActions()
 in order.

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
installDefaults(), 
installListeners(), 
installKeyboardActions()


"
BasicListUI,"locationToIndex(JList list, Point location)",int,Returns the cell index in the specified JList closest to the given location in the list's coordinate system.,"

locationToIndex
public int locationToIndex(JList list,
                           Point location)
Returns the cell index in the specified JList closest to the
 given location in the list's coordinate system. To determine if the
 cell actually contains the specified location, compare the point against
 the cell's bounds, as provided by getCellBounds.
 This method returns -1 if the list's model is empty.

Specified by:
locationToIndex in class ListUI
Parameters:
list - the list
location - the coordinates of the point
Returns:
the cell index closest to the given location, or -1
Throws:
NullPointerException - if location is null


"
BasicListUI,maybeUpdateLayoutState(),protected void,"If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset updateLayoutStateNeeded.","

maybeUpdateLayoutState
protected void maybeUpdateLayoutState()
If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset
 updateLayoutStateNeeded.  This method should be called by methods
 before doing any computation based on the geometry of the list.
 For example it's the first call in paint() and getPreferredSize().

See Also:
updateLayoutState()


"
BasicListUI,"paint(Graphics g, JComponent c)",void,Paint the rows that intersect the Graphics objects clipRect.,"

paint
public void paint(Graphics g,
                  JComponent c)
Paint the rows that intersect the Graphics objects clipRect.  This
 method calls paintCell as necessary.  Subclasses
 may want to override these methods.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paintCell(java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int)


"
BasicListUI,"paintCell(Graphics g, int row, Rectangle rowBounds, ListCellRenderer cellRenderer, ListModel dataModel, ListSelectionModel selModel, int leadIndex)",protected void,"Paint one List cell: compute the relevant state, get the ""rubber stamp"" cell renderer component, and then use the CellRendererPane to paint it.","

paintCell
protected void paintCell(Graphics g,
                         int row,
                         Rectangle rowBounds,
                         ListCellRenderer cellRenderer,
                         ListModel dataModel,
                         ListSelectionModel selModel,
                         int leadIndex)
Paint one List cell: compute the relevant state, get the ""rubber stamp""
 cell renderer component, and then use the CellRendererPane to paint it.
 Subclasses may want to override this method rather than paint().

See Also:
paint(java.awt.Graphics, javax.swing.JComponent)


"
BasicListUI,selectNextIndex(),protected void,Selected the previous row and force it to be visible.,"

selectNextIndex
protected void selectNextIndex()
Selected the previous row and force it to be visible.

See Also:
JList.ensureIndexIsVisible(int)


"
BasicListUI,selectPreviousIndex(),protected void,Selected the previous row and force it to be visible.,"

selectPreviousIndex
protected void selectPreviousIndex()
Selected the previous row and force it to be visible.

See Also:
JList.ensureIndexIsVisible(int)


"
BasicListUI,uninstallDefaults(),protected void,Sets the list properties that have not been explicitly overridden to null.,"

uninstallDefaults
protected void uninstallDefaults()
Sets the list properties that have not been explicitly overridden to
 null. A property is considered overridden if its current value
 is not a UIResource.

See Also:
installDefaults(), 
uninstallUI(javax.swing.JComponent), 
CellRendererPane


"
BasicListUI,uninstallKeyboardActions(),protected void,Unregisters keyboard actions installed from installKeyboardActions.,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()
Unregisters keyboard actions installed from
 installKeyboardActions.
 This method is called at uninstallUI() time - subclassess should
 ensure that all of the keyboard actions registered at installUI
 time are removed here.

See Also:
installUI(javax.swing.JComponent)


"
BasicListUI,uninstallListeners(),protected void,"Removes the listeners from the JList, its model, and its selectionModel.","

uninstallListeners
protected void uninstallListeners()
Removes the listeners from the JList, its model, and its
 selectionModel.  All of the listener fields, are reset to
 null here.  This method is called at uninstallUI() time,
 it should be kept in sync with installListeners.

See Also:
uninstallUI(javax.swing.JComponent), 
installListeners()


"
BasicListUI,uninstallUI(JComponent c),void,"Uninitializes this.list by calling uninstallListeners(), uninstallKeyboardActions(), and uninstallDefaults() in order.","

uninstallUI
public void uninstallUI(JComponent c)
Uninitializes this.list by calling uninstallListeners(),
 uninstallKeyboardActions(), and uninstallDefaults()
 in order.  Sets this.list to null.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
uninstallListeners(), 
uninstallKeyboardActions(), 
uninstallDefaults()


"
BasicListUI,updateLayoutState(),protected void,"Recompute the value of cellHeight or cellHeights based and cellWidth, based on the current font and the current values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.","

updateLayoutState
protected void updateLayoutState()
Recompute the value of cellHeight or cellHeights based
 and cellWidth, based on the current font and the current
 values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.

See Also:
maybeUpdateLayoutState()


"
BasicLookAndFeel,createAudioAction(Object key),protected Action,Creates and returns an Action used to play a sound.,"

createAudioAction
protected Action createAudioAction(Object key)
Creates and returns an Action used to play a sound.
 
 If key is non-null, an Action is created
 using the value from the defaults with key key. The value
 identifies the sound resource to load when
 actionPerformed is invoked on the Action. The
 sound resource is loaded into a byte[] by way of
 getClass().getResourceAsStream().

Parameters:
key - the key identifying the audio action
Returns:
an Action used to play the source, or null
              if key is null
Since:
1.4
See Also:
playSound(Action)


"
BasicLookAndFeel,getAudioActionMap(),protected ActionMap,Returns an ActionMap containing the audio actions for this look and feel.,"

getAudioActionMap
protected ActionMap getAudioActionMap()
Returns an ActionMap containing the audio actions
 for this look and feel.
 
 The returned ActionMap contains Actions that
 embody the ability to render an auditory cue. These auditory
 cues map onto user and system activities that may be useful
 for an end user to know about (such as a dialog box appearing).
 
 At the appropriate time,
 the ComponentUI is responsible for obtaining an
 Action out of the ActionMap and passing
 it to playSound.
 
 This method first looks up the ActionMap from the
 defaults using the key ""AuditoryCues.actionMap"".
 
 If the value is non-null, it is returned. If the value
 of the default ""AuditoryCues.actionMap"" is null
 and the value of the default ""AuditoryCues.cueList"" is
 non-null, an ActionMapUIResource is created and
 populated. Population is done by iterating over each of the
 elements of the ""AuditoryCues.cueList"" array, and
 invoking createAudioAction() to create an Action for each element.  The resulting Action is
 placed in the ActionMapUIResource, using the array
 element as the key.  For example, if the ""AuditoryCues.cueList"" array contains a single-element, ""audioKey"", the ActionMapUIResource is created, then
 populated by way of actionMap.put(cueList[0],
 createAudioAction(cueList[0])).
 
 If the value of the default ""AuditoryCues.actionMap"" is
 null and the value of the default
 ""AuditoryCues.cueList"" is null, an empty
 ActionMapUIResource is created.

Returns:
an ActionMap containing Actions
              responsible for playing auditory cues
Throws:
ClassCastException - if the value of the
         default ""AuditoryCues.actionMap"" is not an
         ActionMap, or the value of the default
         ""AuditoryCues.cueList"" is not an Object[]
Since:
1.4
See Also:
createAudioAction(java.lang.Object), 
playSound(Action)


"
BasicLookAndFeel,getDefaults(),UIDefaults,Returns the look and feel defaults.,"

getDefaults
public UIDefaults getDefaults()
Returns the look and feel defaults. The returned UIDefaults
 is populated by invoking, in order, initClassDefaults,
 initSystemColorDefaults and initComponentDefaults.
 
 While this method is public, it should only be invoked by the
 UIManager when the look and feel is set as the current
 look and feel and after initialize has been invoked.

Overrides:
getDefaults in class LookAndFeel
Returns:
the look and feel defaults
See Also:
initClassDefaults(javax.swing.UIDefaults), 
initSystemColorDefaults(javax.swing.UIDefaults), 
initComponentDefaults(javax.swing.UIDefaults)


"
BasicLookAndFeel,initClassDefaults(UIDefaults table),protected void,Populates table with mappings from uiClassID to the fully qualified name of the ui class.,"

initClassDefaults
protected void initClassDefaults(UIDefaults table)
Populates table with mappings from uiClassID to the
 fully qualified name of the ui class. The value for a
 particular uiClassID is ""javax.swing.plaf.basic.Basic + uiClassID"". For example, the
 value for the uiClassID TreeUI is ""javax.swing.plaf.basic.BasicTreeUI"".

Parameters:
table - the UIDefaults instance the entries are
        added to
Throws:
NullPointerException - if table is null
See Also:
LookAndFeel, 
getDefaults()


"
BasicLookAndFeel,initComponentDefaults(UIDefaults table),protected void,Populates table with the defaults for the basic look and feel.,"

initComponentDefaults
protected void initComponentDefaults(UIDefaults table)
Populates table with the defaults for the basic look and
 feel.

Parameters:
table - the UIDefaults to add the values to
Throws:
NullPointerException - if table is null


"
BasicLookAndFeel,initialize(),void,Initializes the look and feel.,"

initialize
public void initialize()
Initializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when a
 look and feel is installed as the current look and feel. This
 method is invoked before the UIManager invokes
 getDefaults. This method is intended to perform any
 initialization for the look and feel. Subclasses
 should do any one-time setup they need here, rather than
 in a static initializer, because look and feel class objects
 may be loaded just to discover that isSupportedLookAndFeel()
 returns false.

Overrides:
initialize in class LookAndFeel
See Also:
LookAndFeel.uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
BasicLookAndFeel,initSystemColorDefaults(UIDefaults table),protected void,Populates table with system colors.,"

initSystemColorDefaults
protected void initSystemColorDefaults(UIDefaults table)
Populates table with system colors. This creates an
 array of name-color pairs and invokes loadSystemColors.
 
 The name is a String that corresponds to the name of
 one of the static SystemColor fields in the SystemColor class.  A name-color pair is created for every
 such SystemColor field.
 
 The color corresponds to a hex String as
 understood by Color.decode. For example, one of the
 name-color pairs is ""desktop""-""#005C5C"". This corresponds to the SystemColor field desktop, with a color value of
 new Color(0x005C5C).
 
 The following shows two of the name-color pairs:
 
   String[] nameColorPairs = new String[] {
          ""desktop"", ""#005C5C"",
    ""activeCaption"", ""#000080"" };
   loadSystemColors(table, nameColorPairs, isNativeLookAndFeel());
 

 As previously stated, this invokes loadSystemColors
 with the supplied table and name-color pair
 array. The last argument to loadSystemColors indicates
 whether the value of the field in SystemColor should be
 used. This method passes the value of isNativeLookAndFeel() as the last argument to loadSystemColors.

Parameters:
table - the UIDefaults object the values are added to
Throws:
NullPointerException - if table is null
See Also:
SystemColor, 
getDefaults(), 
loadSystemColors(javax.swing.UIDefaults, java.lang.String[], boolean)


"
BasicLookAndFeel,"loadSystemColors(UIDefaults table, String[] systemColors, boolean useNative)",protected void,Populates table with the name-color pairs in systemColors.,"

loadSystemColors
protected void loadSystemColors(UIDefaults table,
                                String[] systemColors,
                                boolean useNative)
Populates table with the name-color pairs in
 systemColors. Refer to
 initSystemColorDefaults(UIDefaults) for details on
 the format of systemColors.
 
 An entry is added to table for each of the name-color
 pairs in systemColors. The entry key is
 the name of the name-color pair.
 
 The value of the entry corresponds to the color of the
 name-color pair.  The value of the entry is calculated
 in one of two ways. With either approach the value is always a
 ColorUIResource.
 
 If useNative is false, the color is
 created by using Color.decode to convert the String into a Color. If decode can not convert
 the String into a Color (NumberFormatException is thrown) then a ColorUIResource of black is used.
 
 If useNative is true, the color is the
 value of the field in SystemColor with the same name as
 the name of the name-color pair. If the field
 is not valid, a ColorUIResource of black is used.

Parameters:
table - the UIDefaults object the values are added to
systemColors - array of name-color pairs as described
        in initSystemColorDefaults(UIDefaults)
useNative - whether the color is obtained from SystemColor
        or Color.decode
Throws:
NullPointerException - if systemColors is null; or
         systemColors is not empty, and table is
         null; or one of the
         names of the name-color pairs is null; or
         useNative is false and one of the
         colors of the name-color pairs is null
ArrayIndexOutOfBoundsException - if useNative is
         false and systemColors.length is odd
See Also:
initSystemColorDefaults(javax.swing.UIDefaults), 
SystemColor, 
Color.decode(String)


"
BasicLookAndFeel,playSound(Action audioAction),protected void,"If necessary, invokes actionPerformed on audioAction to play a sound.","

playSound
protected void playSound(Action audioAction)
If necessary, invokes actionPerformed on
 audioAction to play a sound.
 The actionPerformed method is invoked if the value of
 the ""AuditoryCues.playList"" default is a non-null Object[] containing a String entry
 equal to the name of the audioAction.

Parameters:
audioAction - an Action that knows how to render the audio
                    associated with the system or user activity
                    that is occurring; a value of null, is
                    ignored
Throws:
ClassCastException - if audioAction is non-null
         and the value of the default ""AuditoryCues.playList""
         is not an Object[]
Since:
1.4


"
BasicLookAndFeel,uninitialize(),void,Uninitializes the look and feel.,"

uninitialize
public void uninitialize()
Uninitializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when
 the look and feel is uninstalled. For example,
 UIManager.setLookAndFeel invokes this when the look and
 feel is changed.
 
 Subclasses may choose to free up some resources here.

Overrides:
uninitialize in class LookAndFeel
See Also:
LookAndFeel.initialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
BasicMenuBarUI,createChangeListener(),protected ChangeListener,NULL,"

createChangeListener
protected ChangeListener createChangeListener()

"
BasicMenuBarUI,createContainerListener(),protected ContainerListener,NULL,"

createContainerListener
protected ContainerListener createContainerListener()

"
BasicMenuBarUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicMenuBarUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicMenuBarUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicMenuBarUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicMenuBarUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicMenuBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicMenuBarUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicMenuBarUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicMenuBarUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicMenuBarUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicMenuBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicMenuItemUI,createMenuDragMouseListener(JComponent c),protected MenuDragMouseListener,NULL,"

createMenuDragMouseListener
protected MenuDragMouseListener createMenuDragMouseListener(JComponent c)

"
BasicMenuItemUI,createMenuKeyListener(JComponent c),protected MenuKeyListener,NULL,"

createMenuKeyListener
protected MenuKeyListener createMenuKeyListener(JComponent c)

"
BasicMenuItemUI,createMouseInputListener(JComponent c),protected MouseInputListener,NULL,"

createMouseInputListener
protected MouseInputListener createMouseInputListener(JComponent c)

"
BasicMenuItemUI,createPropertyChangeListener(JComponent c),protected PropertyChangeListener,Creates a PropertyChangeListener which will be added to the menu item.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener(JComponent c)
Creates a PropertyChangeListener which will be added to
 the menu item.
 If this method returns null then it will not be added to the menu item.

Returns:
an instance of a PropertyChangeListener or null
Since:
1.6


"
BasicMenuItemUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicMenuItemUI,doClick(MenuSelectionManager msm),protected void,Call this method when a menu item is to be activated.,"

doClick
protected void doClick(MenuSelectionManager msm)
Call this method when a menu item is to be activated.
 This method handles some of the details of menu item activation
 such as clearing the selected path and messaging the
 JMenuItem's doClick() method.

Parameters:
msm - A MenuSelectionManager. The visual feedback and
             internal bookkeeping tasks are delegated to
             this MenuSelectionManager. If null is
             passed as this argument, the
             MenuSelectionManager.defaultManager is
             used.
Since:
1.4
See Also:
MenuSelectionManager, 
AbstractButton.doClick(int)


"
BasicMenuItemUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicMenuItemUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicMenuItemUI,getPath(),MenuElement[],NULL,"

getPath
public MenuElement[] getPath()

"
BasicMenuItemUI,"getPreferredMenuItemSize(JComponent c, Icon checkIcon, Icon arrowIcon, int defaultTextIconGap)",protected Dimension,NULL,"

getPreferredMenuItemSize
protected Dimension getPreferredMenuItemSize(JComponent c,
                                             Icon checkIcon,
                                             Icon arrowIcon,
                                             int defaultTextIconGap)

"
BasicMenuItemUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicMenuItemUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

"
BasicMenuItemUI,installComponents(JMenuItem menuItem),protected void,NULL,"

installComponents
protected void installComponents(JMenuItem menuItem)

Since:
1.3


"
BasicMenuItemUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicMenuItemUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicMenuItemUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicMenuItemUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicMenuItemUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicMenuItemUI,"paintBackground(Graphics g, JMenuItem menuItem, Color bgColor)",protected void,Draws the background of the menu item.,"

paintBackground
protected void paintBackground(Graphics g,
                               JMenuItem menuItem,
                               Color bgColor)
Draws the background of the menu item.

Parameters:
g - the paint graphics
menuItem - menu item to be painted
bgColor - selection background color
Since:
1.4


"
BasicMenuItemUI,"paintMenuItem(Graphics g, JComponent c, Icon checkIcon, Icon arrowIcon, Color background, Color foreground, int defaultTextIconGap)",protected void,NULL,"

paintMenuItem
protected void paintMenuItem(Graphics g,
                             JComponent c,
                             Icon checkIcon,
                             Icon arrowIcon,
                             Color background,
                             Color foreground,
                             int defaultTextIconGap)

"
BasicMenuItemUI,"paintText(Graphics g, JMenuItem menuItem, Rectangle textRect, String text)",protected void,Renders the text of the current menu item.,"

paintText
protected void paintText(Graphics g,
                         JMenuItem menuItem,
                         Rectangle textRect,
                         String text)
Renders the text of the current menu item.
 

Parameters:
g - graphics context
menuItem - menu item to render
textRect - bounding rectangle for rendering the text
text - string to render
Since:
1.4


"
BasicMenuItemUI,uninstallComponents(JMenuItem menuItem),protected void,NULL,"

uninstallComponents
protected void uninstallComponents(JMenuItem menuItem)

Since:
1.3


"
BasicMenuItemUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicMenuItemUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicMenuItemUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicMenuItemUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicMenuItemUI,"update(Graphics g, JComponent c)",void,We draw the background in paintMenuItem() so override update (which fills the background of opaque components by default) to just call paint().,"

update
public void update(Graphics g,
                   JComponent c)
We draw the background in paintMenuItem()
 so override update (which fills the background of opaque
 components by default) to just call paint().

Overrides:
update in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
BasicMenuUI,createChangeListener(JComponent c),protected ChangeListener,NULL,"

createChangeListener
protected ChangeListener createChangeListener(JComponent c)

"
BasicMenuUI,createMenuDragMouseListener(JComponent c),protected MenuDragMouseListener,NULL,"

createMenuDragMouseListener
protected MenuDragMouseListener createMenuDragMouseListener(JComponent c)

Overrides:
createMenuDragMouseListener in class BasicMenuItemUI


"
BasicMenuUI,createMenuKeyListener(JComponent c),protected MenuKeyListener,NULL,"

createMenuKeyListener
protected MenuKeyListener createMenuKeyListener(JComponent c)

Overrides:
createMenuKeyListener in class BasicMenuItemUI


"
BasicMenuUI,createMenuListener(JComponent c),protected MenuListener,NULL,"

createMenuListener
protected MenuListener createMenuListener(JComponent c)

"
BasicMenuUI,createMouseInputListener(JComponent c),protected MouseInputListener,NULL,"

createMouseInputListener
protected MouseInputListener createMouseInputListener(JComponent c)

Overrides:
createMouseInputListener in class BasicMenuItemUI


"
BasicMenuUI,createPropertyChangeListener(JComponent c),protected PropertyChangeListener,Creates a PropertyChangeListener which will be added to the menu item.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener(JComponent c)
Description copied from class: BasicMenuItemUI
Creates a PropertyChangeListener which will be added to
 the menu item.
 If this method returns null then it will not be added to the menu item.

Overrides:
createPropertyChangeListener in class BasicMenuItemUI
Returns:
an instance of a PropertyChangeListener or null


"
BasicMenuUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicMenuUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class BasicMenuItemUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicMenuUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicMenuItemUI


"
BasicMenuUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

Overrides:
installDefaults in class BasicMenuItemUI


"
BasicMenuUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

Overrides:
installKeyboardActions in class BasicMenuItemUI


"
BasicMenuUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

Overrides:
installListeners in class BasicMenuItemUI


"
BasicMenuUI,setupPostTimer(JMenu menu),protected void,NULL,"

setupPostTimer
protected void setupPostTimer(JMenu menu)

"
BasicMenuUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

Overrides:
uninstallDefaults in class BasicMenuItemUI


"
BasicMenuUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

Overrides:
uninstallKeyboardActions in class BasicMenuItemUI


"
BasicMenuUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

Overrides:
uninstallListeners in class BasicMenuItemUI


"
BasicOptionPaneUI,"addButtonComponents(Container container, Object[] buttons, int initialIndex)",protected void,Creates the appropriate object to represent each of the objects in buttons and adds it to container.,"

addButtonComponents
protected void addButtonComponents(Container container,
                                   Object[] buttons,
                                   int initialIndex)
Creates the appropriate object to represent each of the objects in
 buttons and adds it to container. This
 differs from addMessageComponents in that it will recurse on
 buttons and that if button is not a Component
 it will create an instance of JButton.

"
BasicOptionPaneUI,addIcon(Container top),protected void,Creates and adds a JLabel representing the icon returned from getIcon to top.,"

addIcon
protected void addIcon(Container top)
Creates and adds a JLabel representing the icon returned from
 getIcon to top. This is messaged from
 createMessageArea

"
BasicOptionPaneUI,"addMessageComponents(Container container, GridBagConstraints cons, Object msg, int maxll, boolean internallyCreated)",protected void,Creates the appropriate object to represent msg and places it into container.,"

addMessageComponents
protected void addMessageComponents(Container container,
                                    GridBagConstraints cons,
                                    Object msg,
                                    int maxll,
                                    boolean internallyCreated)
Creates the appropriate object to represent msg and
 places it into container. If msg is an
 instance of Component, it is added directly, if it is an Icon,
 a JLabel is created to represent it, otherwise a JLabel is
 created for the string, if d is an Object[], this
 method will be recursively invoked for the children.
 internallyCreated is true if Objc is an instance
 of Component and was created internally by this method (this is
 used to correctly set hasCustomComponents only if !internallyCreated).

"
BasicOptionPaneUI,"burstStringInto(Container c, String d, int maxll)",protected void,Recursively creates new JLabel instances to represent d.,"

burstStringInto
protected void burstStringInto(Container c,
                               String d,
                               int maxll)
Recursively creates new JLabel instances to represent d.
 Each JLabel instance is added to c.

"
BasicOptionPaneUI,containsCustomComponents(JOptionPane op),boolean,Returns true if in the last call to validateComponent the message or buttons contained a subclass of Component.,"

containsCustomComponents
public boolean containsCustomComponents(JOptionPane op)
Returns true if in the last call to validateComponent the message
 or buttons contained a subclass of Component.

Specified by:
containsCustomComponents in class OptionPaneUI


"
BasicOptionPaneUI,createButtonActionListener(int buttonIndex),protected ActionListener,NULL,"

createButtonActionListener
protected ActionListener createButtonActionListener(int buttonIndex)

"
BasicOptionPaneUI,createButtonArea(),protected Container,Creates and returns a Container containing the buttons.,"

createButtonArea
protected Container createButtonArea()
Creates and returns a Container containing the buttons. The buttons
 are created by calling getButtons.

"
BasicOptionPaneUI,createLayoutManager(),protected LayoutManager,NULL,"

createLayoutManager
protected LayoutManager createLayoutManager()

"
BasicOptionPaneUI,createMessageArea(),protected Container,Messaged from installComponents to create a Container containing the body of the message.,"

createMessageArea
protected Container createMessageArea()
Messaged from installComponents to create a Container containing the
 body of the message. The icon is the created by calling
 addIcon.

"
BasicOptionPaneUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicOptionPaneUI,createSeparator(),protected Container,NULL,"

createSeparator
protected Container createSeparator()

"
BasicOptionPaneUI,createUI(JComponent x),static ComponentUI,Creates a new BasicOptionPaneUI instance.,"

createUI
public static ComponentUI createUI(JComponent x)
Creates a new BasicOptionPaneUI instance.

"
BasicOptionPaneUI,getButtons(),protected Object[],Returns the buttons to display from the JOptionPane the receiver is providing the look and feel for.,"

getButtons
protected Object[] getButtons()
Returns the buttons to display from the JOptionPane the receiver is
 providing the look and feel for. If the JOptionPane has options
 set, they will be provided, otherwise if the optionType is
 YES_NO_OPTION, yesNoOptions is returned, if the type is
 YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, otherwise
 defaultButtons are returned.

"
BasicOptionPaneUI,getIcon(),protected Icon,"Returns the icon from the JOptionPane the receiver is providing the look and feel for, or the default icon as returned from getDefaultIcon.","

getIcon
protected Icon getIcon()
Returns the icon from the JOptionPane the receiver is providing
 the look and feel for, or the default icon as returned from
 getDefaultIcon.

"
BasicOptionPaneUI,getIconForType(int messageType),protected Icon,Returns the icon to use for the passed in type.,"

getIconForType
protected Icon getIconForType(int messageType)
Returns the icon to use for the passed in type.

"
BasicOptionPaneUI,getInitialValueIndex(),protected int,Returns the initial index into the buttons to select.,"

getInitialValueIndex
protected int getInitialValueIndex()
Returns the initial index into the buttons to select. The index
 is calculated from the initial value from the JOptionPane and
 options of the JOptionPane or 0.

"
BasicOptionPaneUI,getMaxCharactersPerLineCount(),protected int,Returns the maximum number of characters to place on a line.,"

getMaxCharactersPerLineCount
protected int getMaxCharactersPerLineCount()
Returns the maximum number of characters to place on a line.

"
BasicOptionPaneUI,getMessage(),protected Object,Returns the message to display from the JOptionPane the receiver is providing the look and feel for.,"

getMessage
protected Object getMessage()
Returns the message to display from the JOptionPane the receiver is
 providing the look and feel for.

"
BasicOptionPaneUI,getMinimumOptionPaneSize(),Dimension,Returns the minimum size the option pane should be.,"

getMinimumOptionPaneSize
public Dimension getMinimumOptionPaneSize()
Returns the minimum size the option pane should be. Primarily
 provided for subclassers wishing to offer a different minimum size.

"
BasicOptionPaneUI,getPreferredSize(JComponent c),Dimension,"If c is the JOptionPane the receiver is contained in, the preferred size that is returned is the maximum of the preferred size of the LayoutManager for the JOptionPane, and getMinimumOptionPaneSize.","

getPreferredSize
public Dimension getPreferredSize(JComponent c)
If c is the JOptionPane the receiver
 is contained in, the preferred
 size that is returned is the maximum of the preferred size of
 the LayoutManager for the JOptionPane, and
 getMinimumOptionPaneSize.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicOptionPaneUI,getSizeButtonsToSameWidth(),protected boolean,"Returns true, basic L&F wants all the buttons to have the same width.","

getSizeButtonsToSameWidth
protected boolean getSizeButtonsToSameWidth()
Returns true, basic L&F wants all the buttons to have the same
 width.

"
BasicOptionPaneUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

"
BasicOptionPaneUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicOptionPaneUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicOptionPaneUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicOptionPaneUI,installUI(JComponent c),void,Installs the receiver as the L&F for the passed in JOptionPane.,"

installUI
public void installUI(JComponent c)
Installs the receiver as the L&F for the passed in
 JOptionPane.

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicOptionPaneUI,resetInputValue(),protected void,Sets the input value in the option pane the receiver is providing the look and feel for based on the value in the inputComponent.,"

resetInputValue
protected void resetInputValue()
Sets the input value in the option pane the receiver is providing
 the look and feel for based on the value in the inputComponent.

"
BasicOptionPaneUI,selectInitialValue(JOptionPane op),void,"If inputComponent is non-null, the focus is requested on that, otherwise request focus on the default value","

selectInitialValue
public void selectInitialValue(JOptionPane op)
If inputComponent is non-null, the focus is requested on that,
 otherwise request focus on the default value

Specified by:
selectInitialValue in class OptionPaneUI


"
BasicOptionPaneUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

"
BasicOptionPaneUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicOptionPaneUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicOptionPaneUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicOptionPaneUI,uninstallUI(JComponent c),void,Removes the receiver from the L&F controller of the passed in split pane.,"

uninstallUI
public void uninstallUI(JComponent c)
Removes the receiver from the L&F controller of the passed in split
 pane.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicOptionPaneUI.ButtonAreaLayout,"addLayoutComponent(String string, Component comp)",void,"If the layout manager uses a per-component string, adds the component comp to the layout, associating it with the string specified by name.","

addLayoutComponent
public void addLayoutComponent(String string,
                               Component comp)
Description copied from interface: LayoutManager
If the layout manager uses a per-component string,
 adds the component comp to the layout,
 associating it
 with the string specified by name.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
string - the string to be associated with the component
comp - the component to be added


"
BasicOptionPaneUI.ButtonAreaLayout,getCentersChildren(),boolean,NULL,"

getCentersChildren
public boolean getCentersChildren()

"
BasicOptionPaneUI.ButtonAreaLayout,getPadding(),int,NULL,"

getPadding
public int getPadding()

"
BasicOptionPaneUI.ButtonAreaLayout,getSyncAllWidths(),boolean,NULL,"

getSyncAllWidths
public boolean getSyncAllWidths()

"
BasicOptionPaneUI.ButtonAreaLayout,layoutContainer(Container container),void,Lays out the specified container.,"

layoutContainer
public void layoutContainer(Container container)
Description copied from interface: LayoutManager
Lays out the specified container.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
container - the container to be laid out


"
BasicOptionPaneUI.ButtonAreaLayout,minimumLayoutSize(Container c),Dimension,"Calculates the minimum size dimensions for the specified container, given the components it contains.","

minimumLayoutSize
public Dimension minimumLayoutSize(Container c)
Description copied from interface: LayoutManager
Calculates the minimum size dimensions for the specified
 container, given the components it contains.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
c - the component to be laid out
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicOptionPaneUI.ButtonAreaLayout,preferredLayoutSize(Container c),Dimension,"Calculates the preferred size dimensions for the specified container, given the components it contains.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container c)
Description copied from interface: LayoutManager
Calculates the preferred size dimensions for the specified
 container, given the components it contains.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
c - the container to be laid out
See Also:
LayoutManager.minimumLayoutSize(java.awt.Container)


"
BasicOptionPaneUI.ButtonAreaLayout,removeLayoutComponent(Component c),void,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component c)
Description copied from interface: LayoutManager
Removes the specified component from the layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
c - the component to be removed


"
BasicOptionPaneUI.ButtonAreaLayout,setCentersChildren(boolean newValue),void,NULL,"

setCentersChildren
public void setCentersChildren(boolean newValue)

"
BasicOptionPaneUI.ButtonAreaLayout,setPadding(int newPadding),void,NULL,"

setPadding
public void setPadding(int newPadding)

"
BasicOptionPaneUI.ButtonAreaLayout,setSyncAllWidths(boolean newValue),void,NULL,"

setSyncAllWidths
public void setSyncAllWidths(boolean newValue)

"
BasicPanelUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicPanelUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicPanelUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicPanelUI,installDefaults(JPanel p),protected void,NULL,"

installDefaults
protected void installDefaults(JPanel p)

"
BasicPanelUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicPanelUI,uninstallDefaults(JPanel p),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JPanel p)

"
BasicPanelUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicPasswordFieldUI,create(Element elem),View,Creates a view (PasswordView) for an element.,"

create
public View create(Element elem)
Creates a view (PasswordView) for an element.

Specified by:
create in interface ViewFactory
Overrides:
create in class BasicTextFieldUI
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
BasicPasswordFieldUI,createUI(JComponent c),static ComponentUI,Creates a UI for a JPasswordField.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for a JPasswordField.

Parameters:
c - the JPasswordField
Returns:
the UI


"
BasicPasswordFieldUI,getPropertyPrefix(),protected String,Fetches the name used as a key to look up properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to look up properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Overrides:
getPropertyPrefix in class BasicTextFieldUI
Returns:
the name (""PasswordField"")


"
BasicPasswordFieldUI,installDefaults(),protected void,Installs the necessary properties on the JPasswordField.,"

installDefaults
protected void installDefaults()
Installs the necessary properties on the JPasswordField.

Overrides:
installDefaults in class BasicTextUI
Since:
1.6
See Also:
BasicTextUI.uninstallDefaults(), 
BasicTextUI.installUI(javax.swing.JComponent)


"
BasicPopupMenuSeparatorUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicPopupMenuSeparatorUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicPopupMenuSeparatorUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicPopupMenuUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicPopupMenuUI,installDefaults(),void,NULL,"

installDefaults
public void installDefaults()

"
BasicPopupMenuUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicPopupMenuUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicPopupMenuUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicPopupMenuUI,isPopupTrigger(MouseEvent e),boolean,NULL,"

isPopupTrigger
public boolean isPopupTrigger(MouseEvent e)

Overrides:
isPopupTrigger in class PopupMenuUI


"
BasicPopupMenuUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicPopupMenuUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicPopupMenuUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicPopupMenuUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicProgressBarUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicProgressBarUI,"getAmountFull(Insets b, int width, int height)",protected int,This determines the amount of the progress bar that should be filled based on the percent done gathered from the model.,"

getAmountFull
protected int getAmountFull(Insets b,
                            int width,
                            int height)
This determines the amount of the progress bar that should be filled
 based on the percent done gathered from the model. This is a common
 operation so it was abstracted out. It assumes that your progress bar
 is linear. That is, if you are making a circular progress indicator,
 you will want to override this method.

"
BasicProgressBarUI,getAnimationIndex(),protected int,Gets the index of the current animation frame.,"

getAnimationIndex
protected int getAnimationIndex()
Gets the index of the current animation frame.

Since:
1.4


"
BasicProgressBarUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicProgressBarUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicProgressBarUI,getBox(Rectangle r),protected Rectangle,Stores the position and size of the bouncing box that would be painted for the current animation index in r and returns r.,"

getBox
protected Rectangle getBox(Rectangle r)
Stores the position and size of
 the bouncing box that would be painted for the current animation index
 in r and returns r.
 Subclasses that add to the painting performed
 in this class's implementation of paintIndeterminate --
 to draw an outline around the bouncing box, for example --
 can use this method to get the location of the bouncing
 box that was just painted.
 By overriding this method,
 you have complete control over the size and position
 of the bouncing box,
 without having to reimplement paintIndeterminate.

Parameters:
r - the Rectangle instance to be modified;
           may be null
Returns:
null if no box should be drawn;
           otherwise, returns the passed-in rectangle
           (if non-null)
           or a new rectangle
Since:
1.4
See Also:
setAnimationIndex(int)


"
BasicProgressBarUI,"getBoxLength(int availableLength, int otherDimension)",protected int,"Returns the length of the ""bouncing box"" to be painted.","

getBoxLength
protected int getBoxLength(int availableLength,
                           int otherDimension)
Returns the length
 of the ""bouncing box"" to be painted.
 This method is invoked by the
 default implementation of paintIndeterminate
 to get the width (if the progress bar is horizontal)
 or height (if vertical) of the box.
 For example:
 

boxRect.width = getBoxLength(componentInnards.width,
                             componentInnards.height);
 


Parameters:
availableLength - the amount of space available
                         for the bouncing box to move in;
                         for a horizontal progress bar,
                         for example,
                         this should be
                         the inside width of the progress bar
                         (the component width minus borders)
otherDimension - for a horizontal progress bar, this should be
                         the inside height of the progress bar; this
                         value might be used to constrain or determine
                         the return value
Returns:
the size of the box dimension being determined;
         must be no larger than availableLength
Since:
1.5
See Also:
SwingUtilities.calculateInnerArea(javax.swing.JComponent, java.awt.Rectangle)


"
BasicProgressBarUI,getCellLength(),protected int,Returns the width (if HORIZONTAL) or height (if VERTICAL) of each of the individual cells/units to be rendered in the progress bar.,"

getCellLength
protected int getCellLength()
Returns the width (if HORIZONTAL) or height (if VERTICAL)
 of each of the individual cells/units to be rendered in the
 progress bar. However, for text rendering simplification and
 aesthetic considerations, this function will return 1 when
 the progress string is being rendered.

Returns:
the value representing the spacing between cells
See Also:
setCellLength(int), 
JProgressBar.isStringPainted()


"
BasicProgressBarUI,getCellSpacing(),protected int,Returns the spacing between each of the cells/units in the progress bar.,"

getCellSpacing
protected int getCellSpacing()
Returns the spacing between each of the cells/units in the
 progress bar. However, for text rendering simplification and
 aesthetic considerations, this function will return 0 when
 the progress string is being rendered.

Returns:
the value representing the spacing between cells
See Also:
setCellSpacing(int), 
JProgressBar.isStringPainted()


"
BasicProgressBarUI,getFrameCount(),protected int,Returns the number of frames for the complete animation loop used by an indeterminate JProgessBar.,"

getFrameCount
protected final int getFrameCount()
Returns the number of frames for the complete animation loop
 used by an indeterminate JProgessBar. The progress chunk will go
 from one end to the other and back during the entire loop. This
 visual behavior may be changed by subclasses in other Look and Feels.

Returns:
the number of frames
Since:
1.6


"
BasicProgressBarUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicProgressBarUI,getMinimumSize(JComponent c),Dimension,The Minimum size for this component is 10.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
The Minimum size for this component is 10. The rationale here
 is that there should be at least one pixel per 10 percent.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicProgressBarUI,getPreferredInnerHorizontal(),protected Dimension,NULL,"

getPreferredInnerHorizontal
protected Dimension getPreferredInnerHorizontal()

"
BasicProgressBarUI,getPreferredInnerVertical(),protected Dimension,NULL,"

getPreferredInnerVertical
protected Dimension getPreferredInnerVertical()

"
BasicProgressBarUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicProgressBarUI,getSelectionBackground(),protected Color,"The ""selectionBackground"" is the color of the text when it is painted over an unfilled area of the progress bar.","

getSelectionBackground
protected Color getSelectionBackground()
The ""selectionBackground"" is the color of the text when it is painted
 over an unfilled area of the progress bar.

"
BasicProgressBarUI,getSelectionForeground(),protected Color,"The ""selectionForeground"" is the color of the text when it is painted over a filled area of the progress bar.","

getSelectionForeground
protected Color getSelectionForeground()
The ""selectionForeground"" is the color of the text when it is painted
 over a filled area of the progress bar.

"
BasicProgressBarUI,"getStringPlacement(Graphics g, String progressString, int x, int y, int width, int height)",protected Point,Designate the place where the progress string will be painted.,"

getStringPlacement
protected Point getStringPlacement(Graphics g,
                                   String progressString,
                                   int x,
                                   int y,
                                   int width,
                                   int height)
Designate the place where the progress string will be painted.
 This implementation places it at the center of the progress
 bar (in both x and y). Override this if you want to right,
 left, top, or bottom align the progress string or if you need
 to nudge it around for any reason.

"
BasicProgressBarUI,incrementAnimationIndex(),protected void,"Sets the index of the current animation frame, to the next valid value, which results in the progress bar being repainted.","

incrementAnimationIndex
protected void incrementAnimationIndex()
Sets the index of the current animation frame,
 to the next valid value,
 which results in the progress bar being repainted.
 The next valid value is, by default,
 the current animation index plus one.
 If the new value would be too large,
 this method sets the index to 0.
 Subclasses might need to override this method
 to ensure that the index does not go over
 the number of frames needed for the particular
 progress bar instance.
 This method is invoked by the default animation thread
 every X milliseconds,
 where X is specified by the ""ProgressBar.repaintInterval""
 UI default.

Since:
1.4
See Also:
setAnimationIndex(int)


"
BasicProgressBarUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicProgressBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicProgressBarUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicProgressBarUI,"paint(Graphics g, JComponent c)",void,Delegates painting to one of two methods: paintDeterminate or paintIndeterminate.,"

paint
public void paint(Graphics g,
                  JComponent c)
Delegates painting to one of two methods:
 paintDeterminate or paintIndeterminate.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicProgressBarUI,"paintDeterminate(Graphics g, JComponent c)",protected void,"All purpose paint method that should do the right thing for almost all linear, determinate progress bars.","

paintDeterminate
protected void paintDeterminate(Graphics g,
                                JComponent c)
All purpose paint method that should do the right thing for almost
 all linear, determinate progress bars. By setting a few values in
 the defaults
 table, things should work just fine to paint your progress bar.
 Naturally, override this if you are making a circular or
 semi-circular progress bar.

Since:
1.4
See Also:
paintIndeterminate(java.awt.Graphics, javax.swing.JComponent)


"
BasicProgressBarUI,"paintIndeterminate(Graphics g, JComponent c)",protected void,All purpose paint method that should do the right thing for all linear bouncing-box progress bars.,"

paintIndeterminate
protected void paintIndeterminate(Graphics g,
                                  JComponent c)
All purpose paint method that should do the right thing for all
 linear bouncing-box progress bars.
 Override this if you are making another kind of
 progress bar.

Since:
1.4
See Also:
paintDeterminate(java.awt.Graphics, javax.swing.JComponent)


"
BasicProgressBarUI,"paintString(Graphics g, int x, int y, int width, int height, int amountFull, Insets b)",protected void,NULL,"

paintString
protected void paintString(Graphics g,
                           int x,
                           int y,
                           int width,
                           int height,
                           int amountFull,
                           Insets b)

"
BasicProgressBarUI,setAnimationIndex(int newValue),protected void,Sets the index of the current animation frame to the specified value and requests that the progress bar be repainted.,"

setAnimationIndex
protected void setAnimationIndex(int newValue)
Sets the index of the current animation frame
 to the specified value and requests that the
 progress bar be repainted.
 Subclasses that don't use the default painting code
 might need to override this method
 to change the way that the repaint method
 is invoked.

Parameters:
newValue - the new animation index; no checking
                 is performed on its value
Since:
1.4
See Also:
incrementAnimationIndex()


"
BasicProgressBarUI,setCellLength(int cellLen),protected void,NULL,"

setCellLength
protected void setCellLength(int cellLen)

"
BasicProgressBarUI,setCellSpacing(int cellSpace),protected void,NULL,"

setCellSpacing
protected void setCellSpacing(int cellSpace)

"
BasicProgressBarUI,startAnimationTimer(),protected void,"Starts the animation thread, creating and initializing it if necessary.","

startAnimationTimer
protected void startAnimationTimer()
Starts the animation thread, creating and initializing
 it if necessary. This method is invoked when an
 indeterminate progress bar should start animating.
 Reasons for this may include:
 
The progress bar is determinate and becomes displayable
    The progress bar is displayable and becomes determinate
    The progress bar is displayable and determinate and this
        UI is installed
 
 If you implement your own animation thread,
 you must override this method.

Since:
1.4
See Also:
stopAnimationTimer()


"
BasicProgressBarUI,stopAnimationTimer(),protected void,Stops the animation thread.,"

stopAnimationTimer
protected void stopAnimationTimer()
Stops the animation thread.
 This method is invoked when the indeterminate
 animation should be stopped. Reasons for this may include:
 
The progress bar changes to determinate
    The progress bar is no longer part of a displayable hierarchy
    This UI in uninstalled
 
 If you implement your own animation thread,
 you must override this method.

Since:
1.4
See Also:
startAnimationTimer()


"
BasicProgressBarUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicProgressBarUI,uninstallListeners(),protected void,Removes all listeners installed by this object.,"

uninstallListeners
protected void uninstallListeners()
Removes all listeners installed by this object.

"
BasicProgressBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicRadioButtonMenuItemUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
BasicRadioButtonMenuItemUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicMenuItemUI


"
BasicRadioButtonMenuItemUI,"processMouseEvent(JMenuItem item, MouseEvent e, MenuElement[] path, MenuSelectionManager manager)",void,NULL,"

processMouseEvent
public void processMouseEvent(JMenuItem item,
                              MouseEvent e,
                              MenuElement[] path,
                              MenuSelectionManager manager)

"
BasicRadioButtonUI,createUI(JComponent b),static ComponentUI,Returns an instance of BasicRadioButtonUI.,"

createUI
public static ComponentUI createUI(JComponent b)
Returns an instance of BasicRadioButtonUI.

Parameters:
b - a component
Returns:
an instance of BasicRadioButtonUI


"
BasicRadioButtonUI,getDefaultIcon(),Icon,Returns the default icon.,"

getDefaultIcon
public Icon getDefaultIcon()
Returns the default icon.

Returns:
the default icon


"
BasicRadioButtonUI,getPreferredSize(JComponent c),Dimension,The preferred size of the radio button,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
The preferred size of the radio button

Overrides:
getPreferredSize in class BasicButtonUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicRadioButtonUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicToggleButtonUI


"
BasicRadioButtonUI,installDefaults(AbstractButton b),protected void,NULL,"

installDefaults
protected void installDefaults(AbstractButton b)

Overrides:
installDefaults in class BasicButtonUI


"
BasicRadioButtonUI,"paint(Graphics g, JComponent c)",void,paint the radio button,"

paint
public void paint(Graphics g,
                  JComponent c)
paint the radio button

Overrides:
paint in class BasicToggleButtonUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicRadioButtonUI,"paintFocus(Graphics g, Rectangle textRect, Dimension size)",protected void,Paints focused radio button.,"

paintFocus
protected void paintFocus(Graphics g,
                          Rectangle textRect,
                          Dimension size)
Paints focused radio button.

Parameters:
g - an instance of Graphics
textRect - bounds
size - the size of radio button


"
BasicRadioButtonUI,uninstallDefaults(AbstractButton b),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(AbstractButton b)

Overrides:
uninstallDefaults in class BasicButtonUI


"
BasicRootPaneUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicRootPaneUI,installComponents(JRootPane root),protected void,NULL,"

installComponents
protected void installComponents(JRootPane root)

"
BasicRootPaneUI,installDefaults(JRootPane c),protected void,NULL,"

installDefaults
protected void installDefaults(JRootPane c)

"
BasicRootPaneUI,installKeyboardActions(JRootPane root),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions(JRootPane root)

"
BasicRootPaneUI,installListeners(JRootPane root),protected void,NULL,"

installListeners
protected void installListeners(JRootPane root)

"
BasicRootPaneUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicRootPaneUI,propertyChange(PropertyChangeEvent e),void,Invoked when a property changes on the root pane.,"

propertyChange
public void propertyChange(PropertyChangeEvent e)
Invoked when a property changes on the root pane. If the event
 indicates the defaultButton has changed, this will
 reinstall the keyboard actions.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
BasicRootPaneUI,uninstallComponents(JRootPane root),protected void,NULL,"

uninstallComponents
protected void uninstallComponents(JRootPane root)

"
BasicRootPaneUI,uninstallDefaults(JRootPane root),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JRootPane root)

"
BasicRootPaneUI,uninstallKeyboardActions(JRootPane root),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions(JRootPane root)

"
BasicRootPaneUI,uninstallListeners(JRootPane root),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JRootPane root)

"
BasicRootPaneUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicScrollBarUI,"addLayoutComponent(String name, Component child)",void,"If the layout manager uses a per-component string, adds the component comp to the layout, associating it with the string specified by name.","

addLayoutComponent
public void addLayoutComponent(String name,
                               Component child)
Description copied from interface: LayoutManager
If the layout manager uses a per-component string,
 adds the component comp to the layout,
 associating it
 with the string specified by name.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the string to be associated with the component
child - the component to be added


"
BasicScrollBarUI,configureScrollBarColors(),protected void,NULL,"

configureScrollBarColors
protected void configureScrollBarColors()

"
BasicScrollBarUI,createArrowButtonListener(),protected BasicScrollBarUI.ArrowButtonListener,NULL,"

createArrowButtonListener
protected BasicScrollBarUI.ArrowButtonListener createArrowButtonListener()

"
BasicScrollBarUI,createDecreaseButton(int orientation),protected JButton,NULL,"

createDecreaseButton
protected JButton createDecreaseButton(int orientation)

"
BasicScrollBarUI,createIncreaseButton(int orientation),protected JButton,NULL,"

createIncreaseButton
protected JButton createIncreaseButton(int orientation)

"
BasicScrollBarUI,createModelListener(),protected BasicScrollBarUI.ModelListener,NULL,"

createModelListener
protected BasicScrollBarUI.ModelListener createModelListener()

"
BasicScrollBarUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicScrollBarUI,createScrollListener(),protected BasicScrollBarUI.ScrollListener,NULL,"

createScrollListener
protected BasicScrollBarUI.ScrollListener createScrollListener()

"
BasicScrollBarUI,createTrackListener(),protected BasicScrollBarUI.TrackListener,NULL,"

createTrackListener
protected BasicScrollBarUI.TrackListener createTrackListener()

"
BasicScrollBarUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicScrollBarUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - The JScrollBar that's delegating this method to us.
Returns:
new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
See Also:
ComponentUI.getMinimumSize(javax.swing.JComponent), 
getPreferredSize(javax.swing.JComponent)


"
BasicScrollBarUI,getMaximumThumbSize(),protected Dimension,Returns the largest acceptable size for the thumb.,"

getMaximumThumbSize
protected Dimension getMaximumThumbSize()
Returns the largest acceptable size for the thumb.  To create a fixed
 size thumb one make this method and getMinimumThumbSize
 return the same value.
 
Warning : the value returned by this method should not be
 be modified, it's a shared static constant.

Returns:
The largest acceptable size for the thumb.
See Also:
getMinimumThumbSize()


"
BasicScrollBarUI,getMinimumThumbSize(),protected Dimension,Returns the smallest acceptable size for the thumb.,"

getMinimumThumbSize
protected Dimension getMinimumThumbSize()
Returns the smallest acceptable size for the thumb.  If the scrollbar
 becomes so small that this size isn't available, the thumb will be
 hidden.
 
Warning : the value returned by this method should not be
 be modified, it's a shared static constant.

Returns:
The smallest acceptable size for the thumb.
See Also:
getMaximumThumbSize()


"
BasicScrollBarUI,getPreferredSize(JComponent c),Dimension,"A vertical scrollbar's preferred width is the maximum of preferred widths of the (non null) increment/decrement buttons, and the minimum width of the thumb.","

getPreferredSize
public Dimension getPreferredSize(JComponent c)
A vertical scrollbar's preferred width is the maximum of
 preferred widths of the (non null)
 increment/decrement buttons,
 and the minimum width of the thumb. The preferred height is the
 sum of the preferred heights of the same parts.  The basis for
 the preferred size of a horizontal scrollbar is similar.
 
 The preferredSize is only computed once, subsequent
 calls to this method just return a cached size.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the JScrollBar that's delegating this method to us
Returns:
the preferred size of a Basic JScrollBar
See Also:
getMaximumSize(javax.swing.JComponent), 
ComponentUI.getMinimumSize(javax.swing.JComponent)


"
BasicScrollBarUI,getSupportsAbsolutePositioning(),boolean,Indicates whether the user can absolutely position the thumb with a mouse gesture (usually the middle mouse button).,"

getSupportsAbsolutePositioning
public boolean getSupportsAbsolutePositioning()
Indicates whether the user can absolutely position the thumb with
 a mouse gesture (usually the middle mouse button).

Returns:
true if a mouse gesture can absolutely position the thumb
Since:
1.5


"
BasicScrollBarUI,getThumbBounds(),protected Rectangle,Return the current size/location of the thumb.,"

getThumbBounds
protected Rectangle getThumbBounds()
Return the current size/location of the thumb.
 
Warning : the value returned by this method should not be
 be modified, it's a reference to the actual rectangle, not a copy.

Returns:
The current size/location of the thumb.
See Also:
setThumbBounds(int, int, int, int)


"
BasicScrollBarUI,getTrackBounds(),protected Rectangle,"Returns the current bounds of the track, i.e.","

getTrackBounds
protected Rectangle getTrackBounds()
Returns the current bounds of the track, i.e. the space in between
 the increment and decrement buttons, less the insets.  The value
 returned by this method is updated each time the scrollbar is
 laid out (validated).
 
Warning : the value returned by this method should not be
 be modified, it's a reference to the actual rectangle, not a copy.

Returns:
the current bounds of the scrollbar track
See Also:
layoutContainer(java.awt.Container)


"
BasicScrollBarUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

"
BasicScrollBarUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicScrollBarUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicScrollBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicScrollBarUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicScrollBarUI,isThumbRollover(),boolean,Returns true if the mouse is currently over the thumb.,"

isThumbRollover
public boolean isThumbRollover()
Returns true if the mouse is currently over the thumb.

Returns:
true if the thumb is currently active
Since:
1.5


"
BasicScrollBarUI,layoutContainer(Container scrollbarContainer),void,Lays out the specified container.,"

layoutContainer
public void layoutContainer(Container scrollbarContainer)
Description copied from interface: LayoutManager
Lays out the specified container.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
scrollbarContainer - the container to be laid out


"
BasicScrollBarUI,layoutHScrollbar(JScrollBar sb),protected void,NULL,"

layoutHScrollbar
protected void layoutHScrollbar(JScrollBar sb)

"
BasicScrollBarUI,layoutVScrollbar(JScrollBar sb),protected void,NULL,"

layoutVScrollbar
protected void layoutVScrollbar(JScrollBar sb)

"
BasicScrollBarUI,minimumLayoutSize(Container scrollbarContainer),Dimension,"Calculates the minimum size dimensions for the specified container, given the components it contains.","

minimumLayoutSize
public Dimension minimumLayoutSize(Container scrollbarContainer)
Description copied from interface: LayoutManager
Calculates the minimum size dimensions for the specified
 container, given the components it contains.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
scrollbarContainer - the component to be laid out
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicScrollBarUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicScrollBarUI,paintDecreaseHighlight(Graphics g),protected void,NULL,"

paintDecreaseHighlight
protected void paintDecreaseHighlight(Graphics g)

"
BasicScrollBarUI,paintIncreaseHighlight(Graphics g),protected void,NULL,"

paintIncreaseHighlight
protected void paintIncreaseHighlight(Graphics g)

"
BasicScrollBarUI,"paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)",protected void,NULL,"

paintThumb
protected void paintThumb(Graphics g,
                          JComponent c,
                          Rectangle thumbBounds)

"
BasicScrollBarUI,"paintTrack(Graphics g, JComponent c, Rectangle trackBounds)",protected void,NULL,"

paintTrack
protected void paintTrack(Graphics g,
                          JComponent c,
                          Rectangle trackBounds)

"
BasicScrollBarUI,preferredLayoutSize(Container scrollbarContainer),Dimension,"Calculates the preferred size dimensions for the specified container, given the components it contains.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container scrollbarContainer)
Description copied from interface: LayoutManager
Calculates the preferred size dimensions for the specified
 container, given the components it contains.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
scrollbarContainer - the container to be laid out
See Also:
LayoutManager.minimumLayoutSize(java.awt.Container)


"
BasicScrollBarUI,removeLayoutComponent(Component child),void,Removes the specified component from the layout.,"

removeLayoutComponent
public void removeLayoutComponent(Component child)
Description copied from interface: LayoutManager
Removes the specified component from the layout.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
child - the component to be removed


"
BasicScrollBarUI,scrollByBlock(int direction),protected void,NULL,"

scrollByBlock
protected void scrollByBlock(int direction)

"
BasicScrollBarUI,scrollByUnit(int direction),protected void,NULL,"

scrollByUnit
protected void scrollByUnit(int direction)

"
BasicScrollBarUI,"setThumbBounds(int x, int y, int width, int height)",protected void,Set the bounds of the thumb and force a repaint that includes the old thumbBounds and the new one.,"

setThumbBounds
protected void setThumbBounds(int x,
                              int y,
                              int width,
                              int height)
Set the bounds of the thumb and force a repaint that includes
 the old thumbBounds and the new one.

See Also:
getThumbBounds()


"
BasicScrollBarUI,setThumbRollover(boolean active),protected void,Sets whether or not the mouse is currently over the thumb.,"

setThumbRollover
protected void setThumbRollover(boolean active)
Sets whether or not the mouse is currently over the thumb.

Parameters:
active - True indicates the thumb is currently active.
Since:
1.5


"
BasicScrollBarUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

"
BasicScrollBarUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicScrollBarUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicScrollBarUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicScrollBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicScrollPaneUI,createHSBChangeListener(),protected ChangeListener,NULL,"

createHSBChangeListener
protected ChangeListener createHSBChangeListener()

"
BasicScrollPaneUI,createMouseWheelListener(),protected MouseWheelListener,"Creates an instance of MouseWheelListener, which is added to the JScrollPane by installUI().","

createMouseWheelListener
protected MouseWheelListener createMouseWheelListener()
Creates an instance of MouseWheelListener, which is added to the
 JScrollPane by installUI().  The returned MouseWheelListener is used
 to handle mouse wheel-driven scrolling.

Returns:
MouseWheelListener which implements wheel-driven scrolling
Since:
1.4
See Also:
installUI(javax.swing.JComponent), 
BasicScrollPaneUI.MouseWheelHandler


"
BasicScrollPaneUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates an instance of PropertyChangeListener that's added to the JScrollPane by installUI().,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates an instance of PropertyChangeListener that's added to
 the JScrollPane by installUI().  Subclasses can override this method
 to return a custom PropertyChangeListener, e.g.
 
 class MyScrollPaneUI extends BasicScrollPaneUI {
    protected PropertyChangeListener createPropertyChangeListener() {
        return new MyPropertyChangeListener();
    }
    public class MyPropertyChangeListener extends PropertyChangeListener {
        public void propertyChange(PropertyChangeEvent e) {
            if (e.getPropertyName().equals(""viewport"")) {
                // do some extra work when the viewport changes
            }
            super.propertyChange(e);
        }
    }
 }
 

See Also:
PropertyChangeListener, 
installUI(javax.swing.JComponent)


"
BasicScrollPaneUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicScrollPaneUI,createViewportChangeListener(),protected ChangeListener,NULL,"

createViewportChangeListener
protected ChangeListener createViewportChangeListener()

"
BasicScrollPaneUI,createVSBChangeListener(),protected ChangeListener,NULL,"

createVSBChangeListener
protected ChangeListener createVSBChangeListener()

"
BasicScrollPaneUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicScrollPaneUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicScrollPaneUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
new Dimension(Short.MAX_VALUE, Short.MAX_VALUE)
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicScrollPaneUI,installDefaults(JScrollPane scrollpane),protected void,NULL,"

installDefaults
protected void installDefaults(JScrollPane scrollpane)

"
BasicScrollPaneUI,installKeyboardActions(JScrollPane c),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions(JScrollPane c)

"
BasicScrollPaneUI,installListeners(JScrollPane c),protected void,NULL,"

installListeners
protected void installListeners(JScrollPane c)

"
BasicScrollPaneUI,installUI(JComponent x),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent x)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
x - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicScrollPaneUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicScrollPaneUI,syncScrollPaneWithViewport(),protected void,NULL,"

syncScrollPaneWithViewport
protected void syncScrollPaneWithViewport()

"
BasicScrollPaneUI,uninstallDefaults(JScrollPane c),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JScrollPane c)

"
BasicScrollPaneUI,uninstallKeyboardActions(JScrollPane c),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions(JScrollPane c)

"
BasicScrollPaneUI,uninstallListeners(JComponent c),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JComponent c)

"
BasicScrollPaneUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicScrollPaneUI,updateColumnHeader(PropertyChangeEvent e),protected void,NULL,"

updateColumnHeader
protected void updateColumnHeader(PropertyChangeEvent e)

"
BasicScrollPaneUI,updateRowHeader(PropertyChangeEvent e),protected void,NULL,"

updateRowHeader
protected void updateRowHeader(PropertyChangeEvent e)

"
BasicScrollPaneUI,updateScrollBarDisplayPolicy(PropertyChangeEvent e),protected void,NULL,"

updateScrollBarDisplayPolicy
protected void updateScrollBarDisplayPolicy(PropertyChangeEvent e)

"
BasicScrollPaneUI,updateViewport(PropertyChangeEvent e),protected void,NULL,"

updateViewport
protected void updateViewport(PropertyChangeEvent e)

"
BasicSeparatorUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicSeparatorUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicSeparatorUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicSeparatorUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicSeparatorUI,installDefaults(JSeparator s),protected void,NULL,"

installDefaults
protected void installDefaults(JSeparator s)

"
BasicSeparatorUI,installListeners(JSeparator s),protected void,NULL,"

installListeners
protected void installListeners(JSeparator s)

"
BasicSeparatorUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicSeparatorUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicSeparatorUI,uninstallDefaults(JSeparator s),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JSeparator s)

"
BasicSeparatorUI,uninstallListeners(JSeparator s),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JSeparator s)

"
BasicSeparatorUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicSliderUI,calculateContentRect(),protected void,NULL,"

calculateContentRect
protected void calculateContentRect()

"
BasicSliderUI,calculateFocusRect(),protected void,NULL,"

calculateFocusRect
protected void calculateFocusRect()

"
BasicSliderUI,calculateGeometry(),protected void,NULL,"

calculateGeometry
protected void calculateGeometry()

"
BasicSliderUI,calculateLabelRect(),protected void,NULL,"

calculateLabelRect
protected void calculateLabelRect()

"
BasicSliderUI,calculateThumbLocation(),protected void,NULL,"

calculateThumbLocation
protected void calculateThumbLocation()

"
BasicSliderUI,calculateThumbSize(),protected void,NULL,"

calculateThumbSize
protected void calculateThumbSize()

"
BasicSliderUI,calculateTickRect(),protected void,NULL,"

calculateTickRect
protected void calculateTickRect()

"
BasicSliderUI,calculateTrackBuffer(),protected void,NULL,"

calculateTrackBuffer
protected void calculateTrackBuffer()

"
BasicSliderUI,calculateTrackRect(),protected void,NULL,"

calculateTrackRect
protected void calculateTrackRect()

"
BasicSliderUI,createChangeListener(JSlider slider),protected ChangeListener,NULL,"

createChangeListener
protected ChangeListener createChangeListener(JSlider slider)

"
BasicSliderUI,createComponentListener(JSlider slider),protected ComponentListener,NULL,"

createComponentListener
protected ComponentListener createComponentListener(JSlider slider)

"
BasicSliderUI,createFocusListener(JSlider slider),protected FocusListener,NULL,"

createFocusListener
protected FocusListener createFocusListener(JSlider slider)

"
BasicSliderUI,createPropertyChangeListener(JSlider slider),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener(JSlider slider)

"
BasicSliderUI,createScrollListener(JSlider slider),protected BasicSliderUI.ScrollListener,NULL,"

createScrollListener
protected BasicSliderUI.ScrollListener createScrollListener(JSlider slider)

"
BasicSliderUI,createTrackListener(JSlider slider),protected BasicSliderUI.TrackListener,NULL,"

createTrackListener
protected BasicSliderUI.TrackListener createTrackListener(JSlider slider)

"
BasicSliderUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
BasicSliderUI,drawInverted(),protected boolean,NULL,"

drawInverted
protected boolean drawInverted()

"
BasicSliderUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicSliderUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicSliderUI,getFocusColor(),protected Color,NULL,"

getFocusColor
protected Color getFocusColor()

"
BasicSliderUI,getHeightOfHighValueLabel(),protected int,NULL,"

getHeightOfHighValueLabel
protected int getHeightOfHighValueLabel()

"
BasicSliderUI,getHeightOfLowValueLabel(),protected int,NULL,"

getHeightOfLowValueLabel
protected int getHeightOfLowValueLabel()

"
BasicSliderUI,getHeightOfTallestLabel(),protected int,NULL,"

getHeightOfTallestLabel
protected int getHeightOfTallestLabel()

"
BasicSliderUI,getHighestValue(),protected Integer,Returns the biggest value that has an entry in the label table.,"

getHighestValue
protected Integer getHighestValue()
Returns the biggest value that has an entry in the label table.

Returns:
biggest value that has an entry in the label table, or
         null.
Since:
1.6


"
BasicSliderUI,getHighestValueLabel(),protected Component,Returns the label that corresponds to the lowest slider value in the label table.,"

getHighestValueLabel
protected Component getHighestValueLabel()
Returns the label that corresponds to the lowest slider value in the label table.

See Also:
JSlider.setLabelTable(java.util.Dictionary)


"
BasicSliderUI,getHighlightColor(),protected Color,NULL,"

getHighlightColor
protected Color getHighlightColor()

"
BasicSliderUI,getLowestValue(),protected Integer,Returns the smallest value that has an entry in the label table.,"

getLowestValue
protected Integer getLowestValue()
Returns the smallest value that has an entry in the label table.

Returns:
smallest value that has an entry in the label table, or
         null.
Since:
1.6


"
BasicSliderUI,getLowestValueLabel(),protected Component,Returns the label that corresponds to the highest slider value in the label table.,"

getLowestValueLabel
protected Component getLowestValueLabel()
Returns the label that corresponds to the highest slider value in the label table.

See Also:
JSlider.setLabelTable(java.util.Dictionary)


"
BasicSliderUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicSliderUI,getMinimumHorizontalSize(),Dimension,NULL,"

getMinimumHorizontalSize
public Dimension getMinimumHorizontalSize()

"
BasicSliderUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicSliderUI,getMinimumVerticalSize(),Dimension,NULL,"

getMinimumVerticalSize
public Dimension getMinimumVerticalSize()

"
BasicSliderUI,getPreferredHorizontalSize(),Dimension,NULL,"

getPreferredHorizontalSize
public Dimension getPreferredHorizontalSize()

"
BasicSliderUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicSliderUI,getPreferredVerticalSize(),Dimension,NULL,"

getPreferredVerticalSize
public Dimension getPreferredVerticalSize()

"
BasicSliderUI,getShadowColor(),protected Color,NULL,"

getShadowColor
protected Color getShadowColor()

"
BasicSliderUI,getThumbSize(),protected Dimension,NULL,"

getThumbSize
protected Dimension getThumbSize()

"
BasicSliderUI,getTickLength(),protected int,Gets the height of the tick area for horizontal sliders and the width of the tick area for vertical sliders.,"

getTickLength
protected int getTickLength()
Gets the height of the tick area for horizontal sliders and the width of the
 tick area for vertical sliders.  BasicSliderUI uses the returned value to
 determine the tick area rectangle.  If you want to give your ticks some room,
 make this larger than you need and paint your ticks away from the sides in paintTicks().

"
BasicSliderUI,getWidthOfHighValueLabel(),protected int,NULL,"

getWidthOfHighValueLabel
protected int getWidthOfHighValueLabel()

"
BasicSliderUI,getWidthOfLowValueLabel(),protected int,NULL,"

getWidthOfLowValueLabel
protected int getWidthOfLowValueLabel()

"
BasicSliderUI,getWidthOfWidestLabel(),protected int,NULL,"

getWidthOfWidestLabel
protected int getWidthOfWidestLabel()

"
BasicSliderUI,installDefaults(JSlider slider),protected void,NULL,"

installDefaults
protected void installDefaults(JSlider slider)

"
BasicSliderUI,installKeyboardActions(JSlider slider),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions(JSlider slider)

"
BasicSliderUI,installListeners(JSlider slider),protected void,NULL,"

installListeners
protected void installListeners(JSlider slider)

"
BasicSliderUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicSliderUI,isDragging(),protected boolean,Returns true if the user is dragging the slider.,"

isDragging
protected boolean isDragging()
Returns true if the user is dragging the slider.

Returns:
true if the user is dragging the slider
Since:
1.5


"
BasicSliderUI,labelsHaveSameBaselines(),protected boolean,Returns true if all the labels from the label table have the same baseline.,"

labelsHaveSameBaselines
protected boolean labelsHaveSameBaselines()
Returns true if all the labels from the label table have the same
 baseline.

Returns:
true if all the labels from the label table have the
         same baseline
Since:
1.6


"
BasicSliderUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicSliderUI,paintFocus(Graphics g),void,NULL,"

paintFocus
public void paintFocus(Graphics g)

"
BasicSliderUI,"paintHorizontalLabel(Graphics g, int value, Component label)",protected void,Called for every label in the label table.,"

paintHorizontalLabel
protected void paintHorizontalLabel(Graphics g,
                                    int value,
                                    Component label)
Called for every label in the label table.  Used to draw the labels for horizontal sliders.
 The graphics have been translated to labelRect.y already.

See Also:
JSlider.setLabelTable(java.util.Dictionary)


"
BasicSliderUI,paintLabels(Graphics g),void,NULL,"

paintLabels
public void paintLabels(Graphics g)

"
BasicSliderUI,"paintMajorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x)",protected void,NULL,"

paintMajorTickForHorizSlider
protected void paintMajorTickForHorizSlider(Graphics g,
                                            Rectangle tickBounds,
                                            int x)

"
BasicSliderUI,"paintMajorTickForVertSlider(Graphics g, Rectangle tickBounds, int y)",protected void,NULL,"

paintMajorTickForVertSlider
protected void paintMajorTickForVertSlider(Graphics g,
                                           Rectangle tickBounds,
                                           int y)

"
BasicSliderUI,"paintMinorTickForHorizSlider(Graphics g, Rectangle tickBounds, int x)",protected void,NULL,"

paintMinorTickForHorizSlider
protected void paintMinorTickForHorizSlider(Graphics g,
                                            Rectangle tickBounds,
                                            int x)

"
BasicSliderUI,"paintMinorTickForVertSlider(Graphics g, Rectangle tickBounds, int y)",protected void,NULL,"

paintMinorTickForVertSlider
protected void paintMinorTickForVertSlider(Graphics g,
                                           Rectangle tickBounds,
                                           int y)

"
BasicSliderUI,paintThumb(Graphics g),void,NULL,"

paintThumb
public void paintThumb(Graphics g)

"
BasicSliderUI,paintTicks(Graphics g),void,NULL,"

paintTicks
public void paintTicks(Graphics g)

"
BasicSliderUI,paintTrack(Graphics g),void,NULL,"

paintTrack
public void paintTrack(Graphics g)

"
BasicSliderUI,"paintVerticalLabel(Graphics g, int value, Component label)",protected void,Called for every label in the label table.,"

paintVerticalLabel
protected void paintVerticalLabel(Graphics g,
                                  int value,
                                  Component label)
Called for every label in the label table.  Used to draw the labels for vertical sliders.
 The graphics have been translated to labelRect.x already.

See Also:
JSlider.setLabelTable(java.util.Dictionary)


"
BasicSliderUI,recalculateIfInsetsChanged(),protected void,NULL,"

recalculateIfInsetsChanged
protected void recalculateIfInsetsChanged()

"
BasicSliderUI,recalculateIfOrientationChanged(),protected void,NULL,"

recalculateIfOrientationChanged
protected void recalculateIfOrientationChanged()

"
BasicSliderUI,scrollByBlock(int direction),void,NULL,"

scrollByBlock
public void scrollByBlock(int direction)

"
BasicSliderUI,scrollByUnit(int direction),void,NULL,"

scrollByUnit
public void scrollByUnit(int direction)

"
BasicSliderUI,scrollDueToClickInTrack(int dir),protected void,"This function is called when a mousePressed was detected in the track, not in the thumb.","

scrollDueToClickInTrack
protected void scrollDueToClickInTrack(int dir)
This function is called when a mousePressed was detected in the track, not
 in the thumb.  The default behavior is to scroll by block.  You can
  override this method to stop it from scrolling or to add additional behavior.

"
BasicSliderUI,"setThumbLocation(int x, int y)",void,NULL,"

setThumbLocation
public void setThumbLocation(int x,
                             int y)

"
BasicSliderUI,uninstallDefaults(JSlider slider),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JSlider slider)

"
BasicSliderUI,uninstallKeyboardActions(JSlider slider),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions(JSlider slider)

"
BasicSliderUI,uninstallListeners(JSlider slider),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JSlider slider)

"
BasicSliderUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicSliderUI,valueForXPosition(int xPos),int,Returns the value at the x position.,"

valueForXPosition
public int valueForXPosition(int xPos)
Returns the value at the x position.  If xPos is beyond the
 track at the left or the right, this method sets the value to either the
 minimum or maximum value of the slider, depending on if the slider is
 inverted or not.

"
BasicSliderUI,valueForYPosition(int yPos),int,Returns the value at the y position.,"

valueForYPosition
public int valueForYPosition(int yPos)
Returns the value at the y position. If yPos is beyond the
 track at the the bottom or the top, this method sets the value to either
 the minimum or maximum value of the slider, depending on if the slider
 is inverted or not.

"
BasicSliderUI,xPositionForValue(int value),protected int,NULL,"

xPositionForValue
protected int xPositionForValue(int value)

"
BasicSliderUI,yPositionForValue(int value),protected int,NULL,"

yPositionForValue
protected int yPositionForValue(int value)

"
BasicSliderUI,"yPositionForValue(int value, int trackY, int trackHeight)",protected int,Returns the y location for the specified value.,"

yPositionForValue
protected int yPositionForValue(int value,
                                int trackY,
                                int trackHeight)
Returns the y location for the specified value.  No checking is
 done on the arguments.  In particular if trackHeight is
 negative undefined results may occur.

Parameters:
value - the slider value to get the location for
trackY - y-origin of the track
trackHeight - the height of the track
Since:
1.6


"
BasicSpinnerUI,createEditor(),protected JComponent,This method is called by installUI to get the editor component of the JSpinner.,"

createEditor
protected JComponent createEditor()
This method is called by installUI to get the editor component
 of the JSpinner.  By default it just returns
 JSpinner.getEditor().  Subclasses can override
 createEditor to return a component that contains
 the spinner's editor or null, if they're going to handle adding
 the editor to the JSpinner in an
 installUI override.
 
 Typically this method would be overridden to wrap the editor
 with a container with a custom border, since one can't assume
 that the editors border can be set directly.
 
 The replaceEditor method is called when the spinners
 editor is changed with JSpinner.setEditor.  If you've
 overriden this method, then you'll probably want to override
 replaceEditor as well.

Returns:
the JSpinners editor JComponent, spinner.getEditor() by default
See Also:
installUI(javax.swing.JComponent), 
replaceEditor(javax.swing.JComponent, javax.swing.JComponent), 
JSpinner.getEditor()


"
BasicSpinnerUI,createLayout(),protected LayoutManager,"Creates a LayoutManager that manages the editor, nextButton, and previousButton children of the JSpinner.","

createLayout
protected LayoutManager createLayout()
Creates a LayoutManager that manages the editor,
 nextButton, and previousButton
 children of the JSpinner.  These three children must be
 added with a constraint that identifies their role:
 ""Editor"", ""Next"", and ""Previous"". The default layout manager
 can handle the absence of any of these children.

Returns:
a LayoutManager for the editor, next button, and previous button.
See Also:
createNextButton(), 
createPreviousButton(), 
createEditor()


"
BasicSpinnerUI,createNextButton(),protected Component,"Creates an increment button, i.e.","

createNextButton
protected Component createNextButton()
Creates an increment button, i.e. component that replaces the spinner
 value with the object returned by spinner.getNextValue.
 By default the nextButton is a JButton. If the
 increment button is not needed this method should return null.

Returns:
a component that will replace the spinner's value with the
     next value in the sequence, or null
See Also:
installUI(javax.swing.JComponent), 
createPreviousButton(), 
installNextButtonListeners(java.awt.Component)


"
BasicSpinnerUI,createPreviousButton(),protected Component,"Creates a decrement button, i.e.","

createPreviousButton
protected Component createPreviousButton()
Creates a decrement button, i.e. component that replaces the spinner
 value with the object returned by spinner.getPreviousValue.
 By default the previousButton is a JButton. If the
 decrement button is not needed this method should return null.

Returns:
a component that will replace the spinner's value with the
     previous value in the sequence, or null
See Also:
installUI(javax.swing.JComponent), 
createNextButton(), 
installPreviousButtonListeners(java.awt.Component)


"
BasicSpinnerUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates a PropertyChangeListener that can be added to the JSpinner itself.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates a PropertyChangeListener that can be
 added to the JSpinner itself.  Typically, this listener
 will call replaceEditor when the ""editor"" property changes,
 since it's the SpinnerUI's responsibility to
 add the editor to the JSpinner (and remove the old one).
 This method is called by installListeners.

Returns:
A PropertyChangeListener for the JSpinner itself
See Also:
installListeners()


"
BasicSpinnerUI,createUI(JComponent c),static ComponentUI,Returns a new instance of BasicSpinnerUI.,"

createUI
public static ComponentUI createUI(JComponent c)
Returns a new instance of BasicSpinnerUI.  SpinnerListUI
 delegates are allocated one per JSpinner.

Parameters:
c - the JSpinner (not used)
Returns:
a new BasicSpinnerUI object
See Also:
ComponentUI.createUI(javax.swing.JComponent)


"
BasicSpinnerUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicSpinnerUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicSpinnerUI,installDefaults(),protected void,"Initialize the JSpinner border, foreground, and background, properties based on the corresponding ""Spinner.*"" properties from defaults table.","

installDefaults
protected void installDefaults()
Initialize the JSpinner border,
 foreground, and background, properties
 based on the corresponding ""Spinner.*"" properties from defaults table.
 The JSpinners layout is set to the value returned by
 createLayout.  This method is called by installUI.

See Also:
uninstallDefaults(), 
installUI(javax.swing.JComponent), 
createLayout(), 
LookAndFeel.installBorder(javax.swing.JComponent, java.lang.String), 
LookAndFeel.installColors(javax.swing.JComponent, java.lang.String, java.lang.String)


"
BasicSpinnerUI,installKeyboardActions(),protected void,Installs the keyboard Actions onto the JSpinner.,"

installKeyboardActions
protected void installKeyboardActions()
Installs the keyboard Actions onto the JSpinner.

Since:
1.5


"
BasicSpinnerUI,installListeners(),protected void,Initializes PropertyChangeListener with a shared object that delegates interesting PropertyChangeEvents to protected methods.,"

installListeners
protected void installListeners()
Initializes PropertyChangeListener with
 a shared object that delegates interesting PropertyChangeEvents
 to protected methods.
 
 This method is called by installUI.

See Also:
replaceEditor(javax.swing.JComponent, javax.swing.JComponent), 
uninstallListeners()


"
BasicSpinnerUI,installNextButtonListeners(Component c),protected void,"Installs the necessary listeners on the next button, c, to update the JSpinner in response to a user gesture.","

installNextButtonListeners
protected void installNextButtonListeners(Component c)
Installs the necessary listeners on the next button, c,
 to update the JSpinner in response to a user gesture.

Parameters:
c - Component to install the listeners on
Throws:
NullPointerException - if c is null.
Since:
1.5
See Also:
createNextButton()


"
BasicSpinnerUI,installPreviousButtonListeners(Component c),protected void,"Installs the necessary listeners on the previous button, c, to update the JSpinner in response to a user gesture.","

installPreviousButtonListeners
protected void installPreviousButtonListeners(Component c)
Installs the necessary listeners on the previous button, c,
 to update the JSpinner in response to a user gesture.

Parameters:
c - Component to install the listeners on.
Throws:
NullPointerException - if c is null.
Since:
1.5
See Also:
createPreviousButton()


"
BasicSpinnerUI,installUI(JComponent c),void,"Calls installDefaults, installListeners, and then adds the components returned by createNextButton, createPreviousButton, and createEditor.","

installUI
public void installUI(JComponent c)
Calls installDefaults, installListeners,
 and then adds the components returned by createNextButton,
 createPreviousButton, and createEditor.

Overrides:
installUI in class ComponentUI
Parameters:
c - the JSpinner
See Also:
installDefaults(), 
installListeners(), 
createNextButton(), 
createPreviousButton(), 
createEditor()


"
BasicSpinnerUI,"replaceEditor(JComponent oldEditor, JComponent newEditor)",protected void,Called by the PropertyChangeListener when the JSpinner editor property changes.,"

replaceEditor
protected void replaceEditor(JComponent oldEditor,
                             JComponent newEditor)
Called by the PropertyChangeListener when the
 JSpinner editor property changes.  It's the responsibility
 of this method to remove the old editor and add the new one.  By
 default this operation is just:
 
 spinner.remove(oldEditor);
 spinner.add(newEditor, ""Editor"");
 
 The implementation of replaceEditor should be coordinated
 with the createEditor method.

See Also:
createEditor(), 
createPropertyChangeListener()


"
BasicSpinnerUI,uninstallDefaults(),protected void,Sets the JSpinner's layout manager to null.,"

uninstallDefaults
protected void uninstallDefaults()
Sets the JSpinner's layout manager to null.  This
 method is called by uninstallUI.

See Also:
installDefaults(), 
uninstallUI(javax.swing.JComponent)


"
BasicSpinnerUI,uninstallListeners(),protected void,Removes the PropertyChangeListener added by installListeners.,"

uninstallListeners
protected void uninstallListeners()
Removes the PropertyChangeListener added
 by installListeners.
 
 This method is called by uninstallUI.

See Also:
installListeners()


"
BasicSpinnerUI,uninstallUI(JComponent c),void,"Calls uninstallDefaults, uninstallListeners, and then removes all of the spinners children.","

uninstallUI
public void uninstallUI(JComponent c)
Calls uninstallDefaults, uninstallListeners,
 and then removes all of the spinners children.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the JSpinner (not used)
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicSplitPaneDivider,createLeftOneTouchButton(),protected JButton,Creates and return an instance of JButton that can be used to collapse the left component in the split pane.,"

createLeftOneTouchButton
protected JButton createLeftOneTouchButton()
Creates and return an instance of JButton that can be used to
 collapse the left component in the split pane.

"
BasicSplitPaneDivider,createRightOneTouchButton(),protected JButton,Creates and return an instance of JButton that can be used to collapse the right component in the split pane.,"

createRightOneTouchButton
protected JButton createRightOneTouchButton()
Creates and return an instance of JButton that can be used to
 collapse the right component in the split pane.

"
BasicSplitPaneDivider,dragDividerTo(int location),protected void,Messages the BasicSplitPaneUI with dragDividerTo that this instance is contained in.,"

dragDividerTo
protected void dragDividerTo(int location)
Messages the BasicSplitPaneUI with dragDividerTo that this instance
 is contained in.

"
BasicSplitPaneDivider,finishDraggingTo(int location),protected void,Messages the BasicSplitPaneUI with finishDraggingTo that this instance is contained in.,"

finishDraggingTo
protected void finishDraggingTo(int location)
Messages the BasicSplitPaneUI with finishDraggingTo that this instance
 is contained in.

"
BasicSplitPaneDivider,getBasicSplitPaneUI(),BasicSplitPaneUI,Returns the SplitPaneUI the receiver is currently in.,"

getBasicSplitPaneUI
public BasicSplitPaneUI getBasicSplitPaneUI()
Returns the SplitPaneUI the receiver is currently
 in.

"
BasicSplitPaneDivider,getBorder(),Border,Returns the border of this component or null if no border is currently set.,"

getBorder
public Border getBorder()
Returns the border of this component or null if no border is
 currently set.

Returns:
the border object for this component
Since:
1.3
See Also:
setBorder(javax.swing.border.Border)


"
BasicSplitPaneDivider,getDividerSize(),int,"Returns the size of the divider, that is the width if the splitpane is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.","

getDividerSize
public int getDividerSize()
Returns the size of the divider, that is the width if the splitpane
 is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.

"
BasicSplitPaneDivider,getInsets(),Insets,"If a border has been set on this component, returns the border's insets, else calls super.getInsets.","

getInsets
public Insets getInsets()
If a border has been set on this component, returns the
 border's insets, else calls super.getInsets.

Overrides:
getInsets in class Container
Returns:
the value of the insets property.
See Also:
setBorder(javax.swing.border.Border)


"
BasicSplitPaneDivider,getMinimumSize(),Dimension,Returns dividerSize x dividerSize,"

getMinimumSize
public Dimension getMinimumSize()
Returns dividerSize x dividerSize

Overrides:
getMinimumSize in class Container
Returns:
an instance of Dimension that represents
                the minimum size of this container.
See Also:
Container.getPreferredSize(), 
Container.getMaximumSize(), 
Container.getLayout(), 
LayoutManager.minimumLayoutSize(Container), 
Component.getMinimumSize()


"
BasicSplitPaneDivider,getPreferredSize(),Dimension,Returns dividerSize x dividerSize,"

getPreferredSize
public Dimension getPreferredSize()
Returns dividerSize x dividerSize

Overrides:
getPreferredSize in class Container
Returns:
an instance of Dimension that represents
                the preferred size of this container.
See Also:
Container.getMinimumSize(), 
Container.getMaximumSize(), 
Container.getLayout(), 
LayoutManager.preferredLayoutSize(Container), 
Component.getPreferredSize()


"
BasicSplitPaneDivider,isMouseOver(),boolean,Returns whether or not the mouse is currently over the divider,"

isMouseOver
public boolean isMouseOver()
Returns whether or not the mouse is currently over the divider

Returns:
whether or not the mouse is currently over the divider
Since:
1.5


"
BasicSplitPaneDivider,oneTouchExpandableChanged(),protected void,Messaged when the oneTouchExpandable value of the JSplitPane the receiver is contained in changes.,"

oneTouchExpandableChanged
protected void oneTouchExpandableChanged()
Messaged when the oneTouchExpandable value of the JSplitPane the
 receiver is contained in changes. Will create the
 leftButton and rightButton if they
 are null. invalidates the receiver as well.

"
BasicSplitPaneDivider,paint(Graphics g),void,Paints the divider.,"

paint
public void paint(Graphics g)
Paints the divider.

Overrides:
paint in class Container
Parameters:
g - the specified Graphics window
See Also:
Component.update(Graphics)


"
BasicSplitPaneDivider,prepareForDragging(),protected void,Message to prepare for dragging.,"

prepareForDragging
protected void prepareForDragging()
Message to prepare for dragging. This messages the BasicSplitPaneUI
 with startDragging.

"
BasicSplitPaneDivider,propertyChange(PropertyChangeEvent e),void,"Property change event, presumably from the JSplitPane, will message updateOrientation if necessary.","

propertyChange
public void propertyChange(PropertyChangeEvent e)
Property change event, presumably from the JSplitPane, will message
 updateOrientation if necessary.

Specified by:
propertyChange in interface PropertyChangeListener
Parameters:
e - A PropertyChangeEvent object describing the event source
          and the property that has changed.


"
BasicSplitPaneDivider,setBasicSplitPaneUI(BasicSplitPaneUI newUI),void,Sets the SplitPaneUI that is using the receiver.,"

setBasicSplitPaneUI
public void setBasicSplitPaneUI(BasicSplitPaneUI newUI)
Sets the SplitPaneUI that is using the receiver.

"
BasicSplitPaneDivider,setBorder(Border border),void,Sets the border of this component.,"

setBorder
public void setBorder(Border border)
Sets the border of this component.

Since:
1.3


"
BasicSplitPaneDivider,setDividerSize(int newSize),void,Sets the size of the divider to newSize.,"

setDividerSize
public void setDividerSize(int newSize)
Sets the size of the divider to newSize. That is
 the width if the splitpane is HORIZONTAL_SPLIT, or
 the height of VERTICAL_SPLIT.

"
BasicSplitPaneDivider,setMouseOver(boolean mouseOver),protected void,Sets whether or not the mouse is currently over the divider.,"

setMouseOver
protected void setMouseOver(boolean mouseOver)
Sets whether or not the mouse is currently over the divider.

Parameters:
mouseOver - whether or not the mouse is currently over the divider
Since:
1.5


"
BasicSplitPaneUI,createDefaultDivider(),BasicSplitPaneDivider,Creates the default divider.,"

createDefaultDivider
public BasicSplitPaneDivider createDefaultDivider()
Creates the default divider.

"
BasicSplitPaneUI,createDefaultNonContinuousLayoutDivider(),protected Component,"Returns the default non continuous layout divider, which is an instance of Canvas that fills in the background with dark gray.","

createDefaultNonContinuousLayoutDivider
protected Component createDefaultNonContinuousLayoutDivider()
Returns the default non continuous layout divider, which is an
 instance of Canvas that fills in the background with dark gray.

"
BasicSplitPaneUI,createFocusListener(),protected FocusListener,Creates a FocusListener for the JSplitPane UI.,"

createFocusListener
protected FocusListener createFocusListener()
Creates a FocusListener for the JSplitPane UI.

"
BasicSplitPaneUI,createKeyboardDownRightListener(),protected ActionListener,Deprecated. As of Java 2 platform v1.3.,"

createKeyboardDownRightListener
@Deprecated
protected ActionListener createKeyboardDownRightListener()
Deprecated. As of Java 2 platform v1.3.
As of Java 2 platform v1.3 this method is no
 longer used. Subclassers previously using this method should
 instead create an Action wrapping the ActionListener, and register
 that Action by overriding installKeyboardActions and
 placing the Action in the SplitPane's ActionMap. Please refer to
 the key bindings specification for further details.
 
 Creates a ActionListener for the JSplitPane UI that listens for
 specific key presses.

"
BasicSplitPaneUI,createKeyboardEndListener(),protected ActionListener,Deprecated. As of Java 2 platform v1.3.,"

createKeyboardEndListener
@Deprecated
protected ActionListener createKeyboardEndListener()
Deprecated. As of Java 2 platform v1.3.
As of Java 2 platform v1.3 this method is no
 longer used. Subclassers previously using this method should
 instead create an Action wrapping the ActionListener, and register
 that Action by overriding installKeyboardActions and
 placing the Action in the SplitPane's ActionMap. Please refer to
 the key bindings specification for further details.
 
 Creates a ActionListener for the JSplitPane UI that listens for
 specific key presses.

"
BasicSplitPaneUI,createKeyboardHomeListener(),protected ActionListener,Deprecated. As of Java 2 platform v1.3.,"

createKeyboardHomeListener
@Deprecated
protected ActionListener createKeyboardHomeListener()
Deprecated. As of Java 2 platform v1.3.
As of Java 2 platform v1.3 this method is no
 longer used. Subclassers previously using this method should
 instead create an Action wrapping the ActionListener, and register
 that Action by overriding installKeyboardActions and
 placing the Action in the SplitPane's ActionMap. Please refer to
 the key bindings specification for further details.
 
 Creates a ActionListener for the JSplitPane UI that listens for
 specific key presses.

"
BasicSplitPaneUI,createKeyboardResizeToggleListener(),protected ActionListener,Deprecated. As of Java 2 platform v1.3.,"

createKeyboardResizeToggleListener
@Deprecated
protected ActionListener createKeyboardResizeToggleListener()
Deprecated. As of Java 2 platform v1.3.
As of Java 2 platform v1.3 this method is no
 longer used. Subclassers previously using this method should
 instead create an Action wrapping the ActionListener, and register
 that Action by overriding installKeyboardActions and
 placing the Action in the SplitPane's ActionMap. Please refer to
 the key bindings specification for further details.
 
 Creates a ActionListener for the JSplitPane UI that listens for
 specific key presses.

"
BasicSplitPaneUI,createKeyboardUpLeftListener(),protected ActionListener,Deprecated. As of Java 2 platform v1.3.,"

createKeyboardUpLeftListener
@Deprecated
protected ActionListener createKeyboardUpLeftListener()
Deprecated. As of Java 2 platform v1.3.
As of Java 2 platform v1.3 this method is no
 longer used. Subclassers previously using this method should
 instead create an Action wrapping the ActionListener, and register
 that Action by overriding installKeyboardActions and
 placing the Action in the SplitPane's ActionMap. Please refer to
 the key bindings specification for further details.
 
 Creates a ActionListener for the JSplitPane UI that listens for
 specific key presses.

"
BasicSplitPaneUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates a PropertyChangeListener for the JSplitPane UI.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates a PropertyChangeListener for the JSplitPane UI.

"
BasicSplitPaneUI,createUI(JComponent x),static ComponentUI,Creates a new BasicSplitPaneUI instance,"

createUI
public static ComponentUI createUI(JComponent x)
Creates a new BasicSplitPaneUI instance

"
BasicSplitPaneUI,dragDividerTo(int location),protected void,Messaged during a dragging session to move the divider to the passed in location.,"

dragDividerTo
protected void dragDividerTo(int location)
Messaged during a dragging session to move the divider to the
 passed in location. If continuousLayout is true the location is
 reset and the splitPane validated.

"
BasicSplitPaneUI,finishDraggingTo(int location),protected void,Messaged to finish the dragging session.,"

finishDraggingTo
protected void finishDraggingTo(int location)
Messaged to finish the dragging session. If not continuous display
 the dividers location will be reset.

"
BasicSplitPaneUI,"finishedPaintingChildren(JSplitPane sp, Graphics g)",void,Called when the specified split pane has finished painting its children.,"

finishedPaintingChildren
public void finishedPaintingChildren(JSplitPane sp,
                                     Graphics g)
Called when the specified split pane has finished painting
 its children.

Specified by:
finishedPaintingChildren in class SplitPaneUI


"
BasicSplitPaneUI,getDivider(),BasicSplitPaneDivider,Returns the divider between the top Components.,"

getDivider
public BasicSplitPaneDivider getDivider()
Returns the divider between the top Components.

"
BasicSplitPaneUI,getDividerBorderSize(),protected int,"Deprecated. As of Java 2 platform v1.3, instead set the border on the divider.","

getDividerBorderSize
@Deprecated
protected int getDividerBorderSize()
Deprecated. As of Java 2 platform v1.3, instead set the border on the
 divider.
As of Java 2 platform v1.3 this method is no longer used. Instead
 you should set the border on the divider.
 
 Returns the width of one side of the divider border.

"
BasicSplitPaneUI,getDividerLocation(JSplitPane jc),int,"Returns the location of the divider, which may differ from what the splitpane thinks the location of the divider is.","

getDividerLocation
public int getDividerLocation(JSplitPane jc)
Returns the location of the divider, which may differ from what
 the splitpane thinks the location of the divider is.

Specified by:
getDividerLocation in class SplitPaneUI


"
BasicSplitPaneUI,getInsets(JComponent jc),Insets,Returns the insets.,"

getInsets
public Insets getInsets(JComponent jc)
Returns the insets. The insets are returned from the border insets
 of the current border.

"
BasicSplitPaneUI,getLastDragLocation(),int,Returns the last drag location of the JSplitPane.,"

getLastDragLocation
public int getLastDragLocation()
Returns the last drag location of the JSplitPane.

"
BasicSplitPaneUI,getMaximumDividerLocation(JSplitPane jc),int,Gets the maximum location of the divider.,"

getMaximumDividerLocation
public int getMaximumDividerLocation(JSplitPane jc)
Gets the maximum location of the divider.

Specified by:
getMaximumDividerLocation in class SplitPaneUI


"
BasicSplitPaneUI,getMaximumSize(JComponent jc),Dimension,"Returns the maximum size for the passed in component, This is passed off to the current layout manager.","

getMaximumSize
public Dimension getMaximumSize(JComponent jc)
Returns the maximum size for the passed in component,
 This is passed off to the current layout manager.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
jc - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicSplitPaneUI,getMinimumDividerLocation(JSplitPane jc),int,Gets the minimum location of the divider.,"

getMinimumDividerLocation
public int getMinimumDividerLocation(JSplitPane jc)
Gets the minimum location of the divider.

Specified by:
getMinimumDividerLocation in class SplitPaneUI


"
BasicSplitPaneUI,getMinimumSize(JComponent jc),Dimension,"Returns the minimum size for the passed in component, This is passed off to the current layout manager.","

getMinimumSize
public Dimension getMinimumSize(JComponent jc)
Returns the minimum size for the passed in component,
 This is passed off to the current layout manager.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
jc - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicSplitPaneUI,getNonContinuousLayoutDivider(),Component,Returns the divider to use when the splitPane is configured to not continuously layout.,"

getNonContinuousLayoutDivider
public Component getNonContinuousLayoutDivider()
Returns the divider to use when the splitPane is configured to
 not continuously layout. This divider will only be used during a
 dragging session.

"
BasicSplitPaneUI,getOrientation(),int,Returns the orientation for the JSplitPane.,"

getOrientation
public int getOrientation()
Returns the orientation for the JSplitPane.

"
BasicSplitPaneUI,getPreferredSize(JComponent jc),Dimension,"Returns the preferred size for the passed in component, This is passed off to the current layout manager.","

getPreferredSize
public Dimension getPreferredSize(JComponent jc)
Returns the preferred size for the passed in component,
 This is passed off to the current layout manager.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
jc - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicSplitPaneUI,getSplitPane(),JSplitPane,Returns the splitpane this instance is currently contained in.,"

getSplitPane
public JSplitPane getSplitPane()
Returns the splitpane this instance is currently contained
 in.

"
BasicSplitPaneUI,installDefaults(),protected void,Installs the UI defaults.,"

installDefaults
protected void installDefaults()
Installs the UI defaults.

"
BasicSplitPaneUI,installKeyboardActions(),protected void,Installs the keyboard actions for the UI.,"

installKeyboardActions
protected void installKeyboardActions()
Installs the keyboard actions for the UI.

"
BasicSplitPaneUI,installListeners(),protected void,Installs the event listeners for the UI.,"

installListeners
protected void installListeners()
Installs the event listeners for the UI.

"
BasicSplitPaneUI,installUI(JComponent c),void,Installs the UI.,"

installUI
public void installUI(JComponent c)
Installs the UI.

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicSplitPaneUI,isContinuousLayout(),boolean,Determines whether the JSplitPane is set to use a continuous layout.,"

isContinuousLayout
public boolean isContinuousLayout()
Determines whether the JSplitPane is set to use a continuous layout.

"
BasicSplitPaneUI,"paint(Graphics g, JComponent jc)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent jc)
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
jc - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicSplitPaneUI,resetLayoutManager(),protected void,Resets the layout manager based on orientation and messages it with invalidateLayout to pull in appropriate Components.,"

resetLayoutManager
protected void resetLayoutManager()
Resets the layout manager based on orientation and messages it
 with invalidateLayout to pull in appropriate Components.

"
BasicSplitPaneUI,resetToPreferredSizes(JSplitPane jc),void,Messaged to reset the preferred sizes.,"

resetToPreferredSizes
public void resetToPreferredSizes(JSplitPane jc)
Messaged to reset the preferred sizes.

Specified by:
resetToPreferredSizes in class SplitPaneUI


"
BasicSplitPaneUI,setContinuousLayout(boolean b),void,Turn continuous layout on/off.,"

setContinuousLayout
public void setContinuousLayout(boolean b)
Turn continuous layout on/off.

"
BasicSplitPaneUI,"setDividerLocation(JSplitPane jc, int location)",void,Sets the location of the divider to location.,"

setDividerLocation
public void setDividerLocation(JSplitPane jc,
                               int location)
Sets the location of the divider to location.

Specified by:
setDividerLocation in class SplitPaneUI


"
BasicSplitPaneUI,setLastDragLocation(int l),void,Set the last drag location of the JSplitPane.,"

setLastDragLocation
public void setLastDragLocation(int l)
Set the last drag location of the JSplitPane.

"
BasicSplitPaneUI,setNonContinuousLayoutDivider(Component newDivider),protected void,Sets the divider to use when the splitPane is configured to not continuously layout.,"

setNonContinuousLayoutDivider
protected void setNonContinuousLayoutDivider(Component newDivider)
Sets the divider to use when the splitPane is configured to
 not continuously layout. This divider will only be used during a
 dragging session. It is recommended that the passed in component
 be a heavy weight.

"
BasicSplitPaneUI,"setNonContinuousLayoutDivider(Component newDivider, boolean rememberSizes)",protected void,Sets the divider to use.,"

setNonContinuousLayoutDivider
protected void setNonContinuousLayoutDivider(Component newDivider,
                                             boolean rememberSizes)
Sets the divider to use.

"
BasicSplitPaneUI,setOrientation(int orientation),void,Set the orientation for the JSplitPane.,"

setOrientation
public void setOrientation(int orientation)
Set the orientation for the JSplitPane.

"
BasicSplitPaneUI,startDragging(),protected void,"Should be messaged before the dragging session starts, resets lastDragLocation and dividerSize.","

startDragging
protected void startDragging()
Should be messaged before the dragging session starts, resets
 lastDragLocation and dividerSize.

"
BasicSplitPaneUI,uninstallDefaults(),protected void,Uninstalls the UI defaults.,"

uninstallDefaults
protected void uninstallDefaults()
Uninstalls the UI defaults.

"
BasicSplitPaneUI,uninstallKeyboardActions(),protected void,Uninstalls the keyboard actions for the UI.,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()
Uninstalls the keyboard actions for the UI.

"
BasicSplitPaneUI,uninstallListeners(),protected void,Uninstalls the event listeners for the UI.,"

uninstallListeners
protected void uninstallListeners()
Uninstalls the event listeners for the UI.

"
BasicSplitPaneUI,uninstallUI(JComponent c),void,Uninstalls the UI.,"

uninstallUI
public void uninstallUI(JComponent c)
Uninstalls the UI.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTabbedPaneUI,assureRectsCreated(int tabCount),protected void,NULL,"

assureRectsCreated
protected void assureRectsCreated(int tabCount)

"
BasicTabbedPaneUI,calculateMaxTabHeight(int tabPlacement),protected int,NULL,"

calculateMaxTabHeight
protected int calculateMaxTabHeight(int tabPlacement)

"
BasicTabbedPaneUI,calculateMaxTabWidth(int tabPlacement),protected int,NULL,"

calculateMaxTabWidth
protected int calculateMaxTabWidth(int tabPlacement)

"
BasicTabbedPaneUI,"calculateTabAreaHeight(int tabPlacement, int horizRunCount, int maxTabHeight)",protected int,NULL,"

calculateTabAreaHeight
protected int calculateTabAreaHeight(int tabPlacement,
                                     int horizRunCount,
                                     int maxTabHeight)

"
BasicTabbedPaneUI,"calculateTabAreaWidth(int tabPlacement, int vertRunCount, int maxTabWidth)",protected int,NULL,"

calculateTabAreaWidth
protected int calculateTabAreaWidth(int tabPlacement,
                                    int vertRunCount,
                                    int maxTabWidth)

"
BasicTabbedPaneUI,"calculateTabHeight(int tabPlacement, int tabIndex, int fontHeight)",protected int,NULL,"

calculateTabHeight
protected int calculateTabHeight(int tabPlacement,
                                 int tabIndex,
                                 int fontHeight)

"
BasicTabbedPaneUI,"calculateTabWidth(int tabPlacement, int tabIndex, FontMetrics metrics)",protected int,NULL,"

calculateTabWidth
protected int calculateTabWidth(int tabPlacement,
                                int tabIndex,
                                FontMetrics metrics)

"
BasicTabbedPaneUI,createChangeListener(),protected ChangeListener,NULL,"

createChangeListener
protected ChangeListener createChangeListener()

"
BasicTabbedPaneUI,createFocusListener(),protected FocusListener,NULL,"

createFocusListener
protected FocusListener createFocusListener()

"
BasicTabbedPaneUI,createLayoutManager(),protected LayoutManager,Invoked by installUI to create a layout manager object to manage the JTabbedPane.,"

createLayoutManager
protected LayoutManager createLayoutManager()
Invoked by installUI to create
 a layout manager object to manage
 the JTabbedPane.

Returns:
a layout manager object
See Also:
BasicTabbedPaneUI.TabbedPaneLayout, 
JTabbedPane.getTabLayoutPolicy()


"
BasicTabbedPaneUI,createMouseListener(),protected MouseListener,NULL,"

createMouseListener
protected MouseListener createMouseListener()

"
BasicTabbedPaneUI,createPropertyChangeListener(),protected PropertyChangeListener,NULL,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()

"
BasicTabbedPaneUI,createScrollButton(int direction),protected JButton,Creates and returns a JButton that will provide the user with a way to scroll the tabs in a particular direction.,"

createScrollButton
protected JButton createScrollButton(int direction)
Creates and returns a JButton that will provide the user
 with a way to scroll the tabs in a particular direction. The
 returned JButton must be instance of UIResource.

Parameters:
direction - One of the SwingConstants constants:
 SOUTH, NORTH, EAST or WEST
Returns:
Widget for user to
Throws:
IllegalArgumentException - if direction is not one of
         NORTH, SOUTH, EAST or WEST
Since:
1.5
See Also:
JTabbedPane.setTabPlacement(int), 
SwingConstants


"
BasicTabbedPaneUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicTabbedPaneUI,expandTabRunsArray(),protected void,NULL,"

expandTabRunsArray
protected void expandTabRunsArray()

"
BasicTabbedPaneUI,getBaseline(int tab),protected int,Returns the baseline for the specified tab.,"

getBaseline
protected int getBaseline(int tab)
Returns the baseline for the specified tab.

Parameters:
tab - index of tab to get baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
IndexOutOfBoundsException - if index is out of range
            (index < 0 || index >= tab count)
Since:
1.6


"
BasicTabbedPaneUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTabbedPaneUI,getBaselineOffset(),protected int,Returns the amount the baseline is offset by.,"

getBaselineOffset
protected int getBaselineOffset()
Returns the amount the baseline is offset by.  This is typically
 the same as getTabLabelShiftY.

Returns:
amount to offset the baseline by
Since:
1.6


"
BasicTabbedPaneUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTabbedPaneUI,getContentBorderInsets(int tabPlacement),protected Insets,NULL,"

getContentBorderInsets
protected Insets getContentBorderInsets(int tabPlacement)

"
BasicTabbedPaneUI,getFocusIndex(),protected int,Returns the index of the tab that has focus.,"

getFocusIndex
protected int getFocusIndex()
Returns the index of the tab that has focus.

Returns:
index of tab that has focus
Since:
1.5


"
BasicTabbedPaneUI,getFontMetrics(),protected FontMetrics,NULL,"

getFontMetrics
protected FontMetrics getFontMetrics()

"
BasicTabbedPaneUI,getIconForTab(int tabIndex),protected Icon,NULL,"

getIconForTab
protected Icon getIconForTab(int tabIndex)

"
BasicTabbedPaneUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicTabbedPaneUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTabbedPaneUI,getNextTabIndex(int base),protected int,NULL,"

getNextTabIndex
protected int getNextTabIndex(int base)

"
BasicTabbedPaneUI,"getNextTabIndexInRun(int tabCount, int base)",protected int,NULL,"

getNextTabIndexInRun
protected int getNextTabIndexInRun(int tabCount,
                                   int base)

"
BasicTabbedPaneUI,getNextTabRun(int baseRun),protected int,NULL,"

getNextTabRun
protected int getNextTabRun(int baseRun)

"
BasicTabbedPaneUI,getPreviousTabIndex(int base),protected int,NULL,"

getPreviousTabIndex
protected int getPreviousTabIndex(int base)

"
BasicTabbedPaneUI,"getPreviousTabIndexInRun(int tabCount, int base)",protected int,NULL,"

getPreviousTabIndexInRun
protected int getPreviousTabIndexInRun(int tabCount,
                                       int base)

"
BasicTabbedPaneUI,getPreviousTabRun(int baseRun),protected int,NULL,"

getPreviousTabRun
protected int getPreviousTabRun(int baseRun)

"
BasicTabbedPaneUI,getRolloverTab(),protected int,"Returns the tab the mouse is currently over, or -1 if the mouse is no longer over any tab.","

getRolloverTab
protected int getRolloverTab()
Returns the tab the mouse is currently over, or -1 if the mouse is no
 longer over any tab.

Returns:
the tab the mouse is currently over, or -1 if the mouse is no
 longer over any tab
Since:
1.5


"
BasicTabbedPaneUI,"getRunForTab(int tabCount, int tabIndex)",protected int,NULL,"

getRunForTab
protected int getRunForTab(int tabCount,
                           int tabIndex)

"
BasicTabbedPaneUI,getSelectedTabPadInsets(int tabPlacement),protected Insets,NULL,"

getSelectedTabPadInsets
protected Insets getSelectedTabPadInsets(int tabPlacement)

"
BasicTabbedPaneUI,getTabAreaInsets(int tabPlacement),protected Insets,NULL,"

getTabAreaInsets
protected Insets getTabAreaInsets(int tabPlacement)

"
BasicTabbedPaneUI,"getTabBounds(int tabIndex, Rectangle dest)",protected Rectangle,Returns the bounds of the specified tab in the coordinate space of the JTabbedPane component.,"

getTabBounds
protected Rectangle getTabBounds(int tabIndex,
                                 Rectangle dest)
Returns the bounds of the specified tab in the coordinate space
 of the JTabbedPane component.  This is required because the tab rects
 are by default defined in the coordinate space of the component where
 they are rendered, which could be the JTabbedPane
 (for WRAP_TAB_LAYOUT) or a ScrollableTabPanel (SCROLL_TAB_LAYOUT).
 This method should be used whenever the tab rectangle must be relative
 to the JTabbedPane itself and the result should be placed in a
 designated Rectangle object (rather than instantiating and returning
 a new Rectangle each time). The tab index parameter must be a valid
 tabbed pane tab index (0 to tab count - 1, inclusive).  The destination
 rectangle parameter must be a valid Rectangle instance.
 The handling of invalid parameters is unspecified.

Parameters:
tabIndex - the index of the tab
dest - the rectangle where the result should be placed
Returns:
the resulting rectangle
Since:
1.4


"
BasicTabbedPaneUI,"getTabBounds(JTabbedPane pane, int i)",Rectangle,Returns the bounds of the specified tab index.,"

getTabBounds
public Rectangle getTabBounds(JTabbedPane pane,
                              int i)
Returns the bounds of the specified tab index.  The bounds are
 with respect to the JTabbedPane's coordinate space.

Specified by:
getTabBounds in class TabbedPaneUI


"
BasicTabbedPaneUI,"getTabInsets(int tabPlacement, int tabIndex)",protected Insets,NULL,"

getTabInsets
protected Insets getTabInsets(int tabPlacement,
                              int tabIndex)

"
BasicTabbedPaneUI,"getTabLabelShiftX(int tabPlacement, int tabIndex, boolean isSelected)",protected int,NULL,"

getTabLabelShiftX
protected int getTabLabelShiftX(int tabPlacement,
                                int tabIndex,
                                boolean isSelected)

"
BasicTabbedPaneUI,"getTabLabelShiftY(int tabPlacement, int tabIndex, boolean isSelected)",protected int,NULL,"

getTabLabelShiftY
protected int getTabLabelShiftY(int tabPlacement,
                                int tabIndex,
                                boolean isSelected)

"
BasicTabbedPaneUI,getTabRunCount(JTabbedPane pane),int,NULL,"

getTabRunCount
public int getTabRunCount(JTabbedPane pane)

Specified by:
getTabRunCount in class TabbedPaneUI


"
BasicTabbedPaneUI,"getTabRunIndent(int tabPlacement, int run)",protected int,NULL,"

getTabRunIndent
protected int getTabRunIndent(int tabPlacement,
                              int run)

"
BasicTabbedPaneUI,"getTabRunOffset(int tabPlacement, int tabCount, int tabIndex, boolean forward)",protected int,NULL,"

getTabRunOffset
protected int getTabRunOffset(int tabPlacement,
                              int tabCount,
                              int tabIndex,
                              boolean forward)

"
BasicTabbedPaneUI,getTabRunOverlay(int tabPlacement),protected int,NULL,"

getTabRunOverlay
protected int getTabRunOverlay(int tabPlacement)

"
BasicTabbedPaneUI,getTextViewForTab(int tabIndex),protected View,Returns the text View object required to render stylized text (HTML) for the specified tab or null if no specialized text rendering is needed for this tab.,"

getTextViewForTab
protected View getTextViewForTab(int tabIndex)
Returns the text View object required to render stylized text (HTML) for
 the specified tab or null if no specialized text rendering is needed
 for this tab. This is provided to support html rendering inside tabs.

Parameters:
tabIndex - the index of the tab
Returns:
the text view to render the tab's text or null if no
         specialized rendering is required
Since:
1.4


"
BasicTabbedPaneUI,getVisibleComponent(),protected Component,NULL,"

getVisibleComponent
protected Component getVisibleComponent()

"
BasicTabbedPaneUI,installComponents(),protected void,Creates and installs any required subcomponents for the JTabbedPane.,"

installComponents
protected void installComponents()
Creates and installs any required subcomponents for the JTabbedPane.
 Invoked by installUI.

Since:
1.4


"
BasicTabbedPaneUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicTabbedPaneUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicTabbedPaneUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicTabbedPaneUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicTabbedPaneUI,"lastTabInRun(int tabCount, int run)",protected int,NULL,"

lastTabInRun
protected int lastTabInRun(int tabCount,
                           int run)

"
BasicTabbedPaneUI,"layoutLabel(int tabPlacement, FontMetrics metrics, int tabIndex, String title, Icon icon, Rectangle tabRect, Rectangle iconRect, Rectangle textRect, boolean isSelected)",protected void,NULL,"

layoutLabel
protected void layoutLabel(int tabPlacement,
                           FontMetrics metrics,
                           int tabIndex,
                           String title,
                           Icon icon,
                           Rectangle tabRect,
                           Rectangle iconRect,
                           Rectangle textRect,
                           boolean isSelected)

"
BasicTabbedPaneUI,navigateSelectedTab(int direction),protected void,NULL,"

navigateSelectedTab
protected void navigateSelectedTab(int direction)

"
BasicTabbedPaneUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicTabbedPaneUI,"paintContentBorder(Graphics g, int tabPlacement, int selectedIndex)",protected void,NULL,"

paintContentBorder
protected void paintContentBorder(Graphics g,
                                  int tabPlacement,
                                  int selectedIndex)

"
BasicTabbedPaneUI,"paintContentBorderBottomEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderBottomEdge
protected void paintContentBorderBottomEdge(Graphics g,
                                            int tabPlacement,
                                            int selectedIndex,
                                            int x,
                                            int y,
                                            int w,
                                            int h)

"
BasicTabbedPaneUI,"paintContentBorderLeftEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderLeftEdge
protected void paintContentBorderLeftEdge(Graphics g,
                                          int tabPlacement,
                                          int selectedIndex,
                                          int x,
                                          int y,
                                          int w,
                                          int h)

"
BasicTabbedPaneUI,"paintContentBorderRightEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderRightEdge
protected void paintContentBorderRightEdge(Graphics g,
                                           int tabPlacement,
                                           int selectedIndex,
                                           int x,
                                           int y,
                                           int w,
                                           int h)

"
BasicTabbedPaneUI,"paintContentBorderTopEdge(Graphics g, int tabPlacement, int selectedIndex, int x, int y, int w, int h)",protected void,NULL,"

paintContentBorderTopEdge
protected void paintContentBorderTopEdge(Graphics g,
                                         int tabPlacement,
                                         int selectedIndex,
                                         int x,
                                         int y,
                                         int w,
                                         int h)

"
BasicTabbedPaneUI,"paintFocusIndicator(Graphics g, int tabPlacement, Rectangle[] rects, int tabIndex, Rectangle iconRect, Rectangle textRect, boolean isSelected)",protected void,NULL,"

paintFocusIndicator
protected void paintFocusIndicator(Graphics g,
                                   int tabPlacement,
                                   Rectangle[] rects,
                                   int tabIndex,
                                   Rectangle iconRect,
                                   Rectangle textRect,
                                   boolean isSelected)

"
BasicTabbedPaneUI,"paintIcon(Graphics g, int tabPlacement, int tabIndex, Icon icon, Rectangle iconRect, boolean isSelected)",protected void,NULL,"

paintIcon
protected void paintIcon(Graphics g,
                         int tabPlacement,
                         int tabIndex,
                         Icon icon,
                         Rectangle iconRect,
                         boolean isSelected)

"
BasicTabbedPaneUI,"paintTab(Graphics g, int tabPlacement, Rectangle[] rects, int tabIndex, Rectangle iconRect, Rectangle textRect)",protected void,NULL,"

paintTab
protected void paintTab(Graphics g,
                        int tabPlacement,
                        Rectangle[] rects,
                        int tabIndex,
                        Rectangle iconRect,
                        Rectangle textRect)

"
BasicTabbedPaneUI,"paintTabArea(Graphics g, int tabPlacement, int selectedIndex)",protected void,Paints the tabs in the tab area.,"

paintTabArea
protected void paintTabArea(Graphics g,
                            int tabPlacement,
                            int selectedIndex)
Paints the tabs in the tab area.
 Invoked by paint().
 The graphics parameter must be a valid Graphics
 object.  Tab placement may be either:
 JTabbedPane.TOP, JTabbedPane.BOTTOM,
 JTabbedPane.LEFT, or JTabbedPane.RIGHT.
 The selected index must be a valid tabbed pane tab index (0 to
 tab count - 1, inclusive) or -1 if no tab is currently selected.
 The handling of invalid parameters is unspecified.

Parameters:
g - the graphics object to use for rendering
tabPlacement - the placement for the tabs within the JTabbedPane
selectedIndex - the tab index of the selected component
Since:
1.4


"
BasicTabbedPaneUI,"paintTabBackground(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)",protected void,NULL,"

paintTabBackground
protected void paintTabBackground(Graphics g,
                                  int tabPlacement,
                                  int tabIndex,
                                  int x,
                                  int y,
                                  int w,
                                  int h,
                                  boolean isSelected)

"
BasicTabbedPaneUI,"paintTabBorder(Graphics g, int tabPlacement, int tabIndex, int x, int y, int w, int h, boolean isSelected)",protected void,this function draws the border around each tab note that this function does now draw the background of the tab.,"

paintTabBorder
protected void paintTabBorder(Graphics g,
                              int tabPlacement,
                              int tabIndex,
                              int x,
                              int y,
                              int w,
                              int h,
                              boolean isSelected)
this function draws the border around each tab
 note that this function does now draw the background of the tab.
 that is done elsewhere

"
BasicTabbedPaneUI,"paintText(Graphics g, int tabPlacement, Font font, FontMetrics metrics, int tabIndex, String title, Rectangle textRect, boolean isSelected)",protected void,NULL,"

paintText
protected void paintText(Graphics g,
                         int tabPlacement,
                         Font font,
                         FontMetrics metrics,
                         int tabIndex,
                         String title,
                         Rectangle textRect,
                         boolean isSelected)

"
BasicTabbedPaneUI,"rotateInsets(Insets topInsets, Insets targetInsets, int targetPlacement)",protected static void,NULL,"

rotateInsets
protected static void rotateInsets(Insets topInsets,
                                   Insets targetInsets,
                                   int targetPlacement)

"
BasicTabbedPaneUI,"selectAdjacentRunTab(int tabPlacement, int tabIndex, int offset)",protected void,NULL,"

selectAdjacentRunTab
protected void selectAdjacentRunTab(int tabPlacement,
                                    int tabIndex,
                                    int offset)

"
BasicTabbedPaneUI,selectNextTab(int current),protected void,NULL,"

selectNextTab
protected void selectNextTab(int current)

"
BasicTabbedPaneUI,selectNextTabInRun(int current),protected void,NULL,"

selectNextTabInRun
protected void selectNextTabInRun(int current)

"
BasicTabbedPaneUI,selectPreviousTab(int current),protected void,NULL,"

selectPreviousTab
protected void selectPreviousTab(int current)

"
BasicTabbedPaneUI,selectPreviousTabInRun(int current),protected void,NULL,"

selectPreviousTabInRun
protected void selectPreviousTabInRun(int current)

"
BasicTabbedPaneUI,setRolloverTab(int index),protected void,Sets the tab the mouse is currently over to index.,"

setRolloverTab
protected void setRolloverTab(int index)
Sets the tab the mouse is currently over to index.
 index will be -1 if the mouse is no longer over any
 tab. No checking is done to ensure the passed in index identifies a
 valid tab.

Parameters:
index - Index of the tab the mouse is over.
Since:
1.5


"
BasicTabbedPaneUI,setVisibleComponent(Component component),protected void,NULL,"

setVisibleComponent
protected void setVisibleComponent(Component component)

"
BasicTabbedPaneUI,"shouldPadTabRun(int tabPlacement, int run)",protected boolean,NULL,"

shouldPadTabRun
protected boolean shouldPadTabRun(int tabPlacement,
                                  int run)

"
BasicTabbedPaneUI,shouldRotateTabRuns(int tabPlacement),protected boolean,NULL,"

shouldRotateTabRuns
protected boolean shouldRotateTabRuns(int tabPlacement)

"
BasicTabbedPaneUI,"tabForCoordinate(JTabbedPane pane, int x, int y)",int,Returns the tab index which intersects the specified point in the JTabbedPane's coordinate space.,"

tabForCoordinate
public int tabForCoordinate(JTabbedPane pane,
                            int x,
                            int y)
Returns the tab index which intersects the specified point
 in the JTabbedPane's coordinate space.

Specified by:
tabForCoordinate in class TabbedPaneUI


"
BasicTabbedPaneUI,uninstallComponents(),protected void,Removes any installed subcomponents from the JTabbedPane.,"

uninstallComponents
protected void uninstallComponents()
Removes any installed subcomponents from the JTabbedPane.
 Invoked by uninstallUI.

Since:
1.4


"
BasicTabbedPaneUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicTabbedPaneUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicTabbedPaneUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicTabbedPaneUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTableHeaderUI,createMouseInputListener(),protected MouseInputListener,Creates the mouse listener for the JTableHeader.,"

createMouseInputListener
protected MouseInputListener createMouseInputListener()
Creates the mouse listener for the JTableHeader.

"
BasicTableHeaderUI,createUI(JComponent h),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent h)

"
BasicTableHeaderUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTableHeaderUI,getMaximumSize(JComponent c),Dimension,Return the maximum size of the header.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Return the maximum size of the header. The maximum width is the sum
 of the maximum widths of each column (plus inter-cell spacing).

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicTableHeaderUI,getMinimumSize(JComponent c),Dimension,Return the minimum size of the header.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Return the minimum size of the header. The minimum width is the sum
 of the minimum widths of each column (plus inter-cell spacing).

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTableHeaderUI,getPreferredSize(JComponent c),Dimension,Return the preferred size of the header.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Return the preferred size of the header. The preferred height is the
 maximum of the preferred heights of all of the components provided
 by the header renderers. The preferred width is the sum of the
 preferred widths of each column (plus inter-cell spacing).

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicTableHeaderUI,getRolloverColumn(),protected int,Returns the index of the column header over which the mouse currently is.,"

getRolloverColumn
protected int getRolloverColumn()
Returns the index of the column header over which the mouse
 currently is. When the mouse is not over the table header,
 -1 is returned.

Returns:
the index of the current rollover column
Since:
1.6
See Also:
rolloverColumnUpdated(int, int)


"
BasicTableHeaderUI,installDefaults(),protected void,"Initializes JTableHeader properties such as font, foreground, and background.","

installDefaults
protected void installDefaults()
Initializes JTableHeader properties such as font, foreground, and background.
 The font, foreground, and background properties are only set if their
 current value is either null or a UIResource, other properties are set
 if the current value is null.

See Also:
installUI(javax.swing.JComponent)


"
BasicTableHeaderUI,installKeyboardActions(),protected void,Register all keyboard actions on the JTableHeader.,"

installKeyboardActions
protected void installKeyboardActions()
Register all keyboard actions on the JTableHeader.

"
BasicTableHeaderUI,installListeners(),protected void,Attaches listeners to the JTableHeader.,"

installListeners
protected void installListeners()
Attaches listeners to the JTableHeader.

"
BasicTableHeaderUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicTableHeaderUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicTableHeaderUI,"rolloverColumnUpdated(int oldColumn, int newColumn)",protected void,This method gets called every time when a rollover column in the table header is updated.,"

rolloverColumnUpdated
protected void rolloverColumnUpdated(int oldColumn,
                                     int newColumn)
This method gets called every time when a rollover column in the table
 header is updated. Every look and feel that supports a rollover effect
 in a table header should override this method and repaint the header.

Parameters:
oldColumn - the index of the previous rollover column or -1 if the
 mouse was not over a column
newColumn - the index of the new rollover column or -1 if the mouse
 is not over a column
Since:
1.6
See Also:
getRolloverColumn(), 
JTableHeader.getHeaderRect(int)


"
BasicTableHeaderUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicTableHeaderUI,uninstallKeyboardActions(),protected void,Unregisters default key actions.,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()
Unregisters default key actions.

"
BasicTableHeaderUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicTableHeaderUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTableUI,createFocusListener(),protected FocusListener,Creates the focus listener for handling keyboard navigation in the JTable.,"

createFocusListener
protected FocusListener createFocusListener()
Creates the focus listener for handling keyboard navigation in the JTable.

"
BasicTableUI,createKeyListener(),protected KeyListener,Creates the key listener for handling keyboard navigation in the JTable.,"

createKeyListener
protected KeyListener createKeyListener()
Creates the key listener for handling keyboard navigation in the JTable.

"
BasicTableUI,createMouseInputListener(),protected MouseInputListener,Creates the mouse listener for the JTable.,"

createMouseInputListener
protected MouseInputListener createMouseInputListener()
Creates the mouse listener for the JTable.

"
BasicTableUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicTableUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTableUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTableUI,getMaximumSize(JComponent c),Dimension,Return the maximum size of the table.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Return the maximum size of the table. The maximum height is the
 row heighttimes the number of rows.
 The maximum width is the sum of the maximum widths of each column.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicTableUI,getMinimumSize(JComponent c),Dimension,Return the minimum size of the table.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Return the minimum size of the table. The minimum height is the
 row height times the number of rows.
 The minimum width is the sum of the minimum widths of each column.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTableUI,getPreferredSize(JComponent c),Dimension,Return the preferred size of the table.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Return the preferred size of the table. The preferred height is the
 row height times the number of rows.
 The preferred width is the sum of the preferred widths of each column.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicTableUI,installDefaults(),protected void,"Initialize JTable properties, e.g.","

installDefaults
protected void installDefaults()
Initialize JTable properties, e.g. font, foreground, and background.
 The font, foreground, and background properties are only set if their
 current value is either null or a UIResource, other properties are set
 if the current value is null.

See Also:
installUI(javax.swing.JComponent)


"
BasicTableUI,installKeyboardActions(),protected void,Register all keyboard actions on the JTable.,"

installKeyboardActions
protected void installKeyboardActions()
Register all keyboard actions on the JTable.

"
BasicTableUI,installListeners(),protected void,Attaches listeners to the JTable.,"

installListeners
protected void installListeners()
Attaches listeners to the JTable.

"
BasicTableUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicTableUI,"paint(Graphics g, JComponent c)",void,Paint a representation of the table instance that was set in installUI().,"

paint
public void paint(Graphics g,
                  JComponent c)
Paint a representation of the table instance
 that was set in installUI().

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicTableUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicTableUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicTableUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicTableUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTextAreaUI,create(Element elem),View,Creates the view for an element.,"

create
public View create(Element elem)
Creates the view for an element.  Returns a WrappedPlainView or
 PlainView.

Specified by:
create in interface ViewFactory
Overrides:
create in class BasicTextUI
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
BasicTextAreaUI,createUI(JComponent ta),static ComponentUI,Creates a UI for a JTextArea.,"

createUI
public static ComponentUI createUI(JComponent ta)
Creates a UI for a JTextArea.

Parameters:
ta - a text area
Returns:
the UI


"
BasicTextAreaUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTextAreaUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTextAreaUI,getMinimumSize(JComponent c),Dimension,The method is overridden to take into account caret width.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
The method is overridden to take into account caret width.

Overrides:
getMinimumSize in class BasicTextUI
Parameters:
c - the editor component
Returns:
the minimum size
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTextAreaUI,getPreferredSize(JComponent c),Dimension,The method is overridden to take into account caret width.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
The method is overridden to take into account caret width.

Overrides:
getPreferredSize in class BasicTextUI
Parameters:
c - the editor component
Returns:
the preferred size
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicTextAreaUI,getPropertyPrefix(),protected String,Fetches the name used as a key to look up properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to look up properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Specified by:
getPropertyPrefix in class BasicTextUI
Returns:
the name (""TextArea"")


"
BasicTextAreaUI,installDefaults(),protected void,"Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color.","

installDefaults
protected void installDefaults()
Description copied from class: BasicTextUI
Initializes component properties, such as font, foreground,
 background, caret color, selection color, selected text color,
 disabled text color, and border color.  The font, foreground, and
 background properties are only set if their current value is either null
 or a UIResource, other properties are set if the current
 value is null.

Overrides:
installDefaults in class BasicTextUI
See Also:
BasicTextUI.uninstallDefaults(), 
BasicTextUI.installUI(javax.swing.JComponent)


"
BasicTextAreaUI,propertyChange(PropertyChangeEvent evt),protected void,This method gets called when a bound property is changed on the associated JTextComponent.,"

propertyChange
protected void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.
 This is implemented to rebuild the View when the
 WrapLine or the WrapStyleWord property changes.

Overrides:
propertyChange in class BasicTextUI
Parameters:
evt - the property change event


"
BasicTextFieldUI,create(Element elem),View,Creates a view (FieldView) based on an element.,"

create
public View create(Element elem)
Creates a view (FieldView) based on an element.

Specified by:
create in interface ViewFactory
Overrides:
create in class BasicTextUI
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
BasicTextFieldUI,createUI(JComponent c),static ComponentUI,Creates a UI for a JTextField.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for a JTextField.

Parameters:
c - the text field
Returns:
the UI


"
BasicTextFieldUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTextFieldUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTextFieldUI,getPropertyPrefix(),protected String,Fetches the name used as a key to lookup properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to lookup properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Specified by:
getPropertyPrefix in class BasicTextUI
Returns:
the name (""TextField"")


"
BasicTextPaneUI,createUI(JComponent c),static ComponentUI,Creates a UI for the JTextPane.,"

createUI
public static ComponentUI createUI(JComponent c)
Creates a UI for the JTextPane.

Parameters:
c - the JTextPane object
Returns:
the UI


"
BasicTextPaneUI,getPropertyPrefix(),protected String,Fetches the name used as a key to lookup properties through the UIManager.,"

getPropertyPrefix
protected String getPropertyPrefix()
Fetches the name used as a key to lookup properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Overrides:
getPropertyPrefix in class BasicEditorPaneUI
Returns:
the name (""TextPane"")


"
BasicTextPaneUI,installUI(JComponent c),void,Installs the UI for a component.,"

installUI
public void installUI(JComponent c)
Description copied from class: BasicEditorPaneUI
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class BasicEditorPaneUI
Parameters:
c - the editor component
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
BasicTextPaneUI,propertyChange(PropertyChangeEvent evt),protected void,This method gets called when a bound property is changed on the associated JTextComponent.,"

propertyChange
protected void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.
 If the font, foreground or document has changed, the
 the appropriate property is set in the default style of
 the document.

Overrides:
propertyChange in class BasicEditorPaneUI
Parameters:
evt - the property change event


"
BasicTextUI,create(Element elem),View,Creates a view for an element.,"

create
public View create(Element elem)
Creates a view for an element.
 If a subclass wishes to directly implement the factory
 producing the view(s), it should reimplement this
 method.  By default it simply returns null indicating
 it is unable to represent the element.

Specified by:
create in interface ViewFactory
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
BasicTextUI,"create(Element elem, int p0, int p1)",View,Creates a view for an element.,"

create
public View create(Element elem,
                   int p0,
                   int p1)
Creates a view for an element.
 If a subclass wishes to directly implement the factory
 producing the view(s), it should reimplement this
 method.  By default it simply returns null indicating
 it is unable to represent the part of the element.

Parameters:
elem - the element
p0 - the starting offset >= 0
p1 - the ending offset >= p0
Returns:
the view


"
BasicTextUI,createCaret(),protected Caret,Creates the object to use for a caret.,"

createCaret
protected Caret createCaret()
Creates the object to use for a caret.  By default an
 instance of BasicCaret is created.  This method
 can be redefined to provide something else that implements
 the InputPosition interface or a subclass of JCaret.

Returns:
the caret object


"
BasicTextUI,createHighlighter(),protected Highlighter,Creates the object to use for adding highlights.,"

createHighlighter
protected Highlighter createHighlighter()
Creates the object to use for adding highlights.  By default
 an instance of BasicHighlighter is created.  This method
 can be redefined to provide something else that implements
 the Highlighter interface or a subclass of DefaultHighlighter.

Returns:
the highlighter


"
BasicTextUI,createKeymap(),protected Keymap,"Creates the keymap to use for the text component, and installs any necessary bindings into it.","

createKeymap
protected Keymap createKeymap()
Creates the keymap to use for the text component, and installs
 any necessary bindings into it.  By default, the keymap is
 shared between all instances of this type of TextUI. The
 keymap has the name defined by the getKeymapName method.  If the
 keymap is not found, then DEFAULT_KEYMAP from JTextComponent is used.
 
 The set of bindings used to create the keymap is fetched
 from the UIManager using a key formed by combining the
 getPropertyPrefix() method
 and the string .keyBindings.  The type is expected
 to be JTextComponent.KeyBinding[].

Returns:
the keymap
See Also:
getKeymapName(), 
JTextComponent


"
BasicTextUI,"damageRange(JTextComponent tc, int p0, int p1)",void,Causes the portion of the view responsible for the given part of the model to be repainted.,"

damageRange
public void damageRange(JTextComponent tc,
                        int p0,
                        int p1)
Causes the portion of the view responsible for the
 given part of the model to be repainted.  Does nothing if
 the view is not currently painted.

Specified by:
damageRange in class TextUI
Parameters:
tc - the text component for which this UI is installed
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0
See Also:
TextUI.damageRange(javax.swing.text.JTextComponent, int, int)


"
BasicTextUI,"damageRange(JTextComponent t, int p0, int p1, Position.Bias p0Bias, Position.Bias p1Bias)",void,Causes the portion of the view responsible for the given part of the model to be repainted.,"

damageRange
public void damageRange(JTextComponent t,
                        int p0,
                        int p1,
                        Position.Bias p0Bias,
                        Position.Bias p1Bias)
Causes the portion of the view responsible for the
 given part of the model to be repainted.

Specified by:
damageRange in class TextUI
Parameters:
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0


"
BasicTextUI,getComponent(),protected JTextComponent,Fetches the text component associated with this UI implementation.,"

getComponent
protected final JTextComponent getComponent()
Fetches the text component associated with this
 UI implementation.  This will be null until
 the ui has been installed.

Returns:
the editor component


"
BasicTextUI,getEditorKit(JTextComponent tc),EditorKit,Fetches the EditorKit for the UI.,"

getEditorKit
public EditorKit getEditorKit(JTextComponent tc)
Fetches the EditorKit for the UI.

Specified by:
getEditorKit in class TextUI
Parameters:
tc - the text component for which this UI is installed
Returns:
the editor capabilities
See Also:
TextUI.getEditorKit(javax.swing.text.JTextComponent)


"
BasicTextUI,getKeymapName(),protected String,Fetches the name of the keymap that will be installed/used by default for this UI.,"

getKeymapName
protected String getKeymapName()
Fetches the name of the keymap that will be installed/used
 by default for this UI. This is implemented to create a
 name based upon the classname.  The name is the the name
 of the class with the package prefix removed.

Returns:
the name


"
BasicTextUI,getMaximumSize(JComponent c),Dimension,Gets the maximum size for the editor component.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Gets the maximum size for the editor component.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the editor component
Returns:
the size
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicTextUI,getMinimumSize(JComponent c),Dimension,Gets the minimum size for the editor component.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Gets the minimum size for the editor component.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the editor component
Returns:
the size
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTextUI,"getNextVisualPositionFrom(JTextComponent t, int pos, Position.Bias b, int direction, Position.Bias[] biasRet)",int,Provides a way to determine the next visually represented model location that one might place a caret.,"

getNextVisualPositionFrom
public int getNextVisualPositionFrom(JTextComponent t,
                                     int pos,
                                     Position.Bias b,
                                     int direction,
                                     Position.Bias[] biasRet)
                              throws BadLocationException
Provides a way to determine the next visually represented model
 location that one might place a caret.  Some views may not be visible,
 they might not be in the same order found in the model, or they just
 might not allow access to some of the locations in the model.

Specified by:
getNextVisualPositionFrom in class TextUI
Parameters:
t - the text component for which this UI is installed
pos - the position to convert >= 0
b - the bias for the position
direction - the direction from the current position that can
  be thought of as the arrow keys typically found on a keyboard.
  This may be SwingConstants.WEST, SwingConstants.EAST,
  SwingConstants.NORTH, or SwingConstants.SOUTH
biasRet - an array to contain the bias for the returned position
Returns:
the location within the model that best represents the next
  location visual position
Throws:
BadLocationException


"
BasicTextUI,getPreferredSize(JComponent c),Dimension,Gets the preferred size for the editor component.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Gets the preferred size for the editor component.  If the component
 has been given a size prior to receiving this request, it will
 set the size of the view hierarchy to reflect the size of the component
 before requesting the preferred size of the view hierarchy.  This
 allows formatted views to format to the current component size before
 answering the request.  Other views don't care about currently formatted
 size and give the same answer either way.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the editor component
Returns:
the size
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicTextUI,getPropertyPrefix(),protected abstract String,Gets the name used as a key to look up properties through the UIManager.,"

getPropertyPrefix
protected abstract String getPropertyPrefix()
Gets the name used as a key to look up properties through the
 UIManager.  This is used as a prefix to all the standard
 text properties.

Returns:
the name


"
BasicTextUI,getRootView(JTextComponent tc),View,Fetches a View with the allocation of the associated text component (i.e.,"

getRootView
public View getRootView(JTextComponent tc)
Fetches a View with the allocation of the associated
 text component (i.e. the root of the hierarchy) that
 can be traversed to determine how the model is being
 represented spatially.
 
NOTE:The View hierarchy can
 be traversed from the root view, and other things
 can be done as well.  Things done in this way cannot
 be protected like simple method calls through the TextUI.
 Therefore, proper operation in the presence of concurrency
 must be arranged by any logic that calls this method!
 

Specified by:
getRootView in class TextUI
Parameters:
tc - the text component for which this UI is installed
Returns:
the view
See Also:
TextUI.getRootView(javax.swing.text.JTextComponent)


"
BasicTextUI,"getToolTipText(JTextComponent t, Point pt)",String,Returns the string to be used as the tooltip at the passed in location.,"

getToolTipText
public String getToolTipText(JTextComponent t,
                             Point pt)
Returns the string to be used as the tooltip at the passed in location.
 This forwards the method onto the root View.

Overrides:
getToolTipText in class TextUI
Since:
1.4
See Also:
JTextComponent.getToolTipText(java.awt.event.MouseEvent), 
View.getToolTipText(float, float, java.awt.Shape)


"
BasicTextUI,getVisibleEditorRect(),protected Rectangle,Gets the allocation to give the root View.,"

getVisibleEditorRect
protected Rectangle getVisibleEditorRect()
Gets the allocation to give the root View.  Due
 to an unfortunate set of historical events this
 method is inappropriately named.  The Rectangle
 returned has nothing to do with visibility.
 The component must have a non-zero positive size for
 this translation to be computed.

Returns:
the bounding box for the root view


"
BasicTextUI,installDefaults(),protected void,"Initializes component properties, such as font, foreground, background, caret color, selection color, selected text color, disabled text color, and border color.","

installDefaults
protected void installDefaults()
Initializes component properties, such as font, foreground,
 background, caret color, selection color, selected text color,
 disabled text color, and border color.  The font, foreground, and
 background properties are only set if their current value is either null
 or a UIResource, other properties are set if the current
 value is null.

See Also:
uninstallDefaults(), 
installUI(javax.swing.JComponent)


"
BasicTextUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicTextUI,installListeners(),protected void,Installs listeners for the UI.,"

installListeners
protected void installListeners()
Installs listeners for the UI.

"
BasicTextUI,installUI(JComponent c),void,Installs the UI for a component.,"

installUI
public void installUI(JComponent c)
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the editor component
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
BasicTextUI,modelChanged(),protected void,Flags model changes.,"

modelChanged
protected void modelChanged()
Flags model changes.
 This is called whenever the model has changed.
 It is implemented to rebuild the view hierarchy
 to represent the default root element of the
 associated model.

"
BasicTextUI,"modelToView(JTextComponent tc, int pos)",Rectangle,Converts the given location in the model to a place in the view coordinate system.,"

modelToView
public Rectangle modelToView(JTextComponent tc,
                             int pos)
                      throws BadLocationException
Converts the given location in the model to a place in
 the view coordinate system.
 The component must have a non-zero positive size for
 this translation to be computed.

Specified by:
modelToView in class TextUI
Parameters:
tc - the text component for which this UI is installed
pos - the local location in the model to translate >= 0
Returns:
the coordinates as a rectangle, null if the model is not painted
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
TextUI.modelToView(javax.swing.text.JTextComponent, int)


"
BasicTextUI,"modelToView(JTextComponent tc, int pos, Position.Bias bias)",Rectangle,Converts the given location in the model to a place in the view coordinate system.,"

modelToView
public Rectangle modelToView(JTextComponent tc,
                             int pos,
                             Position.Bias bias)
                      throws BadLocationException
Converts the given location in the model to a place in
 the view coordinate system.
 The component must have a non-zero positive size for
 this translation to be computed.

Specified by:
modelToView in class TextUI
Parameters:
tc - the text component for which this UI is installed
pos - the local location in the model to translate >= 0
Returns:
the coordinates as a rectangle, null if the model is not painted
Throws:
BadLocationException - if the given position does not
   represent a valid location in the associated document
See Also:
TextUI.modelToView(javax.swing.text.JTextComponent, int)


"
BasicTextUI,"paint(Graphics g, JComponent c)",void,Paints the interface.,"

paint
public final void paint(Graphics g,
                        JComponent c)
Paints the interface.  This is routed to the
 paintSafely method under the guarantee that
 the model won't change from the view of this thread
 while it's rendering (if the associated model is
 derived from AbstractDocument).  This enables the
 model to potentially be updated asynchronously.

Overrides:
paint in class ComponentUI
Parameters:
g - the graphics context
c - the editor component
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicTextUI,paintBackground(Graphics g),protected void,Paints a background for the view.,"

paintBackground
protected void paintBackground(Graphics g)
Paints a background for the view.  This will only be
 called if isOpaque() on the associated component is
 true.  The default is to paint the background color
 of the component.

Parameters:
g - the graphics context


"
BasicTextUI,paintSafely(Graphics g),protected void,Paints the interface safely with a guarantee that the model won't change from the view of this thread.,"

paintSafely
protected void paintSafely(Graphics g)
Paints the interface safely with a guarantee that
 the model won't change from the view of this thread.
 This does the following things, rendering from
 back to front.
 

 If the component is marked as opaque, the background
 is painted in the current background color of the
 component.
 
 The highlights (if any) are painted.
 
 The view hierarchy is painted.
 
 The caret is painted.
 

Parameters:
g - the graphics context


"
BasicTextUI,propertyChange(PropertyChangeEvent evt),protected void,This method gets called when a bound property is changed on the associated JTextComponent.,"

propertyChange
protected void propertyChange(PropertyChangeEvent evt)
This method gets called when a bound property is changed
 on the associated JTextComponent.  This is a hook
 which UI implementations may change to reflect how the
 UI displays bound properties of JTextComponent subclasses.
 This is implemented to do nothing (i.e. the response to
 properties in JTextComponent itself are handled prior
 to calling this method).

 This implementation updates the background of the text
 component if the editable and/or enabled state changes.

Parameters:
evt - the property change event


"
BasicTextUI,setView(View v),protected void,Sets the current root of the view hierarchy and calls invalidate().,"

setView
protected final void setView(View v)
Sets the current root of the view hierarchy and calls invalidate().
 If there were any child components, they will be removed (i.e.
 there are assumed to have come from components embedded in views).

Parameters:
v - the root view


"
BasicTextUI,uninstallDefaults(),protected void,Sets the component properties that have not been explicitly overridden to null.,"

uninstallDefaults
protected void uninstallDefaults()
Sets the component properties that have not been explicitly overridden
 to null.  A property is considered overridden if its current
 value is not a UIResource.

See Also:
installDefaults(), 
uninstallUI(javax.swing.JComponent)


"
BasicTextUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicTextUI,uninstallListeners(),protected void,Uninstalls listeners for the UI.,"

uninstallListeners
protected void uninstallListeners()
Uninstalls listeners for the UI.

"
BasicTextUI,uninstallUI(JComponent c),void,Deinstalls the UI for a component.,"

uninstallUI
public void uninstallUI(JComponent c)
Deinstalls the UI for a component.  This removes the listeners,
 uninstalls the highlighter, removes views, and nulls out the keymap.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the editor component
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)


"
BasicTextUI,"update(Graphics g, JComponent c)",void,Superclass paints background in an uncontrollable way (i.e.,"

update
public void update(Graphics g,
                   JComponent c)
Superclass paints background in an uncontrollable way
 (i.e. one might want an image tiled into the background).
 To prevent this from happening twice, this method is
 reimplemented to simply paint.
 
NOTE: NOTE: Superclass is also not thread-safe in its
 rendering of the background, although that is not an issue with the
 default rendering.

Overrides:
update in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
BasicTextUI,"viewToModel(JTextComponent tc, Point pt)",int,Converts the given place in the view coordinate system to the nearest representative location in the model.,"

viewToModel
public int viewToModel(JTextComponent tc,
                       Point pt)
Converts the given place in the view coordinate system
 to the nearest representative location in the model.
 The component must have a non-zero positive size for
 this translation to be computed.

Specified by:
viewToModel in class TextUI
Parameters:
tc - the text component for which this UI is installed
pt - the location in the view to translate.  This
  should be in the same coordinate system as the mouse events.
Returns:
the offset from the start of the document >= 0,
   -1 if not painted
See Also:
TextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)


"
BasicTextUI,"viewToModel(JTextComponent tc, Point pt, Position.Bias[] biasReturn)",int,Converts the given place in the view coordinate system to the nearest representative location in the model.,"

viewToModel
public int viewToModel(JTextComponent tc,
                       Point pt,
                       Position.Bias[] biasReturn)
Converts the given place in the view coordinate system
 to the nearest representative location in the model.
 The component must have a non-zero positive size for
 this translation to be computed.

Specified by:
viewToModel in class TextUI
Parameters:
tc - the text component for which this UI is installed
pt - the location in the view to translate.  This
  should be in the same coordinate system as the mouse events.
biasReturn - filled in by this method to indicate whether
           the point given is closer to the previous or the next
           character in the model
Returns:
the offset from the start of the document >= 0,
   -1 if the component doesn't yet have a positive size.
See Also:
TextUI.viewToModel(javax.swing.text.JTextComponent, java.awt.Point)


"
BasicToggleButtonUI,createUI(JComponent b),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent b)

"
BasicToggleButtonUI,getPropertyPrefix(),protected String,NULL,"

getPropertyPrefix
protected String getPropertyPrefix()

Overrides:
getPropertyPrefix in class BasicButtonUI


"
BasicToggleButtonUI,getTextShiftOffset(),protected int,Overriden so that the text will not be rendered as shifted for Toggle buttons and subclasses.,"

getTextShiftOffset
protected int getTextShiftOffset()
Overriden so that the text will not be rendered as shifted for
 Toggle buttons and subclasses.

Overrides:
getTextShiftOffset in class BasicButtonUI


"
BasicToggleButtonUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicButtonUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicToggleButtonUI,"paintIcon(Graphics g, AbstractButton b, Rectangle iconRect)",protected void,NULL,"

paintIcon
protected void paintIcon(Graphics g,
                         AbstractButton b,
                         Rectangle iconRect)

"
BasicToolBarSeparatorUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicToolBarSeparatorUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicToolBarSeparatorUI,installDefaults(JSeparator s),protected void,NULL,"

installDefaults
protected void installDefaults(JSeparator s)

Overrides:
installDefaults in class BasicSeparatorUI


"
BasicToolBarSeparatorUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicToolBarUI,"canDock(Component c, Point p)",boolean,NULL,"

canDock
public boolean canDock(Component c,
                       Point p)

"
BasicToolBarUI,createDockingListener(),protected MouseInputListener,NULL,"

createDockingListener
protected MouseInputListener createDockingListener()

"
BasicToolBarUI,createDragWindow(JToolBar toolbar),protected BasicToolBarUI.DragWindow,NULL,"

createDragWindow
protected BasicToolBarUI.DragWindow createDragWindow(JToolBar toolbar)

"
BasicToolBarUI,createFloatingFrame(JToolBar toolbar),protected JFrame,"No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)","

createFloatingFrame
protected JFrame createFloatingFrame(JToolBar toolbar)
No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)

See Also:
createFloatingWindow(javax.swing.JToolBar)


"
BasicToolBarUI,createFloatingWindow(JToolBar toolbar),protected RootPaneContainer,Creates a window which contains the toolbar after it has been dragged out from its container,"

createFloatingWindow
protected RootPaneContainer createFloatingWindow(JToolBar toolbar)
Creates a window which contains the toolbar after it has been
 dragged out from its container

Returns:
a RootPaneContainer object, containing the toolbar.
Since:
1.4


"
BasicToolBarUI,createFrameListener(),protected WindowListener,NULL,"

createFrameListener
protected WindowListener createFrameListener()

"
BasicToolBarUI,createNonRolloverBorder(),protected Border,Creates the non rollover border for toolbar components.,"

createNonRolloverBorder
protected Border createNonRolloverBorder()
Creates the non rollover border for toolbar components. This
 border will be installed as the border for components added
 to the toolbar if rollover borders are not enabled.
 
 Override this method to provide an alternate rollover border.

Since:
1.4


"
BasicToolBarUI,createPropertyListener(),protected PropertyChangeListener,NULL,"

createPropertyListener
protected PropertyChangeListener createPropertyListener()

"
BasicToolBarUI,createRolloverBorder(),protected Border,Creates a rollover border for toolbar components.,"

createRolloverBorder
protected Border createRolloverBorder()
Creates a rollover border for toolbar components. The
 rollover border will be installed if rollover borders are
 enabled.
 
 Override this method to provide an alternate rollover border.

Since:
1.4


"
BasicToolBarUI,createToolBarContListener(),protected ContainerListener,NULL,"

createToolBarContListener
protected ContainerListener createToolBarContListener()

"
BasicToolBarUI,createToolBarFocusListener(),protected FocusListener,NULL,"

createToolBarFocusListener
protected FocusListener createToolBarFocusListener()

"
BasicToolBarUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicToolBarUI,"dragTo(Point position, Point origin)",protected void,NULL,"

dragTo
protected void dragTo(Point position,
                      Point origin)

"
BasicToolBarUI,"floatAt(Point position, Point origin)",protected void,NULL,"

floatAt
protected void floatAt(Point position,
                       Point origin)

"
BasicToolBarUI,getDockingColor(),Color,Gets the color displayed when over a docking area,"

getDockingColor
public Color getDockingColor()
Gets the color displayed when over a docking area

"
BasicToolBarUI,getFloatingColor(),Color,Gets the color displayed when over a floating area,"

getFloatingColor
public Color getFloatingColor()
Gets the color displayed when over a floating area

"
BasicToolBarUI,getNonRolloverBorder(AbstractButton b),protected Border,Returns a non-rollover border for the button.,"

getNonRolloverBorder
protected Border getNonRolloverBorder(AbstractButton b)
Returns a non-rollover border for the button.

Parameters:
b - the button to calculate the non-rollover border for
Returns:
the non-rollover border
Since:
1.6
See Also:
setBorderToNonRollover(java.awt.Component)


"
BasicToolBarUI,getRolloverBorder(AbstractButton b),protected Border,Returns a rollover border for the button.,"

getRolloverBorder
protected Border getRolloverBorder(AbstractButton b)
Returns a rollover border for the button.

Parameters:
b - the button to calculate the rollover border for
Returns:
the rollover border
Since:
1.6
See Also:
setBorderToRollover(java.awt.Component)


"
BasicToolBarUI,installComponents(),protected void,NULL,"

installComponents
protected void installComponents()

"
BasicToolBarUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicToolBarUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicToolBarUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicToolBarUI,installNonRolloverBorders(JComponent c),protected void,Installs non-rollover borders on all the child components of the JComponent.,"

installNonRolloverBorders
protected void installNonRolloverBorders(JComponent c)
Installs non-rollover borders on all the child components of the JComponent.
 A non-rollover border is the border that is installed on the child component
 while it is in the toolbar.
 
 This is a convenience method to call setBorderToNonRollover
 for each child component.

Parameters:
c - container which holds the child components (usually a JToolBar)
Since:
1.4
See Also:
setBorderToNonRollover(java.awt.Component)


"
BasicToolBarUI,installNormalBorders(JComponent c),protected void,Installs normal borders on all the child components of the JComponent.,"

installNormalBorders
protected void installNormalBorders(JComponent c)
Installs normal borders on all the child components of the JComponent.
 A normal border is the original border that was installed on the child
 component before it was added to the toolbar.
 
 This is a convenience method to call setBorderNormal
 for each child component.

Parameters:
c - container which holds the child components (usually a JToolBar)
Since:
1.4
See Also:
setBorderToNonRollover(java.awt.Component)


"
BasicToolBarUI,installRolloverBorders(JComponent c),protected void,Installs rollover borders on all the child components of the JComponent.,"

installRolloverBorders
protected void installRolloverBorders(JComponent c)
Installs rollover borders on all the child components of the JComponent.
 
 This is a convenience method to call setBorderToRollover
 for each child component.

Parameters:
c - container which holds the child components (usually a JToolBar)
Since:
1.4
See Also:
setBorderToRollover(java.awt.Component)


"
BasicToolBarUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicToolBarUI,isFloating(),boolean,NULL,"

isFloating
public boolean isFloating()

"
BasicToolBarUI,isRolloverBorders(),boolean,Returns a flag to determine whether rollover button borders are enabled.,"

isRolloverBorders
public boolean isRolloverBorders()
Returns a flag to determine whether rollover button borders
 are enabled.

Returns:
true if rollover borders are enabled; false otherwise
Since:
1.4
See Also:
setRolloverBorders(boolean)


"
BasicToolBarUI,navigateFocusedComp(int direction),protected void,NULL,"

navigateFocusedComp
protected void navigateFocusedComp(int direction)

"
BasicToolBarUI,paintDragWindow(Graphics g),protected void,Paints the contents of the window used for dragging.,"

paintDragWindow
protected void paintDragWindow(Graphics g)
Paints the contents of the window used for dragging.

Parameters:
g - Graphics to paint to.
Throws:
NullPointerException - is g is null
Since:
1.5


"
BasicToolBarUI,setBorderToNonRollover(Component c),protected void,Sets the border of the component to have a non-rollover border which was created by the createNonRolloverBorder() method.,"

setBorderToNonRollover
protected void setBorderToNonRollover(Component c)
Sets the border of the component to have a non-rollover border which
 was created by the createNonRolloverBorder() method.

Parameters:
c - component which will have a non-rollover border installed
Since:
1.4
See Also:
createNonRolloverBorder()


"
BasicToolBarUI,setBorderToNormal(Component c),protected void,Sets the border of the component to have a normal border.,"

setBorderToNormal
protected void setBorderToNormal(Component c)
Sets the border of the component to have a normal border.
 A normal border is the original border that was installed on the child
 component before it was added to the toolbar.

Parameters:
c - component which will have a normal border re-installed
Since:
1.4
See Also:
createNonRolloverBorder()


"
BasicToolBarUI,setBorderToRollover(Component c),protected void,Sets the border of the component to have a rollover border which was created by the createRolloverBorder() method.,"

setBorderToRollover
protected void setBorderToRollover(Component c)
Sets the border of the component to have a rollover border which
 was created by the createRolloverBorder() method.

Parameters:
c - component which will have a rollover border installed
Since:
1.4
See Also:
createRolloverBorder()


"
BasicToolBarUI,setDockingColor(Color c),void,Sets the color displayed when over a docking area,"

setDockingColor
public void setDockingColor(Color c)
Sets the color displayed when over a docking area

"
BasicToolBarUI,"setFloating(boolean b, Point p)",void,NULL,"

setFloating
public void setFloating(boolean b,
                        Point p)

"
BasicToolBarUI,setFloatingColor(Color c),void,Sets the color displayed when over a floating area,"

setFloatingColor
public void setFloatingColor(Color c)
Sets the color displayed when over a floating area

"
BasicToolBarUI,"setFloatingLocation(int x, int y)",void,NULL,"

setFloatingLocation
public void setFloatingLocation(int x,
                                int y)

"
BasicToolBarUI,setOrientation(int orientation),void,NULL,"

setOrientation
public void setOrientation(int orientation)

"
BasicToolBarUI,setRolloverBorders(boolean rollover),void,Sets the flag for enabling rollover borders on the toolbar and it will also install the appropriate border depending on the state of the flag.,"

setRolloverBorders
public void setRolloverBorders(boolean rollover)
Sets the flag for enabling rollover borders on the toolbar and it will
 also install the appropriate border depending on the state of the flag.

Parameters:
rollover - if true, rollover borders are installed.
        Otherwise non-rollover borders are installed
Since:
1.4
See Also:
isRolloverBorders()


"
BasicToolBarUI,uninstallComponents(),protected void,NULL,"

uninstallComponents
protected void uninstallComponents()

"
BasicToolBarUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicToolBarUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicToolBarUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicToolBarUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicToolTipUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicToolTipUI,getMaximumSize(JComponent c),Dimension,Returns the specified component's maximum size appropriate for the look and feel.,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicToolTipUI,getMinimumSize(JComponent c),Dimension,Returns the specified component's minimum size appropriate for the look and feel.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicToolTipUI,getPreferredSize(JComponent c),Dimension,Returns the specified component's preferred size appropriate for the look and feel.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicToolTipUI,installDefaults(JComponent c),protected void,NULL,"

installDefaults
protected void installDefaults(JComponent c)

"
BasicToolTipUI,installListeners(JComponent c),protected void,NULL,"

installListeners
protected void installListeners(JComponent c)

"
BasicToolTipUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicToolTipUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicToolTipUI,uninstallDefaults(JComponent c),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JComponent c)

"
BasicToolTipUI,uninstallListeners(JComponent c),protected void,NULL,"

uninstallListeners
protected void uninstallListeners(JComponent c)

"
BasicToolTipUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTreeUI,cancelEditing(JTree tree),void,Cancels the current editing session.,"

cancelEditing
public void cancelEditing(JTree tree)
Cancels the current editing session.

Specified by:
cancelEditing in class TreeUI


"
BasicTreeUI,"checkForClickInExpandControl(TreePath path, int mouseX, int mouseY)",protected void,"If the mouseX and mouseY are in the expand/collapse region of the row, this will toggle the row.","

checkForClickInExpandControl
protected void checkForClickInExpandControl(TreePath path,
                                            int mouseX,
                                            int mouseY)
If the mouseX and mouseY are in the
 expand/collapse region of the row, this will toggle
 the row.

"
BasicTreeUI,completeEditing(),protected void,Messages to stop the editing session.,"

completeEditing
protected void completeEditing()
Messages to stop the editing session. If the UI the receiver
 is providing the look and feel for returns true from
 getInvokesStopCellEditing, stopCellEditing will
 invoked on the current editor. Then completeEditing will
 be messaged with false, true, false to cancel any lingering
 editing.

"
BasicTreeUI,"completeEditing(boolean messageStop, boolean messageCancel, boolean messageTree)",protected void,Stops the editing session.,"

completeEditing
protected void completeEditing(boolean messageStop,
                               boolean messageCancel,
                               boolean messageTree)
Stops the editing session.  If messageStop is true the editor
 is messaged with stopEditing, if messageCancel is true the
 editor is messaged with cancelEditing. If messageTree is true
 the treeModel is messaged with valueForPathChanged.

"
BasicTreeUI,completeUIInstall(),protected void,Invoked from installUI after all the defaults/listeners have been installed.,"

completeUIInstall
protected void completeUIInstall()
Invoked from installUI after all the defaults/listeners have been
 installed.

"
BasicTreeUI,completeUIUninstall(),protected void,NULL,"

completeUIUninstall
protected void completeUIUninstall()

"
BasicTreeUI,configureLayoutCache(),protected void,Resets the TreeState instance based on the tree we're providing the look and feel for.,"

configureLayoutCache
protected void configureLayoutCache()
Resets the TreeState instance based on the tree we're providing the
 look and feel for.

"
BasicTreeUI,createCellEditorListener(),protected CellEditorListener,Creates a listener to handle events from the current editor.,"

createCellEditorListener
protected CellEditorListener createCellEditorListener()
Creates a listener to handle events from the current editor.

"
BasicTreeUI,createCellRendererPane(),protected CellRendererPane,Returns the renderer pane that renderer components are placed in.,"

createCellRendererPane
protected CellRendererPane createCellRendererPane()
Returns the renderer pane that renderer components are placed in.

"
BasicTreeUI,createComponentListener(),protected ComponentListener,Creates and returns a new ComponentHandler.,"

createComponentListener
protected ComponentListener createComponentListener()
Creates and returns a new ComponentHandler. This is used for
 the large model to mark the validCachedPreferredSize as invalid
 when the component moves.

"
BasicTreeUI,createDefaultCellEditor(),protected TreeCellEditor,Creates a default cell editor.,"

createDefaultCellEditor
protected TreeCellEditor createDefaultCellEditor()
Creates a default cell editor.

"
BasicTreeUI,createDefaultCellRenderer(),protected TreeCellRenderer,Returns the default cell renderer that is used to do the stamping of each node.,"

createDefaultCellRenderer
protected TreeCellRenderer createDefaultCellRenderer()
Returns the default cell renderer that is used to do the
 stamping of each node.

"
BasicTreeUI,createFocusListener(),protected FocusListener,Creates a listener that is responsible for updating the display when focus is lost/gained.,"

createFocusListener
protected FocusListener createFocusListener()
Creates a listener that is responsible for updating the display
 when focus is lost/gained.

"
BasicTreeUI,createKeyListener(),protected KeyListener,Creates the listener reponsible for getting key events from the tree.,"

createKeyListener
protected KeyListener createKeyListener()
Creates the listener reponsible for getting key events from
 the tree.

"
BasicTreeUI,createLayoutCache(),protected AbstractLayoutCache,"Creates the object responsible for managing what is expanded, as well as the size of nodes.","

createLayoutCache
protected AbstractLayoutCache createLayoutCache()
Creates the object responsible for managing what is expanded, as
 well as the size of nodes.

"
BasicTreeUI,createMouseListener(),protected MouseListener,Creates the listener responsible for updating the selection based on mouse events.,"

createMouseListener
protected MouseListener createMouseListener()
Creates the listener responsible for updating the selection based on
 mouse events.

"
BasicTreeUI,createNodeDimensions(),protected AbstractLayoutCache.NodeDimensions,Creates an instance of NodeDimensions that is able to determine the size of a given node in the tree.,"

createNodeDimensions
protected AbstractLayoutCache.NodeDimensions createNodeDimensions()
Creates an instance of NodeDimensions that is able to determine
 the size of a given node in the tree.

"
BasicTreeUI,createPropertyChangeListener(),protected PropertyChangeListener,Creates a listener that is responsible that updates the UI based on how the tree changes.,"

createPropertyChangeListener
protected PropertyChangeListener createPropertyChangeListener()
Creates a listener that is responsible that updates the UI based on
 how the tree changes.

"
BasicTreeUI,createSelectionModelPropertyChangeListener(),protected PropertyChangeListener,Creates the listener responsible for getting property change events from the selection model.,"

createSelectionModelPropertyChangeListener
protected PropertyChangeListener createSelectionModelPropertyChangeListener()
Creates the listener responsible for getting property change
 events from the selection model.

"
BasicTreeUI,createTreeExpansionListener(),protected TreeExpansionListener,Creates and returns the object responsible for updating the treestate when nodes expanded state changes.,"

createTreeExpansionListener
protected TreeExpansionListener createTreeExpansionListener()
Creates and returns the object responsible for updating the treestate
 when nodes expanded state changes.

"
BasicTreeUI,createTreeModelListener(),protected TreeModelListener,Returns a listener that can update the tree when the model changes.,"

createTreeModelListener
protected TreeModelListener createTreeModelListener()
Returns a listener that can update the tree when the model changes.

"
BasicTreeUI,createTreeSelectionListener(),protected TreeSelectionListener,Creates the listener that updates the display based on selection change methods.,"

createTreeSelectionListener
protected TreeSelectionListener createTreeSelectionListener()
Creates the listener that updates the display based on selection change
 methods.

"
BasicTreeUI,createUI(JComponent x),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent x)

"
BasicTreeUI,"drawCentered(Component c, Graphics graphics, Icon icon, int x, int y)",protected void,NULL,"

drawCentered
protected void drawCentered(Component c,
                            Graphics graphics,
                            Icon icon,
                            int x,
                            int y)

"
BasicTreeUI,"drawDashedHorizontalLine(Graphics g, int y, int x1, int x2)",protected void,NULL,"

drawDashedHorizontalLine
protected void drawDashedHorizontalLine(Graphics g,
                                        int y,
                                        int x1,
                                        int x2)

"
BasicTreeUI,"drawDashedVerticalLine(Graphics g, int x, int y1, int y2)",protected void,NULL,"

drawDashedVerticalLine
protected void drawDashedVerticalLine(Graphics g,
                                      int x,
                                      int y1,
                                      int y2)

"
BasicTreeUI,"ensureRowsAreVisible(int beginRow, int endRow)",protected void,Ensures that the rows identified by beginRow through endRow are visible.,"

ensureRowsAreVisible
protected void ensureRowsAreVisible(int beginRow,
                                    int endRow)
Ensures that the rows identified by beginRow through endRow are
 visible.

"
BasicTreeUI,"getBaseline(JComponent c, int width, int height)",int,Returns the baseline.,"

getBaseline
public int getBaseline(JComponent c,
                       int width,
                       int height)
Returns the baseline.

Overrides:
getBaseline in class ComponentUI
Parameters:
c - JComponent baseline is being requested for
width - the width to get the baseline for
height - the height to get the baseline for
Returns:
baseline or a value < 0 indicating there is no reasonable
                  baseline
Throws:
NullPointerException - if c is null
IllegalArgumentException - if width or height is < 0
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTreeUI,getBaselineResizeBehavior(JComponent c),Component.BaselineResizeBehavior,Returns an enum indicating how the baseline of the component changes as the size changes.,"

getBaselineResizeBehavior
public Component.BaselineResizeBehavior getBaselineResizeBehavior(JComponent c)
Returns an enum indicating how the baseline of the component
 changes as the size changes.

Overrides:
getBaselineResizeBehavior in class ComponentUI
Parameters:
c - JComponent to return baseline resize behavior for
Returns:
an enum indicating how the baseline changes as the component
         size changes
Throws:
NullPointerException - if c is null
Since:
1.6
See Also:
JComponent.getBaseline(int, int)


"
BasicTreeUI,getCellEditor(),protected TreeCellEditor,NULL,"

getCellEditor
protected TreeCellEditor getCellEditor()

"
BasicTreeUI,getCellRenderer(),protected TreeCellRenderer,"Return currentCellRenderer, which will either be the trees renderer, or defaultCellRenderer, which ever wasn't null.","

getCellRenderer
protected TreeCellRenderer getCellRenderer()
Return currentCellRenderer, which will either be the trees
 renderer, or defaultCellRenderer, which ever wasn't null.

"
BasicTreeUI,"getClosestPathForLocation(JTree tree, int x, int y)",TreePath,"Returns the path to the node that is closest to x,y.","

getClosestPathForLocation
public TreePath getClosestPathForLocation(JTree tree,
                                          int x,
                                          int y)
Returns the path to the node that is closest to x,y.  If
 there is nothing currently visible this will return null, otherwise
 it'll always return a valid path.  If you need to test if the
 returned object is exactly at x, y you should get the bounds for
 the returned path and test x, y against that.

Specified by:
getClosestPathForLocation in class TreeUI


"
BasicTreeUI,getCollapsedIcon(),Icon,NULL,"

getCollapsedIcon
public Icon getCollapsedIcon()

"
BasicTreeUI,getDropLineRect(JTree.DropLocation loc),protected Rectangle,Returns a unbounding box for the drop line.,"

getDropLineRect
protected Rectangle getDropLineRect(JTree.DropLocation loc)
Returns a unbounding box for the drop line.

Parameters:
loc - a DropLocation
Returns:
bounding box for the drop line
Since:
1.7


"
BasicTreeUI,getEditingPath(JTree tree),TreePath,Returns the path to the element that is being edited.,"

getEditingPath
public TreePath getEditingPath(JTree tree)
Returns the path to the element that is being edited.

Specified by:
getEditingPath in class TreeUI


"
BasicTreeUI,getExpandedIcon(),Icon,NULL,"

getExpandedIcon
public Icon getExpandedIcon()

"
BasicTreeUI,getHashColor(),protected Color,NULL,"

getHashColor
protected Color getHashColor()

"
BasicTreeUI,getHorizontalLegBuffer(),protected int,The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default.,"

getHorizontalLegBuffer
protected int getHorizontalLegBuffer()
The horizontal element of legs between nodes starts at the
 right of the left-hand side of the child node by default.  This
 method makes the leg end before that.

"
BasicTreeUI,getLastChildPath(TreePath parent),protected TreePath,Returns a path to the last child of parent.,"

getLastChildPath
protected TreePath getLastChildPath(TreePath parent)
Returns a path to the last child of parent.

"
BasicTreeUI,getLeadSelectionRow(),protected int,Returns the lead row of the selection.,"

getLeadSelectionRow
protected int getLeadSelectionRow()
Returns the lead row of the selection.

Returns:
selection lead row
Since:
1.7


"
BasicTreeUI,getLeftChildIndent(),int,NULL,"

getLeftChildIndent
public int getLeftChildIndent()

"
BasicTreeUI,getMaximumSize(JComponent c),Dimension,"Returns the maximum size for this component, which will be the preferred size if the instance is currently in a JTree, or 0, 0.","

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Returns the maximum size for this component, which will be the
 preferred size if the instance is currently in a JTree, or 0, 0.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
BasicTreeUI,getMinimumSize(JComponent c),Dimension,Returns the minimum size for this component.,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Returns the minimum size for this component.  Which will be
 the min preferred size or 0, 0.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
BasicTreeUI,getModel(),protected TreeModel,NULL,"

getModel
protected TreeModel getModel()

"
BasicTreeUI,"getPathBounds(JTree tree, TreePath path)",Rectangle,Returns the Rectangle enclosing the label portion that the last item in path will be drawn into.,"

getPathBounds
public Rectangle getPathBounds(JTree tree,
                               TreePath path)
Returns the Rectangle enclosing the label portion that the
 last item in path will be drawn into.  Will return null if
 any component in path is currently valid.

Specified by:
getPathBounds in class TreeUI


"
BasicTreeUI,"getPathForRow(JTree tree, int row)",TreePath,Returns the path for passed in row.,"

getPathForRow
public TreePath getPathForRow(JTree tree,
                              int row)
Returns the path for passed in row.  If row is not visible
 null is returned.

Specified by:
getPathForRow in class TreeUI


"
BasicTreeUI,getPreferredMinSize(),Dimension,Returns the minimum preferred size.,"

getPreferredMinSize
public Dimension getPreferredMinSize()
Returns the minimum preferred size.

"
BasicTreeUI,getPreferredSize(JComponent c),Dimension,"Returns the preferred size to properly display the tree, this is a cover method for getPreferredSize(c, true).","

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Returns the preferred size to properly display the tree,
 this is a cover method for getPreferredSize(c, true).

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
BasicTreeUI,"getPreferredSize(JComponent c, boolean checkConsistency)",Dimension,Returns the preferred size to represent the tree in c.,"

getPreferredSize
public Dimension getPreferredSize(JComponent c,
                                  boolean checkConsistency)
Returns the preferred size to represent the tree in
 c.  If checkConsistency is true
 checkConsistency is messaged first.

"
BasicTreeUI,getRightChildIndent(),int,NULL,"

getRightChildIndent
public int getRightChildIndent()

"
BasicTreeUI,getRowCount(JTree tree),int,Returns the number of rows that are being displayed.,"

getRowCount
public int getRowCount(JTree tree)
Returns the number of rows that are being displayed.

Specified by:
getRowCount in class TreeUI


"
BasicTreeUI,"getRowForPath(JTree tree, TreePath path)",int,Returns the row that the last item identified in path is visible at.,"

getRowForPath
public int getRowForPath(JTree tree,
                         TreePath path)
Returns the row that the last item identified in path is visible
 at.  Will return -1 if any of the elements in path are not
 currently visible.

Specified by:
getRowForPath in class TreeUI


"
BasicTreeUI,getRowHeight(),protected int,NULL,"

getRowHeight
protected int getRowHeight()

"
BasicTreeUI,"getRowX(int row, int depth)",protected int,"Returns the location, along the x-axis, to render a particular row at.","

getRowX
protected int getRowX(int row,
                      int depth)
Returns the location, along the x-axis, to render a particular row
 at. The return value does not include any Insets specified on the JTree.
 This does not check for the validity of the row or depth, it is assumed
 to be correct and will not throw an Exception if the row or depth
 doesn't match that of the tree.

Parameters:
row - Row to return x location for
depth - Depth of the row
Returns:
amount to indent the given row.
Since:
1.5


"
BasicTreeUI,getSelectionModel(),protected TreeSelectionModel,NULL,"

getSelectionModel
protected TreeSelectionModel getSelectionModel()

"
BasicTreeUI,getShowsRootHandles(),protected boolean,NULL,"

getShowsRootHandles
protected boolean getShowsRootHandles()

"
BasicTreeUI,getVerticalLegBuffer(),protected int,The vertical element of legs between nodes starts at the bottom of the parent node by default.,"

getVerticalLegBuffer
protected int getVerticalLegBuffer()
The vertical element of legs between nodes starts at the bottom of the
 parent node by default.  This method makes the leg start below that.

"
BasicTreeUI,"handleExpandControlClick(TreePath path, int mouseX, int mouseY)",protected void,"Messaged when the user clicks the particular row, this invokes toggleExpandState.","

handleExpandControlClick
protected void handleExpandControlClick(TreePath path,
                                        int mouseX,
                                        int mouseY)
Messaged when the user clicks the particular row, this invokes
 toggleExpandState.

"
BasicTreeUI,installComponents(),protected void,"Intalls the subcomponents of the tree, which is the renderer pane.","

installComponents
protected void installComponents()
Intalls the subcomponents of the tree, which is the renderer pane.

"
BasicTreeUI,installDefaults(),protected void,NULL,"

installDefaults
protected void installDefaults()

"
BasicTreeUI,installKeyboardActions(),protected void,NULL,"

installKeyboardActions
protected void installKeyboardActions()

"
BasicTreeUI,installListeners(),protected void,NULL,"

installListeners
protected void installListeners()

"
BasicTreeUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicTreeUI,isDropLine(JTree.DropLocation loc),protected boolean,Tells if a DropLocation should be indicated by a line between nodes.,"

isDropLine
protected boolean isDropLine(JTree.DropLocation loc)
Tells if a DropLocation should be indicated by a line between
 nodes. This is meant for javax.swing.DropMode.INSERT and
 javax.swing.DropMode.ON_OR_INSERT drop modes.

Parameters:
loc - a DropLocation
Returns:
true if the drop location should be shown as a line
Since:
1.7


"
BasicTreeUI,isEditable(),protected boolean,NULL,"

isEditable
protected boolean isEditable()

"
BasicTreeUI,isEditing(JTree tree),boolean,Returns true if the tree is being edited.,"

isEditing
public boolean isEditing(JTree tree)
Returns true if the tree is being edited.  The item that is being
 edited can be returned by getEditingPath().

Specified by:
isEditing in class TreeUI


"
BasicTreeUI,isLargeModel(),protected boolean,NULL,"

isLargeModel
protected boolean isLargeModel()

"
BasicTreeUI,isLeaf(int row),protected boolean,NULL,"

isLeaf
protected boolean isLeaf(int row)

Returns:
true if the node at row is a leaf.


"
BasicTreeUI,"isLocationInExpandControl(TreePath path, int mouseX, int mouseY)",protected boolean,Returns true if mouseX and mouseY fall in the area of row that is used to expand/collapse the node and the node at row does not represent a leaf.,"

isLocationInExpandControl
protected boolean isLocationInExpandControl(TreePath path,
                                            int mouseX,
                                            int mouseY)
Returns true if mouseX and mouseY fall
 in the area of row that is used to expand/collapse the node and
 the node at row does not represent a leaf.

"
BasicTreeUI,isMultiSelectEvent(MouseEvent event),protected boolean,Returning true signifies a mouse event on the node should select from the anchor point.,"

isMultiSelectEvent
protected boolean isMultiSelectEvent(MouseEvent event)
Returning true signifies a mouse event on the node should select
 from the anchor point.

"
BasicTreeUI,isRootVisible(),protected boolean,NULL,"

isRootVisible
protected boolean isRootVisible()

"
BasicTreeUI,isToggleEvent(MouseEvent event),protected boolean,Returning true indicates the row under the mouse should be toggled based on the event.,"

isToggleEvent
protected boolean isToggleEvent(MouseEvent event)
Returning true indicates the row under the mouse should be toggled
 based on the event. This is invoked after checkForClickInExpandControl,
 implying the location is not in the expand (toggle) control

"
BasicTreeUI,isToggleSelectionEvent(MouseEvent event),protected boolean,Returning true signifies a mouse event on the node should toggle the selection of only the row under mouse.,"

isToggleSelectionEvent
protected boolean isToggleSelectionEvent(MouseEvent event)
Returning true signifies a mouse event on the node should toggle
 the selection of only the row under mouse.

"
BasicTreeUI,"paint(Graphics g, JComponent c)",void,Paints the specified component appropriately for the look and feel.,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
BasicTreeUI,paintDropLine(Graphics g),protected void,Paints the drop line.,"

paintDropLine
protected void paintDropLine(Graphics g)
Paints the drop line.

Parameters:
g - Graphics object to draw on
Since:
1.7


"
BasicTreeUI,"paintExpandControl(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)",protected void,Paints the expand (toggle) part of a row.,"

paintExpandControl
protected void paintExpandControl(Graphics g,
                                  Rectangle clipBounds,
                                  Insets insets,
                                  Rectangle bounds,
                                  TreePath path,
                                  int row,
                                  boolean isExpanded,
                                  boolean hasBeenExpanded,
                                  boolean isLeaf)
Paints the expand (toggle) part of a row. The receiver should
 NOT modify clipBounds, or insets.

"
BasicTreeUI,"paintHorizontalLine(Graphics g, JComponent c, int y, int left, int right)",protected void,Paints a horizontal line.,"

paintHorizontalLine
protected void paintHorizontalLine(Graphics g,
                                   JComponent c,
                                   int y,
                                   int left,
                                   int right)
Paints a horizontal line.

"
BasicTreeUI,"paintHorizontalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)",protected void,Paints the horizontal part of the leg.,"

paintHorizontalPartOfLeg
protected void paintHorizontalPartOfLeg(Graphics g,
                                        Rectangle clipBounds,
                                        Insets insets,
                                        Rectangle bounds,
                                        TreePath path,
                                        int row,
                                        boolean isExpanded,
                                        boolean hasBeenExpanded,
                                        boolean isLeaf)
Paints the horizontal part of the leg. The receiver should
 NOT modify clipBounds, or insets.
 NOTE: parentRow can be -1 if the root is not visible.

"
BasicTreeUI,"paintRow(Graphics g, Rectangle clipBounds, Insets insets, Rectangle bounds, TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)",protected void,Paints the renderer part of a row.,"

paintRow
protected void paintRow(Graphics g,
                        Rectangle clipBounds,
                        Insets insets,
                        Rectangle bounds,
                        TreePath path,
                        int row,
                        boolean isExpanded,
                        boolean hasBeenExpanded,
                        boolean isLeaf)
Paints the renderer part of a row. The receiver should
 NOT modify clipBounds, or insets.

"
BasicTreeUI,"paintVerticalLine(Graphics g, JComponent c, int x, int top, int bottom)",protected void,Paints a vertical line.,"

paintVerticalLine
protected void paintVerticalLine(Graphics g,
                                 JComponent c,
                                 int x,
                                 int top,
                                 int bottom)
Paints a vertical line.

"
BasicTreeUI,"paintVerticalPartOfLeg(Graphics g, Rectangle clipBounds, Insets insets, TreePath path)",protected void,Paints the vertical part of the leg.,"

paintVerticalPartOfLeg
protected void paintVerticalPartOfLeg(Graphics g,
                                      Rectangle clipBounds,
                                      Insets insets,
                                      TreePath path)
Paints the vertical part of the leg. The receiver should
 NOT modify clipBounds, insets.

"
BasicTreeUI,pathWasCollapsed(TreePath path),protected void,Messaged from the VisibleTreeNode after it has collapsed.,"

pathWasCollapsed
protected void pathWasCollapsed(TreePath path)
Messaged from the VisibleTreeNode after it has collapsed.

"
BasicTreeUI,pathWasExpanded(TreePath path),protected void,Messaged from the VisibleTreeNode after it has been expanded.,"

pathWasExpanded
protected void pathWasExpanded(TreePath path)
Messaged from the VisibleTreeNode after it has been expanded.

"
BasicTreeUI,prepareForUIInstall(),protected void,"Invoked after the tree instance variable has been set, but before any defaults/listeners have been installed.","

prepareForUIInstall
protected void prepareForUIInstall()
Invoked after the tree instance variable has been
 set, but before any defaults/listeners have been installed.

"
BasicTreeUI,prepareForUIUninstall(),protected void,NULL,"

prepareForUIUninstall
protected void prepareForUIUninstall()

"
BasicTreeUI,"selectPathForEvent(TreePath path, MouseEvent event)",protected void,Messaged to update the selection based on a MouseEvent over a particular row.,"

selectPathForEvent
protected void selectPathForEvent(TreePath path,
                                  MouseEvent event)
Messaged to update the selection based on a MouseEvent over a
 particular row. If the event is a toggle selection event, the
 row is either selected, or deselected. If the event identifies
 a multi selection event, the selection is updated from the
 anchor point. Otherwise the row is selected, and if the event
 specified a toggle event the row is expanded/collapsed.

"
BasicTreeUI,setCellEditor(TreeCellEditor editor),protected void,Sets the cell editor.,"

setCellEditor
protected void setCellEditor(TreeCellEditor editor)
Sets the cell editor.

"
BasicTreeUI,setCellRenderer(TreeCellRenderer tcr),protected void,Sets the TreeCellRenderer to tcr.,"

setCellRenderer
protected void setCellRenderer(TreeCellRenderer tcr)
Sets the TreeCellRenderer to tcr. This invokes
 updateRenderer.

"
BasicTreeUI,setCollapsedIcon(Icon newG),void,NULL,"

setCollapsedIcon
public void setCollapsedIcon(Icon newG)

"
BasicTreeUI,setEditable(boolean newValue),protected void,"Configures the receiver to allow, or not allow, editing.","

setEditable
protected void setEditable(boolean newValue)
Configures the receiver to allow, or not allow, editing.

"
BasicTreeUI,setExpandedIcon(Icon newG),void,NULL,"

setExpandedIcon
public void setExpandedIcon(Icon newG)

"
BasicTreeUI,setHashColor(Color color),protected void,NULL,"

setHashColor
protected void setHashColor(Color color)

"
BasicTreeUI,setLargeModel(boolean largeModel),protected void,"Updates the componentListener, if necessary.","

setLargeModel
protected void setLargeModel(boolean largeModel)
Updates the componentListener, if necessary.

"
BasicTreeUI,setLeftChildIndent(int newAmount),void,NULL,"

setLeftChildIndent
public void setLeftChildIndent(int newAmount)

"
BasicTreeUI,setModel(TreeModel model),protected void,Sets the TreeModel.,"

setModel
protected void setModel(TreeModel model)
Sets the TreeModel.

"
BasicTreeUI,setPreferredMinSize(Dimension newSize),void,Sets the preferred minimum size.,"

setPreferredMinSize
public void setPreferredMinSize(Dimension newSize)
Sets the preferred minimum size.

"
BasicTreeUI,setRightChildIndent(int newAmount),void,NULL,"

setRightChildIndent
public void setRightChildIndent(int newAmount)

"
BasicTreeUI,setRootVisible(boolean newValue),protected void,Sets the root to being visible.,"

setRootVisible
protected void setRootVisible(boolean newValue)
Sets the root to being visible.

"
BasicTreeUI,setRowHeight(int rowHeight),protected void,"Sets the row height, this is forwarded to the treeState.","

setRowHeight
protected void setRowHeight(int rowHeight)
Sets the row height, this is forwarded to the treeState.

"
BasicTreeUI,setSelectionModel(TreeSelectionModel newLSM),protected void,Resets the selection model.,"

setSelectionModel
protected void setSelectionModel(TreeSelectionModel newLSM)
Resets the selection model. The appropriate listener are installed
 on the model.

"
BasicTreeUI,setShowsRootHandles(boolean newValue),protected void,Determines whether the node handles are to be displayed.,"

setShowsRootHandles
protected void setShowsRootHandles(boolean newValue)
Determines whether the node handles are to be displayed.

"
BasicTreeUI,"shouldPaintExpandControl(TreePath path, int row, boolean isExpanded, boolean hasBeenExpanded, boolean isLeaf)",protected boolean,Returns true if the expand (toggle) control should be drawn for the specified row.,"

shouldPaintExpandControl
protected boolean shouldPaintExpandControl(TreePath path,
                                           int row,
                                           boolean isExpanded,
                                           boolean hasBeenExpanded,
                                           boolean isLeaf)
Returns true if the expand (toggle) control should be drawn for
 the specified row.

"
BasicTreeUI,"startEditing(TreePath path, MouseEvent event)",protected boolean,Will start editing for node if there is a cellEditor and shouldSelectCell returns true.,"

startEditing
protected boolean startEditing(TreePath path,
                               MouseEvent event)
Will start editing for node if there is a cellEditor and
 shouldSelectCell returns true.
 This assumes that path is valid and visible.

"
BasicTreeUI,"startEditingAtPath(JTree tree, TreePath path)",void,Selects the last item in path and tries to edit it.,"

startEditingAtPath
public void startEditingAtPath(JTree tree,
                               TreePath path)
Selects the last item in path and tries to edit it.  Editing will
 fail if the CellEditor won't allow it for the selected item.

Specified by:
startEditingAtPath in class TreeUI


"
BasicTreeUI,stopEditing(JTree tree),boolean,Stops the current editing session.,"

stopEditing
public boolean stopEditing(JTree tree)
Stops the current editing session.  This has no effect if the
 tree isn't being edited.  Returns true if the editor allows the
 editing session to stop.

Specified by:
stopEditing in class TreeUI


"
BasicTreeUI,toggleExpandState(TreePath path),protected void,"Expands path if it is not expanded, or collapses row if it is expanded.","

toggleExpandState
protected void toggleExpandState(TreePath path)
Expands path if it is not expanded, or collapses row if it is expanded.
 If expanding a path and JTree scrolls on expand, ensureRowsAreVisible
 is invoked to scroll as many of the children to visible as possible
 (tries to scroll to last visible descendant of path).

"
BasicTreeUI,uninstallComponents(),protected void,Uninstalls the renderer pane.,"

uninstallComponents
protected void uninstallComponents()
Uninstalls the renderer pane.

"
BasicTreeUI,uninstallDefaults(),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults()

"
BasicTreeUI,uninstallKeyboardActions(),protected void,NULL,"

uninstallKeyboardActions
protected void uninstallKeyboardActions()

"
BasicTreeUI,uninstallListeners(),protected void,NULL,"

uninstallListeners
protected void uninstallListeners()

"
BasicTreeUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
BasicTreeUI,updateCachedPreferredSize(),protected void,"Updates the preferredSize instance variable, which is returned from getPreferredSize().","

updateCachedPreferredSize
protected void updateCachedPreferredSize()
Updates the preferredSize instance variable,
 which is returned from getPreferredSize().
 For left to right orientations, the size is determined from the
 current AbstractLayoutCache. For RTL orientations, the preferred size
 becomes the width minus the minimum x position.

"
BasicTreeUI,updateCellEditor(),protected void,Updates the cellEditor based on the editability of the JTree that we're contained in.,"

updateCellEditor
protected void updateCellEditor()
Updates the cellEditor based on the editability of the JTree that
 we're contained in.  If the tree is editable but doesn't have a
 cellEditor, a basic one will be used.

"
BasicTreeUI,updateDepthOffset(),protected void,Updates how much each depth should be offset by.,"

updateDepthOffset
protected void updateDepthOffset()
Updates how much each depth should be offset by.

"
BasicTreeUI,updateExpandedDescendants(TreePath path),protected void,Updates the expanded state of all the descendants of path by getting the expanded descendants from the tree and forwarding to the tree state.,"

updateExpandedDescendants
protected void updateExpandedDescendants(TreePath path)
Updates the expanded state of all the descendants of path
 by getting the expanded descendants from the tree and forwarding
 to the tree state.

"
BasicTreeUI,updateLayoutCacheExpandedNodes(),protected void,Makes all the nodes that are expanded in JTree expanded in LayoutCache.,"

updateLayoutCacheExpandedNodes
protected void updateLayoutCacheExpandedNodes()
Makes all the nodes that are expanded in JTree expanded in LayoutCache.
 This invokes updateExpandedDescendants with the root path.

"
BasicTreeUI,updateLeadSelectionRow(),protected void,Updates the lead row of the selection.,"

updateLeadSelectionRow
protected void updateLeadSelectionRow()
Updates the lead row of the selection.

Since:
1.7


"
BasicTreeUI,updateRenderer(),protected void,Messaged from the tree we're in when the renderer has changed.,"

updateRenderer
protected void updateRenderer()
Messaged from the tree we're in when the renderer has changed.

"
BasicTreeUI,updateSize(),protected void,"Marks the cached size as being invalid, and messages the tree with treeDidChange.","

updateSize
protected void updateSize()
Marks the cached size as being invalid, and messages the
 tree with treeDidChange.

"
BasicViewportUI,createUI(JComponent c),static ComponentUI,NULL,"

createUI
public static ComponentUI createUI(JComponent c)

"
BasicViewportUI,installDefaults(JComponent c),protected void,NULL,"

installDefaults
protected void installDefaults(JComponent c)

"
BasicViewportUI,installUI(JComponent c),void,Configures the specified component appropriately for the look and feel.,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
BasicViewportUI,uninstallDefaults(JComponent c),protected void,NULL,"

uninstallDefaults
protected void uninstallDefaults(JComponent c)

"
BasicViewportUI,uninstallUI(JComponent c),void,Reverses configuration which was done on the specified component during installUI.,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
DefaultMenuLayout,preferredLayoutSize(Container target),Dimension,"Returns the preferred dimensions for this layout, given the components in the specified target container.","

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Description copied from class: BoxLayout
Returns the preferred dimensions for this layout, given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Overrides:
preferredLayoutSize in class BoxLayout
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
See Also:
Container, 
BoxLayout.minimumLayoutSize(java.awt.Container), 
BoxLayout.maximumLayoutSize(java.awt.Container)


"
