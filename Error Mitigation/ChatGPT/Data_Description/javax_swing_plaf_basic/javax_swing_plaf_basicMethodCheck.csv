Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,BasicArrowButton,1,int getDirection(),True,,"

getDirection
public int getDirection()
Returns the direction of the arrow.

"
0,BasicArrowButton,2,void setDirection(int direction),True,,"

setDirection
public void setDirection(int direction)
Sets the direction of the arrow.

Parameters:
direction - the direction of the arrow; one of
        of SwingConstants.NORTH,
        SwingConstants.SOUTH,
        SwingConstants.EAST or SwingConstants.WEST


"
0,BasicArrowButton,3,int getShadowHeight(),False,,NULL
0,BasicArrowButton,4,void setShadowHeight(int shadowHeight),False,,NULL
0,BasicArrowButton,5,int getShadowWidth(),False,,NULL
1,BasicBorders,1,Border getButtonBorder(),True,,"

getButtonBorder
public static Border getButtonBorder()

"
1,BasicBorders,2,Border getCheckBoxBorder(),False,,NULL
1,BasicBorders,3,Border getRadioButtonBorder(),True,,"

getRadioButtonBorder
public static Border getRadioButtonBorder()

"
1,BasicBorders,4,Border getTextFieldBorder(),True,,"

getTextFieldBorder
public static Border getTextFieldBorder()

"
1,BasicBorders,5,Border getProgressBarBorder(),True,,"

getProgressBarBorder
public static Border getProgressBarBorder()

"
2,BasicBorders.ButtonBorder,1,Insets getBorderInsets(Component c),False,,NULL
2,BasicBorders.ButtonBorder,2,boolean isBorderOpaque(),False,,NULL
2,BasicBorders.ButtonBorder,3,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
2,BasicBorders.ButtonBorder,4,"void setBorderInsets(Component c, Insets insets)",False,,NULL
2,BasicBorders.ButtonBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
3,BasicBorders.FieldBorder,1,Border getBorder(),False,,NULL
3,BasicBorders.FieldBorder,2,void setBorder(Border border),False,,NULL
3,BasicBorders.FieldBorder,3,Insets getBorderInsets(Component c),False,,NULL
3,BasicBorders.FieldBorder,4,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
3,BasicBorders.FieldBorder,5,boolean isBorderOpaque(),False,,NULL
4,BasicBorders.MarginBorder,1,Insets getBorderInsets(Component c),False,,NULL
4,BasicBorders.MarginBorder,2,boolean isBorderOpaque(),False,,NULL
4,BasicBorders.MarginBorder,3,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",False,,NULL
4,BasicBorders.MarginBorder,4,"void setBorderInsets(Component c, Insets insets)",False,,NULL
4,BasicBorders.MarginBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
5,BasicBorders.MenuBarBorder,1,Border getMenuBarBorder(),False,,NULL
5,BasicBorders.MenuBarBorder,2,void setMenuBarBorder(Border border),False,,NULL
5,BasicBorders.MenuBarBorder,3,"Insets getBorderInsets(Component c, Insets insets)",True,,"

getBorderInsets
public Insets getBorderInsets(Component c,
                              Insets insets)
Description copied from class: AbstractBorder
Reinitializes the insets parameter with this Border's current Insets.

Overrides:
getBorderInsets in class AbstractBorder
Parameters:
c - the component for which this border insets value applies
insets - the object to be reinitialized
Returns:
the insets object


"
5,BasicBorders.MenuBarBorder,4,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class AbstractBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
5,BasicBorders.MenuBarBorder,5,boolean isBorderOpaque(),False,,NULL
6,BasicBorders.RadioButtonBorder,1,Border getBorder(),False,,NULL
6,BasicBorders.RadioButtonBorder,2,Insets getBorderInsets(Component c),False,,NULL
6,BasicBorders.RadioButtonBorder,3,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
6,BasicBorders.RadioButtonBorder,4,boolean isBorderOpaque(),False,,NULL
6,BasicBorders.RadioButtonBorder,5,void setBorder(Border border),False,,NULL
7,BasicBorders.RolloverButtonBorder,1,Insets getBorderInsets(Component c),False,,NULL
7,BasicBorders.RolloverButtonBorder,2,boolean isBorderOpaque(),False,,NULL
7,BasicBorders.RolloverButtonBorder,3,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int w,
                        int h)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
w - the width of the painted border
h - the height of the painted border


"
7,BasicBorders.RolloverButtonBorder,4,"void setBorderInsets(Component c, Insets insets)",False,,NULL
7,BasicBorders.RolloverButtonBorder,5,void setRollover(boolean b),False,,NULL
8,BasicBorders.SplitPaneBorder,1,Insets getBorderInsets(Component c),True,,"

getBorderInsets
public Insets getBorderInsets(Component c)
Description copied from interface: Border
Returns the insets of the border.

Specified by:
getBorderInsets in interface Border
Parameters:
c - the component for which this border insets value applies


"
8,BasicBorders.SplitPaneBorder,2,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from interface: Border
Paints the border for the specified component with the specified
 position and size.

Specified by:
paintBorder in interface Border
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
8,BasicBorders.SplitPaneBorder,3,boolean isBorderOpaque(),True,,"

isBorderOpaque
public boolean isBorderOpaque()
Description copied from interface: Border
Returns whether or not the border is opaque.  If the border
 is opaque, it is responsible for filling in it's own
 background when painting.

Specified by:
isBorderOpaque in interface Border


"
8,BasicBorders.SplitPaneBorder,4,"void setBorderInsets(Component c, Insets insets)",False,,NULL
8,BasicBorders.SplitPaneBorder,5,void setBorderOpaque(boolean isOpaque),False,,NULL
9,BasicBorders.ToggleButtonBorder,1,Border getBorder(),False,,NULL
9,BasicBorders.ToggleButtonBorder,2,void setBorder(Border border),False,,NULL
9,BasicBorders.ToggleButtonBorder,3,Insets getBorderInsets(Component c),False,,NULL
9,BasicBorders.ToggleButtonBorder,4,"void paintBorder(Component c, Graphics g, int x, int y, int width, int height)",True,,"

paintBorder
public void paintBorder(Component c,
                        Graphics g,
                        int x,
                        int y,
                        int width,
                        int height)
Description copied from class: AbstractBorder
This default implementation does no painting.

Specified by:
paintBorder in interface Border
Overrides:
paintBorder in class BasicBorders.ButtonBorder
Parameters:
c - the component for which this border is being painted
g - the paint graphics
x - the x position of the painted border
y - the y position of the painted border
width - the width of the painted border
height - the height of the painted border


"
9,BasicBorders.ToggleButtonBorder,5,boolean isBorderOpaque(),False,,NULL
11,BasicButtonUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
11,BasicButtonUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
11,BasicButtonUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
11,BasicButtonUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
11,BasicButtonUI,5,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
12,BasicCheckBoxMenuItemUI,1,void installUI(JComponent c),False,,NULL
12,BasicCheckBoxMenuItemUI,2,void uninstallUI(JComponent c),False,,NULL
12,BasicCheckBoxMenuItemUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
12,BasicCheckBoxMenuItemUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
12,BasicCheckBoxMenuItemUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
13,BasicCheckBoxUI,1,void installUI(JComponent c),False,,NULL
13,BasicCheckBoxUI,2,void uninstallUI(JComponent c),False,,NULL
13,BasicCheckBoxUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
13,BasicCheckBoxUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
13,BasicCheckBoxUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
14,BasicColorChooserUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
14,BasicColorChooserUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
14,BasicColorChooserUI,3,void createDefaultChoosers(),False,,NULL
14,BasicColorChooserUI,4,void uninstallDefaultChoosers(),True,,"

uninstallDefaultChoosers
protected void uninstallDefaultChoosers()

"
14,BasicColorChooserUI,5,void installDefaults(),True,,"

installDefaults
protected void installDefaults()

"
15,BasicComboBoxEditor,1,void setItem(Object anObject),True,,"

setItem
public void setItem(Object anObject)
Sets the item that should be edited.

Specified by:
setItem in interface ComboBoxEditor
Parameters:
anObject - the displayed value of the editor


"
15,BasicComboBoxEditor,2,Object getItem(),True,,"

getItem
public Object getItem()
Description copied from interface: ComboBoxEditor
Return the edited item

Specified by:
getItem in interface ComboBoxEditor


"
15,BasicComboBoxEditor,3,void selectAll(),True,,"

selectAll
public void selectAll()
Description copied from interface: ComboBoxEditor
Ask the editor to start editing and to select everything

Specified by:
selectAll in interface ComboBoxEditor


"
15,BasicComboBoxEditor,4,void addActionListener(ActionListener l),True,,"

addActionListener
public void addActionListener(ActionListener l)
Description copied from interface: ComboBoxEditor
Add an ActionListener. An action event is generated when the edited item changes

Specified by:
addActionListener in interface ComboBoxEditor


"
15,BasicComboBoxEditor,5,void removeActionListener(ActionListener l),True,,"

removeActionListener
public void removeActionListener(ActionListener l)
Description copied from interface: ComboBoxEditor
Remove an ActionListener

Specified by:
removeActionListener in interface ComboBoxEditor


"
16,BasicComboBoxEditor.UIResource,1,void setItem(Object anObject),False,,NULL
16,BasicComboBoxEditor.UIResource,2,Object getItem(),False,,NULL
16,BasicComboBoxEditor.UIResource,3,void selectAll(),False,,NULL
16,BasicComboBoxEditor.UIResource,4,void addActionListener(ActionListener l),False,,NULL
16,BasicComboBoxEditor.UIResource,5,void removeActionListener(ActionListener l),False,,NULL
17,BasicComboBoxRenderer,1,"Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)",True,,"

getListCellRendererComponent
public Component getListCellRendererComponent(JList list,
                                              Object value,
                                              int index,
                                              boolean isSelected,
                                              boolean cellHasFocus)
Description copied from interface: ListCellRenderer
Return a component that has been configured to display the specified
 value. That component's paint method is then called to
 ""render"" the cell.  If it is necessary to compute the dimensions
 of a list because the list cells do not have a fixed size, this method
 is called to generate a component on which getPreferredSize
 can be invoked.

Specified by:
getListCellRendererComponent in interface ListCellRenderer
Parameters:
list - The JList we're painting.
value - The value returned by list.getModel().getElementAt(index).
index - The cells index.
isSelected - True if the specified cell was selected.
cellHasFocus - True if the specified cell has the focus.
Returns:
A component whose paint() method will render the specified value.
See Also:
JList, 
ListSelectionModel, 
ListModel


"
17,BasicComboBoxRenderer,2,void setBorder(Border b),False,,NULL
17,BasicComboBoxRenderer,3,void setOpaque(boolean isOpaque),False,,NULL
17,BasicComboBoxRenderer,4,void setBackground(Color bg),False,,NULL
17,BasicComboBoxRenderer,5,void setForeground(Color fg),False,,NULL
18,BasicComboBoxRenderer.UIResource,1,"void getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)",False,,NULL
18,BasicComboBoxRenderer.UIResource,2,void setHorizontalAlignment(int alignment),False,,NULL
18,BasicComboBoxRenderer.UIResource,3,void setVerticalAlignment(int alignment),False,,NULL
18,BasicComboBoxRenderer.UIResource,4,void setBorder(Border b),False,,NULL
18,BasicComboBoxRenderer.UIResource,5,void setOpaque(boolean isOpaque),False,,NULL
19,BasicComboBoxUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
19,BasicComboBoxUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
19,BasicComboBoxUI,3,void configureEditor(),True,,"

configureEditor
protected void configureEditor()
This protected method is implementation specific and should be private.
 do not call or override.

See Also:
addEditor()


"
19,BasicComboBoxUI,4,void configureArrowButton(),True,,"

configureArrowButton
public void configureArrowButton()
This public method is implementation specific and should be private. Do
 not call or override.

See Also:
createArrowButton()


"
19,BasicComboBoxUI,5,void configurePopup(),False,,NULL
20,BasicComboPopup,1,void show(),True,,"

show
public void show()
Implementation of ComboPopup.show().

Specified by:
show in interface ComboPopup
Overrides:
show in class Component


"
20,BasicComboPopup,2,void hide(),True,,"

hide
public void hide()
Implementation of ComboPopup.hide().

Specified by:
hide in interface ComboPopup
Overrides:
hide in class JComponent


"
20,BasicComboPopup,3,boolean isVisible(),False,,NULL
20,BasicComboPopup,4,void removeAll(),False,,NULL
20,BasicComboPopup,5,Component getComponent(),False,,NULL
21,BasicDesktopIconUI,1,void setIcon(boolean icon),False,,NULL
21,BasicDesktopIconUI,2,"void setBounds(int x, int y, int w, int h)",False,,NULL
21,BasicDesktopIconUI,3,void setUI(BasicDesktopIconUI ui),False,,NULL
21,BasicDesktopIconUI,4,void updateUI(),False,,NULL
21,BasicDesktopIconUI,5,void setOpaque(boolean isOpaque),False,,NULL
22,BasicDesktopPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
22,BasicDesktopPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
22,BasicDesktopPaneUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
22,BasicDesktopPaneUI,4,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
22,BasicDesktopPaneUI,5,Dimension getMaximumSize(JComponent c),True,,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
23,BasicDirectoryModel,1,int getSize(),True,,"

getSize
public int getSize()
Description copied from interface: ListModel
Returns the length of the list.

Specified by:
getSize in interface ListModel<Object>
Returns:
the length of the list


"
23,BasicDirectoryModel,2,File getDirectory(int index),False,,NULL
23,BasicDirectoryModel,3,void setDirectory(File directory),False,,NULL
23,BasicDirectoryModel,4,void setFilter(FileFilter filter),False,,NULL
23,BasicDirectoryModel,5,void invalidateFileCache(),True,,"

invalidateFileCache
public void invalidateFileCache()
This method is used to interrupt file loading thread.

"
24,BasicEditorPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class BasicTextUI
Parameters:
c - the editor component
Since:
1.5
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
24,BasicEditorPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Deinstalls the UI for a component.  This removes the listeners,
 uninstalls the highlighter, removes views, and nulls out the keymap.

Overrides:
uninstallUI in class BasicTextUI
Parameters:
c - the editor component
Since:
1.5
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)


"
24,BasicEditorPaneUI,3,void installDefaults(),False,,NULL
24,BasicEditorPaneUI,4,void uninstallDefaults(),False,,NULL
24,BasicEditorPaneUI,5,void installListeners(),False,,NULL
25,BasicFileChooserUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
25,BasicFileChooserUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
25,BasicFileChooserUI,3,File getDirectory(),True,,"

getDirectory
protected File getDirectory()
Property to remember the directory that is currently selected in the UI.

Returns:
the value of the directory property
Since:
1.4
See Also:
setDirectory(java.io.File)


"
25,BasicFileChooserUI,4,File getSelectedFile(),False,,NULL
25,BasicFileChooserUI,5,void rescanCurrentDirectory(JFileChooser fc),True,,"

rescanCurrentDirectory
public void rescanCurrentDirectory(JFileChooser fc)

Specified by:
rescanCurrentDirectory in class FileChooserUI


"
26,BasicFormattedTextFieldUI,1,void installUI(JComponent c),False,,NULL
26,BasicFormattedTextFieldUI,2,void uninstallUI(JComponent c),False,,NULL
26,BasicFormattedTextFieldUI,3,void installListeners(JFormattedTextField ftf),False,,NULL
26,BasicFormattedTextFieldUI,4,void uninstallListeners(JFormattedTextField ftf),False,,NULL
26,BasicFormattedTextFieldUI,5,void propertyChange(PropertyChangeEvent e),False,,NULL
27,BasicGraphicsUtils,1,"void drawString(Graphics g, String text, int x, int y)",False,,NULL
27,BasicGraphicsUtils,2,"Rectangle getTextBounds(JComponent c, FontMetrics fm, String text, int x, int y)",False,,NULL
27,BasicGraphicsUtils,3,"void drawDashedRect(int x, int y, int width, int height, Graphics g)",False,,NULL
27,BasicGraphicsUtils,4,"void drawEtchedRect(Graphics g, int x, int y, int width, int height)",False,,NULL
27,BasicGraphicsUtils,5,"void drawLoweredBevel(Graphics g, int x, int y, int width, int height)",False,,NULL
28,BasicHTML,1,View getHTMLView(JComponent c),False,,NULL
28,BasicHTML,2,String getText(JComponent c),False,,NULL
28,BasicHTML,3,"void setPropertiesFromAttributes(JComponent c, AttributeSet a)",False,,NULL
28,BasicHTML,4,void updateView(JComponent c),False,,NULL
28,BasicHTML,5,"void paint(Graphics g, JComponent c)",False,,NULL
29,BasicIconFactory,1,Icon getCheckBoxIcon(),True,,"

getCheckBoxIcon
public static Icon getCheckBoxIcon()

"
29,BasicIconFactory,2,Icon getCheckBoxMenuItemIcon(),True,,"

getCheckBoxMenuItemIcon
public static Icon getCheckBoxMenuItemIcon()

"
29,BasicIconFactory,3,Icon getMenuArrowIcon(),True,,"

getMenuArrowIcon
public static Icon getMenuArrowIcon()

"
29,BasicIconFactory,4,Icon getRadioButtonIcon(),True,,"

getRadioButtonIcon
public static Icon getRadioButtonIcon()

"
29,BasicIconFactory,5,Icon getRadioButtonMenuItemIcon(),True,,"

getRadioButtonMenuItemIcon
public static Icon getRadioButtonMenuItemIcon()

"
30,BasicInternalFrameTitlePane,1,void setIcon(Icon icon),False,,NULL
30,BasicInternalFrameTitlePane,2,void setTitle(String title),False,,NULL
30,BasicInternalFrameTitlePane,3,void setMaximizeIcon(Icon icon),False,,NULL
30,BasicInternalFrameTitlePane,4,void setMinimizeIcon(Icon icon),False,,NULL
30,BasicInternalFrameTitlePane,5,void setCloseIcon(Icon icon),False,,NULL
31,BasicInternalFrameUI,1,void setNorthPane(JComponent c),True,,"

setNorthPane
public void setNorthPane(JComponent c)

"
31,BasicInternalFrameUI,2,void setSouthPane(JComponent c),True,,"

setSouthPane
public void setSouthPane(JComponent c)

"
31,BasicInternalFrameUI,3,void setEastPane(JComponent c),True,,"

setEastPane
public void setEastPane(JComponent c)

"
31,BasicInternalFrameUI,4,void setWestPane(JComponent c),True,,"

setWestPane
public void setWestPane(JComponent c)

"
31,BasicInternalFrameUI,5,void setCenterPane(JComponent c),False,,NULL
32,BasicLabelUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
32,BasicLabelUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
32,BasicLabelUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Paints the label text with the foreground color, if the label is opaque
 then paints the entire background with the background color. The Label
 text is drawn by paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int) or paintDisabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int).
 The locations of the label parts are computed by layoutCL(javax.swing.JLabel, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle).

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paintEnabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int), 
paintDisabledText(javax.swing.JLabel, java.awt.Graphics, java.lang.String, int, int), 
layoutCL(javax.swing.JLabel, java.awt.FontMetrics, java.lang.String, javax.swing.Icon, java.awt.Rectangle, java.awt.Rectangle, java.awt.Rectangle)


"
32,BasicLabelUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
32,BasicLabelUI,5,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
getPreferredSize(c)
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
33,BasicListUI,1,int locationToIndex(Point location),False,,NULL
33,BasicListUI,2,"Rectangle getCellBounds(JList list, int index1, int index2)",True,,"

getCellBounds
public Rectangle getCellBounds(JList list,
                               int index1,
                               int index2)
Returns the bounding rectangle, in the given list's coordinate system,
 for the range of cells specified by the two indices.
 The indices can be supplied in any order.
 
 If the smaller index is outside the list's range of cells, this method
 returns null. If the smaller index is valid, but the larger
 index is outside the list's range, the bounds of just the first index
 is returned. Otherwise, the bounds of the valid range is returned.

Specified by:
getCellBounds in class ListUI
Parameters:
list - the list
index1 - the first index in the range
index2 - the second index in the range
Returns:
the bounding rectangle for the range of cells, or null


"
33,BasicListUI,3,void updateLayoutState(),True,,"

updateLayoutState
protected void updateLayoutState()
Recompute the value of cellHeight or cellHeights based
 and cellWidth, based on the current font and the current
 values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.

See Also:
maybeUpdateLayoutState()


"
33,BasicListUI,4,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Paint the rows that intersect the Graphics objects clipRect.  This
 method calls paintCell as necessary.  Subclasses
 may want to override these methods.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
paintCell(java.awt.Graphics, int, java.awt.Rectangle, javax.swing.ListCellRenderer, javax.swing.ListModel, javax.swing.ListSelectionModel, int)


"
33,BasicListUI,5,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Initializes this.list by calling installDefaults(),
 installListeners(), and installKeyboardActions()
 in order.

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
installDefaults(), 
installListeners(), 
installKeyboardActions()


"
34,BasicLookAndFeel,1,void uninitialize(),True,,"

uninitialize
public void uninitialize()
Uninitializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when
 the look and feel is uninstalled. For example,
 UIManager.setLookAndFeel invokes this when the look and
 feel is changed.
 
 Subclasses may choose to free up some resources here.

Overrides:
uninitialize in class LookAndFeel
See Also:
LookAndFeel.initialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
34,BasicLookAndFeel,2,void initialize(),True,,"

initialize
public void initialize()
Initializes the look and feel. While this method is public,
 it should only be invoked by the UIManager when a
 look and feel is installed as the current look and feel. This
 method is invoked before the UIManager invokes
 getDefaults. This method is intended to perform any
 initialization for the look and feel. Subclasses
 should do any one-time setup they need here, rather than
 in a static initializer, because look and feel class objects
 may be loaded just to discover that isSupportedLookAndFeel()
 returns false.

Overrides:
initialize in class LookAndFeel
See Also:
LookAndFeel.uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
34,BasicLookAndFeel,3,String getDescription(),False,,NULL
34,BasicLookAndFeel,4,String getID(),False,,NULL
34,BasicLookAndFeel,5,String getName(),False,,NULL
36,BasicMenuItemUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
36,BasicMenuItemUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
36,BasicMenuItemUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
36,BasicMenuItemUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
36,BasicMenuItemUI,5,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
37,BasicMenuUI,1,void installUI(JComponent c),False,,NULL
37,BasicMenuUI,2,void uninstallUI(JComponent c),False,,NULL
37,BasicMenuUI,3,Dimension getPreferredSize(JComponent c),False,,NULL
37,BasicMenuUI,4,Dimension getMinimumSize(JComponent c),False,,NULL
37,BasicMenuUI,5,Dimension getMaximumSize(JComponent c),True,,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class BasicMenuItemUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
38,BasicOptionPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Installs the receiver as the L&F for the passed in
 JOptionPane.

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
38,BasicOptionPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Removes the receiver from the L&F controller of the passed in split
 pane.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
38,BasicOptionPaneUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
If c is the JOptionPane the receiver
 is contained in, the preferred
 size that is returned is the maximum of the preferred size of
 the LayoutManager for the JOptionPane, and
 getMinimumOptionPaneSize.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
38,BasicOptionPaneUI,4,void selectInitialValue(JOptionPane op),True,,"

selectInitialValue
public void selectInitialValue(JOptionPane op)
If inputComponent is non-null, the focus is requested on that,
 otherwise request focus on the default value

Specified by:
selectInitialValue in class OptionPaneUI


"
38,BasicOptionPaneUI,5,"void showMessage(JOptionPane op, int messageType)",False,,NULL
39,BasicOptionPaneUI.ButtonAreaLayout,1,void layoutContainer(Container parent),True,,"

layoutContainer
public void layoutContainer(Container container)
Description copied from interface: LayoutManager
Lays out the specified container.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
container - the container to be laid out


"
39,BasicOptionPaneUI.ButtonAreaLayout,2,Dimension preferredLayoutSize(Container parent),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container c)
Description copied from interface: LayoutManager
Calculates the preferred size dimensions for the specified
 container, given the components it contains.

Specified by:
preferredLayoutSize in interface LayoutManager
Parameters:
c - the container to be laid out
See Also:
LayoutManager.minimumLayoutSize(java.awt.Container)


"
39,BasicOptionPaneUI.ButtonAreaLayout,3,Dimension minimumLayoutSize(Container parent),True,,"

minimumLayoutSize
public Dimension minimumLayoutSize(Container c)
Description copied from interface: LayoutManager
Calculates the minimum size dimensions for the specified
 container, given the components it contains.

Specified by:
minimumLayoutSize in interface LayoutManager
Parameters:
c - the component to be laid out
See Also:
LayoutManager.preferredLayoutSize(java.awt.Container)


"
39,BasicOptionPaneUI.ButtonAreaLayout,4,Dimension maximumLayoutSize(Container target),False,,NULL
39,BasicOptionPaneUI.ButtonAreaLayout,5,"void addLayoutComponent(String name, Component comp)",True,,"

addLayoutComponent
public void addLayoutComponent(String string,
                               Component comp)
Description copied from interface: LayoutManager
If the layout manager uses a per-component string,
 adds the component comp to the layout,
 associating it
 with the string specified by name.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
string - the string to be associated with the component
comp - the component to be added


"
40,BasicPanelUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
40,BasicPanelUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
40,BasicPanelUI,3,Dimension getPreferredSize(JComponent c),False,,NULL
40,BasicPanelUI,4,Dimension getMinimumSize(JComponent c),False,,NULL
40,BasicPanelUI,5,Dimension getMaximumSize(JComponent c),False,,NULL
41,BasicPasswordFieldUI,1,void installUI(JComponent c),False,,NULL
41,BasicPasswordFieldUI,2,void uninstallUI(JComponent c),False,,NULL
41,BasicPasswordFieldUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
41,BasicPasswordFieldUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
41,BasicPasswordFieldUI,5,"void update(Graphics g, JComponent c)",False,,NULL
42,BasicPopupMenuSeparatorUI,1,void installUI(JComponent c),False,,NULL
42,BasicPopupMenuSeparatorUI,2,void uninstallUI(JComponent c),False,,NULL
42,BasicPopupMenuSeparatorUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicSeparatorUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
42,BasicPopupMenuSeparatorUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class BasicSeparatorUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
42,BasicPopupMenuSeparatorUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
43,BasicPopupMenuUI,1,void installDefaults(),True,,"

installDefaults
public void installDefaults()

"
43,BasicPopupMenuUI,2,void installListeners(),True,,"

installListeners
protected void installListeners()

"
43,BasicPopupMenuUI,3,void installKeyboardActions(),True,,"

installKeyboardActions
protected void installKeyboardActions()

"
43,BasicPopupMenuUI,4,void uninstallDefaults(),True,,"

uninstallDefaults
protected void uninstallDefaults()

"
43,BasicPopupMenuUI,5,void uninstallListeners(),True,,"

uninstallListeners
protected void uninstallListeners()

"
44,BasicProgressBarUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
44,BasicProgressBarUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
44,BasicProgressBarUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
44,BasicProgressBarUI,4,"void paintDeterminate(Graphics g, JComponent c)",True,,"

paintDeterminate
protected void paintDeterminate(Graphics g,
                                JComponent c)
All purpose paint method that should do the right thing for almost
 all linear, determinate progress bars. By setting a few values in
 the defaults
 table, things should work just fine to paint your progress bar.
 Naturally, override this if you are making a circular or
 semi-circular progress bar.

Since:
1.4
See Also:
paintIndeterminate(java.awt.Graphics, javax.swing.JComponent)


"
44,BasicProgressBarUI,5,"void paintIndeterminate(Graphics g, JComponent c)",True,,"

paintIndeterminate
protected void paintIndeterminate(Graphics g,
                                  JComponent c)
All purpose paint method that should do the right thing for all
 linear bouncing-box progress bars.
 Override this if you are making another kind of
 progress bar.

Since:
1.4
See Also:
paintDeterminate(java.awt.Graphics, javax.swing.JComponent)


"
45,BasicRadioButtonMenuItemUI,1,void installUI(JComponent c),False,,NULL
45,BasicRadioButtonMenuItemUI,2,void uninstallUI(JComponent c),False,,NULL
45,BasicRadioButtonMenuItemUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
45,BasicRadioButtonMenuItemUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
45,BasicRadioButtonMenuItemUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
46,BasicRadioButtonUI,1,void installUI(JComponent c),False,,NULL
46,BasicRadioButtonUI,2,void uninstallUI(JComponent c),False,,NULL
46,BasicRadioButtonUI,3,Icon getDefaultIcon(),True,,"

getDefaultIcon
public Icon getDefaultIcon()
Returns the default icon.

Returns:
the default icon


"
46,BasicRadioButtonUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
The preferred size of the radio button

Overrides:
getPreferredSize in class BasicButtonUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
46,BasicRadioButtonUI,5,"void paintIcon(Graphics g, JComponent c, int x, int y)",False,,NULL
47,BasicRootPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
47,BasicRootPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
47,BasicRootPaneUI,3,void installDefaults(JRootPane c),True,,"

installDefaults
protected void installDefaults(JRootPane c)

"
47,BasicRootPaneUI,4,void uninstallDefaults(JRootPane c),True,,"

uninstallDefaults
protected void uninstallDefaults(JRootPane root)

"
47,BasicRootPaneUI,5,BasicRootPaneUI createUI(JComponent c),False,,NULL
48,BasicScrollBarUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
48,BasicScrollBarUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
48,BasicScrollBarUI,3,"void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)",True,,"

paintThumb
protected void paintThumb(Graphics g,
                          JComponent c,
                          Rectangle thumbBounds)

"
48,BasicScrollBarUI,4,"void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)",True,,"

paintTrack
protected void paintTrack(Graphics g,
                          JComponent c,
                          Rectangle trackBounds)

"
48,BasicScrollBarUI,5,void paintDecreaseHighlight(Graphics g),True,,"

paintDecreaseHighlight
protected void paintDecreaseHighlight(Graphics g)

"
49,BasicScrollPaneUI,1,JScrollPane createScrollPane(JComponent view),False,,NULL
49,BasicScrollPaneUI,2,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent x)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
x - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
49,BasicScrollPaneUI,3,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
49,BasicScrollPaneUI,4,void installListeners(JScrollPane scrollpane),True,,"

installListeners
protected void installListeners(JScrollPane c)

"
49,BasicScrollPaneUI,5,void uninstallListeners(JScrollPane scrollpane),False,,NULL
50,BasicSeparatorUI,1,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
50,BasicSeparatorUI,2,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
50,BasicSeparatorUI,3,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
50,BasicSeparatorUI,4,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
50,BasicSeparatorUI,5,"void paintVertical(Graphics g, JSeparator s)",False,,NULL
51,BasicSliderUI,1,void calculateGeometry(),True,,"

calculateGeometry
protected void calculateGeometry()

"
51,BasicSliderUI,2,int xPositionForValue(int value),True,,"

xPositionForValue
protected int xPositionForValue(int value)

"
51,BasicSliderUI,3,int yPositionForValue(int value),True,,"

yPositionForValue
protected int yPositionForValue(int value)

"
51,BasicSliderUI,4,Rectangle getTrackRect(),False,,NULL
51,BasicSliderUI,5,Rectangle getThumbRect(),False,,NULL
52,BasicSpinnerUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Calls installDefaults, installListeners,
 and then adds the components returned by createNextButton,
 createPreviousButton, and createEditor.

Overrides:
installUI in class ComponentUI
Parameters:
c - the JSpinner
See Also:
installDefaults(), 
installListeners(), 
createNextButton(), 
createPreviousButton(), 
createEditor()


"
52,BasicSpinnerUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Calls uninstallDefaults, uninstallListeners,
 and then removes all of the spinners children.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the JSpinner (not used)
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
52,BasicSpinnerUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
52,BasicSpinnerUI,4,"void paintBorder(Graphics g, JComponent c)",False,,NULL
52,BasicSpinnerUI,5,"void paintComponent(Graphics g, JComponent c)",False,,NULL
53,BasicSplitPaneDivider,1,void setBorder(Border border),True,,"

setBorder
public void setBorder(Border border)
Sets the border of this component.

Since:
1.3


"
53,BasicSplitPaneDivider,2,void setDividerSize(int newSize),True,,"

setDividerSize
public void setDividerSize(int newSize)
Sets the size of the divider to newSize. That is
 the width if the splitpane is HORIZONTAL_SPLIT, or
 the height of VERTICAL_SPLIT.

"
53,BasicSplitPaneDivider,3,void setBasicSplitPaneUI(BasicSplitPaneUI ui),True,,"

setBasicSplitPaneUI
public void setBasicSplitPaneUI(BasicSplitPaneUI newUI)
Sets the SplitPaneUI that is using the receiver.

"
53,BasicSplitPaneDivider,4,void setDividerLocation(int location),False,,NULL
53,BasicSplitPaneDivider,5,void setLastDragLocation(int location),False,,NULL
54,BasicSplitPaneUI,1,"void setDividerLocation(javax.swing.JSplitPane splitPane, int location)",False,,NULL
54,BasicSplitPaneUI,2,int getDividerLocation(javax.swing.JSplitPane splitPane),False,,NULL
54,BasicSplitPaneUI,3,"void setContinuousLayout(javax.swing.JSplitPane splitPane, boolean newContinuousLayout)",False,,NULL
54,BasicSplitPaneUI,4,boolean isContinuousLayout(javax.swing.JSplitPane splitPane),False,,NULL
54,BasicSplitPaneUI,5,void resetToPreferredSizes(javax.swing.JSplitPane splitPane),False,,NULL
55,BasicTabbedPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
55,BasicTabbedPaneUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
55,BasicTabbedPaneUI,3,"Rectangle getTabBounds(JTabbedPane pane, int index)",True,,"

getTabBounds
public Rectangle getTabBounds(JTabbedPane pane,
                              int i)
Returns the bounds of the specified tab index.  The bounds are
 with respect to the JTabbedPane's coordinate space.

Specified by:
getTabBounds in class TabbedPaneUI


"
55,BasicTabbedPaneUI,4,"int tabForCoordinate(JTabbedPane pane, int x, int y)",True,,"

tabForCoordinate
public int tabForCoordinate(JTabbedPane pane,
                            int x,
                            int y)
Returns the tab index which intersects the specified point
 in the JTabbedPane's coordinate space.

Specified by:
tabForCoordinate in class TabbedPaneUI


"
55,BasicTabbedPaneUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
56,BasicTableHeaderUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
56,BasicTableHeaderUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
56,BasicTableHeaderUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Return the preferred size of the header. The preferred height is the
 maximum of the preferred heights of all of the components provided
 by the header renderers. The preferred width is the sum of the
 preferred widths of each column (plus inter-cell spacing).

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
56,BasicTableHeaderUI,4,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
56,BasicTableHeaderUI,5,"void update(Graphics g, JComponent c)",False,,NULL
57,BasicTableUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
57,BasicTableUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
57,BasicTableUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Paint a representation of the table instance
 that was set in installUI().

Overrides:
paint in class ComponentUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
57,BasicTableUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Return the preferred size of the table. The preferred height is the
 row height times the number of rows.
 The preferred width is the sum of the preferred widths of each column.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
57,BasicTableUI,5,void installDefaults(),True,,"

installDefaults
protected void installDefaults()
Initialize JTable properties, e.g. font, foreground, and background.
 The font, foreground, and background properties are only set if their
 current value is either null or a UIResource, other properties are set
 if the current value is null.

See Also:
installUI(javax.swing.JComponent)


"
58,BasicTextAreaUI,1,void installUI(JComponent c),False,,NULL
58,BasicTextAreaUI,2,void uninstallUI(JComponent c),False,,NULL
58,BasicTextAreaUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
The method is overridden to take into account caret width.

Overrides:
getPreferredSize in class BasicTextUI
Parameters:
c - the editor component
Returns:
the preferred size
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
58,BasicTextAreaUI,4,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
The method is overridden to take into account caret width.

Overrides:
getMinimumSize in class BasicTextUI
Parameters:
c - the editor component
Returns:
the minimum size
Throws:
IllegalArgumentException - if invalid value is passed
Since:
1.5
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
58,BasicTextAreaUI,5,Dimension getMaximumSize(JComponent c),False,,NULL
59,BasicTextFieldUI,1,void installUI(JComponent c),False,,NULL
59,BasicTextFieldUI,2,void uninstallUI(JComponent c),False,,NULL
59,BasicTextFieldUI,3,"void paint(Graphics g, JComponent c)",False,,NULL
59,BasicTextFieldUI,4,Dimension getPreferredSize(JComponent c),False,,NULL
59,BasicTextFieldUI,5,Dimension getMinimumSize(JComponent c),False,,NULL
60,BasicTextPaneUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: BasicEditorPaneUI
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class BasicEditorPaneUI
Parameters:
c - the editor component
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
60,BasicTextPaneUI,2,void uninstallUI(JComponent c),False,,NULL
60,BasicTextPaneUI,3,void installDefaults(),False,,NULL
60,BasicTextPaneUI,4,void uninstallDefaults(),False,,NULL
60,BasicTextPaneUI,5,void installListeners(),False,,NULL
61,BasicTextUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Installs the UI for a component.  This does the following
 things.
 

 Sets the associated component to opaque if the opaque property
 has not already been set by the client program. This will cause the
 component's background color to be painted.
 
 Installs the default caret and highlighter into the
 associated component. These properties are only set if their
 current value is either null or an instance of
 UIResource.
 
 Attaches to the editor and model.  If there is no
 model, a default one is created.
 
 Creates the view factory and the view hierarchy used
 to represent the model.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the editor component
See Also:
ComponentUI.installUI(javax.swing.JComponent)


"
61,BasicTextUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Deinstalls the UI for a component.  This removes the listeners,
 uninstalls the highlighter, removes views, and nulls out the keymap.

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the editor component
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent)


"
61,BasicTextUI,3,View create(Element elem),True,,"

create
public View create(Element elem)
Creates a view for an element.
 If a subclass wishes to directly implement the factory
 producing the view(s), it should reimplement this
 method.  By default it simply returns null indicating
 it is unable to represent the element.

Specified by:
create in interface ViewFactory
Parameters:
elem - the element
Returns:
the view
See Also:
View


"
61,BasicTextUI,4,"void damageRange(JTextComponent t, int p0, int p1)",True,,"

damageRange
public void damageRange(JTextComponent tc,
                        int p0,
                        int p1)
Causes the portion of the view responsible for the
 given part of the model to be repainted.  Does nothing if
 the view is not currently painted.

Specified by:
damageRange in class TextUI
Parameters:
tc - the text component for which this UI is installed
p0 - the beginning of the range >= 0
p1 - the end of the range >= p0
See Also:
TextUI.damageRange(javax.swing.text.JTextComponent, int, int)


"
61,BasicTextUI,5,"void modelToView(JTextComponent t, int pos, Position.Bias bias)",False,,NULL
62,BasicTextUI.BasicCaret,1,void install(JTextComponent c),False,,NULL
62,BasicTextUI.BasicCaret,2,void deinstall(JTextComponent c),False,,NULL
62,BasicTextUI.BasicCaret,3,void damage(Rectangle r),False,,NULL
62,BasicTextUI.BasicCaret,4,void focusGained(FocusEvent e),False,,NULL
62,BasicTextUI.BasicCaret,5,void focusLost(FocusEvent e),False,,NULL
63,BasicTextUI.BasicHighlighter,1,void install(JTextComponent c),False,,NULL
63,BasicTextUI.BasicHighlighter,2,void deinstall(JTextComponent c),False,,NULL
63,BasicTextUI.BasicHighlighter,3,"void paintLayeredHighlights(Graphics g, int p0, int p1, Shape viewBounds, JTextComponent editor, View view)",False,,NULL
63,BasicTextUI.BasicHighlighter,4,void removeAllHighlights(),False,,NULL
63,BasicTextUI.BasicHighlighter,5,"void changeHighlight(int tag, int p0, int p1)",False,,NULL
64,BasicToggleButtonUI,1,void installUI(JComponent c),False,,NULL
64,BasicToggleButtonUI,2,void uninstallUI(JComponent c),False,,NULL
64,BasicToggleButtonUI,3,BasicToggleButtonUI createUI(JComponent c),False,,NULL
64,BasicToggleButtonUI,4,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics g,
                  JComponent c)
Description copied from class: ComponentUI
Paints the specified component appropriately for the look and feel.
 This method is invoked from the ComponentUI.update method when
 the specified component is being painted.  Subclasses should override
 this method and use the specified Graphics object to
 render the content of the component.

Overrides:
paint in class BasicButtonUI
Parameters:
g - the Graphics context in which to paint
c - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
64,BasicToggleButtonUI,5,Dimension getPreferredSize(JComponent c),False,,NULL
66,BasicToolBarUI,1,void setRollover(boolean rollover),False,,NULL
66,BasicToolBarUI,2,void setFloatable(boolean floatable),False,,NULL
66,BasicToolBarUI,3,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int orientation)

"
66,BasicToolBarUI,4,void setBorderPainted(boolean borderPainted),False,,NULL
66,BasicToolBarUI,5,void setMargin(Insets m),False,,NULL
67,BasicToolTipUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent c)
Description copied from class: ComponentUI
Configures the specified component appropriately for the look and feel.
 This method is invoked when the ComponentUI instance is being installed
 as the UI delegate on the specified component.  This method should
 completely configure the component for the look and feel,
 including the following:
 
Install default property values for color, fonts, borders,
     icons, opacity, etc. on the component.  Whenever possible,
     property values initialized by the client program should not
     be overridden.
 Install a LayoutManager on the component if necessary.
 Create/add any required sub-components to the component.
 Create/install event listeners on the component.
 Create/install a PropertyChangeListener on the component in order
     to detect and respond to component property changes appropriately.
 Install keyboard UI (mnemonics, traversal, etc.) on the component.
 Initialize any appropriate instance data.
 

Overrides:
installUI in class ComponentUI
Parameters:
c - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
67,BasicToolTipUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent c)
Description copied from class: ComponentUI
Reverses configuration which was done on the specified component during
 installUI.  This method is invoked when this
 UIComponent instance is being removed as the UI delegate
 for the specified component.  This method should undo the
 configuration performed in installUI, being careful to
 leave the JComponent instance in a clean state (no
 extraneous listeners, look-and-feel-specific property objects, etc.).
 This should include the following:
 
Remove any UI-set borders from the component.
 Remove any UI-set layout managers on the component.
 Remove any UI-added sub-components from the component.
 Remove any UI-added event/property listeners from the component.
 Remove any UI-installed keyboard UI from the component.
 Nullify any allocated instance data objects to allow for GC.
 

Overrides:
uninstallUI in class ComponentUI
Parameters:
c - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
67,BasicToolTipUI,3,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's preferred size appropriate for
 the look and feel.  If null is returned, the preferred
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method returns null.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
c - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
67,BasicToolTipUI,4,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's minimum size appropriate for
 the look and feel.  If null is returned, the minimum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
c - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
67,BasicToolTipUI,5,Dimension getMaximumSize(JComponent c),True,,"

getMaximumSize
public Dimension getMaximumSize(JComponent c)
Description copied from class: ComponentUI
Returns the specified component's maximum size appropriate for
 the look and feel.  If null is returned, the maximum
 size will be calculated by the component's layout manager instead
 (this is the preferred approach for any component with a specific
 layout manager installed).  The default implementation of this
 method invokes getPreferredSize and returns that value.

Overrides:
getMaximumSize in class ComponentUI
Parameters:
c - the component whose maximum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
a Dimension object or null
See Also:
JComponent.getMaximumSize(), 
LayoutManager2.maximumLayoutSize(java.awt.Container)


"
68,BasicTreeUI,1,"void setExpandedState(javax.swing.JTree tree, javax.swing.tree.TreePath path, boolean state)",False,,NULL
68,BasicTreeUI,2,void setLeftChildIndent(int newAmount),True,,"

setLeftChildIndent
public void setLeftChildIndent(int newAmount)

"
68,BasicTreeUI,3,void setRightChildIndent(int newAmount),True,,"

setRightChildIndent
public void setRightChildIndent(int newAmount)

"
68,BasicTreeUI,4,void setRowHeight(int newRowHeight),True,,"

setRowHeight
protected void setRowHeight(int rowHeight)
Sets the row height, this is forwarded to the treeState.

"
68,BasicTreeUI,5,void setCollapsedIcon(javax.swing.Icon newIcon),False,,NULL
69,BasicViewportUI,1,void setView(javax.swing.JComponent view),False,,NULL
69,BasicViewportUI,2,javax.swing.JComponent getView(),False,,NULL
69,BasicViewportUI,3,void setExtentSize(java.awt.Dimension newExtent),False,,NULL
69,BasicViewportUI,4,java.awt.Dimension getExtentSize(),False,,NULL
69,BasicViewportUI,5,void setViewPosition(java.awt.Point p),False,,NULL
70,DefaultMenuLayout,1,void layoutContainer(Container target),False,,NULL
70,DefaultMenuLayout,2,Dimension preferredLayoutSize(Container target),True,,"

preferredLayoutSize
public Dimension preferredLayoutSize(Container target)
Description copied from class: BoxLayout
Returns the preferred dimensions for this layout, given the components
 in the specified target container.

Specified by:
preferredLayoutSize in interface LayoutManager
Overrides:
preferredLayoutSize in class BoxLayout
Parameters:
target - the container that needs to be laid out
Returns:
the dimensions >= 0 && <= Integer.MAX_VALUE
See Also:
Container, 
BoxLayout.minimumLayoutSize(java.awt.Container), 
BoxLayout.maximumLayoutSize(java.awt.Container)


"
70,DefaultMenuLayout,3,Dimension minimumLayoutSize(Container target),False,,NULL
70,DefaultMenuLayout,4,Dimension maximumLayoutSize(Container target),False,,NULL
70,DefaultMenuLayout,5,"void addLayoutComponent(String name, Component comp)",False,,NULL
