ClassName,Method,Return Type,Description,Full Description
Book,"append(Printable painter, PageFormat page)",void,Appends a single page to the end of this Book.,"

append
public void append(Printable painter,
                   PageFormat page)
Appends a single page to the end of this Book.

Parameters:
painter - the Printable instance that
                  renders the page
page - the size and orientation of the page
Throws:
NullPointerException - If the painter or page
          argument is null


"
Book,"append(Printable painter, PageFormat page, int numPages)",void,Appends numPages pages to the end of this Book.,"

append
public void append(Printable painter,
                   PageFormat page,
                   int numPages)
Appends numPages pages to the end of this
 Book.  Each of the pages is associated with
 page.

Parameters:
painter - the Printable instance that renders
                  the page
page - the size and orientation of the page
numPages - the number of pages to be added to the
                  this Book.
Throws:
NullPointerException - If the painter or page
          argument is null


"
Book,getNumberOfPages(),int,Returns the number of pages in this Book.,"

getNumberOfPages
public int getNumberOfPages()
Returns the number of pages in this Book.

Specified by:
getNumberOfPages in interface Pageable
Returns:
the number of pages this Book contains.


"
Book,getPageFormat(int pageIndex),PageFormat,Returns the PageFormat of the page specified by pageIndex.,"

getPageFormat
public PageFormat getPageFormat(int pageIndex)
                         throws IndexOutOfBoundsException
Returns the PageFormat of the page specified by
 pageIndex.

Specified by:
getPageFormat in interface Pageable
Parameters:
pageIndex - the zero based index of the page whose
            PageFormat is being requested
Returns:
the PageFormat describing the size and
          orientation of the page.
Throws:
IndexOutOfBoundsException - if the Pageable
          does not contain the requested page


"
Book,getPrintable(int pageIndex),Printable,Returns the Printable instance responsible for rendering the page specified by pageIndex.,"

getPrintable
public Printable getPrintable(int pageIndex)
                       throws IndexOutOfBoundsException
Returns the Printable instance responsible for rendering
 the page specified by pageIndex.

Specified by:
getPrintable in interface Pageable
Parameters:
pageIndex - the zero based index of the page whose
                  Printable is being requested
Returns:
the Printable that renders the page.
Throws:
IndexOutOfBoundsException - if the Pageable
            does not contain the requested page


"
Book,"setPage(int pageIndex, Printable painter, PageFormat page)",void,Sets the PageFormat and the Painter for a specified page number.,"

setPage
public void setPage(int pageIndex,
                    Printable painter,
                    PageFormat page)
             throws IndexOutOfBoundsException
Sets the PageFormat and the Painter for a
 specified page number.

Parameters:
pageIndex - the zero based index of the page whose
                  painter and format is altered
painter - the Printable instance that
                  renders the page
page - the size and orientation of the page
Throws:
IndexOutOfBoundsException - if the specified
          page is not already in this Book
NullPointerException - if the painter or
          page argument is null


"
PageFormat,clone(),Object,Makes a copy of this PageFormat with the same contents as this PageFormat.,"

clone
public Object clone()
Makes a copy of this PageFormat with the same
 contents as this PageFormat.

Overrides:
clone in class Object
Returns:
a copy of this PageFormat.
See Also:
Cloneable


"
PageFormat,getHeight(),double,"Returns the height, in 1/72nds of an inch, of the page.","

getHeight
public double getHeight()
Returns the height, in 1/72nds of an inch, of the page.
 This method takes into account the orientation of the
 page when determining the height.

Returns:
the height of the page.


"
PageFormat,getImageableHeight(),double,"Return the height, in 1/72nds of an inch, of the imageable area of the page.","

getImageableHeight
public double getImageableHeight()
Return the height, in 1/72nds of an inch, of the imageable
 area of the page. This method takes into account the orientation
 of the page.

Returns:
the height of the page.


"
PageFormat,getImageableWidth(),double,"Returns the width, in 1/72nds of an inch, of the imageable area of the page.","

getImageableWidth
public double getImageableWidth()
Returns the width, in 1/72nds of an inch, of the imageable
 area of the page. This method takes into account the orientation
 of the page.

Returns:
the width of the page.


"
PageFormat,getImageableX(),double,Returns the x coordinate of the upper left point of the imageable area of the Paper object associated with this PageFormat.,"

getImageableX
public double getImageableX()
Returns the x coordinate of the upper left point of the
 imageable area of the Paper object
 associated with this PageFormat.
 This method takes into account the
 orientation of the page.

Returns:
the x coordinate of the upper left point of the
 imageable area of the Paper object
 associated with this PageFormat.


"
PageFormat,getImageableY(),double,Returns the y coordinate of the upper left point of the imageable area of the Paper object associated with this PageFormat.,"

getImageableY
public double getImageableY()
Returns the y coordinate of the upper left point of the
 imageable area of the Paper object
 associated with this PageFormat.
 This method takes into account the
 orientation of the page.

Returns:
the y coordinate of the upper left point of the
 imageable area of the Paper object
 associated with this PageFormat.


"
PageFormat,getMatrix(),double[],Returns a transformation matrix that translates user space rendering to the requested orientation of the page.,"

getMatrix
public double[] getMatrix()
Returns a transformation matrix that translates user
 space rendering to the requested orientation
 of the page.  The values are placed into the
 array as
 { m00, m10, m01, m11, m02, m12} in
 the form required by the AffineTransform
 constructor.

Returns:
the matrix used to translate user space rendering
 to the orientation of the page.
See Also:
AffineTransform


"
PageFormat,getOrientation(),int,Returns the orientation of this PageFormat.,"

getOrientation
public int getOrientation()
Returns the orientation of this PageFormat.

Returns:
this PageFormat object's orientation.
See Also:
setOrientation(int)


"
PageFormat,getPaper(),Paper,Returns a copy of the Paper object associated with this PageFormat.,"

getPaper
public Paper getPaper()
Returns a copy of the Paper object associated
 with this PageFormat.  Changes made to the
 Paper object returned from this method do not
 affect the Paper object of this
 PageFormat.  To update the Paper
 object of this PageFormat, create a new
 Paper object and set it into this
 PageFormat by using the setPaper(Paper)
 method.

Returns:
a copy of the Paper object associated
          with this PageFormat.
See Also:
setPaper(java.awt.print.Paper)


"
PageFormat,getWidth(),double,"Returns the width, in 1/72nds of an inch, of the page.","

getWidth
public double getWidth()
Returns the width, in 1/72nds of an inch, of the page.
 This method takes into account the orientation of the
 page when determining the width.

Returns:
the width of the page.


"
PageFormat,setOrientation(int orientation),void,Sets the page orientation.,"

setOrientation
public void setOrientation(int orientation)
                    throws IllegalArgumentException
Sets the page orientation. orientation must be
 one of the constants: PORTRAIT, LANDSCAPE,
 or REVERSE_LANDSCAPE.

Parameters:
orientation - the new orientation for the page
Throws:
IllegalArgumentException - if
          an unknown orientation was requested
See Also:
getOrientation()


"
PageFormat,setPaper(Paper paper),void,Sets the Paper object for this PageFormat.,"

setPaper
public void setPaper(Paper paper)
Sets the Paper object for this
 PageFormat.

Parameters:
paper - the Paper object to which to set
 the Paper object for this PageFormat.
Throws:
NullPointerException - a null paper instance was passed as a parameter.
See Also:
getPaper()


"
Paper,clone(),Object,Creates a copy of this Paper with the same contents as this Paper.,"

clone
public Object clone()
Creates a copy of this Paper with the same contents
 as this Paper.

Overrides:
clone in class Object
Returns:
a copy of this Paper.
See Also:
Cloneable


"
Paper,getHeight(),double,Returns the height of the page in 1/72nds of an inch.,"

getHeight
public double getHeight()
Returns the height of the page in 1/72nds of an inch.

Returns:
the height of the page described by this
          Paper.


"
Paper,getImageableHeight(),double,Returns the height of this Paper object's imageable area.,"

getImageableHeight
public double getImageableHeight()
Returns the height of this Paper object's imageable
 area.

Returns:
the height of the imageable area.


"
Paper,getImageableWidth(),double,Returns the width of this Paper object's imageable area.,"

getImageableWidth
public double getImageableWidth()
Returns the width of this Paper object's imageable
 area.

Returns:
the width of the imageable area.


"
Paper,getImageableX(),double,Returns the x coordinate of the upper-left corner of this Paper object's imageable area.,"

getImageableX
public double getImageableX()
Returns the x coordinate of the upper-left corner of this
 Paper object's imageable area.

Returns:
the x coordinate of the imageable area.


"
Paper,getImageableY(),double,Returns the y coordinate of the upper-left corner of this Paper object's imageable area.,"

getImageableY
public double getImageableY()
Returns the y coordinate of the upper-left corner of this
 Paper object's imageable area.

Returns:
the y coordinate of the imageable area.


"
Paper,getWidth(),double,Returns the width of the page in 1/72nds of an inch.,"

getWidth
public double getWidth()
Returns the width of the page in 1/72nds
 of an inch.

Returns:
the width of the page described by this
 Paper.


"
Paper,"setImageableArea(double x, double y, double width, double height)",void,Sets the imageable area of this Paper.,"

setImageableArea
public void setImageableArea(double x,
                             double y,
                             double width,
                             double height)
Sets the imageable area of this Paper.  The
 imageable area is the area on the page in which printing
 occurs.

Parameters:
x - the X coordinate to which to set the
 upper-left corner of the imageable area of this Paper
y - the Y coordinate to which to set the
 upper-left corner of the imageable area of this Paper
width - the value to which to set the width of the
 imageable area of this Paper
height - the value to which to set the height of the
 imageable area of this Paper


"
Paper,"setSize(double width, double height)",void,"Sets the width and height of this Paper object, which represents the properties of the page onto which printing occurs.","

setSize
public void setSize(double width,
                    double height)
Sets the width and height of this Paper
 object, which represents the properties of the page onto
 which printing occurs.
 The dimensions are supplied in 1/72nds of
 an inch.

Parameters:
width - the value to which to set this Paper
 object's width
height - the value to which to set this Paper
 object's height


"
PrinterJob,cancel(),abstract void,Cancels a print job that is in progress.,"

cancel
public abstract void cancel()
Cancels a print job that is in progress.  If
 print has been called but has not
 returned then this method signals
 that the job should be cancelled at the next
 chance. If there is no print job in progress then
 this call does nothing.

"
PrinterJob,defaultPage(),PageFormat,Creates a new PageFormat instance and sets it to a default size and orientation.,"

defaultPage
public PageFormat defaultPage()
Creates a new PageFormat instance and
 sets it to a default size and orientation.

Returns:
a PageFormat set to a default size and
          orientation.


"
PrinterJob,defaultPage(PageFormat page),abstract PageFormat,Clones the PageFormat argument and alters the clone to describe a default page size and orientation.,"

defaultPage
public abstract PageFormat defaultPage(PageFormat page)
Clones the PageFormat argument and alters the
 clone to describe a default page size and orientation.

Parameters:
page - the PageFormat to be cloned and altered
Returns:
clone of page, altered to describe a default
                      PageFormat.


"
PrinterJob,getCopies(),abstract int,Gets the number of copies to be printed.,"

getCopies
public abstract int getCopies()
Gets the number of copies to be printed.

Returns:
the number of copies to be printed.
See Also:
setCopies(int)


"
PrinterJob,getJobName(),abstract String,Gets the name of the document to be printed.,"

getJobName
public abstract String getJobName()
Gets the name of the document to be printed.

Returns:
the name of the document to be printed.
See Also:
setJobName(java.lang.String)


"
PrinterJob,getPageFormat(PrintRequestAttributeSet attributes),PageFormat,"Calculates a PageFormat with values consistent with those supported by the current PrintService for this job (ie the value returned by getPrintService()) and media, printable area and orientation contained in attributes.","

getPageFormat
public PageFormat getPageFormat(PrintRequestAttributeSet attributes)
Calculates a PageFormat with values consistent with those
 supported by the current PrintService for this job
 (ie the value returned by getPrintService()) and media,
 printable area and orientation contained in attributes.
 
 Calling this method does not update the job.
 It is useful for clients that have a set of attributes obtained from
 printDialog(PrintRequestAttributeSet attributes)
 and need a PageFormat to print a Pageable object.

Parameters:
attributes - a set of printing attributes, for example obtained
 from calling printDialog. If attributes is null a default
 PageFormat is returned.
Returns:
a PageFormat whose settings conform with
 those of the current service and the specified attributes.
Since:
1.6


"
PrinterJob,getPrinterJob(),static PrinterJob,Creates and returns a PrinterJob which is initially associated with the default printer.,"

getPrinterJob
public static PrinterJob getPrinterJob()
Creates and returns a PrinterJob which is initially
 associated with the default printer.
 If no printers are available on the system, a PrinterJob will still
 be returned from this method, but getPrintService()
 will return null, and calling
 print with this PrinterJob might
 generate an exception.  Applications that need to determine if
 there are suitable printers before creating a PrinterJob
 should ensure that the array returned from
 lookupPrintServices is not empty.

Returns:
a new PrinterJob.
Throws:
SecurityException - if a security manager exists and its
          SecurityManager.checkPrintJobAccess()
          method disallows this thread from creating a print job request


"
PrinterJob,getPrintService(),PrintService,Returns the service (printer) for this printer job.,"

getPrintService
public PrintService getPrintService()
Returns the service (printer) for this printer job.
 Implementations of this class which do not support print services
 may return null.  null will also be returned if no printers are
 available.

Returns:
the service for this printer job.
Since:
1.4
See Also:
setPrintService(PrintService), 
getPrinterJob()


"
PrinterJob,getUserName(),abstract String,Gets the name of the printing user.,"

getUserName
public abstract String getUserName()
Gets the name of the printing user.

Returns:
the name of the printing user


"
PrinterJob,isCancelled(),abstract boolean,"Returns true if a print job is in progress, but is going to be cancelled at the next opportunity; otherwise returns false.","

isCancelled
public abstract boolean isCancelled()
Returns true if a print job is
 in progress, but is going to be cancelled
 at the next opportunity; otherwise returns
 false.

Returns:
true if the job in progress
 is going to be cancelled; false otherwise.


"
PrinterJob,lookupPrintServices(),static PrintService[],A convenience method which looks up 2D print services.,"

lookupPrintServices
public static PrintService[] lookupPrintServices()
A convenience method which looks up 2D print services.
 Services returned from this method may be installed on
 PrinterJobs which support print services.
 Calling this method is equivalent to calling
 PrintServiceLookup.lookupPrintServices()
 and specifying a Pageable DocFlavor.

Returns:
a possibly empty array of 2D print services.
Since:
1.4


"
PrinterJob,lookupStreamPrintServices(String mimeType),static StreamPrintServiceFactory[],A convenience method which locates factories for stream print services which can image 2D graphics.,"

lookupStreamPrintServices
public static StreamPrintServiceFactory[] lookupStreamPrintServices(String mimeType)
A convenience method which locates factories for stream print
 services which can image 2D graphics.
 Sample usage :
 
 FileOutputStream outstream;
 StreamPrintService psPrinter;
 String psMimeType = ""application/postscript"";
 PrinterJob pj = PrinterJob.getPrinterJob();

 StreamPrintServiceFactory[] factories =
     PrinterJob.lookupStreamPrintServices(psMimeType);
 if (factories.length > 0) {
     try {
         outstream = new File(""out.ps"");
         psPrinter =  factories[0].getPrintService(outstream);
         // psPrinter can now be set as the service on a PrinterJob
         pj.setPrintService(psPrinter)
     } catch (Exception e) {
         e.printStackTrace();
     }
 }
 
 Services returned from this method may be installed on
 PrinterJob instances which support print services.
 Calling this method is equivalent to calling
 StreamPrintServiceFactory.lookupStreamPrintServiceFactories()
  and specifying a Pageable DocFlavor.

Parameters:
mimeType - the required output format, or null to mean any format.
Returns:
a possibly empty array of 2D stream print service factories.
Since:
1.4


"
PrinterJob,pageDialog(PageFormat page),abstract PageFormat,Displays a dialog that allows modification of a PageFormat instance.,"

pageDialog
public abstract PageFormat pageDialog(PageFormat page)
                               throws HeadlessException
Displays a dialog that allows modification of a
 PageFormat instance.
 The page argument is used to initialize controls
 in the page setup dialog.
 If the user cancels the dialog then this method returns the
 original page object unmodified.
 If the user okays the dialog then this method returns a new
 PageFormat object with the indicated changes.
 In either case, the original page object is
 not modified.

Parameters:
page - the default PageFormat presented to the
                  user for modification
Returns:
the original page object if the dialog
            is cancelled; a new PageFormat object
            containing the format indicated by the user if the
            dialog is acknowledged.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
Since:
1.2
See Also:
GraphicsEnvironment.isHeadless()


"
PrinterJob,pageDialog(PrintRequestAttributeSet attributes),PageFormat,A convenience method which displays a cross-platform page setup dialog.,"

pageDialog
public PageFormat pageDialog(PrintRequestAttributeSet attributes)
                      throws HeadlessException
A convenience method which displays a cross-platform page setup dialog.
 The choices available will reflect the print service currently
 set on this PrinterJob.
 
 The attributes parameter on input will reflect the client's
 required initial selections in the user dialog. Attributes which are
 not specified display using the default for the service. On return it
 will reflect the user's choices. Selections may be updated by
 the implementation to be consistent with the supported values
 for the currently selected print service.
 
 The return value will be a PageFormat equivalent to the
 selections in the PrintRequestAttributeSet.
 If the user cancels the dialog, the attributes will not reflect
 any changes made by the user, and the return value will be null.

Parameters:
attributes - on input is application supplied attributes,
 on output the contents are updated to reflect user choices.
 This parameter may not be null.
Returns:
a page format if the user does not cancel the dialog;
 null otherwise.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
NullPointerException - if attributes parameter
 is null.
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless()


"
PrinterJob,print(),abstract void,Prints a set of pages.,"

print
public abstract void print()
                    throws PrinterException
Prints a set of pages.

Throws:
PrinterException - an error in the print system
            caused the job to be aborted.
See Also:
Book, 
Pageable, 
Printable


"
PrinterJob,print(PrintRequestAttributeSet attributes),void,Prints a set of pages using the settings in the attribute set.,"

print
public void print(PrintRequestAttributeSet attributes)
           throws PrinterException
Prints a set of pages using the settings in the attribute
 set. The default implementation ignores the attribute set.
 
 Note that some attributes may be set directly on the PrinterJob
 by equivalent method calls, (for example), copies:
 setcopies(int), job name: setJobName(String)
 and specifying media size and orientation though the
 PageFormat object.
 
 If a supported attribute-value is specified in this attribute set,
 it will take precedence over the API settings for this print()
 operation only.
 The following behaviour is specified for PageFormat:
 If a client uses the Printable interface, then the
 attributes parameter to this method is examined
 for attributes which specify media (by size), orientation, and
 imageable area, and those are used to construct a new PageFormat
 which is passed to the Printable object's print() method.
 See Printable for an explanation of the required
 behaviour of a Printable to ensure optimal printing via PrinterJob.
 For clients of the Pageable interface, the PageFormat will always
 be as supplied by that interface, on a per page basis.
 
 These behaviours allow an application to directly pass the
 user settings returned from
 printDialog(PrintRequestAttributeSet attributes to
 this print() method.
 

Parameters:
attributes - a set of attributes for the job
Throws:
PrinterException - an error in the print system
            caused the job to be aborted.
Since:
1.4
See Also:
Book, 
Pageable, 
Printable


"
PrinterJob,printDialog(),abstract boolean,Presents a dialog to the user for changing the properties of the print job.,"

printDialog
public abstract boolean printDialog()
                             throws HeadlessException
Presents a dialog to the user for changing the properties of
 the print job.
 This method will display a native dialog if a native print
 service is selected, and user choice of printers will be restricted
 to these native print services.
 To present the cross platform print dialog for all services,
 including native ones instead use
 printDialog(PrintRequestAttributeSet).
 
 PrinterJob implementations which can use PrintService's will update
 the PrintService for this PrinterJob to reflect the new service
 selected by the user.

Returns:
true if the user does not cancel the dialog;
 false otherwise.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
See Also:
GraphicsEnvironment.isHeadless()


"
PrinterJob,printDialog(PrintRequestAttributeSet attributes),boolean,A convenience method which displays a cross-platform print dialog for all services which are capable of printing 2D graphics using the Pageable interface.,"

printDialog
public boolean printDialog(PrintRequestAttributeSet attributes)
                    throws HeadlessException
A convenience method which displays a cross-platform print dialog
 for all services which are capable of printing 2D graphics using the
 Pageable interface. The selected printer when the
 dialog is initially displayed will reflect the print service currently
 attached to this print job.
 If the user changes the print service, the PrinterJob will be
 updated to reflect this, unless the user cancels the dialog.
 As well as allowing the user to select the destination printer,
 the user can also select values of various print request attributes.
 
 The attributes parameter on input will reflect the applications
 required initial selections in the user dialog. Attributes not
 specified display using the default for the service. On return it
 will reflect the user's choices. Selections may be updated by
 the implementation to be consistent with the supported values
 for the currently selected print service.
 
 As the user scrolls to a new print service selection, the values
 copied are based on the settings for the previous service, together
 with any user changes. The values are not based on the original
 settings supplied by the client.
 
 With the exception of selected printer, the PrinterJob state is
 not updated to reflect the user's changes.
 For the selections to affect a printer job, the attributes must
 be specified in the call to the
 print(PrintRequestAttributeSet) method. If using
 the Pageable interface, clients which intend to use media selected
 by the user must create a PageFormat derived from the user's
 selections.
 If the user cancels the dialog, the attributes will not reflect
 any changes made by the user.

Parameters:
attributes - on input is application supplied attributes,
 on output the contents are updated to reflect user choices.
 This parameter may not be null.
Returns:
true if the user does not cancel the dialog;
 false otherwise.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
NullPointerException - if attributes parameter
 is null.
Since:
1.4
See Also:
GraphicsEnvironment.isHeadless()


"
PrinterJob,setCopies(int copies),abstract void,Sets the number of copies to be printed.,"

setCopies
public abstract void setCopies(int copies)
Sets the number of copies to be printed.

Parameters:
copies - the number of copies to be printed
See Also:
getCopies()


"
PrinterJob,setJobName(String jobName),abstract void,Sets the name of the document to be printed.,"

setJobName
public abstract void setJobName(String jobName)
Sets the name of the document to be printed.
 The document name can not be null.

Parameters:
jobName - the name of the document to be printed
See Also:
getJobName()


"
PrinterJob,setPageable(Pageable document),abstract void,"Queries document for the number of pages and the PageFormat and Printable for each page held in the Pageable instance, document.","

setPageable
public abstract void setPageable(Pageable document)
                          throws NullPointerException
Queries document for the number of pages and
 the PageFormat and Printable for each
 page held in the Pageable instance,
 document.

Parameters:
document - the pages to be printed. It can not be
 null.
Throws:
NullPointerException - the Pageable passed in
 was null.
See Also:
PageFormat, 
Printable


"
PrinterJob,setPrintable(Printable painter),abstract void,Calls painter to render the pages.,"

setPrintable
public abstract void setPrintable(Printable painter)
Calls painter to render the pages.  The pages in the
 document to be printed by this
 PrinterJob are rendered by the Printable
 object, painter.  The PageFormat for each page
 is the default page format.

Parameters:
painter - the Printable that renders each page of
 the document.


"
PrinterJob,"setPrintable(Printable painter, PageFormat format)",abstract void,Calls painter to render the pages in the specified format.,"

setPrintable
public abstract void setPrintable(Printable painter,
                                  PageFormat format)
Calls painter to render the pages in the specified
 format.  The pages in the document to be printed by
 this PrinterJob are rendered by the
 Printable object, painter. The
 PageFormat of each page is format.

Parameters:
painter - the Printable called to render
          each page of the document
format - the size and orientation of each page to
                   be printed


"
PrinterJob,setPrintService(PrintService service),void,Associate this PrinterJob with a new PrintService.,"

setPrintService
public void setPrintService(PrintService service)
                     throws PrinterException
Associate this PrinterJob with a new PrintService.
 This method is overridden by subclasses which support
 specifying a Print Service.

 Throws PrinterException if the specified service
 cannot support the Pageable and
 Printable interfaces necessary to support 2D printing.

Parameters:
service - a print service that supports 2D printing
Throws:
PrinterException - if the specified service does not support
 2D printing, or this PrinterJob class does not support
 setting a 2D print service, or the specified service is
 otherwise not a valid print service.
Since:
1.4
See Also:
getPrintService()


"
PrinterJob,validatePage(PageFormat page),abstract PageFormat,Returns the clone of page with its settings adjusted to be compatible with the current printer of this PrinterJob.,"

validatePage
public abstract PageFormat validatePage(PageFormat page)
Returns the clone of page with its settings
 adjusted to be compatible with the current printer of this
 PrinterJob.  For example, the returned
 PageFormat could have its imageable area
 adjusted to fit within the physical area of the paper that
 is used by the current printer.

Parameters:
page - the PageFormat that is cloned and
          whose settings are changed to be compatible with
          the current printer
Returns:
a PageFormat that is cloned from
          page and whose settings are changed
          to conform with this PrinterJob.


"
