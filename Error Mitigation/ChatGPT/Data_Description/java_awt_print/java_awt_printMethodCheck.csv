Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Book,1,"void append(PageFormat format, Printable painter)",False,,NULL
0,Book,2,int getNumberOfPages(),True,,"

getNumberOfPages
public int getNumberOfPages()
Returns the number of pages in this Book.

Specified by:
getNumberOfPages in interface Pageable
Returns:
the number of pages this Book contains.


"
0,Book,3,PageFormat getPageFormat(int pageIndex),True,,"

getPageFormat
public PageFormat getPageFormat(int pageIndex)
                         throws IndexOutOfBoundsException
Returns the PageFormat of the page specified by
 pageIndex.

Specified by:
getPageFormat in interface Pageable
Parameters:
pageIndex - the zero based index of the page whose
            PageFormat is being requested
Returns:
the PageFormat describing the size and
          orientation of the page.
Throws:
IndexOutOfBoundsException - if the Pageable
          does not contain the requested page


"
0,Book,4,Printable getPrintable(int pageIndex),True,,"

getPrintable
public Printable getPrintable(int pageIndex)
                       throws IndexOutOfBoundsException
Returns the Printable instance responsible for rendering
 the page specified by pageIndex.

Specified by:
getPrintable in interface Pageable
Parameters:
pageIndex - the zero based index of the page whose
                  Printable is being requested
Returns:
the Printable that renders the page.
Throws:
IndexOutOfBoundsException - if the Pageable
            does not contain the requested page


"
0,Book,5,"void setPage(int pageIndex, Printable painter, PageFormat format)",True,,"

setPage
public void setPage(int pageIndex,
                    Printable painter,
                    PageFormat page)
             throws IndexOutOfBoundsException
Sets the PageFormat and the Painter for a
 specified page number.

Parameters:
pageIndex - the zero based index of the page whose
                  painter and format is altered
painter - the Printable instance that
                  renders the page
page - the size and orientation of the page
Throws:
IndexOutOfBoundsException - if the specified
          page is not already in this Book
NullPointerException - if the painter or
          page argument is null


"
1,PageFormat,1,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width, in 1/72nds of an inch, of the page.
 This method takes into account the orientation of the
 page when determining the width.

Returns:
the width of the page.


"
1,PageFormat,2,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height, in 1/72nds of an inch, of the page.
 This method takes into account the orientation of the
 page when determining the height.

Returns:
the height of the page.


"
1,PageFormat,3,int getOrientation(),True,,"

getOrientation
public int getOrientation()
Returns the orientation of this PageFormat.

Returns:
this PageFormat object's orientation.
See Also:
setOrientation(int)


"
1,PageFormat,4,void setOrientation(int orientation),True,,"

setOrientation
public void setOrientation(int orientation)
                    throws IllegalArgumentException
Sets the page orientation. orientation must be
 one of the constants: PORTRAIT, LANDSCAPE,
 or REVERSE_LANDSCAPE.

Parameters:
orientation - the new orientation for the page
Throws:
IllegalArgumentException - if
          an unknown orientation was requested
See Also:
getOrientation()


"
1,PageFormat,5,Paper getPaper(),True,,"

getPaper
public Paper getPaper()
Returns a copy of the Paper object associated
 with this PageFormat.  Changes made to the
 Paper object returned from this method do not
 affect the Paper object of this
 PageFormat.  To update the Paper
 object of this PageFormat, create a new
 Paper object and set it into this
 PageFormat by using the setPaper(Paper)
 method.

Returns:
a copy of the Paper object associated
          with this PageFormat.
See Also:
setPaper(java.awt.print.Paper)


"
2,Paper,1,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the page in 1/72nds
 of an inch.

Returns:
the width of the page described by this
 Paper.


"
2,Paper,2,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the page in 1/72nds of an inch.

Returns:
the height of the page described by this
          Paper.


"
2,Paper,3,"void setSize(double width, double height)",True,,"

setSize
public void setSize(double width,
                    double height)
Sets the width and height of this Paper
 object, which represents the properties of the page onto
 which printing occurs.
 The dimensions are supplied in 1/72nds of
 an inch.

Parameters:
width - the value to which to set this Paper
 object's width
height - the value to which to set this Paper
 object's height


"
2,Paper,4,"void setImageableArea(double x, double y, double width, double height)",True,,"

setImageableArea
public void setImageableArea(double x,
                             double y,
                             double width,
                             double height)
Sets the imageable area of this Paper.  The
 imageable area is the area on the page in which printing
 occurs.

Parameters:
x - the X coordinate to which to set the
 upper-left corner of the imageable area of this Paper
y - the Y coordinate to which to set the
 upper-left corner of the imageable area of this Paper
width - the value to which to set the width of the
 imageable area of this Paper
height - the value to which to set the height of the
 imageable area of this Paper


"
2,Paper,5,void setOrientation(int orientation),False,,NULL
3,PrinterJob,1,void setPrintable(Printable painter),True,,"

setPrintable
public abstract void setPrintable(Printable painter)
Calls painter to render the pages.  The pages in the
 document to be printed by this
 PrinterJob are rendered by the Printable
 object, painter.  The PageFormat for each page
 is the default page format.

Parameters:
painter - the Printable that renders each page of
 the document.


"
3,PrinterJob,2,void setPrintService(PrintService service),True,,"

setPrintService
public void setPrintService(PrintService service)
                     throws PrinterException
Associate this PrinterJob with a new PrintService.
 This method is overridden by subclasses which support
 specifying a Print Service.

 Throws PrinterException if the specified service
 cannot support the Pageable and
 Printable interfaces necessary to support 2D printing.

Parameters:
service - a print service that supports 2D printing
Throws:
PrinterException - if the specified service does not support
 2D printing, or this PrinterJob class does not support
 setting a 2D print service, or the specified service is
 otherwise not a valid print service.
Since:
1.4
See Also:
getPrintService()


"
3,PrinterJob,3,void setPageable(Pageable document),True,,"

setPageable
public abstract void setPageable(Pageable document)
                          throws NullPointerException
Queries document for the number of pages and
 the PageFormat and Printable for each
 page held in the Pageable instance,
 document.

Parameters:
document - the pages to be printed. It can not be
 null.
Throws:
NullPointerException - the Pageable passed in
 was null.
See Also:
PageFormat, 
Printable


"
3,PrinterJob,4,void print(),True,,"

print
public abstract void print()
                    throws PrinterException
Prints a set of pages.

Throws:
PrinterException - an error in the print system
            caused the job to be aborted.
See Also:
Book, 
Pageable, 
Printable


"
3,PrinterJob,5,PageFormat pageDialog(PageFormat page),True,,"

pageDialog
public abstract PageFormat pageDialog(PageFormat page)
                               throws HeadlessException
Displays a dialog that allows modification of a
 PageFormat instance.
 The page argument is used to initialize controls
 in the page setup dialog.
 If the user cancels the dialog then this method returns the
 original page object unmodified.
 If the user okays the dialog then this method returns a new
 PageFormat object with the indicated changes.
 In either case, the original page object is
 not modified.

Parameters:
page - the default PageFormat presented to the
                  user for modification
Returns:
the original page object if the dialog
            is cancelled; a new PageFormat object
            containing the format indicated by the user if the
            dialog is acknowledged.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true.
Since:
1.2
See Also:
GraphicsEnvironment.isHeadless()


"
