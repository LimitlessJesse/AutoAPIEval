Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,X500Principal,1,String getName(),True,,"

getName
public String getName()
Returns a string representation of the X.500 distinguished name using
 the format defined in RFC 2253.

 This method is equivalent to calling
 getName(X500Principal.RFC2253).

Specified by:
getName in interface Principal
Returns:
the distinguished name of this X500Principal


"
0,X500Principal,2,byte[] getEncoded(),True,,"

getEncoded
public byte[] getEncoded()
Returns the distinguished name in ASN.1 DER encoded form. The ASN.1
 notation for this structure is supplied in the documentation for
 X500Principal(byte[] name).

 Note that the byte array returned is cloned to protect against
 subsequent modifications.

Returns:
a byte array containing the distinguished name in ASN.1 DER
 encoded form


"
0,X500Principal,3,String getName(String format),True,,"

getName
public String getName(String format)
Returns a string representation of the X.500 distinguished name
 using the specified format. Valid values for the format are
 ""RFC1779"", ""RFC2253"", and ""CANONICAL"" (case insensitive).

  If ""RFC1779"" is specified as the format,
 this method emits the attribute type keywords defined in
 RFC 1779 (CN, L, ST, O, OU, C, STREET).
 Any other attribute type is emitted as an OID.

  If ""RFC2253"" is specified as the format,
 this method emits the attribute type keywords defined in
 RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).
 Any other attribute type is emitted as an OID.
 Under a strict reading, RFC 2253 only specifies a UTF-8 string
 representation. The String returned by this method is the
 Unicode string achieved by decoding this UTF-8 representation.

  If ""CANONICAL"" is specified as the format,
 this method returns an RFC 2253 conformant string representation
 with the following additional canonicalizations:

 
 Leading zeros are removed from attribute types
          that are encoded as dotted decimal OIDs
  DirectoryString attribute values of type
          PrintableString and UTF8String are not
          output in hexadecimal format
  DirectoryString attribute values of types
          other than PrintableString and UTF8String
          are output in hexadecimal format
  Leading and trailing white space characters
          are removed from non-hexadecimal attribute values
          (unless the value consists entirely of white space characters)
  Internal substrings of one or more white space characters are
          converted to a single space in non-hexadecimal
          attribute values
  Relative Distinguished Names containing more than one
          Attribute Value Assertion (AVA) are output in the
          following order: an alphabetical ordering of AVAs
          containing standard keywords, followed by a numeric
          ordering of AVAs containing OID keywords.
  The only characters in attribute values that are escaped are
          those which section 2.4 of RFC 2253 states must be escaped
          (they are escaped using a preceding backslash character)
  The entire name is converted to upper case
          using String.toUpperCase(Locale.US)
 The entire name is converted to lower case
          using String.toLowerCase(Locale.US)
 The name is finally normalized using normalization form KD,
          as described in the Unicode Standard and UAX #15
 
 Additional standard formats may be introduced in the future.

Parameters:
format - the format to use
Returns:
a string representation of this X500Principal
          using the specified format
Throws:
IllegalArgumentException - if the specified format is invalid
          or null


"
0,X500Principal,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object o)
Compares the specified Object with this
 X500Principal for equality.

  Specifically, this method returns true if
 the Object o is an X500Principal
 and if the respective canonical string representations
 (obtained via the getName(X500Principal.CANONICAL) method)
 of this object and o are equal.

  This implementation is compliant with the requirements of RFC 3280.

Specified by:
equals in interface Principal
Overrides:
equals in class Object
Parameters:
o - Object to be compared for equality with this
          X500Principal
Returns:
true if the specified Object is equal
          to this X500Principal, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
0,X500Principal,5,int hashCode(),True,,"

hashCode
public int hashCode()
Return a hash code for this X500Principal.

  The hash code is calculated via:
 getName(X500Principal.CANONICAL).hashCode()

Specified by:
hashCode in interface Principal
Overrides:
hashCode in class Object
Returns:
a hash code for this X500Principal
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
1,X500PrivateCredential,1,X500PrivateCredential getX500PrivateCredential(),False,,NULL
1,X500PrivateCredential,2,X500Principal getCertificate(),False,,NULL
1,X500PrivateCredential,3,PrivateKey getPrivateKey(),True,,"

getPrivateKey
public PrivateKey getPrivateKey()
Returns the PrivateKey.
 

Returns:
the PrivateKey


"
1,X500PrivateCredential,4,boolean equals(Object obj),False,,NULL
1,X500PrivateCredential,5,int hashCode(),False,,NULL
