ClassName,Method,Return Type,Description,Full Description
Attributes2Impl,"addAttribute(String uri, String localName, String qName, String type, String value)",void,"Add an attribute to the end of the list, setting its ""specified"" flag to true.","

addAttribute
public void addAttribute(String uri,
                         String localName,
                         String qName,
                         String type,
                         String value)
Add an attribute to the end of the list, setting its
 ""specified"" flag to true.  To set that flag's value
 to false, use setSpecified(int, boolean).

 Unless the attribute type is CDATA, this attribute
 is marked as being declared in the DTD.  To set that flag's value
 to true for CDATA attributes, use setDeclared(int, boolean).

Overrides:
addAttribute in class AttributesImpl
Parameters:
uri - The Namespace URI, or the empty string if
        none is available or Namespace processing is not
        being performed.
localName - The local name, or the empty string if
        Namespace processing is not being performed.
qName - The qualified (prefixed) name, or the empty string
        if qualified names are not available.
type - The attribute type as a string.
value - The attribute value.
See Also:
AttributesImpl.addAttribute(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)


"
Attributes2Impl,isDeclared(int index),boolean,"Returns the current value of the attribute's ""declared"" flag.","

isDeclared
public boolean isDeclared(int index)
Returns the current value of the attribute's ""declared"" flag.

Specified by:
isDeclared in interface Attributes2
Parameters:
index - The attribute index (zero-based).
Returns:
true if the attribute was declared in the DTD,
          false otherwise.


"
Attributes2Impl,isDeclared(String qName),boolean,"Returns the current value of the attribute's ""declared"" flag.","

isDeclared
public boolean isDeclared(String qName)
Returns the current value of the attribute's ""declared"" flag.

Specified by:
isDeclared in interface Attributes2
Parameters:
qName - The XML qualified (prefixed) name.
Returns:
true if the attribute was declared in the DTD,
          false otherwise.


"
Attributes2Impl,"isDeclared(String uri, String localName)",boolean,"Returns the current value of the attribute's ""declared"" flag.","

isDeclared
public boolean isDeclared(String uri,
                          String localName)
Returns the current value of the attribute's ""declared"" flag.

Specified by:
isDeclared in interface Attributes2
Parameters:
uri - The Namespace URI, or the empty string if
        the name has no Namespace URI.
localName - The attribute's local name.
Returns:
true if the attribute was declared in the DTD,
          false otherwise.


"
Attributes2Impl,isSpecified(int index),boolean,"Returns the current value of an attribute's ""specified"" flag.","

isSpecified
public boolean isSpecified(int index)
Returns the current value of an attribute's ""specified"" flag.

Specified by:
isSpecified in interface Attributes2
Parameters:
index - The attribute index (zero-based).
Returns:
current flag value
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not identify an attribute.


"
Attributes2Impl,isSpecified(String qName),boolean,"Returns the current value of an attribute's ""specified"" flag.","

isSpecified
public boolean isSpecified(String qName)
Returns the current value of an attribute's ""specified"" flag.

Specified by:
isSpecified in interface Attributes2
Parameters:
qName - The XML qualified (prefixed) name.
Returns:
current flag value
Throws:
IllegalArgumentException - When the
            supplied name does not identify an attribute.


"
Attributes2Impl,"isSpecified(String uri, String localName)",boolean,"Returns the current value of an attribute's ""specified"" flag.","

isSpecified
public boolean isSpecified(String uri,
                           String localName)
Returns the current value of an attribute's ""specified"" flag.

Specified by:
isSpecified in interface Attributes2
Parameters:
uri - The Namespace URI, or the empty string if
        the name has no Namespace URI.
localName - The attribute's local name.
Returns:
current flag value
Throws:
IllegalArgumentException - When the
            supplied names do not identify an attribute.


"
Attributes2Impl,removeAttribute(int index),void,Remove an attribute from the list.,"

removeAttribute
public void removeAttribute(int index)
Description copied from class: AttributesImpl
Remove an attribute from the list.

Overrides:
removeAttribute in class AttributesImpl
Parameters:
index - The index of the attribute (zero-based).


"
Attributes2Impl,setAttributes(Attributes atts),void,Copy an entire Attributes object.,"

setAttributes
public void setAttributes(Attributes atts)
Copy an entire Attributes object.  The ""specified"" flags are
 assigned as true, and ""declared"" flags as false (except when
 an attribute's type is not CDATA),
 unless the object is an Attributes2 object.
 In that case those flag values are all copied.

Overrides:
setAttributes in class AttributesImpl
Parameters:
atts - The attributes to copy.
See Also:
AttributesImpl.setAttributes(org.xml.sax.Attributes)


"
Attributes2Impl,"setDeclared(int index, boolean value)",void,"Assign a value to the ""declared"" flag of a specific attribute.","

setDeclared
public void setDeclared(int index,
                        boolean value)
Assign a value to the ""declared"" flag of a specific attribute.
 This is normally needed only for attributes of type CDATA,
 including attributes whose type is changed to or from CDATA.

Parameters:
index - The index of the attribute (zero-based).
value - The desired flag value.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not identify an attribute.
See Also:
AttributesImpl.setType(int, java.lang.String)


"
Attributes2Impl,"setSpecified(int index, boolean value)",void,"Assign a value to the ""specified"" flag of a specific attribute.","

setSpecified
public void setSpecified(int index,
                         boolean value)
Assign a value to the ""specified"" flag of a specific attribute.
 This is the only way this flag can be cleared, except clearing
 by initialization with the copy constructor.

Parameters:
index - The index of the attribute (zero-based).
value - The desired flag value.
Throws:
ArrayIndexOutOfBoundsException - When the
            supplied index does not identify an attribute.


"
DefaultHandler2,"attributeDecl(String eName, String aName, String type, String mode, String value)",void,Report an attribute type declaration.,"

attributeDecl
public void attributeDecl(String eName,
                          String aName,
                          String type,
                          String mode,
                          String value)
                   throws SAXException
Description copied from interface: DeclHandler
Report an attribute type declaration.

 Only the effective (first) declaration for an attribute will
 be reported.  The type will be one of the strings ""CDATA"",
 ""ID"", ""IDREF"", ""IDREFS"", ""NMTOKEN"", ""NMTOKENS"", ""ENTITY"",
 ""ENTITIES"", a parenthesized token group with
 the separator ""|"" and all whitespace removed, or the word
 ""NOTATION"" followed by a space followed by a parenthesized
 token group with all whitespace removed.
The value will be the value as reported to applications,
 appropriately normalized and with entity and character
 references expanded.  

Specified by:
attributeDecl in interface DeclHandler
Parameters:
eName - The name of the associated element.
aName - The name of the attribute.
type - A string representing the attribute type.
mode - A string representing the attribute defaulting mode
        (""#IMPLIED"", ""#REQUIRED"", or ""#FIXED"") or null if
        none of these applies.
value - A string representing the attribute's default value,
        or null if there is none.
Throws:
SAXException - The application may raise an exception.


"
DefaultHandler2,"comment(char[] ch, int start, int length)",void,Report an XML comment anywhere in the document.,"

comment
public void comment(char[] ch,
                    int start,
                    int length)
             throws SAXException
Description copied from interface: LexicalHandler
Report an XML comment anywhere in the document.

 This callback will be used for comments inside or outside the
 document element, including comments in the external DTD
 subset (if read).  Comments in the DTD must be properly
 nested inside start/endDTD and start/endEntity events (if
 used).

Specified by:
comment in interface LexicalHandler
Parameters:
ch - An array holding the characters in the comment.
start - The starting position in the array.
length - The number of characters to use from the array.
Throws:
SAXException - The application may raise an exception.


"
DefaultHandler2,"elementDecl(String name, String model)",void,Report an element type declaration.,"

elementDecl
public void elementDecl(String name,
                        String model)
                 throws SAXException
Description copied from interface: DeclHandler
Report an element type declaration.

 The content model will consist of the string ""EMPTY"", the
 string ""ANY"", or a parenthesised group, optionally followed
 by an occurrence indicator.  The model will be normalized so
 that all parameter entities are fully resolved and all whitespace
 is removed,and will include the enclosing parentheses.  Other
 normalization (such as removing redundant parentheses or
 simplifying occurrence indicators) is at the discretion of the
 parser.

Specified by:
elementDecl in interface DeclHandler
Parameters:
name - The element type name.
model - The content model as a normalized string.
Throws:
SAXException - The application may raise an exception.


"
DefaultHandler2,endCDATA(),void,Report the end of a CDATA section.,"

endCDATA
public void endCDATA()
              throws SAXException
Description copied from interface: LexicalHandler
Report the end of a CDATA section.

Specified by:
endCDATA in interface LexicalHandler
Throws:
SAXException - The application may raise an exception.
See Also:
LexicalHandler.startCDATA()


"
DefaultHandler2,endDTD(),void,Report the end of DTD declarations.,"

endDTD
public void endDTD()
            throws SAXException
Description copied from interface: LexicalHandler
Report the end of DTD declarations.

 This method is intended to report the end of the
 DOCTYPE declaration; if the document has no DOCTYPE declaration,
 this method will not be invoked.

Specified by:
endDTD in interface LexicalHandler
Throws:
SAXException - The application may raise an exception.
See Also:
LexicalHandler.startDTD(java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler2,endEntity(String name),void,Report the end of an entity.,"

endEntity
public void endEntity(String name)
               throws SAXException
Description copied from interface: LexicalHandler
Report the end of an entity.

Specified by:
endEntity in interface LexicalHandler
Parameters:
name - The name of the entity that is ending.
Throws:
SAXException - The application may raise an exception.
See Also:
LexicalHandler.startEntity(java.lang.String)


"
DefaultHandler2,"externalEntityDecl(String name, String publicId, String systemId)",void,Report a parsed external entity declaration.,"

externalEntityDecl
public void externalEntityDecl(String name,
                               String publicId,
                               String systemId)
                        throws SAXException
Description copied from interface: DeclHandler
Report a parsed external entity declaration.

 Only the effective (first) declaration for each entity
 will be reported.
If the system identifier is a URL, the parser must resolve it
 fully before passing it to the application.

Specified by:
externalEntityDecl in interface DeclHandler
Parameters:
name - The name of the entity.  If it is a parameter
        entity, the name will begin with '%'.
publicId - The entity's public identifier, or null if none
        was given.
systemId - The entity's system identifier.
Throws:
SAXException - The application may raise an exception.
See Also:
DeclHandler.internalEntityDecl(java.lang.String, java.lang.String), 
DTDHandler.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler2,"getExternalSubset(String name, String baseURI)",InputSource,"Tells the parser that if no external subset has been declared in the document text, none should be used.","

getExternalSubset
public InputSource getExternalSubset(String name,
                                     String baseURI)
                              throws SAXException,
                                     IOException
Tells the parser that if no external subset has been declared
 in the document text, none should be used.

Specified by:
getExternalSubset in interface EntityResolver2
Parameters:
name - Identifies the document root element.  This name comes
  from a DOCTYPE declaration (where available) or from the actual
  root element.
baseURI - The document's base URI, serving as an additional
  hint for selecting the external subset.  This is always an absolute
  URI, unless it is null because the XMLReader was given an InputSource
  without one.
Returns:
An InputSource object describing the new external subset
  to be used by the parser, or null to indicate that no external
  subset is provided.
Throws:
SAXException - Any SAX exception, possibly wrapping
  another exception.
IOException - Probably indicating a failure to create
  a new InputStream or Reader, or an illegal URL.


"
DefaultHandler2,"internalEntityDecl(String name, String value)",void,Report an internal entity declaration.,"

internalEntityDecl
public void internalEntityDecl(String name,
                               String value)
                        throws SAXException
Description copied from interface: DeclHandler
Report an internal entity declaration.

 Only the effective (first) declaration for each entity
 will be reported.  All parameter entities in the value
 will be expanded, but general entities will not.

Specified by:
internalEntityDecl in interface DeclHandler
Parameters:
name - The name of the entity.  If it is a parameter
        entity, the name will begin with '%'.
value - The replacement text of the entity.
Throws:
SAXException - The application may raise an exception.
See Also:
DeclHandler.externalEntityDecl(java.lang.String, java.lang.String, java.lang.String), 
DTDHandler.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)


"
DefaultHandler2,"resolveEntity(String publicId, String systemId)",InputSource,Invokes EntityResolver2.resolveEntity() with null entity name and base URI.,"

resolveEntity
public InputSource resolveEntity(String publicId,
                                 String systemId)
                          throws SAXException,
                                 IOException
Invokes
 EntityResolver2.resolveEntity()
 with null entity name and base URI.
 You only need to override that method to use this class.

Specified by:
resolveEntity in interface EntityResolver
Overrides:
resolveEntity in class DefaultHandler
Parameters:
publicId - The public identifier, or null if none is
                 available.
systemId - The system identifier provided in the XML
                 document.
Returns:
The new input source, or null to require the
         default behaviour.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
IOException - A Java-specific IO exception,
            possibly the result of creating a new InputStream
            or Reader for the InputSource.
See Also:
EntityResolver.resolveEntity(java.lang.String, java.lang.String)


"
DefaultHandler2,"resolveEntity(String name, String publicId, String baseURI, String systemId)",InputSource,Tells the parser to resolve the systemId against the baseURI and read the entity text from that resulting absolute URI.,"

resolveEntity
public InputSource resolveEntity(String name,
                                 String publicId,
                                 String baseURI,
                                 String systemId)
                          throws SAXException,
                                 IOException
Tells the parser to resolve the systemId against the baseURI
 and read the entity text from that resulting absolute URI.
 Note that because the older
 DefaultHandler.resolveEntity(),
 method is overridden to call this one, this method may sometimes
 be invoked with null name and baseURI, and
 with the systemId already absolutized.

Specified by:
resolveEntity in interface EntityResolver2
Parameters:
name - Identifies the external entity being resolved.
  Either ""[dtd]"" for the external subset, or a name starting
  with ""%"" to indicate a parameter entity, or else the name of
  a general entity.  This is never null when invoked by a SAX2
  parser.
publicId - The public identifier of the external entity being
  referenced (normalized as required by the XML specification), or
  null if none was supplied.
baseURI - The URI with respect to which relative systemIDs
  are interpreted.  This is always an absolute URI, unless it is
  null (likely because the XMLReader was given an InputSource without
  one).  This URI is defined by the XML specification to be the one
  associated with the ""<"" starting the relevant declaration.
systemId - The system identifier of the external entity
  being referenced; either a relative or absolute URI.
  This is never null when invoked by a SAX2 parser; only declared
  entities, and any external subset, are resolved by such parsers.
Returns:
An InputSource object describing the new input source to
  be used by the parser.  Returning null directs the parser to
  resolve the system ID against the base URI and open a connection
  to resulting URI.
Throws:
SAXException - Any SAX exception, possibly wrapping
  another exception.
IOException - Probably indicating a failure to create
  a new InputStream or Reader, or an illegal URL.


"
DefaultHandler2,startCDATA(),void,Report the start of a CDATA section.,"

startCDATA
public void startCDATA()
                throws SAXException
Description copied from interface: LexicalHandler
Report the start of a CDATA section.

 The contents of the CDATA section will be reported through
 the regular characters event; this event is intended only to report
 the boundary.

Specified by:
startCDATA in interface LexicalHandler
Throws:
SAXException - The application may raise an exception.
See Also:
LexicalHandler.endCDATA()


"
DefaultHandler2,"startDTD(String name, String publicId, String systemId)",void,"Report the start of DTD declarations, if any.","

startDTD
public void startDTD(String name,
                     String publicId,
                     String systemId)
              throws SAXException
Description copied from interface: LexicalHandler
Report the start of DTD declarations, if any.

 This method is intended to report the beginning of the
 DOCTYPE declaration; if the document has no DOCTYPE declaration,
 this method will not be invoked.
All declarations reported through
 DTDHandler or
 DeclHandler events must appear
 between the startDTD and endDTD events.
 Declarations are assumed to belong to the internal DTD subset
 unless they appear between startEntity
 and endEntity events.  Comments and
 processing instructions from the DTD should also be reported
 between the startDTD and endDTD events, in their original
 order of (logical) occurrence; they are not required to
 appear in their correct locations relative to DTDHandler
 or DeclHandler events, however.
Note that the start/endDTD events will appear within
 the start/endDocument events from ContentHandler and
 before the first
 startElement
 event.

Specified by:
startDTD in interface LexicalHandler
Parameters:
name - The document type name.
publicId - The declared public identifier for the
        external DTD subset, or null if none was declared.
systemId - The declared system identifier for the
        external DTD subset, or null if none was declared.
        (Note that this is not resolved against the document
        base URI.)
Throws:
SAXException - The application may raise an
            exception.
See Also:
LexicalHandler.endDTD(), 
LexicalHandler.startEntity(java.lang.String)


"
DefaultHandler2,startEntity(String name),void,Report the beginning of some internal and external XML entities.,"

startEntity
public void startEntity(String name)
                 throws SAXException
Description copied from interface: LexicalHandler
Report the beginning of some internal and external XML entities.

 The reporting of parameter entities (including
 the external DTD subset) is optional, and SAX2 drivers that
 report LexicalHandler events may not implement it; you can use the
 http://xml.org/sax/features/lexical-handler/parameter-entities
 feature to query or control the reporting of parameter entities.
General entities are reported with their regular names,
 parameter entities have '%' prepended to their names, and
 the external DTD subset has the pseudo-entity name ""[dtd]"".
When a SAX2 driver is providing these events, all other
 events must be properly nested within start/end entity
 events.  There is no additional requirement that events from
 DeclHandler or
 DTDHandler be properly ordered.
Note that skipped entities will be reported through the
 skippedEntity
 event, which is part of the ContentHandler interface.
Because of the streaming event model that SAX uses, some
 entity boundaries cannot be reported under any
 circumstances:

general entities within attribute values
parameter entities within declarations

These will be silently expanded, with no indication of where
 the original entity boundaries were.
Note also that the boundaries of character references (which
 are not really entities anyway) are not reported.
All start/endEntity events must be properly nested.

Specified by:
startEntity in interface LexicalHandler
Parameters:
name - The name of the entity.  If it is a parameter
        entity, the name will begin with '%', and if it is the
        external DTD subset, it will be ""[dtd]"".
Throws:
SAXException - The application may raise an exception.
See Also:
LexicalHandler.endEntity(java.lang.String), 
DeclHandler.internalEntityDecl(java.lang.String, java.lang.String), 
DeclHandler.externalEntityDecl(java.lang.String, java.lang.String, java.lang.String)


"
Locator2Impl,getEncoding(),String,Returns the current value of the encoding property.,"

getEncoding
public String getEncoding()
Returns the current value of the encoding property.

Specified by:
getEncoding in interface Locator2
Returns:
Name of the character encoding being used to interpret
 * the entity's text, or null if this was not provided for a *
 character stream passed through an InputSource or is otherwise
 not yet available in the current parsing state.
See Also:
setEncoding(java.lang.String)


"
Locator2Impl,getXMLVersion(),String,Returns the current value of the version property.,"

getXMLVersion
public String getXMLVersion()
Returns the current value of the version property.

Specified by:
getXMLVersion in interface Locator2
Returns:
Identifier for the XML version being used to interpret
 the entity's text, or null if that information is not yet
 available in the current parsing state.
See Also:
setXMLVersion(java.lang.String)


"
Locator2Impl,setEncoding(String encoding),void,Assigns the current value of the encoding property.,"

setEncoding
public void setEncoding(String encoding)
Assigns the current value of the encoding property.

Parameters:
encoding - the new ""encoding"" value
See Also:
getEncoding()


"
Locator2Impl,setXMLVersion(String version),void,Assigns the current value of the version property.,"

setXMLVersion
public void setXMLVersion(String version)
Assigns the current value of the version property.

Parameters:
version - the new ""version"" value
See Also:
getXMLVersion()


"
