Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Buffer,1,int capacity(),True,,"

capacity
public final int capacity()
Returns this buffer's capacity.

Returns:
The capacity of this buffer


"
0,Buffer,2,Buffer clear(),True,,"

clear
public final Buffer clear()
Clears this buffer.  The position is set to zero, the limit is set to
 the capacity, and the mark is discarded.

  Invoke this method before using a sequence of channel-read or
 put operations to fill this buffer.  For example:

 
 buf.clear();     // Prepare buffer for reading
 in.read(buf);    // Read data
 This method does not actually erase the data in the buffer, but it
 is named as if it did because it will most often be used in situations
 in which that might as well be the case. 

Returns:
This buffer


"
0,Buffer,3,Buffer flip(),True,,"

flip
public final Buffer flip()
Flips this buffer.  The limit is set to the current position and then
 the position is set to zero.  If the mark is defined then it is
 discarded.

  After a sequence of channel-read or put operations, invoke
 this method to prepare for a sequence of channel-write or relative
 get operations.  For example:

 
 buf.put(magic);    // Prepend header
 in.read(buf);      // Read data into rest of buffer
 buf.flip();        // Flip buffer
 out.write(buf);    // Write header + data to channel
 This method is often used in conjunction with the compact method when transferring data from
 one place to another.  

Returns:
This buffer


"
0,Buffer,4,boolean hasRemaining(),True,,"

hasRemaining
public final boolean hasRemaining()
Tells whether there are any elements between the current position and
 the limit.

Returns:
true if, and only if, there is at least one element
          remaining in this buffer


"
0,Buffer,5,int remaining(),True,,"

remaining
public final int remaining()
Returns the number of elements between the current position and the
 limit.

Returns:
The number of elements remaining in this buffer


"
1,ByteBuffer,1,ByteBuffer allocate(int capacity),True,,"

allocate
public static ByteBuffer allocate(int capacity)
Allocates a new byte buffer.

  The new buffer's position will be zero, its limit will be its
 capacity, its mark will be undefined, and each of its elements will be
 initialized to zero.  It will have a backing array,
 and its array offset will be zero.

Parameters:
capacity - The new buffer's capacity, in bytes
Returns:
The new byte buffer
Throws:
IllegalArgumentException - If the capacity is a negative integer


"
1,ByteBuffer,2,ByteBuffer wrap(byte[] array),True,,"

wrap
public static ByteBuffer wrap(byte[] array)
Wraps a byte array into a buffer.

  The new buffer will be backed by the given byte array;
 that is, modifications to the buffer will cause the array to be modified
 and vice versa.  The new buffer's capacity and limit will be
 array.length, its position will be zero, and its mark will be
 undefined.  Its backing array will be the
 given array, and its array offset> will
 be zero.  

Parameters:
array - The array that will back this buffer
Returns:
The new byte buffer


"
1,ByteBuffer,3,ByteBuffer put(byte b),True,,"

put
public abstract ByteBuffer put(byte b)
Relative put method  (optional operation).

  Writes the given byte into this buffer at the current
 position, and then increments the position. 

Parameters:
b - The byte to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
1,ByteBuffer,4,byte get(),True,,"

get
public abstract byte get()
Relative get method.  Reads the byte at this buffer's
 current position, and then increments the position.

Returns:
The byte at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
1,ByteBuffer,5,ByteBuffer clear(),False,,NULL
2,ByteOrder,1,ByteOrder nativeOrder(),True,,"

nativeOrder
public static ByteOrder nativeOrder()
Retrieves the native byte order of the underlying platform.

  This method is defined so that performance-sensitive Java code can
 allocate direct buffers with the same byte order as the hardware.
 Native code libraries are often more efficient when such buffers are
 used.  

Returns:
The native byte order of the hardware upon which this Java
          virtual machine is running


"
2,ByteOrder,2,ByteOrder BIG_ENDIAN,False,,NULL
2,ByteOrder,3,ByteOrder LITTLE_ENDIAN,False,,NULL
2,ByteOrder,4,int compareTo(ByteOrder bo),False,,NULL
2,ByteOrder,5,String toString(),True,,"

toString
public String toString()
Constructs a string describing this object.

  This method returns the string ""BIG_ENDIAN"" for BIG_ENDIAN and ""LITTLE_ENDIAN"" for LITTLE_ENDIAN.
 

Overrides:
toString in class Object
Returns:
The specified string


"
3,CharBuffer,1,CharBuffer clear(),False,,NULL
3,CharBuffer,2,CharBuffer flip(),False,,NULL
3,CharBuffer,3,CharBuffer rewind(),False,,NULL
3,CharBuffer,4,CharBuffer slice(),True,,"

slice
public abstract CharBuffer slice()
Creates a new char buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of chars remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new char buffer


"
3,CharBuffer,5,CharBuffer duplicate(),True,,"

duplicate
public abstract CharBuffer duplicate()
Creates a new char buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new char buffer


"
4,DoubleBuffer,1,double get(),True,,"

get
public abstract double get()
Relative get method.  Reads the double at this buffer's
 current position, and then increments the position.

Returns:
The double at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
4,DoubleBuffer,2,DoubleBuffer put(double d),True,,"

put
public abstract DoubleBuffer put(double d)
Relative put method  (optional operation).

  Writes the given double into this buffer at the current
 position, and then increments the position. 

Parameters:
d - The double to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
4,DoubleBuffer,3,DoubleBuffer slice(),True,,"

slice
public abstract DoubleBuffer slice()
Creates a new double buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of doubles remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new double buffer


"
4,DoubleBuffer,4,DoubleBuffer duplicate(),True,,"

duplicate
public abstract DoubleBuffer duplicate()
Creates a new double buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new double buffer


"
4,DoubleBuffer,5,DoubleBuffer compact(),True,,"

compact
public abstract DoubleBuffer compact()
Compacts this buffer  (optional operation).

  The doubles between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 double at index p = position() is copied
 to index zero, the double at index p + 1 is copied
 to index one, and so forth until the double at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of doubles copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,1,FloatBuffer allocate(int capacity),True,,"

allocate
public static FloatBuffer allocate(int capacity)
Allocates a new float buffer.

  The new buffer's position will be zero, its limit will be its
 capacity, its mark will be undefined, and each of its elements will be
 initialized to zero.  It will have a backing array,
 and its array offset will be zero.

Parameters:
capacity - The new buffer's capacity, in floats
Returns:
The new float buffer
Throws:
IllegalArgumentException - If the capacity is a negative integer


"
5,FloatBuffer,2,FloatBuffer wrap(float[] array),True,,"

wrap
public static FloatBuffer wrap(float[] array)
Wraps a float array into a buffer.

  The new buffer will be backed by the given float array;
 that is, modifications to the buffer will cause the array to be modified
 and vice versa.  The new buffer's capacity and limit will be
 array.length, its position will be zero, and its mark will be
 undefined.  Its backing array will be the
 given array, and its array offset> will
 be zero.  

Parameters:
array - The array that will back this buffer
Returns:
The new float buffer


"
5,FloatBuffer,3,FloatBuffer put(float f),True,,"

put
public abstract FloatBuffer put(float f)
Relative put method  (optional operation).

  Writes the given float into this buffer at the current
 position, and then increments the position. 

Parameters:
f - The float to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
5,FloatBuffer,4,float get(),True,,"

get
public abstract float get()
Relative get method.  Reads the float at this buffer's
 current position, and then increments the position.

Returns:
The float at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
5,FloatBuffer,5,FloatBuffer duplicate(),True,,"

duplicate
public abstract FloatBuffer duplicate()
Creates a new float buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new float buffer


"
6,IntBuffer,1,IntBuffer allocate(int capacity),True,,"

allocate
public static IntBuffer allocate(int capacity)
Allocates a new int buffer.

  The new buffer's position will be zero, its limit will be its
 capacity, its mark will be undefined, and each of its elements will be
 initialized to zero.  It will have a backing array,
 and its array offset will be zero.

Parameters:
capacity - The new buffer's capacity, in ints
Returns:
The new int buffer
Throws:
IllegalArgumentException - If the capacity is a negative integer


"
6,IntBuffer,2,IntBuffer duplicate(),True,,"

duplicate
public abstract IntBuffer duplicate()
Creates a new int buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new int buffer


"
6,IntBuffer,3,IntBuffer slice(),True,,"

slice
public abstract IntBuffer slice()
Creates a new int buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of ints remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new int buffer


"
6,IntBuffer,4,IntBuffer asReadOnlyBuffer(),True,,"

asReadOnlyBuffer
public abstract IntBuffer asReadOnlyBuffer()
Creates a new, read-only int buffer that shares this buffer's
 content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer; the new
 buffer itself, however, will be read-only and will not allow the shared
 content to be modified.  The two buffers' position, limit, and mark
 values will be independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.

  If this buffer is itself read-only then this method behaves in
 exactly the same way as the duplicate method.  

Returns:
The new, read-only int buffer


"
6,IntBuffer,5,IntBuffer compact(),True,,"

compact
public abstract IntBuffer compact()
Compacts this buffer  (optional operation).

  The ints between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 int at index p = position() is copied
 to index zero, the int at index p + 1 is copied
 to index one, and so forth until the int at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of ints copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,1,LongBuffer allocate(int capacity),True,,"

allocate
public static LongBuffer allocate(int capacity)
Allocates a new long buffer.

  The new buffer's position will be zero, its limit will be its
 capacity, its mark will be undefined, and each of its elements will be
 initialized to zero.  It will have a backing array,
 and its array offset will be zero.

Parameters:
capacity - The new buffer's capacity, in longs
Returns:
The new long buffer
Throws:
IllegalArgumentException - If the capacity is a negative integer


"
7,LongBuffer,2,LongBuffer put(long[] src),True,,"

put
public final LongBuffer put(long[] src)
Relative bulk put method  (optional operation).

  This method transfers the entire content of the given source
 long array into this buffer.  An invocation of this method of the
 form dst.put(a) behaves in exactly the same way as the
 invocation

 
     dst.put(a, 0, a.length) 

Parameters:
src - The source array
Returns:
This buffer
Throws:
BufferOverflowException - If there is insufficient space in this buffer
ReadOnlyBufferException - If this buffer is read-only


"
7,LongBuffer,3,long get(),True,,"

get
public abstract long get()
Relative get method.  Reads the long at this buffer's
 current position, and then increments the position.

Returns:
The long at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
7,LongBuffer,4,LongBuffer rewind(),False,,NULL
7,LongBuffer,5,LongBuffer slice(),True,,"

slice
public abstract LongBuffer slice()
Creates a new long buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of longs remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new long buffer


"
8,MappedByteBuffer,1,int capacity(),False,,NULL
8,MappedByteBuffer,2,MappedByteBuffer force(),True,,"

force
public final MappedByteBuffer force()
Forces any changes made to this buffer's content to be written to the
 storage device containing the mapped file.

  If the file mapped into this buffer resides on a local storage
 device then when this method returns it is guaranteed that all changes
 made to the buffer since it was created, or since this method was last
 invoked, will have been written to that device.

  If the file does not reside on a local device then no such guarantee
 is made.

  If this buffer was not mapped in read/write mode (FileChannel.MapMode.READ_WRITE) then invoking this
 method has no effect. 

Returns:
This buffer


"
8,MappedByteBuffer,3,MappedByteBuffer load(),True,,"

load
public final MappedByteBuffer load()
Loads this buffer's content into physical memory.

  This method makes a best effort to ensure that, when it returns,
 this buffer's content is resident in physical memory.  Invoking this
 method may cause some number of page faults and I/O operations to
 occur. 

Returns:
This buffer


"
8,MappedByteBuffer,4,MappedByteBuffer slice(),False,,NULL
8,MappedByteBuffer,5,MappedByteBuffer duplicate(),False,,NULL
9,ShortBuffer,1,short get(),True,,"

get
public abstract short get()
Relative get method.  Reads the short at this buffer's
 current position, and then increments the position.

Returns:
The short at the buffer's current position
Throws:
BufferUnderflowException - If the buffer's current position is not smaller than its limit


"
9,ShortBuffer,2,ShortBuffer put(short s),True,,"

put
public abstract ShortBuffer put(short s)
Relative put method  (optional operation).

  Writes the given short into this buffer at the current
 position, and then increments the position. 

Parameters:
s - The short to be written
Returns:
This buffer
Throws:
BufferOverflowException - If this buffer's current position is not smaller than its limit
ReadOnlyBufferException - If this buffer is read-only


"
9,ShortBuffer,3,ShortBuffer slice(),True,,"

slice
public abstract ShortBuffer slice()
Creates a new short buffer whose content is a shared subsequence of
 this buffer's content.

  The content of the new buffer will start at this buffer's current
 position.  Changes to this buffer's content will be visible in the new
 buffer, and vice versa; the two buffers' position, limit, and mark
 values will be independent.

  The new buffer's position will be zero, its capacity and its limit
 will be the number of shorts remaining in this buffer, and its mark
 will be undefined.  The new buffer will be direct if, and only if, this
 buffer is direct, and it will be read-only if, and only if, this buffer
 is read-only.  

Returns:
The new short buffer


"
9,ShortBuffer,4,ShortBuffer duplicate(),True,,"

duplicate
public abstract ShortBuffer duplicate()
Creates a new short buffer that shares this buffer's content.

  The content of the new buffer will be that of this buffer.  Changes
 to this buffer's content will be visible in the new buffer, and vice
 versa; the two buffers' position, limit, and mark values will be
 independent.

  The new buffer's capacity, limit, position, and mark values will be
 identical to those of this buffer.  The new buffer will be direct if,
 and only if, this buffer is direct, and it will be read-only if, and
 only if, this buffer is read-only.  

Returns:
The new short buffer


"
9,ShortBuffer,5,ShortBuffer compact(),True,,"

compact
public abstract ShortBuffer compact()
Compacts this buffer  (optional operation).

  The shorts between the buffer's current position and its limit,
 if any, are copied to the beginning of the buffer.  That is, the
 short at index p = position() is copied
 to index zero, the short at index p + 1 is copied
 to index one, and so forth until the short at index
 limit() - 1 is copied to index
 n = limit() - 1 - p.
 The buffer's position is then set to n+1 and its limit is set to
 its capacity.  The mark, if defined, is discarded.

  The buffer's position is set to the number of shorts copied,
 rather than to zero, so that an invocation of this method can be
 followed immediately by an invocation of another relative put
 method. 

Returns:
This buffer
Throws:
ReadOnlyBufferException - If this buffer is read-only


"
