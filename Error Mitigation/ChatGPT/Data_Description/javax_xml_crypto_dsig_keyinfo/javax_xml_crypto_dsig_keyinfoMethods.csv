ClassName,Method,Return Type,Description,Full Description
KeyInfoFactory,getInstance(),static KeyInfoFactory,"Returns a KeyInfoFactory that supports the default XML processing mechanism and representation type (""DOM"").","

getInstance
public static KeyInfoFactory getInstance()
Returns a KeyInfoFactory that supports the
 default XML processing mechanism and representation type (""DOM"").

 This method uses the standard JCA provider lookup mechanism to
 locate and instantiate a KeyInfoFactory implementation of
 the default mechanism type. It traverses the list of registered security
 Providers, starting with the most preferred
 Provider.  A new KeyInfoFactory object
 from the first Provider that supports the DOM mechanism is
 returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Returns:
a new KeyInfoFactory
Throws:
NoSuchMechanismException - if no Provider supports a
    KeyInfoFactory implementation for the DOM mechanism
See Also:
Provider


"
KeyInfoFactory,getInstance(String mechanismType),static KeyInfoFactory,"Returns a KeyInfoFactory that supports the specified XML processing mechanism and representation type (ex: ""DOM"").","

getInstance
public static KeyInfoFactory getInstance(String mechanismType)
Returns a KeyInfoFactory that supports the
 specified XML processing mechanism and representation type (ex: ""DOM"").

 This method uses the standard JCA provider lookup mechanism to
 locate and instantiate a KeyInfoFactory implementation of
 the desired mechanism type. It traverses the list of registered security
 Providers, starting with the most preferred
 Provider. A new KeyInfoFactory object
 from the first Provider that supports the specified
 mechanism is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
Returns:
a new KeyInfoFactory
Throws:
NullPointerException - if mechanismType is
    null
NoSuchMechanismException - if no Provider supports a
    KeyInfoFactory implementation for the specified mechanism
See Also:
Provider


"
KeyInfoFactory,"getInstance(String mechanismType, Provider provider)",static KeyInfoFactory,"Returns a KeyInfoFactory that supports the requested XML processing mechanism and representation type (ex: ""DOM""), as supplied by the specified provider.","

getInstance
public static KeyInfoFactory getInstance(String mechanismType,
                                         Provider provider)
Returns a KeyInfoFactory that supports the
 requested XML processing mechanism and representation type (ex: ""DOM""),
 as supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the
 provider list.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
provider - the Provider object
Returns:
a new KeyInfoFactory
Throws:
NullPointerException - if mechanismType or
    provider are null
NoSuchMechanismException - if a KeyInfoFactory
    implementation for the specified mechanism is not available from the
    specified Provider object
See Also:
Provider


"
KeyInfoFactory,"getInstance(String mechanismType, String provider)",static KeyInfoFactory,"Returns a KeyInfoFactory that supports the requested XML processing mechanism and representation type (ex: ""DOM""), as supplied by the specified provider.","

getInstance
public static KeyInfoFactory getInstance(String mechanismType,
                                         String provider)
                                  throws NoSuchProviderException
Returns a KeyInfoFactory that supports the
 requested XML processing mechanism and representation type (ex: ""DOM""),
 as supplied by the specified provider. The specified provider must be
 registered in the security provider list.

 Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
provider - the string name of the provider
Returns:
a new KeyInfoFactory
Throws:
NoSuchProviderException - if the specified provider is not
    registered in the security provider list
NullPointerException - if mechanismType or
    provider are null
NoSuchMechanismException - if a KeyInfoFactory
    implementation for the specified mechanism is not available from the
    specified provider
See Also:
Provider


"
KeyInfoFactory,getMechanismType(),String,"Returns the type of the XML processing mechanism and representation supported by this KeyInfoFactory (ex: ""DOM"")","

getMechanismType
public final String getMechanismType()
Returns the type of the XML processing mechanism and representation
 supported by this KeyInfoFactory (ex: ""DOM"")

Returns:
the XML processing mechanism type supported by this
    KeyInfoFactory


"
KeyInfoFactory,getProvider(),Provider,Returns the provider of this KeyInfoFactory.,"

getProvider
public final Provider getProvider()
Returns the provider of this KeyInfoFactory.

Returns:
the provider of this KeyInfoFactory


"
KeyInfoFactory,getURIDereferencer(),abstract URIDereferencer,Returns a reference to the URIDereferencer that is used by default to dereference URIs in RetrievalMethod objects.,"

getURIDereferencer
public abstract URIDereferencer getURIDereferencer()
Returns a reference to the URIDereferencer that is used by
 default to dereference URIs in RetrievalMethod objects.

Returns:
a reference to the default URIDereferencer


"
KeyInfoFactory,isFeatureSupported(String feature),abstract boolean,Indicates whether a specified feature is supported.,"

isFeatureSupported
public abstract boolean isFeatureSupported(String feature)
Indicates whether a specified feature is supported.

Parameters:
feature - the feature name (as an absolute URI)
Returns:
true if the specified feature is supported,
    false otherwise
Throws:
NullPointerException - if feature is null


"
KeyInfoFactory,newKeyInfo(List content),abstract KeyInfo,Creates a KeyInfo containing the specified list of key information types.,"

newKeyInfo
public abstract KeyInfo newKeyInfo(List content)
Creates a KeyInfo containing the specified list of
 key information types.

Parameters:
content - a list of one or more XMLStructures representing
    key information types. The list is defensively copied to protect
    against subsequent modification.
Returns:
a KeyInfo
Throws:
NullPointerException - if content is null
IllegalArgumentException - if content is empty
ClassCastException - if content contains any entries
    that are not of type XMLStructure


"
KeyInfoFactory,"newKeyInfo(List content, String id)",abstract KeyInfo,Creates a KeyInfo containing the specified list of key information types and optional id.,"

newKeyInfo
public abstract KeyInfo newKeyInfo(List content,
                                   String id)
Creates a KeyInfo containing the specified list of key
 information types and optional id. The
 id parameter represents the value of an XML
 ID attribute and is useful for referencing
 the KeyInfo from other XML structures.

Parameters:
content - a list of one or more XMLStructures representing
    key information types. The list is defensively copied to protect
    against subsequent modification.
id - the value of an XML ID (may be null)
Returns:
a KeyInfo
Throws:
NullPointerException - if content is null
IllegalArgumentException - if content is empty
ClassCastException - if content contains any entries
    that are not of type XMLStructure


"
KeyInfoFactory,newKeyName(String name),abstract KeyName,Creates a KeyName from the specified name.,"

newKeyName
public abstract KeyName newKeyName(String name)
Creates a KeyName from the specified name.

Parameters:
name - the name that identifies the key
Returns:
a KeyName
Throws:
NullPointerException - if name is null


"
KeyInfoFactory,newKeyValue(PublicKey key),abstract KeyValue,Creates a KeyValue from the specified public key.,"

newKeyValue
public abstract KeyValue newKeyValue(PublicKey key)
                              throws KeyException
Creates a KeyValue from the specified public key.

Parameters:
key - the public key
Returns:
a KeyValue
Throws:
KeyException - if the key's algorithm is not
    recognized or supported by this KeyInfoFactory
NullPointerException - if key is null


"
KeyInfoFactory,newPGPData(byte[] keyId),abstract PGPData,Creates a PGPData from the specified PGP public key identifier.,"

newPGPData
public abstract PGPData newPGPData(byte[] keyId)
Creates a PGPData from the specified PGP public key
 identifier.

Parameters:
keyId - a PGP public key identifier as defined in RFC 2440, section 11.2.
    The array is cloned to protect against subsequent modification.
Returns:
a PGPData
Throws:
NullPointerException - if keyId is null
IllegalArgumentException - if the key id is not in the correct
    format


"
KeyInfoFactory,"newPGPData(byte[] keyId, byte[] keyPacket, List other)",abstract PGPData,"Creates a PGPData from the specified PGP public key identifier, and optional key material packet and list of external elements.","

newPGPData
public abstract PGPData newPGPData(byte[] keyId,
                                   byte[] keyPacket,
                                   List other)
Creates a PGPData from the specified PGP public key
 identifier, and optional key material packet and list of external
 elements.

Parameters:
keyId - a PGP public key identifier as defined in RFC 2440, section 11.2.
    The array is cloned to protect against subsequent modification.
keyPacket - a PGP key material packet as defined in RFC 2440, section 5.5.
    The array is cloned to protect against subsequent modification. May
    be null.
other - a list of XMLStructures representing elements from
    an external namespace. The list is defensively copied to protect
    against subsequent modification. May be null or empty.
Returns:
a PGPData
Throws:
NullPointerException - if keyId is null
IllegalArgumentException - if the keyId or
    keyPacket is not in the correct format. For
    keyPacket, the format of the packet header is
    checked and the tag is verified that it is of type key material. The
    contents and format of the packet body are not checked.
ClassCastException - if other contains any
    entries that are not of type XMLStructure


"
KeyInfoFactory,"newPGPData(byte[] keyPacket, List other)",abstract PGPData,Creates a PGPData from the specified PGP key material packet and optional list of external elements.,"

newPGPData
public abstract PGPData newPGPData(byte[] keyPacket,
                                   List other)
Creates a PGPData from the specified PGP key material
 packet and optional list of external elements.

Parameters:
keyPacket - a PGP key material packet as defined in RFC 2440, section 5.5.
    The array is cloned to protect against subsequent modification.
other - a list of XMLStructures representing elements from
    an external namespace. The list is defensively copied to protect
    against subsequent modification. May be null or empty.
Returns:
a PGPData
Throws:
NullPointerException - if keyPacket is
    null
IllegalArgumentException - if keyPacket is not in the
    correct format. For keyPacket, the format of the packet
    header is checked and the tag is verified that it is of type key
    material. The contents and format of the packet body are not checked.
ClassCastException - if other contains any
    entries that are not of type XMLStructure


"
KeyInfoFactory,newRetrievalMethod(String uri),abstract RetrievalMethod,Creates a RetrievalMethod from the specified URI.,"

newRetrievalMethod
public abstract RetrievalMethod newRetrievalMethod(String uri)
Creates a RetrievalMethod from the specified URI.

Parameters:
uri - the URI that identifies the KeyInfo information
    to be retrieved
Returns:
a RetrievalMethod
Throws:
NullPointerException - if uri is null
IllegalArgumentException - if uri is not RFC 2396
    compliant


"
KeyInfoFactory,"newRetrievalMethod(String uri, String type, List transforms)",abstract RetrievalMethod,Creates a RetrievalMethod from the specified parameters.,"

newRetrievalMethod
public abstract RetrievalMethod newRetrievalMethod(String uri,
                                                   String type,
                                                   List transforms)
Creates a RetrievalMethod from the specified parameters.

Parameters:
uri - the URI that identifies the KeyInfo information
    to be retrieved
type - a URI that identifies the type of KeyInfo
    information to be retrieved (may be null)
transforms - a list of Transforms. The list is defensively
    copied to protect against subsequent modification. May be
    null or empty.
Returns:
a RetrievalMethod
Throws:
NullPointerException - if uri is null
IllegalArgumentException - if uri is not RFC 2396
    compliant
ClassCastException - if transforms contains any
    entries that are not of type Transform


"
KeyInfoFactory,newX509Data(List content),abstract X509Data,Creates a X509Data containing the specified list of X.509 content.,"

newX509Data
public abstract X509Data newX509Data(List content)
Creates a X509Data containing the specified list of
 X.509 content.

Parameters:
content - a list of one or more X.509 content types. Valid types are
    String (subject names), byte[] (subject key ids),
    X509Certificate, X509CRL,
    or XMLStructure (X509IssuerSerial
    objects or elements from an external namespace). Subject names are
    distinguished names in RFC 2253 String format. Implementations MUST
    support the attribute type keywords defined in RFC 2253 (CN, L, ST,
    O, OU, C, STREET, DC and UID). Implementations MAY support additional
    keywords. The list is defensively copied to protect against
    subsequent modification.
Returns:
a X509Data
Throws:
NullPointerException - if content is null
IllegalArgumentException - if content is empty, or
    if a subject name is not RFC 2253 compliant or one of the attribute
    type keywords is not recognized.
ClassCastException - if content contains any entries
    that are not of one of the valid types mentioned above


"
KeyInfoFactory,"newX509IssuerSerial(String issuerName, BigInteger serialNumber)",abstract X509IssuerSerial,Creates an X509IssuerSerial from the specified X.500 issuer distinguished name and serial number.,"

newX509IssuerSerial
public abstract X509IssuerSerial newX509IssuerSerial(String issuerName,
                                                     BigInteger serialNumber)
Creates an X509IssuerSerial from the specified X.500 issuer
 distinguished name and serial number.

Parameters:
issuerName - the issuer's distinguished name in RFC 2253 String
    format. Implementations MUST support the attribute type keywords
    defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC and UID).
    Implementations MAY support additional keywords.
serialNumber - the serial number
Returns:
an X509IssuerSerial
Throws:
NullPointerException - if issuerName or
    serialNumber are null
IllegalArgumentException - if the issuer name is not RFC 2253
    compliant or one of the attribute type keywords is not recognized.


"
KeyInfoFactory,unmarshalKeyInfo(XMLStructure xmlStructure),abstract KeyInfo,Unmarshals a new KeyInfo instance from a mechanism-specific XMLStructure (ex: DOMStructure) instance.,"

unmarshalKeyInfo
public abstract KeyInfo unmarshalKeyInfo(XMLStructure xmlStructure)
                                  throws MarshalException
Unmarshals a new KeyInfo instance from a
 mechanism-specific XMLStructure (ex: DOMStructure)
 instance.

Parameters:
xmlStructure - a mechanism-specific XML structure from which to
   unmarshal the keyinfo from
Returns:
the KeyInfo
Throws:
NullPointerException - if xmlStructure is
   null
ClassCastException - if the type of xmlStructure is
   inappropriate for this factory
MarshalException - if an unrecoverable exception occurs during
   unmarshalling


"
