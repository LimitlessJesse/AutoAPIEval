ClassName,Method,Return Type,Description,Full Description
Endpoint,create(Object implementor),static Endpoint,Creates an endpoint with the specified implementor object.,"

create
public static Endpoint create(Object implementor)
Creates an endpoint with the specified implementor object. If there is
 a binding specified via a BindingType annotation then it MUST be used else
 a default of SOAP 1.1 / HTTP binding MUST be used.
 
 The newly created endpoint may be published by calling
 one of the publish(String) and
 publish(Object) methods.

Parameters:
implementor - The endpoint implementor.
Returns:
The newly created endpoint.


"
Endpoint,"create(Object implementor, WebServiceFeature... features)",static Endpoint,Creates an endpoint with the specified implementor object and web service features.,"

create
public static Endpoint create(Object implementor,
                              WebServiceFeature... features)
Creates an endpoint with the specified implementor object and web
 service features. If there is a binding specified via a BindingType
 annotation then it MUST be used else a default of SOAP 1.1 / HTTP
 binding MUST be used.
 
 The newly created endpoint may be published by calling
 one of the publish(String) and
 publish(Object) methods.

Parameters:
implementor - The endpoint implementor.
features - A list of WebServiceFeature to configure on the
        endpoint. Supported features not in the features
         parameter will have their default values.
Returns:
The newly created endpoint.
Since:
JAX-WS 2.2


"
Endpoint,"create(String bindingId, Object implementor)",static Endpoint,Creates an endpoint with the specified binding type and implementor object.,"

create
public static Endpoint create(String bindingId,
                              Object implementor)
Creates an endpoint with the specified binding type and
 implementor object.
 
 The newly created endpoint may be published by calling
 one of the publish(String) and
 publish(Object) methods.

Parameters:
bindingId - A URI specifying the binding to use. If the bindingID is
 null and no binding is specified via a BindingType
 annotation then a default SOAP 1.1 / HTTP binding MUST be used.
implementor - The endpoint implementor.
Returns:
The newly created endpoint.


"
Endpoint,"create(String bindingId, Object implementor, WebServiceFeature... features)",static Endpoint,"Creates an endpoint with the specified binding type, implementor object, and web service features.","

create
public static Endpoint create(String bindingId,
                              Object implementor,
                              WebServiceFeature... features)
Creates an endpoint with the specified binding type,
 implementor object, and web service features.
 
 The newly created endpoint may be published by calling
 one of the publish(String) and
 publish(Object) methods.

Parameters:
bindingId - A URI specifying the binding to use. If the bindingID is
 null and no binding is specified via a BindingType
 annotation then a default SOAP 1.1 / HTTP binding MUST be used.
implementor - The endpoint implementor.
features - A list of WebServiceFeature to configure on the
        endpoint. Supported features not in the features
         parameter will have their default values.
Returns:
The newly created endpoint.
Since:
JAX-WS 2.2


"
Endpoint,getBinding(),abstract Binding,Returns the binding for this endpoint.,"

getBinding
public abstract Binding getBinding()
Returns the binding for this endpoint.

Returns:
The binding for this endpoint


"
Endpoint,"getEndpointReference(Class<T> clazz, Element... referenceParameters)",abstract <T extends EndpointReference> T,Returns the EndpointReference associated with this Endpoint instance.,"

getEndpointReference
public abstract <T extends EndpointReference> T getEndpointReference(Class<T> clazz,
                                                                     Element... referenceParameters)
Returns the EndpointReference associated with
 this Endpoint instance.

Parameters:
clazz - Specifies the type of EndpointReference  that MUST be returned.
referenceParameters - Reference parameters to be associated with the
 returned EndpointReference instance.
Returns:
EndpointReference of type clazz of this
 Endpoint instance.
 If the returned EndpointReference is of type
 W3CEndpointReference then it MUST contain the
 the specified referenceParameters.
Throws:
WebServiceException - If any error in the creation of
 the EndpointReference or if the Endpoint is
 not in the published state or if the clazz is not a supported
 EndpointReference type.
UnsupportedOperationException - If this BindingProvider
 uses the XML/HTTP binding.
Since:
JAX-WS 2.1


"
Endpoint,getEndpointReference(Element... referenceParameters),abstract EndpointReference,Returns the EndpointReference associated with this Endpoint instance.,"

getEndpointReference
public abstract EndpointReference getEndpointReference(Element... referenceParameters)
Returns the EndpointReference associated with
 this Endpoint instance.
 
 If the Binding for this bindingProvider is
 either SOAP1.1/HTTP or SOAP1.2/HTTP, then a
 W3CEndpointReference MUST be returned.

Parameters:
referenceParameters - Reference parameters to be associated with the
 returned EndpointReference instance.
Returns:
EndpointReference of this Endpoint instance.
 If the returned EndpointReference is of type
 W3CEndpointReference then it MUST contain the
 the specified referenceParameters.
Throws:
WebServiceException - If any error in the creation of
 the EndpointReference or if the Endpoint is
 not in the published state.
UnsupportedOperationException - If this BindingProvider
 uses the XML/HTTP binding.
Since:
JAX-WS 2.1
See Also:
W3CEndpointReference


"
Endpoint,getExecutor(),abstract Executor,Returns the executor for this Endpointinstance.,"

getExecutor
public abstract Executor getExecutor()
Returns the executor for this Endpointinstance.

 The executor is used to dispatch an incoming request to
 the implementor object.

Returns:
The java.util.concurrent.Executor to be
         used to dispatch a request.
See Also:
Executor


"
Endpoint,getImplementor(),abstract Object,Returns the implementation object for this endpoint.,"

getImplementor
public abstract Object getImplementor()
Returns the implementation object for this endpoint.

Returns:
The implementor for this endpoint


"
Endpoint,getMetadata(),abstract List<Source>,Returns a list of metadata documents for the service.,"

getMetadata
public abstract List<Source> getMetadata()
Returns a list of metadata documents for the service.

Returns:
List<javax.xml.transform.Source> A list of metadata documents for the service


"
Endpoint,getProperties(),"abstract Map<String,Object>",Returns the property bag for this Endpoint instance.,"

getProperties
public abstract Map<String,Object> getProperties()
Returns the property bag for this Endpoint instance.

Returns:
Map<String,Object> The property bag
         associated with this instance.


"
Endpoint,isPublished(),abstract boolean,Returns true if the endpoint is in the published state.,"

isPublished
public abstract boolean isPublished()
Returns true if the endpoint is in the published state.

Returns:
true if the endpoint is in the published state.


"
Endpoint,publish(HttpContext serverContext),void,Publishes this endpoint at the provided server context.,"

publish
public void publish(HttpContext serverContext)
Publishes this endpoint at the provided server context.
 A server context encapsulates the server infrastructure
 and addressing information for a particular transport.
 For a call to this method to succeed, the server context
 passed as an argument to it MUST be compatible with the
 endpoint's binding.

 
 This is meant for container developers to publish the
 the endpoints portably and not intended for the end
 developers.

Parameters:
serverContext - An object representing a server
           context to be used for publishing the endpoint.
Throws:
IllegalArgumentException - If the provided server context is not
              supported by the implementation or turns
              out to be unusable in conjunction with the
              endpoint's binding.
IllegalStateException - If the endpoint has been published already or it has been stopped.
SecurityException - If a java.lang.SecurityManger
          is being used and the application doesn't have the
          WebServicePermission(""publishEndpoint"") permission.
Since:
JAX-WS 2.2


"
Endpoint,publish(Object serverContext),abstract void,Publishes this endpoint at the provided server context.,"

publish
public abstract void publish(Object serverContext)
Publishes this endpoint at the provided server context.
 A server context encapsulates the server infrastructure
 and addressing information for a particular transport.
 For a call to this method to succeed, the server context
 passed as an argument to it MUST be compatible with the
 endpoint's binding.

Parameters:
serverContext - An object representing a server
           context to be used for publishing the endpoint.
Throws:
IllegalArgumentException - If the provided server context is not
              supported by the implementation or turns
              out to be unusable in conjunction with the
              endpoint's binding.
IllegalStateException - If the endpoint has been published already or it has been stopped.
SecurityException - If a java.lang.SecurityManger
          is being used and the application doesn't have the
          WebServicePermission(""publishEndpoint"") permission.


"
Endpoint,publish(String address),abstract void,Publishes this endpoint at the given address.,"

publish
public abstract void publish(String address)
Publishes this endpoint at the given address.
 The necessary server infrastructure will be created and
 configured by the JAX-WS implementation using some default configuration.
 In order to get more control over the server configuration, please
 use the publish(Object) method instead.

Parameters:
address - A URI specifying the address to use. The address
        MUST be compatible with the binding specified at the
        time the endpoint was created.
Throws:
IllegalArgumentException - If the provided address URI is not usable
          in conjunction with the endpoint's binding.
IllegalStateException - If the endpoint has been published already or it has been stopped.
SecurityException - If a java.lang.SecurityManger
          is being used and the application doesn't have the
          WebServicePermission(""publishEndpoint"") permission.


"
Endpoint,"publish(String address, Object implementor)",static Endpoint,Creates and publishes an endpoint for the specified implementor object at the given address.,"

publish
public static Endpoint publish(String address,
                               Object implementor)
Creates and publishes an endpoint for the specified implementor
 object at the given address.
 
 The necessary server infrastructure will be created and
 configured by the JAX-WS implementation using some default configuration.

 In order to get more control over the server configuration, please
 use the create(String,Object) and
 publish(Object) methods instead.

Parameters:
address - A URI specifying the address and transport/protocol
        to use. A http: URI MUST result in the SOAP 1.1/HTTP
        binding being used. Implementations may support other
        URI schemes.
implementor - The endpoint implementor.
Returns:
The newly created endpoint.
Throws:
SecurityException - If a java.lang.SecurityManger
          is being used and the application doesn't have the
          WebServicePermission(""publishEndpoint"") permission.


"
Endpoint,"publish(String address, Object implementor, WebServiceFeature... features)",static Endpoint,Creates and publishes an endpoint for the specified implementor object at the given address.,"

publish
public static Endpoint publish(String address,
                               Object implementor,
                               WebServiceFeature... features)
Creates and publishes an endpoint for the specified implementor
 object at the given address. The created endpoint is configured
 with the web service features.
 
 The necessary server infrastructure will be created and
 configured by the JAX-WS implementation using some default configuration.

 In order to get more control over the server configuration, please
 use the create(String,Object) and
 publish(Object) methods instead.

Parameters:
address - A URI specifying the address and transport/protocol
        to use. A http: URI MUST result in the SOAP 1.1/HTTP
        binding being used. Implementations may support other
        URI schemes.
implementor - The endpoint implementor.
features - A list of WebServiceFeature to configure on the
        endpoint. Supported features not in the features
         parameter will have their default values.
Returns:
The newly created endpoint.
Throws:
SecurityException - If a java.lang.SecurityManger
          is being used and the application doesn't have the
          WebServicePermission(""publishEndpoint"") permission.
Since:
JAX-WS 2.2


"
Endpoint,setEndpointContext(EndpointContext ctxt),void,"By settng a EndpointContext, JAX-WS runtime knows about addresses of other endpoints in an application.","

setEndpointContext
public void setEndpointContext(EndpointContext ctxt)
By settng a EndpointContext, JAX-WS runtime knows about
 addresses of other endpoints in an application. If multiple endpoints
 share different ports of a WSDL, then the multiple port addresses
 are patched when the WSDL is accessed.

 
 This needs to be set before publishing the endpoints.

Parameters:
ctxt - that is shared for multiple endpoints
Throws:
IllegalStateException - If the endpoint has been published already or it has been stopped.
Since:
JAX-WS 2.2


"
Endpoint,setExecutor(Executor executor),abstract void,Sets the executor for this Endpoint instance.,"

setExecutor
public abstract void setExecutor(Executor executor)
Sets the executor for this Endpoint instance.

 The executor is used to dispatch an incoming request to
 the implementor object.

 If this Endpoint is published using the
 publish(Object) method and the specified server
 context defines its own threading behavior, the executor
 may be ignored.

Parameters:
executor - The java.util.concurrent.Executor
        to be used to dispatch a request.
Throws:
SecurityException - If the instance does not support
         setting an executor for security reasons (e.g. the
         necessary permissions are missing).
See Also:
Executor


"
Endpoint,setMetadata(List<Source> metadata),abstract void,Sets the metadata for this endpoint.,"

setMetadata
public abstract void setMetadata(List<Source> metadata)
Sets the metadata for this endpoint.

Parameters:
metadata - A list of XML document sources containing
           metadata information for the endpoint (e.g.
           WSDL or XML Schema documents)
Throws:
IllegalStateException - If the endpoint
         has already been published.


"
Endpoint,"setProperties(Map<String,Object> properties)",abstract void,Sets the property bag for this Endpoint instance.,"

setProperties
public abstract void setProperties(Map<String,Object> properties)
Sets the property bag for this Endpoint instance.

Parameters:
properties - The property bag associated with
        this instance.


"
Endpoint,stop(),abstract void,Stops publishing this endpoint.,"

stop
public abstract void stop()
Stops publishing this endpoint.

 If the endpoint is not in a published state, this method
 has no effect.

"
EndpointContext,getEndpoints(),abstract Set<Endpoint>,This gives list of endpoints in an application.,"

getEndpoints
public abstract Set<Endpoint> getEndpoints()
This gives list of endpoints in an application. For e.g in
 servlet container, a war file may contain multiple endpoints.
 In case of http, these endpoints are hosted on the same http
 server.

Returns:
list of all endpoints in an application


"
EndpointReference,"getPort(Class<T> serviceEndpointInterface, WebServiceFeature... features)",<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(Class<T> serviceEndpointInterface,
                     WebServiceFeature... features)
The getPort method returns a proxy. If there
 are any reference parameters in the
 EndpointReference instance, then those reference
 parameters MUST appear as SOAP headers, indicating them to be
 reference parameters, on all messages sent to the endpoint.
 The parameter  serviceEndpointInterface specifies
 the service endpoint interface that is supported by the
 returned proxy.
 The EndpointReference instance specifies the
 endpoint that will be invoked by the returned proxy.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the proxy accordingly from
 the WSDL Metadata from this EndpointReference or from
 annotations on the serviceEndpointInterface.  For this method
 to successfully return a proxy, WSDL metadata MUST be available and the
 EndpointReference instance MUST contain an implementation understood
 serviceName metadata.
 
 Because this port is not created from a Service object, handlers
 will not automatically be configured, and the HandlerResolver
 and Executor cannot be get or set for this port. The
 BindingProvider().getBinding().setHandlerChain()
 method can be used to manually configure handlers for this port.

Parameters:
serviceEndpointInterface - Service endpoint interface
features - An array of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Object Proxy instance that supports the
                  specified service endpoint interface
Throws:
WebServiceException - 
If there is an error during creation
                      of the proxy
                  If there is any missing WSDL metadata
                      as required by this method
                  If this
                      endpointReference
                      is invalid
                  If an illegal
                      serviceEndpointInterface
                      is specified
                  If a feature is enabled that is not compatible with
                      this port or is unsupported.
                   
See Also:
Proxy, 
WebServiceFeature


"
EndpointReference,readFrom(Source eprInfoset),static EndpointReference,Factory method to read an EndpointReference from the infoset contained in eprInfoset.,"

readFrom
public static EndpointReference readFrom(Source eprInfoset)
Factory method to read an EndpointReference from the infoset contained in
 eprInfoset. This method delegates to the vendor specific
 implementation of the Provider.readEndpointReference(javax.xml.transform.Source) method.

Parameters:
eprInfoset - The EndpointReference infoset to be unmarshalled
Returns:
the EndpointReference unmarshalled from eprInfoset
    never null
Throws:
WebServiceException - if an error occurs while creating the
    EndpointReference from the eprInfoset
IllegalArgumentException - if the null eprInfoset value is given.


"
EndpointReference,toString(),String,Displays EPR infoset for debugging convenience.,"

toString
public String toString()
Displays EPR infoset for debugging convenience.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
EndpointReference,writeTo(Result result),abstract void,write this EndpointReference to the specified infoset format,"

writeTo
public abstract void writeTo(Result result)
write this EndpointReference to the specified infoset format

Parameters:
result - for writing infoset
Throws:
WebServiceException - if there is an error writing the
   EndpointReference to the specified result.
IllegalArgumentException - If the null result value is given.


"
RespectBindingFeature,getID(),String,Get the unique identifier for this WebServiceFeature.,"

getID
public String getID()
Get the unique identifier for this WebServiceFeature.

Specified by:
getID in class WebServiceFeature
Returns:
the unique identifier for this feature.


"
Service,"addPort(QName portName, String bindingId, String endpointAddress)",void,Creates a new port for the service.,"

addPort
public void addPort(QName portName,
                    String bindingId,
                    String endpointAddress)
Creates a new port for the service. Ports created in this way contain
 no WSDL port type information and can only be used for creating
 Dispatchinstances.

Parameters:
portName - Qualified name for the target service endpoint.
bindingId - A String identifier of a binding.
endpointAddress - Address of the target service endpoint as a URI.
Throws:
WebServiceException - If any error in the creation of
 the port.
See Also:
SOAPBinding.SOAP11HTTP_BINDING, 
SOAPBinding.SOAP12HTTP_BINDING, 
HTTPBinding.HTTP_BINDING


"
Service,create(QName serviceName),static Service,Creates a Service instance.,"

create
public static Service create(QName serviceName)
Creates a Service instance.

Parameters:
serviceName - QName for the service
Throws:
WebServiceException - If any error in creation of the
                    specified service


"
Service,"create(QName serviceName, WebServiceFeature... features)",static Service,Creates a Service instance.,"

create
public static Service create(QName serviceName,
                             WebServiceFeature... features)
Creates a Service instance. The created instance is
 configured with the web service features.

Parameters:
serviceName - QName for the service
features - Web Service features that must be configured on
        the service. If the provider doesn't understand a feature,
        it must throw a WebServiceException.
Throws:
WebServiceException - If any error in creation of the
                    specified service
Since:
JAX-WS 2.2


"
Service,"create(URL wsdlDocumentLocation, QName serviceName)",static Service,Creates a Service instance.,"

create
public static Service create(URL wsdlDocumentLocation,
                             QName serviceName)
Creates a Service instance.

 The specified WSDL document location and service qualified name MUST
 uniquely identify a wsdl:service element.

Parameters:
wsdlDocumentLocation - URL for the WSDL document location
                             for the service
serviceName - QName for the service
Throws:
WebServiceException - If any error in creation of the
                    specified service.


"
Service,"create(URL wsdlDocumentLocation, QName serviceName, WebServiceFeature... features)",static Service,Creates a Service instance.,"

create
public static Service create(URL wsdlDocumentLocation,
                             QName serviceName,
                             WebServiceFeature... features)
Creates a Service instance. The created instance is
 configured with the web service features.

 The specified WSDL document location and service qualified name MUST
 uniquely identify a wsdl:service element.

Parameters:
wsdlDocumentLocation - URL for the WSDL document location
                             for the service
serviceName - QName for the service
features - Web Service features that must be configured on
        the service. If the provider doesn't understand a feature,
        it must throw a WebServiceException.
Throws:
WebServiceException - If any error in creation of the
                    specified service.
Since:
JAX-WS 2.2


"
Service,"createDispatch(EndpointReference endpointReference, Class<T> type, Service.Mode mode, WebServiceFeature... features)",<T> Dispatch<T>,Creates a Dispatch instance for use with objects of the client's choosing.,"

createDispatch
public <T> Dispatch<T> createDispatch(EndpointReference endpointReference,
                                      Class<T> type,
                                      Service.Mode mode,
                                      WebServiceFeature... features)
Creates a Dispatch instance for use with objects of
 the client's choosing. If there
 are any reference parameters in the
 endpointReference, then those reference
 parameters MUST appear as SOAP headers, indicating them to be
 reference parameters, on all messages sent to the endpoint.
 The endpointReference's address MUST be used
 for invocations on the endpoint.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the dispatch accordingly from
 the WSDL associated with this Service instance or
 from the metadata from the endpointReference.
 If this Service instance has a WSDL and
 the endpointReference
 also has a WSDL in its metadata, then the WSDL from this instance MUST be used.
 If this Service instance does not have a WSDL and
 the endpointReference does have a WSDL, then the
 WSDL from the endpointReference MAY be used.
 An implementation MUST be able to retrieve the portName from the
 endpointReference metadata.
 
 This method behaves the same as calling
 
 dispatch = service.createDispatch(portName, type, mode, features);
 
 where the portName is retrieved from the
 WSDL or EndpointReference metadata.

Parameters:
endpointReference - The EndpointReference
 for the target service endpoint that will be invoked by the
 returned Dispatch object.
type - The class of object used to messages or message
 payloads. Implementations are required to support
 javax.xml.transform.Source and javax.xml.soap.SOAPMessage.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE
 when type is SOAPMessage.
features - An array of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Dispatch instance
Throws:
WebServiceException - 
If there is any missing WSDL metadata
                      as required by this method.
                    If the endpointReference metadata does
                      not match the serviceName or portName
                      of a WSDL associated
                      with this Service instance.
                    If the portName cannot be determined
                    from the EndpointReference metadata.
                    If any error in the creation of
                     the Dispatch object.
                    If a feature is enabled that is not
                    compatible with this port or is unsupported.
                  
Since:
JAX-WS 2.1
See Also:
Source, 
SOAPMessage, 
WebServiceFeature


"
Service,"createDispatch(EndpointReference endpointReference, JAXBContext context, Service.Mode mode, WebServiceFeature... features)",Dispatch<Object>,Creates a Dispatch instance for use with JAXB generated objects.,"

createDispatch
public Dispatch<Object> createDispatch(EndpointReference endpointReference,
                                       JAXBContext context,
                                       Service.Mode mode,
                                       WebServiceFeature... features)
Creates a Dispatch instance for use with JAXB
 generated objects. If there
 are any reference parameters in the
 endpointReference, then those reference
 parameters MUST appear as SOAP headers, indicating them to be
 reference parameters, on all messages sent to the endpoint.
 The endpointReference's address MUST be used
 for invocations on the endpoint.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the dispatch accordingly from
 the WSDL associated with this Service instance or
 from the metadata from the endpointReference.
 If this Service instance has a WSDL and
 the endpointReference
 also has a WSDL in its metadata, then the WSDL from this instance
 MUST be used.
 If this Service instance does not have a WSDL and
 the endpointReference does have a WSDL, then the
 WSDL from the endpointReference MAY be used.
 An implementation MUST be able to retrieve the portName from the
 endpointReference metadata.
 
 This method behavies the same as calling
 
 dispatch = service.createDispatch(portName, context, mode, features);
 
 where the portName is retrieved from the
 WSDL or endpointReference metadata.

Parameters:
endpointReference - The EndpointReference
 for the target service endpoint that will be invoked by the
 returned Dispatch object.
context - The JAXB context used to marshall and unmarshall
 messages or message payloads.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body.
features - An array of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Dispatch instance
Throws:
WebServiceException - 
If there is any missing WSDL metadata
                      as required by this method.
                    If the endpointReference metadata does
                    not match the serviceName or portName
                    of a WSDL associated
                    with this Service instance.
                    If the portName cannot be determined
                    from the EndpointReference metadata.
                    If any error in the creation of
                    the Dispatch object.
                    if a feature is enabled that is not
                    compatible with this port or is unsupported.
                  
Since:
JAX-WS 2.1
See Also:
JAXBContext, 
WebServiceFeature


"
Service,"createDispatch(QName portName, Class<T> type, Service.Mode mode)",<T> Dispatch<T>,Creates a Dispatch instance for use with objects of the client's choosing.,"

createDispatch
public <T> Dispatch<T> createDispatch(QName portName,
                                      Class<T> type,
                                      Service.Mode mode)
Creates a Dispatch instance for use with objects of
 the client's choosing.

Parameters:
portName - Qualified name for the target service endpoint
type - The class of object used for messages or message
 payloads. Implementations are required to support
 javax.xml.transform.Source, javax.xml.soap.SOAPMessage
 and javax.activation.DataSource, depending on
 the binding in use.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE
 when type is SOAPMessage.
Returns:
Dispatch instance.
Throws:
WebServiceException - If any error in the creation of
                  the Dispatch object.
See Also:
Source, 
SOAPMessage


"
Service,"createDispatch(QName portName, Class<T> type, Service.Mode mode, WebServiceFeature... features)",<T> Dispatch<T>,Creates a Dispatch instance for use with objects of the client's choosing.,"

createDispatch
public <T> Dispatch<T> createDispatch(QName portName,
                                      Class<T> type,
                                      Service.Mode mode,
                                      WebServiceFeature... features)
Creates a Dispatch instance for use with objects of
 the client's choosing.

Parameters:
portName - Qualified name for the target service endpoint
type - The class of object used for messages or message
 payloads. Implementations are required to support
 javax.xml.transform.Source and javax.xml.soap.SOAPMessage.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body. Mode MUST be MESSAGE
 when type is SOAPMessage.
features - A list of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Dispatch instance.
Throws:
WebServiceException - If any error in the creation of
                  the Dispatch object or if a
                  feature is enabled that is not compatible with
                  this port or is unsupported.
Since:
JAX-WS 2.1
See Also:
Source, 
SOAPMessage, 
WebServiceFeature


"
Service,"createDispatch(QName portName, JAXBContext context, Service.Mode mode)",Dispatch<Object>,Creates a Dispatch instance for use with JAXB generated objects.,"

createDispatch
public Dispatch<Object> createDispatch(QName portName,
                                       JAXBContext context,
                                       Service.Mode mode)
Creates a Dispatch instance for use with JAXB
 generated objects.

Parameters:
portName - Qualified name for the target service endpoint
context - The JAXB context used to marshall and unmarshall
 messages or message payloads.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body.
Returns:
Dispatch instance.
Throws:
WebServiceException - If any error in the creation of
                  the Dispatch object.
See Also:
JAXBContext


"
Service,"createDispatch(QName portName, JAXBContext context, Service.Mode mode, WebServiceFeature... features)",Dispatch<Object>,Creates a Dispatch instance for use with JAXB generated objects.,"

createDispatch
public Dispatch<Object> createDispatch(QName portName,
                                       JAXBContext context,
                                       Service.Mode mode,
                                       WebServiceFeature... features)
Creates a Dispatch instance for use with JAXB
 generated objects.

Parameters:
portName - Qualified name for the target service endpoint
context - The JAXB context used to marshall and unmarshall
 messages or message payloads.
mode - Controls whether the created dispatch instance is message
 or payload oriented, i.e. whether the client will work with complete
 protocol messages or message payloads. E.g. when using the SOAP
 protocol, this parameter controls whether the client will work with
 SOAP messages or the contents of a SOAP body.
features - A list of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Dispatch instance.
Throws:
WebServiceException - If any error in the creation of
                  the Dispatch object or if a
                  feature is enabled that is not compatible with
                  this port or is unsupported.
Since:
JAX-WS 2.1
See Also:
JAXBContext, 
WebServiceFeature


"
Service,getExecutor(),Executor,Returns the executor for this Serviceinstance.,"

getExecutor
public Executor getExecutor()
Returns the executor for this Serviceinstance.

 The executor is used for all asynchronous invocations that
 require callbacks.

Returns:
The java.util.concurrent.Executor to be
         used to invoke a callback.
See Also:
Executor


"
Service,getHandlerResolver(),HandlerResolver,Returns the configured handler resolver.,"

getHandlerResolver
public HandlerResolver getHandlerResolver()
Returns the configured handler resolver.

Returns:
HandlerResolver The HandlerResolver being
         used by this Service instance, or null
         if there isn't one.


"
Service,getPort(Class<T> serviceEndpointInterface),<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(Class<T> serviceEndpointInterface)
The getPort method returns a proxy. The parameter
 serviceEndpointInterface specifies the service
 endpoint interface that is supported by the returned proxy.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the proxy accordingly.
 The returned proxy should not be reconfigured by the client.

Parameters:
serviceEndpointInterface - Service endpoint interface.
Returns:
Object instance that supports the
                  specified service endpoint interface.
Throws:
WebServiceException - 
If there is an error during creation
                      of the proxy.
                  If there is any missing WSDL metadata
                      as required by this method.
                  If an illegal
                      serviceEndpointInterface
                      is specified.
                  


"
Service,"getPort(Class<T> serviceEndpointInterface, WebServiceFeature... features)",<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(Class<T> serviceEndpointInterface,
                     WebServiceFeature... features)
The getPort method returns a proxy. The parameter
 serviceEndpointInterface specifies the service
 endpoint interface that is supported by the returned proxy.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the proxy accordingly.
 The returned proxy should not be reconfigured by the client.

Parameters:
serviceEndpointInterface - Service endpoint interface.
features - A list of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Object instance that supports the
                  specified service endpoint interface.
Throws:
WebServiceException - 
If there is an error during creation
                      of the proxy.
                  If there is any missing WSDL metadata
                      as required by this method.
                  If an illegal
                      serviceEndpointInterface
                      is specified.
                  If a feature is enabled that is not compatible
                      with this port or is unsupported.
                  
Since:
JAX-WS 2.1
See Also:
WebServiceFeature


"
Service,"getPort(EndpointReference endpointReference, Class<T> serviceEndpointInterface, WebServiceFeature... features)",<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(EndpointReference endpointReference,
                     Class<T> serviceEndpointInterface,
                     WebServiceFeature... features)
The getPort method returns a proxy.
 The parameter endpointReference specifies the
 endpoint that will be invoked by the returned proxy.  If there
 are any reference parameters in the
 endpointReference, then those reference
 parameters MUST appear as SOAP headers, indicating them to be
 reference parameters, on all messages sent to the endpoint.
 The endpointReference's address MUST be used
 for invocations on the endpoint.
 The parameter serviceEndpointInterface specifies
 the service endpoint interface that is supported by the
 returned proxy.
 In the implementation of this method, the JAX-WS
 runtime system takes the responsibility of selecting a protocol
 binding (and a port) and configuring the proxy accordingly from
 the WSDL associated with this Service instance or
 from the metadata from the endpointReference.
 If this Service instance has a WSDL and
 the endpointReference metadata
 also has a WSDL, then the WSDL from this instance MUST be used.
 If this Service instance does not have a WSDL and
 the endpointReference does have a WSDL, then the
 WSDL from the endpointReference MAY be used.
 The returned proxy should not be reconfigured by the client.
 If this Service instance has a known proxy
 port that matches the information contained in
 the WSDL,
 then that proxy is returned, otherwise a WebServiceException
 is thrown.
 
 Calling this method has the same behavior as the following
 
 port = service.getPort(portName, serviceEndpointInterface);
 
 where the portName is retrieved from the
 metadata of the endpointReference or from the
 serviceEndpointInterface and the WSDL
 associated with this Service instance.

Parameters:
endpointReference - The EndpointReference
 for the target service endpoint that will be invoked by the
 returned proxy.
serviceEndpointInterface - Service endpoint interface.
features - A list of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Object Proxy instance that supports the
                  specified service endpoint interface.
Throws:
WebServiceException - 
If there is an error during creation
                      of the proxy.
                  If there is any missing WSDL metadata
                      as required by this method.
                  If the endpointReference metadata does
                      not match the serviceName of this
                      Service instance.
                  If a portName cannot be extracted
                      from the WSDL or endpointReference metadata.
                  If an invalid
                      endpointReference
                      is specified.
                  If an invalid
                      serviceEndpointInterface
                      is specified.
                  If a feature is enabled that is not compatible
                      with this port or is unsupported.
                  
Since:
JAX-WS 2.1


"
Service,"getPort(QName portName, Class<T> serviceEndpointInterface)",<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(QName portName,
                     Class<T> serviceEndpointInterface)
The getPort method returns a proxy. A service client
 uses this proxy to invoke operations on the target
 service endpoint. The serviceEndpointInterface
 specifies the service endpoint interface that is supported by
 the created dynamic proxy instance.

Parameters:
portName - Qualified name of the service endpoint in
                  the WSDL service description.
serviceEndpointInterface - Service endpoint interface
                  supported by the dynamic proxy instance.
Returns:
Object Proxy instance that
                supports the specified service endpoint
                interface.
Throws:
WebServiceException - This exception is thrown in the
                  following cases:
                  
If there is an error in creation of
                      the proxy.
                  If there is any missing WSDL metadata
                      as required by this method.
                  If an illegal
                      serviceEndpointInterface
                      or portName is specified.
                  
See Also:
Proxy, 
InvocationHandler


"
Service,"getPort(QName portName, Class<T> serviceEndpointInterface, WebServiceFeature... features)",<T> T,The getPort method returns a proxy.,"

getPort
public <T> T getPort(QName portName,
                     Class<T> serviceEndpointInterface,
                     WebServiceFeature... features)
The getPort method returns a proxy. A service client
 uses this proxy to invoke operations on the target
 service endpoint. The serviceEndpointInterface
 specifies the service endpoint interface that is supported by
 the created dynamic proxy instance.

Parameters:
portName - Qualified name of the service endpoint in
                  the WSDL service description.
serviceEndpointInterface - Service endpoint interface
                  supported by the dynamic proxy instance.
features - A list of WebServiceFeatures to configure on the
                proxy.  Supported features not in the features
                 parameter will have their default values.
Returns:
Object Proxy instance that
                supports the specified service endpoint
                interface.
Throws:
WebServiceException - This exception is thrown in the
                  following cases:
                  
If there is an error in creation of
                      the proxy.
                  If there is any missing WSDL metadata
                      as required by this method.
                  If an illegal
                      serviceEndpointInterface
                      or portName is specified.
                  If a feature is enabled that is not compatible
                      with this port or is unsupported.
                  
Since:
JAX-WS 2.1
See Also:
Proxy, 
InvocationHandler, 
WebServiceFeature


"
Service,getPorts(),Iterator<QName>,Returns an Iterator for the list of QNames of service endpoints grouped by this service,"

getPorts
public Iterator<QName> getPorts()
Returns an Iterator for the list of
 QNames of service endpoints grouped by this
 service

Returns:
Returns java.util.Iterator with elements
         of type javax.xml.namespace.QName.
Throws:
WebServiceException - If this Service class does not
         have access to the required WSDL metadata.


"
Service,getServiceName(),QName,Gets the name of this service.,"

getServiceName
public QName getServiceName()
Gets the name of this service.

Returns:
Qualified name of this service


"
Service,getWSDLDocumentLocation(),URL,Gets the location of the WSDL document for this Service.,"

getWSDLDocumentLocation
public URL getWSDLDocumentLocation()
Gets the location of the WSDL document for this Service.

Returns:
URL for the location of the WSDL document for
         this service.


"
Service,setExecutor(Executor executor),void,Sets the executor for this Service instance.,"

setExecutor
public void setExecutor(Executor executor)
Sets the executor for this Service instance.

 The executor is used for all asynchronous invocations that
 require callbacks.

Parameters:
executor - The java.util.concurrent.Executor
        to be used to invoke a callback.
Throws:
SecurityException - If the instance does not support
         setting an executor for security reasons (e.g. the
         necessary permissions are missing).
See Also:
Executor


"
Service,setHandlerResolver(HandlerResolver handlerResolver),void,Sets the HandlerResolver for this Service instance.,"

setHandlerResolver
public void setHandlerResolver(HandlerResolver handlerResolver)
Sets the HandlerResolver for this Service
 instance.
 
 The handler resolver, if present, will be called once for each
 proxy or dispatch instance that is created, and the handler chain
 returned by the resolver will be set on the instance.

Parameters:
handlerResolver - The HandlerResolver to use
        for all subsequently created proxy/dispatch objects.
See Also:
HandlerResolver


"
WebServiceFeature,getID(),abstract String,Get the unique identifier for this WebServiceFeature.,"

getID
public abstract String getID()
Get the unique identifier for this WebServiceFeature.

Returns:
the unique identifier for this feature.


"
WebServiceFeature,isEnabled(),boolean,Returns true if this feature is enabled.,"

isEnabled
public boolean isEnabled()
Returns true if this feature is enabled.

Returns:
true if and only if the feature is enabled .


"
