Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,SerialArray,1,Object getArray(),True,,"

getArray
public Object getArray()
                throws SerialException
Returns a new array that is a copy of this SerialArray
 object.

Specified by:
getArray in interface Array
Returns:
a copy of this SerialArray object as an
         Object in the Java programming language
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
0,SerialArray,2,String getBaseTypeName(),True,,"

getBaseTypeName
public String getBaseTypeName()
                       throws SerialException
Retrieves the DBMS-specific type name for the elements in this
 SerialArray object.

Specified by:
getBaseTypeName in interface Array
Returns:
the SQL type name used by the DBMS for the base type of this
         SerialArray object
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
0,SerialArray,3,"Map<String, Class<?>> getBaseTypeMap()",False,,NULL
0,SerialArray,4,ResultSet getResultSet(),True,,"

getResultSet
public ResultSet getResultSet()
                       throws SerialException
Retrieves a ResultSet object that contains all of
 the elements in the ARRAY value that this
 SerialArray object represents.
 If appropriate, the elements of the array are mapped using the connection's
 type map; otherwise, the standard mapping is used.

Specified by:
getResultSet in interface Array
Returns:
a ResultSet object containing all of the
         elements in this SerialArray object, with a
         separate row for each element
Throws:
SerialException - if called with the cause set to
         UnsupportedOperationException


"
0,SerialArray,5,long getBaseType(),False,,NULL
1,SerialBlob,1,"byte[] getBytes(long pos, int length)",True,,"

getBytes
public byte[] getBytes(long pos,
                       int length)
                throws SerialException
Copies the specified number of bytes, starting at the given
 position, from this SerialBlob object to
 another array of bytes.
 
 Note that if the given number of bytes to be copied is larger than
 the length of this SerialBlob object's array of
 bytes, the given number will be shortened to the array's length.

Specified by:
getBytes in interface Blob
Parameters:
pos - the ordinal position of the first byte in this
            SerialBlob object to be copied;
            numbering starts at 1; must not be less
            than 1 and must be less than or equal
            to the length of this SerialBlob object
length - the number of bytes to be copied
Returns:
an array of bytes that is a copy of a region of this
         SerialBlob object, starting at the given
         position and containing the given number of consecutive bytes
Throws:
SerialException - if the given starting position is out of bounds;
 if free had previously been called on this object
See Also:
Blob.setBytes(long, byte[])


"
1,SerialBlob,2,InputStream getBinaryStream(),True,,"

getBinaryStream
public InputStream getBinaryStream()
                            throws SerialException
Returns this SerialBlob object as an input stream.
 Unlike the related method, setBinaryStream,
 a stream is produced regardless of whether the SerialBlob
 was created with a Blob object or a byte array.

Specified by:
getBinaryStream in interface Blob
Returns:
a java.io.InputStream object that contains
         this SerialBlob object's array of bytes
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object
See Also:
setBinaryStream(long)


"
1,SerialBlob,3,long length(),True,,"

length
public long length()
            throws SerialException
Retrieves the number of bytes in this SerialBlob
 object's array of bytes.

Specified by:
length in interface Blob
Returns:
a long indicating the length in bytes of this
         SerialBlob object's array of bytes
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
1,SerialBlob,4,OutputStream setBinaryStream(long pos),True,,"

setBinaryStream
public OutputStream setBinaryStream(long pos)
                             throws SerialException,
                                    SQLException
Retrieves a stream that can be used to write to the BLOB
 value that this Blob object represents.  The stream begins
 at position pos. This method forwards the
 setBinaryStream() call to the underlying Blob in
 the event that this SerialBlob object is instantiated with a
 Blob. If this SerialBlob is instantiated with
 a byte array, a SerialException is thrown.

Specified by:
setBinaryStream in interface Blob
Parameters:
pos - the position in the BLOB value at which
        to start writing
Returns:
a java.io.OutputStream object to which data can
         be written
Throws:
SQLException - if there is an error accessing the
            BLOB value
SerialException - if the SerialBlob in not instantiated with a
     Blob object that supports setBinaryStream();
 if free had previously been called on this object
See Also:
getBinaryStream()


"
1,SerialBlob,5,void truncate(long len),True,,"

truncate
public void truncate(long length)
              throws SerialException
Truncates the BLOB value that this Blob
 object represents to be len bytes in length.

Specified by:
truncate in interface Blob
Parameters:
length - the length, in bytes, to which the BLOB
        value that this Blob object represents should be
        truncated
Throws:
SerialException - if there is an error accessing the Blob value;
     or the length to truncate is greater that the SerialBlob length;
 if free had previously been called on this object


"
2,SerialClob,1,Reader getCharacterStream(),True,,"

getCharacterStream
public Reader getCharacterStream()
                          throws SerialException
Returns this SerialClob object's data as a stream
 of Unicode characters. Unlike the related method, getAsciiStream,
 a stream is produced regardless of whether the SerialClob object
 was created with a Clob object or a char array.

Specified by:
getCharacterStream in interface Clob
Returns:
a java.io.Reader object containing this
         SerialClob object's data
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object
See Also:
Clob.setCharacterStream(long)


"
2,SerialClob,2,long length(),True,,"

length
public long length()
            throws SerialException
Retrieves the number of characters in this SerialClob
 object's array of characters.

Specified by:
length in interface Clob
Returns:
a long indicating the length in characters of this
         SerialClob object's array of character
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
2,SerialClob,3,"String getSubString(long pos, int length)",True,,"

getSubString
public String getSubString(long pos,
                           int length)
                    throws SerialException
Returns a copy of the substring contained in this
 SerialClob object, starting at the given position
 and continuing for the specified number or characters.

Specified by:
getSubString in interface Clob
Parameters:
pos - the position of the first character in the substring
            to be copied; the first character of the
            SerialClob object is at position
            1; must not be less than 1,
            and the sum of the starting position and the length
            of the substring must be less than the length of this
            SerialClob object
length - the number of characters in the substring to be
               returned; must not be greater than the length of
               this SerialClob object, and the
               sum of the starting position and the length
               of the substring must be less than the length of this
               SerialClob object
Returns:
a String object containing a substring of
         this SerialClob object beginning at the
         given position and containing the specified number of
         consecutive characters
Throws:
SerialException - if either of the arguments is out of bounds;
 if free had previously been called on this object


"
2,SerialClob,4,void truncate(long len),True,,"

truncate
public void truncate(long length)
              throws SerialException
Truncates the CLOB value that this SerialClob
 object represents so that it has a length of len
 characters.
 
 Truncating a SerialClob object to length 0 has the effect of
 clearing its contents.

Specified by:
truncate in interface Clob
Parameters:
length - the length, in bytes, to which the CLOB
        value should be truncated
Throws:
SerialException - if there is an error accessing the
        CLOB value;
 if the free method had been previously called on this object


"
2,SerialClob,5,OutputStream setAsciiStream(long pos),True,,"

setAsciiStream
public OutputStream setAsciiStream(long pos)
                            throws SerialException,
                                   SQLException
Retrieves a stream to be used to write Ascii characters to the
 CLOB value that this SerialClob object represents,
 starting at position pos. This method forwards the
 setAsciiStream() call to the underlying Clob object in
 the event that this SerialClob object is instantiated with a
 Clob object. If this SerialClob object is instantiated
  with a char array, a SerialException object is thrown.

Specified by:
setAsciiStream in interface Clob
Parameters:
pos - the position at which to start writing to the
        CLOB object
Returns:
the stream to which ASCII encoded characters can be written
Throws:
SerialException - if SerialClob is not instantiated with a
     Clob object;
 if the free method had been previously called on this object
SQLException - if there is an error accessing the
     CLOB value
See Also:
getAsciiStream()


"
3,SerialDatalink,1,String getDatalink(),False,,NULL
3,SerialDatalink,2,void setDatalink(String url),False,,NULL
3,SerialDatalink,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares this SerialDatalink to the specified object.
 The result is true if and only if the argument is not
 null and is a SerialDatalink object whose URL is
 identical to this object's URL

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialDatalink against
Returns:
true if the given object represents a SerialDatalink
          equivalent to this SerialDatalink, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
3,SerialDatalink,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hash code for this SerialDatalink. The hash code for a
 SerialDatalink object is taken as the hash code of
 the URL it stores

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
3,SerialDatalink,5,String toString(),False,,NULL
4,SerialJavaObject,1,Object getObject(),True,,"

getObject
public Object getObject()
                 throws SerialException
Returns an Object that is a copy of this SerialJavaObject
 object.

Returns:
a copy of this SerialJavaObject object as an
         Object in the Java programming language
Throws:
SerialException - if the instance is corrupt


"
4,SerialJavaObject,2,void setObject(Object obj),False,,NULL
4,SerialJavaObject,3,String getClassName(),False,,NULL
4,SerialJavaObject,4,SerialJavaObject clone(),False,,NULL
4,SerialJavaObject,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object o)
Compares this SerialJavaObject to the specified object.
 The result is true if and only if the argument
 is not null and is a SerialJavaObject
 object that is identical to this object

Overrides:
equals in class Object
Parameters:
o - The object to compare this SerialJavaObject against
Returns:
true if the given object represents a SerialJavaObject
          equivalent to this SerialJavaObject, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
5,SerialRef,1,String getBaseTypeName(),True,,"

getBaseTypeName
public String getBaseTypeName()
                       throws SerialException
Returns a string describing the base type name of the Ref.

Specified by:
getBaseTypeName in interface Ref
Returns:
a string of the base type name of the Ref
Throws:
SerialException - in no Ref object has been set


"
5,SerialRef,2,Object getObject(),True,,"

getObject
public Object getObject()
                 throws SerialException
Returns an Object representing the SQL structured type
 to which this SerialRef object refers.

Specified by:
getObject in interface Ref
Returns:
an object instance resolved from the Ref reference
Throws:
SerialException - if an error is encountered in the reference
         resolution
See Also:
Ref.setObject(java.lang.Object)


"
5,SerialRef,3,void setObject(Object value),True,,"

setObject
public void setObject(Object obj)
               throws SerialException
Sets the SQL structured type that this SerialRef object
 references to the given Object object.

Specified by:
setObject in interface Ref
Parameters:
obj - an Object representing the SQL structured type
        to be referenced
Throws:
SerialException - if an error is encountered generating the
 the structured type referenced by this SerialRef object
See Also:
Ref.getObject(), 
Ref.getObject(Map), 
PreparedStatement.setObject(int, Object), 
CallableStatement.setObject(String, Object)


"
5,SerialRef,4,Ref getRef(),False,,NULL
5,SerialRef,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares this SerialRef to the specified object.  The result is true if and only if the argument is not null and is a SerialRef object that represents the same object as this
 object.

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialRef against
Returns:
true if the given object represents a SerialRef
          equivalent to this SerialRef, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
6,SerialStruct,1,Object[] getAttributes(),True,,"

getAttributes
public Object[] getAttributes()
                       throws SerialException
Retrieves an array of Object values containing the
 attributes of the SQL structured type that this
 SerialStruct object represents.

Specified by:
getAttributes in interface Struct
Returns:
an array of Object values, with each
         element being an attribute of the SQL structured type
         that this SerialStruct object represents
Throws:
SerialException - if an error occurs


"
6,SerialStruct,2,String getSQLTypeName(),True,,"

getSQLTypeName
public String getSQLTypeName()
                      throws SerialException
Retrieves the SQL type name for this SerialStruct
 object. This is the name used in the SQL definition of the
 structured type

Specified by:
getSQLTypeName in interface Struct
Returns:
a String object representing the SQL
         type name for the SQL structured type that this
         SerialStruct object represents
Throws:
SerialException - if an error occurs


"
6,SerialStruct,3,"Map<String, Object> getAttributeMap()",False,,NULL
6,SerialStruct,4,"Object[] getAttributes(Map<String, Class<?>> map)",True,,"

getAttributes
public Object[] getAttributes(Map<String,Class<?>> map)
                       throws SerialException
Retrieves the attributes for the SQL structured type that
 this SerialStruct represents as an array of
 Object values, using the given type map for
 custom mapping if appropriate.

Specified by:
getAttributes in interface Struct
Parameters:
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
an array of Object values, with each
         element being an attribute of the SQL structured
         type that this SerialStruct object
         represents
Throws:
SerialException - if an error occurs


"
6,SerialStruct,5,String toString(),False,,NULL
7,SQLInputImpl,1,String readString(),True,,"

readString
public String readString()
                  throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a String in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData
 implementation.
 

Specified by:
readString in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
     if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
     position or if there are no further values in the stream.


"
7,SQLInputImpl,2,Array readArray(),True,,"

readArray
public Array readArray()
                throws SQLException
Reads an SQL ARRAY value from the stream and
 returns it as an Array object in the Java programming
 language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readArray in interface SQLInput
Returns:
an Array object representing the SQL
         ARRAY value at the head of the stream; *
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
7,SQLInputImpl,3,BigDecimal readBigDecimal(),True,,"

readBigDecimal
public BigDecimal readBigDecimal()
                          throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a java.math.BigDecimal.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readBigDecimal in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
7,SQLInputImpl,4,Blob readBlob(),True,,"

readBlob
public Blob readBlob()
              throws SQLException
Retrieves the BLOB value at the head of this
 SQLInputImpl object as a Blob object
 in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readBlob in interface SQLInput
Returns:
a Blob object representing the SQL
         BLOB value at the head of this stream;
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
7,SQLInputImpl,5,Clob readClob(),True,,"

readClob
public Clob readClob()
              throws SQLException
Retrieves the CLOB value at the head of this
 SQLInputImpl object as a Clob object
 in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readClob in interface SQLInput
Returns:
a Clob object representing the SQL
         CLOB value at the head of the stream;
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
8,SQLOutputImpl,1,void writeArray(Array x),True,,"

writeArray
public void writeArray(Array x)
                throws SQLException
Writes an Array object in the Java
 programming language to this SQLOutputImpl
 object. The driver converts this value to a serializable
 SerialArray SQL ARRAY
 value before returning it to the database.

Specified by:
writeArray in interface SQLOutput
Parameters:
x - an object representing an SQL ARRAY value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
8,SQLOutputImpl,2,void writeAsciiStream(InputStream x),True,,"

writeAsciiStream
public void writeAsciiStream(InputStream x)
                      throws SQLException
Writes a stream of ASCII characters to this
 SQLOutputImpl object. The driver will do any necessary
 conversion from ASCII to the database CHAR format.

Specified by:
writeAsciiStream in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
8,SQLOutputImpl,3,void writeBigDecimal(BigDecimal x),True,,"

writeBigDecimal
public void writeBigDecimal(BigDecimal x)
                     throws SQLException
Writes a java.math.BigDecimal object in the Java programming
 language to this SQLOutputImpl object. The driver converts
 it to an SQL NUMERIC before returning it to the database.

Specified by:
writeBigDecimal in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
8,SQLOutputImpl,4,void writeBlob(Blob x),True,,"

writeBlob
public void writeBlob(Blob x)
               throws SQLException
Writes a Blob object in the Java programming language
 to this SQLOutputImpl object.  The driver converts
 it to a serializable SerialBlob SQL BLOB value
 before returning it to the database.

Specified by:
writeBlob in interface SQLOutput
Parameters:
x - an object representing an SQL BLOB value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
8,SQLOutputImpl,5,void writeBoolean(boolean x),True,,"

writeBoolean
public void writeBoolean(boolean x)
                  throws SQLException
Writes a boolean in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL BIT before returning it to the database.

Specified by:
writeBoolean in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
