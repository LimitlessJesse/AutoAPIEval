ClassName,Method,Return Type,Description,Full Description
SerialArray,clone(),Object,Returns a clone of this SerialArray.,"

clone
public Object clone()
Returns a clone of this SerialArray. The copy will contain a
 reference to a clone of the underlying objects array, not a reference
 to the original underlying object array of this SerialArray object.

Overrides:
clone in class Object
Returns:
a clone of this SerialArray
See Also:
Cloneable


"
SerialArray,equals(Object obj),boolean,Compares this SerialArray to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialArray to the specified object.  The result is true if and only if the argument is not null and is a SerialArray object whose elements are identical to this object's elements

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialArray against
Returns:
true if the given object represents a SerialArray
          equivalent to this SerialArray, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialArray,free(),void,This method frees the SeriableArray object and releases the resources that it holds.,"

free
public void free()
          throws SQLException
This method frees the SeriableArray object and releases the
 resources that it holds. The object is invalid once the free
 method is called.  If free is called multiple times, the
 subsequent calls to free are treated as a no-op. 

Specified by:
free in interface Array
Throws:
SQLException - if an error occurs releasing the SerialArray's resources
Since:
1.6


"
SerialArray,getArray(),Object,Returns a new array that is a copy of this SerialArray object.,"

getArray
public Object getArray()
                throws SerialException
Returns a new array that is a copy of this SerialArray
 object.

Specified by:
getArray in interface Array
Returns:
a copy of this SerialArray object as an
         Object in the Java programming language
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,"getArray(long index, int count)",Object,"Returns a new array that is a copy of a slice of this SerialArray object, starting with the element at the given index and containing the given number of consecutive elements.","

getArray
public Object getArray(long index,
                       int count)
                throws SerialException
Returns a new array that is a copy of a slice
 of this SerialArray object, starting with the
 element at the given index and containing the given number
 of consecutive elements.

Specified by:
getArray in interface Array
Parameters:
index - the index into this SerialArray object
              of the first element to be copied;
              the index of the first element is 0
count - the number of consecutive elements to be copied, starting
              at the given index
Returns:
a copy of the designated elements in this SerialArray
         object as an Object in the Java programming language
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,"getArray(long index, int count, Map<String,Class<?>> map)",Object,"Returns a new array that is a copy of a slice of this SerialArray object, starting with the element at the given index and containing the given number of consecutive elements.","

getArray
public Object getArray(long index,
                       int count,
                       Map<String,Class<?>> map)
                throws SerialException
Returns a new array that is a copy of a slice
 of this SerialArray object, starting with the
 element at the given index and containing the given number
 of consecutive elements.
 
 This method does custom mapping if the array elements are a UDT
 and the given type map has an entry for that UDT.
 Custom mapping is recursive,
 meaning that if, for instance, an element of an SQL structured type
 is an SQL structured type that itself has an element that is an SQL
 structured type, each structured type that has a custom mapping will be
 mapped according to the given type map.

Specified by:
getArray in interface Array
Parameters:
index - the index into this SerialArray object
              of the first element to be copied; the index of the
              first element in the array is 0
count - the number of consecutive elements to be copied, starting
              at the given index
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
a copy of the designated elements in this SerialArray
         object as an Object in the Java programming language
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,"getArray(Map<String,Class<?>> map)",Object,"Returns a new array that is a copy of this SerialArray object, using the given type map for the custom mapping of each element when the elements are SQL UDTs.","

getArray
public Object getArray(Map<String,Class<?>> map)
                throws SerialException
Returns a new array that is a copy of this SerialArray
 object, using the given type map for the custom
 mapping of each element when the elements are SQL UDTs.
 
 This method does custom mapping if the array elements are a UDT
 and the given type map has an entry for that UDT.
 Custom mapping is recursive,
 meaning that if, for instance, an element of an SQL structured type
 is an SQL structured type that itself has an element that is an SQL
 structured type, each structured type that has a custom mapping will be
 mapped according to the given type map.

Specified by:
getArray in interface Array
Parameters:
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
a copy of this SerialArray object as an
         Object in the Java programming language
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,getBaseType(),int,Retrieves the SQL type of the elements in this SerialArray object.,"

getBaseType
public int getBaseType()
                throws SerialException
Retrieves the SQL type of the elements in this SerialArray
 object.  The int returned is one of the constants in the class
 java.sql.Types.

Specified by:
getBaseType in interface Array
Returns:
one of the constants in java.sql.Types, indicating
         the SQL type of the elements in this SerialArray object
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,getBaseTypeName(),String,Retrieves the DBMS-specific type name for the elements in this SerialArray object.,"

getBaseTypeName
public String getBaseTypeName()
                       throws SerialException
Retrieves the DBMS-specific type name for the elements in this
 SerialArray object.

Specified by:
getBaseTypeName in interface Array
Returns:
the SQL type name used by the DBMS for the base type of this
         SerialArray object
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialArray,getResultSet(),ResultSet,Retrieves a ResultSet object that contains all of the elements in the ARRAY value that this SerialArray object represents.,"

getResultSet
public ResultSet getResultSet()
                       throws SerialException
Retrieves a ResultSet object that contains all of
 the elements in the ARRAY value that this
 SerialArray object represents.
 If appropriate, the elements of the array are mapped using the connection's
 type map; otherwise, the standard mapping is used.

Specified by:
getResultSet in interface Array
Returns:
a ResultSet object containing all of the
         elements in this SerialArray object, with a
         separate row for each element
Throws:
SerialException - if called with the cause set to
         UnsupportedOperationException


"
SerialArray,"getResultSet(long index, int count)",ResultSet,Retrieves a ResultSet object holding the elements of the subarray that starts at index index and contains up to count successive elements.,"

getResultSet
public ResultSet getResultSet(long index,
                              int count)
                       throws SerialException
Retrieves a ResultSet object holding the elements of
 the subarray that starts at
 index index and contains up to count successive elements.
 This method uses the connection's type map to map the elements of
 the array if the map contains
 an entry for the base type. Otherwise, the standard mapping is used.

Specified by:
getResultSet in interface Array
Parameters:
index - the index into this SerialArray object
         of the first element to be copied; the index of the
         first element in the array is 0
count - the number of consecutive elements to be copied, starting
         at the given index
Returns:
a ResultSet object containing the designated
         elements in this SerialArray object, with a
         separate row for each element
Throws:
SerialException - if called with the cause set to
         UnsupportedOperationException


"
SerialArray,"getResultSet(long index, int count, Map<String,Class<?>> map)",ResultSet,"Retrieves a result set holding the elements of the subarray that starts at Retrieves a ResultSet object that contains a subarray of the elements in this SerialArray object, starting at index index and containing up to count successive elements.","

getResultSet
public ResultSet getResultSet(long index,
                              int count,
                              Map<String,Class<?>> map)
                       throws SerialException
Retrieves a result set holding the elements of the subarray that starts at
 Retrieves a ResultSet object that contains a subarray of the
 elements in this SerialArray object, starting at
 index index and containing up to count successive
 elements. This method uses
 the specified map for type map customizations unless the base type of the
 array does not match a user-defined type (UDT) in map, in
 which case it uses the
 standard mapping. This version of the method getResultSet uses
 either the given type map or the standard mapping; it never uses the type
 map associated with the connection.

Specified by:
getResultSet in interface Array
Parameters:
index - the index into this SerialArray object
              of the first element to be copied; the index of the
              first element in the array is 0
count - the number of consecutive elements to be copied, starting
              at the given index
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
a ResultSet object containing the designated
         elements in this SerialArray object, with a
         separate row for each element
Throws:
SerialException - if called with the cause set to
         UnsupportedOperationException


"
SerialArray,"getResultSet(Map<String,Class<?>> map)",ResultSet,Retrieves a ResultSet object that contains all of the elements of the SQL ARRAY value represented by this SerialArray object.,"

getResultSet
public ResultSet getResultSet(Map<String,Class<?>> map)
                       throws SerialException
Retrieves a ResultSet object that contains all of
 the elements of the SQL ARRAY
 value represented by this SerialArray object. This method uses
 the specified map for type map customizations unless the base type of the
 array does not match a user-defined type (UDT) in map, in
 which case it uses the
 standard mapping. This version of the method getResultSet
 uses either the given type map or the standard mapping; it never uses the
 type map associated with the connection.

Specified by:
getResultSet in interface Array
Parameters:
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
a ResultSet object containing all of the
         elements in this SerialArray object, with a
         separate row for each element
Throws:
SerialException - if called with the cause set to
         UnsupportedOperationException


"
SerialArray,hashCode(),int,Returns a hash code for this SerialArray.,"

hashCode
public int hashCode()
Returns a hash code for this SerialArray. The hash code for a
 SerialArray object is computed using the hash codes
 of the elements of the  SerialArray object

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialBlob,clone(),Object,Returns a clone of this SerialBlob.,"

clone
public Object clone()
Returns a clone of this SerialBlob. The copy will contain a
 reference to a clone of the internal byte array, not a reference
 to the original internal byte array of this SerialBlob object.
 The underlying Blob object will be set to null.

Overrides:
clone in class Object
Returns:
a clone of this SerialBlob
See Also:
Cloneable


"
SerialBlob,equals(Object obj),boolean,Compares this SerialBlob to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialBlob to the specified object.  The result is true if and only if the argument is not null and is a SerialBlob object that represents the same sequence of bytes as this
 object.

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialBlob against
Returns:
true if the given object represents a SerialBlob
          equivalent to this SerialBlob, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialBlob,free(),void,This method frees the SeriableBlob object and releases the resources that it holds.,"

free
public void free()
          throws SQLException
This method frees the SeriableBlob object and releases the
 resources that it holds. The object is invalid once the free
 method is called.  If free is called multiple times, the
 subsequent calls to free are treated as a no-op. 

Specified by:
free in interface Blob
Throws:
SQLException - if an error occurs releasing the Blob's resources
Since:
1.6


"
SerialBlob,getBinaryStream(),InputStream,Returns this SerialBlob object as an input stream.,"

getBinaryStream
public InputStream getBinaryStream()
                            throws SerialException
Returns this SerialBlob object as an input stream.
 Unlike the related method, setBinaryStream,
 a stream is produced regardless of whether the SerialBlob
 was created with a Blob object or a byte array.

Specified by:
getBinaryStream in interface Blob
Returns:
a java.io.InputStream object that contains
         this SerialBlob object's array of bytes
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object
See Also:
setBinaryStream(long)


"
SerialBlob,"getBinaryStream(long pos, long length)",InputStream,"Returns an InputStream object that contains a partial Blob value, starting with the byte specified by pos, which is length bytes in length.","

getBinaryStream
public InputStream getBinaryStream(long pos,
                                   long length)
                            throws SQLException
Returns an
 InputStream object that contains a partial
 Blob value, starting with the byte specified by pos, which is
 length bytes in length.

Specified by:
getBinaryStream in interface Blob
Parameters:
pos - the offset to the first byte of the partial value to be
 retrieved. The first byte in the Blob is at position 1
length - the length in bytes of the partial value to be retrieved
Returns:
InputStream through which the partial Blob value can
 be read.
Throws:
SQLException - if pos is less than 1 or if pos is greater than the
 number of bytes in the Blob or if pos + length is greater than
 the number of bytes in the Blob
SerialException - if the free method had been previously
 called on this object
Since:
1.6


"
SerialBlob,"getBytes(long pos, int length)",byte[],"Copies the specified number of bytes, starting at the given position, from this SerialBlob object to another array of bytes.","

getBytes
public byte[] getBytes(long pos,
                       int length)
                throws SerialException
Copies the specified number of bytes, starting at the given
 position, from this SerialBlob object to
 another array of bytes.
 
 Note that if the given number of bytes to be copied is larger than
 the length of this SerialBlob object's array of
 bytes, the given number will be shortened to the array's length.

Specified by:
getBytes in interface Blob
Parameters:
pos - the ordinal position of the first byte in this
            SerialBlob object to be copied;
            numbering starts at 1; must not be less
            than 1 and must be less than or equal
            to the length of this SerialBlob object
length - the number of bytes to be copied
Returns:
an array of bytes that is a copy of a region of this
         SerialBlob object, starting at the given
         position and containing the given number of consecutive bytes
Throws:
SerialException - if the given starting position is out of bounds;
 if free had previously been called on this object
See Also:
Blob.setBytes(long, byte[])


"
SerialBlob,hashCode(),int,Returns a hash code for this SerialBlob.,"

hashCode
public int hashCode()
Returns a hash code for this SerialBlob.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialBlob,length(),long,Retrieves the number of bytes in this SerialBlob object's array of bytes.,"

length
public long length()
            throws SerialException
Retrieves the number of bytes in this SerialBlob
 object's array of bytes.

Specified by:
length in interface Blob
Returns:
a long indicating the length in bytes of this
         SerialBlob object's array of bytes
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialBlob,"position(Blob pattern, long start)",long,"Returns the position in this SerialBlob object where the given Blob object begins, starting the search at the specified position.","

position
public long position(Blob pattern,
                     long start)
              throws SerialException,
                     SQLException
Returns the position in this SerialBlob object where
 the given Blob object begins, starting the search at the
 specified position.

Specified by:
position in interface Blob
Parameters:
pattern - the Blob object for which to search;
start - the position of the byte in this
              SerialBlob object from which to begin
              the search; the first position is 1;
              must not be less than 1 nor greater than
              the length of this SerialBlob object
Returns:
the position in this SerialBlob object
         where the given Blob object begins, starting
         at the specified position; -1 if the pattern is
         not found or the given starting position is out of bounds;
         position numbering for the return value starts at 1
Throws:
SerialException - if an error occurs when serializing the blob;
 if free had previously been called on this object
SQLException - if there is an error accessing the BLOB
         value from the database


"
SerialBlob,"position(byte[] pattern, long start)",long,"Returns the position in this SerialBlob object where the given pattern of bytes begins, starting the search at the specified position.","

position
public long position(byte[] pattern,
                     long start)
              throws SerialException,
                     SQLException
Returns the position in this SerialBlob object where
 the given pattern of bytes begins, starting the search at the
 specified position.

Specified by:
position in interface Blob
Parameters:
pattern - the pattern of bytes for which to search
start - the position of the byte in this
              SerialBlob object from which to begin
              the search; the first position is 1;
              must not be less than 1 nor greater than
              the length of this SerialBlob object
Returns:
the position in this SerialBlob object
         where the given pattern begins, starting at the specified
         position; -1 if the pattern is not found
         or the given starting position is out of bounds; position
         numbering for the return value starts at 1
Throws:
SerialException - if an error occurs when serializing the blob;
 if free had previously been called on this object
SQLException - if there is an error accessing the BLOB
         value from the database


"
SerialBlob,setBinaryStream(long pos),OutputStream,Retrieves a stream that can be used to write to the BLOB value that this Blob object represents.,"

setBinaryStream
public OutputStream setBinaryStream(long pos)
                             throws SerialException,
                                    SQLException
Retrieves a stream that can be used to write to the BLOB
 value that this Blob object represents.  The stream begins
 at position pos. This method forwards the
 setBinaryStream() call to the underlying Blob in
 the event that this SerialBlob object is instantiated with a
 Blob. If this SerialBlob is instantiated with
 a byte array, a SerialException is thrown.

Specified by:
setBinaryStream in interface Blob
Parameters:
pos - the position in the BLOB value at which
        to start writing
Returns:
a java.io.OutputStream object to which data can
         be written
Throws:
SQLException - if there is an error accessing the
            BLOB value
SerialException - if the SerialBlob in not instantiated with a
     Blob object that supports setBinaryStream();
 if free had previously been called on this object
See Also:
getBinaryStream()


"
SerialBlob,"setBytes(long pos, byte[] bytes)",int,"Writes the given array of bytes to the BLOB value that this Blob object represents, starting at position pos, and returns the number of bytes written.","

setBytes
public int setBytes(long pos,
                    byte[] bytes)
             throws SerialException,
                    SQLException
Writes the given array of bytes to the BLOB value that
 this Blob object represents, starting at position
 pos, and returns the number of bytes written.

Specified by:
setBytes in interface Blob
Parameters:
pos - the position in the SQL BLOB value at which
     to start writing. The first position is 1;
     must not be less than 1 nor greater than
     the length of this SerialBlob object.
bytes - the array of bytes to be written to the BLOB
        value that this Blob object represents
Returns:
the number of bytes written
Throws:
SerialException - if there is an error accessing the
     BLOB value; or if an invalid position is set; if an
     invalid offset value is set;
 if free had previously been called on this object
SQLException - if there is an error accessing the BLOB
         value from the database
See Also:
getBytes(long, int)


"
SerialBlob,"setBytes(long pos, byte[] bytes, int offset, int length)",int,Writes all or part of the given byte array to the BLOB value that this Blob object represents and returns the number of bytes written.,"

setBytes
public int setBytes(long pos,
                    byte[] bytes,
                    int offset,
                    int length)
             throws SerialException,
                    SQLException
Writes all or part of the given byte array to the
 BLOB value that this Blob object represents
 and returns the number of bytes written.
 Writing starts at position pos in the BLOB
 value; len bytes from the given byte array are written.

Specified by:
setBytes in interface Blob
Parameters:
pos - the position in the BLOB object at which
     to start writing. The first position is 1;
     must not be less than 1 nor greater than
     the length of this SerialBlob object.
bytes - the array of bytes to be written to the BLOB
     value
offset - the offset in the byte array at which
     to start reading the bytes. The first offset position is
     0; must not be less than 0 nor greater
     than the length of the byte array
length - the number of bytes to be written to the
     BLOB value from the array of bytes bytes.
Returns:
the number of bytes written
Throws:
SerialException - if there is an error accessing the
     BLOB value; if an invalid position is set; if an
     invalid offset value is set; if number of bytes to be written
     is greater than the SerialBlob length; or the combined
     values of the length and offset is greater than the Blob buffer;
 if free had previously been called on this object
SQLException - if there is an error accessing the BLOB
         value from the database.
See Also:
getBytes(long, int)


"
SerialBlob,truncate(long length),void,Truncates the BLOB value that this Blob object represents to be len bytes in length.,"

truncate
public void truncate(long length)
              throws SerialException
Truncates the BLOB value that this Blob
 object represents to be len bytes in length.

Specified by:
truncate in interface Blob
Parameters:
length - the length, in bytes, to which the BLOB
        value that this Blob object represents should be
        truncated
Throws:
SerialException - if there is an error accessing the Blob value;
     or the length to truncate is greater that the SerialBlob length;
 if free had previously been called on this object


"
SerialClob,clone(),Object,Returns a clone of this SerialClob.,"

clone
public Object clone()
Returns a clone of this SerialClob. The copy will contain a
 reference to a clone of the internal character array, not a reference
 to the original internal character array of this SerialClob object.
 The underlying Clob object will be set to null.

Overrides:
clone in class Object
Returns:
a clone of this SerialClob
See Also:
Cloneable


"
SerialClob,equals(Object obj),boolean,Compares this SerialClob to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialClob to the specified object.  The result is true if and only if the argument is not null and is a SerialClob object that represents the same sequence of characters as this
 object.

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialClob against
Returns:
true if the given object represents a SerialClob
          equivalent to this SerialClob, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialClob,free(),void,This method frees the SeriableClob object and releases the resources that it holds.,"

free
public void free()
          throws SQLException
This method frees the SeriableClob object and releases the
 resources that it holds.
 The object is invalid once the free method is called.
 
 If free is called multiple times, the subsequent
 calls to free are treated as a no-op.
 

Specified by:
free in interface Clob
Throws:
SQLException - if an error occurs releasing
 the Clob's resources
Since:
1.6


"
SerialClob,getAsciiStream(),InputStream,Retrieves the CLOB value designated by this SerialClob object as an ascii stream.,"

getAsciiStream
public InputStream getAsciiStream()
                           throws SerialException,
                                  SQLException
Retrieves the CLOB value designated by this SerialClob
 object as an ascii stream. This method forwards the getAsciiStream
 call to the underlying Clob object in the event that this
 SerialClob object is instantiated with a Clob
 object. If this SerialClob object is instantiated with
 a char array, a SerialException object is thrown.

Specified by:
getAsciiStream in interface Clob
Returns:
a java.io.InputStream object containing
     this SerialClob object's data
Throws:
SerialException - if this SerialClob object was not
 instantiated with a Clob object;
 if free had previously been called on this object
SQLException - if there is an error accessing the
     CLOB value represented by the Clob object
 that was used to create this SerialClob object
See Also:
Clob.setAsciiStream(long)


"
SerialClob,getCharacterStream(),Reader,Returns this SerialClob object's data as a stream of Unicode characters.,"

getCharacterStream
public Reader getCharacterStream()
                          throws SerialException
Returns this SerialClob object's data as a stream
 of Unicode characters. Unlike the related method, getAsciiStream,
 a stream is produced regardless of whether the SerialClob object
 was created with a Clob object or a char array.

Specified by:
getCharacterStream in interface Clob
Returns:
a java.io.Reader object containing this
         SerialClob object's data
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object
See Also:
Clob.setCharacterStream(long)


"
SerialClob,"getCharacterStream(long pos, long length)",Reader,"Returns a Reader object that contains a partial SerialClob value, starting with the character specified by pos, which is length characters in length.","

getCharacterStream
public Reader getCharacterStream(long pos,
                                 long length)
                          throws SQLException
Returns a Reader object that contains a partial
 SerialClob value, starting
 with the character specified by pos, which is length characters in length.

Specified by:
getCharacterStream in interface Clob
Parameters:
pos - the offset to the first character of the partial value to
 be retrieved.  The first character in the SerialClob is at position 1.
length - the length in characters of the partial value to be retrieved.
Returns:
Reader through which the partial SerialClob
 value can be read.
Throws:
SQLException - if pos is less than 1 or if pos is greater than the
 number of characters in the SerialClob or if pos + length
 is greater than the number of characters in the SerialClob;
SerialException - if the free method had been previously
 called on this object
Since:
1.6


"
SerialClob,"getSubString(long pos, int length)",String,"Returns a copy of the substring contained in this SerialClob object, starting at the given position and continuing for the specified number or characters.","

getSubString
public String getSubString(long pos,
                           int length)
                    throws SerialException
Returns a copy of the substring contained in this
 SerialClob object, starting at the given position
 and continuing for the specified number or characters.

Specified by:
getSubString in interface Clob
Parameters:
pos - the position of the first character in the substring
            to be copied; the first character of the
            SerialClob object is at position
            1; must not be less than 1,
            and the sum of the starting position and the length
            of the substring must be less than the length of this
            SerialClob object
length - the number of characters in the substring to be
               returned; must not be greater than the length of
               this SerialClob object, and the
               sum of the starting position and the length
               of the substring must be less than the length of this
               SerialClob object
Returns:
a String object containing a substring of
         this SerialClob object beginning at the
         given position and containing the specified number of
         consecutive characters
Throws:
SerialException - if either of the arguments is out of bounds;
 if free had previously been called on this object


"
SerialClob,hashCode(),int,Returns a hash code for this SerialClob.,"

hashCode
public int hashCode()
Returns a hash code for this SerialClob.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialClob,length(),long,Retrieves the number of characters in this SerialClob object's array of characters.,"

length
public long length()
            throws SerialException
Retrieves the number of characters in this SerialClob
 object's array of characters.

Specified by:
length in interface Clob
Returns:
a long indicating the length in characters of this
         SerialClob object's array of character
Throws:
SerialException - if an error occurs;
 if free had previously been called on this object


"
SerialClob,"position(Clob searchStr, long start)",long,"Returns the position in this SerialClob object where the given Clob signature begins, starting the search at the specified position.","

position
public long position(Clob searchStr,
                     long start)
              throws SerialException,
                     SQLException
Returns the position in this SerialClob object
 where the given Clob signature begins, starting
 the search at the specified position. This method returns
 -1 if the pattern is not found.

Specified by:
position in interface Clob
Parameters:
searchStr - the Clob object for which to search
start - the position in this SerialClob object
        at which to begin the search; the first position is
         1; must not be less than 1 nor
         greater than the length of this SerialClob object
Returns:
the position at which the given Clob
         object begins in this SerialClob object,
         at or after the specified starting position
Throws:
SerialException - if an error occurs locating the Clob signature;
 if the free method had been previously called on this object
SQLException - if there is an error accessing the Clob value
         from the database


"
SerialClob,"position(String searchStr, long start)",long,"Returns the position in this SerialClob object where the given String object begins, starting the search at the specified position.","

position
public long position(String searchStr,
                     long start)
              throws SerialException,
                     SQLException
Returns the position in this SerialClob object
 where the given String object begins, starting
 the search at the specified position. This method returns
 -1 if the pattern is not found.

Specified by:
position in interface Clob
Parameters:
searchStr - the String object for which to
                  search
start - the position in this SerialClob object
         at which to start the search; the first position is
         1; must not be less than 1 nor
         greater than the length of this SerialClob object
Returns:
the position at which the given String object
         begins, starting the search at the specified position;
         -1 if the given String object is
         not found or the starting position is out of bounds; position
         numbering for the return value starts at 1
Throws:
SerialException - if the free method had been
 previously called on this object
SQLException - if there is an error accessing the Clob value
         from the database.


"
SerialClob,setAsciiStream(long pos),OutputStream,"Retrieves a stream to be used to write Ascii characters to the CLOB value that this SerialClob object represents, starting at position pos.","

setAsciiStream
public OutputStream setAsciiStream(long pos)
                            throws SerialException,
                                   SQLException
Retrieves a stream to be used to write Ascii characters to the
 CLOB value that this SerialClob object represents,
 starting at position pos. This method forwards the
 setAsciiStream() call to the underlying Clob object in
 the event that this SerialClob object is instantiated with a
 Clob object. If this SerialClob object is instantiated
  with a char array, a SerialException object is thrown.

Specified by:
setAsciiStream in interface Clob
Parameters:
pos - the position at which to start writing to the
        CLOB object
Returns:
the stream to which ASCII encoded characters can be written
Throws:
SerialException - if SerialClob is not instantiated with a
     Clob object;
 if the free method had been previously called on this object
SQLException - if there is an error accessing the
     CLOB value
See Also:
getAsciiStream()


"
SerialClob,setCharacterStream(long pos),Writer,"Retrieves a stream to be used to write a stream of Unicode characters to the CLOB value that this SerialClob object represents, at position pos.","

setCharacterStream
public Writer setCharacterStream(long pos)
                          throws SerialException,
                                 SQLException
Retrieves a stream to be used to write a stream of Unicode characters
 to the CLOB value that this SerialClob object
 represents, at position pos. This method forwards the
 setCharacterStream() call to the underlying Clob
 object in the event that this SerialClob object is instantiated with a
 Clob object. If this SerialClob object is instantiated with
 a char array, a SerialException is thrown.

Specified by:
setCharacterStream in interface Clob
Parameters:
pos - the position at which to start writing to the
        CLOB value
Returns:
a stream to which Unicode encoded characters can be written
Throws:
SerialException - if the SerialClob is not instantiated with
     a Clob object;
 if the free method had been previously called on this object
SQLException - if there is an error accessing the
            CLOB value
See Also:
getCharacterStream()


"
SerialClob,"setString(long pos, String str)",int,"Writes the given Java String to the CLOB value that this SerialClob object represents, at the position pos.","

setString
public int setString(long pos,
                     String str)
              throws SerialException
Writes the given Java String to the CLOB
 value that this SerialClob object represents, at the position
 pos.

Specified by:
setString in interface Clob
Parameters:
pos - the position at which to start writing to the CLOB
         value that this SerialClob object represents; the first
         position is 1; must not be less than 1 nor
         greater than the length of this SerialClob object
str - the string to be written to the CLOB
        value that this SerialClob object represents
Returns:
the number of characters written
Throws:
SerialException - if there is an error accessing the
     CLOB value; if an invalid position is set; if an
     invalid offset value is set; if number of bytes to be written
     is greater than the SerialClob length; or the combined
     values of the length and offset is greater than the Clob buffer;
 if the free method had been previously called on this object


"
SerialClob,"setString(long pos, String str, int offset, int length)",int,"Writes len characters of str, starting at character offset, to the CLOB value that this Clob represents.","

setString
public int setString(long pos,
                     String str,
                     int offset,
                     int length)
              throws SerialException
Writes len characters of str, starting
 at character offset, to the CLOB value
 that this Clob represents.

Specified by:
setString in interface Clob
Parameters:
pos - the position at which to start writing to the CLOB
         value that this SerialClob object represents; the first
         position is 1; must not be less than 1 nor
         greater than the length of this SerialClob object
str - the string to be written to the CLOB
        value that this Clob object represents
offset - the offset into str to start reading
        the characters to be written
length - the number of characters to be written
Returns:
the number of characters written
Throws:
SerialException - if there is an error accessing the
     CLOB value; if an invalid position is set; if an
     invalid offset value is set; if number of bytes to be written
     is greater than the SerialClob length; or the combined
     values of the length and offset is greater than the Clob buffer;
 if the free method had been previously called on this object


"
SerialClob,truncate(long length),void,Truncates the CLOB value that this SerialClob object represents so that it has a length of len characters.,"

truncate
public void truncate(long length)
              throws SerialException
Truncates the CLOB value that this SerialClob
 object represents so that it has a length of len
 characters.
 
 Truncating a SerialClob object to length 0 has the effect of
 clearing its contents.

Specified by:
truncate in interface Clob
Parameters:
length - the length, in bytes, to which the CLOB
        value should be truncated
Throws:
SerialException - if there is an error accessing the
        CLOB value;
 if the free method had been previously called on this object


"
SerialDatalink,clone(),Object,Returns a clone of this SerialDatalink.,"

clone
public Object clone()
Returns a clone of this SerialDatalink.

Overrides:
clone in class Object
Returns:
a clone of this SerialDatalink
See Also:
Cloneable


"
SerialDatalink,equals(Object obj),boolean,Compares this SerialDatalink to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialDatalink to the specified object.
 The result is true if and only if the argument is not
 null and is a SerialDatalink object whose URL is
 identical to this object's URL

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialDatalink against
Returns:
true if the given object represents a SerialDatalink
          equivalent to this SerialDatalink, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialDatalink,getDatalink(),URL,Returns a new URL that is a copy of this SerialDatalink object.,"

getDatalink
public URL getDatalink()
                throws SerialException
Returns a new URL that is a copy of this SerialDatalink
 object.

Returns:
a copy of this SerialDatalink object as a
 URL object in the Java programming language.
Throws:
SerialException - if the URL object cannot be de-serialized


"
SerialDatalink,hashCode(),int,Returns a hash code for this SerialDatalink.,"

hashCode
public int hashCode()
Returns a hash code for this SerialDatalink. The hash code for a
 SerialDatalink object is taken as the hash code of
 the URL it stores

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialJavaObject,clone(),Object,Returns a clone of this SerialJavaObject.,"

clone
public Object clone()
Returns a clone of this SerialJavaObject.

Overrides:
clone in class Object
Returns:
a clone of this SerialJavaObject
See Also:
Cloneable


"
SerialJavaObject,equals(Object o),boolean,Compares this SerialJavaObject to the specified object.,"

equals
public boolean equals(Object o)
Compares this SerialJavaObject to the specified object.
 The result is true if and only if the argument
 is not null and is a SerialJavaObject
 object that is identical to this object

Overrides:
equals in class Object
Parameters:
o - The object to compare this SerialJavaObject against
Returns:
true if the given object represents a SerialJavaObject
          equivalent to this SerialJavaObject, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialJavaObject,getFields(),Field[],Returns an array of Field objects that contains each field of the object that this helper class is serializing.,"

getFields
public Field[] getFields()
                  throws SerialException
Returns an array of Field objects that contains each
 field of the object that this helper class is serializing.

Returns:
an array of Field objects
Throws:
SerialException - if an error is encountered accessing
 the serialized object
SecurityException - If a security manager, s, is present
 and the caller's class loader is not the same as or an
 ancestor of the class loader for the class of the
 object being serialized
 and invocation of s.checkPackageAccess() denies access to the package
 of that class.
See Also:
Class.getFields()


"
SerialJavaObject,getObject(),Object,Returns an Object that is a copy of this SerialJavaObject object.,"

getObject
public Object getObject()
                 throws SerialException
Returns an Object that is a copy of this SerialJavaObject
 object.

Returns:
a copy of this SerialJavaObject object as an
         Object in the Java programming language
Throws:
SerialException - if the instance is corrupt


"
SerialJavaObject,hashCode(),int,Returns a hash code for this SerialJavaObject.,"

hashCode
public int hashCode()
Returns a hash code for this SerialJavaObject. The hash code for a
 SerialJavaObject object is taken as the hash code of
 the Object it stores

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialRef,clone(),Object,Returns a clone of this SerialRef.,"

clone
public Object clone()
Returns a clone of this SerialRef.
 The underlying Ref object will be set to null.

Overrides:
clone in class Object
Returns:
a clone of this SerialRef
See Also:
Cloneable


"
SerialRef,equals(Object obj),boolean,Compares this SerialRef to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialRef to the specified object.  The result is true if and only if the argument is not null and is a SerialRef object that represents the same object as this
 object.

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialRef against
Returns:
true if the given object represents a SerialRef
          equivalent to this SerialRef, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialRef,getBaseTypeName(),String,Returns a string describing the base type name of the Ref.,"

getBaseTypeName
public String getBaseTypeName()
                       throws SerialException
Returns a string describing the base type name of the Ref.

Specified by:
getBaseTypeName in interface Ref
Returns:
a string of the base type name of the Ref
Throws:
SerialException - in no Ref object has been set


"
SerialRef,getObject(),Object,Returns an Object representing the SQL structured type to which this SerialRef object refers.,"

getObject
public Object getObject()
                 throws SerialException
Returns an Object representing the SQL structured type
 to which this SerialRef object refers.

Specified by:
getObject in interface Ref
Returns:
an object instance resolved from the Ref reference
Throws:
SerialException - if an error is encountered in the reference
         resolution
See Also:
Ref.setObject(java.lang.Object)


"
SerialRef,"getObject(Map<String,Class<?>> map)",Object,Returns an Object representing the SQL structured type to which this SerialRef object refers.,"

getObject
public Object getObject(Map<String,Class<?>> map)
                 throws SerialException
Returns an Object representing the SQL structured type
 to which this SerialRef object refers.  The attributes
 of the structured type are mapped according to the given type map.

Specified by:
getObject in interface Ref
Parameters:
map - a java.util.Map object containing zero or
        more entries, with each entry consisting of 1) a String
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
an object instance resolved from the Ref reference and mapped
        according to the supplied type map
Throws:
SerialException - if an error is encountered in the reference
        resolution
See Also:
Ref.setObject(java.lang.Object)


"
SerialRef,hashCode(),int,Returns a hash code for this SerialRef.,"

hashCode
public int hashCode()
Returns a hash code for this SerialRef.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SerialRef,setObject(Object obj),void,Sets the SQL structured type that this SerialRef object references to the given Object object.,"

setObject
public void setObject(Object obj)
               throws SerialException
Sets the SQL structured type that this SerialRef object
 references to the given Object object.

Specified by:
setObject in interface Ref
Parameters:
obj - an Object representing the SQL structured type
        to be referenced
Throws:
SerialException - if an error is encountered generating the
 the structured type referenced by this SerialRef object
See Also:
Ref.getObject(), 
Ref.getObject(Map), 
PreparedStatement.setObject(int, Object), 
CallableStatement.setObject(String, Object)


"
SerialStruct,clone(),Object,Returns a clone of this SerialStruct.,"

clone
public Object clone()
Returns a clone of this SerialStruct. The copy will contain a
 reference to a clone of the underlying attribs array, not a reference
 to the original underlying attribs array of this SerialStruct object.

Overrides:
clone in class Object
Returns:
a clone of this SerialStruct
See Also:
Cloneable


"
SerialStruct,equals(Object obj),boolean,Compares this SerialStruct to the specified object.,"

equals
public boolean equals(Object obj)
Compares this SerialStruct to the specified object.  The result is
 true if and only if the argument is not null and is a
 SerialStruct object whose attributes are identical to this
 object's attributes

Overrides:
equals in class Object
Parameters:
obj - The object to compare this SerialStruct against
Returns:
true if the given object represents a SerialStruct
          equivalent to this SerialStruct, false otherwise
See Also:
Object.hashCode(), 
HashMap


"
SerialStruct,getAttributes(),Object[],Retrieves an array of Object values containing the attributes of the SQL structured type that this SerialStruct object represents.,"

getAttributes
public Object[] getAttributes()
                       throws SerialException
Retrieves an array of Object values containing the
 attributes of the SQL structured type that this
 SerialStruct object represents.

Specified by:
getAttributes in interface Struct
Returns:
an array of Object values, with each
         element being an attribute of the SQL structured type
         that this SerialStruct object represents
Throws:
SerialException - if an error occurs


"
SerialStruct,"getAttributes(Map<String,Class<?>> map)",Object[],"Retrieves the attributes for the SQL structured type that this SerialStruct represents as an array of Object values, using the given type map for custom mapping if appropriate.","

getAttributes
public Object[] getAttributes(Map<String,Class<?>> map)
                       throws SerialException
Retrieves the attributes for the SQL structured type that
 this SerialStruct represents as an array of
 Object values, using the given type map for
 custom mapping if appropriate.

Specified by:
getAttributes in interface Struct
Parameters:
map - a java.util.Map object in which
        each entry consists of 1) a String object
        giving the fully qualified name of a UDT and 2) the
        Class object for the SQLData implementation
        that defines how the UDT is to be mapped
Returns:
an array of Object values, with each
         element being an attribute of the SQL structured
         type that this SerialStruct object
         represents
Throws:
SerialException - if an error occurs


"
SerialStruct,getSQLTypeName(),String,Retrieves the SQL type name for this SerialStruct object.,"

getSQLTypeName
public String getSQLTypeName()
                      throws SerialException
Retrieves the SQL type name for this SerialStruct
 object. This is the name used in the SQL definition of the
 structured type

Specified by:
getSQLTypeName in interface Struct
Returns:
a String object representing the SQL
         type name for the SQL structured type that this
         SerialStruct object represents
Throws:
SerialException - if an error occurs


"
SerialStruct,hashCode(),int,Returns a hash code for this SerialStruct.,"

hashCode
public int hashCode()
Returns a hash code for this SerialStruct. The hash code for a
 SerialStruct object is computed using the hash codes
 of the attributes of the SerialStruct object and its
 SQLTypeName

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SQLInputImpl,readArray(),Array,Reads an SQL ARRAY value from the stream and returns it as an Array object in the Java programming language.,"

readArray
public Array readArray()
                throws SQLException
Reads an SQL ARRAY value from the stream and
 returns it as an Array object in the Java programming
 language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readArray in interface SQLInput
Returns:
an Array object representing the SQL
         ARRAY value at the head of the stream; *
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readAsciiStream(),InputStream,Returns the next attribute in this SQLInputImpl object as a stream of ASCII characters.,"

readAsciiStream
public InputStream readAsciiStream()
                            throws SQLException
Returns the next attribute in this SQLInputImpl object
 as a stream of ASCII characters.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readAsciiStream in interface SQLInput
Returns:
the attribute; if the value is SQL NULL,
 return null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readBigDecimal(),BigDecimal,Retrieves the next attribute in this SQLInputImpl object as a java.math.BigDecimal.,"

readBigDecimal
public BigDecimal readBigDecimal()
                          throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a java.math.BigDecimal.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readBigDecimal in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readBinaryStream(),InputStream,Returns the next attribute in this SQLInputImpl object as a stream of uninterpreted bytes.,"

readBinaryStream
public InputStream readBinaryStream()
                             throws SQLException
Returns the next attribute in this SQLInputImpl object
 as a stream of uninterpreted bytes.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readBinaryStream in interface SQLInput
Returns:
the attribute; if the value is SQL NULL, return
 null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readBlob(),Blob,Retrieves the BLOB value at the head of this SQLInputImpl object as a Blob object in the Java programming language.,"

readBlob
public Blob readBlob()
              throws SQLException
Retrieves the BLOB value at the head of this
 SQLInputImpl object as a Blob object
 in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readBlob in interface SQLInput
Returns:
a Blob object representing the SQL
         BLOB value at the head of this stream;
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readBoolean(),boolean,Retrieves the next attribute in this SQLInputImpl object as a boolean in the Java programming language.,"

readBoolean
public boolean readBoolean()
                    throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a boolean in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData
 implementation.
 

Specified by:
readBoolean in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
     if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
     position or if there are no further values in the stream.


"
SQLInputImpl,readByte(),byte,Retrieves the next attribute in this SQLInputImpl object as a byte in the Java programming language.,"

readByte
public byte readByte()
              throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a byte in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData
 implementation.
 

Specified by:
readByte in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
     if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
     position or if there are no further values in the stream


"
SQLInputImpl,readBytes(),byte[],Retrieves the next attribute in this SQLInputImpl object as an array of bytes.,"

readBytes
public byte[] readBytes()
                 throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as an array of bytes.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readBytes in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readCharacterStream(),Reader,Retrieves the next attribute in this SQLInputImpl object as a stream of Unicode characters.,"

readCharacterStream
public Reader readCharacterStream()
                           throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a stream of Unicode characters.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readCharacterStream in interface SQLInput
Returns:
the attribute; if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readClob(),Clob,Retrieves the CLOB value at the head of this SQLInputImpl object as a Clob object in the Java programming language.,"

readClob
public Clob readClob()
              throws SQLException
Retrieves the CLOB value at the head of this
 SQLInputImpl object as a Clob object
 in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readClob in interface SQLInput
Returns:
a Clob object representing the SQL
         CLOB value at the head of the stream;
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readDate(),Date,Retrieves the next attribute in this SQLInputImpl as a java.sql.Date object.,"

readDate
public Date readDate()
              throws SQLException
Retrieves the next attribute in this SQLInputImpl as
 a java.sql.Date object.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readDate in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readDouble(),double,Retrieves the next attribute in this SQLInputImpl object as a double in the Java programming language.,"

readDouble
public double readDouble()
                  throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a double in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readDouble in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readFloat(),float,Retrieves the next attribute in this SQLInputImpl object as a float in the Java programming language.,"

readFloat
public float readFloat()
                throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a float in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readFloat in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readInt(),int,Retrieves the next attribute in this SQLInputImpl object as an int in the Java programming language.,"

readInt
public int readInt()
            throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as an int in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readInt in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readLong(),long,Retrieves the next attribute in this SQLInputImpl object as a long in the Java programming language.,"

readLong
public long readLong()
              throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a long in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readLong in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readNClob(),NClob,Reads an SQL NCLOB value from the stream and returns it as a Clob object in the Java programming language.,"

readNClob
public NClob readNClob()
                throws SQLException
Reads an SQL NCLOB value from the stream and returns it as a
 Clob object in the Java programming language.

Specified by:
readNClob in interface SQLInput
Returns:
a NClob object representing data of the SQL NCLOB value
 at the head of the stream; null if the value read is
 SQL NULL
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLInputImpl,readNString(),String,Reads the next attribute in the stream and returns it as a String in the Java programming language.,"

readNString
public String readNString()
                   throws SQLException
Reads the next attribute in the stream and returns it as a String
 in the Java programming language. It is intended for use when
 accessing  NCHAR,NVARCHAR
 and LONGNVARCHAR columns.

Specified by:
readNString in interface SQLInput
Returns:
the attribute; if the value is SQL NULL, returns null
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLInputImpl,readObject(),Object,Retrieves the value at the head of this SQLInputImpl object as an Object in the Java programming language.,"

readObject
public Object readObject()
                  throws SQLException
Retrieves the value at the head of this SQLInputImpl
 object as an Object in the Java programming language.  The
 actual type of the object returned is determined by the default
 mapping of SQL types to types in the Java programming language unless
 there is a custom mapping, in which case the type of the object
 returned is determined by this stream's type map.
 
 The JDBC technology-enabled driver registers a type map with the stream
 before passing the stream to the application.
 
 When the datum at the head of the stream is an SQL NULL,
 this method returns null.  If the datum is an SQL
 structured or distinct type with a custom mapping, this method
 determines the SQL type of the datum at the head of the stream,
 constructs an object of the appropriate class, and calls the method
 SQLData.readSQL on that object. The readSQL
 method then calls the appropriate SQLInputImpl.readXXX
 methods to retrieve the attribute values from the stream.

Specified by:
readObject in interface SQLInput
Returns:
the value at the head of the stream as an Object
         in the Java programming language; null if
         the value is SQL NULL
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readRef(),Ref,Retrieves the value at the head of this SQLInputImpl object as a Ref object in the Java programming language.,"

readRef
public Ref readRef()
            throws SQLException
Retrieves the value at the head of this SQLInputImpl object
 as a Ref object in the Java programming language.

Specified by:
readRef in interface SQLInput
Returns:
a Ref object representing the SQL
         REF value at the head of the stream; if the value
         is SQL NULL return null
Throws:
SQLException - if the read position is located at an invalid
         position; or if there are no further values in the stream.


"
SQLInputImpl,readRowId(),RowId,Reads an SQL ROWID value from the stream and returns it as a RowId object in the Java programming language.,"

readRowId
public RowId readRowId()
                throws SQLException
Reads an SQL ROWID value from the stream and returns it as a
 RowId object in the Java programming language.

Specified by:
readRowId in interface SQLInput
Returns:
a RowId object representing data of the SQL ROWID value
 at the head of the stream; null if the value read is
 SQL NULL
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLInputImpl,readShort(),short,Retrieves the next attribute in this SQLInputImpl object as a short in the Java programming language.,"

readShort
public short readShort()
                throws SQLException
Retrieves the next attribute in this SQLInputImpl object
 as a short in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData implementation.
 

Specified by:
readShort in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
       if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
       position or if there are no more values in the stream


"
SQLInputImpl,readSQLXML(),SQLXML,Reads an SQL XML value from the stream and returns it as a SQLXML object in the Java programming language.,"

readSQLXML
public SQLXML readSQLXML()
                  throws SQLException
Reads an SQL XML value from the stream and returns it as a
 SQLXML object in the Java programming language.

Specified by:
readSQLXML in interface SQLInput
Returns:
a SQLXML object representing data of the SQL XML value
 at the head of the stream; null if the value read is
 SQL NULL
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLInputImpl,readString(),String,Retrieves the next attribute in this SQLInputImpl object as a String in the Java programming language.,"

readString
public String readString()
                  throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a String in the Java programming language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type; this responsibility is delegated
 to the UDT mapping as defined by a SQLData
 implementation.
 

Specified by:
readString in interface SQLInput
Returns:
the next attribute in this SQLInputImpl object;
     if the value is SQL NULL, return null
Throws:
SQLException - if the read position is located at an invalid
     position or if there are no further values in the stream.


"
SQLInputImpl,readTime(),Time,Retrieves the next attribute in this SQLInputImpl object as a java.sql.Time object.,"

readTime
public Time readTime()
              throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a java.sql.Time object.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readTime in interface SQLInput
Returns:
the attribute; if the value is SQL NULL, return
 null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readTimestamp(),Timestamp,Retrieves the next attribute in this SQLInputImpl object as a java.sql.Timestamp object.,"

readTimestamp
public Timestamp readTimestamp()
                        throws SQLException
Retrieves the next attribute in this SQLInputImpl object as
 a java.sql.Timestamp object.

Specified by:
readTimestamp in interface SQLInput
Returns:
the attribute; if the value is SQL NULL, return
 null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,readURL(),URL,Reads an SQL DATALINK value from the stream and returns it as an URL object in the Java programming language.,"

readURL
public URL readURL()
            throws SQLException
Reads an SQL DATALINK value from the stream and
 returns it as an URL object in the Java programming
 language.
 
 This method does not perform type-safe checking to determine if the
 returned type is the expected type as this responsibility is delegated
 to the UDT mapping as implemented by a SQLData
 implementation.

Specified by:
readURL in interface SQLInput
Returns:
an URL object representing the SQL
         DATALINK value at the head of the stream; *
         if the value is SQL NULL, return
         null
Throws:
SQLException - if the read position is located at an invalid
 position; or if there are no further values in the stream.


"
SQLInputImpl,wasNull(),boolean,Ascertains whether the last value read from this SQLInputImpl object was null.,"

wasNull
public boolean wasNull()
                throws SQLException
Ascertains whether the last value read from this
 SQLInputImpl object was null.

Specified by:
wasNull in interface SQLInput
Returns:
true if the SQL value read most recently was
         null; otherwise, false; by default it
         will return false
Throws:
SQLException - if an error occurs determining the last value
         read was a null value or not;


"
SQLOutputImpl,writeArray(Array x),void,Writes an Array object in the Java programming language to this SQLOutputImpl object.,"

writeArray
public void writeArray(Array x)
                throws SQLException
Writes an Array object in the Java
 programming language to this SQLOutputImpl
 object. The driver converts this value to a serializable
 SerialArray SQL ARRAY
 value before returning it to the database.

Specified by:
writeArray in interface SQLOutput
Parameters:
x - an object representing an SQL ARRAY value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeAsciiStream(InputStream x),void,Writes a stream of ASCII characters to this SQLOutputImpl object.,"

writeAsciiStream
public void writeAsciiStream(InputStream x)
                      throws SQLException
Writes a stream of ASCII characters to this
 SQLOutputImpl object. The driver will do any necessary
 conversion from ASCII to the database CHAR format.

Specified by:
writeAsciiStream in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeBigDecimal(BigDecimal x),void,Writes a java.math.BigDecimal object in the Java programming language to this SQLOutputImpl object.,"

writeBigDecimal
public void writeBigDecimal(BigDecimal x)
                     throws SQLException
Writes a java.math.BigDecimal object in the Java programming
 language to this SQLOutputImpl object. The driver converts
 it to an SQL NUMERIC before returning it to the database.

Specified by:
writeBigDecimal in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeBinaryStream(InputStream x),void,Writes a stream of uninterpreted bytes to this SQLOutputImpl object.,"

writeBinaryStream
public void writeBinaryStream(InputStream x)
                       throws SQLException
Writes a stream of uninterpreted bytes to this SQLOutputImpl
 object.

Specified by:
writeBinaryStream in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeBlob(Blob x),void,Writes a Blob object in the Java programming language to this SQLOutputImpl object.,"

writeBlob
public void writeBlob(Blob x)
               throws SQLException
Writes a Blob object in the Java programming language
 to this SQLOutputImpl object.  The driver converts
 it to a serializable SerialBlob SQL BLOB value
 before returning it to the database.

Specified by:
writeBlob in interface SQLOutput
Parameters:
x - an object representing an SQL BLOB value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeBoolean(boolean x),void,Writes a boolean in the Java programming language to this SQLOutputImpl object.,"

writeBoolean
public void writeBoolean(boolean x)
                  throws SQLException
Writes a boolean in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL BIT before returning it to the database.

Specified by:
writeBoolean in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeByte(byte x),void,Writes a byte in the Java programming language to this SQLOutputImpl object.,"

writeByte
public void writeByte(byte x)
               throws SQLException
Writes a byte in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL BIT before returning it to the database.

Specified by:
writeByte in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeBytes(byte[] x),void,Writes an array of bytes in the Java programming language to this SQLOutputImpl object.,"

writeBytes
public void writeBytes(byte[] x)
                throws SQLException
Writes an array of bytes in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL VARBINARY or LONGVARBINARY
 before returning it to the database.

Specified by:
writeBytes in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeCharacterStream(Reader x),void,Writes a stream of Unicode characters to this SQLOutputImpl object.,"

writeCharacterStream
public void writeCharacterStream(Reader x)
                          throws SQLException
Writes a stream of Unicode characters to this
 SQLOutputImpl object. The driver will do any necessary
 conversion from Unicode to the database CHAR format.

Specified by:
writeCharacterStream in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeClob(Clob x),void,Writes a Clob object in the Java programming language to this SQLOutputImpl object.,"

writeClob
public void writeClob(Clob x)
               throws SQLException
Writes a Clob object in the Java programming language
 to this SQLOutputImpl object.  The driver converts
 it to a serializable SerialClob SQL CLOB value
 before returning it to the database.

Specified by:
writeClob in interface SQLOutput
Parameters:
x - an object representing an SQL CLOB value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeDate(Date x),void,Writes a java.sql.Date object in the Java programming language to this SQLOutputImpl object.,"

writeDate
public void writeDate(Date x)
               throws SQLException
Writes a java.sql.Date object in the Java programming
 language to this SQLOutputImpl object. The driver converts
 it to an SQL DATE before returning it to the database.

Specified by:
writeDate in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeDouble(double x),void,Writes a double in the Java programming language to this SQLOutputImpl object.,"

writeDouble
public void writeDouble(double x)
                 throws SQLException
Writes a double in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL DOUBLE before returning it to the database.

Specified by:
writeDouble in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeFloat(float x),void,Writes a float in the Java programming language to this SQLOutputImpl object.,"

writeFloat
public void writeFloat(float x)
                throws SQLException
Writes a float in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL REAL before returning it to the database.

Specified by:
writeFloat in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeInt(int x),void,Writes an int in the Java programming language to this SQLOutputImpl object.,"

writeInt
public void writeInt(int x)
              throws SQLException
Writes an int in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL INTEGER before returning it to the database.

Specified by:
writeInt in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeLong(long x),void,Writes a long in the Java programming language to this SQLOutputImpl object.,"

writeLong
public void writeLong(long x)
               throws SQLException
Writes a long in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL BIGINT before returning it to the database.

Specified by:
writeLong in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeNClob(NClob x),void,Writes an SQL NCLOB value to the stream.,"

writeNClob
public void writeNClob(NClob x)
                throws SQLException
Writes an SQL NCLOB value to the stream.

Specified by:
writeNClob in interface SQLOutput
Parameters:
x - a NClob object representing data of an SQL
 NCLOB value
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLOutputImpl,writeNString(String x),void,Writes the next attribute to the stream as a String in the Java programming language.,"

writeNString
public void writeNString(String x)
                  throws SQLException
Writes the next attribute to the stream as a String
 in the Java programming language. The driver converts this to a
 SQL NCHAR or
 NVARCHAR or LONGNVARCHAR value
 (depending on the argument's
 size relative to the driver's limits on NVARCHAR values)
 when it sends it to the stream.

Specified by:
writeNString in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLOutputImpl,writeObject(SQLData x),void,Writes to the stream the data contained in the given SQLData object.,"

writeObject
public void writeObject(SQLData x)
                 throws SQLException
Writes to the stream the data contained in the given
 SQLData object.
 When the SQLData object is null, this
 method writes an SQL NULL to the stream.
 Otherwise, it calls the SQLData.writeSQL
 method of the given object, which
 writes the object's attributes to the stream.
 
 The implementation of the method SQLData.writeSQ
 calls the appropriate SQLOutputImpl.writeXXX method(s)
 for writing each of the object's attributes in order.
 The attributes must be read from an SQLInput
 input stream and written to an SQLOutputImpl
 output stream in the same order in which they were
 listed in the SQL definition of the user-defined type.

Specified by:
writeObject in interface SQLOutput
Parameters:
x - the object representing data of an SQL structured or
          distinct type
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeRef(Ref x),void,Writes a Ref object in the Java programming language to this SQLOutputImpl object.,"

writeRef
public void writeRef(Ref x)
              throws SQLException
Writes a Ref object in the Java programming language
 to this SQLOutputImpl object.  The driver converts
 it to a serializable SerialRef SQL REF value
 before returning it to the database.

Specified by:
writeRef in interface SQLOutput
Parameters:
x - an object representing an SQL REF value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeRowId(RowId x),void,Writes an SQL ROWID value to the stream.,"

writeRowId
public void writeRowId(RowId x)
                throws SQLException
Writes an SQL ROWID value to the stream.

Specified by:
writeRowId in interface SQLOutput
Parameters:
x - a RowId object representing data of an SQL
 ROWID value
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLOutputImpl,writeShort(short x),void,Writes a short in the Java programming language to this SQLOutputImpl object.,"

writeShort
public void writeShort(short x)
                throws SQLException
Writes a short in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL SMALLINT before returning it to the database.

Specified by:
writeShort in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeSQLXML(SQLXML x),void,Writes an SQL XML value to the stream.,"

writeSQLXML
public void writeSQLXML(SQLXML x)
                 throws SQLException
Writes an SQL XML value to the stream.

Specified by:
writeSQLXML in interface SQLOutput
Parameters:
x - a SQLXML object representing data of an SQL
 XML value
Throws:
SQLException - if a database access error occurs
Since:
1.6


"
SQLOutputImpl,writeString(String x),void,Writes a String in the Java programming language to this SQLOutputImpl object.,"

writeString
public void writeString(String x)
                 throws SQLException
Writes a String in the Java programming language
 to this SQLOutputImpl object. The driver converts
 it to an SQL CHAR, VARCHAR, or
 LONGVARCHAR before returning it to the database.

Specified by:
writeString in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeStruct(Struct x),void,Writes a Struct object in the Java programming language to this SQLOutputImpl object.,"

writeStruct
public void writeStruct(Struct x)
                 throws SQLException
Writes a Struct object in the Java
 programming language to this SQLOutputImpl
 object. The driver converts this value to an SQL structured type
 before returning it to the database.
 
 This method should be used when an SQL structured type has been
 mapped to a Struct object in the Java programming
 language (the standard mapping).  The method
 writeObject should be used if an SQL structured type
 has been custom mapped to a class in the Java programming language.

Specified by:
writeStruct in interface SQLOutput
Parameters:
x - an object representing the attributes of an SQL structured type
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeTime(Time x),void,Writes a java.sql.Time object in the Java programming language to this SQLOutputImpl object.,"

writeTime
public void writeTime(Time x)
               throws SQLException
Writes a java.sql.Time object in the Java programming
 language to this SQLOutputImpl object. The driver converts
 it to an SQL TIME before returning it to the database.

Specified by:
writeTime in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeTimestamp(Timestamp x),void,Writes a java.sql.Timestamp object in the Java programming language to this SQLOutputImpl object.,"

writeTimestamp
public void writeTimestamp(Timestamp x)
                    throws SQLException
Writes a java.sql.Timestamp object in the Java programming
 language to this SQLOutputImpl object. The driver converts
 it to an SQL TIMESTAMP before returning it to the database.

Specified by:
writeTimestamp in interface SQLOutput
Parameters:
x - the value to pass to the database
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
SQLOutputImpl,writeURL(URL url),void,Writes an java.sql.Type.DATALINK object in the Java programming language to this SQLOutputImpl object.,"

writeURL
public void writeURL(URL url)
              throws SQLException
Writes an java.sql.Type.DATALINK object in the Java
 programming language to this SQLOutputImpl object. The
 driver converts this value to a serializable SerialDatalink
 SQL DATALINK value before return it to the database.

Specified by:
writeURL in interface SQLOutput
Parameters:
url - an object representing a SQL DATALINK value
Throws:
SQLException - if the SQLOutputImpl object is in
        use by a SQLData object attempting to write the attribute
        values of a UDT to the database.


"
