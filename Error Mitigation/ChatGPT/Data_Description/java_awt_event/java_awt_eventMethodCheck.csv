Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,ActionEvent,1,Object getSource(),False,,NULL
0,ActionEvent,2,String getActionCommand(),True,,"

getActionCommand
public String getActionCommand()
Returns the command string associated with this action.
 This string allows a ""modal"" component to specify one of several
 commands, depending on its state. For example, a single button might
 toggle between ""show details"" and ""hide details"". The source object
 and the event would be the same in each case, but the command string
 would identify the intended action.
 
 Note that if a null command string was passed
 to the constructor for this ActionEvent, this
 this method returns null.

Returns:
the string identifying the command for this event


"
0,ActionEvent,3,long getWhen(),True,,"

getWhen
public long getWhen()
Returns the timestamp of when this event occurred. Because an
 ActionEvent is a high-level, semantic event, the timestamp is typically
 the same as an underlying InputEvent.

Returns:
this event's timestamp
Since:
1.4


"
0,ActionEvent,4,String paramString(),True,,"

paramString
public String paramString()
Returns a parameter string identifying this action event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class AWTEvent
Returns:
a string identifying the event and its associated command


"
0,ActionEvent,5,void setActionCommand(String command),False,,NULL
2,AWTEventListenerProxy,1,void eventDispatched(AWTEvent event),True,,"

eventDispatched
public void eventDispatched(AWTEvent event)
Forwards the AWT event to the listener delegate.

Specified by:
eventDispatched in interface AWTEventListener
Parameters:
event - the AWT event


"
2,AWTEventListenerProxy,2,long getEventMask(),True,,"

getEventMask
public long getEventMask()
Returns the event mask associated with the listener.

Returns:
the event mask associated with the listener


"
2,AWTEventListenerProxy,3,AWTEventListener getListener(),False,,NULL
2,AWTEventListenerProxy,4,void remove(),False,,NULL
2,AWTEventListenerProxy,5,void setEventMask(long mask),False,,NULL
4,ComponentEvent,1,int getComponentId(),False,,NULL
4,ComponentEvent,2,Dimension getSize(),False,,NULL
4,ComponentEvent,3,Point getLocation(),False,,NULL
4,ComponentEvent,4,boolean isConsumed(),False,,NULL
4,ComponentEvent,5,boolean isPreferredSizeSet(),False,,NULL
6,ContainerEvent,1,Component getChild(),True,,"

getChild
public Component getChild()
Returns the component that was affected by the event.

Returns:
the Component object that was added or removed


"
6,ContainerEvent,2,int getChangeFlags(),False,,NULL
6,ContainerEvent,3,Container getContainer(),True,,"

getContainer
public Container getContainer()
Returns the originator of the event.

Returns:
the Container object that originated
 the event, or null if the object is not a
 Container.


"
6,ContainerEvent,4,String paramString(),True,,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
6,ContainerEvent,5,String toString(),False,,NULL
7,FocusAdapter,1,void focusGained(FocusEvent e),True,,"

focusGained
public void focusGained(FocusEvent e)
Invoked when a component gains the keyboard focus.

Specified by:
focusGained in interface FocusListener


"
7,FocusAdapter,2,void focusLost(FocusEvent e),True,,"

focusLost
public void focusLost(FocusEvent e)
Invoked when a component loses the keyboard focus.

Specified by:
focusLost in interface FocusListener


"
8,FocusEvent,1,Component getOppositeComponent(),True,,"

getOppositeComponent
public Component getOppositeComponent()
Returns the other Component involved in this focus change. For a
 FOCUS_GAINED event, this is the Component that lost focus. For a
 FOCUS_LOST event, this is the Component that gained focus. If this
 focus change occurs with a native application, with a Java application
 in a different VM or context, or with no other Component, then null is
 returned.

Returns:
the other Component involved in the focus change, or null
Since:
1.4


"
8,FocusEvent,2,boolean isTemporary(),True,,"

isTemporary
public boolean isTemporary()
Identifies the focus change event as temporary or permanent.

Returns:
true if the focus change is temporary;
         false otherwise


"
8,FocusEvent,3,void setSource(Component source),False,,NULL
8,FocusEvent,4,String paramString(),True,,"

paramString
public String paramString()
Returns a parameter string identifying this event.
 This method is useful for event-logging and for debugging.

Overrides:
paramString in class ComponentEvent
Returns:
a string identifying the event and its attributes


"
8,FocusEvent,5,void consume(),False,,NULL
11,InputEvent,1,int getModifiers(),True,,"

getModifiers
public int getModifiers()
Returns the modifier mask for this event.

"
11,InputEvent,2,long getWhen(),True,,"

getWhen
public long getWhen()
Returns the difference in milliseconds between the timestamp of when this event occurred and
 midnight, January 1, 1970 UTC.

"
11,InputEvent,3,int getModifiersEx(),True,,"

getModifiersEx
public int getModifiersEx()
Returns the extended modifier mask for this event.
 
 Extended modifiers are the modifiers that ends with the _DOWN_MASK suffix,
 such as ALT_DOWN_MASK, BUTTON1_DOWN_MASK, and others.
 
 Extended modifiers represent the state of all modal keys,
 such as ALT, CTRL, META, and the mouse buttons just after
 the event occurred.
 
 For example, if the user presses button 1 followed by
 button 2, and then releases them in the same order,
 the following sequence of events is generated:
 
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK
    MOUSE_PRESSED:  BUTTON1_DOWN_MASK | BUTTON2_DOWN_MASK
    MOUSE_RELEASED: BUTTON2_DOWN_MASK
    MOUSE_CLICKED:  BUTTON2_DOWN_MASK
    MOUSE_RELEASED:
    MOUSE_CLICKED:
 

 It is not recommended to compare the return value of this method
 using == because new modifiers can be added in the future.
 For example, the appropriate way to check that SHIFT and BUTTON1 are
 down, but CTRL is up is demonstrated by the following code:
 
    int onmask = SHIFT_DOWN_MASK | BUTTON1_DOWN_MASK;
    int offmask = CTRL_DOWN_MASK;
    if ((event.getModifiersEx() & (onmask | offmask)) == onmask) {
        ...
    }
 
 The above code will work even if new modifiers are added.

Since:
1.4


"
11,InputEvent,4,boolean isAltDown(),True,,"

isAltDown
public boolean isAltDown()
Returns whether or not the Alt modifier is down on this event.

"
11,InputEvent,5,boolean isShiftDown(),True,,"

isShiftDown
public boolean isShiftDown()
Returns whether or not the Shift modifier is down on this event.

"
12,InputMethodEvent,1,int getCaret(),False,,NULL
12,InputMethodEvent,2,TextHitInfo getCaret(),True,,"

getCaret
public TextHitInfo getCaret()
Gets the caret.
 
 The offset of the caret is relative to the current
 composed text; that is, the composed text within getText()
 if this is an INPUT_METHOD_TEXT_CHANGED event,
 the composed text within getText() of the
 preceding INPUT_METHOD_TEXT_CHANGED event otherwise.

Returns:
the caret (a.k.a. insertion point).
 Null if there's no caret within current composed text.


"
12,InputMethodEvent,3,AttributedCharacterIterator getCommittedText(),False,,NULL
12,InputMethodEvent,4,int getCommittedCharacterCount(),True,,"

getCommittedCharacterCount
public int getCommittedCharacterCount()
Gets the number of committed characters in the text.

"
12,InputMethodEvent,5,int getVisiblePosition(TextHitInfo offset),False,,NULL
13,InvocationEvent,1,void dispatch(),True,,"

dispatch
public void dispatch()
Executes the Runnable's run() method and notifies the
 notifier (if any) when run() has returned or thrown an exception.

Specified by:
dispatch in interface ActiveEvent
See Also:
isDispatched()


"
13,InvocationEvent,2,Runnable getRunnable(),False,,NULL
13,InvocationEvent,3,void setBypass(),False,,NULL
13,InvocationEvent,4,void setNotified(),False,,NULL
13,InvocationEvent,5,void setUnready(),False,,NULL
15,KeyAdapter,1,void keyPressed(KeyEvent e),True,,"

keyPressed
public void keyPressed(KeyEvent e)
Invoked when a key has been pressed.

Specified by:
keyPressed in interface KeyListener


"
15,KeyAdapter,2,void keyReleased(KeyEvent e),True,,"

keyReleased
public void keyReleased(KeyEvent e)
Invoked when a key has been released.

Specified by:
keyReleased in interface KeyListener


"
15,KeyAdapter,3,void keyTyped(KeyEvent e),True,,"

keyTyped
public void keyTyped(KeyEvent e)
Invoked when a key has been typed.
 This event occurs when a key press is followed by a key release.

Specified by:
keyTyped in interface KeyListener


"
15,KeyAdapter,4,void focusGained(FocusEvent e),False,,NULL
15,KeyAdapter,5,void focusLost(FocusEvent e),False,,NULL
16,KeyEvent,1,int getKeyCode(),True,,"

getKeyCode
public int getKeyCode()
Returns the integer keyCode associated with the key in this event.

Returns:
the integer code for an actual key on the keyboard.
         (For KEY_TYPED events, the keyCode is
         VK_UNDEFINED.)


"
16,KeyEvent,2,char getKeyChar(),True,,"

getKeyChar
public char getKeyChar()
Returns the character associated with the key in this event.
 For example, the KEY_TYPED event for shift + ""a""
 returns the value for ""A"".
 
KEY_PRESSED and KEY_RELEASED events
 are not intended for reporting of character input.  Therefore,
 the values returned by this method are guaranteed to be
 meaningful only for KEY_TYPED events.

Returns:
the Unicode character defined for this key event.
         If no valid Unicode character exists for this key event,
         CHAR_UNDEFINED is returned.


"
16,KeyEvent,3,boolean isActionKey(),True,,"

isActionKey
public boolean isActionKey()
Returns whether the key in this event is an ""action"" key.
 Typically an action key does not fire a unicode character and is
 not a modifier key.

Returns:
true if the key is an ""action"" key,
         false otherwise


"
16,KeyEvent,4,int getModifiers(),False,,NULL
16,KeyEvent,5,long getWhen(),False,,NULL
17,MouseAdapter,1,void mouseClicked(MouseEvent e),True,,"

mouseClicked
public void mouseClicked(MouseEvent e)
Invoked when the mouse button has been clicked (pressed
 and released) on a component.

Specified by:
mouseClicked in interface MouseListener


"
17,MouseAdapter,2,void mouseEntered(MouseEvent e),True,,"

mouseEntered
public void mouseEntered(MouseEvent e)
Invoked when the mouse enters a component.

Specified by:
mouseEntered in interface MouseListener


"
17,MouseAdapter,3,void mouseExited(MouseEvent e),True,,"

mouseExited
public void mouseExited(MouseEvent e)
Invoked when the mouse exits a component.

Specified by:
mouseExited in interface MouseListener


"
17,MouseAdapter,4,void mousePressed(MouseEvent e),True,,"

mousePressed
public void mousePressed(MouseEvent e)
Invoked when a mouse button has been pressed on a component.

Specified by:
mousePressed in interface MouseListener


"
17,MouseAdapter,5,void mouseReleased(MouseEvent e),True,,"

mouseReleased
public void mouseReleased(MouseEvent e)
Invoked when a mouse button has been released on a component.

Specified by:
mouseReleased in interface MouseListener


"
18,MouseEvent,1,int getX(),True,,"

getX
public int getX()
Returns the horizontal x position of the event relative to the
 source component.

Returns:
x  an integer indicating horizontal position relative to
            the component


"
18,MouseEvent,2,int getY(),True,,"

getY
public int getY()
Returns the vertical y position of the event relative to the
 source component.

Returns:
y  an integer indicating vertical position relative to
            the component


"
18,MouseEvent,3,int getButton(),True,,"

getButton
public int getButton()
Returns which, if any, of the mouse buttons has changed state.
 The returned value is ranged
 from 0 to the MouseInfo.getNumberOfButtons()
 value.
 The returned value includes at least the following constants:
 
 NOBUTTON
 BUTTON1
 BUTTON2
 BUTTON3

 It is allowed to use those constants to compare with the returned button number in the application.
 For example,
 
 if (anEvent.getButton() == MouseEvent.BUTTON1) {
 
 In particular, for a mouse with one, two, or three buttons this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
 
 Button numbers greater then BUTTON3 have no constant identifier. So if a mouse with five buttons is
 installed, this method may return the following values:
 
 0 (NOBUTTON)
  1 (BUTTON1)
  2 (BUTTON2)
  3 (BUTTON3)
  4
  5
 

 Note: If support for extended mouse buttons is disabled by Java
 then the AWT event subsystem does not produce mouse events for the extended mouse
 buttons. So it is not expected that this method returns anything except NOBUTTON, BUTTON1,
 BUTTON2, BUTTON3.

Returns:
one of the values from 0 to MouseInfo.getNumberOfButtons()
         if support for the extended mouse buttons is enabled by Java.
         That range includes NOBUTTON, BUTTON1, BUTTON2, BUTTON3;
         
NOBUTTON, BUTTON1, BUTTON2 or BUTTON3
         if support for the extended mouse buttons is disabled by Java
Since:
1.4
See Also:
Toolkit.areExtraMouseButtonsEnabled(), 
MouseInfo.getNumberOfButtons(), 
MouseEvent(Component, int, long, int, int, int, int, int, int, boolean, int), 
InputEvent.getMaskForButton(int)


"
18,MouseEvent,4,int getClickCount(),True,,"

getClickCount
public int getClickCount()
Returns the number of mouse clicks associated with this event.

Returns:
integer value for the number of clicks


"
18,MouseEvent,5,Component getSource(),False,,NULL
19,MouseMotionAdapter,1,void mouseDragged(MouseEvent e),True,,"

mouseDragged
public void mouseDragged(MouseEvent e)
Invoked when a mouse button is pressed on a component and then
 dragged.  Mouse drag events will continue to be delivered to
 the component where the first originated until the mouse button is
 released (regardless of whether the mouse position is within the
 bounds of the component).

Specified by:
mouseDragged in interface MouseMotionListener


"
19,MouseMotionAdapter,2,void mouseMoved(MouseEvent e),True,,"

mouseMoved
public void mouseMoved(MouseEvent e)
Invoked when the mouse button has been moved on a component
 (with no buttons no down).

Specified by:
mouseMoved in interface MouseMotionListener


"
19,MouseMotionAdapter,3,void mouseEntered(MouseEvent e),False,,NULL
19,MouseMotionAdapter,4,void mouseExited(MouseEvent e),False,,NULL
19,MouseMotionAdapter,5,void mouseWheelMoved(MouseWheelEvent e),False,,NULL
20,MouseWheelEvent,1,int getWheelRotation(),True,,"

getWheelRotation
public int getWheelRotation()
Returns the number of ""clicks"" the mouse wheel was rotated, as an integer.
 A partial rotation may occur if the mouse supports a high-resolution wheel.
 In this case, the method returns zero until a full ""click"" has been accumulated.

Returns:
negative values if the mouse wheel was rotated up/away from
 the user, and positive values if the mouse wheel was rotated down/
 towards the user
See Also:
getPreciseWheelRotation()


"
20,MouseWheelEvent,2,int getScrollAmount(),True,,"

getScrollAmount
public int getScrollAmount()
Returns the number of units that should be scrolled per
 click of mouse wheel rotation.
 Only valid if getScrollType returns
 MouseWheelEvent.WHEEL_UNIT_SCROLL

Returns:
number of units to scroll, or an undefined value if
  getScrollType returns
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
See Also:
getScrollType()


"
20,MouseWheelEvent,3,int getScrollType(),True,,"

getScrollType
public int getScrollType()
Returns the type of scrolling that should take place in response to this
 event.  This is determined by the native platform.  Legal values are:
 
 MouseWheelEvent.WHEEL_UNIT_SCROLL
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
 

Returns:
either MouseWheelEvent.WHEEL_UNIT_SCROLL or
  MouseWheelEvent.WHEEL_BLOCK_SCROLL, depending on the configuration of
  the native platform.
See Also:
Adjustable.getUnitIncrement(), 
Adjustable.getBlockIncrement(), 
Scrollable.getScrollableUnitIncrement(java.awt.Rectangle, int, int), 
Scrollable.getScrollableBlockIncrement(java.awt.Rectangle, int, int)


"
20,MouseWheelEvent,4,boolean isShiftDown(),False,,NULL
20,MouseWheelEvent,5,boolean isControlDown(),False,,NULL
23,WindowAdapter,1,void windowOpened(WindowEvent e),True,,"

windowOpened
public void windowOpened(WindowEvent e)
Invoked when a window has been opened.

Specified by:
windowOpened in interface WindowListener


"
23,WindowAdapter,2,void windowClosing(WindowEvent e),True,,"

windowClosing
public void windowClosing(WindowEvent e)
Invoked when a window is in the process of being closed.
 The close operation can be overridden at this point.

Specified by:
windowClosing in interface WindowListener


"
23,WindowAdapter,3,void windowClosed(WindowEvent e),True,,"

windowClosed
public void windowClosed(WindowEvent e)
Invoked when a window has been closed.

Specified by:
windowClosed in interface WindowListener


"
23,WindowAdapter,4,void windowIconified(WindowEvent e),True,,"

windowIconified
public void windowIconified(WindowEvent e)
Invoked when a window is iconified.

Specified by:
windowIconified in interface WindowListener
See Also:
Frame.setIconImage(java.awt.Image)


"
23,WindowAdapter,5,void windowDeiconified(WindowEvent e),True,,"

windowDeiconified
public void windowDeiconified(WindowEvent e)
Invoked when a window is de-iconified.

Specified by:
windowDeiconified in interface WindowListener


"
24,WindowEvent,1,int getOldState(),True,,"

getOldState
public int getOldState()
For WINDOW_STATE_CHANGED events returns the
 previous state of the window. The state is
 represented as a bitwise mask.
 
NORMAL
Indicates that no state bits are set.
 ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH
Concatenates MAXIMIZED_HORIZ
 and MAXIMIZED_VERT.
 

Returns:
a bitwise mask of the previous window state
Since:
1.4
See Also:
Frame.getExtendedState()


"
24,WindowEvent,2,int getNewState(),True,,"

getNewState
public int getNewState()
For WINDOW_STATE_CHANGED events returns the
 new state of the window. The state is
 represented as a bitwise mask.
 
NORMAL
Indicates that no state bits are set.
 ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH
Concatenates MAXIMIZED_HORIZ
 and MAXIMIZED_VERT.
 

Returns:
a bitwise mask of the new window state
Since:
1.4
See Also:
Frame.getExtendedState()


"
24,WindowEvent,3,Window getWindow(),True,,"

getWindow
public Window getWindow()
Returns the originator of the event.

Returns:
the Window object that originated the event


"
24,WindowEvent,4,void setOldState(int oldState),False,,NULL
24,WindowEvent,5,void setNewState(int newState),False,,NULL
