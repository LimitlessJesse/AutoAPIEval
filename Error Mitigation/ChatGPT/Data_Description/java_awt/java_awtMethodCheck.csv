Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AlphaComposite,1,AlphaComposite derive(float alpha),True,,"

derive
public AlphaComposite derive(float alpha)
Returns a similar AlphaComposite object that uses
 the specified alpha value.
 If this object already has the specified alpha value,
 this object is returned.

Parameters:
alpha - the constant alpha to be multiplied with the alpha of
 the source. alpha must be a floating point number in the
 inclusive range [0.0, 1.0].
Returns:
an AlphaComposite object derived from
 this object that uses the specified alpha value.
Throws:
IllegalArgumentException - if
         alpha is less than 0.0 or greater than 1.0
Since:
1.6


"
0,AlphaComposite,2,AlphaComposite derive(int rule),True,,"

derive
public AlphaComposite derive(int rule)
Returns a similar AlphaComposite object that uses
 the specified compositing rule.
 If this object already uses the specified compositing rule,
 this object is returned.

Parameters:
rule - the compositing rule
Returns:
an AlphaComposite object derived from
 this object that uses the specified compositing rule.
Throws:
IllegalArgumentException - if
         rule is not one of
         the following:  CLEAR, SRC, DST,
         SRC_OVER, DST_OVER, SRC_IN,
         DST_IN, SRC_OUT, DST_OUT,
         SRC_ATOP, DST_ATOP, or XOR
Since:
1.6


"
0,AlphaComposite,3,"AlphaComposite derive(float alpha, int rule)",False,,NULL
0,AlphaComposite,4,"AlphaComposite derive(float alpha, int rule, AlphaComposite ac2)",False,,NULL
0,AlphaComposite,5,int getRule(),True,,"

getRule
public int getRule()
Returns the compositing rule of this AlphaComposite.

Returns:
the compositing rule of this AlphaComposite.


"
1,AWTEvent,1,int getID(),True,,"

getID
public int getID()
Returns the event type.

"
1,AWTEvent,2,long getWhen(),False,,NULL
1,AWTEvent,3,void consume(),True,,"

consume
protected void consume()
Consumes this event, if this event can be consumed. Only low-level,
 system events can be consumed

"
1,AWTEvent,4,boolean isConsumed(),True,,"

isConsumed
protected boolean isConsumed()
Returns whether this event has been consumed.

"
1,AWTEvent,5,String paramString(),True,,"

paramString
public String paramString()
Returns a string representing the state of this Event.
 This method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not be
 null.

Returns:
a string representation of this event


"
2,AWTEventMulticaster,1,void remove(AWTEventListener listener),False,,NULL
2,AWTEventMulticaster,2,void eventDispatched(AWTEvent event),False,,NULL
2,AWTEventMulticaster,3,"AWTEventListener add(AWTEventListener a, AWTEventListener b)",False,,NULL
2,AWTEventMulticaster,4,"void remove(AWTEventListener oldl, AWTEventListener l)",False,,NULL
2,AWTEventMulticaster,5,void remove(AWTEventListener oldl),False,,NULL
3,AWTKeyStroke,1,AWTKeyStroke getAWTKeyStroke(char keyChar),True,,"

getAWTKeyStroke
public static AWTKeyStroke getAWTKeyStroke(char keyChar)
Returns a shared instance of an AWTKeyStroke
 that represents a KEY_TYPED event for the
 specified character.

Parameters:
keyChar - the character value for a keyboard key
Returns:
an AWTKeyStroke object for that key


"
3,AWTKeyStroke,2,"AWTKeyStroke getAWTKeyStroke(int keyCode, int modifiers)",True,,"

getAWTKeyStroke
public static AWTKeyStroke getAWTKeyStroke(int keyCode,
                                           int modifiers)
Returns a shared instance of an AWTKeyStroke,
 given a numeric key code and a set of modifiers. The returned
 AWTKeyStroke will correspond to a key press.
 
 The ""virtual key"" constants defined in
 java.awt.event.KeyEvent can be
 used to specify the key code. For example:
java.awt.event.KeyEvent.VK_ENTER
java.awt.event.KeyEvent.VK_TAB
java.awt.event.KeyEvent.VK_SPACE

 The modifiers consist of any combination of:
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 The old modifiers 
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 also can be used, but they are mapped to _DOWN_ modifiers.

 Since these numbers are all different powers of two, any combination of
 them is an integer in which each bit represents a different modifier
 key. Use 0 to specify no modifiers.

Parameters:
keyCode - an int specifying the numeric code for a keyboard key
modifiers - a bitwise-ored combination of any modifiers
Returns:
an AWTKeyStroke object for that key
See Also:
KeyEvent, 
InputEvent


"
3,AWTKeyStroke,3,char getKeyChar(),True,,"

getKeyChar
public final char getKeyChar()
Returns the character for this AWTKeyStroke.

Returns:
a char value
See Also:
getAWTKeyStroke(char), 
KeyEvent.getKeyChar()


"
3,AWTKeyStroke,4,int getKeyCode(),True,,"

getKeyCode
public final int getKeyCode()
Returns the numeric key code for this AWTKeyStroke.

Returns:
an int containing the key code value
See Also:
getAWTKeyStroke(int,int), 
KeyEvent.getKeyCode()


"
3,AWTKeyStroke,5,int getModifiers(),True,,"

getModifiers
public final int getModifiers()
Returns the modifier keys for this AWTKeyStroke.

Returns:
an int containing the modifiers
See Also:
getAWTKeyStroke(int,int)


"
5,BasicStroke,1,float getLineWidth(),True,,"

getLineWidth
public float getLineWidth()
Returns the line width.  Line width is represented in user space,
 which is the default-coordinate space used by Java 2D.  See the
 Graphics2D class comments for more information on
 the user space coordinate system.

Returns:
the line width of this BasicStroke.
See Also:
Graphics2D


"
5,BasicStroke,2,int getEndCap(),True,,"

getEndCap
public int getEndCap()
Returns the end cap style.

Returns:
the end cap style of this BasicStroke as one
 of the static int values that define possible end cap
 styles.


"
5,BasicStroke,3,int getStartCap(),False,,NULL
5,BasicStroke,4,int getLineJoin(),True,,"

getLineJoin
public int getLineJoin()
Returns the line join style.

Returns:
the line join style of the BasicStroke as one
 of the static int values that define possible line
 join styles.


"
5,BasicStroke,5,float getMiterLimit(),True,,"

getMiterLimit
public float getMiterLimit()
Returns the limit of miter joins.

Returns:
the limit of miter joins of the BasicStroke.


"
6,BorderLayout,1,"void addLayoutComponent(Component comp, Object constraints)",True,,"

addLayoutComponent
public void addLayoutComponent(Component comp,
                               Object constraints)
Adds the specified component to the layout, using the specified
 constraint object.  For border layouts, the constraint must be
 one of the following constants:  NORTH,
 SOUTH, EAST,
 WEST, or CENTER.
 
 Most applications do not call this method directly. This method
 is called when a component is added to a container using the
 Container.add method with the same argument types.

Specified by:
addLayoutComponent in interface LayoutManager2
Parameters:
comp - the component to be added.
constraints - an object that specifies how and where
                       the component is added to the layout.
Throws:
IllegalArgumentException - if the constraint object is not
                 a string, or if it not one of the five specified
              constants.
Since:
JDK1.1
See Also:
Container.add(java.awt.Component, java.lang.Object)


"
6,BorderLayout,2,"void addLayoutComponent(String name, Component comp)",True,,"

addLayoutComponent
@Deprecated
public void addLayoutComponent(String name,
                                           Component comp)
Deprecated. replaced by addLayoutComponent(Component, Object).
Description copied from interface: LayoutManager
If the layout manager uses a per-component string,
 adds the component comp to the layout,
 associating it
 with the string specified by name.

Specified by:
addLayoutComponent in interface LayoutManager
Parameters:
name - the string to be associated with the component
comp - the component to be added


"
6,BorderLayout,3,"Component getLayoutComponent(Container target, Object constraints)",True,,"

getLayoutComponent
public Component getLayoutComponent(Container target,
                                    Object constraints)
Returns the component that corresponds to the given constraint location
 based on the target Container's component orientation.
 Components added with the relative constraints PAGE_START,
 PAGE_END, LINE_START, and LINE_END
 take precedence over components added with the explicit constraints
 NORTH, SOUTH, WEST, and EAST.
 The Container's component orientation is used to determine the location of components
 added with LINE_START and LINE_END.

Parameters:
constraints - the desired absolute position, one of CENTER,
                          NORTH, SOUTH,
                          EAST, WEST
target - the Container used to obtain
                     the constraint location based on the target
                     Container's component orientation.
Returns:
the component at the given location, or null if
          the location is empty
Throws:
IllegalArgumentException - if the constraint object is
              not one of the five specified constants
NullPointerException - if the target parameter is null
Since:
1.5
See Also:
addLayoutComponent(java.awt.Component, java.lang.Object)


"
6,BorderLayout,4,Object getConstraints(Component comp),True,,"

getConstraints
public Object getConstraints(Component comp)
Gets the constraints for the specified component

Parameters:
comp - the component to be queried
Returns:
the constraint for the specified component,
          or null if component is null or is not present
          in this layout
Since:
1.5
See Also:
addLayoutComponent(java.awt.Component, java.lang.Object)


"
6,BorderLayout,5,void removeLayoutComponent(Component comp),True,,"

removeLayoutComponent
public void removeLayoutComponent(Component comp)
Removes the specified component from this border layout. This
 method is called when a container calls its remove or
 removeAll methods. Most applications do not call this
 method directly.

Specified by:
removeLayoutComponent in interface LayoutManager
Parameters:
comp - the component to be removed.
See Also:
Container.remove(java.awt.Component), 
Container.removeAll()


"
7,BufferCapabilities,1,ImageCapabilities getImageCapabilities(),False,,NULL
7,BufferCapabilities,2,boolean isFullScreenRequired(),True,,"

isFullScreenRequired
public boolean isFullScreenRequired()

Returns:
whether page flipping is only available in full-screen mode.  If this
 is true, full-screen exclusive mode is required for
 page-flipping.
See Also:
isPageFlipping(), 
GraphicsDevice.setFullScreenWindow(java.awt.Window)


"
7,BufferCapabilities,3,boolean isPageFlipping(),True,,"

isPageFlipping
public boolean isPageFlipping()

Returns:
whether or not the buffer strategy uses page flipping; a set of
 buffers that uses page flipping
 can swap the contents internally between the front buffer and one or
 more back buffers by switching the video pointer (or by copying memory
 internally).  A non-flipping set of
 buffers uses blitting to copy the contents from one buffer to
 another; when this is the case, getFlipContents returns
 null


"
7,BufferCapabilities,4,boolean isMultiBufferAvailable(),True,,"

isMultiBufferAvailable
public boolean isMultiBufferAvailable()

Returns:
whether or not
 page flipping can be performed using more than two buffers (one or more
 intermediate buffers as well as the front and back buffer).
See Also:
isPageFlipping()


"
7,BufferCapabilities,5,boolean isFullScreenRequired(),True,,"

isFullScreenRequired
public boolean isFullScreenRequired()

Returns:
whether page flipping is only available in full-screen mode.  If this
 is true, full-screen exclusive mode is required for
 page-flipping.
See Also:
isPageFlipping(), 
GraphicsDevice.setFullScreenWindow(java.awt.Window)


"
8,BufferCapabilities.FlipContents,1,boolean isPageFlipping(),False,,NULL
8,BufferCapabilities.FlipContents,2,boolean isUndefined(),False,,NULL
8,BufferCapabilities.FlipContents,3,boolean isBackgroundOpaque(),False,,NULL
8,BufferCapabilities.FlipContents,4,boolean isFgAccelerated(),False,,NULL
8,BufferCapabilities.FlipContents,5,boolean isBgAccelerated(),False,,NULL
9,Button,1,String getLabel(),True,,"

getLabel
public String getLabel()
Gets the label of this button.

Returns:
the button's label, or null
                if the button has no label.
See Also:
setLabel(java.lang.String)


"
9,Button,2,void setLabel(String label),True,,"

setLabel
public void setLabel(String label)
Sets the button's label to be the specified string.

Parameters:
label - the new label, or null
                if the button has no label.
See Also:
getLabel()


"
9,Button,3,void addActionListener(ActionListener l),True,,"

addActionListener
public void addActionListener(ActionListener l)
Adds the specified action listener to receive action events from
 this button. Action events occur when a user presses or releases
 the mouse over this button.
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Parameters:
l - the action listener
Since:
JDK1.1
See Also:
removeActionListener(java.awt.event.ActionListener), 
getActionListeners(), 
ActionListener


"
9,Button,4,void removeActionListener(ActionListener l),True,,"

removeActionListener
public void removeActionListener(ActionListener l)
Removes the specified action listener so that it no longer
 receives action events from this button. Action events occur
 when a user presses or releases the mouse over this button.
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Parameters:
l - the action listener
Since:
JDK1.1
See Also:
addActionListener(java.awt.event.ActionListener), 
getActionListeners(), 
ActionListener


"
9,Button,5,void setEnabled(boolean enabled),False,,NULL
10,Canvas,1,void paint(Graphics g),True,,"

paint
public void paint(Graphics g)
Paints this canvas.
 
 Most applications that subclass Canvas should
 override this method in order to perform some useful operation
 (typically, custom painting of the canvas).
 The default operation is simply to clear the canvas.
 Applications that override this method need not call
 super.paint(g).

Overrides:
paint in class Component
Parameters:
g - the specified Graphics context
See Also:
update(Graphics), 
Component.paint(Graphics)


"
10,Canvas,2,void update(Graphics g),True,,"

update
public void update(Graphics g)
Updates this canvas.
 
 This method is called in response to a call to repaint.
 The canvas is first cleared by filling it with the background
 color, and then completely redrawn by calling this canvas's
 paint method.
 Note: applications that override this method should either call
 super.update(g) or incorporate the functionality described
 above into their own code.

Overrides:
update in class Component
Parameters:
g - the specified Graphics context
See Also:
paint(Graphics), 
Component.update(Graphics)


"
10,Canvas,3,void createBufferStrategy(int numBuffers),True,,"

createBufferStrategy
public void createBufferStrategy(int numBuffers)
Creates a new strategy for multi-buffering on this component.
 Multi-buffering is useful for rendering performance.  This method
 attempts to create the best strategy available with the number of
 buffers supplied.  It will always create a BufferStrategy
 with that number of buffers.
 A page-flipping strategy is attempted first, then a blitting strategy
 using accelerated buffers.  Finally, an unaccelerated blitting
 strategy is used.
 
 Each time this method is called,
 the existing buffer strategy for this component is discarded.

Parameters:
numBuffers - number of buffers to create, including the front buffer
Throws:
IllegalArgumentException - if numBuffers is less than 1.
IllegalStateException - if the component is not displayable
Since:
1.4
See Also:
Component.isDisplayable(), 
getBufferStrategy()


"
10,Canvas,4,BufferStrategy getBufferStrategy(),True,,"

getBufferStrategy
public BufferStrategy getBufferStrategy()
Returns the BufferStrategy used by this component.  This
 method will return null if a BufferStrategy has not yet
 been created or has been disposed.

Returns:
the buffer strategy used by this component
Since:
1.4
See Also:
createBufferStrategy(int)


"
10,Canvas,5,void setIgnoreRepaint(boolean ignore),False,,NULL
11,CardLayout,1,"void show(Container parent, String name)",True,,"

show
public void show(Container parent,
                 String name)
Flips to the component that was added to this layout with the
 specified name, using addLayoutComponent.
 If no such component exists, then nothing happens.

Parameters:
parent - the parent container in which to do the layout
name - the component name
See Also:
addLayoutComponent(java.awt.Component, java.lang.Object)


"
11,CardLayout,2,void first(Container parent),True,,"

first
public void first(Container parent)
Flips to the first card of the container.

Parameters:
parent - the parent container in which to do the layout
See Also:
last(java.awt.Container)


"
11,CardLayout,3,void last(Container parent),True,,"

last
public void last(Container parent)
Flips to the last card of the container.

Parameters:
parent - the parent container in which to do the layout
See Also:
first(java.awt.Container)


"
11,CardLayout,4,void next(Container parent),True,,"

next
public void next(Container parent)
Flips to the next card of the specified container. If the
 currently visible card is the last one, this method flips to the
 first card in the layout.

Parameters:
parent - the parent container in which to do the layout
See Also:
previous(java.awt.Container)


"
11,CardLayout,5,void previous(Container parent),True,,"

previous
public void previous(Container parent)
Flips to the previous card of the specified container. If the
 currently visible card is the first one, this method flips to the
 last card in the layout.

Parameters:
parent - the parent container in which to do the layout
See Also:
next(java.awt.Container)


"
12,Checkbox,1,void setLabel(String label),True,,"

setLabel
public void setLabel(String label)
Sets this check box's label to be the string argument.

Parameters:
label - a string to set as the new label, or
                        null for no label.
See Also:
getLabel()


"
12,Checkbox,2,void setState(boolean state),True,,"

setState
public void setState(boolean state)
Sets the state of this check box to the specified state.
 The boolean value true indicates the ""on"" state,
 and false indicates the ""off"" state.

 Note that this method should be primarily used to
 initialize the state of the checkbox.  Programmatically
 setting the state of the checkbox will not trigger
 an ItemEvent.  The only way to trigger an
 ItemEvent is by user interaction.

Parameters:
state - the boolean state of the check box
See Also:
getState()


"
12,Checkbox,3,String getLabel(),True,,"

getLabel
public String getLabel()
Gets the label of this check box.

Returns:
the label of this check box, or null
                  if this check box has no label.
See Also:
setLabel(String)


"
12,Checkbox,4,boolean getState(),True,,"

getState
public boolean getState()
Determines whether this check box is in the ""on"" or ""off"" state.
 The boolean value true indicates the ""on"" state,
 and false indicates the ""off"" state.

Returns:
the state of this check box, as a boolean value
See Also:
setState(boolean)


"
12,Checkbox,5,void addItemListener(ItemListener l),True,,"

addItemListener
public void addItemListener(ItemListener l)
Adds the specified item listener to receive item events from
 this check box.  Item events are sent to listeners in response
 to user input, but not in response to calls to setState().
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Specified by:
addItemListener in interface ItemSelectable
Parameters:
l - the item listener
Since:
JDK1.1
See Also:
removeItemListener(java.awt.event.ItemListener), 
getItemListeners(), 
setState(boolean), 
ItemEvent, 
ItemListener


"
13,CheckboxGroup,1,CheckboxGroup(),False,,NULL
13,CheckboxGroup,2,Checkbox getCurrent(),True,,"

getCurrent
@Deprecated
public Checkbox getCurrent()
Deprecated. As of JDK version 1.1,
 replaced by getSelectedCheckbox().

"
13,CheckboxGroup,3,void setSelectedCheckbox(Checkbox box),True,,"

setSelectedCheckbox
public void setSelectedCheckbox(Checkbox box)
Sets the currently selected check box in this group
 to be the specified check box.
 This method sets the state of that check box to ""on"" and
 sets all other check boxes in the group to be off.
 
 If the check box argument is null, all check boxes
 in this check box group are deselected. If the check box argument
 belongs to a different check box group, this method does
 nothing.

Parameters:
box - the Checkbox to set as the
                      current selection.
Since:
JDK1.1
See Also:
Checkbox, 
getSelectedCheckbox()


"
13,CheckboxGroup,4,Checkbox getSelectedCheckbox(),True,,"

getSelectedCheckbox
public Checkbox getSelectedCheckbox()
Gets the current choice from this check box group.
 The current choice is the check box in this
 group that is currently in the ""on"" state,
 or null if all check boxes in the
 group are off.

Returns:
the check box that is currently in the
                 ""on"" state, or null.
Since:
JDK1.1
See Also:
Checkbox, 
setSelectedCheckbox(java.awt.Checkbox)


"
13,CheckboxGroup,5,void setSelectedCheckbox(String name),False,,NULL
14,CheckboxMenuItem,1,void setState(boolean state),True,,"

setState
public void setState(boolean b)
Sets this check box menu item to the specified state.
 The boolean value true indicates ""on"" while
 false indicates ""off.""

 Note that this method should be primarily used to
 initialize the state of the check box menu item.
 Programmatically setting the state of the check box
 menu item will not trigger
 an ItemEvent.  The only way to trigger an
 ItemEvent is by user interaction.

Parameters:
b - true if the check box
             menu item is on, otherwise false
See Also:
getState()


"
14,CheckboxMenuItem,2,boolean getState(),True,,"

getState
public boolean getState()
Determines whether the state of this check box menu item
 is ""on"" or ""off.""

Returns:
the state of this check box menu item, where
                     true indicates ""on"" and
                     false indicates ""off""
See Also:
setState(boolean)


"
14,CheckboxMenuItem,3,void addItemListener(ItemListener l),True,,"

addItemListener
public void addItemListener(ItemListener l)
Adds the specified item listener to receive item events from
 this check box menu item.  Item events are sent in response to user
 actions, but not in response to calls to setState().
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Specified by:
addItemListener in interface ItemSelectable
Parameters:
l - the item listener
Since:
JDK1.1
See Also:
removeItemListener(java.awt.event.ItemListener), 
getItemListeners(), 
setState(boolean), 
ItemEvent, 
ItemListener


"
14,CheckboxMenuItem,4,void removeItemListener(ItemListener l),True,,"

removeItemListener
public void removeItemListener(ItemListener l)
Removes the specified item listener so that it no longer receives
 item events from this check box menu item.
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Specified by:
removeItemListener in interface ItemSelectable
Parameters:
l - the item listener
Since:
JDK1.1
See Also:
addItemListener(java.awt.event.ItemListener), 
getItemListeners(), 
ItemEvent, 
ItemListener


"
14,CheckboxMenuItem,5,String paramString(),True,,"

paramString
public String paramString()
Returns a string representing the state of this
 CheckBoxMenuItem. This
 method is intended to be used only for debugging purposes, and the
 content and format of the returned string may vary between
 implementations. The returned string may be empty but may not be
 null.

Overrides:
paramString in class MenuItem
Returns:
the parameter string of this check box menu item


"
15,Choice,1,void addItem(String item),True,,"

addItem
public void addItem(String item)
Obsolete as of Java 2 platform v1.1.  Please use the
 add method instead.
 
 Adds an item to this Choice menu.

Parameters:
item - the item to be added
Throws:
NullPointerException - if the item's value is equal to
          null


"
15,Choice,2,void remove(int index),True,,"

remove
public void remove(int position)
Removes an item from the choice menu
 at the specified position.  If the item
 being removed is the currently selected item,
 then the first item in the choice becomes the
 selected item.  Otherwise, the currently selected
 item remains selected (and the selected index is
 updated accordingly).

Parameters:
position - the position of the item
Throws:
IndexOutOfBoundsException - if the specified
          position is out of bounds
Since:
JDK1.1


"
15,Choice,3,String getItem(int index),True,,"

getItem
public String getItem(int index)
Gets the string at the specified index in this
 Choice menu.

Parameters:
index - the index at which to begin
See Also:
getItemCount()


"
15,Choice,4,int getItemCount(),True,,"

getItemCount
public int getItemCount()
Returns the number of items in this Choice menu.

Returns:
the number of items in this Choice menu
Since:
JDK1.1
See Also:
getItem(int)


"
15,Choice,5,void select(int index),True,,"

select
public void select(int pos)
Sets the selected item in this Choice menu to be the
 item at the specified position.

 Note that this method should be primarily used to
 initially select an item in this component.
 Programmatically calling this method will not trigger
 an ItemEvent.  The only way to trigger an
 ItemEvent is by user interaction.

Parameters:
pos - the position of the selected item
Throws:
IllegalArgumentException - if the specified
                            position is greater than the
                            number of items or less than zero
See Also:
getSelectedItem(), 
getSelectedIndex()


"
16,Color,1,int getRed(),True,,"

getRed
public int getRed()
Returns the red component in the range 0-255 in the default sRGB
 space.

Returns:
the red component.
See Also:
getRGB()


"
16,Color,2,int getGreen(),True,,"

getGreen
public int getGreen()
Returns the green component in the range 0-255 in the default sRGB
 space.

Returns:
the green component.
See Also:
getRGB()


"
16,Color,3,int getBlue(),True,,"

getBlue
public int getBlue()
Returns the blue component in the range 0-255 in the default sRGB
 space.

Returns:
the blue component.
See Also:
getRGB()


"
16,Color,4,int getRGB(),True,,"

getRGB
public int getRGB()
Returns the RGB value representing the color in the default sRGB
 ColorModel.
 (Bits 24-31 are alpha, 16-23 are red, 8-15 are green, 0-7 are
 blue).

Returns:
the RGB value of the color in the default sRGB
         ColorModel.
Since:
JDK1.0
See Also:
ColorModel.getRGBdefault(), 
getRed(), 
getGreen(), 
getBlue()


"
16,Color,5,Color brighter(),True,,"

brighter
public Color brighter()
Creates a new Color that is a brighter version of this
 Color.
 
 This method applies an arbitrary scale factor to each of the three RGB
 components of this Color to create a brighter version
 of this Color.
 The alpha value is preserved.
 Although brighter and
 darker are inverse operations, the results of a
 series of invocations of these two methods might be inconsistent
 because of rounding errors.

Returns:
a new Color object that is
                 a brighter version of this Color
                 with the same alpha value.
Since:
JDK1.0
See Also:
darker()


"
17,Component,1,void paint(Graphics g),True,,"

paint
public void paint(Graphics g)
Paints this component.
 
 This method is called when the contents of the component should
 be painted; such as when the component is first being shown or
 is damaged and in need of repair.  The clip rectangle in the
 Graphics parameter is set to the area
 which needs to be painted.
 Subclasses of Component that override this
 method need not call super.paint(g).
 
 For performance reasons, Components with zero width
 or height aren't considered to need painting when they are first shown,
 and also aren't considered to need repair.
 
Note: For more information on the paint mechanisms utilitized
 by AWT and Swing, including information on how to write the most
 efficient painting code, see
 Painting in AWT and Swing.

Parameters:
g - the graphics context to use for painting
Since:
JDK1.0
See Also:
update(java.awt.Graphics)


"
17,Component,2,Dimension getPreferredSize(),True,,"

getPreferredSize
public Dimension getPreferredSize()
Gets the preferred size of this component.

Returns:
a dimension object indicating this component's preferred size
See Also:
getMinimumSize(), 
LayoutManager


"
17,Component,3,"void setSize(int width, int height)",True,,"

setSize
public void setSize(int width,
                    int height)
Resizes this component so that it has width width
 and height height.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Parameters:
width - the new width of this component in pixels
height - the new height of this component in pixels
Since:
JDK1.1
See Also:
getSize(), 
setBounds(int, int, int, int), 
invalidate()


"
17,Component,4,"void setLocation(int x, int y)",True,,"

setLocation
public void setLocation(int x,
                        int y)
Moves this component to a new location. The top-left corner of
 the new location is specified by the x and y
 parameters in the coordinate space of this component's parent.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Parameters:
x - the x-coordinate of the new location's
          top-left corner in the parent's coordinate space
y - the y-coordinate of the new location's
          top-left corner in the parent's coordinate space
Since:
JDK1.1
See Also:
getLocation(), 
setBounds(int, int, int, int), 
invalidate()


"
17,Component,5,void setVisible(boolean visible),True,,"

setVisible
public void setVisible(boolean b)
Shows or hides this component depending on the value of parameter
 b.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Parameters:
b - if true, shows this component;
 otherwise, hides this component
Since:
JDK1.1
See Also:
isVisible(), 
invalidate()


"
18,ComponentOrientation,1,ComponentOrientation getOrientation(),False,,NULL
18,ComponentOrientation,2,boolean isLeftToRight(),True,,"

isLeftToRight
public boolean isLeftToRight()
HorizontalLines: Do items run left-to-right?
 Vertical Lines:  Do lines run left-to-right?
 This will return true for horizontal, left-to-right writing
 systems such as Roman.

"
18,ComponentOrientation,3,ComponentOrientation opposite(),False,,NULL
18,ComponentOrientation,4,ComponentOrientation rightToLeft(),False,,NULL
18,ComponentOrientation,5,ComponentOrientation leftToRight(),False,,NULL
19,Container,1,void add(Component comp),False,,NULL
19,Container,2,void remove(Component comp),True,,"

remove
public void remove(Component comp)
Removes the specified component from this container.
 This method also notifies the layout manager to remove the
 component from this container's layout via the
 removeLayoutComponent method.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 reflect the changes.

Parameters:
comp - the component to be removed
Throws:
NullPointerException - if comp is null
See Also:
add(java.awt.Component), 
invalidate(), 
validate(), 
remove(int)


"
19,Container,3,Component getComponent(int n),True,,"

getComponent
public Component getComponent(int n)
Gets the nth component in this container.
 
 Note: This method should be called under AWT tree lock.

Parameters:
n - the index of the component to get.
Returns:
the nth component in this container.
Throws:
ArrayIndexOutOfBoundsException - if the nth value does not exist.
See Also:
Component.getTreeLock()


"
19,Container,4,void removeAll(),True,,"

removeAll
public void removeAll()
Removes all the components from this container.
 This method also notifies the layout manager to remove the
 components from this container's layout via the
 removeLayoutComponent method.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy. If the container has already been
 displayed, the hierarchy must be validated thereafter in order to
 reflect the changes.

See Also:
add(java.awt.Component), 
remove(int), 
invalidate()


"
19,Container,5,void setLayout(LayoutManager mgr),True,,"

setLayout
public void setLayout(LayoutManager mgr)
Sets the layout manager for this container.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.

Parameters:
mgr - the specified layout manager
See Also:
doLayout(), 
getLayout(), 
invalidate()


"
20,ContainerOrderFocusTraversalPolicy,1,"Component getComponentAfter(Container focusCycleRoot, Component aComponent)",True,,"

getComponentAfter
public Component getComponentAfter(Container aContainer,
                                   Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
 
 By default, ContainerOrderFocusTraversalPolicy implicitly transfers
 focus down-cycle. That is, during normal forward focus traversal, the
 Component traversed after a focus cycle root will be the focus-cycle-
 root's default Component to focus. This behavior can be disabled using
 the setImplicitDownCycleTraversal method.
 
 If aContainer is focus
 traversal policy provider, the focus is always transferred down-cycle.

Specified by:
getComponentAfter in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or a focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or focus traversal policy provider, or if either aContainer or
         aComponent is null


"
20,ContainerOrderFocusTraversalPolicy,2,"Component getComponentBefore(Container focusCycleRoot, Component aComponent)",True,,"

getComponentBefore
public Component getComponentBefore(Container aContainer,
                                    Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal policy
 provider.

Specified by:
getComponentBefore in class FocusTraversalPolicy
Parameters:
aContainer - a focus cycle root of aComponent or focus traversal policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or focus traversal policy provider, or if either aContainer or
         aComponent is null


"
20,ContainerOrderFocusTraversalPolicy,3,Component getDefaultComponent(Container focusCycleRoot),True,,"

getDefaultComponent
public Component getDefaultComponent(Container aContainer)
Returns the default Component to focus. This Component will be the first
 to receive focus when traversing down into a new focus traversal cycle
 rooted at aContainer. The default implementation of this method
 returns the same Component as getFirstComponent.

Specified by:
getDefaultComponent in class FocusTraversalPolicy
Parameters:
aContainer - the focus cycle root or focus traversal policy provider whose default
        Component is to be returned
Returns:
the default Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null
See Also:
getFirstComponent(java.awt.Container)


"
20,ContainerOrderFocusTraversalPolicy,4,Component getLastComponent(Container focusCycleRoot),True,,"

getLastComponent
public Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Specified by:
getLastComponent in class FocusTraversalPolicy
Parameters:
aContainer - the focus cycle root or focus traversal policy provider whose last
        Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
20,ContainerOrderFocusTraversalPolicy,5,Component getFirstComponent(Container focusCycleRoot),True,,"

getFirstComponent
public Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Specified by:
getFirstComponent in class FocusTraversalPolicy
Parameters:
aContainer - the focus cycle root or focus traversal policy provider whose first
        Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
21,Cursor,1,int getType(),True,,"

getType
public int getType()
Returns the type for this cursor.

"
21,Cursor,2,int getHotSpotX(),False,,NULL
21,Cursor,3,int getHotSpotY(),False,,NULL
21,Cursor,4,Image getImage(),False,,NULL
21,Cursor,5,String getName(),True,,"

getName
public String getName()
Returns the name of this cursor.

Returns:
a localized description of this cursor.
Since:
1.2


"
22,DefaultFocusTraversalPolicy,1,"Component getComponentAfter(Container focusCycleRoot, Component aComponent)",False,,NULL
22,DefaultFocusTraversalPolicy,2,"Component getComponentBefore(Container focusCycleRoot, Component aComponent)",False,,NULL
22,DefaultFocusTraversalPolicy,3,Component getDefaultComponent(Container focusCycleRoot),False,,NULL
22,DefaultFocusTraversalPolicy,4,Component getFirstComponent(Container focusCycleRoot),False,,NULL
22,DefaultFocusTraversalPolicy,5,Component getLastComponent(Container focusCycleRoot),False,,NULL
23,DefaultKeyboardFocusManager,1,void upFocusCycle(Component aComponent),True,,"

upFocusCycle
public void upFocusCycle(Component aComponent)
Moves the focus up one focus traversal cycle. Typically, the focus owner
 is set to aComponent's focus cycle root, and the current focus cycle
 root is set to the new focus owner's focus cycle root. If, however,
 aComponent's focus cycle root is a Window, then the focus owner is set
 to the focus cycle root's default Component to focus, and the current
 focus cycle root is unchanged.

Specified by:
upFocusCycle in class KeyboardFocusManager
Parameters:
aComponent - the Component that is the basis for the focus
        traversal operation
See Also:
Component.transferFocusUpCycle()


"
23,DefaultKeyboardFocusManager,2,void downFocusCycle(Container aContainer),True,,"

downFocusCycle
public void downFocusCycle(Container aContainer)
Moves the focus down one focus traversal cycle. If aContainer is a focus
 cycle root, then the focus owner is set to aContainer's default
 Component to focus, and the current focus cycle root is set to
 aContainer. If aContainer is not a focus cycle root, then no focus
 traversal operation occurs.

Specified by:
downFocusCycle in class KeyboardFocusManager
Parameters:
aContainer - the Container that is the basis for the focus
        traversal operation
See Also:
Container.transferFocusDownCycle()


"
23,DefaultKeyboardFocusManager,3,"void setDefaultFocusTraversalKeys(int id, Set<? extends AWTKeyStroke> keystrokes)",False,,NULL
23,DefaultKeyboardFocusManager,4,void setDefaultFocusTraversalPolicy(FocusTraversalPolicy policy),False,,NULL
23,DefaultKeyboardFocusManager,5,void setGlobalCurrentFocusCycleRoot(Container newFocusCycleRoot),False,,NULL
24,Desktop,1,boolean isDesktopSupported(),True,,"

isDesktopSupported
public static boolean isDesktopSupported()
Tests whether this class is supported on the current platform.
 If it's supported, use getDesktop() to retrieve an
 instance.

Returns:
true if this class is supported on the
         current platform; false otherwise
See Also:
getDesktop()


"
24,Desktop,2,void open(File file),True,,"

open
public void open(File file)
          throws IOException
Launches the associated application to open the file.

  If the specified file is a directory, the file manager of
 the current platform is launched to open it.

Parameters:
file - the file to be opened with the associated application
Throws:
NullPointerException - if file is null
IllegalArgumentException - if the specified file doesn't
 exist
UnsupportedOperationException - if the current platform
 does not support the Desktop.Action.OPEN action
IOException - if the specified file has no associated
 application or the associated application fails to be launched
SecurityException - if a security manager exists and its
 SecurityManager.checkRead(java.lang.String)
 method denies read access to the file, or it denies the
 AWTPermission(""showWindowWithoutWarningBanner"")
 permission, or the calling thread is not allowed to create a
 subprocess
See Also:
AWTPermission


"
24,Desktop,3,void edit(File file),True,,"

edit
public void edit(File file)
          throws IOException
Launches the associated editor application and opens a file for
 editing.

Parameters:
file - the file to be opened for editing
Throws:
NullPointerException - if the specified file is null
IllegalArgumentException - if the specified file doesn't
 exist
UnsupportedOperationException - if the current platform
 does not support the Desktop.Action.EDIT action
IOException - if the specified file has no associated
 editor, or the associated application fails to be launched
SecurityException - if a security manager exists and its
 SecurityManager.checkRead(java.lang.String)
 method denies read access to the file, or SecurityManager.checkWrite(java.lang.String) method
 denies write access to the file, or it denies the
 AWTPermission(""showWindowWithoutWarningBanner"")
 permission, or the calling thread is not allowed to create a
 subprocess
See Also:
AWTPermission


"
24,Desktop,4,void browse(URI uri),True,,"

browse
public void browse(URI uri)
            throws IOException
Launches the default browser to display a URI.
 If the default browser is not able to handle the specified
 URI, the application registered for handling
 URIs of the specified type is invoked. The application
 is determined from the protocol and path of the URI, as
 defined by the URI class.
 
 If the calling thread does not have the necessary permissions,
 and this is invoked from within an applet,
 AppletContext.showDocument() is used. Similarly, if the calling
 does not have the necessary permissions, and this is invoked from within
 a Java Web Started application, BasicService.showDocument()
 is used.

Parameters:
uri - the URI to be displayed in the user default browser
Throws:
NullPointerException - if uri is null
UnsupportedOperationException - if the current platform
 does not support the Desktop.Action.BROWSE action
IOException - if the user default browser is not found,
 or it fails to be launched, or the default handler application
 failed to be launched
SecurityException - if a security manager exists and it
 denies the
 AWTPermission(""showWindowWithoutWarningBanner"")
 permission, or the calling thread is not allowed to create a
 subprocess; and not invoked from within an applet or Java Web Started
 application
IllegalArgumentException - if the necessary permissions
 are not available and the URI can not be converted to a URL
See Also:
URI, 
AWTPermission, 
AppletContext


"
24,Desktop,5,void mail(URI mailtoURI),True,,"

mail
public void mail(URI mailtoURI)
          throws IOException
Launches the mail composing window of the user default mail
 client, filling the message fields specified by a mailto: URI.

  A mailto: URI can specify message fields
 including ""to"", ""cc"", ""subject"",
 ""body"", etc.  See The mailto URL
 scheme (RFC 2368) for the mailto: URI specification
 details.

Parameters:
mailtoURI - the specified mailto: URI
Throws:
NullPointerException - if the specified URI is null
IllegalArgumentException - if the URI scheme is not
         ""mailto""
UnsupportedOperationException - if the current platform
 does not support the Desktop.Action.MAIL action
IOException - if the user default mail client is not
 found or fails to be launched
SecurityException - if a security manager exists and it
 denies the
 AWTPermission(""showWindowWithoutWarningBanner"")
 permission, or the calling thread is not allowed to create a
 subprocess
See Also:
URI, 
AWTPermission


"
25,Dialog,1,void setTitle(String title),True,,"

setTitle
public void setTitle(String title)
Sets the title of the Dialog.

Parameters:
title - the title displayed in the dialog's border;
 a null value results in an empty title
See Also:
getTitle()


"
25,Dialog,2,void setResizable(boolean resizable),True,,"

setResizable
public void setResizable(boolean resizable)
Sets whether this dialog is resizable by the user.

Parameters:
resizable - true if the user can
                 resize this dialog; false otherwise.
See Also:
isResizable()


"
25,Dialog,3,void setModal(boolean modal),True,,"

setModal
public void setModal(boolean modal)
Specifies whether this dialog should be modal.
 
 This method is obsolete and is kept for backwards compatibility only.
 Use setModalityType() instead.
 
 Note: changing modality of the visible dialog may have no effect
 until it is hidden and then shown again.

Parameters:
modal - specifies whether dialog blocks input to other windows
     when shown; calling to setModal(true) is equivalent to
     setModalityType(Dialog.DEFAULT_MODALITY_TYPE), and
     calling to setModal(false) is equvivalent to
     setModalityType(Dialog.ModalityType.MODELESS)
Since:
1.1
See Also:
DEFAULT_MODALITY_TYPE, 
Dialog.ModalityType.MODELESS, 
isModal(), 
getModalityType(), 
setModalityType(java.awt.Dialog.ModalityType)


"
25,Dialog,4,void setUndecorated(boolean undecorated),True,,"

setUndecorated
public void setUndecorated(boolean undecorated)
Disables or enables decorations for this dialog.
 
 This method can only be called while the dialog is not displayable. To
 make this dialog decorated, it must be opaque and have the default shape,
 otherwise the IllegalComponentStateException will be thrown.
 Refer to Window.setShape(java.awt.Shape), Window.setOpacity(float) and Window.setBackground(java.awt.Color) for details

Parameters:
undecorated - true if no dialog decorations are to be
         enabled; false if dialog decorations are to be enabled
Throws:
IllegalComponentStateException - if the dialog is displayable
IllegalComponentStateException - if undecorated is
      false, and this dialog does not have the default shape
IllegalComponentStateException - if undecorated is
      false, and this dialog opacity is less than 1.0f
IllegalComponentStateException - if undecorated is
      false, and the alpha value of this dialog background
      color is less than 1.0f
Since:
1.4
See Also:
isUndecorated(), 
Component.isDisplayable(), 
Window.getShape(), 
Window.getOpacity(), 
Window.getBackground()


"
25,Dialog,5,void setAlwaysOnTop(boolean alwaysOnTop),False,,NULL
26,Dimension,1,int getWidth(),False,,NULL
26,Dimension,2,int getHeight(),False,,NULL
26,Dimension,3,"void setSize(int width, int height)",True,,"

setSize
public void setSize(int width,
                    int height)
Sets the size of this Dimension object
 to the specified width and height.
 This method is included for completeness, to parallel the
 setSize method defined by Component.

Parameters:
width - the new width for this Dimension object
height - the new height for this Dimension object
Since:
1.1
See Also:
getSize(), 
Component.setSize(int, int)


"
26,Dimension,4,Dimension getSize(),True,,"

getSize
public Dimension getSize()
Gets the size of this Dimension object.
 This method is included for completeness, to parallel the
 getSize method defined by Component.

Returns:
the size of this dimension, a new instance of
           Dimension with the same width and height
Since:
1.1
See Also:
setSize(double, double), 
Component.getSize()


"
26,Dimension,5,String toString(),True,,"

toString
public String toString()
Returns a string representation of the values of this
 Dimension object's height and
 width fields. This method is intended to be used only
 for debugging purposes, and the content and format of the returned
 string may vary between implementations. The returned string may be
 empty but may not be null.

Overrides:
toString in class Object
Returns:
a string representation of this Dimension
          object


"
27,DisplayMode,1,int getWidth(),True,,"

getWidth
public int getWidth()
Returns the width of the display, in pixels.

Returns:
the width of the display, in pixels


"
27,DisplayMode,2,int getHeight(),True,,"

getHeight
public int getHeight()
Returns the height of the display, in pixels.

Returns:
the height of the display, in pixels


"
27,DisplayMode,3,int getBitDepth(),True,,"

getBitDepth
public int getBitDepth()
Returns the bit depth of the display, in bits per pixel.  This may be
 BIT_DEPTH_MULTI if multiple bit depths are supported in
 this display mode.

Returns:
the bit depth of the display, in bits per pixel.
See Also:
BIT_DEPTH_MULTI


"
27,DisplayMode,4,int getRefreshRate(),True,,"

getRefreshRate
public int getRefreshRate()
Returns the refresh rate of the display, in hertz.  This may be
 REFRESH_RATE_UNKNOWN if the information is not available.

Returns:
the refresh rate of the display, in hertz.
See Also:
REFRESH_RATE_UNKNOWN


"
27,DisplayMode,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object dm)
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Overrides:
equals in class Object
Parameters:
dm - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
28,Event,1,int id,False,,NULL
28,Event,2,long when,False,,NULL
28,Event,3,int x,False,,NULL
28,Event,4,int y,False,,NULL
28,Event,5,int key,False,,NULL
30,FileDialog,1,void setMode(int mode),True,,"

setMode
public void setMode(int mode)
Sets the mode of the file dialog.  If mode is not
 a legal value, an exception will be thrown and mode
 will not be set.

Parameters:
mode - the mode for this file dialog, either
                 FileDialog.LOAD or
                 FileDialog.SAVE
Throws:
IllegalArgumentException - if an illegal file
                 dialog mode is supplied
Since:
JDK1.1
See Also:
LOAD, 
SAVE, 
getMode()


"
30,FileDialog,2,void setDirectory(String dir),True,,"

setDirectory
public void setDirectory(String dir)
Sets the directory of this file dialog window to be the
 specified directory. Specifying a null or an
 invalid directory implies an implementation-defined default.
 This default will not be realized, however, until the user
 has selected a file. Until this point, getDirectory()
 will return the value passed into this method.
 
 Specifying """" as the directory is exactly equivalent to
 specifying null as the directory.

Parameters:
dir - the specified directory
See Also:
getDirectory()


"
30,FileDialog,3,void setFile(String file),True,,"

setFile
public void setFile(String file)
Sets the selected file for this file dialog window to be the
 specified file. This file becomes the default file if it is set
 before the file dialog window is first shown.
 
 When the dialog is shown, the specified file is selected. The kind of
 selection depends on the file existence, the dialog type, and the native
 platform. E.g., the file could be highlighted in the file list, or a
 file name editbox could be populated with the file name.
 
 This method accepts either a full file path, or a file name with an
 extension if used together with the setDirectory method.
 
 Specifying """" as the file is exactly equivalent to specifying
 null as the file.

Parameters:
file - the file being set
See Also:
getFile(), 
getFiles()


"
30,FileDialog,4,String getDirectory(),True,,"

getDirectory
public String getDirectory()
Gets the directory of this file dialog.

Returns:
the (potentially null or invalid)
          directory of this FileDialog
See Also:
setDirectory(java.lang.String)


"
30,FileDialog,5,String getFile(),True,,"

getFile
public String getFile()
Gets the selected file of this file dialog.  If the user
 selected CANCEL, the returned file is null.

Returns:
the currently selected file of this file dialog window,
                or null if none is selected
See Also:
setFile(java.lang.String)


"
31,FlowLayout,1,void setAlignment(int align),True,,"

setAlignment
public void setAlignment(int align)
Sets the alignment for this layout.
 Possible values are
 
FlowLayout.LEFT
FlowLayout.RIGHT
FlowLayout.CENTER
FlowLayout.LEADING
FlowLayout.TRAILING


Parameters:
align - one of the alignment values shown above
Since:
JDK1.1
See Also:
getAlignment()


"
31,FlowLayout,2,void setHgap(int hgap),True,,"

setHgap
public void setHgap(int hgap)
Sets the horizontal gap between components and
 between the components and the borders of the
 Container.

Parameters:
hgap - the horizontal gap between components
             and between the components and the borders
             of the Container
Since:
JDK1.1
See Also:
getHgap()


"
31,FlowLayout,3,void setVgap(int vgap),True,,"

setVgap
public void setVgap(int vgap)
Sets the vertical gap between components and between
 the components and the borders of the Container.

Parameters:
vgap - the vertical gap between components
             and between the components and the borders
             of the Container
Since:
JDK1.1
See Also:
getVgap()


"
31,FlowLayout,4,int getAlignment(),True,,"

getAlignment
public int getAlignment()
Gets the alignment for this layout.
 Possible values are FlowLayout.LEFT,
 FlowLayout.RIGHT, FlowLayout.CENTER,
 FlowLayout.LEADING,
 or FlowLayout.TRAILING.

Returns:
the alignment value for this layout
Since:
JDK1.1
See Also:
setAlignment(int)


"
31,FlowLayout,5,int getHgap(),True,,"

getHgap
public int getHgap()
Gets the horizontal gap between components
 and between the components and the borders
 of the Container

Returns:
the horizontal gap between components
             and between the components and the borders
             of the Container
Since:
JDK1.1
See Also:
setHgap(int)


"
32,FocusTraversalPolicy,1,"Component getComponentAfter(Container focusCycleRoot, Component aComponent)",True,,"

getComponentAfter
public abstract Component getComponentAfter(Container aContainer,
                                            Component aComponent)
Returns the Component that should receive the focus after aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal
 policy provider.

Parameters:
aContainer - a focus cycle root of aComponent or focus traversal
        policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus after aComponent, or
         null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if
         either aContainer or aComponent is null


"
32,FocusTraversalPolicy,2,"Component getComponentBefore(Container focusCycleRoot, Component aComponent)",True,,"

getComponentBefore
public abstract Component getComponentBefore(Container aContainer,
                                             Component aComponent)
Returns the Component that should receive the focus before aComponent.
 aContainer must be a focus cycle root of aComponent or a focus traversal
 policy provider.

Parameters:
aContainer - a focus cycle root of aComponent or focus traversal
        policy provider
aComponent - a (possibly indirect) child of aContainer, or
        aContainer itself
Returns:
the Component that should receive the focus before aComponent,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is not a focus cycle
         root of aComponent or a focus traversal policy provider, or if
         either aContainer or aComponent is null


"
32,FocusTraversalPolicy,3,Component getDefaultComponent(Container focusCycleRoot),True,,"

getDefaultComponent
public abstract Component getDefaultComponent(Container aContainer)
Returns the default Component to focus. This Component will be the first
 to receive focus when traversing down into a new focus traversal cycle
 rooted at aContainer.

Parameters:
aContainer - the focus cycle root or focus traversal policy
        provider whose default Component is to be returned
Returns:
the default Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
32,FocusTraversalPolicy,4,Component getLastComponent(Container focusCycleRoot),True,,"

getLastComponent
public abstract Component getLastComponent(Container aContainer)
Returns the last Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 reverse direction.

Parameters:
aContainer - the focus cycle root or focus traversal policy
        provider whose last Component is to be returned
Returns:
the last Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
32,FocusTraversalPolicy,5,Component getFirstComponent(Container focusCycleRoot),True,,"

getFirstComponent
public abstract Component getFirstComponent(Container aContainer)
Returns the first Component in the traversal cycle. This method is used
 to determine the next Component to focus when traversal wraps in the
 forward direction.

Parameters:
aContainer - the focus cycle root or focus traversal policy provider
        whose first Component is to be returned
Returns:
the first Component in the traversal cycle of aContainer,
         or null if no suitable Component can be found
Throws:
IllegalArgumentException - if aContainer is null


"
33,Font,1,String getFamily(),True,,"

getFamily
public String getFamily()
Returns the family name of this Font.

 The family name of a font is font specific. Two fonts such as
 Helvetica Italic and Helvetica Bold have the same family name,
 Helvetica, whereas their font face names are
 Helvetica Bold and Helvetica Italic. The list of
 available family names may be obtained by using the
 GraphicsEnvironment.getAvailableFontFamilyNames() method.

 Use getName to get the logical name of the font.
 Use getFontName to get the font face name of the font.

Returns:
a String that is the family name of this
          Font.
Since:
JDK1.1
See Also:
getName(), 
getFontName()


"
33,Font,2,int getSize(),True,,"

getSize
public int getSize()
Returns the point size of this Font, rounded to
 an integer.
 Most users are familiar with the idea of using point size to
 specify the size of glyphs in a font. This point size defines a
 measurement between the baseline of one line to the baseline of the
 following line in a single spaced text document. The point size is
 based on typographic points, approximately 1/72 of an inch.
 
 The Java(tm)2D API adopts the convention that one point is
 equivalent to one unit in user coordinates.  When using a
 normalized transform for converting user space coordinates to
 device space coordinates 72 user
 space units equal 1 inch in device space.  In this case one point
 is 1/72 of an inch.

Returns:
the point size of this Font in 1/72 of an
          inch units.
Since:
JDK1.0
See Also:
getSize2D(), 
GraphicsConfiguration.getDefaultTransform(), 
GraphicsConfiguration.getNormalizingTransform()


"
33,Font,3,int getStyle(),True,,"

getStyle
public int getStyle()
Returns the style of this Font.  The style can be
 PLAIN, BOLD, ITALIC, or BOLD+ITALIC.

Returns:
the style of this Font
Since:
JDK1.0
See Also:
isPlain(), 
isBold(), 
isItalic()


"
33,Font,4,boolean isBold(),True,,"

isBold
public boolean isBold()
Indicates whether or not this Font object's style is
 BOLD.

Returns:
true if this Font object's
            style is BOLD;
            false otherwise.
Since:
JDK1.0
See Also:
getStyle()


"
33,Font,5,boolean isItalic(),True,,"

isItalic
public boolean isItalic()
Indicates whether or not this Font object's style is
 ITALIC.

Returns:
true if this Font object's
            style is ITALIC;
            false otherwise.
Since:
JDK1.0
See Also:
getStyle()


"
34,FontMetrics,1,int charWidth(char ch),True,,"

charWidth
public int charWidth(char ch)
Returns the advance width of the specified character in this
 Font.  The advance is the
 distance from the leftmost point to the rightmost point on the
 character's baseline.  Note that the advance of a
 String is not necessarily the sum of the advances
 of its characters.

 Note: This method cannot handle  supplementary
 characters. To support all Unicode characters, including
 supplementary characters, use the charWidth(int) method.

Parameters:
ch - the character to be measured
Returns:
the advance width of the specified character
                  in the Font described by this
                  FontMetrics object.
See Also:
charsWidth(char[], int, int), 
stringWidth(String)


"
34,FontMetrics,2,int stringWidth(String str),True,,"

stringWidth
public int stringWidth(String str)
Returns the total advance width for showing the specified
 String in this Font.  The advance
 is the distance from the leftmost point to the rightmost point
 on the string's baseline.
 
 Note that the advance of a String is
 not necessarily the sum of the advances of its characters.

Parameters:
str - the String to be measured
Returns:
the advance width of the specified String
                  in the Font described by this
                  FontMetrics.
Throws:
NullPointerException - if str is null.
See Also:
bytesWidth(byte[], int, int), 
charsWidth(char[], int, int), 
getStringBounds(String, Graphics)


"
34,FontMetrics,3,int getHeight(),True,,"

getHeight
public int getHeight()
Gets the standard height of a line of text in this font.  This
 is the distance between the baseline of adjacent lines of text.
 It is the sum of the leading + ascent + descent. Due to rounding
 this may not be the same as getAscent() + getDescent() + getLeading().
 There is no guarantee that lines of text spaced at this distance are
 disjoint; such lines may overlap if some characters overshoot
 either the standard ascent or the standard descent metric.

Returns:
the standard height of the font.
See Also:
getLeading(), 
getAscent(), 
getDescent()


"
34,FontMetrics,4,int getAscent(),True,,"

getAscent
public int getAscent()
Determines the font ascent of the Font
 described by this FontMetrics object. The font ascent
 is the distance from the font's baseline to the top of most
 alphanumeric characters. Some characters in the Font
 might extend above the font ascent line.

Returns:
the font ascent of the Font.
See Also:
getMaxAscent()


"
34,FontMetrics,5,int getDescent(),True,,"

getDescent
public int getDescent()
Determines the font descent of the Font
 described by this
 FontMetrics object. The font descent is the distance
 from the font's baseline to the bottom of most alphanumeric
 characters with descenders. Some characters in the
 Font might extend
 below the font descent line.

Returns:
the font descent of the Font.
See Also:
getMaxDescent()


"
35,Frame,1,void setTitle(String title),True,,"

setTitle
public void setTitle(String title)
Sets the title for this frame to the specified string.

Parameters:
title - the title to be displayed in the frame's border.
              A null value
              is treated as an empty string, """".
See Also:
getTitle()


"
35,Frame,2,"void setSize(int width, int height)",False,,NULL
35,Frame,3,void setVisible(boolean visible),False,,NULL
35,Frame,4,void setBackground(Color color),True,,"

setBackground
public void setBackground(Color bgColor)
Sets the background color of this window.
 
 If the windowing system supports the PERPIXEL_TRANSLUCENT
 translucency, the alpha component of the given background color
 may effect the mode of operation for this window: it indicates whether
 this window must be opaque (alpha equals 1.0f) or per-pixel translucent
 (alpha is less than 1.0f). If the given background color is
 null, the window is considered completely opaque.
 
 All the following conditions must be met to enable the per-pixel
 transparency mode for this window:
 
The PERPIXEL_TRANSLUCENT translucency must be supported by the graphics
 device where this window is located
 The window must be undecorated (see setUndecorated(boolean)
 and Dialog.setUndecorated(boolean))
 The window must not be in full-screen mode (see GraphicsDevice.setFullScreenWindow(Window))
 

 If the alpha component of the requested background color is less than
 1.0f, and any of the above conditions are not met, the background
 color of this window will not change, the alpha component of the given
 background color will not affect the mode of operation for this window,
 and either the UnsupportedOperationException or IllegalComponentStateException will be thrown.
 
 When the window is per-pixel translucent, the drawing sub-system
 respects the alpha value of each individual pixel. If a pixel gets
 painted with the alpha color component equal to zero, it becomes
 visually transparent. If the alpha of the pixel is equal to 1.0f, the
 pixel is fully opaque. Interim values of the alpha color component make
 the pixel semi-transparent. In this mode, the background of the window
 gets painted with the alpha value of the given background color. If the
 alpha value of the argument of this method is equal to 0, the
 background is not painted at all.
 
 The actual level of translucency of a given pixel also depends on window
 opacity (see Window.setOpacity(float)), as well as the current shape of
 this window (see Window.setShape(Shape)).
 
 Note that painting a pixel with the alpha value of 0 may or may
 not disable the mouse event handling on this pixel. This is a
 platform-dependent behavior. To make sure the mouse events do not get
 dispatched to a particular pixel, the pixel must be excluded from the
 shape of the window.
 
 Enabling the per-pixel translucency mode may change the graphics
 configuration of this window due to the native platform requirements.

Overrides:
setBackground in class Window
Parameters:
bgColor - the color to become this window's background color.
See Also:
Window.getBackground(), 
Window.isOpaque(), 
Window.setOpacity(float), 
Window.setShape(Shape), 
isUndecorated(), 
Dialog.isUndecorated(), 
GraphicsDevice.WindowTranslucency, 
GraphicsDevice.isWindowTranslucencySupported(GraphicsDevice.WindowTranslucency), 
GraphicsConfiguration.isTranslucencyCapable()


"
35,Frame,5,void setResizable(boolean resizable),True,,"

setResizable
public void setResizable(boolean resizable)
Sets whether this frame is resizable by the user.

Parameters:
resizable - true if this frame is resizable;
                       false otherwise.
See Also:
isResizable()


"
36,GradientPaint,1,Color getColor1(),True,,"

getColor1
public Color getColor1()
Returns the color C1 anchored by the point P1.

Returns:
a Color object that is the color
 anchored by P1.


"
36,GradientPaint,2,Color getColor2(),True,,"

getColor2
public Color getColor2()
Returns the color C2 anchored by the point P2.

Returns:
a Color object that is the color
 anchored by P2.


"
36,GradientPaint,3,Point2D getPoint1(),True,,"

getPoint1
public Point2D getPoint1()
Returns a copy of the point P1 that anchors the first color.

Returns:
a Point2D object that is a copy of the point
 that anchors the first color of this
 GradientPaint.


"
36,GradientPaint,4,Point2D getPoint2(),True,,"

getPoint2
public Point2D getPoint2()
Returns a copy of the point P2 which anchors the second color.

Returns:
a Point2D object that is a copy of the point
 that anchors the second color of this
 GradientPaint.


"
36,GradientPaint,5,boolean isCyclic(),True,,"

isCyclic
public boolean isCyclic()
Returns true if the gradient cycles repeatedly
 between the two colors C1 and C2.

Returns:
true if the gradient cycles repeatedly
 between the two colors; false otherwise.


"
37,Graphics,1,"void clearRect(int x, int y, int width, int height)",True,,"

clearRect
public abstract void clearRect(int x,
                               int y,
                               int width,
                               int height)
Clears the specified rectangle by filling it with the background
 color of the current drawing surface. This operation does not
 use the current paint mode.
 
 Beginning with Java 1.1, the background color
 of offscreen images may be system dependent. Applications should
 use setColor followed by fillRect to
 ensure that an offscreen image is cleared to a specific color.

Parameters:
x - the x coordinate of the rectangle to clear.
y - the y coordinate of the rectangle to clear.
width - the width of the rectangle to clear.
height - the height of the rectangle to clear.
See Also:
fillRect(int, int, int, int), 
drawRect(int, int, int, int), 
setColor(java.awt.Color), 
setPaintMode(), 
setXORMode(java.awt.Color)


"
37,Graphics,2,"void drawLine(int x1, int y1, int x2, int y2)",True,,"

drawLine
public abstract void drawLine(int x1,
                              int y1,
                              int x2,
                              int y2)
Draws a line, using the current color, between the points
 (x1, y1) and (x2, y2)
 in this graphics context's coordinate system.

Parameters:
x1 - the first point's x coordinate.
y1 - the first point's y coordinate.
x2 - the second point's x coordinate.
y2 - the second point's y coordinate.


"
37,Graphics,3,"void fillRect(int x, int y, int width, int height)",True,,"

fillRect
public abstract void fillRect(int x,
                              int y,
                              int width,
                              int height)
Fills the specified rectangle.
 The left and right edges of the rectangle are at
 x and x + width - 1.
 The top and bottom edges are at
 y and y + height - 1.
 The resulting rectangle covers an area
 width pixels wide by
 height pixels tall.
 The rectangle is filled using the graphics context's current color.

Parameters:
x - the x coordinate
                         of the rectangle to be filled.
y - the y coordinate
                         of the rectangle to be filled.
width - the width of the rectangle to be filled.
height - the height of the rectangle to be filled.
See Also:
clearRect(int, int, int, int), 
drawRect(int, int, int, int)


"
37,Graphics,4,void setColor(Color c),True,,"

setColor
public abstract void setColor(Color c)
Sets this graphics context's current color to the specified
 color. All subsequent graphics operations using this graphics
 context use this specified color.

Parameters:
c - the new rendering color.
See Also:
Color, 
getColor()


"
37,Graphics,5,void setFont(Font font),True,,"

setFont
public abstract void setFont(Font font)
Sets this graphics context's font to the specified font.
 All subsequent text operations using this graphics context
 use this font. A null argument is silently ignored.

Parameters:
font - the font.
See Also:
getFont(), 
drawString(java.lang.String, int, int), 
drawBytes(byte[], int, int, int, int), 
drawChars(char[], int, int, int, int)


"
38,Graphics2D,1,void draw(Shape s),True,,"

draw
public abstract void draw(Shape s)
Strokes the outline of a Shape using the settings of the
 current Graphics2D context.  The rendering attributes
 applied include the Clip, Transform,
 Paint, Composite and
 Stroke attributes.

Parameters:
s - the Shape to be rendered
See Also:
setStroke(java.awt.Stroke), 
setPaint(java.awt.Paint), 
Graphics.setColor(java.awt.Color), 
transform(java.awt.geom.AffineTransform), 
setTransform(java.awt.geom.AffineTransform), 
clip(java.awt.Shape), 
Graphics.setClip(int, int, int, int), 
setComposite(java.awt.Composite)


"
38,Graphics2D,2,void fill(Shape s),True,,"

fill
public abstract void fill(Shape s)
Fills the interior of a Shape using the settings of the
 Graphics2D context. The rendering attributes applied
 include the Clip, Transform,
 Paint, and Composite.

Parameters:
s - the Shape to be filled
See Also:
setPaint(java.awt.Paint), 
Graphics.setColor(java.awt.Color), 
transform(java.awt.geom.AffineTransform), 
setTransform(java.awt.geom.AffineTransform), 
setComposite(java.awt.Composite), 
clip(java.awt.Shape), 
Graphics.setClip(int, int, int, int)


"
38,Graphics2D,3,void setPaint(Paint paint),True,,"

setPaint
public abstract void setPaint(Paint paint)
Sets the Paint attribute for the
 Graphics2D context.  Calling this method
 with a null Paint object does
 not have any effect on the current Paint attribute
 of this Graphics2D.

Parameters:
paint - the Paint object to be used to generate
 color during the rendering process, or null
See Also:
Graphics.setColor(java.awt.Color), 
getPaint(), 
GradientPaint, 
TexturePaint


"
38,Graphics2D,4,void setStroke(Stroke s),True,,"

setStroke
public abstract void setStroke(Stroke s)
Sets the Stroke for the Graphics2D context.

Parameters:
s - the Stroke object to be used to stroke a
 Shape during the rendering process
See Also:
BasicStroke, 
getStroke()


"
38,Graphics2D,5,"void setRenderingHint(RenderingHints.Key hintKey, Object hintValue)",True,,"

setRenderingHint
public abstract void setRenderingHint(RenderingHints.Key hintKey,
                                      Object hintValue)
Sets the value of a single preference for the rendering algorithms.
 Hint categories include controls for rendering quality and overall
 time/quality trade-off in the rendering process.  Refer to the
 RenderingHints class for definitions of some common
 keys and values.

Parameters:
hintKey - the key of the hint to be set.
hintValue - the value indicating preferences for the specified
 hint category.
See Also:
getRenderingHint(RenderingHints.Key), 
RenderingHints


"
39,GraphicsConfigTemplate,1,GraphicsConfiguration getDefaultConfiguration(),False,,NULL
39,GraphicsConfigTemplate,2,GraphicsConfiguration getBestConfiguration(GraphicsConfigTemplate gct),False,,NULL
39,GraphicsConfigTemplate,3,GraphicsConfiguration[] getConfigurations(),False,,NULL
39,GraphicsConfigTemplate,4,GraphicsConfiguration getBestConfiguration(VolatileImage vi),False,,NULL
39,GraphicsConfigTemplate,5,BufferCapabilities getBufferCapabilities(),False,,NULL
40,GraphicsConfiguration,1,GraphicsDevice[] getDevices(),False,,NULL
40,GraphicsConfiguration,2,Rectangle getBounds(),True,,"

getBounds
public abstract Rectangle getBounds()
Returns the bounds of the GraphicsConfiguration
 in the device coordinates. In a multi-screen environment
 with a virtual device, the bounds can have negative X
 or Y origins.

Returns:
the bounds of the area covered by this
 GraphicsConfiguration.
Since:
1.3


"
40,GraphicsConfiguration,3,BufferCapabilities getBufferCapabilities(),True,,"

getBufferCapabilities
public BufferCapabilities getBufferCapabilities()
Returns the buffering capabilities of this
 GraphicsConfiguration.

Returns:
the buffering capabilities of this graphics
 configuration object
Since:
1.4


"
40,GraphicsConfiguration,4,ImageCapabilities getImageCapabilities(),True,,"

getImageCapabilities
public ImageCapabilities getImageCapabilities()
Returns the image capabilities of this
 GraphicsConfiguration.

Returns:
the image capabilities of this graphics
 configuration object
Since:
1.4


"
40,GraphicsConfiguration,5,GraphicsConfiguration getDeviceConfiguration(GraphicsDevice gd),False,,NULL
41,GraphicsDevice,1,GraphicsConfiguration[] getConfigurations(),True,,"

getConfigurations
public abstract GraphicsConfiguration[] getConfigurations()
Returns all of the GraphicsConfiguration
 objects associated with this GraphicsDevice.

Returns:
an array of GraphicsConfiguration
 objects that are associated with this
 GraphicsDevice.


"
41,GraphicsDevice,2,DisplayMode getDisplayMode(),True,,"

getDisplayMode
public DisplayMode getDisplayMode()
Returns the current display mode of this
 GraphicsDevice.
 The returned display mode is allowed to have a refresh rate
 DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate.
 Likewise, the returned display mode is allowed to have a bit depth
 DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple
 bit depths are supported.

Returns:
the current display mode of this graphics device.
Since:
1.4
See Also:
setDisplayMode(DisplayMode)


"
41,GraphicsDevice,3,DisplayMode[] getDisplayModes(),True,,"

getDisplayModes
public DisplayMode[] getDisplayModes()
Returns all display modes available for this
 GraphicsDevice.
 The returned display modes are allowed to have a refresh rate
 DisplayMode.REFRESH_RATE_UNKNOWN if it is indeterminate.
 Likewise, the returned display modes are allowed to have a bit depth
 DisplayMode.BIT_DEPTH_MULTI if it is indeterminate or if multiple
 bit depths are supported.

Returns:
all of the display modes available for this graphics device.
Since:
1.4


"
41,GraphicsDevice,4,GraphicsConfiguration getDefaultConfiguration(),True,,"

getDefaultConfiguration
public abstract GraphicsConfiguration getDefaultConfiguration()
Returns the default GraphicsConfiguration
 associated with this GraphicsDevice.

Returns:
the default GraphicsConfiguration
 of this GraphicsDevice.


"
41,GraphicsDevice,5,void setFullScreenWindow(Window w),True,,"

setFullScreenWindow
public void setFullScreenWindow(Window w)
Enter full-screen mode, or return to windowed mode.  The entered
 full-screen mode may be either exclusive or simulated.  Exclusive
 mode is only available if isFullScreenSupported
 returns true.
 
 Exclusive mode implies:
 
Windows cannot overlap the full-screen window.  All other application
 windows will always appear beneath the full-screen window in the Z-order.
 There can be only one full-screen window on a device at any time,
 so calling this method while there is an existing full-screen Window
 will cause the existing full-screen window to
 return to windowed mode.
 Input method windows are disabled.  It is advisable to call
 Component.enableInputMethods(false) to make a component
 a non-client of the input method framework.
 

 The simulated full-screen mode places and resizes the window to the maximum
 possible visible area of the screen. However, the native windowing system
 may modify the requested geometry-related data, so that the Window object
 is placed and sized in a way that corresponds closely to the desktop settings.
 
 When entering full-screen mode, if the window to be used as a
 full-screen window is not visible, this method will make it visible.
 It will remain visible when returning to windowed mode.
 
 When entering full-screen mode, all the translucency effects are reset for
 the window. Its shape is set to null, the opacity value is set to
 1.0f, and the background color alpha is set to 255 (completely opaque).
 These values are not restored when returning to windowed mode.
 
 It is unspecified and platform-dependent how decorated windows operate
 in full-screen mode. For this reason, it is recommended to turn off
 the decorations in a Frame or Dialog object by using the
 setUndecorated method.
 
 When returning to windowed mode from an exclusive full-screen window,
 any display changes made by calling setDisplayMode are
 automatically restored to their original state.

Parameters:
w - a window to use as the full-screen window; null
 if returning to windowed mode.  Some platforms expect the
 fullscreen window to be a top-level component (i.e., a Frame);
 therefore it is preferable to use a Frame here rather than a
 Window.
Since:
1.4
See Also:
isFullScreenSupported(), 
getFullScreenWindow(), 
setDisplayMode(java.awt.DisplayMode), 
Component.enableInputMethods(boolean), 
Component.setVisible(boolean), 
Frame.setUndecorated(boolean), 
Dialog.setUndecorated(boolean)


"
42,GraphicsEnvironment,1,GraphicsDevice[] getScreenDevices(),True,,"

getScreenDevices
public abstract GraphicsDevice[] getScreenDevices()
                                           throws HeadlessException
Returns an array of all of the screen GraphicsDevice
 objects.

Returns:
an array containing all the GraphicsDevice
 objects that represent screen devices
Throws:
HeadlessException - if isHeadless() returns true
See Also:
isHeadless()


"
42,GraphicsEnvironment,2,GraphicsDevice getDefaultScreenDevice(),True,,"

getDefaultScreenDevice
public abstract GraphicsDevice getDefaultScreenDevice()
                                               throws HeadlessException
Returns the default screen GraphicsDevice.

Returns:
the GraphicsDevice that represents the
 default screen device
Throws:
HeadlessException - if isHeadless() returns true
See Also:
isHeadless()


"
42,GraphicsEnvironment,3,Font[] getAllFonts(),True,,"

getAllFonts
public abstract Font[] getAllFonts()
Returns an array containing a one-point size instance of all fonts
 available in this GraphicsEnvironment.  Typical usage
 would be to allow a user to select a particular font.  Then, the
 application can size the font and set various font attributes by
 calling the deriveFont method on the chosen instance.
 
 This method provides for the application the most precise control
 over which Font instance is used to render text.
 If a font in this GraphicsEnvironment has multiple
 programmable variations, only one
 instance of that Font is returned in the array, and
 other variations must be derived by the application.
 
 If a font in this environment has multiple programmable variations,
 such as Multiple-Master fonts, only one instance of that font is
 returned in the Font array.  The other variations
 must be derived by the application.

Returns:
an array of Font objects
Since:
1.2
See Also:
getAvailableFontFamilyNames(), 
Font, 
Font.deriveFont(int, float), 
Font.getFontName()


"
42,GraphicsEnvironment,4,GraphicsConfiguration getDefaultConfiguration(),False,,NULL
42,GraphicsEnvironment,5,String[] getAvailableFontFamilyNames(),True,,"

getAvailableFontFamilyNames
public abstract String[] getAvailableFontFamilyNames()
Returns an array containing the names of all font families in this
 GraphicsEnvironment localized for the default locale,
 as returned by Locale.getDefault().
 
 Typical usage would be for presentation to a user for selection of
 a particular family name. An application can then specify this name
 when creating a font, in conjunction with a style, such as bold or
 italic, giving the font system flexibility in choosing its own best
 match among multiple fonts in the same font family.

Returns:
an array of String containing font family names
 localized for the default locale, or a suitable alternative
 name if no name exists for this locale.
Since:
1.2
See Also:
getAllFonts(), 
Font, 
Font.getFamily()


"
43,GridBagConstraints,1,int getAnchor(),False,,NULL
43,GridBagConstraints,2,double getWeightX(),False,,NULL
43,GridBagConstraints,3,double getWeightY(),False,,NULL
43,GridBagConstraints,4,void setFill(int fill),False,,NULL
43,GridBagConstraints,5,void setInsets(Insets insets),False,,NULL
44,GridBagLayout,1,"void setConstraints(Component comp, GridBagConstraints constraints)",True,,"

setConstraints
public void setConstraints(Component comp,
                           GridBagConstraints constraints)
Sets the constraints for the specified component in this layout.

Parameters:
comp - the component to be modified
constraints - the constraints to be applied


"
44,GridBagLayout,2,"void setLayoutDimensions(GridBagLayoutInfo info, int[] minWidth, int[] minHeight, int[] weightX, int[] weightY, Container parent)",False,,NULL
44,GridBagLayout,3,"void setLayoutOrigin(int x, int y)",False,,NULL
44,GridBagLayout,4,"void setConstraints(Component comp, GridBagConstraints constraints)",True,,"

setConstraints
public void setConstraints(Component comp,
                           GridBagConstraints constraints)
Sets the constraints for the specified component in this layout.

Parameters:
comp - the component to be modified
constraints - the constraints to be applied


"
44,GridBagLayout,5,"void setConstraints(Component comp, GridBagConstraints constraints)",True,,"

setConstraints
public void setConstraints(Component comp,
                           GridBagConstraints constraints)
Sets the constraints for the specified component in this layout.

Parameters:
comp - the component to be modified
constraints - the constraints to be applied


"
45,GridBagLayoutInfo,1,int getGridX(),False,,NULL
45,GridBagLayoutInfo,2,int getGridY(),False,,NULL
45,GridBagLayoutInfo,3,int getGridWidth(),False,,NULL
45,GridBagLayoutInfo,4,int getGridHeight(),False,,NULL
45,GridBagLayoutInfo,5,double getWeightX(),False,,NULL
46,GridLayout,1,void setRows(int rows),True,,"

setRows
public void setRows(int rows)
Sets the number of rows in this layout to the specified value.

Parameters:
rows - the number of rows in this layout
Throws:
IllegalArgumentException - if the value of both
               rows and cols is set to zero
Since:
JDK1.1


"
46,GridLayout,2,void setColumns(int cols),True,,"

setColumns
public void setColumns(int cols)
Sets the number of columns in this layout to the specified value.
 Setting the number of columns has no affect on the layout
 if the number of rows specified by a constructor or by
 the setRows method is non-zero. In that case, the number
 of columns displayed in the layout is determined by the total
 number of components and the number of rows specified.

Parameters:
cols - the number of columns in this layout
Throws:
IllegalArgumentException - if the value of both
               rows and cols is set to zero
Since:
JDK1.1


"
46,GridLayout,3,void setHgap(int hgap),True,,"

setHgap
public void setHgap(int hgap)
Sets the horizontal gap between components to the specified value.

Parameters:
hgap - the horizontal gap between components
Since:
JDK1.1


"
46,GridLayout,4,void setVgap(int vgap),True,,"

setVgap
public void setVgap(int vgap)
Sets the vertical gap between components to the specified value.

Parameters:
vgap - the vertical gap between components
Since:
JDK1.1


"
46,GridLayout,5,void layoutContainer(Container parent),True,,"

layoutContainer
public void layoutContainer(Container parent)
Lays out the specified container using this layout.
 
 This method reshapes the components in the specified target
 container in order to satisfy the constraints of the
 GridLayout object.
 
 The grid layout manager determines the size of individual
 components by dividing the free space in the container into
 equal-sized portions according to the number of rows and columns
 in the layout. The container's free space equals the container's
 size minus any insets and any specified horizontal or vertical
 gap. All components in a grid layout are given the same size.

Specified by:
layoutContainer in interface LayoutManager
Parameters:
parent - the container in which to do the layout
See Also:
Container, 
Container.doLayout()


"
47,Image,1,int getWidth(null),False,,NULL
47,Image,2,int getHeight(null),False,,NULL
47,Image,3,"Image getScaledInstance(int width, int height, int hints)",True,,"

getScaledInstance
public Image getScaledInstance(int width,
                               int height,
                               int hints)
Creates a scaled version of this image.
 A new Image object is returned which will render
 the image at the specified width and
 height by default.  The new Image object
 may be loaded asynchronously even if the original source image
 has already been loaded completely.

 

 If either width
 or height is a negative number then a value is
 substituted to maintain the aspect ratio of the original image
 dimensions. If both width and height
 are negative, then the original image dimensions are used.

Parameters:
width - the width to which to scale the image.
height - the height to which to scale the image.
hints - flags to indicate the type of algorithm to use
 for image resampling.
Returns:
a scaled version of the image.
Throws:
IllegalArgumentException - if width
             or height is zero.
Since:
JDK1.1
See Also:
SCALE_DEFAULT, 
SCALE_FAST, 
SCALE_SMOOTH, 
SCALE_REPLICATE, 
SCALE_AREA_AVERAGING


"
47,Image,4,Graphics getGraphics(),True,,"

getGraphics
public abstract Graphics getGraphics()
Creates a graphics context for drawing to an off-screen image.
 This method can only be called for off-screen images.

Returns:
a graphics context to draw to the off-screen image.
Throws:
UnsupportedOperationException - if called for a
            non-off-screen image.
See Also:
Graphics, 
Component.createImage(int, int)


"
47,Image,5,void flush(),True,,"

flush
public void flush()
Flushes all reconstructable resources being used by this Image object.
 This includes any pixel data that is being cached for rendering to
 the screen as well as any system resources that are being used
 to store data or pixels for the image if they can be recreated.
 The image is reset to a state similar to when it was first created
 so that if it is again rendered, the image data will have to be
 recreated or fetched again from its source.
 
 Examples of how this method affects specific types of Image object:
 

 BufferedImage objects leave the primary Raster which stores their
 pixels untouched, but flush any information cached about those
 pixels such as copies uploaded to the display hardware for
 accelerated blits.
 
 Image objects created by the Component methods which take a
 width and height leave their primary buffer of pixels untouched,
 but have all cached information released much like is done for
 BufferedImage objects.
 
 VolatileImage objects release all of their pixel resources
 including their primary copy which is typically stored on
 the display hardware where resources are scarce.
 These objects can later be restored using their
 validate
 method.
 
 Image objects created by the Toolkit and Component classes which are
 loaded from files, URLs or produced by an ImageProducer
 are unloaded and all local resources are released.
 These objects can later be reloaded from their original source
 as needed when they are rendered, just as when they were first
 created.
 

"
48,ImageCapabilities,1,boolean isTrueVolatile(),True,,"

isTrueVolatile
public boolean isTrueVolatile()
Returns true if the VolatileImage
 described by this ImageCapabilities can lose
 its surfaces.

Returns:
whether or not a volatile image is subject to losing its surfaces
 at the whim of the operating system.


"
48,ImageCapabilities,2,boolean isAccelerated(),True,,"

isAccelerated
public boolean isAccelerated()
Returns true if the object whose capabilities are
 encapsulated in this ImageCapabilities can be or is
 accelerated.

Returns:
whether or not an image can be, or is, accelerated.  There are
 various platform-specific ways to accelerate an image, including
 pixmaps, VRAM, AGP.  This is the general acceleration method (as
 opposed to residing in system memory).


"
48,ImageCapabilities,3,boolean isSemiTranslucent(),False,,NULL
48,ImageCapabilities,4,boolean isTrueVolatile(),True,,"

isTrueVolatile
public boolean isTrueVolatile()
Returns true if the VolatileImage
 described by this ImageCapabilities can lose
 its surfaces.

Returns:
whether or not a volatile image is subject to losing its surfaces
 at the whim of the operating system.


"
48,ImageCapabilities,5,boolean isAccelerated(),True,,"

isAccelerated
public boolean isAccelerated()
Returns true if the object whose capabilities are
 encapsulated in this ImageCapabilities can be or is
 accelerated.

Returns:
whether or not an image can be, or is, accelerated.  There are
 various platform-specific ways to accelerate an image, including
 pixmaps, VRAM, AGP.  This is the general acceleration method (as
 opposed to residing in system memory).


"
49,Insets,1,int top(),False,,NULL
49,Insets,2,int bottom(),False,,NULL
49,Insets,3,int left(),False,,NULL
49,Insets,4,int right(),False,,NULL
49,Insets,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Checks whether two insets objects are equal. Two instances
 of Insets are equal if the four integer values
 of the fields top, left,
 bottom, and right are all equal.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if the two insets are equal;
                          otherwise false.
Since:
JDK1.1
See Also:
Object.hashCode(), 
HashMap


"
50,JobAttributes,1,java.awt.JobAttributes,False,,NULL
50,JobAttributes,2,java.awt.JobAttributes(java.awt.JobAttributes obj),False,,NULL
50,JobAttributes,3,"java.awt.JobAttributes(java.awt.JobAttributes obj, java.awt.PageAttributes pageAttributes)",False,,NULL
50,JobAttributes,4,java.awt.PageAttributes getPageAttributes(),False,,NULL
50,JobAttributes,5,void setPageAttributes(java.awt.PageAttributes pageAttributes),False,,NULL
51,JobAttributes.DefaultSelectionType,1,java.awt.JobAttributes.DefaultSelectionType getDefaultSelection(),False,,NULL
51,JobAttributes.DefaultSelectionType,2,java.awt.JobAttributes.DefaultSelectionType[] values(),False,,NULL
51,JobAttributes.DefaultSelectionType,3,java.awt.JobAttributes.DefaultSelectionType valueOf(String name),False,,NULL
51,JobAttributes.DefaultSelectionType,4,int ordinal(),False,,NULL
51,JobAttributes.DefaultSelectionType,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
52,JobAttributes.DestinationType,1,java.awt.JobAttributes.DestinationType[] values(),False,,NULL
52,JobAttributes.DestinationType,2,java.awt.JobAttributes.DestinationType valueOf(String name),False,,NULL
52,JobAttributes.DestinationType,3,int ordinal(),False,,NULL
52,JobAttributes.DestinationType,4,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
52,JobAttributes.DestinationType,5,boolean equals(Object other),False,,NULL
53,JobAttributes.DialogType,1,DialogType[] values(),False,,NULL
53,JobAttributes.DialogType,2,DialogType valueOf(String name),False,,NULL
53,JobAttributes.DialogType,3,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
53,JobAttributes.DialogType,4,int ordinal(),False,,NULL
53,JobAttributes.DialogType,5,boolean equals(Object obj),False,,NULL
54,JobAttributes.MultipleDocumentHandlingType,1,java.awt.JobAttributes.MultipleDocumentHandlingType[] values(),False,,NULL
54,JobAttributes.MultipleDocumentHandlingType,2,java.awt.JobAttributes.MultipleDocumentHandlingType valueOf(String name),False,,NULL
54,JobAttributes.MultipleDocumentHandlingType,3,int ordinal(),False,,NULL
54,JobAttributes.MultipleDocumentHandlingType,4,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
54,JobAttributes.MultipleDocumentHandlingType,5,boolean equals(Object obj),False,,NULL
55,JobAttributes.SidesType,1,java.awt.JobAttributes.SidesType getOpposite(),False,,NULL
55,JobAttributes.SidesType,2,boolean isOneSided(),False,,NULL
55,JobAttributes.SidesType,3,boolean isTwoSided(),False,,NULL
55,JobAttributes.SidesType,4,boolean isTumble(),False,,NULL
55,JobAttributes.SidesType,5,java.awt.JobAttributes.SidesType valueOf(java.lang.String name),False,,NULL
56,KeyboardFocusManager,1,void clearGlobalFocusOwner(),True,,"

clearGlobalFocusOwner
public void clearGlobalFocusOwner()
                           throws SecurityException
Clears the global focus owner at both the Java and native levels. If
 there exists a focus owner, that Component will receive a permanent
 FOCUS_LOST event. After this operation completes, the native windowing
 system will discard all user-generated KeyEvents until the user selects
 a new Component to receive focus, or a Component is given focus
 explicitly via a call to requestFocus(). This operation
 does not change the focused or active Windows.
 
 If a SecurityManager is installed, the calling thread must be granted
 the ""replaceKeyboardFocusManager"" AWTPermission. If this permission is
 not granted, this method will throw a SecurityException, and the current
 focus owner will not be cleared.
 
 This method is intended to be used only by KeyboardFocusManager set as
 current KeyboardFocusManager for the calling thread's context. It is not
 for general client use.

Throws:
SecurityException - if the calling thread does not have
         ""replaceKeyboardFocusManager"" permission
See Also:
clearFocusOwner(), 
Component.requestFocus(), 
FocusEvent.FOCUS_LOST


"
56,KeyboardFocusManager,2,Component getCurrentFocusCycleRoot(),False,,NULL
56,KeyboardFocusManager,3,void setGlobalFocusOwner(Component comp),True,,"

setGlobalFocusOwner
protected void setGlobalFocusOwner(Component focusOwner)
                            throws SecurityException
Sets the focus owner. The operation will be cancelled if the Component
 is not focusable. The focus owner is defined as the Component in an
 application that will typically receive all KeyEvents generated by the
 user. KeyEvents which map to the focus owner's focus traversal keys will
 not be delivered if focus traversal keys are enabled for the focus
 owner. In addition, KeyEventDispatchers may retarget or consume
 KeyEvents before they reach the focus owner.
 
 This method does not actually set the focus to the specified Component.
 It merely stores the value to be subsequently returned by
 getFocusOwner(). Use Component.requestFocus()
 or Component.requestFocusInWindow() to change the focus
 owner, subject to platform limitations.

Parameters:
focusOwner - the focus owner
Throws:
SecurityException - if this KeyboardFocusManager is not the
         current KeyboardFocusManager for the calling thread's context
         and if the calling thread does not have ""replaceKeyboardFocusManager""
         permission
See Also:
getFocusOwner(), 
getGlobalFocusOwner(), 
Component.requestFocus(), 
Component.requestFocusInWindow(), 
Component.isFocusable()


"
56,KeyboardFocusManager,4,void clearFocusOwner(),True,,"

clearFocusOwner
public void clearFocusOwner()
Clears the focus owner at both the Java and native levels if the
 focus owner exists and resides in the same context as the calling thread,
 otherwise the method returns silently.
 
 The focus owner component will receive a permanent FOCUS_LOST event.
 After this operation completes, the native windowing system will discard
 all user-generated KeyEvents until the user selects a new Component to
 receive focus, or a Component is given focus explicitly via a call to
 requestFocus(). This operation does not change the focused or
 active Windows.

Since:
1.8
See Also:
Component.requestFocus(), 
FocusEvent.FOCUS_LOST


"
56,KeyboardFocusManager,5,void clearGlobalPermanentFocusOwner(),False,,NULL
57,Label,1,String getText(),True,,"

getText
public String getText()
Gets the text of this label.

Returns:
the text of this label, or null if
             the text has been set to null.
See Also:
setText(java.lang.String)


"
57,Label,2,void setText(String text),True,,"

setText
public void setText(String text)
Sets the text for this label to the specified text.

Parameters:
text - the text that this label displays. If
             text is null, it is
             treated for display purposes like an empty
             string """".
See Also:
getText()


"
57,Label,3,void setAlignment(int alignment),True,,"

setAlignment
public void setAlignment(int alignment)
Sets the alignment for this label to the specified alignment.
 Possible values are Label.LEFT,
 Label.RIGHT, and Label.CENTER.

Parameters:
alignment - the alignment to be set.
Throws:
IllegalArgumentException - if an improper value for
                          alignment is given.
See Also:
getAlignment()


"
57,Label,4,void setBackground(Color color),False,,NULL
57,Label,5,void setFont(Font font),False,,NULL
58,LinearGradientPaint,1,Color getColor1(),False,,NULL
58,LinearGradientPaint,2,Color getColor2(),False,,NULL
58,LinearGradientPaint,3,Point2D getStartPoint(),True,,"

getStartPoint
public Point2D getStartPoint()
Returns a copy of the start point of the gradient axis.

Returns:
a Point2D object that is a copy of the point
 that anchors the first color of this LinearGradientPaint


"
58,LinearGradientPaint,4,Point2D getEndPoint(),True,,"

getEndPoint
public Point2D getEndPoint()
Returns a copy of the end point of the gradient axis.

Returns:
a Point2D object that is a copy of the point
 that anchors the last color of this LinearGradientPaint


"
58,LinearGradientPaint,5,CycleMethod getCycleMethod(),False,,NULL
59,List,1,void add(String item),True,,"

add
public void add(String item)
Adds the specified item to the end of scrolling list.

Parameters:
item - the item to be added
Since:
JDK1.1


"
59,List,2,"void add(String item, int index)",True,,"

add
public void add(String item,
                int index)
Adds the specified item to the the scrolling list
 at the position indicated by the index.  The index is
 zero-based.  If the value of the index is less than zero,
 or if the value of the index is greater than or equal to
 the number of items in the list, then the item is added
 to the end of the list.

Parameters:
item - the item to be added;
              if this parameter is null then the item is
              treated as an empty string, """"
index - the position at which to add the item
Since:
JDK1.1


"
59,List,3,void remove(int index),True,,"

remove
public void remove(int position)
Removes the item at the specified position
 from this scrolling list.
 If the item with the specified position is selected, and is the
 only selected item in the list, the list is set to have no selection.

Parameters:
position - the index of the item to delete
Throws:
ArrayIndexOutOfBoundsException - if the position is less than 0 or
               greater than getItemCount()-1
Since:
JDK1.1
See Also:
add(String, int)


"
59,List,4,String getItem(int index),True,,"

getItem
public String getItem(int index)
Gets the item associated with the specified index.

Parameters:
index - the position of the item
Returns:
an item that is associated with
                    the specified index
See Also:
getItemCount()


"
59,List,5,int getItemCount(),True,,"

getItemCount
public int getItemCount()
Gets the number of items in the list.

Returns:
the number of items in the list
Since:
JDK1.1
See Also:
getItem(int)


"
60,MediaTracker,1,"void addImage(Image image, int id)",True,,"

addImage
public void addImage(Image image,
                     int id)
Adds an image to the list of images being tracked by this media
 tracker. The image will eventually be rendered at its default
 (unscaled) size.

Parameters:
image - the image to be tracked
id - an identifier used to track this image


"
60,MediaTracker,2,void removeImage(Image image),True,,"

removeImage
public void removeImage(Image image)
Removes the specified image from this media tracker.
 All instances of the specified image are removed,
 regardless of scale or ID.

Parameters:
image - the image to be removed
Since:
JDK1.1
See Also:
removeImage(java.awt.Image, int), 
removeImage(java.awt.Image, int, int, int)


"
60,MediaTracker,3,int checkAll(),False,,NULL
60,MediaTracker,4,boolean checkID(int id),True,,"

checkID
public boolean checkID(int id)
Checks to see if all images tracked by this media tracker that
 are tagged with the specified identifier have finished loading.
 
 This method does not start loading the images if they are not
 already loading.
 
 If there is an error while loading or scaling an image, then that
 image is considered to have finished loading. Use the
 isErrorAny or isErrorID methods to
 check for errors.

Parameters:
id - the identifier of the images to check
Returns:
true if all images have finished loading,
                       have been aborted, or have encountered
                       an error; false otherwise
See Also:
checkID(int, boolean), 
checkAll(), 
isErrorAny(), 
isErrorID(int)


"
60,MediaTracker,5,void waitForAll() throws InterruptedException,True,,"

waitForAll
public void waitForAll()
                throws InterruptedException
Starts loading all images tracked by this media tracker. This
 method waits until all the images being tracked have finished
 loading.
 
 If there is an error while loading or scaling an image, then that
 image is considered to have finished loading. Use the
 isErrorAny or isErrorID methods to
 check for errors.

Throws:
InterruptedException - if any thread has
                                     interrupted this thread
See Also:
waitForID(int), 
waitForAll(long), 
isErrorAny(), 
isErrorID(int)


"
61,Menu,1,void add(MenuComponent m),False,,NULL
61,Menu,2,"void insert(MenuComponent m, int index)",False,,NULL
61,Menu,3,void remove(int index),True,,"

remove
public void remove(int index)
Removes the menu item at the specified index from this menu.

Parameters:
index - the position of the item to be removed.


"
61,Menu,4,void removeAll(),True,,"

removeAll
public void removeAll()
Removes all items from this menu.

Since:
JDK1.0.


"
61,Menu,5,MenuComponent getItem(int index),False,,NULL
62,MenuBar,1,void add(Menu m),False,,NULL
62,MenuBar,2,void remove(int index),True,,"

remove
public void remove(int index)
Removes the menu located at the specified
 index from this menu bar.

Parameters:
index - the position of the menu to be removed.
See Also:
add(java.awt.Menu)


"
62,MenuBar,3,Menu getMenu(int index),True,,"

getMenu
public Menu getMenu(int i)
Gets the specified menu.

Parameters:
i - the index position of the menu to be returned.
Returns:
the menu at the specified index of this menu bar.


"
62,MenuBar,4,int getMenuCount(),True,,"

getMenuCount
public int getMenuCount()
Gets the number of menus on the menu bar.

Returns:
the number of menus on the menu bar.
Since:
JDK1.1


"
62,MenuBar,5,void setHelpMenu(Menu m),True,,"

setHelpMenu
public void setHelpMenu(Menu m)
Sets the specified menu to be this menu bar's help menu.
 If this menu bar has an existing help menu, the old help menu is
 removed from the menu bar, and replaced with the specified menu.

Parameters:
m - the menu to be set as the help menu


"
64,MenuItem,1,void setLabel(String label),True,,"

setLabel
public void setLabel(String label)
Sets the label for this menu item to the specified label.

Parameters:
label - the new label, or null for no label.
Since:
JDK1.0
See Also:
getLabel()


"
64,MenuItem,2,String getLabel(),True,,"

getLabel
public String getLabel()
Gets the label for this menu item.

Returns:
the label of this menu item, or null
                       if this menu item has no label.
Since:
JDK1.0
See Also:
setLabel(java.lang.String)


"
64,MenuItem,3,void setEnabled(boolean enabled),True,,"

setEnabled
public void setEnabled(boolean b)
Sets whether or not this menu item can be chosen.

Parameters:
b - if true, enables this menu item;
                       if false, disables it.
Since:
JDK1.1
See Also:
isEnabled()


"
64,MenuItem,4,boolean isEnabled(),True,,"

isEnabled
public boolean isEnabled()
Checks whether this menu item is enabled.

Since:
JDK1.0
See Also:
setEnabled(boolean)


"
64,MenuItem,5,void addActionListener(ActionListener l),True,,"

addActionListener
public void addActionListener(ActionListener l)
Adds the specified action listener to receive action events
 from this menu item.
 If l is null, no exception is thrown and no action is performed.
 Refer to AWT Threading Issues for details on AWT's threading model.

Parameters:
l - the action listener.
Since:
JDK1.1
See Also:
removeActionListener(java.awt.event.ActionListener), 
getActionListeners(), 
ActionEvent, 
ActionListener


"
65,MenuShortcut,1,char getKey(),False,,NULL
65,MenuShortcut,2,int getModifiers(),False,,NULL
65,MenuShortcut,3,MenuShortcut(MenuShortcut shortcut),False,,NULL
65,MenuShortcut,4,MenuItem getMenuShortcutMenuItem(),False,,NULL
65,MenuShortcut,5,String toString(),True,,"

toString
public String toString()
Returns an internationalized description of the MenuShortcut.

Overrides:
toString in class Object
Returns:
a string representation of this MenuShortcut.
Since:
JDK1.1


"
66,MouseInfo,1,Point getPointerInfo(),False,,NULL
66,MouseInfo,2,int getNumberOfButtons(),True,,"

getNumberOfButtons
public static int getNumberOfButtons()
                              throws HeadlessException
Returns the number of buttons on the mouse.
 On systems without a mouse, returns -1.

Returns:
number of buttons on the mouse
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless() returns true
Since:
1.5


"
66,MouseInfo,3,boolean isButtonPressed(int button),False,,NULL
66,MouseInfo,4,int getButtonCount(),False,,NULL
66,MouseInfo,5,boolean isMouseButtonDown(int button),False,,NULL
67,MultipleGradientPaint,1,Color[] getColors(),True,,"

getColors
public final Color[] getColors()
Returns a copy of the array of colors used by this gradient.
 The first color maps to the first value in the fractions array,
 and the last color maps to the last value in the fractions array.

Returns:
a copy of the array of colors used by this gradient


"
67,MultipleGradientPaint,2,float[] getFractions(),True,,"

getFractions
public final float[] getFractions()
Returns a copy of the array of floats used by this gradient
 to calculate color distribution.
 The returned array always has 0 as its first value and 1 as its
 last value, with increasing values in between.

Returns:
a copy of the array of floats used by this gradient to
 calculate color distribution


"
67,MultipleGradientPaint,3,CycleMethod getCycleMethod(),False,,NULL
67,MultipleGradientPaint,4,ColorSpaceType getColorSpace(),False,,NULL
67,MultipleGradientPaint,5,Point2D getStartPoint(),False,,NULL
68,PageAttributes,1,void setMedia(java.awt.PrinterResolution resolution),False,,NULL
68,PageAttributes,2,void setOrientation(int orientation),False,,NULL
68,PageAttributes,3,"void setOrigin(int x, int y)",False,,NULL
68,PageAttributes,4,void setPrintQuality(int quality),True,,"

setPrintQuality
public void setPrintQuality(int printQuality)
Specifies the print quality for pages using these attributes.
 Specifying 3 denotes draft. Specifying 4
 denotes normal. Specifying 5 denotes high. Specifying
 any other value will generate an IllegalArgumentException. Not
 specifying the property is equivalent to calling
 setPrintQuality(PrintQualityType.NORMAL).

Parameters:
printQuality - 3, 4, or 5
Throws:
IllegalArgumentException - if printQuality is not 3
          , 4, or 5


"
68,PageAttributes,5,void setPrinterResolution(java.awt.PrinterResolution resolution),False,,NULL
69,PageAttributes.ColorType,1,int getNumColorComponents(),False,,NULL
69,PageAttributes.ColorType,2,int getValue(),False,,NULL
69,PageAttributes.ColorType,3,ColorType valueOf(String name),False,,NULL
69,PageAttributes.ColorType,4,ColorType[] values(),False,,NULL
69,PageAttributes.ColorType,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
70,PageAttributes.MediaType,1,boolean equals(Object obj),False,,NULL
70,PageAttributes.MediaType,2,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
70,PageAttributes.MediaType,3,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
70,PageAttributes.MediaType,4,int getValue(),False,,NULL
70,PageAttributes.MediaType,5,MediaType[] values(),False,,NULL
71,PageAttributes.OrientationRequestedType,1,java.awt.PageAttributes.OrientationRequestedType getNext(),False,,NULL
71,PageAttributes.OrientationRequestedType,2,java.awt.PageAttributes.OrientationRequestedType getPrevious(),False,,NULL
71,PageAttributes.OrientationRequestedType,3,boolean equals(Object obj),False,,NULL
71,PageAttributes.OrientationRequestedType,4,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
71,PageAttributes.OrientationRequestedType,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
72,PageAttributes.OriginType,1,int getValue(),False,,NULL
72,PageAttributes.OriginType,2,OriginType valueOf(String name),False,,NULL
72,PageAttributes.OriginType,3,OriginType[] values(),False,,NULL
72,PageAttributes.OriginType,4,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
72,PageAttributes.OriginType,5,boolean equals(Object obj),False,,NULL
73,PageAttributes.PrintQualityType,1,int getValue(),False,,NULL
73,PageAttributes.PrintQualityType,2,PrintQualityType[] values(),False,,NULL
73,PageAttributes.PrintQualityType,3,PrintQualityType valueOf(String name),False,,NULL
73,PageAttributes.PrintQualityType,4,boolean equals(Object obj),False,,NULL
73,PageAttributes.PrintQualityType,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
74,Panel,1,void add(Component comp),False,,NULL
74,Panel,2,void remove(Component comp),False,,NULL
74,Panel,3,Dimension getPreferredSize(),False,,NULL
74,Panel,4,void paint(Graphics g),False,,NULL
74,Panel,5,void setBackground(Color color),False,,NULL
75,Point,1,int getX(),False,,NULL
75,Point,2,int getY(),False,,NULL
75,Point,3,"void setLocation(int x, int y)",True,,"

setLocation
public void setLocation(int x,
                        int y)
Changes the point to have the specified location.
 
 This method is included for completeness, to parallel the
 setLocation method of Component.
 Its behavior is identical with move(int, int).

Parameters:
x - the X coordinate of the new location
y - the Y coordinate of the new location
Since:
1.1
See Also:
Component.setLocation(int, int), 
getLocation(), 
move(int, int)


"
75,Point,4,"double distance(double x, double y)",False,,NULL
75,Point,5,Point getLocation(),True,,"

getLocation
public Point getLocation()
Returns the location of this point.
 This method is included for completeness, to parallel the
 getLocation method of Component.

Returns:
a copy of this point, at the same location
Since:
1.1
See Also:
Component.getLocation(), 
setLocation(java.awt.Point), 
setLocation(int, int)


"
76,PointerInfo,1,Point getLocation(),True,,"

getLocation
public Point getLocation()
Returns the Point that represents the coordinates of the pointer
 on the screen. See MouseInfo.getPointerInfo() for more information
 about coordinate calculation for multiscreen systems.

Returns:
coordinates of mouse pointer
Since:
1.5
See Also:
MouseInfo, 
MouseInfo.getPointerInfo()


"
76,PointerInfo,2,GraphicsDevice getDevice(),True,,"

getDevice
public GraphicsDevice getDevice()
Returns the GraphicsDevice where the mouse pointer was at the
 moment this PointerInfo was created.

Returns:
GraphicsDevice corresponding to the pointer
Since:
1.5


"
76,PointerInfo,3,Component getComponent(),False,,NULL
76,PointerInfo,4,boolean isConfined(),False,,NULL
76,PointerInfo,5,boolean isResting(),False,,NULL
77,Polygon,1,"void addPoint(int x, int y)",True,,"

addPoint
public void addPoint(int x,
                     int y)
Appends the specified coordinates to this Polygon.
 
 If an operation that calculates the bounding box of this
 Polygon has already been performed, such as
 getBounds or contains, then this
 method updates the bounding box.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.0
See Also:
getBounds(), 
contains(java.awt.Point)


"
77,Polygon,2,Rectangle getBounds(),True,,"

getBounds
public Rectangle getBounds()
Gets the bounding box of this Polygon.
 The bounding box is the smallest Rectangle whose
 sides are parallel to the x and y axes of the
 coordinate space, and can completely contain the Polygon.

Specified by:
getBounds in interface Shape
Returns:
a Rectangle that defines the bounds of this
 Polygon.
Since:
1.1
See Also:
Shape.getBounds2D()


"
77,Polygon,3,"boolean contains(int x, int y)",True,,"

contains
public boolean contains(int x,
                        int y)
Determines whether the specified coordinates are inside this
 Polygon.
 

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if this Polygon contains
         the specified coordinates (x,y);
         false otherwise.
Since:
1.1
See Also:
contains(double, double)


"
77,Polygon,4,"void translate(int deltaX, int deltaY)",True,,"

translate
public void translate(int deltaX,
                      int deltaY)
Translates the vertices of the Polygon by
 deltaX along the x axis and by
 deltaY along the y axis.

Parameters:
deltaX - the amount to translate along the X axis
deltaY - the amount to translate along the Y axis
Since:
1.1


"
77,Polygon,5,Polygon getBounds2D(),False,,NULL
78,PopupMenu,1,void add(MenuItem item),False,,NULL
78,PopupMenu,2,"void insert(MenuItem item, int index)",False,,NULL
78,PopupMenu,3,void remove(int index),False,,NULL
78,PopupMenu,4,void removeAll(),False,,NULL
78,PopupMenu,5,MenuItem getItem(int index),False,,NULL
79,PrintJob,1,Graphics getGraphics(),True,,"

getGraphics
public abstract Graphics getGraphics()
Gets a Graphics object that will draw to the next page.
 The page is sent to the printer when the graphics
 object is disposed.  This graphics object will also implement
 the PrintGraphics interface.

See Also:
PrintGraphics


"
79,PrintJob,2,int getPageDimension(),False,,NULL
79,PrintJob,3,int getPageResolution(),True,,"

getPageResolution
public abstract int getPageResolution()
Returns the resolution of the page in pixels per inch.
 Note that this doesn't have to correspond to the physical
 resolution of the printer.

"
79,PrintJob,4,void end(),True,,"

end
public abstract void end()
Ends the print job and does any necessary cleanup.

"
79,PrintJob,5,void finalize(),True,,"

finalize
public void finalize()
Ends this print job once it is no longer referenced.

Overrides:
finalize in class Object
See Also:
end()


"
80,RadialGradientPaint,1,Color getCenterColor(),False,,NULL
80,RadialGradientPaint,2,Point2D getFocus(),False,,NULL
80,RadialGradientPaint,3,float[] getFractions(),False,,NULL
80,RadialGradientPaint,4,Color[] getColors(),False,,NULL
80,RadialGradientPaint,5,Point2D getCenterPoint(),True,,"

getCenterPoint
public Point2D getCenterPoint()
Returns a copy of the center point of the radial gradient.

Returns:
a Point2D object that is a copy of the center point


"
81,Rectangle,1,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the bounding Rectangle in
 double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the bounding Rectangle.


"
81,Rectangle,2,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the bounding Rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the bounding Rectangle.


"
81,Rectangle,3,"void setRect(double x, double y, double width, double height)",True,,"

setRect
public void setRect(double x,
                    double y,
                    double width,
                    double height)
Sets the bounds of this Rectangle to the integer bounds
 which encompass the specified x, y, width,
 and height.
 If the parameters specify a Rectangle that exceeds the
 maximum range of integers, the result will be the best
 representation of the specified Rectangle intersected
 with the maximum integer bounds.

Specified by:
setRect in class Rectangle2D
Parameters:
x - the X coordinate of the upper-left corner of
                  the specified rectangle
y - the Y coordinate of the upper-left corner of
                  the specified rectangle
width - the width of the specified rectangle
height - the new height of the specified rectangle


"
81,Rectangle,4,boolean intersects(Rectangle r),True,,"

intersects
public boolean intersects(Rectangle r)
Determines whether or not this Rectangle and the specified
 Rectangle intersect. Two rectangles intersect if
 their intersection is nonempty.

Parameters:
r - the specified Rectangle
Returns:
true if the specified Rectangle
            and this Rectangle intersect;
            false otherwise.


"
81,Rectangle,5,Rectangle createIntersection(Rectangle r),False,,NULL
82,RenderingHints,1,"Object put(Object key, Object value)",True,,"

put
public Object put(Object key,
                  Object value)
Maps the specified key to the specified
 value in this RenderingHints object.
 Neither the key nor the value can be null.
 The value can be retrieved by calling the get method
 with a key that is equal to the original key.

Specified by:
put in interface Map<Object,Object>
Parameters:
key - the rendering hint key.
value - the rendering hint value.
Returns:
the previous value of the specified key in this object
             or null if it did not have one.
Throws:
NullPointerException - if the key is
            null.
ClassCastException - if the key can not
            be cast to RenderingHints.Key
IllegalArgumentException - if the
            Key.isCompatibleValue()
            method of the specified key returns false for the
            specified value
See Also:
get(Object)


"
82,RenderingHints,2,Object get(Object key),True,,"

get
public Object get(Object key)
Returns the value to which the specified key is mapped.

Specified by:
get in interface Map<Object,Object>
Parameters:
key - a rendering hint key
Returns:
the value to which the key is mapped in this object or
          null if the key is not mapped to any value in
          this object.
Throws:
ClassCastException - if the key can not
            be cast to RenderingHints.Key
See Also:
put(Object, Object)


"
82,RenderingHints,3,"void addRenderingHints(Map<?, ?> hints)",False,,NULL
82,RenderingHints,4,void clear(),True,,"

clear
public void clear()
Clears this RenderingHints object of all key/value
 pairs.

Specified by:
clear in interface Map<Object,Object>


"
82,RenderingHints,5,boolean containsKey(Object key),True,,"

containsKey
public boolean containsKey(Object key)
Returns true if this RenderingHints
  contains a mapping for the specified key.

Specified by:
containsKey in interface Map<Object,Object>
Parameters:
key - key whose presence in this
 RenderingHints is to be tested.
Returns:
true if this RenderingHints
          contains a mapping for the specified key.
Throws:
ClassCastException - if the key can not
            be cast to RenderingHints.Key


"
83,RenderingHints.Key,1,Object clone(),False,,NULL
83,RenderingHints.Key,2,boolean equals(Object o),True,,"

equals
public final boolean equals(Object o)
The equals method for all Key objects will return the same
 result as the equality operator '=='.

Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
83,RenderingHints.Key,3,int hashCode(),True,,"

hashCode
public final int hashCode()
The hash code for all Key objects will be the same as the
 system identity code of the object as defined by the
 System.identityHashCode() method.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
83,RenderingHints.Key,4,String toString(),False,,NULL
83,RenderingHints.Key,5,String getKey(),False,,NULL
84,Robot,1,void keyPress(int keycode),True,,"

keyPress
public void keyPress(int keycode)
Presses a given key.  The key should be released using the
 keyRelease method.
 
 Key codes that have more than one physical key associated with them
 (e.g. KeyEvent.VK_SHIFT could mean either the
 left or right shift key) will map to the left key.

Parameters:
keycode - Key to press (e.g. KeyEvent.VK_A)
Throws:
IllegalArgumentException - if keycode is not
          a valid key
See Also:
keyRelease(int), 
KeyEvent


"
84,Robot,2,void keyRelease(int keycode),True,,"

keyRelease
public void keyRelease(int keycode)
Releases a given key.
 
 Key codes that have more than one physical key associated with them
 (e.g. KeyEvent.VK_SHIFT could mean either the
 left or right shift key) will map to the left key.

Parameters:
keycode - Key to release (e.g. KeyEvent.VK_A)
Throws:
IllegalArgumentException - if keycode is not a
          valid key
See Also:
keyPress(int), 
KeyEvent


"
84,Robot,3,"void mouseMove(int x, int y)",True,,"

mouseMove
public void mouseMove(int x,
                      int y)
Moves mouse pointer to given screen coordinates.

Parameters:
x - X position
y - Y position


"
84,Robot,4,void mousePress(int buttons),True,,"

mousePress
public void mousePress(int buttons)
Presses one or more mouse buttons.  The mouse buttons should
 be released using the mouseRelease(int) method.

Parameters:
buttons - the Button mask; a combination of one or more
 mouse button masks.
 
 It is allowed to use only a combination of valid values as a buttons parameter.
 A valid combination consists of InputEvent.BUTTON1_DOWN_MASK,
 InputEvent.BUTTON2_DOWN_MASK, InputEvent.BUTTON3_DOWN_MASK
 and values returned by the
 InputEvent.getMaskForButton(button) method.

 The valid combination also depends on a
 Toolkit.areExtraMouseButtonsEnabled() value as follows:
 
 If support for extended mouse buttons is
 disabled by Java
 then it is allowed to use only the following standard button masks:
 InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK,
 InputEvent.BUTTON3_DOWN_MASK.
  If support for extended mouse buttons is
 enabled by Java
 then it is allowed to use the standard button masks
 and masks for existing extended mouse buttons, if the mouse has more then three buttons.
 In that way, it is allowed to use the button masks corresponding to the buttons
 in the range from 1 to MouseInfo.getNumberOfButtons().
 
 It is recommended to use the InputEvent.getMaskForButton(button)
 method to obtain the mask for any mouse button by its number.
 

 The following standard button masks are also accepted:
 
InputEvent.BUTTON1_MASK
InputEvent.BUTTON2_MASK
InputEvent.BUTTON3_MASK

 However, it is recommended to use InputEvent.BUTTON1_DOWN_MASK,
 InputEvent.BUTTON2_DOWN_MASK,  InputEvent.BUTTON3_DOWN_MASK instead.
 Either extended _DOWN_MASK or old _MASK values
 should be used, but both those models should not be mixed.
Throws:
IllegalArgumentException - if the buttons mask contains the mask for extra mouse button
         and support for extended mouse buttons is disabled by Java
IllegalArgumentException - if the buttons mask contains the mask for extra mouse button
         that does not exist on the mouse and support for extended mouse buttons is enabled by Java
See Also:
mouseRelease(int), 
InputEvent.getMaskForButton(int), 
Toolkit.areExtraMouseButtonsEnabled(), 
MouseInfo.getNumberOfButtons(), 
MouseEvent


"
84,Robot,5,void mouseRelease(int buttons),True,,"

mouseRelease
public void mouseRelease(int buttons)
Releases one or more mouse buttons.

Parameters:
buttons - the Button mask; a combination of one or more
 mouse button masks.
 
 It is allowed to use only a combination of valid values as a buttons parameter.
 A valid combination consists of InputEvent.BUTTON1_DOWN_MASK,
 InputEvent.BUTTON2_DOWN_MASK, InputEvent.BUTTON3_DOWN_MASK
 and values returned by the
 InputEvent.getMaskForButton(button) method.

 The valid combination also depends on a
 Toolkit.areExtraMouseButtonsEnabled() value as follows:
 
 If the support for extended mouse buttons is
 disabled by Java
 then it is allowed to use only the following standard button masks:
 InputEvent.BUTTON1_DOWN_MASK, InputEvent.BUTTON2_DOWN_MASK,
 InputEvent.BUTTON3_DOWN_MASK.
  If the support for extended mouse buttons is
 enabled by Java
 then it is allowed to use the standard button masks
 and masks for existing extended mouse buttons, if the mouse has more then three buttons.
 In that way, it is allowed to use the button masks corresponding to the buttons
 in the range from 1 to MouseInfo.getNumberOfButtons().
 
 It is recommended to use the InputEvent.getMaskForButton(button)
 method to obtain the mask for any mouse button by its number.
 

 The following standard button masks are also accepted:
 
InputEvent.BUTTON1_MASK
InputEvent.BUTTON2_MASK
InputEvent.BUTTON3_MASK

 However, it is recommended to use InputEvent.BUTTON1_DOWN_MASK,
 InputEvent.BUTTON2_DOWN_MASK,  InputEvent.BUTTON3_DOWN_MASK instead.
 Either extended _DOWN_MASK or old _MASK values
 should be used, but both those models should not be mixed.
Throws:
IllegalArgumentException - if the buttons mask contains the mask for extra mouse button
         and support for extended mouse buttons is disabled by Java
IllegalArgumentException - if the buttons mask contains the mask for extra mouse button
         that does not exist on the mouse and support for extended mouse buttons is enabled by Java
See Also:
mousePress(int), 
InputEvent.getMaskForButton(int), 
Toolkit.areExtraMouseButtonsEnabled(), 
MouseInfo.getNumberOfButtons(), 
MouseEvent


"
85,Scrollbar,1,"void setValues(int value, int visible, int minimum, int maximum)",True,,"

setValues
public void setValues(int value,
                      int visible,
                      int minimum,
                      int maximum)
Sets the values of four properties for this scroll bar:
 value, visibleAmount,
 minimum, and maximum.
 If the values supplied for these properties are inconsistent
 or incorrect, they will be changed to ensure consistency.
 
 This method simultaneously and synchronously sets the values
 of four scroll bar properties, assuring that the values of
 these properties are mutually consistent. It enforces the
 following constraints:
 maximum must be greater than minimum,
 maximum - minimum must not be greater
     than Integer.MAX_VALUE,
 visibleAmount must be greater than zero.
 visibleAmount must not be greater than
     maximum - minimum,
 value must not be less than minimum,
 and value must not be greater than
     maximum - visibleAmount

 Calling this method does not fire an
 AdjustmentEvent.

Parameters:
value - is the position in the current window
visible - is the visible amount of the scroll bar
minimum - is the minimum value of the scroll bar
maximum - is the maximum value of the scroll bar
See Also:
setMinimum(int), 
setMaximum(int), 
setVisibleAmount(int), 
setValue(int)


"
85,Scrollbar,2,int getValue(),True,,"

getValue
public int getValue()
Gets the current value of this scroll bar.

Specified by:
getValue in interface Adjustable
Returns:
the current value of this scroll bar
See Also:
getMinimum(), 
getMaximum()


"
85,Scrollbar,3,int getVisible(),True,,"

getVisible
@Deprecated
public int getVisible()
Deprecated. As of JDK version 1.1,
 replaced by getVisibleAmount().

"
85,Scrollbar,4,int getMinimum(),True,,"

getMinimum
public int getMinimum()
Gets the minimum value of this scroll bar.

Specified by:
getMinimum in interface Adjustable
Returns:
the minimum value of this scroll bar
See Also:
getValue(), 
getMaximum()


"
85,Scrollbar,5,int getMaximum(),True,,"

getMaximum
public int getMaximum()
Gets the maximum value of this scroll bar.

Specified by:
getMaximum in interface Adjustable
Returns:
the maximum value of this scroll bar
See Also:
getValue(), 
getMinimum()


"
86,ScrollPane,1,"void setScrollPosition(int x, int y)",True,,"

setScrollPosition
public void setScrollPosition(int x,
                              int y)
Scrolls to the specified position within the child component.
 A call to this method is only valid if the scroll pane contains
 a child.  Specifying a position outside of the legal scrolling bounds
 of the child will scroll to the closest legal position.
 Legal bounds are defined to be the rectangle:
 x = 0, y = 0, width = (child width - view port width),
 height = (child height - view port height).
 This is a convenience method which interfaces with the Adjustable
 objects which represent the state of the scrollbars.

Parameters:
x - the x position to scroll to
y - the y position to scroll to
Throws:
NullPointerException - if the scrollpane does not contain
     a child


"
86,ScrollPane,2,Dimension getViewportSize(),True,,"

getViewportSize
public Dimension getViewportSize()
Returns the current size of the scroll pane's view port.

Returns:
the size of the view port in pixels


"
86,ScrollPane,3,"void setScrollbars(int hsbPolicy, int vsbPolicy)",False,,NULL
86,ScrollPane,4,void setRowHeader(Component rhs),False,,NULL
88,SplashScreen,1,void close(),True,,"

close
public void close()
           throws IllegalStateException
Hides the splash screen, closes the window, and releases all associated
 resources.

Throws:
IllegalStateException - if the splash screen has already been closed


"
88,SplashScreen,2,Dimension getSize(),True,,"

getSize
public Dimension getSize()
                  throws IllegalStateException
Returns the size of the splash screen window as a Dimension.
 This may be useful if, for example,
 you want to draw on the splash screen overlay surface.
 
 You cannot control the size or position of the splash screen.
 The splash screen size is adjusted automatically when the image changes.
 
 The image may contain transparent areas, and thus the reported size may
 be larger than the visible splash screen image on the screen.

Returns:
a Dimension object indicating the splash screen size
Throws:
IllegalStateException - if the splash screen has already been closed


"
88,SplashScreen,3,Graphics2D createGraphics(),True,,"

createGraphics
public Graphics2D createGraphics()
                          throws IllegalStateException
Creates a graphics context (as a Graphics2D object) for the splash
 screen overlay image, which allows you to draw over the splash screen.
 Note that you do not draw on the main image but on the image that is
 displayed over the main image using alpha blending. Also note that drawing
 on the overlay image does not necessarily update the contents of splash
 screen window. You should call update() on the
 SplashScreen when you want the splash screen to be
 updated immediately.
 
 The pixel (0, 0) in the coordinate space of the graphics context
 corresponds to the origin of the splash screen native window bounds (see
 getBounds()).

Returns:
graphics context for the splash screen overlay surface
Throws:
IllegalStateException - if the splash screen has already been closed


"
88,SplashScreen,4,void update(),True,,"

update
public void update()
            throws IllegalStateException
Updates the splash window with current contents of the overlay image.

Throws:
IllegalStateException - if the overlay image does not exist;
         for example, if createGraphics has never been called,
         or if the splash screen has already been closed


"
88,SplashScreen,5,boolean isVisible(),True,,"

isVisible
public boolean isVisible()
Determines whether the splash screen is visible. The splash screen may
 be hidden using close(), it is also hidden automatically when
 the first AWT/Swing window is made visible.
 
 Note that the native platform may delay presenting the splash screen
 native window on the screen. The return value of true for this
 method only guarantees that the conditions to hide the splash screen
 window have not occurred yet.

Returns:
true if the splash screen is visible (has not been closed yet),
         false otherwise


"
89,SystemColor,1,Color getControl(),False,,NULL
89,SystemColor,2,Color getControlDkShadow(),False,,NULL
89,SystemColor,3,Color getControlHighlight(),False,,NULL
89,SystemColor,4,Color getControlLtHighlight(),False,,NULL
89,SystemColor,5,Color getControlShadow(),False,,NULL
90,SystemTray,1,boolean isSupported(),True,,"

isSupported
public static boolean isSupported()
Returns whether the system tray is supported on the current
 platform.  In addition to displaying the tray icon, minimal
 system tray support includes either a popup menu (see TrayIcon.setPopupMenu(PopupMenu)) or an action event (see
 TrayIcon.addActionListener(ActionListener)).

 Developers should not assume that all of the system tray
 functionality is supported.  To guarantee that the tray icon's
 default action is always accessible, add the default action to
 both the action listener and the popup menu.  See the example for an example of how to do this.

 Note: When implementing SystemTray and
 TrayIcon it is strongly recommended that
 you assign different gestures to the popup menu and an action
 event.  Overloading a gesture for both purposes is confusing
 and may prevent the user from accessing one or the other.

Returns:
false if no system tray access is supported; this
 method returns true if the minimal system tray access is
 supported but does not guarantee that all system tray
 functionality is supported for the current platform
See Also:
getSystemTray()


"
90,SystemTray,2,TrayIcon[] getTrayIcons(),True,,"

getTrayIcons
public TrayIcon[] getTrayIcons()
Returns an array of all icons added to the tray by this
 application.  You can't access the icons added by another
 application.  Some browsers partition applets in different
 code bases into separate contexts, and establish walls between
 these contexts.  In such a scenario, only the tray icons added
 from this context will be returned.

  The returned array is a copy of the actual array and may be
 modified in any way without affecting the system tray.  To
 remove a TrayIcon from the
 SystemTray, use the remove(TrayIcon) method.

Returns:
an array of all tray icons added to this tray, or an
 empty array if none has been added
See Also:
add(TrayIcon), 
TrayIcon


"
90,SystemTray,3,void add(TrayIcon trayIcon),True,,"

add
public void add(TrayIcon trayIcon)
         throws AWTException
Adds a TrayIcon to the SystemTray.
 The tray icon becomes visible in the system tray once it is
 added.  The order in which icons are displayed in a tray is not
 specified - it is platform and implementation-dependent.

  All icons added by the application are automatically
 removed from the SystemTray upon application exit
 and also when the desktop system tray becomes unavailable.

Parameters:
trayIcon - the TrayIcon to be added
Throws:
NullPointerException - if trayIcon is
 null
IllegalArgumentException - if the same instance of
 a TrayIcon is added more than once
AWTException - if the desktop system tray is missing
See Also:
remove(TrayIcon), 
getSystemTray(), 
TrayIcon, 
Image


"
90,SystemTray,4,void remove(TrayIcon trayIcon),True,,"

remove
public void remove(TrayIcon trayIcon)
Removes the specified TrayIcon from the
 SystemTray.

  All icons added by the application are automatically
 removed from the SystemTray upon application exit
 and also when the desktop system tray becomes unavailable.

  If trayIcon is null or was not
 added to the system tray, no exception is thrown and no action
 is performed.

Parameters:
trayIcon - the TrayIcon to be removed
See Also:
add(TrayIcon), 
TrayIcon


"
90,SystemTray,5,void setTrayIcons(TrayIcon[] icons),False,,NULL
91,TextArea,1,String getText(),False,,NULL
91,TextArea,2,void setText(String text),False,,NULL
91,TextArea,3,void append(String str),True,,"

append
public void append(String str)
Appends the given text to the text area's current text.
 Note that passing null or inconsistent
 parameters is invalid and will result in unspecified
 behavior.

Parameters:
str - the non-null text to append
Since:
JDK1.1
See Also:
insert(java.lang.String, int)


"
91,TextArea,4,"void insert(String str, int pos)",True,,"

insert
public void insert(String str,
                   int pos)
Inserts the specified text at the specified position
 in this text area.
 Note that passing null or inconsistent
 parameters is invalid and will result in unspecified
 behavior.

Parameters:
str - the non-null text to insert
pos - the position at which to insert
Since:
JDK1.1
See Also:
TextComponent.setText(java.lang.String), 
replaceRange(java.lang.String, int, int), 
append(java.lang.String)


"
91,TextArea,5,"void replaceRange(String str, int start, int end)",True,,"

replaceRange
public void replaceRange(String str,
                         int start,
                         int end)
Replaces text between the indicated start and end positions
 with the specified replacement text.  The text at the end
 position will not be replaced.  The text at the start
 position will be replaced (unless the start position is the
 same as the end position).
 The text position is zero-based.  The inserted substring may be
 of a different length than the text it replaces.
 Note that passing null or inconsistent
 parameters is invalid and will result in unspecified
 behavior.

Parameters:
str - the non-null text to use as
                     the replacement
start - the start position
end - the end position
Since:
JDK1.1
See Also:
insert(java.lang.String, int)


"
92,TextComponent,1,void setEditable(boolean editable),True,,"

setEditable
public void setEditable(boolean b)
Sets the flag that determines whether or not this
 text component is editable.
 
 If the flag is set to true, this text component
 becomes user editable. If the flag is set to false,
 the user cannot change the text of this text component.
 By default, non-editable text components have a background color
 of SystemColor.control.  This default can be overridden by
 calling setBackground.

Parameters:
b - a flag indicating whether this text component
                      is user editable.
Since:
JDK1.0
See Also:
isEditable()


"
92,TextComponent,2,String getText(),True,,"

getText
public String getText()
Returns the text that is presented by this text component.
 By default, this is an empty string.

Returns:
the value of this TextComponent
See Also:
setText(java.lang.String)


"
92,TextComponent,3,void setText(String text),True,,"

setText
public void setText(String t)
Sets the text that is presented by this
 text component to be the specified text.

Parameters:
t - the new text;
                  if this parameter is null then
                  the text is set to the empty string """"
See Also:
getText()


"
92,TextComponent,4,void setSelectionStart(int selectionStart),True,,"

setSelectionStart
public void setSelectionStart(int selectionStart)
Sets the selection start for this text component to
 the specified position. The new start point is constrained
 to be at or before the current selection end. It also
 cannot be set to less than zero, the beginning of the
 component's text.
 If the caller supplies a value for selectionStart
 that is out of bounds, the method enforces these constraints
 silently, and without failure.

Parameters:
selectionStart - the start position of the
                        selected text
Since:
JDK1.1
See Also:
getSelectionStart(), 
setSelectionEnd(int)


"
92,TextComponent,5,void setSelectionEnd(int selectionEnd),True,,"

setSelectionEnd
public void setSelectionEnd(int selectionEnd)
Sets the selection end for this text component to
 the specified position. The new end point is constrained
 to be at or after the current selection start. It also
 cannot be set beyond the end of the component's text.
 If the caller supplies a value for selectionEnd
 that is out of bounds, the method enforces these constraints
 silently, and without failure.

Parameters:
selectionEnd - the end position of the
                        selected text
Since:
JDK1.1
See Also:
getSelectionEnd(), 
setSelectionStart(int)


"
93,TextField,1,String getText(),False,,NULL
93,TextField,2,void setText(String text),True,,"

setText
public void setText(String t)
Sets the text that is presented by this
 text component to be the specified text.

Overrides:
setText in class TextComponent
Parameters:
t - the new text.
See Also:
TextComponent.getText()


"
93,TextField,3,int getColumns(),True,,"

getColumns
public int getColumns()
Gets the number of columns in this text field. A column is an
 approximate average character width that is platform-dependent.

Returns:
the number of columns.
Since:
JDK1.1
See Also:
setColumns(int)


"
93,TextField,4,void setColumns(int columns),True,,"

setColumns
public void setColumns(int columns)
Sets the number of columns in this text field. A column is an
 approximate average character width that is platform-dependent.

Parameters:
columns - the number of columns.
Throws:
IllegalArgumentException - if the value
                 supplied for columns
                 is less than 0.
Since:
JDK1.1
See Also:
getColumns()


"
93,TextField,5,void setEditable(boolean editable),False,,NULL
94,TexturePaint,1,BufferedImage getImage(),True,,"

getImage
public BufferedImage getImage()
Returns the BufferedImage texture used to
 fill the shapes.

Returns:
a BufferedImage.


"
94,TexturePaint,2,Rectangle getAnchorRect(),False,,NULL
94,TexturePaint,3,"PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)",True,,"

createContext
public PaintContext createContext(ColorModel cm,
                                  Rectangle deviceBounds,
                                  Rectangle2D userBounds,
                                  AffineTransform xform,
                                  RenderingHints hints)
Creates and returns a PaintContext used to
 generate a tiled image pattern.
 See the specification of the
 method in the Paint interface for information
 on null parameter handling.

Specified by:
createContext in interface Paint
Parameters:
cm - the preferred ColorModel which represents the most convenient
           format for the caller to receive the pixel data, or null
           if there is no preference.
deviceBounds - the device space bounding box
                     of the graphics primitive being rendered.
userBounds - the user space bounding box
                   of the graphics primitive being rendered.
xform - the AffineTransform from user
              space into device space.
hints - the set of hints that the context object can use to
              choose between rendering alternatives.
Returns:
the PaintContext for
         generating color patterns.
See Also:
Paint, 
PaintContext, 
ColorModel, 
Rectangle, 
Rectangle2D, 
AffineTransform, 
RenderingHints


"
94,TexturePaint,4,int getTransparency(),True,,"

getTransparency
public int getTransparency()
Returns the transparency mode for this TexturePaint.

Specified by:
getTransparency in interface Transparency
Returns:
the transparency mode for this TexturePaint
 as an integer value.
See Also:
Transparency


"
94,TexturePaint,5,Shape getAnchorShape(),False,,NULL
95,Toolkit,1,Dimension getScreenSize(),True,,"

getScreenSize
public abstract Dimension getScreenSize()
                                 throws HeadlessException
Gets the size of the screen.  On systems with multiple displays, the
 primary display is used.  Multi-screen aware display dimensions are
 available from GraphicsConfiguration and
 GraphicsDevice.

Returns:
the size of this toolkit's screen, in pixels.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true
See Also:
GraphicsConfiguration.getBounds(), 
GraphicsDevice.getDisplayMode(), 
GraphicsEnvironment.isHeadless()


"
95,Toolkit,2,Image createImage(ImageProducer producer),True,,"

createImage
public abstract Image createImage(ImageProducer producer)
Creates an image with the specified image producer.

Parameters:
producer - the image producer to be used.
Returns:
an image with the specified image producer.
See Also:
Image, 
ImageProducer, 
Component.createImage(java.awt.image.ImageProducer)


"
95,Toolkit,3,ColorModel getColorModel(),True,,"

getColorModel
public abstract ColorModel getColorModel()
                                  throws HeadlessException
Determines the color model of this toolkit's screen.
 
ColorModel is an abstract class that
 encapsulates the ability to translate between the
 pixel values of an image and its red, green, blue,
 and alpha components.
 
 This toolkit method is called by the
 getColorModel method
 of the Component class.

Returns:
the color model of this toolkit's screen.
Throws:
HeadlessException - if GraphicsEnvironment.isHeadless()
 returns true
See Also:
GraphicsEnvironment.isHeadless(), 
ColorModel, 
Component.getColorModel()


"
95,Toolkit,4,FontMetrics getFontMetrics(Font font),True,,"

getFontMetrics
@Deprecated
public abstract FontMetrics getFontMetrics(Font font)
Deprecated. As of JDK version 1.2, replaced by the Font
          method getLineMetrics.
Gets the screen device metrics for rendering of the font.

Parameters:
font - a font
Returns:
the screen metrics of the specified font in this toolkit
See Also:
LineMetrics, 
Font.getLineMetrics(java.lang.String, java.awt.font.FontRenderContext), 
GraphicsEnvironment.getScreenDevices()


"
95,Toolkit,5,EventQueue getSystemEventQueue(),True,,"

getSystemEventQueue
public final EventQueue getSystemEventQueue()
Get the application's or applet's EventQueue instance.
 Depending on the Toolkit implementation, different EventQueues
 may be returned for different applets.  Applets should
 therefore not assume that the EventQueue instance returned
 by this method will be shared by other applets or the system.

  If there is a security manager then its
 checkPermission method
 is called to check AWTPermission(""accessEventQueue"").

Returns:
the EventQueue object
Throws:
SecurityException - if a security manager is set and it denies access to
          the EventQueue
See Also:
AWTPermission


"
96,TrayIcon,1,"void displayMessage(String caption, String text, TrayIcon.MessageType messageType)",True,,"

displayMessage
public void displayMessage(String caption,
                           String text,
                           TrayIcon.MessageType messageType)
Displays a popup message near the tray icon.  The message will
 disappear after a time or if the user clicks on it.  Clicking
 on the message may trigger an ActionEvent.

 Either the caption or the text may be null, but an
 NullPointerException is thrown if both are
 null.

 When displayed, the caption or text strings may be truncated on
 some platforms; the number of characters that may be displayed is
 platform-dependent.

 Note: Some platforms may not support
 showing a message.

Parameters:
caption - the caption displayed above the text, usually in
 bold; may be null
text - the text displayed for the particular message; may be
 null
messageType - an enum indicating the message type
Throws:
NullPointerException - if both caption
 and text are null


"
96,TrayIcon,2,void setImage(Image image),True,,"

setImage
public void setImage(Image image)
Sets the image for this TrayIcon.  The previous
 tray icon image is discarded without calling the Image.flush() method — you will need to call it
 manually.

  If the image represents an animated image, it will be
 animated automatically.

  See the setImageAutoSize(boolean) property for
 details on the size of the displayed image.

  Calling this method with the same image that is currently
 being used has no effect.

Parameters:
image - the non-null Image to be used
Throws:
NullPointerException - if image is null
See Also:
getImage(), 
Image, 
SystemTray.add(TrayIcon), 
TrayIcon(Image, String)


"
96,TrayIcon,3,void setPopupMenu(PopupMenu popup),True,,"

setPopupMenu
public void setPopupMenu(PopupMenu popup)
Sets the popup menu for this TrayIcon.  If
 popup is null, no popup menu will be
 associated with this TrayIcon.

 Note that this popup must not be added to any
 parent before or after it is set on the tray icon.  If you add
 it to some parent, the popup may be removed from
 that parent.

 The popup can be set on one TrayIcon only.
 Setting the same popup on multiple TrayIcons will cause
 an IllegalArgumentException.

 Note: Some platforms may not support
 showing the user-specified popup menu component when the user
 right-clicks the tray icon.  In this situation, either no menu
 will be displayed or, on some systems, a native version of the
 menu may be displayed.

Parameters:
popup - a PopupMenu or null to
 remove any popup menu
Throws:
IllegalArgumentException - if the popup is already
 set for another TrayIcon
See Also:
getPopupMenu()


"
96,TrayIcon,4,void setToolTip(String tooltip),True,,"

setToolTip
public void setToolTip(String tooltip)
Sets the tooltip string for this TrayIcon. The
 tooltip is displayed automatically when the mouse hovers over
 the icon.  Setting the tooltip to null removes any
 tooltip text.

 When displayed, the tooltip string may be truncated on some platforms;
 the number of characters that may be displayed is platform-dependent.

Parameters:
tooltip - the string for the tooltip; if the value is
 null no tooltip is shown
See Also:
getToolTip()


"
96,TrayIcon,5,void addActionListener(ActionListener listener),True,,"

addActionListener
public void addActionListener(ActionListener listener)
Adds the specified action listener to receive
 ActionEvents from this TrayIcon.
 Action events usually occur when a user selects the tray icon,
 using either the mouse or keyboard.  The conditions in which
 action events are generated are platform-dependent.

 Calling this method with a null value has no
 effect.
 Refer to AWT Threading Issues for details on AWT's threading model.

Parameters:
listener - the action listener
See Also:
removeActionListener(java.awt.event.ActionListener), 
getActionListeners(), 
ActionListener, 
setActionCommand(String)


"
97,Window,1,"void setLocation(int x, int y)",True,,"

setLocation
public void setLocation(int x,
                        int y)
Moves this component to a new location. The top-left corner of
 the new location is specified by the x and y
 parameters in the coordinate space of this component's parent.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.
 
 The method changes the geometry-related data. Therefore,
 the native windowing system may ignore such requests, or it may modify
 the requested data, so that the Window object is placed and sized
 in a way that corresponds closely to the desktop settings.

Overrides:
setLocation in class Component
Parameters:
x - the x-coordinate of the new location's
          top-left corner in the parent's coordinate space
y - the y-coordinate of the new location's
          top-left corner in the parent's coordinate space
See Also:
Component.getLocation(), 
Component.setBounds(int, int, int, int), 
Component.invalidate()


"
97,Window,2,"void setSize(int width, int height)",True,,"

setSize
public void setSize(int width,
                    int height)
Resizes this component so that it has width width
 and height height.
 
 This method changes layout-related information, and therefore,
 invalidates the component hierarchy.
 
 The width and height values
 are automatically enlarged if either is less than
 the minimum size as specified by previous call to
 setMinimumSize.
 
 The method changes the geometry-related data. Therefore,
 the native windowing system may ignore such requests, or it may modify
 the requested data, so that the Window object is placed and sized
 in a way that corresponds closely to the desktop settings.

Overrides:
setSize in class Component
Parameters:
width - the new width of this component in pixels
height - the new height of this component in pixels
Since:
1.6
See Also:
Component.getSize(), 
setBounds(int, int, int, int), 
setMinimumSize(java.awt.Dimension)


"
97,Window,3,void setTitle(String title),False,,NULL
97,Window,4,void setVisible(boolean visible),True,,"

setVisible
public void setVisible(boolean b)
Shows or hides this Window depending on the value of parameter
 b.
 
 If the method shows the window then the window is also made
 focused under the following conditions:
 
 The Window meets the requirements outlined in the
      isFocusableWindow() method.
  The Window's autoRequestFocus property is of the true value.
  Native windowing system allows the Window to get focused.
 
 There is an exception for the second condition (the value of the
 autoRequestFocus property). The property is not taken into account if the
 window is a modal dialog, which blocks the currently focused window.
 
 Developers must never assume that the window is the focused or active window
 until it receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event.

Overrides:
setVisible in class Component
Parameters:
b - if true, makes the Window visible,
 otherwise hides the Window.
 If the Window and/or its owner
 are not yet displayable, both are made displayable.  The
 Window will be validated prior to being made visible.
 If the Window is already visible, this will bring the
 Window to the front.
 If false, hides this Window, its subcomponents, and all
 of its owned children.
 The Window and its subcomponents can be made visible again
 with a call to #setVisible(true).
See Also:
Component.isDisplayable(), 
Component.setVisible(boolean), 
toFront(), 
dispose(), 
setAutoRequestFocus(boolean), 
isFocusableWindow()


"
97,Window,5,void dispose(),True,,"

dispose
public void dispose()
Releases all of the native screen resources used by this
 Window, its subcomponents, and all of its owned
 children. That is, the resources for these Components
 will be destroyed, any memory they consume will be returned to the
 OS, and they will be marked as undisplayable.
 
 The Window and its subcomponents can be made displayable
 again by rebuilding the native resources with a subsequent call to
 pack or show. The states of the recreated
 Window and its subcomponents will be identical to the
 states of these objects at the point where the Window
 was disposed (not accounting for additional modifications between
 those actions).
 
Note: When the last displayable window
 within the Java virtual machine (VM) is disposed of, the VM may
 terminate.  See 
 AWT Threading Issues for more information.

See Also:
Component.isDisplayable(), 
pack(), 
show()


"
