Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Binder,1,void updateXML(Object jaxbObject),False,,NULL
0,Binder,2,"void updateXML(Object jaxbObject, Node xmlNode)",False,,NULL
0,Binder,3,void updateJAXB(Node xmlNode),False,,NULL
0,Binder,4,void setSchema(Schema schema),True,,"

setSchema
public abstract void setSchema(Schema schema)
Specifies whether marshal, unmarshal and update methods
 performs validation on their XML content.

Parameters:
schema - set to null to disable validation.
See Also:
Unmarshaller.setSchema(Schema)


"
0,Binder,5,void setEventHandler(ValidationEventHandler handler),True,,"

setEventHandler
public abstract void setEventHandler(ValidationEventHandler handler)
                              throws JAXBException
Allow an application to register a ValidationEventHandler.
 
 The ValidationEventHandler will be called by the JAXB Provider
 if any validation errors are encountered during calls to any of the
 Binder unmarshal, marshal and update methods.

 
 Calling this method with a null parameter will cause the Binder
 to revert back to the default default event handler.

Parameters:
handler - the validation event handler
Throws:
JAXBException - if an error was encountered while setting the
         event handler


"
1,DatatypeConverter,1,String parseString(String lexicalXSDDateTime),True,,"

parseString
public static String parseString(String lexicalXSDString)

 Convert the lexical XSD string argument into a String value.

Parameters:
lexicalXSDString - A string containing a lexical representation of
     xsd:string.
Returns:
A String value represented by the string argument.


"
1,DatatypeConverter,2,String printDateTime(Calendar val),True,,"

printDateTime
public static String printDateTime(Calendar val)

 Converts a Calendar value into a string.

Parameters:
val - A Calendar value
Returns:
A string containing a lexical representation of xsd:dateTime
Throws:
IllegalArgumentException - if val is null.


"
1,DatatypeConverter,3,byte[] parseBase64Binary(String lexicalXSDBase64Binary),True,,"

parseBase64Binary
public static byte[] parseBase64Binary(String lexicalXSDBase64Binary)

 Converts the string argument into an array of bytes.

Parameters:
lexicalXSDBase64Binary - A string containing lexical representation
     of xsd:base64Binary.
Returns:
An array of bytes represented by the string argument.
Throws:
IllegalArgumentException - if string parameter does not conform to lexical value space defined in XML Schema Part 2: Datatypes for xsd:base64Binary


"
1,DatatypeConverter,4,String printBase64Binary(byte[] val),True,,"

printBase64Binary
public static String printBase64Binary(byte[] val)

 Converts an array of bytes into a string.

Parameters:
val - An array of bytes
Returns:
A string containing a lexical representation of xsd:base64Binary
Throws:
IllegalArgumentException - if val is null.


"
1,DatatypeConverter,5,int parseInt(String lexicalXSDInt),True,,"

parseInt
public static int parseInt(String lexicalXSDInt)

 Convert the string argument into an int value.

Parameters:
lexicalXSDInt - A string containing a lexical representation of
     xsd:int.
Returns:
A int value represented by the string argument.
Throws:
NumberFormatException - lexicalXSDInt is not a valid string representation of an int value.


"
2,JAXB,1,Object unmarshal(File xmlFile),False,,NULL
2,JAXB,2,"void marshal(Object obj, File xmlFile)",True,,"

marshal
public static void marshal(Object jaxbObject,
                           File xml)
Writes a Java object tree to XML and store it to the specified location.

Parameters:
jaxbObject - The Java object to be marshalled into XML. If this object is
      a JAXBElement, it will provide the root tag name and
      the body. If this object has XmlRootElement
      on its class definition, that will be used as the root tag name
      and the given object will provide the body. Otherwise,
      the root tag name is infered from
      the short class name.
      This parameter must not be null.
xml - XML will be written to this file. If it already exists,
      it will be overwritten.
Throws:
DataBindingException - If the operation fails, such as due to I/O error, unbindable classes.


"
2,JAXB,3,void setSchema(Schema schema),False,,NULL
2,JAXB,4,"void setProperty(String name, Object value)",False,,NULL
2,JAXB,5,ValidationEventHandler getEventHandler(),False,,NULL
3,JAXBContext,1,JAXBContext newInstance(Class<?>... classesToBeBound),False,,NULL
3,JAXBContext,2,Unmarshaller createUnmarshaller(),True,,"

createUnmarshaller
public abstract Unmarshaller createUnmarshaller()
                                         throws JAXBException
Create an Unmarshaller object that can be used to convert XML
 data into a java content tree.

Returns:
an Unmarshaller object
Throws:
JAXBException - if an error was encountered while creating the
                       Unmarshaller object


"
3,JAXBContext,3,Marshaller createMarshaller(),True,,"

createMarshaller
public abstract Marshaller createMarshaller()
                                     throws JAXBException
Create a Marshaller object that can be used to convert a
 java content tree into XML data.

Returns:
a Marshaller object
Throws:
JAXBException - if an error was encountered while creating the
                       Marshaller object


"
3,JAXBContext,4,Validator createValidator(),True,,"

createValidator
public abstract Validator createValidator()
                                   throws JAXBException
Deprecated. since JAXB2.0
Validator has been made optional and deprecated in JAXB 2.0.  Please
 refer to the javadoc for Validator for more detail.
 
 Create a Validator object that can be used to validate a
 java content tree against its source schema.

Returns:
a Validator object
Throws:
JAXBException - if an error was encountered while creating the
                       Validator object


"
3,JAXBContext,5,void generateSchema(SchemaOutputResolver outputResolver),True,,"

generateSchema
public void generateSchema(SchemaOutputResolver outputResolver)
                    throws IOException
Generates the schema documents for this context.

Parameters:
outputResolver - this object controls the output to which schemas
      will be sent.
Throws:
IOException - if SchemaOutputResolver throws an IOException.
UnsupportedOperationException - Calling this method on JAXB 1.0 implementations will throw
      an UnsupportedOperationException.
Since:
JAXB 2.0


"
5,JAXBElement.GlobalScope,1,QName getName(),False,,NULL
5,JAXBElement.GlobalScope,2,Class getDeclaredType(),False,,NULL
5,JAXBElement.GlobalScope,3,Class getScope(),False,,NULL
5,JAXBElement.GlobalScope,4,Object getValue(),False,,NULL
5,JAXBElement.GlobalScope,5,void setValue(Object value),False,,NULL
6,JAXBIntrospector,1,Object getValue(Object obj),True,,"

getValue
public static Object getValue(Object jaxbElement)
Get the element value of a JAXB element.
Convenience method to abstract whether working with either
    a javax.xml.bind.JAXBElement instance or an instance of
    @XmlRootElement annotated Java class.

Parameters:
jaxbElement - object that #isElement(Object) returns true.
Returns:
The element value of the jaxbElement.


"
6,JAXBIntrospector,2,JAXBObject getObject(Object obj),False,,NULL
6,JAXBIntrospector,3,boolean isElement(Object obj),True,,"

isElement
public abstract boolean isElement(Object object)
Return true if object represents a JAXB element.
Parameter object is a JAXB element for following cases:
 
It is an instance of javax.xml.bind.JAXBElement.
The class of object is annotated with
       @XmlRootElement.
   


See Also:
getElementName(Object)


"
6,JAXBIntrospector,4,boolean isNil(Object obj),False,,NULL
6,JAXBIntrospector,5,boolean isValid(Object obj),False,,NULL
7,JAXBPermission,1,void checkPermission(java.security.Permission perm),False,,NULL
7,JAXBPermission,2,boolean implies(java.security.Permission permission),False,,NULL
7,JAXBPermission,3,java.security.PermissionCollection newPermissionCollection(),False,,NULL
7,JAXBPermission,4,void setReadOnly(),False,,NULL
7,JAXBPermission,5,java.lang.String getActions(),False,,NULL
8,Marshaller.Listener,1,void beforeMarshal(Object source),True,,"

beforeMarshal
public void beforeMarshal(Object source)

 Callback method invoked before marshalling from source to XML.
 

 This method is invoked just before marshalling process starts to marshal source.
 Note that if the class of source defines its own beforeMarshal method,
 the class specific callback method is invoked just before this method is invoked.

Parameters:
source - instance of JAXB mapped class prior to marshalling from it.


"
8,Marshaller.Listener,2,void afterMarshal(Object source),True,,"

afterMarshal
public void afterMarshal(Object source)

 Callback method invoked after marshalling source to XML.
 

 This method is invoked after source and all its descendants have been marshalled.
 Note that if the class of source defines its own afterMarshal method,
 the class specific callback method is invoked just before this method is invoked.

Parameters:
source - instance of JAXB mapped class after marshalling it.


"
8,Marshaller.Listener,3,void marshalError(RuntimeException exception),False,,NULL
8,Marshaller.Listener,4,void beforeMarshalContext(Marshaller marshaller),False,,NULL
8,Marshaller.Listener,5,void afterMarshalContext(Marshaller marshaller),False,,NULL
9,SchemaOutputResolver,1,"Result createOutput(String namespaceUri, String suggestedFileName)",True,,"

createOutput
public abstract Result createOutput(String namespaceUri,
                                    String suggestedFileName)
                             throws IOException
Decides where the schema file (of the given namespace URI)
 will be written, and return it as a Result object.

 
 This method is called only once for any given namespace.
 IOW, all the components in one namespace is always written
 into the same schema document.

Parameters:
namespaceUri - The namespace URI that the schema declares.
      Can be the empty string, but never be null.
suggestedFileName - A JAXB implementation generates an unique file name (like ""schema1.xsd"")
      for the convenience of the callee. This name can be
      used for the file name of the schema, or the callee can just
      ignore this name and come up with its own name.
      This is just a hint.
Returns:
a Result object that encapsulates the actual destination
      of the schema.

      If the Result object has a system ID, it must be an
      absolute system ID. Those system IDs are relativized by the caller and used
      for <xs:import> statements.

      If the Result object does not have a system ID, a schema
      for the namespace URI is generated but it won't be explicitly
      <xs:import>ed from other schemas.

      If null is returned, the schema generation for this
      namespace URI will be skipped.
Throws:
IOException


"
9,SchemaOutputResolver,2,void addSchema(Schema schema),False,,NULL
9,SchemaOutputResolver,3,"void addDocument(String systemId, String namespaceUri)",False,,NULL
9,SchemaOutputResolver,4,void addResource(String resourceName),False,,NULL
9,SchemaOutputResolver,5,void addGeneratedFile(String fileName),False,,NULL
10,Unmarshaller.Listener,1,"void beforeUnmarshal(Object target, Object parent)",True,,"

beforeUnmarshal
public void beforeUnmarshal(Object target,
                            Object parent)

 Callback method invoked before unmarshalling into target.
 

 This method is invoked immediately after target was created and
 before the unmarshalling of this object begins. Note that
 if the class of target defines its own beforeUnmarshal method,
 the class specific callback method is invoked before this method is invoked.

Parameters:
target - non-null instance of JAXB mapped class prior to unmarshalling into it.
parent - instance of JAXB mapped class that will eventually reference target.
               null when target is root element.


"
10,Unmarshaller.Listener,2,"void afterUnmarshal(Object target, Object parent)",True,,"

afterUnmarshal
public void afterUnmarshal(Object target,
                           Object parent)

 Callback method invoked after unmarshalling XML data into target.
 

 This method is invoked after all the properties (except IDREF) are unmarshalled into target,
 but before target is set into its parent object.
 Note that if the class of target defines its own afterUnmarshal method,
 the class specific callback method is invoked before this method is invoked.

Parameters:
target - non-null instance of JAXB mapped class prior to unmarshalling into it.
parent - instance of JAXB mapped class that will reference target.
               null when target is root element.


"
10,Unmarshaller.Listener,3,"void beforeUnmarshal(Unmarshaller unmarshaller, Object parent)",False,,NULL
10,Unmarshaller.Listener,4,"void afterUnmarshal(Unmarshaller unmarshaller, Object parent)",False,,NULL
10,Unmarshaller.Listener,5,"void afterUnmarshal(Unmarshaller unmarshaller, Object parent, Object target)",False,,NULL
