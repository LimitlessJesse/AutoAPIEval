Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractInterruptibleChannel,1,void close(),True,,"

close
public final void close()
                 throws IOException
Closes this channel.

  If the channel has already been closed then this method returns
 immediately.  Otherwise it marks the channel as closed and then invokes
 the implCloseChannel method in order to
 complete the close operation.  

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Specified by:
close in interface Channel
Specified by:
close in interface InterruptibleChannel
Throws:
IOException - If an I/O error occurs


"
0,AbstractInterruptibleChannel,2,boolean isOpen(),True,,"

isOpen
public final boolean isOpen()
Description copied from interface: Channel
Tells whether or not this channel is open.

Specified by:
isOpen in interface Channel
Returns:
true if, and only if, this channel is open


"
0,AbstractInterruptibleChannel,3,int validOps(),False,,NULL
0,AbstractInterruptibleChannel,4,void begin(),True,,"

begin
protected final void begin()
Marks the beginning of an I/O operation that might block indefinitely.

  This method should be invoked in tandem with the end
 method, using a try ... finally block as
 shown above, in order to implement asynchronous
 closing and interruption for this channel.  

"
0,AbstractInterruptibleChannel,5,void end(boolean completed),True,,"

end
protected final void end(boolean completed)
                  throws AsynchronousCloseException
Marks the end of an I/O operation that might block indefinitely.

  This method should be invoked in tandem with the begin method, using a try ... finally block
 as shown above, in order to implement asynchronous
 closing and interruption for this channel.  

Parameters:
completed - true if, and only if, the I/O operation completed
         successfully, that is, had some effect that would be visible to
         the operation's invoker
Throws:
AsynchronousCloseException - If the channel was asynchronously closed
ClosedByInterruptException - If the thread blocked in the I/O operation was interrupted


"
1,AbstractSelectableChannel,1,SelectorProvider provider(),True,,"

provider
public final SelectorProvider provider()
Returns the provider that created this channel.

Specified by:
provider in class SelectableChannel
Returns:
The provider that created this channel


"
1,AbstractSelectableChannel,2,SelectionKey keyFor(Selector sel),True,,"

keyFor
public final SelectionKey keyFor(Selector sel)
Description copied from class: SelectableChannel
Retrieves the key representing the channel's registration with the given
 selector.

Specified by:
keyFor in class SelectableChannel
Parameters:
sel - The selector
Returns:
The key returned when this channel was last registered with the
          given selector, or null if this channel is not
          currently registered with that selector


"
1,AbstractSelectableChannel,3,SelectableChannel configureBlocking(boolean block),True,,"

configureBlocking
public final SelectableChannel configureBlocking(boolean block)
                                          throws IOException
Adjusts this channel's blocking mode.

  If the given blocking mode is different from the current blocking
 mode then this method invokes the implConfigureBlocking method, while holding the appropriate locks, in
 order to change the mode.  

Specified by:
configureBlocking in class SelectableChannel
Parameters:
block - If true then this channel will be placed in
                blocking mode; if false then it will be placed
                non-blocking mode
Returns:
This selectable channel
Throws:
ClosedChannelException - If this channel is closed
IOException - If an I/O error occurs


"
1,AbstractSelectableChannel,4,int validOps(),False,,NULL
1,AbstractSelectableChannel,5,"SelectableChannel register(Selector sel, int ops, Object att)",False,,NULL
3,AbstractSelector,1,Set<SelectionKey> keys(),False,,NULL
3,AbstractSelector,2,int select(),False,,NULL
3,AbstractSelector,3,int select(long timeout),False,,NULL
3,AbstractSelector,4,int selectNow(),False,,NULL
3,AbstractSelector,5,SelectorProvider provider(),True,,"

provider
public final SelectorProvider provider()
Returns the provider that created this channel.

Specified by:
provider in class Selector
Returns:
The provider that created this channel


"
4,AsynchronousChannelProvider,1,"AsynchronousChannelGroup openAsynchronousChannelGroup(int nThreads, ThreadFactory threadFactory)",True,,"

openAsynchronousChannelGroup
public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(int nThreads,
                                                                      ThreadFactory threadFactory)
                                                               throws IOException
Constructs a new asynchronous channel group with a fixed thread pool.

Parameters:
nThreads - The number of threads in the pool
threadFactory - The factory to use when creating new threads
Returns:
A new asynchronous channel group
Throws:
IllegalArgumentException - If nThreads <= 0
IOException - If an I/O error occurs
See Also:
AsynchronousChannelGroup.withFixedThreadPool(int, java.util.concurrent.ThreadFactory)


"
4,AsynchronousChannelProvider,2,"AsynchronousChannelGroup openAsynchronousChannelGroup(ExecutorService executor, int initialSize)",True,,"

openAsynchronousChannelGroup
public abstract AsynchronousChannelGroup openAsynchronousChannelGroup(ExecutorService executor,
                                                                      int initialSize)
                                                               throws IOException
Constructs a new asynchronous channel group with the given thread pool.

Parameters:
executor - The thread pool
initialSize - A value >=0 or a negative value for implementation
          specific default
Returns:
A new asynchronous channel group
Throws:
IOException - If an I/O error occurs
See Also:
AsynchronousChannelGroup.withCachedThreadPool(java.util.concurrent.ExecutorService, int)


"
4,AsynchronousChannelProvider,3,AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(AsynchronousChannelGroup group),True,,"

openAsynchronousServerSocketChannel
public abstract AsynchronousServerSocketChannel openAsynchronousServerSocketChannel(AsynchronousChannelGroup group)
                                                                             throws IOException
Opens an asynchronous server-socket channel.

Parameters:
group - The group to which the channel is bound, or null to
          bind to the default group
Returns:
The new channel
Throws:
IllegalChannelGroupException - If the provider that created the group differs from this provider
ShutdownChannelGroupException - The group is shutdown
IOException - If an I/O error occurs


"
4,AsynchronousChannelProvider,4,AsynchronousSocketChannel openAsynchronousSocketChannel(AsynchronousChannelGroup group),True,,"

openAsynchronousSocketChannel
public abstract AsynchronousSocketChannel openAsynchronousSocketChannel(AsynchronousChannelGroup group)
                                                                 throws IOException
Opens an asynchronous socket channel.

Parameters:
group - The group to which the channel is bound, or null to
          bind to the default group
Returns:
The new channel
Throws:
IllegalChannelGroupException - If the provider that created the group differs from this provider
ShutdownChannelGroupException - The group is shutdown
IOException - If an I/O error occurs


"
4,AsynchronousChannelProvider,5,"CompletionHandler<V,A> openCompletionHandler()",False,,NULL
5,SelectorProvider,1,Selector openSelector(),False,,NULL
5,SelectorProvider,2,Channel openDatagramChannel(),False,,NULL
5,SelectorProvider,3,Channel openPipe(),False,,NULL
5,SelectorProvider,4,Channel openServerSocketChannel(),False,,NULL
5,SelectorProvider,5,Channel openSocketChannel(),False,,NULL
