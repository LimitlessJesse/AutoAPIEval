Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Boolean,1,boolean booleanValue(),True,,"

booleanValue
public boolean booleanValue()
Returns the value of this Boolean object as a boolean
 primitive.

Returns:
the primitive boolean value of this object.


"
0,Boolean,2,int compareTo(Boolean b),True,,"

compareTo
public int compareTo(Boolean b)
Compares this Boolean instance with another.

Specified by:
compareTo in interface Comparable<Boolean>
Parameters:
b - the Boolean instance to be compared
Returns:
zero if this object represents the same boolean value as the
          argument; a positive value if this object represents true
          and the argument represents false; and a negative value if
          this object represents false and the argument represents true
Throws:
NullPointerException - if the argument is null
Since:
1.5
See Also:
Comparable


"
0,Boolean,3,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hash code for this Boolean object.

Overrides:
hashCode in class Object
Returns:
the integer 1231 if this object represents
 true; returns the integer 1237 if this
 object represents false.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
0,Boolean,4,String toString(),True,,"

toString
public String toString()
Returns a String object representing this Boolean's
 value.  If this object represents the value true,
 a string equal to ""true"" is returned. Otherwise, a
 string equal to ""false"" is returned.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
0,Boolean,5,Boolean valueOf(boolean b),True,,"

valueOf
public static Boolean valueOf(boolean b)
Returns a Boolean instance representing the specified
 boolean value.  If the specified boolean value
 is true, this method returns Boolean.TRUE;
 if it is false, this method returns Boolean.FALSE.
 If a new Boolean instance is not required, this method
 should generally be used in preference to the constructor
 Boolean(boolean), as this method is likely to yield
 significantly better space and time performance.

Parameters:
b - a boolean value.
Returns:
a Boolean instance representing b.
Since:
1.4


"
1,Byte,1,byte byteValue(),True,,"

byteValue
public byte byteValue()
Returns the value of this Byte as a
 byte.

Overrides:
byteValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type byte.


"
1,Byte,2,int compareTo(Byte anotherByte),True,,"

compareTo
public int compareTo(Byte anotherByte)
Compares two Byte objects numerically.

Specified by:
compareTo in interface Comparable<Byte>
Parameters:
anotherByte - the Byte to be compared.
Returns:
the value 0 if this Byte is
          equal to the argument Byte; a value less than
          0 if this Byte is numerically less
          than the argument Byte; and a value greater than
           0 if this Byte is numerically
           greater than the argument Byte (signed
           comparison).
Since:
1.2


"
1,Byte,3,Byte valueOf(byte b),True,,"

valueOf
public static Byte valueOf(byte b)
Returns a Byte instance representing the specified
 byte value.
 If a new Byte instance is not required, this method
 should generally be used in preference to the constructor
 Byte(byte), as this method is likely to yield
 significantly better space and time performance since
 all byte values are cached.

Parameters:
b - a byte value.
Returns:
a Byte instance representing b.
Since:
1.5


"
1,Byte,4,String toString(),True,,"

toString
public String toString()
Returns a String object representing this
 Byte's value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the byte value were given as an argument to the
 toString(byte) method.

Overrides:
toString in class Object
Returns:
a string representation of the value of this object in
          base 10.


"
1,Byte,5,Byte valueOf(String s),True,,"

valueOf
public static Byte valueOf(String s)
                    throws NumberFormatException
Returns a Byte object holding the value
 given by the specified String. The argument is
 interpreted as representing a signed decimal byte,
 exactly as if the argument were given to the parseByte(java.lang.String) method. The result is a
 Byte object that represents the byte
 value specified by the string.

  In other words, this method returns a Byte object
 equal to the value of:

 
new Byte(Byte.parseByte(s))


Parameters:
s - the string to be parsed
Returns:
a Byte object holding the value
                  represented by the string argument
Throws:
NumberFormatException - If the String does
                  not contain a parsable byte.


"
2,Character,1,char charValue(),True,,"

charValue
public char charValue()
Returns the value of this Character object.

Returns:
the primitive char value represented by
          this object.


"
2,Character,2,int compareTo(Character anotherChar),True,,"

compareTo
public int compareTo(Character anotherCharacter)
Compares two Character objects numerically.

Specified by:
compareTo in interface Comparable<Character>
Parameters:
anotherCharacter - the Character to be compared.
Returns:
the value 0 if the argument Character
          is equal to this Character; a value less than
          0 if this Character is numerically less
          than the Character argument; and a value greater than
          0 if this Character is numerically greater
          than the Character argument (unsigned comparison).
          Note that this is strictly a numerical comparison; it is not
          locale-dependent.
Since:
1.2


"
2,Character,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is not
 null and is a Character object that
 represents the same char value as this object.

Overrides:
equals in class Object
Parameters:
obj - the object to compare with.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
2,Character,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hash code for this Character; equal to the result
 of invoking charValue().

Overrides:
hashCode in class Object
Returns:
a hash code value for this Character
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
2,Character,5,String toString(),True,,"

toString
public String toString()
Returns a String object representing this
 Character's value.  The result is a string of
 length 1 whose sole component is the primitive
 char value represented by this
 Character object.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
3,Character.Subset,1,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Compares two Subset objects for equality.
 This method returns true if and only if
 this and the argument refer to the same
 object; since this method is final, this
 guarantee holds for all subclasses.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
3,Character.Subset,2,int hashCode(),True,,"

hashCode
public final int hashCode()
Returns the standard hash code as defined by the
 Object.hashCode() method.  This method
 is final in order to ensure that the
 equals and hashCode methods will
 be consistent in all subclasses.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
3,Character.Subset,3,String toString(),True,,"

toString
public final String toString()
Returns the name of this subset.

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
3,Character.Subset,4,int compareTo(Character.Subset o),False,,NULL
3,Character.Subset,5,boolean equals(Object obj),True,,"

equals
public final boolean equals(Object obj)
Compares two Subset objects for equality.
 This method returns true if and only if
 this and the argument refer to the same
 object; since this method is final, this
 guarantee holds for all subclasses.

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
4,Character.UnicodeBlock,1,boolean of(int codePoint),False,,NULL
4,Character.UnicodeBlock,2,String toString(),False,,NULL
4,Character.UnicodeBlock,3,UnicodeBlock forName(String blockName),False,,NULL
4,Character.UnicodeBlock,4,int getEnd(),False,,NULL
4,Character.UnicodeBlock,5,int getStart(),False,,NULL
5,Class,1,String getName(),True,,"

getName
public String getName()
Returns the  name of the entity (class, interface, array class,
 primitive type, or void) represented by this Class object,
 as a String.

  If this class object represents a reference type that is not an
 array type then the binary name of the class is returned, as specified
 by
 The Javaâ„¢ Language Specification.

  If this class object represents a primitive type or void, then the
 name returned is a String equal to the Java language
 keyword corresponding to the primitive type or void.

  If this class object represents a class of arrays, then the internal
 form of the name consists of the name of the element type preceded by
 one or more '[' characters representing the depth of the array
 nesting.  The encoding of element type names is as follows:

 
 Element Type       Encoding
  boolean            Z
  byte               B
  char               C
  class or interface
                             Lclassname;
  double             D
  float              F
  int                I
  long               J
  short              S
 
 The class or interface name classname is the binary name of
 the class specified above.

  Examples:
 
 String.class.getName()
     returns ""java.lang.String""
 byte.class.getName()
     returns ""byte""
 (new Object[3]).getClass().getName()
     returns ""[Ljava.lang.Object;""
 (new int[3][4][5][6][7][8][9]).getClass().getName()
     returns ""[[[[[[[I""
 

Returns:
the name of the class or interface
          represented by this object.


"
5,Class,2,Class<?>[] getInterfaces(),True,,"

getInterfaces
public Class<?>[] getInterfaces()
Determines the interfaces implemented by the class or interface
 represented by this object.

  If this object represents a class, the return value is an array
 containing objects representing all interfaces implemented by the
 class. The order of the interface objects in the array corresponds to
 the order of the interface names in the implements clause
 of the declaration of the class represented by this object. For
 example, given the declaration:
 
class Shimmer implements FloorWax, DessertTopping { ... }

 suppose the value of s is an instance of
 Shimmer; the value of the expression:
 
s.getClass().getInterfaces()[0]

 is the Class object that represents interface
 FloorWax; and the value of:
 
s.getClass().getInterfaces()[1]

 is the Class object that represents interface
 DessertTopping.

  If this object represents an interface, the array contains objects
 representing all interfaces extended by the interface. The order of the
 interface objects in the array corresponds to the order of the interface
 names in the extends clause of the declaration of the
 interface represented by this object.

  If this object represents a class or interface that implements no
 interfaces, the method returns an array of length 0.

  If this object represents a primitive type or void, the method
 returns an array of length 0.

  If this Class object represents an array type, the
 interfaces Cloneable and java.io.Serializable are
 returned in that order.

Returns:
an array of interfaces implemented by this class.


"
5,Class,3,Class<?> getSuperclass(),False,,NULL
5,Class,4,boolean isInterface(),True,,"

isInterface
public boolean isInterface()
Determines if the specified Class object represents an
 interface type.

Returns:
true if this object represents an interface;
          false otherwise.


"
5,Class,5,Object newInstance(),False,,NULL
6,ClassLoader,1,Class<?> loadClass(String name),True,,"

loadClass
public Class<?> loadClass(String name)
                   throws ClassNotFoundException
Loads the class with the specified binary name.
 This method searches for classes in the same manner as the loadClass(String, boolean) method.  It is invoked by the Java virtual
 machine to resolve class references.  Invoking this method is equivalent
 to invoking loadClass(name,
 false).

Parameters:
name - The binary name of the class
Returns:
The resulting Class object
Throws:
ClassNotFoundException - If the class was not found


"
6,ClassLoader,2,Class<?> findClass(String name),True,,"

findClass
protected Class<?> findClass(String name)
                      throws ClassNotFoundException
Finds the class with the specified binary name.
 This method should be overridden by class loader implementations that
 follow the delegation model for loading classes, and will be invoked by
 the loadClass method after checking the
 parent class loader for the requested class.  The default implementation
 throws a ClassNotFoundException.

Parameters:
name - The binary name of the class
Returns:
The resulting Class object
Throws:
ClassNotFoundException - If the class could not be found
Since:
1.2


"
6,ClassLoader,3,URL getResource(String name),True,,"

getResource
public URL getResource(String name)
Finds the resource with the given name.  A resource is some data
 (images, audio, text, etc) that can be accessed by class code in a way
 that is independent of the location of the code.

  The name of a resource is a '/'-separated path name that
 identifies the resource.

  This method will first search the parent class loader for the
 resource; if the parent is null the path of the class loader
 built-in to the virtual machine is searched.  That failing, this method
 will invoke findResource(String) to find the resource.  

API Note:
When overriding this method it is recommended that an
 implementation ensures that any delegation is consistent with the getResources(String) method.
Parameters:
name - The resource name
Returns:
A URL object for reading the resource, or
          null if the resource could not be found or the invoker
          doesn't have adequate  privileges to get the resource.
Since:
1.1


"
6,ClassLoader,4,Enumeration<URL> getResources(String name),True,,"

getResources
public Enumeration<URL> getResources(String name)
                              throws IOException
Finds all the resources with the given name. A resource is some data
 (images, audio, text, etc) that can be accessed by class code in a way
 that is independent of the location of the code.

 The name of a resource is a /-separated path name that
 identifies the resource.

  The search order is described in the documentation for getResource(String).  

API Note:
When overriding this method it is recommended that an
 implementation ensures that any delegation is consistent with the getResource(String) method. This should
 ensure that the first element returned by the Enumeration's
 nextElement method is the same resource that the
 getResource(String) method would return.
Parameters:
name - The resource name
Returns:
An enumeration of URL objects for
          the resource.  If no resources could  be found, the enumeration
          will be empty.  Resources that the class loader doesn't have
          access to will not be in the enumeration.
Throws:
IOException - If I/O errors occur
Since:
1.2
See Also:
findResources(String)


"
6,ClassLoader,5,"Class<?> defineClass(String name, byte[] b, int off, int len)",True,,"

defineClass
protected final Class<?> defineClass(String name,
                                     byte[] b,
                                     int off,
                                     int len)
                              throws ClassFormatError
Converts an array of bytes into an instance of class Class.
 Before the Class can be used it must be resolved.

  This method assigns a default ProtectionDomain to the newly defined class.  The
 ProtectionDomain is effectively granted the same set of
 permissions returned when Policy.getPolicy().getPermissions(new CodeSource(null, null))
 is invoked.  The default domain is created on the first invocation of
 defineClass,
 and re-used on subsequent invocations.

  To assign a specific ProtectionDomain to the class, use
 the defineClass method that takes a
 ProtectionDomain as one of its arguments.  

Parameters:
name - The expected binary name of the class, or
         null if not known
b - The bytes that make up the class data.  The bytes in positions
         off through off+len-1 should have the format
         of a valid class file as defined by
         The Javaâ„¢ Virtual Machine Specification.
off - The start offset in b of the class data
len - The length of the class data
Returns:
The Class object that was created from the specified
          class data.
Throws:
ClassFormatError - If the data did not contain a valid class
IndexOutOfBoundsException - If either off or len is negative, or if
          off+len is greater than b.length.
SecurityException - If an attempt is made to add this class to a package that
          contains classes that were signed by a different set of
          certificates than this class (which is unsigned), or if
          name begins with ""java."".
Since:
1.1
See Also:
loadClass(String, boolean), 
resolveClass(Class), 
CodeSource, 
SecureClassLoader


"
7,ClassValue,1,Object get(Class<?> type),False,,NULL
7,ClassValue,2,void remove(Class<?> type),True,,"

remove
public void remove(Class<?> type)
Removes the associated value for the given class.
 If this value is subsequently read for the same class,
 its value will be reinitialized by invoking its computeValue method.
 This may result in an additional invocation of the
 computeValue method for the given class.
 
 In order to explain the interaction between get and remove calls,
 we must model the state transitions of a class value to take into account
 the alternation between uninitialized and initialized states.
 To do this, number these states sequentially from zero, and note that
 uninitialized (or removed) states are numbered with even numbers,
 while initialized (or re-initialized) states have odd numbers.
 
 When a thread T removes a class value in state 2N,
 nothing happens, since the class value is already uninitialized.
 Otherwise, the state is advanced atomically to 2N+1.
 
 When a thread T queries a class value in state 2N,
 the thread first attempts to initialize the class value to state 2N+1
 by invoking computeValue and installing the resulting value.
 
 When T attempts to install the newly computed value,
 if the state is still at 2N, the class value will be initialized
 with the computed value, advancing it to state 2N+1.
 
 Otherwise, whether the new state is even or odd,
 T will discard the newly computed value
 and retry the get operation.
 
 Discarding and retrying is an important proviso,
 since otherwise T could potentially install
 a disastrously stale value.  For example:
 
T calls CV.get(C) and sees state 2N
T quickly computes a time-dependent value V0 and gets ready to install it
 T is hit by an unlucky paging or scheduling event, and goes to sleep for a long time
 ...meanwhile, T2 also calls CV.get(C) and sees state 2N
T2 quickly computes a similar time-dependent value V1 and installs it on CV.get(C)
T2 (or a third thread) then calls CV.remove(C), undoing T2's work
  the previous actions of T2 are repeated several times
  also, the relevant computed values change over time: V1, V2, ...
 ...meanwhile, T wakes up and attempts to install V0; this must fail

 We can assume in the above scenario that CV.computeValue uses locks to properly
 observe the time-dependent states as it computes V1, etc.
 This does not remove the threat of a stale value, since there is a window of time
 between the return of computeValue in T and the installation
 of the the new value.  No user synchronization is possible during this time.

Parameters:
type - the type whose class value must be removed
Throws:
NullPointerException - if the argument is null


"
7,ClassValue,3,"void put(Class<?> type, Object value)",False,,NULL
7,ClassValue,4,boolean isPresent(Class<?> type),False,,NULL
7,ClassValue,5,void remove(Class<?> type),True,,"

remove
public void remove(Class<?> type)
Removes the associated value for the given class.
 If this value is subsequently read for the same class,
 its value will be reinitialized by invoking its computeValue method.
 This may result in an additional invocation of the
 computeValue method for the given class.
 
 In order to explain the interaction between get and remove calls,
 we must model the state transitions of a class value to take into account
 the alternation between uninitialized and initialized states.
 To do this, number these states sequentially from zero, and note that
 uninitialized (or removed) states are numbered with even numbers,
 while initialized (or re-initialized) states have odd numbers.
 
 When a thread T removes a class value in state 2N,
 nothing happens, since the class value is already uninitialized.
 Otherwise, the state is advanced atomically to 2N+1.
 
 When a thread T queries a class value in state 2N,
 the thread first attempts to initialize the class value to state 2N+1
 by invoking computeValue and installing the resulting value.
 
 When T attempts to install the newly computed value,
 if the state is still at 2N, the class value will be initialized
 with the computed value, advancing it to state 2N+1.
 
 Otherwise, whether the new state is even or odd,
 T will discard the newly computed value
 and retry the get operation.
 
 Discarding and retrying is an important proviso,
 since otherwise T could potentially install
 a disastrously stale value.  For example:
 
T calls CV.get(C) and sees state 2N
T quickly computes a time-dependent value V0 and gets ready to install it
 T is hit by an unlucky paging or scheduling event, and goes to sleep for a long time
 ...meanwhile, T2 also calls CV.get(C) and sees state 2N
T2 quickly computes a similar time-dependent value V1 and installs it on CV.get(C)
T2 (or a third thread) then calls CV.remove(C), undoing T2's work
  the previous actions of T2 are repeated several times
  also, the relevant computed values change over time: V1, V2, ...
 ...meanwhile, T wakes up and attempts to install V0; this must fail

 We can assume in the above scenario that CV.computeValue uses locks to properly
 observe the time-dependent states as it computes V1, etc.
 This does not remove the threat of a stale value, since there is a window of time
 between the return of computeValue in T and the installation
 of the the new value.  No user synchronization is possible during this time.

Parameters:
type - the type whose class value must be removed
Throws:
NullPointerException - if the argument is null


"
9,Double,1,int compareTo(Double anotherDouble),True,,"

compareTo
public int compareTo(Double anotherDouble)
Compares two Double objects numerically.  There
 are two ways in which comparisons performed by this method
 differ from those performed by the Java language numerical
 comparison operators (<, <=, ==, >=, >)
 when applied to primitive double values:
 
Double.NaN is considered by this method
          to be equal to itself and greater than all other
          double values (including
          Double.POSITIVE_INFINITY).
 
0.0d is considered by this method to be greater
          than -0.0d.
 
 This ensures that the natural ordering of
 Double objects imposed by this method is consistent
 with equals.

Specified by:
compareTo in interface Comparable<Double>
Parameters:
anotherDouble - the Double to be compared.
Returns:
the value 0 if anotherDouble is
          numerically equal to this Double; a value
          less than 0 if this Double
          is numerically less than anotherDouble;
          and a value greater than 0 if this
          Double is numerically greater than
          anotherDouble.
Since:
1.2


"
9,Double,2,boolean isNaN(),True,,"

isNaN
public boolean isNaN()
Returns true if this Double value is
 a Not-a-Number (NaN), false otherwise.

Returns:
true if the value represented by this object is
          NaN; false otherwise.


"
9,Double,3,double doubleValue(),True,,"

doubleValue
public double doubleValue()
Returns the double value of this Double object.

Specified by:
doubleValue in class Number
Returns:
the double value represented by this object


"
9,Double,4,int intValue(),True,,"

intValue
public int intValue()
Returns the value of this Double as an int
 after a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the double value represented by this object
          converted to type int
See  The Javaâ„¢ Language Specification:
5.1.3 Narrowing Primitive Conversions


"
9,Double,5,String toString(),True,,"

toString
public String toString()
Returns a string representation of this Double object.
 The primitive double value represented by this
 object is converted to a string exactly as if by the method
 toString of one argument.

Overrides:
toString in class Object
Returns:
a String representation of this object.
See Also:
toString(double)


"
10,Enum,1,String name(),True,,"

name
public final String name()
Returns the name of this enum constant, exactly as declared in its
 enum declaration.

 Most programmers should use the toString() method in
 preference to this one, as the toString method may return
 a more user-friendly name.  This method is designed primarily for
 use in specialized situations where correctness depends on getting the
 exact name, which will not vary from release to release.

Returns:
the name of this enum constant


"
10,Enum,2,int ordinal(),True,,"

ordinal
public final int ordinal()
Returns the ordinal of this enumeration constant (its position
 in its enum declaration, where the initial constant is assigned
 an ordinal of zero).

 Most programmers will have no use for this method.  It is
 designed for use by sophisticated enum-based data structures, such
 as EnumSet and EnumMap.

Returns:
the ordinal of this enumeration constant


"
10,Enum,3,"T valueOf(Class<T> enumType, String name)",False,,NULL
10,Enum,4,Enum<E> clone(),False,,NULL
10,Enum,5,int compareTo(E o),True,,"

compareTo
public final int compareTo(E o)
Compares this enum with the specified object for order.  Returns a
 negative integer, zero, or a positive integer as this object is less
 than, equal to, or greater than the specified object.

 Enum constants are only comparable to other enum constants of the
 same enum type.  The natural order implemented by this
 method is the order in which the constants are declared.

Specified by:
compareTo in interface Comparable<E extends Enum<E>>
Parameters:
o - the object to be compared.
Returns:
a negative integer, zero, or a positive integer as this object
          is less than, equal to, or greater than the specified object.


"
11,Float,1,int compareTo(Float anotherFloat),True,,"

compareTo
public int compareTo(Float anotherFloat)
Compares two Float objects numerically.  There are
 two ways in which comparisons performed by this method differ
 from those performed by the Java language numerical comparison
 operators (<, <=, ==, >=, >) when
 applied to primitive float values:

 
Float.NaN is considered by this method to
          be equal to itself and greater than all other
          float values
          (including Float.POSITIVE_INFINITY).
 
0.0f is considered by this method to be greater
          than -0.0f.
 

 This ensures that the natural ordering of Float
 objects imposed by this method is consistent with equals.

Specified by:
compareTo in interface Comparable<Float>
Parameters:
anotherFloat - the Float to be compared.
Returns:
the value 0 if anotherFloat is
          numerically equal to this Float; a value
          less than 0 if this Float
          is numerically less than anotherFloat;
          and a value greater than 0 if this
          Float is numerically greater than
          anotherFloat.
Since:
1.2
See Also:
Comparable.compareTo(Object)


"
11,Float,2,boolean isNaN(),True,,"

isNaN
public boolean isNaN()
Returns true if this Float value is a
 Not-a-Number (NaN), false otherwise.

Returns:
true if the value represented by this object is
          NaN; false otherwise.


"
11,Float,3,int intValue(),True,,"

intValue
public int intValue()
Returns the value of this Float as an int after
 a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the float value represented by this object
          converted to type int
See  The Javaâ„¢ Language Specification:
5.1.3 Narrowing Primitive Conversions


"
11,Float,4,float floatValue(),True,,"

floatValue
public float floatValue()
Returns the float value of this Float object.

Specified by:
floatValue in class Number
Returns:
the float value represented by this object


"
11,Float,5,String toString(),True,,"

toString
public String toString()
Returns a string representation of this Float object.
 The primitive float value represented by this object
 is converted to a String exactly as if by the method
 toString of one argument.

Overrides:
toString in class Object
Returns:
a String representation of this object.
See Also:
toString(float)


"
12,InheritableThreadLocal,1,void set(T value),False,,NULL
12,InheritableThreadLocal,2,T get(),False,,NULL
12,InheritableThreadLocal,3,void remove(),False,,NULL
12,InheritableThreadLocal,4,void childValue(T parentValue),False,,NULL
12,InheritableThreadLocal,5,void initialValue(),False,,NULL
13,Integer,1,int intValue(),True,,"

intValue
public int intValue()
Returns the value of this Integer as an
 int.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.


"
13,Integer,2,Integer valueOf(int i),True,,"

valueOf
public static Integer valueOf(int i)
Returns an Integer instance representing the specified
 int value.  If a new Integer instance is not
 required, this method should generally be used in preference to
 the constructor Integer(int), as this method is likely
 to yield significantly better space and time performance by
 caching frequently requested values.

 This method will always cache values in the range -128 to 127,
 inclusive, and may cache other values outside of this range.

Parameters:
i - an int value.
Returns:
an Integer instance representing i.
Since:
1.5


"
13,Integer,3,Integer valueOf(String s),True,,"

valueOf
public static Integer valueOf(String s)
                       throws NumberFormatException
Returns an Integer object holding the
 value of the specified String. The argument is
 interpreted as representing a signed decimal integer, exactly
 as if the argument were given to the parseInt(java.lang.String) method. The result is an
 Integer object that represents the integer value
 specified by the string.

 In other words, this method returns an Integer
 object equal to the value of:

 
new Integer(Integer.parseInt(s))


Parameters:
s - the string to be parsed.
Returns:
an Integer object holding the value
             represented by the string argument.
Throws:
NumberFormatException - if the string cannot be parsed
             as an integer.


"
13,Integer,4,"Integer valueOf(String s, int radix)",True,,"

valueOf
public static Integer valueOf(String s,
                              int radix)
                       throws NumberFormatException
Returns an Integer object holding the value
 extracted from the specified String when parsed
 with the radix given by the second argument. The first argument
 is interpreted as representing a signed integer in the radix
 specified by the second argument, exactly as if the arguments
 were given to the parseInt(java.lang.String, int)
 method. The result is an Integer object that
 represents the integer value specified by the string.

 In other words, this method returns an Integer
 object equal to the value of:

 
new Integer(Integer.parseInt(s, radix))


Parameters:
s - the string to be parsed.
radix - the radix to be used in interpreting s
Returns:
an Integer object holding the value
             represented by the string argument in the specified
             radix.
Throws:
NumberFormatException - if the String
            does not contain a parsable int.


"
13,Integer,5,Integer decode(String nm),True,,"

decode
public static Integer decode(String nm)
                      throws NumberFormatException
Decodes a String into an Integer.
 Accepts decimal, hexadecimal, and octal numbers given
 by the following grammar:

 

DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral, HexDigits, and OctalDigits
 are as defined in section 3.10.1 of
 The Javaâ„¢ Language Specification,
 except that underscores are not accepted between digits.

 The sequence of characters following an optional
 sign and/or radix specifier (""0x"", ""0X"",
 ""#"", or leading zero) is parsed as by the Integer.parseInt method with the indicated radix (10, 16, or
 8).  This sequence of characters must represent a positive
 value or a NumberFormatException will be thrown.  The
 result is negated if first character of the specified String is the minus sign.  No whitespace characters are
 permitted in the String.

Parameters:
nm - the String to decode.
Returns:
an Integer object holding the int
             value represented by nm
Throws:
NumberFormatException - if the String does not
            contain a parsable integer.
See Also:
parseInt(java.lang.String, int)


"
14,Long,1,int compareTo(Long anotherLong),True,,"

compareTo
public int compareTo(Long anotherLong)
Compares two Long objects numerically.

Specified by:
compareTo in interface Comparable<Long>
Parameters:
anotherLong - the Long to be compared.
Returns:
the value 0 if this Long is
          equal to the argument Long; a value less than
          0 if this Long is numerically less
          than the argument Long; and a value greater
          than 0 if this Long is numerically
           greater than the argument Long (signed
           comparison).
Since:
1.2


"
14,Long,2,int intValue(),True,,"

intValue
public int intValue()
Returns the value of this Long as an int after
 a narrowing primitive conversion.

Specified by:
intValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type int.
See  The Javaâ„¢ Language Specification:
5.1.3 Narrowing Primitive Conversions


"
14,Long,3,long longValue(),True,,"

longValue
public long longValue()
Returns the value of this Long as a
 long value.

Specified by:
longValue in class Number
Returns:
the numeric value represented by this object after conversion
          to type long.


"
14,Long,4,Long valueOf(long l),True,,"

valueOf
public static Long valueOf(long l)
Returns a Long instance representing the specified
 long value.
 If a new Long instance is not required, this method
 should generally be used in preference to the constructor
 Long(long), as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.

 Note that unlike the corresponding method in the Integer class, this method
 is not required to cache values within a particular
 range.

Parameters:
l - a long value.
Returns:
a Long instance representing l.
Since:
1.5


"
14,Long,5,String toString(),True,,"

toString
public String toString()
Returns a String object representing this
 Long's value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the long value were given as an argument to the
 toString(long) method.

Overrides:
toString in class Object
Returns:
a string representation of the value of this object in
          base 10.


"
15,Math,1,double abs(double a),True,,"

abs
public static double abs(double a)
Returns the absolute value of a double value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 If the argument is positive zero or negative zero, the result
 is positive zero.
 If the argument is infinite, the result is positive infinity.
 If the argument is NaN, the result is NaN.
 In other words, the result is the same as the value of the expression:
 Double.longBitsToDouble((Double.doubleToLongBits(a)<<1)>>>1)

Parameters:
a - the argument whose absolute value is to be determined
Returns:
the absolute value of the argument.


"
15,Math,2,"double pow(double a, double b)",True,,"

pow
public static double pow(double a,
                         double b)
Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 If the second argument is positive or negative zero, then the
 result is 1.0.
 If the second argument is 1.0, then the result is the same as the
 first argument.
 If the second argument is NaN, then the result is NaN.
 If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 If
 
the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 
 then the result is positive infinity.

 If
 
the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 
 then the result is positive zero.

 If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 If
 
the first argument is positive zero and the second argument
 is greater than zero, or
 the first argument is positive infinity and the second
 argument is less than zero,
 
 then the result is positive zero.

 If
 
the first argument is positive zero and the second argument
 is less than zero, or
 the first argument is positive infinity and the second
 argument is greater than zero,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 
 then the result is positive zero.

 If
 
the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 
 then the result is negative zero.

 If
 
the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 
 then the result is positive infinity.

 If
 
the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 
 then the result is negative infinity.

 If the first argument is finite and less than zero
 
 if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 if the second argument is finite and not an integer, then
 the result is NaN.
 
If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a double value.
(In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method ceil or,
 equivalently, a fixed point of the method floor. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)

 The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - the base.
b - the exponent.
Returns:
the value ab.


"
15,Math,3,double sin(double a),True,,"

sin
public static double sin(double a)
Returns the trigonometric sine of an angle.  Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - an angle, in radians.
Returns:
the sine of the argument.


"
15,Math,4,double cos(double a),True,,"

cos
public static double cos(double a)
Returns the trigonometric cosine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.

Parameters:
a - an angle, in radians.
Returns:
the cosine of the argument.


"
15,Math,5,double sqrt(double a),True,,"

sqrt
public static double sqrt(double a)
Returns the correctly rounded positive square root of a
 double value.
 Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is positive
 infinity.
 If the argument is positive zero or negative zero, then the
 result is the same as the argument.
 Otherwise, the result is the double value closest to
 the true mathematical square root of the argument value.

Parameters:
a - a value.
Returns:
the positive square root of a.
          If the argument is NaN or less than zero, the result is NaN.


"
16,Number,1,int intValue(),True,,"

intValue
public abstract int intValue()
Returns the value of the specified number as an int,
 which may involve rounding or truncation.

Returns:
the numeric value represented by this object after conversion
          to type int.


"
16,Number,2,long longValue(),True,,"

longValue
public abstract long longValue()
Returns the value of the specified number as a long,
 which may involve rounding or truncation.

Returns:
the numeric value represented by this object after conversion
          to type long.


"
16,Number,3,float floatValue(),True,,"

floatValue
public abstract float floatValue()
Returns the value of the specified number as a float,
 which may involve rounding.

Returns:
the numeric value represented by this object after conversion
          to type float.


"
16,Number,4,double doubleValue(),True,,"

doubleValue
public abstract double doubleValue()
Returns the value of the specified number as a double,
 which may involve rounding.

Returns:
the numeric value represented by this object after conversion
          to type double.


"
16,Number,5,short shortValue(),True,,"

shortValue
public short shortValue()
Returns the value of the specified number as a short,
 which may involve rounding or truncation.

 This implementation returns the result of intValue() cast
 to a short.

Returns:
the numeric value represented by this object after conversion
          to type short.
Since:
JDK1.1


"
17,Object,1,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Parameters:
obj - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
hashCode(), 
HashMap


"
17,Object,2,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Javaâ„¢ programming language.)

Returns:
a hash code value for this object.
See Also:
equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
17,Object,3,String toString(),True,,"

toString
public String toString()
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Returns:
a string representation of the object.


"
17,Object,4,Class<?> getClass(),True,,"

getClass
public final Class<?> getClass()
Returns the runtime class of this Object. The returned
 Class object is the object that is locked by static synchronized methods of the represented class.

 The actual result type is Class<? extends |X|>
 where |X| is the erasure of the static type of the
 expression on which getClass is called. For
 example, no cast is required in this code fragment:

Number n = 0;                             
Class<? extends Number> c = n.getClass(); 


Returns:
The Class object that represents the runtime
         class of this object.
See  The Javaâ„¢ Language Specification:
15.8.2 Class Literals


"
17,Object,5,void notify(),True,,"

notify
public final void notify()
Wakes up a single thread that is waiting on this object's
 monitor. If any threads are waiting on this object, one of them
 is chosen to be awakened. The choice is arbitrary and occurs at
 the discretion of the implementation. A thread waits on an object's
 monitor by calling one of the wait methods.
 
 The awakened thread will not be able to proceed until the current
 thread relinquishes the lock on this object. The awakened thread will
 compete in the usual manner with any other threads that might be
 actively competing to synchronize on this object; for example, the
 awakened thread enjoys no reliable privilege or disadvantage in being
 the next thread to lock this object.
 
 This method should only be called by a thread that is the owner
 of this object's monitor. A thread becomes the owner of the
 object's monitor in one of three ways:
 
By executing a synchronized instance method of that object.
 By executing the body of a synchronized statement
     that synchronizes on the object.
 For objects of type Class, by executing a
     synchronized static method of that class.
 

 Only one thread at a time can own an object's monitor.

Throws:
IllegalMonitorStateException - if the current thread is not
               the owner of this object's monitor.
See Also:
notifyAll(), 
wait()


"
18,Package,1,String getName(),True,,"

getName
public String getName()
Return the name of this package.

Returns:
The fully-qualified name of this package as defined in section 6.5.3 of
          The Javaâ„¢ Language Specification,
          for example, java.lang


"
18,Package,2,String getImplementationTitle(),True,,"

getImplementationTitle
public String getImplementationTitle()
Return the title of this package.

Returns:
the title of the implementation, null is returned if it is not known.


"
18,Package,3,String getImplementationVersion(),True,,"

getImplementationVersion
public String getImplementationVersion()
Return the version of this implementation. It consists of any string
 assigned by the vendor of this implementation and does
 not have any particular syntax specified or expected by the Java
 runtime. It may be compared for equality with other
 package version strings used for this implementation
 by this vendor for this package.

Returns:
the version of the implementation, null is returned if it is not known.


"
18,Package,4,String getSpecificationTitle(),True,,"

getSpecificationTitle
public String getSpecificationTitle()
Return the title of the specification that this package implements.

Returns:
the specification title, null is returned if it is not known.


"
18,Package,5,String getSpecificationVersion(),True,,"

getSpecificationVersion
public String getSpecificationVersion()
Returns the version number of the specification
 that this package implements.
 This version string must be a sequence of nonnegative decimal
 integers separated by "".""'s and may have leading zeros.
 When version strings are compared the most significant
 numbers are compared.

Returns:
the specification version, null is returned if it is not known.


"
19,Process,1,void destroy(),True,,"

destroy
public abstract void destroy()
Kills the subprocess. Whether the subprocess represented by this
 Process object is forcibly terminated or not is
 implementation dependent.

"
19,Process,2,int exitValue(),True,,"

exitValue
public abstract int exitValue()
Returns the exit value for the subprocess.

Returns:
the exit value of the subprocess represented by this
         Process object.  By convention, the value
         0 indicates normal termination.
Throws:
IllegalThreadStateException - if the subprocess represented
         by this Process object has not yet terminated


"
19,Process,3,InputStream getErrorStream(),True,,"

getErrorStream
public abstract InputStream getErrorStream()
Returns the input stream connected to the error output of the
 subprocess.  The stream obtains data piped from the error output
 of the process represented by this Process object.

 If the standard error of the subprocess has been redirected using
 ProcessBuilder.redirectError or
 ProcessBuilder.redirectErrorStream
 then this method will return a
 null input stream.

 Implementation note: It is a good idea for the returned
 input stream to be buffered.

Returns:
the input stream connected to the error output of
         the subprocess


"
19,Process,4,OutputStream getOutputStream(),True,,"

getOutputStream
public abstract OutputStream getOutputStream()
Returns the output stream connected to the normal input of the
 subprocess.  Output to the stream is piped into the standard
 input of the process represented by this Process object.

 If the standard input of the subprocess has been redirected using
 ProcessBuilder.redirectInput
 then this method will return a
 null output stream.

 Implementation note: It is a good idea for the returned
 output stream to be buffered.

Returns:
the output stream connected to the normal input of the
         subprocess


"
19,Process,5,int waitFor(),True,,"

waitFor
public abstract int waitFor()
                     throws InterruptedException
Causes the current thread to wait, if necessary, until the
 process represented by this Process object has
 terminated.  This method returns immediately if the subprocess
 has already terminated.  If the subprocess has not yet
 terminated, the calling thread will be blocked until the
 subprocess exits.

Returns:
the exit value of the subprocess represented by this
         Process object.  By convention, the value
         0 indicates normal termination.
Throws:
InterruptedException - if the current thread is
         interrupted by another
         thread while it is waiting, then the wait is ended and
         an InterruptedException is thrown.


"
20,ProcessBuilder,1,ProcessBuilder inheritIO(),True,,"

inheritIO
public ProcessBuilder inheritIO()
Sets the source and destination for subprocess standard I/O
 to be the same as those of the current Java process.

 This is a convenience method.  An invocation of the form
   
 pb.inheritIO()
 
 behaves in exactly the same way as the invocation
   
 pb.redirectInput(Redirect.INHERIT)
   .redirectOutput(Redirect.INHERIT)
   .redirectError(Redirect.INHERIT)
 

 This gives behavior equivalent to most operating system
 command interpreters, or the standard C library function
 system().

Returns:
this process builder
Since:
1.7


"
20,ProcessBuilder,2,Process start(),True,,"

start
public Process start()
              throws IOException
Starts a new process using the attributes of this process builder.

 The new process will
 invoke the command and arguments given by command(),
 in a working directory as given by directory(),
 with a process environment as given by environment().

 This method checks that the command is a valid operating
 system command.  Which commands are valid is system-dependent,
 but at the very least the command must be a non-empty list of
 non-null strings.

 A minimal set of system dependent environment variables may
 be required to start a process on some operating systems.
 As a result, the subprocess may inherit additional environment variable
 settings beyond those in the process builder's environment().

 If there is a security manager, its
 checkExec
 method is called with the first component of this object's
 command array as its argument. This may result in
 a SecurityException being thrown.

 Starting an operating system process is highly system-dependent.
 Among the many things that can go wrong are:
 
The operating system program file was not found.
 Access to the program file was denied.
 The working directory does not exist.
 
In such cases an exception will be thrown.  The exact nature
 of the exception is system-dependent, but it will always be a
 subclass of IOException.

 Subsequent modifications to this process builder will not
 affect the returned Process.

Returns:
a new Process object for managing the subprocess
Throws:
NullPointerException - if an element of the command list is null
IndexOutOfBoundsException - if the command is an empty list (has size 0)
SecurityException - if a security manager exists and
         
its
         checkExec
         method doesn't allow creation of the subprocess, or

         the standard input to the subprocess was
         redirected from a file
         and the security manager's
         checkRead method
         denies read access to the file, or

         the standard output or standard error of the
         subprocess was
         redirected to a file
         and the security manager's
         checkWrite method
         denies write access to the file

         
IOException - if an I/O error occurs
See Also:
Runtime.exec(String[], String[], java.io.File)


"
20,ProcessBuilder,3,List<String> command(),True,,"

command
public List<String> command()
Returns this process builder's operating system program and
 arguments.  The returned list is not a copy.  Subsequent
 updates to the list will be reflected in the state of this
 process builder.

Returns:
this process builder's program and its arguments


"
20,ProcessBuilder,4,ProcessBuilder command(List<String> command),True,,"

command
public ProcessBuilder command(List<String> command)
Sets this process builder's operating system program and
 arguments.  This method does not make a copy of the
 command list.  Subsequent updates to the list will
 be reflected in the state of the process builder.  It is not
 checked whether command corresponds to a valid
 operating system command.

Parameters:
command - the list containing the program and its arguments
Returns:
this process builder
Throws:
NullPointerException - if the argument is null


"
20,ProcessBuilder,5,"Map<String, String> environment()",False,,NULL
21,ProcessBuilder.Redirect,1,Redirect from(File file),False,,NULL
21,ProcessBuilder.Redirect,2,Redirect to(File file),False,,NULL
21,ProcessBuilder.Redirect,3,Redirect appendTo(File file),False,,NULL
21,ProcessBuilder.Redirect,4,Redirect inherit(),False,,NULL
21,ProcessBuilder.Redirect,5,Redirect discar(),False,,NULL
22,Runtime,1,Runtime getRuntime(),True,,"

getRuntime
public static Runtime getRuntime()
Returns the runtime object associated with the current Java application.
 Most of the methods of class Runtime are instance
 methods and must be invoked with respect to the current runtime object.

Returns:
the Runtime object associated with the current
          Java application.


"
22,Runtime,2,void exit(int status),True,,"

exit
public void exit(int status)
Terminates the currently running Java virtual machine by initiating its
 shutdown sequence.  This method never returns normally.  The argument
 serves as a status code; by convention, a nonzero status code indicates
 abnormal termination.

  All registered shutdown hooks, if any,
 are started in some unspecified order and allowed to run concurrently
 until they finish.  Once this is done the virtual machine
 halts.

  If this method is invoked after all shutdown hooks have already
 been run and the status is nonzero then this method halts the
 virtual machine with the given status code. Otherwise, this method
 blocks indefinitely.

  The System.exit method is the
 conventional and convenient means of invoking this method.

Parameters:
status - Termination status.  By convention, a nonzero status code
         indicates abnormal termination.
Throws:
SecurityException - If a security manager is present and its
         checkExit method does not permit
         exiting with the specified status
See Also:
SecurityException, 
SecurityManager.checkExit(int), 
addShutdownHook(java.lang.Thread), 
removeShutdownHook(java.lang.Thread), 
halt(int)


"
22,Runtime,3,Process exec(String command),True,,"

exec
public Process exec(String command)
             throws IOException
Executes the specified string command in a separate process.

 This is a convenience method.  An invocation of the form
 exec(command)
 behaves in exactly the same way as the invocation
 exec(command, null, null).

Parameters:
command - a specified system command.
Returns:
A new Process object for managing the subprocess
Throws:
SecurityException - If a security manager exists and its
          checkExec
          method doesn't allow creation of the subprocess
IOException - If an I/O error occurs
NullPointerException - If command is null
IllegalArgumentException - If command is empty
See Also:
exec(String[], String[], File), 
ProcessBuilder


"
22,Runtime,4,long freeMemory(),True,,"

freeMemory
public long freeMemory()
Returns the amount of free memory in the Java Virtual Machine.
 Calling the
 gc method may result in increasing the value returned
 by freeMemory.

Returns:
an approximation to the total amount of memory currently
          available for future allocated objects, measured in bytes.


"
22,Runtime,5,void gc(),True,,"

gc
public void gc()
Runs the garbage collector.
 Calling this method suggests that the Java virtual machine expend
 effort toward recycling unused objects in order to make the memory
 they currently occupy available for quick reuse. When control
 returns from the method call, the virtual machine has made
 its best effort to recycle all discarded objects.
 
 The name gc stands for ""garbage
 collector"". The virtual machine performs this recycling
 process automatically as needed, in a separate thread, even if the
 gc method is not invoked explicitly.
 
 The method System.gc() is the conventional and convenient
 means of invoking this method.

"
23,RuntimePermission,1,void checkPermission(Permission perm),False,,NULL
23,RuntimePermission,2,"void checkPermission(Permission perm, Object context)",False,,NULL
23,RuntimePermission,3,void checkPermission(String permission),False,,NULL
23,RuntimePermission,4,"void checkPermission(String permission, Object context)",False,,NULL
23,RuntimePermission,5,boolean implies(Permission permission),False,,NULL
24,SecurityManager,1,void checkPermission(Permission perm),True,,"

checkPermission
public void checkPermission(Permission perm)
Throws a SecurityException if the requested
 access, specified by the given permission, is not permitted based
 on the security policy currently in effect.
 
 This method calls AccessController.checkPermission
 with the given permission.

Parameters:
perm - the requested permission.
Throws:
SecurityException - if access is not permitted based on
            the current security policy.
NullPointerException - if the permission argument is
            null.
Since:
1.2


"
24,SecurityManager,2,void checkCreateClassLoader(),True,,"

checkCreateClassLoader
public void checkCreateClassLoader()
Throws a SecurityException if the
 calling thread is not allowed to create a new class loader.
 
 This method calls checkPermission with the
 RuntimePermission(""createClassLoader"")
 permission.
 
 If you override this method, then you should make a call to
 super.checkCreateClassLoader
 at the point the overridden method would normally throw an
 exception.

Throws:
SecurityException - if the calling thread does not
             have permission
             to create a new class loader.
See Also:
ClassLoader.ClassLoader(), 
checkPermission


"
24,SecurityManager,3,void checkExit(int status),True,,"

checkExit
public void checkExit(int status)
Throws a SecurityException if the
 calling thread is not allowed to cause the Java Virtual Machine to
 halt with the specified status code.
 
 This method is invoked for the current security manager by the
 exit method of class Runtime. A status
 of 0 indicates success; other values indicate various
 errors.
 
 This method calls checkPermission with the
 RuntimePermission(""exitVM.""+status) permission.
 
 If you override this method, then you should make a call to
 super.checkExit
 at the point the overridden method would normally throw an
 exception.

Parameters:
status - the exit status.
Throws:
SecurityException - if the calling thread does not have
              permission to halt the Java Virtual Machine with
              the specified status.
See Also:
exit, 
checkPermission


"
24,SecurityManager,4,void checkRead(String file),True,,"

checkRead
public void checkRead(String file)
Throws a SecurityException if the
 calling thread is not allowed to read the file specified by the
 string argument.
 
 This method calls checkPermission with the
 FilePermission(file,""read"") permission.
 
 If you override this method, then you should make a call to
 super.checkRead
 at the point the overridden method would normally throw an
 exception.

Parameters:
file - the system-dependent file name.
Throws:
SecurityException - if the calling thread does not have
             permission to access the specified file.
NullPointerException - if the file argument is
             null.
See Also:
checkPermission


"
24,SecurityManager,5,void checkWrite(FileDescriptor fd),True,,"

checkWrite
public void checkWrite(FileDescriptor fd)
Throws a SecurityException if the
 calling thread is not allowed to write to the specified file
 descriptor.
 
 This method calls checkPermission with the
 RuntimePermission(""writeFileDescriptor"")
 permission.
 
 If you override this method, then you should make a call to
 super.checkWrite
 at the point the overridden method would normally throw an
 exception.

Parameters:
fd - the system-dependent file descriptor.
Throws:
SecurityException - if the calling thread does not have
             permission to access the specified file descriptor.
NullPointerException - if the file descriptor argument is
             null.
See Also:
FileDescriptor, 
checkPermission


"
25,Short,1,short parseShort(String s),True,,"

parseShort
public static short parseShort(String s)
                        throws NumberFormatException
Parses the string argument as a signed decimal short. The characters in the string must all be decimal
 digits, except that the first character may be an ASCII minus
 sign '-' ('\u002D') to indicate a
 negative value or an ASCII plus sign '+'
 ('\u002B') to indicate a positive value.  The
 resulting short value is returned, exactly as if the
 argument and the radix 10 were given as arguments to the parseShort(java.lang.String, int) method.

Parameters:
s - a String containing the short
          representation to be parsed
Returns:
the short value represented by the
          argument in decimal.
Throws:
NumberFormatException - If the string does not
          contain a parsable short.


"
25,Short,2,Short valueOf(String s),True,,"

valueOf
public static Short valueOf(String s)
                     throws NumberFormatException
Returns a Short object holding the
 value given by the specified String. The argument
 is interpreted as representing a signed decimal
 short, exactly as if the argument were given to
 the parseShort(java.lang.String) method. The result is
 a Short object that represents the
 short value specified by the string.

 In other words, this method returns a Short object
 equal to the value of:

 
new Short(Short.parseShort(s))


Parameters:
s - the string to be parsed
Returns:
a Short object holding the value
          represented by the string argument
Throws:
NumberFormatException - If the String does
          not contain a parsable short.


"
25,Short,3,int compareTo(Short anotherShort),True,,"

compareTo
public int compareTo(Short anotherShort)
Compares two Short objects numerically.

Specified by:
compareTo in interface Comparable<Short>
Parameters:
anotherShort - the Short to be compared.
Returns:
the value 0 if this Short is
          equal to the argument Short; a value less than
          0 if this Short is numerically less
          than the argument Short; and a value greater than
           0 if this Short is numerically
           greater than the argument Short (signed
           comparison).
Since:
1.2


"
25,Short,4,String toString(),True,,"

toString
public String toString()
Returns a String object representing this
 Short's value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the short value were given as an argument to the
 toString(short) method.

Overrides:
toString in class Object
Returns:
a string representation of the value of this object in
          base 10.


"
25,Short,5,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hash code for this Short; equal to the result
 of invoking intValue().

Overrides:
hashCode in class Object
Returns:
a hash code value for this Short
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
26,StackTraceElement,1,String getClassName(),True,,"

getClassName
public String getClassName()
Returns the fully qualified name of the class containing the
 execution point represented by this stack trace element.

Returns:
the fully qualified name of the Class containing
         the execution point represented by this stack trace element.


"
26,StackTraceElement,2,String getFileName(),True,,"

getFileName
public String getFileName()
Returns the name of the source file containing the execution point
 represented by this stack trace element.  Generally, this corresponds
 to the SourceFile attribute of the relevant class
 file (as per The Java Virtual Machine Specification, Section
 4.7.7).  In some systems, the name may refer to some source code unit
 other than a file, such as an entry in source repository.

Returns:
the name of the file containing the execution point
         represented by this stack trace element, or null if
         this information is unavailable.


"
26,StackTraceElement,3,int getLineNumber(),True,,"

getLineNumber
public int getLineNumber()
Returns the line number of the source line containing the execution
 point represented by this stack trace element.  Generally, this is
 derived from the LineNumberTable attribute of the relevant
 class file (as per The Java Virtual Machine
 Specification, Section 4.7.8).

Returns:
the line number of the source line containing the execution
         point represented by this stack trace element, or a negative
         number if this information is unavailable.


"
26,StackTraceElement,4,String getMethodName(),True,,"

getMethodName
public String getMethodName()
Returns the name of the method containing the execution point
 represented by this stack trace element.  If the execution point is
 contained in an instance or class initializer, this method will return
 the appropriate special method name, <init> or
 <clinit>, as per Section 3.9 of The Java Virtual
 Machine Specification.

Returns:
the name of the method containing the execution point
         represented by this stack trace element.


"
26,StackTraceElement,5,boolean isNativeMethod(),True,,"

isNativeMethod
public boolean isNativeMethod()
Returns true if the method containing the execution point
 represented by this stack trace element is a native method.

Returns:
true if the method containing the execution point
         represented by this stack trace element is a native method.


"
27,StrictMath,1,double exp(double a),True,,"

exp
public static double exp(double a)
Returns Euler's number e raised to the power of a
 double value. Special cases:
 If the argument is NaN, the result is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is negative infinity, then the result is
 positive zero.

Parameters:
a - the exponent to raise e to.
Returns:
the value ea,
          where e is the base of the natural logarithms.


"
27,StrictMath,2,double log(double a),True,,"

log
public static double log(double a)
Returns the natural logarithm (base e) of a double
 value. Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is
 positive infinity.
 If the argument is positive zero or negative zero, then the
 result is negative infinity.

Parameters:
a - a value
Returns:
the value ln a, the natural logarithm of
          a.


"
27,StrictMath,3,double sqrt(double a),True,,"

sqrt
public static double sqrt(double a)
Returns the correctly rounded positive square root of a
 double value.
 Special cases:
 If the argument is NaN or less than zero, then the result
 is NaN.
 If the argument is positive infinity, then the result is positive
 infinity.
 If the argument is positive zero or negative zero, then the
 result is the same as the argument.
 Otherwise, the result is the double value closest to
 the true mathematical square root of the argument value.

Parameters:
a - a value.
Returns:
the positive square root of a.


"
27,StrictMath,4,double sin(double a),True,,"

sin
public static double sin(double a)
Returns the trigonometric sine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.
 If the argument is zero, then the result is a zero with the
 same sign as the argument.

Parameters:
a - an angle, in radians.
Returns:
the sine of the argument.


"
27,StrictMath,5,double cos(double a),True,,"

cos
public static double cos(double a)
Returns the trigonometric cosine of an angle. Special cases:
 If the argument is NaN or an infinity, then the
 result is NaN.

Parameters:
a - an angle, in radians.
Returns:
the cosine of the argument.


"
28,String,1,int length(),True,,"

length
public int length()
Returns the length of this string.
 The length is equal to the number of Unicode
 code units in the string.

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters represented by this
          object.


"
28,String,2,char charAt(int index),True,,"

charAt
public char charAt(int index)
Returns the char value at the
 specified index. An index ranges from 0 to
 length() - 1. The first char value of the sequence
 is at index 0, the next at index 1,
 and so on, as for array indexing.

 If the char value specified by the index is a
 surrogate, the surrogate
 value is returned.

Specified by:
charAt in interface CharSequence
Parameters:
index - the index of the char value.
Returns:
the char value at the specified index of this string.
             The first char value is at index 0.
Throws:
IndexOutOfBoundsException - if the index
             argument is negative or not less than the length of this
             string.


"
28,String,3,String substring(int beginIndex),True,,"

substring
public String substring(int beginIndex)
Returns a string that is a substring of this string. The
 substring begins with the character at the specified index and
 extends to the end of this string. 
 Examples:
 
 ""unhappy"".substring(2) returns ""happy""
 ""Harbison"".substring(3) returns ""bison""
 ""emptiness"".substring(9) returns """" (an empty string)
 

Parameters:
beginIndex - the beginning index, inclusive.
Returns:
the specified substring.
Throws:
IndexOutOfBoundsException - if
             beginIndex is negative or larger than the
             length of this String object.


"
28,String,4,int indexOf(String str),True,,"

indexOf
public int indexOf(String str)
Returns the index within this string of the first occurrence of the
 specified substring.

 The returned index is the smallest value k for which:
 
 this.startsWith(str, k)
 
 If no such value of k exists, then -1 is returned.

Parameters:
str - the substring to search for.
Returns:
the index of the first occurrence of the specified substring,
          or -1 if there is no such occurrence.


"
28,String,5,boolean equals(Object anObject),True,,"

equals
public boolean equals(Object anObject)
Compares this string to the specified object.  The result is true if and only if the argument is not null and is a String object that represents the same sequence of characters as this
 object.

Overrides:
equals in class Object
Parameters:
anObject - The object to compare this String against
Returns:
true if the given object represents a String
          equivalent to this string, false otherwise
See Also:
compareTo(String), 
equalsIgnoreCase(String)


"
29,StringBuffer,1,int length(),True,,"

length
public int length()
Returns the length (character count).

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters currently
          represented by this object


"
29,StringBuffer,2,void setLength(int newLength),True,,"

setLength
public void setLength(int newLength)
Sets the length of the character sequence.
 The sequence is changed to a new character sequence
 whose length is specified by the argument. For every nonnegative
 index k less than newLength, the character at
 index k in the new character sequence is the same as the
 character at index k in the old sequence if k is less
 than the length of the old character sequence; otherwise, it is the
 null character '\u0000'.

 In other words, if the newLength argument is less than
 the current length, the length is changed to the specified length.
 
 If the newLength argument is greater than or equal
 to the current length, sufficient null characters
 ('\u0000') are appended so that
 length becomes the newLength argument.
 
 The newLength argument must be greater than or equal
 to 0.

Parameters:
newLength - the new length
Throws:
IndexOutOfBoundsException - if the
               newLength argument is negative.
See Also:
length()


"
29,StringBuffer,3,void ensureCapacity(int minimumCapacity),True,,"

ensureCapacity
public void ensureCapacity(int minimumCapacity)
Ensures that the capacity is at least equal to the specified minimum.
 If the current capacity is less than the argument, then a new internal
 array is allocated with greater capacity. The new capacity is the
 larger of:
 
The minimumCapacity argument.
 Twice the old capacity, plus 2.
 
 If the minimumCapacity argument is nonpositive, this
 method takes no action and simply returns.
 Note that subsequent operations on this object can reduce the
 actual capacity below that requested here.

Parameters:
minimumCapacity - the minimum desired capacity.


"
29,StringBuffer,4,void trimToSize(),True,,"

trimToSize
public void trimToSize()
Attempts to reduce storage used for the character sequence.
 If the buffer is larger than necessary to hold its current sequence of
 characters, then it may be resized to become more space efficient.
 Calling this method may, but is not required to, affect the value
 returned by a subsequent call to the capacity() method.

Since:
1.5


"
29,StringBuffer,5,String toString(),True,,"

toString
public String toString()
Returns a string representing the data in this sequence.
 A new String object is allocated and initialized to
 contain the character sequence currently represented by this
 object. This String is then returned. Subsequent
 changes to this sequence do not affect the contents of the
 String.

Specified by:
toString in interface CharSequence
Returns:
a string representation of this sequence of characters.


"
30,StringBuilder,1,StringBuilder append(String str),True,,"

append
public StringBuilder append(String str)
Appends the specified string to this character sequence.
 
 The characters of the String argument are appended, in
 order, increasing the length of this sequence by the length of the
 argument. If str is null, then the four
 characters ""null"" are appended.
 
 Let n be the length of this character sequence just prior to
 execution of the append method. Then the character at
 index k in the new character sequence is equal to the character
 at index k in the old character sequence, if k is less
 than n; otherwise, it is equal to the character at index
 k-n in the argument str.

Parameters:
str - a string.
Returns:
a reference to this object.


"
30,StringBuilder,2,"StringBuilder insert(int offset, String str)",True,,"

insert
public StringBuilder insert(int offset,
                            String str)
Inserts the string into this character sequence.
 
 The characters of the String argument are inserted, in
 order, into this sequence at the indicated offset, moving up any
 characters originally above that position and increasing the length
 of this sequence by the length of the argument. If
 str is null, then the four characters
 ""null"" are inserted into this sequence.
 
 The character at index k in the new character sequence is
 equal to:
 
the character at index k in the old character sequence, if
 k is less than offset
the character at index k-offset in the
 argument str, if k is not less than
 offset but is less than offset+str.length()
the character at index k-str.length() in the
 old character sequence, if k is not less than
 offset+str.length()

 The offset argument must be greater than or equal to
 0, and less than or equal to the length
 of this sequence.

Parameters:
offset - the offset.
str - a string.
Returns:
a reference to this object.
Throws:
StringIndexOutOfBoundsException - if the offset is invalid.


"
30,StringBuilder,3,"StringBuilder delete(int start, int end)",True,,"

delete
public StringBuilder delete(int start,
                            int end)
Removes the characters in a substring of this sequence.
 The substring begins at the specified start and extends to
 the character at index end - 1 or to the end of the
 sequence if no such character exists. If
 start is equal to end, no changes are made.

Parameters:
start - The beginning index, inclusive.
end - The ending index, exclusive.
Returns:
This object.
Throws:
StringIndexOutOfBoundsException - if start
             is negative, greater than length(), or
             greater than end.


"
30,StringBuilder,4,int length(),True,,"

length
public int length()
Returns the length (character count).

Specified by:
length in interface CharSequence
Returns:
the length of the sequence of characters currently
          represented by this object


"
30,StringBuilder,5,String toString(),True,,"

toString
public String toString()
Returns a string representing the data in this sequence.
 A new String object is allocated and initialized to
 contain the character sequence currently represented by this
 object. This String is then returned. Subsequent
 changes to this sequence do not affect the contents of the
 String.

Specified by:
toString in interface CharSequence
Returns:
a string representation of this sequence of characters.


"
31,System,1,void exit(int status),True,,"

exit
public static void exit(int status)
Terminates the currently running Java Virtual Machine. The
 argument serves as a status code; by convention, a nonzero status
 code indicates abnormal termination.
 
 This method calls the exit method in class
 Runtime. This method never returns normally.
 
 The call System.exit(n) is effectively equivalent to
 the call:
 
 Runtime.getRuntime().exit(n)
 

Parameters:
status - exit status.
Throws:
SecurityException - if a security manager exists and its checkExit
        method doesn't allow exit with the specified status.
See Also:
Runtime.exit(int)


"
31,System,2,long currentTimeMillis(),True,,"

currentTimeMillis
public static long currentTimeMillis()
Returns the current time in milliseconds.  Note that
 while the unit of time of the return value is a millisecond,
 the granularity of the value depends on the underlying
 operating system and may be larger.  For example, many
 operating systems measure time in units of tens of
 milliseconds.

  See the description of the class Date for
 a discussion of slight discrepancies that may arise between
 ""computer time"" and coordinated universal time (UTC).

Returns:
the difference, measured in milliseconds, between
          the current time and midnight, January 1, 1970 UTC.
See Also:
Date


"
31,System,3,void gc(),True,,"

gc
public static void gc()
Runs the garbage collector.
 
 Calling the gc method suggests that the Java Virtual
 Machine expend effort toward recycling unused objects in order to
 make the memory they currently occupy available for quick reuse.
 When control returns from the method call, the Java Virtual
 Machine has made a best effort to reclaim space from all discarded
 objects.
 
 The call System.gc() is effectively equivalent to the
 call:
 
 Runtime.getRuntime().gc()
 

See Also:
Runtime.gc()


"
31,System,4,String getProperty(String key),True,,"

getProperty
public static String getProperty(String key)
Gets the system property indicated by the specified key.
 
 First, if there is a security manager, its
 checkPropertyAccess method is called with the key as
 its argument. This may result in a SecurityException.
 
 If there is no current set of system properties, a set of system
 properties is first created and initialized in the same manner as
 for the getProperties method.

Parameters:
key - the name of the system property.
Returns:
the string value of the system property,
             or null if there is no property with that key.
Throws:
SecurityException - if a security manager exists and its
             checkPropertyAccess method doesn't allow
              access to the specified system property.
NullPointerException - if key is
             null.
IllegalArgumentException - if key is empty.
See Also:
setProperty(java.lang.String, java.lang.String), 
SecurityException, 
SecurityManager.checkPropertyAccess(java.lang.String), 
getProperties()


"
31,System,5,"void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)",True,,"

arraycopy
public static void arraycopy(Object src,
                             int srcPos,
                             Object dest,
                             int destPos,
                             int length)
Copies an array from the specified source array, beginning at the
 specified position, to the specified position of the destination array.
 A subsequence of array components are copied from the source
 array referenced by src to the destination array
 referenced by dest. The number of components copied is
 equal to the length argument. The components at
 positions srcPos through
 srcPos+length-1 in the source array are copied into
 positions destPos through
 destPos+length-1, respectively, of the destination
 array.
 
 If the src and dest arguments refer to the
 same array object, then the copying is performed as if the
 components at positions srcPos through
 srcPos+length-1 were first copied to a temporary
 array with length components and then the contents of
 the temporary array were copied into positions
 destPos through destPos+length-1 of the
 destination array.
 
 If dest is null, then a
 NullPointerException is thrown.
 
 If src is null, then a
 NullPointerException is thrown and the destination
 array is not modified.
 
 Otherwise, if any of the following is true, an
 ArrayStoreException is thrown and the destination is
 not modified:
 
The src argument refers to an object that is not an
     array.
 The dest argument refers to an object that is not an
     array.
 The src argument and dest argument refer
     to arrays whose component types are different primitive types.
 The src argument refers to an array with a primitive
    component type and the dest argument refers to an array
     with a reference component type.
 The src argument refers to an array with a reference
    component type and the dest argument refers to an array
     with a primitive component type.
 

 Otherwise, if any of the following is true, an
 IndexOutOfBoundsException is
 thrown and the destination is not modified:
 
The srcPos argument is negative.
 The destPos argument is negative.
 The length argument is negative.
 srcPos+length is greater than
     src.length, the length of the source array.
 destPos+length is greater than
     dest.length, the length of the destination array.
 

 Otherwise, if any actual component of the source array from
 position srcPos through
 srcPos+length-1 cannot be converted to the component
 type of the destination array by assignment conversion, an
 ArrayStoreException is thrown. In this case, let
 k be the smallest nonnegative integer less than
 length such that src[srcPos+k]
 cannot be converted to the component type of the destination
 array; when the exception is thrown, source array components from
 positions srcPos through
 srcPos+k-1
 will already have been copied to destination array positions
 destPos through
 destPos+k-1 and no other
 positions of the destination array will have been modified.
 (Because of the restrictions already itemized, this
 paragraph effectively applies only to the situation where both
 arrays have component types that are reference types.)

Parameters:
src - the source array.
srcPos - starting position in the source array.
dest - the destination array.
destPos - starting position in the destination data.
length - the number of array elements to be copied.
Throws:
IndexOutOfBoundsException - if copying would cause
               access of data outside array bounds.
ArrayStoreException - if an element in the src
               array could not be stored into the dest array
               because of a type mismatch.
NullPointerException - if either src or
               dest is null.


"
32,Thread,1,void start(),True,,"

start
public void start()
Causes this thread to begin execution; the Java Virtual Machine
 calls the run method of this thread.
 
 The result is that two threads are running concurrently: the
 current thread (which returns from the call to the
 start method) and the other thread (which executes its
 run method).
 
 It is never legal to start a thread more than once.
 In particular, a thread may not be restarted once it has completed
 execution.

Throws:
IllegalThreadStateException - if the thread was already
               started.
See Also:
run(), 
stop()


"
32,Thread,2,void run(),True,,"

run
public void run()
If this thread was constructed using a separate
 Runnable run object, then that
 Runnable object's run method is called;
 otherwise, this method does nothing and returns.
 
 Subclasses of Thread should override this method.

Specified by:
run in interface Runnable
See Also:
start(), 
stop(), 
Thread(ThreadGroup, Runnable, String)


"
32,Thread,3,void sleep(long millis) throws InterruptedException,True,,"

sleep
public static void sleep(long millis)
                  throws InterruptedException
Causes the currently executing thread to sleep (temporarily cease
 execution) for the specified number of milliseconds, subject to
 the precision and accuracy of system timers and schedulers. The thread
 does not lose ownership of any monitors.

Parameters:
millis - the length of time to sleep in milliseconds
Throws:
IllegalArgumentException - if the value of millis is negative
InterruptedException - if any thread has interrupted the current thread. The
          interrupted status of the current thread is
          cleared when this exception is thrown.


"
32,Thread,4,void join() throws InterruptedException,True,,"

join
public final void join()
                throws InterruptedException
Waits for this thread to die.

  An invocation of this method behaves in exactly the same
 way as the invocation

 
join(0)


Throws:
InterruptedException - if any thread has interrupted the current thread. The
          interrupted status of the current thread is
          cleared when this exception is thrown.


"
32,Thread,5,Thread currentThread(),True,,"

currentThread
public static Thread currentThread()
Returns a reference to the currently executing thread object.

Returns:
the currently executing thread.


"
33,ThreadGroup,1,ThreadGroup(String name),False,,NULL
33,ThreadGroup,2,int activeCount(),True,,"

activeCount
public int activeCount()
Returns an estimate of the number of active threads in this thread
 group and its subgroups. Recursively iterates over all subgroups in
 this thread group.

  The value returned is only an estimate because the number of
 threads may change dynamically while this method traverses internal
 data structures, and might be affected by the presence of certain
 system threads. This method is intended primarily for debugging
 and monitoring purposes.

Returns:
an estimate of the number of active threads in this thread
          group and in any other thread group that has this thread
          group as an ancestor
Since:
JDK1.0


"
33,ThreadGroup,3,Thread[] activeGroupCount(),False,,NULL
33,ThreadGroup,4,void interrupt(),True,,"

interrupt
public final void interrupt()
Interrupts all threads in this thread group.
 
 First, the checkAccess method of this thread group is
 called with no arguments; this may result in a security exception.
 
 This method then calls the interrupt method on all the
 threads in this thread group and in all of its subgroups.

Throws:
SecurityException - if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.
Since:
1.2
See Also:
Thread.interrupt(), 
SecurityException, 
checkAccess()


"
33,ThreadGroup,5,void list(),True,,"

list
public void list()
Prints information about this thread group to the standard
 output. This method is useful only for debugging.

Since:
JDK1.0


"
34,ThreadLocal,1,void set(Object value),False,,NULL
34,ThreadLocal,2,Object get(),False,,NULL
34,ThreadLocal,3,void remove(),True,,"

remove
public void remove()
Removes the current thread's value for this thread-local
 variable.  If this thread-local variable is subsequently
 read by the current thread, its value will be
 reinitialized by invoking its initialValue() method,
 unless its value is set by the current thread
 in the interim.  This may result in multiple invocations of the
 initialValue method in the current thread.

Since:
1.5


"
34,ThreadLocal,4,protected Object initialValue(),False,,NULL
34,ThreadLocal,5,void setInitialValue(Object value),False,,NULL
35,Throwable,1,String getMessage(),True,,"

getMessage
public String getMessage()
Returns the detail message string of this throwable.

Returns:
the detail message string of this Throwable instance
          (which may be null).


"
35,Throwable,2,void printStackTrace(),True,,"

printStackTrace
public void printStackTrace()
Prints this throwable and its backtrace to the
 standard error stream. This method prints a stack trace for this
 Throwable object on the error output stream that is
 the value of the field System.err. The first line of
 output contains the result of the toString() method for
 this object.  Remaining lines represent data previously recorded by
 the method fillInStackTrace(). The format of this
 information depends on the implementation, but the following
 example may be regarded as typical:
 
 java.lang.NullPointerException
         at MyClass.mash(MyClass.java:9)
         at MyClass.crunch(MyClass.java:6)
         at MyClass.main(MyClass.java:3)
 
 This example was produced by running the program:
 
 class MyClass {
     public static void main(String[] args) {
         crunch(null);
     }
     static void crunch(int[] a) {
         mash(a);
     }
     static void mash(int[] b) {
         System.out.println(b[0]);
     }
 }
 
 The backtrace for a throwable with an initialized, non-null cause
 should generally include the backtrace for the cause.  The format
 of this information depends on the implementation, but the following
 example may be regarded as typical:
 
 HighLevelException: MidLevelException: LowLevelException
         at Junk.a(Junk.java:13)
         at Junk.main(Junk.java:4)
 Caused by: MidLevelException: LowLevelException
         at Junk.c(Junk.java:23)
         at Junk.b(Junk.java:17)
         at Junk.a(Junk.java:11)
         ... 1 more
 Caused by: LowLevelException
         at Junk.e(Junk.java:30)
         at Junk.d(Junk.java:27)
         at Junk.c(Junk.java:21)
         ... 3 more
 
 Note the presence of lines containing the characters ""..."".
 These lines indicate that the remainder of the stack trace for this
 exception matches the indicated number of frames from the bottom of the
 stack trace of the exception that was caused by this exception (the
 ""enclosing"" exception).  This shorthand can greatly reduce the length
 of the output in the common case where a wrapped exception is thrown
 from same method as the ""causative exception"" is caught.  The above
 example was produced by running the program:
 
 public class Junk {
     public static void main(String args[]) {
         try {
             a();
         } catch(HighLevelException e) {
             e.printStackTrace();
         }
     }
     static void a() throws HighLevelException {
         try {
             b();
         } catch(MidLevelException e) {
             throw new HighLevelException(e);
         }
     }
     static void b() throws MidLevelException {
         c();
     }
     static void c() throws MidLevelException {
         try {
             d();
         } catch(LowLevelException e) {
             throw new MidLevelException(e);
         }
     }
     static void d() throws LowLevelException {
        e();
     }
     static void e() throws LowLevelException {
         throw new LowLevelException();
     }
 }

 class HighLevelException extends Exception {
     HighLevelException(Throwable cause) { super(cause); }
 }

 class MidLevelException extends Exception {
     MidLevelException(Throwable cause)  { super(cause); }
 }

 class LowLevelException extends Exception {
 }
 
 As of release 7, the platform supports the notion of
 suppressed exceptions (in conjunction with the try-with-resources statement). Any exceptions that were
 suppressed in order to deliver an exception are printed out
 beneath the stack trace.  The format of this information
 depends on the implementation, but the following example may be
 regarded as typical:

 
 Exception in thread ""main"" java.lang.Exception: Something happened
  at Foo.bar(Foo.java:10)
  at Foo.main(Foo.java:5)
  Suppressed: Resource$CloseFailException: Resource ID = 0
          at Resource.close(Resource.java:26)
          at Foo.bar(Foo.java:9)
          ... 1 more
 
 Note that the ""... n more"" notation is used on suppressed exceptions
 just at it is used on causes. Unlike causes, suppressed exceptions are
 indented beyond their ""containing exceptions.""

 An exception can have both a cause and one or more suppressed
 exceptions:
 
 Exception in thread ""main"" java.lang.Exception: Main block
  at Foo3.main(Foo3.java:7)
  Suppressed: Resource$CloseFailException: Resource ID = 2
          at Resource.close(Resource.java:26)
          at Foo3.main(Foo3.java:5)
  Suppressed: Resource$CloseFailException: Resource ID = 1
          at Resource.close(Resource.java:26)
          at Foo3.main(Foo3.java:5)
 Caused by: java.lang.Exception: I did it
  at Foo3.main(Foo3.java:8)
 
 Likewise, a suppressed exception can have a cause:
 
 Exception in thread ""main"" java.lang.Exception: Main block
  at Foo4.main(Foo4.java:6)
  Suppressed: Resource2$CloseFailException: Resource ID = 1
          at Resource2.close(Resource2.java:20)
          at Foo4.main(Foo4.java:5)
  Caused by: java.lang.Exception: Rats, you caught me
          at Resource2$CloseFailException.<init>(Resource2.java:45)
          ... 2 more
 

"
35,Throwable,3,Throwable getCause(),True,,"

getCause
public Throwable getCause()
Returns the cause of this throwable or null if the
 cause is nonexistent or unknown.  (The cause is the throwable that
 caused this throwable to get thrown.)

 This implementation returns the cause that was supplied via one of
 the constructors requiring a Throwable, or that was set after
 creation with the initCause(Throwable) method.  While it is
 typically unnecessary to override this method, a subclass can override
 it to return a cause set by some other means.  This is appropriate for
 a ""legacy chained throwable"" that predates the addition of chained
 exceptions to Throwable.  Note that it is not
 necessary to override any of the PrintStackTrace methods,
 all of which invoke the getCause method to determine the
 cause of a throwable.

Returns:
the cause of this throwable or null if the
          cause is nonexistent or unknown.
Since:
1.4


"
35,Throwable,4,String toString(),True,,"

toString
public String toString()
Returns a short description of this throwable.
 The result is the concatenation of:
 
 the name of the class of this object
  "": "" (a colon and a space)
  the result of invoking this object's getLocalizedMessage()
      method
 
 If getLocalizedMessage returns null, then just
 the class name is returned.

Overrides:
toString in class Object
Returns:
a string representation of this throwable.


"
35,Throwable,5,void addSuppressed(Throwable exception),True,,"

addSuppressed
public final void addSuppressed(Throwable exception)
Appends the specified exception to the exceptions that were
 suppressed in order to deliver this exception. This method is
 thread-safe and typically called (automatically and implicitly)
 by the try-with-resources statement.

 The suppression behavior is enabled unless disabled
 via
 a constructor.  When suppression is disabled, this method does
 nothing other than to validate its argument.

 Note that when one exception causes another exception, the first
 exception is usually caught and then the second exception is
 thrown in response.  In other words, there is a causal
 connection between the two exceptions.

 In contrast, there are situations where two independent
 exceptions can be thrown in sibling code blocks, in particular
 in the try block of a try-with-resources
 statement and the compiler-generated finally block
 which closes the resource.

 In these situations, only one of the thrown exceptions can be
 propagated.  In the try-with-resources statement, when
 there are two such exceptions, the exception originating from
 the try block is propagated and the exception from the
 finally block is added to the list of exceptions
 suppressed by the exception from the try block.  As an
 exception unwinds the stack, it can accumulate multiple
 suppressed exceptions.

 An exception may have suppressed exceptions while also being
 caused by another exception.  Whether or not an exception has a
 cause is semantically known at the time of its creation, unlike
 whether or not an exception will suppress other exceptions
 which is typically only determined after an exception is
 thrown.

 Note that programmer written code is also able to take
 advantage of calling this method in situations where there are
 multiple sibling exceptions and only one can be propagated.

Parameters:
exception - the exception to be added to the list of
        suppressed exceptions
Throws:
IllegalArgumentException - if exception is this
         throwable; a throwable cannot suppress itself.
NullPointerException - if exception is null
Since:
1.7


"
36,Void,1,Class<Void> getClass(),False,,NULL
36,Void,2,int hashCode(),False,,NULL
36,Void,3,boolean equals(Object obj),False,,NULL
36,Void,4,String toString(),False,,NULL
36,Void,5,Void getVoid(),False,,NULL
