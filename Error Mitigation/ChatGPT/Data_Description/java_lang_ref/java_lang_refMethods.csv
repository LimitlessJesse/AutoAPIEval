ClassName,Method,Return Type,Description,Full Description
PhantomReference,get(),T,Returns this reference object's referent.,"

get
public T get()
Returns this reference object's referent.  Because the referent of a
 phantom reference is always inaccessible, this method always returns
 null.

Overrides:
get in class Reference<T>
Returns:
null


"
Reference,clear(),void,Clears this reference object.,"

clear
public void clear()
Clears this reference object.  Invoking this method will not cause this
 object to be enqueued.

  This method is invoked only by Java code; when the garbage collector
 clears references it does so directly, without invoking this method.

"
Reference,clone(),protected Object,Throws CloneNotSupportedException.,"

clone
protected Object clone()
                throws CloneNotSupportedException
Throws CloneNotSupportedException. A Reference cannot be
 meaningfully cloned. Construct a new Reference instead.

Overrides:
clone in class Object
API Note:
This method is defined in Java SE 8 Maintenance Release 4.
Returns:
never returns normally
Throws:
CloneNotSupportedException - always
Since:
8
See Also:
Cloneable


"
Reference,enqueue(),boolean,"Clears this reference object and adds it to the queue with which it is registered, if any.","

enqueue
public boolean enqueue()
Clears this reference object and adds it to the queue with which
 it is registered, if any.

  This method is invoked only by Java code; when the garbage collector
 enqueues references it does so directly, without invoking this method.

Returns:
true if this reference object was successfully
           enqueued; false if it was already enqueued or if
           it was not registered with a queue when it was created


"
Reference,get(),T,Returns this reference object's referent.,"

get
public T get()
Returns this reference object's referent.  If this reference object has
 been cleared, either by the program or by the garbage collector, then
 this method returns null.

Returns:
The object to which this reference refers, or
           null if this reference object has been cleared


"
Reference,isEnqueued(),boolean,"Tells whether or not this reference object has been enqueued, either by the program or by the garbage collector.","

isEnqueued
public boolean isEnqueued()
Tells whether or not this reference object has been enqueued, either by
 the program or by the garbage collector.  If this reference object was
 not registered with a queue when it was created, then this method will
 always return false.

Returns:
true if and only if this reference object has
           been enqueued


"
ReferenceQueue,poll(),Reference<? extends T>,Polls this queue to see if a reference object is available.,"

poll
public Reference<? extends T> poll()
Polls this queue to see if a reference object is available.  If one is
 available without further delay then it is removed from the queue and
 returned.  Otherwise this method immediately returns null.

Returns:
A reference object, if one was immediately available,
          otherwise null


"
ReferenceQueue,remove(),Reference<? extends T>,"Removes the next reference object in this queue, blocking until one becomes available.","

remove
public Reference<? extends T> remove()
                              throws InterruptedException
Removes the next reference object in this queue, blocking until one
 becomes available.

Returns:
A reference object, blocking until one becomes available
Throws:
InterruptedException - If the wait is interrupted


"
ReferenceQueue,remove(long timeout),Reference<? extends T>,"Removes the next reference object in this queue, blocking until either one becomes available or the given timeout period expires.","

remove
public Reference<? extends T> remove(long timeout)
                              throws IllegalArgumentException,
                                     InterruptedException
Removes the next reference object in this queue, blocking until either
 one becomes available or the given timeout period expires.

  This method does not offer real-time guarantees: It schedules the
 timeout as if by invoking the Object.wait(long) method.

Parameters:
timeout - If positive, block for up to timeout
                  milliseconds while waiting for a reference to be
                  added to this queue.  If zero, block indefinitely.
Returns:
A reference object, if one was available within the specified
          timeout period, otherwise null
Throws:
IllegalArgumentException - If the value of the timeout argument is negative
InterruptedException - If the timeout wait is interrupted


"
SoftReference,get(),T,Returns this reference object's referent.,"

get
public T get()
Returns this reference object's referent.  If this reference object has
 been cleared, either by the program or by the garbage collector, then
 this method returns null.

Overrides:
get in class Reference<T>
Returns:
The object to which this reference refers, or
           null if this reference object has been cleared


"
