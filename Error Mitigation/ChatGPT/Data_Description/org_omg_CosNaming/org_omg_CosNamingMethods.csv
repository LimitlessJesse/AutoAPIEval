ClassName,Method,Return Type,Description,Full Description
_BindingIteratorImplBase,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Overrides:
_ids in class DynamicImplementation
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_BindingIteratorImplBase,invoke(ServerRequest r),void,NULL,"

invoke
public void invoke(ServerRequest r)

Overrides:
invoke in class DynamicImplementation


"
_BindingIteratorStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_BindingIteratorStub,destroy(),void,This operation destroys the iterator.,"

destroy
public void destroy()
This operation destroys the iterator.

Specified by:
destroy in interface BindingIteratorOperations


"
_BindingIteratorStub,"next_n(int how_many, BindingListHolder bl)",boolean,This operation returns at most the requested number of bindings.,"

next_n
public boolean next_n(int how_many,
                      BindingListHolder bl)
This operation returns at most the requested number of bindings.

Specified by:
next_n in interface BindingIteratorOperations
Parameters:
how_many - the maximum number of bindings tro return 
bl - the returned bindings


"
_BindingIteratorStub,next_one(BindingHolder b),boolean,This operation returns the next binding.,"

next_one
public boolean next_one(BindingHolder b)
This operation returns the next binding. If there are no more
 bindings, false is returned.

Specified by:
next_one in interface BindingIteratorOperations
Parameters:
b - the returned binding


"
_NamingContextExtStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_NamingContextExtStub,"bind_context(NameComponent[] n, NamingContext nc)",void,Names an object that is a naming context.,"

bind_context
public void bind_context(NameComponent[] n,
                         NamingContext nc)
                  throws NotFound,
                         CannotProceed,
                         InvalidName,
                         AlreadyBound
Names an object that is a naming context. Naming contexts that
 are bound using bind_context() participate in name resolution 
 when compound names are passed to be resolved.

Specified by:
bind_context in interface NamingContextOperations
Parameters:
n - Name of the object 
nc - NamingContect object to bind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 
AlreadyBound - Indicates an object is already 
 bound to the specified name.


"
_NamingContextExtStub,bind_new_context(NameComponent[] n),NamingContext,This operation creates a new context and binds it to the name supplied as an argument.,"

bind_new_context
public NamingContext bind_new_context(NameComponent[] n)
                               throws NotFound,
                                      AlreadyBound,
                                      CannotProceed,
                                      InvalidName
This operation creates a new context and binds it to the name
 supplied as an argument. The newly-created context is implemented 
 by the same naming server as the context in which it was bound (that 
 is, the naming server that implements the context denoted by the 
 name argument excluding the last component).

Specified by:
bind_new_context in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
AlreadyBound - Indicates an object is already 
 bound to the specified name.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextExtStub,"bind(NameComponent[] n, Object obj)",void,Creates a binding of a name and an object in the naming context.,"

bind
public void bind(NameComponent[] n,
                 Object obj)
          throws NotFound,
                 CannotProceed,
                 InvalidName,
                 AlreadyBound
Creates a binding of a name and an object in the naming context.
 Naming contexts that are bound using bind do not participate in name
 resolution when compound names are passed to be resolved.

Specified by:
bind in interface NamingContextOperations
Parameters:
n - Name of the object 
obj - The Object to bind with the given name
Throws:
NotFound - Indicates
 the name does not identify a binding.
CannotProceed - Indicates that the implementation has given up for some reason.
 The client, however, may be able to continue the operation
 at the returned naming context.
InvalidName - Indicates that the name is invalid. 
AlreadyBound - Indicates an object is already bound to the specified name.


"
_NamingContextExtStub,destroy(),void,The destroy operation deletes a naming context.,"

destroy
public void destroy()
             throws NotEmpty
The destroy operation deletes a naming context. If the naming 
 context contains bindings, the NotEmpty exception is raised.

Specified by:
destroy in interface NamingContextOperations
Throws:
NotEmpty - Indicates that the Naming Context contains bindings.


"
_NamingContextExtStub,"list(int how_many, BindingListHolder bl, BindingIteratorHolder bi)",void,The list operation allows a client to iterate through a set of bindings in a naming context.,"

list
public void list(int how_many,
                 BindingListHolder bl,
                 BindingIteratorHolder bi)
The list operation allows a client to iterate through a set of
 bindings in a naming context. 
 
 The list operation returns at most the requested number of
 bindings in BindingList bl. 
 
If the naming context contains additional 
 bindings, the list operation returns a BindingIterator with the 
 additional bindings. 
 If the naming context does not contain additional 
 bindings, the binding iterator is a nil object reference.
 

Specified by:
list in interface NamingContextOperations
Parameters:
how_many - the maximum number of bindings to return 
bl - the returned list of bindings 
bi - the returned binding iterator 


"
_NamingContextExtStub,new_context(),NamingContext,This operation returns a naming context implemented by the same naming server as the context on which the operation was invoked.,"

new_context
public NamingContext new_context()
This operation returns a naming context implemented by the same
 naming server as the context on which the operation was invoked. 
 The new context is not bound to any name.

Specified by:
new_context in interface NamingContextOperations


"
_NamingContextExtStub,"rebind_context(NameComponent[] n, NamingContext nc)",void,Creates a binding of a name and a naming context in the naming context even if the name is already bound in the context.,"

rebind_context
public void rebind_context(NameComponent[] n,
                           NamingContext nc)
                    throws NotFound,
                           CannotProceed,
                           InvalidName
Creates a binding of a name and a naming context in the naming
 context even if the name is already bound in the context. Naming 
 contexts that are bound using rebind_context() participate in name 
 resolution when compound names are passed to be resolved.

Specified by:
rebind_context in interface NamingContextOperations
Parameters:
n - Name of the object 
nc - NamingContect object to rebind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextExtStub,"rebind(NameComponent[] n, Object obj)",void,Creates a binding of a name and an object in the naming context even if the name is already bound in the context.,"

rebind
public void rebind(NameComponent[] n,
                   Object obj)
            throws NotFound,
                   CannotProceed,
                   InvalidName
Creates a binding of a name and an object in the naming context
 even if the name is already bound in the context. Naming contexts 
 that are bound using rebind do not participate in name resolution 
 when compound names are passed to be resolved.

Specified by:
rebind in interface NamingContextOperations
Parameters:
n - Name of the object 
obj - The Object to rebind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextExtStub,resolve_str(String sn),Object,This operation resolves the Stringified name into the object reference.,"

resolve_str
public Object resolve_str(String sn)
                   throws NotFound,
                          CannotProceed,
                          InvalidName
This operation resolves the Stringified name into the object
 reference.

Specified by:
resolve_str in interface NamingContextExtOperations
Parameters:
sn - Stringified Name of the object 
Throws:
NotFound - Indicates there is no object reference for the given name. 
CannotProceed - Indicates that the given compound name is incorrect 
org.omg.CosNaming.NamingContextExtPackage.InvalidName - Indicates the name does not identify a binding.
InvalidName


"
_NamingContextExtStub,resolve(NameComponent[] n),Object,The resolve operation is the process of retrieving an object bound to a name in a given context.,"

resolve
public Object resolve(NameComponent[] n)
               throws NotFound,
                      CannotProceed,
                      InvalidName
The resolve operation is the process of retrieving an object
 bound to a name in a given context. The given name must exactly 
 match the bound name. The naming service does not return the type 
 of the object. Clients are responsible for ""narrowing"" the object 
 to the appropriate type. That is, clients typically cast the returned 
 object from Object to a more specialized interface.

Specified by:
resolve in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextExtStub,to_name(String sn),NameComponent[],This operation converts a Stringified Name into an equivalent array of Name Components.,"

to_name
public NameComponent[] to_name(String sn)
                        throws InvalidName
This operation  converts a Stringified Name into an  equivalent array
 of Name Components.

Specified by:
to_name in interface NamingContextExtOperations
Parameters:
sn - Stringified Name of the object 
Throws:
org.omg.CosNaming.NamingContextExtPackage.InvalidName - Indicates the name does not identify a binding.
InvalidName


"
_NamingContextExtStub,to_string(NameComponent[] n),String,This operation creates a stringified name from the array of Name components.,"

to_string
public String to_string(NameComponent[] n)
                 throws InvalidName
This operation creates a stringified name from the array of Name
 components.

Specified by:
to_string in interface NamingContextExtOperations
Parameters:
n - Name of the object 
Throws:
org.omg.CosNaming.NamingContextExtPackage.InvalidName - Indicates the name does not identify a binding.
InvalidName


"
_NamingContextExtStub,"to_url(String addr, String sn)",String,"This operation creates a URL based ""iiopname://"" format name from the Stringified Name of the object.","

to_url
public String to_url(String addr,
                     String sn)
              throws InvalidAddress,
                     InvalidName
This operation creates a URL based ""iiopname://"" format name
 from the Stringified Name of the object.

Specified by:
to_url in interface NamingContextExtOperations
Parameters:
addr - internet based address of the host machine where  Name Service is running 
sn - Stringified Name of the object 
Throws:
org.omg.CosNaming.NamingContextExtPackage.InvalidName - Indicates the name does not identify a binding.
org.omg.CosNaming.NamingContextPackage.InvalidAddress - Indicates the internet based address of the host machine is 
 incorrect 
InvalidAddress
InvalidName


"
_NamingContextExtStub,unbind(NameComponent[] n),void,The unbind operation removes a name binding from a context.,"

unbind
public void unbind(NameComponent[] n)
            throws NotFound,
                   CannotProceed,
                   InvalidName
The unbind operation removes a name binding from a context.

Specified by:
unbind in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextImplBase,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Overrides:
_ids in class DynamicImplementation
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_NamingContextImplBase,invoke(ServerRequest r),void,NULL,"

invoke
public void invoke(ServerRequest r)

Overrides:
invoke in class DynamicImplementation


"
_NamingContextStub,_ids(),String[],Retrieves a string array containing the repository identifiers supported by this ObjectImpl object.,"

_ids
public String[] _ids()
Description copied from class: ObjectImpl
Retrieves a string array containing the repository identifiers
 supported by this ObjectImpl object.  For example,
 for a stub, this method returns information about all the
 interfaces supported by the stub.

Specified by:
_ids in class ObjectImpl
Returns:
the array of all repository identifiers supported by this
         ObjectImpl instance


"
_NamingContextStub,"bind_context(NameComponent[] n, NamingContext nc)",void,Names an object that is a naming context.,"

bind_context
public void bind_context(NameComponent[] n,
                         NamingContext nc)
                  throws NotFound,
                         CannotProceed,
                         InvalidName,
                         AlreadyBound
Names an object that is a naming context. Naming contexts that
 are bound using bind_context() participate in name resolution 
 when compound names are passed to be resolved.

Specified by:
bind_context in interface NamingContextOperations
Parameters:
n - Name of the object 
nc - NamingContect object to bind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 
AlreadyBound - Indicates an object is already 
 bound to the specified name.


"
_NamingContextStub,bind_new_context(NameComponent[] n),NamingContext,This operation creates a new context and binds it to the name supplied as an argument.,"

bind_new_context
public NamingContext bind_new_context(NameComponent[] n)
                               throws NotFound,
                                      AlreadyBound,
                                      CannotProceed,
                                      InvalidName
This operation creates a new context and binds it to the name
 supplied as an argument. The newly-created context is implemented 
 by the same naming server as the context in which it was bound (that 
 is, the naming server that implements the context denoted by the 
 name argument excluding the last component).

Specified by:
bind_new_context in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
AlreadyBound - Indicates an object is already 
 bound to the specified name.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextStub,"bind(NameComponent[] n, Object obj)",void,Creates a binding of a name and an object in the naming context.,"

bind
public void bind(NameComponent[] n,
                 Object obj)
          throws NotFound,
                 CannotProceed,
                 InvalidName,
                 AlreadyBound
Creates a binding of a name and an object in the naming context.
 Naming contexts that are bound using bind do not participate in name
 resolution when compound names are passed to be resolved.

Specified by:
bind in interface NamingContextOperations
Parameters:
n - Name of the object 
obj - The Object to bind with the given name
Throws:
NotFound - Indicates
 the name does not identify a binding.
CannotProceed - Indicates that the implementation has given up for some reason.
 The client, however, may be able to continue the operation
 at the returned naming context.
InvalidName - Indicates that the name is invalid. 
AlreadyBound - Indicates an object is already bound to the specified name.


"
_NamingContextStub,destroy(),void,The destroy operation deletes a naming context.,"

destroy
public void destroy()
             throws NotEmpty
The destroy operation deletes a naming context. If the naming 
 context contains bindings, the NotEmpty exception is raised.

Specified by:
destroy in interface NamingContextOperations
Throws:
NotEmpty - Indicates that the Naming Context contains bindings.


"
_NamingContextStub,"list(int how_many, BindingListHolder bl, BindingIteratorHolder bi)",void,The list operation allows a client to iterate through a set of bindings in a naming context.,"

list
public void list(int how_many,
                 BindingListHolder bl,
                 BindingIteratorHolder bi)
The list operation allows a client to iterate through a set of
 bindings in a naming context. 
 
 The list operation returns at most the requested number of
 bindings in BindingList bl. 
 
If the naming context contains additional 
 bindings, the list operation returns a BindingIterator with the 
 additional bindings. 
 If the naming context does not contain additional 
 bindings, the binding iterator is a nil object reference.
 

Specified by:
list in interface NamingContextOperations
Parameters:
how_many - the maximum number of bindings to return 
bl - the returned list of bindings 
bi - the returned binding iterator 


"
_NamingContextStub,new_context(),NamingContext,This operation returns a naming context implemented by the same naming server as the context on which the operation was invoked.,"

new_context
public NamingContext new_context()
This operation returns a naming context implemented by the same
 naming server as the context on which the operation was invoked. 
 The new context is not bound to any name.

Specified by:
new_context in interface NamingContextOperations


"
_NamingContextStub,"rebind_context(NameComponent[] n, NamingContext nc)",void,Creates a binding of a name and a naming context in the naming context even if the name is already bound in the context.,"

rebind_context
public void rebind_context(NameComponent[] n,
                           NamingContext nc)
                    throws NotFound,
                           CannotProceed,
                           InvalidName
Creates a binding of a name and a naming context in the naming
 context even if the name is already bound in the context. Naming 
 contexts that are bound using rebind_context() participate in name 
 resolution when compound names are passed to be resolved.

Specified by:
rebind_context in interface NamingContextOperations
Parameters:
n - Name of the object 
nc - NamingContect object to rebind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextStub,"rebind(NameComponent[] n, Object obj)",void,Creates a binding of a name and an object in the naming context even if the name is already bound in the context.,"

rebind
public void rebind(NameComponent[] n,
                   Object obj)
            throws NotFound,
                   CannotProceed,
                   InvalidName
Creates a binding of a name and an object in the naming context
 even if the name is already bound in the context. Naming contexts 
 that are bound using rebind do not participate in name resolution 
 when compound names are passed to be resolved.

Specified by:
rebind in interface NamingContextOperations
Parameters:
n - Name of the object 
obj - The Object to rebind with the given name 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextStub,resolve(NameComponent[] n),Object,The resolve operation is the process of retrieving an object bound to a name in a given context.,"

resolve
public Object resolve(NameComponent[] n)
               throws NotFound,
                      CannotProceed,
                      InvalidName
The resolve operation is the process of retrieving an object
 bound to a name in a given context. The given name must exactly 
 match the bound name. The naming service does not return the type 
 of the object. Clients are responsible for ""narrowing"" the object 
 to the appropriate type. That is, clients typically cast the returned 
 object from Object to a more specialized interface.

Specified by:
resolve in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
_NamingContextStub,unbind(NameComponent[] n),void,The unbind operation removes a name binding from a context.,"

unbind
public void unbind(NameComponent[] n)
            throws NotFound,
                   CannotProceed,
                   InvalidName
The unbind operation removes a name binding from a context.

Specified by:
unbind in interface NamingContextOperations
Parameters:
n - Name of the object 
Throws:
NotFound - Indicates the name does not identify a binding.
CannotProceed - Indicates that the implementation has
 given up for some reason. The client, however, may be able to 
 continue the operation at the returned naming context.
InvalidName - Indicates that the name is invalid. 


"
BindingHelper,extract(Any a),static Binding,NULL,"

extract
public static Binding extract(Any a)

"
BindingHelper,id(),static String,NULL,"

id
public static String id()

"
BindingHelper,"insert(Any a, Binding that)",static void,NULL,"

insert
public static void insert(Any a,
                          Binding that)

"
BindingHelper,read(InputStream istream),static Binding,NULL,"

read
public static Binding read(InputStream istream)

"
BindingHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
BindingHelper,"write(OutputStream ostream, Binding value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         Binding value)

"
BindingHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
BindingHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
BindingHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
BindingIteratorHelper,extract(Any a),static BindingIterator,NULL,"

extract
public static BindingIterator extract(Any a)

"
BindingIteratorHelper,id(),static String,NULL,"

id
public static String id()

"
BindingIteratorHelper,"insert(Any a, BindingIterator that)",static void,NULL,"

insert
public static void insert(Any a,
                          BindingIterator that)

"
BindingIteratorHelper,narrow(Object obj),static BindingIterator,NULL,"

narrow
public static BindingIterator narrow(Object obj)

"
BindingIteratorHelper,read(InputStream istream),static BindingIterator,NULL,"

read
public static BindingIterator read(InputStream istream)

"
BindingIteratorHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
BindingIteratorHelper,unchecked_narrow(Object obj),static BindingIterator,NULL,"

unchecked_narrow
public static BindingIterator unchecked_narrow(Object obj)

"
BindingIteratorHelper,"write(OutputStream ostream, BindingIterator value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         BindingIterator value)

"
BindingIteratorHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
BindingIteratorHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
BindingIteratorHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
BindingIteratorPOA,"_all_interfaces(POA poa, byte[] objectId)",String[],Used by the ORB to obtain complete type information from the servant.,"

_all_interfaces
public String[] _all_interfaces(POA poa,
                                byte[] objectId)
Description copied from class: Servant
Used by the ORB to obtain complete type
 information from the servant.

Specified by:
_all_interfaces in class Servant
Parameters:
poa - POA with which the servant is associated.
objectId - is the id corresponding to the object
         associated with this servant.
Returns:
list of type information for the object.


"
BindingIteratorPOA,"_invoke(String $method, InputStream in, ResponseHandler $rh)",OutputStream,Invoked by the ORB to dispatch a request to the servant.,"

_invoke
public OutputStream _invoke(String $method,
                            InputStream in,
                            ResponseHandler $rh)
Description copied from interface: InvokeHandler
Invoked by the ORB to dispatch a request to the servant.

 ORB passes the method name, an InputStream containing the
 marshalled arguments, and a ResponseHandler which the servant
 uses to construct a proper reply.

 Only CORBA SystemException may be thrown by this method.

 The method must return an OutputStream created by the
 ResponseHandler which contains the marshalled reply.

 A servant must not retain a reference to the ResponseHandler
 beyond the lifetime of a method invocation.

 Servant behaviour is defined as follows:
 1. Determine correct method, and unmarshal parameters from
    InputStream.
 2. Invoke method implementation.
 3. If no user exception, create a normal reply using
    ResponseHandler.
 4. If user exception occurred, create exception reply using
    ResponseHandler.
 5. Marshal reply into OutputStream returned by
    ResponseHandler.
 6. Return OutputStream to ORB.
 

Specified by:
_invoke in interface InvokeHandler
Parameters:
$method - The method name.
in - The InputStream containing the marshalled arguments.
$rh - The ResponseHandler which the servant uses
 to construct a proper reply
Returns:
The OutputStream created by the
 ResponseHandler which contains the marshalled reply


"
BindingIteratorPOA,_this(),BindingIterator,NULL,"

_this
public BindingIterator _this()

"
BindingIteratorPOA,_this(ORB orb),BindingIterator,NULL,"

_this
public BindingIterator _this(ORB orb)

"
BindingListHelper,extract(Any a),static Binding[],NULL,"

extract
public static Binding[] extract(Any a)

"
BindingListHelper,id(),static String,NULL,"

id
public static String id()

"
BindingListHelper,"insert(Any a, Binding[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          Binding[] that)

"
BindingListHelper,read(InputStream istream),static Binding[],NULL,"

read
public static Binding[] read(InputStream istream)

"
BindingListHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
BindingListHelper,"write(OutputStream ostream, Binding[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         Binding[] value)

"
BindingListHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
BindingListHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
BindingListHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
BindingType,from_int(int value),static BindingType,NULL,"

from_int
public static BindingType from_int(int value)

"
BindingType,value(),int,NULL,"

value
public int value()

"
BindingTypeHelper,extract(Any a),static BindingType,NULL,"

extract
public static BindingType extract(Any a)

"
BindingTypeHelper,id(),static String,NULL,"

id
public static String id()

"
BindingTypeHelper,"insert(Any a, BindingType that)",static void,NULL,"

insert
public static void insert(Any a,
                          BindingType that)

"
BindingTypeHelper,read(InputStream istream),static BindingType,NULL,"

read
public static BindingType read(InputStream istream)

"
BindingTypeHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
BindingTypeHelper,"write(OutputStream ostream, BindingType value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         BindingType value)

"
BindingTypeHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
BindingTypeHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
BindingTypeHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
IstringHelper,extract(Any a),static String,NULL,"

extract
public static String extract(Any a)

"
IstringHelper,id(),static String,NULL,"

id
public static String id()

"
IstringHelper,"insert(Any a, String that)",static void,NULL,"

insert
public static void insert(Any a,
                          String that)

"
IstringHelper,read(InputStream istream),static String,NULL,"

read
public static String read(InputStream istream)

"
IstringHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
IstringHelper,"write(OutputStream ostream, String value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         String value)

"
NameComponentHelper,extract(Any a),static NameComponent,NULL,"

extract
public static NameComponent extract(Any a)

"
NameComponentHelper,id(),static String,NULL,"

id
public static String id()

"
NameComponentHelper,"insert(Any a, NameComponent that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameComponent that)

"
NameComponentHelper,read(InputStream istream),static NameComponent,NULL,"

read
public static NameComponent read(InputStream istream)

"
NameComponentHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameComponentHelper,"write(OutputStream ostream, NameComponent value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameComponent value)

"
NameComponentHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
NameComponentHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
NameComponentHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
NameHelper,extract(Any a),static NameComponent[],NULL,"

extract
public static NameComponent[] extract(Any a)

"
NameHelper,id(),static String,NULL,"

id
public static String id()

"
NameHelper,"insert(Any a, NameComponent[] that)",static void,NULL,"

insert
public static void insert(Any a,
                          NameComponent[] that)

"
NameHelper,read(InputStream istream),static NameComponent[],NULL,"

read
public static NameComponent[] read(InputStream istream)

"
NameHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NameHelper,"write(OutputStream ostream, NameComponent[] value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NameComponent[] value)

"
NameHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
NameHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
NameHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
NamingContextExtHelper,extract(Any a),static NamingContextExt,NULL,"

extract
public static NamingContextExt extract(Any a)

"
NamingContextExtHelper,id(),static String,NULL,"

id
public static String id()

"
NamingContextExtHelper,"insert(Any a, NamingContextExt that)",static void,NULL,"

insert
public static void insert(Any a,
                          NamingContextExt that)

"
NamingContextExtHelper,narrow(Object obj),static NamingContextExt,NULL,"

narrow
public static NamingContextExt narrow(Object obj)

"
NamingContextExtHelper,read(InputStream istream),static NamingContextExt,NULL,"

read
public static NamingContextExt read(InputStream istream)

"
NamingContextExtHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NamingContextExtHelper,unchecked_narrow(Object obj),static NamingContextExt,NULL,"

unchecked_narrow
public static NamingContextExt unchecked_narrow(Object obj)

"
NamingContextExtHelper,"write(OutputStream ostream, NamingContextExt value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NamingContextExt value)

"
NamingContextExtHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
NamingContextExtHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
NamingContextExtHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
NamingContextExtPOA,"_all_interfaces(POA poa, byte[] objectId)",String[],Used by the ORB to obtain complete type information from the servant.,"

_all_interfaces
public String[] _all_interfaces(POA poa,
                                byte[] objectId)
Description copied from class: Servant
Used by the ORB to obtain complete type
 information from the servant.

Specified by:
_all_interfaces in class Servant
Parameters:
poa - POA with which the servant is associated.
objectId - is the id corresponding to the object
         associated with this servant.
Returns:
list of type information for the object.


"
NamingContextExtPOA,"_invoke(String $method, InputStream in, ResponseHandler $rh)",OutputStream,Invoked by the ORB to dispatch a request to the servant.,"

_invoke
public OutputStream _invoke(String $method,
                            InputStream in,
                            ResponseHandler $rh)
Description copied from interface: InvokeHandler
Invoked by the ORB to dispatch a request to the servant.

 ORB passes the method name, an InputStream containing the
 marshalled arguments, and a ResponseHandler which the servant
 uses to construct a proper reply.

 Only CORBA SystemException may be thrown by this method.

 The method must return an OutputStream created by the
 ResponseHandler which contains the marshalled reply.

 A servant must not retain a reference to the ResponseHandler
 beyond the lifetime of a method invocation.

 Servant behaviour is defined as follows:
 1. Determine correct method, and unmarshal parameters from
    InputStream.
 2. Invoke method implementation.
 3. If no user exception, create a normal reply using
    ResponseHandler.
 4. If user exception occurred, create exception reply using
    ResponseHandler.
 5. Marshal reply into OutputStream returned by
    ResponseHandler.
 6. Return OutputStream to ORB.
 

Specified by:
_invoke in interface InvokeHandler
Parameters:
$method - The method name.
in - The InputStream containing the marshalled arguments.
$rh - The ResponseHandler which the servant uses
 to construct a proper reply
Returns:
The OutputStream created by the
 ResponseHandler which contains the marshalled reply


"
NamingContextExtPOA,_this(),NamingContextExt,NULL,"

_this
public NamingContextExt _this()

"
NamingContextExtPOA,_this(ORB orb),NamingContextExt,NULL,"

_this
public NamingContextExt _this(ORB orb)

"
NamingContextHelper,extract(Any a),static NamingContext,NULL,"

extract
public static NamingContext extract(Any a)

"
NamingContextHelper,id(),static String,NULL,"

id
public static String id()

"
NamingContextHelper,"insert(Any a, NamingContext that)",static void,NULL,"

insert
public static void insert(Any a,
                          NamingContext that)

"
NamingContextHelper,narrow(Object obj),static NamingContext,NULL,"

narrow
public static NamingContext narrow(Object obj)

"
NamingContextHelper,read(InputStream istream),static NamingContext,NULL,"

read
public static NamingContext read(InputStream istream)

"
NamingContextHelper,type(),static TypeCode,NULL,"

type
public static TypeCode type()

"
NamingContextHelper,unchecked_narrow(Object obj),static NamingContext,NULL,"

unchecked_narrow
public static NamingContext unchecked_narrow(Object obj)

"
NamingContextHelper,"write(OutputStream ostream, NamingContext value)",static void,NULL,"

write
public static void write(OutputStream ostream,
                         NamingContext value)

"
NamingContextHolder,_read(InputStream i),void,Reads data from istream and initalizes the value field of the Holder with the unmarshalled data.,"

_read
public void _read(InputStream i)
Description copied from interface: Streamable
Reads data from istream and initalizes the
 value field of the Holder with the unmarshalled data.

Specified by:
_read in interface Streamable
Parameters:
i - the InputStream that represents the CDR data from the wire.


"
NamingContextHolder,_type(),TypeCode,Retrieves the TypeCode object corresponding to the value in the value field of the Holder.,"

_type
public TypeCode _type()
Description copied from interface: Streamable
Retrieves the TypeCode object corresponding to the value
 in the value field of the Holder.

Specified by:
_type in interface Streamable
Returns:
the TypeCode object for the value held in the holder


"
NamingContextHolder,_write(OutputStream o),void,Marshals to ostream the value in the value field of the Holder.,"

_write
public void _write(OutputStream o)
Description copied from interface: Streamable
Marshals to ostream the value in the
 value field of the Holder.

Specified by:
_write in interface Streamable
Parameters:
o - the CDR OutputStream


"
NamingContextPOA,"_all_interfaces(POA poa, byte[] objectId)",String[],Used by the ORB to obtain complete type information from the servant.,"

_all_interfaces
public String[] _all_interfaces(POA poa,
                                byte[] objectId)
Description copied from class: Servant
Used by the ORB to obtain complete type
 information from the servant.

Specified by:
_all_interfaces in class Servant
Parameters:
poa - POA with which the servant is associated.
objectId - is the id corresponding to the object
         associated with this servant.
Returns:
list of type information for the object.


"
NamingContextPOA,"_invoke(String $method, InputStream in, ResponseHandler $rh)",OutputStream,Invoked by the ORB to dispatch a request to the servant.,"

_invoke
public OutputStream _invoke(String $method,
                            InputStream in,
                            ResponseHandler $rh)
Description copied from interface: InvokeHandler
Invoked by the ORB to dispatch a request to the servant.

 ORB passes the method name, an InputStream containing the
 marshalled arguments, and a ResponseHandler which the servant
 uses to construct a proper reply.

 Only CORBA SystemException may be thrown by this method.

 The method must return an OutputStream created by the
 ResponseHandler which contains the marshalled reply.

 A servant must not retain a reference to the ResponseHandler
 beyond the lifetime of a method invocation.

 Servant behaviour is defined as follows:
 1. Determine correct method, and unmarshal parameters from
    InputStream.
 2. Invoke method implementation.
 3. If no user exception, create a normal reply using
    ResponseHandler.
 4. If user exception occurred, create exception reply using
    ResponseHandler.
 5. Marshal reply into OutputStream returned by
    ResponseHandler.
 6. Return OutputStream to ORB.
 

Specified by:
_invoke in interface InvokeHandler
Parameters:
$method - The method name.
in - The InputStream containing the marshalled arguments.
$rh - The ResponseHandler which the servant uses
 to construct a proper reply
Returns:
The OutputStream created by the
 ResponseHandler which contains the marshalled reply


"
NamingContextPOA,_this(),NamingContext,NULL,"

_this
public NamingContext _this()

"
NamingContextPOA,_this(ORB orb),NamingContext,NULL,"

_this
public NamingContext _this(ORB orb)

"
