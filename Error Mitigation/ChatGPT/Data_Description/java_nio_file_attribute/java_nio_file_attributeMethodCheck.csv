Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AclEntry,1,UserPrincipal principal(),True,,"

principal
public UserPrincipal principal()
Returns the principal component.

Returns:
the principal component


"
0,AclEntry,2,Set<AclEntryPermission> permissions(),True,,"

permissions
public Set<AclEntryPermission> permissions()
Returns a copy of the permissions component.

  The returned set is a modifiable copy of the permissions.

Returns:
the permissions component


"
0,AclEntry,3,Set<AclEntryFlag> flags(),True,,"

flags
public Set<AclEntryFlag> flags()
Returns a copy of the flags component.

  The returned set is a modifiable copy of the flags.

Returns:
the flags component


"
0,AclEntry,4,AclEntryType type(),True,,"

type
public AclEntryType type()
Returns the ACL entry type.

Returns:
the ACL entry type


"
0,AclEntry,5,boolean isNegative(),False,,NULL
1,AclEntry.Builder,1,AclEntry.Builder setPrincipal(UserPrincipal principal),True,,"

setPrincipal
public AclEntry.Builder setPrincipal(UserPrincipal who)
Sets the principal component of this builder.

Parameters:
who - the principal component
Returns:
this builder


"
1,AclEntry.Builder,2,AclEntry.Builder setType(AclEntryType type),True,,"

setType
public AclEntry.Builder setType(AclEntryType type)
Sets the type component of this builder.

Parameters:
type - the component type
Returns:
this builder


"
1,AclEntry.Builder,3,AclEntry.Builder setPermissions(Set<AclEntryPermission> permissions),True,,"

setPermissions
public AclEntry.Builder setPermissions(Set<AclEntryPermission> perms)
Sets the permissions component of this builder. On return, the
 permissions component of this builder is a copy of the given set.

Parameters:
perms - the permissions component
Returns:
this builder
Throws:
ClassCastException - if the set contains elements that are not of type AclEntryPermission


"
1,AclEntry.Builder,4,AclEntry.Builder setFlags(Set<AclEntryFlag> flags),True,,"

setFlags
public AclEntry.Builder setFlags(Set<AclEntryFlag> flags)
Sets the flags component of this builder. On return, the flags
 component of this builder is a copy of the given set.

Parameters:
flags - the flags component
Returns:
this builder
Throws:
ClassCastException - if the set contains elements that are not of type AclEntryFlag


"
1,AclEntry.Builder,5,AclEntry build(),True,,"

build
public AclEntry build()
Constructs an AclEntry from the components of this builder.
 The type and who components are required to have been set in order
 to construct an AclEntry.

Returns:
a new ACL entry
Throws:
IllegalStateException - if the type or who component have not been set


"
2,FileTime,1,long to(TimeUnit unit),True,,"

to
public long to(TimeUnit unit)
Returns the value at the given unit of granularity.

  Conversion from a coarser granularity that would numerically overflow
 saturate to Long.MIN_VALUE if negative or Long.MAX_VALUE
 if positive.

Parameters:
unit - the unit of granularity for the return value
Returns:
value in the given unit of granularity, since the epoch
          since the epoch (1970-01-01T00:00:00Z); can be negative


"
2,FileTime,2,"FileTime from(long value, TimeUnit unit)",True,,"

from
public static FileTime from(long value,
                            TimeUnit unit)
Returns a FileTime representing a value at the given unit of
 granularity.

Parameters:
value - the value since the epoch (1970-01-01T00:00:00Z); can be
          negative
unit - the unit of granularity to interpret the value
Returns:
a FileTime representing the given value


"
2,FileTime,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Tests this FileTime for equality with the given object.

  The result is true if and only if the argument is not null and is a FileTime that represents the same time. This
 method satisfies the general contract of the Object.equals method.

Overrides:
equals in class Object
Parameters:
obj - the object to compare with
Returns:
true if, and only if, the given object is a FileTime that represents the same time
See Also:
Object.hashCode(), 
HashMap


"
2,FileTime,4,int compareTo(FileTime other),True,,"

compareTo
public int compareTo(FileTime other)
Compares the value of two FileTime objects for order.

Specified by:
compareTo in interface Comparable<FileTime>
Parameters:
other - the other FileTime to be compared
Returns:
0 if this FileTime is equal to other, a
          value less than 0 if this FileTime represents a time
          that is before other, and a value greater than 0 if this
          FileTime represents a time that is after other


"
2,FileTime,5,String toString(),True,,"

toString
public String toString()
Returns the string representation of this FileTime. The string
 is returned in the ISO 8601 format:
 
     YYYY-MM-DDThh:mm:ss[.s+]Z
 
 where ""[.s+]"" represents a dot followed by one of more digits
 for the decimal fraction of a second. It is only present when the decimal
 fraction of a second is not zero. For example, FileTime.fromMillis(1234567890000L).toString() yields ""2009-02-13T23:31:30Z"", and FileTime.fromMillis(1234567890123L).toString()
 yields ""2009-02-13T23:31:30.123Z"".

  A FileTime is primarily intended to represent the value of a
 file's time stamp. Where used to represent extreme values, where
 the year is less than ""0001"" or greater than ""9999"" then
 this method deviates from ISO 8601 in the same manner as the
 XML Schema
 language. That is, the year may be expanded to more than four digits
 and may be negative-signed. If more than four digits then leading zeros
 are not present. The year before ""0001"" is ""-0001"".

Overrides:
toString in class Object
Returns:
the string representation of this file time


"
3,PosixFilePermissions,1,Set<PosixFilePermission> fromString(String permissions),True,,"

fromString
public static Set<PosixFilePermission> fromString(String perms)
Returns the set of permissions corresponding to a given String
 representation.

  The perms parameter is a String representing the
 permissions. It has 9 characters that are interpreted as three sets of
 three. The first set refers to the owner's permissions; the next to the
 group permissions and the last to others. Within each set, the first
 character is 'r' to indicate permission to read, the second
 character is 'w' to indicate permission to write, and the third
 character is 'x' for execute permission. Where a permission is
 not set then the corresponding character is set to '-'.

  Usage Example:
 Suppose we require the set of permissions that indicate the owner has read,
 write, and execute permissions, the group has read and execute permissions
 and others have none.
 
   Set<PosixFilePermission> perms = PosixFilePermissions.fromString(""rwxr-x---"");
 

Parameters:
perms - string representing a set of permissions
Returns:
the resulting set of permissions
Throws:
IllegalArgumentException - if the string cannot be converted to a set of permissions
See Also:
toString(Set)


"
3,PosixFilePermissions,2,String toString(Set<PosixFilePermission> permissions),True,,"

toString
public static String toString(Set<PosixFilePermission> perms)
Returns the String representation of a set of permissions. It
 is guaranteed that the returned String can be parsed by the
 fromString(java.lang.String) method.

  If the set contains null or elements that are not of type
 PosixFilePermission then these elements are ignored.

Parameters:
perms - the set of permissions
Returns:
the string representation of the permission set


"
3,PosixFilePermissions,3,String getOwner(FileAttribute<?> attribute),False,,NULL
3,PosixFilePermissions,4,String getGroup(FileAttribute<?> attribute),False,,NULL
3,PosixFilePermissions,5,Set<PosixFilePermission> getPermissions(FileAttribute<?> attribute),False,,NULL
4,UserPrincipalLookupService,1,UserPrincipal lookupPrincipalByName(String name),True,,"

lookupPrincipalByName
public abstract UserPrincipal lookupPrincipalByName(String name)
                                             throws IOException
Lookup a user principal by name.

Parameters:
name - the string representation of the user principal to lookup
Returns:
a user principal
Throws:
UserPrincipalNotFoundException - the principal does not exist
IOException - if an I/O error occurs
SecurityException - In the case of the default provider, and a security manager is
          installed, it checks RuntimePermission(""lookupUserInformation"")


"
4,UserPrincipalLookupService,2,UserPrincipal lookupPrincipalByGroupName(String group),False,,NULL
4,UserPrincipalLookupService,3,"UserPrincipal lookupPrincipalByName(String name, String type)",False,,NULL
4,UserPrincipalLookupService,4,"UserPrincipal lookupPrincipalByGroupName(String group, String type)",False,,NULL
4,UserPrincipalLookupService,5,"UserPrincipal lookupPrincipalByGroupName(String group, String type, String domain)",False,,NULL
