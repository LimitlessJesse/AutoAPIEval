Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Activatable,1,Remote register(ActivationDesc desc),True,,"

register
public static Remote register(ActivationDesc desc)
                       throws UnknownGroupException,
                              ActivationException,
                              RemoteException
Register an object descriptor for an activatable remote
 object so that is can be activated on demand.

Parameters:
desc - the object's descriptor
Returns:
the stub for the activatable remote object
Throws:
UnknownGroupException - if group id in desc
 is not registered with the activation system
ActivationException - if activation system is not running
RemoteException - if remote call fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
0,Activatable,2,void unregister(ActivationID id),True,,"

unregister
public static void unregister(ActivationID id)
                       throws UnknownObjectException,
                              ActivationException,
                              RemoteException
Revokes previous registration for the activation descriptor
 associated with id. An object can no longer be
 activated via that id.

Parameters:
id - the object's activation identifier
Throws:
UnknownObjectException - if object (id) is unknown
ActivationException - if activation system is not running
RemoteException - if remote call to activation system fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
0,Activatable,3,"ActivationID exportObject(Remote obj, String location, MarshalledObject data, boolean restart)",False,,NULL
0,Activatable,4,"Remote activate(ActivationID id, boolean force)",False,,NULL
0,Activatable,5,"ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)",False,,NULL
1,ActivationDesc,1,String getClassName(),True,,"

getClassName
public String getClassName()
Returns the class name for the object specified by this
 descriptor.

Returns:
the class name
Since:
1.2


"
1,ActivationDesc,2,String getLocation(),True,,"

getLocation
public String getLocation()
Returns the code location for the object specified by
 this descriptor.

Returns:
the code location
Since:
1.2


"
1,ActivationDesc,3,String getCodebase(),False,,NULL
1,ActivationDesc,4,int getRestartMode(),False,,NULL
1,ActivationDesc,5,MarshalledObject getData(),False,,NULL
2,ActivationGroup,1,"void activeObject(ActivationID id, Remote obj)",True,,"

activeObject
public abstract void activeObject(ActivationID id,
                                  Remote obj)
                           throws ActivationException,
                                  UnknownObjectException,
                                  RemoteException
The group's activeObject method is called when an
 object is exported (either by Activatable object
 construction or an explicit call to
 Activatable.exportObject. The group must inform its
 ActivationMonitor that the object is active (via
 the monitor's activeObject method) if the group
 hasn't already done so.

Parameters:
id - the object's identifier
obj - the remote object implementation
Throws:
UnknownObjectException - if object is not registered
RemoteException - if call informing monitor fails
ActivationException - if group is inactive
Since:
1.2


"
2,ActivationGroup,2,"ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)",False,,NULL
2,ActivationGroup,3,ActivationGroupID getID(),False,,NULL
2,ActivationGroup,4,void inactiveObject(ActivationID id),False,,NULL
2,ActivationGroup,5,"void activeObject(ActivationID id, MarshalledObject<? extends Remote> mobj)",True,,"

activeObject
protected void activeObject(ActivationID id,
                            MarshalledObject<? extends Remote> mobj)
                     throws ActivationException,
                            UnknownObjectException,
                            RemoteException
This protected method is necessary for subclasses to
 make the activeObject callback to the group's
 monitor. The call is simply forwarded to the group's
 ActivationMonitor.

Parameters:
id - the object's identifier
mobj - a marshalled object containing the remote object's stub
Throws:
UnknownObjectException - if object is not registered
RemoteException - if call informing monitor fails
ActivationException - if an activation error occurs
Since:
1.2


"
3,ActivationGroup_Stub,1,"void activeObject(ActivationID id, Remote obj)",False,,NULL
3,ActivationGroup_Stub,2,"ActivationDesc setActivationDesc(ActivationID id, ActivationDesc desc)",False,,NULL
3,ActivationGroup_Stub,3,"ActivationGroupDesc setActivationGroupDesc(ActivationGroupID id, ActivationGroupDesc desc)",False,,NULL
3,ActivationGroup_Stub,4,ActivationGroupID getActivationGroupID(),False,,NULL
3,ActivationGroup_Stub,5,ActivationMonitor setActivationMonitor(ActivationMonitor monitor),False,,NULL
4,ActivationGroupDesc,1,"ActivationGroupDesc(java.rmi.activation.ActivationGroupID groupID, String className, String codebase, MarshalledObject data)",False,,NULL
4,ActivationGroupDesc,2,ActivationGroupDesc clone(),False,,NULL
4,ActivationGroupDesc,3,ActivationGroupDesc.CommandEnvironment getCommandEnvironment(),True,,"

getCommandEnvironment
public ActivationGroupDesc.CommandEnvironment getCommandEnvironment()
Returns the group's command-environment control object.

Returns:
the command-environment object, or null
Since:
1.2


"
4,ActivationGroupDesc,4,ActivationGroupDesc setCommandEnvironment(ActivationGroupDesc.CommandEnvironment env),False,,NULL
4,ActivationGroupDesc,5,ActivationGroupDesc setSystem(boolean system),False,,NULL
5,ActivationGroupDesc.CommandEnvironment,1,String getCommandPath(),True,,"

getCommandPath
public String getCommandPath()
Fetch the configured path-qualified java command name.

Returns:
the configured name, or null if configured to
 accept the default
Since:
1.2


"
5,ActivationGroupDesc.CommandEnvironment,2,String[] getCommandOptions(),True,,"

getCommandOptions
public String[] getCommandOptions()
Fetch the configured java command options.

Returns:
An array of the command options which will be passed
 to the new child command by rmid.
 Note that rmid may add other options before or after these
 options, or both.
 Never returns null.
Since:
1.2


"
5,ActivationGroupDesc.CommandEnvironment,3,void setCommandPath(String commandPath),False,,NULL
5,ActivationGroupDesc.CommandEnvironment,4,void setCommandOptions(String[] commandOptions),False,,NULL
5,ActivationGroupDesc.CommandEnvironment,5,ActivationGroupDesc.CommandEnvironment clone(),False,,NULL
6,ActivationGroupID,1,ActivationGroupID createGroupID(ActivationSystem system),False,,NULL
6,ActivationGroupID,2,ActivationGroupID currentGroupID(),False,,NULL
6,ActivationGroupID,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares two group identifiers for content equality.
 Returns true if both of the following conditions are true:
 1) the unique identifiers are equivalent (by content), and
 2) the activation system specified in each
    refers to the same remote object.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
6,ActivationGroupID,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hashcode for the group's identifier.  Two group
 identifiers that refer to the same remote group will have the
 same hash code.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
Since:
1.2
See Also:
Hashtable


"
6,ActivationGroupID,5,String toString(),False,,NULL
7,ActivationID,1,Remote activate(boolean force),True,,"

activate
public Remote activate(boolean force)
                throws ActivationException,
                       UnknownObjectException,
                       RemoteException
Activate the object for this id.

Parameters:
force - if true, forces the activator to contact the group
 when activating the object (instead of returning a cached reference);
 if false, returning a cached value is acceptable.
Returns:
the reference to the active remote object
Throws:
ActivationException - if activation fails
UnknownObjectException - if the object is unknown
RemoteException - if remote call fails
Since:
1.2


"
7,ActivationID,2,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares two activation ids for content equality.
 Returns true if both of the following conditions are true:
 1) the unique identifiers equivalent (by content), and
 2) the activator specified in each identifier
    refers to the same remote object.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
7,ActivationID,3,int hashCode(),True,,"

hashCode
public int hashCode()
Returns a hashcode for the activation id.  Two identifiers that
 refer to the same remote object will have the same hash code.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
Since:
1.2
See Also:
Hashtable


"
7,ActivationID,4,String toString(),False,,NULL
7,ActivationID,5,UID getUID(),False,,NULL
