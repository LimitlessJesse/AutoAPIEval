ClassName,Method,Return Type,Description,Full Description
Activatable,"exportObject(Remote obj, ActivationID id, int port)",static Remote,Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls.,"

exportObject
public static Remote exportObject(Remote obj,
                                  ActivationID id,
                                  int port)
                           throws RemoteException
Export the activatable remote object to the RMI runtime to make
 the object available to receive incoming calls. The object is
 exported on an anonymous port, if port is zero. 

 During activation, this exportObject method should
 be invoked explicitly by an ""activatable"" object, that does not
 extend the Activatable class. There is no need for objects
 that do extend the Activatable class to invoke this
 method directly because the object is exported during construction.

Parameters:
obj - the remote object implementation
id - the object's  activation identifier
port - the port on which the object is exported (an anonymous
 port is used if port=0)
Returns:
the stub for the activatable remote object
Throws:
RemoteException - if object export fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,"exportObject(Remote obj, ActivationID id, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)",static Remote,Export the activatable remote object to the RMI runtime to make the object available to receive incoming calls.,"

exportObject
public static Remote exportObject(Remote obj,
                                  ActivationID id,
                                  int port,
                                  RMIClientSocketFactory csf,
                                  RMIServerSocketFactory ssf)
                           throws RemoteException
Export the activatable remote object to the RMI runtime to make
 the object available to receive incoming calls. The object is
 exported on an anonymous port, if port is zero. 

 During activation, this exportObject method should
 be invoked explicitly by an ""activatable"" object, that does not
 extend the Activatable class. There is no need for objects
 that do extend the Activatable class to invoke this
 method directly because the object is exported during construction.

Parameters:
obj - the remote object implementation
id - the object's  activation identifier
port - the port on which the object is exported (an anonymous
 port is used if port=0)
csf - the client-side socket factory for making calls to the
 remote object
ssf - the server-side socket factory for receiving remote calls
Returns:
the stub for the activatable remote object
Throws:
RemoteException - if object export fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,"exportObject(Remote obj, String location, MarshalledObject<?> data, boolean restart, int port)",static ActivationID,"Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port.","

exportObject
public static ActivationID exportObject(Remote obj,
                                        String location,
                                        MarshalledObject<?> data,
                                        boolean restart,
                                        int port)
                                 throws ActivationException,
                                        RemoteException
Registers an activation descriptor (with the specified location,
 data, and restart mode) for the specified object, and exports that
 object with the specified port.

 Note: Using this method (as well as the
 Activatable constructors that both register and export
 an activatable remote object) is strongly discouraged because the
 actions of registering and exporting the remote object are
 not guaranteed to be atomic.  Instead, an application should
 register an activation descriptor and export a remote object
 separately, so that exceptions can be handled properly.

 This method invokes the exportObject method with the specified object, location, data,
 restart mode, and port, and null for both client and
 server socket factories, and then returns the resulting activation
 identifier.

Parameters:
obj - the object being exported
location - the object's code location
data - the object's bootstrapping data
restart - if true, the object is restarted (reactivated) when
 either the activator is restarted or the object's activation group
 is restarted after an unexpected crash; if false, the object is only
 activated on demand.  Specifying restart to be
 true does not force an initial immediate activation of
 a newly registered object;  initial activation is lazy.
port - the port on which the object is exported (an anonymous
 port is used if port=0)
Returns:
the activation identifier obtained from registering the
 descriptor, desc, with the activation system
 the wrong group
Throws:
ActivationException - if activation group is not active
RemoteException - if object registration or export fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,"exportObject(Remote obj, String location, MarshalledObject<?> data, boolean restart, int port, RMIClientSocketFactory csf, RMIServerSocketFactory ssf)",static ActivationID,"Registers an activation descriptor (with the specified location, data, and restart mode) for the specified object, and exports that object with the specified port, and the specified client and server socket factories.","

exportObject
public static ActivationID exportObject(Remote obj,
                                        String location,
                                        MarshalledObject<?> data,
                                        boolean restart,
                                        int port,
                                        RMIClientSocketFactory csf,
                                        RMIServerSocketFactory ssf)
                                 throws ActivationException,
                                        RemoteException
Registers an activation descriptor (with the specified location,
 data, and restart mode) for the specified object, and exports that
 object with the specified port, and the specified client and server
 socket factories.

 Note: Using this method (as well as the
 Activatable constructors that both register and export
 an activatable remote object) is strongly discouraged because the
 actions of registering and exporting the remote object are
 not guaranteed to be atomic.  Instead, an application should
 register an activation descriptor and export a remote object
 separately, so that exceptions can be handled properly.

 This method first registers an activation descriptor for the
 specified object as follows. It obtains the activation system by
 invoking the method ActivationGroup.getSystem.  This method then obtains an ActivationID for the object by invoking the activation system's
 registerObject method with
 an ActivationDesc constructed with the specified object's
 class name, and the specified location, data, and restart mode.  If
 an exception occurs obtaining the activation system or registering
 the activation descriptor, that exception is thrown to the caller.

 Next, this method exports the object by invoking the exportObject method with the specified remote object, the
 activation identifier obtained from registration, the specified
 port, and the specified client and server socket factories.  If an
 exception occurs exporting the object, this method attempts to
 unregister the activation identifier (obtained from registration) by
 invoking the activation system's unregisterObject method with the
 activation identifier.  If an exception occurs unregistering the
 identifier, that exception is ignored, and the original exception
 that occurred exporting the object is thrown to the caller.

 Finally, this method invokes the activeObject method on the activation
 group in this VM with the activation identifier and the specified
 remote object, and returns the activation identifier to the caller.

Parameters:
obj - the object being exported
location - the object's code location
data - the object's bootstrapping data
restart - if true, the object is restarted (reactivated) when
 either the activator is restarted or the object's activation group
 is restarted after an unexpected crash; if false, the object is only
 activated on demand.  Specifying restart to be
 true does not force an initial immediate activation of
 a newly registered object;  initial activation is lazy.
port - the port on which the object is exported (an anonymous
 port is used if port=0)
csf - the client-side socket factory for making calls to the
 remote object
ssf - the server-side socket factory for receiving remote calls
Returns:
the activation identifier obtained from registering the
 descriptor with the activation system
Throws:
ActivationException - if activation group is not active
RemoteException - if object registration or export fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,getID(),protected ActivationID,Returns the object's activation identifier.,"

getID
protected ActivationID getID()
Returns the object's activation identifier.  The method is
 protected so that only subclasses can obtain an object's
 identifier.

Returns:
the object's activation identifier
Since:
1.2


"
Activatable,inactive(ActivationID id),static boolean,Informs the system that the object with the corresponding activation id is currently inactive.,"

inactive
public static boolean inactive(ActivationID id)
                        throws UnknownObjectException,
                               ActivationException,
                               RemoteException
Informs the system that the object with the corresponding activation
 id is currently inactive. If the object is currently
 active, the object is ""unexported"" from the RMI runtime (only if
 there are no pending or in-progress calls)
 so the that it can no longer receive incoming calls. This call
 informs this VM's ActivationGroup that the object is inactive,
 that, in turn, informs its ActivationMonitor. If this call
 completes successfully, a subsequent activate request to the activator
 will cause the object to reactivate. The operation may still
 succeed if the object is considered active but has already
 unexported itself.

Parameters:
id - the object's activation identifier
Returns:
true if the operation succeeds (the operation will
 succeed if the object in currently known to be active and is
 either already unexported or is currently exported and has no
 pending/executing calls); false is returned if the object has
 pending/executing calls in which case it cannot be deactivated
Throws:
UnknownObjectException - if object is not known (it may
 already be inactive)
ActivationException - if group is not active
RemoteException - if call informing monitor fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,register(ActivationDesc desc),static Remote,Register an object descriptor for an activatable remote object so that is can be activated on demand.,"

register
public static Remote register(ActivationDesc desc)
                       throws UnknownGroupException,
                              ActivationException,
                              RemoteException
Register an object descriptor for an activatable remote
 object so that is can be activated on demand.

Parameters:
desc - the object's descriptor
Returns:
the stub for the activatable remote object
Throws:
UnknownGroupException - if group id in desc
 is not registered with the activation system
ActivationException - if activation system is not running
RemoteException - if remote call fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,"unexportObject(Remote obj, boolean force)",static boolean,"Remove the remote object, obj, from the RMI runtime.","

unexportObject
public static boolean unexportObject(Remote obj,
                                     boolean force)
                              throws NoSuchObjectException
Remove the remote object, obj, from the RMI runtime. If
 successful, the object can no longer accept incoming RMI calls.
 If the force parameter is true, the object is forcibly unexported
 even if there are pending calls to the remote object or the
 remote object still has calls in progress.  If the force
 parameter is false, the object is only unexported if there are
 no pending or in progress calls to the object.

Parameters:
obj - the remote object to be unexported
force - if true, unexports the object even if there are
 pending or in-progress calls; if false, only unexports the object
 if there are no pending or in-progress calls
Returns:
true if operation is successful, false otherwise
Throws:
NoSuchObjectException - if the remote object is not
 currently exported
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
Activatable,unregister(ActivationID id),static void,Revokes previous registration for the activation descriptor associated with id.,"

unregister
public static void unregister(ActivationID id)
                       throws UnknownObjectException,
                              ActivationException,
                              RemoteException
Revokes previous registration for the activation descriptor
 associated with id. An object can no longer be
 activated via that id.

Parameters:
id - the object's activation identifier
Throws:
UnknownObjectException - if object (id) is unknown
ActivationException - if activation system is not running
RemoteException - if remote call to activation system fails
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
ActivationDesc,equals(Object obj),boolean,Compares two activation descriptors for content equality.,"

equals
public boolean equals(Object obj)
Compares two activation descriptors for content equality.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
ActivationDesc,getClassName(),String,Returns the class name for the object specified by this descriptor.,"

getClassName
public String getClassName()
Returns the class name for the object specified by this
 descriptor.

Returns:
the class name
Since:
1.2


"
ActivationDesc,getData(),MarshalledObject<?>,"Returns a ""marshalled object"" containing intialization/activation data for the object specified by this descriptor.","

getData
public MarshalledObject<?> getData()
Returns a ""marshalled object"" containing intialization/activation
 data for the object specified by this descriptor.

Returns:
the object specific ""initialization"" data
Since:
1.2


"
ActivationDesc,getGroupID(),ActivationGroupID,Returns the group identifier for the object specified by this descriptor.,"

getGroupID
public ActivationGroupID getGroupID()
Returns the group identifier for the object specified by this
 descriptor. A group provides a way to aggregate objects into a
 single Java virtual machine. RMI creates/activates objects with
 the same groupID in the same virtual machine.

Returns:
the group identifier
Since:
1.2


"
ActivationDesc,getLocation(),String,Returns the code location for the object specified by this descriptor.,"

getLocation
public String getLocation()
Returns the code location for the object specified by
 this descriptor.

Returns:
the code location
Since:
1.2


"
ActivationDesc,getRestartMode(),boolean,"Returns the ""restart"" mode of the object associated with this activation descriptor.","

getRestartMode
public boolean getRestartMode()
Returns the ""restart"" mode of the object associated with
 this activation descriptor.

Returns:
true if the activatable object associated with this
 activation descriptor is restarted via the activation
 daemon when either the daemon comes up or the object's group
 is restarted after an unexpected crash; otherwise it returns false,
 meaning that the object is only activated on demand via a
 method call.  Note that if the restart mode is true, the
 activator does not force an initial immediate activation of
 a newly registered object;  initial activation is lazy.
Since:
1.2


"
ActivationDesc,hashCode(),int,Return the same hashCode for similar ActivationDescs.,"

hashCode
public int hashCode()
Return the same hashCode for similar ActivationDescs.

Overrides:
hashCode in class Object
Returns:
an integer
See Also:
Hashtable


"
ActivationGroup,"activeObject(ActivationID id, MarshalledObject<? extends Remote> mobj)",protected void,This protected method is necessary for subclasses to make the activeObject callback to the group's monitor.,"

activeObject
protected void activeObject(ActivationID id,
                            MarshalledObject<? extends Remote> mobj)
                     throws ActivationException,
                            UnknownObjectException,
                            RemoteException
This protected method is necessary for subclasses to
 make the activeObject callback to the group's
 monitor. The call is simply forwarded to the group's
 ActivationMonitor.

Parameters:
id - the object's identifier
mobj - a marshalled object containing the remote object's stub
Throws:
UnknownObjectException - if object is not registered
RemoteException - if call informing monitor fails
ActivationException - if an activation error occurs
Since:
1.2


"
ActivationGroup,"activeObject(ActivationID id, Remote obj)",abstract void,The group's activeObject method is called when an object is exported (either by Activatable object construction or an explicit call to Activatable.exportObject.,"

activeObject
public abstract void activeObject(ActivationID id,
                                  Remote obj)
                           throws ActivationException,
                                  UnknownObjectException,
                                  RemoteException
The group's activeObject method is called when an
 object is exported (either by Activatable object
 construction or an explicit call to
 Activatable.exportObject. The group must inform its
 ActivationMonitor that the object is active (via
 the monitor's activeObject method) if the group
 hasn't already done so.

Parameters:
id - the object's identifier
obj - the remote object implementation
Throws:
UnknownObjectException - if object is not registered
RemoteException - if call informing monitor fails
ActivationException - if group is inactive
Since:
1.2


"
ActivationGroup,"createGroup(ActivationGroupID id, ActivationGroupDesc desc, long incarnation)",static ActivationGroup,Create and set the activation group for the current VM.,"

createGroup
public static ActivationGroup createGroup(ActivationGroupID id,
                                          ActivationGroupDesc desc,
                                          long incarnation)
                                   throws ActivationException
Create and set the activation group for the current VM.  The
 activation group can only be set if it is not currently set.
 An activation group is set using the createGroup
 method when the Activator initiates the
 re-creation of an activation group in order to carry out
 incoming activate requests. A group must first be
 registered with the ActivationSystem before it can
 be created via this method.

 The group class specified by the
 ActivationGroupDesc must be a concrete subclass of
 ActivationGroup and have a public constructor that
 takes two arguments: the ActivationGroupID for the
 group and the MarshalledObject containing the
 group's initialization data (obtained from the
 ActivationGroupDesc.

 If the group class name specified in the
 ActivationGroupDesc is null, then
 this method will behave as if the group descriptor contained
 the name of the default activation group implementation class.

 Note that if your application creates its own custom
 activation group, a security manager must be set for that
 group.  Otherwise objects cannot be activated in the group.
 SecurityManager is set by default.

 If a security manager is already set in the group VM, this
 method first calls the security manager's
 checkSetFactory method.  This could result in a
 SecurityException. If your application needs to
 set a different security manager, you must ensure that the
 policy file specified by the group's
 ActivationGroupDesc grants the group the necessary
 permissions to set a new security manager.  (Note: This will be
 necessary if your group downloads and sets a security manager).

 After the group is created, the
 ActivationSystem is informed that the group is
 active by calling the activeGroup method which
 returns the ActivationMonitor for the group. The
 application need not call activeGroup
 independently since it is taken care of by this method.

 Once a group is created, subsequent calls to the
 currentGroupID method will return the identifier
 for this group until the group becomes inactive.

Parameters:
id - the activation group's identifier
desc - the activation group's descriptor
incarnation - the group's incarnation number (zero on group's
 initial creation)
Returns:
the activation group for the VM
Throws:
ActivationException - if group already exists or if error
 occurs during group creation
SecurityException - if permission to create group is denied.
 (Note: The default implementation of the security manager
 checkSetFactory
 method requires the RuntimePermission ""setFactory"")
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2
See Also:
SecurityManager.checkSetFactory()


"
ActivationGroup,currentGroupID(),static ActivationGroupID,Returns the current activation group's identifier.,"

currentGroupID
public static ActivationGroupID currentGroupID()
Returns the current activation group's identifier.  Returns null
 if no group is currently active for this VM.

Returns:
the activation group's identifier
Throws:
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2


"
ActivationGroup,getSystem(),static ActivationSystem,Returns the activation system for the VM.,"

getSystem
public static ActivationSystem getSystem()
                                  throws ActivationException
Returns the activation system for the VM. The activation system
 may be set by the setSystem method. If the
 activation system is not set via the setSystem
 method, then the getSystem method attempts to
 obtain a reference to the ActivationSystem by
 looking up the name ""java.rmi.activation.ActivationSystem"" in
 the Activator's registry. By default, the port number used to
 look up the activation system is defined by
 ActivationSystem.SYSTEM_PORT. This port can be
 overridden by setting the property
 java.rmi.activation.port.

Returns:
the activation system for the VM/group
Throws:
ActivationException - if activation system cannot be
  obtained or is not bound
 (means that it is not running)
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2
See Also:
setSystem(java.rmi.activation.ActivationSystem)


"
ActivationGroup,inactiveGroup(),protected void,This protected method is necessary for subclasses to make the inactiveGroup callback to the group's monitor.,"

inactiveGroup
protected void inactiveGroup()
                      throws UnknownGroupException,
                             RemoteException
This protected method is necessary for subclasses to
 make the inactiveGroup callback to the group's
 monitor. The call is simply forwarded to the group's
 ActivationMonitor. Also, the current group
 for the VM is set to null.

Throws:
UnknownGroupException - if group is not registered
RemoteException - if call informing monitor fails
Since:
1.2


"
ActivationGroup,inactiveObject(ActivationID id),boolean,The group's inactiveObject method is called indirectly via a call to the Activatable.inactive method.,"

inactiveObject
public boolean inactiveObject(ActivationID id)
                       throws ActivationException,
                              UnknownObjectException,
                              RemoteException
The group's inactiveObject method is called
 indirectly via a call to the Activatable.inactive
 method. A remote object implementation must call
 Activatable's inactive method when
 that object deactivates (the object deems that it is no longer
 active). If the object does not call
 Activatable.inactive when it deactivates, the
 object will never be garbage collected since the group keeps
 strong references to the objects it creates.

 The group's inactiveObject method unexports the
 remote object from the RMI runtime so that the object can no
 longer receive incoming RMI calls. An object will only be unexported
 if the object has no pending or executing calls.
 The subclass of ActivationGroup must override this
 method and unexport the object.

 After removing the object from the RMI runtime, the group
 must inform its ActivationMonitor (via the monitor's
 inactiveObject method) that the remote object is
 not currently active so that the remote object will be
 re-activated by the activator upon a subsequent activation
 request.

 This method simply informs the group's monitor that the object
 is inactive.  It is up to the concrete subclass of ActivationGroup
 to fulfill the additional requirement of unexporting the object. 

Parameters:
id - the object's activation identifier
Returns:
true if the object was successfully deactivated; otherwise
         returns false.
Throws:
UnknownObjectException - if object is unknown (may already
 be inactive)
RemoteException - if call informing monitor fails
ActivationException - if group is inactive
Since:
1.2


"
ActivationGroup,setSystem(ActivationSystem system),static void,Set the activation system for the VM.,"

setSystem
public static void setSystem(ActivationSystem system)
                      throws ActivationException
Set the activation system for the VM.  The activation system can
 only be set it if no group is currently active. If the activation
 system is not set via this call, then the getSystem
 method attempts to obtain a reference to the
 ActivationSystem by looking up the name
 ""java.rmi.activation.ActivationSystem"" in the Activator's
 registry. By default, the port number used to look up the
 activation system is defined by
 ActivationSystem.SYSTEM_PORT. This port can be overridden
 by setting the property java.rmi.activation.port.

 If there is a security manager, this method first
 calls the security manager's checkSetFactory method.
 This could result in a SecurityException.

Parameters:
system - remote reference to the ActivationSystem
Throws:
ActivationException - if activation system is already set
SecurityException - if permission to set the activation system is denied.
 (Note: The default implementation of the security manager
 checkSetFactory
 method requires the RuntimePermission ""setFactory"")
UnsupportedOperationException - if and only if activation is
 not supported by this implementation
Since:
1.2
See Also:
getSystem(), 
SecurityManager.checkSetFactory()


"
ActivationGroup_Stub,"newInstance(ActivationID id, ActivationDesc desc)",MarshalledObject,Stub method for ActivationGroup.newInstance.,"

newInstance
public MarshalledObject newInstance(ActivationID id,
                                    ActivationDesc desc)
                             throws RemoteException,
                                    ActivationException
Stub method for ActivationGroup.newInstance.  Invokes
 the invoke method on this instance's
 RemoteObject.ref field, with this as the
 first argument, a two-element Object[] as the second
 argument (with id as the first element and
 desc as the second element), and -5274445189091581345L
 as the third argument, and returns the result.  If that invocation
 throws a RuntimeException, RemoteException,
 or an ActivationException, then that exception is
 thrown to the caller.  If that invocation throws any other
 java.lang.Exception, then a
 java.rmi.UnexpectedException is thrown to the caller
 with the original exception as the cause.

Specified by:
newInstance in interface ActivationInstantiator
Parameters:
id - an activation identifier
desc - an activation descriptor
Returns:
the result of the invocation
Throws:
RemoteException - if invocation results in
          a RemoteException
ActivationException - if invocation
          results in an ActivationException


"
ActivationGroupDesc,equals(Object obj),boolean,Compares two activation group descriptors for content equality.,"

equals
public boolean equals(Object obj)
Compares two activation group descriptors for content equality.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
ActivationGroupDesc,getClassName(),String,Returns the group's class name (possibly null).,"

getClassName
public String getClassName()
Returns the group's class name (possibly null).  A
 null group class name indicates the system's default
 ActivationGroup implementation.

Returns:
the group's class name
Since:
1.2


"
ActivationGroupDesc,getCommandEnvironment(),ActivationGroupDesc.CommandEnvironment,Returns the group's command-environment control object.,"

getCommandEnvironment
public ActivationGroupDesc.CommandEnvironment getCommandEnvironment()
Returns the group's command-environment control object.

Returns:
the command-environment object, or null
Since:
1.2


"
ActivationGroupDesc,getData(),MarshalledObject<?>,Returns the group's initialization data.,"

getData
public MarshalledObject<?> getData()
Returns the group's initialization data.

Returns:
the group's initialization data
Since:
1.2


"
ActivationGroupDesc,getLocation(),String,Returns the group's code location.,"

getLocation
public String getLocation()
Returns the group's code location.

Returns:
the group's code location
Since:
1.2


"
ActivationGroupDesc,getPropertyOverrides(),Properties,Returns the group's property-override list.,"

getPropertyOverrides
public Properties getPropertyOverrides()
Returns the group's property-override list.

Returns:
the property-override list, or null
Since:
1.2


"
ActivationGroupDesc,hashCode(),int,Produce identical numbers for similar ActivationGroupDescs.,"

hashCode
public int hashCode()
Produce identical numbers for similar ActivationGroupDescs.

Overrides:
hashCode in class Object
Returns:
an integer
See Also:
Hashtable


"
ActivationGroupDesc.CommandEnvironment,equals(Object obj),boolean,Compares two command environments for content equality.,"

equals
public boolean equals(Object obj)
Compares two command environments for content equality.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
ActivationGroupDesc.CommandEnvironment,getCommandOptions(),String[],Fetch the configured java command options.,"

getCommandOptions
public String[] getCommandOptions()
Fetch the configured java command options.

Returns:
An array of the command options which will be passed
 to the new child command by rmid.
 Note that rmid may add other options before or after these
 options, or both.
 Never returns null.
Since:
1.2


"
ActivationGroupDesc.CommandEnvironment,getCommandPath(),String,Fetch the configured path-qualified java command name.,"

getCommandPath
public String getCommandPath()
Fetch the configured path-qualified java command name.

Returns:
the configured name, or null if configured to
 accept the default
Since:
1.2


"
ActivationGroupDesc.CommandEnvironment,hashCode(),int,Return identical values for similar CommandEnvironments.,"

hashCode
public int hashCode()
Return identical values for similar
 CommandEnvironments.

Overrides:
hashCode in class Object
Returns:
an integer
See Also:
Hashtable


"
ActivationGroupID,equals(Object obj),boolean,Compares two group identifiers for content equality.,"

equals
public boolean equals(Object obj)
Compares two group identifiers for content equality.
 Returns true if both of the following conditions are true:
 1) the unique identifiers are equivalent (by content), and
 2) the activation system specified in each
    refers to the same remote object.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
ActivationGroupID,getSystem(),ActivationSystem,Returns the group's activation system.,"

getSystem
public ActivationSystem getSystem()
Returns the group's activation system.

Returns:
the group's activation system
Since:
1.2


"
ActivationGroupID,hashCode(),int,Returns a hashcode for the group's identifier.,"

hashCode
public int hashCode()
Returns a hashcode for the group's identifier.  Two group
 identifiers that refer to the same remote group will have the
 same hash code.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
Since:
1.2
See Also:
Hashtable


"
ActivationID,activate(boolean force),Remote,Activate the object for this id.,"

activate
public Remote activate(boolean force)
                throws ActivationException,
                       UnknownObjectException,
                       RemoteException
Activate the object for this id.

Parameters:
force - if true, forces the activator to contact the group
 when activating the object (instead of returning a cached reference);
 if false, returning a cached value is acceptable.
Returns:
the reference to the active remote object
Throws:
ActivationException - if activation fails
UnknownObjectException - if the object is unknown
RemoteException - if remote call fails
Since:
1.2


"
ActivationID,equals(Object obj),boolean,Compares two activation ids for content equality.,"

equals
public boolean equals(Object obj)
Compares two activation ids for content equality.
 Returns true if both of the following conditions are true:
 1) the unique identifiers equivalent (by content), and
 2) the activator specified in each identifier
    refers to the same remote object.

Overrides:
equals in class Object
Parameters:
obj - the Object to compare with
Returns:
true if these Objects are equal; false otherwise.
Since:
1.2
See Also:
Hashtable


"
ActivationID,hashCode(),int,Returns a hashcode for the activation id.,"

hashCode
public int hashCode()
Returns a hashcode for the activation id.  Two identifiers that
 refer to the same remote object will have the same hash code.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
Since:
1.2
See Also:
Hashtable


"
