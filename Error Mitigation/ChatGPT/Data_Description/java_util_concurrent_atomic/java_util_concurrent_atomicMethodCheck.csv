Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AtomicBoolean,1,"boolean compareAndSet(boolean expect, boolean update)",True,,"

compareAndSet
public final boolean compareAndSet(boolean expect,
                                   boolean update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
0,AtomicBoolean,2,boolean get(),True,,"

get
public final boolean get()
Returns the current value.

Returns:
the current value


"
0,AtomicBoolean,3,void set(boolean newValue),True,,"

set
public final void set(boolean newValue)
Unconditionally sets to the given value.

Parameters:
newValue - the new value


"
0,AtomicBoolean,4,boolean getAndSet(boolean newValue),True,,"

getAndSet
public final boolean getAndSet(boolean newValue)
Atomically sets to the given value and returns the previous value.

Parameters:
newValue - the new value
Returns:
the previous value


"
0,AtomicBoolean,5,"boolean weakCompareAndSet(boolean expect, boolean update)",True,,"

weakCompareAndSet
public boolean weakCompareAndSet(boolean expect,
                                 boolean update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
2,AtomicIntegerArray,1,int get(int i),True,,"

get
public final int get(int i)
Gets the current value at position i.

Parameters:
i - the index
Returns:
the current value


"
2,AtomicIntegerArray,2,"void set(int i, int newValue)",True,,"

set
public final void set(int i,
                      int newValue)
Sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value


"
2,AtomicIntegerArray,3,int length(),True,,"

length
public final int length()
Returns the length of the array.

Returns:
the length of the array


"
2,AtomicIntegerArray,4,"boolean compareAndSet(int i, int expect, int update)",True,,"

compareAndSet
public final boolean compareAndSet(int i,
                                   int expect,
                                   int update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
2,AtomicIntegerArray,5,int incrementAndGet(int i),True,,"

incrementAndGet
public final int incrementAndGet(int i)
Atomically increments by one the element at index i.

Parameters:
i - the index
Returns:
the updated value


"
3,AtomicIntegerFieldUpdater,1,"int getAndAdd(Object obj, int delta)",False,,NULL
3,AtomicIntegerFieldUpdater,2,int getAndIncrement(Object obj),False,,NULL
3,AtomicIntegerFieldUpdater,3,"int getAndSet(Object obj, int newValue)",False,,NULL
3,AtomicIntegerFieldUpdater,4,"boolean compareAndSet(Object obj, int expect, int update)",False,,NULL
3,AtomicIntegerFieldUpdater,5,int get(Object obj),False,,NULL
4,AtomicLong,1,long get(),True,,"

get
public final long get()
Gets the current value.

Returns:
the current value


"
4,AtomicLong,2,void set(long newValue),True,,"

set
public final void set(long newValue)
Sets to the given value.

Parameters:
newValue - the new value


"
4,AtomicLong,3,long incrementAndGet(),True,,"

incrementAndGet
public final long incrementAndGet()
Atomically increments by one the current value.

Returns:
the updated value


"
4,AtomicLong,4,long decrementAndGet(),True,,"

decrementAndGet
public final long decrementAndGet()
Atomically decrements by one the current value.

Returns:
the updated value


"
4,AtomicLong,5,long getAndAdd(long delta),True,,"

getAndAdd
public final long getAndAdd(long delta)
Atomically adds the given value to the current value.

Parameters:
delta - the value to add
Returns:
the previous value


"
5,AtomicLongArray,1,int length(),True,,"

length
public final int length()
Returns the length of the array.

Returns:
the length of the array


"
5,AtomicLongArray,2,long get(int i),True,,"

get
public final long get(int i)
Gets the current value at position i.

Parameters:
i - the index
Returns:
the current value


"
5,AtomicLongArray,3,"void set(int i, long newValue)",True,,"

set
public final void set(int i,
                      long newValue)
Sets the element at position i to the given value.

Parameters:
i - the index
newValue - the new value


"
5,AtomicLongArray,4,"boolean compareAndSet(int i, long expect, long update)",True,,"

compareAndSet
public final boolean compareAndSet(int i,
                                   long expect,
                                   long update)
Atomically sets the element at position i to the given
 updated value if the current value == the expected value.

Parameters:
i - the index
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
5,AtomicLongArray,5,"long getAndAdd(int i, long delta)",True,,"

getAndAdd
public final long getAndAdd(int i,
                            long delta)
Atomically adds the given value to the element at index i.

Parameters:
i - the index
delta - the value to add
Returns:
the previous value


"
6,AtomicLongFieldUpdater,1,long get(Object obj),False,,NULL
6,AtomicLongFieldUpdater,2,"void set(Object obj, long newValue)",False,,NULL
6,AtomicLongFieldUpdater,3,"long getAndSet(Object obj, long newValue)",False,,NULL
6,AtomicLongFieldUpdater,4,"boolean compareAndSet(Object obj, long expect, long update)",False,,NULL
6,AtomicLongFieldUpdater,5,long getAndIncrement(Object obj),False,,NULL
7,AtomicMarkableReference,1,"boolean attemptMark(Object expectedReference, boolean newMark)",False,,NULL
7,AtomicMarkableReference,2,"boolean compareAndSet(Object expectedReference, Object newReference, boolean expectedMark, boolean newMark)",False,,NULL
7,AtomicMarkableReference,3,Object getReference(),False,,NULL
7,AtomicMarkableReference,4,boolean isMarked(),True,,"

isMarked
public boolean isMarked()
Returns the current value of the mark.

Returns:
the current value of the mark


"
7,AtomicMarkableReference,5,"void set(Object newReference, boolean newMark)",False,,NULL
8,AtomicReference,1,void set(V newValue),True,,"

set
public final void set(V newValue)
Sets to the given value.

Parameters:
newValue - the new value


"
8,AtomicReference,2,V get(),True,,"

get
public final V get()
Gets the current value.

Returns:
the current value


"
8,AtomicReference,3,"boolean compareAndSet(V expect, V update)",True,,"

compareAndSet
public final boolean compareAndSet(V expect,
                                   V update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful. False return indicates that
 the actual value was not equal to the expected value.


"
8,AtomicReference,4,V getAndSet(V newValue),True,,"

getAndSet
public final V getAndSet(V newValue)
Atomically sets to the given value and returns the old value.

Parameters:
newValue - the new value
Returns:
the previous value


"
8,AtomicReference,5,"boolean weakCompareAndSet(V expect, V update)",True,,"

weakCompareAndSet
public final boolean weakCompareAndSet(V expect,
                                       V update)
Atomically sets the value to the given updated value
 if the current value == the expected value.

 May fail
 spuriously and does not provide ordering guarantees, so is
 only rarely an appropriate alternative to compareAndSet.

Parameters:
expect - the expected value
update - the new value
Returns:
true if successful


"
10,AtomicReferenceFieldUpdater,1,"void compareAndSet(Object obj, V expect, V update)",False,,NULL
10,AtomicReferenceFieldUpdater,2,V get(Object obj),False,,NULL
10,AtomicReferenceFieldUpdater,3,"void lazySet(Object obj, V newValue)",False,,NULL
10,AtomicReferenceFieldUpdater,4,"void set(Object obj, V newValue)",False,,NULL
10,AtomicReferenceFieldUpdater,5,"boolean weakCompareAndSet(Object obj, V expect, V update)",False,,NULL
11,AtomicStampedReference,1,"boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",True,,"

compareAndSet
public boolean compareAndSet(V expectedReference,
                             V newReference,
                             int expectedStamp,
                             int newStamp)
Atomically sets the value of both the reference and stamp
 to the given update values if the
 current reference is == to the expected reference
 and the current stamp is equal to the expected stamp.

Parameters:
expectedReference - the expected value of the reference
newReference - the new value for the reference
expectedStamp - the expected value of the stamp
newStamp - the new value for the stamp
Returns:
true if successful


"
11,AtomicStampedReference,2,V getReference(),True,,"

getReference
public V getReference()
Returns the current value of the reference.

Returns:
the current value of the reference


"
11,AtomicStampedReference,3,int getStamp(),True,,"

getStamp
public int getStamp()
Returns the current value of the stamp.

Returns:
the current value of the stamp


"
11,AtomicStampedReference,4,"void set(V newReference, int newStamp)",True,,"

set
public void set(V newReference,
                int newStamp)
Unconditionally sets the value of both the reference and stamp.

Parameters:
newReference - the new value for the reference
newStamp - the new value for the stamp


"
11,AtomicStampedReference,5,String toString(),False,,NULL
12,DoubleAccumulator,1,void accumulate(double x),True,,"

accumulate
public void accumulate(double x)
Updates with the given value.

Parameters:
x - the value


"
12,DoubleAccumulator,2,double get(),True,,"

get
public double get()
Returns the current value.  The returned value is NOT
 an atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the value is being calculated might not be
 incorporated.

Returns:
the current value


"
12,DoubleAccumulator,3,void reset(),True,,"

reset
public void reset()
Resets variables maintaining updates to the identity value.
 This method may be a useful alternative to creating a new
 updater, but is only effective if there are no concurrent
 updates.  Because this method is intrinsically racy, it should
 only be used when it is known that no threads are concurrently
 updating.

"
12,DoubleAccumulator,4,double getThenReset(),True,,"

getThenReset
public double getThenReset()
Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the value before reset


"
12,DoubleAccumulator,5,"void accumulateAndGet(double x, DoubleBinaryOperator accumulatorFunction)",False,,NULL
13,DoubleAdder,1,void add(double x),True,,"

add
public void add(double x)
Adds the given value.

Parameters:
x - the value to add


"
13,DoubleAdder,2,void increment(),False,,NULL
13,DoubleAdder,3,void sumThenReset(),False,,NULL
13,DoubleAdder,4,double sum(),True,,"

sum
public double sum()
Returns the current sum.  The returned value is NOT an
 atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the sum is being calculated might not be
 incorporated.  Also, because floating-point arithmetic is not
 strictly associative, the returned result need not be identical
 to the value that would be obtained in a sequential series of
 updates to a single variable.

Returns:
the sum


"
13,DoubleAdder,5,void reset(),True,,"

reset
public void reset()
Resets variables maintaining the sum to zero.  This method may
 be a useful alternative to creating a new adder, but is only
 effective if there are no concurrent updates.  Because this
 method is intrinsically racy, it should only be used when it is
 known that no threads are concurrently updating.

"
14,LongAccumulator,1,void accumulate(long x),True,,"

accumulate
public void accumulate(long x)
Updates with the given value.

Parameters:
x - the value


"
14,LongAccumulator,2,long get(),True,,"

get
public long get()
Returns the current value.  The returned value is NOT
 an atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the value is being calculated might not be
 incorporated.

Returns:
the current value


"
14,LongAccumulator,3,void reset(),True,,"

reset
public void reset()
Resets variables maintaining updates to the identity value.
 This method may be a useful alternative to creating a new
 updater, but is only effective if there are no concurrent
 updates.  Because this method is intrinsically racy, it should
 only be used when it is known that no threads are concurrently
 updating.

"
14,LongAccumulator,4,long getThenReset(),True,,"

getThenReset
public long getThenReset()
Equivalent in effect to get() followed by reset(). This method may apply for example during quiescent
 points between multithreaded computations.  If there are
 updates concurrent with this method, the returned value is
 not guaranteed to be the final value occurring before
 the reset.

Returns:
the value before reset


"
14,LongAccumulator,5,"void accumulate(long x, LongBinaryOperator accumulatorFunction)",False,,NULL
15,LongAdder,1,void add(long x),True,,"

add
public void add(long x)
Adds the given value.

Parameters:
x - the value to add


"
15,LongAdder,2,void increment(),True,,"

increment
public void increment()
Equivalent to add(1).

"
15,LongAdder,3,void decrement(),True,,"

decrement
public void decrement()
Equivalent to add(-1).

"
15,LongAdder,4,long sum(),True,,"

sum
public long sum()
Returns the current sum.  The returned value is NOT an
 atomic snapshot; invocation in the absence of concurrent
 updates returns an accurate result, but concurrent updates that
 occur while the sum is being calculated might not be
 incorporated.

Returns:
the sum


"
15,LongAdder,5,void reset(),True,,"

reset
public void reset()
Resets variables maintaining the sum to zero.  This method may
 be a useful alternative to creating a new adder, but is only
 effective if there are no concurrent updates.  Because this
 method is intrinsically racy, it should only be used when it is
 known that no threads are concurrently updating.

"
