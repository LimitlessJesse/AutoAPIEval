Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractRegionPainter,1,"void fillBackground(Graphics2D g, JComponent c, int x, int y, int width, int height)",False,,NULL
0,AbstractRegionPainter,2,"void fillBackground(Graphics2D g, JComponent c, int x, int y, int width, int height, boolean isPressed, boolean isFocused, boolean isDefault)",False,,NULL
0,AbstractRegionPainter,3,"void paint(Graphics2D g, JComponent c, int x, int y, int width, int height)",False,,NULL
0,AbstractRegionPainter,4,"void paint(Graphics2D g, JComponent c, int x, int y, int width, int height, boolean isPressed, boolean isFocused, boolean isDefault)",False,,NULL
0,AbstractRegionPainter,5,"void paint(Graphics2D g, JComponent c, int x, int y, int width, int height, Map<String, Object> map)",False,,NULL
1,AbstractRegionPainter.PaintContext,1,Rectangle getBounds(),False,,NULL
1,AbstractRegionPainter.PaintContext,2,Paint getPaint(),False,,NULL
1,AbstractRegionPainter.PaintContext,3,Shape getComponentState(),False,,NULL
1,AbstractRegionPainter.PaintContext,4,int getComponentState(int state),False,,NULL
1,AbstractRegionPainter.PaintContext,5,int getExtendedState(),False,,NULL
2,NimbusLookAndFeel,1,void initialize(),True,,"

initialize
public void initialize()
Called by UIManager when this look and feel is installed.

Overrides:
initialize in class SynthLookAndFeel
See Also:
LookAndFeel.uninitialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
2,NimbusLookAndFeel,2,void uninitialize(),True,,"

uninitialize
public void uninitialize()
Called by UIManager when this look and feel is uninstalled.

Overrides:
uninitialize in class SynthLookAndFeel
See Also:
LookAndFeel.initialize(), 
UIManager.setLookAndFeel(javax.swing.LookAndFeel)


"
2,NimbusLookAndFeel,3,UIDefaults getDefaults(),True,,"

getDefaults
public UIDefaults getDefaults()
Returns the defaults for this SynthLookAndFeel.

Overrides:
getDefaults in class SynthLookAndFeel
Returns:
Defaults table.
See Also:
BasicLookAndFeel.initClassDefaults(javax.swing.UIDefaults), 
BasicLookAndFeel.initSystemColorDefaults(javax.swing.UIDefaults), 
BasicLookAndFeel.initComponentDefaults(javax.swing.UIDefaults)


"
2,NimbusLookAndFeel,4,String getID(),True,,"

getID
public String getID()
Return a string that identifies this look and feel. This String will
 be the unquoted String ""Nimbus"".

Overrides:
getID in class SynthLookAndFeel
Returns:
a short string identifying this look and feel.


"
2,NimbusLookAndFeel,5,String getName(),True,,"

getName
public String getName()
Return a short string that identifies this look and feel. This
 String will be the unquoted String ""Nimbus"".

Overrides:
getName in class SynthLookAndFeel
Returns:
a short string identifying this look and feel.


"
3,NimbusStyle,1,SynthPainter getPainter(),False,,NULL
3,NimbusStyle,2,"SynthContext getContext(JComponent c, Region region)",False,,NULL
3,NimbusStyle,3,"Color getColor(SynthContext context, ColorType type)",False,,NULL
3,NimbusStyle,4,Font getFont(SynthContext context),False,,NULL
3,NimbusStyle,5,"Insets getInsets(SynthContext context, Insets insets)",True,,"

getInsets
public Insets getInsets(SynthContext ctx,
                        Insets in)
Returns the Insets that are used to calculate sizing information.

 Overridden to cause this style to populate itself with data from
 UIDefaults, if necessary.

Overrides:
getInsets in class SynthStyle
Parameters:
ctx - SynthContext identifying requester
in - Insets to place return value in.
Returns:
Sizing Insets.


"
4,State,1,State getState(),False,,NULL
4,State,2,String getName(),False,,NULL
4,State,3,int getSpecificity(),False,,NULL
4,State,4,boolean isInState(JComponent c),False,,NULL
4,State,5,String toString(),True,,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
