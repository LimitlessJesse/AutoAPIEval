Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
1,DragGestureEvent,1,InputEvent getTriggerEvent(),True,,"

getTriggerEvent
public InputEvent getTriggerEvent()
Returns the initial event that triggered the gesture.
 

Returns:
the first ""triggering"" event in the sequence of the gesture


"
1,DragGestureEvent,2,Component getComponent(),True,,"

getComponent
public Component getComponent()
Returns the Component associated
 with this DragGestureEvent.
 

Returns:
the Component


"
1,DragGestureEvent,3,DragSource getDragSource(),True,,"

getDragSource
public DragSource getDragSource()
Returns the DragSource.
 

Returns:
the DragSource


"
1,DragGestureEvent,4,DragGestureRecognizer getSourceAsDragGestureRecognizer(),True,,"

getSourceAsDragGestureRecognizer
public DragGestureRecognizer getSourceAsDragGestureRecognizer()
Returns the source as a DragGestureRecognizer.
 

Returns:
the source as a DragGestureRecognizer


"
1,DragGestureEvent,5,"void startDrag(Cursor dragCursor, Transferable transferable)",True,,"

startDrag
public void startDrag(Cursor dragCursor,
                      Transferable transferable)
               throws InvalidDnDOperationException
Starts the drag operation given the Cursor for this drag
 operation and the Transferable representing the source data
 for this drag operation.
 
 If a null Cursor is specified no exception will
 be thrown and default drag cursors will be used instead.
 
 If a null Transferable is specified
 NullPointerException will be thrown.

Parameters:
dragCursor - The initial Cursor for this drag operation
                       or null for the default cursor handling;
                       see
                       DragSourceContext
                       for more details on the cursor handling mechanism
                       during drag and drop
transferable - The Transferable representing the source
                     data for this drag operation.
Throws:
InvalidDnDOperationException - if the Drag and Drop
         system is unable to initiate a drag operation, or if the user
         attempts to start a drag while an existing drag operation is
         still executing.
NullPointerException - if the Transferable is null
Since:
1.4


"
2,DragGestureRecognizer,1,void registerListeners(),True,,"

registerListeners
protected abstract void registerListeners()
register this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

"
2,DragGestureRecognizer,2,void unregisterListeners(),True,,"

unregisterListeners
protected abstract void unregisterListeners()
unregister this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

"
2,DragGestureRecognizer,3,void setComponent(Component c),True,,"

setComponent
public void setComponent(Component c)
set the Component that the DragGestureRecognizer is associated with

 registerListeners() and unregisterListeners() are called as a side
 effect as appropriate.
 

Parameters:
c - The Component or null


"
2,DragGestureRecognizer,4,void setSourceActions(int actions),True,,"

setSourceActions
public void setSourceActions(int actions)
This method sets the permitted source drag action(s)
 for this Drag and Drop operation.
 

Parameters:
actions - the permitted source drag action(s)


"
2,DragGestureRecognizer,5,void setTriggerEvent(InputEvent e),False,,NULL
3,DragSource,1,void startDrag(DragGestureEvent dge),False,,NULL
3,DragSource,2,void addDragSourceListener(DragSourceListener dsl),True,,"

addDragSourceListener
public void addDragSourceListener(DragSourceListener dsl)
Adds the specified DragSourceListener to this
 DragSource to receive drag source events during drag
 operations intiated with this DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.

Parameters:
dsl - the DragSourceListener to add
Since:
1.4
See Also:
removeDragSourceListener(java.awt.dnd.DragSourceListener), 
getDragSourceListeners()


"
3,DragSource,3,void removeDragSourceListener(DragSourceListener dsl),True,,"

removeDragSourceListener
public void removeDragSourceListener(DragSourceListener dsl)
Removes the specified DragSourceListener from this
 DragSource.
 If a null listener is specified, no action is taken and no
 exception is thrown.
 If the listener specified by the argument was not previously added to
 this DragSource, no action is taken and no exception
 is thrown.

Parameters:
dsl - the DragSourceListener to remove
Since:
1.4
See Also:
addDragSourceListener(java.awt.dnd.DragSourceListener), 
getDragSourceListeners()


"
3,DragSource,4,void setCursor(Cursor c),False,,NULL
3,DragSource,5,void setDragSourceContext(DragSourceContext dsc),False,,NULL
4,DragSourceAdapter,1,void dragEnter(DragSourceDragEvent dsde),True,,"

dragEnter
public void dragEnter(DragSourceDragEvent dsde)
Called as the cursor's hotspot enters a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot enters the operable part of
 a platform-dependent drop site.
 The drop site is active.
 The drop site accepts the drag.
 

Specified by:
dragEnter in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,2,void dragOver(DragSourceDragEvent dsde),True,,"

dragOver
public void dragOver(DragSourceDragEvent dsde)
Called as the cursor's hotspot moves over a platform-dependent drop site.
 This method is invoked when all the following conditions are true:
 
The cursor's hotspot has moved, but still intersects the
 operable part of the drop site associated with the previous
 dragEnter() invocation.
 The drop site is still active.
 The drop site accepts the drag.
 

Specified by:
dragOver in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,3,void dropActionChanged(DragSourceDragEvent dsde),True,,"

dropActionChanged
public void dropActionChanged(DragSourceDragEvent dsde)
Called when the user has modified the drop gesture.
 This method is invoked when the state of the input
 device(s) that the user is interacting with changes.
 Such devices are typically the mouse buttons or keyboard
 modifiers that the user is interacting with.

Specified by:
dropActionChanged in interface DragSourceListener
Parameters:
dsde - the DragSourceDragEvent


"
4,DragSourceAdapter,4,void dragExit(DragSourceEvent dse),True,,"

dragExit
public void dragExit(DragSourceEvent dse)
Called as the cursor's hotspot exits a platform-dependent drop site.
 This method is invoked when any of the following conditions are true:
 
The cursor's hotspot no longer intersects the operable part
 of the drop site associated with the previous dragEnter() invocation.
 
 OR
 
The drop site associated with the previous dragEnter() invocation
 is no longer active.
 
 OR
 
 The drop site associated with the previous dragEnter() invocation
 has rejected the drag.
 

Specified by:
dragExit in interface DragSourceListener
Parameters:
dse - the DragSourceEvent


"
4,DragSourceAdapter,5,void dragDropEnd(DragSourceDropEvent dsde),True,,"

dragDropEnd
public void dragDropEnd(DragSourceDropEvent dsde)
This method is invoked to signify that the Drag and Drop
 operation is complete. The getDropSuccess() method of
 the DragSourceDropEvent can be used to
 determine the termination state. The getDropAction() method
 returns the operation that the drop site selected
 to apply to the Drop operation. Once this method is complete, the
 current DragSourceContext and
 associated resources become invalid.

Specified by:
dragDropEnd in interface DragSourceListener
Parameters:
dsde - the DragSourceDropEvent


"
5,DragSourceContext,1,"void startDrag(DragGestureEvent dge, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl)",False,,NULL
5,DragSourceContext,2,void addDragSourceListener(DragSourceListener dsl),True,,"

addDragSourceListener
public void addDragSourceListener(DragSourceListener dsl)
                           throws TooManyListenersException
Add a DragSourceListener to this
 DragSourceContext if one has not already been added.
 If a DragSourceListener already exists,
 this method throws a TooManyListenersException.
 

Parameters:
dsl - the DragSourceListener to add.
 Note that while null is not prohibited,
 it is not acceptable as a parameter.
 
Throws:
TooManyListenersException - if
 a DragSourceListener has already been added


"
5,DragSourceContext,3,void removeDragSourceListener(DragSourceListener dsl),True,,"

removeDragSourceListener
public void removeDragSourceListener(DragSourceListener dsl)
Removes the specified DragSourceListener
 from  this DragSourceContext.

Parameters:
dsl - the DragSourceListener to remove;
     note that while null is not prohibited,
     it is not acceptable as a parameter


"
5,DragSourceContext,4,void setCursor(Cursor cursor),True,,"

setCursor
public void setCursor(Cursor c)
Sets the cursor for this drag operation to the specified
 Cursor.  If the specified Cursor
 is null, the default drag cursor behavior is
 activated for this drag operation, otherwise it is deactivated.

Parameters:
c - the initial Cursor for this drag operation,
                       or null for the default cursor handling;
                       see class
                       level documentation for more details
                       on the cursor handling during drag and drop


"
5,DragSourceContext,5,void transferablesFlavorsChanged(),True,,"

transferablesFlavorsChanged
public void transferablesFlavorsChanged()
Notifies the peer that the Transferable's
 DataFlavors have changed.

"
6,DragSourceDragEvent,1,int getX(),False,,NULL
6,DragSourceDragEvent,2,int getY(),False,,NULL
6,DragSourceDragEvent,3,int getTargetActions(),True,,"

getTargetActions
public int getTargetActions()
This method returns the target drop action.

Returns:
the target drop action.


"
6,DragSourceDragEvent,4,DragSourceContext getDragSourceContext(),False,,NULL
6,DragSourceDragEvent,5,int getGestureModifiers(),True,,"

getGestureModifiers
public int getGestureModifiers()
This method returns an int representing
 the current state of the input device modifiers
 associated with the user's gesture. Typically these
 would be mouse buttons or keyboard modifiers.
 
 If the modifiers passed to the constructor
 are invalid, this method returns them unchanged.

Returns:
the current state of the input device modifiers


"
8,DragSourceEvent,1,void startDrag(DragGestureEvent trigger),False,,NULL
8,DragSourceEvent,2,void dragEnter(DragSourceDragEvent dsde),False,,NULL
8,DragSourceEvent,3,void dragOver(DragSourceDragEvent dsde),False,,NULL
8,DragSourceEvent,4,void dragExit(DragSourceEvent dse),False,,NULL
8,DragSourceEvent,5,void dropActionChanged(DragSourceDragEvent dsde),False,,NULL
9,DropTarget,1,void addDropTargetListener(DropTargetListener dtl),True,,"

addDropTargetListener
public void addDropTargetListener(DropTargetListener dtl)
                           throws TooManyListenersException
Adds a new DropTargetListener (UNICAST SOURCE).
 

Parameters:
dtl - The new DropTargetListener

Throws:
TooManyListenersException - if a
 DropTargetListener is already added to this
 DropTarget.


"
9,DropTarget,2,void removeDropTargetListener(DropTargetListener dtl),True,,"

removeDropTargetListener
public void removeDropTargetListener(DropTargetListener dtl)
Removes the current DropTargetListener (UNICAST SOURCE).
 

Parameters:
dtl - the DropTargetListener to deregister.


"
9,DropTarget,3,void setComponent(Component c),True,,"

setComponent
public void setComponent(Component c)
Note: this interface is required to permit the safe association
 of a DropTarget with a Component in one of two ways, either:
  component.setDropTarget(droptarget); 
 or  droptarget.setComponent(component); 

 The Component will receive drops only if it is enabled.

Parameters:
c - The new Component this DropTarget
 is to be associated with.


"
9,DropTarget,4,void setDefaultActions(int ops),True,,"

setDefaultActions
public void setDefaultActions(int ops)
Sets the default acceptable actions for this DropTarget


Parameters:
ops - the default actions
See Also:
DnDConstants


"
9,DropTarget,5,void setActive(boolean isActive),True,,"

setActive
public void setActive(boolean isActive)
Sets the DropTarget active if true,
 inactive if false.
 

Parameters:
isActive - sets the DropTarget (in)active.


"
10,DropTarget.DropTargetAutoScroller,1,void stop(),True,,"

stop
protected void stop()
cause autoscrolling to stop

"
10,DropTarget.DropTargetAutoScroller,2,void updatePoint(Point p),False,,NULL
10,DropTarget.DropTargetAutoScroller,3,"void updateRegion(Rectangle r, Point p)",False,,NULL
10,DropTarget.DropTargetAutoScroller,4,void updateVisibleRegion(Rectangle r),False,,NULL
10,DropTarget.DropTargetAutoScroller,5,void updateWindow(Point p),False,,NULL
11,DropTargetAdapter,1,void dragEnter(DropTargetDragEvent dtde),True,,"

dragEnter
public void dragEnter(DropTargetDragEvent dtde)
Called while a drag operation is ongoing, when the mouse pointer enters
 the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragEnter in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
11,DropTargetAdapter,2,void dragOver(DropTargetDragEvent dtde),True,,"

dragOver
public void dragOver(DropTargetDragEvent dtde)
Called when a drag operation is ongoing, while the mouse pointer is still
 over the operable part of the drop site for the DropTarget
 registered with this listener.

Specified by:
dragOver in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
11,DropTargetAdapter,3,void drop(DropTargetDropEvent dtde),False,,NULL
11,DropTargetAdapter,4,void dropActionChanged(DropTargetDragEvent dtde),True,,"

dropActionChanged
public void dropActionChanged(DropTargetDragEvent dtde)
Called if the user has modified
 the current drop gesture.

Specified by:
dropActionChanged in interface DropTargetListener
Parameters:
dtde - the DropTargetDragEvent


"
11,DropTargetAdapter,5,void dragExit(DropTargetEvent dte),True,,"

dragExit
public void dragExit(DropTargetEvent dte)
Called while a drag operation is ongoing, when the mouse pointer has
 exited the operable part of the drop site for the
 DropTarget registered with this listener.

Specified by:
dragExit in interface DropTargetListener
Parameters:
dte - the DropTargetEvent


"
12,DropTargetContext,1,Transferable getTransferable(),True,,"

getTransferable
protected Transferable getTransferable()
                                throws InvalidDnDOperationException
get the Transferable (proxy) operand of this operation
 

Returns:
the Transferable
Throws:
InvalidDnDOperationException - if a drag is not outstanding/extant
 


"
12,DropTargetContext,2,Component getComponent(),True,,"

getComponent
public Component getComponent()
This method returns the Component associated with
 this DropTargetContext.
 

Returns:
the Component associated with this Context


"
12,DropTargetContext,3,DropTarget getDropTarget(),True,,"

getDropTarget
public DropTarget getDropTarget()
This method returns the DropTarget associated with this
 DropTargetContext.
 

Returns:
the DropTarget associated with this DropTargetContext


"
12,DropTargetContext,4,Point getComponentLocation(),False,,NULL
12,DropTargetContext,5,void dropComplete(boolean success),True,,"

dropComplete
public void dropComplete(boolean success)
                  throws InvalidDnDOperationException
This method signals that the drop is completed and
 if it was successful or not.
 

Parameters:
success - true for success, false if not
 
Throws:
InvalidDnDOperationException - if a drop is not outstanding/extant


"
13,DropTargetDragEvent,1,int getX(),False,,NULL
13,DropTargetDragEvent,2,int getY(),False,,NULL
13,DropTargetDragEvent,3,DataFlavor[] getCurrentDataFlavors(),True,,"

getCurrentDataFlavors
public DataFlavor[] getCurrentDataFlavors()
This method returns the current DataFlavors from the
 DropTargetContext.
 

Returns:
current DataFlavors from the DropTargetContext


"
13,DropTargetDragEvent,4,Transferable getTransferable(),True,,"

getTransferable
public Transferable getTransferable()
This method returns the Transferable object that represents
 the data associated with the current drag operation.

Returns:
the Transferable associated with the drag operation
Throws:
InvalidDnDOperationException - if the data associated with the drag
         operation is not available
Since:
1.5


"
13,DropTargetDragEvent,5,int getDropAction(),True,,"

getDropAction
public int getDropAction()
This method returns the user drop action.

Returns:
the user drop action


"
15,DropTargetEvent,1,DropTargetContext getDropTargetContext(),True,,"

getDropTargetContext
public DropTargetContext getDropTargetContext()
This method returns the DropTargetContext
 associated with this DropTargetEvent.
 

Returns:
the DropTargetContext


"
15,DropTargetEvent,2,DataFlavor[] getCurrentDataFlavors(),False,,NULL
15,DropTargetEvent,3,Transferable getTransferable(),False,,NULL
15,DropTargetEvent,4,boolean isLocalTransfer(),False,,NULL
15,DropTargetEvent,5,boolean isDataFlavorSupported(DataFlavor df),False,,NULL
16,MouseDragGestureRecognizer,1,void registerListeners(),True,,"

registerListeners
protected void registerListeners()
register this DragGestureRecognizer's Listeners with the Component

Specified by:
registerListeners in class DragGestureRecognizer


"
16,MouseDragGestureRecognizer,2,void unregisterListeners(),True,,"

unregisterListeners
protected void unregisterListeners()
unregister this DragGestureRecognizer's Listeners with the Component

 subclasses must override this method

Specified by:
unregisterListeners in class DragGestureRecognizer


"
16,MouseDragGestureRecognizer,3,void setSourceActions(int actions),False,,NULL
16,MouseDragGestureRecognizer,4,void setTriggerEvent(MouseEvent trigger),False,,NULL
16,MouseDragGestureRecognizer,5,void setComponent(Component c),False,,NULL
