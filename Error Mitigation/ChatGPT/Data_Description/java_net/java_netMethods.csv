ClassName,Method,Return Type,Description,Full Description
Authenticator,getPasswordAuthentication(),protected PasswordAuthentication,Called when password authorization is needed.,"

getPasswordAuthentication
protected PasswordAuthentication getPasswordAuthentication()
Called when password authorization is needed.  Subclasses should
 override the default implementation, which returns null.

Returns:
The PasswordAuthentication collected from the
          user, or null if none is provided.


"
Authenticator,getRequestingHost(),protected String,"Gets the hostname of the site or proxy requesting authentication, or null if not available.","

getRequestingHost
protected final String getRequestingHost()
Gets the hostname of the
 site or proxy requesting authentication, or null
 if not available.

Returns:
the hostname of the connection requiring authentication, or null
          if it's not available.
Since:
1.4


"
Authenticator,getRequestingPort(),protected int,Gets the port number for the requested connection.,"

getRequestingPort
protected final int getRequestingPort()
Gets the port number for the requested connection.

Returns:
an int indicating the
 port for the requested connection.


"
Authenticator,getRequestingPrompt(),protected String,Gets the prompt string given by the requestor.,"

getRequestingPrompt
protected final String getRequestingPrompt()
Gets the prompt string given by the requestor.

Returns:
the prompt string given by the requestor (realm for
          http requests)


"
Authenticator,getRequestingProtocol(),protected String,Give the protocol that's requesting the connection.,"

getRequestingProtocol
protected final String getRequestingProtocol()
Give the protocol that's requesting the connection.  Often this
 will be based on a URL, but in a future JDK it could be, for
 example, ""SOCKS"" for a password-protected SOCKS5 firewall.

Returns:
the protocol, optionally followed by ""/version"", where
          version is a version number.
See Also:
URL.getProtocol()


"
Authenticator,getRequestingScheme(),protected String,"Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example).","

getRequestingScheme
protected final String getRequestingScheme()
Gets the scheme of the requestor (the HTTP scheme
 for an HTTP firewall, for example).

Returns:
the scheme of the requestor


"
Authenticator,getRequestingSite(),protected InetAddress,"Gets the InetAddress of the site requesting authorization, or null if not available.","

getRequestingSite
protected final InetAddress getRequestingSite()
Gets the InetAddress of the
 site requesting authorization, or null
 if not available.

Returns:
the InetAddress of the site requesting authorization, or null
          if it's not available.


"
Authenticator,getRequestingURL(),protected URL,Returns the URL that resulted in this request for authentication.,"

getRequestingURL
protected URL getRequestingURL()
Returns the URL that resulted in this
 request for authentication.

Returns:
the requesting URL
Since:
1.5


"
Authenticator,getRequestorType(),protected Authenticator.RequestorType,Returns whether the requestor is a Proxy or a Server.,"

getRequestorType
protected Authenticator.RequestorType getRequestorType()
Returns whether the requestor is a Proxy or a Server.

Returns:
the authentication type of the requestor
Since:
1.5


"
Authenticator,"requestPasswordAuthentication(InetAddress addr, int port, String protocol, String prompt, String scheme)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.,"

requestPasswordAuthentication
public static PasswordAuthentication requestPasswordAuthentication(InetAddress addr,
                                                                   int port,
                                                                   String protocol,
                                                                   String prompt,
                                                                   String scheme)
Ask the authenticator that has been registered with the system
 for a password.
 
 First, if there is a security manager, its checkPermission
 method is called with a
 NetPermission(""requestPasswordAuthentication"") permission.
 This may result in a java.lang.SecurityException.

Parameters:
addr - The InetAddress of the site requesting authorization,
             or null if not known.
port - the port for the requested connection
protocol - The protocol that's requesting the connection
          (getRequestingProtocol())
prompt - A prompt string for the user
scheme - The authentication scheme
Returns:
The username/password, or null if one can't be gotten.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        the password authentication request.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
NetPermission


"
Authenticator,"requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.,"

requestPasswordAuthentication
public static PasswordAuthentication requestPasswordAuthentication(String host,
                                                                   InetAddress addr,
                                                                   int port,
                                                                   String protocol,
                                                                   String prompt,
                                                                   String scheme)
Ask the authenticator that has been registered with the system
 for a password. This is the preferred method for requesting a password
 because the hostname can be provided in cases where the InetAddress
 is not available.
 
 First, if there is a security manager, its checkPermission
 method is called with a
 NetPermission(""requestPasswordAuthentication"") permission.
 This may result in a java.lang.SecurityException.

Parameters:
host - The hostname of the site requesting authentication.
addr - The InetAddress of the site requesting authentication,
             or null if not known.
port - the port for the requested connection.
protocol - The protocol that's requesting the connection
          (getRequestingProtocol())
prompt - A prompt string for the user which identifies the authentication realm.
scheme - The authentication scheme
Returns:
The username/password, or null if one can't be gotten.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        the password authentication request.
Since:
1.4
See Also:
SecurityManager.checkPermission(java.security.Permission), 
NetPermission


"
Authenticator,"requestPasswordAuthentication(String host, InetAddress addr, int port, String protocol, String prompt, String scheme, URL url, Authenticator.RequestorType reqType)",static PasswordAuthentication,Ask the authenticator that has been registered with the system for a password.,"

requestPasswordAuthentication
public static PasswordAuthentication requestPasswordAuthentication(String host,
                                                                   InetAddress addr,
                                                                   int port,
                                                                   String protocol,
                                                                   String prompt,
                                                                   String scheme,
                                                                   URL url,
                                                                   Authenticator.RequestorType reqType)
Ask the authenticator that has been registered with the system
 for a password.
 
 First, if there is a security manager, its checkPermission
 method is called with a
 NetPermission(""requestPasswordAuthentication"") permission.
 This may result in a java.lang.SecurityException.

Parameters:
host - The hostname of the site requesting authentication.
addr - The InetAddress of the site requesting authorization,
             or null if not known.
port - the port for the requested connection
protocol - The protocol that's requesting the connection
          (getRequestingProtocol())
prompt - A prompt string for the user
scheme - The authentication scheme
url - The requesting URL that caused the authentication
reqType - The type (server or proxy) of the entity requesting
              authentication.
Returns:
The username/password, or null if one can't be gotten.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        the password authentication request.
Since:
1.5
See Also:
SecurityManager.checkPermission(java.security.Permission), 
NetPermission


"
Authenticator,setDefault(Authenticator a),static void,Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication.,"

setDefault
public static void setDefault(Authenticator a)
Sets the authenticator that will be used by the networking code
 when a proxy or an HTTP server asks for authentication.
 
 First, if there is a security manager, its checkPermission
 method is called with a
 NetPermission(""setDefaultAuthenticator"") permission.
 This may result in a java.lang.SecurityException.

Parameters:
a - The authenticator to be set. If a is null then
                  any previously set authenticator is removed.
Throws:
SecurityException - if a security manager exists and its
        checkPermission method doesn't allow
        setting the default authenticator.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
NetPermission


"
CacheRequest,abort(),abstract void,Aborts the attempt to cache the response.,"

abort
public abstract void abort()
Aborts the attempt to cache the response. If an IOException is
 encountered while reading the response or writing to the cache,
 the current cache store operation will be abandoned.

"
CacheRequest,getBody(),abstract OutputStream,Returns an OutputStream to which the response body can be written.,"

getBody
public abstract OutputStream getBody()
                              throws IOException
Returns an OutputStream to which the response body can be
 written.

Returns:
an OutputStream to which the response body can
         be written
Throws:
IOException - if an I/O error occurs while
         writing the response body


"
CacheResponse,getBody(),abstract InputStream,Returns the response body as an InputStream.,"

getBody
public abstract InputStream getBody()
                             throws IOException
Returns the response body as an InputStream.

Returns:
an InputStream from which the response body can
         be accessed
Throws:
IOException - if an I/O error occurs while
         getting the response body


"
CacheResponse,getHeaders(),"abstract Map<String,List<String>>",Returns the response headers as a Map.,"

getHeaders
public abstract Map<String,List<String>> getHeaders()
                                             throws IOException
Returns the response headers as a Map.

Returns:
An immutable Map from response header field names to
         lists of field values. The status line has null as its
         field name.
Throws:
IOException - if an I/O error occurs
            while getting the response headers


"
ContentHandler,getContent(URLConnection urlc),abstract Object,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it.","

getContent
public abstract Object getContent(URLConnection urlc)
                           throws IOException
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object from it.

Parameters:
urlc - a URL connection.
Returns:
the object read by the ContentHandler.
Throws:
IOException - if an I/O error occurs while reading the object.


"
ContentHandler,"getContent(URLConnection urlc, Class[] classes)",Object,"Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified.","

getContent
public Object getContent(URLConnection urlc,
                         Class[] classes)
                  throws IOException
Given a URL connect stream positioned at the beginning of the
 representation of an object, this method reads that stream and
 creates an object that matches one of the types specified.

 The default implementation of this method should call getContent()
 and screen the return type for a match of the suggested types.

Parameters:
urlc - a URL connection.
classes - an array of types requested
Returns:
the object read by the ContentHandler that is
                 the first match of the suggested types.
                 null if none of the requested  are supported.
Throws:
IOException - if an I/O error occurs while reading the object.
Since:
1.3


"
CookieHandler,"get(URI uri, Map<String,List<String>> requestHeaders)","abstract Map<String,List<String>>",Gets all the applicable cookies from a cookie cache for the specified uri in the request header.,"

get
public abstract Map<String,List<String>> get(URI uri,
                                             Map<String,List<String>> requestHeaders)
                                      throws IOException
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.

 The URI passed as an argument specifies the intended use for
 the cookies. In particular the scheme should reflect whether the cookies
 will be sent over http, https or used in another context like javascript.
 The host part should reflect either the destination of the cookies or
 their origin in the case of javascript.
It is up to the implementation to take into account the URI and
 the cookies attributes and security settings to determine which ones
 should be returned.
HTTP protocol implementers should make sure that this method is
 called after all request headers related to choosing cookies
 are added, and before the request is sent.

Parameters:
uri - a URI representing the intended use for the
            cookies
requestHeaders - - a Map from request header
            field names to lists of field values representing
            the current request headers
Returns:
an immutable map from state management headers, with
            field names ""Cookie"" or ""Cookie2"" to a list of
            cookies containing state information
Throws:
IOException - if an I/O error occurs
IllegalArgumentException - if either argument is null
See Also:
put(URI, Map)


"
CookieHandler,getDefault(),static CookieHandler,Gets the system-wide cookie handler.,"

getDefault
public static CookieHandler getDefault()
Gets the system-wide cookie handler.

Returns:
the system-wide cookie handler; A null return means
        there is no system-wide cookie handler currently set.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""getCookieHandler"")
See Also:
setDefault(CookieHandler)


"
CookieHandler,"put(URI uri, Map<String,List<String>> responseHeaders)",abstract void,"Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.","

put
public abstract void put(URI uri,
                         Map<String,List<String>> responseHeaders)
                  throws IOException
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.

Parameters:
uri - a URI where the cookies come from
responseHeaders - an immutable map from field names to
            lists of field values representing the response
            header fields returned
Throws:
IOException - if an I/O error occurs
IllegalArgumentException - if either argument is null
See Also:
get(URI, Map)


"
CookieHandler,setDefault(CookieHandler cHandler),static void,Sets (or unsets) the system-wide cookie handler.,"

setDefault
public static void setDefault(CookieHandler cHandler)
Sets (or unsets) the system-wide cookie handler.

 Note: non-standard http protocol handlers may ignore this setting.

Parameters:
cHandler - The HTTP cookie handler, or
       null to unset.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""setCookieHandler"")
See Also:
getDefault()


"
CookieManager,"get(URI uri, Map<String,List<String>> requestHeaders)","Map<String,List<String>>",Gets all the applicable cookies from a cookie cache for the specified uri in the request header.,"

get
public Map<String,List<String>> get(URI uri,
                                    Map<String,List<String>> requestHeaders)
                             throws IOException
Description copied from class: CookieHandler
Gets all the applicable cookies from a cookie cache for the
 specified uri in the request header.

 The URI passed as an argument specifies the intended use for
 the cookies. In particular the scheme should reflect whether the cookies
 will be sent over http, https or used in another context like javascript.
 The host part should reflect either the destination of the cookies or
 their origin in the case of javascript.
It is up to the implementation to take into account the URI and
 the cookies attributes and security settings to determine which ones
 should be returned.
HTTP protocol implementers should make sure that this method is
 called after all request headers related to choosing cookies
 are added, and before the request is sent.

Specified by:
get in class CookieHandler
Parameters:
uri - a URI representing the intended use for the
            cookies
requestHeaders - - a Map from request header
            field names to lists of field values representing
            the current request headers
Returns:
an immutable map from state management headers, with
            field names ""Cookie"" or ""Cookie2"" to a list of
            cookies containing state information
Throws:
IOException - if an I/O error occurs
See Also:
CookieHandler.put(URI, Map)


"
CookieManager,getCookieStore(),CookieStore,To retrieve current cookie store.,"

getCookieStore
public CookieStore getCookieStore()
To retrieve current cookie store.

Returns:
the cookie store currently used by cookie manager.


"
CookieManager,"put(URI uri, Map<String,List<String>> responseHeaders)",void,"Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.","

put
public void put(URI uri,
                Map<String,List<String>> responseHeaders)
         throws IOException
Description copied from class: CookieHandler
Sets all the applicable cookies, examples are response header
 fields that are named Set-Cookie2, present in the response
 headers into a cookie cache.

Specified by:
put in class CookieHandler
Parameters:
uri - a URI where the cookies come from
responseHeaders - an immutable map from field names to
            lists of field values representing the response
            header fields returned
Throws:
IOException - if an I/O error occurs
See Also:
CookieHandler.get(URI, Map)


"
CookieManager,setCookiePolicy(CookiePolicy cookiePolicy),void,To set the cookie policy of this cookie manager.,"

setCookiePolicy
public void setCookiePolicy(CookiePolicy cookiePolicy)
To set the cookie policy of this cookie manager.

  A instance of CookieManager will have
 cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always
 can call this method to set another cookie policy.

Parameters:
cookiePolicy - the cookie policy. Can be null, which
                          has no effects on current cookie policy.


"
DatagramPacket,getAddress(),InetAddress,Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.,"

getAddress
public InetAddress getAddress()
Returns the IP address of the machine to which this datagram is being
 sent or from which the datagram was received.

Returns:
the IP address of the machine to which this datagram is being
          sent or from which the datagram was received.
See Also:
InetAddress, 
setAddress(java.net.InetAddress)


"
DatagramPacket,getData(),byte[],Returns the data buffer.,"

getData
public byte[] getData()
Returns the data buffer. The data received or the data to be sent
 starts from the offset in the buffer,
 and runs for length long.

Returns:
the buffer used to receive or  send data
See Also:
setData(byte[], int, int)


"
DatagramPacket,getLength(),int,Returns the length of the data to be sent or the length of the data received.,"

getLength
public int getLength()
Returns the length of the data to be sent or the length of the
 data received.

Returns:
the length of the data to be sent or the length of the
          data received.
See Also:
setLength(int)


"
DatagramPacket,getOffset(),int,Returns the offset of the data to be sent or the offset of the data received.,"

getOffset
public int getOffset()
Returns the offset of the data to be sent or the offset of the
 data received.

Returns:
the offset of the data to be sent or the offset of the
          data received.
Since:
1.2


"
DatagramPacket,getPort(),int,Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.,"

getPort
public int getPort()
Returns the port number on the remote host to which this datagram is
 being sent or from which the datagram was received.

Returns:
the port number on the remote host to which this datagram is
          being sent or from which the datagram was received.
See Also:
setPort(int)


"
DatagramPacket,getSocketAddress(),SocketAddress,Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.,"

getSocketAddress
public SocketAddress getSocketAddress()
Gets the SocketAddress (usually IP address + port number) of the remote
 host that this packet is being sent to or is coming from.

Returns:
the SocketAddress
Since:
1.4
See Also:
setSocketAddress(java.net.SocketAddress)


"
DatagramPacket,setAddress(InetAddress iaddr),void,Sets the IP address of the machine to which this datagram is being sent.,"

setAddress
public void setAddress(InetAddress iaddr)
Sets the IP address of the machine to which this datagram
 is being sent.

Parameters:
iaddr - the InetAddress
Since:
JDK1.1
See Also:
getAddress()


"
DatagramPacket,setData(byte[] buf),void,Set the data buffer for this packet.,"

setData
public void setData(byte[] buf)
Set the data buffer for this packet. With the offset of
 this DatagramPacket set to 0, and the length set to
 the length of buf.

Parameters:
buf - the buffer to set for this packet.
Throws:
NullPointerException - if the argument is null.
Since:
JDK1.1
See Also:
getLength(), 
getData()


"
DatagramPacket,"setData(byte[] buf, int offset, int length)",void,Set the data buffer for this packet.,"

setData
public void setData(byte[] buf,
                    int offset,
                    int length)
Set the data buffer for this packet. This sets the
 data, length and offset of the packet.

Parameters:
buf - the buffer to set for this packet
offset - the offset into the data
length - the length of the data
       and/or the length of the buffer used to receive data
Throws:
NullPointerException - if the argument is null
Since:
1.2
See Also:
getData(), 
getOffset(), 
getLength()


"
DatagramPacket,setLength(int length),void,Set the length for this packet.,"

setLength
public void setLength(int length)
Set the length for this packet. The length of the packet is
 the number of bytes from the packet's data buffer that will be
 sent, or the number of bytes of the packet's data buffer that
 will be used for receiving data. The length must be lesser or
 equal to the offset plus the length of the packet's buffer.

Parameters:
length - the length to set for this packet.
Throws:
IllegalArgumentException - if the length is negative
 of if the length is greater than the packet's data buffer
 length.
Since:
JDK1.1
See Also:
getLength(), 
setData(byte[], int, int)


"
DatagramPacket,setPort(int iport),void,Sets the port number on the remote host to which this datagram is being sent.,"

setPort
public void setPort(int iport)
Sets the port number on the remote host to which this datagram
 is being sent.

Parameters:
iport - the port number
Since:
JDK1.1
See Also:
getPort()


"
DatagramPacket,setSocketAddress(SocketAddress address),void,Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.,"

setSocketAddress
public void setSocketAddress(SocketAddress address)
Sets the SocketAddress (usually IP address + port number) of the remote
 host to which this datagram is being sent.

Parameters:
address - the SocketAddress
Throws:
IllegalArgumentException - if address is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4
See Also:
getSocketAddress()


"
DatagramSocket,bind(SocketAddress addr),void,Binds this DatagramSocket to a specific address and port.,"

bind
public void bind(SocketAddress addr)
          throws SocketException
Binds this DatagramSocket to a specific address and port.
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.


Parameters:
addr - The address and port to bind to.
Throws:
SocketException - if any error happens during the bind, or if the
          socket is already bound.
SecurityException - if a security manager exists and its
             checkListen method doesn't allow the operation.
IllegalArgumentException - if addr is a SocketAddress subclass
         not supported by this socket.
Since:
1.4


"
DatagramSocket,close(),void,Closes this datagram socket.,"

close
public void close()
Closes this datagram socket.
 
 Any thread currently blocked in receive(java.net.DatagramPacket) upon this socket
 will throw a SocketException.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable


"
DatagramSocket,"connect(InetAddress address, int port)",void,Connects the socket to a remote address for this socket.,"

connect
public void connect(InetAddress address,
                    int port)
Connects the socket to a remote address for this socket. When a
 socket is connected to a remote address, packets may only be
 sent to or received from that address. By default a datagram
 socket is not connected.

 If the remote destination to which the socket is connected does not
 exist, or is otherwise unreachable, and if an ICMP destination unreachable
 packet has been received for that address, then a subsequent call to
 send or receive may throw a PortUnreachableException. Note, there is no
 guarantee that the exception will be thrown.

  If a security manager has been installed then it is invoked to check
 access to the remote address. Specifically, if the given address
 is a multicast address,
 the security manager's checkMulticast method is invoked with the given address.
 Otherwise, the security manager's checkConnect
 and checkAccept methods
 are invoked, with the given address and port, to
 verify that datagrams are permitted to be sent and received
 respectively.

  When a socket is connected, receive and
 send will not perform any security checks
 on incoming and outgoing packets, other than matching the packet's
 and the socket's address and port. On a send operation, if the
 packet's address is set and the packet's address and the socket's
 address do not match, an IllegalArgumentException will be
 thrown. A socket connected to a multicast address may only be used
 to send packets.

Parameters:
address - the remote address for the socket
port - the remote port for the socket.
Throws:
IllegalArgumentException - if the address is null, or the port is out of range.
SecurityException - if a security manager has been installed and it does
         not permit access to the given remote address
See Also:
disconnect()


"
DatagramSocket,connect(SocketAddress addr),void,Connects this socket to a remote socket address (IP address + port number).,"

connect
public void connect(SocketAddress addr)
             throws SocketException
Connects this socket to a remote socket address (IP address + port number).

  If given an InetSocketAddress, this method
 behaves as if invoking connect(InetAddress,int)
 with the the given socket addresses IP address and port number.

Parameters:
addr - The remote address.
Throws:
SocketException - if the connect fails
IllegalArgumentException - if addr is null, or addr is a SocketAddress
         subclass not supported by this socket
SecurityException - if a security manager has been installed and it does
         not permit access to the given remote address
Since:
1.4


"
DatagramSocket,disconnect(),void,Disconnects the socket.,"

disconnect
public void disconnect()
Disconnects the socket. If the socket is closed or not connected,
 then this method has no effect.

See Also:
connect(java.net.InetAddress, int)


"
DatagramSocket,getBroadcast(),boolean,Tests if SO_BROADCAST is enabled.,"

getBroadcast
public boolean getBroadcast()
                     throws SocketException
Tests if SO_BROADCAST is enabled.

Returns:
a boolean indicating whether or not SO_BROADCAST is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as an UDP error.
Since:
1.4
See Also:
setBroadcast(boolean)


"
DatagramSocket,getChannel(),DatagramChannel,"Returns the unique DatagramChannel object associated with this datagram socket, if any.","

getChannel
public DatagramChannel getChannel()
Returns the unique DatagramChannel object
 associated with this datagram socket, if any.

  A datagram socket will have a channel if, and only if, the channel
 itself was created via the DatagramChannel.open method.

Returns:
the datagram channel associated with this datagram socket,
          or null if this socket was not created for a channel
Since:
1.4


"
DatagramSocket,getInetAddress(),InetAddress,Returns the address to which this socket is connected.,"

getInetAddress
public InetAddress getInetAddress()
Returns the address to which this socket is connected. Returns
 null if the socket is not connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
the address to which this socket is connected.


"
DatagramSocket,getLocalAddress(),InetAddress,Gets the local address to which the socket is bound.,"

getLocalAddress
public InetAddress getLocalAddress()
Gets the local address to which the socket is bound.

 If there is a security manager, its
 checkConnect method is first called
 with the host address and -1
 as its arguments to see if the operation is allowed.

Returns:
the local address to which the socket is bound,
          null if the socket is closed, or
          an InetAddress representing
          wildcard
          address if either the socket is not bound, or
          the security manager checkConnect
          method does not allow the operation
Since:
1.1
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
DatagramSocket,getLocalPort(),int,Returns the port number on the local host to which this socket is bound.,"

getLocalPort
public int getLocalPort()
Returns the port number on the local host to which this socket
 is bound.

Returns:
the port number on the local host to which this socket is bound,
                -1 if the socket is closed, or
                0 if it is not bound yet.


"
DatagramSocket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.,"

getLocalSocketAddress
public SocketAddress getLocalSocketAddress()
Returns the address of the endpoint this socket is bound to.

Returns:
a SocketAddress representing the local endpoint of this
         socket, or null if it is closed or not bound yet.
Since:
1.4
See Also:
getLocalAddress(), 
getLocalPort(), 
bind(SocketAddress)


"
DatagramSocket,getPort(),int,Returns the port number to which this socket is connected.,"

getPort
public int getPort()
Returns the port number to which this socket is connected.
 Returns -1 if the socket is not connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected port number
 after the socket is closed.

Returns:
the port number to which this socket is connected.


"
DatagramSocket,getReceiveBufferSize(),int,"Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Get value of the SO_RCVBUF option for this DatagramSocket, that is the
 buffer size used by the platform for input on this DatagramSocket.

Returns:
the value of the SO_RCVBUF option for this DatagramSocket
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP error.
See Also:
setReceiveBufferSize(int)


"
DatagramSocket,getRemoteSocketAddress(),SocketAddress,"Returns the address of the endpoint this socket is connected to, or null if it is unconnected.","

getRemoteSocketAddress
public SocketAddress getRemoteSocketAddress()
Returns the address of the endpoint this socket is connected to, or
 null if it is unconnected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
a SocketAddress representing the remote
         endpoint of this socket, or null if it is
         not connected yet.
Since:
1.4
See Also:
getInetAddress(), 
getPort(), 
connect(SocketAddress)


"
DatagramSocket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.,"

getReuseAddress
public boolean getReuseAddress()
                        throws SocketException
Tests if SO_REUSEADDR is enabled.

Returns:
a boolean indicating whether or not SO_REUSEADDR is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as an UDP error.
Since:
1.4
See Also:
setReuseAddress(boolean)


"
DatagramSocket,getSendBufferSize(),int,"Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option for this DatagramSocket, that is the
 buffer size used by the platform for output on this DatagramSocket.

Returns:
the value of the SO_SNDBUF option for this DatagramSocket
Throws:
SocketException - if there is an error in
 the underlying protocol, such as an UDP error.
See Also:
setSendBufferSize(int)


"
DatagramSocket,getSoTimeout(),int,Retrieve setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws SocketException
Retrieve setting for SO_TIMEOUT.  0 returns implies that the
 option is disabled (i.e., timeout of infinity).

Returns:
the setting for SO_TIMEOUT
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP error.
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
DatagramSocket,getTrafficClass(),int,Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket.,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP datagram
 header for packets sent from this DatagramSocket.
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this
 DatagramSocket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int)


"
DatagramSocket,isBound(),boolean,Returns the binding state of the socket.,"

isBound
public boolean isBound()
Returns the binding state of the socket.
 
 If the socket was bound prior to being closed,
 then this method will continue to return true
 after the socket is closed.

Returns:
true if the socket successfully bound to an address
Since:
1.4


"
DatagramSocket,isClosed(),boolean,Returns whether the socket is closed or not.,"

isClosed
public boolean isClosed()
Returns whether the socket is closed or not.

Returns:
true if the socket has been closed
Since:
1.4


"
DatagramSocket,isConnected(),boolean,Returns the connection state of the socket.,"

isConnected
public boolean isConnected()
Returns the connection state of the socket.
 
 If the socket was connected prior to being closed,
 then this method will continue to return true
 after the socket is closed.

Returns:
true if the socket successfully connected to a server
Since:
1.4


"
DatagramSocket,receive(DatagramPacket p),void,Receives a datagram packet from this socket.,"

receive
public void receive(DatagramPacket p)
             throws IOException
Receives a datagram packet from this socket. When this method
 returns, the DatagramPacket's buffer is filled with
 the data received. The datagram packet also contains the sender's
 IP address, and the port number on the sender's machine.
 
 This method blocks until a datagram is received. The
 length field of the datagram packet object contains
 the length of the received message. If the message is longer than
 the packet's length, the message is truncated.
 
 If there is a security manager, a packet cannot be received if the
 security manager's checkAccept method
 does not allow it.

Parameters:
p - the DatagramPacket into which to place
                 the incoming data.
Throws:
IOException - if an I/O error occurs.
SocketTimeoutException - if setSoTimeout was previously called
                 and the timeout has expired.
PortUnreachableException - may be thrown if the socket is connected
             to a currently unreachable destination. Note, there is no guarantee that the
             exception will be thrown.
IllegalBlockingModeException - if this socket has an associated channel,
             and the channel is in non-blocking mode.
See Also:
DatagramPacket, 
DatagramSocket


"
DatagramSocket,send(DatagramPacket p),void,Sends a datagram packet from this socket.,"

send
public void send(DatagramPacket p)
          throws IOException
Sends a datagram packet from this socket. The
 DatagramPacket includes information indicating the
 data to be sent, its length, the IP address of the remote host,
 and the port number on the remote host.

 If there is a security manager, and the socket is not currently
 connected to a remote address, this method first performs some
 security checks. First, if p.getAddress().isMulticastAddress()
 is true, this method calls the
 security manager's checkMulticast method
 with p.getAddress() as its argument.
 If the evaluation of that expression is false,
 this method instead calls the security manager's
 checkConnect method with arguments
 p.getAddress().getHostAddress() and
 p.getPort(). Each call to a security manager method
 could result in a SecurityException if the operation is not allowed.

Parameters:
p - the DatagramPacket to be sent.
Throws:
IOException - if an I/O error occurs.
SecurityException - if a security manager exists and its
             checkMulticast or checkConnect
             method doesn't allow the send.
PortUnreachableException - may be thrown if the socket is connected
             to a currently unreachable destination. Note, there is no
             guarantee that the exception will be thrown.
IllegalBlockingModeException - if this socket has an associated channel,
             and the channel is in non-blocking mode.
IllegalArgumentException - if the socket is connected,
             and connected address and packet address differ.
See Also:
DatagramPacket, 
SecurityManager.checkMulticast(InetAddress), 
SecurityManager.checkConnect(java.lang.String, int)


"
DatagramSocket,setBroadcast(boolean on),void,Enable/disable SO_BROADCAST.,"

setBroadcast
public void setBroadcast(boolean on)
                  throws SocketException
Enable/disable SO_BROADCAST.

  Some operating systems may require that the Java virtual machine be
 started with implementation specific privileges to enable this option or
 send broadcast datagrams.

Parameters:
on - whether or not to have broadcast turned on.
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP
          error.
Since:
1.4
See Also:
getBroadcast()


"
DatagramSocket,setDatagramSocketImplFactory(DatagramSocketImplFactory fac),static void,Sets the datagram socket implementation factory for the application.,"

setDatagramSocketImplFactory
public static void setDatagramSocketImplFactory(DatagramSocketImplFactory fac)
                                         throws IOException
Sets the datagram socket implementation factory for the
 application. The factory can be specified only once.
 
 When an application creates a new datagram socket, the socket
 implementation factory's createDatagramSocketImpl method is
 called to create the actual datagram socket implementation.
 
 Passing null to the method is a no-op unless the factory
 was already set.

 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fac - the desired factory.
Throws:
IOException - if an I/O error occurs when setting the
              datagram socket factory.
SocketException - if the factory is already defined.
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the
     operation.
Since:
1.3
See Also:
DatagramSocketImplFactory.createDatagramSocketImpl(), 
SecurityManager.checkSetFactory()


"
DatagramSocket,setReceiveBufferSize(int size),void,Sets the SO_RCVBUF option to the specified value for this DatagramSocket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the specified value for this
 DatagramSocket. The SO_RCVBUF option is used by the
 the network implementation as a hint to size the underlying
 network I/O buffers. The SO_RCVBUF setting may also be used
 by the network implementation to determine the maximum size
 of the packet that can be received on this socket.
 
 Because SO_RCVBUF is a hint, applications that want to
 verify what size the buffers were set to should call
 getReceiveBufferSize().
 
 Increasing SO_RCVBUF may allow the network implementation
 to buffer multiple packets when packets arrive faster than
 are being received using receive(DatagramPacket).
 
 Note: It is implementation specific if a packet larger
 than SO_RCVBUF can be received.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error in
 the underlying protocol, such as an UDP error.
IllegalArgumentException - if the value is 0 or is
 negative.
See Also:
getReceiveBufferSize()


"
DatagramSocket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR socket option.
 
 For UDP sockets it may be necessary to bind more than one
 socket to the same socket address. This is typically for the
 purpose of receiving multicast packets
 (See MulticastSocket). The
 SO_REUSEADDR socket option allows multiple
 sockets to be bound to the same socket address if the
 SO_REUSEADDR socket option is enabled prior
 to binding the socket using bind(SocketAddress).
 
 Note: This functionality is not supported by all existing platforms,
 so it is implementation specific whether this option will be ignored
 or not. However, if it is not supported then
 getReuseAddress() will always return false.
 
 When a DatagramSocket is created the initial setting
 of SO_REUSEADDR is disabled.
 
 The behaviour when SO_REUSEADDR is enabled or
 disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_RESUEADDR socket option,
            or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isBound(), 
isClosed()


"
DatagramSocket,setSendBufferSize(int size),void,Sets the SO_SNDBUF option to the specified value for this DatagramSocket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the specified value for this
 DatagramSocket. The SO_SNDBUF option is used by the
 network implementation as a hint to size the underlying
 network I/O buffers. The SO_SNDBUF setting may also be used
 by the network implementation to determine the maximum size
 of the packet that can be sent on this socket.
 
 As SO_SNDBUF is a hint, applications that want to verify
 what size the buffer is should call getSendBufferSize().
 
 Increasing the buffer size may allow multiple outgoing packets
 to be queued by the network implementation when the send rate
 is high.
 
 Note: If send(DatagramPacket) is used to send a
 DatagramPacket that is larger than the setting
 of SO_SNDBUF then it is implementation specific if the
 packet is sent or discarded.

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as an UDP error.
IllegalArgumentException - if the value is 0 or is
 negative.
See Also:
getSendBufferSize()


"
DatagramSocket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT with the specified timeout, in
  milliseconds. With this option set to a non-zero timeout,
  a call to receive() for this DatagramSocket
  will block for only this amount of time.  If the timeout expires,
  a java.net.SocketTimeoutException is raised, though the
  DatagramSocket is still valid.  The option must be enabled
  prior to entering the blocking operation to have effect.  The
  timeout must be > 0.
  A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout in milliseconds.
Throws:
SocketException - if there is an error in the underlying protocol, such as an UDP error.
Since:
JDK1.1
See Also:
getSoTimeout()


"
DatagramSocket,setTrafficClass(int tc),void,Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 datagram header for datagrams sent from this DatagramSocket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 for Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass()


"
DatagramSocketImpl,"bind(int lport, InetAddress laddr)",protected abstract void,Binds a datagram socket to a local port and address.,"

bind
protected abstract void bind(int lport,
                             InetAddress laddr)
                      throws SocketException
Binds a datagram socket to a local port and address.

Parameters:
lport - the local port
laddr - the local address
Throws:
SocketException - if there is an error in the
 underlying protocol, such as a TCP error.


"
DatagramSocketImpl,close(),protected abstract void,Close the socket.,"

close
protected abstract void close()
Close the socket.

"
DatagramSocketImpl,"connect(InetAddress address, int port)",protected void,Connects a datagram socket to a remote destination.,"

connect
protected void connect(InetAddress address,
                       int port)
                throws SocketException
Connects a datagram socket to a remote destination. This associates the remote
 address with the local socket so that datagrams may only be sent to this destination
 and received from this destination. This may be overridden to call a native
 system connect.

 If the remote destination to which the socket is connected does not
 exist, or is otherwise unreachable, and if an ICMP destination unreachable
 packet has been received for that address, then a subsequent call to
 send or receive may throw a PortUnreachableException.
 Note, there is no guarantee that the exception will be thrown.

Parameters:
address - the remote InetAddress to connect to
port - the remote port number
Throws:
SocketException - may be thrown if the socket cannot be
 connected to the remote destination
Since:
1.4


"
DatagramSocketImpl,create(),protected abstract void,Creates a datagram socket.,"

create
protected abstract void create()
                        throws SocketException
Creates a datagram socket.

Throws:
SocketException - if there is an error in the
 underlying protocol, such as a TCP error.


"
DatagramSocketImpl,disconnect(),protected void,Disconnects a datagram socket from its remote destination.,"

disconnect
protected void disconnect()
Disconnects a datagram socket from its remote destination.

Since:
1.4


"
DatagramSocketImpl,getFileDescriptor(),protected FileDescriptor,Gets the datagram socket file descriptor.,"

getFileDescriptor
protected FileDescriptor getFileDescriptor()
Gets the datagram socket file descriptor.

Returns:
a FileDescriptor object representing the datagram socket
 file descriptor


"
DatagramSocketImpl,getLocalPort(),protected int,Gets the local port.,"

getLocalPort
protected int getLocalPort()
Gets the local port.

Returns:
an int representing the local port value


"
DatagramSocketImpl,getTimeToLive(),protected abstract int,Retrieve the TTL (time-to-live) option.,"

getTimeToLive
protected abstract int getTimeToLive()
                              throws IOException
Retrieve the TTL (time-to-live) option.

Returns:
an int representing the time-to-live value
Throws:
IOException - if an I/O exception occurs
 while retrieving the time-to-live option
See Also:
setTimeToLive(int)


"
DatagramSocketImpl,getTTL(),protected abstract byte,Deprecated. use getTimeToLive instead.,"

getTTL
@Deprecated
protected abstract byte getTTL()
                                    throws IOException
Deprecated. use getTimeToLive instead.
Retrieve the TTL (time-to-live) option.

Returns:
a byte representing the TTL value
Throws:
IOException - if an I/O exception occurs
 while retrieving the time-to-live option
See Also:
setTTL(byte)


"
DatagramSocketImpl,join(InetAddress inetaddr),protected abstract void,Join the multicast group.,"

join
protected abstract void join(InetAddress inetaddr)
                      throws IOException
Join the multicast group.

Parameters:
inetaddr - multicast address to join.
Throws:
IOException - if an I/O exception occurs
 while joining the multicast group.


"
DatagramSocketImpl,"joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)",protected abstract void,Join the multicast group.,"

joinGroup
protected abstract void joinGroup(SocketAddress mcastaddr,
                                  NetworkInterface netIf)
                           throws IOException
Join the multicast group.

Parameters:
mcastaddr - address to join.
netIf - specifies the local interface to receive multicast
        datagram packets
Throws:
IOException - if an I/O exception occurs while joining
 the multicast group
Since:
1.4


"
DatagramSocketImpl,leave(InetAddress inetaddr),protected abstract void,Leave the multicast group.,"

leave
protected abstract void leave(InetAddress inetaddr)
                       throws IOException
Leave the multicast group.

Parameters:
inetaddr - multicast address to leave.
Throws:
IOException - if an I/O exception occurs
 while leaving the multicast group.


"
DatagramSocketImpl,"leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)",protected abstract void,Leave the multicast group.,"

leaveGroup
protected abstract void leaveGroup(SocketAddress mcastaddr,
                                   NetworkInterface netIf)
                            throws IOException
Leave the multicast group.

Parameters:
mcastaddr - address to leave.
netIf - specified the local interface to leave the group at
Throws:
IOException - if an I/O exception occurs while leaving
 the multicast group
Since:
1.4


"
DatagramSocketImpl,peek(InetAddress i),protected abstract int,Peek at the packet to see who it is from.,"

peek
protected abstract int peek(InetAddress i)
                     throws IOException
Peek at the packet to see who it is from. Updates the specified InetAddress
 to the address which the packet came from.

Parameters:
i - an InetAddress object
Returns:
the port number which the packet came from.
Throws:
IOException - if an I/O exception occurs
PortUnreachableException - may be thrown if the socket is connected
       to a currently unreachable destination. Note, there is no guarantee that the
       exception will be thrown.


"
DatagramSocketImpl,peekData(DatagramPacket p),protected abstract int,Peek at the packet to see who it is from.,"

peekData
protected abstract int peekData(DatagramPacket p)
                         throws IOException
Peek at the packet to see who it is from. The data is copied into the specified
 DatagramPacket. The data is returned,
 but not consumed, so that a subsequent peekData/receive operation
 will see the same data.

Parameters:
p - the Packet Received.
Returns:
the port number which the packet came from.
Throws:
IOException - if an I/O exception occurs
PortUnreachableException - may be thrown if the socket is connected
       to a currently unreachable destination. Note, there is no guarantee that the
       exception will be thrown.
Since:
1.4


"
DatagramSocketImpl,receive(DatagramPacket p),protected abstract void,Receive the datagram packet.,"

receive
protected abstract void receive(DatagramPacket p)
                         throws IOException
Receive the datagram packet.

Parameters:
p - the Packet Received.
Throws:
IOException - if an I/O exception occurs
 while receiving the datagram packet.
PortUnreachableException - may be thrown if the socket is connected
       to a currently unreachable destination. Note, there is no guarantee that the
       exception will be thrown.


"
DatagramSocketImpl,send(DatagramPacket p),protected abstract void,Sends a datagram packet.,"

send
protected abstract void send(DatagramPacket p)
                      throws IOException
Sends a datagram packet. The packet contains the data and the
 destination address to send the packet to.

Parameters:
p - the packet to be sent.
Throws:
IOException - if an I/O exception occurs while sending the
 datagram packet.
PortUnreachableException - may be thrown if the socket is connected
 to a currently unreachable destination. Note, there is no guarantee that
 the exception will be thrown.


"
DatagramSocketImpl,setTimeToLive(int ttl),protected abstract void,Set the TTL (time-to-live) option.,"

setTimeToLive
protected abstract void setTimeToLive(int ttl)
                               throws IOException
Set the TTL (time-to-live) option.

Parameters:
ttl - an int specifying the time-to-live value
Throws:
IOException - if an I/O exception occurs
 while setting the time-to-live option.
See Also:
getTimeToLive()


"
DatagramSocketImpl,setTTL(byte ttl),protected abstract void,Deprecated. use setTimeToLive instead.,"

setTTL
@Deprecated
protected abstract void setTTL(byte ttl)
                                    throws IOException
Deprecated. use setTimeToLive instead.
Set the TTL (time-to-live) option.

Parameters:
ttl - a byte specifying the TTL value
Throws:
IOException - if an I/O exception occurs while setting
 the time-to-live option.
See Also:
getTTL()


"
HttpCookie,clone(),Object,Create and return a copy of this object.,"

clone
public Object clone()
Create and return a copy of this object.

Overrides:
clone in class Object
Returns:
a clone of this HTTP cookie
See Also:
Cloneable


"
HttpCookie,"domainMatches(String domain, String host)",static boolean,The utility method to check whether a host name is in a domain or not.,"

domainMatches
public static boolean domainMatches(String domain,
                                    String host)
The utility method to check whether a host name is in a domain or not.

  This concept is described in the cookie specification.
 To understand the concept, some terminologies need to be defined first:
 
 effective host name = hostname if host name contains dot
             
      or = hostname.local if not
 
Host A's name domain-matches host B's if:
 
their host name strings string-compare equal; or
A is a HDN string and has the form NB, where N is a non-empty
   name string, B has the form .B', and B' is a HDN string.  (So,
   x.y.com domain-matches .Y.com but not Y.com.)

A host isn't in a domain (RFC 2965 sec. 3.3.2) if:
 
The value for the Domain attribute contains no embedded dots,
   and the value is not .local.
The effective host name that derives from the request-host does
   not domain-match the Domain attribute.
The request-host is a HDN (not IP address) and has the form HD,
   where D is the value of the Domain attribute, and H is a string
   that contains one or more dots.

Examples:
 
A Set-Cookie2 from request-host y.x.foo.com for Domain=.foo.com
   would be rejected, because H is y.x and contains a dot.
A Set-Cookie2 from request-host x.foo.com for Domain=.foo.com
   would be accepted.
A Set-Cookie2 with Domain=.com or Domain=.com., will always be
   rejected, because there is no embedded dot.
A Set-Cookie2 from request-host example for Domain=.local will
   be accepted, because the effective host name for the request-
   host is example.local, and example.local domain-matches .local.


Parameters:
domain - the domain name to check host name with
host - the host name in question
Returns:
true if they domain-matches; false if not


"
HttpCookie,equals(Object obj),boolean,Test the equality of two HTTP cookies.,"

equals
public boolean equals(Object obj)
Test the equality of two HTTP cookies.

  The result is true only if two cookies come from same domain
 (case-insensitive), have same name (case-insensitive), and have same path
 (case-sensitive).

Overrides:
equals in class Object
Parameters:
obj - the reference object with which to compare.
Returns:
true if two HTTP cookies equal to each other;
          otherwise, false
See Also:
Object.hashCode(), 
HashMap


"
HttpCookie,getComment(),String,"Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.","

getComment
public String getComment()
Returns the comment describing the purpose of this cookie, or
 null if the cookie has no comment.

Returns:
a String containing the comment, or null if none
See Also:
setComment(java.lang.String)


"
HttpCookie,getCommentURL(),String,"Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.","

getCommentURL
public String getCommentURL()
Returns the comment URL describing the purpose of this cookie, or
 null if the cookie has no comment URL.

Returns:
a String containing the comment URL, or null
          if none
See Also:
setCommentURL(java.lang.String)


"
HttpCookie,getDiscard(),boolean,Returns the discard attribute of the cookie,"

getDiscard
public boolean getDiscard()
Returns the discard attribute of the cookie

Returns:
a boolean to represent this cookie's discard attribute
See Also:
setDiscard(boolean)


"
HttpCookie,getDomain(),String,Returns the domain name set for this cookie.,"

getDomain
public String getDomain()
Returns the domain name set for this cookie. The form of the domain name
 is set by RFC 2965.

Returns:
a String containing the domain name
See Also:
setDomain(java.lang.String)


"
HttpCookie,getMaxAge(),long,"Returns the maximum age of the cookie, specified in seconds.","

getMaxAge
public long getMaxAge()
Returns the maximum age of the cookie, specified in seconds. By default,
 -1 indicating the cookie will persist until browser shutdown.

Returns:
an integer specifying the maximum age of the cookie in seconds
See Also:
setMaxAge(long)


"
HttpCookie,getName(),String,Returns the name of the cookie.,"

getName
public String getName()
Returns the name of the cookie. The name cannot be changed after
 creation.

Returns:
a String specifying the cookie's name


"
HttpCookie,getPath(),String,Returns the path on the server to which the browser returns this cookie.,"

getPath
public String getPath()
Returns the path on the server to which the browser returns this cookie.
 The cookie is visible to all subpaths on the server.

Returns:
a String specifying a path that contains a servlet name,
          for example, /catalog
See Also:
setPath(java.lang.String)


"
HttpCookie,getPortlist(),String,Returns the port list attribute of the cookie,"

getPortlist
public String getPortlist()
Returns the port list attribute of the cookie

Returns:
a String contains the port list or null if none
See Also:
setPortlist(java.lang.String)


"
HttpCookie,getSecure(),boolean,"Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.","

getSecure
public boolean getSecure()
Returns true if sending this cookie should be restricted to a
 secure protocol, or false if the it can be sent using any
 protocol.

Returns:
false if the cookie can be sent over any standard
          protocol; otherwise, true
See Also:
setSecure(boolean)


"
HttpCookie,getValue(),String,Returns the value of the cookie.,"

getValue
public String getValue()
Returns the value of the cookie.

Returns:
a String containing the cookie's present value
See Also:
setValue(java.lang.String)


"
HttpCookie,getVersion(),int,Returns the version of the protocol this cookie complies with.,"

getVersion
public int getVersion()
Returns the version of the protocol this cookie complies with. Version 1
 complies with RFC 2965/2109, and version 0 complies with the original
 cookie specification drafted by Netscape. Cookies provided by a browser
 use and identify the browser's cookie version.

Returns:
0 if the cookie complies with the original Netscape
          specification; 1 if the cookie complies with RFC 2965/2109
See Also:
setVersion(int)


"
HttpCookie,hasExpired(),boolean,Reports whether this HTTP cookie has expired or not.,"

hasExpired
public boolean hasExpired()
Reports whether this HTTP cookie has expired or not.

Returns:
true to indicate this HTTP cookie has expired;
          otherwise, false


"
HttpCookie,hashCode(),int,Returns the hash code of this HTTP cookie.,"

hashCode
public int hashCode()
Returns the hash code of this HTTP cookie. The result is the sum of
 hash code value of three significant components of this cookie: name,
 domain, and path. That is, the hash code is the value of the expression:
 
 getName().toLowerCase().hashCode()
 + getDomain().toLowerCase().hashCode()
 + getPath().hashCode()
 

Overrides:
hashCode in class Object
Returns:
this HTTP cookie's hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
HttpCookie,isHttpOnly(),boolean,Returns true if this cookie contains the HttpOnly attribute.,"

isHttpOnly
public boolean isHttpOnly()
Returns true if this cookie contains the HttpOnly
 attribute. This means that the cookie should not be accessible to
 scripting engines, like javascript.

Returns:
true if this cookie should be considered HTTPOnly
See Also:
setHttpOnly(boolean)


"
HttpCookie,parse(String header),static List<HttpCookie>,Constructs cookies from set-cookie or set-cookie2 header string.,"

parse
public static List<HttpCookie> parse(String header)
Constructs cookies from set-cookie or set-cookie2 header string.
 RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line
 may contain more than one cookie definitions, so this is a static
 utility method instead of another constructor.

Parameters:
header - a String specifying the set-cookie header. The header
         should start with ""set-cookie"", or ""set-cookie2"" token; or it
         should have no leading token at all.
Returns:
a List of cookie parsed from header line string
Throws:
IllegalArgumentException - if header string violates the cookie specification's syntax or
          the cookie name contains illegal characters.
NullPointerException - if the header string is null


"
HttpCookie,setComment(String purpose),void,Specifies a comment that describes a cookie's purpose.,"

setComment
public void setComment(String purpose)
Specifies a comment that describes a cookie's purpose.
 The comment is useful if the browser presents the cookie
 to the user. Comments are not supported by Netscape Version 0 cookies.

Parameters:
purpose - a String specifying the comment to display to the user
See Also:
getComment()


"
HttpCookie,setCommentURL(String purpose),void,Specifies a comment URL that describes a cookie's purpose.,"

setCommentURL
public void setCommentURL(String purpose)
Specifies a comment URL that describes a cookie's purpose.
 The comment URL is useful if the browser presents the cookie
 to the user. Comment URL is RFC 2965 only.

Parameters:
purpose - a String specifying the comment URL to display to the user
See Also:
getCommentURL()


"
HttpCookie,setDiscard(boolean discard),void,Specify whether user agent should discard the cookie unconditionally.,"

setDiscard
public void setDiscard(boolean discard)
Specify whether user agent should discard the cookie unconditionally.
 This is RFC 2965 only attribute.

Parameters:
discard - true indicates to discard cookie unconditionally
See Also:
getDiscard()


"
HttpCookie,setDomain(String pattern),void,Specifies the domain within which this cookie should be presented.,"

setDomain
public void setDomain(String pattern)
Specifies the domain within which this cookie should be presented.

  The form of the domain name is specified by RFC 2965. A domain
 name begins with a dot (.foo.com) and means that
 the cookie is visible to servers in a specified Domain Name System
 (DNS) zone (for example, www.foo.com, but not
 a.b.foo.com). By default, cookies are only returned
 to the server that sent them.

Parameters:
pattern - a String containing the domain name within which this
         cookie is visible; form is according to RFC 2965
See Also:
getDomain()


"
HttpCookie,setHttpOnly(boolean httpOnly),void,Indicates whether the cookie should be considered HTTP Only.,"

setHttpOnly
public void setHttpOnly(boolean httpOnly)
Indicates whether the cookie should be considered HTTP Only. If set to
 true it means the cookie should not be accessible to scripting
 engines like javascript.

Parameters:
httpOnly - if true make the cookie HTTP only, i.e. only visible as
         part of an HTTP request.
See Also:
isHttpOnly()


"
HttpCookie,setMaxAge(long expiry),void,Sets the maximum age of the cookie in seconds.,"

setMaxAge
public void setMaxAge(long expiry)
Sets the maximum age of the cookie in seconds.

  A positive value indicates that the cookie will expire
 after that many seconds have passed. Note that the value is
 the maximum age when the cookie will expire, not the cookie's
 current age.

  A negative value means that the cookie is not stored persistently
 and will be deleted when the Web browser exits. A zero value causes the
 cookie to be deleted.

Parameters:
expiry - an integer specifying the maximum age of the cookie in seconds;
         if zero, the cookie should be discarded immediately; otherwise,
         the cookie's max age is unspecified.
See Also:
getMaxAge()


"
HttpCookie,setPath(String uri),void,Specifies a path for the cookie to which the client should return the cookie.,"

setPath
public void setPath(String uri)
Specifies a path for the cookie to which the client should return
 the cookie.

  The cookie is visible to all the pages in the directory
 you specify, and all the pages in that directory's subdirectories.
 A cookie's path must include the servlet that set the cookie,
 for example, /catalog, which makes the cookie
 visible to all directories on the server under /catalog.

  Consult RFC 2965 (available on the Internet) for more
 information on setting path names for cookies.

Parameters:
uri - a String specifying a path
See Also:
getPath()


"
HttpCookie,setPortlist(String ports),void,"Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.","

setPortlist
public void setPortlist(String ports)
Specify the portlist of the cookie, which restricts the port(s)
 to which a cookie may be sent back in a Cookie header.

Parameters:
ports - a String specify the port list, which is comma separated
         series of digits
See Also:
getPortlist()


"
HttpCookie,setSecure(boolean flag),void,"Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL.","

setSecure
public void setSecure(boolean flag)
Indicates whether the cookie should only be sent using a secure protocol,
 such as HTTPS or SSL.

  The default value is false.

Parameters:
flag - If true, the cookie can only be sent over a secure
         protocol like HTTPS. If false, it can be sent over
         any protocol.
See Also:
getSecure()


"
HttpCookie,setValue(String newValue),void,Assigns a new value to a cookie after the cookie is created.,"

setValue
public void setValue(String newValue)
Assigns a new value to a cookie after the cookie is created.
 If you use a binary value, you may want to use BASE64 encoding.

  With Version 0 cookies, values should not contain white space,
 brackets, parentheses, equals signs, commas, double quotes, slashes,
 question marks, at signs, colons, and semicolons. Empty values may not
 behave the same way on all browsers.

Parameters:
newValue - a String specifying the new value
See Also:
getValue()


"
HttpCookie,setVersion(int v),void,Sets the version of the cookie protocol this cookie complies with.,"

setVersion
public void setVersion(int v)
Sets the version of the cookie protocol this cookie complies
 with. Version 0 complies with the original Netscape cookie
 specification. Version 1 complies with RFC 2965/2109.

Parameters:
v - 0 if the cookie should comply with the original Netscape
         specification; 1 if the cookie should comply with RFC 2965/2109
Throws:
IllegalArgumentException - if v is neither 0 nor 1
See Also:
getVersion()


"
HttpCookie,toString(),String,"Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading ""Cookie:"" token.","

toString
public String toString()
Constructs a cookie header string representation of this cookie,
 which is in the format defined by corresponding cookie specification,
 but without the leading ""Cookie:"" token.

Overrides:
toString in class Object
Returns:
a string form of the cookie. The string has the defined format


"
HttpURLConnection,disconnect(),abstract void,Indicates that other requests to the server are unlikely in the near future.,"

disconnect
public abstract void disconnect()
Indicates that other requests to the server
 are unlikely in the near future. Calling disconnect()
 should not imply that this HttpURLConnection
 instance can be reused for other requests.

"
HttpURLConnection,getErrorStream(),InputStream,Returns the error stream if the connection failed but the server sent useful data nonetheless.,"

getErrorStream
public InputStream getErrorStream()
Returns the error stream if the connection failed
 but the server sent useful data nonetheless. The
 typical example is when an HTTP server responds
 with a 404, which will cause a FileNotFoundException
 to be thrown in connect, but the server sent an HTML
 help page with suggestions as to what to do.

 This method will not cause a connection to be initiated.  If
 the connection was not connected, or if the server did not have
 an error while connecting or if the server had an error but
 no error data was sent, this method will return null. This is
 the default.

Returns:
an error stream if any, null if there have been no
 errors, the connection is not connected or the server sent no
 useful data.


"
HttpURLConnection,getFollowRedirects(),static boolean,Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.,"

getFollowRedirects
public static boolean getFollowRedirects()
Returns a boolean indicating
 whether or not HTTP redirects (3xx) should
 be automatically followed.

Returns:
true if HTTP redirects should
 be automatically followed, false if not.
See Also:
setFollowRedirects(boolean)


"
HttpURLConnection,getHeaderField(int n),String,Returns the value for the nth header field.,"

getHeaderField
public String getHeaderField(int n)
Returns the value for the nth header field.
 Some implementations may treat the 0th
 header field as special, i.e. as the status line returned by the HTTP
 server.
 
 This method can be used in conjunction with the
 getHeaderFieldKey method to iterate through all
 the headers in the message.

Overrides:
getHeaderField in class URLConnection
Parameters:
n - an index, where n>=0.
Returns:
the value of the nth header field,
          or null if the value does not exist.
See Also:
getHeaderFieldKey(int)


"
HttpURLConnection,"getHeaderFieldDate(String name, long Default)",long,Returns the value of the named field parsed as date.,"

getHeaderFieldDate
public long getHeaderFieldDate(String name,
                               long Default)
Description copied from class: URLConnection
Returns the value of the named field parsed as date.
 The result is the number of milliseconds since January 1, 1970 GMT
 represented by the named field.
 
 This form of getHeaderField exists because some
 connection types (e.g., http-ng) have pre-parsed
 headers. Classes for that connection type can override this method
 and short-circuit the parsing.

Overrides:
getHeaderFieldDate in class URLConnection
Parameters:
name - the name of the header field.
Default - a default value.
Returns:
the value of the field, parsed as a date. The value of the
          Default argument is returned if the field is
          missing or malformed.


"
HttpURLConnection,getHeaderFieldKey(int n),String,Returns the key for the nth header field.,"

getHeaderFieldKey
public String getHeaderFieldKey(int n)
Returns the key for the nth header field.
 Some implementations may treat the 0th
 header field as special, i.e. as the status line returned by the HTTP
 server. In this case, getHeaderField(0) returns the status
 line, but getHeaderFieldKey(0) returns null.

Overrides:
getHeaderFieldKey in class URLConnection
Parameters:
n - an index, where n >=0.
Returns:
the key for the nth header field,
          or null if the key does not exist.


"
HttpURLConnection,getInstanceFollowRedirects(),boolean,Returns the value of this HttpURLConnection's instanceFollowRedirects field.,"

getInstanceFollowRedirects
public boolean getInstanceFollowRedirects()
Returns the value of this HttpURLConnection's
 instanceFollowRedirects field.

Returns:
the value of this HttpURLConnection's
          instanceFollowRedirects field.
Since:
1.3
See Also:
instanceFollowRedirects, 
setInstanceFollowRedirects(boolean)


"
HttpURLConnection,getPermission(),Permission,Returns a SocketPermission object representing the permission necessary to connect to the destination host and port.,"

getPermission
public Permission getPermission()
                         throws IOException
Returns a SocketPermission object representing the
 permission necessary to connect to the destination host and port.

Overrides:
getPermission in class URLConnection
Returns:
a SocketPermission object representing the
         permission necessary to connect to the destination
         host and port.
Throws:
IOException - if an error occurs while computing
            the permission.


"
HttpURLConnection,getRequestMethod(),String,Get the request method.,"

getRequestMethod
public String getRequestMethod()
Get the request method.

Returns:
the HTTP request method
See Also:
setRequestMethod(java.lang.String)


"
HttpURLConnection,getResponseCode(),int,Gets the status code from an HTTP response message.,"

getResponseCode
public int getResponseCode()
                    throws IOException
Gets the status code from an HTTP response message.
 For example, in the case of the following status lines:
 
 HTTP/1.0 200 OK
 HTTP/1.0 401 Unauthorized
 
 It will return 200 and 401 respectively.
 Returns -1 if no code can be discerned
 from the response (i.e., the response is not valid HTTP).

Returns:
the HTTP Status-Code, or -1
Throws:
IOException - if an error occurred connecting to the server.


"
HttpURLConnection,getResponseMessage(),String,"Gets the HTTP response message, if any, returned along with the response code from a server.","

getResponseMessage
public String getResponseMessage()
                          throws IOException
Gets the HTTP response message, if any, returned along with the
 response code from a server.  From responses like:
 
 HTTP/1.0 200 OK
 HTTP/1.0 404 Not Found
 
 Extracts the Strings ""OK"" and ""Not Found"" respectively.
 Returns null if none could be discerned from the responses
 (the result was not valid HTTP).

Returns:
the HTTP response message, or null
Throws:
IOException - if an error occurred connecting to the server.


"
HttpURLConnection,setChunkedStreamingMode(int chunklen),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance.","

setChunkedStreamingMode
public void setChunkedStreamingMode(int chunklen)
This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is not
 known in advance. In this mode, chunked transfer encoding
 is used to send the request body. Note, not all HTTP servers
 support this mode.
 
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 
 This method must be called before the URLConnection is connected.

Parameters:
chunklen - The number of bytes to write in each chunk.
          If chunklen is less than or equal to zero, a default
          value will be used.
Throws:
IllegalStateException - if URLConnection is already connected
          or if a different streaming mode is already enabled.
Since:
1.5
See Also:
setFixedLengthStreamingMode(int)


"
HttpURLConnection,setFixedLengthStreamingMode(int contentLength),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.","

setFixedLengthStreamingMode
public void setFixedLengthStreamingMode(int contentLength)
This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is known in
 advance.
 
 An exception will be thrown if the application
 attempts to write more data than the indicated
 content-length, or if the application closes the OutputStream
 before writing the indicated amount.
 
 When output streaming is enabled, authentication
 and redirection cannot be handled automatically.
 A HttpRetryException will be thrown when reading
 the response if authentication or redirection are required.
 This exception can be queried for the details of the error.
 
 This method must be called before the URLConnection is connected.
 
NOTE: setFixedLengthStreamingMode(long) is recommended
 instead of this method as it allows larger content lengths to be set.

Parameters:
contentLength - The number of bytes which will be written
          to the OutputStream.
Throws:
IllegalStateException - if URLConnection is already connected
          or if a different streaming mode is already enabled.
IllegalArgumentException - if a content length less than
          zero is specified.
Since:
1.5
See Also:
setChunkedStreamingMode(int)


"
HttpURLConnection,setFixedLengthStreamingMode(long contentLength),void,"This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance.","

setFixedLengthStreamingMode
public void setFixedLengthStreamingMode(long contentLength)
This method is used to enable streaming of a HTTP request body
 without internal buffering, when the content length is known in
 advance.

  An exception will be thrown if the application attempts to write
 more data than the indicated content-length, or if the application
 closes the OutputStream before writing the indicated amount.

  When output streaming is enabled, authentication and redirection
 cannot be handled automatically. A HttpRetryException will
 be thrown when reading the response if authentication or redirection
 are required. This exception can be queried for the details of the
 error.

  This method must be called before the URLConnection is connected.

  The content length set by invoking this method takes precedence
 over any value set by setFixedLengthStreamingMode(int).

Parameters:
contentLength - The number of bytes which will be written to the OutputStream.
Throws:
IllegalStateException - if URLConnection is already connected or if a different
          streaming mode is already enabled.
IllegalArgumentException - if a content length less than zero is specified.
Since:
1.7


"
HttpURLConnection,setFollowRedirects(boolean set),static void,Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this class.,"

setFollowRedirects
public static void setFollowRedirects(boolean set)
Sets whether HTTP redirects  (requests with response code 3xx) should
 be automatically followed by this class.  True by default.  Applets
 cannot change this variable.
 
 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
set - a boolean indicating whether or not
 to follow HTTP redirects.
Throws:
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't
             allow the operation.
See Also:
SecurityManager.checkSetFactory(), 
getFollowRedirects()


"
HttpURLConnection,setInstanceFollowRedirects(boolean followRedirects),void,Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance.,"

setInstanceFollowRedirects
public void setInstanceFollowRedirects(boolean followRedirects)
Sets whether HTTP redirects (requests with response code 3xx) should
 be automatically followed by this HttpURLConnection
 instance.
 
 The default value comes from followRedirects, which defaults to
 true.

Parameters:
followRedirects - a boolean indicating
 whether or not to follow HTTP redirects.
Since:
1.3
See Also:
instanceFollowRedirects, 
getInstanceFollowRedirects()


"
HttpURLConnection,setRequestMethod(String method),void,"Set the method for the URL request, one of: GET POST HEAD OPTIONS PUT DELETE TRACE are legal, subject to protocol restrictions.","

setRequestMethod
public void setRequestMethod(String method)
                      throws ProtocolException
Set the method for the URL request, one of:
 
GET
  POST
  HEAD
  OPTIONS
  PUT
  DELETE
  TRACE
  are legal, subject to protocol restrictions.  The default
 method is GET.

Parameters:
method - the HTTP method
Throws:
ProtocolException - if the method cannot be reset or if
              the requested method isn't valid for HTTP.
SecurityException - if a security manager is set and the
              method is ""TRACE"", but the ""allowHttpTrace""
              NetPermission is not granted.
See Also:
getRequestMethod()


"
HttpURLConnection,usingProxy(),abstract boolean,Indicates if the connection is going through a proxy.,"

usingProxy
public abstract boolean usingProxy()
Indicates if the connection is going through a proxy.

Returns:
a boolean indicating if the connection is
 using a proxy.


"
IDN,toASCII(String input),static String,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490.","

toASCII
public static String toASCII(String input)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of RFC 3490.

  This convenience method works as if by invoking the
 two-argument counterpart as follows:
 
toASCII(input, 0);
 

Parameters:
input - the string to be processed
Returns:
the translated String
Throws:
IllegalArgumentException - if the input string doesn't conform to RFC 3490 specification


"
IDN,"toASCII(String input, int flag)",static String,"Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490.","

toASCII
public static String toASCII(String input,
                             int flag)
Translates a string from Unicode to ASCII Compatible Encoding (ACE),
 as defined by the ToASCII operation of RFC 3490.

 ToASCII operation can fail. ToASCII fails if any step of it fails.
 If ToASCII operation fails, an IllegalArgumentException will be thrown.
 In this case, the input string should not be used in an internationalized domain name.

  A label is an individual part of a domain name. The original ToASCII operation,
 as defined in RFC 3490, only operates on a single label. This method can handle
 both label and entire domain name, by assuming that labels in a domain name are
 always separated by dots. The following characters are recognized as dots:
 \u002E (full stop), \u3002 (ideographic full stop), \uFF0E (fullwidth full stop),
 and \uFF61 (halfwidth ideographic full stop). if dots are
 used as label separators, this method also changes all of them to \u002E (full stop)
 in output translated string.

Parameters:
input - the string to be processed
flag - process flag; can be 0 or any logical OR of possible flags
Returns:
the translated String
Throws:
IllegalArgumentException - if the input string doesn't conform to RFC 3490 specification


"
IDN,toUnicode(String input),static String,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490.","

toUnicode
public static String toUnicode(String input)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of RFC 3490.

  This convenience method works as if by invoking the
 two-argument counterpart as follows:
 
toUnicode(input, 0);
 

Parameters:
input - the string to be processed
Returns:
the translated String


"
IDN,"toUnicode(String input, int flag)",static String,"Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490.","

toUnicode
public static String toUnicode(String input,
                               int flag)
Translates a string from ASCII Compatible Encoding (ACE) to Unicode,
 as defined by the ToUnicode operation of RFC 3490.

 ToUnicode never fails. In case of any error, the input string is returned unmodified.

  A label is an individual part of a domain name. The original ToUnicode operation,
 as defined in RFC 3490, only operates on a single label. This method can handle
 both label and entire domain name, by assuming that labels in a domain name are
 always separated by dots. The following characters are recognized as dots:
 \u002E (full stop), \u3002 (ideographic full stop), \uFF0E (fullwidth full stop),
 and \uFF61 (halfwidth ideographic full stop).

Parameters:
input - the string to be processed
flag - process flag; can be 0 or any logical OR of possible flags
Returns:
the translated String


"
Inet4Address,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same IP address as
 this object.
 
 Two instances of InetAddress represent the same IP
 address if the length of the byte arrays returned by
 getAddress is the same for both, and each of the
 array components is the same for the byte arrays.

Overrides:
equals in class InetAddress
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
InetAddress.getAddress()


"
Inet4Address,getAddress(),byte[],Returns the raw IP address of this InetAddress object.,"

getAddress
public byte[] getAddress()
Returns the raw IP address of this InetAddress
 object. The result is in network byte order: the highest order
 byte of the address is in getAddress()[0].

Overrides:
getAddress in class InetAddress
Returns:
the raw IP address of this object.


"
Inet4Address,getHostAddress(),String,Returns the IP address string in textual presentation form.,"

getHostAddress
public String getHostAddress()
Returns the IP address string in textual presentation form.

Overrides:
getHostAddress in class InetAddress
Returns:
the raw IP address in a string format.
Since:
JDK1.0.2


"
Inet4Address,hashCode(),int,Returns a hashcode for this IP address.,"

hashCode
public int hashCode()
Returns a hashcode for this IP address.

Overrides:
hashCode in class InetAddress
Returns:
a hash code value for this IP address.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Inet4Address,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.,"

isAnyLocalAddress
public boolean isAnyLocalAddress()
Utility routine to check if the InetAddress in a wildcard address.

Overrides:
isAnyLocalAddress in class InetAddress
Returns:
a boolean indicating if the Inetaddress is
         a wildcard address.
Since:
1.4


"
Inet4Address,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.,"

isLinkLocalAddress
public boolean isLinkLocalAddress()
Utility routine to check if the InetAddress is an link local address.

Overrides:
isLinkLocalAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is
 a link local address; or false if address is not a link local unicast address.
Since:
1.4


"
Inet4Address,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.,"

isLoopbackAddress
public boolean isLoopbackAddress()
Utility routine to check if the InetAddress is a loopback address.

Overrides:
isLoopbackAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is
 a loopback address; or false otherwise.
Since:
1.4


"
Inet4Address,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.,"

isMCGlobal
public boolean isMCGlobal()
Utility routine to check if the multicast address has global scope.

Overrides:
isMCGlobal in class InetAddress
Returns:
a boolean indicating if the address has
         is a multicast address of global scope, false if it is not
         of global scope or it is not a multicast address
Since:
1.4


"
Inet4Address,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.,"

isMCLinkLocal
public boolean isMCLinkLocal()
Utility routine to check if the multicast address has link scope.

Overrides:
isMCLinkLocal in class InetAddress
Returns:
a boolean indicating if the address has
         is a multicast address of link-local scope, false if it is not
         of link-local scope or it is not a multicast address
Since:
1.4


"
Inet4Address,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.,"

isMCNodeLocal
public boolean isMCNodeLocal()
Utility routine to check if the multicast address has node scope.

Overrides:
isMCNodeLocal in class InetAddress
Returns:
a boolean indicating if the address has
         is a multicast address of node-local scope, false if it is not
         of node-local scope or it is not a multicast address
Since:
1.4


"
Inet4Address,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.,"

isMCOrgLocal
public boolean isMCOrgLocal()
Utility routine to check if the multicast address has organization scope.

Overrides:
isMCOrgLocal in class InetAddress
Returns:
a boolean indicating if the address has
         is a multicast address of organization-local scope,
         false if it is not of organization-local scope
         or it is not a multicast address
Since:
1.4


"
Inet4Address,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.,"

isMCSiteLocal
public boolean isMCSiteLocal()
Utility routine to check if the multicast address has site scope.

Overrides:
isMCSiteLocal in class InetAddress
Returns:
a boolean indicating if the address has
         is a multicast address of site-local scope, false if it is not
         of site-local scope or it is not a multicast address
Since:
1.4


"
Inet4Address,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.,"

isMulticastAddress
public boolean isMulticastAddress()
Utility routine to check if the InetAddress is an
 IP multicast address. IP multicast address is a Class D
 address i.e first four bits of the address are 1110.

Overrides:
isMulticastAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is
 an IP multicast address
Since:
JDK1.1


"
Inet4Address,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.,"

isSiteLocalAddress
public boolean isSiteLocalAddress()
Utility routine to check if the InetAddress is a site local address.

Overrides:
isSiteLocalAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is
 a site local address; or false if address is not a site local unicast address.
Since:
1.4


"
Inet6Address,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public boolean equals(Object obj)
Compares this object against the specified object. The result is true if and only if the argument is not null and it represents
 the same IP address as this object.

  Two instances of InetAddress represent the same IP address
 if the length of the byte arrays returned by getAddress is the
 same for both, and each of the array components is the same for the byte
 arrays.

Overrides:
equals in class InetAddress
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same; false otherwise.
See Also:
InetAddress.getAddress()


"
Inet6Address,getAddress(),byte[],Returns the raw IP address of this InetAddress object.,"

getAddress
public byte[] getAddress()
Returns the raw IP address of this InetAddress object. The result
 is in network byte order: the highest order byte of the address is in
 getAddress()[0].

Overrides:
getAddress in class InetAddress
Returns:
the raw IP address of this object.


"
Inet6Address,"getByAddress(String host, byte[] addr, int scope_id)",static Inet6Address,"Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value.","

getByAddress
public static Inet6Address getByAddress(String host,
                                        byte[] addr,
                                        int scope_id)
                                 throws UnknownHostException
Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is
 set to the given numeric value. The scope_id is not checked to determine
 if it corresponds to any interface on the system.
 See here for a description of IPv6
 scoped addresses.

Parameters:
host - the specified host
addr - the raw IP address in network byte order
scope_id - the numeric scope_id for the address.
Returns:
an Inet6Address object created from the raw IP address.
Throws:
UnknownHostException - if IP address is of illegal length.
Since:
1.5


"
Inet6Address,"getByAddress(String host, byte[] addr, NetworkInterface nif)",static Inet6Address,"Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr.","

getByAddress
public static Inet6Address getByAddress(String host,
                                        byte[] addr,
                                        NetworkInterface nif)
                                 throws UnknownHostException
Create an Inet6Address in the exact manner of InetAddress.getByAddress(String,byte[]) except that the IPv6 scope_id is
 set to the value corresponding to the given interface for the address
 type specified in addr. The call will fail with an
 UnknownHostException if the given interface does not have a numeric
 scope_id assigned for the given address type (eg. link-local or site-local).
 See here for a description of IPv6
 scoped addresses.

Parameters:
host - the specified host
addr - the raw IP address in network byte order
nif - an interface this address must be associated with.
Returns:
an Inet6Address object created from the raw IP address.
Throws:
UnknownHostException - if IP address is of illegal length, or if the interface does not
          have a numeric scope_id assigned for the given address type.
Since:
1.5


"
Inet6Address,getHostAddress(),String,Returns the IP address string in textual presentation.,"

getHostAddress
public String getHostAddress()
Returns the IP address string in textual presentation. If the instance
 was created specifying a scope identifier then the scope id is appended
 to the IP address preceded by a ""%"" (per-cent) character. This can be
 either a numeric value or a string, depending on which was used to create
 the instance.

Overrides:
getHostAddress in class InetAddress
Returns:
the raw IP address in a string format.


"
Inet6Address,getScopedInterface(),NetworkInterface,"Returns the scoped interface, if this instance was created with with a scoped interface.","

getScopedInterface
public NetworkInterface getScopedInterface()
Returns the scoped interface, if this instance was created with
 with a scoped interface.

Returns:
the scoped interface, or null if not set.
Since:
1.5


"
Inet6Address,getScopeId(),int,"Returns the numeric scopeId, if this instance is associated with an interface.","

getScopeId
public int getScopeId()
Returns the numeric scopeId, if this instance is associated with
 an interface. If no scoped_id is set, the returned value is zero.

Returns:
the scopeId, or zero if not set.
Since:
1.5


"
Inet6Address,hashCode(),int,Returns a hashcode for this IP address.,"

hashCode
public int hashCode()
Returns a hashcode for this IP address.

Overrides:
hashCode in class InetAddress
Returns:
a hash code value for this IP address.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Inet6Address,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.,"

isAnyLocalAddress
public boolean isAnyLocalAddress()
Utility routine to check if the InetAddress in a wildcard address.

Overrides:
isAnyLocalAddress in class InetAddress
Returns:
a boolean indicating if the Inetaddress is
         a wildcard address.
Since:
1.4


"
Inet6Address,isIPv4CompatibleAddress(),boolean,Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address.,"

isIPv4CompatibleAddress
public boolean isIPv4CompatibleAddress()
Utility routine to check if the InetAddress is an
 IPv4 compatible IPv6 address.

Returns:
a boolean indicating if the InetAddress is an IPv4
         compatible IPv6 address; or false if address is IPv4 address.
Since:
1.4


"
Inet6Address,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.,"

isLinkLocalAddress
public boolean isLinkLocalAddress()
Utility routine to check if the InetAddress is an link local address.

Overrides:
isLinkLocalAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is a link local
         address; or false if address is not a link local unicast address.
Since:
1.4


"
Inet6Address,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.,"

isLoopbackAddress
public boolean isLoopbackAddress()
Utility routine to check if the InetAddress is a loopback address.

Overrides:
isLoopbackAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is a loopback
         address; or false otherwise.
Since:
1.4


"
Inet6Address,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.,"

isMCGlobal
public boolean isMCGlobal()
Utility routine to check if the multicast address has global scope.

Overrides:
isMCGlobal in class InetAddress
Returns:
a boolean indicating if the address has is a multicast
         address of global scope, false if it is not of global scope or
         it is not a multicast address
Since:
1.4


"
Inet6Address,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.,"

isMCLinkLocal
public boolean isMCLinkLocal()
Utility routine to check if the multicast address has link scope.

Overrides:
isMCLinkLocal in class InetAddress
Returns:
a boolean indicating if the address has is a multicast
         address of link-local scope, false if it is not of link-local
         scope or it is not a multicast address
Since:
1.4


"
Inet6Address,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.,"

isMCNodeLocal
public boolean isMCNodeLocal()
Utility routine to check if the multicast address has node scope.

Overrides:
isMCNodeLocal in class InetAddress
Returns:
a boolean indicating if the address has is a multicast
         address of node-local scope, false if it is not of node-local
         scope or it is not a multicast address
Since:
1.4


"
Inet6Address,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.,"

isMCOrgLocal
public boolean isMCOrgLocal()
Utility routine to check if the multicast address has organization scope.

Overrides:
isMCOrgLocal in class InetAddress
Returns:
a boolean indicating if the address has is a multicast
         address of organization-local scope, false if it is not of
         organization-local scope or it is not a multicast address
Since:
1.4


"
Inet6Address,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.,"

isMCSiteLocal
public boolean isMCSiteLocal()
Utility routine to check if the multicast address has site scope.

Overrides:
isMCSiteLocal in class InetAddress
Returns:
a boolean indicating if the address has is a multicast
         address of site-local scope, false if it is not  of site-local
         scope or it is not a multicast address
Since:
1.4


"
Inet6Address,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.,"

isMulticastAddress
public boolean isMulticastAddress()
Utility routine to check if the InetAddress is an IP multicast
 address. 11111111 at the start of the address identifies the
 address as being a multicast address.

Overrides:
isMulticastAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is an IP
         multicast address
Since:
JDK1.1


"
Inet6Address,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.,"

isSiteLocalAddress
public boolean isSiteLocalAddress()
Utility routine to check if the InetAddress is a site local address.

Overrides:
isSiteLocalAddress in class InetAddress
Returns:
a boolean indicating if the InetAddress is a site local
         address; or false if address is not a site local unicast address.
Since:
1.4


"
InetAddress,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same IP address as
 this object.
 
 Two instances of InetAddress represent the same IP
 address if the length of the byte arrays returned by
 getAddress is the same for both, and each of the
 array components is the same for the byte arrays.

Overrides:
equals in class Object
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
getAddress()


"
InetAddress,getAddress(),byte[],Returns the raw IP address of this InetAddress object.,"

getAddress
public byte[] getAddress()
Returns the raw IP address of this InetAddress
 object. The result is in network byte order: the highest order
 byte of the address is in getAddress()[0].

Returns:
the raw IP address of this object.


"
InetAddress,getAllByName(String host),static InetAddress[],"Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system.","

getAllByName
public static InetAddress[] getAllByName(String host)
                                  throws UnknownHostException
Given the name of a host, returns an array of its IP addresses,
 based on the configured name service on the system.

  The host name can either be a machine name, such as
 ""java.sun.com"", or a textual representation of its IP
 address. If a literal IP address is supplied, only the
 validity of the address format is checked.

  For host specified in literal IPv6 address,
 either the form defined in RFC 2732 or the literal IPv6 address
 format defined in RFC 2373 is accepted. A literal IPv6 address may
 also be qualified by appending a scoped zone identifier or scope_id.
 The syntax and usage of scope_ids is described
 here.
  If the host is null then an InetAddress
 representing an address of the loopback interface is returned.
 See RFC 3330
 section 2 and RFC 2373
 section 2.5.3. 
 If there is a security manager and host is not
 null and host.length()  is not equal to zero, the
 security manager's
 checkConnect method is called
 with the hostname and -1
 as its arguments to see if the operation is allowed.

Parameters:
host - the name of the host, or null.
Returns:
an array of all the IP addresses for a given host name.
Throws:
UnknownHostException - if no IP address for the
               host could be found, or if a scope_id was specified
               for a global IPv6 address.
SecurityException - if a security manager exists and its
               checkConnect method doesn't allow the operation.
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
InetAddress,getByAddress(byte[] addr),static InetAddress,Returns an InetAddress object given the raw IP address .,"

getByAddress
public static InetAddress getByAddress(byte[] addr)
                                throws UnknownHostException
Returns an InetAddress object given the raw IP address .
 The argument is in network byte order: the highest order
 byte of the address is in getAddress()[0].

  This method doesn't block, i.e. no reverse name service lookup
 is performed.

  IPv4 address byte array must be 4 bytes long and IPv6 byte array
 must be 16 bytes long

Parameters:
addr - the raw IP address in network byte order
Returns:
an InetAddress object created from the raw IP address.
Throws:
UnknownHostException - if IP address is of illegal length
Since:
1.4


"
InetAddress,"getByAddress(String host, byte[] addr)",static InetAddress,Creates an InetAddress based on the provided host name and IP address.,"

getByAddress
public static InetAddress getByAddress(String host,
                                       byte[] addr)
                                throws UnknownHostException
Creates an InetAddress based on the provided host name and IP address.
 No name service is checked for the validity of the address.

  The host name can either be a machine name, such as
 ""java.sun.com"", or a textual representation of its IP
 address.
  No validity checking is done on the host name either.

  If addr specifies an IPv4 address an instance of Inet4Address
 will be returned; otherwise, an instance of Inet6Address
 will be returned.

  IPv4 address byte array must be 4 bytes long and IPv6 byte array
 must be 16 bytes long

Parameters:
host - the specified host
addr - the raw IP address in network byte order
Returns:
an InetAddress object created from the raw IP address.
Throws:
UnknownHostException - if IP address is of illegal length
Since:
1.4


"
InetAddress,getByName(String host),static InetAddress,"Determines the IP address of a host, given the host's name.","

getByName
public static InetAddress getByName(String host)
                             throws UnknownHostException
Determines the IP address of a host, given the host's name.

  The host name can either be a machine name, such as
 ""java.sun.com"", or a textual representation of its
 IP address. If a literal IP address is supplied, only the
 validity of the address format is checked.

  For host specified in literal IPv6 address,
 either the form defined in RFC 2732 or the literal IPv6 address
 format defined in RFC 2373 is accepted. IPv6 scoped addresses are also
 supported. See here for a description of IPv6
 scoped addresses.

  If the host is null then an InetAddress
 representing an address of the loopback interface is returned.
 See RFC 3330
 section 2 and RFC 2373
 section 2.5.3. 

Parameters:
host - the specified host, or null.
Returns:
an IP address for the given host name.
Throws:
UnknownHostException - if no IP address for the
               host could be found, or if a scope_id was specified
               for a global IPv6 address.
SecurityException - if a security manager exists
             and its checkConnect method doesn't allow the operation


"
InetAddress,getCanonicalHostName(),String,Gets the fully qualified domain name for this IP address.,"

getCanonicalHostName
public String getCanonicalHostName()
Gets the fully qualified domain name for this IP address.
 Best effort method, meaning we may not be able to return
 the FQDN depending on the underlying system configuration.

 If there is a security manager, this method first
 calls its checkConnect method
 with the hostname and -1
 as its arguments to see if the calling code is allowed to know
 the hostname for this IP address, i.e., to connect to the host.
 If the operation is not allowed, it will return
 the textual representation of the IP address.

Returns:
the fully qualified domain name for this IP address,
    or if the operation is not allowed by the security check,
    the textual representation of the IP address.
Since:
1.4
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
InetAddress,getHostAddress(),String,Returns the IP address string in textual presentation.,"

getHostAddress
public String getHostAddress()
Returns the IP address string in textual presentation.

Returns:
the raw IP address in a string format.
Since:
JDK1.0.2


"
InetAddress,getHostName(),String,Gets the host name for this IP address.,"

getHostName
public String getHostName()
Gets the host name for this IP address.

 If this InetAddress was created with a host name,
 this host name will be remembered and returned;
 otherwise, a reverse name lookup will be performed
 and the result will be returned based on the system
 configured name lookup service. If a lookup of the name service
 is required, call
 getCanonicalHostName.

 If there is a security manager, its
 checkConnect method is first called
 with the hostname and -1
 as its arguments to see if the operation is allowed.
 If the operation is not allowed, it will return
 the textual representation of the IP address.

Returns:
the host name for this IP address, or if the operation
    is not allowed by the security check, the textual
    representation of the IP address.
See Also:
getCanonicalHostName(), 
SecurityManager.checkConnect(java.lang.String, int)


"
InetAddress,getLocalHost(),static InetAddress,Returns the address of the local host.,"

getLocalHost
public static InetAddress getLocalHost()
                                throws UnknownHostException
Returns the address of the local host. This is achieved by retrieving
 the name of the host from the system, then resolving that name into
 an InetAddress.

 Note: The resolved address may be cached for a short period of time.
 
If there is a security manager, its
 checkConnect method is called
 with the local host name and -1
 as its arguments to see if the operation is allowed.
 If the operation is not allowed, an InetAddress representing
 the loopback address is returned.

Returns:
the address of the local host.
Throws:
UnknownHostException - if the local host name could not
             be resolved into an address.
See Also:
SecurityManager.checkConnect(java.lang.String, int), 
getByName(java.lang.String)


"
InetAddress,getLoopbackAddress(),static InetAddress,Returns the loopback address.,"

getLoopbackAddress
public static InetAddress getLoopbackAddress()
Returns the loopback address.
 
 The InetAddress returned will represent the IPv4
 loopback address, 127.0.0.1, or the IPv6 loopback
 address, ::1. The IPv4 loopback address returned
 is only one of many in the form 127.*.*.*

Returns:
the InetAddress loopback instance.
Since:
1.7


"
InetAddress,hashCode(),int,Returns a hashcode for this IP address.,"

hashCode
public int hashCode()
Returns a hashcode for this IP address.

Overrides:
hashCode in class Object
Returns:
a hash code value for this IP address.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
InetAddress,isAnyLocalAddress(),boolean,Utility routine to check if the InetAddress in a wildcard address.,"

isAnyLocalAddress
public boolean isAnyLocalAddress()
Utility routine to check if the InetAddress in a wildcard address.

Returns:
a boolean indicating if the Inetaddress is
         a wildcard address.
Since:
1.4


"
InetAddress,isLinkLocalAddress(),boolean,Utility routine to check if the InetAddress is an link local address.,"

isLinkLocalAddress
public boolean isLinkLocalAddress()
Utility routine to check if the InetAddress is an link local address.

Returns:
a boolean indicating if the InetAddress is
 a link local address; or false if address is not a link local unicast address.
Since:
1.4


"
InetAddress,isLoopbackAddress(),boolean,Utility routine to check if the InetAddress is a loopback address.,"

isLoopbackAddress
public boolean isLoopbackAddress()
Utility routine to check if the InetAddress is a loopback address.

Returns:
a boolean indicating if the InetAddress is
 a loopback address; or false otherwise.
Since:
1.4


"
InetAddress,isMCGlobal(),boolean,Utility routine to check if the multicast address has global scope.,"

isMCGlobal
public boolean isMCGlobal()
Utility routine to check if the multicast address has global scope.

Returns:
a boolean indicating if the address has
         is a multicast address of global scope, false if it is not
         of global scope or it is not a multicast address
Since:
1.4


"
InetAddress,isMCLinkLocal(),boolean,Utility routine to check if the multicast address has link scope.,"

isMCLinkLocal
public boolean isMCLinkLocal()
Utility routine to check if the multicast address has link scope.

Returns:
a boolean indicating if the address has
         is a multicast address of link-local scope, false if it is not
         of link-local scope or it is not a multicast address
Since:
1.4


"
InetAddress,isMCNodeLocal(),boolean,Utility routine to check if the multicast address has node scope.,"

isMCNodeLocal
public boolean isMCNodeLocal()
Utility routine to check if the multicast address has node scope.

Returns:
a boolean indicating if the address has
         is a multicast address of node-local scope, false if it is not
         of node-local scope or it is not a multicast address
Since:
1.4


"
InetAddress,isMCOrgLocal(),boolean,Utility routine to check if the multicast address has organization scope.,"

isMCOrgLocal
public boolean isMCOrgLocal()
Utility routine to check if the multicast address has organization scope.

Returns:
a boolean indicating if the address has
         is a multicast address of organization-local scope,
         false if it is not of organization-local scope
         or it is not a multicast address
Since:
1.4


"
InetAddress,isMCSiteLocal(),boolean,Utility routine to check if the multicast address has site scope.,"

isMCSiteLocal
public boolean isMCSiteLocal()
Utility routine to check if the multicast address has site scope.

Returns:
a boolean indicating if the address has
         is a multicast address of site-local scope, false if it is not
         of site-local scope or it is not a multicast address
Since:
1.4


"
InetAddress,isMulticastAddress(),boolean,Utility routine to check if the InetAddress is an IP multicast address.,"

isMulticastAddress
public boolean isMulticastAddress()
Utility routine to check if the InetAddress is an
 IP multicast address.

Returns:
a boolean indicating if the InetAddress is
 an IP multicast address
Since:
JDK1.1


"
InetAddress,isReachable(int timeout),boolean,Test whether that address is reachable.,"

isReachable
public boolean isReachable(int timeout)
                    throws IOException
Test whether that address is reachable. Best effort is made by the
 implementation to try to reach the host, but firewalls and server
 configuration may block requests resulting in a unreachable status
 while some specific ports may be accessible.
 A typical implementation will use ICMP ECHO REQUESTs if the
 privilege can be obtained, otherwise it will try to establish
 a TCP connection on port 7 (Echo) of the destination host.
 
 The timeout value, in milliseconds, indicates the maximum amount of time
 the try should take. If the operation times out before getting an
 answer, the host is deemed unreachable. A negative value will result
 in an IllegalArgumentException being thrown.

Parameters:
timeout - the time, in milliseconds, before the call aborts
Returns:
a boolean indicating if the address is reachable.
Throws:
IOException - if a network error occurs
IllegalArgumentException - if timeout is negative.
Since:
1.5


"
InetAddress,"isReachable(NetworkInterface netif, int ttl, int timeout)",boolean,Test whether that address is reachable.,"

isReachable
public boolean isReachable(NetworkInterface netif,
                           int ttl,
                           int timeout)
                    throws IOException
Test whether that address is reachable. Best effort is made by the
 implementation to try to reach the host, but firewalls and server
 configuration may block requests resulting in a unreachable status
 while some specific ports may be accessible.
 A typical implementation will use ICMP ECHO REQUESTs if the
 privilege can be obtained, otherwise it will try to establish
 a TCP connection on port 7 (Echo) of the destination host.
 
 The network interface and ttl parameters
 let the caller specify which network interface the test will go through
 and the maximum number of hops the packets should go through.
 A negative value for the ttl will result in an
 IllegalArgumentException being thrown.
 
 The timeout value, in milliseconds, indicates the maximum amount of time
 the try should take. If the operation times out before getting an
 answer, the host is deemed unreachable. A negative value will result
 in an IllegalArgumentException being thrown.

Parameters:
netif - the NetworkInterface through which the
                    test will be done, or null for any interface
ttl - the maximum numbers of hops to try or 0 for the
                  default
timeout - the time, in milliseconds, before the call aborts
Returns:
a booleanindicating if the address is reachable.
Throws:
IllegalArgumentException - if either timeout
                          or ttl are negative.
IOException - if a network error occurs
Since:
1.5


"
InetAddress,isSiteLocalAddress(),boolean,Utility routine to check if the InetAddress is a site local address.,"

isSiteLocalAddress
public boolean isSiteLocalAddress()
Utility routine to check if the InetAddress is a site local address.

Returns:
a boolean indicating if the InetAddress is
 a site local address; or false if address is not a site local unicast address.
Since:
1.4


"
InetAddress,toString(),String,Converts this IP address to a String.,"

toString
public String toString()
Converts this IP address to a String. The
 string returned is of the form: hostname / literal IP
 address.

 If the host name is unresolved, no reverse name service lookup
 is performed. The hostname part will be represented by an empty string.

Overrides:
toString in class Object
Returns:
a string representation of this IP address.


"
InetSocketAddress,"createUnresolved(String host, int port)",static InetSocketAddress,Creates an unresolved socket address from a hostname and a port number.,"

createUnresolved
public static InetSocketAddress createUnresolved(String host,
                                                 int port)
Creates an unresolved socket address from a hostname and a port number.
 
 No attempt will be made to resolve the hostname into an InetAddress.
 The address will be flagged as unresolved.
 
 A valid port value is between 0 and 65535.
 A port number of zero will let the system pick up an
 ephemeral port in a bind operation.
 

Parameters:
host - the Host name
port - The port number
Returns:
a InetSocketAddress representing the unresolved
          socket address
Throws:
IllegalArgumentException - if the port parameter is outside
                  the range of valid port values, or if the hostname
                  parameter is null.
Since:
1.5
See Also:
isUnresolved()


"
InetSocketAddress,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public final boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same address as
 this object.
 
 Two instances of InetSocketAddress represent the same
 address if both the InetAddresses (or hostnames if it is unresolved) and port
 numbers are equal.
 If both addresses are unresolved, then the hostname and the port number
 are compared.

 Note: Hostnames are case insensitive. e.g. ""FooBar"" and ""foobar"" are
 considered equal.

Overrides:
equals in class Object
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
InetAddress.equals(java.lang.Object)


"
InetSocketAddress,getAddress(),InetAddress,Gets the InetAddress.,"

getAddress
public final InetAddress getAddress()
Gets the InetAddress.

Returns:
the InetAdress or null if it is unresolved.


"
InetSocketAddress,getHostName(),String,Gets the hostname.,"

getHostName
public final String getHostName()
Gets the hostname.
 Note: This method may trigger a name service reverse lookup if the
 address was created with a literal IP address.

Returns:
the hostname part of the address.


"
InetSocketAddress,getHostString(),String,"Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal).","

getHostString
public final String getHostString()
Returns the hostname, or the String form of the address if it
 doesn't have a hostname (it was created using a literal).
 This has the benefit of not attempting a reverse lookup.

Returns:
the hostname, or String representation of the address.
Since:
1.7


"
InetSocketAddress,getPort(),int,Gets the port number.,"

getPort
public final int getPort()
Gets the port number.

Returns:
the port number.


"
InetSocketAddress,hashCode(),int,Returns a hashcode for this socket address.,"

hashCode
public final int hashCode()
Returns a hashcode for this socket address.

Overrides:
hashCode in class Object
Returns:
a hash code value for this socket address.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
InetSocketAddress,isUnresolved(),boolean,Checks whether the address has been resolved or not.,"

isUnresolved
public final boolean isUnresolved()
Checks whether the address has been resolved or not.

Returns:
true if the hostname couldn't be resolved into
          an InetAddress.


"
InetSocketAddress,toString(),String,Constructs a string representation of this InetSocketAddress.,"

toString
public String toString()
Constructs a string representation of this InetSocketAddress.
 This String is constructed by calling toString() on the InetAddress
 and concatenating the port number (with a colon). If the address
 is unresolved then the part before the colon will only contain the hostname.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
InterfaceAddress,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same interface address as
 this object.
 
 Two instances of InterfaceAddress represent the same
 address if the InetAddress, the prefix length and the broadcast are
 the same for both.

Overrides:
equals in class Object
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
hashCode()


"
InterfaceAddress,getAddress(),InetAddress,Returns an InetAddress for this address.,"

getAddress
public InetAddress getAddress()
Returns an InetAddress for this address.

Returns:
the InetAddress for this address.


"
InterfaceAddress,getBroadcast(),InetAddress,Returns an InetAddress for the broadcast address for this InterfaceAddress.,"

getBroadcast
public InetAddress getBroadcast()
Returns an InetAddress for the broadcast address
 for this InterfaceAddress.
 
 Only IPv4 networks have broadcast address therefore, in the case
 of an IPv6 network, null will be returned.

Returns:
the InetAddress representing the broadcast
         address or null if there is no broadcast address.


"
InterfaceAddress,getNetworkPrefixLength(),short,Returns the network prefix length for this address.,"

getNetworkPrefixLength
public short getNetworkPrefixLength()
Returns the network prefix length for this address. This is also known
 as the subnet mask in the context of IPv4 addresses.
 Typical IPv4 values would be 8 (255.0.0.0), 16 (255.255.0.0)
 or 24 (255.255.255.0). 
 Typical IPv6 values would be 128 (::1/128) or 10 (fe80::203:baff:fe27:1243/10)

Returns:
a short representing the prefix length for the
         subnet of that address.


"
InterfaceAddress,hashCode(),int,Returns a hashcode for this Interface address.,"

hashCode
public int hashCode()
Returns a hashcode for this Interface address.

Overrides:
hashCode in class Object
Returns:
a hash code value for this Interface address.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
InterfaceAddress,toString(),String,Converts this Interface address to a String.,"

toString
public String toString()
Converts this Interface address to a String. The
 string returned is of the form: InetAddress / prefix length [ broadcast address ].

Overrides:
toString in class Object
Returns:
a string representation of this Interface address.


"
JarURLConnection,getAttributes(),Attributes,"Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise.","

getAttributes
public Attributes getAttributes()
                         throws IOException
Return the Attributes object for this connection if the URL
 for it points to a JAR file entry, null otherwise.

Returns:
the Attributes object for this connection if the URL
 for it points to a JAR file entry, null otherwise.
Throws:
IOException - if getting the JAR entry causes an
 IOException to be thrown.
See Also:
getJarEntry()


"
JarURLConnection,getCertificates(),Certificate[],"Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise.","

getCertificates
public Certificate[] getCertificates()
                              throws IOException
Return the Certificate object for this connection if the URL
 for it points to a JAR file entry, null otherwise. This method
 can only be called once
 the connection has been completely verified by reading
 from the input stream until the end of the stream has been
 reached. Otherwise, this method will return null

Returns:
the Certificate object for this connection if the URL
 for it points to a JAR file entry, null otherwise.
Throws:
IOException - if getting the JAR entry causes an
 IOException to be thrown.
See Also:
getJarEntry()


"
JarURLConnection,getEntryName(),String,Return the entry name for this connection.,"

getEntryName
public String getEntryName()
Return the entry name for this connection. This method
 returns null if the JAR file URL corresponding to this
 connection points to a JAR file and not a JAR file entry.

Returns:
the entry name for this connection, if any.


"
JarURLConnection,getJarEntry(),JarEntry,"Return the JAR entry object for this connection, if any.","

getJarEntry
public JarEntry getJarEntry()
                     throws IOException
Return the JAR entry object for this connection, if any. This
 method returns null if the JAR file URL corresponding to this
 connection points to a JAR file and not a JAR file entry.

Returns:
the JAR entry object for this connection, or null if
 the JAR URL for this connection points to a JAR file.
Throws:
IOException - if getting the JAR file for this
 connection causes an IOException to be thrown.
See Also:
getJarFile(), 
getJarEntry()


"
JarURLConnection,getJarFile(),abstract JarFile,Return the JAR file for this connection.,"

getJarFile
public abstract JarFile getJarFile()
                            throws IOException
Return the JAR file for this connection.

Returns:
the JAR file for this connection. If the connection is
 a connection to an entry of a JAR file, the JAR file object is
 returned
Throws:
IOException - if an IOException occurs while trying to
 connect to the JAR file for this connection.
See Also:
URLConnection.connect()


"
JarURLConnection,getJarFileURL(),URL,Returns the URL for the Jar file for this connection.,"

getJarFileURL
public URL getJarFileURL()
Returns the URL for the Jar file for this connection.

Returns:
the URL for the Jar file for this connection.


"
JarURLConnection,getMainAttributes(),Attributes,Returns the main Attributes for the JAR file for this connection.,"

getMainAttributes
public Attributes getMainAttributes()
                             throws IOException
Returns the main Attributes for the JAR file for this
 connection.

Returns:
the main Attributes for the JAR file for this
 connection.
Throws:
IOException - if getting the manifest causes an
 IOException to be thrown.
See Also:
getJarFile(), 
getManifest()


"
JarURLConnection,getManifest(),Manifest,"Returns the Manifest for this connection, or null if none.","

getManifest
public Manifest getManifest()
                     throws IOException
Returns the Manifest for this connection, or null if none.

Returns:
the manifest object corresponding to the JAR file object
 for this connection.
Throws:
IOException - if getting the JAR file for this
 connection causes an IOException to be thrown.
See Also:
getJarFile()


"
MulticastSocket,getInterface(),InetAddress,Retrieve the address of the network interface used for multicast packets.,"

getInterface
public InetAddress getInterface()
                         throws SocketException
Retrieve the address of the network interface used for
 multicast packets.

Returns:
An InetAddress representing
  the address of the network interface used for
  multicast packets.
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
See Also:
setInterface(java.net.InetAddress)


"
MulticastSocket,getLoopbackMode(),boolean,Get the setting for local loopback of multicast datagrams.,"

getLoopbackMode
public boolean getLoopbackMode()
                        throws SocketException
Get the setting for local loopback of multicast datagrams.

Returns:
true if the LoopbackMode has been disabled
Throws:
SocketException - if an error occurs while getting the value
Since:
1.4
See Also:
setLoopbackMode(boolean)


"
MulticastSocket,getNetworkInterface(),NetworkInterface,Get the multicast network interface set.,"

getNetworkInterface
public NetworkInterface getNetworkInterface()
                                     throws SocketException
Get the multicast network interface set.

Returns:
the multicast NetworkInterface currently set
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setNetworkInterface(NetworkInterface)


"
MulticastSocket,getTimeToLive(),int,Get the default time-to-live for multicast packets sent out on the socket.,"

getTimeToLive
public int getTimeToLive()
                  throws IOException
Get the default time-to-live for multicast packets sent out on
 the socket.

Returns:
the default time-to-live value
Throws:
IOException - if an I/O exception occurs while
 getting the default time-to-live value
See Also:
setTimeToLive(int)


"
MulticastSocket,getTTL(),byte,"Deprecated. use the getTimeToLive method instead, which returns an int instead of a byte.","

getTTL
@Deprecated
public byte getTTL()
                        throws IOException
Deprecated. use the getTimeToLive method instead, which returns
 an int instead of a byte.
Get the default time-to-live for multicast packets sent out on
 the socket.

Returns:
the default time-to-live value
Throws:
IOException - if an I/O exception occurs
 while getting the default time-to-live value
See Also:
setTTL(byte)


"
MulticastSocket,joinGroup(InetAddress mcastaddr),void,Joins a multicast group.,"

joinGroup
public void joinGroup(InetAddress mcastaddr)
               throws IOException
Joins a multicast group. Its behavior may be affected by
 setInterface or setNetworkInterface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to join
Throws:
IOException - if there is an error joining
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the join.
See Also:
SecurityManager.checkMulticast(InetAddress)


"
MulticastSocket,"joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)",void,Joins the specified multicast group at the specified interface.,"

joinGroup
public void joinGroup(SocketAddress mcastaddr,
                      NetworkInterface netIf)
               throws IOException
Joins the specified multicast group at the specified interface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to join
netIf - specifies the local interface to receive multicast
        datagram packets, or null to defer to the interface set by
       setInterface(InetAddress) or
       setNetworkInterface(NetworkInterface)
Throws:
IOException - if there is an error joining
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the join.
IllegalArgumentException - if mcastaddr is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4
See Also:
SecurityManager.checkMulticast(InetAddress)


"
MulticastSocket,leaveGroup(InetAddress mcastaddr),void,Leave a multicast group.,"

leaveGroup
public void leaveGroup(InetAddress mcastaddr)
                throws IOException
Leave a multicast group. Its behavior may be affected by
 setInterface or setNetworkInterface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to leave
Throws:
IOException - if there is an error leaving
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the operation.
See Also:
SecurityManager.checkMulticast(InetAddress)


"
MulticastSocket,"leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)",void,Leave a multicast group on a specified local interface.,"

leaveGroup
public void leaveGroup(SocketAddress mcastaddr,
                       NetworkInterface netIf)
                throws IOException
Leave a multicast group on a specified local interface.

 If there is a security manager, this method first
 calls its checkMulticast method
 with the mcastaddr argument
 as its argument.

Parameters:
mcastaddr - is the multicast address to leave
netIf - specifies the local interface or null to defer
             to the interface set by
             setInterface(InetAddress) or
             setNetworkInterface(NetworkInterface)
Throws:
IOException - if there is an error leaving
 or when the address is not a multicast address.
SecurityException - if a security manager exists and its
 checkMulticast method doesn't allow the operation.
IllegalArgumentException - if mcastaddr is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4
See Also:
SecurityManager.checkMulticast(InetAddress)


"
MulticastSocket,"send(DatagramPacket p, byte ttl)",void,Deprecated. Use the following code or its equivalent instead: ...... int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ......,"

send
@Deprecated
public void send(DatagramPacket p,
                             byte ttl)
                      throws IOException
Deprecated. Use the following code or its equivalent instead:
  ......
  int ttl = mcastSocket.getTimeToLive();
  mcastSocket.setTimeToLive(newttl);
  mcastSocket.send(p);
  mcastSocket.setTimeToLive(ttl);
  ......
Sends a datagram packet to the destination, with a TTL (time-
 to-live) other than the default for the socket.  This method
 need only be used in instances where a particular TTL is desired;
 otherwise it is preferable to set a TTL once on the socket, and
 use that default TTL for all packets.  This method does not
  alter the default TTL for the socket. Its behavior may be
 affected by setInterface.

 If there is a security manager, this method first performs some
 security checks. First, if p.getAddress().isMulticastAddress()
 is true, this method calls the
 security manager's checkMulticast method
 with p.getAddress() and ttl as its arguments.
 If the evaluation of that expression is false,
 this method instead calls the security manager's
 checkConnect method with arguments
 p.getAddress().getHostAddress() and
 p.getPort(). Each call to a security manager method
 could result in a SecurityException if the operation is not allowed.

Parameters:
p - is the packet to be sent. The packet should contain
 the destination multicast ip address and the data to be sent.
 One does not need to be the member of the group to send
 packets to a destination multicast address.
ttl - optional time to live for multicast packet.
 default ttl is 1.
Throws:
IOException - is raised if an error occurs i.e
 error while setting ttl.
SecurityException - if a security manager exists and its
             checkMulticast or checkConnect
             method doesn't allow the send.
See Also:
DatagramSocket.send(java.net.DatagramPacket), 
DatagramSocket.receive(java.net.DatagramPacket), 
SecurityManager.checkMulticast(java.net.InetAddress, byte), 
SecurityManager.checkConnect(java.lang.String, int)


"
MulticastSocket,setInterface(InetAddress inf),void,Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface.,"

setInterface
public void setInterface(InetAddress inf)
                  throws SocketException
Set the multicast network interface used by methods
 whose behavior would be affected by the value of the
 network interface. Useful for multihomed hosts.

Parameters:
inf - the InetAddress
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
See Also:
getInterface()


"
MulticastSocket,setLoopbackMode(boolean disable),void,Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket.,"

setLoopbackMode
public void setLoopbackMode(boolean disable)
                     throws SocketException
Disable/Enable local loopback of multicast datagrams
 The option is used by the platform's networking code as a hint
 for setting whether multicast data will be looped back to
 the local socket.

 Because this option is a hint, applications that want to
 verify what loopback mode is set to should call
 getLoopbackMode()

Parameters:
disable - true to disable the LoopbackMode
Throws:
SocketException - if an error occurs while setting the value
Since:
1.4
See Also:
getLoopbackMode()


"
MulticastSocket,setNetworkInterface(NetworkInterface netIf),void,Specify the network interface for outgoing multicast datagrams sent on this socket.,"

setNetworkInterface
public void setNetworkInterface(NetworkInterface netIf)
                         throws SocketException
Specify the network interface for outgoing multicast datagrams
 sent on this socket.

Parameters:
netIf - the interface
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
getNetworkInterface()


"
MulticastSocket,setTimeToLive(int ttl),void,Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts.,"

setTimeToLive
public void setTimeToLive(int ttl)
                   throws IOException
Set the default time-to-live for multicast packets sent out
 on this MulticastSocket in order to control the
 scope of the multicasts.

  The ttl must be in the range 0 <= ttl <=
 255 or an IllegalArgumentException will be thrown.
 Multicast packets sent with a TTL of 0 are not transmitted
 on the network but may be delivered locally.

Parameters:
ttl - the time-to-live
Throws:
IOException - if an I/O exception occurs while setting the
          default time-to-live value
See Also:
getTimeToLive()


"
MulticastSocket,setTTL(byte ttl),void,"Deprecated. use the setTimeToLive method instead, which uses int instead of byte as the type for ttl.","

setTTL
@Deprecated
public void setTTL(byte ttl)
                        throws IOException
Deprecated. use the setTimeToLive method instead, which uses
 int instead of byte as the type for ttl.
Set the default time-to-live for multicast packets sent out
 on this MulticastSocket in order to control the
 scope of the multicasts.

 The ttl is an unsigned 8-bit quantity, and so must be
 in the range 0 <= ttl <= 0xFF .

Parameters:
ttl - the time-to-live
Throws:
IOException - if an I/O exception occurs
 while setting the default time-to-live value
See Also:
getTTL()


"
NetworkInterface,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same NetworkInterface
 as this object.
 
 Two instances of NetworkInterface represent the same
 NetworkInterface if both name and addrs are the same for both.

Overrides:
equals in class Object
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
InetAddress.getAddress()


"
NetworkInterface,getByIndex(int index),static NetworkInterface,Get a network interface given its index.,"

getByIndex
public static NetworkInterface getByIndex(int index)
                                   throws SocketException
Get a network interface given its index.

Parameters:
index - an integer, the index of the interface
Returns:
the NetworkInterface obtained from its index, or null if
         there is no interface with such an index on the system
Throws:
SocketException - if an I/O error occurs.
IllegalArgumentException - if index has a negative value
Since:
1.7
See Also:
getIndex()


"
NetworkInterface,getByInetAddress(InetAddress addr),static NetworkInterface,Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it.,"

getByInetAddress
public static NetworkInterface getByInetAddress(InetAddress addr)
                                         throws SocketException
Convenience method to search for a network interface that
 has the specified Internet Protocol (IP) address bound to
 it.
 
 If the specified IP address is bound to multiple network
 interfaces it is not defined which network interface is
 returned.

Parameters:
addr - The InetAddress to search with.
Returns:
A NetworkInterface
          or null if there is no network interface
          with the specified IP address.
Throws:
SocketException - If an I/O error occurs.
NullPointerException - If the specified address is null.


"
NetworkInterface,getByName(String name),static NetworkInterface,Searches for the network interface with the specified name.,"

getByName
public static NetworkInterface getByName(String name)
                                  throws SocketException
Searches for the network interface with the specified name.

Parameters:
name - The name of the network interface.
Returns:
A NetworkInterface with the specified name,
          or null if there is no network interface
          with the specified name.
Throws:
SocketException - If an I/O error occurs.
NullPointerException - If the specified name is null.


"
NetworkInterface,getDisplayName(),String,Get the display name of this network interface.,"

getDisplayName
public String getDisplayName()
Get the display name of this network interface.
 A display name is a human readable String describing the network
 device.

Returns:
a non-empty string representing the display name of this network
         interface, or null if no display name is available.


"
NetworkInterface,getHardwareAddress(),byte[],Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges.,"

getHardwareAddress
public byte[] getHardwareAddress()
                          throws SocketException
Returns the hardware address (usually MAC) of the interface if it
 has one and if it can be accessed given the current privileges.
 If a security manager is set, then the caller must have
 the permission NetPermission(""getNetworkInformation"").

Returns:
a byte array containing the address, or null if
          the address doesn't exist, is not accessible or a security
          manager is set and the caller does not have the permission
          NetPermission(""getNetworkInformation"")
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,getIndex(),int,Returns the index of this network interface.,"

getIndex
public int getIndex()
Returns the index of this network interface. The index is an integer greater
 or equal to zero, or -1 for unknown. This is a system specific value
 and interfaces with the same name can have different indexes on different
 machines.

Returns:
the index of this network interface or -1 if the index is
         unknown
Since:
1.7
See Also:
getByIndex(int)


"
NetworkInterface,getInetAddresses(),Enumeration<InetAddress>,Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface.,"

getInetAddresses
public Enumeration<InetAddress> getInetAddresses()
Convenience method to return an Enumeration with all or a
 subset of the InetAddresses bound to this network interface.
 
 If there is a security manager, its checkConnect
 method is called for each InetAddress. Only InetAddresses where
 the checkConnect doesn't throw a SecurityException
 will be returned in the Enumeration. However, if the caller has the
 NetPermission(""getNetworkInformation"") permission, then all
 InetAddresses are returned.

Returns:
an Enumeration object with all or a subset of the InetAddresses
 bound to this network interface


"
NetworkInterface,getInterfaceAddresses(),List<InterfaceAddress>,Get a List of all or a subset of the InterfaceAddresses of this network interface.,"

getInterfaceAddresses
public List<InterfaceAddress> getInterfaceAddresses()
Get a List of all or a subset of the InterfaceAddresses
 of this network interface.
 
 If there is a security manager, its checkConnect
 method is called with the InetAddress for each InterfaceAddress.
 Only InterfaceAddresses where the checkConnect doesn't throw
 a SecurityException will be returned in the List.

Returns:
a List object with all or a subset of the
         InterfaceAddresss of this network interface
Since:
1.6


"
NetworkInterface,getMTU(),int,Returns the Maximum Transmission Unit (MTU) of this interface.,"

getMTU
public int getMTU()
           throws SocketException
Returns the Maximum Transmission Unit (MTU) of this interface.

Returns:
the value of the MTU for that interface.
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,getName(),String,Get the name of this network interface.,"

getName
public String getName()
Get the name of this network interface.

Returns:
the name of this network interface


"
NetworkInterface,getNetworkInterfaces(),static Enumeration<NetworkInterface>,Returns all the interfaces on this machine.,"

getNetworkInterfaces
public static Enumeration<NetworkInterface> getNetworkInterfaces()
                                                          throws SocketException
Returns all the interfaces on this machine. The Enumeration
 contains at least one element, possibly representing a loopback
 interface that only supports communication between entities on
 this machine.

 NOTE: can use getNetworkInterfaces()+getInetAddresses()
       to obtain all IP addresses for this node

Returns:
an Enumeration of NetworkInterfaces found on this machine
Throws:
SocketException - if an I/O error occurs.


"
NetworkInterface,getParent(),NetworkInterface,"Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.","

getParent
public NetworkInterface getParent()
Returns the parent NetworkInterface of this interface if this is
 a subinterface, or null if it is a physical
 (non virtual) interface or has no parent.

Returns:
The NetworkInterface this interface is attached to.
Since:
1.6


"
NetworkInterface,getSubInterfaces(),Enumeration<NetworkInterface>,Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface.,"

getSubInterfaces
public Enumeration<NetworkInterface> getSubInterfaces()
Get an Enumeration with all the subinterfaces (also known as virtual
 interfaces) attached to this network interface.
 
 For instance eth0:1 will be a subinterface to eth0.

Returns:
an Enumeration object with all of the subinterfaces
 of this network interface
Since:
1.6


"
NetworkInterface,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
NetworkInterface,isLoopback(),boolean,Returns whether a network interface is a loopback interface.,"

isLoopback
public boolean isLoopback()
                   throws SocketException
Returns whether a network interface is a loopback interface.

Returns:
true if the interface is a loopback interface.
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,isPointToPoint(),boolean,Returns whether a network interface is a point to point interface.,"

isPointToPoint
public boolean isPointToPoint()
                       throws SocketException
Returns whether a network interface is a point to point interface.
 A typical point to point interface would be a PPP connection through
 a modem.

Returns:
true if the interface is a point to point
          interface.
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,isUp(),boolean,Returns whether a network interface is up and running.,"

isUp
public boolean isUp()
             throws SocketException
Returns whether a network interface is up and running.

Returns:
true if the interface is up and running.
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,isVirtual(),boolean,Returns whether this interface is a virtual interface (also called subinterface).,"

isVirtual
public boolean isVirtual()
Returns whether this interface is a virtual interface (also called
 subinterface).
 Virtual interfaces are, on some systems, interfaces created as a child
 of a physical interface and given different settings (like address or
 MTU). Usually the name of the interface will the name of the parent
 followed by a colon (:) and a number identifying the child since there
 can be several virtual interfaces attached to a single physical
 interface.

Returns:
true if this interface is a virtual interface.
Since:
1.6


"
NetworkInterface,supportsMulticast(),boolean,Returns whether a network interface supports multicasting or not.,"

supportsMulticast
public boolean supportsMulticast()
                          throws SocketException
Returns whether a network interface supports multicasting or not.

Returns:
true if the interface supports Multicasting.
Throws:
SocketException - if an I/O error occurs.
Since:
1.6


"
NetworkInterface,toString(),String,Returns a string representation of the object.,"

toString
public String toString()
Description copied from class: Object
Returns a string representation of the object. In general, the
 toString method returns a string that
 ""textually represents"" this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 
 The toString method for class Object
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `@', and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 

 getClass().getName() + '@' + Integer.toHexString(hashCode())
 

Overrides:
toString in class Object
Returns:
a string representation of the object.


"
PasswordAuthentication,getPassword(),char[],Returns the user password.,"

getPassword
public char[] getPassword()
Returns the user password.

  Note that this method returns a reference to the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

Returns:
the password


"
PasswordAuthentication,getUserName(),String,Returns the user name.,"

getUserName
public String getUserName()
Returns the user name.

Returns:
the user name


"
Proxy,address(),SocketAddress,"Returns the socket address of the proxy, or null if its a direct connection.","

address
public SocketAddress address()
Returns the socket address of the proxy, or
 null if its a direct connection.

Returns:
a SocketAddress representing the socket end
         point of the proxy


"
Proxy,equals(Object obj),boolean,Compares this object against the specified object.,"

equals
public final boolean equals(Object obj)
Compares this object against the specified object.
 The result is true if and only if the argument is
 not null and it represents the same proxy as
 this object.
 
 Two instances of Proxy represent the same
 address if both the SocketAddresses and type are equal.

Overrides:
equals in class Object
Parameters:
obj - the object to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
InetSocketAddress.equals(java.lang.Object)


"
Proxy,hashCode(),int,Returns a hashcode for this Proxy.,"

hashCode
public final int hashCode()
Returns a hashcode for this Proxy.

Overrides:
hashCode in class Object
Returns:
a hash code value for this Proxy.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Proxy,toString(),String,Constructs a string representation of this Proxy.,"

toString
public String toString()
Constructs a string representation of this Proxy.
 This String is constructed by calling toString() on its type
 and concatenating "" @ "" and the toString() result from its address
 if its type is not DIRECT.

Overrides:
toString in class Object
Returns:
a string representation of this object.


"
Proxy,type(),Proxy.Type,Returns the proxy type.,"

type
public Proxy.Type type()
Returns the proxy type.

Returns:
a Type representing the proxy type


"
ProxySelector,"connectFailed(URI uri, SocketAddress sa, IOException ioe)",abstract void,Called to indicate that a connection could not be established to a proxy/socks server.,"

connectFailed
public abstract void connectFailed(URI uri,
                                   SocketAddress sa,
                                   IOException ioe)
Called to indicate that a connection could not be established
 to a proxy/socks server. An implementation of this method can
 temporarily remove the proxies or reorder the sequence of
 proxies returned by select(URI), using the address
 and the IOException caught when trying to connect.

Parameters:
uri - The URI that the proxy at sa failed to serve.
sa - The socket address of the proxy/SOCKS server
ioe - The I/O exception thrown when the connect failed.
Throws:
IllegalArgumentException - if either argument is null


"
ProxySelector,getDefault(),static ProxySelector,Gets the system-wide proxy selector.,"

getDefault
public static ProxySelector getDefault()
Gets the system-wide proxy selector.

Returns:
the system-wide ProxySelector
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""getProxySelector"")
Since:
1.5
See Also:
setDefault(ProxySelector)


"
ProxySelector,select(URI uri),abstract List<Proxy>,Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at.,"

select
public abstract List<Proxy> select(URI uri)
Selects all the applicable proxies based on the protocol to
 access the resource with and a destination address to access
 the resource at.
 The format of the URI is defined as follow:
 
http URI for http connections
https URI for https connections
 socket://host:port
     for tcp client sockets connections


Parameters:
uri - The URI that a connection is required to
Returns:
a List of Proxies. Each element in the
          the List is of type
          Proxy;
          when no proxy is available, the list will
          contain one element of type
          Proxy
          that represents a direct connection.
Throws:
IllegalArgumentException - if the argument is null


"
ProxySelector,setDefault(ProxySelector ps),static void,Sets (or unsets) the system-wide proxy selector.,"

setDefault
public static void setDefault(ProxySelector ps)
Sets (or unsets) the system-wide proxy selector.

 Note: non-standard protocol handlers may ignore this setting.

Parameters:
ps - The HTTP proxy selector, or
          null to unset the proxy selector.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""setProxySelector"")
Since:
1.5
See Also:
getDefault()


"
ResponseCache,"get(URI uri, String rqstMethod, Map<String,List<String>> rqstHeaders)",abstract CacheResponse,"Retrieve the cached response based on the requesting uri, request method and request headers.","

get
public abstract CacheResponse get(URI uri,
                                  String rqstMethod,
                                  Map<String,List<String>> rqstHeaders)
                           throws IOException
Retrieve the cached response based on the requesting uri,
 request method and request headers. Typically this method is
 called by the protocol handler before it sends out the request
 to get the network resource. If a cached response is returned,
 that resource is used instead.

Parameters:
uri - a URI used to reference the requested
            network resource
rqstMethod - a String representing the request
            method
rqstHeaders - - a Map from request header
            field names to lists of field values representing
            the current request headers
Returns:
a CacheResponse instance if available
          from cache, or null otherwise
Throws:
IOException - if an I/O error occurs
IllegalArgumentException - if any one of the arguments is null
See Also:
URLConnection.setUseCaches(boolean), 
URLConnection.getUseCaches(), 
URLConnection.setDefaultUseCaches(boolean), 
URLConnection.getDefaultUseCaches()


"
ResponseCache,getDefault(),static ResponseCache,Gets the system-wide response cache.,"

getDefault
public static ResponseCache getDefault()
Gets the system-wide response cache.

Returns:
the system-wide ResponseCache
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""getResponseCache"")
Since:
1.5
See Also:
setDefault(ResponseCache)


"
ResponseCache,"put(URI uri, URLConnection conn)",abstract CacheRequest,"The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache.","

put
public abstract CacheRequest put(URI uri,
                                 URLConnection conn)
                          throws IOException
The protocol handler calls this method after a resource has
 been retrieved, and the ResponseCache must decide whether or
 not to store the resource in its cache. If the resource is to
 be cached, then put() must return a CacheRequest object which
 contains an OutputStream that the protocol handler will
 use to write the resource into the cache. If the resource is
 not to be cached, then put must return null.

Parameters:
uri - a URI used to reference the requested
            network resource
conn - - a URLConnection instance that is used to fetch
            the response to be cached
Returns:
a CacheRequest for recording the
            response to be cached. Null return indicates that
            the caller does not intend to cache the response.
Throws:
IOException - if an I/O error occurs
IllegalArgumentException - if any one of the arguments is
            null


"
ResponseCache,setDefault(ResponseCache responseCache),static void,Sets (or unsets) the system-wide cache.,"

setDefault
public static void setDefault(ResponseCache responseCache)
Sets (or unsets) the system-wide cache.

 Note: non-standard procotol handlers may ignore this setting.

Parameters:
responseCache - The response cache, or
          null to unset the cache.
Throws:
SecurityException - If a security manager has been installed and it denies
 NetPermission(""setResponseCache"")
Since:
1.5
See Also:
getDefault()


"
SecureCacheResponse,getCipherSuite(),abstract String,Returns the cipher suite in use on the original connection that retrieved the network resource.,"

getCipherSuite
public abstract String getCipherSuite()
Returns the cipher suite in use on the original connection that
 retrieved the network resource.

Returns:
a string representing the cipher suite


"
SecureCacheResponse,getLocalCertificateChain(),abstract List<Certificate>,Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource.,"

getLocalCertificateChain
public abstract List<Certificate> getLocalCertificateChain()
Returns the certificate chain that were sent to the server during
 handshaking of the original connection that retrieved the
 network resource.  Note: This method is useful only
 when using certificate-based cipher suites.

Returns:
an immutable List of Certificate representing the
           certificate chain that was sent to the server. If no
           certificate chain was sent, null will be returned.
See Also:
getLocalPrincipal()


"
SecureCacheResponse,getLocalPrincipal(),abstract Principal,Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.,"

getLocalPrincipal
public abstract Principal getLocalPrincipal()
Returns the principal that was sent to the server during
 handshaking in the original connection that retrieved the
 network resource.

Returns:
the principal sent to the server. Returns an X500Principal
 of the end-entity certificate for X509-based cipher suites, and
 KerberosPrincipal for Kerberos cipher suites. If no principal was
 sent, then null is returned.
See Also:
getLocalCertificateChain(), 
getPeerPrincipal()


"
SecureCacheResponse,getPeerPrincipal(),abstract Principal,Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.,"

getPeerPrincipal
public abstract Principal getPeerPrincipal()
                                    throws SSLPeerUnverifiedException
Returns the server's principal which was established as part of
 defining the session during the original connection that
 retrieved the network resource.

Returns:
the server's principal. Returns an X500Principal of the
 end-entity certiticate for X509-based cipher suites, and
 KerberosPrincipal for Kerberos cipher suites.
Throws:
SSLPeerUnverifiedException - if the peer was not verified.
See Also:
getServerCertificateChain(), 
getLocalPrincipal()


"
SecureCacheResponse,getServerCertificateChain(),abstract List<Certificate>,"Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache.","

getServerCertificateChain
public abstract List<Certificate> getServerCertificateChain()
                                                     throws SSLPeerUnverifiedException
Returns the server's certificate chain, which was established as
 part of defining the session in the original connection that
 retrieved the network resource, from cache.  Note: This method
 can be used only when using certificate-based cipher suites;
 using it with non-certificate-based cipher suites, such as
 Kerberos, will throw an SSLPeerUnverifiedException.

Returns:
an immutable List of Certificate representing the server's
         certificate chain.
Throws:
SSLPeerUnverifiedException - if the peer is not verified.
See Also:
getPeerPrincipal()


"
ServerSocket,accept(),Socket,Listens for a connection to be made to this socket and accepts it.,"

accept
public Socket accept()
              throws IOException
Listens for a connection to be made to this socket and accepts
 it. The method blocks until a connection is made.

 A new Socket s is created and, if there
 is a security manager,
 the security manager's checkAccept method is called
 with s.getInetAddress().getHostAddress() and
 s.getPort()
 as its arguments to ensure the operation is allowed.
 This could result in a SecurityException.

Returns:
the new Socket
Throws:
IOException - if an I/O error occurs when waiting for a
               connection.
SecurityException - if a security manager exists and its
             checkAccept method doesn't allow the operation.
SocketTimeoutException - if a timeout was previously set with setSoTimeout and
             the timeout has been reached.
IllegalBlockingModeException - if this socket has an associated channel, the channel is in
             non-blocking mode, and there is no connection ready to be
             accepted
See Also:
SecurityManager.checkAccept(java.lang.String, int)


"
ServerSocket,bind(SocketAddress endpoint),void,Binds the ServerSocket to a specific address (IP address and port number).,"

bind
public void bind(SocketAddress endpoint)
          throws IOException
Binds the ServerSocket to a specific address
 (IP address and port number).
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.
 

Parameters:
endpoint - The IP address and port number to bind to.
Throws:
IOException - if the bind operation fails, or if the socket
                     is already bound.
SecurityException - if a SecurityManager is present and
 its checkListen method doesn't allow the operation.
IllegalArgumentException - if endpoint is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
ServerSocket,"bind(SocketAddress endpoint, int backlog)",void,Binds the ServerSocket to a specific address (IP address and port number).,"

bind
public void bind(SocketAddress endpoint,
                 int backlog)
          throws IOException
Binds the ServerSocket to a specific address
 (IP address and port number).
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.
 
 The backlog argument is the requested maximum number of
 pending connections on the socket. Its exact semantics are implementation
 specific. In particular, an implementation may impose a maximum length
 or may choose to ignore the parameter altogther. The value provided
 should be greater than 0. If it is less than or equal to
 0, then an implementation specific default will be used.

Parameters:
endpoint - The IP address and port number to bind to.
backlog - requested maximum length of the queue of
                          incoming connections.
Throws:
IOException - if the bind operation fails, or if the socket
                     is already bound.
SecurityException - if a SecurityManager is present and
 its checkListen method doesn't allow the operation.
IllegalArgumentException - if endpoint is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
ServerSocket,close(),void,Closes this socket.,"

close
public void close()
           throws IOException
Closes this socket.

 Any thread currently blocked in accept() will throw
 a SocketException.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs when closing the socket.


"
ServerSocket,getChannel(),ServerSocketChannel,"Returns the unique ServerSocketChannel object associated with this socket, if any.","

getChannel
public ServerSocketChannel getChannel()
Returns the unique ServerSocketChannel object
 associated with this socket, if any.

  A server socket will have a channel if, and only if, the channel
 itself was created via the ServerSocketChannel.open
 method.

Returns:
the server-socket channel associated with this socket,
          or null if this socket was not created
          for a channel
Since:
1.4


"
ServerSocket,getInetAddress(),InetAddress,Returns the local address of this server socket.,"

getInetAddress
public InetAddress getInetAddress()
Returns the local address of this server socket.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the local address
 after the socket is closed.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 the loopback address is returned.

Returns:
the address to which this socket is bound,
          or the loopback address if denied by the security manager,
          or null if the socket is unbound.
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
ServerSocket,getLocalPort(),int,Returns the port number on which this socket is listening.,"

getLocalPort
public int getLocalPort()
Returns the port number on which this socket is listening.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the port number
 after the socket is closed.

Returns:
the port number to which this socket is listening or
          -1 if the socket is not bound yet.


"
ServerSocket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.,"

getLocalSocketAddress
public SocketAddress getLocalSocketAddress()
Returns the address of the endpoint this socket is bound to.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the address of the endpoint
 after the socket is closed.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the local
 port to which the socket is bound is returned.

Returns:
a SocketAddress representing the local endpoint of
         this socket, or a SocketAddress representing the
         loopback address if denied by the security manager,
         or null if the socket is not bound yet.
Since:
1.4
See Also:
getInetAddress(), 
getLocalPort(), 
bind(SocketAddress), 
SecurityManager.checkConnect(java.lang.String, int)


"
ServerSocket,getReceiveBufferSize(),int,"Gets the value of the SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this ServerSocket, that is the proposed buffer size that
 will be used for Sockets accepted from this ServerSocket.

 Note, the value actually set in the accepted socket is determined by
 calling Socket.getReceiveBufferSize().

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
            in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReceiveBufferSize(int)


"
ServerSocket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.,"

getReuseAddress
public boolean getReuseAddress()
                        throws SocketException
Tests if SO_REUSEADDR is enabled.

Returns:
a boolean indicating whether or not
         SO_REUSEADDR is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReuseAddress(boolean)


"
ServerSocket,getSoTimeout(),int,Retrieve setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws IOException
Retrieve setting for SO_TIMEOUT.
 0 returns implies that the option is disabled (i.e., timeout of infinity).

Returns:
the SO_TIMEOUT value
Throws:
IOException - if an I/O error occurs
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
ServerSocket,implAccept(Socket s),protected void,Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket.,"

implAccept
protected final void implAccept(Socket s)
                         throws IOException
Subclasses of ServerSocket use this method to override accept()
 to return their own subclass of socket.  So a FooServerSocket
 will typically hand this method an empty FooSocket.  On
 return from implAccept the FooSocket will be connected to a client.

Parameters:
s - the Socket
Throws:
IllegalBlockingModeException - if this socket has an associated channel,
         and the channel is in non-blocking mode
IOException - if an I/O error occurs when waiting
 for a connection.
Since:
JDK1.1


"
ServerSocket,isBound(),boolean,Returns the binding state of the ServerSocket.,"

isBound
public boolean isBound()
Returns the binding state of the ServerSocket.

Returns:
true if the ServerSocket successfully bound to an address
Since:
1.4


"
ServerSocket,isClosed(),boolean,Returns the closed state of the ServerSocket.,"

isClosed
public boolean isClosed()
Returns the closed state of the ServerSocket.

Returns:
true if the socket has been closed
Since:
1.4


"
ServerSocket,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",void,Sets performance preferences for this ServerSocket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this ServerSocket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences.  If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been bound
 will have no effect. This implies that in order to use this capability
 requires the socket to be created with the no-argument constructor.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
ServerSocket,setReceiveBufferSize(int size),void,Sets a default proposed value for the SO_RCVBUF option for sockets accepted from this ServerSocket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets a default proposed value for the
 SO_RCVBUF option for sockets
 accepted from this ServerSocket. The value actually set
 in the accepted socket must be determined by calling
 Socket.getReceiveBufferSize() after the socket
 is returned by accept().
 
 The value of SO_RCVBUF is used both to
 set the size of the internal socket receive buffer, and to set the size
 of the TCP receive window that is advertized to the remote peer.
 
 It is possible to change the value subsequently, by calling
 Socket.setReceiveBufferSize(int). However, if the application
 wishes to allow a receive window larger than 64K bytes, as defined by RFC1323
 then the proposed value must be set in the ServerSocket before
 it is bound to a local address. This implies, that the ServerSocket must be
 created with the no-argument constructor, then setReceiveBufferSize() must
 be called and lastly the ServerSocket is bound to an address by calling bind().
 
 Failure to do this will not cause an error, and the buffer size may be set to the
 requested value but the TCP receive window in sockets accepted from
 this ServerSocket will be no larger than 64K bytes.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.4
See Also:
getReceiveBufferSize()


"
ServerSocket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR
 socket option.
 
 When a TCP connection is closed the connection may remain
 in a timeout state for a period of time after the connection
 is closed (typically known as the TIME_WAIT state
 or 2MSL wait state).
 For applications using a well known socket address or port
 it may not be possible to bind a socket to the required
 SocketAddress if there is a connection in the
 timeout state involving the socket address or port.
 
 Enabling SO_REUSEADDR prior to
 binding the socket using bind(SocketAddress) allows the socket
 to be bound even though a previous connection is in a timeout state.
 
 When a ServerSocket is created the initial setting
 of SO_REUSEADDR is not defined.
 Applications can use getReuseAddress() to determine the initial
 setting of SO_REUSEADDR.
 
 The behaviour when SO_REUSEADDR is
 enabled or disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the socket option
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_REUSEADDR
            socket option, or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isBound(), 
isClosed()


"
ServerSocket,setSocketFactory(SocketImplFactory fac),static void,Sets the server socket implementation factory for the application.,"

setSocketFactory
public static void setSocketFactory(SocketImplFactory fac)
                             throws IOException
Sets the server socket implementation factory for the
 application. The factory can be specified only once.
 
 When an application creates a new server socket, the socket
 implementation factory's createSocketImpl method is
 called to create the actual socket implementation.
 
 Passing null to the method is a no-op unless the factory
 was already set.
 
 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fac - the desired factory.
Throws:
IOException - if an I/O error occurs when setting the
               socket factory.
SocketException - if the factory has already been defined.
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the operation.
See Also:
SocketImplFactory.createSocketImpl(), 
SecurityManager.checkSetFactory()


"
ServerSocket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT with the
 specified timeout, in milliseconds.  With this option set to a non-zero
 timeout, a call to accept() for this ServerSocket
 will block for only this amount of time.  If the timeout expires,
 a java.net.SocketTimeoutException is raised, though the
 ServerSocket is still valid.  The option must be enabled
 prior to entering the blocking operation to have effect.  The
 timeout must be > 0.
 A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout, in milliseconds
Throws:
SocketException - if there is an error in
 the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
getSoTimeout()


"
ServerSocket,toString(),String,Returns the implementation address and implementation port of this socket as a String.,"

toString
public String toString()
Returns the implementation address and implementation port of
 this socket as a String.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 an InetAddress representing the
 loopback address is returned as
 the implementation address.

Overrides:
toString in class Object
Returns:
a string representation of this socket.


"
Socket,bind(SocketAddress bindpoint),void,Binds the socket to a local address.,"

bind
public void bind(SocketAddress bindpoint)
          throws IOException
Binds the socket to a local address.
 
 If the address is null, then the system will pick up
 an ephemeral port and a valid local address to bind the socket.

Parameters:
bindpoint - the SocketAddress to bind to
Throws:
IOException - if the bind operation fails, or if the socket
                     is already bound.
IllegalArgumentException - if bindpoint is a
          SocketAddress subclass not supported by this socket
SecurityException - if a security manager exists and its
          checkListen method doesn't allow the bind
          to the local port.
Since:
1.4
See Also:
isBound()


"
Socket,close(),void,Closes this socket.,"

close
public void close()
           throws IOException
Closes this socket.
 
 Any thread currently blocked in an I/O operation upon this socket
 will throw a SocketException.
 
 Once a socket has been closed, it is not available for further networking
 use (i.e. can't be reconnected or rebound). A new socket needs to be
 created.

  Closing this socket will also close the socket's
 InputStream and
 OutputStream.

  If this socket has an associated channel then the channel is closed
 as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if an I/O error occurs when closing this socket.
See Also:
isClosed()


"
Socket,connect(SocketAddress endpoint),void,Connects this socket to the server.,"

connect
public void connect(SocketAddress endpoint)
             throws IOException
Connects this socket to the server.

Parameters:
endpoint - the SocketAddress
Throws:
IOException - if an error occurs during the connection
IllegalBlockingModeException - if this socket has an associated channel,
          and the channel is in non-blocking mode
IllegalArgumentException - if endpoint is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
Socket,"connect(SocketAddress endpoint, int timeout)",void,Connects this socket to the server with a specified timeout value.,"

connect
public void connect(SocketAddress endpoint,
                    int timeout)
             throws IOException
Connects this socket to the server with a specified timeout value.
 A timeout of zero is interpreted as an infinite timeout. The connection
 will then block until established or an error occurs.

Parameters:
endpoint - the SocketAddress
timeout - the timeout value to be used in milliseconds.
Throws:
IOException - if an error occurs during the connection
SocketTimeoutException - if timeout expires before connecting
IllegalBlockingModeException - if this socket has an associated channel,
          and the channel is in non-blocking mode
IllegalArgumentException - if endpoint is null or is a
          SocketAddress subclass not supported by this socket
Since:
1.4


"
Socket,getChannel(),SocketChannel,"Returns the unique SocketChannel object associated with this socket, if any.","

getChannel
public SocketChannel getChannel()
Returns the unique SocketChannel
 object associated with this socket, if any.

  A socket will have a channel if, and only if, the channel itself was
 created via the SocketChannel.open or ServerSocketChannel.accept
 methods.

Returns:
the socket channel associated with this socket,
          or null if this socket was not created
          for a channel
Since:
1.4


"
Socket,getInetAddress(),InetAddress,Returns the address to which the socket is connected.,"

getInetAddress
public InetAddress getInetAddress()
Returns the address to which the socket is connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
the remote IP address to which this socket is connected,
          or null if the socket is not connected.


"
Socket,getInputStream(),InputStream,Returns an input stream for this socket.,"

getInputStream
public InputStream getInputStream()
                           throws IOException
Returns an input stream for this socket.

  If this socket has an associated channel then the resulting input
 stream delegates all of its operations to the channel.  If the channel
 is in non-blocking mode then the input stream's read operations
 will throw an IllegalBlockingModeException.

 Under abnormal conditions the underlying connection may be
 broken by the remote host or the network software (for example
 a connection reset in the case of TCP connections). When a
 broken connection is detected by the network software the
 following applies to the returned input stream :-

 
The network software may discard bytes that are buffered
   by the socket. Bytes that aren't discarded by the network
   software can be read using read.

   If there are no bytes buffered on the socket, or all
   buffered bytes have been consumed by
   read, then all subsequent
   calls to read will throw an
   IOException.

   If there are no bytes buffered on the socket, and the
   socket has not been closed using close, then
   available will
   return 0.

 
 Closing the returned InputStream
 will close the associated socket.

Returns:
an input stream for reading bytes from this socket.
Throws:
IOException - if an I/O error occurs when creating the
             input stream, the socket is closed, the socket is
             not connected, or the socket input has been shutdown
             using shutdownInput()


"
Socket,getKeepAlive(),boolean,Tests if SO_KEEPALIVE is enabled.,"

getKeepAlive
public boolean getKeepAlive()
                     throws SocketException
Tests if SO_KEEPALIVE is enabled.

Returns:
a boolean indicating whether or not
         SO_KEEPALIVE is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.3
See Also:
setKeepAlive(boolean)


"
Socket,getLocalAddress(),InetAddress,Gets the local address to which the socket is bound.,"

getLocalAddress
public InetAddress getLocalAddress()
Gets the local address to which the socket is bound.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 the loopback address is returned.

Returns:
the local address to which the socket is bound,
         the loopback address if denied by the security manager, or
         the wildcard address if the socket is closed or not bound yet.
Since:
JDK1.1
See Also:
SecurityManager.checkConnect(java.lang.String, int)


"
Socket,getLocalPort(),int,Returns the local port number to which this socket is bound.,"

getLocalPort
public int getLocalPort()
Returns the local port number to which this socket is bound.
 
 If the socket was bound prior to being closed,
 then this method will continue to return the local port number
 after the socket is closed.

Returns:
the local port number to which this socket is bound or -1
          if the socket is not bound yet.


"
Socket,getLocalSocketAddress(),SocketAddress,Returns the address of the endpoint this socket is bound to.,"

getLocalSocketAddress
public SocketAddress getLocalSocketAddress()
Returns the address of the endpoint this socket is bound to.
 
 If a socket bound to an endpoint represented by an
 InetSocketAddress  is closed,
 then this method will continue to return an InetSocketAddress
 after the socket is closed. In that case the returned
 InetSocketAddress's address is the
 wildcard address
 and its port is the local port that it was bound to.
 
 If there is a security manager set, its checkConnect method is
 called with the local address and -1 as its arguments to see
 if the operation is allowed. If the operation is not allowed,
 a SocketAddress representing the
 loopback address and the local
 port to which this socket is bound is returned.

Returns:
a SocketAddress representing the local endpoint of
         this socket, or a SocketAddress representing the
         loopback address if denied by the security manager, or
         null if the socket is not bound yet.
Since:
1.4
See Also:
getLocalAddress(), 
getLocalPort(), 
bind(SocketAddress), 
SecurityManager.checkConnect(java.lang.String, int)


"
Socket,getOOBInline(),boolean,Tests if SO_OOBINLINE is enabled.,"

getOOBInline
public boolean getOOBInline()
                     throws SocketException
Tests if SO_OOBINLINE is enabled.

Returns:
a boolean indicating whether or not
         SO_OOBINLINEis enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setOOBInline(boolean)


"
Socket,getOutputStream(),OutputStream,Returns an output stream for this socket.,"

getOutputStream
public OutputStream getOutputStream()
                             throws IOException
Returns an output stream for this socket.

  If this socket has an associated channel then the resulting output
 stream delegates all of its operations to the channel.  If the channel
 is in non-blocking mode then the output stream's write
 operations will throw an IllegalBlockingModeException.

  Closing the returned OutputStream
 will close the associated socket.

Returns:
an output stream for writing bytes to this socket.
Throws:
IOException - if an I/O error occurs when creating the
               output stream or if the socket is not connected.


"
Socket,getPort(),int,Returns the remote port number to which this socket is connected.,"

getPort
public int getPort()
Returns the remote port number to which this socket is connected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected port number
 after the socket is closed.

Returns:
the remote port number to which this socket is connected, or
          0 if the socket is not connected yet.


"
Socket,getReceiveBufferSize(),int,"Gets the value of the SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.","

getReceiveBufferSize
public int getReceiveBufferSize()
                         throws SocketException
Gets the value of the SO_RCVBUF option
 for this Socket, that is the buffer size used by the platform
 for input on this Socket.

Returns:
the value of the SO_RCVBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setReceiveBufferSize(int)


"
Socket,getRemoteSocketAddress(),SocketAddress,"Returns the address of the endpoint this socket is connected to, or null if it is unconnected.","

getRemoteSocketAddress
public SocketAddress getRemoteSocketAddress()
Returns the address of the endpoint this socket is connected to, or
 null if it is unconnected.
 
 If the socket was connected prior to being closed,
 then this method will continue to return the connected address
 after the socket is closed.

Returns:
a SocketAddress representing the remote endpoint of this
         socket, or null if it is not connected yet.
Since:
1.4
See Also:
getInetAddress(), 
getPort(), 
connect(SocketAddress, int), 
connect(SocketAddress)


"
Socket,getReuseAddress(),boolean,Tests if SO_REUSEADDR is enabled.,"

getReuseAddress
public boolean getReuseAddress()
                        throws SocketException
Tests if SO_REUSEADDR is enabled.

Returns:
a boolean indicating whether or not
         SO_REUSEADDR is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
setReuseAddress(boolean)


"
Socket,getSendBufferSize(),int,"Get value of the SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.","

getSendBufferSize
public int getSendBufferSize()
                      throws SocketException
Get value of the SO_SNDBUF option
 for this Socket, that is the buffer size used by the platform
 for output on this Socket.

Returns:
the value of the SO_SNDBUF
         option for this Socket.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
setSendBufferSize(int)


"
Socket,getSoLinger(),int,Returns setting for SO_LINGER.,"

getSoLinger
public int getSoLinger()
                throws SocketException
Returns setting for SO_LINGER.
 -1 returns implies that the
 option is disabled.

 The setting only affects socket close.

Returns:
the setting for SO_LINGER.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
setSoLinger(boolean, int)


"
Socket,getSoTimeout(),int,Returns setting for SO_TIMEOUT.,"

getSoTimeout
public int getSoTimeout()
                 throws SocketException
Returns setting for SO_TIMEOUT.
 0 returns implies that the option is disabled (i.e., timeout of infinity).

Returns:
the setting for SO_TIMEOUT
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
setSoTimeout(int)


"
Socket,getTcpNoDelay(),boolean,Tests if TCP_NODELAY is enabled.,"

getTcpNoDelay
public boolean getTcpNoDelay()
                      throws SocketException
Tests if TCP_NODELAY is enabled.

Returns:
a boolean indicating whether or not
         TCP_NODELAY is enabled.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
setTcpNoDelay(boolean)


"
Socket,getTrafficClass(),int,Gets traffic class or type-of-service in the IP header for packets sent from this Socket,"

getTrafficClass
public int getTrafficClass()
                    throws SocketException
Gets traffic class or type-of-service in the IP header
 for packets sent from this Socket
 
 As the underlying network implementation may ignore the
 traffic class or type-of-service set using setTrafficClass(int)
 this method may return a different value than was previously
 set using the setTrafficClass(int) method on this Socket.

Returns:
the traffic class or type-of-service already set
Throws:
SocketException - if there is an error obtaining the
 traffic class or type-of-service value.
Since:
1.4
See Also:
setTrafficClass(int), 
SocketOptions.IP_TOS


"
Socket,isBound(),boolean,Returns the binding state of the socket.,"

isBound
public boolean isBound()
Returns the binding state of the socket.
 
 Note: Closing a socket doesn't clear its binding state, which means
 this method will return true for a closed socket
 (see isClosed()) if it was successfuly bound prior
 to being closed.

Returns:
true if the socket was successfuly bound to an address
Since:
1.4
See Also:
bind(java.net.SocketAddress)


"
Socket,isClosed(),boolean,Returns the closed state of the socket.,"

isClosed
public boolean isClosed()
Returns the closed state of the socket.

Returns:
true if the socket has been closed
Since:
1.4
See Also:
close()


"
Socket,isConnected(),boolean,Returns the connection state of the socket.,"

isConnected
public boolean isConnected()
Returns the connection state of the socket.
 
 Note: Closing a socket doesn't clear its connection state, which means
 this method will return true for a closed socket
 (see isClosed()) if it was successfuly connected prior
 to being closed.

Returns:
true if the socket was successfuly connected to a server
Since:
1.4


"
Socket,isInputShutdown(),boolean,Returns whether the read-half of the socket connection is closed.,"

isInputShutdown
public boolean isInputShutdown()
Returns whether the read-half of the socket connection is closed.

Returns:
true if the input of the socket has been shutdown
Since:
1.4
See Also:
shutdownInput()


"
Socket,isOutputShutdown(),boolean,Returns whether the write-half of the socket connection is closed.,"

isOutputShutdown
public boolean isOutputShutdown()
Returns whether the write-half of the socket connection is closed.

Returns:
true if the output of the socket has been shutdown
Since:
1.4
See Also:
shutdownOutput()


"
Socket,sendUrgentData(int data),void,Send one byte of urgent data on the socket.,"

sendUrgentData
public void sendUrgentData(int data)
                    throws IOException
Send one byte of urgent data on the socket. The byte to be sent is the lowest eight
 bits of the data parameter. The urgent byte is
 sent after any preceding writes to the socket OutputStream
 and before any future writes to the OutputStream.

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
Socket,setKeepAlive(boolean on),void,Enable/disable SO_KEEPALIVE.,"

setKeepAlive
public void setKeepAlive(boolean on)
                  throws SocketException
Enable/disable SO_KEEPALIVE.

Parameters:
on - whether or not to have socket keep alive turned on.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.3
See Also:
getKeepAlive()


"
Socket,setOOBInline(boolean on),void,"Enable/disable SO_OOBINLINE (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded.","

setOOBInline
public void setOOBInline(boolean on)
                  throws SocketException
Enable/disable SO_OOBINLINE
 (receipt of TCP urgent data)

 By default, this option is disabled and TCP urgent data received on a
 socket is silently discarded. If the user wishes to receive urgent data, then
 this option must be enabled. When enabled, urgent data is received
 inline with normal data.
 
 Note, only limited support is provided for handling incoming urgent
 data. In particular, no notification of incoming urgent data is provided
 and there is no capability to distinguish between normal data and urgent
 data unless provided by a higher level protocol.

Parameters:
on - true to enable
           SO_OOBINLINE,
           false to disable.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.4
See Also:
getOOBInline()


"
Socket,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",void,Sets performance preferences for this socket.,"

setPerformancePreferences
public void setPerformancePreferences(int connectionTime,
                                      int latency,
                                      int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

  Invoking this method after this socket has been connected
 will have no effect.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
Socket,setReceiveBufferSize(int size),void,Sets the SO_RCVBUF option to the specified value for this Socket.,"

setReceiveBufferSize
public void setReceiveBufferSize(int size)
                          throws SocketException
Sets the SO_RCVBUF option to the
 specified value for this Socket. The
 SO_RCVBUF option is
 used by the platform's networking code as a hint for the size to set
 the underlying network I/O buffers.

 Increasing the receive buffer size can increase the performance of
 network I/O for high-volume connection, while decreasing it can
 help reduce the backlog of incoming data.

 Because SO_RCVBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getReceiveBufferSize().

 The value of SO_RCVBUF is also used
 to set the TCP receive window that is advertized to the remote peer.
 Generally, the window size can be modified at any time when a socket is
 connected. However, if a receive window larger than 64K is required then
 this must be requested before the socket is connected to the
 remote peer. There are two cases to be aware of:
 
For sockets accepted from a ServerSocket, this must be done by calling
 ServerSocket.setReceiveBufferSize(int) before the ServerSocket
 is bound to a local address.
For client sockets, setReceiveBufferSize() must be called before
 connecting the socket to its remote peer.

Parameters:
size - the size to which to set the receive buffer
 size. This value must be greater than 0.
Throws:
IllegalArgumentException - if the value is 0 or is
 negative.
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
1.2
See Also:
getReceiveBufferSize(), 
ServerSocket.setReceiveBufferSize(int)


"
Socket,setReuseAddress(boolean on),void,Enable/disable the SO_REUSEADDR socket option.,"

setReuseAddress
public void setReuseAddress(boolean on)
                     throws SocketException
Enable/disable the SO_REUSEADDR
 socket option.
 
 When a TCP connection is closed the connection may remain
 in a timeout state for a period of time after the connection
 is closed (typically known as the TIME_WAIT state
 or 2MSL wait state).
 For applications using a well known socket address or port
 it may not be possible to bind a socket to the required
 SocketAddress if there is a connection in the
 timeout state involving the socket address or port.
 
 Enabling SO_REUSEADDR
 prior to binding the socket using bind(SocketAddress) allows
 the socket to be bound even though a previous connection is in a timeout
 state.
 
 When a Socket is created the initial setting
 of SO_REUSEADDR is disabled.
 
 The behaviour when SO_REUSEADDR is
 enabled or disabled after a socket is bound (See isBound())
 is not defined.

Parameters:
on - whether to enable or disable the socket option
Throws:
SocketException - if an error occurs enabling or
            disabling the SO_REUSEADDR
            socket option, or the socket is closed.
Since:
1.4
See Also:
getReuseAddress(), 
bind(SocketAddress), 
isClosed(), 
isBound()


"
Socket,setSendBufferSize(int size),void,Sets the SO_SNDBUF option to the specified value for this Socket.,"

setSendBufferSize
public void setSendBufferSize(int size)
                       throws SocketException
Sets the SO_SNDBUF option to the
 specified value for this Socket.
 The SO_SNDBUF option is used by the
 platform's networking code as a hint for the size to set the underlying
 network I/O buffers.

 Because SO_SNDBUF is a hint,
 applications that want to verify what size the buffers were set to
 should call getSendBufferSize().

Parameters:
size - the size to which to set the send buffer
 size. This value must be greater than 0.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the
 value is 0 or is negative.
Since:
1.2
See Also:
getSendBufferSize()


"
Socket,setSocketImplFactory(SocketImplFactory fac),static void,Sets the client socket implementation factory for the application.,"

setSocketImplFactory
public static void setSocketImplFactory(SocketImplFactory fac)
                                 throws IOException
Sets the client socket implementation factory for the
 application. The factory can be specified only once.
 
 When an application creates a new client socket, the socket
 implementation factory's createSocketImpl method is
 called to create the actual socket implementation.
 
 Passing null to the method is a no-op unless the factory
 was already set.
 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fac - the desired factory.
Throws:
IOException - if an I/O error occurs when setting the
               socket factory.
SocketException - if the factory is already defined.
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the operation.
See Also:
SocketImplFactory.createSocketImpl(), 
SecurityManager.checkSetFactory()


"
Socket,"setSoLinger(boolean on, int linger)",void,Enable/disable SO_LINGER with the specified linger time in seconds.,"

setSoLinger
public void setSoLinger(boolean on,
                        int linger)
                 throws SocketException
Enable/disable SO_LINGER with the
 specified linger time in seconds. The maximum timeout value is platform
 specific.

 The setting only affects socket close.

Parameters:
on - whether or not to linger on.
linger - how long to linger for, if on is true.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
IllegalArgumentException - if the linger value is negative.
Since:
JDK1.1
See Also:
getSoLinger()


"
Socket,setSoTimeout(int timeout),void,"Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.","

setSoTimeout
public void setSoTimeout(int timeout)
                  throws SocketException
Enable/disable SO_TIMEOUT
  with the specified timeout, in milliseconds. With this option set
  to a non-zero timeout, a read() call on the InputStream associated with
  this Socket will block for only this amount of time.  If the timeout
  expires, a java.net.SocketTimeoutException is raised, though the
  Socket is still valid. The option must be enabled
  prior to entering the blocking operation to have effect. The
  timeout must be > 0.
  A timeout of zero is interpreted as an infinite timeout.

Parameters:
timeout - the specified timeout, in milliseconds.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK 1.1
See Also:
getSoTimeout()


"
Socket,setTcpNoDelay(boolean on),void,Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).,"

setTcpNoDelay
public void setTcpNoDelay(boolean on)
                   throws SocketException
Enable/disable TCP_NODELAY
 (disable/enable Nagle's algorithm).

Parameters:
on - true to enable TCP_NODELAY,
 false to disable.
Throws:
SocketException - if there is an error
 in the underlying protocol, such as a TCP error.
Since:
JDK1.1
See Also:
getTcpNoDelay()


"
Socket,setTrafficClass(int tc),void,Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket.,"

setTrafficClass
public void setTrafficClass(int tc)
                     throws SocketException
Sets traffic class or type-of-service octet in the IP
 header for packets sent from this Socket.
 As the underlying network implementation may ignore this
 value applications should consider it a hint.

  The tc must be in the range 0 <= tc <=
 255 or an IllegalArgumentException will be thrown.
 Notes:
 For Internet Protocol v4 the value consists of an
 integer, the least significant 8 bits of which
 represent the value of the TOS octet in IP packets sent by
 the socket.
 RFC 1349 defines the TOS values as follows:

 
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 The last low order bit is always ignored as this
 corresponds to the MBZ (must be zero) bit.
 
 Setting bits in the precedence field may result in a
 SocketException indicating that the operation is not
 permitted.
 
 As RFC 1122 section 4.2.4.2 indicates, a compliant TCP
 implementation should, but is not required to, let application
 change the TOS field during the lifetime of a connection.
 So whether the type-of-service field can be changed after the
 TCP connection has been established depends on the implementation
 in the underlying platform. Applications should not assume that
 they can change the TOS field after the connection.
 
 For Internet Protocol v6 tc is the value that
 would be placed into the sin6_flowinfo field of the IP header.

Parameters:
tc - an int value for the bitset.
Throws:
SocketException - if there is an error setting the
 traffic class or type-of-service
Since:
1.4
See Also:
getTrafficClass(), 
SocketOptions.IP_TOS


"
Socket,shutdownInput(),void,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
public void shutdownInput()
                   throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to the input stream side of the socket is acknowledged
 and then silently discarded.
 
 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownOutput(), 
close(), 
setSoLinger(boolean, int), 
isInputShutdown()


"
Socket,shutdownOutput(),void,Disables the output stream for this socket.,"

shutdownOutput
public void shutdownOutput()
                    throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
shutdownInput(), 
close(), 
setSoLinger(boolean, int), 
isOutputShutdown()


"
Socket,toString(),String,Converts this socket to a String.,"

toString
public String toString()
Converts this socket to a String.

Overrides:
toString in class Object
Returns:
a string representation of this socket.


"
SocketImpl,accept(SocketImpl s),protected abstract void,Accepts a connection.,"

accept
protected abstract void accept(SocketImpl s)
                        throws IOException
Accepts a connection.

Parameters:
s - the accepted connection.
Throws:
IOException - if an I/O error occurs when accepting the
               connection.


"
SocketImpl,available(),protected abstract int,Returns the number of bytes that can be read from this socket without blocking.,"

available
protected abstract int available()
                          throws IOException
Returns the number of bytes that can be read from this socket
 without blocking.

Returns:
the number of bytes that can be read from this socket
             without blocking.
Throws:
IOException - if an I/O error occurs when determining the
               number of bytes available.


"
SocketImpl,"bind(InetAddress host, int port)",protected abstract void,Binds this socket to the specified local IP address and port number.,"

bind
protected abstract void bind(InetAddress host,
                             int port)
                      throws IOException
Binds this socket to the specified local IP address and port number.

Parameters:
host - an IP address that belongs to a local interface.
port - the port number.
Throws:
IOException - if an I/O error occurs when binding this socket.


"
SocketImpl,close(),protected abstract void,Closes this socket.,"

close
protected abstract void close()
                       throws IOException
Closes this socket.

Throws:
IOException - if an I/O error occurs when closing this socket.


"
SocketImpl,"connect(InetAddress address, int port)",protected abstract void,Connects this socket to the specified port number on the specified host.,"

connect
protected abstract void connect(InetAddress address,
                                int port)
                         throws IOException
Connects this socket to the specified port number on the specified host.

Parameters:
address - the IP address of the remote host.
port - the port number.
Throws:
IOException - if an I/O error occurs when attempting a
               connection.


"
SocketImpl,"connect(SocketAddress address, int timeout)",protected abstract void,Connects this socket to the specified port number on the specified host.,"

connect
protected abstract void connect(SocketAddress address,
                                int timeout)
                         throws IOException
Connects this socket to the specified port number on the specified host.
 A timeout of zero is interpreted as an infinite timeout. The connection
 will then block until established or an error occurs.

Parameters:
address - the Socket address of the remote host.
timeout - the timeout value, in milliseconds, or zero for no timeout.
Throws:
IOException - if an I/O error occurs when attempting a
               connection.
Since:
1.4


"
SocketImpl,"connect(String host, int port)",protected abstract void,Connects this socket to the specified port on the named host.,"

connect
protected abstract void connect(String host,
                                int port)
                         throws IOException
Connects this socket to the specified port on the named host.

Parameters:
host - the name of the remote host.
port - the port number.
Throws:
IOException - if an I/O error occurs when connecting to the
               remote host.


"
SocketImpl,create(boolean stream),protected abstract void,Creates either a stream or a datagram socket.,"

create
protected abstract void create(boolean stream)
                        throws IOException
Creates either a stream or a datagram socket.

Parameters:
stream - if true, create a stream socket;
                      otherwise, create a datagram socket.
Throws:
IOException - if an I/O error occurs while creating the
               socket.


"
SocketImpl,getFileDescriptor(),protected FileDescriptor,Returns the value of this socket's fd field.,"

getFileDescriptor
protected FileDescriptor getFileDescriptor()
Returns the value of this socket's fd field.

Returns:
the value of this socket's fd field.
See Also:
fd


"
SocketImpl,getInetAddress(),protected InetAddress,Returns the value of this socket's address field.,"

getInetAddress
protected InetAddress getInetAddress()
Returns the value of this socket's address field.

Returns:
the value of this socket's address field.
See Also:
address


"
SocketImpl,getInputStream(),protected abstract InputStream,Returns an input stream for this socket.,"

getInputStream
protected abstract InputStream getInputStream()
                                       throws IOException
Returns an input stream for this socket.

Returns:
a stream for reading from this socket.
Throws:
IOException - if an I/O error occurs when creating the
               input stream.


"
SocketImpl,getLocalPort(),protected int,Returns the value of this socket's localport field.,"

getLocalPort
protected int getLocalPort()
Returns the value of this socket's localport field.

Returns:
the value of this socket's localport field.
See Also:
localport


"
SocketImpl,getOutputStream(),protected abstract OutputStream,Returns an output stream for this socket.,"

getOutputStream
protected abstract OutputStream getOutputStream()
                                         throws IOException
Returns an output stream for this socket.

Returns:
an output stream for writing to this socket.
Throws:
IOException - if an I/O error occurs when creating the
               output stream.


"
SocketImpl,getPort(),protected int,Returns the value of this socket's port field.,"

getPort
protected int getPort()
Returns the value of this socket's port field.

Returns:
the value of this socket's port field.
See Also:
port


"
SocketImpl,listen(int backlog),protected abstract void,Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument.,"

listen
protected abstract void listen(int backlog)
                        throws IOException
Sets the maximum queue length for incoming connection indications
 (a request to connect) to the count argument. If a
 connection indication arrives when the queue is full, the
 connection is refused.

Parameters:
backlog - the maximum length of the queue.
Throws:
IOException - if an I/O error occurs when creating the queue.


"
SocketImpl,sendUrgentData(int data),protected abstract void,Send one byte of urgent data on the socket.,"

sendUrgentData
protected abstract void sendUrgentData(int data)
                                throws IOException
Send one byte of urgent data on the socket.
 The byte to be sent is the low eight bits of the parameter

Parameters:
data - The byte of data to send
Throws:
IOException - if there is an error
  sending the data.
Since:
1.4


"
SocketImpl,"setPerformancePreferences(int connectionTime, int latency, int bandwidth)",protected void,Sets performance preferences for this socket.,"

setPerformancePreferences
protected void setPerformancePreferences(int connectionTime,
                                         int latency,
                                         int bandwidth)
Sets performance preferences for this socket.

  Sockets use the TCP/IP protocol by default.  Some implementations
 may offer alternative protocols which have different performance
 characteristics than TCP/IP.  This method allows the application to
 express its own preferences as to how these tradeoffs should be made
 when the implementation chooses from the available protocols.

  Performance preferences are described by three integers
 whose values indicate the relative importance of short connection time,
 low latency, and high bandwidth.  The absolute values of the integers
 are irrelevant; in order to choose a protocol the values are simply
 compared, with larger values indicating stronger preferences. Negative
 values represent a lower priority than positive values. If the
 application prefers short connection time over both low latency and high
 bandwidth, for example, then it could invoke this method with the values
 (1, 0, 0).  If the application prefers high bandwidth above low
 latency, and low latency above short connection time, then it could
 invoke this method with the values (0, 1, 2).

 By default, this method does nothing, unless it is overridden in a
 a sub-class.

Parameters:
connectionTime - An int expressing the relative importance of a short
         connection time
latency - An int expressing the relative importance of low
         latency
bandwidth - An int expressing the relative importance of high
         bandwidth
Since:
1.5


"
SocketImpl,shutdownInput(),protected void,"Places the input stream for this socket at ""end of stream"".","

shutdownInput
protected void shutdownInput()
                      throws IOException
Places the input stream for this socket at ""end of stream"".
 Any data sent to this socket is acknowledged and then
 silently discarded.

 If you read from a socket input stream after invoking this method on the
 socket, the stream's available method will return 0, and its
 read methods will return -1 (end of stream).

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
Socket.shutdownOutput(), 
Socket.close(), 
Socket.setSoLinger(boolean, int)


"
SocketImpl,shutdownOutput(),protected void,Disables the output stream for this socket.,"

shutdownOutput
protected void shutdownOutput()
                       throws IOException
Disables the output stream for this socket.
 For a TCP socket, any previously written data will be sent
 followed by TCP's normal connection termination sequence.

 If you write to a socket output stream after invoking
 shutdownOutput() on the socket, the stream will throw
 an IOException.

Throws:
IOException - if an I/O error occurs when shutting down this
 socket.
Since:
1.3
See Also:
Socket.shutdownInput(), 
Socket.close(), 
Socket.setSoLinger(boolean, int)


"
SocketImpl,supportsUrgentData(),protected boolean,Returns whether or not this SocketImpl supports sending urgent data.,"

supportsUrgentData
protected boolean supportsUrgentData()
Returns whether or not this SocketImpl supports sending
 urgent data. By default, false is returned
 unless the method is overridden in a sub-class

Returns:
true if urgent data supported
Since:
1.4
See Also:
address


"
SocketImpl,toString(),String,Returns the address and port of this socket as a String.,"

toString
public String toString()
Returns the address and port of this socket as a String.

Overrides:
toString in class Object
Returns:
a string representation of this socket.


"
SocketPermission,equals(Object obj),boolean,Checks two SocketPermission objects for equality.,"

equals
public boolean equals(Object obj)
Checks two SocketPermission objects for equality.
 

Specified by:
equals in class Permission
Parameters:
obj - the object to test for equality with this object.
Returns:
true if obj is a SocketPermission, and has the
  same hostname, port range, and actions as this
  SocketPermission object. However, port range will be ignored
  in the comparison if obj only contains the action, 'resolve'.
See Also:
Object.hashCode(), 
HashMap


"
SocketPermission,getActions(),String,Returns the canonical string representation of the actions.,"

getActions
public String getActions()
Returns the canonical string representation of the actions.
 Always returns present actions in the following order:
 connect, listen, accept, resolve.

Specified by:
getActions in class Permission
Returns:
the canonical string representation of the actions.


"
SocketPermission,hashCode(),int,Returns the hash code value for this object.,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SocketPermission,implies(Permission p),boolean,"Checks if this socket permission object ""implies"" the specified permission.","

implies
public boolean implies(Permission p)
Checks if this socket permission object ""implies"" the
 specified permission.
 
 More specifically, this method first ensures that all of the following
 are true (and returns false if any of them are not):
 
 p is an instanceof SocketPermission,
  p's actions are a proper subset of this
 object's actions, and
  p's port range is included in this port range. Note:
 port range is ignored when p only contains the action, 'resolve'.
 

 Then implies checks each of the following, in order,
 and for each returns true if the stated condition is true:
 
 If this object was initialized with a single IP address and one of p's
 IP addresses is equal to this object's IP address.
 If this object is a wildcard domain (such as *.sun.com), and
 p's canonical name (the name without any preceding *)
 ends with this object's canonical host name. For example, *.sun.com
 implies *.eng.sun.com.
 If this object was not initialized with a single IP address, and one of this
 object's IP addresses equals one of p's IP addresses.
 If this canonical name equals p's canonical name.
 

 If none of the above are true, implies returns false.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
SocketPermission,newPermissionCollection(),PermissionCollection,Returns a new PermissionCollection object for storing SocketPermission objects.,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns a new PermissionCollection object for storing SocketPermission
 objects.
 
 SocketPermission objects must be stored in a manner that allows them
 to be inserted into the collection in any order, but that also enables the
 PermissionCollection implies
 method to be implemented in an efficient (and consistent) manner.

Overrides:
newPermissionCollection in class Permission
Returns:
a new PermissionCollection object suitable for storing SocketPermissions.


"
URI,compareTo(URI that),int,"Compares this URI to another object, which must be a URI.","

compareTo
public int compareTo(URI that)
Compares this URI to another object, which must be a URI.

  When comparing corresponding components of two URIs, if one
 component is undefined but the other is defined then the first is
 considered to be less than the second.  Unless otherwise noted, string
 components are ordered according to their natural, case-sensitive
 ordering as defined by the String.compareTo method.  String components that are subject to
 encoding are compared by comparing their raw forms rather than their
 encoded forms.

  The ordering of URIs is defined as follows: 

 Two URIs with different schemes are ordered according the
   ordering of their schemes, without regard to case. 
 A hierarchical URI is considered to be less than an opaque URI
   with an identical scheme. 
 Two opaque URIs with identical schemes are ordered according
   to the ordering of their scheme-specific parts. 
 Two opaque URIs with identical schemes and scheme-specific
   parts are ordered according to the ordering of their
   fragments. 
 Two hierarchical URIs with identical schemes are ordered
   according to the ordering of their authority components: 

 If both authority components are server-based then the URIs
     are ordered according to their user-information components; if these
     components are identical then the URIs are ordered according to the
     ordering of their hosts, without regard to case; if the hosts are
     identical then the URIs are ordered according to the ordering of
     their ports. 
 If one or both authority components are registry-based then
     the URIs are ordered according to the ordering of their authority
     components. 

 Finally, two hierarchical URIs with identical schemes and
   authority components are ordered according to the ordering of their
   paths; if their paths are identical then they are ordered according to
   the ordering of their queries; if the queries are identical then they
   are ordered according to the order of their fragments. 

 This method satisfies the general contract of the Comparable.compareTo
 method. 

Specified by:
compareTo in interface Comparable<URI>
Parameters:
that - The object to which this URI is to be compared
Returns:
A negative integer, zero, or a positive integer as this URI is
          less than, equal to, or greater than the given URI
Throws:
ClassCastException - If the given object is not a URI


"
URI,create(String str),static URI,Creates a URI by parsing the given string.,"

create
public static URI create(String str)
Creates a URI by parsing the given string.

  This convenience factory method works as if by invoking the URI(String) constructor; any URISyntaxException thrown by the
 constructor is caught and wrapped in a new IllegalArgumentException object, which is then thrown.

  This method is provided for use in situations where it is known that
 the given string is a legal URI, for example for URI constants declared
 within in a program, and so it would be considered a programming error
 for the string not to parse as such.  The constructors, which throw
 URISyntaxException directly, should be used situations where a
 URI is being constructed from user input or from some other source that
 may be prone to errors.  

Parameters:
str - The string to be parsed into a URI
Returns:
The new URI
Throws:
NullPointerException - If str is null
IllegalArgumentException - If the given string violates RFC 2396


"
URI,equals(Object ob),boolean,Tests this URI for equality with another object.,"

equals
public boolean equals(Object ob)
Tests this URI for equality with another object.

  If the given object is not a URI then this method immediately
 returns false.

  For two URIs to be considered equal requires that either both are
 opaque or both are hierarchical.  Their schemes must either both be
 undefined or else be equal without regard to case. Their fragments
 must either both be undefined or else be equal.

  For two opaque URIs to be considered equal, their scheme-specific
 parts must be equal.

  For two hierarchical URIs to be considered equal, their paths must
 be equal and their queries must either both be undefined or else be
 equal.  Their authorities must either both be undefined, or both be
 registry-based, or both be server-based.  If their authorities are
 defined and are registry-based, then they must be equal.  If their
 authorities are defined and are server-based, then their hosts must be
 equal without regard to case, their port numbers must be equal, and
 their user-information components must be equal.

  When testing the user-information, path, query, fragment, authority,
 or scheme-specific parts of two URIs for equality, the raw forms rather
 than the encoded forms of these components are compared and the
 hexadecimal digits of escaped octets are compared without regard to
 case.

  This method satisfies the general contract of the Object.equals method. 

Overrides:
equals in class Object
Parameters:
ob - The object to which this object is to be compared
Returns:
true if, and only if, the given object is a URI that
          is identical to this URI
See Also:
Object.hashCode(), 
HashMap


"
URI,getAuthority(),String,Returns the decoded authority component of this URI.,"

getAuthority
public String getAuthority()
Returns the decoded authority component of this URI.

  The string returned by this method is equal to that returned by the
 getRawAuthority method except that all
 sequences of escaped octets are decoded.  

Returns:
The decoded authority component of this URI,
          or null if the authority is undefined


"
URI,getFragment(),String,Returns the decoded fragment component of this URI.,"

getFragment
public String getFragment()
Returns the decoded fragment component of this URI.

  The string returned by this method is equal to that returned by the
 getRawFragment method except that all
 sequences of escaped octets are decoded.  

Returns:
The decoded fragment component of this URI,
          or null if the fragment is undefined


"
URI,getHost(),String,Returns the host component of this URI.,"

getHost
public String getHost()
Returns the host component of this URI.

  The host component of a URI, if defined, will have one of the
 following forms: 

 A domain name consisting of one or more labels
   separated by period characters ('.'), optionally followed by
   a period character.  Each label consists of alphanum characters
   as well as hyphen characters ('-'), though hyphens never
   occur as the first or last characters in a label. The rightmost
   label of a domain name consisting of two or more labels, begins
   with an alpha character. 
 A dotted-quad IPv4 address of the form
   digit+.digit+.digit+.digit+,
   where no digit sequence is longer than three characters and no
   sequence has a value larger than 255. 
 An IPv6 address enclosed in square brackets ('[' and
   ']') and consisting of hexadecimal digits, colon characters
   (':'), and possibly an embedded IPv4 address.  The full
   syntax of IPv6 addresses is specified in RFC 2373: IPv6
   Addressing Architecture.  


 The host component of a URI cannot contain escaped octets, hence this
 method does not perform any decoding.

Returns:
The host component of this URI,
          or null if the host is undefined


"
URI,getPath(),String,Returns the decoded path component of this URI.,"

getPath
public String getPath()
Returns the decoded path component of this URI.

  The string returned by this method is equal to that returned by the
 getRawPath method except that all sequences of
 escaped octets are decoded.  

Returns:
The decoded path component of this URI,
          or null if the path is undefined


"
URI,getPort(),int,Returns the port number of this URI.,"

getPort
public int getPort()
Returns the port number of this URI.

  The port component of a URI, if defined, is a non-negative
 integer. 

Returns:
The port component of this URI,
          or -1 if the port is undefined


"
URI,getQuery(),String,Returns the decoded query component of this URI.,"

getQuery
public String getQuery()
Returns the decoded query component of this URI.

  The string returned by this method is equal to that returned by the
 getRawQuery method except that all sequences of
 escaped octets are decoded.  

Returns:
The decoded query component of this URI,
          or null if the query is undefined


"
URI,getRawAuthority(),String,Returns the raw authority component of this URI.,"

getRawAuthority
public String getRawAuthority()
Returns the raw authority component of this URI.

  The authority component of a URI, if defined, only contains the
 commercial-at character ('@') and characters in the
 unreserved, punct, escaped, and other
 categories.  If the authority is server-based then it is further
 constrained to have valid user-information, host, and port
 components. 

Returns:
The raw authority component of this URI,
          or null if the authority is undefined


"
URI,getRawFragment(),String,Returns the raw fragment component of this URI.,"

getRawFragment
public String getRawFragment()
Returns the raw fragment component of this URI.

  The fragment component of a URI, if defined, only contains legal URI
 characters. 

Returns:
The raw fragment component of this URI,
          or null if the fragment is undefined


"
URI,getRawPath(),String,Returns the raw path component of this URI.,"

getRawPath
public String getRawPath()
Returns the raw path component of this URI.

  The path component of a URI, if defined, only contains the slash
 character ('/'), the commercial-at character ('@'),
 and characters in the unreserved, punct, escaped,
 and other categories. 

Returns:
The path component of this URI,
          or null if the path is undefined


"
URI,getRawQuery(),String,Returns the raw query component of this URI.,"

getRawQuery
public String getRawQuery()
Returns the raw query component of this URI.

  The query component of a URI, if defined, only contains legal URI
 characters. 

Returns:
The raw query component of this URI,
          or null if the query is undefined


"
URI,getRawSchemeSpecificPart(),String,Returns the raw scheme-specific part of this URI.,"

getRawSchemeSpecificPart
public String getRawSchemeSpecificPart()
Returns the raw scheme-specific part of this URI.  The scheme-specific
 part is never undefined, though it may be empty.

  The scheme-specific part of a URI only contains legal URI
 characters. 

Returns:
The raw scheme-specific part of this URI
          (never null)


"
URI,getRawUserInfo(),String,Returns the raw user-information component of this URI.,"

getRawUserInfo
public String getRawUserInfo()
Returns the raw user-information component of this URI.

  The user-information component of a URI, if defined, only contains
 characters in the unreserved, punct, escaped, and
 other categories. 

Returns:
The raw user-information component of this URI,
          or null if the user information is undefined


"
URI,getScheme(),String,Returns the scheme component of this URI.,"

getScheme
public String getScheme()
Returns the scheme component of this URI.

  The scheme component of a URI, if defined, only contains characters
 in the alphanum category and in the string ""-.+"".  A
 scheme always starts with an alpha character. 

 The scheme component of a URI cannot contain escaped octets, hence this
 method does not perform any decoding.

Returns:
The scheme component of this URI,
          or null if the scheme is undefined


"
URI,getSchemeSpecificPart(),String,Returns the decoded scheme-specific part of this URI.,"

getSchemeSpecificPart
public String getSchemeSpecificPart()
Returns the decoded scheme-specific part of this URI.

  The string returned by this method is equal to that returned by the
 getRawSchemeSpecificPart method
 except that all sequences of escaped octets are decoded.  

Returns:
The decoded scheme-specific part of this URI
          (never null)


"
URI,getUserInfo(),String,Returns the decoded user-information component of this URI.,"

getUserInfo
public String getUserInfo()
Returns the decoded user-information component of this URI.

  The string returned by this method is equal to that returned by the
 getRawUserInfo method except that all
 sequences of escaped octets are decoded.  

Returns:
The decoded user-information component of this URI,
          or null if the user information is undefined


"
URI,hashCode(),int,Returns a hash-code value for this URI.,"

hashCode
public int hashCode()
Returns a hash-code value for this URI.  The hash code is based upon all
 of the URI's components, and satisfies the general contract of the
 Object.hashCode method.

Overrides:
hashCode in class Object
Returns:
A hash-code value for this URI
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
URI,isAbsolute(),boolean,Tells whether or not this URI is absolute.,"

isAbsolute
public boolean isAbsolute()
Tells whether or not this URI is absolute.

  A URI is absolute if, and only if, it has a scheme component. 

Returns:
true if, and only if, this URI is absolute


"
URI,isOpaque(),boolean,Tells whether or not this URI is opaque.,"

isOpaque
public boolean isOpaque()
Tells whether or not this URI is opaque.

  A URI is opaque if, and only if, it is absolute and its
 scheme-specific part does not begin with a slash character ('/').
 An opaque URI has a scheme, a scheme-specific part, and possibly
 a fragment; all other components are undefined. 

Returns:
true if, and only if, this URI is opaque


"
URI,normalize(),URI,Normalizes this URI's path.,"

normalize
public URI normalize()
Normalizes this URI's path.

  If this URI is opaque, or if its path is already in normal form,
 then this URI is returned.  Otherwise a new URI is constructed that is
 identical to this URI except that its path is computed by normalizing
 this URI's path in a manner consistent with RFC 2396,
 section 5.2, step 6, sub-steps c through f; that is:
 

 All ""."" segments are removed. 
 If a "".."" segment is preceded by a non-""..""
   segment then both of these segments are removed.  This step is
   repeated until it is no longer applicable. 
 If the path is relative, and if its first segment contains a
   colon character (':'), then a ""."" segment is
   prepended.  This prevents a relative URI with a path such as
   ""a:b/c/d"" from later being re-parsed as an opaque URI with a
   scheme of ""a"" and a scheme-specific part of ""b/c/d"".
   (Deviation from RFC 2396) 

 A normalized path will begin with one or more "".."" segments
 if there were insufficient non-"".."" segments preceding them to
 allow their removal.  A normalized path will begin with a "".""
 segment if one was inserted by step 3 above.  Otherwise, a normalized
 path will not contain any ""."" or "".."" segments. 

Returns:
A URI equivalent to this URI,
          but whose path is in normal form


"
URI,parseServerAuthority(),URI,"Attempts to parse this URI's authority component, if defined, into user-information, host, and port components.","

parseServerAuthority
public URI parseServerAuthority()
                         throws URISyntaxException
Attempts to parse this URI's authority component, if defined, into
 user-information, host, and port components.

  If this URI's authority component has already been recognized as
 being server-based then it will already have been parsed into
 user-information, host, and port components.  In this case, or if this
 URI has no authority component, this method simply returns this URI.

  Otherwise this method attempts once more to parse the authority
 component into user-information, host, and port components, and throws
 an exception describing why the authority component could not be parsed
 in that way.

  This method is provided because the generic URI syntax specified in
 RFC 2396
 cannot always distinguish a malformed server-based authority from a
 legitimate registry-based authority.  It must therefore treat some
 instances of the former as instances of the latter.  The authority
 component in the URI string ""//foo:bar"", for example, is not a
 legal server-based authority but it is legal as a registry-based
 authority.

  In many common situations, for example when working URIs that are
 known to be either URNs or URLs, the hierarchical URIs being used will
 always be server-based.  They therefore must either be parsed as such or
 treated as an error.  In these cases a statement such as

 
URI u= new URI(str).parseServerAuthority();

 can be used to ensure that u always refers to a URI that, if
 it has an authority component, has a server-based authority with proper
 user-information, host, and port components.  Invoking this method also
 ensures that if the authority could not be parsed in that way then an
 appropriate diagnostic message can be issued based upon the exception
 that is thrown. 

Returns:
A URI whose authority field has been parsed
          as a server-based authority
Throws:
URISyntaxException - If the authority component of this URI is defined
          but cannot be parsed as a server-based authority
          according to RFC 2396


"
URI,relativize(URI uri),URI,Relativizes the given URI against this URI.,"

relativize
public URI relativize(URI uri)
Relativizes the given URI against this URI.

  The relativization of the given URI against this URI is computed as
 follows: 

 If either this URI or the given URI are opaque, or if the
   scheme and authority components of the two URIs are not identical, or
   if the path of this URI is not a prefix of the path of the given URI,
   then the given URI is returned. 
 Otherwise a new relative hierarchical URI is constructed with
   query and fragment components taken from the given URI and with a path
   component computed by removing this URI's path from the beginning of
   the given URI's path. 


Parameters:
uri - The URI to be relativized against this URI
Returns:
The resulting URI
Throws:
NullPointerException - If uri is null


"
URI,resolve(String str),URI,Constructs a new URI by parsing the given string and then resolving it against this URI.,"

resolve
public URI resolve(String str)
Constructs a new URI by parsing the given string and then resolving it
 against this URI.

  This convenience method works as if invoking it were equivalent to
 evaluating the expression resolve(URI.create(str)). 

Parameters:
str - The string to be parsed into a URI
Returns:
The resulting URI
Throws:
NullPointerException - If str is null
IllegalArgumentException - If the given string violates RFC 2396


"
URI,resolve(URI uri),URI,Resolves the given URI against this URI.,"

resolve
public URI resolve(URI uri)
Resolves the given URI against this URI.

  If the given URI is already absolute, or if this URI is opaque, then
 the given URI is returned.

  If the given URI's fragment component is
 defined, its path component is empty, and its scheme, authority, and
 query components are undefined, then a URI with the given fragment but
 with all other components equal to those of this URI is returned.  This
 allows a URI representing a standalone fragment reference, such as
 ""#foo"", to be usefully resolved against a base URI.

  Otherwise this method constructs a new hierarchical URI in a manner
 consistent with RFC 2396,
 section 5.2; that is: 

 A new URI is constructed with this URI's scheme and the given
   URI's query and fragment components. 
 If the given URI has an authority component then the new URI's
   authority and path are taken from the given URI. 
 Otherwise the new URI's authority component is copied from
   this URI, and its path is computed as follows: 

 If the given URI's path is absolute then the new URI's path
     is taken from the given URI. 
 Otherwise the given URI's path is relative, and so the new
     URI's path is computed by resolving the path of the given URI
     against the path of this URI.  This is done by concatenating all but
     the last segment of this URI's path, if any, with the given URI's
     path and then normalizing the result as if by invoking the normalize method. 


 The result of this method is absolute if, and only if, either this
 URI is absolute or the given URI is absolute.  

Parameters:
uri - The URI to be resolved against this URI
Returns:
The resulting URI
Throws:
NullPointerException - If uri is null


"
URI,toASCIIString(),String,Returns the content of this URI as a US-ASCII string.,"

toASCIIString
public String toASCIIString()
Returns the content of this URI as a US-ASCII string.

  If this URI does not contain any characters in the other
 category then an invocation of this method will return the same value as
 an invocation of the toString method.  Otherwise
 this method works as if by invoking that method and then encoding the result.  

Returns:
The string form of this URI, encoded as needed
          so that it only contains characters in the US-ASCII
          charset


"
URI,toString(),String,Returns the content of this URI as a string.,"

toString
public String toString()
Returns the content of this URI as a string.

  If this URI was created by invoking one of the constructors in this
 class then a string equivalent to the original input string, or to the
 string computed from the originally-given components, as appropriate, is
 returned.  Otherwise this URI was created by normalization, resolution,
 or relativization, and so a string is constructed from this URI's
 components according to the rules specified in RFC 2396,
 section 5.2, step 7. 

Overrides:
toString in class Object
Returns:
The string form of this URI


"
URI,toURL(),URL,Constructs a URL from this URI.,"

toURL
public URL toURL()
          throws MalformedURLException
Constructs a URL from this URI.

  This convenience method works as if invoking it were equivalent to
 evaluating the expression new URL(this.toString()) after
 first checking that this URI is absolute. 

Returns:
A URL constructed from this URI
Throws:
IllegalArgumentException - If this URL is not absolute
MalformedURLException - If a protocol handler for the URL could not be found,
          or if some other error occurred while constructing the URL


"
URL,equals(Object obj),boolean,Compares this URL for equality with another object.,"

equals
public boolean equals(Object obj)
Compares this URL for equality with another object.

 If the given object is not a URL then this method immediately returns
 false.

 Two URL objects are equal if they have the same protocol, reference
 equivalent hosts, have the same port number on the host, and the same
 file and fragment of the file.

 Two hosts are considered equivalent if both host names can be resolved
 into the same IP addresses; else if either host name can't be
 resolved, the host names must be equal without regard to case; or both
 host names equal to null.

 Since hosts comparison requires name resolution, this operation is a
 blocking operation. 

 Note: The defined behavior for equals is known to
 be inconsistent with virtual hosting in HTTP.

Overrides:
equals in class Object
Parameters:
obj - the URL to compare against.
Returns:
true if the objects are the same;
          false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
URL,getAuthority(),String,Gets the authority part of this URL.,"

getAuthority
public String getAuthority()
Gets the authority part of this URL.

Returns:
the authority part of this URL
Since:
1.3


"
URL,getContent(),Object,Gets the contents of this URL.,"

getContent
public final Object getContent()
                        throws IOException
Gets the contents of this URL. This method is a shorthand for:
 
     openConnection().getContent()
 

Returns:
the contents of this URL.
Throws:
IOException - if an I/O exception occurs.
See Also:
URLConnection.getContent()


"
URL,getContent(Class[] classes),Object,Gets the contents of this URL.,"

getContent
public final Object getContent(Class[] classes)
                        throws IOException
Gets the contents of this URL. This method is a shorthand for:
 
     openConnection().getContent(Class[])
 

Parameters:
classes - an array of Java types
Returns:
the content object of this URL that is the first match of
               the types specified in the classes array.
               null if none of the requested types are supported.
Throws:
IOException - if an I/O exception occurs.
Since:
1.3
See Also:
URLConnection.getContent(Class[])


"
URL,getDefaultPort(),int,Gets the default port number of the protocol associated with this URL.,"

getDefaultPort
public int getDefaultPort()
Gets the default port number of the protocol associated
 with this URL. If the URL scheme or the URLStreamHandler
 for the URL do not define a default port number,
 then -1 is returned.

Returns:
the port number
Since:
1.4


"
URL,getFile(),String,Gets the file name of this URL.,"

getFile
public String getFile()
Gets the file name of this URL.
 The returned file portion will be
 the same as getPath(), plus the concatenation of
 the value of getQuery(), if any. If there is
 no query portion, this method and getPath() will
 return identical results.

Returns:
the file name of this URL,
 or an empty string if one does not exist


"
URL,getHost(),String,"Gets the host name of this URL, if applicable.","

getHost
public String getHost()
Gets the host name of this URL, if applicable.
 The format of the host conforms to RFC 2732, i.e. for a
 literal IPv6 address, this method will return the IPv6 address
 enclosed in square brackets ('[' and ']').

Returns:
the host name of this URL.


"
URL,getPath(),String,Gets the path part of this URL.,"

getPath
public String getPath()
Gets the path part of this URL.

Returns:
the path part of this URL, or an
 empty string if one does not exist
Since:
1.3


"
URL,getPort(),int,Gets the port number of this URL.,"

getPort
public int getPort()
Gets the port number of this URL.

Returns:
the port number, or -1 if the port is not set


"
URL,getProtocol(),String,Gets the protocol name of this URL.,"

getProtocol
public String getProtocol()
Gets the protocol name of this URL.

Returns:
the protocol of this URL.


"
URL,getQuery(),String,Gets the query part of this URL.,"

getQuery
public String getQuery()
Gets the query part of this URL.

Returns:
the query part of this URL,
 or null if one does not exist
Since:
1.3


"
URL,getRef(),String,"Gets the anchor (also known as the ""reference"") of this URL.","

getRef
public String getRef()
Gets the anchor (also known as the ""reference"") of this
 URL.

Returns:
the anchor (also known as the ""reference"") of this
          URL, or null if one does not exist


"
URL,getUserInfo(),String,Gets the userInfo part of this URL.,"

getUserInfo
public String getUserInfo()
Gets the userInfo part of this URL.

Returns:
the userInfo part of this URL, or
 null if one does not exist
Since:
1.3


"
URL,hashCode(),int,Creates an integer suitable for hash table indexing.,"

hashCode
public int hashCode()
Creates an integer suitable for hash table indexing.

 The hash code is based upon all the URL components relevant for URL
 comparison. As such, this operation is a blocking operation.

Overrides:
hashCode in class Object
Returns:
a hash code for this URL.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
URL,openConnection(),URLConnection,Returns a URLConnection instance that represents a connection to the remote object referred to by the URL.,"

openConnection
public URLConnection openConnection()
                             throws IOException
Returns a URLConnection instance that
 represents a connection to the remote object referred to by the
 URL.

 A new instance of URLConnection is
 created every time when invoking the
 URLStreamHandler.openConnection(URL) method of the protocol handler for
 this URL.
It should be noted that a URLConnection instance does not establish
 the actual network connection on creation. This will happen only when
 calling URLConnection.connect().
If for the URL's protocol (such as HTTP or JAR), there
 exists a public, specialized URLConnection subclass belonging
 to one of the following packages or one of their subpackages:
 java.lang, java.io, java.util, java.net, the connection
 returned will be of that subclass. For example, for HTTP an
 HttpURLConnection will be returned, and for JAR a
 JarURLConnection will be returned.

Returns:
a URLConnection linking
             to the URL.
Throws:
IOException - if an I/O exception occurs.
See Also:
URL(java.lang.String, java.lang.String,
             int, java.lang.String)


"
URL,openConnection(Proxy proxy),URLConnection,"Same as openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection.","

openConnection
public URLConnection openConnection(Proxy proxy)
                             throws IOException
Same as openConnection(), except that the connection will be
 made through the specified proxy; Protocol handlers that do not
 support proxing will ignore the proxy parameter and make a
 normal connection.

 Invoking this method preempts the system's default ProxySelector
 settings.

Parameters:
proxy - the Proxy through which this connection
             will be made. If direct connection is desired,
             Proxy.NO_PROXY should be specified.
Returns:
a URLConnection to the URL.
Throws:
IOException - if an I/O exception occurs.
SecurityException - if a security manager is present
             and the caller doesn't have permission to connect
             to the proxy.
IllegalArgumentException - will be thrown if proxy is null,
             or proxy has the wrong type
UnsupportedOperationException - if the subclass that
             implements the protocol handler doesn't support
             this method.
Since:
1.5
See Also:
URL(java.lang.String, java.lang.String,
             int, java.lang.String), 
URLConnection, 
URLStreamHandler.openConnection(java.net.URL,
             java.net.Proxy)


"
URL,openStream(),InputStream,Opens a connection to this URL and returns an InputStream for reading from that connection.,"

openStream
public final InputStream openStream()
                             throws IOException
Opens a connection to this URL and returns an
 InputStream for reading from that connection. This
 method is a shorthand for:
 
     openConnection().getInputStream()
 

Returns:
an input stream for reading from the URL connection.
Throws:
IOException - if an I/O exception occurs.
See Also:
openConnection(), 
URLConnection.getInputStream()


"
URL,sameFile(URL other),boolean,"Compares two URLs, excluding the fragment component.","

sameFile
public boolean sameFile(URL other)
Compares two URLs, excluding the fragment component.

 Returns true if this URL and the
 other argument are equal without taking the
 fragment component into consideration.

Parameters:
other - the URL to compare against.
Returns:
true if they reference the same remote object;
          false otherwise.


"
URL,setURLStreamHandlerFactory(URLStreamHandlerFactory fac),static void,Sets an application's URLStreamHandlerFactory.,"

setURLStreamHandlerFactory
public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac)
Sets an application's URLStreamHandlerFactory.
 This method can be called at most once in a given Java Virtual
 Machine.

 The URLStreamHandlerFactory instance is used to
construct a stream protocol handler from a protocol name.

  If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fac - the desired factory.
Throws:
Error - if the application has already set a factory.
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow
             the operation.
See Also:
URL(java.lang.String, java.lang.String,
             int, java.lang.String), 
URLStreamHandlerFactory, 
SecurityManager.checkSetFactory()


"
URL,toExternalForm(),String,Constructs a string representation of this URL.,"

toExternalForm
public String toExternalForm()
Constructs a string representation of this URL. The
 string is created by calling the toExternalForm
 method of the stream protocol handler for this object.

Returns:
a string representation of this object.
See Also:
URL(java.lang.String, java.lang.String,
                  int, java.lang.String), 
URLStreamHandler.toExternalForm(java.net.URL)


"
URL,toString(),String,Constructs a string representation of this URL.,"

toString
public String toString()
Constructs a string representation of this URL. The
 string is created by calling the toExternalForm
 method of the stream protocol handler for this object.

Overrides:
toString in class Object
Returns:
a string representation of this object.
See Also:
URL(java.lang.String, java.lang.String, int,
                  java.lang.String), 
URLStreamHandler.toExternalForm(java.net.URL)


"
URL,toURI(),URI,Returns a URI equivalent to this URL.,"

toURI
public URI toURI()
          throws URISyntaxException
Returns a URI equivalent to this URL.
 This method functions in the same way as new URI (this.toString()).
 Note, any URL instance that complies with RFC 2396 can be converted
 to a URI. However, some URLs that are not strictly in compliance
 can not be converted to a URI.

Returns:
a URI instance equivalent to this URL.
Throws:
URISyntaxException - if this URL is not formatted strictly according to
            to RFC2396 and cannot be converted to a URI.
Since:
1.5


"
URLClassLoader,addURL(URL url),protected void,Appends the specified URL to the list of URLs to search for classes and resources.,"

addURL
protected void addURL(URL url)
Appends the specified URL to the list of URLs to search for
 classes and resources.
 
 If the URL specified is null or is already in the
 list of URLs, or if this loader is closed, then invoking this
 method has no effect.

Parameters:
url - the URL to be added to the search path of URLs


"
URLClassLoader,close(),void,"Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader.","

close
public void close()
           throws IOException
Closes this URLClassLoader, so that it can no longer be used to load
 new classes or resources that are defined by this loader.
 Classes and resources defined by any of this loader's parents in the
 delegation hierarchy are still accessible. Also, any classes or resources
 that are already loaded, are still accessible.
 
 In the case of jar: and file: URLs, it also closes any files
 that were opened by it. If another thread is loading a
 class when the close method is invoked, then the result of
 that load is undefined.
 
 The method makes a best effort attempt to close all opened files,
 by catching IOExceptions internally. Unchecked exceptions
 and errors are not caught. Calling close on an already closed
 loader has no effect.
 

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Throws:
IOException - if closing any file opened by this class loader
 resulted in an IOException. Any such exceptions are caught internally.
 If only one is caught, then it is re-thrown. If more than one exception
 is caught, then the second and following exceptions are added
 as suppressed exceptions of the first one caught, which is then re-thrown.
SecurityException - if a security manager is set, and it denies
   RuntimePermission(""closeClassLoader"")
Since:
1.7


"
URLClassLoader,"definePackage(String name, Manifest man, URL url)",protected Package,Defines a new package by name in this ClassLoader.,"

definePackage
protected Package definePackage(String name,
                                Manifest man,
                                URL url)
                         throws IllegalArgumentException
Defines a new package by name in this ClassLoader. The attributes
 contained in the specified Manifest will be used to obtain package
 version and sealing information. For sealed packages, the additional
 URL specifies the code source URL from which the package was loaded.

Parameters:
name - the package name
man - the Manifest containing package version and sealing
              information
url - the code source url for the package, or null if none
Returns:
the newly defined Package object
Throws:
IllegalArgumentException - if the package name duplicates
              an existing package either in this class loader or one
              of its ancestors


"
URLClassLoader,findClass(String name),protected Class<?>,Finds and loads the class with the specified name from the URL search path.,"

findClass
protected Class<?> findClass(String name)
                      throws ClassNotFoundException
Finds and loads the class with the specified name from the URL search
 path. Any URLs referring to JAR files are loaded and opened as needed
 until the class is found.

Overrides:
findClass in class ClassLoader
Parameters:
name - the name of the class
Returns:
the resulting class
Throws:
ClassNotFoundException - if the class could not be found,
            or if the loader is closed.
NullPointerException - if name is null.


"
URLClassLoader,findResource(String name),URL,Finds the resource with the specified name on the URL search path.,"

findResource
public URL findResource(String name)
Finds the resource with the specified name on the URL search path.

Overrides:
findResource in class ClassLoader
Parameters:
name - the name of the resource
Returns:
a URL for the resource, or null
 if the resource could not be found, or if the loader is closed.


"
URLClassLoader,findResources(String name),Enumeration<URL>,Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.,"

findResources
public Enumeration<URL> findResources(String name)
                               throws IOException
Returns an Enumeration of URLs representing all of the resources
 on the URL search path having the specified name.

Overrides:
findResources in class ClassLoader
Parameters:
name - the resource name
Returns:
an Enumeration of URLs
         If the loader is closed, the Enumeration will be empty.
Throws:
IOException - if an I/O exception occurs


"
URLClassLoader,getPermissions(CodeSource codesource),protected PermissionCollection,Returns the permissions for the given codesource object.,"

getPermissions
protected PermissionCollection getPermissions(CodeSource codesource)
Returns the permissions for the given codesource object.
 The implementation of this method first calls super.getPermissions
 and then adds permissions based on the URL of the codesource.
 
 If the protocol of this URL is ""jar"", then the permission granted
 is based on the permission that is required by the URL of the Jar
 file.
 
 If the protocol is ""file"" and there is an authority component, then
 permission to connect to and accept connections from that authority
 may be granted. If the protocol is ""file""
 and the path specifies a file, then permission to read that
 file is granted. If protocol is ""file"" and the path is
 a directory, permission is granted to read all files
 and (recursively) all files and subdirectories contained in
 that directory.
 
 If the protocol is not ""file"", then permission
 to connect to and accept connections from the URL's host is granted.

Overrides:
getPermissions in class SecureClassLoader
Parameters:
codesource - the codesource
Returns:
the permissions granted to the codesource
Throws:
NullPointerException - if codesource is null.


"
URLClassLoader,getResourceAsStream(String name),InputStream,Returns an input stream for reading the specified resource.,"

getResourceAsStream
public InputStream getResourceAsStream(String name)
Returns an input stream for reading the specified resource.
 If this loader is closed, then any resources opened by this method
 will be closed.

  The search order is described in the documentation for ClassLoader.getResource(String).  

Overrides:
getResourceAsStream in class ClassLoader
Parameters:
name - The resource name
Returns:
An input stream for reading the resource, or null
          if the resource could not be found
Since:
1.7


"
URLClassLoader,getURLs(),URL[],Returns the search path of URLs for loading classes and resources.,"

getURLs
public URL[] getURLs()
Returns the search path of URLs for loading classes and resources.
 This includes the original list of URLs specified to the constructor,
 along with any URLs subsequently appended by the addURL() method.

Returns:
the search path of URLs for loading classes and resources.


"
URLClassLoader,newInstance(URL[] urls),static URLClassLoader,Creates a new instance of URLClassLoader for the specified URLs and default parent class loader.,"

newInstance
public static URLClassLoader newInstance(URL[] urls)
Creates a new instance of URLClassLoader for the specified
 URLs and default parent class loader. If a security manager is
 installed, the loadClass method of the URLClassLoader
 returned by this method will invoke the
 SecurityManager.checkPackageAccess before
 loading the class.

Parameters:
urls - the URLs to search for classes and resources
Returns:
the resulting class loader
Throws:
NullPointerException - if urls is null.


"
URLClassLoader,"newInstance(URL[] urls, ClassLoader parent)",static URLClassLoader,Creates a new instance of URLClassLoader for the specified URLs and parent class loader.,"

newInstance
public static URLClassLoader newInstance(URL[] urls,
                                         ClassLoader parent)
Creates a new instance of URLClassLoader for the specified
 URLs and parent class loader. If a security manager is
 installed, the loadClass method of the URLClassLoader
 returned by this method will invoke the
 SecurityManager.checkPackageAccess method before
 loading the class.

Parameters:
urls - the URLs to search for classes and resources
parent - the parent class loader for delegation
Returns:
the resulting class loader
Throws:
NullPointerException - if urls is null.


"
URLConnection,"addRequestProperty(String key, String value)",void,Adds a general request property specified by a key-value pair.,"

addRequestProperty
public void addRequestProperty(String key,
                               String value)
Adds a general request property specified by a
 key-value pair.  This method will not overwrite
 existing values associated with the same key.

Parameters:
key - the keyword by which the request is known
                  (e.g., ""Accept"").
value - the value associated with it.
Throws:
IllegalStateException - if already connected
NullPointerException - if key is null
Since:
1.4
See Also:
getRequestProperties()


"
URLConnection,connect(),abstract void,"Opens a communications link to the resource referenced by this URL, if such a connection has not already been established.","

connect
public abstract void connect()
                      throws IOException
Opens a communications link to the resource referenced by this
 URL, if such a connection has not already been established.
 
 If the connect method is called when the connection
 has already been opened (indicated by the connected
 field having the value true), the call is ignored.
 
 URLConnection objects go through two phases: first they are
 created, then they are connected.  After being created, and
 before being connected, various options can be specified
 (e.g., doInput and UseCaches).  After connecting, it is an
 error to try to set them.  Operations that depend on being
 connected, like getContentLength, will implicitly perform the
 connection, if necessary.

Throws:
SocketTimeoutException - if the timeout expires before
               the connection can be established
IOException - if an I/O error occurs while opening the
               connection.
See Also:
connected, 
getConnectTimeout(), 
setConnectTimeout(int)


"
URLConnection,getAllowUserInteraction(),boolean,Returns the value of the allowUserInteraction field for this object.,"

getAllowUserInteraction
public boolean getAllowUserInteraction()
Returns the value of the allowUserInteraction field for
 this object.

Returns:
the value of the allowUserInteraction field for
          this object.
See Also:
setAllowUserInteraction(boolean)


"
URLConnection,getConnectTimeout(),int,Returns setting for connect timeout.,"

getConnectTimeout
public int getConnectTimeout()
Returns setting for connect timeout.
 
 0 return implies that the option is disabled
 (i.e., timeout of infinity).

Returns:
an int that indicates the connect timeout
         value in milliseconds
Since:
1.5
See Also:
setConnectTimeout(int), 
connect()


"
URLConnection,getContent(),Object,Retrieves the contents of this URL connection.,"

getContent
public Object getContent()
                  throws IOException
Retrieves the contents of this URL connection.
 
 This method first determines the content type of the object by
 calling the getContentType method. If this is
 the first time that the application has seen that specific content
 type, a content handler for that content type is created:
 
If the application has set up a content handler factory instance
     using the setContentHandlerFactory method, the
     createContentHandler method of that instance is called
     with the content type as an argument; the result is a content
     handler for that content type.
 If no content handler factory has yet been set up, or if the
     factory's createContentHandler method returns
     null, then the application loads the class named:
     
         sun.net.www.content.<contentType>
     
     where <contentType> is formed by taking the
     content-type string, replacing all slash characters with a
     period ('.'), and all other non-alphanumeric characters
     with the underscore character '_'. The alphanumeric
     characters are specifically the 26 uppercase ASCII letters
     'A' through 'Z', the 26 lowercase ASCII
     letters 'a' through 'z', and the 10 ASCII
     digits '0' through '9'. If the specified
     class does not exist, or is not a subclass of
     ContentHandler, then an
     UnknownServiceException is thrown.
 

Returns:
the object fetched. The instanceof operator
               should be used to determine the specific kind of object
               returned.
Throws:
IOException - if an I/O error occurs while
               getting the content.
UnknownServiceException - if the protocol does not support
               the content type.
See Also:
ContentHandlerFactory.createContentHandler(java.lang.String), 
getContentType(), 
setContentHandlerFactory(java.net.ContentHandlerFactory)


"
URLConnection,getContent(Class[] classes),Object,Retrieves the contents of this URL connection.,"

getContent
public Object getContent(Class[] classes)
                  throws IOException
Retrieves the contents of this URL connection.

Parameters:
classes - the Class array
 indicating the requested types
Returns:
the object fetched that is the first match of the type
               specified in the classes array. null if none of
               the requested types are supported.
               The instanceof operator should be used to
               determine the specific kind of object returned.
Throws:
IOException - if an I/O error occurs while
               getting the content.
UnknownServiceException - if the protocol does not support
               the content type.
Since:
1.3
See Also:
getContent(), 
ContentHandlerFactory.createContentHandler(java.lang.String), 
getContent(java.lang.Class[]), 
setContentHandlerFactory(java.net.ContentHandlerFactory)


"
URLConnection,getContentEncoding(),String,Returns the value of the content-encoding header field.,"

getContentEncoding
public String getContentEncoding()
Returns the value of the content-encoding header field.

Returns:
the content encoding of the resource that the URL references,
          or null if not known.
See Also:
getHeaderField(java.lang.String)


"
URLConnection,getContentLength(),int,Returns the value of the content-length header field.,"

getContentLength
public int getContentLength()
Returns the value of the content-length header field.
 
Note: getContentLengthLong()
 should be preferred over this method, since it returns a long
 instead and is therefore more portable.

Returns:
the content length of the resource that this connection's URL
          references, -1 if the content length is not known,
          or if the content length is greater than Integer.MAX_VALUE.


"
URLConnection,getContentLengthLong(),long,Returns the value of the content-length header field as a long.,"

getContentLengthLong
public long getContentLengthLong()
Returns the value of the content-length header field as a
 long.

Returns:
the content length of the resource that this connection's URL
          references, or -1 if the content length is
          not known.
Since:
7.0


"
URLConnection,getContentType(),String,Returns the value of the content-type header field.,"

getContentType
public String getContentType()
Returns the value of the content-type header field.

Returns:
the content type of the resource that the URL references,
          or null if not known.
See Also:
getHeaderField(java.lang.String)


"
URLConnection,getDate(),long,Returns the value of the date header field.,"

getDate
public long getDate()
Returns the value of the date header field.

Returns:
the sending date of the resource that the URL references,
          or 0 if not known. The value returned is the
          number of milliseconds since January 1, 1970 GMT.
See Also:
getHeaderField(java.lang.String)


"
URLConnection,getDefaultAllowUserInteraction(),static boolean,Returns the default value of the allowUserInteraction field.,"

getDefaultAllowUserInteraction
public static boolean getDefaultAllowUserInteraction()
Returns the default value of the allowUserInteraction
 field.
 
 Ths default is ""sticky"", being a part of the static state of all
 URLConnections.  This flag applies to the next, and all following
 URLConnections that are created.

Returns:
the default value of the allowUserInteraction
          field.
See Also:
setDefaultAllowUserInteraction(boolean)


"
URLConnection,getDefaultRequestProperty(String key),static String,Deprecated. The instance specific getRequestProperty method should be used after an appropriate instance of URLConnection is obtained.,"

getDefaultRequestProperty
@Deprecated
public static String getDefaultRequestProperty(String key)
Deprecated. The instance specific getRequestProperty method
 should be used after an appropriate instance of URLConnection
 is obtained.
Returns the value of the default request property. Default request
 properties are set for every connection.

Parameters:
key - the keyword by which the request is known (e.g., ""Accept"").
Returns:
the value of the default request property
 for the specified key.
See Also:
getRequestProperty(java.lang.String), 
setDefaultRequestProperty(java.lang.String, java.lang.String)


"
URLConnection,getDefaultUseCaches(),boolean,Returns the default value of a URLConnection's useCaches flag.,"

getDefaultUseCaches
public boolean getDefaultUseCaches()
Returns the default value of a URLConnection's
 useCaches flag.
 
 Ths default is ""sticky"", being a part of the static state of all
 URLConnections.  This flag applies to the next, and all following
 URLConnections that are created.

Returns:
the default value of a URLConnection's
          useCaches flag.
See Also:
setDefaultUseCaches(boolean)


"
URLConnection,getDoInput(),boolean,Returns the value of this URLConnection's doInput flag.,"

getDoInput
public boolean getDoInput()
Returns the value of this URLConnection's
 doInput flag.

Returns:
the value of this URLConnection's
          doInput flag.
See Also:
setDoInput(boolean)


"
URLConnection,getDoOutput(),boolean,Returns the value of this URLConnection's doOutput flag.,"

getDoOutput
public boolean getDoOutput()
Returns the value of this URLConnection's
 doOutput flag.

Returns:
the value of this URLConnection's
          doOutput flag.
See Also:
setDoOutput(boolean)


"
URLConnection,getExpiration(),long,Returns the value of the expires header field.,"

getExpiration
public long getExpiration()
Returns the value of the expires header field.

Returns:
the expiration date of the resource that this URL references,
          or 0 if not known. The value is the number of milliseconds since
          January 1, 1970 GMT.
See Also:
getHeaderField(java.lang.String)


"
URLConnection,getFileNameMap(),static FileNameMap,Loads filename map (a mimetable) from a data file.,"

getFileNameMap
public static FileNameMap getFileNameMap()
Loads filename map (a mimetable) from a data file. It will
 first try to load the user-specific table, defined
 by ""content.types.user.table"" property. If that fails,
 it tries to load the default built-in table.

Returns:
the FileNameMap
Since:
1.2
See Also:
setFileNameMap(java.net.FileNameMap)


"
URLConnection,getHeaderField(int n),String,Returns the value for the nth header field.,"

getHeaderField
public String getHeaderField(int n)
Returns the value for the nth header field.
 It returns null if there are fewer than
 n+1fields.
 
 This method can be used in conjunction with the
 getHeaderFieldKey method to iterate through all
 the headers in the message.

Parameters:
n - an index, where n>=0
Returns:
the value of the nth header field
          or null if there are fewer than n+1 fields
See Also:
getHeaderFieldKey(int)


"
URLConnection,getHeaderField(String name),String,Returns the value of the named header field.,"

getHeaderField
public String getHeaderField(String name)
Returns the value of the named header field.
 
 If called on a connection that sets the same header multiple times
 with possibly different values, only the last value is returned.

Parameters:
name - the name of a header field.
Returns:
the value of the named header field, or null
          if there is no such field in the header.


"
URLConnection,"getHeaderFieldDate(String name, long Default)",long,Returns the value of the named field parsed as date.,"

getHeaderFieldDate
public long getHeaderFieldDate(String name,
                               long Default)
Returns the value of the named field parsed as date.
 The result is the number of milliseconds since January 1, 1970 GMT
 represented by the named field.
 
 This form of getHeaderField exists because some
 connection types (e.g., http-ng) have pre-parsed
 headers. Classes for that connection type can override this method
 and short-circuit the parsing.

Parameters:
name - the name of the header field.
Default - a default value.
Returns:
the value of the field, parsed as a date. The value of the
          Default argument is returned if the field is
          missing or malformed.


"
URLConnection,"getHeaderFieldInt(String name, int Default)",int,Returns the value of the named field parsed as a number.,"

getHeaderFieldInt
public int getHeaderFieldInt(String name,
                             int Default)
Returns the value of the named field parsed as a number.
 
 This form of getHeaderField exists because some
 connection types (e.g., http-ng) have pre-parsed
 headers. Classes for that connection type can override this method
 and short-circuit the parsing.

Parameters:
name - the name of the header field.
Default - the default value.
Returns:
the value of the named field, parsed as an integer. The
          Default value is returned if the field is
          missing or malformed.


"
URLConnection,getHeaderFieldKey(int n),String,Returns the key for the nth header field.,"

getHeaderFieldKey
public String getHeaderFieldKey(int n)
Returns the key for the nth header field.
 It returns null if there are fewer than n+1 fields.

Parameters:
n - an index, where n>=0
Returns:
the key for the nth header field,
          or null if there are fewer than n+1
          fields.


"
URLConnection,"getHeaderFieldLong(String name, long Default)",long,Returns the value of the named field parsed as a number.,"

getHeaderFieldLong
public long getHeaderFieldLong(String name,
                               long Default)
Returns the value of the named field parsed as a number.
 
 This form of getHeaderField exists because some
 connection types (e.g., http-ng) have pre-parsed
 headers. Classes for that connection type can override this method
 and short-circuit the parsing.

Parameters:
name - the name of the header field.
Default - the default value.
Returns:
the value of the named field, parsed as a long. The
          Default value is returned if the field is
          missing or malformed.
Since:
7.0


"
URLConnection,getHeaderFields(),"Map<String,List<String>>",Returns an unmodifiable Map of the header fields.,"

getHeaderFields
public Map<String,List<String>> getHeaderFields()
Returns an unmodifiable Map of the header fields.
 The Map keys are Strings that represent the
 response-header field names. Each Map value is an
 unmodifiable List of Strings that represents
 the corresponding field values.

Returns:
a Map of header fields
Since:
1.4


"
URLConnection,getIfModifiedSince(),long,Returns the value of this object's ifModifiedSince field.,"

getIfModifiedSince
public long getIfModifiedSince()
Returns the value of this object's ifModifiedSince field.

Returns:
the value of this object's ifModifiedSince field.
See Also:
setIfModifiedSince(long)


"
URLConnection,getInputStream(),InputStream,Returns an input stream that reads from this open connection.,"

getInputStream
public InputStream getInputStream()
                           throws IOException
Returns an input stream that reads from this open connection.

 A SocketTimeoutException can be thrown when reading from the
 returned input stream if the read timeout expires before data
 is available for read.

Returns:
an input stream that reads from this open connection.
Throws:
IOException - if an I/O error occurs while
               creating the input stream.
UnknownServiceException - if the protocol does not support
               input.
See Also:
setReadTimeout(int), 
getReadTimeout()


"
URLConnection,getLastModified(),long,Returns the value of the last-modified header field.,"

getLastModified
public long getLastModified()
Returns the value of the last-modified header field.
 The result is the number of milliseconds since January 1, 1970 GMT.

Returns:
the date the resource referenced by this
          URLConnection was last modified, or 0 if not known.
See Also:
getHeaderField(java.lang.String)


"
URLConnection,getOutputStream(),OutputStream,Returns an output stream that writes to this connection.,"

getOutputStream
public OutputStream getOutputStream()
                             throws IOException
Returns an output stream that writes to this connection.

Returns:
an output stream that writes to this connection.
Throws:
IOException - if an I/O error occurs while
               creating the output stream.
UnknownServiceException - if the protocol does not support
               output.


"
URLConnection,getPermission(),Permission,Returns a permission object representing the permission necessary to make the connection represented by this object.,"

getPermission
public Permission getPermission()
                         throws IOException
Returns a permission object representing the permission
 necessary to make the connection represented by this
 object. This method returns null if no permission is
 required to make the connection. By default, this method
 returns java.security.AllPermission. Subclasses
 should override this method and return the permission
 that best represents the permission required to make a
 a connection to the URL. For example, a URLConnection
 representing a file: URL would return a
 java.io.FilePermission object.

 The permission returned may dependent upon the state of the
 connection. For example, the permission before connecting may be
 different from that after connecting. For example, an HTTP
 sever, say foo.com, may redirect the connection to a different
 host, say bar.com. Before connecting the permission returned by
 the connection will represent the permission needed to connect
 to foo.com, while the permission returned after connecting will
 be to bar.com.

 Permissions are generally used for two purposes: to protect
 caches of objects obtained through URLConnections, and to check
 the right of a recipient to learn about a particular URL. In
 the first case, the permission should be obtained
 after the object has been obtained. For example, in an
 HTTP connection, this will represent the permission to connect
 to the host from which the data was ultimately fetched. In the
 second case, the permission should be obtained and tested
 before connecting.

Returns:
the permission object representing the permission
 necessary to make the connection represented by this
 URLConnection.
Throws:
IOException - if the computation of the permission
 requires network or file I/O and an exception occurs while
 computing it.


"
URLConnection,getReadTimeout(),int,Returns setting for read timeout.,"

getReadTimeout
public int getReadTimeout()
Returns setting for read timeout. 0 return implies that the
 option is disabled (i.e., timeout of infinity).

Returns:
an int that indicates the read timeout
         value in milliseconds
Since:
1.5
See Also:
setReadTimeout(int), 
InputStream.read()


"
URLConnection,getRequestProperties(),"Map<String,List<String>>",Returns an unmodifiable Map of general request properties for this connection.,"

getRequestProperties
public Map<String,List<String>> getRequestProperties()
Returns an unmodifiable Map of general request
 properties for this connection. The Map keys
 are Strings that represent the request-header
 field names. Each Map value is a unmodifiable List
 of Strings that represents the corresponding
 field values.

Returns:
a Map of the general request properties for this connection.
Throws:
IllegalStateException - if already connected
Since:
1.4


"
URLConnection,getRequestProperty(String key),String,Returns the value of the named general request property for this connection.,"

getRequestProperty
public String getRequestProperty(String key)
Returns the value of the named general request property for this
 connection.

Parameters:
key - the keyword by which the request is known (e.g., ""Accept"").
Returns:
the value of the named general request property for this
           connection. If key is null, then null is returned.
Throws:
IllegalStateException - if already connected
See Also:
setRequestProperty(java.lang.String, java.lang.String)


"
URLConnection,getURL(),URL,Returns the value of this URLConnection's URL field.,"

getURL
public URL getURL()
Returns the value of this URLConnection's URL
 field.

Returns:
the value of this URLConnection's URL
          field.
See Also:
url


"
URLConnection,getUseCaches(),boolean,Returns the value of this URLConnection's useCaches field.,"

getUseCaches
public boolean getUseCaches()
Returns the value of this URLConnection's
 useCaches field.

Returns:
the value of this URLConnection's
          useCaches field.
See Also:
setUseCaches(boolean)


"
URLConnection,guessContentTypeFromName(String fname),static String,"Tries to determine the content type of an object, based on the specified ""file"" component of a URL.","

guessContentTypeFromName
public static String guessContentTypeFromName(String fname)
Tries to determine the content type of an object, based
 on the specified ""file"" component of a URL.
 This is a convenience method that can be used by
 subclasses that override the getContentType method.

Parameters:
fname - a filename.
Returns:
a guess as to what the content type of the object is,
          based upon its file name.
See Also:
getContentType()


"
URLConnection,guessContentTypeFromStream(InputStream is),static String,Tries to determine the type of an input stream based on the characters at the beginning of the input stream.,"

guessContentTypeFromStream
public static String guessContentTypeFromStream(InputStream is)
                                         throws IOException
Tries to determine the type of an input stream based on the
 characters at the beginning of the input stream. This method can
 be used by subclasses that override the
 getContentType method.
 
 Ideally, this routine would not be needed. But many
 http servers return the incorrect content type; in
 addition, there are many nonstandard extensions. Direct inspection
 of the bytes to determine the content type is often more accurate
 than believing the content type claimed by the http server.

Parameters:
is - an input stream that supports marks.
Returns:
a guess at the content type, or null if none
             can be determined.
Throws:
IOException - if an I/O error occurs while reading the
               input stream.
See Also:
InputStream.mark(int), 
InputStream.markSupported(), 
getContentType()


"
URLConnection,setAllowUserInteraction(boolean allowuserinteraction),void,Set the value of the allowUserInteraction field of this URLConnection.,"

setAllowUserInteraction
public void setAllowUserInteraction(boolean allowuserinteraction)
Set the value of the allowUserInteraction field of
 this URLConnection.

Parameters:
allowuserinteraction - the new value.
Throws:
IllegalStateException - if already connected
See Also:
getAllowUserInteraction()


"
URLConnection,setConnectTimeout(int timeout),void,"Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection.","

setConnectTimeout
public void setConnectTimeout(int timeout)
Sets a specified timeout value, in milliseconds, to be used
 when opening a communications link to the resource referenced
 by this URLConnection.  If the timeout expires before the
 connection can be established, a
 java.net.SocketTimeoutException is raised. A timeout of zero is
 interpreted as an infinite timeout.

  Some non-standard implementation of this method may ignore
 the specified timeout. To see the connect timeout set, please
 call getConnectTimeout().

Parameters:
timeout - an int that specifies the connect
               timeout value in milliseconds
Throws:
IllegalArgumentException - if the timeout parameter is negative
Since:
1.5
See Also:
getConnectTimeout(), 
connect()


"
URLConnection,setContentHandlerFactory(ContentHandlerFactory fac),static void,Sets the ContentHandlerFactory of an application.,"

setContentHandlerFactory
public static void setContentHandlerFactory(ContentHandlerFactory fac)
Sets the ContentHandlerFactory of an
 application. It can be called at most once by an application.
 
 The ContentHandlerFactory instance is used to
 construct a content handler from a content type
 
 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
fac - the desired factory.
Throws:
Error - if the factory has already been defined.
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the operation.
See Also:
ContentHandlerFactory, 
getContent(), 
SecurityManager.checkSetFactory()


"
URLConnection,setDefaultAllowUserInteraction(boolean defaultallowuserinteraction),static void,Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.,"

setDefaultAllowUserInteraction
public static void setDefaultAllowUserInteraction(boolean defaultallowuserinteraction)
Sets the default value of the
 allowUserInteraction field for all future
 URLConnection objects to the specified value.

Parameters:
defaultallowuserinteraction - the new value.
See Also:
getDefaultAllowUserInteraction()


"
URLConnection,"setDefaultRequestProperty(String key, String value)",static void,Deprecated. The instance specific setRequestProperty method should be used after an appropriate instance of URLConnection is obtained. Invoking this method will have no effect.,"

setDefaultRequestProperty
@Deprecated
public static void setDefaultRequestProperty(String key,
                                                         String value)
Deprecated. The instance specific setRequestProperty method
 should be used after an appropriate instance of URLConnection
 is obtained. Invoking this method will have no effect.
Sets the default value of a general request property. When a
 URLConnection is created, it is initialized with
 these properties.

Parameters:
key - the keyword by which the request is known
                  (e.g., ""Accept"").
value - the value associated with the key.
See Also:
setRequestProperty(java.lang.String,java.lang.String), 
getDefaultRequestProperty(java.lang.String)


"
URLConnection,setDefaultUseCaches(boolean defaultusecaches),void,Sets the default value of the useCaches field to the specified value.,"

setDefaultUseCaches
public void setDefaultUseCaches(boolean defaultusecaches)
Sets the default value of the useCaches field to the
 specified value.

Parameters:
defaultusecaches - the new value.
See Also:
getDefaultUseCaches()


"
URLConnection,setDoInput(boolean doinput),void,Sets the value of the doInput field for this URLConnection to the specified value.,"

setDoInput
public void setDoInput(boolean doinput)
Sets the value of the doInput field for this
 URLConnection to the specified value.
 
 A URL connection can be used for input and/or output.  Set the DoInput
 flag to true if you intend to use the URL connection for input,
 false if not.  The default is true.

Parameters:
doinput - the new value.
Throws:
IllegalStateException - if already connected
See Also:
doInput, 
getDoInput()


"
URLConnection,setDoOutput(boolean dooutput),void,Sets the value of the doOutput field for this URLConnection to the specified value.,"

setDoOutput
public void setDoOutput(boolean dooutput)
Sets the value of the doOutput field for this
 URLConnection to the specified value.
 
 A URL connection can be used for input and/or output.  Set the DoOutput
 flag to true if you intend to use the URL connection for output,
 false if not.  The default is false.

Parameters:
dooutput - the new value.
Throws:
IllegalStateException - if already connected
See Also:
getDoOutput()


"
URLConnection,setFileNameMap(FileNameMap map),static void,Sets the FileNameMap.,"

setFileNameMap
public static void setFileNameMap(FileNameMap map)
Sets the FileNameMap.
 
 If there is a security manager, this method first calls
 the security manager's checkSetFactory method
 to ensure the operation is allowed.
 This could result in a SecurityException.

Parameters:
map - the FileNameMap to be set
Throws:
SecurityException - if a security manager exists and its
             checkSetFactory method doesn't allow the operation.
Since:
1.2
See Also:
SecurityManager.checkSetFactory(), 
getFileNameMap()


"
URLConnection,setIfModifiedSince(long ifmodifiedsince),void,Sets the value of the ifModifiedSince field of this URLConnection to the specified value.,"

setIfModifiedSince
public void setIfModifiedSince(long ifmodifiedsince)
Sets the value of the ifModifiedSince field of
 this URLConnection to the specified value.

Parameters:
ifmodifiedsince - the new value.
Throws:
IllegalStateException - if already connected
See Also:
getIfModifiedSince()


"
URLConnection,setReadTimeout(int timeout),void,"Sets the read timeout to a specified timeout, in milliseconds.","

setReadTimeout
public void setReadTimeout(int timeout)
Sets the read timeout to a specified timeout, in
 milliseconds. A non-zero value specifies the timeout when
 reading from Input stream when a connection is established to a
 resource. If the timeout expires before there is data available
 for read, a java.net.SocketTimeoutException is raised. A
 timeout of zero is interpreted as an infinite timeout.

 Some non-standard implementation of this method ignores the
 specified timeout. To see the read timeout set, please call
 getReadTimeout().

Parameters:
timeout - an int that specifies the timeout
 value to be used in milliseconds
Throws:
IllegalArgumentException - if the timeout parameter is negative
Since:
1.5
See Also:
getReadTimeout(), 
InputStream.read()


"
URLConnection,"setRequestProperty(String key, String value)",void,Sets the general request property.,"

setRequestProperty
public void setRequestProperty(String key,
                               String value)
Sets the general request property. If a property with the key already
 exists, overwrite its value with the new value.

  NOTE: HTTP requires all request properties which can
 legally have multiple instances with the same key
 to use a comma-separated list syntax which enables multiple
 properties to be appended into a single property.

Parameters:
key - the keyword by which the request is known
                  (e.g., ""Accept"").
value - the value associated with it.
Throws:
IllegalStateException - if already connected
NullPointerException - if key is null
See Also:
getRequestProperty(java.lang.String)


"
URLConnection,setUseCaches(boolean usecaches),void,Sets the value of the useCaches field of this URLConnection to the specified value.,"

setUseCaches
public void setUseCaches(boolean usecaches)
Sets the value of the useCaches field of this
 URLConnection to the specified value.
 
 Some protocols do caching of documents.  Occasionally, it is important
 to be able to ""tunnel through"" and ignore the caches (e.g., the
 ""reload"" button in a browser).  If the UseCaches flag on a connection
 is true, the connection is allowed to use whatever caches it can.
  If false, caches are to be ignored.
  The default value comes from DefaultUseCaches, which defaults to
 true.

Parameters:
usecaches - a boolean indicating whether
 or not to allow caching
Throws:
IllegalStateException - if already connected
See Also:
getUseCaches()


"
URLConnection,toString(),String,Returns a String representation of this URL connection.,"

toString
public String toString()
Returns a String representation of this URL connection.

Overrides:
toString in class Object
Returns:
a string representation of this URLConnection.


"
URLDecoder,decode(String s),static String,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the decode(String,String) method to specify the encoding.","

decode
@Deprecated
public static String decode(String s)
Deprecated. The resulting string may vary depending on the platform's
          default encoding. Instead, use the decode(String,String) method
          to specify the encoding.
Decodes a x-www-form-urlencoded string.
 The platform's default encoding is used to determine what characters
 are represented by any consecutive sequences of the form
 ""%xy"".

Parameters:
s - the String to decode
Returns:
the newly decoded String


"
URLDecoder,"decode(String s, String enc)",static String,Decodes a application/x-www-form-urlencoded string using a specific encoding scheme.,"

decode
public static String decode(String s,
                            String enc)
                     throws UnsupportedEncodingException
Decodes a application/x-www-form-urlencoded string using a specific
 encoding scheme.
 The supplied encoding is used to determine
 what characters are represented by any consecutive sequences of the
 form ""%xy"".
 
Note: The 
 World Wide Web Consortium Recommendation states that
 UTF-8 should be used. Not doing so may introduce
 incompatibilities.

Parameters:
s - the String to decode
enc - The name of a supported
    character
    encoding.
Returns:
the newly decoded String
Throws:
UnsupportedEncodingException - If character encoding needs to be consulted, but
             named character encoding is not supported
Since:
1.4
See Also:
URLEncoder.encode(java.lang.String, java.lang.String)


"
URLEncoder,encode(String s),static String,"Deprecated. The resulting string may vary depending on the platform's default encoding. Instead, use the encode(String,String) method to specify the encoding.","

encode
@Deprecated
public static String encode(String s)
Deprecated. The resulting string may vary depending on the platform's
             default encoding. Instead, use the encode(String,String)
             method to specify the encoding.
Translates a string into x-www-form-urlencoded
 format. This method uses the platform's default encoding
 as the encoding scheme to obtain the bytes for unsafe characters.

Parameters:
s - String to be translated.
Returns:
the translated String.


"
URLEncoder,"encode(String s, String enc)",static String,Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme.,"

encode
public static String encode(String s,
                            String enc)
                     throws UnsupportedEncodingException
Translates a string into application/x-www-form-urlencoded
 format using a specific encoding scheme. This method uses the
 supplied encoding scheme to obtain the bytes for unsafe
 characters.
 
Note: The 
 World Wide Web Consortium Recommendation states that
 UTF-8 should be used. Not doing so may introduce
 incompatibilities.

Parameters:
s - String to be translated.
enc - The name of a supported
    character
    encoding.
Returns:
the translated String.
Throws:
UnsupportedEncodingException - If the named encoding is not supported
Since:
1.4
See Also:
URLDecoder.decode(java.lang.String, java.lang.String)


"
URLPermission,equals(Object p),boolean,"Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url.","

equals
public boolean equals(Object p)
Returns true if, this.getActions().equals(p.getActions())
 and p's url equals this's url.  Returns false otherwise.

Specified by:
equals in class Permission
Parameters:
p - the object we are testing for equality with this object.
Returns:
true if both Permission objects are equivalent.
See Also:
Object.hashCode(), 
HashMap


"
URLPermission,getActions(),String,"Returns the normalized method list and request header list, in the form:","

getActions
public String getActions()
Returns the normalized method list and request
 header list, in the form:
 
      ""method-names : header-names""
 

 where method-names is the list of methods separated by commas
 and header-names is the list of permitted headers separated by commas.
 There is no white space in the returned String. If header-names is empty
 then the colon separator will not be present.

Specified by:
getActions in class Permission
Returns:
the actions of this Permission.


"
URLPermission,hashCode(),int,Returns a hashcode calculated from the hashcode of the actions String and the url string.,"

hashCode
public int hashCode()
Returns a hashcode calculated from the hashcode of the
 actions String and the url string.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
URLPermission,implies(Permission p),boolean,Checks if this URLPermission implies the given permission.,"

implies
public boolean implies(Permission p)
Checks if this URLPermission implies the given permission.
 Specifically, the following checks are done as if in the
 following sequence:
 
if 'p' is not an instance of URLPermission return false
if any of p's methods are not in this's method list, and if
     this's method list is not equal to ""*"", then return false.
if any of p's headers are not in this's request header list, and if
     this's request header list is not equal to ""*"", then return false.
if this's url scheme is not equal to p's url scheme return false
if the scheme specific part of this's url is '*' return true
if the set of hosts defined by p's url hostrange is not a subset of
     this's url hostrange then return false. For example, ""*.foo.oracle.com""
     is a subset of ""*.oracle.com"". ""foo.bar.oracle.com"" is not
     a subset of ""*.foo.oracle.com""
if the portrange defined by p's url is not a subset of the
     portrange defined by this's url then return false.
 if the path or paths specified by p's url are contained in the
     set of paths specified by this's url, then return true
 otherwise, return false

Some examples of how paths are matched are shown below:
 
Examples of Path Matching
this's pathp's pathmatch
/a/b/a/byes
/a/b/*/a/b/cyes
/a/b/*/a/b/c/dno
/a/b/-/a/b/c/dyes
/a/b/-/a/b/c/d/eyes
/a/b/-/a/b/c/*yes
/a/b/*/a/b/c/-no


Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
URLStreamHandler,"equals(URL u1, URL u2)",protected boolean,Provides the default equals calculation.,"

equals
protected boolean equals(URL u1,
                         URL u2)
Provides the default equals calculation. May be overidden by handlers
 for other protocols that have different requirements for equals().
 This method requires that none of its arguments is null. This is
 guaranteed by the fact that it is only called by java.net.URL class.

Parameters:
u1 - a URL object
u2 - a URL object
Returns:
true if the two urls are
 considered equal, ie. they refer to the same
 fragment in the same file.
Since:
1.3


"
URLStreamHandler,getDefaultPort(),protected int,Returns the default port for a URL parsed by this handler.,"

getDefaultPort
protected int getDefaultPort()
Returns the default port for a URL parsed by this handler. This method
 is meant to be overidden by handlers with default port numbers.

Returns:
the default port for a URL parsed by this handler.
Since:
1.3


"
URLStreamHandler,getHostAddress(URL u),protected InetAddress,Get the IP address of our host.,"

getHostAddress
protected InetAddress getHostAddress(URL u)
Get the IP address of our host. An empty host field or a DNS failure
 will result in a null return.

Parameters:
u - a URL object
Returns:
an InetAddress representing the host
 IP address.
Since:
1.3


"
URLStreamHandler,hashCode(URL u),protected int,Provides the default hash calculation.,"

hashCode
protected int hashCode(URL u)
Provides the default hash calculation. May be overidden by handlers for
 other protocols that have different requirements for hashCode
 calculation.

Parameters:
u - a URL object
Returns:
an int suitable for hash table indexing
Since:
1.3


"
URLStreamHandler,"hostsEqual(URL u1, URL u2)",protected boolean,Compares the host components of two URLs.,"

hostsEqual
protected boolean hostsEqual(URL u1,
                             URL u2)
Compares the host components of two URLs.

Parameters:
u1 - the URL of the first host to compare
u2 - the URL of the second host to compare
Returns:
true if and only if they
 are equal, false otherwise.
Since:
1.3


"
URLStreamHandler,openConnection(URL u),protected abstract URLConnection,Opens a connection to the object referenced by the URL argument.,"

openConnection
protected abstract URLConnection openConnection(URL u)
                                         throws IOException
Opens a connection to the object referenced by the
 URL argument.
 This method should be overridden by a subclass.

 If for the handler's protocol (such as HTTP or JAR), there
 exists a public, specialized URLConnection subclass belonging
 to one of the following packages or one of their subpackages:
 java.lang, java.io, java.util, java.net, the connection
 returned will be of that subclass. For example, for HTTP an
 HttpURLConnection will be returned, and for JAR a
 JarURLConnection will be returned.

Parameters:
u - the URL that this connects to.
Returns:
a URLConnection object for the URL.
Throws:
IOException - if an I/O error occurs while opening the
               connection.


"
URLStreamHandler,"openConnection(URL u, Proxy p)",protected URLConnection,"Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection.","

openConnection
protected URLConnection openConnection(URL u,
                                       Proxy p)
                                throws IOException
Same as openConnection(URL), except that the connection will be
 made through the specified proxy; Protocol handlers that do not
 support proxying will ignore the proxy parameter and make a
 normal connection.

 Calling this method preempts the system's default ProxySelector
 settings.

Parameters:
u - the URL that this connects to.
p - the proxy through which the connection will be made.
                 If direct connection is desired, Proxy.NO_PROXY
                 should be specified.
Returns:
a URLConnection object for the URL.
Throws:
IOException - if an I/O error occurs while opening the
               connection.
IllegalArgumentException - if either u or p is null,
               or p has the wrong type.
UnsupportedOperationException - if the subclass that
               implements the protocol doesn't support this method.
Since:
1.5


"
URLStreamHandler,"parseURL(URL u, String spec, int start, int limit)",protected void,Parses the string representation of a URL into a URL object.,"

parseURL
protected void parseURL(URL u,
                        String spec,
                        int start,
                        int limit)
Parses the string representation of a URL into a
 URL object.
 
 If there is any inherited context, then it has already been
 copied into the URL argument.
 
 The parseURL method of URLStreamHandler
 parses the string representation as if it were an
 http specification. Most URL protocol families have a
 similar parsing. A stream protocol handler for a protocol that has
 a different syntax must override this routine.

Parameters:
u - the URL to receive the result of parsing
                  the spec.
spec - the String representing the URL that
                  must be parsed.
start - the character index at which to begin parsing. This is
                  just past the ':' (if there is one) that
                  specifies the determination of the protocol name.
limit - the character position to stop parsing at. This is the
                  end of the string or the position of the
                  ""#"" character, if present. All information
                  after the sharp sign indicates an anchor.


"
URLStreamHandler,"sameFile(URL u1, URL u2)",protected boolean,"Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path.","

sameFile
protected boolean sameFile(URL u1,
                           URL u2)
Compare two urls to see whether they refer to the same file,
 i.e., having the same protocol, host, port, and path.
 This method requires that none of its arguments is null. This is
 guaranteed by the fact that it is only called indirectly
 by java.net.URL class.

Parameters:
u1 - a URL object
u2 - a URL object
Returns:
true if u1 and u2 refer to the same file
Since:
1.3


"
URLStreamHandler,"setURL(URL u, String protocol, String host, int port, String file, String ref)",protected void,"Deprecated. Use setURL(URL, String, String, int, String, String, String, String);","

setURL
@Deprecated
protected void setURL(URL u,
                                  String protocol,
                                  String host,
                                  int port,
                                  String file,
                                  String ref)
Deprecated. Use setURL(URL, String, String, int, String, String, String,
             String);
Sets the fields of the URL argument to the indicated values.
 Only classes derived from URLStreamHandler are able
 to use this method to set the values of the URL fields.

Parameters:
u - the URL to modify.
protocol - the protocol name. This value is ignored since 1.2.
host - the remote host value for the URL.
port - the port on the remote machine.
file - the file.
ref - the reference.
Throws:
SecurityException - if the protocol handler of the URL is
                                  different from this one


"
URLStreamHandler,"setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)",protected void,Sets the fields of the URL argument to the indicated values.,"

setURL
protected void setURL(URL u,
                      String protocol,
                      String host,
                      int port,
                      String authority,
                      String userInfo,
                      String path,
                      String query,
                      String ref)
Sets the fields of the URL argument to the indicated values.
 Only classes derived from URLStreamHandler are able
 to use this method to set the values of the URL fields.

Parameters:
u - the URL to modify.
protocol - the protocol name.
host - the remote host value for the URL.
port - the port on the remote machine.
authority - the authority part for the URL.
userInfo - the userInfo part of the URL.
path - the path component of the URL.
query - the query part for the URL.
ref - the reference.
Throws:
SecurityException - if the protocol handler of the URL is
                                  different from this one
Since:
1.3
See Also:
URL.set(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)


"
URLStreamHandler,toExternalForm(URL u),protected String,Converts a URL of a specific protocol to a String.,"

toExternalForm
protected String toExternalForm(URL u)
Converts a URL of a specific protocol to a
 String.

Parameters:
u - the URL.
Returns:
a string representation of the URL argument.


"
