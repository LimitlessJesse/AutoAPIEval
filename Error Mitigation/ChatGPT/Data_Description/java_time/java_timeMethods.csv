ClassName,Method,Return Type,Description,Full Description
Clock,equals(Object obj),boolean,Checks if this clock is equal to another clock.,"

equals
public boolean equals(Object obj)
Checks if this clock is equal to another clock.
 
 Clocks should override this method to compare equals based on
 their state and to meet the contract of Object.equals(java.lang.Object).
 If not overridden, the behavior is defined by Object.equals(java.lang.Object)

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other clock
See Also:
Object.hashCode(), 
HashMap


"
Clock,"fixed(Instant fixedInstant, ZoneId zone)",static Clock,Obtains a clock that always returns the same instant.,"

fixed
public static Clock fixed(Instant fixedInstant,
                          ZoneId zone)
Obtains a clock that always returns the same instant.
 
 This clock simply returns the specified instant.
 As such, it is not a clock in the conventional sense.
 The main use case for this is in testing, where the fixed clock ensures
 tests are not dependent on the current clock.
 
 The returned implementation is immutable, thread-safe and Serializable.

Parameters:
fixedInstant - the instant to use as the clock, not null
zone - the time-zone to use to convert the instant to date-time, not null
Returns:
a clock that always returns the same instant, not null


"
Clock,getZone(),abstract ZoneId,Gets the time-zone being used to create dates and times.,"

getZone
public abstract ZoneId getZone()
Gets the time-zone being used to create dates and times.
 
 A clock will typically obtain the current instant and then convert that
 to a date or time using a time-zone. This method returns the time-zone used.

Returns:
the time-zone being used to interpret instants, not null


"
Clock,hashCode(),int,A hash code for this clock.,"

hashCode
public int hashCode()
A hash code for this clock.
 
 Clocks should override this method based on
 their state and to meet the contract of Object.hashCode().
 If not overridden, the behavior is defined by Object.hashCode()

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Clock,instant(),abstract Instant,Gets the current instant of the clock.,"

instant
public abstract Instant instant()
Gets the current instant of the clock.
 
 This returns an instant representing the current instant as defined by the clock.

Returns:
the current instant from this clock, not null
Throws:
DateTimeException - if the instant cannot be obtained, not thrown by most implementations


"
Clock,millis(),long,Gets the current millisecond instant of the clock.,"

millis
public long millis()
Gets the current millisecond instant of the clock.
 
 This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).
 This is equivalent to the definition of System.currentTimeMillis().
 
 Most applications should avoid this method and use Instant to represent
 an instant on the time-line rather than a raw millisecond value.
 This method is provided to allow the use of the clock in high performance use cases
 where the creation of an object would be unacceptable.
 
 The default implementation currently calls instant().

Returns:
the current millisecond instant from this clock, measured from
  the Java epoch of 1970-01-01T00:00Z (UTC), not null
Throws:
DateTimeException - if the instant cannot be obtained, not thrown by most implementations


"
Clock,"offset(Clock baseClock, Duration offsetDuration)",static Clock,Obtains a clock that returns instants from the specified clock with the specified duration added,"

offset
public static Clock offset(Clock baseClock,
                           Duration offsetDuration)
Obtains a clock that returns instants from the specified clock with the
 specified duration added
 
 This clock wraps another clock, returning instants that are later by the
 specified duration. If the duration is negative, the instants will be
 earlier than the current date and time.
 The main use case for this is to simulate running in the future or in the past.
 
 A duration of zero would have no offsetting effect.
 Passing zero will return the underlying clock.
 
 The returned implementation is immutable, thread-safe and Serializable
 providing that the base clock is.

Parameters:
baseClock - the base clock to add the duration to, not null
offsetDuration - the duration to add, not null
Returns:
a clock based on the base clock with the duration added, not null


"
Clock,system(ZoneId zone),static Clock,Obtains a clock that returns the current instant using best available system clock.,"

system
public static Clock system(ZoneId zone)
Obtains a clock that returns the current instant using best available
 system clock.
 
 This clock is based on the best available system clock.
 This may use System.currentTimeMillis(), or a higher resolution
 clock if one is available.
 
 Conversion from instant to date or time uses the specified time-zone.
 
 The returned implementation is immutable, thread-safe and Serializable.

Parameters:
zone - the time-zone to use to convert the instant to date-time, not null
Returns:
a clock that uses the best available system clock in the specified zone, not null


"
Clock,systemDefaultZone(),static Clock,"Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone.","

systemDefaultZone
public static Clock systemDefaultZone()
Obtains a clock that returns the current instant using the best available
 system clock, converting to date and time using the default time-zone.
 
 This clock is based on the best available system clock.
 This may use System.currentTimeMillis(), or a higher resolution
 clock if one is available.
 
 Using this method hard codes a dependency to the default time-zone into your application.
 It is recommended to avoid this and use a specific time-zone whenever possible.
 The UTC clock should be used when you need the current instant
 without the date or time.
 
 The returned implementation is immutable, thread-safe and Serializable.
 It is equivalent to system(ZoneId.systemDefault()).

Returns:
a clock that uses the best available system clock in the default zone, not null
See Also:
ZoneId.systemDefault()


"
Clock,systemUTC(),static Clock,"Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone.","

systemUTC
public static Clock systemUTC()
Obtains a clock that returns the current instant using the best available
 system clock, converting to date and time using the UTC time-zone.
 
 This clock, rather than systemDefaultZone(), should be used when
 you need the current instant without the date or time.
 
 This clock is based on the best available system clock.
 This may use System.currentTimeMillis(), or a higher resolution
 clock if one is available.
 
 Conversion from instant to date or time uses the UTC time-zone.
 
 The returned implementation is immutable, thread-safe and Serializable.
 It is equivalent to system(ZoneOffset.UTC).

Returns:
a clock that uses the best available system clock in the UTC zone, not null


"
Clock,"tick(Clock baseClock, Duration tickDuration)",static Clock,Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration.,"

tick
public static Clock tick(Clock baseClock,
                         Duration tickDuration)
Obtains a clock that returns instants from the specified clock truncated
 to the nearest occurrence of the specified duration.
 
 This clock will only tick as per the specified duration. Thus, if the duration
 is half a second, the clock will return instants truncated to the half second.
 
 The tick duration must be positive. If it has a part smaller than a whole
 millisecond, then the whole duration must divide into one second without
 leaving a remainder. All normal tick durations will match these criteria,
 including any multiple of hours, minutes, seconds and milliseconds, and
 sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns.
 
 A duration of zero or one nanosecond would have no truncation effect.
 Passing one of these will return the underlying clock.
 
 Implementations may use a caching strategy for performance reasons.
 As such, it is possible that the start of the requested duration observed
 via this clock will be later than that observed directly via the underlying clock.
 
 The returned implementation is immutable, thread-safe and Serializable
 providing that the base clock is.

Parameters:
baseClock - the base clock to base the ticking clock on, not null
tickDuration - the duration of each visible tick, not negative, not null
Returns:
a clock that ticks in whole units of the duration, not null
Throws:
IllegalArgumentException - if the duration is negative, or has a
  part smaller than a whole millisecond such that the whole duration is not
  divisible into one second
ArithmeticException - if the duration is too large to be represented as nanos


"
Clock,tickMinutes(ZoneId zone),static Clock,Obtains a clock that returns the current instant ticking in whole minutes using best available system clock.,"

tickMinutes
public static Clock tickMinutes(ZoneId zone)
Obtains a clock that returns the current instant ticking in whole minutes
 using best available system clock.
 
 This clock will always have the nano-of-second and second-of-minute fields set to zero.
 This ensures that the visible time ticks in whole minutes.
 The underlying clock is the best available system clock, equivalent to
 using system(ZoneId).
 
 Implementations may use a caching strategy for performance reasons.
 As such, it is possible that the start of the minute observed via this
 clock will be later than that observed directly via the underlying clock.
 
 The returned implementation is immutable, thread-safe and Serializable.
 It is equivalent to tick(system(zone), Duration.ofMinutes(1)).

Parameters:
zone - the time-zone to use to convert the instant to date-time, not null
Returns:
a clock that ticks in whole minutes using the specified zone, not null


"
Clock,tickSeconds(ZoneId zone),static Clock,Obtains a clock that returns the current instant ticking in whole seconds using best available system clock.,"

tickSeconds
public static Clock tickSeconds(ZoneId zone)
Obtains a clock that returns the current instant ticking in whole seconds
 using best available system clock.
 
 This clock will always have the nano-of-second field set to zero.
 This ensures that the visible time ticks in whole seconds.
 The underlying clock is the best available system clock, equivalent to
 using system(ZoneId).
 
 Implementations may use a caching strategy for performance reasons.
 As such, it is possible that the start of the second observed via this
 clock will be later than that observed directly via the underlying clock.
 
 The returned implementation is immutable, thread-safe and Serializable.
 It is equivalent to tick(system(zone), Duration.ofSeconds(1)).

Parameters:
zone - the time-zone to use to convert the instant to date-time, not null
Returns:
a clock that ticks in whole seconds using the specified zone, not null


"
Clock,withZone(ZoneId zone),abstract Clock,Returns a copy of this clock with a different time-zone.,"

withZone
public abstract Clock withZone(ZoneId zone)
Returns a copy of this clock with a different time-zone.
 
 A clock will typically obtain the current instant and then convert that
 to a date or time using a time-zone. This method returns a clock with
 similar properties but using a different time-zone.

Parameters:
zone - the time-zone to change to, not null
Returns:
a clock based on this clock with the specified time-zone, not null


"
Duration,abs(),Duration,Returns a copy of this duration with a positive length.,"

abs
public Duration abs()
Returns a copy of this duration with a positive length.
 
 This method returns a positive duration by effectively removing the sign from any negative total length.
 For example, PT-1.3S will be returned as PT1.3S.
 
 This instance is immutable and unaffected by this method call.

Returns:
a Duration based on this duration with an absolute length, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,addTo(Temporal temporal),Temporal,Adds this duration to the specified temporal object.,"

addTo
public Temporal addTo(Temporal temporal)
Adds this duration to the specified temporal object.
 
 This returns a temporal object of the same observable type as the input
 with this duration added.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.plus(TemporalAmount).
 
   // these two lines are equivalent, but the second approach is recommended
   dateTime = thisDuration.addTo(dateTime);
   dateTime = dateTime.plus(thisDuration);
 

 The calculation will add the seconds, then nanos.
 Only non-zero amounts will be added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
addTo in interface TemporalAmount
Parameters:
temporal - the temporal object to adjust, not null
Returns:
an object of the same type with the adjustment made, not null
Throws:
DateTimeException - if unable to add
ArithmeticException - if numeric overflow occurs


"
Duration,"between(Temporal startInclusive, Temporal endExclusive)",static Duration,Obtains a Duration representing the duration between two temporal objects.,"

between
public static Duration between(Temporal startInclusive,
                               Temporal endExclusive)
Obtains a Duration representing the duration between two temporal objects.
 
 This calculates the duration between two temporal objects. If the objects
 are of different types, then the duration is calculated based on the type
 of the first object. For example, if the first argument is a LocalTime
 then the second argument is converted to a LocalTime.
 
 The specified temporal objects must support the SECONDS unit.
 For full accuracy, either the NANOS unit or the
 NANO_OF_SECOND field should be supported.
 
 The result of this method can be a negative period if the end is before the start.
 To guarantee to obtain a positive duration call abs() on the result.

Parameters:
startInclusive - the start instant, inclusive, not null
endExclusive - the end instant, exclusive, not null
Returns:
a Duration, not null
Throws:
DateTimeException - if the seconds between the temporals cannot be obtained
ArithmeticException - if the calculation exceeds the capacity of Duration


"
Duration,compareTo(Duration otherDuration),int,Compares this duration to the specified Duration.,"

compareTo
public int compareTo(Duration otherDuration)
Compares this duration to the specified Duration.
 
 The comparison is based on the total length of the durations.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<Duration>
Parameters:
otherDuration - the other duration to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
Duration,dividedBy(long divisor),Duration,Returns a copy of this duration divided by the specified value.,"

dividedBy
public Duration dividedBy(long divisor)
Returns a copy of this duration divided by the specified value.
 
 This instance is immutable and unaffected by this method call.

Parameters:
divisor - the value to divide the duration by, positive or negative, not zero
Returns:
a Duration based on this duration divided by the specified divisor, not null
Throws:
ArithmeticException - if the divisor is zero or if numeric overflow occurs


"
Duration,equals(Object otherDuration),boolean,Checks if this duration is equal to the specified Duration.,"

equals
public boolean equals(Object otherDuration)
Checks if this duration is equal to the specified Duration.
 
 The comparison is based on the total length of the durations.

Overrides:
equals in class Object
Parameters:
otherDuration - the other duration, null returns false
Returns:
true if the other duration is equal to this one
See Also:
Object.hashCode(), 
HashMap


"
Duration,from(TemporalAmount amount),static Duration,Obtains an instance of Duration from a temporal amount.,"

from
public static Duration from(TemporalAmount amount)
Obtains an instance of Duration from a temporal amount.
 
 This obtains a duration based on the specified amount.
 A TemporalAmount represents an  amount of time, which may be
 date-based or time-based, which this factory extracts to a duration.
 
 The conversion loops around the set of units from the amount and uses
 the duration of the unit to
 calculate the total Duration.
 Only a subset of units are accepted by this method. The unit must either
 have an exact duration
 or be ChronoUnit.DAYS which is treated as 24 hours.
 If any other units are found then an exception is thrown.

Parameters:
amount - the temporal amount to convert, not null
Returns:
the equivalent duration, not null
Throws:
DateTimeException - if unable to convert to a Duration
ArithmeticException - if numeric overflow occurs


"
Duration,get(TemporalUnit unit),long,Gets the value of the requested unit.,"

get
public long get(TemporalUnit unit)
Gets the value of the requested unit.
 
 This returns a value for each of the two supported units,
 SECONDS and NANOS.
 All other units throw an exception.

Specified by:
get in interface TemporalAmount
Parameters:
unit - the TemporalUnit for which to return the value
Returns:
the long value of the unit
Throws:
DateTimeException - if the unit is not supported
UnsupportedTemporalTypeException - if the unit is not supported


"
Duration,getNano(),int,Gets the number of nanoseconds within the second in this duration.,"

getNano
public int getNano()
Gets the number of nanoseconds within the second in this duration.
 
 The length of the duration is stored using two fields - seconds and nanoseconds.
 The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
 the length in seconds.
 The total duration is defined by calling this method and getSeconds().
 
 A Duration represents a directed distance between two points on the time-line.
 A negative duration is expressed by the negative sign of the seconds part.
 A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.

Returns:
the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999


"
Duration,getSeconds(),long,Gets the number of seconds in this duration.,"

getSeconds
public long getSeconds()
Gets the number of seconds in this duration.
 
 The length of the duration is stored using two fields - seconds and nanoseconds.
 The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
 the length in seconds.
 The total duration is defined by calling this method and getNano().
 
 A Duration represents a directed distance between two points on the time-line.
 A negative duration is expressed by the negative sign of the seconds part.
 A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.

Returns:
the whole seconds part of the length of the duration, positive or negative


"
Duration,getUnits(),List<TemporalUnit>,Gets the set of units supported by this duration.,"

getUnits
public List<TemporalUnit> getUnits()
Gets the set of units supported by this duration.
 
 The supported units are SECONDS,
 and NANOS.
 They are returned in the order seconds, nanos.
 
 This set can be used in conjunction with get(TemporalUnit)
 to access the entire state of the duration.

Specified by:
getUnits in interface TemporalAmount
Returns:
a list containing the seconds and nanos units, not null


"
Duration,hashCode(),int,A hash code for this duration.,"

hashCode
public int hashCode()
A hash code for this duration.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Duration,isNegative(),boolean,"Checks if this duration is negative, excluding zero.","

isNegative
public boolean isNegative()
Checks if this duration is negative, excluding zero.
 
 A Duration represents a directed distance between two points on
 the time-line and can therefore be positive, zero or negative.
 This method checks whether the length is less than zero.

Returns:
true if this duration has a total length less than zero


"
Duration,isZero(),boolean,Checks if this duration is zero length.,"

isZero
public boolean isZero()
Checks if this duration is zero length.
 
 A Duration represents a directed distance between two points on
 the time-line and can therefore be positive, zero or negative.
 This method checks whether the length is zero.

Returns:
true if this duration has a total length equal to zero


"
Duration,minus(Duration duration),Duration,Returns a copy of this duration with the specified duration subtracted.,"

minus
public Duration minus(Duration duration)
Returns a copy of this duration with the specified duration subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
duration - the duration to subtract, positive or negative, not null
Returns:
a Duration based on this duration with the specified duration subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,"minus(long amountToSubtract, TemporalUnit unit)",Duration,Returns a copy of this duration with the specified duration subtracted.,"

minus
public Duration minus(long amountToSubtract,
                      TemporalUnit unit)
Returns a copy of this duration with the specified duration subtracted.
 
 The duration amount is measured in terms of the specified unit.
 Only a subset of units are accepted by this method.
 The unit must either have an exact duration or
 be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception.
 
 This instance is immutable and unaffected by this method call.

Parameters:
amountToSubtract - the amount to subtract, measured in terms of the unit, positive or negative
unit - the unit that the amount is measured in, must have an exact duration, not null
Returns:
a Duration based on this duration with the specified duration subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusDays(long daysToSubtract),Duration,Returns a copy of this duration with the specified duration in standard 24 hour days subtracted.,"

minusDays
public Duration minusDays(long daysToSubtract)
Returns a copy of this duration with the specified duration in standard 24 hour days subtracted.
 
 The number of days is multiplied by 86400 to obtain the number of seconds to subtract.
 This is based on the standard definition of a day as 24 hours.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToSubtract - the days to subtract, positive or negative
Returns:
a Duration based on this duration with the specified days subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusHours(long hoursToSubtract),Duration,Returns a copy of this duration with the specified duration in hours subtracted.,"

minusHours
public Duration minusHours(long hoursToSubtract)
Returns a copy of this duration with the specified duration in hours subtracted.
 
 The number of hours is multiplied by 3600 to obtain the number of seconds to subtract.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hoursToSubtract - the hours to subtract, positive or negative
Returns:
a Duration based on this duration with the specified hours subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusMillis(long millisToSubtract),Duration,Returns a copy of this duration with the specified duration in milliseconds subtracted.,"

minusMillis
public Duration minusMillis(long millisToSubtract)
Returns a copy of this duration with the specified duration in milliseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
millisToSubtract - the milliseconds to subtract, positive or negative
Returns:
a Duration based on this duration with the specified milliseconds subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusMinutes(long minutesToSubtract),Duration,Returns a copy of this duration with the specified duration in minutes subtracted.,"

minusMinutes
public Duration minusMinutes(long minutesToSubtract)
Returns a copy of this duration with the specified duration in minutes subtracted.
 
 The number of hours is multiplied by 60 to obtain the number of seconds to subtract.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutesToSubtract - the minutes to subtract, positive or negative
Returns:
a Duration based on this duration with the specified minutes subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusNanos(long nanosToSubtract),Duration,Returns a copy of this duration with the specified duration in nanoseconds subtracted.,"

minusNanos
public Duration minusNanos(long nanosToSubtract)
Returns a copy of this duration with the specified duration in nanoseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToSubtract - the nanoseconds to subtract, positive or negative
Returns:
a Duration based on this duration with the specified nanoseconds subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,minusSeconds(long secondsToSubtract),Duration,Returns a copy of this duration with the specified duration in seconds subtracted.,"

minusSeconds
public Duration minusSeconds(long secondsToSubtract)
Returns a copy of this duration with the specified duration in seconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondsToSubtract - the seconds to subtract, positive or negative
Returns:
a Duration based on this duration with the specified seconds subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,multipliedBy(long multiplicand),Duration,Returns a copy of this duration multiplied by the scalar.,"

multipliedBy
public Duration multipliedBy(long multiplicand)
Returns a copy of this duration multiplied by the scalar.
 
 This instance is immutable and unaffected by this method call.

Parameters:
multiplicand - the value to multiply the duration by, positive or negative
Returns:
a Duration based on this duration multiplied by the specified scalar, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,negated(),Duration,Returns a copy of this duration with the length negated.,"

negated
public Duration negated()
Returns a copy of this duration with the length negated.
 
 This method swaps the sign of the total length of this duration.
 For example, PT1.3S will be returned as PT-1.3S.
 
 This instance is immutable and unaffected by this method call.

Returns:
a Duration based on this duration with the amount negated, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,"of(long amount, TemporalUnit unit)",static Duration,Obtains a Duration representing an amount in the specified unit.,"

of
public static Duration of(long amount,
                          TemporalUnit unit)
Obtains a Duration representing an amount in the specified unit.
 
 The parameters represent the two parts of a phrase like '6 Hours'. For example:
 
  Duration.of(3, SECONDS);
  Duration.of(465, HOURS);
 
 Only a subset of units are accepted by this method.
 The unit must either have an exact duration or
 be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception.

Parameters:
amount - the amount of the duration, measured in terms of the unit, positive or negative
unit - the unit that the duration is measured in, must have an exact duration, not null
Returns:
a Duration, not null
Throws:
DateTimeException - if the period unit has an estimated duration
ArithmeticException - if a numeric overflow occurs


"
Duration,ofDays(long days),static Duration,Obtains a Duration representing a number of standard 24 hour days.,"

ofDays
public static Duration ofDays(long days)
Obtains a Duration representing a number of standard 24 hour days.
 
 The seconds are calculated based on the standard definition of a day,
 where each day is 86400 seconds which implies a 24 hour day.
 The nanosecond in second field is set to zero.

Parameters:
days - the number of days, positive or negative
Returns:
a Duration, not null
Throws:
ArithmeticException - if the input days exceeds the capacity of Duration


"
Duration,ofHours(long hours),static Duration,Obtains a Duration representing a number of standard hours.,"

ofHours
public static Duration ofHours(long hours)
Obtains a Duration representing a number of standard hours.
 
 The seconds are calculated based on the standard definition of an hour,
 where each hour is 3600 seconds.
 The nanosecond in second field is set to zero.

Parameters:
hours - the number of hours, positive or negative
Returns:
a Duration, not null
Throws:
ArithmeticException - if the input hours exceeds the capacity of Duration


"
Duration,ofMillis(long millis),static Duration,Obtains a Duration representing a number of milliseconds.,"

ofMillis
public static Duration ofMillis(long millis)
Obtains a Duration representing a number of milliseconds.
 
 The seconds and nanoseconds are extracted from the specified milliseconds.

Parameters:
millis - the number of milliseconds, positive or negative
Returns:
a Duration, not null


"
Duration,ofMinutes(long minutes),static Duration,Obtains a Duration representing a number of standard minutes.,"

ofMinutes
public static Duration ofMinutes(long minutes)
Obtains a Duration representing a number of standard minutes.
 
 The seconds are calculated based on the standard definition of a minute,
 where each minute is 60 seconds.
 The nanosecond in second field is set to zero.

Parameters:
minutes - the number of minutes, positive or negative
Returns:
a Duration, not null
Throws:
ArithmeticException - if the input minutes exceeds the capacity of Duration


"
Duration,ofNanos(long nanos),static Duration,Obtains a Duration representing a number of nanoseconds.,"

ofNanos
public static Duration ofNanos(long nanos)
Obtains a Duration representing a number of nanoseconds.
 
 The seconds and nanoseconds are extracted from the specified nanoseconds.

Parameters:
nanos - the number of nanoseconds, positive or negative
Returns:
a Duration, not null


"
Duration,ofSeconds(long seconds),static Duration,Obtains a Duration representing a number of seconds.,"

ofSeconds
public static Duration ofSeconds(long seconds)
Obtains a Duration representing a number of seconds.
 
 The nanosecond in second field is set to zero.

Parameters:
seconds - the number of seconds, positive or negative
Returns:
a Duration, not null


"
Duration,"ofSeconds(long seconds, long nanoAdjustment)",static Duration,Obtains a Duration representing a number of seconds and an adjustment in nanoseconds.,"

ofSeconds
public static Duration ofSeconds(long seconds,
                                 long nanoAdjustment)
Obtains a Duration representing a number of seconds and an
 adjustment in nanoseconds.
 
 This method allows an arbitrary number of nanoseconds to be passed in.
 The factory will alter the values of the second and nanosecond in order
 to ensure that the stored nanosecond is in the range 0 to 999,999,999.
 For example, the following will result in the exactly the same duration:
 
  Duration.ofSeconds(3, 1);
  Duration.ofSeconds(4, -999_999_999);
  Duration.ofSeconds(2, 1000_000_001);
 

Parameters:
seconds - the number of seconds, positive or negative
nanoAdjustment - the nanosecond adjustment to the number of seconds, positive or negative
Returns:
a Duration, not null
Throws:
ArithmeticException - if the adjustment causes the seconds to exceed the capacity of Duration


"
Duration,parse(CharSequence text),static Duration,Obtains a Duration from a text string such as PnDTnHnMn.nS.,"

parse
public static Duration parse(CharSequence text)
Obtains a Duration from a text string such as PnDTnHnMn.nS.
 
 This will parse a textual representation of a duration, including the
 string produced by toString(). The formats accepted are based
 on the ISO-8601 duration format PnDTnHnMn.nS with days
 considered to be exactly 24 hours.
 
 The string starts with an optional sign, denoted by the ASCII negative
 or positive symbol. If negative, the whole period is negated.
 The ASCII letter ""P"" is next in upper or lower case.
 There are then four sections, each consisting of a number and a suffix.
 The sections have suffixes in ASCII of ""D"", ""H"", ""M"" and ""S"" for
 days, hours, minutes and seconds, accepted in upper or lower case.
 The suffixes must occur in order. The ASCII letter ""T"" must occur before
 the first occurrence, if any, of an hour, minute or second section.
 At least one of the four sections must be present, and if ""T"" is present
 there must be at least one section after the ""T"".
 The number part of each section must consist of one or more ASCII digits.
 The number may be prefixed by the ASCII negative or positive symbol.
 The number of days, hours and minutes must parse to an long.
 The number of seconds must parse to an long with optional fraction.
 The decimal point may be either a dot or a comma.
 The fractional part may have from zero to 9 digits.
 
 The leading plus/minus sign, and negative values for other units are
 not part of the ISO-8601 standard.
 
 Examples:
 
    ""PT20.345S"" -- parses as ""20.345 seconds""
    ""PT15M""     -- parses as ""15 minutes"" (where a minute is 60 seconds)
    ""PT10H""     -- parses as ""10 hours"" (where an hour is 3600 seconds)
    ""P2D""       -- parses as ""2 days"" (where a day is 24 hours or 86400 seconds)
    ""P2DT3H4M""  -- parses as ""2 days, 3 hours and 4 minutes""
    ""P-6H3M""    -- parses as ""-6 hours and +3 minutes""
    ""-P6H3M""    -- parses as ""-6 hours and -3 minutes""
    ""-P-6H+3M""  -- parses as ""+6 hours and -3 minutes""
 

Parameters:
text - the text to parse, not null
Returns:
the parsed duration, not null
Throws:
DateTimeParseException - if the text cannot be parsed to a duration


"
Duration,plus(Duration duration),Duration,Returns a copy of this duration with the specified duration added.,"

plus
public Duration plus(Duration duration)
Returns a copy of this duration with the specified duration added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
duration - the duration to add, positive or negative, not null
Returns:
a Duration based on this duration with the specified duration added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,"plus(long amountToAdd, TemporalUnit unit)",Duration,Returns a copy of this duration with the specified duration added.,"

plus
public Duration plus(long amountToAdd,
                     TemporalUnit unit)
Returns a copy of this duration with the specified duration added.
 
 The duration amount is measured in terms of the specified unit.
 Only a subset of units are accepted by this method.
 The unit must either have an exact duration or
 be ChronoUnit.DAYS which is treated as 24 hours. Other units throw an exception.
 
 This instance is immutable and unaffected by this method call.

Parameters:
amountToAdd - the amount to add, measured in terms of the unit, positive or negative
unit - the unit that the amount is measured in, must have an exact duration, not null
Returns:
a Duration based on this duration with the specified duration added, not null
Throws:
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Duration,plusDays(long daysToAdd),Duration,Returns a copy of this duration with the specified duration in standard 24 hour days added.,"

plusDays
public Duration plusDays(long daysToAdd)
Returns a copy of this duration with the specified duration in standard 24 hour days added.
 
 The number of days is multiplied by 86400 to obtain the number of seconds to add.
 This is based on the standard definition of a day as 24 hours.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToAdd - the days to add, positive or negative
Returns:
a Duration based on this duration with the specified days added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,plusHours(long hoursToAdd),Duration,Returns a copy of this duration with the specified duration in hours added.,"

plusHours
public Duration plusHours(long hoursToAdd)
Returns a copy of this duration with the specified duration in hours added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hoursToAdd - the hours to add, positive or negative
Returns:
a Duration based on this duration with the specified hours added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,plusMillis(long millisToAdd),Duration,Returns a copy of this duration with the specified duration in milliseconds added.,"

plusMillis
public Duration plusMillis(long millisToAdd)
Returns a copy of this duration with the specified duration in milliseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
millisToAdd - the milliseconds to add, positive or negative
Returns:
a Duration based on this duration with the specified milliseconds added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,plusMinutes(long minutesToAdd),Duration,Returns a copy of this duration with the specified duration in minutes added.,"

plusMinutes
public Duration plusMinutes(long minutesToAdd)
Returns a copy of this duration with the specified duration in minutes added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutesToAdd - the minutes to add, positive or negative
Returns:
a Duration based on this duration with the specified minutes added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,plusNanos(long nanosToAdd),Duration,Returns a copy of this duration with the specified duration in nanoseconds added.,"

plusNanos
public Duration plusNanos(long nanosToAdd)
Returns a copy of this duration with the specified duration in nanoseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToAdd - the nanoseconds to add, positive or negative
Returns:
a Duration based on this duration with the specified nanoseconds added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,plusSeconds(long secondsToAdd),Duration,Returns a copy of this duration with the specified duration in seconds added.,"

plusSeconds
public Duration plusSeconds(long secondsToAdd)
Returns a copy of this duration with the specified duration in seconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondsToAdd - the seconds to add, positive or negative
Returns:
a Duration based on this duration with the specified seconds added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,subtractFrom(Temporal temporal),Temporal,Subtracts this duration from the specified temporal object.,"

subtractFrom
public Temporal subtractFrom(Temporal temporal)
Subtracts this duration from the specified temporal object.
 
 This returns a temporal object of the same observable type as the input
 with this duration subtracted.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.minus(TemporalAmount).
 
   // these two lines are equivalent, but the second approach is recommended
   dateTime = thisDuration.subtractFrom(dateTime);
   dateTime = dateTime.minus(thisDuration);
 

 The calculation will subtract the seconds, then nanos.
 Only non-zero amounts will be added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
subtractFrom in interface TemporalAmount
Parameters:
temporal - the temporal object to adjust, not null
Returns:
an object of the same type with the adjustment made, not null
Throws:
DateTimeException - if unable to subtract
ArithmeticException - if numeric overflow occurs


"
Duration,toDays(),long,Gets the number of days in this duration.,"

toDays
public long toDays()
Gets the number of days in this duration.
 
 This returns the total number of days in the duration by dividing the
 number of seconds by 86400.
 This is based on the standard definition of a day as 24 hours.
 
 This instance is immutable and unaffected by this method call.

Returns:
the number of days in the duration, may be negative


"
Duration,toHours(),long,Gets the number of hours in this duration.,"

toHours
public long toHours()
Gets the number of hours in this duration.
 
 This returns the total number of hours in the duration by dividing the
 number of seconds by 3600.
 
 This instance is immutable and unaffected by this method call.

Returns:
the number of hours in the duration, may be negative


"
Duration,toMillis(),long,Converts this duration to the total length in milliseconds.,"

toMillis
public long toMillis()
Converts this duration to the total length in milliseconds.
 
 If this duration is too large to fit in a long milliseconds, then an
 exception is thrown.
 
 If this duration has greater than millisecond precision, then the conversion
 will drop any excess precision information as though the amount in nanoseconds
 was subject to integer division by one million.

Returns:
the total length of the duration in milliseconds
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,toMinutes(),long,Gets the number of minutes in this duration.,"

toMinutes
public long toMinutes()
Gets the number of minutes in this duration.
 
 This returns the total number of minutes in the duration by dividing the
 number of seconds by 60.
 
 This instance is immutable and unaffected by this method call.

Returns:
the number of minutes in the duration, may be negative


"
Duration,toNanos(),long,Converts this duration to the total length in nanoseconds expressed as a long.,"

toNanos
public long toNanos()
Converts this duration to the total length in nanoseconds expressed as a long.
 
 If this duration is too large to fit in a long nanoseconds, then an
 exception is thrown.

Returns:
the total length of the duration in nanoseconds
Throws:
ArithmeticException - if numeric overflow occurs


"
Duration,toString(),String,"A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S.","

toString
public String toString()
A string representation of this duration using ISO-8601 seconds
 based representation, such as PT8H6M12.345S.
 
 The format of the returned string will be PTnHnMnS, where n is
 the relevant hours, minutes or seconds part of the duration.
 Any fractional seconds are placed after a decimal point i the seconds section.
 If a section has a zero value, it is omitted.
 The hours, minutes and seconds will all have the same sign.
 
 Examples:
 
    ""20.345 seconds""                 -- ""PT20.345S
    ""15 minutes"" (15 * 60 seconds)   -- ""PT15M""
    ""10 hours"" (10 * 3600 seconds)   -- ""PT10H""
    ""2 days"" (2 * 86400 seconds)     -- ""PT48H""
 
 Note that multiples of 24 hours are not output as days to avoid confusion
 with Period.

Overrides:
toString in class Object
Returns:
an ISO-8601 representation of this duration, not null


"
Duration,withNanos(int nanoOfSecond),Duration,Returns a copy of this duration with the specified nano-of-second.,"

withNanos
public Duration withNanos(int nanoOfSecond)
Returns a copy of this duration with the specified nano-of-second.
 
 This returns a duration with the specified nano-of-second, retaining the
 seconds part of this duration.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
a Duration based on this period with the requested nano-of-second, not null
Throws:
DateTimeException - if the nano-of-second is invalid


"
Duration,withSeconds(long seconds),Duration,Returns a copy of this duration with the specified amount of seconds.,"

withSeconds
public Duration withSeconds(long seconds)
Returns a copy of this duration with the specified amount of seconds.
 
 This returns a duration with the specified seconds, retaining the
 nano-of-second part of this duration.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to represent, may be negative
Returns:
a Duration based on this period with the requested seconds, not null


"
Instant,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have this instant.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have this instant.
 
 This returns a temporal object of the same observable type as the input
 with the instant changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 twice, passing ChronoField.INSTANT_SECONDS and
 ChronoField.NANO_OF_SECOND as the fields.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisInstant.adjustInto(temporal);
   temporal = temporal.with(thisInstant);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
Instant,atOffset(ZoneOffset offset),OffsetDateTime,Combines this instant with an offset to create an OffsetDateTime.,"

atOffset
public OffsetDateTime atOffset(ZoneOffset offset)
Combines this instant with an offset to create an OffsetDateTime.
 
 This returns an OffsetDateTime formed from this instant at the
 specified offset from UTC/Greenwich. An exception will be thrown if the
 instant is too large to fit into an offset date-time.
 
 This method is equivalent to
 OffsetDateTime.ofInstant(this, offset).

Parameters:
offset - the offset to combine with, not null
Returns:
the offset date-time formed from this instant and the specified offset, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
Instant,atZone(ZoneId zone),ZonedDateTime,Combines this instant with a time-zone to create a ZonedDateTime.,"

atZone
public ZonedDateTime atZone(ZoneId zone)
Combines this instant with a time-zone to create a ZonedDateTime.
 
 This returns an ZonedDateTime formed from this instant at the
 specified time-zone. An exception will be thrown if the instant is too
 large to fit into a zoned date-time.
 
 This method is equivalent to
 ZonedDateTime.ofInstant(this, zone).

Parameters:
zone - the zone to combine with, not null
Returns:
the zoned date-time formed from this instant and the specified zone, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
Instant,compareTo(Instant otherInstant),int,Compares this instant to the specified instant.,"

compareTo
public int compareTo(Instant otherInstant)
Compares this instant to the specified instant.
 
 The comparison is based on the time-line position of the instants.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<Instant>
Parameters:
otherInstant - the other instant to compare to, not null
Returns:
the comparator value, negative if less, positive if greater
Throws:
NullPointerException - if otherInstant is null


"
Instant,equals(Object otherInstant),boolean,Checks if this instant is equal to the specified instant.,"

equals
public boolean equals(Object otherInstant)
Checks if this instant is equal to the specified instant.
 
 The comparison is based on the time-line position of the instants.

Overrides:
equals in class Object
Parameters:
otherInstant - the other instant, null returns false
Returns:
true if the other instant is equal to this one
See Also:
Object.hashCode(), 
HashMap


"
Instant,from(TemporalAccessor temporal),static Instant,Obtains an instance of Instant from a temporal object.,"

from
public static Instant from(TemporalAccessor temporal)
Obtains an instance of Instant from a temporal object.
 
 This obtains an instant based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of Instant.
 
 The conversion extracts the INSTANT_SECONDS
 and NANO_OF_SECOND fields.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, Instant::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the instant, not null
Throws:
DateTimeException - if unable to convert to an Instant


"
Instant,get(TemporalField field),int,Gets the value of the specified field from this instant as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this instant as an int.
 
 This queries this instant for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time, except INSTANT_SECONDS which is too
 large to fit in an int and throws a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
Instant,getEpochSecond(),long,Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.,"

getEpochSecond
public long getEpochSecond()
Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.
 
 The epoch second count is a simple incrementing count of seconds where
 second 0 is 1970-01-01T00:00:00Z.
 The nanosecond part of the day is returned by getNanosOfSecond.

Returns:
the seconds from the epoch of 1970-01-01T00:00:00Z


"
Instant,getLong(TemporalField field),long,Gets the value of the specified field from this instant as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this instant as a long.
 
 This queries this instant for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
Instant,getNano(),int,"Gets the number of nanoseconds, later along the time-line, from the start of the second.","

getNano
public int getNano()
Gets the number of nanoseconds, later along the time-line, from the start
 of the second.
 
 The nanosecond-of-second value measures the total number of nanoseconds from
 the second returned by getEpochSecond.

Returns:
the nanoseconds within the second, always positive, never exceeds 999,999,999


"
Instant,hashCode(),int,Returns a hash code for this instant.,"

hashCode
public int hashCode()
Returns a hash code for this instant.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Instant,isAfter(Instant otherInstant),boolean,Checks if this instant is after the specified instant.,"

isAfter
public boolean isAfter(Instant otherInstant)
Checks if this instant is after the specified instant.
 
 The comparison is based on the time-line position of the instants.

Parameters:
otherInstant - the other instant to compare to, not null
Returns:
true if this instant is after the specified instant
Throws:
NullPointerException - if otherInstant is null


"
Instant,isBefore(Instant otherInstant),boolean,Checks if this instant is before the specified instant.,"

isBefore
public boolean isBefore(Instant otherInstant)
Checks if this instant is before the specified instant.
 
 The comparison is based on the time-line position of the instants.

Parameters:
otherInstant - the other instant to compare to, not null
Returns:
true if this instant is before the specified instant
Throws:
NullPointerException - if otherInstant is null


"
Instant,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this instant can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
MICRO_OF_SECOND
MILLI_OF_SECOND
INSTANT_SECONDS

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this instant, false if not


"
Instant,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this date-time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
Instant,"minus(long amountToSubtract, TemporalUnit unit)",Instant,Returns a copy of this instant with the specified amount subtracted.,"

minus
public Instant minus(long amountToSubtract,
                     TemporalUnit unit)
Returns a copy of this instant with the specified amount subtracted.
 
 This returns a Instant, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
an Instant based on this instant with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Instant,minus(TemporalAmount amountToSubtract),Instant,Returns a copy of this instant with the specified amount subtracted.,"

minus
public Instant minus(TemporalAmount amountToSubtract)
Returns a copy of this instant with the specified amount subtracted.
 
 This returns an Instant, based on this one, with the specified amount subtracted.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
an Instant based on this instant with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
Instant,minusMillis(long millisToSubtract),Instant,Returns a copy of this instant with the specified duration in milliseconds subtracted.,"

minusMillis
public Instant minusMillis(long millisToSubtract)
Returns a copy of this instant with the specified duration in milliseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
millisToSubtract - the milliseconds to subtract, positive or negative
Returns:
an Instant based on this instant with the specified milliseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,minusNanos(long nanosToSubtract),Instant,Returns a copy of this instant with the specified duration in nanoseconds subtracted.,"

minusNanos
public Instant minusNanos(long nanosToSubtract)
Returns a copy of this instant with the specified duration in nanoseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToSubtract - the nanoseconds to subtract, positive or negative
Returns:
an Instant based on this instant with the specified nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,minusSeconds(long secondsToSubtract),Instant,Returns a copy of this instant with the specified duration in seconds subtracted.,"

minusSeconds
public Instant minusSeconds(long secondsToSubtract)
Returns a copy of this instant with the specified duration in seconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondsToSubtract - the seconds to subtract, positive or negative
Returns:
an Instant based on this instant with the specified seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,now(),static Instant,Obtains the current instant from the system clock.,"

now
public static Instant now()
Obtains the current instant from the system clock.
 
 This will query the system UTC clock to
 obtain the current instant.
 
 Using this method will prevent the ability to use an alternate time-source for
 testing because the clock is effectively hard-coded.

Returns:
the current instant using the system clock, not null


"
Instant,now(Clock clock),static Instant,Obtains the current instant from the specified clock.,"

now
public static Instant now(Clock clock)
Obtains the current instant from the specified clock.
 
 This will query the specified clock to obtain the current time.
 
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current instant, not null


"
Instant,ofEpochMilli(long epochMilli),static Instant,Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z.,"

ofEpochMilli
public static Instant ofEpochMilli(long epochMilli)
Obtains an instance of Instant using milliseconds from the
 epoch of 1970-01-01T00:00:00Z.
 
 The seconds and nanoseconds are extracted from the specified milliseconds.

Parameters:
epochMilli - the number of milliseconds from 1970-01-01T00:00:00Z
Returns:
an instant, not null
Throws:
DateTimeException - if the instant exceeds the maximum or minimum instant


"
Instant,ofEpochSecond(long epochSecond),static Instant,Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z.,"

ofEpochSecond
public static Instant ofEpochSecond(long epochSecond)
Obtains an instance of Instant using seconds from the
 epoch of 1970-01-01T00:00:00Z.
 
 The nanosecond field is set to zero.

Parameters:
epochSecond - the number of seconds from 1970-01-01T00:00:00Z
Returns:
an instant, not null
Throws:
DateTimeException - if the instant exceeds the maximum or minimum instant


"
Instant,"ofEpochSecond(long epochSecond, long nanoAdjustment)",static Instant,Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.,"

ofEpochSecond
public static Instant ofEpochSecond(long epochSecond,
                                    long nanoAdjustment)
Obtains an instance of Instant using seconds from the
 epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.
 
 This method allows an arbitrary number of nanoseconds to be passed in.
 The factory will alter the values of the second and nanosecond in order
 to ensure that the stored nanosecond is in the range 0 to 999,999,999.
 For example, the following will result in the exactly the same instant:
 
  Instant.ofEpochSecond(3, 1);
  Instant.ofEpochSecond(4, -999_999_999);
  Instant.ofEpochSecond(2, 1000_000_001);
 

Parameters:
epochSecond - the number of seconds from 1970-01-01T00:00:00Z
nanoAdjustment - the nanosecond adjustment to the number of seconds, positive or negative
Returns:
an instant, not null
Throws:
DateTimeException - if the instant exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,parse(CharSequence text),static Instant,Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z.,"

parse
public static Instant parse(CharSequence text)
Obtains an instance of Instant from a text string such as
 2007-12-03T10:15:30.00Z.
 
 The string must represent a valid instant in UTC and is parsed using
 DateTimeFormatter.ISO_INSTANT.

Parameters:
text - the text to parse, not null
Returns:
the parsed instant, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
Instant,"plus(long amountToAdd, TemporalUnit unit)",Instant,Returns a copy of this instant with the specified amount added.,"

plus
public Instant plus(long amountToAdd,
                    TemporalUnit unit)
Returns a copy of this instant with the specified amount added.
 
 This returns an Instant, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The supported fields behave as follows:
 
NANOS -
  Returns a Instant with the specified number of nanoseconds added.
  This is equivalent to plusNanos(long).
 MICROS -
  Returns a Instant with the specified number of microseconds added.
  This is equivalent to plusNanos(long) with the amount
  multiplied by 1,000.
 MILLIS -
  Returns a Instant with the specified number of milliseconds added.
  This is equivalent to plusNanos(long) with the amount
  multiplied by 1,000,000.
 SECONDS -
  Returns a Instant with the specified number of seconds added.
  This is equivalent to plusSeconds(long).
 MINUTES -
  Returns a Instant with the specified number of minutes added.
  This is equivalent to plusSeconds(long) with the amount
  multiplied by 60.
 HOURS -
  Returns a Instant with the specified number of hours added.
  This is equivalent to plusSeconds(long) with the amount
  multiplied by 3,600.
 HALF_DAYS -
  Returns a Instant with the specified number of half-days added.
  This is equivalent to plusSeconds(long) with the amount
  multiplied by 43,200 (12 hours).
 DAYS -
  Returns a Instant with the specified number of days added.
  This is equivalent to plusSeconds(long) with the amount
  multiplied by 86,400 (24 hours).
 

 All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
an Instant based on this instant with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Instant,plus(TemporalAmount amountToAdd),Instant,Returns a copy of this instant with the specified amount added.,"

plus
public Instant plus(TemporalAmount amountToAdd)
Returns a copy of this instant with the specified amount added.
 
 This returns an Instant, based on this one, with the specified amount added.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
an Instant based on this instant with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
Instant,plusMillis(long millisToAdd),Instant,Returns a copy of this instant with the specified duration in milliseconds added.,"

plusMillis
public Instant plusMillis(long millisToAdd)
Returns a copy of this instant with the specified duration in milliseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
millisToAdd - the milliseconds to add, positive or negative
Returns:
an Instant based on this instant with the specified milliseconds added, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,plusNanos(long nanosToAdd),Instant,Returns a copy of this instant with the specified duration in nanoseconds added.,"

plusNanos
public Instant plusNanos(long nanosToAdd)
Returns a copy of this instant with the specified duration in nanoseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToAdd - the nanoseconds to add, positive or negative
Returns:
an Instant based on this instant with the specified nanoseconds added, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,plusSeconds(long secondsToAdd),Instant,Returns a copy of this instant with the specified duration in seconds added.,"

plusSeconds
public Instant plusSeconds(long secondsToAdd)
Returns a copy of this instant with the specified duration in seconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondsToAdd - the seconds to add, positive or negative
Returns:
an Instant based on this instant with the specified seconds added, not null
Throws:
DateTimeException - if the result exceeds the maximum or minimum instant
ArithmeticException - if numeric overflow occurs


"
Instant,query(TemporalQuery<R> query),<R> R,Queries this instant using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this instant using the specified query.
 
 This queries this instant using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
Instant,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This instant is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
Instant,toEpochMilli(),long,Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z.,"

toEpochMilli
public long toEpochMilli()
Converts this instant to the number of milliseconds from the epoch
 of 1970-01-01T00:00:00Z.
 
 If this instant represents a point on the time-line too far in the future
 or past to fit in a long milliseconds, then an exception is thrown.
 
 If this instant has greater than millisecond precision, then the conversion
 will drop any excess precision information as though the amount in nanoseconds
 was subject to integer division by one million.

Returns:
the number of milliseconds since the epoch of 1970-01-01T00:00:00Z
Throws:
ArithmeticException - if numeric overflow occurs


"
Instant,toString(),String,A string representation of this instant using ISO-8601 representation.,"

toString
public String toString()
A string representation of this instant using ISO-8601 representation.
 
 The format used is the same as DateTimeFormatter.ISO_INSTANT.

Overrides:
toString in class Object
Returns:
an ISO-8601 representation of this instant, not null


"
Instant,truncatedTo(TemporalUnit unit),Instant,Returns a copy of this Instant truncated to the specified unit.,"

truncatedTo
public Instant truncatedTo(TemporalUnit unit)
Returns a copy of this Instant truncated to the specified unit.
 
 Truncating the instant returns a copy of the original with fields
 smaller than the specified unit set to zero.
 The fields are calculated on the basis of using a UTC offset as seen
 in toString.
 For example, truncating with the MINUTES unit will
 round down to the nearest minute, setting the seconds and nanoseconds to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
an Instant based on this instant with the time truncated, not null
Throws:
DateTimeException - if the unit is invalid for truncation
UnsupportedTemporalTypeException - if the unit is not supported


"
Instant,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another instant in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another instant in terms of the specified unit.
 
 This calculates the amount of time between two Instant
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified instant.
 The result will be negative if the end is before the start.
 The calculation returns a whole number, representing the number of
 complete units between the two instants.
 The Temporal passed to this method is converted to a
 Instant using from(TemporalAccessor).
 For example, the amount in days between two dates can be calculated
 using startInstant.until(endInstant, SECONDS).
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, SECONDS);
   amount = SECONDS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS, HALF_DAYS and DAYS
 are supported. Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to an Instant, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this instant and the end instant
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to an Instant
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Instant,with(TemporalAdjuster adjuster),Instant,Returns an adjusted copy of this instant.,"

with
public Instant with(TemporalAdjuster adjuster)
Returns an adjusted copy of this instant.
 
 This returns an Instant, based on this one, with the instant adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an Instant based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
Instant,"with(TemporalField field, long newValue)",Instant,Returns a copy of this instant with the specified field set to a new value.,"

with
public Instant with(TemporalField field,
                    long newValue)
Returns a copy of this instant with the specified field set to a new value.
 
 This returns an Instant, based on this one, with the value
 for the specified field changed.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields behave as follows:
 
NANO_OF_SECOND -
  Returns an Instant with the specified nano-of-second.
  The epoch-second will be unchanged.
 MICRO_OF_SECOND -
  Returns an Instant with the nano-of-second replaced by the specified
  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.
 MILLI_OF_SECOND -
  Returns an Instant with the nano-of-second replaced by the specified
  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.
 INSTANT_SECONDS -
  Returns an Instant with the specified epoch-second.
  The nano-of-second will be unchanged.
 

 In all cases, if the new value is outside the valid range of values for the field
 then a DateTimeException will be thrown.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
an Instant based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have the same date as this object.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same date as this object.
 
 This returns a temporal object of the same observable type as the input
 with the date changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 passing ChronoField.EPOCH_DAY as the field.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisLocalDate.adjustInto(temporal);
   temporal = temporal.with(thisLocalDate);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface ChronoLocalDate
Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
LocalDate,atStartOfDay(),LocalDateTime,Combines this date with the time of midnight to create a LocalDateTime at the start of this date.,"

atStartOfDay
public LocalDateTime atStartOfDay()
Combines this date with the time of midnight to create a LocalDateTime
 at the start of this date.
 
 This returns a LocalDateTime formed from this date at the time of
 midnight, 00:00, at the start of this date.

Returns:
the local date-time of midnight at the start of this date, not null


"
LocalDate,atStartOfDay(ZoneId zone),ZonedDateTime,Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone.,"

atStartOfDay
public ZonedDateTime atStartOfDay(ZoneId zone)
Returns a zoned date-time from this date at the earliest valid time according
 to the rules in the time-zone.
 
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may not be midnight.
 
 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, there are two valid offsets, and the earlier one is used,
 corresponding to the first occurrence of midnight on the date.
 In the case of a gap, the zoned date-time will represent the instant just after the gap.
 
 If the zone ID is a ZoneOffset, then the result always has a time of midnight.
 
 To convert to a specific time in a given time-zone call atTime(LocalTime)
 followed by LocalDateTime.atZone(ZoneId).

Parameters:
zone - the zone ID to use, not null
Returns:
the zoned date-time formed from this date and the earliest valid time for the zone, not null


"
LocalDate,"atTime(int hour, int minute)",LocalDateTime,Combines this date with a time to create a LocalDateTime.,"

atTime
public LocalDateTime atTime(int hour,
                            int minute)
Combines this date with a time to create a LocalDateTime.
 
 This returns a LocalDateTime formed from this date at the
 specified hour and minute.
 The seconds and nanosecond fields will be set to zero.
 The individual time fields must be within their valid range.
 All possible combinations of date and time are valid.

Parameters:
hour - the hour-of-day to use, from 0 to 23
minute - the minute-of-hour to use, from 0 to 59
Returns:
the local date-time formed from this date and the specified time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalDate,"atTime(int hour, int minute, int second)",LocalDateTime,Combines this date with a time to create a LocalDateTime.,"

atTime
public LocalDateTime atTime(int hour,
                            int minute,
                            int second)
Combines this date with a time to create a LocalDateTime.
 
 This returns a LocalDateTime formed from this date at the
 specified hour, minute and second.
 The nanosecond field will be set to zero.
 The individual time fields must be within their valid range.
 All possible combinations of date and time are valid.

Parameters:
hour - the hour-of-day to use, from 0 to 23
minute - the minute-of-hour to use, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
Returns:
the local date-time formed from this date and the specified time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalDate,"atTime(int hour, int minute, int second, int nanoOfSecond)",LocalDateTime,Combines this date with a time to create a LocalDateTime.,"

atTime
public LocalDateTime atTime(int hour,
                            int minute,
                            int second,
                            int nanoOfSecond)
Combines this date with a time to create a LocalDateTime.
 
 This returns a LocalDateTime formed from this date at the
 specified hour, minute, second and nanosecond.
 The individual time fields must be within their valid range.
 All possible combinations of date and time are valid.

Parameters:
hour - the hour-of-day to use, from 0 to 23
minute - the minute-of-hour to use, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
the local date-time formed from this date and the specified time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalDate,atTime(LocalTime time),LocalDateTime,Combines this date with a time to create a LocalDateTime.,"

atTime
public LocalDateTime atTime(LocalTime time)
Combines this date with a time to create a LocalDateTime.
 
 This returns a LocalDateTime formed from this date at the specified time.
 All possible combinations of date and time are valid.

Specified by:
atTime in interface ChronoLocalDate
Parameters:
time - the time to combine with, not null
Returns:
the local date-time formed from this date and the specified time, not null


"
LocalDate,atTime(OffsetTime time),OffsetDateTime,Combines this date with an offset time to create an OffsetDateTime.,"

atTime
public OffsetDateTime atTime(OffsetTime time)
Combines this date with an offset time to create an OffsetDateTime.
 
 This returns an OffsetDateTime formed from this date at the specified time.
 All possible combinations of date and time are valid.

Parameters:
time - the time to combine with, not null
Returns:
the offset date-time formed from this date and the specified time, not null


"
LocalDate,compareTo(ChronoLocalDate other),int,Compares this date to another date.,"

compareTo
public int compareTo(ChronoLocalDate other)
Compares this date to another date.
 
 The comparison is primarily based on the date, from earliest to latest.
 It is ""consistent with equals"", as defined by Comparable.
 
 If all the dates being compared are instances of LocalDate,
 then the comparison will be entirely based on the date.
 If some dates being compared are in different chronologies, then the
 chronology is also considered, see ChronoLocalDate.compareTo(java.time.chrono.ChronoLocalDate).

Specified by:
compareTo in interface Comparable<ChronoLocalDate>
Specified by:
compareTo in interface ChronoLocalDate
Parameters:
other - the other date to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
LocalDate,equals(Object obj),boolean,Checks if this date is equal to another date.,"

equals
public boolean equals(Object obj)
Checks if this date is equal to another date.
 
 Compares this LocalDate with another ensuring that the date is the same.
 
 Only objects of type LocalDate are compared, other types return false.
 To compare the dates of two TemporalAccessor instances, including dates
 in two different chronologies, use ChronoField.EPOCH_DAY as a comparator.

Specified by:
equals in interface ChronoLocalDate
Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other date
See Also:
Object.hashCode(), 
HashMap


"
LocalDate,format(DateTimeFormatter formatter),String,Formats this date using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this date using the specified formatter.
 
 This date will be passed to the formatter to produce a string.

Specified by:
format in interface ChronoLocalDate
Parameters:
formatter - the formatter to use, not null
Returns:
the formatted date string, not null
Throws:
DateTimeException - if an error occurs during printing


"
LocalDate,from(TemporalAccessor temporal),static LocalDate,Obtains an instance of LocalDate from a temporal object.,"

from
public static LocalDate from(TemporalAccessor temporal)
Obtains an instance of LocalDate from a temporal object.
 
 This obtains a local date based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of LocalDate.
 
 The conversion uses the TemporalQueries.localDate() query, which relies
 on extracting the EPOCH_DAY field.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, LocalDate::from.

Specified by:
from in interface ChronoLocalDate
Parameters:
temporal - the temporal object to convert, not null
Returns:
the local date, not null
Throws:
DateTimeException - if unable to convert to a LocalDate
See Also:
Chronology.date(TemporalAccessor)


"
LocalDate,get(TemporalField field),int,Gets the value of the specified field from this date as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this date as an int.
 
 This queries this date for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date, except EPOCH_DAY and PROLEPTIC_MONTH
 which are too large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
LocalDate,getChronology(),IsoChronology,"Gets the chronology of this date, which is the ISO calendar system.","

getChronology
public IsoChronology getChronology()
Gets the chronology of this date, which is the ISO calendar system.
 
 The Chronology represents the calendar system in use.
 The ISO-8601 calendar system is the modern civil calendar system used today
 in most of the world. It is equivalent to the proleptic Gregorian calendar
 system, in which today's rules for leap years are applied for all time.

Specified by:
getChronology in interface ChronoLocalDate
Returns:
the ISO chronology, not null


"
LocalDate,getDayOfMonth(),int,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
LocalDate,getDayOfWeek(),DayOfWeek,"Gets the day-of-week field, which is an enum DayOfWeek.","

getDayOfWeek
public DayOfWeek getDayOfWeek()
Gets the day-of-week field, which is an enum DayOfWeek.
 
 This method returns the enum DayOfWeek for the day-of-week.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.
 
 Additional information can be obtained from the DayOfWeek.
 This includes textual names of the values.

Returns:
the day-of-week, not null


"
LocalDate,getDayOfYear(),int,Gets the day-of-year field.,"

getDayOfYear
public int getDayOfYear()
Gets the day-of-year field.
 
 This method returns the primitive int value for the day-of-year.

Returns:
the day-of-year, from 1 to 365, or 366 in a leap year


"
LocalDate,getEra(),Era,Gets the era applicable at this date.,"

getEra
public Era getEra()
Gets the era applicable at this date.
 
 The official ISO-8601 standard does not define eras, however IsoChronology does.
 It defines two eras, 'CE' from year one onwards and 'BCE' from year zero backwards.
 Since dates before the Julian-Gregorian cutover are not in line with history,
 the cutover between 'BCE' and 'CE' is also not aligned with the commonly used
 eras, often referred to using 'BC' and 'AD'.
 
 Users of this class should typically ignore this method as it exists primarily
 to fulfill the ChronoLocalDate contract where it is necessary to support
 the Japanese calendar system.
 
 The returned era will be a singleton capable of being compared with the constants
 in IsoChronology using the == operator.

Specified by:
getEra in interface ChronoLocalDate
Returns:
the IsoChronology era constant applicable at this date, not null


"
LocalDate,getLong(TemporalField field),long,Gets the value of the specified field from this date as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this date as a long.
 
 This queries this date for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
LocalDate,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
LocalDate,getYear(),int,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
LocalDate,hashCode(),int,A hash code for this date.,"

hashCode
public int hashCode()
A hash code for this date.

Specified by:
hashCode in interface ChronoLocalDate
Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
LocalDate,isAfter(ChronoLocalDate other),boolean,Checks if this date is after the specified date.,"

isAfter
public boolean isAfter(ChronoLocalDate other)
Checks if this date is after the specified date.
 
 This checks to see if this date represents a point on the
 local time-line after the other date.
 
   LocalDate a = LocalDate.of(2012, 6, 30);
   LocalDate b = LocalDate.of(2012, 7, 1);
   a.isAfter(b) == false
   a.isAfter(a) == false
   b.isAfter(a) == true
 

 This method only considers the position of the two dates on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDate),
 but is the same approach as ChronoLocalDate.timeLineOrder().

Specified by:
isAfter in interface ChronoLocalDate
Parameters:
other - the other date to compare to, not null
Returns:
true if this date is after the specified date


"
LocalDate,isBefore(ChronoLocalDate other),boolean,Checks if this date is before the specified date.,"

isBefore
public boolean isBefore(ChronoLocalDate other)
Checks if this date is before the specified date.
 
 This checks to see if this date represents a point on the
 local time-line before the other date.
 
   LocalDate a = LocalDate.of(2012, 6, 30);
   LocalDate b = LocalDate.of(2012, 7, 1);
   a.isBefore(b) == true
   a.isBefore(a) == false
   b.isBefore(a) == false
 

 This method only considers the position of the two dates on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDate),
 but is the same approach as ChronoLocalDate.timeLineOrder().

Specified by:
isBefore in interface ChronoLocalDate
Parameters:
other - the other date to compare to, not null
Returns:
true if this date is before the specified date


"
LocalDate,isEqual(ChronoLocalDate other),boolean,Checks if this date is equal to the specified date.,"

isEqual
public boolean isEqual(ChronoLocalDate other)
Checks if this date is equal to the specified date.
 
 This checks to see if this date represents the same point on the
 local time-line as the other date.
 
   LocalDate a = LocalDate.of(2012, 6, 30);
   LocalDate b = LocalDate.of(2012, 7, 1);
   a.isEqual(b) == false
   a.isEqual(a) == true
   b.isEqual(a) == false
 

 This method only considers the position of the two dates on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDate)
 but is the same approach as ChronoLocalDate.timeLineOrder().

Specified by:
isEqual in interface ChronoLocalDate
Parameters:
other - the other date to compare to, not null
Returns:
true if this date is equal to the specified date


"
LocalDate,isLeapYear(),boolean,"Checks if the year is a leap year, according to the ISO proleptic calendar system rules.","

isLeapYear
public boolean isLeapYear()
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
 
 This method applies the current rules for leap years across the whole time-line.
 In general, a year is a leap year if it is divisible by four without
 remainder. However, years divisible by 100, are not leap years, with
 the exception of years divisible by 400 which are.
 
 For example, 1904 is a leap year it is divisible by 4.
 1900 was not a leap year as it is divisible by 100, however 2000 was a
 leap year as it is divisible by 400.
 
 The calculation is proleptic - applying the same rules into the far future and far past.
 This is historically inaccurate, but is correct for the ISO-8601 standard.

Specified by:
isLeapYear in interface ChronoLocalDate
Returns:
true if the year is leap, false otherwise


"
LocalDate,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this date can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface ChronoLocalDate
Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this date, false if not


"
LocalDate,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this date.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface ChronoLocalDate
Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
LocalDate,lengthOfMonth(),int,Returns the length of the month represented by this date.,"

lengthOfMonth
public int lengthOfMonth()
Returns the length of the month represented by this date.
 
 This returns the length of the month in days.
 For example, a date in January would return 31.

Specified by:
lengthOfMonth in interface ChronoLocalDate
Returns:
the length of the month in days


"
LocalDate,lengthOfYear(),int,Returns the length of the year represented by this date.,"

lengthOfYear
public int lengthOfYear()
Returns the length of the year represented by this date.
 
 This returns the length of the year in days, either 365 or 366.

Specified by:
lengthOfYear in interface ChronoLocalDate
Returns:
366 if the year is leap, 365 otherwise


"
LocalDate,"minus(long amountToSubtract, TemporalUnit unit)",LocalDate,Returns a copy of this date with the specified amount subtracted.,"

minus
public LocalDate minus(long amountToSubtract,
                       TemporalUnit unit)
Returns a copy of this date with the specified amount subtracted.
 
 This returns a LocalDate, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoLocalDate
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a LocalDate based on this date with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,minus(TemporalAmount amountToSubtract),LocalDate,Returns a copy of this date with the specified amount subtracted.,"

minus
public LocalDate minus(TemporalAmount amountToSubtract)
Returns a copy of this date with the specified amount subtracted.
 
 This returns a LocalDate, based on this one, with the specified amount subtracted.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoLocalDate
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a LocalDate based on this date with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDate,minusDays(long daysToSubtract),LocalDate,Returns a copy of this LocalDate with the specified number of days subtracted.,"

minusDays
public LocalDate minusDays(long daysToSubtract)
Returns a copy of this LocalDate with the specified number of days subtracted.
 
 This method subtracts the specified amount from the days field decrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-01 minus one day would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToSubtract - the days to subtract, may be negative
Returns:
a LocalDate based on this date with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,minusMonths(long monthsToSubtract),LocalDate,Returns a copy of this LocalDate with the specified number of months subtracted.,"

minusMonths
public LocalDate minusMonths(long monthsToSubtract)
Returns a copy of this LocalDate with the specified number of months subtracted.
 
 This method subtracts the specified amount from the months field in three steps:
 
Subtract the input months from the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 minus one month would result in the invalid date
 2007-02-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToSubtract - the months to subtract, may be negative
Returns:
a LocalDate based on this date with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,minusWeeks(long weeksToSubtract),LocalDate,Returns a copy of this LocalDate with the specified number of weeks subtracted.,"

minusWeeks
public LocalDate minusWeeks(long weeksToSubtract)
Returns a copy of this LocalDate with the specified number of weeks subtracted.
 
 This method subtracts the specified amount in weeks from the days field decrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-07 minus one week would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeksToSubtract - the weeks to subtract, may be negative
Returns:
a LocalDate based on this date with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,minusYears(long yearsToSubtract),LocalDate,Returns a copy of this LocalDate with the specified number of years subtracted.,"

minusYears
public LocalDate minusYears(long yearsToSubtract)
Returns a copy of this LocalDate with the specified number of years subtracted.
 
 This method subtracts the specified amount from the years field in three steps:
 
Subtract the input years from the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) minus one year would result in the
 invalid date 2007-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2007-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToSubtract - the years to subtract, may be negative
Returns:
a LocalDate based on this date with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,now(),static LocalDate,Obtains the current date from the system clock in the default time-zone.,"

now
public static LocalDate now()
Obtains the current date from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date using the system clock and default time-zone, not null


"
LocalDate,now(Clock clock),static LocalDate,Obtains the current date from the specified clock.,"

now
public static LocalDate now(Clock clock)
Obtains the current date from the specified clock.
 
 This will query the specified clock to obtain the current date - today.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current date, not null


"
LocalDate,now(ZoneId zone),static LocalDate,Obtains the current date from the system clock in the specified time-zone.,"

now
public static LocalDate now(ZoneId zone)
Obtains the current date from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current date.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current date using the system clock, not null


"
LocalDate,"of(int year, int month, int dayOfMonth)",static LocalDate,"Obtains an instance of LocalDate from a year, month and day.","

of
public static LocalDate of(int year,
                           int month,
                           int dayOfMonth)
Obtains an instance of LocalDate from a year, month and day.
 
 This returns a LocalDate with the specified year, month and day-of-month.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the local date, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDate,"of(int year, Month month, int dayOfMonth)",static LocalDate,"Obtains an instance of LocalDate from a year, month and day.","

of
public static LocalDate of(int year,
                           Month month,
                           int dayOfMonth)
Obtains an instance of LocalDate from a year, month and day.
 
 This returns a LocalDate with the specified year, month and day-of-month.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, not null
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the local date, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDate,ofEpochDay(long epochDay),static LocalDate,Obtains an instance of LocalDate from the epoch day count.,"

ofEpochDay
public static LocalDate ofEpochDay(long epochDay)
Obtains an instance of LocalDate from the epoch day count.
 
 This returns a LocalDate with the specified epoch-day.
 The EPOCH_DAY is a simple incrementing count
 of days where day 0 is 1970-01-01. Negative numbers represent earlier days.

Parameters:
epochDay - the Epoch Day to convert, based on the epoch 1970-01-01
Returns:
the local date, not null
Throws:
DateTimeException - if the epoch day exceeds the supported date range


"
LocalDate,"ofYearDay(int year, int dayOfYear)",static LocalDate,Obtains an instance of LocalDate from a year and day-of-year.,"

ofYearDay
public static LocalDate ofYearDay(int year,
                                  int dayOfYear)
Obtains an instance of LocalDate from a year and day-of-year.
 
 This returns a LocalDate with the specified year and day-of-year.
 The day-of-year must be valid for the year, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
dayOfYear - the day-of-year to represent, from 1 to 366
Returns:
the local date, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-year is invalid for the year


"
LocalDate,parse(CharSequence text),static LocalDate,Obtains an instance of LocalDate from a text string such as 2007-12-03.,"

parse
public static LocalDate parse(CharSequence text)
Obtains an instance of LocalDate from a text string such as 2007-12-03.
 
 The string must represent a valid date and is parsed using
 DateTimeFormatter.ISO_LOCAL_DATE.

Parameters:
text - the text to parse such as ""2007-12-03"", not null
Returns:
the parsed local date, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalDate,"parse(CharSequence text, DateTimeFormatter formatter)",static LocalDate,Obtains an instance of LocalDate from a text string using a specific formatter.,"

parse
public static LocalDate parse(CharSequence text,
                              DateTimeFormatter formatter)
Obtains an instance of LocalDate from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a date.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed local date, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalDate,"plus(long amountToAdd, TemporalUnit unit)",LocalDate,Returns a copy of this date with the specified amount added.,"

plus
public LocalDate plus(long amountToAdd,
                      TemporalUnit unit)
Returns a copy of this date with the specified amount added.
 
 This returns a LocalDate, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 In some cases, adding the amount can cause the resulting date to become invalid.
 For example, adding one month to 31st January would result in 31st February.
 In cases like this, the unit is responsible for resolving the date.
 Typically it will choose the previous valid date, which would be the last valid
 day of February in this example.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The supported fields behave as follows:
 
DAYS -
  Returns a LocalDate with the specified number of days added.
  This is equivalent to plusDays(long).
 WEEKS -
  Returns a LocalDate with the specified number of weeks added.
  This is equivalent to plusWeeks(long) and uses a 7 day week.
 MONTHS -
  Returns a LocalDate with the specified number of months added.
  This is equivalent to plusMonths(long).
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 YEARS -
  Returns a LocalDate with the specified number of years added.
  This is equivalent to plusYears(long).
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 DECADES -
  Returns a LocalDate with the specified number of decades added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 10.
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 CENTURIES -
  Returns a LocalDate with the specified number of centuries added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 100.
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 MILLENNIA -
  Returns a LocalDate with the specified number of millennia added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 1,000.
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 ERAS -
  Returns a LocalDate with the specified number of eras added.
  Only two eras are supported so the amount must be one, zero or minus one.
  If the amount is non-zero then the year is changed such that the year-of-era
  is unchanged.
  The day-of-month will be unchanged unless it would be invalid for the new
  month and year. In that case, the day-of-month is adjusted to the maximum
  valid value for the new month and year.
 

 All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoLocalDate
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a LocalDate based on this date with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,plus(TemporalAmount amountToAdd),LocalDate,Returns a copy of this date with the specified amount added.,"

plus
public LocalDate plus(TemporalAmount amountToAdd)
Returns a copy of this date with the specified amount added.
 
 This returns a LocalDate, based on this one, with the specified amount added.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoLocalDate
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a LocalDate based on this date with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDate,plusDays(long daysToAdd),LocalDate,Returns a copy of this LocalDate with the specified number of days added.,"

plusDays
public LocalDate plusDays(long daysToAdd)
Returns a copy of this LocalDate with the specified number of days added.
 
 This method adds the specified amount to the days field incrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToAdd - the days to add, may be negative
Returns:
a LocalDate based on this date with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,plusMonths(long monthsToAdd),LocalDate,Returns a copy of this LocalDate with the specified number of months added.,"

plusMonths
public LocalDate plusMonths(long monthsToAdd)
Returns a copy of this LocalDate with the specified number of months added.
 
 This method adds the specified amount to the months field in three steps:
 
Add the input months to the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 plus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToAdd - the months to add, may be negative
Returns:
a LocalDate based on this date with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,plusWeeks(long weeksToAdd),LocalDate,Returns a copy of this LocalDate with the specified number of weeks added.,"

plusWeeks
public LocalDate plusWeeks(long weeksToAdd)
Returns a copy of this LocalDate with the specified number of weeks added.
 
 This method adds the specified amount in weeks to the days field incrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeksToAdd - the weeks to add, may be negative
Returns:
a LocalDate based on this date with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,plusYears(long yearsToAdd),LocalDate,Returns a copy of this LocalDate with the specified number of years added.,"

plusYears
public LocalDate plusYears(long yearsToAdd)
Returns a copy of this LocalDate with the specified number of years added.
 
 This method adds the specified amount to the years field in three steps:
 
Add the input years to the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) plus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToAdd - the years to add, may be negative
Returns:
a LocalDate based on this date with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDate,query(TemporalQuery<R> query),<R> R,Queries this date using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this date using the specified query.
 
 This queries this date using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface ChronoLocalDate
Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
LocalDate,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This date is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
LocalDate,toEpochDay(),long,Converts this date to the Epoch Day.,"

toEpochDay
public long toEpochDay()
Description copied from interface: ChronoLocalDate
Converts this date to the Epoch Day.
 
 The Epoch Day count is a simple
 incrementing count of days where day 0 is 1970-01-01 (ISO).
 This definition is the same for all chronologies, enabling conversion.
 
 This default implementation queries the EPOCH_DAY field.

Specified by:
toEpochDay in interface ChronoLocalDate
Returns:
the Epoch Day equivalent to this date


"
LocalDate,toString(),String,"Outputs this date as a String, such as 2007-12-03.","

toString
public String toString()
Outputs this date as a String, such as 2007-12-03.
 
 The output will be in the ISO-8601 format uuuu-MM-dd.

Specified by:
toString in interface ChronoLocalDate
Overrides:
toString in class Object
Returns:
a string representation of this date, not null


"
LocalDate,until(ChronoLocalDate endDateExclusive),Period,Calculates the period between this date and another date as a Period.,"

until
public Period until(ChronoLocalDate endDateExclusive)
Calculates the period between this date and another date as a Period.
 
 This calculates the period between two dates in terms of years, months and days.
 The start and end points are this and the specified date.
 The result will be negative if the end is before the start.
 The negative sign will be the same in each of year, month and day.
 
 The calculation is performed using the ISO calendar system.
 If necessary, the input date will be converted to ISO.
 
 The start date is included, but the end date is not.
 The period is calculated by removing complete months, then calculating
 the remaining number of days, adjusting to ensure that both have the same sign.
 The number of months is then normalized into years and months based on a 12 month year.
 A month is considered to be complete if the end day-of-month is greater
 than or equal to the start day-of-month.
 For example, from 2010-01-15 to 2011-03-18 is ""1 year, 2 months and 3 days"".
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use Period.between(LocalDate, LocalDate):
 
   // these two lines are equivalent
   period = start.until(end);
   period = Period.between(start, end);
 
 The choice should be made based on which makes the code more readable.

Specified by:
until in interface ChronoLocalDate
Parameters:
endDateExclusive - the end date, exclusive, which may be in any chronology, not null
Returns:
the period between this date and the end date, not null


"
LocalDate,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another date in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date in terms of the specified unit.
 
 This calculates the amount of time between two LocalDate
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 LocalDate using from(TemporalAccessor).
 For example, the amount in days between two dates can be calculated
 using startDate.until(endDate, DAYS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two dates.
 For example, the amount in months between 2012-06-15 and 2012-08-14
 will only be one month as it is one day short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units DAYS, WEEKS, MONTHS, YEARS,
 DECADES, CENTURIES, MILLENNIA and ERAS
 are supported. Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface ChronoLocalDate
Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a LocalDate, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date and the end date
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a LocalDate
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,with(TemporalAdjuster adjuster),LocalDate,Returns an adjusted copy of this date.,"

with
public LocalDate with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date.
 
 This returns a LocalDate, based on this one, with the date adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDate.with(JULY).with(lastDayOfMonth());
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDate based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDate,"with(TemporalField field, long newValue)",LocalDate,Returns a copy of this date with the specified field set to a new value.,"

with
public LocalDate with(TemporalField field,
                      long newValue)
Returns a copy of this date with the specified field set to a new value.
 
 This returns a LocalDate, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields behave as follows:
 
DAY_OF_WEEK -
  Returns a LocalDate with the specified day-of-week.
  The date is adjusted up to 6 days forward or backward within the boundary
  of a Monday to Sunday week.
 ALIGNED_DAY_OF_WEEK_IN_MONTH -
  Returns a LocalDate with the specified aligned-day-of-week.
  The date is adjusted to the specified month-based aligned-day-of-week.
  Aligned weeks are counted such that the first week of a given month starts
  on the first day of that month.
  This may cause the date to be moved up to 6 days into the following month.
 ALIGNED_DAY_OF_WEEK_IN_YEAR -
  Returns a LocalDate with the specified aligned-day-of-week.
  The date is adjusted to the specified year-based aligned-day-of-week.
  Aligned weeks are counted such that the first week of a given year starts
  on the first day of that year.
  This may cause the date to be moved up to 6 days into the following year.
 DAY_OF_MONTH -
  Returns a LocalDate with the specified day-of-month.
  The month and year will be unchanged. If the day-of-month is invalid for the
  year and month, then a DateTimeException is thrown.
 DAY_OF_YEAR -
  Returns a LocalDate with the specified day-of-year.
  The year will be unchanged. If the day-of-year is invalid for the
  year, then a DateTimeException is thrown.
 EPOCH_DAY -
  Returns a LocalDate with the specified epoch-day.
  This completely replaces the date and is equivalent to ofEpochDay(long).
 ALIGNED_WEEK_OF_MONTH -
  Returns a LocalDate with the specified aligned-week-of-month.
  Aligned weeks are counted such that the first week of a given month starts
  on the first day of that month.
  This adjustment moves the date in whole week chunks to match the specified week.
  The result will have the same day-of-week as this date.
  This may cause the date to be moved into the following month.
 ALIGNED_WEEK_OF_YEAR -
  Returns a LocalDate with the specified aligned-week-of-year.
  Aligned weeks are counted such that the first week of a given year starts
  on the first day of that year.
  This adjustment moves the date in whole week chunks to match the specified week.
  The result will have the same day-of-week as this date.
  This may cause the date to be moved into the following year.
 MONTH_OF_YEAR -
  Returns a LocalDate with the specified month-of-year.
  The year will be unchanged. The day-of-month will also be unchanged,
  unless it would be invalid for the new month and year. In that case, the
  day-of-month is adjusted to the maximum valid value for the new month and year.
 PROLEPTIC_MONTH -
  Returns a LocalDate with the specified proleptic-month.
  The day-of-month will be unchanged, unless it would be invalid for the new month
  and year. In that case, the day-of-month is adjusted to the maximum valid value
  for the new month and year.
 YEAR_OF_ERA -
  Returns a LocalDate with the specified year-of-era.
  The era and month will be unchanged. The day-of-month will also be unchanged,
  unless it would be invalid for the new month and year. In that case, the
  day-of-month is adjusted to the maximum valid value for the new month and year.
 YEAR -
  Returns a LocalDate with the specified year.
  The month will be unchanged. The day-of-month will also be unchanged,
  unless it would be invalid for the new month and year. In that case, the
  day-of-month is adjusted to the maximum valid value for the new month and year.
 ERA -
  Returns a LocalDate with the specified era.
  The year-of-era and month will be unchanged. The day-of-month will also be unchanged,
  unless it would be invalid for the new month and year. In that case, the
  day-of-month is adjusted to the maximum valid value for the new month and year.
 

 In all cases, if the new value is outside the valid range of values for the field
 then a DateTimeException will be thrown.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDate
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDate based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDate,withDayOfMonth(int dayOfMonth),LocalDate,Returns a copy of this LocalDate with the day-of-month altered.,"

withDayOfMonth
public LocalDate withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDate with the day-of-month altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
LocalDate,withDayOfYear(int dayOfYear),LocalDate,Returns a copy of this LocalDate with the day-of-year altered.,"

withDayOfYear
public LocalDate withDayOfYear(int dayOfYear)
Returns a copy of this LocalDate with the day-of-year altered.
 
 If the resulting date is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDate based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
LocalDate,withMonth(int month),LocalDate,Returns a copy of this LocalDate with the month-of-year altered.,"

withMonth
public LocalDate withMonth(int month)
Returns a copy of this LocalDate with the month-of-year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDate based on this date with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
LocalDate,withYear(int year),LocalDate,Returns a copy of this LocalDate with the year altered.,"

withYear
public LocalDate withYear(int year)
Returns a copy of this LocalDate with the year altered.
 
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDate based on this date with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
LocalDateTime,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have the same date and time as this object.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same date and time as this object.
 
 This returns a temporal object of the same observable type as the input
 with the date and time changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 twice, passing ChronoField.EPOCH_DAY and
 ChronoField.NANO_OF_DAY as the fields.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisLocalDateTime.adjustInto(temporal);
   temporal = temporal.with(thisLocalDateTime);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface ChronoLocalDateTime<LocalDate>
Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,atOffset(ZoneOffset offset),OffsetDateTime,Combines this date-time with an offset to create an OffsetDateTime.,"

atOffset
public OffsetDateTime atOffset(ZoneOffset offset)
Combines this date-time with an offset to create an OffsetDateTime.
 
 This returns an OffsetDateTime formed from this date-time at the specified offset.
 All possible combinations of date-time and offset are valid.

Parameters:
offset - the offset to combine with, not null
Returns:
the offset date-time formed from this date-time and the specified offset, not null


"
LocalDateTime,atZone(ZoneId zone),ZonedDateTime,Combines this date-time with a time-zone to create a ZonedDateTime.,"

atZone
public ZonedDateTime atZone(ZoneId zone)
Combines this date-time with a time-zone to create a ZonedDateTime.
 
 This returns a ZonedDateTime formed from this date-time at the
 specified time-zone. The result will match this date-time as closely as possible.
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may be adjusted.
 
 The local date-time is resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, where clocks are set back, there are two valid offsets.
 This method uses the earlier offset typically corresponding to ""summer"".
 
 In the case of a gap, where clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".
 
 To obtain the later offset during an overlap, call
 ZonedDateTime.withLaterOffsetAtOverlap() on the result of this method.
 To throw an exception when there is a gap or overlap, use
 ZonedDateTime.ofStrict(LocalDateTime, ZoneOffset, ZoneId).

Specified by:
atZone in interface ChronoLocalDateTime<LocalDate>
Parameters:
zone - the time-zone to use, not null
Returns:
the zoned date-time formed from this date-time, not null


"
LocalDateTime,compareTo(ChronoLocalDateTime<?> other),int,Compares this date-time to another date-time.,"

compareTo
public int compareTo(ChronoLocalDateTime<?> other)
Compares this date-time to another date-time.
 
 The comparison is primarily based on the date-time, from earliest to latest.
 It is ""consistent with equals"", as defined by Comparable.
 
 If all the date-times being compared are instances of LocalDateTime,
 then the comparison will be entirely based on the date-time.
 If some dates being compared are in different chronologies, then the
 chronology is also considered, see ChronoLocalDateTime.compareTo(java.time.chrono.ChronoLocalDateTime<?>).

Specified by:
compareTo in interface Comparable<ChronoLocalDateTime<?>>
Specified by:
compareTo in interface ChronoLocalDateTime<LocalDate>
Parameters:
other - the other date-time to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
LocalDateTime,equals(Object obj),boolean,Checks if this date-time is equal to another date-time.,"

equals
public boolean equals(Object obj)
Checks if this date-time is equal to another date-time.
 
 Compares this LocalDateTime with another ensuring that the date-time is the same.
 Only objects of type LocalDateTime are compared, other types return false.

Specified by:
equals in interface ChronoLocalDateTime<LocalDate>
Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other date-time
See Also:
Object.hashCode(), 
HashMap


"
LocalDateTime,format(DateTimeFormatter formatter),String,Formats this date-time using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this date-time using the specified formatter.
 
 This date-time will be passed to the formatter to produce a string.

Specified by:
format in interface ChronoLocalDateTime<LocalDate>
Parameters:
formatter - the formatter to use, not null
Returns:
the formatted date-time string, not null
Throws:
DateTimeException - if an error occurs during printing


"
LocalDateTime,from(TemporalAccessor temporal),static LocalDateTime,Obtains an instance of LocalDateTime from a temporal object.,"

from
public static LocalDateTime from(TemporalAccessor temporal)
Obtains an instance of LocalDateTime from a temporal object.
 
 This obtains a local date-time based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of LocalDateTime.
 
 The conversion extracts and combines the LocalDate and the
 LocalTime from the temporal object.
 Implementations are permitted to perform optimizations such as accessing
 those fields that are equivalent to the relevant objects.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, LocalDateTime::from.

Specified by:
from in interface ChronoLocalDateTime<LocalDate>
Parameters:
temporal - the temporal object to convert, not null
Returns:
the local date-time, not null
Throws:
DateTimeException - if unable to convert to a LocalDateTime
See Also:
Chronology.localDateTime(TemporalAccessor)


"
LocalDateTime,get(TemporalField field),int,Gets the value of the specified field from this date-time as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this date-time as an int.
 
 This queries this date-time for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY,
 EPOCH_DAY and PROLEPTIC_MONTH which are too large to fit in
 an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,getDayOfMonth(),int,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
LocalDateTime,getDayOfWeek(),DayOfWeek,"Gets the day-of-week field, which is an enum DayOfWeek.","

getDayOfWeek
public DayOfWeek getDayOfWeek()
Gets the day-of-week field, which is an enum DayOfWeek.
 
 This method returns the enum DayOfWeek for the day-of-week.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.
 
 Additional information can be obtained from the DayOfWeek.
 This includes textual names of the values.

Returns:
the day-of-week, not null


"
LocalDateTime,getDayOfYear(),int,Gets the day-of-year field.,"

getDayOfYear
public int getDayOfYear()
Gets the day-of-year field.
 
 This method returns the primitive int value for the day-of-year.

Returns:
the day-of-year, from 1 to 365, or 366 in a leap year


"
LocalDateTime,getHour(),int,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
LocalDateTime,getLong(TemporalField field),long,Gets the value of the specified field from this date-time as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this date-time as a long.
 
 This queries this date-time for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,getMinute(),int,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
LocalDateTime,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
LocalDateTime,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
LocalDateTime,getNano(),int,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
LocalDateTime,getSecond(),int,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
LocalDateTime,getYear(),int,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
LocalDateTime,hashCode(),int,A hash code for this date-time.,"

hashCode
public int hashCode()
A hash code for this date-time.

Specified by:
hashCode in interface ChronoLocalDateTime<LocalDate>
Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
LocalDateTime,isAfter(ChronoLocalDateTime<?> other),boolean,Checks if this date-time is after the specified date-time.,"

isAfter
public boolean isAfter(ChronoLocalDateTime<?> other)
Checks if this date-time is after the specified date-time.
 
 This checks to see if this date-time represents a point on the
 local time-line after the other date-time.
 
   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
   a.isAfter(b) == false
   a.isAfter(a) == false
   b.isAfter(a) == true
 

 This method only considers the position of the two date-times on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDateTime),
 but is the same approach as ChronoLocalDateTime.timeLineOrder().

Specified by:
isAfter in interface ChronoLocalDateTime<LocalDate>
Parameters:
other - the other date-time to compare to, not null
Returns:
true if this date-time is after the specified date-time


"
LocalDateTime,isBefore(ChronoLocalDateTime<?> other),boolean,Checks if this date-time is before the specified date-time.,"

isBefore
public boolean isBefore(ChronoLocalDateTime<?> other)
Checks if this date-time is before the specified date-time.
 
 This checks to see if this date-time represents a point on the
 local time-line before the other date-time.
 
   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
   a.isBefore(b) == true
   a.isBefore(a) == false
   b.isBefore(a) == false
 

 This method only considers the position of the two date-times on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDateTime),
 but is the same approach as ChronoLocalDateTime.timeLineOrder().

Specified by:
isBefore in interface ChronoLocalDateTime<LocalDate>
Parameters:
other - the other date-time to compare to, not null
Returns:
true if this date-time is before the specified date-time


"
LocalDateTime,isEqual(ChronoLocalDateTime<?> other),boolean,Checks if this date-time is equal to the specified date-time.,"

isEqual
public boolean isEqual(ChronoLocalDateTime<?> other)
Checks if this date-time is equal to the specified date-time.
 
 This checks to see if this date-time represents the same point on the
 local time-line as the other date-time.
 
   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
   a.isEqual(b) == false
   a.isEqual(a) == true
   b.isEqual(a) == false
 

 This method only considers the position of the two date-times on the local time-line.
 It does not take into account the chronology, or calendar system.
 This is different from the comparison in compareTo(ChronoLocalDateTime),
 but is the same approach as ChronoLocalDateTime.timeLineOrder().

Specified by:
isEqual in interface ChronoLocalDateTime<LocalDate>
Parameters:
other - the other date-time to compare to, not null
Returns:
true if this date-time is equal to the specified date-time


"
LocalDateTime,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this date-time can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface ChronoLocalDateTime<LocalDate>
Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this date-time, false if not


"
LocalDateTime,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this date-time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface ChronoLocalDateTime<LocalDate>
Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
LocalDateTime,"minus(long amountToSubtract, TemporalUnit unit)",LocalDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public LocalDateTime minus(long amountToSubtract,
                           TemporalUnit unit)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns a LocalDateTime, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoLocalDateTime<LocalDate>
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a LocalDateTime based on this date-time with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,minus(TemporalAmount amountToSubtract),LocalDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public LocalDateTime minus(TemporalAmount amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns a LocalDateTime, based on this one, with the specified amount subtracted.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoLocalDateTime<LocalDate>
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a LocalDateTime based on this date-time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,minusDays(long days),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of days subtracted.,"

minusDays
public LocalDateTime minusDays(long days)
Returns a copy of this LocalDateTime with the specified number of days subtracted.
 
 This method subtracts the specified amount from the days field decrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-01 minus one day would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusHours(long hours),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of hours subtracted.,"

minusHours
public LocalDateTime minusHours(long hours)
Returns a copy of this LocalDateTime with the specified number of hours subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the hours subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusMinutes(long minutes),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of minutes subtracted.,"

minusMinutes
public LocalDateTime minusMinutes(long minutes)
Returns a copy of this LocalDateTime with the specified number of minutes subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the minutes subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusMonths(long months),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of months subtracted.,"

minusMonths
public LocalDateTime minusMonths(long months)
Returns a copy of this LocalDateTime with the specified number of months subtracted.
 
 This method subtracts the specified amount from the months field in three steps:
 
Subtract the input months from the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 minus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusNanos(long nanos),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.,"

minusNanos
public LocalDateTime minusNanos(long nanos)
Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusSeconds(long seconds),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of seconds subtracted.,"

minusSeconds
public LocalDateTime minusSeconds(long seconds)
Returns a copy of this LocalDateTime with the specified number of seconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusWeeks(long weeks),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of weeks subtracted.,"

minusWeeks
public LocalDateTime minusWeeks(long weeks)
Returns a copy of this LocalDateTime with the specified number of weeks subtracted.
 
 This method subtracts the specified amount in weeks from the days field decrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2009-01-07 minus one week would result in 2008-12-31.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,minusYears(long years),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of years subtracted.,"

minusYears
public LocalDateTime minusYears(long years)
Returns a copy of this LocalDateTime with the specified number of years subtracted.
 
 This method subtracts the specified amount from the years field in three steps:
 
Subtract the input years from the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) minus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to subtract, may be negative
Returns:
a LocalDateTime based on this date-time with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,now(),static LocalDateTime,Obtains the current date-time from the system clock in the default time-zone.,"

now
public static LocalDateTime now()
Obtains the current date-time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date-time.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date-time using the system clock and default time-zone, not null


"
LocalDateTime,now(Clock clock),static LocalDateTime,Obtains the current date-time from the specified clock.,"

now
public static LocalDateTime now(Clock clock)
Obtains the current date-time from the specified clock.
 
 This will query the specified clock to obtain the current date-time.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current date-time, not null


"
LocalDateTime,now(ZoneId zone),static LocalDateTime,Obtains the current date-time from the system clock in the specified time-zone.,"

now
public static LocalDateTime now(ZoneId zone)
Obtains the current date-time from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current date-time.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current date-time using the system clock, not null


"
LocalDateTime,"of(int year, int month, int dayOfMonth, int hour, int minute)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero.","

of
public static LocalDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute)
Obtains an instance of LocalDateTime from year, month,
 day, hour and minute, setting the second and nanosecond to zero.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour and minute.
 The day must be valid for the year and month, otherwise an exception will be thrown.
 The second and nanosecond fields will be set to zero.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(int year, int month, int dayOfMonth, int hour, int minute, int second)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero.","

of
public static LocalDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second)
Obtains an instance of LocalDateTime from year, month,
 day, hour, minute and second, setting the nanosecond to zero.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour, minute and second.
 The day must be valid for the year and month, otherwise an exception will be thrown.
 The nanosecond field will be set to zero.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond.","

of
public static LocalDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second,
                               int nanoOfSecond)
Obtains an instance of LocalDateTime from year, month,
 day, hour, minute, second and nanosecond.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour, minute, second and nanosecond.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(int year, Month month, int dayOfMonth, int hour, int minute)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero.","

of
public static LocalDateTime of(int year,
                               Month month,
                               int dayOfMonth,
                               int hour,
                               int minute)
Obtains an instance of LocalDateTime from year, month,
 day, hour and minute, setting the second and nanosecond to zero.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour and minute.
 The day must be valid for the year and month, otherwise an exception will be thrown.
 The second and nanosecond fields will be set to zero.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, not null
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(int year, Month month, int dayOfMonth, int hour, int minute, int second)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero.","

of
public static LocalDateTime of(int year,
                               Month month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second)
Obtains an instance of LocalDateTime from year, month,
 day, hour, minute and second, setting the nanosecond to zero.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour, minute and second.
 The day must be valid for the year and month, otherwise an exception will be thrown.
 The nanosecond field will be set to zero.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, not null
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)",static LocalDateTime,"Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond.","

of
public static LocalDateTime of(int year,
                               Month month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second,
                               int nanoOfSecond)
Obtains an instance of LocalDateTime from year, month,
 day, hour, minute, second and nanosecond.
 
 This returns a LocalDateTime with the specified year, month,
 day-of-month, hour, minute, second and nanosecond.
 The day must be valid for the year and month, otherwise an exception will be thrown.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, not null
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
the local date-time, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,"of(LocalDate date, LocalTime time)",static LocalDateTime,Obtains an instance of LocalDateTime from a date and time.,"

of
public static LocalDateTime of(LocalDate date,
                               LocalTime time)
Obtains an instance of LocalDateTime from a date and time.

Parameters:
date - the local date, not null
time - the local time, not null
Returns:
the local date-time, not null


"
LocalDateTime,"ofEpochSecond(long epochSecond, int nanoOfSecond, ZoneOffset offset)",static LocalDateTime,Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z.,"

ofEpochSecond
public static LocalDateTime ofEpochSecond(long epochSecond,
                                          int nanoOfSecond,
                                          ZoneOffset offset)
Obtains an instance of LocalDateTime using seconds from the
 epoch of 1970-01-01T00:00:00Z.
 
 This allows the epoch-second field
 to be converted to a local date-time. This is primarily intended for
 low-level conversions rather than general application usage.

Parameters:
epochSecond - the number of seconds from the epoch of 1970-01-01T00:00:00Z
nanoOfSecond - the nanosecond within the second, from 0 to 999,999,999
offset - the zone offset, not null
Returns:
the local date-time, not null
Throws:
DateTimeException - if the result exceeds the supported range,
  or if the nano-of-second is invalid


"
LocalDateTime,"ofInstant(Instant instant, ZoneId zone)",static LocalDateTime,Obtains an instance of LocalDateTime from an Instant and zone ID.,"

ofInstant
public static LocalDateTime ofInstant(Instant instant,
                                      ZoneId zone)
Obtains an instance of LocalDateTime from an Instant and zone ID.
 
 This creates a local date-time based on the specified instant.
 First, the offset from UTC/Greenwich is obtained using the zone ID and instant,
 which is simple as there is only one valid offset for each instant.
 Then, the instant and offset are used to calculate the local date-time.

Parameters:
instant - the instant to create the date-time from, not null
zone - the time-zone, which may be an offset, not null
Returns:
the local date-time, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
LocalDateTime,parse(CharSequence text),static LocalDateTime,Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.,"

parse
public static LocalDateTime parse(CharSequence text)
Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30.
 
 The string must represent a valid date-time and is parsed using
 DateTimeFormatter.ISO_LOCAL_DATE_TIME.

Parameters:
text - the text to parse such as ""2007-12-03T10:15:30"", not null
Returns:
the parsed local date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalDateTime,"parse(CharSequence text, DateTimeFormatter formatter)",static LocalDateTime,Obtains an instance of LocalDateTime from a text string using a specific formatter.,"

parse
public static LocalDateTime parse(CharSequence text,
                                  DateTimeFormatter formatter)
Obtains an instance of LocalDateTime from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a date-time.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed local date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalDateTime,"plus(long amountToAdd, TemporalUnit unit)",LocalDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public LocalDateTime plus(long amountToAdd,
                          TemporalUnit unit)
Returns a copy of this date-time with the specified amount added.
 
 This returns a LocalDateTime, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 Date units are added as per LocalDate.plus(long, TemporalUnit).
 Time units are added as per LocalTime.plus(long, TemporalUnit) with
 any overflow in days added equivalent to using plusDays(long).
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoLocalDateTime<LocalDate>
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a LocalDateTime based on this date-time with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,plus(TemporalAmount amountToAdd),LocalDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public LocalDateTime plus(TemporalAmount amountToAdd)
Returns a copy of this date-time with the specified amount added.
 
 This returns a LocalDateTime, based on this one, with the specified amount added.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoLocalDateTime<LocalDate>
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a LocalDateTime based on this date-time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,plusDays(long days),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of days added.,"

plusDays
public LocalDateTime plusDays(long days)
Returns a copy of this LocalDateTime with the specified number of days added.
 
 This method adds the specified amount to the days field incrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to add, may be negative
Returns:
a LocalDateTime based on this date-time with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusHours(long hours),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of hours added.,"

plusHours
public LocalDateTime plusHours(long hours)
Returns a copy of this LocalDateTime with the specified number of hours added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
a LocalDateTime based on this date-time with the hours added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusMinutes(long minutes),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of minutes added.,"

plusMinutes
public LocalDateTime plusMinutes(long minutes)
Returns a copy of this LocalDateTime with the specified number of minutes added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
a LocalDateTime based on this date-time with the minutes added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusMonths(long months),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of months added.,"

plusMonths
public LocalDateTime plusMonths(long months)
Returns a copy of this LocalDateTime with the specified number of months added.
 
 This method adds the specified amount to the months field in three steps:
 
Add the input months to the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 plus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to add, may be negative
Returns:
a LocalDateTime based on this date-time with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusNanos(long nanos),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of nanoseconds added.,"

plusNanos
public LocalDateTime plusNanos(long nanos)
Returns a copy of this LocalDateTime with the specified number of nanoseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
a LocalDateTime based on this date-time with the nanoseconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusSeconds(long seconds),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of seconds added.,"

plusSeconds
public LocalDateTime plusSeconds(long seconds)
Returns a copy of this LocalDateTime with the specified number of seconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
a LocalDateTime based on this date-time with the seconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusWeeks(long weeks),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of weeks added.,"

plusWeeks
public LocalDateTime plusWeeks(long weeks)
Returns a copy of this LocalDateTime with the specified number of weeks added.
 
 This method adds the specified amount in weeks to the days field incrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to add, may be negative
Returns:
a LocalDateTime based on this date-time with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,plusYears(long years),LocalDateTime,Returns a copy of this LocalDateTime with the specified number of years added.,"

plusYears
public LocalDateTime plusYears(long years)
Returns a copy of this LocalDateTime with the specified number of years added.
 
 This method adds the specified amount to the years field in three steps:
 
Add the input years to the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) plus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to add, may be negative
Returns:
a LocalDateTime based on this date-time with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
LocalDateTime,query(TemporalQuery<R> query),<R> R,Queries this date-time using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this date-time using the specified query.
 
 This queries this date-time using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface ChronoLocalDateTime<LocalDate>
Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
LocalDateTime,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This date-time is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
LocalDateTime,toLocalDate(),LocalDate,Gets the LocalDate part of this date-time.,"

toLocalDate
public LocalDate toLocalDate()
Gets the LocalDate part of this date-time.
 
 This returns a LocalDate with the same year, month and day
 as this date-time.

Specified by:
toLocalDate in interface ChronoLocalDateTime<LocalDate>
Returns:
the date part of this date-time, not null


"
LocalDateTime,toLocalTime(),LocalTime,Gets the LocalTime part of this date-time.,"

toLocalTime
public LocalTime toLocalTime()
Gets the LocalTime part of this date-time.
 
 This returns a LocalTime with the same hour, minute, second and
 nanosecond as this date-time.

Specified by:
toLocalTime in interface ChronoLocalDateTime<LocalDate>
Returns:
the time part of this date-time, not null


"
LocalDateTime,toString(),String,"Outputs this date-time as a String, such as 2007-12-03T10:15:30.","

toString
public String toString()
Outputs this date-time as a String, such as 2007-12-03T10:15:30.
 
 The output will be one of the following ISO-8601 formats:
 
uuuu-MM-dd'T'HH:mm
uuuu-MM-dd'T'HH:mm:ss
uuuu-MM-dd'T'HH:mm:ss.SSS
uuuu-MM-dd'T'HH:mm:ss.SSSSSS
uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS

 The format used will be the shortest that outputs the full value of
 the time where the omitted parts are implied to be zero.

Specified by:
toString in interface ChronoLocalDateTime<LocalDate>
Overrides:
toString in class Object
Returns:
a string representation of this date-time, not null


"
LocalDateTime,truncatedTo(TemporalUnit unit),LocalDateTime,Returns a copy of this LocalDateTime with the time truncated.,"

truncatedTo
public LocalDateTime truncatedTo(TemporalUnit unit)
Returns a copy of this LocalDateTime with the time truncated.
 
 Truncation returns a copy of the original date-time with fields
 smaller than the specified unit set to zero.
 For example, truncating with the minutes unit
 will set the second-of-minute and nano-of-second field to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
a LocalDateTime based on this date-time with the time truncated, not null
Throws:
DateTimeException - if unable to truncate
UnsupportedTemporalTypeException - if the unit is not supported


"
LocalDateTime,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another date-time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date-time in terms of the specified unit.
 
 This calculates the amount of time between two LocalDateTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date-time.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 LocalDateTime using from(TemporalAccessor).
 For example, the amount in days between two date-times can be calculated
 using startDateTime.until(endDateTime, DAYS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two date-times.
 For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59
 will only be one month as it is one minute short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS, DAYS,
 WEEKS, MONTHS, YEARS, DECADES,
 CENTURIES, MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a LocalDateTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date-time and the end date-time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a LocalDateTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,with(TemporalAdjuster adjuster),LocalDateTime,Returns an adjusted copy of this date-time.,"

with
public LocalDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a LocalDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = localDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = localDateTime.with(date);
  result = localDateTime.with(time);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,"with(TemporalField field, long newValue)",LocalDateTime,Returns a copy of this date-time with the specified field set to a new value.,"

with
public LocalDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a LocalDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields will behave as per
 the matching method on LocalDate
 or LocalTime.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoLocalDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalDateTime,withDayOfMonth(int dayOfMonth),LocalDateTime,Returns a copy of this LocalDateTime with the day-of-month altered.,"

withDayOfMonth
public LocalDateTime withDayOfMonth(int dayOfMonth)
Returns a copy of this LocalDateTime with the day-of-month altered.
 
 If the resulting date-time is invalid, an exception is thrown.
 The time does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a LocalDateTime based on this date-time with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
LocalDateTime,withDayOfYear(int dayOfYear),LocalDateTime,Returns a copy of this LocalDateTime with the day-of-year altered.,"

withDayOfYear
public LocalDateTime withDayOfYear(int dayOfYear)
Returns a copy of this LocalDateTime with the day-of-year altered.
 
 If the resulting date-time is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a LocalDateTime based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
LocalDateTime,withHour(int hour),LocalDateTime,Returns a copy of this LocalDateTime with the hour-of-day altered.,"

withHour
public LocalDateTime withHour(int hour)
Returns a copy of this LocalDateTime with the hour-of-day altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
a LocalDateTime based on this date-time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
LocalDateTime,withMinute(int minute),LocalDateTime,Returns a copy of this LocalDateTime with the minute-of-hour altered.,"

withMinute
public LocalDateTime withMinute(int minute)
Returns a copy of this LocalDateTime with the minute-of-hour altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
a LocalDateTime based on this date-time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
LocalDateTime,withMonth(int month),LocalDateTime,Returns a copy of this LocalDateTime with the month-of-year altered.,"

withMonth
public LocalDateTime withMonth(int month)
Returns a copy of this LocalDateTime with the month-of-year altered.
 
 The time does not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a LocalDateTime based on this date-time with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
LocalDateTime,withNano(int nanoOfSecond),LocalDateTime,Returns a copy of this LocalDateTime with the nano-of-second altered.,"

withNano
public LocalDateTime withNano(int nanoOfSecond)
Returns a copy of this LocalDateTime with the nano-of-second altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
a LocalDateTime based on this date-time with the requested nanosecond, not null
Throws:
DateTimeException - if the nano value is invalid


"
LocalDateTime,withSecond(int second),LocalDateTime,Returns a copy of this LocalDateTime with the second-of-minute altered.,"

withSecond
public LocalDateTime withSecond(int second)
Returns a copy of this LocalDateTime with the second-of-minute altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
a LocalDateTime based on this date-time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
LocalDateTime,withYear(int year),LocalDateTime,Returns a copy of this LocalDateTime with the year altered.,"

withYear
public LocalDateTime withYear(int year)
Returns a copy of this LocalDateTime with the year altered.
 
 The time does not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a LocalDateTime based on this date-time with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
LocalTime,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have the same time as this object.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same time as this object.
 
 This returns a temporal object of the same observable type as the input
 with the time changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 passing ChronoField.NANO_OF_DAY as the field.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisLocalTime.adjustInto(temporal);
   temporal = temporal.with(thisLocalTime);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
LocalTime,atDate(LocalDate date),LocalDateTime,Combines this time with a date to create a LocalDateTime.,"

atDate
public LocalDateTime atDate(LocalDate date)
Combines this time with a date to create a LocalDateTime.
 
 This returns a LocalDateTime formed from this time at the specified date.
 All possible combinations of date and time are valid.

Parameters:
date - the date to combine with, not null
Returns:
the local date-time formed from this time and the specified date, not null


"
LocalTime,atOffset(ZoneOffset offset),OffsetTime,Combines this time with an offset to create an OffsetTime.,"

atOffset
public OffsetTime atOffset(ZoneOffset offset)
Combines this time with an offset to create an OffsetTime.
 
 This returns an OffsetTime formed from this time at the specified offset.
 All possible combinations of time and offset are valid.

Parameters:
offset - the offset to combine with, not null
Returns:
the offset time formed from this time and the specified offset, not null


"
LocalTime,compareTo(LocalTime other),int,Compares this time to another time.,"

compareTo
public int compareTo(LocalTime other)
Compares this time to another time.
 
 The comparison is based on the time-line position of the local times within a day.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<LocalTime>
Parameters:
other - the other time to compare to, not null
Returns:
the comparator value, negative if less, positive if greater
Throws:
NullPointerException - if other is null


"
LocalTime,equals(Object obj),boolean,Checks if this time is equal to another time.,"

equals
public boolean equals(Object obj)
Checks if this time is equal to another time.
 
 The comparison is based on the time-line position of the time within a day.
 
 Only objects of type LocalTime are compared, other types return false.
 To compare the date of two TemporalAccessor instances, use
 ChronoField.NANO_OF_DAY as a comparator.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other time
See Also:
Object.hashCode(), 
HashMap


"
LocalTime,format(DateTimeFormatter formatter),String,Formats this time using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this time using the specified formatter.
 
 This time will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted time string, not null
Throws:
DateTimeException - if an error occurs during printing


"
LocalTime,from(TemporalAccessor temporal),static LocalTime,Obtains an instance of LocalTime from a temporal object.,"

from
public static LocalTime from(TemporalAccessor temporal)
Obtains an instance of LocalTime from a temporal object.
 
 This obtains a local time based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of LocalTime.
 
 The conversion uses the TemporalQueries.localTime() query, which relies
 on extracting the NANO_OF_DAY field.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, LocalTime::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the local time, not null
Throws:
DateTimeException - if unable to convert to a LocalTime


"
LocalTime,get(TemporalField field),int,Gets the value of the specified field from this time as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this time as an int.
 
 This queries this time for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this time, except NANO_OF_DAY and MICRO_OF_DAY
 which are too large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
LocalTime,getHour(),int,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
LocalTime,getLong(TemporalField field),long,Gets the value of the specified field from this time as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this time as a long.
 
 This queries this time for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalTime,getMinute(),int,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
LocalTime,getNano(),int,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
LocalTime,getSecond(),int,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
LocalTime,hashCode(),int,A hash code for this time.,"

hashCode
public int hashCode()
A hash code for this time.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
LocalTime,isAfter(LocalTime other),boolean,Checks if this time is after the specified time.,"

isAfter
public boolean isAfter(LocalTime other)
Checks if this time is after the specified time.
 
 The comparison is based on the time-line position of the time within a day.

Parameters:
other - the other time to compare to, not null
Returns:
true if this is after the specified time
Throws:
NullPointerException - if other is null


"
LocalTime,isBefore(LocalTime other),boolean,Checks if this time is before the specified time.,"

isBefore
public boolean isBefore(LocalTime other)
Checks if this time is before the specified time.
 
 The comparison is based on the time-line position of the time within a day.

Parameters:
other - the other time to compare to, not null
Returns:
true if this point is before the specified time
Throws:
NullPointerException - if other is null


"
LocalTime,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this time can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this time, false if not


"
LocalTime,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
LocalTime,"minus(long amountToSubtract, TemporalUnit unit)",LocalTime,Returns a copy of this time with the specified amount subtracted.,"

minus
public LocalTime minus(long amountToSubtract,
                       TemporalUnit unit)
Returns a copy of this time with the specified amount subtracted.
 
 This returns a LocalTime, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a LocalTime based on this time with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalTime,minus(TemporalAmount amountToSubtract),LocalTime,Returns a copy of this time with the specified amount subtracted.,"

minus
public LocalTime minus(TemporalAmount amountToSubtract)
Returns a copy of this time with the specified amount subtracted.
 
 This returns a LocalTime, based on this one, with the specified amount subtracted.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a LocalTime based on this time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalTime,minusHours(long hoursToSubtract),LocalTime,Returns a copy of this LocalTime with the specified number of hours subtracted.,"

minusHours
public LocalTime minusHours(long hoursToSubtract)
Returns a copy of this LocalTime with the specified number of hours subtracted.
 
 This subtracts the specified number of hours from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hoursToSubtract - the hours to subtract, may be negative
Returns:
a LocalTime based on this time with the hours subtracted, not null


"
LocalTime,minusMinutes(long minutesToSubtract),LocalTime,Returns a copy of this LocalTime with the specified number of minutes subtracted.,"

minusMinutes
public LocalTime minusMinutes(long minutesToSubtract)
Returns a copy of this LocalTime with the specified number of minutes subtracted.
 
 This subtracts the specified number of minutes from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutesToSubtract - the minutes to subtract, may be negative
Returns:
a LocalTime based on this time with the minutes subtracted, not null


"
LocalTime,minusNanos(long nanosToSubtract),LocalTime,Returns a copy of this LocalTime with the specified number of nanoseconds subtracted.,"

minusNanos
public LocalTime minusNanos(long nanosToSubtract)
Returns a copy of this LocalTime with the specified number of nanoseconds subtracted.
 
 This subtracts the specified number of nanoseconds from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToSubtract - the nanos to subtract, may be negative
Returns:
a LocalTime based on this time with the nanoseconds subtracted, not null


"
LocalTime,minusSeconds(long secondsToSubtract),LocalTime,Returns a copy of this LocalTime with the specified number of seconds subtracted.,"

minusSeconds
public LocalTime minusSeconds(long secondsToSubtract)
Returns a copy of this LocalTime with the specified number of seconds subtracted.
 
 This subtracts the specified number of seconds from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondsToSubtract - the seconds to subtract, may be negative
Returns:
a LocalTime based on this time with the seconds subtracted, not null


"
LocalTime,now(),static LocalTime,Obtains the current time from the system clock in the default time-zone.,"

now
public static LocalTime now()
Obtains the current time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current time.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current time using the system clock and default time-zone, not null


"
LocalTime,now(Clock clock),static LocalTime,Obtains the current time from the specified clock.,"

now
public static LocalTime now(Clock clock)
Obtains the current time from the specified clock.
 
 This will query the specified clock to obtain the current time.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current time, not null


"
LocalTime,now(ZoneId zone),static LocalTime,Obtains the current time from the system clock in the specified time-zone.,"

now
public static LocalTime now(ZoneId zone)
Obtains the current time from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current time.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current time using the system clock, not null


"
LocalTime,"of(int hour, int minute)",static LocalTime,Obtains an instance of LocalTime from an hour and minute.,"

of
public static LocalTime of(int hour,
                           int minute)
Obtains an instance of LocalTime from an hour and minute.
 
 This returns a LocalTime with the specified hour and minute.
 The second and nanosecond fields will be set to zero.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalTime,"of(int hour, int minute, int second)",static LocalTime,"Obtains an instance of LocalTime from an hour, minute and second.","

of
public static LocalTime of(int hour,
                           int minute,
                           int second)
Obtains an instance of LocalTime from an hour, minute and second.
 
 This returns a LocalTime with the specified hour, minute and second.
 The nanosecond field will be set to zero.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalTime,"of(int hour, int minute, int second, int nanoOfSecond)",static LocalTime,"Obtains an instance of LocalTime from an hour, minute, second and nanosecond.","

of
public static LocalTime of(int hour,
                           int minute,
                           int second,
                           int nanoOfSecond)
Obtains an instance of LocalTime from an hour, minute, second and nanosecond.
 
 This returns a LocalTime with the specified hour, minute, second and nanosecond.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
Returns:
the local time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
LocalTime,ofNanoOfDay(long nanoOfDay),static LocalTime,Obtains an instance of LocalTime from a nanos-of-day value.,"

ofNanoOfDay
public static LocalTime ofNanoOfDay(long nanoOfDay)
Obtains an instance of LocalTime from a nanos-of-day value.
 
 This returns a LocalTime with the specified nanosecond-of-day.

Parameters:
nanoOfDay - the nano of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1
Returns:
the local time, not null
Throws:
DateTimeException - if the nanos of day value is invalid


"
LocalTime,ofSecondOfDay(long secondOfDay),static LocalTime,Obtains an instance of LocalTime from a second-of-day value.,"

ofSecondOfDay
public static LocalTime ofSecondOfDay(long secondOfDay)
Obtains an instance of LocalTime from a second-of-day value.
 
 This returns a LocalTime with the specified second-of-day.
 The nanosecond field will be set to zero.

Parameters:
secondOfDay - the second-of-day, from 0 to 24 * 60 * 60 - 1
Returns:
the local time, not null
Throws:
DateTimeException - if the second-of-day value is invalid


"
LocalTime,parse(CharSequence text),static LocalTime,Obtains an instance of LocalTime from a text string such as 10:15.,"

parse
public static LocalTime parse(CharSequence text)
Obtains an instance of LocalTime from a text string such as 10:15.
 
 The string must represent a valid time and is parsed using
 DateTimeFormatter.ISO_LOCAL_TIME.

Parameters:
text - the text to parse such as ""10:15:30"", not null
Returns:
the parsed local time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalTime,"parse(CharSequence text, DateTimeFormatter formatter)",static LocalTime,Obtains an instance of LocalTime from a text string using a specific formatter.,"

parse
public static LocalTime parse(CharSequence text,
                              DateTimeFormatter formatter)
Obtains an instance of LocalTime from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a time.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed local time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
LocalTime,"plus(long amountToAdd, TemporalUnit unit)",LocalTime,Returns a copy of this time with the specified amount added.,"

plus
public LocalTime plus(long amountToAdd,
                      TemporalUnit unit)
Returns a copy of this time with the specified amount added.
 
 This returns a LocalTime, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The supported fields behave as follows:
 
NANOS -
  Returns a LocalTime with the specified number of nanoseconds added.
  This is equivalent to plusNanos(long).
 MICROS -
  Returns a LocalTime with the specified number of microseconds added.
  This is equivalent to plusNanos(long) with the amount
  multiplied by 1,000.
 MILLIS -
  Returns a LocalTime with the specified number of milliseconds added.
  This is equivalent to plusNanos(long) with the amount
  multiplied by 1,000,000.
 SECONDS -
  Returns a LocalTime with the specified number of seconds added.
  This is equivalent to plusSeconds(long).
 MINUTES -
  Returns a LocalTime with the specified number of minutes added.
  This is equivalent to plusMinutes(long).
 HOURS -
  Returns a LocalTime with the specified number of hours added.
  This is equivalent to plusHours(long).
 HALF_DAYS -
  Returns a LocalTime with the specified number of half-days added.
  This is equivalent to plusHours(long) with the amount
  multiplied by 12.
 

 All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a LocalTime based on this time with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalTime,plus(TemporalAmount amountToAdd),LocalTime,Returns a copy of this time with the specified amount added.,"

plus
public LocalTime plus(TemporalAmount amountToAdd)
Returns a copy of this time with the specified amount added.
 
 This returns a LocalTime, based on this one, with the specified amount added.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a LocalTime based on this time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalTime,plusHours(long hoursToAdd),LocalTime,Returns a copy of this LocalTime with the specified number of hours added.,"

plusHours
public LocalTime plusHours(long hoursToAdd)
Returns a copy of this LocalTime with the specified number of hours added.
 
 This adds the specified number of hours to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hoursToAdd - the hours to add, may be negative
Returns:
a LocalTime based on this time with the hours added, not null


"
LocalTime,plusMinutes(long minutesToAdd),LocalTime,Returns a copy of this LocalTime with the specified number of minutes added.,"

plusMinutes
public LocalTime plusMinutes(long minutesToAdd)
Returns a copy of this LocalTime with the specified number of minutes added.
 
 This adds the specified number of minutes to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutesToAdd - the minutes to add, may be negative
Returns:
a LocalTime based on this time with the minutes added, not null


"
LocalTime,plusNanos(long nanosToAdd),LocalTime,Returns a copy of this LocalTime with the specified number of nanoseconds added.,"

plusNanos
public LocalTime plusNanos(long nanosToAdd)
Returns a copy of this LocalTime with the specified number of nanoseconds added.
 
 This adds the specified number of nanoseconds to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanosToAdd - the nanos to add, may be negative
Returns:
a LocalTime based on this time with the nanoseconds added, not null


"
LocalTime,plusSeconds(long secondstoAdd),LocalTime,Returns a copy of this LocalTime with the specified number of seconds added.,"

plusSeconds
public LocalTime plusSeconds(long secondstoAdd)
Returns a copy of this LocalTime with the specified number of seconds added.
 
 This adds the specified number of seconds to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
secondstoAdd - the seconds to add, may be negative
Returns:
a LocalTime based on this time with the seconds added, not null


"
LocalTime,query(TemporalQuery<R> query),<R> R,Queries this time using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this time using the specified query.
 
 This queries this time using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
LocalTime,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This time is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
LocalTime,toNanoOfDay(),long,"Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.","

toNanoOfDay
public long toNanoOfDay()
Extracts the time as nanos of day,
 from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.

Returns:
the nano of day equivalent to this time


"
LocalTime,toSecondOfDay(),int,"Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.","

toSecondOfDay
public int toSecondOfDay()
Extracts the time as seconds of day,
 from 0 to 24 * 60 * 60 - 1.

Returns:
the second-of-day equivalent to this time


"
LocalTime,toString(),String,"Outputs this time as a String, such as 10:15.","

toString
public String toString()
Outputs this time as a String, such as 10:15.
 
 The output will be one of the following ISO-8601 formats:
 
HH:mm
HH:mm:ss
HH:mm:ss.SSS
HH:mm:ss.SSSSSS
HH:mm:ss.SSSSSSSSS

 The format used will be the shortest that outputs the full value of
 the time where the omitted parts are implied to be zero.

Overrides:
toString in class Object
Returns:
a string representation of this time, not null


"
LocalTime,truncatedTo(TemporalUnit unit),LocalTime,Returns a copy of this LocalTime with the time truncated.,"

truncatedTo
public LocalTime truncatedTo(TemporalUnit unit)
Returns a copy of this LocalTime with the time truncated.
 
 Truncation returns a copy of the original time with fields
 smaller than the specified unit set to zero.
 For example, truncating with the minutes unit
 will set the second-of-minute and nano-of-second field to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
a LocalTime based on this time with the time truncated, not null
Throws:
DateTimeException - if unable to truncate
UnsupportedTemporalTypeException - if the unit is not supported


"
LocalTime,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another time in terms of the specified unit.
 
 This calculates the amount of time between two LocalTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified time.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 LocalTime using from(TemporalAccessor).
 For example, the amount in hours between two times can be calculated
 using startTime.until(endTime, HOURS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two times.
 For example, the amount in hours between 11:30 and 13:29 will only
 be one hour as it is one minute short of two hours.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MINUTES);
   amount = MINUTES.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end time, exclusive, which is converted to a LocalTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this time and the end time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a LocalTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
LocalTime,with(TemporalAdjuster adjuster),LocalTime,Returns an adjusted copy of this time.,"

with
public LocalTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this time.
 
 This returns a LocalTime, based on this one, with the time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the hour field.
 A more complex adjuster might set the time to the last hour of the day.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a LocalTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
LocalTime,"with(TemporalField field, long newValue)",LocalTime,Returns a copy of this time with the specified field set to a new value.,"

with
public LocalTime with(TemporalField field,
                      long newValue)
Returns a copy of this time with the specified field set to a new value.
 
 This returns a LocalTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the hour, minute or second.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields behave as follows:
 
NANO_OF_SECOND -
  Returns a LocalTime with the specified nano-of-second.
  The hour, minute and second will be unchanged.
 NANO_OF_DAY -
  Returns a LocalTime with the specified nano-of-day.
  This completely replaces the time and is equivalent to ofNanoOfDay(long).
 MICRO_OF_SECOND -
  Returns a LocalTime with the nano-of-second replaced by the specified
  micro-of-second multiplied by 1,000.
  The hour, minute and second will be unchanged.
 MICRO_OF_DAY -
  Returns a LocalTime with the specified micro-of-day.
  This completely replaces the time and is equivalent to using ofNanoOfDay(long)
  with the micro-of-day multiplied by 1,000.
 MILLI_OF_SECOND -
  Returns a LocalTime with the nano-of-second replaced by the specified
  milli-of-second multiplied by 1,000,000.
  The hour, minute and second will be unchanged.
 MILLI_OF_DAY -
  Returns a LocalTime with the specified milli-of-day.
  This completely replaces the time and is equivalent to using ofNanoOfDay(long)
  with the milli-of-day multiplied by 1,000,000.
 SECOND_OF_MINUTE -
  Returns a LocalTime with the specified second-of-minute.
  The hour, minute and nano-of-second will be unchanged.
 SECOND_OF_DAY -
  Returns a LocalTime with the specified second-of-day.
  The nano-of-second will be unchanged.
 MINUTE_OF_HOUR -
  Returns a LocalTime with the specified minute-of-hour.
  The hour, second-of-minute and nano-of-second will be unchanged.
 MINUTE_OF_DAY -
  Returns a LocalTime with the specified minute-of-day.
  The second-of-minute and nano-of-second will be unchanged.
 HOUR_OF_AMPM -
  Returns a LocalTime with the specified hour-of-am-pm.
  The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
 CLOCK_HOUR_OF_AMPM -
  Returns a LocalTime with the specified clock-hour-of-am-pm.
  The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
 HOUR_OF_DAY -
  Returns a LocalTime with the specified hour-of-day.
  The minute-of-hour, second-of-minute and nano-of-second will be unchanged.
 CLOCK_HOUR_OF_DAY -
  Returns a LocalTime with the specified clock-hour-of-day.
  The minute-of-hour, second-of-minute and nano-of-second will be unchanged.
 AMPM_OF_DAY -
  Returns a LocalTime with the specified AM/PM.
  The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
 

 In all cases, if the new value is outside the valid range of values for the field
 then a DateTimeException will be thrown.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a LocalTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
LocalTime,withHour(int hour),LocalTime,Returns a copy of this LocalTime with the hour-of-day altered.,"

withHour
public LocalTime withHour(int hour)
Returns a copy of this LocalTime with the hour-of-day altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
a LocalTime based on this time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
LocalTime,withMinute(int minute),LocalTime,Returns a copy of this LocalTime with the minute-of-hour altered.,"

withMinute
public LocalTime withMinute(int minute)
Returns a copy of this LocalTime with the minute-of-hour altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
a LocalTime based on this time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
LocalTime,withNano(int nanoOfSecond),LocalTime,Returns a copy of this LocalTime with the nano-of-second altered.,"

withNano
public LocalTime withNano(int nanoOfSecond)
Returns a copy of this LocalTime with the nano-of-second altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
a LocalTime based on this time with the requested nanosecond, not null
Throws:
DateTimeException - if the nanos value is invalid


"
LocalTime,withSecond(int second),LocalTime,Returns a copy of this LocalTime with the second-of-minute altered.,"

withSecond
public LocalTime withSecond(int second)
Returns a copy of this LocalTime with the second-of-minute altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
a LocalTime based on this time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
MonthDay,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have this month-day.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have this month-day.
 
 This returns a temporal object of the same observable type as the input
 with the month and day-of-month changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 twice, passing ChronoField.MONTH_OF_YEAR and
 ChronoField.DAY_OF_MONTH as the fields.
 If the specified temporal object does not use the ISO calendar system then
 a DateTimeException is thrown.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisMonthDay.adjustInto(temporal);
   temporal = temporal.with(thisMonthDay);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
MonthDay,atYear(int year),LocalDate,Combines this month-day with a year to create a LocalDate.,"

atYear
public LocalDate atYear(int year)
Combines this month-day with a year to create a LocalDate.
 
 This returns a LocalDate formed from this month-day and the specified year.
 
 A month-day of February 29th will be adjusted to February 28th in the resulting
 date if the year is not a leap year.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to use, from MIN_YEAR to MAX_YEAR
Returns:
the local date formed from this month-day and the specified year, not null
Throws:
DateTimeException - if the year is outside the valid range of years


"
MonthDay,compareTo(MonthDay other),int,Compares this month-day to another month-day.,"

compareTo
public int compareTo(MonthDay other)
Compares this month-day to another month-day.
 
 The comparison is based first on value of the month, then on the value of the day.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<MonthDay>
Parameters:
other - the other month-day to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
MonthDay,equals(Object obj),boolean,Checks if this month-day is equal to another month-day.,"

equals
public boolean equals(Object obj)
Checks if this month-day is equal to another month-day.
 
 The comparison is based on the time-line position of the month-day within a year.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other month-day
See Also:
Object.hashCode(), 
HashMap


"
MonthDay,format(DateTimeFormatter formatter),String,Formats this month-day using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this month-day using the specified formatter.
 
 This month-day will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted month-day string, not null
Throws:
DateTimeException - if an error occurs during printing


"
MonthDay,from(TemporalAccessor temporal),static MonthDay,Obtains an instance of MonthDay from a temporal object.,"

from
public static MonthDay from(TemporalAccessor temporal)
Obtains an instance of MonthDay from a temporal object.
 
 This obtains a month-day based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of MonthDay.
 
 The conversion extracts the MONTH_OF_YEAR and
 DAY_OF_MONTH fields.
 The extraction is only permitted if the temporal object has an ISO
 chronology, or can be converted to a LocalDate.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, MonthDay::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the month-day, not null
Throws:
DateTimeException - if unable to convert to a MonthDay


"
MonthDay,get(TemporalField field),int,Gets the value of the specified field from this month-day as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this month-day as an int.
 
 This queries this month-day for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this month-day.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
MonthDay,getDayOfMonth(),int,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
MonthDay,getLong(TemporalField field),long,Gets the value of the specified field from this month-day as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this month-day as a long.
 
 This queries this month-day for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this month-day.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
MonthDay,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
MonthDay,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
MonthDay,hashCode(),int,A hash code for this month-day.,"

hashCode
public int hashCode()
A hash code for this month-day.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MonthDay,isAfter(MonthDay other),boolean,Checks if this month-day is after the specified month-day.,"

isAfter
public boolean isAfter(MonthDay other)
Checks if this month-day is after the specified month-day.

Parameters:
other - the other month-day to compare to, not null
Returns:
true if this is after the specified month-day


"
MonthDay,isBefore(MonthDay other),boolean,Checks if this month-day is before the specified month-day.,"

isBefore
public boolean isBefore(MonthDay other)
Checks if this month-day is before the specified month-day.

Parameters:
other - the other month-day to compare to, not null
Returns:
true if this point is before the specified month-day


"
MonthDay,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this month-day can be queried for the specified field.
 If false, then calling the range and
 get methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
MONTH_OF_YEAR
YEAR

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this month-day, false if not


"
MonthDay,isValidYear(int year),boolean,Checks if the year is valid for this month-day.,"

isValidYear
public boolean isValidYear(int year)
Checks if the year is valid for this month-day.
 
 This method checks whether this month and day and the input year form
 a valid date. This can only return false for February 29th.

Parameters:
year - the year to validate
Returns:
true if the year is valid for this month-day
See Also:
Year.isValidMonthDay(MonthDay)


"
MonthDay,now(),static MonthDay,Obtains the current month-day from the system clock in the default time-zone.,"

now
public static MonthDay now()
Obtains the current month-day from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current month-day.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current month-day using the system clock and default time-zone, not null


"
MonthDay,now(Clock clock),static MonthDay,Obtains the current month-day from the specified clock.,"

now
public static MonthDay now(Clock clock)
Obtains the current month-day from the specified clock.
 
 This will query the specified clock to obtain the current month-day.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current month-day, not null


"
MonthDay,now(ZoneId zone),static MonthDay,Obtains the current month-day from the system clock in the specified time-zone.,"

now
public static MonthDay now(ZoneId zone)
Obtains the current month-day from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current month-day.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current month-day using the system clock, not null


"
MonthDay,"of(int month, int dayOfMonth)",static MonthDay,Obtains an instance of MonthDay.,"

of
public static MonthDay of(int month,
                          int dayOfMonth)
Obtains an instance of MonthDay.
 
 The day-of-month must be valid for the month within a leap year.
 Hence, for month 2 (February), day 29 is valid.
 
 For example, passing in month 4 (April) and day 31 will throw an exception, as
 there can never be April 31st in any year. By contrast, passing in
 February 29th is permitted, as that month-day can sometimes be valid.

Parameters:
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the month-day, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month


"
MonthDay,"of(Month month, int dayOfMonth)",static MonthDay,Obtains an instance of MonthDay.,"

of
public static MonthDay of(Month month,
                          int dayOfMonth)
Obtains an instance of MonthDay.
 
 The day-of-month must be valid for the month within a leap year.
 Hence, for February, day 29 is valid.
 
 For example, passing in April and day 31 will throw an exception, as
 there can never be April 31st in any year. By contrast, passing in
 February 29th is permitted, as that month-day can sometimes be valid.

Parameters:
month - the month-of-year to represent, not null
dayOfMonth - the day-of-month to represent, from 1 to 31
Returns:
the month-day, not null
Throws:
DateTimeException - if the value of any field is out of range,
  or if the day-of-month is invalid for the month


"
MonthDay,parse(CharSequence text),static MonthDay,Obtains an instance of MonthDay from a text string such as --12-03.,"

parse
public static MonthDay parse(CharSequence text)
Obtains an instance of MonthDay from a text string such as --12-03.
 
 The string must represent a valid month-day.
 The format is --MM-dd.

Parameters:
text - the text to parse such as ""--12-03"", not null
Returns:
the parsed month-day, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
MonthDay,"parse(CharSequence text, DateTimeFormatter formatter)",static MonthDay,Obtains an instance of MonthDay from a text string using a specific formatter.,"

parse
public static MonthDay parse(CharSequence text,
                             DateTimeFormatter formatter)
Obtains an instance of MonthDay from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a month-day.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed month-day, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
MonthDay,query(TemporalQuery<R> query),<R> R,Queries this month-day using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this month-day using the specified query.
 
 This queries this month-day using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
MonthDay,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This month-day is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
MonthDay,toString(),String,"Outputs this month-day as a String, such as --12-03.","

toString
public String toString()
Outputs this month-day as a String, such as --12-03.
 
 The output will be in the format --MM-dd:

Overrides:
toString in class Object
Returns:
a string representation of this month-day, not null


"
MonthDay,with(Month month),MonthDay,Returns a copy of this MonthDay with the month-of-year altered.,"

with
public MonthDay with(Month month)
Returns a copy of this MonthDay with the month-of-year altered.
 
 This returns a month-day with the specified month.
 If the day-of-month is invalid for the specified month, the day will
 be adjusted to the last valid day-of-month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the returned month-day, not null
Returns:
a MonthDay based on this month-day with the requested month, not null


"
MonthDay,withDayOfMonth(int dayOfMonth),MonthDay,Returns a copy of this MonthDay with the day-of-month altered.,"

withDayOfMonth
public MonthDay withDayOfMonth(int dayOfMonth)
Returns a copy of this MonthDay with the day-of-month altered.
 
 This returns a month-day with the specified day-of-month.
 If the day-of-month is invalid for the month, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the return month-day, from 1 to 31
Returns:
a MonthDay based on this month-day with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month


"
MonthDay,withMonth(int month),MonthDay,Returns a copy of this MonthDay with the month-of-year altered.,"

withMonth
public MonthDay withMonth(int month)
Returns a copy of this MonthDay with the month-of-year altered.
 
 This returns a month-day with the specified month.
 If the day-of-month is invalid for the specified month, the day will
 be adjusted to the last valid day-of-month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)
Returns:
a MonthDay based on this month-day with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
OffsetDateTime,adjustInto(Temporal temporal),Temporal,"Adjusts the specified temporal object to have the same offset, date and time as this object.","

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same offset, date
 and time as this object.
 
 This returns a temporal object of the same observable type as the input
 with the offset, date and time changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 three times, passing ChronoField.EPOCH_DAY,
 ChronoField.NANO_OF_DAY and ChronoField.OFFSET_SECONDS as the fields.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisOffsetDateTime.adjustInto(temporal);
   temporal = temporal.with(thisOffsetDateTime);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,atZoneSameInstant(ZoneId zone),ZonedDateTime,Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant.,"

atZoneSameInstant
public ZonedDateTime atZoneSameInstant(ZoneId zone)
Combines this date-time with a time-zone to create a ZonedDateTime
 ensuring that the result has the same instant.
 
 This returns a ZonedDateTime formed from this date-time and the specified time-zone.
 This conversion will ignore the visible local date-time and use the underlying instant instead.
 This avoids any problems with local time-line gaps or overlaps.
 The result might have different values for fields such as hour, minute an even day.
 
 To attempt to retain the values of the fields, use atZoneSimilarLocal(ZoneId).
 To use the offset as the zone ID, use toZonedDateTime().

Parameters:
zone - the time-zone to use, not null
Returns:
the zoned date-time formed from this date-time, not null


"
OffsetDateTime,atZoneSimilarLocal(ZoneId zone),ZonedDateTime,Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time.,"

atZoneSimilarLocal
public ZonedDateTime atZoneSimilarLocal(ZoneId zone)
Combines this date-time with a time-zone to create a ZonedDateTime
 trying to keep the same local date and time.
 
 This returns a ZonedDateTime formed from this date-time and the specified time-zone.
 Where possible, the result will have the same local date-time as this object.
 
 Time-zone rules, such as daylight savings, mean that not every time on the
 local time-line exists. If the local date-time is in a gap or overlap according to
 the rules then a resolver is used to determine the resultant local time and offset.
 This method uses ZonedDateTime.ofLocal(LocalDateTime, ZoneId, ZoneOffset)
 to retain the offset from this instance if possible.
 
 Finer control over gaps and overlaps is available in two ways.
 If you simply want to use the later offset at overlaps then call
 ZonedDateTime.withLaterOffsetAtOverlap() immediately after this method.
 
 To create a zoned date-time at the same instant irrespective of the local time-line,
 use atZoneSameInstant(ZoneId).
 To use the offset as the zone ID, use toZonedDateTime().

Parameters:
zone - the time-zone to use, not null
Returns:
the zoned date-time formed from this date and the earliest valid time for the zone, not null


"
OffsetDateTime,compareTo(OffsetDateTime other),int,Compares this date-time to another date-time.,"

compareTo
public int compareTo(OffsetDateTime other)
Compares this date-time to another date-time.
 
 The comparison is based on the instant then on the local date-time.
 It is ""consistent with equals"", as defined by Comparable.
 
 For example, the following is the comparator order:
 
2008-12-03T10:30+01:00
2008-12-03T11:00+01:00
2008-12-03T12:00+02:00
2008-12-03T11:30+01:00
2008-12-03T12:00+01:00
2008-12-03T12:30+01:00

 Values #2 and #3 represent the same instant on the time-line.
 When two values represent the same instant, the local date-time is compared
 to distinguish them. This step is needed to make the ordering
 consistent with equals().

Specified by:
compareTo in interface Comparable<OffsetDateTime>
Parameters:
other - the other date-time to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
OffsetDateTime,equals(Object obj),boolean,Checks if this date-time is equal to another date-time.,"

equals
public boolean equals(Object obj)
Checks if this date-time is equal to another date-time.
 
 The comparison is based on the local date-time and the offset.
 To compare for the same instant on the time-line, use isEqual(java.time.OffsetDateTime).
 Only objects of type OffsetDateTime are compared, other types return false.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other date-time
See Also:
Object.hashCode(), 
HashMap


"
OffsetDateTime,format(DateTimeFormatter formatter),String,Formats this date-time using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this date-time using the specified formatter.
 
 This date-time will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted date-time string, not null
Throws:
DateTimeException - if an error occurs during printing


"
OffsetDateTime,from(TemporalAccessor temporal),static OffsetDateTime,Obtains an instance of OffsetDateTime from a temporal object.,"

from
public static OffsetDateTime from(TemporalAccessor temporal)
Obtains an instance of OffsetDateTime from a temporal object.
 
 This obtains an offset date-time based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of OffsetDateTime.
 
 The conversion will first obtain a ZoneOffset from the temporal object.
 It will then try to obtain a LocalDateTime, falling back to an Instant if necessary.
 The result will be the combination of ZoneOffset with either
 with LocalDateTime or Instant.
 Implementations are permitted to perform optimizations such as accessing
 those fields that are equivalent to the relevant objects.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, OffsetDateTime::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the offset date-time, not null
Throws:
DateTimeException - if unable to convert to an OffsetDateTime


"
OffsetDateTime,get(TemporalField field),int,Gets the value of the specified field from this date-time as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this date-time as an int.
 
 This queries this date-time for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY,
 EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too
 large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,getDayOfMonth(),int,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
OffsetDateTime,getDayOfWeek(),DayOfWeek,"Gets the day-of-week field, which is an enum DayOfWeek.","

getDayOfWeek
public DayOfWeek getDayOfWeek()
Gets the day-of-week field, which is an enum DayOfWeek.
 
 This method returns the enum DayOfWeek for the day-of-week.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.
 
 Additional information can be obtained from the DayOfWeek.
 This includes textual names of the values.

Returns:
the day-of-week, not null


"
OffsetDateTime,getDayOfYear(),int,Gets the day-of-year field.,"

getDayOfYear
public int getDayOfYear()
Gets the day-of-year field.
 
 This method returns the primitive int value for the day-of-year.

Returns:
the day-of-year, from 1 to 365, or 366 in a leap year


"
OffsetDateTime,getHour(),int,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
OffsetDateTime,getLong(TemporalField field),long,Gets the value of the specified field from this date-time as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this date-time as a long.
 
 This queries this date-time for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,getMinute(),int,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
OffsetDateTime,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
OffsetDateTime,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
OffsetDateTime,getNano(),int,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
OffsetDateTime,getOffset(),ZoneOffset,"Gets the zone offset, such as '+01:00'.","

getOffset
public ZoneOffset getOffset()
Gets the zone offset, such as '+01:00'.
 
 This is the offset of the local date-time from UTC/Greenwich.

Returns:
the zone offset, not null


"
OffsetDateTime,getSecond(),int,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
OffsetDateTime,getYear(),int,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
OffsetDateTime,hashCode(),int,A hash code for this date-time.,"

hashCode
public int hashCode()
A hash code for this date-time.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
OffsetDateTime,isAfter(OffsetDateTime other),boolean,Checks if the instant of this date-time is after that of the specified date-time.,"

isAfter
public boolean isAfter(OffsetDateTime other)
Checks if the instant of this date-time is after that of the specified date-time.
 
 This method differs from the comparison in compareTo(java.time.OffsetDateTime) and equals(java.lang.Object) in that it
 only compares the instant of the date-time. This is equivalent to using
 dateTime1.toInstant().isAfter(dateTime2.toInstant());.

Parameters:
other - the other date-time to compare to, not null
Returns:
true if this is after the instant of the specified date-time


"
OffsetDateTime,isBefore(OffsetDateTime other),boolean,Checks if the instant of this date-time is before that of the specified date-time.,"

isBefore
public boolean isBefore(OffsetDateTime other)
Checks if the instant of this date-time is before that of the specified date-time.
 
 This method differs from the comparison in compareTo(java.time.OffsetDateTime) in that it
 only compares the instant of the date-time. This is equivalent to using
 dateTime1.toInstant().isBefore(dateTime2.toInstant());.

Parameters:
other - the other date-time to compare to, not null
Returns:
true if this is before the instant of the specified date-time


"
OffsetDateTime,isEqual(OffsetDateTime other),boolean,Checks if the instant of this date-time is equal to that of the specified date-time.,"

isEqual
public boolean isEqual(OffsetDateTime other)
Checks if the instant of this date-time is equal to that of the specified date-time.
 
 This method differs from the comparison in compareTo(java.time.OffsetDateTime) and equals(java.lang.Object)
 in that it only compares the instant of the date-time. This is equivalent to using
 dateTime1.toInstant().equals(dateTime2.toInstant());.

Parameters:
other - the other date-time to compare to, not null
Returns:
true if the instant equals the instant of the specified date-time


"
OffsetDateTime,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this date-time can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA
INSTANT_SECONDS
OFFSET_SECONDS

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this date-time, false if not


"
OffsetDateTime,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this date-time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
OffsetDateTime,"minus(long amountToSubtract, TemporalUnit unit)",OffsetDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public OffsetDateTime minus(long amountToSubtract,
                            TemporalUnit unit)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns an OffsetDateTime, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
an OffsetDateTime based on this date-time with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,minus(TemporalAmount amountToSubtract),OffsetDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public OffsetDateTime minus(TemporalAmount amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns an OffsetDateTime, based on this one, with the specified amount subtracted.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
an OffsetDateTime based on this date-time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,minusDays(long days),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of days subtracted.,"

minusDays
public OffsetDateTime minusDays(long days)
Returns a copy of this OffsetDateTime with the specified number of days subtracted.
 
 This method subtracts the specified amount from the days field decrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 minus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusHours(long hours),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of hours subtracted.,"

minusHours
public OffsetDateTime minusHours(long hours)
Returns a copy of this OffsetDateTime with the specified number of hours subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the hours subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusMinutes(long minutes),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of minutes subtracted.,"

minusMinutes
public OffsetDateTime minusMinutes(long minutes)
Returns a copy of this OffsetDateTime with the specified number of minutes subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the minutes subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusMonths(long months),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of months subtracted.,"

minusMonths
public OffsetDateTime minusMonths(long months)
Returns a copy of this OffsetDateTime with the specified number of months subtracted.
 
 This method subtracts the specified amount from the months field in three steps:
 
Subtract the input months from the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 minus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusNanos(long nanos),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted.,"

minusNanos
public OffsetDateTime minusNanos(long nanos)
Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusSeconds(long seconds),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of seconds subtracted.,"

minusSeconds
public OffsetDateTime minusSeconds(long seconds)
Returns a copy of this OffsetDateTime with the specified number of seconds subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusWeeks(long weeks),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of weeks subtracted.,"

minusWeeks
public OffsetDateTime minusWeeks(long weeks)
Returns a copy of this OffsetDateTime with the specified number of weeks subtracted.
 
 This method subtracts the specified amount in weeks from the days field decrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 minus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,minusYears(long years),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of years subtracted.,"

minusYears
public OffsetDateTime minusYears(long years)
Returns a copy of this OffsetDateTime with the specified number of years subtracted.
 
 This method subtracts the specified amount from the years field in three steps:
 
Subtract the input years from the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) minus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to subtract, may be negative
Returns:
an OffsetDateTime based on this date-time with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,now(),static OffsetDateTime,Obtains the current date-time from the system clock in the default time-zone.,"

now
public static OffsetDateTime now()
Obtains the current date-time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date-time.
 The offset will be calculated from the time-zone in the clock.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date-time using the system clock, not null


"
OffsetDateTime,now(Clock clock),static OffsetDateTime,Obtains the current date-time from the specified clock.,"

now
public static OffsetDateTime now(Clock clock)
Obtains the current date-time from the specified clock.
 
 This will query the specified clock to obtain the current date-time.
 The offset will be calculated from the time-zone in the clock.
 
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current date-time, not null


"
OffsetDateTime,now(ZoneId zone),static OffsetDateTime,Obtains the current date-time from the system clock in the specified time-zone.,"

now
public static OffsetDateTime now(ZoneId zone)
Obtains the current date-time from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current date-time.
 Specifying the time-zone avoids dependence on the default time-zone.
 The offset will be calculated from the specified time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current date-time using the system clock, not null


"
OffsetDateTime,"of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)",static OffsetDateTime,"Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset.","

of
public static OffsetDateTime of(int year,
                                int month,
                                int dayOfMonth,
                                int hour,
                                int minute,
                                int second,
                                int nanoOfSecond,
                                ZoneOffset offset)
Obtains an instance of OffsetDateTime from a year, month, day,
 hour, minute, second, nanosecond and offset.
 
 This creates an offset date-time with the seven specified fields.
 
 This method exists primarily for writing test cases.
 Non test-code will typically use other methods to create an offset time.
 LocalDateTime has five additional convenience variants of the
 equivalent factory method taking fewer arguments.
 They are not provided here to reduce the footprint of the API.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
offset - the zone offset, not null
Returns:
the offset date-time, not null
Throws:
DateTimeException - if the value of any field is out of range, or
  if the day-of-month is invalid for the month-year


"
OffsetDateTime,"of(LocalDate date, LocalTime time, ZoneOffset offset)",static OffsetDateTime,"Obtains an instance of OffsetDateTime from a date, time and offset.","

of
public static OffsetDateTime of(LocalDate date,
                                LocalTime time,
                                ZoneOffset offset)
Obtains an instance of OffsetDateTime from a date, time and offset.
 
 This creates an offset date-time with the specified local date, time and offset.

Parameters:
date - the local date, not null
time - the local time, not null
offset - the zone offset, not null
Returns:
the offset date-time, not null


"
OffsetDateTime,"of(LocalDateTime dateTime, ZoneOffset offset)",static OffsetDateTime,Obtains an instance of OffsetDateTime from a date-time and offset.,"

of
public static OffsetDateTime of(LocalDateTime dateTime,
                                ZoneOffset offset)
Obtains an instance of OffsetDateTime from a date-time and offset.
 
 This creates an offset date-time with the specified local date-time and offset.

Parameters:
dateTime - the local date-time, not null
offset - the zone offset, not null
Returns:
the offset date-time, not null


"
OffsetDateTime,"ofInstant(Instant instant, ZoneId zone)",static OffsetDateTime,Obtains an instance of OffsetDateTime from an Instant and zone ID.,"

ofInstant
public static OffsetDateTime ofInstant(Instant instant,
                                       ZoneId zone)
Obtains an instance of OffsetDateTime from an Instant and zone ID.
 
 This creates an offset date-time with the same instant as that specified.
 Finding the offset from UTC/Greenwich is simple as there is only one valid
 offset for each instant.

Parameters:
instant - the instant to create the date-time from, not null
zone - the time-zone, which may be an offset, not null
Returns:
the offset date-time, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
OffsetDateTime,parse(CharSequence text),static OffsetDateTime,Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00.,"

parse
public static OffsetDateTime parse(CharSequence text)
Obtains an instance of OffsetDateTime from a text string
 such as 2007-12-03T10:15:30+01:00.
 
 The string must represent a valid date-time and is parsed using
 DateTimeFormatter.ISO_OFFSET_DATE_TIME.

Parameters:
text - the text to parse such as ""2007-12-03T10:15:30+01:00"", not null
Returns:
the parsed offset date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
OffsetDateTime,"parse(CharSequence text, DateTimeFormatter formatter)",static OffsetDateTime,Obtains an instance of OffsetDateTime from a text string using a specific formatter.,"

parse
public static OffsetDateTime parse(CharSequence text,
                                   DateTimeFormatter formatter)
Obtains an instance of OffsetDateTime from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a date-time.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed offset date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
OffsetDateTime,"plus(long amountToAdd, TemporalUnit unit)",OffsetDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public OffsetDateTime plus(long amountToAdd,
                           TemporalUnit unit)
Returns a copy of this date-time with the specified amount added.
 
 This returns an OffsetDateTime, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented by
 LocalDateTime.plus(long, TemporalUnit).
 The offset is not part of the calculation and will be unchanged in the result.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
an OffsetDateTime based on this date-time with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,plus(TemporalAmount amountToAdd),OffsetDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public OffsetDateTime plus(TemporalAmount amountToAdd)
Returns a copy of this date-time with the specified amount added.
 
 This returns an OffsetDateTime, based on this one, with the specified amount added.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
an OffsetDateTime based on this date-time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,plusDays(long days),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of days added.,"

plusDays
public OffsetDateTime plusDays(long days)
Returns a copy of this OffsetDateTime with the specified number of days added.
 
 This method adds the specified amount to the days field incrementing the
 month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one day would result in 2009-01-01.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusHours(long hours),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of hours added.,"

plusHours
public OffsetDateTime plusHours(long hours)
Returns a copy of this OffsetDateTime with the specified number of hours added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the hours added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusMinutes(long minutes),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of minutes added.,"

plusMinutes
public OffsetDateTime plusMinutes(long minutes)
Returns a copy of this OffsetDateTime with the specified number of minutes added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the minutes added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusMonths(long months),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of months added.,"

plusMonths
public OffsetDateTime plusMonths(long months)
Returns a copy of this OffsetDateTime with the specified number of months added.
 
 This method adds the specified amount to the months field in three steps:
 
Add the input months to the month-of-year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2007-03-31 plus one month would result in the invalid date
 2007-04-31. Instead of returning an invalid result, the last valid day
 of the month, 2007-04-30, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusNanos(long nanos),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of nanoseconds added.,"

plusNanos
public OffsetDateTime plusNanos(long nanos)
Returns a copy of this OffsetDateTime with the specified number of nanoseconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the nanoseconds added, not null
Throws:
DateTimeException - if the unit cannot be added to this type


"
OffsetDateTime,plusSeconds(long seconds),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of seconds added.,"

plusSeconds
public OffsetDateTime plusSeconds(long seconds)
Returns a copy of this OffsetDateTime with the specified number of seconds added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the seconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusWeeks(long weeks),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of weeks added.,"

plusWeeks
public OffsetDateTime plusWeeks(long weeks)
Returns a copy of this OffsetDateTime with the specified number of weeks added.
 
 This method adds the specified amount in weeks to the days field incrementing
 the month and year fields as necessary to ensure the result remains valid.
 The result is only invalid if the maximum/minimum year is exceeded.
 
 For example, 2008-12-31 plus one week would result in 2009-01-07.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,plusYears(long years),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified number of years added.,"

plusYears
public OffsetDateTime plusYears(long years)
Returns a copy of this OffsetDateTime with the specified number of years added.
 
 This method adds the specified amount to the years field in three steps:
 
Add the input years to the year field
Check if the resulting date would be invalid
Adjust the day-of-month to the last valid day if necessary


 For example, 2008-02-29 (leap year) plus one year would result in the
 invalid date 2009-02-29 (standard year). Instead of returning an invalid
 result, the last valid day of the month, 2009-02-28, is selected instead.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to add, may be negative
Returns:
an OffsetDateTime based on this date-time with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,query(TemporalQuery<R> query),<R> R,Queries this date-time using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this date-time using the specified query.
 
 This queries this date-time using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
OffsetDateTime,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This date-time is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
OffsetDateTime,timeLineOrder(),static Comparator<OffsetDateTime>,Gets a comparator that compares two OffsetDateTime instances based solely on the instant.,"

timeLineOrder
public static Comparator<OffsetDateTime> timeLineOrder()
Gets a comparator that compares two OffsetDateTime instances
 based solely on the instant.
 
 This method differs from the comparison in compareTo(java.time.OffsetDateTime) in that it
 only compares the underlying instant.

Returns:
a comparator that compares in time-line order
See Also:
isAfter(java.time.OffsetDateTime), 
isBefore(java.time.OffsetDateTime), 
isEqual(java.time.OffsetDateTime)


"
OffsetDateTime,toEpochSecond(),long,Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.,"

toEpochSecond
public long toEpochSecond()
Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.
 
 This allows this date-time to be converted to a value of the
 epoch-seconds field. This is primarily
 intended for low-level conversions rather than general application usage.

Returns:
the number of seconds from the epoch of 1970-01-01T00:00:00Z


"
OffsetDateTime,toInstant(),Instant,Converts this date-time to an Instant.,"

toInstant
public Instant toInstant()
Converts this date-time to an Instant.
 
 This returns an Instant representing the same point on the
 time-line as this date-time.

Returns:
an Instant representing the same instant, not null


"
OffsetDateTime,toLocalDate(),LocalDate,Gets the LocalDate part of this date-time.,"

toLocalDate
public LocalDate toLocalDate()
Gets the LocalDate part of this date-time.
 
 This returns a LocalDate with the same year, month and day
 as this date-time.

Returns:
the date part of this date-time, not null


"
OffsetDateTime,toLocalDateTime(),LocalDateTime,Gets the LocalDateTime part of this date-time.,"

toLocalDateTime
public LocalDateTime toLocalDateTime()
Gets the LocalDateTime part of this date-time.
 
 This returns a LocalDateTime with the same year, month, day and time
 as this date-time.

Returns:
the local date-time part of this date-time, not null


"
OffsetDateTime,toLocalTime(),LocalTime,Gets the LocalTime part of this date-time.,"

toLocalTime
public LocalTime toLocalTime()
Gets the LocalTime part of this date-time.
 
 This returns a LocalTime with the same hour, minute, second and
 nanosecond as this date-time.

Returns:
the time part of this date-time, not null


"
OffsetDateTime,toOffsetTime(),OffsetTime,Converts this date-time to an OffsetTime.,"

toOffsetTime
public OffsetTime toOffsetTime()
Converts this date-time to an OffsetTime.
 
 This returns an offset time with the same local time and offset.

Returns:
an OffsetTime representing the time and offset, not null


"
OffsetDateTime,toString(),String,"Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00.","

toString
public String toString()
Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00.
 
 The output will be one of the following ISO-8601 formats:
 
uuuu-MM-dd'T'HH:mmXXXXX
uuuu-MM-dd'T'HH:mm:ssXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSSSSXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSXXXXX

 The format used will be the shortest that outputs the full value of
 the time where the omitted parts are implied to be zero.

Overrides:
toString in class Object
Returns:
a string representation of this date-time, not null


"
OffsetDateTime,toZonedDateTime(),ZonedDateTime,Converts this date-time to a ZonedDateTime using the offset as the zone ID.,"

toZonedDateTime
public ZonedDateTime toZonedDateTime()
Converts this date-time to a ZonedDateTime using the offset as the zone ID.
 
 This creates the simplest possible ZonedDateTime using the offset
 as the zone ID.
 
 To control the time-zone used, see atZoneSameInstant(ZoneId) and
 atZoneSimilarLocal(ZoneId).

Returns:
a zoned date-time representing the same local date-time and offset, not null


"
OffsetDateTime,truncatedTo(TemporalUnit unit),OffsetDateTime,Returns a copy of this OffsetDateTime with the time truncated.,"

truncatedTo
public OffsetDateTime truncatedTo(TemporalUnit unit)
Returns a copy of this OffsetDateTime with the time truncated.
 
 Truncation returns a copy of the original date-time with fields
 smaller than the specified unit set to zero.
 For example, truncating with the minutes unit
 will set the second-of-minute and nano-of-second field to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
an OffsetDateTime based on this date-time with the time truncated, not null
Throws:
DateTimeException - if unable to truncate
UnsupportedTemporalTypeException - if the unit is not supported


"
OffsetDateTime,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another date-time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date-time in terms of the specified unit.
 
 This calculates the amount of time between two OffsetDateTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date-time.
 The result will be negative if the end is before the start.
 For example, the amount in days between two date-times can be calculated
 using startDateTime.until(endDateTime, DAYS).
 
 The Temporal passed to this method is converted to a
 OffsetDateTime using from(TemporalAccessor).
 If the offset differs between the two date-times, the specified
 end date-time is normalized to have the same offset as this date-time.
 
 The calculation returns a whole number, representing the number of
 complete units between the two date-times.
 For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
 will only be one month as it is one minute short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS, DAYS,
 WEEKS, MONTHS, YEARS, DECADES,
 CENTURIES, MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to an OffsetDateTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date-time and the end date-time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to an OffsetDateTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,with(TemporalAdjuster adjuster),OffsetDateTime,Returns an adjusted copy of this date-time.,"

with
public OffsetDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns an OffsetDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = offsetDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate, LocalTime and ZoneOffset implement
 TemporalAdjuster, thus this method can be used to change the date, time or offset:
 
  result = offsetDateTime.with(date);
  result = offsetDateTime.with(time);
  result = offsetDateTime.with(offset);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an OffsetDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,"with(TemporalField field, long newValue)",OffsetDateTime,Returns a copy of this date-time with the specified field set to a new value.,"

with
public OffsetDateTime with(TemporalField field,
                           long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns an OffsetDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 
 The INSTANT_SECONDS field will return a date-time with the specified instant.
 The offset and nano-of-second are unchanged.
 If the new instant value is outside the valid range then a DateTimeException will be thrown.
 
 The OFFSET_SECONDS field will return a date-time with the specified offset.
 The local date-time is unaltered. If the new offset value is outside the valid range
 then a DateTimeException will be thrown.
 
 The other supported fields will behave as per
 the matching method on LocalDateTime.
 In this case, the offset is not part of the calculation and will be unchanged.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
an OffsetDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetDateTime,withDayOfMonth(int dayOfMonth),OffsetDateTime,Returns a copy of this OffsetDateTime with the day-of-month altered.,"

withDayOfMonth
public OffsetDateTime withDayOfMonth(int dayOfMonth)
Returns a copy of this OffsetDateTime with the day-of-month altered.
 
 If the resulting OffsetDateTime is invalid, an exception is thrown.
 The time and offset do not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
an OffsetDateTime based on this date-time with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
OffsetDateTime,withDayOfYear(int dayOfYear),OffsetDateTime,Returns a copy of this OffsetDateTime with the day-of-year altered.,"

withDayOfYear
public OffsetDateTime withDayOfYear(int dayOfYear)
Returns a copy of this OffsetDateTime with the day-of-year altered.
 
 The time and offset do not affect the calculation and will be the same in the result.
 If the resulting OffsetDateTime is invalid, an exception is thrown.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
an OffsetDateTime based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
OffsetDateTime,withHour(int hour),OffsetDateTime,Returns a copy of this OffsetDateTime with the hour-of-day altered.,"

withHour
public OffsetDateTime withHour(int hour)
Returns a copy of this OffsetDateTime with the hour-of-day altered.
 
 The date and offset do not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
an OffsetDateTime based on this date-time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
OffsetDateTime,withMinute(int minute),OffsetDateTime,Returns a copy of this OffsetDateTime with the minute-of-hour altered.,"

withMinute
public OffsetDateTime withMinute(int minute)
Returns a copy of this OffsetDateTime with the minute-of-hour altered.
 
 The date and offset do not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
an OffsetDateTime based on this date-time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
OffsetDateTime,withMonth(int month),OffsetDateTime,Returns a copy of this OffsetDateTime with the month-of-year altered.,"

withMonth
public OffsetDateTime withMonth(int month)
Returns a copy of this OffsetDateTime with the month-of-year altered.
 
 The time and offset do not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
an OffsetDateTime based on this date-time with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
OffsetDateTime,withNano(int nanoOfSecond),OffsetDateTime,Returns a copy of this OffsetDateTime with the nano-of-second altered.,"

withNano
public OffsetDateTime withNano(int nanoOfSecond)
Returns a copy of this OffsetDateTime with the nano-of-second altered.
 
 The date and offset do not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
an OffsetDateTime based on this date-time with the requested nanosecond, not null
Throws:
DateTimeException - if the nano value is invalid


"
OffsetDateTime,withOffsetSameInstant(ZoneOffset offset),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant.,"

withOffsetSameInstant
public OffsetDateTime withOffsetSameInstant(ZoneOffset offset)
Returns a copy of this OffsetDateTime with the specified offset ensuring
 that the result is at the same instant.
 
 This method returns an object with the specified ZoneOffset and a LocalDateTime
 adjusted by the difference between the two offsets.
 This will result in the old and new objects representing the same instant.
 This is useful for finding the local time in a different offset.
 For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is
 +03:00, then this method will return 2007-12-03T11:30+03:00.
 
 To change the offset without adjusting the local time use withOffsetSameLocal(java.time.ZoneOffset).
 
 This instance is immutable and unaffected by this method call.

Parameters:
offset - the zone offset to change to, not null
Returns:
an OffsetDateTime based on this date-time with the requested offset, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
OffsetDateTime,withOffsetSameLocal(ZoneOffset offset),OffsetDateTime,Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time.,"

withOffsetSameLocal
public OffsetDateTime withOffsetSameLocal(ZoneOffset offset)
Returns a copy of this OffsetDateTime with the specified offset ensuring
 that the result has the same local date-time.
 
 This method returns an object with the same LocalDateTime and the specified ZoneOffset.
 No calculation is needed or performed.
 For example, if this time represents 2007-12-03T10:30+02:00 and the offset specified is
 +03:00, then this method will return 2007-12-03T10:30+03:00.
 
 To take into account the difference between the offsets, and adjust the time fields,
 use withOffsetSameInstant(java.time.ZoneOffset).
 
 This instance is immutable and unaffected by this method call.

Parameters:
offset - the zone offset to change to, not null
Returns:
an OffsetDateTime based on this date-time with the requested offset, not null


"
OffsetDateTime,withSecond(int second),OffsetDateTime,Returns a copy of this OffsetDateTime with the second-of-minute altered.,"

withSecond
public OffsetDateTime withSecond(int second)
Returns a copy of this OffsetDateTime with the second-of-minute altered.
 
 The date and offset do not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
an OffsetDateTime based on this date-time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
OffsetDateTime,withYear(int year),OffsetDateTime,Returns a copy of this OffsetDateTime with the year altered.,"

withYear
public OffsetDateTime withYear(int year)
Returns a copy of this OffsetDateTime with the year altered.
 
 The time and offset do not affect the calculation and will be the same in the result.
 If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
an OffsetDateTime based on this date-time with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
OffsetTime,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have the same offset and time as this object.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same offset and time
 as this object.
 
 This returns a temporal object of the same observable type as the input
 with the offset and time changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 twice, passing ChronoField.NANO_OF_DAY and
 ChronoField.OFFSET_SECONDS as the fields.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisOffsetTime.adjustInto(temporal);
   temporal = temporal.with(thisOffsetTime);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
OffsetTime,atDate(LocalDate date),OffsetDateTime,Combines this time with a date to create an OffsetDateTime.,"

atDate
public OffsetDateTime atDate(LocalDate date)
Combines this time with a date to create an OffsetDateTime.
 
 This returns an OffsetDateTime formed from this time and the specified date.
 All possible combinations of date and time are valid.

Parameters:
date - the date to combine with, not null
Returns:
the offset date-time formed from this time and the specified date, not null


"
OffsetTime,compareTo(OffsetTime other),int,Compares this OffsetTime to another time.,"

compareTo
public int compareTo(OffsetTime other)
Compares this OffsetTime to another time.
 
 The comparison is based first on the UTC equivalent instant, then on the local time.
 It is ""consistent with equals"", as defined by Comparable.
 
 For example, the following is the comparator order:
 
10:30+01:00
11:00+01:00
12:00+02:00
11:30+01:00
12:00+01:00
12:30+01:00

 Values #2 and #3 represent the same instant on the time-line.
 When two values represent the same instant, the local time is compared
 to distinguish them. This step is needed to make the ordering
 consistent with equals().
 
 To compare the underlying local time of two TemporalAccessor instances,
 use ChronoField.NANO_OF_DAY as a comparator.

Specified by:
compareTo in interface Comparable<OffsetTime>
Parameters:
other - the other time to compare to, not null
Returns:
the comparator value, negative if less, positive if greater
Throws:
NullPointerException - if other is null


"
OffsetTime,equals(Object obj),boolean,Checks if this time is equal to another time.,"

equals
public boolean equals(Object obj)
Checks if this time is equal to another time.
 
 The comparison is based on the local-time and the offset.
 To compare for the same instant on the time-line, use isEqual(OffsetTime).
 
 Only objects of type OffsetTime are compared, other types return false.
 To compare the underlying local time of two TemporalAccessor instances,
 use ChronoField.NANO_OF_DAY as a comparator.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other time
See Also:
Object.hashCode(), 
HashMap


"
OffsetTime,format(DateTimeFormatter formatter),String,Formats this time using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this time using the specified formatter.
 
 This time will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted time string, not null
Throws:
DateTimeException - if an error occurs during printing


"
OffsetTime,from(TemporalAccessor temporal),static OffsetTime,Obtains an instance of OffsetTime from a temporal object.,"

from
public static OffsetTime from(TemporalAccessor temporal)
Obtains an instance of OffsetTime from a temporal object.
 
 This obtains an offset time based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of OffsetTime.
 
 The conversion extracts and combines the ZoneOffset and the
 LocalTime from the temporal object.
 Implementations are permitted to perform optimizations such as accessing
 those fields that are equivalent to the relevant objects.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, OffsetTime::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the offset time, not null
Throws:
DateTimeException - if unable to convert to an OffsetTime


"
OffsetTime,get(TemporalField field),int,Gets the value of the specified field from this time as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this time as an int.
 
 This queries this time for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this time, except NANO_OF_DAY and MICRO_OF_DAY
 which are too large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
OffsetTime,getHour(),int,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
OffsetTime,getLong(TemporalField field),long,Gets the value of the specified field from this time as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this time as a long.
 
 This queries this time for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetTime,getMinute(),int,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
OffsetTime,getNano(),int,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
OffsetTime,getOffset(),ZoneOffset,"Gets the zone offset, such as '+01:00'.","

getOffset
public ZoneOffset getOffset()
Gets the zone offset, such as '+01:00'.
 
 This is the offset of the local time from UTC/Greenwich.

Returns:
the zone offset, not null


"
OffsetTime,getSecond(),int,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
OffsetTime,hashCode(),int,A hash code for this time.,"

hashCode
public int hashCode()
A hash code for this time.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
OffsetTime,isAfter(OffsetTime other),boolean,Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date.,"

isAfter
public boolean isAfter(OffsetTime other)
Checks if the instant of this OffsetTime is after that of the
 specified time applying both times to a common date.
 
 This method differs from the comparison in compareTo(java.time.OffsetTime) in that it
 only compares the instant of the time. This is equivalent to converting both
 times to an instant using the same date and comparing the instants.

Parameters:
other - the other time to compare to, not null
Returns:
true if this is after the instant of the specified time


"
OffsetTime,isBefore(OffsetTime other),boolean,Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date.,"

isBefore
public boolean isBefore(OffsetTime other)
Checks if the instant of this OffsetTime is before that of the
 specified time applying both times to a common date.
 
 This method differs from the comparison in compareTo(java.time.OffsetTime) in that it
 only compares the instant of the time. This is equivalent to converting both
 times to an instant using the same date and comparing the instants.

Parameters:
other - the other time to compare to, not null
Returns:
true if this is before the instant of the specified time


"
OffsetTime,isEqual(OffsetTime other),boolean,Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date.,"

isEqual
public boolean isEqual(OffsetTime other)
Checks if the instant of this OffsetTime is equal to that of the
 specified time applying both times to a common date.
 
 This method differs from the comparison in compareTo(java.time.OffsetTime) and equals(java.lang.Object)
 in that it only compares the instant of the time. This is equivalent to converting both
 times to an instant using the same date and comparing the instants.

Parameters:
other - the other time to compare to, not null
Returns:
true if this is equal to the instant of the specified time


"
OffsetTime,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this time can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
OFFSET_SECONDS

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this time, false if not


"
OffsetTime,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this offset-time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
OffsetTime,"minus(long amountToSubtract, TemporalUnit unit)",OffsetTime,Returns a copy of this time with the specified amount subtracted.,"

minus
public OffsetTime minus(long amountToSubtract,
                        TemporalUnit unit)
Returns a copy of this time with the specified amount subtracted.
 
 This returns an OffsetTime, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
an OffsetTime based on this time with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetTime,minus(TemporalAmount amountToSubtract),OffsetTime,Returns a copy of this time with the specified amount subtracted.,"

minus
public OffsetTime minus(TemporalAmount amountToSubtract)
Returns a copy of this time with the specified amount subtracted.
 
 This returns an OffsetTime, based on this one, with the specified amount subtracted.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
an OffsetTime based on this time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetTime,minusHours(long hours),OffsetTime,Returns a copy of this OffsetTime with the specified number of hours subtracted.,"

minusHours
public OffsetTime minusHours(long hours)
Returns a copy of this OffsetTime with the specified number of hours subtracted.
 
 This subtracts the specified number of hours from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
an OffsetTime based on this time with the hours subtracted, not null


"
OffsetTime,minusMinutes(long minutes),OffsetTime,Returns a copy of this OffsetTime with the specified number of minutes subtracted.,"

minusMinutes
public OffsetTime minusMinutes(long minutes)
Returns a copy of this OffsetTime with the specified number of minutes subtracted.
 
 This subtracts the specified number of minutes from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
an OffsetTime based on this time with the minutes subtracted, not null


"
OffsetTime,minusNanos(long nanos),OffsetTime,Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted.,"

minusNanos
public OffsetTime minusNanos(long nanos)
Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted.
 
 This subtracts the specified number of nanoseconds from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
an OffsetTime based on this time with the nanoseconds subtracted, not null


"
OffsetTime,minusSeconds(long seconds),OffsetTime,Returns a copy of this OffsetTime with the specified number of seconds subtracted.,"

minusSeconds
public OffsetTime minusSeconds(long seconds)
Returns a copy of this OffsetTime with the specified number of seconds subtracted.
 
 This subtracts the specified number of seconds from this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
an OffsetTime based on this time with the seconds subtracted, not null


"
OffsetTime,now(),static OffsetTime,Obtains the current time from the system clock in the default time-zone.,"

now
public static OffsetTime now()
Obtains the current time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current time.
 The offset will be calculated from the time-zone in the clock.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current time using the system clock and default time-zone, not null


"
OffsetTime,now(Clock clock),static OffsetTime,Obtains the current time from the specified clock.,"

now
public static OffsetTime now(Clock clock)
Obtains the current time from the specified clock.
 
 This will query the specified clock to obtain the current time.
 The offset will be calculated from the time-zone in the clock.
 
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current time, not null


"
OffsetTime,now(ZoneId zone),static OffsetTime,Obtains the current time from the system clock in the specified time-zone.,"

now
public static OffsetTime now(ZoneId zone)
Obtains the current time from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current time.
 Specifying the time-zone avoids dependence on the default time-zone.
 The offset will be calculated from the specified time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current time using the system clock, not null


"
OffsetTime,"of(int hour, int minute, int second, int nanoOfSecond, ZoneOffset offset)",static OffsetTime,"Obtains an instance of OffsetTime from an hour, minute, second and nanosecond.","

of
public static OffsetTime of(int hour,
                            int minute,
                            int second,
                            int nanoOfSecond,
                            ZoneOffset offset)
Obtains an instance of OffsetTime from an hour, minute, second and nanosecond.
 
 This creates an offset time with the four specified fields.
 
 This method exists primarily for writing test cases.
 Non test-code will typically use other methods to create an offset time.
 LocalTime has two additional convenience variants of the
 equivalent factory method taking fewer arguments.
 They are not provided here to reduce the footprint of the API.

Parameters:
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
offset - the zone offset, not null
Returns:
the offset time, not null
Throws:
DateTimeException - if the value of any field is out of range


"
OffsetTime,"of(LocalTime time, ZoneOffset offset)",static OffsetTime,Obtains an instance of OffsetTime from a local time and an offset.,"

of
public static OffsetTime of(LocalTime time,
                            ZoneOffset offset)
Obtains an instance of OffsetTime from a local time and an offset.

Parameters:
time - the local time, not null
offset - the zone offset, not null
Returns:
the offset time, not null


"
OffsetTime,"ofInstant(Instant instant, ZoneId zone)",static OffsetTime,Obtains an instance of OffsetTime from an Instant and zone ID.,"

ofInstant
public static OffsetTime ofInstant(Instant instant,
                                   ZoneId zone)
Obtains an instance of OffsetTime from an Instant and zone ID.
 
 This creates an offset time with the same instant as that specified.
 Finding the offset from UTC/Greenwich is simple as there is only one valid
 offset for each instant.
 
 The date component of the instant is dropped during the conversion.
 This means that the conversion can never fail due to the instant being
 out of the valid range of dates.

Parameters:
instant - the instant to create the time from, not null
zone - the time-zone, which may be an offset, not null
Returns:
the offset time, not null


"
OffsetTime,parse(CharSequence text),static OffsetTime,Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00.,"

parse
public static OffsetTime parse(CharSequence text)
Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00.
 
 The string must represent a valid time and is parsed using
 DateTimeFormatter.ISO_OFFSET_TIME.

Parameters:
text - the text to parse such as ""10:15:30+01:00"", not null
Returns:
the parsed local time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
OffsetTime,"parse(CharSequence text, DateTimeFormatter formatter)",static OffsetTime,Obtains an instance of OffsetTime from a text string using a specific formatter.,"

parse
public static OffsetTime parse(CharSequence text,
                               DateTimeFormatter formatter)
Obtains an instance of OffsetTime from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a time.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed offset time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
OffsetTime,"plus(long amountToAdd, TemporalUnit unit)",OffsetTime,Returns a copy of this time with the specified amount added.,"

plus
public OffsetTime plus(long amountToAdd,
                       TemporalUnit unit)
Returns a copy of this time with the specified amount added.
 
 This returns an OffsetTime, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented by
 LocalTime.plus(long, TemporalUnit).
 The offset is not part of the calculation and will be unchanged in the result.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
an OffsetTime based on this time with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetTime,plus(TemporalAmount amountToAdd),OffsetTime,Returns a copy of this time with the specified amount added.,"

plus
public OffsetTime plus(TemporalAmount amountToAdd)
Returns a copy of this time with the specified amount added.
 
 This returns an OffsetTime, based on this one, with the specified amount added.
 The amount is typically Duration but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
an OffsetTime based on this time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetTime,plusHours(long hours),OffsetTime,Returns a copy of this OffsetTime with the specified number of hours added.,"

plusHours
public OffsetTime plusHours(long hours)
Returns a copy of this OffsetTime with the specified number of hours added.
 
 This adds the specified number of hours to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
an OffsetTime based on this time with the hours added, not null


"
OffsetTime,plusMinutes(long minutes),OffsetTime,Returns a copy of this OffsetTime with the specified number of minutes added.,"

plusMinutes
public OffsetTime plusMinutes(long minutes)
Returns a copy of this OffsetTime with the specified number of minutes added.
 
 This adds the specified number of minutes to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
an OffsetTime based on this time with the minutes added, not null


"
OffsetTime,plusNanos(long nanos),OffsetTime,Returns a copy of this OffsetTime with the specified number of nanoseconds added.,"

plusNanos
public OffsetTime plusNanos(long nanos)
Returns a copy of this OffsetTime with the specified number of nanoseconds added.
 
 This adds the specified number of nanoseconds to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
an OffsetTime based on this time with the nanoseconds added, not null


"
OffsetTime,plusSeconds(long seconds),OffsetTime,Returns a copy of this OffsetTime with the specified number of seconds added.,"

plusSeconds
public OffsetTime plusSeconds(long seconds)
Returns a copy of this OffsetTime with the specified number of seconds added.
 
 This adds the specified number of seconds to this time, returning a new time.
 The calculation wraps around midnight.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
an OffsetTime based on this time with the seconds added, not null


"
OffsetTime,query(TemporalQuery<R> query),<R> R,Queries this time using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this time using the specified query.
 
 This queries this time using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
OffsetTime,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This time is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
OffsetTime,toLocalTime(),LocalTime,Gets the LocalTime part of this date-time.,"

toLocalTime
public LocalTime toLocalTime()
Gets the LocalTime part of this date-time.
 
 This returns a LocalTime with the same hour, minute, second and
 nanosecond as this date-time.

Returns:
the time part of this date-time, not null


"
OffsetTime,toString(),String,"Outputs this time as a String, such as 10:15:30+01:00.","

toString
public String toString()
Outputs this time as a String, such as 10:15:30+01:00.
 
 The output will be one of the following ISO-8601 formats:
 
HH:mmXXXXX
HH:mm:ssXXXXX
HH:mm:ss.SSSXXXXX
HH:mm:ss.SSSSSSXXXXX
HH:mm:ss.SSSSSSSSSXXXXX

 The format used will be the shortest that outputs the full value of
 the time where the omitted parts are implied to be zero.

Overrides:
toString in class Object
Returns:
a string representation of this time, not null


"
OffsetTime,truncatedTo(TemporalUnit unit),OffsetTime,Returns a copy of this OffsetTime with the time truncated.,"

truncatedTo
public OffsetTime truncatedTo(TemporalUnit unit)
Returns a copy of this OffsetTime with the time truncated.
 
 Truncation returns a copy of the original time with fields
 smaller than the specified unit set to zero.
 For example, truncating with the minutes unit
 will set the second-of-minute and nano-of-second field to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
an OffsetTime based on this time with the time truncated, not null
Throws:
DateTimeException - if unable to truncate
UnsupportedTemporalTypeException - if the unit is not supported


"
OffsetTime,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another time in terms of the specified unit.
 
 This calculates the amount of time between two OffsetTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified time.
 The result will be negative if the end is before the start.
 For example, the amount in hours between two times can be calculated
 using startTime.until(endTime, HOURS).
 
 The Temporal passed to this method is converted to a
 OffsetTime using from(TemporalAccessor).
 If the offset differs between the two times, then the specified
 end time is normalized to have the same offset as this time.
 
 The calculation returns a whole number, representing the number of
 complete units between the two times.
 For example, the amount in hours between 11:30Z and 13:29Z will only
 be one hour as it is one minute short of two hours.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MINUTES);
   amount = MINUTES.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end time, exclusive, which is converted to an OffsetTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this time and the end time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to an OffsetTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetTime,with(TemporalAdjuster adjuster),OffsetTime,Returns an adjusted copy of this time.,"

with
public OffsetTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this time.
 
 This returns an OffsetTime, based on this one, with the time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the hour field.
 A more complex adjuster might set the time to the last hour of the day.
 
 The classes LocalTime and ZoneOffset implement TemporalAdjuster,
 thus this method can be used to change the time or offset:
 
  result = offsetTime.with(time);
  result = offsetTime.with(offset);
 

 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
an OffsetTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
OffsetTime,"with(TemporalField field, long newValue)",OffsetTime,Returns a copy of this time with the specified field set to a new value.,"

with
public OffsetTime with(TemporalField field,
                       long newValue)
Returns a copy of this time with the specified field set to a new value.
 
 This returns an OffsetTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the hour, minute or second.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 If the field is a ChronoField then the adjustment is implemented here.
 
 The OFFSET_SECONDS field will return a time with the specified offset.
 The local time is unaltered. If the new offset value is outside the valid range
 then a DateTimeException will be thrown.
 
 The other supported fields will behave as per
 the matching method on LocalTime.with(TemporalField, long) LocalTime}.
 In this case, the offset is not part of the calculation and will be unchanged.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
an OffsetTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
OffsetTime,withHour(int hour),OffsetTime,Returns a copy of this OffsetTime with the hour-of-day altered.,"

withHour
public OffsetTime withHour(int hour)
Returns a copy of this OffsetTime with the hour-of-day altered.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
an OffsetTime based on this time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
OffsetTime,withMinute(int minute),OffsetTime,Returns a copy of this OffsetTime with the minute-of-hour altered.,"

withMinute
public OffsetTime withMinute(int minute)
Returns a copy of this OffsetTime with the minute-of-hour altered.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
an OffsetTime based on this time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
OffsetTime,withNano(int nanoOfSecond),OffsetTime,Returns a copy of this OffsetTime with the nano-of-second altered.,"

withNano
public OffsetTime withNano(int nanoOfSecond)
Returns a copy of this OffsetTime with the nano-of-second altered.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
an OffsetTime based on this time with the requested nanosecond, not null
Throws:
DateTimeException - if the nanos value is invalid


"
OffsetTime,withOffsetSameInstant(ZoneOffset offset),OffsetTime,Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day.,"

withOffsetSameInstant
public OffsetTime withOffsetSameInstant(ZoneOffset offset)
Returns a copy of this OffsetTime with the specified offset ensuring
 that the result is at the same instant on an implied day.
 
 This method returns an object with the specified ZoneOffset and a LocalTime
 adjusted by the difference between the two offsets.
 This will result in the old and new objects representing the same instant on an implied day.
 This is useful for finding the local time in a different offset.
 For example, if this time represents 10:30+02:00 and the offset specified is
 +03:00, then this method will return 11:30+03:00.
 
 To change the offset without adjusting the local time use withOffsetSameLocal(java.time.ZoneOffset).
 
 This instance is immutable and unaffected by this method call.

Parameters:
offset - the zone offset to change to, not null
Returns:
an OffsetTime based on this time with the requested offset, not null


"
OffsetTime,withOffsetSameLocal(ZoneOffset offset),OffsetTime,Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time.,"

withOffsetSameLocal
public OffsetTime withOffsetSameLocal(ZoneOffset offset)
Returns a copy of this OffsetTime with the specified offset ensuring
 that the result has the same local time.
 
 This method returns an object with the same LocalTime and the specified ZoneOffset.
 No calculation is needed or performed.
 For example, if this time represents 10:30+02:00 and the offset specified is
 +03:00, then this method will return 10:30+03:00.
 
 To take into account the difference between the offsets, and adjust the time fields,
 use withOffsetSameInstant(java.time.ZoneOffset).
 
 This instance is immutable and unaffected by this method call.

Parameters:
offset - the zone offset to change to, not null
Returns:
an OffsetTime based on this time with the requested offset, not null


"
OffsetTime,withSecond(int second),OffsetTime,Returns a copy of this OffsetTime with the second-of-minute altered.,"

withSecond
public OffsetTime withSecond(int second)
Returns a copy of this OffsetTime with the second-of-minute altered.
 
 The offset does not affect the calculation and will be the same in the result.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
an OffsetTime based on this time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
Period,addTo(Temporal temporal),Temporal,Adds this period to the specified temporal object.,"

addTo
public Temporal addTo(Temporal temporal)
Adds this period to the specified temporal object.
 
 This returns a temporal object of the same observable type as the input
 with this period added.
 If the temporal has a chronology, it must be the ISO chronology.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.plus(TemporalAmount).
 
   // these two lines are equivalent, but the second approach is recommended
   dateTime = thisPeriod.addTo(dateTime);
   dateTime = dateTime.plus(thisPeriod);
 

 The calculation operates as follows.
 First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
 Second, if the months are zero, the years are added if non-zero, otherwise
 the combination of years and months is added if non-zero.
 Finally, any days are added.
 
 This approach ensures that a partial period can be added to a partial date.
 For example, a period of years and/or months can be added to a YearMonth,
 but a period including days cannot.
 The approach also adds years and months together when necessary, which ensures
 correct behaviour at the end of the month.
 
 This instance is immutable and unaffected by this method call.

Specified by:
addTo in interface ChronoPeriod
Specified by:
addTo in interface TemporalAmount
Parameters:
temporal - the temporal object to adjust, not null
Returns:
an object of the same type with the adjustment made, not null
Throws:
DateTimeException - if unable to add
ArithmeticException - if numeric overflow occurs


"
Period,"between(LocalDate startDateInclusive, LocalDate endDateExclusive)",static Period,"Obtains a Period consisting of the number of years, months, and days between two dates.","

between
public static Period between(LocalDate startDateInclusive,
                             LocalDate endDateExclusive)
Obtains a Period consisting of the number of years, months,
 and days between two dates.
 
 The start date is included, but the end date is not.
 The period is calculated by removing complete months, then calculating
 the remaining number of days, adjusting to ensure that both have the same sign.
 The number of months is then split into years and months based on a 12 month year.
 A month is considered if the end day-of-month is greater than or equal to the start day-of-month.
 For example, from 2010-01-15 to 2011-03-18 is one year, two months and three days.
 
 The result of this method can be a negative period if the end is before the start.
 The negative sign will be the same in each of year, month and day.

Parameters:
startDateInclusive - the start date, inclusive, not null
endDateExclusive - the end date, exclusive, not null
Returns:
the period between this date and the end date, not null
See Also:
ChronoLocalDate.until(ChronoLocalDate)


"
Period,equals(Object obj),boolean,Checks if this period is equal to another period.,"

equals
public boolean equals(Object obj)
Checks if this period is equal to another period.
 
 The comparison is based on the type Period and each of the three amounts.
 To be equal, the years, months and days units must be individually equal.
 Note that this means that a period of ""15 Months"" is not equal to a period
 of ""1 Year and 3 Months"".

Specified by:
equals in interface ChronoPeriod
Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other period
See Also:
Object.hashCode(), 
HashMap


"
Period,from(TemporalAmount amount),static Period,Obtains an instance of Period from a temporal amount.,"

from
public static Period from(TemporalAmount amount)
Obtains an instance of Period from a temporal amount.
 
 This obtains a period based on the specified amount.
 A TemporalAmount represents an  amount of time, which may be
 date-based or time-based, which this factory extracts to a Period.
 
 The conversion loops around the set of units from the amount and uses
 the YEARS, MONTHS
 and DAYS units to create a period.
 If any other units are found then an exception is thrown.
 
 If the amount is a ChronoPeriod then it must use the ISO chronology.

Parameters:
amount - the temporal amount to convert, not null
Returns:
the equivalent period, not null
Throws:
DateTimeException - if unable to convert to a Period
ArithmeticException - if the amount of years, months or days exceeds an int


"
Period,get(TemporalUnit unit),long,Gets the value of the requested unit.,"

get
public long get(TemporalUnit unit)
Gets the value of the requested unit.
 
 This returns a value for each of the three supported units,
 YEARS, MONTHS and
 DAYS.
 All other units throw an exception.

Specified by:
get in interface ChronoPeriod
Specified by:
get in interface TemporalAmount
Parameters:
unit - the TemporalUnit for which to return the value
Returns:
the long value of the unit
Throws:
DateTimeException - if the unit is not supported
UnsupportedTemporalTypeException - if the unit is not supported


"
Period,getChronology(),IsoChronology,"Gets the chronology of this period, which is the ISO calendar system.","

getChronology
public IsoChronology getChronology()
Gets the chronology of this period, which is the ISO calendar system.
 
 The Chronology represents the calendar system in use.
 The ISO-8601 calendar system is the modern civil calendar system used today
 in most of the world. It is equivalent to the proleptic Gregorian calendar
 system, in which today's rules for leap years are applied for all time.

Specified by:
getChronology in interface ChronoPeriod
Returns:
the ISO chronology, not null


"
Period,getDays(),int,Gets the amount of days of this period.,"

getDays
public int getDays()
Gets the amount of days of this period.
 
 This returns the days unit.

Returns:
the amount of days of this period, may be negative


"
Period,getMonths(),int,Gets the amount of months of this period.,"

getMonths
public int getMonths()
Gets the amount of months of this period.
 
 This returns the months unit.
 
 The months unit is not automatically normalized with the years unit.
 This means that a period of ""15 months"" is different to a period
 of ""1 year and 3 months"".

Returns:
the amount of months of this period, may be negative


"
Period,getUnits(),List<TemporalUnit>,Gets the set of units supported by this period.,"

getUnits
public List<TemporalUnit> getUnits()
Gets the set of units supported by this period.
 
 The supported units are YEARS,
 MONTHS and DAYS.
 They are returned in the order years, months, days.
 
 This set can be used in conjunction with get(TemporalUnit)
 to access the entire state of the period.

Specified by:
getUnits in interface ChronoPeriod
Specified by:
getUnits in interface TemporalAmount
Returns:
a list containing the years, months and days units, not null


"
Period,getYears(),int,Gets the amount of years of this period.,"

getYears
public int getYears()
Gets the amount of years of this period.
 
 This returns the years unit.
 
 The months unit is not automatically normalized with the years unit.
 This means that a period of ""15 months"" is different to a period
 of ""1 year and 3 months"".

Returns:
the amount of years of this period, may be negative


"
Period,hashCode(),int,A hash code for this period.,"

hashCode
public int hashCode()
A hash code for this period.

Specified by:
hashCode in interface ChronoPeriod
Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Period,isNegative(),boolean,Checks if any of the three units of this period are negative.,"

isNegative
public boolean isNegative()
Checks if any of the three units of this period are negative.
 
 This checks whether the years, months or days units are less than zero.

Specified by:
isNegative in interface ChronoPeriod
Returns:
true if any unit of this period is negative


"
Period,isZero(),boolean,Checks if all three units of this period are zero.,"

isZero
public boolean isZero()
Checks if all three units of this period are zero.
 
 A zero period has the value zero for the years, months and days units.

Specified by:
isZero in interface ChronoPeriod
Returns:
true if this period is zero-length


"
Period,minus(TemporalAmount amountToSubtract),Period,Returns a copy of this period with the specified period subtracted.,"

minus
public Period minus(TemporalAmount amountToSubtract)
Returns a copy of this period with the specified period subtracted.
 
 This operates separately on the years, months and days.
 No normalization is performed.
 
 For example, ""1 year, 6 months and 3 days"" minus ""2 years, 2 months and 2 days""
 returns ""-1 years, 4 months and 1 day"".
 
 The specified amount is typically an instance of Period.
 Other types are interpreted using from(TemporalAmount).
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoPeriod
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a Period based on this period with the requested period subtracted, not null
Throws:
DateTimeException - if the specified amount has a non-ISO chronology or
  contains an invalid unit
ArithmeticException - if numeric overflow occurs


"
Period,minusDays(long daysToSubtract),Period,Returns a copy of this period with the specified days subtracted.,"

minusDays
public Period minusDays(long daysToSubtract)
Returns a copy of this period with the specified days subtracted.
 
 This subtracts the amount from the days unit in a copy of this period.
 The years and months units are unaffected.
 For example, ""1 year, 6 months and 3 days"" minus 2 days returns ""1 year, 6 months and 1 day"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToSubtract - the months to subtract, positive or negative
Returns:
a Period based on this period with the specified days subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,minusMonths(long monthsToSubtract),Period,Returns a copy of this period with the specified months subtracted.,"

minusMonths
public Period minusMonths(long monthsToSubtract)
Returns a copy of this period with the specified months subtracted.
 
 This subtracts the amount from the months unit in a copy of this period.
 The years and days units are unaffected.
 For example, ""1 year, 6 months and 3 days"" minus 2 months returns ""1 year, 4 months and 3 days"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToSubtract - the years to subtract, positive or negative
Returns:
a Period based on this period with the specified months subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,minusYears(long yearsToSubtract),Period,Returns a copy of this period with the specified years subtracted.,"

minusYears
public Period minusYears(long yearsToSubtract)
Returns a copy of this period with the specified years subtracted.
 
 This subtracts the amount from the years unit in a copy of this period.
 The months and days units are unaffected.
 For example, ""1 year, 6 months and 3 days"" minus 2 years returns ""-1 years, 6 months and 3 days"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToSubtract - the years to subtract, positive or negative
Returns:
a Period based on this period with the specified years subtracted, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,multipliedBy(int scalar),Period,Returns a new instance with each element in this period multiplied by the specified scalar.,"

multipliedBy
public Period multipliedBy(int scalar)
Returns a new instance with each element in this period multiplied
 by the specified scalar.
 
 This returns a period with each of the years, months and days units
 individually multiplied.
 For example, a period of ""2 years, -3 months and 4 days"" multiplied by
 3 will return ""6 years, -9 months and 12 days"".
 No normalization is performed.

Specified by:
multipliedBy in interface ChronoPeriod
Parameters:
scalar - the scalar to multiply by, not null
Returns:
a Period based on this period with the amounts multiplied by the scalar, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,negated(),Period,Returns a new instance with each amount in this period negated.,"

negated
public Period negated()
Returns a new instance with each amount in this period negated.
 
 This returns a period with each of the years, months and days units
 individually negated.
 For example, a period of ""2 years, -3 months and 4 days"" will be
 negated to ""-2 years, 3 months and -4 days"".
 No normalization is performed.

Specified by:
negated in interface ChronoPeriod
Returns:
a Period based on this period with the amounts negated, not null
Throws:
ArithmeticException - if numeric overflow occurs, which only happens if
  one of the units has the value Long.MIN_VALUE


"
Period,normalized(),Period,Returns a copy of this period with the years and months normalized.,"

normalized
public Period normalized()
Returns a copy of this period with the years and months normalized.
 
 This normalizes the years and months units, leaving the days unit unchanged.
 The months unit is adjusted to have an absolute value less than 11,
 with the years unit being adjusted to compensate. For example, a period of
 ""1 Year and 15 months"" will be normalized to ""2 years and 3 months"".
 
 The sign of the years and months units will be the same after normalization.
 For example, a period of ""1 year and -25 months"" will be normalized to
 ""-1 year and -1 month"".
 
 This instance is immutable and unaffected by this method call.

Specified by:
normalized in interface ChronoPeriod
Returns:
a Period based on this period with excess months normalized to years, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,"of(int years, int months, int days)",static Period,"Obtains a Period representing a number of years, months and days.","

of
public static Period of(int years,
                        int months,
                        int days)
Obtains a Period representing a number of years, months and days.
 
 This creates an instance based on years, months and days.

Parameters:
years - the amount of years, may be negative
months - the amount of months, may be negative
days - the amount of days, may be negative
Returns:
the period of years, months and days, not null


"
Period,ofDays(int days),static Period,Obtains a Period representing a number of days.,"

ofDays
public static Period ofDays(int days)
Obtains a Period representing a number of days.
 
 The resulting period will have the specified days.
 The years and months units will be zero.

Parameters:
days - the number of days, positive or negative
Returns:
the period of days, not null


"
Period,ofMonths(int months),static Period,Obtains a Period representing a number of months.,"

ofMonths
public static Period ofMonths(int months)
Obtains a Period representing a number of months.
 
 The resulting period will have the specified months.
 The years and days units will be zero.

Parameters:
months - the number of months, positive or negative
Returns:
the period of months, not null


"
Period,ofWeeks(int weeks),static Period,Obtains a Period representing a number of weeks.,"

ofWeeks
public static Period ofWeeks(int weeks)
Obtains a Period representing a number of weeks.
 
 The resulting period will be day-based, with the amount of days
 equal to the number of weeks multiplied by 7.
 The years and months units will be zero.

Parameters:
weeks - the number of weeks, positive or negative
Returns:
the period, with the input weeks converted to days, not null


"
Period,ofYears(int years),static Period,Obtains a Period representing a number of years.,"

ofYears
public static Period ofYears(int years)
Obtains a Period representing a number of years.
 
 The resulting period will have the specified years.
 The months and days units will be zero.

Parameters:
years - the number of years, positive or negative
Returns:
the period of years, not null


"
Period,parse(CharSequence text),static Period,Obtains a Period from a text string such as PnYnMnD.,"

parse
public static Period parse(CharSequence text)
Obtains a Period from a text string such as PnYnMnD.
 
 This will parse the string produced by toString() which is
 based on the ISO-8601 period formats PnYnMnD and PnW.
 
 The string starts with an optional sign, denoted by the ASCII negative
 or positive symbol. If negative, the whole period is negated.
 The ASCII letter ""P"" is next in upper or lower case.
 There are then four sections, each consisting of a number and a suffix.
 At least one of the four sections must be present.
 The sections have suffixes in ASCII of ""Y"", ""M"", ""W"" and ""D"" for
 years, months, weeks and days, accepted in upper or lower case.
 The suffixes must occur in order.
 The number part of each section must consist of ASCII digits.
 The number may be prefixed by the ASCII negative or positive symbol.
 The number must parse to an int.
 
 The leading plus/minus sign, and negative values for other units are
 not part of the ISO-8601 standard. In addition, ISO-8601 does not
 permit mixing between the PnYnMnD and PnW formats.
 Any week-based input is multiplied by 7 and treated as a number of days.
 
 For example, the following are valid inputs:
 
   ""P2Y""             -- Period.ofYears(2)
   ""P3M""             -- Period.ofMonths(3)
   ""P4W""             -- Period.ofWeeks(4)
   ""P5D""             -- Period.ofDays(5)
   ""P1Y2M3D""         -- Period.of(1, 2, 3)
   ""P1Y2M3W4D""       -- Period.of(1, 2, 25)
   ""P-1Y2M""          -- Period.of(-1, 2, 0)
   ""-P1Y2M""          -- Period.of(-1, -2, 0)
 

Parameters:
text - the text to parse, not null
Returns:
the parsed period, not null
Throws:
DateTimeParseException - if the text cannot be parsed to a period


"
Period,plus(TemporalAmount amountToAdd),Period,Returns a copy of this period with the specified period added.,"

plus
public Period plus(TemporalAmount amountToAdd)
Returns a copy of this period with the specified period added.
 
 This operates separately on the years, months and days.
 No normalization is performed.
 
 For example, ""1 year, 6 months and 3 days"" plus ""2 years, 2 months and 2 days""
 returns ""3 years, 8 months and 5 days"".
 
 The specified amount is typically an instance of Period.
 Other types are interpreted using from(TemporalAmount).
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoPeriod
Parameters:
amountToAdd - the amount to add, not null
Returns:
a Period based on this period with the requested period added, not null
Throws:
DateTimeException - if the specified amount has a non-ISO chronology or
  contains an invalid unit
ArithmeticException - if numeric overflow occurs


"
Period,plusDays(long daysToAdd),Period,Returns a copy of this period with the specified days added.,"

plusDays
public Period plusDays(long daysToAdd)
Returns a copy of this period with the specified days added.
 
 This adds the amount to the days unit in a copy of this period.
 The years and months units are unaffected.
 For example, ""1 year, 6 months and 3 days"" plus 2 days returns ""1 year, 6 months and 5 days"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
daysToAdd - the days to add, positive or negative
Returns:
a Period based on this period with the specified days added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,plusMonths(long monthsToAdd),Period,Returns a copy of this period with the specified months added.,"

plusMonths
public Period plusMonths(long monthsToAdd)
Returns a copy of this period with the specified months added.
 
 This adds the amount to the months unit in a copy of this period.
 The years and days units are unaffected.
 For example, ""1 year, 6 months and 3 days"" plus 2 months returns ""1 year, 8 months and 3 days"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToAdd - the months to add, positive or negative
Returns:
a Period based on this period with the specified months added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,plusYears(long yearsToAdd),Period,Returns a copy of this period with the specified years added.,"

plusYears
public Period plusYears(long yearsToAdd)
Returns a copy of this period with the specified years added.
 
 This adds the amount to the years unit in a copy of this period.
 The months and days units are unaffected.
 For example, ""1 year, 6 months and 3 days"" plus 2 years returns ""3 years, 6 months and 3 days"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToAdd - the years to add, positive or negative
Returns:
a Period based on this period with the specified years added, not null
Throws:
ArithmeticException - if numeric overflow occurs


"
Period,subtractFrom(Temporal temporal),Temporal,Subtracts this period from the specified temporal object.,"

subtractFrom
public Temporal subtractFrom(Temporal temporal)
Subtracts this period from the specified temporal object.
 
 This returns a temporal object of the same observable type as the input
 with this period subtracted.
 If the temporal has a chronology, it must be the ISO chronology.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.minus(TemporalAmount).
 
   // these two lines are equivalent, but the second approach is recommended
   dateTime = thisPeriod.subtractFrom(dateTime);
   dateTime = dateTime.minus(thisPeriod);
 

 The calculation operates as follows.
 First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
 Second, if the months are zero, the years are subtracted if non-zero, otherwise
 the combination of years and months is subtracted if non-zero.
 Finally, any days are subtracted.
 
 This approach ensures that a partial period can be subtracted from a partial date.
 For example, a period of years and/or months can be subtracted from a YearMonth,
 but a period including days cannot.
 The approach also subtracts years and months together when necessary, which ensures
 correct behaviour at the end of the month.
 
 This instance is immutable and unaffected by this method call.

Specified by:
subtractFrom in interface ChronoPeriod
Specified by:
subtractFrom in interface TemporalAmount
Parameters:
temporal - the temporal object to adjust, not null
Returns:
an object of the same type with the adjustment made, not null
Throws:
DateTimeException - if unable to subtract
ArithmeticException - if numeric overflow occurs


"
Period,toString(),String,"Outputs this period as a String, such as P6Y3M1D.","

toString
public String toString()
Outputs this period as a String, such as P6Y3M1D.
 
 The output will be in the ISO-8601 period format.
 A zero period will be represented as zero days, 'P0D'.

Specified by:
toString in interface ChronoPeriod
Overrides:
toString in class Object
Returns:
a string representation of this period, not null


"
Period,toTotalMonths(),long,Gets the total number of months in this period.,"

toTotalMonths
public long toTotalMonths()
Gets the total number of months in this period.
 
 This returns the total number of months in the period by multiplying the
 number of years by 12 and adding the number of months.
 
 This instance is immutable and unaffected by this method call.

Returns:
the total number of months in the period, may be negative


"
Period,withDays(int days),Period,Returns a copy of this period with the specified amount of days.,"

withDays
public Period withDays(int days)
Returns a copy of this period with the specified amount of days.
 
 This sets the amount of the days unit in a copy of this period.
 The years and months units are unaffected.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to represent, may be negative
Returns:
a Period based on this period with the requested days, not null


"
Period,withMonths(int months),Period,Returns a copy of this period with the specified amount of months.,"

withMonths
public Period withMonths(int months)
Returns a copy of this period with the specified amount of months.
 
 This sets the amount of the months unit in a copy of this period.
 The years and days units are unaffected.
 
 The months unit is not automatically normalized with the years unit.
 This means that a period of ""15 months"" is different to a period
 of ""1 year and 3 months"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to represent, may be negative
Returns:
a Period based on this period with the requested months, not null


"
Period,withYears(int years),Period,Returns a copy of this period with the specified amount of years.,"

withYears
public Period withYears(int years)
Returns a copy of this period with the specified amount of years.
 
 This sets the amount of the years unit in a copy of this period.
 The months and days units are unaffected.
 
 The months unit is not automatically normalized with the years unit.
 This means that a period of ""15 months"" is different to a period
 of ""1 year and 3 months"".
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to represent, may be negative
Returns:
a Period based on this period with the requested years, not null


"
Year,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have this year.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have this year.
 
 This returns a temporal object of the same observable type as the input
 with the year changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 passing ChronoField.YEAR as the field.
 If the specified temporal object does not use the ISO calendar system then
 a DateTimeException is thrown.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisYear.adjustInto(temporal);
   temporal = temporal.with(thisYear);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
Year,atDay(int dayOfYear),LocalDate,Combines this year with a day-of-year to create a LocalDate.,"

atDay
public LocalDate atDay(int dayOfYear)
Combines this year with a day-of-year to create a LocalDate.
 
 This returns a LocalDate formed from this year and the specified day-of-year.
 
 The day-of-year value 366 is only valid in a leap year.

Parameters:
dayOfYear - the day-of-year to use, from 1 to 365-366
Returns:
the local date formed from this year and the specified date of year, not null
Throws:
DateTimeException - if the day of year is zero or less, 366 or greater or equal
  to 366 and this is not a leap year


"
Year,atMonth(int month),YearMonth,Combines this year with a month to create a YearMonth.,"

atMonth
public YearMonth atMonth(int month)
Combines this year with a month to create a YearMonth.
 
 This returns a YearMonth formed from this year and the specified month.
 All possible combinations of year and month are valid.
 
 This method can be used as part of a chain to produce a date:
 
  LocalDate date = year.atMonth(month).atDay(day);
 

Parameters:
month - the month-of-year to use, from 1 (January) to 12 (December)
Returns:
the year-month formed from this year and the specified month, not null
Throws:
DateTimeException - if the month is invalid


"
Year,atMonth(Month month),YearMonth,Combines this year with a month to create a YearMonth.,"

atMonth
public YearMonth atMonth(Month month)
Combines this year with a month to create a YearMonth.
 
 This returns a YearMonth formed from this year and the specified month.
 All possible combinations of year and month are valid.
 
 This method can be used as part of a chain to produce a date:
 
  LocalDate date = year.atMonth(month).atDay(day);
 

Parameters:
month - the month-of-year to use, not null
Returns:
the year-month formed from this year and the specified month, not null


"
Year,atMonthDay(MonthDay monthDay),LocalDate,Combines this year with a month-day to create a LocalDate.,"

atMonthDay
public LocalDate atMonthDay(MonthDay monthDay)
Combines this year with a month-day to create a LocalDate.
 
 This returns a LocalDate formed from this year and the specified month-day.
 
 A month-day of February 29th will be adjusted to February 28th in the resulting
 date if the year is not a leap year.

Parameters:
monthDay - the month-day to use, not null
Returns:
the local date formed from this year and the specified month-day, not null


"
Year,compareTo(Year other),int,Compares this year to another year.,"

compareTo
public int compareTo(Year other)
Compares this year to another year.
 
 The comparison is based on the value of the year.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<Year>
Parameters:
other - the other year to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
Year,equals(Object obj),boolean,Checks if this year is equal to another year.,"

equals
public boolean equals(Object obj)
Checks if this year is equal to another year.
 
 The comparison is based on the time-line position of the years.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other year
See Also:
Object.hashCode(), 
HashMap


"
Year,format(DateTimeFormatter formatter),String,Formats this year using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this year using the specified formatter.
 
 This year will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted year string, not null
Throws:
DateTimeException - if an error occurs during printing


"
Year,from(TemporalAccessor temporal),static Year,Obtains an instance of Year from a temporal object.,"

from
public static Year from(TemporalAccessor temporal)
Obtains an instance of Year from a temporal object.
 
 This obtains a year based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of Year.
 
 The conversion extracts the year field.
 The extraction is only permitted if the temporal object has an ISO
 chronology, or can be converted to a LocalDate.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, Year::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the year, not null
Throws:
DateTimeException - if unable to convert to a Year


"
Year,get(TemporalField field),int,Gets the value of the specified field from this year as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this year as an int.
 
 This queries this year for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this year.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
Year,getLong(TemporalField field),long,Gets the value of the specified field from this year as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this year as a long.
 
 This queries this year for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this year.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
Year,getValue(),int,Gets the year value.,"

getValue
public int getValue()
Gets the year value.
 
 The year returned by this method is proleptic as per get(YEAR).

Returns:
the year, MIN_VALUE to MAX_VALUE


"
Year,hashCode(),int,A hash code for this year.,"

hashCode
public int hashCode()
A hash code for this year.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Year,isAfter(Year other),boolean,Checks if this year is after the specified year.,"

isAfter
public boolean isAfter(Year other)
Checks if this year is after the specified year.

Parameters:
other - the other year to compare to, not null
Returns:
true if this is after the specified year


"
Year,isBefore(Year other),boolean,Checks if this year is before the specified year.,"

isBefore
public boolean isBefore(Year other)
Checks if this year is before the specified year.

Parameters:
other - the other year to compare to, not null
Returns:
true if this point is before the specified year


"
Year,isLeap(),boolean,"Checks if the year is a leap year, according to the ISO proleptic calendar system rules.","

isLeap
public boolean isLeap()
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
 
 This method applies the current rules for leap years across the whole time-line.
 In general, a year is a leap year if it is divisible by four without
 remainder. However, years divisible by 100, are not leap years, with
 the exception of years divisible by 400 which are.
 
 For example, 1904 is a leap year it is divisible by 4.
 1900 was not a leap year as it is divisible by 100, however 2000 was a
 leap year as it is divisible by 400.
 
 The calculation is proleptic - applying the same rules into the far future and far past.
 This is historically inaccurate, but is correct for the ISO-8601 standard.

Returns:
true if the year is leap, false otherwise


"
Year,isLeap(long year),static boolean,"Checks if the year is a leap year, according to the ISO proleptic calendar system rules.","

isLeap
public static boolean isLeap(long year)
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
 
 This method applies the current rules for leap years across the whole time-line.
 In general, a year is a leap year if it is divisible by four without
 remainder. However, years divisible by 100, are not leap years, with
 the exception of years divisible by 400 which are.
 
 For example, 1904 is a leap year it is divisible by 4.
 1900 was not a leap year as it is divisible by 100, however 2000 was a
 leap year as it is divisible by 400.
 
 The calculation is proleptic - applying the same rules into the far future and far past.
 This is historically inaccurate, but is correct for the ISO-8601 standard.

Parameters:
year - the year to check
Returns:
true if the year is leap, false otherwise


"
Year,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this year can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
YEAR_OF_ERA
YEAR
ERA

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this year, false if not


"
Year,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this year.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
Year,isValidMonthDay(MonthDay monthDay),boolean,Checks if the month-day is valid for this year.,"

isValidMonthDay
public boolean isValidMonthDay(MonthDay monthDay)
Checks if the month-day is valid for this year.
 
 This method checks whether this year and the input month and day form
 a valid date.

Parameters:
monthDay - the month-day to validate, null returns false
Returns:
true if the month and day are valid for this year


"
Year,length(),int,Gets the length of this year in days.,"

length
public int length()
Gets the length of this year in days.

Returns:
the length of this year in days, 365 or 366


"
Year,"minus(long amountToSubtract, TemporalUnit unit)",Year,Returns a copy of this year with the specified amount subtracted.,"

minus
public Year minus(long amountToSubtract,
                  TemporalUnit unit)
Returns a copy of this year with the specified amount subtracted.
 
 This returns a Year, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a Year based on this year with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Year,minus(TemporalAmount amountToSubtract),Year,Returns a copy of this year with the specified amount subtracted.,"

minus
public Year minus(TemporalAmount amountToSubtract)
Returns a copy of this year with the specified amount subtracted.
 
 This returns a Year, based on this one, with the specified amount subtracted.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a Year based on this year with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
Year,minusYears(long yearsToSubtract),Year,Returns a copy of this Year with the specified number of years subtracted.,"

minusYears
public Year minusYears(long yearsToSubtract)
Returns a copy of this Year with the specified number of years subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToSubtract - the years to subtract, may be negative
Returns:
a Year based on this year with the year subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
Year,now(),static Year,Obtains the current year from the system clock in the default time-zone.,"

now
public static Year now()
Obtains the current year from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current year.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current year using the system clock and default time-zone, not null


"
Year,now(Clock clock),static Year,Obtains the current year from the specified clock.,"

now
public static Year now(Clock clock)
Obtains the current year from the specified clock.
 
 This will query the specified clock to obtain the current year.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current year, not null


"
Year,now(ZoneId zone),static Year,Obtains the current year from the system clock in the specified time-zone.,"

now
public static Year now(ZoneId zone)
Obtains the current year from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current year.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current year using the system clock, not null


"
Year,of(int isoYear),static Year,Obtains an instance of Year.,"

of
public static Year of(int isoYear)
Obtains an instance of Year.
 
 This method accepts a year value from the proleptic ISO calendar system.
 
 The year 2AD/CE is represented by 2.
 The year 1AD/CE is represented by 1.
 The year 1BC/BCE is represented by 0.
 The year 2BC/BCE is represented by -1.

Parameters:
isoYear - the ISO proleptic year to represent, from MIN_VALUE to MAX_VALUE
Returns:
the year, not null
Throws:
DateTimeException - if the field is invalid


"
Year,parse(CharSequence text),static Year,Obtains an instance of Year from a text string such as 2007.,"

parse
public static Year parse(CharSequence text)
Obtains an instance of Year from a text string such as 2007.
 
 The string must represent a valid year.
 Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.

Parameters:
text - the text to parse such as ""2007"", not null
Returns:
the parsed year, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
Year,"parse(CharSequence text, DateTimeFormatter formatter)",static Year,Obtains an instance of Year from a text string using a specific formatter.,"

parse
public static Year parse(CharSequence text,
                         DateTimeFormatter formatter)
Obtains an instance of Year from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a year.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed year, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
Year,"plus(long amountToAdd, TemporalUnit unit)",Year,Returns a copy of this year with the specified amount added.,"

plus
public Year plus(long amountToAdd,
                 TemporalUnit unit)
Returns a copy of this year with the specified amount added.
 
 This returns a Year, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The supported fields behave as follows:
 
YEARS -
  Returns a Year with the specified number of years added.
  This is equivalent to plusYears(long).
 DECADES -
  Returns a Year with the specified number of decades added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 10.
 CENTURIES -
  Returns a Year with the specified number of centuries added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 100.
 MILLENNIA -
  Returns a Year with the specified number of millennia added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 1,000.
 ERAS -
  Returns a Year with the specified number of eras added.
  Only two eras are supported so the amount must be one, zero or minus one.
  If the amount is non-zero then the year is changed such that the year-of-era
  is unchanged.
 

 All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a Year based on this year with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Year,plus(TemporalAmount amountToAdd),Year,Returns a copy of this year with the specified amount added.,"

plus
public Year plus(TemporalAmount amountToAdd)
Returns a copy of this year with the specified amount added.
 
 This returns a Year, based on this one, with the specified amount added.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a Year based on this year with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
Year,plusYears(long yearsToAdd),Year,Returns a copy of this Year with the specified number of years added.,"

plusYears
public Year plusYears(long yearsToAdd)
Returns a copy of this Year with the specified number of years added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToAdd - the years to add, may be negative
Returns:
a Year based on this year with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
Year,query(TemporalQuery<R> query),<R> R,Queries this year using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this year using the specified query.
 
 This queries this year using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
Year,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This year is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
Year,toString(),String,Outputs this year as a String.,"

toString
public String toString()
Outputs this year as a String.

Overrides:
toString in class Object
Returns:
a string representation of this year, not null


"
Year,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another year in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another year in terms of the specified unit.
 
 This calculates the amount of time between two Year
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified year.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 Year using from(TemporalAccessor).
 For example, the amount in decades between two year can be calculated
 using startYear.until(endYear, DECADES).
 
 The calculation returns a whole number, representing the number of
 complete units between the two years.
 For example, the amount in decades between 2012 and 2031
 will only be one decade as it is one year short of two decades.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, YEARS);
   amount = YEARS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units YEARS, DECADES, CENTURIES,
 MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a Year, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this year and the end year
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a Year
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
Year,with(TemporalAdjuster adjuster),Year,Returns an adjusted copy of this year.,"

with
public Year with(TemporalAdjuster adjuster)
Returns an adjusted copy of this year.
 
 This returns a Year, based on this one, with the year adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a Year based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
Year,"with(TemporalField field, long newValue)",Year,Returns a copy of this year with the specified field set to a new value.,"

with
public Year with(TemporalField field,
                 long newValue)
Returns a copy of this year with the specified field set to a new value.
 
 This returns a Year, based on this one, with the value
 for the specified field changed.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields behave as follows:
 
YEAR_OF_ERA -
  Returns a Year with the specified year-of-era
  The era will be unchanged.
 YEAR -
  Returns a Year with the specified year.
  This completely replaces the date and is equivalent to of(int).
 ERA -
  Returns a Year with the specified era.
  The year-of-era will be unchanged.
 

 In all cases, if the new value is outside the valid range of values for the field
 then a DateTimeException will be thrown.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a Year based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have this year-month.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have this year-month.
 
 This returns a temporal object of the same observable type as the input
 with the year and month changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 passing ChronoField.PROLEPTIC_MONTH as the field.
 If the specified temporal object does not use the ISO calendar system then
 a DateTimeException is thrown.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisYearMonth.adjustInto(temporal);
   temporal = temporal.with(thisYearMonth);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
YearMonth,atDay(int dayOfMonth),LocalDate,Combines this year-month with a day-of-month to create a LocalDate.,"

atDay
public LocalDate atDay(int dayOfMonth)
Combines this year-month with a day-of-month to create a LocalDate.
 
 This returns a LocalDate formed from this year-month and the specified day-of-month.
 
 The day-of-month value must be valid for the year-month.
 
 This method can be used as part of a chain to produce a date:
 
  LocalDate date = year.atMonth(month).atDay(day);
 

Parameters:
dayOfMonth - the day-of-month to use, from 1 to 31
Returns:
the date formed from this year-month and the specified day, not null
Throws:
DateTimeException - if the day is invalid for the year-month
See Also:
isValidDay(int)


"
YearMonth,atEndOfMonth(),LocalDate,Returns a LocalDate at the end of the month.,"

atEndOfMonth
public LocalDate atEndOfMonth()
Returns a LocalDate at the end of the month.
 
 This returns a LocalDate based on this year-month.
 The day-of-month is set to the last valid day of the month, taking
 into account leap years.
 
 This method can be used as part of a chain to produce a date:
 
  LocalDate date = year.atMonth(month).atEndOfMonth();
 

Returns:
the last valid date of this year-month, not null


"
YearMonth,compareTo(YearMonth other),int,Compares this year-month to another year-month.,"

compareTo
public int compareTo(YearMonth other)
Compares this year-month to another year-month.
 
 The comparison is based first on the value of the year, then on the value of the month.
 It is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<YearMonth>
Parameters:
other - the other year-month to compare to, not null
Returns:
the comparator value, negative if less, positive if greater


"
YearMonth,equals(Object obj),boolean,Checks if this year-month is equal to another year-month.,"

equals
public boolean equals(Object obj)
Checks if this year-month is equal to another year-month.
 
 The comparison is based on the time-line position of the year-months.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other year-month
See Also:
Object.hashCode(), 
HashMap


"
YearMonth,format(DateTimeFormatter formatter),String,Formats this year-month using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this year-month using the specified formatter.
 
 This year-month will be passed to the formatter to produce a string.

Parameters:
formatter - the formatter to use, not null
Returns:
the formatted year-month string, not null
Throws:
DateTimeException - if an error occurs during printing


"
YearMonth,from(TemporalAccessor temporal),static YearMonth,Obtains an instance of YearMonth from a temporal object.,"

from
public static YearMonth from(TemporalAccessor temporal)
Obtains an instance of YearMonth from a temporal object.
 
 This obtains a year-month based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of YearMonth.
 
 The conversion extracts the YEAR and
 MONTH_OF_YEAR fields.
 The extraction is only permitted if the temporal object has an ISO
 chronology, or can be converted to a LocalDate.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, YearMonth::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the year-month, not null
Throws:
DateTimeException - if unable to convert to a YearMonth


"
YearMonth,get(TemporalField field),int,Gets the value of the specified field from this year-month as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this year-month as an int.
 
 This queries this year-month for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this year-month, except PROLEPTIC_MONTH which is too
 large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
YearMonth,getLong(TemporalField field),long,Gets the value of the specified field from this year-month as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this year-month as a long.
 
 This queries this year-month for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this year-month.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
YearMonth,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
YearMonth,getYear(),int,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
YearMonth,hashCode(),int,A hash code for this year-month.,"

hashCode
public int hashCode()
A hash code for this year-month.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
YearMonth,isAfter(YearMonth other),boolean,Checks if this year-month is after the specified year-month.,"

isAfter
public boolean isAfter(YearMonth other)
Checks if this year-month is after the specified year-month.

Parameters:
other - the other year-month to compare to, not null
Returns:
true if this is after the specified year-month


"
YearMonth,isBefore(YearMonth other),boolean,Checks if this year-month is before the specified year-month.,"

isBefore
public boolean isBefore(YearMonth other)
Checks if this year-month is before the specified year-month.

Parameters:
other - the other year-month to compare to, not null
Returns:
true if this point is before the specified year-month


"
YearMonth,isLeapYear(),boolean,"Checks if the year is a leap year, according to the ISO proleptic calendar system rules.","

isLeapYear
public boolean isLeapYear()
Checks if the year is a leap year, according to the ISO proleptic
 calendar system rules.
 
 This method applies the current rules for leap years across the whole time-line.
 In general, a year is a leap year if it is divisible by four without
 remainder. However, years divisible by 100, are not leap years, with
 the exception of years divisible by 400 which are.
 
 For example, 1904 is a leap year it is divisible by 4.
 1900 was not a leap year as it is divisible by 100, however 2000 was a
 leap year as it is divisible by 400.
 
 The calculation is proleptic - applying the same rules into the far future and far past.
 This is historically inaccurate, but is correct for the ISO-8601 standard.

Returns:
true if the year is leap, false otherwise


"
YearMonth,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this year-month can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this year-month, false if not


"
YearMonth,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this year-month.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
YearMonth,isValidDay(int dayOfMonth),boolean,Checks if the day-of-month is valid for this year-month.,"

isValidDay
public boolean isValidDay(int dayOfMonth)
Checks if the day-of-month is valid for this year-month.
 
 This method checks whether this year and month and the input day form
 a valid date.

Parameters:
dayOfMonth - the day-of-month to validate, from 1 to 31, invalid value returns false
Returns:
true if the day is valid for this year-month


"
YearMonth,lengthOfMonth(),int,"Returns the length of the month, taking account of the year.","

lengthOfMonth
public int lengthOfMonth()
Returns the length of the month, taking account of the year.
 
 This returns the length of the month in days.
 For example, a date in January would return 31.

Returns:
the length of the month in days, from 28 to 31


"
YearMonth,lengthOfYear(),int,Returns the length of the year.,"

lengthOfYear
public int lengthOfYear()
Returns the length of the year.
 
 This returns the length of the year in days, either 365 or 366.

Returns:
366 if the year is leap, 365 otherwise


"
YearMonth,"minus(long amountToSubtract, TemporalUnit unit)",YearMonth,Returns a copy of this year-month with the specified amount subtracted.,"

minus
public YearMonth minus(long amountToSubtract,
                       TemporalUnit unit)
Returns a copy of this year-month with the specified amount subtracted.
 
 This returns a YearMonth, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a YearMonth based on this year-month with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,minus(TemporalAmount amountToSubtract),YearMonth,Returns a copy of this year-month with the specified amount subtracted.,"

minus
public YearMonth minus(TemporalAmount amountToSubtract)
Returns a copy of this year-month with the specified amount subtracted.
 
 This returns a YearMonth, based on this one, with the specified amount subtracted.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a YearMonth based on this year-month with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
YearMonth,minusMonths(long monthsToSubtract),YearMonth,Returns a copy of this YearMonth with the specified number of months subtracted.,"

minusMonths
public YearMonth minusMonths(long monthsToSubtract)
Returns a copy of this YearMonth with the specified number of months subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToSubtract - the months to subtract, may be negative
Returns:
a YearMonth based on this year-month with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
YearMonth,minusYears(long yearsToSubtract),YearMonth,Returns a copy of this YearMonth with the specified number of years subtracted.,"

minusYears
public YearMonth minusYears(long yearsToSubtract)
Returns a copy of this YearMonth with the specified number of years subtracted.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToSubtract - the years to subtract, may be negative
Returns:
a YearMonth based on this year-month with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
YearMonth,now(),static YearMonth,Obtains the current year-month from the system clock in the default time-zone.,"

now
public static YearMonth now()
Obtains the current year-month from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current year-month.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current year-month using the system clock and default time-zone, not null


"
YearMonth,now(Clock clock),static YearMonth,Obtains the current year-month from the specified clock.,"

now
public static YearMonth now(Clock clock)
Obtains the current year-month from the specified clock.
 
 This will query the specified clock to obtain the current year-month.
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current year-month, not null


"
YearMonth,now(ZoneId zone),static YearMonth,Obtains the current year-month from the system clock in the specified time-zone.,"

now
public static YearMonth now(ZoneId zone)
Obtains the current year-month from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current year-month.
 Specifying the time-zone avoids dependence on the default time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current year-month using the system clock, not null


"
YearMonth,"of(int year, int month)",static YearMonth,Obtains an instance of YearMonth from a year and month.,"

of
public static YearMonth of(int year,
                           int month)
Obtains an instance of YearMonth from a year and month.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
Returns:
the year-month, not null
Throws:
DateTimeException - if either field value is invalid


"
YearMonth,"of(int year, Month month)",static YearMonth,Obtains an instance of YearMonth from a year and month.,"

of
public static YearMonth of(int year,
                           Month month)
Obtains an instance of YearMonth from a year and month.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, not null
Returns:
the year-month, not null
Throws:
DateTimeException - if the year value is invalid


"
YearMonth,parse(CharSequence text),static YearMonth,Obtains an instance of YearMonth from a text string such as 2007-12.,"

parse
public static YearMonth parse(CharSequence text)
Obtains an instance of YearMonth from a text string such as 2007-12.
 
 The string must represent a valid year-month.
 The format must be uuuu-MM.
 Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.

Parameters:
text - the text to parse such as ""2007-12"", not null
Returns:
the parsed year-month, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
YearMonth,"parse(CharSequence text, DateTimeFormatter formatter)",static YearMonth,Obtains an instance of YearMonth from a text string using a specific formatter.,"

parse
public static YearMonth parse(CharSequence text,
                              DateTimeFormatter formatter)
Obtains an instance of YearMonth from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a year-month.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed year-month, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
YearMonth,"plus(long amountToAdd, TemporalUnit unit)",YearMonth,Returns a copy of this year-month with the specified amount added.,"

plus
public YearMonth plus(long amountToAdd,
                      TemporalUnit unit)
Returns a copy of this year-month with the specified amount added.
 
 This returns a YearMonth, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The supported fields behave as follows:
 
MONTHS -
  Returns a YearMonth with the specified number of months added.
  This is equivalent to plusMonths(long).
 YEARS -
  Returns a YearMonth with the specified number of years added.
  This is equivalent to plusYears(long).
 DECADES -
  Returns a YearMonth with the specified number of decades added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 10.
 CENTURIES -
  Returns a YearMonth with the specified number of centuries added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 100.
 MILLENNIA -
  Returns a YearMonth with the specified number of millennia added.
  This is equivalent to calling plusYears(long) with the amount
  multiplied by 1,000.
 ERAS -
  Returns a YearMonth with the specified number of eras added.
  Only two eras are supported so the amount must be one, zero or minus one.
  If the amount is non-zero then the year is changed such that the year-of-era
  is unchanged.
 

 All other ChronoUnit instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a YearMonth based on this year-month with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,plus(TemporalAmount amountToAdd),YearMonth,Returns a copy of this year-month with the specified amount added.,"

plus
public YearMonth plus(TemporalAmount amountToAdd)
Returns a copy of this year-month with the specified amount added.
 
 This returns a YearMonth, based on this one, with the specified amount added.
 The amount is typically Period but may be any other type implementing
 the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a YearMonth based on this year-month with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
YearMonth,plusMonths(long monthsToAdd),YearMonth,Returns a copy of this YearMonth with the specified number of months added.,"

plusMonths
public YearMonth plusMonths(long monthsToAdd)
Returns a copy of this YearMonth with the specified number of months added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
monthsToAdd - the months to add, may be negative
Returns:
a YearMonth based on this year-month with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
YearMonth,plusYears(long yearsToAdd),YearMonth,Returns a copy of this YearMonth with the specified number of years added.,"

plusYears
public YearMonth plusYears(long yearsToAdd)
Returns a copy of this YearMonth with the specified number of years added.
 
 This instance is immutable and unaffected by this method call.

Parameters:
yearsToAdd - the years to add, may be negative
Returns:
a YearMonth based on this year-month with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
YearMonth,query(TemporalQuery<R> query),<R> R,Queries this year-month using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this year-month using the specified query.
 
 This queries this year-month using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
YearMonth,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This year-month is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
YearMonth,toString(),String,"Outputs this year-month as a String, such as 2007-12.","

toString
public String toString()
Outputs this year-month as a String, such as 2007-12.
 
 The output will be in the format uuuu-MM:

Overrides:
toString in class Object
Returns:
a string representation of this year-month, not null


"
YearMonth,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another year-month in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another year-month in terms of the specified unit.
 
 This calculates the amount of time between two YearMonth
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified year-month.
 The result will be negative if the end is before the start.
 The Temporal passed to this method is converted to a
 YearMonth using from(TemporalAccessor).
 For example, the amount in years between two year-months can be calculated
 using startYearMonth.until(endYearMonth, YEARS).
 
 The calculation returns a whole number, representing the number of
 complete units between the two year-months.
 For example, the amount in decades between 2012-06 and 2032-05
 will only be one decade as it is one month short of two decades.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units MONTHS, YEARS, DECADES,
 CENTURIES, MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a YearMonth, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this year-month and the end year-month
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a YearMonth
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,with(TemporalAdjuster adjuster),YearMonth,Returns an adjusted copy of this year-month.,"

with
public YearMonth with(TemporalAdjuster adjuster)
Returns an adjusted copy of this year-month.
 
 This returns a YearMonth, based on this one, with the year-month adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the year-month to the next month that
 Halley's comet will pass the Earth.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a YearMonth based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
YearMonth,"with(TemporalField field, long newValue)",YearMonth,Returns a copy of this year-month with the specified field set to a new value.,"

with
public YearMonth with(TemporalField field,
                      long newValue)
Returns a copy of this year-month with the specified field set to a new value.
 
 This returns a YearMonth, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year or month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 If the field is a ChronoField then the adjustment is implemented here.
 The supported fields behave as follows:
 
MONTH_OF_YEAR -
  Returns a YearMonth with the specified month-of-year.
  The year will be unchanged.
 PROLEPTIC_MONTH -
  Returns a YearMonth with the specified proleptic-month.
  This completely replaces the year and month of this object.
 YEAR_OF_ERA -
  Returns a YearMonth with the specified year-of-era
  The month and era will be unchanged.
 YEAR -
  Returns a YearMonth with the specified year.
  The month will be unchanged.
 ERA -
  Returns a YearMonth with the specified era.
  The month and year-of-era will be unchanged.
 

 In all cases, if the new value is outside the valid range of values for the field
 then a DateTimeException will be thrown.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a YearMonth based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
YearMonth,withMonth(int month),YearMonth,Returns a copy of this YearMonth with the month-of-year altered.,"

withMonth
public YearMonth withMonth(int month)
Returns a copy of this YearMonth with the month-of-year altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the returned year-month, from 1 (January) to 12 (December)
Returns:
a YearMonth based on this year-month with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
YearMonth,withYear(int year),YearMonth,Returns a copy of this YearMonth with the year altered.,"

withYear
public YearMonth withYear(int year)
Returns a copy of this YearMonth with the year altered.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the returned year-month, from MIN_YEAR to MAX_YEAR
Returns:
a YearMonth based on this year-month with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
ZonedDateTime,equals(Object obj),boolean,Checks if this date-time is equal to another date-time.,"

equals
public boolean equals(Object obj)
Checks if this date-time is equal to another date-time.
 
 The comparison is based on the offset date-time and the zone.
 Only objects of type ZonedDateTime are compared, other types return false.

Specified by:
equals in interface ChronoZonedDateTime<LocalDate>
Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other date-time
See Also:
Object.hashCode(), 
HashMap


"
ZonedDateTime,format(DateTimeFormatter formatter),String,Formats this date-time using the specified formatter.,"

format
public String format(DateTimeFormatter formatter)
Formats this date-time using the specified formatter.
 
 This date-time will be passed to the formatter to produce a string.

Specified by:
format in interface ChronoZonedDateTime<LocalDate>
Parameters:
formatter - the formatter to use, not null
Returns:
the formatted date-time string, not null
Throws:
DateTimeException - if an error occurs during printing


"
ZonedDateTime,from(TemporalAccessor temporal),static ZonedDateTime,Obtains an instance of ZonedDateTime from a temporal object.,"

from
public static ZonedDateTime from(TemporalAccessor temporal)
Obtains an instance of ZonedDateTime from a temporal object.
 
 This obtains a zoned date-time based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of ZonedDateTime.
 
 The conversion will first obtain a ZoneId from the temporal object,
 falling back to a ZoneOffset if necessary. It will then try to obtain
 an Instant, falling back to a LocalDateTime if necessary.
 The result will be either the combination of ZoneId or ZoneOffset
 with Instant or LocalDateTime.
 Implementations are permitted to perform optimizations such as accessing
 those fields that are equivalent to the relevant objects.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, ZonedDateTime::from.

Specified by:
from in interface ChronoZonedDateTime<LocalDate>
Parameters:
temporal - the temporal object to convert, not null
Returns:
the zoned date-time, not null
Throws:
DateTimeException - if unable to convert to an ZonedDateTime
See Also:
Chronology.zonedDateTime(TemporalAccessor)


"
ZonedDateTime,get(TemporalField field),int,Gets the value of the specified field from this date-time as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this date-time as an int.
 
 This queries this date-time for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY,
 EPOCH_DAY, PROLEPTIC_MONTH and INSTANT_SECONDS which are too
 large to fit in an int and throw a DateTimeException.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface ChronoZonedDateTime<LocalDate>
Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,getDayOfMonth(),int,Gets the day-of-month field.,"

getDayOfMonth
public int getDayOfMonth()
Gets the day-of-month field.
 
 This method returns the primitive int value for the day-of-month.

Returns:
the day-of-month, from 1 to 31


"
ZonedDateTime,getDayOfWeek(),DayOfWeek,"Gets the day-of-week field, which is an enum DayOfWeek.","

getDayOfWeek
public DayOfWeek getDayOfWeek()
Gets the day-of-week field, which is an enum DayOfWeek.
 
 This method returns the enum DayOfWeek for the day-of-week.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.
 
 Additional information can be obtained from the DayOfWeek.
 This includes textual names of the values.

Returns:
the day-of-week, not null


"
ZonedDateTime,getDayOfYear(),int,Gets the day-of-year field.,"

getDayOfYear
public int getDayOfYear()
Gets the day-of-year field.
 
 This method returns the primitive int value for the day-of-year.

Returns:
the day-of-year, from 1 to 365, or 366 in a leap year


"
ZonedDateTime,getHour(),int,Gets the hour-of-day field.,"

getHour
public int getHour()
Gets the hour-of-day field.

Returns:
the hour-of-day, from 0 to 23


"
ZonedDateTime,getLong(TemporalField field),long,Gets the value of the specified field from this date-time as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this date-time as a long.
 
 This queries this date-time for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return valid
 values based on this date-time.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface ChronoZonedDateTime<LocalDate>
Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,getMinute(),int,Gets the minute-of-hour field.,"

getMinute
public int getMinute()
Gets the minute-of-hour field.

Returns:
the minute-of-hour, from 0 to 59


"
ZonedDateTime,getMonth(),Month,Gets the month-of-year field using the Month enum.,"

getMonth
public Month getMonth()
Gets the month-of-year field using the Month enum.
 
 This method returns the enum Month for the month.
 This avoids confusion as to what int values mean.
 If you need access to the primitive int value then the enum
 provides the int value.

Returns:
the month-of-year, not null
See Also:
getMonthValue()


"
ZonedDateTime,getMonthValue(),int,Gets the month-of-year field from 1 to 12.,"

getMonthValue
public int getMonthValue()
Gets the month-of-year field from 1 to 12.
 
 This method returns the month as an int from 1 to 12.
 Application code is frequently clearer if the enum Month
 is used by calling getMonth().

Returns:
the month-of-year, from 1 to 12
See Also:
getMonth()


"
ZonedDateTime,getNano(),int,Gets the nano-of-second field.,"

getNano
public int getNano()
Gets the nano-of-second field.

Returns:
the nano-of-second, from 0 to 999,999,999


"
ZonedDateTime,getOffset(),ZoneOffset,"Gets the zone offset, such as '+01:00'.","

getOffset
public ZoneOffset getOffset()
Gets the zone offset, such as '+01:00'.
 
 This is the offset of the local date-time from UTC/Greenwich.

Specified by:
getOffset in interface ChronoZonedDateTime<LocalDate>
Returns:
the zone offset, not null


"
ZonedDateTime,getSecond(),int,Gets the second-of-minute field.,"

getSecond
public int getSecond()
Gets the second-of-minute field.

Returns:
the second-of-minute, from 0 to 59


"
ZonedDateTime,getYear(),int,Gets the year field.,"

getYear
public int getYear()
Gets the year field.
 
 This method returns the primitive int value for the year.
 
 The year returned by this method is proleptic as per get(YEAR).
 To obtain the year-of-era, use get(YEAR_OF_ERA).

Returns:
the year, from MIN_YEAR to MAX_YEAR


"
ZonedDateTime,getZone(),ZoneId,"Gets the time-zone, such as 'Europe/Paris'.","

getZone
public ZoneId getZone()
Gets the time-zone, such as 'Europe/Paris'.
 
 This returns the zone ID. This identifies the time-zone rules
 that determine when and how the offset from UTC/Greenwich changes.
 
 The zone ID may be same as the offset.
 If this is true, then any future calculations, such as addition or subtraction,
 have no complex edge cases due to time-zone rules.
 See also withFixedOffsetZone().

Specified by:
getZone in interface ChronoZonedDateTime<LocalDate>
Returns:
the time-zone, not null


"
ZonedDateTime,hashCode(),int,A hash code for this date-time.,"

hashCode
public int hashCode()
A hash code for this date-time.

Specified by:
hashCode in interface ChronoZonedDateTime<LocalDate>
Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ZonedDateTime,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this date-time can be queried for the specified field.
 If false, then calling the range,
 get and with(TemporalField, long)
 methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields are:
 
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA
INSTANT_SECONDS
OFFSET_SECONDS

 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface ChronoZonedDateTime<LocalDate>
Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this date-time, false if not


"
ZonedDateTime,isSupported(TemporalUnit unit),boolean,Checks if the specified unit is supported.,"

isSupported
public boolean isSupported(TemporalUnit unit)
Checks if the specified unit is supported.
 
 This checks if the specified unit can be added to, or subtracted from, this date-time.
 If false, then calling the plus(long, TemporalUnit) and
 minus methods will throw an exception.
 
 If the unit is a ChronoUnit then the query is implemented here.
 The supported units are:
 
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 All other ChronoUnit instances will return false.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.isSupportedBy(Temporal)
 passing this as the argument.
 Whether the unit is supported is determined by the unit.

Specified by:
isSupported in interface ChronoZonedDateTime<LocalDate>
Specified by:
isSupported in interface Temporal
Parameters:
unit - the unit to check, null returns false
Returns:
true if the unit can be added/subtracted, false if not


"
ZonedDateTime,"minus(long amountToSubtract, TemporalUnit unit)",ZonedDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public ZonedDateTime minus(long amountToSubtract,
                           TemporalUnit unit)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns a ZonedDateTime, based on this one, with the amount
 in terms of the unit subtracted. If it is not possible to subtract the amount,
 because the unit is not supported or for some other reason, an exception is thrown.
 
 The calculation for date and time units differ.
 
 Date units operate on the local time-line.
 The period is first subtracted from the local date-time, then converted back
 to a zoned date-time using the zone ID.
 The conversion uses ofLocal(LocalDateTime, ZoneId, ZoneOffset)
 with the offset before the subtraction.
 
 Time units operate on the instant time-line.
 The period is first subtracted from the local date-time, then converted back to
 a zoned date-time using the zone ID.
 The conversion uses ofInstant(LocalDateTime, ZoneOffset, ZoneId)
 with the offset before the subtraction.
 
 This method is equivalent to plus(long, TemporalUnit) with the amount negated.
 See that method for a full description of how addition, and thus subtraction, works.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoZonedDateTime<LocalDate>
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount of the unit to subtract from the result, may be negative
unit - the unit of the amount to subtract, not null
Returns:
a ZonedDateTime based on this date-time with the specified amount subtracted, not null
Throws:
DateTimeException - if the subtraction cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,minus(TemporalAmount amountToSubtract),ZonedDateTime,Returns a copy of this date-time with the specified amount subtracted.,"

minus
public ZonedDateTime minus(TemporalAmount amountToSubtract)
Returns a copy of this date-time with the specified amount subtracted.
 
 This returns a ZonedDateTime, based on this one, with the specified amount subtracted.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.subtractFrom(Temporal). The amount implementation is free
 to implement the subtraction in any way it wishes, however it typically
 calls back to minus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully subtracted.
 
 This instance is immutable and unaffected by this method call.

Specified by:
minus in interface ChronoZonedDateTime<LocalDate>
Specified by:
minus in interface Temporal
Parameters:
amountToSubtract - the amount to subtract, not null
Returns:
a ZonedDateTime based on this date-time with the subtraction made, not null
Throws:
DateTimeException - if the subtraction cannot be made
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,minusDays(long days),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of days subtracted.,"

minusDays
public ZonedDateTime minusDays(long days)
Returns a copy of this ZonedDateTime with the specified number of days subtracted.
 
 This operates on the local time-line,
 subtracting days to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the days subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusHours(long hours),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of hours subtracted.,"

minusHours
public ZonedDateTime minusHours(long hours)
Returns a copy of this ZonedDateTime with the specified number of hours subtracted.
 
 This operates on the instant time-line, such that subtracting one hour will
 always be a duration of one hour earlier.
 This may cause the local date-time to change by an amount other than one hour.
 Note that this is a different approach to that used by days, months and years,
 thus subtracting one day is not the same as adding 24 hours.
 
 For example, consider a time-zone where the spring DST cutover means that the
 local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
 
Subtracting one hour from 02:30+01:00 will result in 01:30+02:00
 Subtracting one hour from 01:30+01:00 will result in 01:30+02:00
 Subtracting one hour from 01:30+02:00 will result in 00:30+01:00
 Subtracting three hours from 02:30+01:00 will result in 00:30+02:00
 

 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the hours subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusMinutes(long minutes),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of minutes subtracted.,"

minusMinutes
public ZonedDateTime minusMinutes(long minutes)
Returns a copy of this ZonedDateTime with the specified number of minutes subtracted.
 
 This operates on the instant time-line, such that subtracting one minute will
 always be a duration of one minute earlier.
 This may cause the local date-time to change by an amount other than one minute.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the minutes subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusMonths(long months),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of months subtracted.,"

minusMonths
public ZonedDateTime minusMonths(long months)
Returns a copy of this ZonedDateTime with the specified number of months subtracted.
 
 This operates on the local time-line,
 subtracting months to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the months subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusNanos(long nanos),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted.,"

minusNanos
public ZonedDateTime minusNanos(long nanos)
Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted.
 
 This operates on the instant time-line, such that subtracting one nano will
 always be a duration of one nano earlier.
 This may cause the local date-time to change by an amount other than one nano.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the nanoseconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusSeconds(long seconds),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of seconds subtracted.,"

minusSeconds
public ZonedDateTime minusSeconds(long seconds)
Returns a copy of this ZonedDateTime with the specified number of seconds subtracted.
 
 This operates on the instant time-line, such that subtracting one second will
 always be a duration of one second earlier.
 This may cause the local date-time to change by an amount other than one second.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the seconds subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusWeeks(long weeks),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of weeks subtracted.,"

minusWeeks
public ZonedDateTime minusWeeks(long weeks)
Returns a copy of this ZonedDateTime with the specified number of weeks subtracted.
 
 This operates on the local time-line,
 subtracting weeks to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the weeks subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,minusYears(long years),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of years subtracted.,"

minusYears
public ZonedDateTime minusYears(long years)
Returns a copy of this ZonedDateTime with the specified number of years subtracted.
 
 This operates on the local time-line,
 subtracting years to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to subtract, may be negative
Returns:
a ZonedDateTime based on this date-time with the years subtracted, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,now(),static ZonedDateTime,Obtains the current date-time from the system clock in the default time-zone.,"

now
public static ZonedDateTime now()
Obtains the current date-time from the system clock in the default time-zone.
 
 This will query the system clock in the default
 time-zone to obtain the current date-time.
 The zone and offset will be set based on the time-zone in the clock.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Returns:
the current date-time using the system clock, not null


"
ZonedDateTime,now(Clock clock),static ZonedDateTime,Obtains the current date-time from the specified clock.,"

now
public static ZonedDateTime now(Clock clock)
Obtains the current date-time from the specified clock.
 
 This will query the specified clock to obtain the current date-time.
 The zone and offset will be set based on the time-zone in the clock.
 
 Using this method allows the use of an alternate clock for testing.
 The alternate clock may be introduced using dependency injection.

Parameters:
clock - the clock to use, not null
Returns:
the current date-time, not null


"
ZonedDateTime,now(ZoneId zone),static ZonedDateTime,Obtains the current date-time from the system clock in the specified time-zone.,"

now
public static ZonedDateTime now(ZoneId zone)
Obtains the current date-time from the system clock in the specified time-zone.
 
 This will query the system clock to obtain the current date-time.
 Specifying the time-zone avoids dependence on the default time-zone.
 The offset will be calculated from the specified time-zone.
 
 Using this method will prevent the ability to use an alternate clock for testing
 because the clock is hard-coded.

Parameters:
zone - the zone ID to use, not null
Returns:
the current date-time using the system clock, not null


"
ZonedDateTime,"of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond, ZoneId zone)",static ZonedDateTime,"Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone.","

of
public static ZonedDateTime of(int year,
                               int month,
                               int dayOfMonth,
                               int hour,
                               int minute,
                               int second,
                               int nanoOfSecond,
                               ZoneId zone)
Obtains an instance of ZonedDateTime from a year, month, day,
 hour, minute, second, nanosecond and time-zone.
 
 This creates a zoned date-time matching the local date-time of the seven
 specified fields as closely as possible.
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may be adjusted.
 
 The local date-time is resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, when clocks are set back, there are two valid offsets.
 This method uses the earlier offset typically corresponding to ""summer"".
 
 In the case of a gap, when clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".
 
 This method exists primarily for writing test cases.
 Non test-code will typically use other methods to create an offset time.
 LocalDateTime has five additional convenience variants of the
 equivalent factory method taking fewer arguments.
 They are not provided here to reduce the footprint of the API.

Parameters:
year - the year to represent, from MIN_YEAR to MAX_YEAR
month - the month-of-year to represent, from 1 (January) to 12 (December)
dayOfMonth - the day-of-month to represent, from 1 to 31
hour - the hour-of-day to represent, from 0 to 23
minute - the minute-of-hour to represent, from 0 to 59
second - the second-of-minute to represent, from 0 to 59
nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999
zone - the time-zone, not null
Returns:
the offset date-time, not null
Throws:
DateTimeException - if the value of any field is out of range, or
  if the day-of-month is invalid for the month-year


"
ZonedDateTime,"of(LocalDate date, LocalTime time, ZoneId zone)",static ZonedDateTime,Obtains an instance of ZonedDateTime from a local date and time.,"

of
public static ZonedDateTime of(LocalDate date,
                               LocalTime time,
                               ZoneId zone)
Obtains an instance of ZonedDateTime from a local date and time.
 
 This creates a zoned date-time matching the input local date and time as closely as possible.
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may be adjusted.
 
 The local date time and first combined to form a local date-time.
 The local date-time is then resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, when clocks are set back, there are two valid offsets.
 This method uses the earlier offset typically corresponding to ""summer"".
 
 In the case of a gap, when clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".

Parameters:
date - the local date, not null
time - the local time, not null
zone - the time-zone, not null
Returns:
the offset date-time, not null


"
ZonedDateTime,"of(LocalDateTime localDateTime, ZoneId zone)",static ZonedDateTime,Obtains an instance of ZonedDateTime from a local date-time.,"

of
public static ZonedDateTime of(LocalDateTime localDateTime,
                               ZoneId zone)
Obtains an instance of ZonedDateTime from a local date-time.
 
 This creates a zoned date-time matching the input local date-time as closely as possible.
 Time-zone rules, such as daylight savings, mean that not every local date-time
 is valid for the specified zone, thus the local date-time may be adjusted.
 
 The local date-time is resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, when clocks are set back, there are two valid offsets.
 This method uses the earlier offset typically corresponding to ""summer"".
 
 In the case of a gap, when clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".

Parameters:
localDateTime - the local date-time, not null
zone - the time-zone, not null
Returns:
the zoned date-time, not null


"
ZonedDateTime,"ofInstant(Instant instant, ZoneId zone)",static ZonedDateTime,Obtains an instance of ZonedDateTime from an Instant.,"

ofInstant
public static ZonedDateTime ofInstant(Instant instant,
                                      ZoneId zone)
Obtains an instance of ZonedDateTime from an Instant.
 
 This creates a zoned date-time with the same instant as that specified.
 Calling ChronoZonedDateTime.toInstant() will return an instant equal to the one used here.
 
 Converting an instant to a zoned date-time is simple as there is only one valid
 offset for each instant.

Parameters:
instant - the instant to create the date-time from, not null
zone - the time-zone, not null
Returns:
the zoned date-time, not null
Throws:
DateTimeException - if the result exceeds the supported range


"
ZonedDateTime,"ofInstant(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)",static ZonedDateTime,Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset.,"

ofInstant
public static ZonedDateTime ofInstant(LocalDateTime localDateTime,
                                      ZoneOffset offset,
                                      ZoneId zone)
Obtains an instance of ZonedDateTime from the instant formed by combining
 the local date-time and offset.
 
 This creates a zoned date-time by combining
 the LocalDateTime and ZoneOffset.
 This combination uniquely specifies an instant without ambiguity.
 
 Converting an instant to a zoned date-time is simple as there is only one valid
 offset for each instant. If the valid offset is different to the offset specified,
 then the date-time and offset of the zoned date-time will differ from those specified.
 
 If the ZoneId to be used is a ZoneOffset, this method is equivalent
 to of(LocalDateTime, ZoneId).

Parameters:
localDateTime - the local date-time, not null
offset - the zone offset, not null
zone - the time-zone, not null
Returns:
the zoned date-time, not null


"
ZonedDateTime,"ofLocal(LocalDateTime localDateTime, ZoneId zone, ZoneOffset preferredOffset)",static ZonedDateTime,Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible.,"

ofLocal
public static ZonedDateTime ofLocal(LocalDateTime localDateTime,
                                    ZoneId zone,
                                    ZoneOffset preferredOffset)
Obtains an instance of ZonedDateTime from a local date-time
 using the preferred offset if possible.
 
 The local date-time is resolved to a single instant on the time-line.
 This is achieved by finding a valid offset from UTC/Greenwich for the local
 date-time as defined by the rules of the zone ID.

 In most cases, there is only one valid offset for a local date-time.
 In the case of an overlap, where clocks are set back, there are two valid offsets.
 If the preferred offset is one of the valid offsets then it is used.
 Otherwise the earlier valid offset is used, typically corresponding to ""summer"".
 
 In the case of a gap, where clocks jump forward, there is no valid offset.
 Instead, the local date-time is adjusted to be later by the length of the gap.
 For a typical one hour daylight savings change, the local date-time will be
 moved one hour later into the offset typically corresponding to ""summer"".

Parameters:
localDateTime - the local date-time, not null
zone - the time-zone, not null
preferredOffset - the zone offset, null if no preference
Returns:
the zoned date-time, not null


"
ZonedDateTime,"ofStrict(LocalDateTime localDateTime, ZoneOffset offset, ZoneId zone)",static ZonedDateTime,"Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID.","

ofStrict
public static ZonedDateTime ofStrict(LocalDateTime localDateTime,
                                     ZoneOffset offset,
                                     ZoneId zone)
Obtains an instance of ZonedDateTime strictly validating the
 combination of local date-time, offset and zone ID.
 
 This creates a zoned date-time ensuring that the offset is valid for the
 local date-time according to the rules of the specified zone.
 If the offset is invalid, an exception is thrown.

Parameters:
localDateTime - the local date-time, not null
offset - the zone offset, not null
zone - the time-zone, not null
Returns:
the zoned date-time, not null


"
ZonedDateTime,parse(CharSequence text),static ZonedDateTime,Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris].,"

parse
public static ZonedDateTime parse(CharSequence text)
Obtains an instance of ZonedDateTime from a text string such as
 2007-12-03T10:15:30+01:00[Europe/Paris].
 
 The string must represent a valid date-time and is parsed using
 DateTimeFormatter.ISO_ZONED_DATE_TIME.

Parameters:
text - the text to parse such as ""2007-12-03T10:15:30+01:00[Europe/Paris]"", not null
Returns:
the parsed zoned date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
ZonedDateTime,"parse(CharSequence text, DateTimeFormatter formatter)",static ZonedDateTime,Obtains an instance of ZonedDateTime from a text string using a specific formatter.,"

parse
public static ZonedDateTime parse(CharSequence text,
                                  DateTimeFormatter formatter)
Obtains an instance of ZonedDateTime from a text string using a specific formatter.
 
 The text is parsed using the formatter, returning a date-time.

Parameters:
text - the text to parse, not null
formatter - the formatter to use, not null
Returns:
the parsed zoned date-time, not null
Throws:
DateTimeParseException - if the text cannot be parsed


"
ZonedDateTime,"plus(long amountToAdd, TemporalUnit unit)",ZonedDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public ZonedDateTime plus(long amountToAdd,
                          TemporalUnit unit)
Returns a copy of this date-time with the specified amount added.
 
 This returns a ZonedDateTime, based on this one, with the amount
 in terms of the unit added. If it is not possible to add the amount, because the
 unit is not supported or for some other reason, an exception is thrown.
 
 If the field is a ChronoUnit then the addition is implemented here.
 The zone is not part of the calculation and will be unchanged in the result.
 The calculation for date and time units differ.
 
 Date units operate on the local time-line.
 The period is first added to the local date-time, then converted back
 to a zoned date-time using the zone ID.
 The conversion uses ofLocal(LocalDateTime, ZoneId, ZoneOffset)
 with the offset before the addition.
 
 Time units operate on the instant time-line.
 The period is first added to the local date-time, then converted back to
 a zoned date-time using the zone ID.
 The conversion uses ofInstant(LocalDateTime, ZoneOffset, ZoneId)
 with the offset before the addition.
 
 If the field is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.addTo(Temporal, long)
 passing this as the argument. In this case, the unit determines
 whether and how to perform the addition.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoZonedDateTime<LocalDate>
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount of the unit to add to the result, may be negative
unit - the unit of the amount to add, not null
Returns:
a ZonedDateTime based on this date-time with the specified amount added, not null
Throws:
DateTimeException - if the addition cannot be made
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,plus(TemporalAmount amountToAdd),ZonedDateTime,Returns a copy of this date-time with the specified amount added.,"

plus
public ZonedDateTime plus(TemporalAmount amountToAdd)
Returns a copy of this date-time with the specified amount added.
 
 This returns a ZonedDateTime, based on this one, with the specified amount added.
 The amount is typically Period or Duration but may be
 any other type implementing the TemporalAmount interface.
 
 The calculation is delegated to the amount object by calling
 TemporalAmount.addTo(Temporal). The amount implementation is free
 to implement the addition in any way it wishes, however it typically
 calls back to plus(long, TemporalUnit). Consult the documentation
 of the amount implementation to determine if it can be successfully added.
 
 This instance is immutable and unaffected by this method call.

Specified by:
plus in interface ChronoZonedDateTime<LocalDate>
Specified by:
plus in interface Temporal
Parameters:
amountToAdd - the amount to add, not null
Returns:
a ZonedDateTime based on this date-time with the addition made, not null
Throws:
DateTimeException - if the addition cannot be made
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,plusDays(long days),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of days added.,"

plusDays
public ZonedDateTime plusDays(long days)
Returns a copy of this ZonedDateTime with the specified number of days added.
 
 This operates on the local time-line,
 adding days to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
days - the days to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the days added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusHours(long hours),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of hours added.,"

plusHours
public ZonedDateTime plusHours(long hours)
Returns a copy of this ZonedDateTime with the specified number of hours added.
 
 This operates on the instant time-line, such that adding one hour will
 always be a duration of one hour later.
 This may cause the local date-time to change by an amount other than one hour.
 Note that this is a different approach to that used by days, months and years,
 thus adding one day is not the same as adding 24 hours.
 
 For example, consider a time-zone where the spring DST cutover means that the
 local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
 
Adding one hour to 00:30+02:00 will result in 01:30+02:00
 Adding one hour to 01:30+02:00 will result in 01:30+01:00
 Adding one hour to 01:30+01:00 will result in 02:30+01:00
 Adding three hours to 00:30+02:00 will result in 02:30+01:00
 

 This instance is immutable and unaffected by this method call.

Parameters:
hours - the hours to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the hours added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusMinutes(long minutes),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of minutes added.,"

plusMinutes
public ZonedDateTime plusMinutes(long minutes)
Returns a copy of this ZonedDateTime with the specified number of minutes added.
 
 This operates on the instant time-line, such that adding one minute will
 always be a duration of one minute later.
 This may cause the local date-time to change by an amount other than one minute.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minutes - the minutes to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the minutes added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusMonths(long months),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of months added.,"

plusMonths
public ZonedDateTime plusMonths(long months)
Returns a copy of this ZonedDateTime with the specified number of months added.
 
 This operates on the local time-line,
 adding months to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
months - the months to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the months added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusNanos(long nanos),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of nanoseconds added.,"

plusNanos
public ZonedDateTime plusNanos(long nanos)
Returns a copy of this ZonedDateTime with the specified number of nanoseconds added.
 
 This operates on the instant time-line, such that adding one nano will
 always be a duration of one nano later.
 This may cause the local date-time to change by an amount other than one nano.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanos - the nanos to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the nanoseconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusSeconds(long seconds),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of seconds added.,"

plusSeconds
public ZonedDateTime plusSeconds(long seconds)
Returns a copy of this ZonedDateTime with the specified number of seconds added.
 
 This operates on the instant time-line, such that adding one second will
 always be a duration of one second later.
 This may cause the local date-time to change by an amount other than one second.
 Note that this is a different approach to that used by days, months and years.
 
 This instance is immutable and unaffected by this method call.

Parameters:
seconds - the seconds to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the seconds added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusWeeks(long weeks),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of weeks added.,"

plusWeeks
public ZonedDateTime plusWeeks(long weeks)
Returns a copy of this ZonedDateTime with the specified number of weeks added.
 
 This operates on the local time-line,
 adding weeks to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
weeks - the weeks to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the weeks added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,plusYears(long years),ZonedDateTime,Returns a copy of this ZonedDateTime with the specified number of years added.,"

plusYears
public ZonedDateTime plusYears(long years)
Returns a copy of this ZonedDateTime with the specified number of years added.
 
 This operates on the local time-line,
 adding years to the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
years - the years to add, may be negative
Returns:
a ZonedDateTime based on this date-time with the years added, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,query(TemporalQuery<R> query),<R> R,Queries this date-time using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this date-time using the specified query.
 
 This queries this date-time using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface ChronoZonedDateTime<LocalDate>
Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
ZonedDateTime,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This date-time is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface ChronoZonedDateTime<LocalDate>
Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
ZonedDateTime,toLocalDate(),LocalDate,Gets the LocalDate part of this date-time.,"

toLocalDate
public LocalDate toLocalDate()
Gets the LocalDate part of this date-time.
 
 This returns a LocalDate with the same year, month and day
 as this date-time.

Specified by:
toLocalDate in interface ChronoZonedDateTime<LocalDate>
Returns:
the date part of this date-time, not null


"
ZonedDateTime,toLocalDateTime(),LocalDateTime,Gets the LocalDateTime part of this date-time.,"

toLocalDateTime
public LocalDateTime toLocalDateTime()
Gets the LocalDateTime part of this date-time.
 
 This returns a LocalDateTime with the same year, month, day and time
 as this date-time.

Specified by:
toLocalDateTime in interface ChronoZonedDateTime<LocalDate>
Returns:
the local date-time part of this date-time, not null


"
ZonedDateTime,toLocalTime(),LocalTime,Gets the LocalTime part of this date-time.,"

toLocalTime
public LocalTime toLocalTime()
Gets the LocalTime part of this date-time.
 
 This returns a LocalTime with the same hour, minute, second and
 nanosecond as this date-time.

Specified by:
toLocalTime in interface ChronoZonedDateTime<LocalDate>
Returns:
the time part of this date-time, not null


"
ZonedDateTime,toOffsetDateTime(),OffsetDateTime,Converts this date-time to an OffsetDateTime.,"

toOffsetDateTime
public OffsetDateTime toOffsetDateTime()
Converts this date-time to an OffsetDateTime.
 
 This creates an offset date-time using the local date-time and offset.
 The zone ID is ignored.

Returns:
an offset date-time representing the same local date-time and offset, not null


"
ZonedDateTime,toString(),String,"Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris].","

toString
public String toString()
Outputs this date-time as a String, such as
 2007-12-03T10:15:30+01:00[Europe/Paris].
 
 The format consists of the LocalDateTime followed by the ZoneOffset.
 If the ZoneId is not the same as the offset, then the ID is output.
 The output is compatible with ISO-8601 if the offset and ID are the same.

Specified by:
toString in interface ChronoZonedDateTime<LocalDate>
Overrides:
toString in class Object
Returns:
a string representation of this date-time, not null


"
ZonedDateTime,truncatedTo(TemporalUnit unit),ZonedDateTime,Returns a copy of this ZonedDateTime with the time truncated.,"

truncatedTo
public ZonedDateTime truncatedTo(TemporalUnit unit)
Returns a copy of this ZonedDateTime with the time truncated.
 
 Truncation returns a copy of the original date-time with fields
 smaller than the specified unit set to zero.
 For example, truncating with the minutes unit
 will set the second-of-minute and nano-of-second field to zero.
 
 The unit must have a duration
 that divides into the length of a standard day without remainder.
 This includes all supplied time units on ChronoUnit and
 DAYS. Other units throw an exception.
 
 This operates on the local time-line,
 truncating
 the underlying local date-time. This is then converted back to a
 ZonedDateTime, using the zone ID to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
unit - the unit to truncate to, not null
Returns:
a ZonedDateTime based on this date-time with the time truncated, not null
Throws:
DateTimeException - if unable to truncate
UnsupportedTemporalTypeException - if the unit is not supported


"
ZonedDateTime,"until(Temporal endExclusive, TemporalUnit unit)",long,Calculates the amount of time until another date-time in terms of the specified unit.,"

until
public long until(Temporal endExclusive,
                  TemporalUnit unit)
Calculates the amount of time until another date-time in terms of the specified unit.
 
 This calculates the amount of time between two ZonedDateTime
 objects in terms of a single TemporalUnit.
 The start and end points are this and the specified date-time.
 The result will be negative if the end is before the start.
 For example, the amount in days between two date-times can be calculated
 using startDateTime.until(endDateTime, DAYS).
 
 The Temporal passed to this method is converted to a
 ZonedDateTime using from(TemporalAccessor).
 If the time-zone differs between the two zoned date-times, the specified
 end date-time is normalized to have the same zone as this date-time.
 
 The calculation returns a whole number, representing the number of
 complete units between the two date-times.
 For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
 will only be one month as it is one minute short of two months.
 
 There are two equivalent ways of using this method.
 The first is to invoke this method.
 The second is to use TemporalUnit.between(Temporal, Temporal):
 
   // these two lines are equivalent
   amount = start.until(end, MONTHS);
   amount = MONTHS.between(start, end);
 
 The choice should be made based on which makes the code more readable.
 
 The calculation is implemented in this method for ChronoUnit.
 The units NANOS, MICROS, MILLIS, SECONDS,
 MINUTES, HOURS and HALF_DAYS, DAYS,
 WEEKS, MONTHS, YEARS, DECADES,
 CENTURIES, MILLENNIA and ERAS are supported.
 Other ChronoUnit values will throw an exception.
 
 The calculation for date and time units differ.
 
 Date units operate on the local time-line, using the local date-time.
 For example, the period from noon on day 1 to noon the following day
 in days will always be counted as exactly one day, irrespective of whether
 there was a daylight savings change or not.
 
 Time units operate on the instant time-line.
 The calculation effectively converts both zoned date-times to instants
 and then calculates the period between the instants.
 For example, the period from noon on day 1 to noon the following day
 in hours may be 23, 24 or 25 hours (or some other amount) depending on
 whether there was a daylight savings change or not.
 
 If the unit is not a ChronoUnit, then the result of this method
 is obtained by invoking TemporalUnit.between(Temporal, Temporal)
 passing this as the first argument and the converted input temporal
 as the second argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
until in interface Temporal
Parameters:
endExclusive - the end date, exclusive, which is converted to a ZonedDateTime, not null
unit - the unit to measure the amount in, not null
Returns:
the amount of time between this date-time and the end date-time
Throws:
DateTimeException - if the amount cannot be calculated, or the end
  temporal cannot be converted to a ZonedDateTime
UnsupportedTemporalTypeException - if the unit is not supported
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,with(TemporalAdjuster adjuster),ZonedDateTime,Returns an adjusted copy of this date-time.,"

with
public ZonedDateTime with(TemporalAdjuster adjuster)
Returns an adjusted copy of this date-time.
 
 This returns a ZonedDateTime, based on this one, with the date-time adjusted.
 The adjustment takes place using the specified adjuster strategy object.
 Read the documentation of the adjuster to understand what adjustment will be made.
 
 A simple adjuster might simply set the one of the fields, such as the year field.
 A more complex adjuster might set the date to the last day of the month.
 A selection of common adjustments is provided in
 TemporalAdjusters.
 These include finding the ""last day of the month"" and ""next Wednesday"".
 Key date-time classes also implement the TemporalAdjuster interface,
 such as Month and MonthDay.
 The adjuster is responsible for handling special cases, such as the varying
 lengths of month and leap years.
 
 For example this code returns a date on the last day of July:
 
  import static java.time.Month.*;
  import static java.time.temporal.TemporalAdjusters.*;

  result = zonedDateTime.with(JULY).with(lastDayOfMonth());
 

 The classes LocalDate and LocalTime implement TemporalAdjuster,
 thus this method can be used to change the date, time or offset:
 
  result = zonedDateTime.with(date);
  result = zonedDateTime.with(time);
 

ZoneOffset also implements TemporalAdjuster however using it
 as an argument typically has no effect. The offset of a ZonedDateTime is
 controlled primarily by the time-zone. As such, changing the offset does not generally
 make sense, because there is only one valid offset for the local date-time and zone.
 If the zoned date-time is in a daylight savings overlap, then the offset is used
 to switch between the two valid offsets. In all other cases, the offset is ignored.
 
 The result of this method is obtained by invoking the
 TemporalAdjuster.adjustInto(Temporal) method on the
 specified adjuster passing this as the argument.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoZonedDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
adjuster - the adjuster to use, not null
Returns:
a ZonedDateTime based on this with the adjustment made, not null
Throws:
DateTimeException - if the adjustment cannot be made
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,"with(TemporalField field, long newValue)",ZonedDateTime,Returns a copy of this date-time with the specified field set to a new value.,"

with
public ZonedDateTime with(TemporalField field,
                          long newValue)
Returns a copy of this date-time with the specified field set to a new value.
 
 This returns a ZonedDateTime, based on this one, with the value
 for the specified field changed.
 This can be used to change any supported field, such as the year, month or day-of-month.
 If it is not possible to set the value, because the field is not supported or for
 some other reason, an exception is thrown.
 
 In some cases, changing the specified field can cause the resulting date-time to become invalid,
 such as changing the month from 31st January to February would make the day-of-month invalid.
 In cases like this, the field is responsible for resolving the date. Typically it will choose
 the previous valid date, which would be the last valid day of February in this example.
 
 If the field is a ChronoField then the adjustment is implemented here.
 
 The INSTANT_SECONDS field will return a date-time with the specified instant.
 The zone and nano-of-second are unchanged.
 The result will have an offset derived from the new instant and original zone.
 If the new instant value is outside the valid range then a DateTimeException will be thrown.
 
 The OFFSET_SECONDS field will typically be ignored.
 The offset of a ZonedDateTime is controlled primarily by the time-zone.
 As such, changing the offset does not generally make sense, because there is only
 one valid offset for the local date-time and zone.
 If the zoned date-time is in a daylight savings overlap, then the offset is used
 to switch between the two valid offsets. In all other cases, the offset is ignored.
 If the new offset value is outside the valid range then a DateTimeException will be thrown.
 
 The other supported fields will behave as per
 the matching method on LocalDateTime.
 The zone is not part of the calculation and will be unchanged.
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.adjustInto(Temporal, long)
 passing this as the argument. In this case, the field determines
 whether and how to adjust the instant.
 
 This instance is immutable and unaffected by this method call.

Specified by:
with in interface ChronoZonedDateTime<LocalDate>
Specified by:
with in interface Temporal
Parameters:
field - the field to set in the result, not null
newValue - the new value of the field in the result
Returns:
a ZonedDateTime based on this with the specified field set, not null
Throws:
DateTimeException - if the field cannot be set
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
ZonedDateTime,withDayOfMonth(int dayOfMonth),ZonedDateTime,Returns a copy of this ZonedDateTime with the day-of-month altered.,"

withDayOfMonth
public ZonedDateTime withDayOfMonth(int dayOfMonth)
Returns a copy of this ZonedDateTime with the day-of-month altered.
 
 This operates on the local time-line,
 changing the day-of-month of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfMonth - the day-of-month to set in the result, from 1 to 28-31
Returns:
a ZonedDateTime based on this date-time with the requested day, not null
Throws:
DateTimeException - if the day-of-month value is invalid,
  or if the day-of-month is invalid for the month-year


"
ZonedDateTime,withDayOfYear(int dayOfYear),ZonedDateTime,Returns a copy of this ZonedDateTime with the day-of-year altered.,"

withDayOfYear
public ZonedDateTime withDayOfYear(int dayOfYear)
Returns a copy of this ZonedDateTime with the day-of-year altered.
 
 This operates on the local time-line,
 changing the day-of-year of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
dayOfYear - the day-of-year to set in the result, from 1 to 365-366
Returns:
a ZonedDateTime based on this date with the requested day, not null
Throws:
DateTimeException - if the day-of-year value is invalid,
  or if the day-of-year is invalid for the year


"
ZonedDateTime,withEarlierOffsetAtOverlap(),ZonedDateTime,Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap.,"

withEarlierOffsetAtOverlap
public ZonedDateTime withEarlierOffsetAtOverlap()
Returns a copy of this date-time changing the zone offset to the
 earlier of the two valid offsets at a local time-line overlap.
 
 This method only has any effect when the local time-line overlaps, such as
 at an autumn daylight savings cutover. In this scenario, there are two
 valid offsets for the local date-time. Calling this method will return
 a zoned date-time with the earlier of the two selected.
 
 If this method is called when it is not an overlap, this
 is returned.
 
 This instance is immutable and unaffected by this method call.

Specified by:
withEarlierOffsetAtOverlap in interface ChronoZonedDateTime<LocalDate>
Returns:
a ZonedDateTime based on this date-time with the earlier offset, not null


"
ZonedDateTime,withFixedOffsetZone(),ZonedDateTime,Returns a copy of this date-time with the zone ID set to the offset.,"

withFixedOffsetZone
public ZonedDateTime withFixedOffsetZone()
Returns a copy of this date-time with the zone ID set to the offset.
 
 This returns a zoned date-time where the zone ID is the same as getOffset().
 The local date-time, offset and instant of the result will be the same as in this date-time.
 
 Setting the date-time to a fixed single offset means that any future
 calculations, such as addition or subtraction, have no complex edge cases
 due to time-zone rules.
 This might also be useful when sending a zoned date-time across a network,
 as most protocols, such as ISO-8601, only handle offsets,
 and not region-based zone IDs.
 
 This is equivalent to ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset()).

Returns:
a ZonedDateTime with the zone ID set to the offset, not null


"
ZonedDateTime,withHour(int hour),ZonedDateTime,Returns a copy of this ZonedDateTime with the hour-of-day altered.,"

withHour
public ZonedDateTime withHour(int hour)
Returns a copy of this ZonedDateTime with the hour-of-day altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
hour - the hour-of-day to set in the result, from 0 to 23
Returns:
a ZonedDateTime based on this date-time with the requested hour, not null
Throws:
DateTimeException - if the hour value is invalid


"
ZonedDateTime,withLaterOffsetAtOverlap(),ZonedDateTime,Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap.,"

withLaterOffsetAtOverlap
public ZonedDateTime withLaterOffsetAtOverlap()
Returns a copy of this date-time changing the zone offset to the
 later of the two valid offsets at a local time-line overlap.
 
 This method only has any effect when the local time-line overlaps, such as
 at an autumn daylight savings cutover. In this scenario, there are two
 valid offsets for the local date-time. Calling this method will return
 a zoned date-time with the later of the two selected.
 
 If this method is called when it is not an overlap, this
 is returned.
 
 This instance is immutable and unaffected by this method call.

Specified by:
withLaterOffsetAtOverlap in interface ChronoZonedDateTime<LocalDate>
Returns:
a ZonedDateTime based on this date-time with the later offset, not null


"
ZonedDateTime,withMinute(int minute),ZonedDateTime,Returns a copy of this ZonedDateTime with the minute-of-hour altered.,"

withMinute
public ZonedDateTime withMinute(int minute)
Returns a copy of this ZonedDateTime with the minute-of-hour altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
minute - the minute-of-hour to set in the result, from 0 to 59
Returns:
a ZonedDateTime based on this date-time with the requested minute, not null
Throws:
DateTimeException - if the minute value is invalid


"
ZonedDateTime,withMonth(int month),ZonedDateTime,Returns a copy of this ZonedDateTime with the month-of-year altered.,"

withMonth
public ZonedDateTime withMonth(int month)
Returns a copy of this ZonedDateTime with the month-of-year altered.
 
 This operates on the local time-line,
 changing the month of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
month - the month-of-year to set in the result, from 1 (January) to 12 (December)
Returns:
a ZonedDateTime based on this date-time with the requested month, not null
Throws:
DateTimeException - if the month-of-year value is invalid


"
ZonedDateTime,withNano(int nanoOfSecond),ZonedDateTime,Returns a copy of this ZonedDateTime with the nano-of-second altered.,"

withNano
public ZonedDateTime withNano(int nanoOfSecond)
Returns a copy of this ZonedDateTime with the nano-of-second altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999
Returns:
a ZonedDateTime based on this date-time with the requested nanosecond, not null
Throws:
DateTimeException - if the nano value is invalid


"
ZonedDateTime,withSecond(int second),ZonedDateTime,Returns a copy of this ZonedDateTime with the second-of-minute altered.,"

withSecond
public ZonedDateTime withSecond(int second)
Returns a copy of this ZonedDateTime with the second-of-minute altered.
 
 This operates on the local time-line,
 changing the time of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
second - the second-of-minute to set in the result, from 0 to 59
Returns:
a ZonedDateTime based on this date-time with the requested second, not null
Throws:
DateTimeException - if the second value is invalid


"
ZonedDateTime,withYear(int year),ZonedDateTime,Returns a copy of this ZonedDateTime with the year altered.,"

withYear
public ZonedDateTime withYear(int year)
Returns a copy of this ZonedDateTime with the year altered.
 
 This operates on the local time-line,
 changing the year of the local date-time.
 This is then converted back to a ZonedDateTime, using the zone ID
 to obtain the offset.
 
 When converting back to ZonedDateTime, if the local date-time is in an overlap,
 then the offset will be retained if possible, otherwise the earlier offset will be used.
 If in a gap, the local date-time will be adjusted forward by the length of the gap.
 
 This instance is immutable and unaffected by this method call.

Parameters:
year - the year to set in the result, from MIN_YEAR to MAX_YEAR
Returns:
a ZonedDateTime based on this date-time with the requested year, not null
Throws:
DateTimeException - if the year value is invalid


"
ZonedDateTime,withZoneSameInstant(ZoneId zone),ZonedDateTime,"Returns a copy of this date-time with a different time-zone, retaining the instant.","

withZoneSameInstant
public ZonedDateTime withZoneSameInstant(ZoneId zone)
Returns a copy of this date-time with a different time-zone,
 retaining the instant.
 
 This method changes the time-zone and retains the instant.
 This normally results in a change to the local date-time.
 
 This method is based on retaining the same instant, thus gaps and overlaps
 in the local time-line have no effect on the result.
 
 To change the offset while keeping the local time,
 use withZoneSameLocal(ZoneId).

Specified by:
withZoneSameInstant in interface ChronoZonedDateTime<LocalDate>
Parameters:
zone - the time-zone to change to, not null
Returns:
a ZonedDateTime based on this date-time with the requested zone, not null
Throws:
DateTimeException - if the result exceeds the supported date range


"
ZonedDateTime,withZoneSameLocal(ZoneId zone),ZonedDateTime,"Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible.","

withZoneSameLocal
public ZonedDateTime withZoneSameLocal(ZoneId zone)
Returns a copy of this date-time with a different time-zone,
 retaining the local date-time if possible.
 
 This method changes the time-zone and retains the local date-time.
 The local date-time is only changed if it is invalid for the new zone,
 determined using the same approach as
 ofLocal(LocalDateTime, ZoneId, ZoneOffset).
 
 To change the zone and adjust the local date-time,
 use withZoneSameInstant(ZoneId).
 
 This instance is immutable and unaffected by this method call.

Specified by:
withZoneSameLocal in interface ChronoZonedDateTime<LocalDate>
Parameters:
zone - the time-zone to change to, not null
Returns:
a ZonedDateTime based on this date-time with the requested zone, not null


"
ZoneId,equals(Object obj),boolean,Checks if this time-zone ID is equal to another time-zone ID.,"

equals
public boolean equals(Object obj)
Checks if this time-zone ID is equal to another time-zone ID.
 
 The comparison is based on the ID.

Overrides:
equals in class Object
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other time-zone ID
See Also:
Object.hashCode(), 
HashMap


"
ZoneId,from(TemporalAccessor temporal),static ZoneId,Obtains an instance of ZoneId from a temporal object.,"

from
public static ZoneId from(TemporalAccessor temporal)
Obtains an instance of ZoneId from a temporal object.
 
 This obtains a zone based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of ZoneId.
 
 A TemporalAccessor represents some form of date and time information.
 This factory converts the arbitrary temporal object to an instance of ZoneId.
 
 The conversion will try to obtain the zone in a way that favours region-based
 zones over offset-based zones using TemporalQueries.zone().
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, ZoneId::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the zone ID, not null
Throws:
DateTimeException - if unable to convert to a ZoneId


"
ZoneId,getAvailableZoneIds(),static Set<String>,Gets the set of available zone IDs.,"

getAvailableZoneIds
public static Set<String> getAvailableZoneIds()
Gets the set of available zone IDs.
 
 This set includes the string form of all available region-based IDs.
 Offset-based zone IDs are not included in the returned set.
 The ID can be passed to of(String) to create a ZoneId.
 
 The set of zone IDs can increase over time, although in a typical application
 the set of IDs is fixed. Each call to this method is thread-safe.

Returns:
a modifiable copy of the set of zone IDs, not null


"
ZoneId,"getDisplayName(TextStyle style, Locale locale)",String,"Gets the textual representation of the zone, such as 'British Time' or '+02:00'.","

getDisplayName
public String getDisplayName(TextStyle style,
                             Locale locale)
Gets the textual representation of the zone, such as 'British Time' or
 '+02:00'.
 
 This returns the textual name used to identify the time-zone ID,
 suitable for presentation to the user.
 The parameters control the style of the returned text and the locale.
 
 If no textual mapping is found then the full ID is returned.

Parameters:
style - the length of the text required, not null
locale - the locale to use, not null
Returns:
the text value of the zone, not null


"
ZoneId,getId(),abstract String,Gets the unique time-zone ID.,"

getId
public abstract String getId()
Gets the unique time-zone ID.
 
 This ID uniquely defines this object.
 The format of an offset based ID is defined by ZoneOffset.getId().

Returns:
the time-zone unique ID, not null


"
ZoneId,getRules(),abstract ZoneRules,Gets the time-zone rules for this ID allowing calculations to be performed.,"

getRules
public abstract ZoneRules getRules()
Gets the time-zone rules for this ID allowing calculations to be performed.
 
 The rules provide the functionality associated with a time-zone,
 such as finding the offset for a given instant or local date-time.
 
 A time-zone can be invalid if it is deserialized in a Java Runtime which
 does not have the same rules loaded as the Java Runtime that stored it.
 In this case, calling this method will throw a ZoneRulesException.
 
 The rules are supplied by ZoneRulesProvider. An advanced provider may
 support dynamic updates to the rules without restarting the Java Runtime.
 If so, then the result of this method may change over time.
 Each individual call will be still remain thread-safe.
 
ZoneOffset will always return a set of rules where the offset never changes.

Returns:
the rules, not null
Throws:
ZoneRulesException - if no rules are available for this ID


"
ZoneId,hashCode(),int,A hash code for this time-zone ID.,"

hashCode
public int hashCode()
A hash code for this time-zone ID.

Overrides:
hashCode in class Object
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ZoneId,normalized(),ZoneId,"Normalizes the time-zone ID, returning a ZoneOffset where possible.","

normalized
public ZoneId normalized()
Normalizes the time-zone ID, returning a ZoneOffset where possible.
 
 The returns a normalized ZoneId that can be used in place of this ID.
 The result will have ZoneRules equivalent to those returned by this object,
 however the ID returned by getId() may be different.
 
 The normalization checks if the rules of this ZoneId have a fixed offset.
 If they do, then the ZoneOffset equal to that offset is returned.
 Otherwise this is returned.

Returns:
the time-zone unique ID, not null


"
ZoneId,of(String zoneId),static ZoneId,Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use.,"

of
public static ZoneId of(String zoneId)
Obtains an instance of ZoneId from an ID ensuring that the
 ID is valid and available for use.
 
 This method parses the ID producing a ZoneId or ZoneOffset.
 A ZoneOffset is returned if the ID is 'Z', or starts with '+' or '-'.
 The result will always be a valid ID for which ZoneRules can be obtained.
 
 Parsing matches the zone ID step by step as follows.
 
If the zone ID equals 'Z', the result is ZoneOffset.UTC.
 If the zone ID consists of a single letter, the zone ID is invalid
  and DateTimeException is thrown.
 If the zone ID starts with '+' or '-', the ID is parsed as a
  ZoneOffset using ZoneOffset.of(String).
 If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a ZoneId
  with the same ID and rules equivalent to ZoneOffset.UTC.
 If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'
  then the ID is a prefixed offset-based ID. The ID is split in two, with
  a two or three letter prefix and a suffix starting with the sign.
  The suffix is parsed as a ZoneOffset.
  The result will be a ZoneId with the specified UTC/GMT/UT prefix
  and the normalized offset ID as per ZoneOffset.getId().
  The rules of the returned ZoneId will be equivalent to the
  parsed ZoneOffset.
 All other IDs are parsed as region-based zone IDs. Region IDs must
  match the regular expression [A-Za-z][A-Za-z0-9~/._+-]+
  otherwise a DateTimeException is thrown. If the zone ID is not
  in the configured set of IDs, ZoneRulesException is thrown.
  The detailed format of the region ID depends on the group supplying the data.
  The default set of data is supplied by the IANA Time Zone Database (TZDB).
  This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.
  This is compatible with most IDs from TimeZone.
 

Parameters:
zoneId - the time-zone ID, not null
Returns:
the zone ID, not null
Throws:
DateTimeException - if the zone ID has an invalid format
ZoneRulesException - if the zone ID is a region ID that cannot be found


"
ZoneId,"of(String zoneId, Map<String,String> aliasMap)",static ZoneId,Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs.,"

of
public static ZoneId of(String zoneId,
                        Map<String,String> aliasMap)
Obtains an instance of ZoneId using its ID using a map
 of aliases to supplement the standard zone IDs.
 
 Many users of time-zones use short abbreviations, such as PST for
 'Pacific Standard Time' and PDT for 'Pacific Daylight Time'.
 These abbreviations are not unique, and so cannot be used as IDs.
 This method allows a map of string to time-zone to be setup and reused
 within an application.

Parameters:
zoneId - the time-zone ID, not null
aliasMap - a map of alias zone IDs (typically abbreviations) to real zone IDs, not null
Returns:
the zone ID, not null
Throws:
DateTimeException - if the zone ID has an invalid format
ZoneRulesException - if the zone ID is a region ID that cannot be found


"
ZoneId,"ofOffset(String prefix, ZoneOffset offset)",static ZoneId,Obtains an instance of ZoneId wrapping an offset.,"

ofOffset
public static ZoneId ofOffset(String prefix,
                              ZoneOffset offset)
Obtains an instance of ZoneId wrapping an offset.
 
 If the prefix is ""GMT"", ""UTC"", or ""UT"" a ZoneId
 with the prefix and the non-zero offset is returned.
 If the prefix is empty """" the ZoneOffset is returned.

Parameters:
prefix - the time-zone ID, not null
offset - the offset, not null
Returns:
the zone ID, not null
Throws:
IllegalArgumentException - if the prefix is not one of
     ""GMT"", ""UTC"", or ""UT"", or """"


"
ZoneId,systemDefault(),static ZoneId,Gets the system default time-zone.,"

systemDefault
public static ZoneId systemDefault()
Gets the system default time-zone.
 
 This queries TimeZone.getDefault() to find the default time-zone
 and converts it to a ZoneId. If the system default time-zone is changed,
 then the result of this method will also change.

Returns:
the zone ID, not null
Throws:
DateTimeException - if the converted zone ID has an invalid format
ZoneRulesException - if the converted zone region ID cannot be found


"
ZoneId,toString(),String,"Outputs this zone as a String, using the ID.","

toString
public String toString()
Outputs this zone as a String, using the ID.

Overrides:
toString in class Object
Returns:
a string representation of this time-zone ID, not null


"
ZoneOffset,adjustInto(Temporal temporal),Temporal,Adjusts the specified temporal object to have the same offset as this object.,"

adjustInto
public Temporal adjustInto(Temporal temporal)
Adjusts the specified temporal object to have the same offset as this object.
 
 This returns a temporal object of the same observable type as the input
 with the offset changed to be the same as this.
 
 The adjustment is equivalent to using Temporal.with(TemporalField, long)
 passing ChronoField.OFFSET_SECONDS as the field.
 
 In most cases, it is clearer to reverse the calling pattern by using
 Temporal.with(TemporalAdjuster):
 
   // these two lines are equivalent, but the second approach is recommended
   temporal = thisOffset.adjustInto(temporal);
   temporal = temporal.with(thisOffset);
 

 This instance is immutable and unaffected by this method call.

Specified by:
adjustInto in interface TemporalAdjuster
Parameters:
temporal - the target object to be adjusted, not null
Returns:
the adjusted object, not null
Throws:
DateTimeException - if unable to make the adjustment
ArithmeticException - if numeric overflow occurs


"
ZoneOffset,compareTo(ZoneOffset other),int,Compares this offset to another offset in descending order.,"

compareTo
public int compareTo(ZoneOffset other)
Compares this offset to another offset in descending order.
 
 The offsets are compared in the order that they occur for the same time
 of day around the world. Thus, an offset of +10:00 comes before an
 offset of +09:00 and so on down to -18:00.
 
 The comparison is ""consistent with equals"", as defined by Comparable.

Specified by:
compareTo in interface Comparable<ZoneOffset>
Parameters:
other - the other date to compare to, not null
Returns:
the comparator value, negative if less, positive if greater
Throws:
NullPointerException - if other is null


"
ZoneOffset,equals(Object obj),boolean,Checks if this offset is equal to another offset.,"

equals
public boolean equals(Object obj)
Checks if this offset is equal to another offset.
 
 The comparison is based on the amount of the offset in seconds.
 This is equivalent to a comparison by ID.

Overrides:
equals in class ZoneId
Parameters:
obj - the object to check, null returns false
Returns:
true if this is equal to the other offset
See Also:
Object.hashCode(), 
HashMap


"
ZoneOffset,from(TemporalAccessor temporal),static ZoneOffset,Obtains an instance of ZoneOffset from a temporal object.,"

from
public static ZoneOffset from(TemporalAccessor temporal)
Obtains an instance of ZoneOffset from a temporal object.
 
 This obtains an offset based on the specified temporal.
 A TemporalAccessor represents an arbitrary set of date and time information,
 which this factory converts to an instance of ZoneOffset.
 
 A TemporalAccessor represents some form of date and time information.
 This factory converts the arbitrary temporal object to an instance of ZoneOffset.
 
 The conversion uses the TemporalQueries.offset() query, which relies
 on extracting the OFFSET_SECONDS field.
 
 This method matches the signature of the functional interface TemporalQuery
 allowing it to be used as a query via method reference, ZoneOffset::from.

Parameters:
temporal - the temporal object to convert, not null
Returns:
the zone-offset, not null
Throws:
DateTimeException - if unable to convert to an ZoneOffset


"
ZoneOffset,get(TemporalField field),int,Gets the value of the specified field from this offset as an int.,"

get
public int get(TemporalField field)
Gets the value of the specified field from this offset as an int.
 
 This queries this offset for the value of the specified field.
 The returned value will always be within the valid range of values for the field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The OFFSET_SECONDS field returns the value of the offset.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
get in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained or
         the value is outside the range of valid values for the field
UnsupportedTemporalTypeException - if the field is not supported or
         the range of values exceeds an int
ArithmeticException - if numeric overflow occurs


"
ZoneOffset,getId(),String,Gets the normalized zone offset ID.,"

getId
public String getId()
Gets the normalized zone offset ID.
 
 The ID is minor variation to the standard ISO-8601 formatted string
 for the offset. There are three formats:
 
Z - for UTC (ISO-8601)
 +hh:mm or -hh:mm - if the seconds are zero (ISO-8601)
 +hh:mm:ss or -hh:mm:ss - if the seconds are non-zero (not ISO-8601)
 

Specified by:
getId in class ZoneId
Returns:
the zone offset ID, not null


"
ZoneOffset,getLong(TemporalField field),long,Gets the value of the specified field from this offset as a long.,"

getLong
public long getLong(TemporalField field)
Gets the value of the specified field from this offset as a long.
 
 This queries this offset for the value of the specified field.
 If it is not possible to return the value, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The OFFSET_SECONDS field returns the value of the offset.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.getFrom(TemporalAccessor)
 passing this as the argument. Whether the value can be obtained,
 and what the value represents, is determined by the field.

Specified by:
getLong in interface TemporalAccessor
Parameters:
field - the field to get, not null
Returns:
the value for the field
Throws:
DateTimeException - if a value for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported
ArithmeticException - if numeric overflow occurs


"
ZoneOffset,getRules(),ZoneRules,Gets the associated time-zone rules.,"

getRules
public ZoneRules getRules()
Gets the associated time-zone rules.
 
 The rules will always return this offset when queried.
 The implementation class is immutable, thread-safe and serializable.

Specified by:
getRules in class ZoneId
Returns:
the rules, not null


"
ZoneOffset,getTotalSeconds(),int,Gets the total zone offset in seconds.,"

getTotalSeconds
public int getTotalSeconds()
Gets the total zone offset in seconds.
 
 This is the primary way to access the offset amount.
 It returns the total of the hours, minutes and seconds fields as a
 single offset that can be added to a time.

Returns:
the total zone offset amount in seconds


"
ZoneOffset,hashCode(),int,A hash code for this offset.,"

hashCode
public int hashCode()
A hash code for this offset.

Overrides:
hashCode in class ZoneId
Returns:
a suitable hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ZoneOffset,isSupported(TemporalField field),boolean,Checks if the specified field is supported.,"

isSupported
public boolean isSupported(TemporalField field)
Checks if the specified field is supported.
 
 This checks if this offset can be queried for the specified field.
 If false, then calling the range and
 get methods will throw an exception.
 
 If the field is a ChronoField then the query is implemented here.
 The OFFSET_SECONDS field returns true.
 All other ChronoField instances will return false.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor)
 passing this as the argument.
 Whether the field is supported is determined by the field.

Specified by:
isSupported in interface TemporalAccessor
Parameters:
field - the field to check, null returns false
Returns:
true if the field is supported on this offset, false if not


"
ZoneOffset,of(String offsetId),static ZoneOffset,Obtains an instance of ZoneOffset using the ID.,"

of
public static ZoneOffset of(String offsetId)
Obtains an instance of ZoneOffset using the ID.
 
 This method parses the string ID of a ZoneOffset to
 return an instance. The parsing accepts all the formats generated by
 getId(), plus some additional formats:
 
Z - for UTC
 +h
+hh
+hh:mm
-hh:mm
+hhmm
-hhmm
+hh:mm:ss
-hh:mm:ss
+hhmmss
-hhmmss

 Note that ± means either the plus or minus symbol.
 
 The ID of the returned offset will be normalized to one of the formats
 described by getId().
 
 The maximum supported range is from +18:00 to -18:00 inclusive.

Parameters:
offsetId - the offset ID, not null
Returns:
the zone-offset, not null
Throws:
DateTimeException - if the offset ID is invalid


"
ZoneOffset,ofHours(int hours),static ZoneOffset,Obtains an instance of ZoneOffset using an offset in hours.,"

ofHours
public static ZoneOffset ofHours(int hours)
Obtains an instance of ZoneOffset using an offset in hours.

Parameters:
hours - the time-zone offset in hours, from -18 to +18
Returns:
the zone-offset, not null
Throws:
DateTimeException - if the offset is not in the required range


"
ZoneOffset,"ofHoursMinutes(int hours, int minutes)",static ZoneOffset,Obtains an instance of ZoneOffset using an offset in hours and minutes.,"

ofHoursMinutes
public static ZoneOffset ofHoursMinutes(int hours,
                                        int minutes)
Obtains an instance of ZoneOffset using an offset in
 hours and minutes.
 
 The sign of the hours and minutes components must match.
 Thus, if the hours is negative, the minutes must be negative or zero.
 If the hours is zero, the minutes may be positive, negative or zero.

Parameters:
hours - the time-zone offset in hours, from -18 to +18
minutes - the time-zone offset in minutes, from 0 to ±59, sign matches hours
Returns:
the zone-offset, not null
Throws:
DateTimeException - if the offset is not in the required range


"
ZoneOffset,"ofHoursMinutesSeconds(int hours, int minutes, int seconds)",static ZoneOffset,"Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds.","

ofHoursMinutesSeconds
public static ZoneOffset ofHoursMinutesSeconds(int hours,
                                               int minutes,
                                               int seconds)
Obtains an instance of ZoneOffset using an offset in
 hours, minutes and seconds.
 
 The sign of the hours, minutes and seconds components must match.
 Thus, if the hours is negative, the minutes and seconds must be negative or zero.

Parameters:
hours - the time-zone offset in hours, from -18 to +18
minutes - the time-zone offset in minutes, from 0 to ±59, sign matches hours and seconds
seconds - the time-zone offset in seconds, from 0 to ±59, sign matches hours and minutes
Returns:
the zone-offset, not null
Throws:
DateTimeException - if the offset is not in the required range


"
ZoneOffset,ofTotalSeconds(int totalSeconds),static ZoneOffset,Obtains an instance of ZoneOffset specifying the total offset in seconds,"

ofTotalSeconds
public static ZoneOffset ofTotalSeconds(int totalSeconds)
Obtains an instance of ZoneOffset specifying the total offset in seconds
 
 The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.

Parameters:
totalSeconds - the total time-zone offset in seconds, from -64800 to +64800
Returns:
the ZoneOffset, not null
Throws:
DateTimeException - if the offset is not in the required range


"
ZoneOffset,query(TemporalQuery<R> query),<R> R,Queries this offset using the specified query.,"

query
public <R> R query(TemporalQuery<R> query)
Queries this offset using the specified query.
 
 This queries this offset using the specified query strategy object.
 The TemporalQuery object defines the logic to be used to
 obtain the result. Read the documentation of the query to understand
 what the result of this method will be.
 
 The result of this method is obtained by invoking the
 TemporalQuery.queryFrom(TemporalAccessor) method on the
 specified query passing this as the argument.

Specified by:
query in interface TemporalAccessor
Type Parameters:
R - the type of the result
Parameters:
query - the query to invoke, not null
Returns:
the query result, null may be returned (defined by the query)
Throws:
DateTimeException - if unable to query (defined by the query)
ArithmeticException - if numeric overflow occurs (defined by the query)


"
ZoneOffset,range(TemporalField field),ValueRange,Gets the range of valid values for the specified field.,"

range
public ValueRange range(TemporalField field)
Gets the range of valid values for the specified field.
 
 The range object expresses the minimum and maximum valid values for a field.
 This offset is used to enhance the accuracy of the returned range.
 If it is not possible to return the range, because the field is not supported
 or for some other reason, an exception is thrown.
 
 If the field is a ChronoField then the query is implemented here.
 The supported fields will return
 appropriate range instances.
 All other ChronoField instances will throw an UnsupportedTemporalTypeException.
 
 If the field is not a ChronoField, then the result of this method
 is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor)
 passing this as the argument.
 Whether the range can be obtained is determined by the field.

Specified by:
range in interface TemporalAccessor
Parameters:
field - the field to query the range for, not null
Returns:
the range of valid values for the field, not null
Throws:
DateTimeException - if the range for the field cannot be obtained
UnsupportedTemporalTypeException - if the field is not supported


"
ZoneOffset,toString(),String,"Outputs this offset as a String, using the normalized ID.","

toString
public String toString()
Outputs this offset as a String, using the normalized ID.

Overrides:
toString in class ZoneId
Returns:
a string representation of this offset, not null


"
