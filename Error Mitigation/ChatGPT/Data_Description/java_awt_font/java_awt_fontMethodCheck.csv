Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,FontRenderContext,1,"FontRenderContext(AffineTransform tx, boolean isAntiAliased, boolean usesFractionalMetrics)",False,,NULL
0,FontRenderContext,2,boolean isAntiAliased(),True,,"

isAntiAliased
public boolean isAntiAliased()
Returns a boolean which indicates whether or not some form of
 antialiasing is specified by this FontRenderContext.
 Call getAntiAliasingHint()
 for the specific rendering hint value.

Returns:
true, if text is anti-aliased in this
   FontRenderContext; false otherwise.
See Also:
RenderingHints.KEY_TEXT_ANTIALIASING, 
FontRenderContext(AffineTransform,boolean,boolean), 
FontRenderContext(AffineTransform,Object,Object)


"
0,FontRenderContext,3,boolean usesFractionalMetrics(),True,,"

usesFractionalMetrics
public boolean usesFractionalMetrics()
Returns a boolean which whether text fractional metrics mode
 is used in this FontRenderContext.
 Call getFractionalMetricsHint()
 to obtain the corresponding rendering hint value.

Returns:
true, if layout should be performed with
   fractional metrics; false otherwise.
               in this FontRenderContext.
See Also:
RenderingHints.KEY_FRACTIONALMETRICS, 
FontRenderContext(AffineTransform,boolean,boolean), 
FontRenderContext(AffineTransform,Object,Object)


"
0,FontRenderContext,4,AffineTransform getTransform(),True,,"

getTransform
public AffineTransform getTransform()
Gets the transform that is used to scale typographical points
   to pixels in this FontRenderContext.

Returns:
the AffineTransform of this
    FontRenderContext.
See Also:
AffineTransform


"
0,FontRenderContext,5,Object getAntiAliasingHint(),True,,"

getAntiAliasingHint
public Object getAntiAliasingHint()
Return the text anti-aliasing rendering mode hint used in this
 FontRenderContext.
 This will be one of the text antialiasing rendering hint values
 defined in java.awt.RenderingHints.

Returns:
text anti-aliasing rendering mode hint used in this
 FontRenderContext.
Since:
1.6


"
1,GlyphJustificationInfo,1,float getWeight(),False,,NULL
1,GlyphJustificationInfo,2,float getGrowAbsorb(),False,,NULL
1,GlyphJustificationInfo,3,float getGrowPriority(),False,,NULL
1,GlyphJustificationInfo,4,float getShrinkAbsorb(),False,,NULL
1,GlyphJustificationInfo,5,float getShrinkPriority(),False,,NULL
2,GlyphMetrics,1,float getAdvance(),True,,"

getAdvance
public float getAdvance()
Returns the advance of the glyph along the baseline (either
 horizontal or vertical).

Returns:
the advance of the glyph


"
2,GlyphMetrics,2,float getLSB(),True,,"

getLSB
public float getLSB()
Returns the left (top) side bearing of the glyph.
 
 This is the distance from 0, 0 to the left (top) of the glyph
 bounds.  If the bounds of the glyph is to the left of (above) the
 origin, the LSB is negative.

Returns:
the left side bearing of the glyph.


"
2,GlyphMetrics,3,float getRSB(),True,,"

getRSB
public float getRSB()
Returns the right (bottom) side bearing of the glyph.
 
 This is the distance from the right (bottom) of the glyph bounds to
 the advance. If the bounds of the glyph is to the right of (below)
 the advance, the RSB is negative.

Returns:
the right side bearing of the glyph.


"
2,GlyphMetrics,4,float getBounds2D(),False,,NULL
2,GlyphMetrics,5,boolean isStandardWidth(),False,,NULL
3,GlyphVector,1,Shape getGlyphLogicalBounds(int glyphIndex),True,,"

getGlyphLogicalBounds
public abstract Shape getGlyphLogicalBounds(int glyphIndex)
Returns the logical bounds of the specified glyph within this
 GlyphVector.
 These logical bounds have a total of four edges, with two edges
 parallel to the baseline under the glyph's transform and the other two
 edges are shared with adjacent glyphs if they are present.  This
 method is useful for hit-testing of the specified glyph,
 positioning of a caret at the leading or trailing edge of a glyph,
 and for drawing a highlight region around the specified glyph.

Parameters:
glyphIndex - the index into this GlyphVector
   that corresponds to the glyph from which to retrieve its logical
   bounds
Returns:
a Shape that is the logical bounds of the
   glyph at the specified glyphIndex.
Throws:
IndexOutOfBoundsException - if glyphIndex
   is less than 0 or greater than or equal to the number
   of glyphs in this GlyphVector
See Also:
getGlyphVisualBounds(int)


"
3,GlyphVector,2,"Rectangle getGlyphPixelBounds(int glyphIndex, FontRenderContext renderContext, float x, float y)",True,,"

getGlyphPixelBounds
public Rectangle getGlyphPixelBounds(int index,
                                     FontRenderContext renderFRC,
                                     float x,
                                     float y)
Returns the pixel bounds of the glyph at index when this
 GlyphVector is rendered in a Graphics with the
 given FontRenderContext at the given location. The
 renderFRC need not be the same as the
 FontRenderContext of this
 GlyphVector, and can be null.  If it is null, the
 FontRenderContext of this GlyphVector
 is used.  The default implementation returns the visual bounds of the glyph,
 offset to x, y and rounded out to the next integer value, and
 ignores the FRC.  Subclassers should override this method.

Parameters:
index - the index of the glyph.
renderFRC - the FontRenderContext of the Graphics.
x - the X position at which to render this GlyphVector.
y - the Y position at which to render this GlyphVector.
Returns:
a Rectangle bounding the pixels that would be affected.
Since:
1.4


"
3,GlyphVector,3,Point2D getGlyphPosition(int glyphIndex),True,,"

getGlyphPosition
public abstract Point2D getGlyphPosition(int glyphIndex)
Returns the position of the specified glyph relative to the
 origin of this GlyphVector.
 If glyphIndex equals the number of of glyphs in
 this GlyphVector, this method returns the position after
 the last glyph. This position is used to define the advance of
 the entire GlyphVector.

Parameters:
glyphIndex - the index into this GlyphVector
Returns:
a Point2D object that is the position of the glyph
   at the specified glyphIndex.
Throws:
IndexOutOfBoundsException - if glyphIndex
   is less than 0 or greater than the number of glyphs
   in this GlyphVector
See Also:
setGlyphPosition(int, java.awt.geom.Point2D)


"
3,GlyphVector,4,"void setGlyphPosition(int glyphIndex, Point2D newPos)",True,,"

setGlyphPosition
public abstract void setGlyphPosition(int glyphIndex,
                                      Point2D newPos)
Sets the position of the specified glyph within this
 GlyphVector.
 If glyphIndex equals the number of of glyphs in
 this GlyphVector, this method sets the position after
 the last glyph. This position is used to define the advance of
 the entire GlyphVector.

Parameters:
glyphIndex - the index into this GlyphVector
newPos - the Point2D at which to position the
   glyph at the specified glyphIndex
Throws:
IndexOutOfBoundsException - if glyphIndex
   is less than 0 or greater than the number of glyphs
   in this GlyphVector
See Also:
getGlyphPosition(int)


"
3,GlyphVector,5,"void setGlyphTransform(int glyphIndex, AffineTransform newTX)",True,,"

setGlyphTransform
public abstract void setGlyphTransform(int glyphIndex,
                                       AffineTransform newTX)
Sets the transform of the specified glyph within this
 GlyphVector.  The transform is relative to the glyph
 position.  A null argument for newTX
 indicates that no special transform is applied for the specified
 glyph.
 This method can be used to rotate, mirror, translate and scale the
 glyph.  Adding a transform can result in significant performance changes.

Parameters:
glyphIndex - the index into this GlyphVector
newTX - the new transform of the glyph at glyphIndex
Throws:
IndexOutOfBoundsException - if glyphIndex
   is less than 0 or greater than or equal to the number
   of glyphs in this GlyphVector
See Also:
getGlyphTransform(int)


"
4,GraphicAttribute,1,Rectangle2D getBounds(),True,,"

getBounds
public Rectangle2D getBounds()
Returns a Rectangle2D that encloses all of the
 bits drawn by this GraphicAttribute relative to the
 rendering position.
 A graphic may be rendered beyond its origin, ascent, descent,
 or advance;  but if it is, this method's implementation must
 indicate where the graphic is rendered.
 Default bounds is the rectangle (0, -ascent, advance, ascent+descent).

Returns:
a Rectangle2D that encloses all of the bits
 rendered by this GraphicAttribute.


"
4,GraphicAttribute,2,int getAlignment(),True,,"

getAlignment
public final int getAlignment()
Returns the alignment of this GraphicAttribute.
 Alignment can be to a particular baseline, or to the absolute top
 or bottom of a line.

Returns:
the alignment of this GraphicAttribute.


"
4,GraphicAttribute,3,float getAdvance(),True,,"

getAdvance
public abstract float getAdvance()
Returns the advance of this GraphicAttribute.  The
 GraphicAttribute object's advance is the distance
 from the point at which the graphic is rendered and the point where
 the next character or graphic is rendered.  A graphic can be
 rendered beyond its advance

Returns:
the advance of this GraphicAttribute.
See Also:
getBounds()


"
4,GraphicAttribute,4,boolean equals(Object obj),False,,NULL
4,GraphicAttribute,5,int hashCode(),False,,NULL
5,ImageGraphicAttribute,1,"ImageGraphicAttribute(Image image, int alignment, float originX, float originY)",False,,NULL
5,ImageGraphicAttribute,2,Image getImage(),False,,NULL
5,ImageGraphicAttribute,3,int getAlignment(),False,,NULL
5,ImageGraphicAttribute,4,float getOriginX(),False,,NULL
5,ImageGraphicAttribute,5,float getOriginY(),False,,NULL
6,LayoutPath,1,void setPathIterator(PathIterator pi),False,,NULL
6,LayoutPath,2,PathIterator getPathIterator(),False,,NULL
6,LayoutPath,3,"void pointToPath(Point2D point, Point2D location)",False,,NULL
6,LayoutPath,4,Point2D pathToPoint(Point2D location),False,,NULL
6,LayoutPath,5,void setAdvance(float advance),False,,NULL
7,LineBreakMeasurer,1,TextLayout nextLayout(float wrappingWidth),True,,"

nextLayout
public TextLayout nextLayout(float wrappingWidth)
Returns the next layout, and updates the current position.

Parameters:
wrappingWidth - the maximum visible advance permitted for
     the text in the next layout
Returns:
a TextLayout, beginning at the current
     position, which represents the next line fitting within
     wrappingWidth


"
7,LineBreakMeasurer,2,int getPosition(),True,,"

getPosition
public int getPosition()
Returns the current position of this LineBreakMeasurer.

Returns:
the current position of this LineBreakMeasurer
See Also:
setPosition(int)


"
7,LineBreakMeasurer,3,"int nextOffset(int offset, int limit, boolean requireNextWord)",False,,NULL
7,LineBreakMeasurer,4,"TextLayout nextLayout(float wrappingWidth, int offset, boolean requireNextWord)",True,,"

nextLayout
public TextLayout nextLayout(float wrappingWidth,
                             int offsetLimit,
                             boolean requireNextWord)
Returns the next layout, and updates the current position.

Parameters:
wrappingWidth - the maximum visible advance permitted
    for the text in the next layout
offsetLimit - the first character that can not be
    included in the next layout, even if the text after the limit
    would fit within the wrapping width; offsetLimit
    must be greater than the current position
requireNextWord - if true, and if the entire word
    at the current position does not fit within the wrapping width,
    null is returned. If false, a valid
    layout is returned that includes at least the character at the
    current position
Returns:
a TextLayout, beginning at the current
    position, that represents the next line fitting within
    wrappingWidth.  If the current position is at the end
    of the text used by this LineBreakMeasurer,
    null is returned


"
7,LineBreakMeasurer,5,void setPosition(int newPosition),True,,"

setPosition
public void setPosition(int newPosition)
Sets the current position of this LineBreakMeasurer.

Parameters:
newPosition - the current position of this
    LineBreakMeasurer; the position should be within the
    text used to construct this LineBreakMeasurer (or in
    the text most recently passed to insertChar
    or deleteChar
See Also:
getPosition()


"
8,LineMetrics,1,float getAscent(),True,,"

getAscent
public abstract float getAscent()
Returns the ascent of the text.  The ascent
 is the distance from the baseline
 to the ascender line.  The ascent usually represents the
 the height of the capital letters of the text.  Some characters
 can extend above the ascender line.

Returns:
the ascent of the text.


"
8,LineMetrics,2,float getDescent(),True,,"

getDescent
public abstract float getDescent()
Returns the descent of the text.  The descent
 is the distance from the baseline
 to the descender line.  The descent usually represents
 the distance to the bottom of lower case letters like
 'p'.  Some characters can extend below the descender
 line.

Returns:
the descent of the text.


"
8,LineMetrics,3,float getHeight(),True,,"

getHeight
public abstract float getHeight()
Returns the height of the text.  The
 height is equal to the sum of the ascent, the
 descent and the leading.

Returns:
the height of the text.


"
8,LineMetrics,4,float getLeading(),True,,"

getLeading
public abstract float getLeading()
Returns the leading of the text. The
 leading is the recommended
 distance from the bottom of the descender line to the
 top of the next line.

Returns:
the leading of the text.


"
8,LineMetrics,5,float getStrikethroughOffset(),True,,"

getStrikethroughOffset
public abstract float getStrikethroughOffset()
Returns the position of the strike-through line
 relative to the baseline.

Returns:
the position of the strike-through line.


"
9,NumericShaper,1,NumericShaper getContextualShaper(int script),True,,"

getContextualShaper
public static NumericShaper getContextualShaper(int ranges)
Returns a contextual shaper for the provided unicode range(s).
 Latin-1 (EUROPEAN) digits are converted to the decimal digits
 corresponding to the range of the preceding text, if the
 range is one of the provided ranges.  Multiple ranges are
 represented by or-ing the values together, such as,
 NumericShaper.ARABIC | NumericShaper.THAI.  The
 shaper assumes EUROPEAN as the starting context, that is, if
 EUROPEAN digits are encountered before any strong directional
 text in the string, the context is presumed to be EUROPEAN, and
 so the digits will not shape.

Parameters:
ranges - the specified Unicode ranges
Returns:
a shaper for the specified ranges


"
9,NumericShaper,2,int getRanges(),True,,"

getRanges
public int getRanges()
Returns an int that ORs together the values for
 all the ranges that will be shaped.
 
 For example, to check if a shaper shapes to Arabic, you would use the
 following:
 
if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... 

Note that this method supports only the bit mask-based
 ranges. Call getRangeSet() for the enum-based ranges.

Returns:
the values for all the ranges to be shaped.


"
9,NumericShaper,3,"int shape(char[] text, int start, int count, int context, int flags)",False,,NULL
9,NumericShaper,4,"int shape(char[] text, int start, int count, int context)",False,,NULL
9,NumericShaper,5,"int shape(char[] text, int start, int count)",False,,NULL
10,ShapeGraphicAttribute,1,"ShapeGraphicAttribute(Shape shape, int alignment, boolean stroke, boolean fill)",False,,NULL
10,ShapeGraphicAttribute,2,Shape getShape(),False,,NULL
10,ShapeGraphicAttribute,3,int getAlignment(),False,,NULL
10,ShapeGraphicAttribute,4,boolean isStroke(),False,,NULL
10,ShapeGraphicAttribute,5,boolean isFill(),False,,NULL
11,TextAttribute,1,Object clone(),False,,NULL
11,TextAttribute,2,boolean equals(Object obj),False,,NULL
11,TextAttribute,3,int hashCode(),False,,NULL
11,TextAttribute,4,String toString(),False,,NULL
11,TextAttribute,5,TextAttribute resolve(String name),False,,NULL
12,TextHitInfo,1,int getInsertionIndex(),True,,"

getInsertionIndex
public int getInsertionIndex()
Returns the insertion index.  This is the character index if
 the leading edge of the character was hit, and one greater
 than the character index if the trailing edge was hit.

Returns:
the insertion index.


"
12,TextHitInfo,2,boolean isLeadingEdge(),True,,"

isLeadingEdge
public boolean isLeadingEdge()
Returns true if the leading edge of the character was
 hit.

Returns:
true if the leading edge of the character was
 hit; false otherwise.


"
12,TextHitInfo,3,boolean isTrailingEdge(),False,,NULL
12,TextHitInfo,4,TextHitInfo getOtherHit(),True,,"

getOtherHit
public TextHitInfo getOtherHit()
Creates a TextHitInfo on the other side of the
 insertion point.  This TextHitInfo remains unchanged.

Returns:
a TextHitInfo on the other side of the
 insertion point.


"
12,TextHitInfo,5,int getCharIndex(),True,,"

getCharIndex
public int getCharIndex()
Returns the index of the character hit.

Returns:
the index of the character hit.


"
13,TextLayout,1,Rectangle2D getBounds(),True,,"

getBounds
public Rectangle2D getBounds()
Returns the bounds of this TextLayout.
 The bounds are in standard coordinates.
 Due to rasterization effects, this bounds might not enclose all of the
 pixels rendered by the TextLayout.
 It might not coincide exactly with the ascent, descent,
 origin or advance of the TextLayout.

Returns:
a Rectangle2D that is the bounds of this
        TextLayout.


"
13,TextLayout,2,Shape getOutline(AffineTransform tx),True,,"

getOutline
public Shape getOutline(AffineTransform tx)
Returns a Shape representing the outline of this
 TextLayout.

Parameters:
tx - an optional AffineTransform to apply to the
     outline of this TextLayout.
Returns:
a Shape that is the outline of this
     TextLayout.  This is in standard coordinates.


"
13,TextLayout,3,TextHitInfo hitTestChar(int charIndex),False,,NULL
13,TextLayout,4,"TextHitInfo hitTestChar(float x, float y)",True,,"

hitTestChar
public TextHitInfo hitTestChar(float x,
                               float y)
Returns a TextHitInfo corresponding to the
 specified point.  This method is a convenience overload of
 hitTestChar that uses the natural bounds of this
 TextLayout.

Parameters:
x - the x offset from the origin of this
     TextLayout.  This is in standard coordinates.
y - the y offset from the origin of this
     TextLayout.  This is in standard coordinates.
Returns:
a hit describing the character and edge (leading or trailing)
 under the specified point.


"
13,TextLayout,5,TextLayout getJustifiedLayout(float justificationWidth),True,,"

getJustifiedLayout
public TextLayout getJustifiedLayout(float justificationWidth)
Creates a copy of this TextLayout justified to the
 specified width.
 
 If this TextLayout has already been justified, an
 exception is thrown.  If this TextLayout object's
 justification ratio is zero, a TextLayout identical
 to this TextLayout is returned.

Parameters:
justificationWidth - the width to use when justifying the line.
 For best results, it should not be too different from the current
 advance of the line.
Returns:
a TextLayout justified to the specified width.
Throws:
Error - if this layout has already been justified, an Error is
 thrown.


"
14,TextLayout.CaretPolicy,1,"TextHitInfo getStrongCaret(TextHitInfo hit1, TextHitInfo hit2)",False,,NULL
14,TextLayout.CaretPolicy,2,boolean equals(Object obj),False,,NULL
14,TextLayout.CaretPolicy,3,int hashCode(),False,,NULL
14,TextLayout.CaretPolicy,4,String toString(),False,,NULL
14,TextLayout.CaretPolicy,5,CaretPolicy getStrongCaretPolicy(),False,,NULL
15,TextMeasurer,1,"TextLayout getLayout(int start, int limit)",True,,"

getLayout
public TextLayout getLayout(int start,
                            int limit)
Returns a TextLayout on the given character range.

Parameters:
start - the index of the first character
limit - the index after the last character.  Must be greater
   than start
Returns:
a TextLayout for the characters beginning at
  start up to (but not including) limit
Throws:
IndexOutOfBoundsException - if limit is less
         than start
IllegalArgumentException - if start or
          limit is not between the beginning of
          the paragraph and the end of the paragraph.


"
15,TextMeasurer,2,"float getAdvanceBetween(int start, int limit)",True,,"

getAdvanceBetween
public float getAdvanceBetween(int start,
                               int limit)
Returns the graphical width of a line beginning at start
 and including characters up to limit.
 start and limit are absolute indices,
 not relative to the start of the paragraph.

Parameters:
start - the character index at which to start measuring
limit - the character index at which to stop measuring
Returns:
the graphical width of a line beginning at start
   and including characters up to limit
Throws:
IndexOutOfBoundsException - if limit is less
         than start
IllegalArgumentException - if start or
          limit is not between the beginning of
          the paragraph and the end of the paragraph.


"
15,TextMeasurer,3,"float getAdvance(char[] chars, int start, int limit)",False,,NULL
15,TextMeasurer,4,"float getAdvance(char[] chars, int start, int limit, int offset)",False,,NULL
15,TextMeasurer,5,float getAdvance(char c),False,,NULL
16,TransformAttribute,1,TransformAttribute(Transform transform),False,,NULL
16,TransformAttribute,2,Transform getTransform(),False,,NULL
16,TransformAttribute,3,boolean equals(Object rhs),True,,"

equals
public boolean equals(Object rhs)
Returns true if rhs is a TransformAttribute
 whose transform is equal to this TransformAttribute's
 transform.

Overrides:
equals in class Object
Parameters:
rhs - the object to compare to
Returns:
true if the argument is a TransformAttribute
 whose transform is equal to this TransformAttribute's
 transform.
Since:
1.6
See Also:
Object.hashCode(), 
HashMap


"
16,TransformAttribute,4,int hashCode(),True,,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
Since:
1.6
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
16,TransformAttribute,5,String toString(),False,,NULL
