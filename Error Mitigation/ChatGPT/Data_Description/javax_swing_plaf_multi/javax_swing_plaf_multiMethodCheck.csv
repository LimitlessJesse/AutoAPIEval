Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,MultiButtonUI,1,ButtonUI getUI(int a),False,,NULL
0,MultiButtonUI,2,int getUIsLength(),False,,NULL
0,MultiButtonUI,3,void setUIs(ButtonUI[] uis),False,,NULL
0,MultiButtonUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
0,MultiButtonUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
1,MultiColorChooserUI,1,ColorChooserUI getUI(int a),False,,NULL
1,MultiColorChooserUI,2,int getUIsLength(),False,,NULL
1,MultiColorChooserUI,3,void setUIs(ColorChooserUI[] uis),False,,NULL
1,MultiColorChooserUI,4,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
1,MultiColorChooserUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
2,MultiComboBoxUI,1,ComboBoxUI getUI(int a),False,,NULL
2,MultiComboBoxUI,2,int getUIsLength(),False,,NULL
2,MultiComboBoxUI,3,void setUIs(ComboBoxUI[] uis),False,,NULL
2,MultiComboBoxUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
2,MultiComboBoxUI,5,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
3,MultiDesktopIconUI,1,DesktopIconUI getUI(int a),False,,NULL
3,MultiDesktopIconUI,2,int getUIsLength(),False,,NULL
3,MultiDesktopIconUI,3,void setUIs(DesktopIconUI[] uis),False,,NULL
3,MultiDesktopIconUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
3,MultiDesktopIconUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
4,MultiDesktopPaneUI,1,DesktopPaneUI createUI(JComponent a),False,,NULL
4,MultiDesktopPaneUI,2,DesktopPaneUI[] getUIs(),False,,NULL
4,MultiDesktopPaneUI,3,void setUIs(DesktopPaneUI[] uis),False,,NULL
4,MultiDesktopPaneUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
4,MultiDesktopPaneUI,5,boolean contains(JComponent a),False,,NULL
5,MultiFileChooserUI,1,ComponentUI createUI(JComponent a),True,,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
5,MultiFileChooserUI,2,FileChooserUI[] getUIs(),False,,NULL
5,MultiFileChooserUI,3,void setUIs(FileChooserUI[] uis),False,,NULL
5,MultiFileChooserUI,4,ComponentUI getUI(JComponent a),False,,NULL
5,MultiFileChooserUI,5,int getUIsCount(),False,,NULL
6,MultiInternalFrameUI,1,void addUI(InternalFrameUI ui),False,,NULL
6,MultiInternalFrameUI,2,void removeUI(InternalFrameUI ui),False,,NULL
6,MultiInternalFrameUI,3,InternalFrameUI getUI(JComponent component),False,,NULL
6,MultiInternalFrameUI,4,int getUIsLength(),False,,NULL
6,MultiInternalFrameUI,5,InternalFrameUI[] getUIs(),False,,NULL
7,MultiLabelUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
7,MultiLabelUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
7,MultiLabelUI,3,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
7,MultiLabelUI,4,Dimension getPreferredSize(JComponent c),True,,"

getPreferredSize
public Dimension getPreferredSize(JComponent a)
Invokes the getPreferredSize method on each UI handled by this object.

Overrides:
getPreferredSize in class ComponentUI
Parameters:
a - the component whose preferred size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getPreferredSize(), 
LayoutManager.preferredLayoutSize(java.awt.Container)


"
7,MultiLabelUI,5,Dimension getMinimumSize(JComponent c),True,,"

getMinimumSize
public Dimension getMinimumSize(JComponent a)
Invokes the getMinimumSize method on each UI handled by this object.

Overrides:
getMinimumSize in class ComponentUI
Parameters:
a - the component whose minimum size is being queried;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel
See Also:
JComponent.getMinimumSize(), 
LayoutManager.minimumLayoutSize(java.awt.Container), 
ComponentUI.getPreferredSize(javax.swing.JComponent)


"
8,MultiListUI,1,ListUI getListUI(),False,,NULL
8,MultiListUI,2,"int locationToIndex(JList list, Point location)",True,,"

locationToIndex
public int locationToIndex(JList a,
                           Point b)
Invokes the locationToIndex method on each UI handled by this object.

Specified by:
locationToIndex in class ListUI
Parameters:
a - the list
b - the coordinates of the point
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
8,MultiListUI,3,"Rectangle getCellBounds(JList list, int index1, int index2)",True,,"

getCellBounds
public Rectangle getCellBounds(JList a,
                               int b,
                               int c)
Invokes the getCellBounds method on each UI handled by this object.

Specified by:
getCellBounds in class ListUI
Parameters:
a - the list
b - the first index in the range
c - the second index in the range
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
8,MultiListUI,4,"int getNextMatch(JList list, String prefix, int startIndex, Position.Bias bias)",False,,NULL
8,MultiListUI,5,"int convertIndexToModel(JList list, int viewIndex)",False,,NULL
9,MultiLookAndFeel,1,LookAndFeel getLookAndFeel(int a),False,,NULL
9,MultiLookAndFeel,2,LookAndFeel[] getInstalledLookAndFeels(),False,,NULL
9,MultiLookAndFeel,3,LookAndFeel getDefaultLookAndFeel(),False,,NULL
9,MultiLookAndFeel,4,void addAuxiliaryLookAndFeel(LookAndFeel laf),False,,NULL
9,MultiLookAndFeel,5,void removeAuxiliaryLookAndFeel(LookAndFeel laf),False,,NULL
10,MultiMenuBarUI,1,ComponentUI createUI(JComponent x),True,,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
10,MultiMenuBarUI,2,MenuBarUI[] getUIs(),False,,NULL
10,MultiMenuBarUI,3,void setUIs(MenuBarUI[] uis),False,,NULL
10,MultiMenuBarUI,4,void uninstallUI(JComponent x),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
10,MultiMenuBarUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
11,MultiMenuItemUI,1,MenuItemUI getUI(int a),False,,NULL
11,MultiMenuItemUI,2,MenuItemUI[] getUIs(),False,,NULL
11,MultiMenuItemUI,3,void setUIs(MenuItemUI[] uis),False,,NULL
11,MultiMenuItemUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
11,MultiMenuItemUI,5,boolean isFocusTraversable(JMenuItem a),False,,NULL
12,MultiOptionPaneUI,1,ComponentUI createUI(JComponent x),True,,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
12,MultiOptionPaneUI,2,ComponentUI[] getUIs(),True,,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
12,MultiOptionPaneUI,3,ComponentUI getDefault(),False,,NULL
12,MultiOptionPaneUI,4,ComponentUI getUI(JComponent x),False,,NULL
12,MultiOptionPaneUI,5,void setUIs(ComponentUI[] uis),False,,NULL
13,MultiPanelUI,1,ComponentUI getUI(int a),False,,NULL
13,MultiPanelUI,2,ComponentUI[] getUIs(),True,,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
13,MultiPanelUI,3,void setUIs(ComponentUI[] uis),False,,NULL
13,MultiPanelUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
13,MultiPanelUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
14,MultiPopupMenuUI,1,PopupMenuUI getUI(int a),False,,NULL
14,MultiPopupMenuUI,2,int getUIsLength(),False,,NULL
14,MultiPopupMenuUI,3,"ComponentUI getUIs(int a, ComponentUI[] uis)",False,,NULL
14,MultiPopupMenuUI,4,void setUIs(ComponentUI[] uis),False,,NULL
14,MultiPopupMenuUI,5,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
15,MultiProgressBarUI,1,ProgressBarUI getUI(int a),False,,NULL
15,MultiProgressBarUI,2,int getUIsLength(),False,,NULL
15,MultiProgressBarUI,3,void setUIs(ProgressBarUI[] uis),False,,NULL
15,MultiProgressBarUI,4,void resetUIs(),False,,NULL
15,MultiProgressBarUI,5,void setUI(ProgressBarUI ui),False,,NULL
16,MultiRootPaneUI,1,RootPaneUI getUI(JComponent a),False,,NULL
16,MultiRootPaneUI,2,RootPaneUI[] getUIs(),False,,NULL
16,MultiRootPaneUI,3,void setUIs(RootPaneUI[] uis),False,,NULL
16,MultiRootPaneUI,4,void uninstallUI(JComponent a),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
16,MultiRootPaneUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
17,MultiScrollBarUI,1,ScrollBarUI getUI(int a),False,,NULL
17,MultiScrollBarUI,2,int getUIsLength(),False,,NULL
17,MultiScrollBarUI,3,void setUIs(ScrollBarUI[] uis),False,,NULL
17,MultiScrollBarUI,4,"void syncAll(int a, int b)",False,,NULL
17,MultiScrollBarUI,5,"void syncWithUI(int a, int b, ScrollBarUI ui)",False,,NULL
18,MultiScrollPaneUI,1,ScrollPaneUI createUI(JComponent c),False,,NULL
18,MultiScrollPaneUI,2,ComponentUI[] getUIs(),True,,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
18,MultiScrollPaneUI,3,void setUIs(ComponentUI[] uis),False,,NULL
18,MultiScrollPaneUI,4,ComponentUI getUI(JComponent c),False,,NULL
18,MultiScrollPaneUI,5,boolean containsUI(ComponentUI ui),False,,NULL
19,MultiSeparatorUI,1,SeparatorUI createUI(JComponent c),False,,NULL
19,MultiSeparatorUI,2,int getUIsLength(),False,,NULL
19,MultiSeparatorUI,3,SeparatorUI getUI(int i),False,,NULL
19,MultiSeparatorUI,4,int getSelectedIndex(JComponent c),False,,NULL
19,MultiSeparatorUI,5,"void setSelectedIndex(JComponent c, int index)",False,,NULL
20,MultiSliderUI,1,SliderUI getUI(int a),False,,NULL
20,MultiSliderUI,2,int getUIsLength(),False,,NULL
20,MultiSliderUI,3,void setUIs(SliderUI[] uis),False,,NULL
20,MultiSliderUI,4,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
20,MultiSliderUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
21,MultiSpinnerUI,1,SpinnerUI getUI(int a),False,,NULL
21,MultiSpinnerUI,2,int getUIsLength(),False,,NULL
21,MultiSpinnerUI,3,void setUIs(SpinnerUI[] uis),False,,NULL
21,MultiSpinnerUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
21,MultiSpinnerUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
22,MultiSplitPaneUI,1,ComponentUI createUI(JComponent x),True,,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
22,MultiSplitPaneUI,2,ComponentUI[] getUIs(),True,,"

getUIs
public ComponentUI[] getUIs()
Returns the list of UIs associated with this multiplexing UI.  This
 allows processing of the UIs by an application aware of multiplexing
 UIs on components.

"
22,MultiSplitPaneUI,3,void setUIs(ComponentUI[] uis),False,,NULL
22,MultiSplitPaneUI,4,void resetUIs(),False,,NULL
22,MultiSplitPaneUI,5,void setUI(ComponentUI ui),False,,NULL
23,MultiTabbedPaneUI,1,TabbedPaneUI getUI(int a),False,,NULL
23,MultiTabbedPaneUI,2,TabbedPaneUI[] getUIs(),False,,NULL
23,MultiTabbedPaneUI,3,"int tabForCoordinate(JTabbedPane a, int b, int c)",True,,"

tabForCoordinate
public int tabForCoordinate(JTabbedPane a,
                            int b,
                            int c)
Invokes the tabForCoordinate method on each UI handled by this object.

Specified by:
tabForCoordinate in class TabbedPaneUI
Returns:
the value obtained from the first UI, which is
 the UI obtained from the default LookAndFeel


"
23,MultiTabbedPaneUI,4,"int tabForCoordinate(JTabbedPane a, int b, int c, int d)",False,,NULL
23,MultiTabbedPaneUI,5,"int tabForCoordinate(JTabbedPane a, int b, int c, int d, int e)",False,,NULL
24,MultiTableHeaderUI,1,TableHeaderUI getUI(int a),False,,NULL
24,MultiTableHeaderUI,2,TableHeaderUI[] getUIs(),False,,NULL
24,MultiTableHeaderUI,3,void setUIs(TableHeaderUI[] uis),False,,NULL
24,MultiTableHeaderUI,4,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
24,MultiTableHeaderUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
25,MultiTableUI,1,TableUI getUI(int a),False,,NULL
25,MultiTableUI,2,TableUI[] getUIs(),False,,NULL
25,MultiTableUI,3,void setUIs(TableUI[] uis),False,,NULL
25,MultiTableUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
25,MultiTableUI,5,boolean containsUI(UI ui),False,,NULL
26,MultiTextUI,1,TextUI getUI(int n),False,,NULL
26,MultiTextUI,2,int getUICount(),False,,NULL
26,MultiTextUI,3,void setUIs(TextUI[] uis),False,,NULL
26,MultiTextUI,4,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
26,MultiTextUI,5,"void paint(Graphics g, JComponent c)",True,,"

paint
public void paint(Graphics a,
                  JComponent b)
Invokes the paint method on each UI handled by this object.

Overrides:
paint in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.update(java.awt.Graphics, javax.swing.JComponent)


"
27,MultiToolBarUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
27,MultiToolBarUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
27,MultiToolBarUI,3,ToolBarUI[] getUIs(),False,,NULL
27,MultiToolBarUI,4,ComponentUI getUI(JComponent a),False,,NULL
27,MultiToolBarUI,5,int getUICount(),False,,NULL
28,MultiToolTipUI,1,void installUI(JComponent c),True,,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
28,MultiToolTipUI,2,void uninstallUI(JComponent c),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
28,MultiToolTipUI,3,ToolTipUI getToolTipUIs(int i),False,,NULL
28,MultiToolTipUI,4,int getToolTipUIsCount(),False,,NULL
28,MultiToolTipUI,5,"void update(Graphics g, JComponent c)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
29,MultiTreeUI,1,void completeUIInstall(),False,,NULL
29,MultiTreeUI,2,void completeUIUninstall(),False,,NULL
29,MultiTreeUI,3,TreeUI createUI(JComponent a),False,,NULL
29,MultiTreeUI,4,void uninstallUI(JComponent a),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
29,MultiTreeUI,5,"void update(Graphics a, JComponent b)",True,,"

update
public void update(Graphics a,
                   JComponent b)
Invokes the update method on each UI handled by this object.

Overrides:
update in class ComponentUI
Parameters:
a - the Graphics context in which to paint
b - the component being painted;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.paint(java.awt.Graphics, javax.swing.JComponent), 
JComponent.paintComponent(java.awt.Graphics)


"
30,MultiViewportUI,1,void completeUIInstall(),False,,NULL
30,MultiViewportUI,2,void completeUIUninstall(),False,,NULL
30,MultiViewportUI,3,ComponentUI createUI(JComponent a),True,,"

createUI
public static ComponentUI createUI(JComponent a)
Returns a multiplexing UI instance if any of the auxiliary
 LookAndFeels supports this UI.  Otherwise, just returns the
 UI object obtained from the default LookAndFeel.

"
30,MultiViewportUI,4,void installUI(JComponent a),True,,"

installUI
public void installUI(JComponent a)
Invokes the installUI method on each UI handled by this object.

Overrides:
installUI in class ComponentUI
Parameters:
a - the component where this UI delegate is being installed
See Also:
ComponentUI.uninstallUI(javax.swing.JComponent), 
JComponent.setUI(javax.swing.plaf.ComponentUI), 
JComponent.updateUI()


"
30,MultiViewportUI,5,void uninstallUI(JComponent a),True,,"

uninstallUI
public void uninstallUI(JComponent a)
Invokes the uninstallUI method on each UI handled by this object.

Overrides:
uninstallUI in class ComponentUI
Parameters:
a - the component from which this UI delegate is being removed;
          this argument is often ignored,
          but might be used if the UI object is stateless
          and shared by multiple components
See Also:
ComponentUI.installUI(javax.swing.JComponent), 
JComponent.updateUI()


"
