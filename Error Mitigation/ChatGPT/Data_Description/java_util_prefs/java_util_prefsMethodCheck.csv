Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractPreferences,1,String[] childrenNames(),True,,"

childrenNames
public String[] childrenNames()
                       throws BackingStoreException
Implements the children method as per the specification in
 Preferences.childrenNames().

 This implementation obtains this preference node's lock, checks that
 the node has not been removed, constructs a TreeSet initialized
 to the names of children already cached (the children in this node's
 ""child-cache""), invokes childrenNamesSpi(), and adds all of the
 returned child-names into the set.  The elements of the tree set are
 dumped into a String array using the toArray method,
 and this array is returned.

Specified by:
childrenNames in class Preferences
Returns:
the names of the children of this preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
cachedChildren()


"
0,AbstractPreferences,2,"void put(String key, String value)",True,,"

put
public void put(String key,
                String value)
Implements the put method as per the specification in
 Preferences.put(String,String).

 This implementation checks that the key and value are legal,
 obtains this preference node's lock, checks that the node
 has not been removed, invokes putSpi(String,String), and if
 there are any preference change listeners, enqueues a notification
 event for processing by the event dispatch thread.

Specified by:
put in class Preferences
Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
0,AbstractPreferences,3,"String get(String key, String def)",True,,"

get
public String get(String key,
                  String def)
Implements the get method as per the specification in
 Preferences.get(String,String).

 This implementation first checks to see if key is
 null throwing a NullPointerException if this is
 the case.  Then it obtains this preference node's lock,
 checks that the node has not been removed, invokes getSpi(String), and returns the result, unless the getSpi
 invocation returns null or throws an exception, in which case
 this invocation returns def.

Specified by:
get in class Preferences
Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null default is permitted.)


"
0,AbstractPreferences,4,void remove(String key),True,,"

remove
public void remove(String key)
Implements the remove(String) method as per the specification
 in Preferences.remove(String).

 This implementation obtains this preference node's lock,
 checks that the node has not been removed, invokes
 removeSpi(String) and if there are any preference
 change listeners, enqueues a notification event for processing by the
 event dispatch thread.

Specified by:
remove in class Preferences
Parameters:
key - key whose mapping is to be removed from the preference node.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null..


"
0,AbstractPreferences,5,void clear(),True,,"

clear
public void clear()
           throws BackingStoreException
Implements the clear method as per the specification in
 Preferences.clear().

 This implementation obtains this preference node's lock,
 invokes keys() to obtain an array of keys, and
 iterates over the array invoking remove(String) on each key.

Specified by:
clear in class Preferences
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
Preferences.removeNode()


"
1,NodeChangeEvent,1,Preferences getChild(),True,,"

getChild
public Preferences getChild()
Returns the node that was added or removed.

Returns:
The node that was added or removed.


"
1,NodeChangeEvent,2,Preferences getParent(),True,,"

getParent
public Preferences getParent()
Returns the parent of the node that was added or removed.

Returns:
The parent Preferences node whose child was added or removed


"
1,NodeChangeEvent,3,String getKey(),False,,NULL
1,NodeChangeEvent,4,boolean wasAdded(),False,,NULL
1,NodeChangeEvent,5,boolean wasRemoved(),False,,NULL
2,PreferenceChangeEvent,1,java.lang.String getKey(),False,,NULL
2,PreferenceChangeEvent,2,java.util.prefs.Preferences getNode(),False,,NULL
2,PreferenceChangeEvent,3,java.lang.String getNewValue(),False,,NULL
2,PreferenceChangeEvent,4,java.lang.String getOldValue(),False,,NULL
2,PreferenceChangeEvent,5,java.lang.String toString(),False,,NULL
3,Preferences,1,"String get(String key, String def)",True,,"

get
public abstract String get(String key,
                           String def)
Returns the value associated with the specified key in this preference
 node.  Returns the specified default if there is no value associated
 with the key, or the backing store is inaccessible.

 Some implementations may store default values in their backing
 stores.  If there is no value associated with the specified key
 but there is such a stored default, it is returned in
 preference to the specified default.

Parameters:
key - key whose associated value is to be returned.
def - the value to be returned in the event that this
        preference node has no value associated with key.
Returns:
the value associated with key, or def
         if no value is associated with key, or the backing
         store is inaccessible.
Throws:
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
NullPointerException - if key is null.  (A
         null value for def is permitted.)


"
3,Preferences,2,"void put(String key, String value)",True,,"

put
public abstract void put(String key,
                         String value)
Associates the specified value with the specified key in this
 preference node.

Parameters:
key - key with which the specified value is to be associated.
value - value to be associated with the specified key.
Throws:
NullPointerException - if key or value is null.
IllegalArgumentException - if key.length() exceeds
       MAX_KEY_LENGTH or if value.length exceeds
       MAX_VALUE_LENGTH.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
3,Preferences,3,String[] keys(),True,,"

keys
public abstract String[] keys()
                       throws BackingStoreException
Returns all of the keys that have an associated value in this
 preference node.  (The returned array will be of size zero if
 this node has no preferences.)

 If the implementation supports stored defaults and there
 are any such defaults at this node that have not been overridden,
 by explicit preferences, the defaults are returned in the array in
 addition to any explicit preferences.

Returns:
an array of the keys that have an associated value in this
         preference node.
Throws:
BackingStoreException - if this operation cannot be completed
         due to a failure in the backing store, or inability to
         communicate with it.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
3,Preferences,4,void remove(String key),True,,"

remove
public abstract void remove(String key)
Removes the value associated with the specified key in this preference
 node, if any.

 If this implementation supports stored defaults, and there is
 such a default for the specified preference, the stored default will be
 ""exposed"" by this call, in the sense that it will be returned
 by a succeeding call to get.

Parameters:
key - key whose mapping is to be removed from the preference node.
Throws:
NullPointerException - if key is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.


"
3,Preferences,5,Preferences node(String pathName),True,,"

node
public abstract Preferences node(String pathName)
Returns the named preference node in the same tree as this node,
 creating it and any of its ancestors if they do not already exist.
 Accepts a relative or absolute path name.  Relative path names
 (which do not begin with the slash character ('/')) are
 interpreted relative to this preference node.

 If the returned node did not exist prior to this call, this node and
 any ancestors that were created by this call are not guaranteed
 to become permanent until the flush method is called on
 the returned node (or one of its ancestors or descendants).

Parameters:
pathName - the path name of the preference node to return.
Returns:
the specified preference node.
Throws:
IllegalArgumentException - if the path name is invalid (i.e.,
         it contains multiple consecutive slash characters, or ends
         with a slash character and is more than one character long).
NullPointerException - if path name is null.
IllegalStateException - if this node (or an ancestor) has been
         removed with the removeNode() method.
See Also:
flush()


"
