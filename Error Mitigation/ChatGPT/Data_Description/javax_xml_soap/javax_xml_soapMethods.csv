ClassName,Method,Return Type,Description,Full Description
AttachmentPart,"addMimeHeader(String name, String value)",abstract void,Adds a MIME header with the specified name and value to this AttachmentPart object.,"

addMimeHeader
public abstract void addMimeHeader(String name,
                                   String value)
Adds a MIME header with the specified name and value to this
 AttachmentPart object.
 
 Note that RFC822 headers can contain only US-ASCII characters.

Parameters:
name - a String giving the name of the header
                  to be added
value - a String giving the value of the header
                  to be added
Throws:
IllegalArgumentException - if there was a problem with
            the specified mime header name or value


"
AttachmentPart,clearContent(),abstract void,Clears out the content of this AttachmentPart object.,"

clearContent
public abstract void clearContent()
Clears out the content of this AttachmentPart object.
 The MIME header portion is left untouched.

"
AttachmentPart,getAllMimeHeaders(),abstract Iterator,Retrieves all the headers for this AttachmentPart object as an iterator over the MimeHeader objects.,"

getAllMimeHeaders
public abstract Iterator getAllMimeHeaders()
Retrieves all the headers for this AttachmentPart object
 as an iterator over the MimeHeader objects.

Returns:
an Iterator object with all of the Mime
          headers for this AttachmentPart object


"
AttachmentPart,getBase64Content(),abstract InputStream,"Returns an InputStream which can be used to obtain the content of AttachmentPart as Base64 encoded character data, this method would base64 encode the raw bytes of the attachment and return.","

getBase64Content
public abstract InputStream getBase64Content()
                                      throws SOAPException
Returns an InputStream which can be used to obtain the
 content of AttachmentPart  as Base64 encoded
 character data, this method would base64 encode the raw bytes
 of the attachment and return.

Returns:
an InputStream from which the Base64 encoded
       AttachmentPart can be read.
Throws:
SOAPException - if there is no content set into this
      AttachmentPart object or if there was a data
      transformation error.
Since:
SAAJ 1.3


"
AttachmentPart,getContent(),abstract Object,Gets the content of this AttachmentPart object as a Java object.,"

getContent
public abstract Object getContent()
                           throws SOAPException
Gets the content of this AttachmentPart object as a Java
 object. The type of the returned Java object depends on (1) the
 DataContentHandler object that is used to interpret the bytes
 and (2) the Content-Type given in the header.
 
 For the MIME content types ""text/plain"", ""text/html"" and ""text/xml"", the
 DataContentHandler object does the conversions to and
 from the Java types corresponding to the MIME types.
 For other MIME types,the DataContentHandler object
 can return an InputStream object that contains the content data
 as raw bytes.
 
 A SAAJ-compliant implementation must, as a minimum, return a
 java.lang.String object corresponding to any content
 stream with a Content-Type value of
 text/plain, a
 javax.xml.transform.stream.StreamSource object corresponding to a
 content stream with a Content-Type value of
 text/xml, a java.awt.Image object
 corresponding to a content stream with a
 Content-Type value of image/gif or
 image/jpeg.  For those content types that an
 installed DataContentHandler object does not understand, the
 DataContentHandler object is required to return a
 java.io.InputStream object with the raw bytes.

Returns:
a Java object with the content of this AttachmentPart
         object
Throws:
SOAPException - if there is no content set into this
            AttachmentPart object or if there was a data
            transformation error


"
AttachmentPart,getContentId(),String,"Gets the value of the MIME header whose name is ""Content-ID"".","

getContentId
public String getContentId()
Gets the value of the MIME header whose name is ""Content-ID"".

Returns:
a String giving the value of the
          ""Content-ID"" header or null if there
          is none
See Also:
setContentId(java.lang.String)


"
AttachmentPart,getContentLocation(),String,"Gets the value of the MIME header whose name is ""Content-Location"".","

getContentLocation
public String getContentLocation()
Gets the value of the MIME header whose name is ""Content-Location"".

Returns:
a String giving the value of the
          ""Content-Location"" header or null if there
          is none


"
AttachmentPart,getContentType(),String,"Gets the value of the MIME header whose name is ""Content-Type"".","

getContentType
public String getContentType()
Gets the value of the MIME header whose name is ""Content-Type"".

Returns:
a String giving the value of the
          ""Content-Type"" header or null if there
          is none


"
AttachmentPart,getDataHandler(),abstract DataHandler,Gets the DataHandler object for this AttachmentPart object.,"

getDataHandler
public abstract DataHandler getDataHandler()
                                    throws SOAPException
Gets the DataHandler object for this AttachmentPart
 object.

Returns:
the DataHandler object associated with this
         AttachmentPart object
Throws:
SOAPException - if there is no data in
 this AttachmentPart object


"
AttachmentPart,getMatchingMimeHeaders(String[] names),abstract Iterator,Retrieves all MimeHeader objects that match a name in the given array.,"

getMatchingMimeHeaders
public abstract Iterator getMatchingMimeHeaders(String[] names)
Retrieves all MimeHeader objects that match a name in
 the given array.

Parameters:
names - a String array with the name(s) of the
        MIME headers to be returned
Returns:
all of the MIME headers that match one of the names in the
           given array as an Iterator object


"
AttachmentPart,getMimeHeader(String name),abstract String[],Gets all the values of the header identified by the given String.,"

getMimeHeader
public abstract String[] getMimeHeader(String name)
Gets all the values of the header identified by the given
 String.

Parameters:
name - the name of the header; example: ""Content-Type""
Returns:
a String array giving the value for the
         specified header
See Also:
setMimeHeader(java.lang.String, java.lang.String)


"
AttachmentPart,getNonMatchingMimeHeaders(String[] names),abstract Iterator,Retrieves all MimeHeader objects whose name does not match a name in the given array.,"

getNonMatchingMimeHeaders
public abstract Iterator getNonMatchingMimeHeaders(String[] names)
Retrieves all MimeHeader objects whose name does
 not match a name in the given array.

Parameters:
names - a String array with the name(s) of the
        MIME headers not to be returned
Returns:
all of the MIME headers in this AttachmentPart object
          except those that match one of the names in the
           given array.  The nonmatching MIME headers are returned as an
           Iterator object.


"
AttachmentPart,getRawContent(),abstract InputStream,Gets the content of this AttachmentPart object as an InputStream as if a call had been made to getContent and no DataContentHandler had been registered for the content-type of this AttachmentPart.,"

getRawContent
public abstract InputStream getRawContent()
                                   throws SOAPException
Gets the content of this AttachmentPart object as an
 InputStream as if a call had been made to getContent and no
 DataContentHandler had been registered for the
 content-type of this AttachmentPart.

 Note that reading from the returned InputStream would result in consuming
 the data in the stream. It is the responsibility of the caller to reset
 the InputStream appropriately before calling a Subsequent API. If a copy
 of the raw attachment content is required then the getRawContentBytes() API
 should be used instead.

Returns:
an InputStream from which the raw data contained by
      the AttachmentPart can be accessed.
Throws:
SOAPException - if there is no content set into this
      AttachmentPart object or if there was a data
      transformation error.
Since:
SAAJ 1.3
See Also:
getRawContentBytes()


"
AttachmentPart,getRawContentBytes(),abstract byte[],Gets the content of this AttachmentPart object as a byte[] array as if a call had been made to getContent and no DataContentHandler had been registered for the content-type of this AttachmentPart.,"

getRawContentBytes
public abstract byte[] getRawContentBytes()
                                   throws SOAPException
Gets the content of this AttachmentPart object as a
 byte[] array as if a call had been made to getContent and no
 DataContentHandler had been registered for the
 content-type of this AttachmentPart.

Returns:
a byte[] array containing the raw data of the
      AttachmentPart.
Throws:
SOAPException - if there is no content set into this
      AttachmentPart object or if there was a data
      transformation error.
Since:
SAAJ 1.3


"
AttachmentPart,getSize(),abstract int,Returns the number of bytes in this AttachmentPart object.,"

getSize
public abstract int getSize()
                     throws SOAPException
Returns the number of bytes in this AttachmentPart
 object.

Returns:
the size of this AttachmentPart object in bytes
         or -1 if the size cannot be determined
Throws:
SOAPException - if the content of this attachment is
            corrupted of if there was an exception while trying
            to determine the size.


"
AttachmentPart,removeAllMimeHeaders(),abstract void,Removes all the MIME header entries.,"

removeAllMimeHeaders
public abstract void removeAllMimeHeaders()
Removes all the MIME header entries.

"
AttachmentPart,removeMimeHeader(String header),abstract void,Removes all MIME headers that match the given name.,"

removeMimeHeader
public abstract void removeMimeHeader(String header)
Removes all MIME headers that match the given name.

Parameters:
header - the string name of the MIME header/s to
               be removed


"
AttachmentPart,"setBase64Content(InputStream content, String contentType)",abstract void,"Sets the content of this attachment part from the Base64 source InputStream and sets the value of the Content-Type header to the value contained in contentType, This method would first decode the base64 input and write the resulting raw bytes to the attachment.","

setBase64Content
public abstract void setBase64Content(InputStream content,
                                      String contentType)
                               throws SOAPException
Sets the content of this attachment part from the Base64 source
 InputStream  and sets the value of the
 Content-Type header to the value contained in
 contentType, This method would first decode the base64
 input and write the resulting raw bytes to the attachment.
 
  A subsequent call to getSize() may not be an exact measure
  of the content size.

Parameters:
content - the base64 encoded data to add to the attachment part
contentType - the value to set into the Content-Type
 header
Throws:
SOAPException - if an there is an error in setting the content
NullPointerException - if content is null
Since:
SAAJ 1.3


"
AttachmentPart,"setContent(Object object, String contentType)",abstract void,Sets the content of this attachment part to that of the given Object and sets the value of the Content-Type header to the given type.,"

setContent
public abstract void setContent(Object object,
                                String contentType)
Sets the content of this attachment part to that of the given
 Object and sets the value of the Content-Type
 header to the given type. The type of the
 Object should correspond to the value given for the
 Content-Type. This depends on the particular
 set of DataContentHandler objects in use.

Parameters:
object - the Java object that makes up the content for
               this attachment part
contentType - the MIME string that specifies the type of
                  the content
Throws:
IllegalArgumentException - may be thrown if the contentType
            does not match the type of the content object, or if there
            was no DataContentHandler object for this
            content object
See Also:
getContent()


"
AttachmentPart,setContentId(String contentId),void,"Sets the MIME header whose name is ""Content-ID"" with the given value.","

setContentId
public void setContentId(String contentId)
Sets the MIME header whose name is ""Content-ID"" with the given value.

Parameters:
contentId - a String giving the value of the
          ""Content-ID"" header
Throws:
IllegalArgumentException - if there was a problem with
            the specified contentId value
See Also:
getContentId()


"
AttachmentPart,setContentLocation(String contentLocation),void,"Sets the MIME header whose name is ""Content-Location"" with the given value.","

setContentLocation
public void setContentLocation(String contentLocation)
Sets the MIME header whose name is ""Content-Location"" with the given value.

Parameters:
contentLocation - a String giving the value of the
          ""Content-Location"" header
Throws:
IllegalArgumentException - if there was a problem with
            the specified content location


"
AttachmentPart,setContentType(String contentType),void,"Sets the MIME header whose name is ""Content-Type"" with the given value.","

setContentType
public void setContentType(String contentType)
Sets the MIME header whose name is ""Content-Type"" with the given value.

Parameters:
contentType - a String giving the value of the
          ""Content-Type"" header
Throws:
IllegalArgumentException - if there was a problem with
            the specified content type


"
AttachmentPart,setDataHandler(DataHandler dataHandler),abstract void,Sets the given DataHandler object as the data handler for this AttachmentPart object.,"

setDataHandler
public abstract void setDataHandler(DataHandler dataHandler)
Sets the given DataHandler object as the data handler
 for this AttachmentPart object. Typically, on an incoming
 message, the data handler is automatically set. When
 a message is being created and populated with content, the
 setDataHandler method can be used to get data from
 various data sources into the message.

Parameters:
dataHandler - the DataHandler object to be set
Throws:
IllegalArgumentException - if there was a problem with
            the specified DataHandler object


"
AttachmentPart,"setMimeHeader(String name, String value)",abstract void,"Changes the first header entry that matches the given name to the given value, adding a new header if no existing header matches.","

setMimeHeader
public abstract void setMimeHeader(String name,
                                   String value)
Changes the first header entry that matches the given name
 to the given value, adding a new header if no existing header
 matches. This method also removes all matching headers but the first. 

 Note that RFC822 headers can only contain US-ASCII characters.

Parameters:
name - a String giving the name of the header
                  for which to search
value - a String giving the value to be set for
                  the header whose name matches the given name
Throws:
IllegalArgumentException - if there was a problem with
            the specified mime header name or value


"
AttachmentPart,"setRawContent(InputStream content, String contentType)",abstract void,Sets the content of this attachment part to that contained by the InputStream content and sets the value of the Content-Type header to the value contained in contentType.,"

setRawContent
public abstract void setRawContent(InputStream content,
                                   String contentType)
                            throws SOAPException
Sets the content of this attachment part to that contained by the
 InputStream content and sets the value of the
 Content-Type header to the value contained in
 contentType.
 
  A subsequent call to getSize() may not be an exact measure
  of the content size.

Parameters:
content - the raw data to add to the attachment part
contentType - the value to set into the Content-Type
 header
Throws:
SOAPException - if an there is an error in setting the content
NullPointerException - if content is null
Since:
SAAJ 1.3


"
AttachmentPart,"setRawContentBytes(byte[] content, int offset, int len, String contentType)",abstract void,Sets the content of this attachment part to that contained by the byte[] array content and sets the value of the Content-Type header to the value contained in contentType.,"

setRawContentBytes
public abstract void setRawContentBytes(byte[] content,
                                        int offset,
                                        int len,
                                        String contentType)
                                 throws SOAPException
Sets the content of this attachment part to that contained by the
 byte[] array content and sets the value of the
 Content-Type header to the value contained in
 contentType.

Parameters:
content - the raw data to add to the attachment part
contentType - the value to set into the Content-Type
 header
offset - the offset in the byte array of the content
len - the number of bytes that form the content
Throws:
SOAPException - if an there is an error in setting the content
 or content is null
Since:
SAAJ 1.3


"
MessageFactory,createMessage(),abstract SOAPMessage,"Creates a new SOAPMessage object with the default SOAPPart, SOAPEnvelope, SOAPBody, and SOAPHeader objects.","

createMessage
public abstract SOAPMessage createMessage()
                                   throws SOAPException
Creates a new SOAPMessage object with the default
 SOAPPart, SOAPEnvelope, SOAPBody,
 and SOAPHeader objects. Profile-specific message factories
 can choose to prepopulate the SOAPMessage object with
 profile-specific headers.
 
 Content can be added to this message's SOAPPart object, and
 the message can be sent ""as is"" when a message containing only a SOAP part
 is sufficient. Otherwise, the SOAPMessage object needs
 to create one or more AttachmentPart objects and
 add them to itself. Any content that is not in XML format must be
 in an AttachmentPart object.

Returns:
a new SOAPMessage object
Throws:
SOAPException - if a SOAP error occurs
UnsupportedOperationException - if the protocol of this
      MessageFactory instance is DYNAMIC_SOAP_PROTOCOL


"
MessageFactory,"createMessage(MimeHeaders headers, InputStream in)",abstract SOAPMessage,Internalizes the contents of the given InputStream object into a new SOAPMessage object and returns the SOAPMessage object.,"

createMessage
public abstract SOAPMessage createMessage(MimeHeaders headers,
                                          InputStream in)
                                   throws IOException,
                                          SOAPException
Internalizes the contents of the given InputStream object into a
 new SOAPMessage object and returns the SOAPMessage
 object.

Parameters:
in - the InputStream object that contains the data
           for a message
headers - the transport-specific headers passed to the
        message in a transport-independent fashion for creation of the
        message
Returns:
a new SOAPMessage object containing the data from
         the given InputStream object
Throws:
IOException - if there is a problem in reading data from
            the input stream
SOAPException - may be thrown if the message is invalid
IllegalArgumentException - if the MessageFactory
      requires one or more MIME headers to be present in the
      headers parameter and they are missing.
      MessageFactory implementations for
      SOAP_1_1_PROTOCOL or
      SOAP_1_2_PROTOCOL must not throw
      IllegalArgumentException for this reason.


"
MessageFactory,newInstance(),static MessageFactory,"Creates a new MessageFactory object that is an instance of the default implementation (SOAP 1.1), This method uses the following ordered lookup procedure to determine the MessageFactory implementation class to load: Use the javax.xml.soap.MessageFactory system property.","

newInstance
public static MessageFactory newInstance()
                                  throws SOAPException
Creates a new MessageFactory object that is an instance
 of the default implementation (SOAP 1.1),

 This method uses the following ordered lookup procedure to determine the MessageFactory implementation class to load:
 
 Use the javax.xml.soap.MessageFactory system property.
   Use the properties file ""lib/jaxm.properties"" in the JRE directory. This configuration file is in standard
 java.util.Properties format and contains the fully qualified name of the implementation class with the key being the
 system property defined above.
   Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API
 will look for a classname in the file META-INF/services/javax.xml.soap.MessageFactory in jars available to the runtime.
   Use the SAAJMetaFactory instance to locate the MessageFactory implementation class.
 

Returns:
a new instance of a MessageFactory
Throws:
SOAPException - if there was an error in creating the
            default implementation of the
            MessageFactory.
See Also:
SAAJMetaFactory


"
MessageFactory,newInstance(String protocol),static MessageFactory,Creates a new MessageFactory object that is an instance of the specified implementation.,"

newInstance
public static MessageFactory newInstance(String protocol)
                                  throws SOAPException
Creates a new MessageFactory object that is an instance
 of the specified implementation.  May be a dynamic message factory,
 a SOAP 1.1 message factory, or a SOAP 1.2 message factory. A dynamic
 message factory creates messages based on the MIME headers specified
 as arguments to the createMessage method.

 This method uses the SAAJMetaFactory to locate the implementation class
 and create the MessageFactory instance.

Parameters:
protocol - a string constant representing the class of the
                   specified message factory implementation. May be
                   either DYNAMIC_SOAP_PROTOCOL,
                   DEFAULT_SOAP_PROTOCOL (which is the same
                   as) SOAP_1_1_PROTOCOL, or
                   SOAP_1_2_PROTOCOL.
Returns:
a new instance of a MessageFactory
Throws:
SOAPException - if there was an error in creating the
            specified implementation of  MessageFactory.
Since:
SAAJ 1.3
See Also:
SAAJMetaFactory


"
MimeHeader,getName(),String,Returns the name of this MimeHeader object.,"

getName
public String getName()
Returns the name of this MimeHeader object.

Returns:
the name of the header as a String


"
MimeHeader,getValue(),String,Returns the value of this MimeHeader object.,"

getValue
public String getValue()
Returns the value of this MimeHeader object.

Returns:
the value of the header as a String


"
MimeHeaders,"addHeader(String name, String value)",void,Adds a MimeHeader object with the specified name and value to this MimeHeaders object's list of headers.,"

addHeader
public void addHeader(String name,
                      String value)
Adds a MimeHeader object with the specified name and value
 to this MimeHeaders object's list of headers.
 
 Note that RFC822 headers can contain only US-ASCII characters.

Parameters:
name - a String with the name of the header to
          be added
value - a String with the value of the header to
          be added
Throws:
IllegalArgumentException - if there was a problem in the
 mime header name or value being added


"
MimeHeaders,getAllHeaders(),Iterator,Returns all the MimeHeaders in this MimeHeaders object.,"

getAllHeaders
public Iterator getAllHeaders()
Returns all the MimeHeaders in this MimeHeaders object.

Returns:
an Iterator object over this MimeHeaders
          object's list of MimeHeader objects


"
MimeHeaders,getHeader(String name),String[],Returns all of the values for the specified header as an array of String objects.,"

getHeader
public String[] getHeader(String name)
Returns all of the values for the specified header as an array of
 String objects.

Parameters:
name - the name of the header for which values will be returned
Returns:
a String array with all of the values for the
         specified header
See Also:
setHeader(java.lang.String, java.lang.String)


"
MimeHeaders,getMatchingHeaders(String[] names),Iterator,Returns all the MimeHeader objects whose name matches a name in the given array of names.,"

getMatchingHeaders
public Iterator getMatchingHeaders(String[] names)
Returns all the MimeHeader objects whose name matches
 a name in the given array of names.

Parameters:
names - an array of String objects with the names
         for which to search
Returns:
an Iterator object over the MimeHeader
          objects whose name matches one of the names in the given list


"
MimeHeaders,getNonMatchingHeaders(String[] names),Iterator,Returns all of the MimeHeader objects whose name does not match a name in the given array of names.,"

getNonMatchingHeaders
public Iterator getNonMatchingHeaders(String[] names)
Returns all of the MimeHeader objects whose name does not
 match a name in the given array of names.

Parameters:
names - an array of String objects with the names
         for which to search
Returns:
an Iterator object over the MimeHeader
          objects whose name does not match one of the names in the given list


"
MimeHeaders,removeAllHeaders(),void,Removes all the header entries from this MimeHeaders object.,"

removeAllHeaders
public void removeAllHeaders()
Removes all the header entries from this MimeHeaders object.

"
MimeHeaders,removeHeader(String name),void,Remove all MimeHeader objects whose name matches the given name.,"

removeHeader
public void removeHeader(String name)
Remove all MimeHeader objects whose name matches the
 given name.

Parameters:
name - a String with the name of the header for
          which to search


"
MimeHeaders,"setHeader(String name, String value)",void,"Replaces the current value of the first header entry whose name matches the given name with the given value, adding a new header if no existing header name matches.","

setHeader
public void setHeader(String name,
                      String value)
Replaces the current value of the first header entry whose name matches
 the given name with the given value, adding a new header if no existing header
 name matches. This method also removes all matching headers after the first one.
 
 Note that RFC822 headers can contain only US-ASCII characters.

Parameters:
name - a String with the name of the header for
          which to search
value - a String with the value that will replace the
          current value of the specified header
Throws:
IllegalArgumentException - if there was a problem in the
 mime header name or the value being set
See Also:
getHeader(java.lang.String)


"
SAAJMetaFactory,newMessageFactory(String protocol),protected abstract MessageFactory,Creates a MessageFactory object for the given String protocol.,"

newMessageFactory
protected abstract MessageFactory newMessageFactory(String protocol)
                                             throws SOAPException
Creates a MessageFactory object for
 the given String protocol.

Parameters:
protocol - a String indicating the protocol
Throws:
SOAPException - if there is an error in creating the
            MessageFactory
See Also:
SOAPConstants.SOAP_1_1_PROTOCOL, 
SOAPConstants.SOAP_1_2_PROTOCOL, 
SOAPConstants.DYNAMIC_SOAP_PROTOCOL


"
SAAJMetaFactory,newSOAPFactory(String protocol),protected abstract SOAPFactory,Creates a SOAPFactory object for the given String protocol.,"

newSOAPFactory
protected abstract SOAPFactory newSOAPFactory(String protocol)
                                       throws SOAPException
Creates a SOAPFactory object for
 the given String protocol.

Parameters:
protocol - a String indicating the protocol
Throws:
SOAPException - if there is an error in creating the
            SOAPFactory
See Also:
SOAPConstants.SOAP_1_1_PROTOCOL, 
SOAPConstants.SOAP_1_2_PROTOCOL, 
SOAPConstants.DYNAMIC_SOAP_PROTOCOL


"
SAAJResult,getResult(),Node,NULL,"

getResult
public Node getResult()

Returns:
the resulting Tree that was created under the specified root Node.
Since:
SAAJ 1.3


"
SOAPConnection,"call(SOAPMessage request, Object to)",abstract SOAPMessage,Sends the given message to the specified endpoint and blocks until it has returned the response.,"

call
public abstract SOAPMessage call(SOAPMessage request,
                                 Object to)
                          throws SOAPException
Sends the given message to the specified endpoint and blocks until
 it has returned the response.

Parameters:
request - the SOAPMessage object to be sent
to - an Object that identifies
         where the message should be sent. It is required to
         support Objects of type
         java.lang.String,
         java.net.URL, and when JAXM is present
         javax.xml.messaging.URLEndpoint
Returns:
the SOAPMessage object that is the response to the
         message that was sent
Throws:
SOAPException - if there is a SOAP error


"
SOAPConnection,close(),abstract void,Closes this SOAPConnection object.,"

close
public abstract void close()
                    throws SOAPException
Closes this SOAPConnection object.

Throws:
SOAPException - if there is a SOAP error


"
SOAPConnection,get(Object to),SOAPMessage,"Gets a message from a specific endpoint and blocks until it receives,","

get
public SOAPMessage get(Object to)
                throws SOAPException
Gets a message from a specific endpoint and blocks until it receives,

Parameters:
to - an Object that identifies where
                  the request should be sent. Objects of type
                 java.lang.String and
                 java.net.URL must be supported.
Returns:
the SOAPMessage object that is the response to the
                  get message request
Throws:
SOAPException - if there is a SOAP error
Since:
SAAJ 1.3


"
SOAPConnectionFactory,createConnection(),abstract SOAPConnection,Create a new SOAPConnection.,"

createConnection
public abstract SOAPConnection createConnection()
                                         throws SOAPException
Create a new SOAPConnection.

Returns:
the new SOAPConnection object.
Throws:
SOAPException - if there was an exception creating the
 SOAPConnection object.


"
SOAPConnectionFactory,newInstance(),static SOAPConnectionFactory,Creates an instance of the default SOAPConnectionFactory object.,"

newInstance
public static SOAPConnectionFactory newInstance()
                                         throws SOAPException,
                                                UnsupportedOperationException
Creates an instance of the default
 SOAPConnectionFactory object.

Returns:
a new instance of a default
         SOAPConnectionFactory object
Throws:
SOAPException - if there was an error creating the
            SOAPConnectionFactory
UnsupportedOperationException - if newInstance is not
 supported.


"
SOAPElementFactory,create(Name name),SOAPElement,Deprecated. Use javax.xml.soap.SOAPFactory.createElement(javax.xml.soap.Name) instead,"

create
public SOAPElement create(Name name)
                   throws SOAPException
Deprecated. Use
 javax.xml.soap.SOAPFactory.createElement(javax.xml.soap.Name)
 instead
Create a SOAPElement object initialized with the
 given Name object.

Parameters:
name - a Name object with the XML name for
             the new element
Returns:
the new SOAPElement object that was
         created
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
See Also:
SOAPFactory.createElement(javax.xml.soap.Name), 
SOAPFactory.createElement(javax.xml.namespace.QName)


"
SOAPElementFactory,create(String localName),SOAPElement,Deprecated. Use javax.xml.soap.SOAPFactory.createElement(String localName) instead,"

create
public SOAPElement create(String localName)
                   throws SOAPException
Deprecated. Use
 javax.xml.soap.SOAPFactory.createElement(String localName) instead
Create a SOAPElement object initialized with the
 given local name.

Parameters:
localName - a String giving the local name for
             the new element
Returns:
the new SOAPElement object that was
         created
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
See Also:
SOAPFactory.createElement(java.lang.String)


"
SOAPElementFactory,"create(String localName, String prefix, String uri)",SOAPElement,"Deprecated. Use javax.xml.soap.SOAPFactory.createElement(String localName, String prefix, String uri) instead","

create
public SOAPElement create(String localName,
                          String prefix,
                          String uri)
                   throws SOAPException
Deprecated. Use
 javax.xml.soap.SOAPFactory.createElement(String localName,
                      String prefix,
                      String uri)
 instead
Create a new SOAPElement object with the given
 local name, prefix and uri.

Parameters:
localName - a String giving the local name
                  for the new element
prefix - the prefix for this SOAPElement
uri - a String giving the URI of the
            namespace to which the new element belongs
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
See Also:
SOAPFactory.createElement(java.lang.String, java.lang.String, java.lang.String)


"
SOAPElementFactory,newInstance(),static SOAPElementFactory,Deprecated.,"

newInstance
public static SOAPElementFactory newInstance()
                                      throws SOAPException
Deprecated. 
Creates a new instance of SOAPElementFactory.

Returns:
a new instance of a SOAPElementFactory
Throws:
SOAPException - if there was an error creating the
            default SOAPElementFactory


"
SOAPFactory,createDetail(),abstract Detail,Creates a new Detail object which serves as a container for DetailEntry objects.,"

createDetail
public abstract Detail createDetail()
                             throws SOAPException
Creates a new Detail object which serves as a container
 for DetailEntry objects.
 
 This factory method creates Detail objects for use in
 situations where it is not practical to use the SOAPFault
 abstraction.

Returns:
a Detail object
Throws:
SOAPException - if there is a SOAP error
UnsupportedOperationException - if the protocol specified
         for the SOAPFactory was DYNAMIC_SOAP_PROTOCOL


"
SOAPFactory,createElement(Element domElement),SOAPElement,Creates a SOAPElement object from an existing DOM Element.,"

createElement
public SOAPElement createElement(Element domElement)
                          throws SOAPException
Creates a SOAPElement object from an existing DOM
 Element. If the DOM Element that is passed in
 as an argument is already a SOAPElement then this method
 must return it unmodified without any further work. Otherwise, a new
 SOAPElement is created and a deep copy is made of the
 domElement argument. The concrete type of the return value
 will depend on the name of the domElement argument. If any
 part of the tree rooted in domElement violates SOAP rules, a
 SOAPException will be thrown.

Parameters:
domElement - - the Element to be copied.
Returns:
a new SOAPElement that is a copy of domElement.
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
Since:
SAAJ 1.3


"
SOAPFactory,createElement(Name name),abstract SOAPElement,Creates a SOAPElement object initialized with the given Name object.,"

createElement
public abstract SOAPElement createElement(Name name)
                                   throws SOAPException
Creates a SOAPElement object initialized with the
 given Name object. The concrete type of the return value
 will depend on the name given to the new SOAPElement. For
 instance, a new SOAPElement with the name
 ""{http://www.w3.org/2003/05/soap-envelope}Envelope"" would cause a
 SOAPEnvelope that supports SOAP 1.2 behavior to be created.

Parameters:
name - a Name object with the XML name for
             the new element
Returns:
the new SOAPElement object that was
         created
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
See Also:
createElement(javax.xml.namespace.QName)


"
SOAPFactory,createElement(QName qname),SOAPElement,Creates a SOAPElement object initialized with the given QName object.,"

createElement
public SOAPElement createElement(QName qname)
                          throws SOAPException
Creates a SOAPElement object initialized with the
 given QName object. The concrete type of the return value
 will depend on the name given to the new SOAPElement. For
 instance, a new SOAPElement with the name
 ""{http://www.w3.org/2003/05/soap-envelope}Envelope"" would cause a
 SOAPEnvelope that supports SOAP 1.2 behavior to be created.

Parameters:
qname - a QName object with the XML name for
             the new element
Returns:
the new SOAPElement object that was
         created
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object
Since:
SAAJ 1.3
See Also:
createElement(Name)


"
SOAPFactory,createElement(String localName),abstract SOAPElement,Creates a SOAPElement object initialized with the given local name.,"

createElement
public abstract SOAPElement createElement(String localName)
                                   throws SOAPException
Creates a SOAPElement object initialized with the
 given local name.

Parameters:
localName - a String giving the local name for
             the new element
Returns:
the new SOAPElement object that was
         created
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object


"
SOAPFactory,"createElement(String localName, String prefix, String uri)",abstract SOAPElement,"Creates a new SOAPElement object with the given local name, prefix and uri.","

createElement
public abstract SOAPElement createElement(String localName,
                                          String prefix,
                                          String uri)
                                   throws SOAPException
Creates a new SOAPElement object with the given
 local name, prefix and uri. The concrete type of the return value
 will depend on the name given to the new SOAPElement. For
 instance, a new SOAPElement with the name
 ""{http://www.w3.org/2003/05/soap-envelope}Envelope"" would cause a
 SOAPEnvelope that supports SOAP 1.2 behavior to be created.

Parameters:
localName - a String giving the local name
                  for the new element
prefix - the prefix for this SOAPElement
uri - a String giving the URI of the
            namespace to which the new element belongs
Throws:
SOAPException - if there is an error in creating the
            SOAPElement object


"
SOAPFactory,createFault(),abstract SOAPFault,Creates a new default SOAPFault object,"

createFault
public abstract SOAPFault createFault()
                               throws SOAPException
Creates a new default SOAPFault object

Returns:
a SOAPFault object
Throws:
SOAPException - if there is a SOAP error
Since:
SAAJ 1.3


"
SOAPFactory,"createFault(String reasonText, QName faultCode)",abstract SOAPFault,Creates a new SOAPFault object initialized with the given reasonText and faultCode,"

createFault
public abstract SOAPFault createFault(String reasonText,
                                      QName faultCode)
                               throws SOAPException
Creates a new SOAPFault object initialized with the given reasonText
  and faultCode

Parameters:
reasonText - the ReasonText/FaultString for the fault
faultCode - the FaultCode for the fault
Returns:
a SOAPFault object
Throws:
SOAPException - if there is a SOAP error
Since:
SAAJ 1.3


"
SOAPFactory,createName(String localName),abstract Name,Creates a new Name object initialized with the given local name.,"

createName
public abstract Name createName(String localName)
                         throws SOAPException
Creates a new Name object initialized with the
 given local name.
 
 This factory method creates Name objects for use in
 situations where it is not practical to use the SOAPEnvelope
 abstraction.

Parameters:
localName - a String giving the local name
Returns:
a Name object initialized with the given
         local name
Throws:
SOAPException - if there is a SOAP error


"
SOAPFactory,"createName(String localName, String prefix, String uri)",abstract Name,"Creates a new Name object initialized with the given local name, namespace prefix, and namespace URI.","

createName
public abstract Name createName(String localName,
                                String prefix,
                                String uri)
                         throws SOAPException
Creates a new Name object initialized with the
 given local name, namespace prefix, and namespace URI.
 
 This factory method creates Name objects for use in
 situations where it is not practical to use the SOAPEnvelope
 abstraction.

Parameters:
localName - a String giving the local name
prefix - a String giving the prefix of the namespace
uri - a String giving the URI of the namespace
Returns:
a Name object initialized with the given
         local name, namespace prefix, and namespace URI
Throws:
SOAPException - if there is a SOAP error


"
SOAPFactory,newInstance(),static SOAPFactory,"Creates a new SOAPFactory object that is an instance of the default implementation (SOAP 1.1), This method uses the following ordered lookup procedure to determine the SOAPFactory implementation class to load: Use the javax.xml.soap.SOAPFactory system property.","

newInstance
public static SOAPFactory newInstance()
                               throws SOAPException
Creates a new SOAPFactory object that is an instance of
 the default implementation (SOAP 1.1),

 This method uses the following ordered lookup procedure to determine the SOAPFactory implementation class to load:
 
 Use the javax.xml.soap.SOAPFactory system property.
   Use the properties file ""lib/jaxm.properties"" in the JRE directory. This configuration file is in standard
 java.util.Properties format and contains the fully qualified name of the implementation class with the key being the
 system property defined above.
   Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API
 will look for a classname in the file META-INF/services/javax.xml.soap.SOAPFactory in jars available to the runtime.
   Use the SAAJMetaFactory instance to locate the SOAPFactory implementation class.
 

Returns:
a new instance of a SOAPFactory
Throws:
SOAPException - if there was an error creating the
            default SOAPFactory
See Also:
SAAJMetaFactory


"
SOAPFactory,newInstance(String protocol),static SOAPFactory,"Creates a new SOAPFactory object that is an instance of the specified implementation, this method uses the SAAJMetaFactory to locate the implementation class and create the SOAPFactory instance.","

newInstance
public static SOAPFactory newInstance(String protocol)
                               throws SOAPException
Creates a new SOAPFactory object that is an instance of
 the specified implementation, this method uses the SAAJMetaFactory to
 locate the implementation class and create the SOAPFactory instance.

Parameters:
protocol - a string constant representing the protocol of the
                   specified SOAP factory implementation. May be
                   either DYNAMIC_SOAP_PROTOCOL,
                   DEFAULT_SOAP_PROTOCOL (which is the same
                   as) SOAP_1_1_PROTOCOL, or
                   SOAP_1_2_PROTOCOL.
Returns:
a new instance of a SOAPFactory
Throws:
SOAPException - if there was an error creating the
            specified SOAPFactory
Since:
SAAJ 1.3
See Also:
SAAJMetaFactory


"
SOAPMessage,addAttachmentPart(AttachmentPart AttachmentPart),abstract void,Adds the given AttachmentPart object to this SOAPMessage object.,"

addAttachmentPart
public abstract void addAttachmentPart(AttachmentPart AttachmentPart)
Adds the given AttachmentPart object to this SOAPMessage
 object. An AttachmentPart object must be created before
 it can be added to a message.

Parameters:
AttachmentPart - an AttachmentPart object that is to become part
           of this SOAPMessage object
Throws:
IllegalArgumentException


"
SOAPMessage,countAttachments(),abstract int,Gets a count of the number of attachments in this message.,"

countAttachments
public abstract int countAttachments()
Gets a count of the number of attachments in this message. This count
 does not include the SOAP part.

Returns:
the number of AttachmentPart objects that are
         part of this SOAPMessage object


"
SOAPMessage,createAttachmentPart(),abstract AttachmentPart,Creates a new empty AttachmentPart object.,"

createAttachmentPart
public abstract AttachmentPart createAttachmentPart()
Creates a new empty AttachmentPart object. Note that the
 method addAttachmentPart must be called with this new
 AttachmentPart object as the parameter in order for it to
 become an attachment to this SOAPMessage object.

Returns:
a new AttachmentPart object that can be populated
         and added to this SOAPMessage object


"
SOAPMessage,createAttachmentPart(DataHandler dataHandler),AttachmentPart,Creates an AttachmentPart object and populates it using the given DataHandler object.,"

createAttachmentPart
public AttachmentPart createAttachmentPart(DataHandler dataHandler)
Creates an AttachmentPart object and populates it using
 the given DataHandler object.

Parameters:
dataHandler - the javax.activation.DataHandler object that
           will generate the content for this SOAPMessage
           object
Returns:
a new AttachmentPart object that contains data
         generated by the given DataHandler object
Throws:
IllegalArgumentException - if there was a problem with the specified DataHandler
               object
See Also:
DataHandler, 
DataContentHandler


"
SOAPMessage,"createAttachmentPart(Object content, String contentType)",AttachmentPart,Creates an AttachmentPart object and populates it with the specified data of the specified content type.,"

createAttachmentPart
public AttachmentPart createAttachmentPart(Object content,
                                           String contentType)
Creates an AttachmentPart object and populates it with
 the specified data of the specified content type. The type of the
 Object should correspond to the value given for the
 Content-Type.

Parameters:
content - an Object containing the content for the
           AttachmentPart object to be created
contentType - a String object giving the type of content;
           examples are ""text/xml"", ""text/plain"", and ""image/jpeg""
Returns:
a new AttachmentPart object that contains the
         given data
Throws:
IllegalArgumentException - may be thrown if the contentType does not match the type
               of the content object, or if there was no
               DataContentHandler object for the given
               content object
See Also:
DataHandler, 
DataContentHandler


"
SOAPMessage,getAttachment(SOAPElement element),abstract AttachmentPart,Returns an AttachmentPart object that is associated with an attachment that is referenced by this SOAPElement or null if no such attachment exists.,"

getAttachment
public abstract AttachmentPart getAttachment(SOAPElement element)
                                      throws SOAPException
Returns an AttachmentPart object that is associated with an
 attachment that is referenced by this SOAPElement or
 null if no such attachment exists. References can be made
 via an href attribute as described in
 SOAP Messages with Attachments,
 or via a single Text child node containing a URI as
 described in the WS-I Attachments Profile 1.0 for elements of schema
 type ref:swaRef.  These two mechanisms must be supported.
 The support for references via href attribute also implies that
 this method should also be supported on an element that is an
 xop:Include element (
 XOP).
 other reference mechanisms may be supported by individual
 implementations of this standard. Contact your vendor for details.

Parameters:
element - The SOAPElement containing the reference to an Attachment
Returns:
the referenced AttachmentPart or null if no such
          AttachmentPart exists or no reference can be
          found in this SOAPElement.
Throws:
SOAPException - if there is an error in the attempt to access the
          attachment
Since:
SAAJ 1.3


"
SOAPMessage,getAttachments(),abstract Iterator,Retrieves all the AttachmentPart objects that are part of this SOAPMessage object.,"

getAttachments
public abstract Iterator getAttachments()
Retrieves all the AttachmentPart objects that are part of
 this SOAPMessage object.

Returns:
an iterator over all the attachments in this message


"
SOAPMessage,getAttachments(MimeHeaders headers),abstract Iterator,Retrieves all the AttachmentPart objects that have header entries that match the specified headers.,"

getAttachments
public abstract Iterator getAttachments(MimeHeaders headers)
Retrieves all the AttachmentPart objects that have header
 entries that match the specified headers. Note that a returned
 attachment could have headers in addition to those specified.

Parameters:
headers - a MimeHeaders object containing the MIME
           headers for which to search
Returns:
an iterator over all attachments that have a header that matches
         one of the given headers


"
SOAPMessage,getContentDescription(),abstract String,Retrieves a description of this SOAPMessage object's content.,"

getContentDescription
public abstract String getContentDescription()
Retrieves a description of this SOAPMessage object's
 content.

Returns:
a String describing the content of this
         message or null if no description has been set
See Also:
setContentDescription(java.lang.String)


"
SOAPMessage,getMimeHeaders(),abstract MimeHeaders,Returns all the transport-specific MIME headers for this SOAPMessage object in a transport-independent fashion.,"

getMimeHeaders
public abstract MimeHeaders getMimeHeaders()
Returns all the transport-specific MIME headers for this SOAPMessage
 object in a transport-independent fashion.

Returns:
a MimeHeaders object containing the MimeHeader
         objects


"
SOAPMessage,getProperty(String property),Object,Retrieves value of the specified property.,"

getProperty
public Object getProperty(String property)
                   throws SOAPException
Retrieves value of the specified property.

Parameters:
property - the name of the property to retrieve
Returns:
the value associated with the named property or null
         if no such property exists.
Throws:
SOAPException - if the property name is not recognized.
Since:
SAAJ 1.2


"
SOAPMessage,getSOAPBody(),SOAPBody,Gets the SOAP Body contained in this SOAPMessage object.,"

getSOAPBody
public SOAPBody getSOAPBody()
                     throws SOAPException
Gets the SOAP Body contained in this SOAPMessage object.
 

Returns:
the SOAPBody object contained by this SOAPMessage
         object
Throws:
SOAPException - if the SOAP Body does not exist or cannot be retrieved
Since:
SAAJ 1.2


"
SOAPMessage,getSOAPHeader(),SOAPHeader,Gets the SOAP Header contained in this SOAPMessage object.,"

getSOAPHeader
public SOAPHeader getSOAPHeader()
                         throws SOAPException
Gets the SOAP Header contained in this SOAPMessage
 object.
 

Returns:
the SOAPHeader object contained by this SOAPMessage
         object
Throws:
SOAPException - if the SOAP Header does not exist or cannot be retrieved
Since:
SAAJ 1.2


"
SOAPMessage,getSOAPPart(),abstract SOAPPart,Gets the SOAP part of this SOAPMessage object.,"

getSOAPPart
public abstract SOAPPart getSOAPPart()
Gets the SOAP part of this SOAPMessage object.
 
SOAPMessage object contains one or more attachments, the
 SOAP Part must be the first MIME body part in the message.

Returns:
the SOAPPart object for this SOAPMessage
         object


"
SOAPMessage,removeAllAttachments(),abstract void,Removes all AttachmentPart objects that have been added to this SOAPMessage object.,"

removeAllAttachments
public abstract void removeAllAttachments()
Removes all AttachmentPart objects that have been added
 to this SOAPMessage object.
 
 This method does not touch the SOAP part.

"
SOAPMessage,removeAttachments(MimeHeaders headers),abstract void,Removes all the AttachmentPart objects that have header entries that match the specified headers.,"

removeAttachments
public abstract void removeAttachments(MimeHeaders headers)
Removes all the AttachmentPart objects that have header
 entries that match the specified headers. Note that the removed
 attachment could have headers in addition to those specified.

Parameters:
headers - a MimeHeaders object containing the MIME
           headers for which to search
Since:
SAAJ 1.3


"
SOAPMessage,saveChanges(),abstract void,Updates this SOAPMessage object with all the changes that have been made to it.,"

saveChanges
public abstract void saveChanges()
                          throws SOAPException
Updates this SOAPMessage object with all the changes that
 have been made to it. This method is called automatically when
 writeTo(OutputStream) is  called. However, if
 changes are made to a message that was received or to one that has
 already been sent, the method saveChanges needs to be
 called explicitly in order to save the changes. The method saveChanges
 also generates any changes that can be read back (for example, a
 MessageId in profiles that support a message id). All MIME headers in a
 message that is created for sending purposes are guaranteed to have
 valid values only after saveChanges has been called.
 
 In addition, this method marks the point at which the data from all
 constituent AttachmentPart objects are pulled into the
 message.
 

Throws:
SOAPException - if there was a problem saving
               changes to this message.
SOAPException


"
SOAPMessage,saveRequired(),abstract boolean,Indicates whether this SOAPMessage object needs to have the method saveChanges called on it.,"

saveRequired
public abstract boolean saveRequired()
Indicates whether this SOAPMessage object needs to have
 the method saveChanges called on it.

Returns:
true if saveChanges needs to be
         called; false otherwise.


"
SOAPMessage,setContentDescription(String description),abstract void,Sets the description of this SOAPMessage object's content with the given description.,"

setContentDescription
public abstract void setContentDescription(String description)
Sets the description of this SOAPMessage object's
 content with the given description.

Parameters:
description - a String describing the content of this
         message
See Also:
getContentDescription()


"
SOAPMessage,"setProperty(String property, Object value)",void,Associates the specified value with the specified property.,"

setProperty
public void setProperty(String property,
                        Object value)
                 throws SOAPException
Associates the specified value with the specified property. If there was
 already a value associated with this property, the old value is
 replaced.
 
 The valid property names include
 WRITE_XML_DECLARATION  and
 CHARACTER_SET_ENCODING. All of these standard SAAJ
 properties are prefixed by ""javax.xml.soap"". Vendors may also add
 implementation specific properties. These properties must be prefixed
 with package names that are unique to the vendor.
 
 Setting the property WRITE_XML_DECLARATION to ""true""
 will cause an XML Declaration to be written out at the start of the SOAP
 message. The default value of ""false"" suppresses this declaration.
 
 The property CHARACTER_SET_ENCODING defaults to the value
 ""utf-8"" which causes the SOAP message to be encoded using
 UTF-8. Setting CHARACTER_SET_ENCODING to ""utf-16""
 causes the SOAP message to be encoded using UTF-16.
 
 Some implementations may allow encodings in addition to UTF-8 and
 UTF-16. Refer to your vendor's documentation for details.

Parameters:
property - the property with which the specified value is to be
           associated.
value - the value to be associated with the specified property
Throws:
SOAPException - if the property name is not recognized.
Since:
SAAJ 1.2


"
SOAPMessage,writeTo(OutputStream out),abstract void,Writes this SOAPMessage object to the given output stream.,"

writeTo
public abstract void writeTo(OutputStream out)
                      throws SOAPException,
                             IOException
Writes this SOAPMessage object to the given output
 stream. The externalization format is as defined by the SOAP 1.1 with
 Attachments specification.
 
 If there are no attachments, just an XML stream is written out. For
 those messages that have attachments, writeTo writes a
 MIME-encoded byte stream.
 
 Note that this method does not write the transport-specific MIME Headers
 of the Message

Parameters:
out - the OutputStream object to which this SOAPMessage
           object will be written
Throws:
IOException - if an I/O error occurs
SOAPException - if there was a problem in externalizing this SOAP message


"
SOAPPart,"addMimeHeader(String name, String value)",abstract void,Creates a MimeHeader object with the specified name and value and adds it to this SOAPPart object.,"

addMimeHeader
public abstract void addMimeHeader(String name,
                                   String value)
Creates a MimeHeader object with the specified
 name and value and adds it to this SOAPPart object.
 If a MimeHeader with the specified name already
 exists, this method adds the specified value to the already
 existing value(s).
 
 Note that RFC822 headers can contain only US-ASCII characters.

Parameters:
name - a String giving the header name
value - a String giving the value to be set
                  or added
Throws:
IllegalArgumentException - if there was a problem with
            the specified mime header name or value


"
SOAPPart,getAllMimeHeaders(),abstract Iterator,Retrieves all the headers for this SOAPPart object as an iterator over the MimeHeader objects.,"

getAllMimeHeaders
public abstract Iterator getAllMimeHeaders()
Retrieves all the headers for this SOAPPart object
 as an iterator over the MimeHeader objects.

Returns:
an Iterator object with all of the Mime
          headers for this SOAPPart object


"
SOAPPart,getContent(),abstract Source,Returns the content of the SOAPEnvelope as a JAXP Source object.,"

getContent
public abstract Source getContent()
                           throws SOAPException
Returns the content of the SOAPEnvelope as a JAXP Source
 object.

Returns:
the content as a javax.xml.transform.Source object
Throws:
SOAPException - if the implementation cannot convert
                          the specified Source object
See Also:
setContent(javax.xml.transform.Source)


"
SOAPPart,getContentId(),String,"Retrieves the value of the MIME header whose name is ""Content-Id"".","

getContentId
public String getContentId()
Retrieves the value of the MIME header whose name is ""Content-Id"".

Returns:
a String giving the value of the MIME header
         named ""Content-Id""
See Also:
setContentId(java.lang.String)


"
SOAPPart,getContentLocation(),String,"Retrieves the value of the MIME header whose name is ""Content-Location"".","

getContentLocation
public String getContentLocation()
Retrieves the value of the MIME header whose name is ""Content-Location"".

Returns:
a String giving the value of the MIME header whose
          name is ""Content-Location""
See Also:
setContentLocation(java.lang.String)


"
SOAPPart,getEnvelope(),abstract SOAPEnvelope,Gets the SOAPEnvelope object associated with this SOAPPart object.,"

getEnvelope
public abstract SOAPEnvelope getEnvelope()
                                  throws SOAPException
Gets the SOAPEnvelope object associated with this
 SOAPPart object. Once the SOAP envelope is obtained, it
 can be used to get its contents.

Returns:
the SOAPEnvelope object for this
           SOAPPart object
Throws:
SOAPException - if there is a SOAP error


"
SOAPPart,getMatchingMimeHeaders(String[] names),abstract Iterator,Retrieves all MimeHeader objects that match a name in the given array.,"

getMatchingMimeHeaders
public abstract Iterator getMatchingMimeHeaders(String[] names)
Retrieves all MimeHeader objects that match a name in
 the given array.

Parameters:
names - a String array with the name(s) of the
        MIME headers to be returned
Returns:
all of the MIME headers that match one of the names in the
           given array, returned as an Iterator object


"
SOAPPart,getMimeHeader(String name),abstract String[],Gets all the values of the MimeHeader object in this SOAPPart object that is identified by the given String.,"

getMimeHeader
public abstract String[] getMimeHeader(String name)
Gets all the values of the MimeHeader object
 in this SOAPPart object that
 is identified by the given String.

Parameters:
name - the name of the header; example: ""Content-Type""
Returns:
a String array giving all the values for the
         specified header
See Also:
setMimeHeader(java.lang.String, java.lang.String)


"
SOAPPart,getNonMatchingMimeHeaders(String[] names),abstract Iterator,Retrieves all MimeHeader objects whose name does not match a name in the given array.,"

getNonMatchingMimeHeaders
public abstract Iterator getNonMatchingMimeHeaders(String[] names)
Retrieves all MimeHeader objects whose name does
 not match a name in the given array.

Parameters:
names - a String array with the name(s) of the
        MIME headers not to be returned
Returns:
all of the MIME headers in this SOAPPart object
          except those that match one of the names in the
           given array.  The nonmatching MIME headers are returned as an
           Iterator object.


"
SOAPPart,removeAllMimeHeaders(),abstract void,Removes all the MimeHeader objects for this SOAPEnvelope object.,"

removeAllMimeHeaders
public abstract void removeAllMimeHeaders()
Removes all the MimeHeader objects for this
 SOAPEnvelope object.

"
SOAPPart,removeMimeHeader(String header),abstract void,Removes all MIME headers that match the given name.,"

removeMimeHeader
public abstract void removeMimeHeader(String header)
Removes all MIME headers that match the given name.

Parameters:
header - a String giving the name of the MIME header(s) to
               be removed


"
SOAPPart,setContent(Source source),abstract void,Sets the content of the SOAPEnvelope object with the data from the given Source object.,"

setContent
public abstract void setContent(Source source)
                         throws SOAPException
Sets the content of the SOAPEnvelope object with the data
 from the given Source object. This Source
 must contain a valid SOAP document.

Parameters:
source - the javax.xml.transform.Source object with the
        data to be set
Throws:
SOAPException - if there is a problem in setting the source
See Also:
getContent()


"
SOAPPart,setContentId(String contentId),void,"Sets the value of the MIME header named ""Content-Id"" to the given String.","

setContentId
public void setContentId(String contentId)
Sets the value of the MIME header named ""Content-Id""
 to the given String.

Parameters:
contentId - a String giving the value of the MIME
        header ""Content-Id""
Throws:
IllegalArgumentException - if there is a problem in
 setting the content id
See Also:
getContentId()


"
SOAPPart,setContentLocation(String contentLocation),void,"Sets the value of the MIME header ""Content-Location"" to the given String.","

setContentLocation
public void setContentLocation(String contentLocation)
Sets the value of the MIME header ""Content-Location""
 to the given String.

Parameters:
contentLocation - a String giving the value
        of the MIME
        header ""Content-Location""
Throws:
IllegalArgumentException - if there is a problem in
            setting the content location.
See Also:
getContentLocation()


"
SOAPPart,"setMimeHeader(String name, String value)",abstract void,"Changes the first header entry that matches the given header name so that its value is the given value, adding a new header with the given name and value if no existing header is a match.","

setMimeHeader
public abstract void setMimeHeader(String name,
                                   String value)
Changes the first header entry that matches the given header name
 so that its value is the given value, adding a new header with the
 given name and value if no
 existing header is a match. If there is a match, this method clears
 all existing values for the first header that matches and sets the
 given value instead. If more than one header has
 the given name, this method removes all of the matching headers after
 the first one.
 
 Note that RFC822 headers can contain only US-ASCII characters.

Parameters:
name - a String giving the header name
                  for which to search
value - a String giving the value to be set.
                  This value will be substituted for the current value(s)
                  of the first header that is a match if there is one.
                  If there is no match, this value will be the value for
                  a new MimeHeader object.
Throws:
IllegalArgumentException - if there was a problem with
            the specified mime header name or value
See Also:
getMimeHeader(java.lang.String)


"
