Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractTableModel,1,int getRowCount(),False,,NULL
0,AbstractTableModel,2,int getColumnCount(),False,,NULL
0,AbstractTableModel,3,"Object getValueAt(int row, int column)",False,,NULL
0,AbstractTableModel,4,"void setValueAt(Object value, int row, int column)",True,,"

setValueAt
public void setValueAt(Object aValue,
                       int rowIndex,
                       int columnIndex)
This empty implementation is provided so users don't have to implement
  this method if their data model is not editable.

Specified by:
setValueAt in interface TableModel
Parameters:
aValue - value to assign to cell
rowIndex - row of cell
columnIndex - column of cell
See Also:
TableModel.getValueAt(int, int), 
TableModel.isCellEditable(int, int)


"
0,AbstractTableModel,5,String getColumnName(int column),True,,"

getColumnName
public String getColumnName(int column)
Returns a default name for the column using spreadsheet conventions:
  A, B, C, ... Z, AA, AB, etc.  If column cannot be found,
  returns an empty string.

Specified by:
getColumnName in interface TableModel
Parameters:
column - the column being queried
Returns:
a string containing the default name of column


"
1,DefaultTableCellRenderer,1,"Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)",True,,"

getTableCellRendererComponent
public Component getTableCellRendererComponent(JTable table,
                                               Object value,
                                               boolean isSelected,
                                               boolean hasFocus,
                                               int row,
                                               int column)
Returns the default table cell renderer.
 
 During a printing operation, this method will be called with
 isSelected and hasFocus values of
 false to prevent selection and focus from appearing
 in the printed output. To do other customization based on whether
 or not the table is being printed, check the return value from
 JComponent.isPaintingForPrint().

Specified by:
getTableCellRendererComponent in interface TableCellRenderer
Parameters:
table - the JTable
value - the value to assign to the cell at
                  [row, column]
isSelected - true if cell is selected
hasFocus - true if cell has focus
row - the row of the cell to render
column - the column of the cell to render
Returns:
the default table cell renderer
See Also:
JComponent.isPaintingForPrint()


"
1,DefaultTableCellRenderer,2,void setValue(Object value),True,,"

setValue
protected void setValue(Object value)
Sets the String object for the cell being rendered to
 value.

Parameters:
value - the string value for this cell; if value is
          null it sets the text value to an empty string
See Also:
JLabel.setText(java.lang.String)


"
1,DefaultTableCellRenderer,3,void setHorizontalAlignment(int alignment),False,,NULL
1,DefaultTableCellRenderer,4,void setVerticalAlignment(int alignment),False,,NULL
1,DefaultTableCellRenderer,5,void setBorder(Border border),False,,NULL
2,DefaultTableCellRenderer.UIResource,1,void setValue(Object value),False,,NULL
2,DefaultTableCellRenderer.UIResource,2,void setHorizontalAlignment(int alignment),False,,NULL
2,DefaultTableCellRenderer.UIResource,3,void setVerticalAlignment(int alignment),False,,NULL
2,DefaultTableCellRenderer.UIResource,4,void setIcon(Icon icon),False,,NULL
2,DefaultTableCellRenderer.UIResource,5,void setBorder(Border border),False,,NULL
3,DefaultTableColumnModel,1,void addColumn(TableColumn aColumn),True,,"

addColumn
public void addColumn(TableColumn aColumn)
Appends aColumn to the end of the
  tableColumns array.
  This method also posts the columnAdded
  event to its listeners.

Specified by:
addColumn in interface TableColumnModel
Parameters:
aColumn - the TableColumn to be added
Throws:
IllegalArgumentException - if aColumn is
                          null
See Also:
removeColumn(javax.swing.table.TableColumn)


"
3,DefaultTableColumnModel,2,void removeColumn(TableColumn aColumn),True,,"

removeColumn
public void removeColumn(TableColumn column)
Deletes the column from the
  tableColumns array.  This method will do nothing if
  column is not in the table's columns list.
  tile is called
  to resize both the header and table views.
  This method also posts a columnRemoved
  event to its listeners.

Specified by:
removeColumn in interface TableColumnModel
Parameters:
column - the TableColumn to be removed
See Also:
addColumn(javax.swing.table.TableColumn)


"
3,DefaultTableColumnModel,3,TableColumn getColumn(int columnIndex),True,,"

getColumn
public TableColumn getColumn(int columnIndex)
Returns the TableColumn object for the column
 at columnIndex.

Specified by:
getColumn in interface TableColumnModel
Parameters:
columnIndex - the index of the column desired
Returns:
the TableColumn object for the column
                          at columnIndex


"
3,DefaultTableColumnModel,4,int getColumnIndex(Object columnIdentifier),True,,"

getColumnIndex
public int getColumnIndex(Object identifier)
Returns the index of the first column in the tableColumns
 array whose identifier is equal to identifier,
 when compared using equals.

Specified by:
getColumnIndex in interface TableColumnModel
Parameters:
identifier - the identifier object
Returns:
the index of the first column in the
                  tableColumns array whose identifier
                  is equal to identifier
Throws:
IllegalArgumentException - if identifier
                          is null, or if no
                          TableColumn has this
                          identifier
See Also:
getColumn(int)


"
3,DefaultTableColumnModel,5,"void moveColumn(int columnIndex, int newIndex)",True,,"

moveColumn
public void moveColumn(int columnIndex,
                       int newIndex)
Moves the column and heading at columnIndex to
 newIndex.  The old column at columnIndex
 will now be found at newIndex.  The column
 that used to be at newIndex is shifted
 left or right to make room.  This will not move any columns if
 columnIndex equals newIndex.  This method
 also posts a columnMoved event to its listeners.

Specified by:
moveColumn in interface TableColumnModel
Parameters:
columnIndex - the index of column to be moved
newIndex - new index to move the column
Throws:
IllegalArgumentException - if column or
                                          newIndex
                                          are not in the valid range


"
4,DefaultTableModel,1,void addRow(Vector rowData),True,,"

addRow
public void addRow(Vector rowData)
Adds a row to the end of the model.  The new row will contain
  null values unless rowData is specified.
  Notification of the row being added will be generated.

Parameters:
rowData - optional data of the row being added


"
4,DefaultTableModel,2,"void insertRow(int row, Vector rowData)",True,,"

insertRow
public void insertRow(int row,
                      Vector rowData)
Inserts a row at row in the model.  The new row
  will contain null values unless rowData
  is specified.  Notification of the row being added will be generated.

Parameters:
row - the row index of the row to be inserted
rowData - optional data of the row being added
Throws:
ArrayIndexOutOfBoundsException - if the row was invalid


"
4,DefaultTableModel,3,void removeRow(int row),True,,"

removeRow
public void removeRow(int row)
Removes the row at row from the model.  Notification
  of the row being removed will be sent to all the listeners.

Parameters:
row - the row index of the row to be removed
Throws:
ArrayIndexOutOfBoundsException - if the row was invalid


"
4,DefaultTableModel,4,void setRowCount(int rowCount),True,,"

setRowCount
public void setRowCount(int rowCount)
Sets the number of rows in the model.  If the new size is greater
  than the current size, new rows are added to the end of the model
  If the new size is less than the current size, all
  rows at index rowCount and greater are discarded.

Since:
1.3
See Also:
setColumnCount(int)


"
4,DefaultTableModel,5,"void setDataVector(Vector dataVector, Vector columnIdentifiers)",True,,"

setDataVector
public void setDataVector(Vector dataVector,
                          Vector columnIdentifiers)
Replaces the current dataVector instance variable
  with the new Vector of rows, dataVector.
  Each row is represented in dataVector as a
  Vector of Object values.
  columnIdentifiers are the names of the new
  columns.  The first name in columnIdentifiers is
  mapped to column 0 in dataVector. Each row in
  dataVector is adjusted to match the number of
  columns in columnIdentifiers
  either by truncating the Vector if it is too long,
  or adding null values if it is too short.
  Note that passing in a null value for
  dataVector results in unspecified behavior,
  an possibly an exception.

Parameters:
dataVector - the new data vector
columnIdentifiers - the names of the columns
See Also:
getDataVector()


"
5,JTableHeader,1,TableColumnModel getColumnModel(),True,,"

getColumnModel
public TableColumnModel getColumnModel()
Returns the TableColumnModel that contains all column information
 of this table header.

Returns:
the columnModel property
See Also:
setColumnModel(javax.swing.table.TableColumnModel)


"
5,JTableHeader,2,void setReorderingAllowed(boolean reorderingAllowed),True,,"

setReorderingAllowed
public void setReorderingAllowed(boolean reorderingAllowed)
Sets whether the user can drag column headers to reorder columns.

Parameters:
reorderingAllowed - true if the table view should allow
                                  reordering; otherwise false
See Also:
getReorderingAllowed()


"
5,JTableHeader,3,void setResizingAllowed(boolean resizingAllowed),True,,"

setResizingAllowed
public void setResizingAllowed(boolean resizingAllowed)
Sets whether the user can resize columns by dragging between headers.

Parameters:
resizingAllowed - true if table view should allow
                                  resizing
See Also:
getResizingAllowed()


"
5,JTableHeader,4,void setDraggedDistance(int distance),True,,"

setDraggedDistance
public void setDraggedDistance(int distance)
Sets the header's draggedDistance to distance.

Parameters:
distance - the distance dragged


"
5,JTableHeader,5,void setDefaultRenderer(TableHeaderRenderer defaultRenderer),False,,NULL
6,TableColumn,1,void setPreferredWidth(int preferredWidth),True,,"

setPreferredWidth
public void setPreferredWidth(int preferredWidth)
Sets this column's preferred width to preferredWidth.
 If preferredWidth exceeds the minimum or maximum width,
 it is adjusted to the appropriate limiting value.
 
 For details on how the widths of columns in the JTable
 (and JTableHeader) are calculated from the
 preferredWidth,
 see the doLayout method in JTable.

Parameters:
preferredWidth - the new preferred width
See Also:
getPreferredWidth(), 
JTable.doLayout()


"
6,TableColumn,2,void setResizable(boolean resizable),True,,"

setResizable
public void setResizable(boolean isResizable)
Sets whether this column can be resized.

Parameters:
isResizable - if true, resizing is allowed; otherwise false
See Also:
getResizable()


"
6,TableColumn,3,void setMinWidth(int minWidth),True,,"

setMinWidth
public void setMinWidth(int minWidth)
Sets the TableColumn's minimum width to
 minWidth,
 adjusting the new minimum width if necessary to ensure that
 0 <= minWidth <= maxWidth.
 For example, if the minWidth argument is negative,
 this method sets the minWidth property to 0.

 
 If the value of the
 width or preferredWidth property
 is less than the new minimum width,
 this method sets that property to the new minimum width.

Parameters:
minWidth - the new minimum width
See Also:
getMinWidth(), 
setPreferredWidth(int), 
setMaxWidth(int)


"
6,TableColumn,4,void setMaxWidth(int maxWidth),True,,"

setMaxWidth
public void setMaxWidth(int maxWidth)
Sets the TableColumn's maximum width to
 maxWidth or,
 if maxWidth is less than the minimum width,
 to the minimum width.

 
 If the value of the
 width or preferredWidth property
 is more than the new maximum width,
 this method sets that property to the new maximum width.

Parameters:
maxWidth - the new maximum width
See Also:
getMaxWidth(), 
setPreferredWidth(int), 
setMinWidth(int)


"
6,TableColumn,5,void setHeaderValue(Object headerValue),True,,"

setHeaderValue
public void setHeaderValue(Object headerValue)
Sets the Object whose string representation will be
 used as the value for the headerRenderer.  When the
 TableColumn is created, the default headerValue
 is null.

Parameters:
headerValue - the new headerValue
See Also:
getHeaderValue()


"
7,TableRowSorter,1,"void setSortable(int column, boolean sortable)",False,,NULL
7,TableRowSorter,2,void setSortKeys(List<? extends RowSorter.SortKey> sortKeys),False,,NULL
7,TableRowSorter,3,"void setRowFilter(RowFilter<? super M, ? super Integer> filter)",False,,NULL
7,TableRowSorter,4,void toggleSortOrder(int column),False,,NULL
7,TableRowSorter,5,void setMaxSortKeys(int max),False,,NULL
8,TableStringConverter,1,String stringValue(Object value),False,,NULL
8,TableStringConverter,2,Object objectValue(String value),False,,NULL
8,TableStringConverter,3,String toString(Object value),False,,NULL
8,TableStringConverter,4,Object fromString(String value),False,,NULL
8,TableStringConverter,5,String getNullString(),False,,NULL
