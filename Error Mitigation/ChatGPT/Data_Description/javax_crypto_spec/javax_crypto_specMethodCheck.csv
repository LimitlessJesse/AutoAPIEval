Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,DESedeKeySpec,1,byte[] getKey(),True,,"

getKey
public byte[] getKey()
Returns the DES-EDE key.

Returns:
the DES-EDE key. Returns a new array
 each time this method is called.


"
0,DESedeKeySpec,2,DESedeKeySpec(byte[] key),False,,NULL
0,DESedeKeySpec,3,int getKeySize(),False,,NULL
0,DESedeKeySpec,4,boolean equals(Object obj),False,,NULL
0,DESedeKeySpec,5,int hashCode(),False,,NULL
1,DESKeySpec,1,DESKeySpec(byte[] key),False,,NULL
1,DESKeySpec,2,byte[] getKey(),True,,"

getKey
public byte[] getKey()
Returns the DES key material.

Returns:
the DES key material. Returns a new array
 each time this method is called.


"
1,DESKeySpec,3,void clear(),False,,NULL
1,DESKeySpec,4,boolean isParityAdjusted(),False,,NULL
1,DESKeySpec,5,String toString(),False,,NULL
2,DHGenParameterSpec,1,int getPrimeSize(),True,,"

getPrimeSize
public int getPrimeSize()
Returns the size in bits of the prime modulus.

Returns:
the size in bits of the prime modulus


"
2,DHGenParameterSpec,2,BigInteger getP(),False,,NULL
2,DHGenParameterSpec,3,BigInteger getG(),False,,NULL
2,DHGenParameterSpec,4,"DHGenParameterSpec(BigInteger prime, BigInteger generator, int l)",False,,NULL
2,DHGenParameterSpec,5,int getExponentSize(),True,,"

getExponentSize
public int getExponentSize()
Returns the size in bits of the random exponent (private value).

Returns:
the size in bits of the random exponent (private value)


"
3,DHParameterSpec,1,BigInteger getP(),True,,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
3,DHParameterSpec,2,BigInteger getG(),True,,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
3,DHParameterSpec,3,int getL(),True,,"

getL
public int getL()
Returns the size in bits, l, of the random exponent
 (private value).

Returns:
the size in bits, l, of the random exponent
 (private value), or 0 if this size has not been set


"
3,DHParameterSpec,4,"DHParameterSpec(BigInteger p, BigInteger g)",False,,NULL
3,DHParameterSpec,5,boolean equals(Object obj),False,,NULL
4,DHPrivateKeySpec,1,BigInteger getX(),True,,"

getX
public BigInteger getX()
Returns the private value x.

Returns:
the private value x


"
4,DHPrivateKeySpec,2,DHParameterSpec getParams(),False,,NULL
4,DHPrivateKeySpec,3,"DHPrivateKeySpec(BigInteger x, DHParameterSpec params)",False,,NULL
4,DHPrivateKeySpec,4,boolean equals(Object obj),False,,NULL
4,DHPrivateKeySpec,5,int hashCode(),False,,NULL
5,DHPublicKeySpec,1,BigInteger getY(),True,,"

getY
public BigInteger getY()
Returns the public value y.

Returns:
the public value y


"
5,DHPublicKeySpec,2,BigInteger getP(),True,,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
5,DHPublicKeySpec,3,BigInteger getG(),True,,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
5,DHPublicKeySpec,4,"DHPublicKeySpec(BigInteger y, BigInteger p, BigInteger g)",False,,NULL
5,DHPublicKeySpec,5,boolean equals(Object obj),False,,NULL
6,GCMParameterSpec,1,int getTLen(),True,,"

getTLen
public int getTLen()
Returns the authentication tag length.

Returns:
the authentication tag length (in bits)


"
6,GCMParameterSpec,2,byte[] getIV(),True,,"

getIV
public byte[] getIV()
Returns the Initialization Vector (IV).

Returns:
the IV.  Creates a new array each time this method
 is called.


"
6,GCMParameterSpec,3,int getTLenInBits(),False,,NULL
6,GCMParameterSpec,4,byte[] getAAD(),False,,NULL
6,GCMParameterSpec,5,byte[] getNonce(),False,,NULL
7,IvParameterSpec,1,byte[] getIV(),True,,"

getIV
public byte[] getIV()
Returns the initialization vector (IV).

Returns:
the initialization vector (IV). Returns a new array
 each time this method is called.


"
7,IvParameterSpec,2,int getOffset(),False,,NULL
7,IvParameterSpec,3,void setIV(byte[] iv),False,,NULL
7,IvParameterSpec,4,void setOffset(int offset),False,,NULL
7,IvParameterSpec,5,String toString(),False,,NULL
8,OAEPParameterSpec,1,String getDigestAlgorithm(),True,,"

getDigestAlgorithm
public String getDigestAlgorithm()
Returns the message digest algorithm name.

Returns:
the message digest algorithm name.


"
8,OAEPParameterSpec,2,String getMGFAlgorithm(),True,,"

getMGFAlgorithm
public String getMGFAlgorithm()
Returns the mask generation function algorithm name.

Returns:
the mask generation function algorithm name.


"
8,OAEPParameterSpec,3,PSource getPSource(),True,,"

getPSource
public PSource getPSource()
Returns the source of encoding input P.

Returns:
the source of encoding input P.


"
8,OAEPParameterSpec,4,AlgorithmParameterSpec getParameterSpec(),False,,NULL
8,OAEPParameterSpec,5,OAEPParameterSpec clone(),False,,NULL
9,PBEKeySpec,1,char[] getPassword(),True,,"

getPassword
public final char[] getPassword()
Returns a copy of the password.

  Note: this method returns a copy of the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

Returns:
the password.
Throws:
IllegalStateException - if password has been cleared by
 calling clearPassword method.


"
9,PBEKeySpec,2,byte[] getSalt(),True,,"

getSalt
public final byte[] getSalt()
Returns a copy of the salt or null if not specified.

  Note: this method should return a copy of the salt. It is
 the caller's responsibility to zero out the salt information after
 it is no longer needed.

Returns:
the salt.


"
9,PBEKeySpec,3,int getIterationCount(),True,,"

getIterationCount
public final int getIterationCount()
Returns the iteration count or 0 if not specified.

Returns:
the iteration count.


"
9,PBEKeySpec,4,int getKeyLength(),True,,"

getKeyLength
public final int getKeyLength()
Returns the to-be-derived key length or 0 if not specified.

  Note: this is used to indicate the preference on key length
 for variable-key-size ciphers. The actual key size depends on
 each provider's implementation.

Returns:
the to-be-derived key length.


"
9,PBEKeySpec,5,"PBEKeySpec(char[] password, byte[] salt, int iterationCount, int keyLength)",False,,NULL
10,PBEParameterSpec,1,int getIterationCount(),True,,"

getIterationCount
public int getIterationCount()
Returns the iteration count.

Returns:
the iteration count


"
10,PBEParameterSpec,2,byte[] getSalt(),True,,"

getSalt
public byte[] getSalt()
Returns the salt.

Returns:
the salt. Returns a new array
 each time this method is called.


"
10,PBEParameterSpec,3,"PBEParameterSpec(byte[] salt, int iterationCount)",False,,NULL
10,PBEParameterSpec,4,void setIterationCount(int iterationCount),False,,NULL
10,PBEParameterSpec,5,void setSalt(byte[] salt),False,,NULL
11,PSource,1,String getAlgorithm(),True,,"

getAlgorithm
public String getAlgorithm()
Returns the PSource algorithm name.

Returns:
the PSource algorithm name.


"
11,PSource,2,byte[] getDigestInput(),False,,NULL
11,PSource,3,PSource.PSpecified getPSpecified(),False,,NULL
11,PSource,4,int hashCode(),False,,NULL
11,PSource,5,String toString(),False,,NULL
12,PSource.PSpecified,1,byte[] getValue(),True,,"

getValue
public byte[] getValue()
Returns the value of encoding input P.

Returns:
the value of encoding input P. A new array is
 returned each time this method is called.


"
12,PSource.PSpecified,2,String getAlgorithm(),False,,NULL
12,PSource.PSpecified,3,int hashCode(),False,,NULL
12,PSource.PSpecified,4,boolean equals(Object obj),False,,NULL
12,PSource.PSpecified,5,String toString(),False,,NULL
13,RC2ParameterSpec,1,int getEffectiveKeyBits(),True,,"

getEffectiveKeyBits
public int getEffectiveKeyBits()
Returns the effective key size in bits.

Returns:
the effective key size in bits.


"
13,RC2ParameterSpec,2,byte[] getIV(),True,,"

getIV
public byte[] getIV()
Returns the IV or null if this parameter set does not contain an IV.

Returns:
the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.


"
13,RC2ParameterSpec,3,int getIterationCount(),False,,NULL
13,RC2ParameterSpec,4,"RC2ParameterSpec(int effectiveKeyBits, byte[] iv)",False,,NULL
13,RC2ParameterSpec,5,"RC2ParameterSpec(int effectiveKeyBits, byte[] iv, int iterationCount)",False,,NULL
14,RC5ParameterSpec,1,int getRounds(),True,,"

getRounds
public int getRounds()
Returns the number of rounds.

Returns:
the number of rounds.


"
14,RC5ParameterSpec,2,int getWordSize(),True,,"

getWordSize
public int getWordSize()
Returns the word size in bits.

Returns:
the word size in bits.


"
14,RC5ParameterSpec,3,byte[] getIV(),True,,"

getIV
public byte[] getIV()
Returns the IV or null if this parameter set does not contain an IV.

Returns:
the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.


"
14,RC5ParameterSpec,4,int getBlockSize(),False,,NULL
14,RC5ParameterSpec,5,"RC5ParameterSpec(int version, int rounds, int wordSize, int blockSize)",False,,NULL
15,SecretKeySpec,1,byte[] getEncoded(),True,,"

getEncoded
public byte[] getEncoded()
Returns the key material of this secret key.

Specified by:
getEncoded in interface Key
Returns:
the key material. Returns a new array
 each time this method is called.


"
15,SecretKeySpec,2,String getAlgorithm(),True,,"

getAlgorithm
public String getAlgorithm()
Returns the name of the algorithm associated with this secret key.

Specified by:
getAlgorithm in interface Key
Returns:
the secret key algorithm.


"
15,SecretKeySpec,3,String getFormat(),True,,"

getFormat
public String getFormat()
Returns the name of the encoding format for this secret key.

Specified by:
getFormat in interface Key
Returns:
the string ""RAW"".


"
15,SecretKeySpec,4,int hashCode(),True,,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
15,SecretKeySpec,5,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two SecretKeySpec objects are considered equal if
 they are both SecretKey instances which have the
 same case-insensitive algorithm name and key encoding.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
