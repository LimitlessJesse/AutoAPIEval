ClassName,Method,Return Type,Description,Full Description
DESedeKeySpec,getKey(),byte[],Returns the DES-EDE key.,"

getKey
public byte[] getKey()
Returns the DES-EDE key.

Returns:
the DES-EDE key. Returns a new array
 each time this method is called.


"
DESedeKeySpec,"isParityAdjusted(byte[] key, int offset)",static boolean,"Checks if the given DES-EDE key, starting at offset inclusive, is parity-adjusted.","

isParityAdjusted
public static boolean isParityAdjusted(byte[] key,
                                       int offset)
                                throws InvalidKeyException
Checks if the given DES-EDE key, starting at offset
 inclusive, is parity-adjusted.

Parameters:
key - a byte array which holds the key value
offset - the offset into the byte array
Returns:
true if the given DES-EDE key is parity-adjusted, false
 otherwise
Throws:
NullPointerException - if key is null.
InvalidKeyException - if the given key material, starting at
 offset inclusive, is shorter than 24 bytes


"
DESKeySpec,getKey(),byte[],Returns the DES key material.,"

getKey
public byte[] getKey()
Returns the DES key material.

Returns:
the DES key material. Returns a new array
 each time this method is called.


"
DESKeySpec,"isParityAdjusted(byte[] key, int offset)",static boolean,"Checks if the given DES key material, starting at offset inclusive, is parity-adjusted.","

isParityAdjusted
public static boolean isParityAdjusted(byte[] key,
                                       int offset)
                                throws InvalidKeyException
Checks if the given DES key material, starting at offset
 inclusive, is parity-adjusted.

Parameters:
key - the buffer with the DES key material.
offset - the offset in key, where the DES key
 material starts.
Returns:
true if the given DES key material is parity-adjusted, false
 otherwise.
Throws:
InvalidKeyException - if the given key material is
 null, or starting at offset inclusive, is
 shorter than 8 bytes.


"
DESKeySpec,"isWeak(byte[] key, int offset)",static boolean,Checks if the given DES key material is weak or semi-weak.,"

isWeak
public static boolean isWeak(byte[] key,
                             int offset)
                      throws InvalidKeyException
Checks if the given DES key material is weak or semi-weak.

Parameters:
key - the buffer with the DES key material.
offset - the offset in key, where the DES key
 material starts.
Returns:
true if the given DES key material is weak or semi-weak, false
 otherwise.
Throws:
InvalidKeyException - if the given key material is
 null, or starting at offset inclusive, is
 shorter than 8 bytes.


"
DHGenParameterSpec,getExponentSize(),int,Returns the size in bits of the random exponent (private value).,"

getExponentSize
public int getExponentSize()
Returns the size in bits of the random exponent (private value).

Returns:
the size in bits of the random exponent (private value)


"
DHGenParameterSpec,getPrimeSize(),int,Returns the size in bits of the prime modulus.,"

getPrimeSize
public int getPrimeSize()
Returns the size in bits of the prime modulus.

Returns:
the size in bits of the prime modulus


"
DHParameterSpec,getG(),BigInteger,Returns the base generator g.,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
DHParameterSpec,getL(),int,"Returns the size in bits, l, of the random exponent (private value).","

getL
public int getL()
Returns the size in bits, l, of the random exponent
 (private value).

Returns:
the size in bits, l, of the random exponent
 (private value), or 0 if this size has not been set


"
DHParameterSpec,getP(),BigInteger,Returns the prime modulus p.,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
DHPrivateKeySpec,getG(),BigInteger,Returns the base generator g.,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
DHPrivateKeySpec,getP(),BigInteger,Returns the prime modulus p.,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
DHPrivateKeySpec,getX(),BigInteger,Returns the private value x.,"

getX
public BigInteger getX()
Returns the private value x.

Returns:
the private value x


"
DHPublicKeySpec,getG(),BigInteger,Returns the base generator g.,"

getG
public BigInteger getG()
Returns the base generator g.

Returns:
the base generator g


"
DHPublicKeySpec,getP(),BigInteger,Returns the prime modulus p.,"

getP
public BigInteger getP()
Returns the prime modulus p.

Returns:
the prime modulus p


"
DHPublicKeySpec,getY(),BigInteger,Returns the public value y.,"

getY
public BigInteger getY()
Returns the public value y.

Returns:
the public value y


"
GCMParameterSpec,getIV(),byte[],Returns the Initialization Vector (IV).,"

getIV
public byte[] getIV()
Returns the Initialization Vector (IV).

Returns:
the IV.  Creates a new array each time this method
 is called.


"
GCMParameterSpec,getTLen(),int,Returns the authentication tag length.,"

getTLen
public int getTLen()
Returns the authentication tag length.

Returns:
the authentication tag length (in bits)


"
IvParameterSpec,getIV(),byte[],Returns the initialization vector (IV).,"

getIV
public byte[] getIV()
Returns the initialization vector (IV).

Returns:
the initialization vector (IV). Returns a new array
 each time this method is called.


"
OAEPParameterSpec,getDigestAlgorithm(),String,Returns the message digest algorithm name.,"

getDigestAlgorithm
public String getDigestAlgorithm()
Returns the message digest algorithm name.

Returns:
the message digest algorithm name.


"
OAEPParameterSpec,getMGFAlgorithm(),String,Returns the mask generation function algorithm name.,"

getMGFAlgorithm
public String getMGFAlgorithm()
Returns the mask generation function algorithm name.

Returns:
the mask generation function algorithm name.


"
OAEPParameterSpec,getMGFParameters(),AlgorithmParameterSpec,Returns the parameters for the mask generation function.,"

getMGFParameters
public AlgorithmParameterSpec getMGFParameters()
Returns the parameters for the mask generation function.

Returns:
the parameters for the mask generation function.


"
OAEPParameterSpec,getPSource(),PSource,Returns the source of encoding input P.,"

getPSource
public PSource getPSource()
Returns the source of encoding input P.

Returns:
the source of encoding input P.


"
PBEKeySpec,clearPassword(),void,Clears the internal copy of the password.,"

clearPassword
public final void clearPassword()
Clears the internal copy of the password.

"
PBEKeySpec,getIterationCount(),int,Returns the iteration count or 0 if not specified.,"

getIterationCount
public final int getIterationCount()
Returns the iteration count or 0 if not specified.

Returns:
the iteration count.


"
PBEKeySpec,getKeyLength(),int,Returns the to-be-derived key length or 0 if not specified.,"

getKeyLength
public final int getKeyLength()
Returns the to-be-derived key length or 0 if not specified.

  Note: this is used to indicate the preference on key length
 for variable-key-size ciphers. The actual key size depends on
 each provider's implementation.

Returns:
the to-be-derived key length.


"
PBEKeySpec,getPassword(),char[],Returns a copy of the password.,"

getPassword
public final char[] getPassword()
Returns a copy of the password.

  Note: this method returns a copy of the password. It is
 the caller's responsibility to zero out the password information after
 it is no longer needed.

Returns:
the password.
Throws:
IllegalStateException - if password has been cleared by
 calling clearPassword method.


"
PBEKeySpec,getSalt(),byte[],Returns a copy of the salt or null if not specified.,"

getSalt
public final byte[] getSalt()
Returns a copy of the salt or null if not specified.

  Note: this method should return a copy of the salt. It is
 the caller's responsibility to zero out the salt information after
 it is no longer needed.

Returns:
the salt.


"
PBEParameterSpec,getIterationCount(),int,Returns the iteration count.,"

getIterationCount
public int getIterationCount()
Returns the iteration count.

Returns:
the iteration count


"
PBEParameterSpec,getParameterSpec(),AlgorithmParameterSpec,Returns the cipher algorithm parameter specification.,"

getParameterSpec
public AlgorithmParameterSpec getParameterSpec()
Returns the cipher algorithm parameter specification.

Returns:
the parameter specification, or null if none was set.
Since:
1.8


"
PBEParameterSpec,getSalt(),byte[],Returns the salt.,"

getSalt
public byte[] getSalt()
Returns the salt.

Returns:
the salt. Returns a new array
 each time this method is called.


"
PSource,getAlgorithm(),String,Returns the PSource algorithm name.,"

getAlgorithm
public String getAlgorithm()
Returns the PSource algorithm name.

Returns:
the PSource algorithm name.


"
PSource.PSpecified,getValue(),byte[],Returns the value of encoding input P.,"

getValue
public byte[] getValue()
Returns the value of encoding input P.

Returns:
the value of encoding input P. A new array is
 returned each time this method is called.


"
RC2ParameterSpec,equals(Object obj),boolean,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two RC2ParameterSpec objects are considered equal if their
 effective key sizes and IVs are equal.
 (Two IV references are considered equal if both are null.)

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
RC2ParameterSpec,getEffectiveKeyBits(),int,Returns the effective key size in bits.,"

getEffectiveKeyBits
public int getEffectiveKeyBits()
Returns the effective key size in bits.

Returns:
the effective key size in bits.


"
RC2ParameterSpec,getIV(),byte[],Returns the IV or null if this parameter set does not contain an IV.,"

getIV
public byte[] getIV()
Returns the IV or null if this parameter set does not contain an IV.

Returns:
the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.


"
RC2ParameterSpec,hashCode(),int,Calculates a hash code value for the object.,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
RC5ParameterSpec,equals(Object obj),boolean,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two RC5ParameterSpec objects are considered equal if their
 version numbers, number of rounds, word sizes, and IVs are equal.
 (Two IV references are considered equal if both are null.)

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
RC5ParameterSpec,getIV(),byte[],Returns the IV or null if this parameter set does not contain an IV.,"

getIV
public byte[] getIV()
Returns the IV or null if this parameter set does not contain an IV.

Returns:
the IV or null if this parameter set does not contain an IV.
 Returns a new array each time this method is called.


"
RC5ParameterSpec,getRounds(),int,Returns the number of rounds.,"

getRounds
public int getRounds()
Returns the number of rounds.

Returns:
the number of rounds.


"
RC5ParameterSpec,getVersion(),int,Returns the version.,"

getVersion
public int getVersion()
Returns the version.

Returns:
the version.


"
RC5ParameterSpec,getWordSize(),int,Returns the word size in bits.,"

getWordSize
public int getWordSize()
Returns the word size in bits.

Returns:
the word size in bits.


"
RC5ParameterSpec,hashCode(),int,Calculates a hash code value for the object.,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SecretKeySpec,equals(Object obj),boolean,Tests for equality between the specified object and this object.,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two SecretKeySpec objects are considered equal if
 they are both SecretKey instances which have the
 same case-insensitive algorithm name and key encoding.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false if
 obj is null or otherwise.
See Also:
Object.hashCode(), 
HashMap


"
SecretKeySpec,getAlgorithm(),String,Returns the name of the algorithm associated with this secret key.,"

getAlgorithm
public String getAlgorithm()
Returns the name of the algorithm associated with this secret key.

Specified by:
getAlgorithm in interface Key
Returns:
the secret key algorithm.


"
SecretKeySpec,getEncoded(),byte[],Returns the key material of this secret key.,"

getEncoded
public byte[] getEncoded()
Returns the key material of this secret key.

Specified by:
getEncoded in interface Key
Returns:
the key material. Returns a new array
 each time this method is called.


"
SecretKeySpec,getFormat(),String,Returns the name of the encoding format for this secret key.,"

getFormat
public String getFormat()
Returns the name of the encoding format for this secret key.

Specified by:
getFormat in interface Key
Returns:
the string ""RAW"".


"
SecretKeySpec,hashCode(),int,Calculates a hash code value for the object.,"

hashCode
public int hashCode()
Calculates a hash code value for the object.
 Objects that are equal will also have the same hashcode.

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
