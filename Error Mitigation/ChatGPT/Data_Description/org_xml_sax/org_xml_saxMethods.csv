ClassName,Method,Return Type,Description,Full Description
HandlerBase,"characters(char[] ch, int start, int length)",void,Deprecated.,"

characters
public void characters(char[] ch,
                       int start,
                       int length)
                throws SAXException
Deprecated. 
Receive notification of character data inside an element.

 By default, do nothing.  Application writers may override this
 method to take specific actions for each chunk of character data
 (such as adding the data to a node or buffer, or printing it to
 a file).

Specified by:
characters in interface DocumentHandler
Parameters:
ch - The characters.
start - The start position in the character array.
length - The number of characters to use from the
               character array.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.characters(char[], int, int)


"
HandlerBase,endDocument(),void,Deprecated.,"

endDocument
public void endDocument()
                 throws SAXException
Deprecated. 
Receive notification of the end of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end
 of a document (such as finalising a tree or closing an output
 file).

Specified by:
endDocument in interface DocumentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.endDocument()


"
HandlerBase,endElement(String name),void,Deprecated.,"

endElement
public void endElement(String name)
                throws SAXException
Deprecated. 
Receive notification of the end of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the end of
 each element (such as finalising a tree node or writing
 output to a file).

Specified by:
endElement in interface DocumentHandler
Parameters:
name - the element name
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.endElement(java.lang.String)


"
HandlerBase,error(SAXParseException e),void,Deprecated.,"

error
public void error(SAXParseException e)
           throws SAXException
Deprecated. 
Receive notification of a recoverable parser error.

 The default implementation does nothing.  Application writers
 may override this method in a subclass to take specific actions
 for each error, such as inserting the message in a log file or
 printing it to the console.

Specified by:
error in interface ErrorHandler
Parameters:
e - The warning information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.warning(org.xml.sax.SAXParseException), 
SAXParseException


"
HandlerBase,fatalError(SAXParseException e),void,Deprecated.,"

fatalError
public void fatalError(SAXParseException e)
                throws SAXException
Deprecated. 
Report a fatal XML parsing error.

 The default implementation throws a SAXParseException.
 Application writers may override this method in a subclass if
 they need to take specific actions for each fatal error (such as
 collecting all of the errors into a single report): in any case,
 the application must stop all regular processing when this
 method is invoked, since the document is no longer reliable, and
 the parser may no longer report parsing events.

Specified by:
fatalError in interface ErrorHandler
Parameters:
e - The error information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.fatalError(org.xml.sax.SAXParseException), 
SAXParseException


"
HandlerBase,"ignorableWhitespace(char[] ch, int start, int length)",void,Deprecated.,"

ignorableWhitespace
public void ignorableWhitespace(char[] ch,
                                int start,
                                int length)
                         throws SAXException
Deprecated. 
Receive notification of ignorable whitespace in element content.

 By default, do nothing.  Application writers may override this
 method to take specific actions for each chunk of ignorable
 whitespace (such as adding data to a node or buffer, or printing
 it to a file).

Specified by:
ignorableWhitespace in interface DocumentHandler
Parameters:
ch - The whitespace characters.
start - The start position in the character array.
length - The number of characters to use from the
               character array.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.ignorableWhitespace(char[], int, int)


"
HandlerBase,"notationDecl(String name, String publicId, String systemId)",void,Deprecated.,"

notationDecl
public void notationDecl(String name,
                         String publicId,
                         String systemId)
Deprecated. 
Receive notification of a notation declaration.

 By default, do nothing.  Application writers may override this
 method in a subclass if they wish to keep track of the notations
 declared in a document.

Specified by:
notationDecl in interface DTDHandler
Parameters:
name - The notation name.
publicId - The notation public identifier, or null if not
                 available.
systemId - The notation system identifier.
See Also:
DTDHandler.notationDecl(java.lang.String, java.lang.String, java.lang.String)


"
HandlerBase,"processingInstruction(String target, String data)",void,Deprecated.,"

processingInstruction
public void processingInstruction(String target,
                                  String data)
                           throws SAXException
Deprecated. 
Receive notification of a processing instruction.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions for each
 processing instruction, such as setting status variables or
 invoking other methods.

Specified by:
processingInstruction in interface DocumentHandler
Parameters:
target - The processing instruction target.
data - The processing instruction data, or null if
             none is supplied.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.processingInstruction(java.lang.String, java.lang.String)


"
HandlerBase,"resolveEntity(String publicId, String systemId)",InputSource,Deprecated.,"

resolveEntity
public InputSource resolveEntity(String publicId,
                                 String systemId)
                          throws SAXException
Deprecated. 
Resolve an external entity.

 Always return null, so that the parser will use the system
 identifier provided in the XML document.  This method implements
 the SAX default behaviour: application writers can override it
 in a subclass to do special translations such as catalog lookups
 or URI redirection.

Specified by:
resolveEntity in interface EntityResolver
Parameters:
publicId - The public identifer, or null if none is
                 available.
systemId - The system identifier provided in the XML
                 document.
Returns:
The new input source, or null to require the
         default behaviour.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
EntityResolver.resolveEntity(java.lang.String, java.lang.String)


"
HandlerBase,setDocumentLocator(Locator locator),void,Deprecated.,"

setDocumentLocator
public void setDocumentLocator(Locator locator)
Deprecated. 
Receive a Locator object for document events.

 By default, do nothing.  Application writers may override this
 method in a subclass if they wish to store the locator for use
 with other document events.

Specified by:
setDocumentLocator in interface DocumentHandler
Parameters:
locator - A locator for all SAX document events.
See Also:
DocumentHandler.setDocumentLocator(org.xml.sax.Locator), 
Locator


"
HandlerBase,startDocument(),void,Deprecated.,"

startDocument
public void startDocument()
                   throws SAXException
Deprecated. 
Receive notification of the beginning of the document.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the beginning
 of a document (such as allocating the root node of a tree or
 creating an output file).

Specified by:
startDocument in interface DocumentHandler
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.startDocument()


"
HandlerBase,"startElement(String name, AttributeList attributes)",void,Deprecated.,"

startElement
public void startElement(String name,
                         AttributeList attributes)
                  throws SAXException
Deprecated. 
Receive notification of the start of an element.

 By default, do nothing.  Application writers may override this
 method in a subclass to take specific actions at the start of
 each element (such as allocating a new tree node or writing
 output to a file).

Specified by:
startElement in interface DocumentHandler
Parameters:
name - The element type name.
attributes - The specified or defaulted attributes.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
DocumentHandler.startElement(java.lang.String, org.xml.sax.AttributeList)


"
HandlerBase,"unparsedEntityDecl(String name, String publicId, String systemId, String notationName)",void,Deprecated.,"

unparsedEntityDecl
public void unparsedEntityDecl(String name,
                               String publicId,
                               String systemId,
                               String notationName)
Deprecated. 
Receive notification of an unparsed entity declaration.

 By default, do nothing.  Application writers may override this
 method in a subclass to keep track of the unparsed entities
 declared in a document.

Specified by:
unparsedEntityDecl in interface DTDHandler
Parameters:
name - The entity name.
publicId - The entity public identifier, or null if not
                 available.
systemId - The entity system identifier.
notationName - The name of the associated notation.
See Also:
DTDHandler.unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String)


"
HandlerBase,warning(SAXParseException e),void,Deprecated.,"

warning
public void warning(SAXParseException e)
             throws SAXException
Deprecated. 
Receive notification of a parser warning.

 The default implementation does nothing.  Application writers
 may override this method in a subclass to take specific actions
 for each warning, such as inserting the message in a log file or
 printing it to the console.

Specified by:
warning in interface ErrorHandler
Parameters:
e - The warning information encoded as an exception.
Throws:
SAXException - Any SAX exception, possibly
            wrapping another exception.
See Also:
ErrorHandler.warning(org.xml.sax.SAXParseException), 
SAXParseException


"
InputSource,getByteStream(),InputStream,Get the byte stream for this input source.,"

getByteStream
public InputStream getByteStream()
Get the byte stream for this input source.

 The getEncoding method will return the character
 encoding for this byte stream, or null if unknown.

Returns:
The byte stream, or null if none was supplied.
See Also:
getEncoding(), 
setByteStream(java.io.InputStream)


"
InputSource,getCharacterStream(),Reader,Get the character stream for this input source.,"

getCharacterStream
public Reader getCharacterStream()
Get the character stream for this input source.

Returns:
The character stream, or null if none was supplied.
See Also:
setCharacterStream(java.io.Reader)


"
InputSource,getEncoding(),String,Get the character encoding for a byte stream or URI.,"

getEncoding
public String getEncoding()
Get the character encoding for a byte stream or URI.
 This value will be ignored when the application provides a
 character stream.

Returns:
The encoding, or null if none was supplied.
See Also:
setByteStream(java.io.InputStream), 
getSystemId(), 
getByteStream()


"
InputSource,getPublicId(),String,Get the public identifier for this input source.,"

getPublicId
public String getPublicId()
Get the public identifier for this input source.

Returns:
The public identifier, or null if none was supplied.
See Also:
setPublicId(java.lang.String)


"
InputSource,getSystemId(),String,Get the system identifier for this input source.,"

getSystemId
public String getSystemId()
Get the system identifier for this input source.

 The getEncoding method will return the character encoding
 of the object pointed to, or null if unknown.
If the system ID is a URL, it will be fully resolved.

Returns:
The system identifier, or null if none was supplied.
See Also:
setSystemId(java.lang.String), 
getEncoding()


"
InputSource,setByteStream(InputStream byteStream),void,Set the byte stream for this input source.,"

setByteStream
public void setByteStream(InputStream byteStream)
Set the byte stream for this input source.

 The SAX parser will ignore this if there is also a character
 stream specified, but it will use a byte stream in preference
 to opening a URI connection itself.
If the application knows the character encoding of the
 byte stream, it should set it with the setEncoding method.

Parameters:
byteStream - A byte stream containing an XML document or
        other entity.
See Also:
setEncoding(java.lang.String), 
getByteStream(), 
getEncoding(), 
InputStream


"
InputSource,setCharacterStream(Reader characterStream),void,Set the character stream for this input source.,"

setCharacterStream
public void setCharacterStream(Reader characterStream)
Set the character stream for this input source.

 If there is a character stream specified, the SAX parser
 will ignore any byte stream and will not attempt to open
 a URI connection to the system identifier.

Parameters:
characterStream - The character stream containing the
        XML document or other entity.
See Also:
getCharacterStream(), 
Reader


"
InputSource,setEncoding(String encoding),void,"Set the character encoding, if known.","

setEncoding
public void setEncoding(String encoding)
Set the character encoding, if known.

 The encoding must be a string acceptable for an
 XML encoding declaration (see section 4.3.3 of the XML 1.0
 recommendation).
This method has no effect when the application provides a
 character stream.

Parameters:
encoding - A string describing the character encoding.
See Also:
setSystemId(java.lang.String), 
setByteStream(java.io.InputStream), 
getEncoding()


"
InputSource,setPublicId(String publicId),void,Set the public identifier for this input source.,"

setPublicId
public void setPublicId(String publicId)
Set the public identifier for this input source.

 The public identifier is always optional: if the application
 writer includes one, it will be provided as part of the
 location information.

Parameters:
publicId - The public identifier as a string.
See Also:
getPublicId(), 
Locator.getPublicId(), 
SAXParseException.getPublicId()


"
InputSource,setSystemId(String systemId),void,Set the system identifier for this input source.,"

setSystemId
public void setSystemId(String systemId)
Set the system identifier for this input source.

 The system identifier is optional if there is a byte stream
 or a character stream, but it is still useful to provide one,
 since the application can use it to resolve relative URIs
 and can include it in error messages and warnings (the parser
 will attempt to open a connection to the URI only if
 there is no byte stream or character stream specified).
If the application knows the character encoding of the
 object pointed to by the system identifier, it can register
 the encoding using the setEncoding method.
If the system identifier is a URL, it must be fully
 resolved (it may not be a relative URL).

Parameters:
systemId - The system identifier as a string.
See Also:
setEncoding(java.lang.String), 
getSystemId(), 
Locator.getSystemId(), 
SAXParseException.getSystemId()


"
