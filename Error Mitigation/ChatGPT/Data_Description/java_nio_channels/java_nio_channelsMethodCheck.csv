Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AsynchronousChannelGroup,1,AsynchronousChannelGroup open(ExecutorService executor),False,,NULL
0,AsynchronousChannelGroup,2,"AsynchronousChannelGroup open(ExecutorService executor, int initialSize)",False,,NULL
0,AsynchronousChannelGroup,3,"AsynchronousChannelGroup open(ExecutorService executor, int initialSize, ThreadFactory threadFactory)",False,,NULL
0,AsynchronousChannelGroup,4,"AsynchronousChannelGroup open(ExecutorService executor, int initialSize, CompletionHandler<Void, Object> handler)",False,,NULL
0,AsynchronousChannelGroup,5,"AsynchronousChannelGroup open(ExecutorService executor, int initialSize, ThreadFactory threadFactory, CompletionHandler<Void, Object> handler)",False,,NULL
1,AsynchronousFileChannel,1,"Future<Integer> read(ByteBuffer dst, long position)",True,,"

read
public abstract Future<Integer> read(ByteBuffer dst,
                                     long position)
Reads a sequence of bytes from this channel into the given buffer,
 starting at the given file position.

  This method initiates the reading of a sequence of bytes from this
 channel into the given buffer, starting at the given file position. This
 method returns a Future representing the pending result of the
 operation. The Future's get method returns
 the number of bytes read or -1 if the given position is greater
 than or equal to the file's size at the time that the read is attempted.

  This method works in the same manner as the AsynchronousByteChannel.read(ByteBuffer) method, except that bytes are
 read starting at the given file position. If the given file position is
 greater than the file's size at the time that the read is attempted then
 no bytes are read.

Parameters:
dst - The buffer into which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
Returns:
A Future object representing the pending result
Throws:
IllegalArgumentException - If the position is negative or the buffer is read-only
NonReadableChannelException - If this channel was not opened for reading


"
1,AsynchronousFileChannel,2,"Future<Integer> write(ByteBuffer src, long position)",True,,"

write
public abstract Future<Integer> write(ByteBuffer src,
                                      long position)
Writes a sequence of bytes to this channel from the given buffer, starting
 at the given file position.

  This method initiates the writing of a sequence of bytes to this
 channel from the given buffer, starting at the given file position. The
 method returns a Future representing the pending result of the
 write operation. The Future's get method
 returns the number of bytes written.

  This method works in the same manner as the AsynchronousByteChannel.write(ByteBuffer) method, except that bytes are
 written starting at the given file position. If the given position is
 greater than the file's size, at the time that the write is attempted,
 then the file will be grown to accommodate the new bytes; the values of
 any bytes between the previous end-of-file and the newly-written bytes
 are unspecified.

Parameters:
src - The buffer from which bytes are to be transferred
position - The file position at which the transfer is to begin;
          must be non-negative
Returns:
A Future object representing the pending result
Throws:
IllegalArgumentException - If the position is negative
NonWritableChannelException - If this channel was not opened for writing


"
1,AsynchronousFileChannel,3,Future<Void> truncate(long size),False,,NULL
1,AsynchronousFileChannel,4,"Future<FileLock> lock(long position, long size, boolean shared)",True,,"

lock
public abstract Future<FileLock> lock(long position,
                                      long size,
                                      boolean shared)
Acquires a lock on the given region of this channel's file.

  This method initiates an operation to acquire a lock on the given
 region of this channel's file.  The method behaves in exactly the same
 manner as the lock(long, long, boolean, Object, CompletionHandler)
 method except that instead of specifying a completion handler, this
 method returns a Future representing the pending result. The
 Future's get method returns the FileLock on successful completion.

Parameters:
position - The position at which the locked region is to start; must be
          non-negative
size - The size of the locked region; must be non-negative, and the sum
          position + size must be non-negative
shared - true to request a shared lock, in which case this
          channel must be open for reading (and possibly writing);
          false to request an exclusive lock, in which case this
          channel must be open for writing (and possibly reading)
Returns:
a Future object representing the pending result
Throws:
OverlappingFileLockException - If a lock is already held by this Java virtual machine, or there
          is already a pending attempt to lock a region
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If shared is true but this channel was not opened for reading
NonWritableChannelException - If shared is false but this channel was not opened for writing


"
1,AsynchronousFileChannel,5,"Future<Integer> read(ByteBuffer[] dsts, int offset, int length, long position)",False,,NULL
2,AsynchronousServerSocketChannel,1,AsynchronousServerSocketChannel open(),True,,"

open
public static AsynchronousServerSocketChannel open()
                                            throws IOException
Opens an asynchronous server-socket channel.

  This method returns an asynchronous server socket channel that is
 bound to the default group. This method is equivalent to evaluating
 the expression:
 
 open((AsynchronousChannelGroup)null);
 

Returns:
A new asynchronous server socket channel
Throws:
IOException - If an I/O error occurs


"
2,AsynchronousServerSocketChannel,2,AsynchronousServerSocketChannel bind(SocketAddress local),True,,"

bind
public final AsynchronousServerSocketChannel bind(SocketAddress local)
                                           throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
SecurityException - If a security manager is installed and it denies an unspecified
          permission. An implementation of this interface should specify
          any required permissions.
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
See Also:
NetworkChannel.getLocalAddress()


"
2,AsynchronousServerSocketChannel,3,"AsynchronousServerSocketChannel bind(SocketAddress local, int backlog)",True,,"

bind
public abstract AsynchronousServerSocketChannel bind(SocketAddress local,
                                                     int backlog)
                                              throws IOException
Binds the channel's socket to a local address and configures the socket to
 listen for connections.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the associated channel is closed.

  The backlog parameter is the maximum number of pending
 connections on the socket. Its exact semantics are implementation specific.
 In particular, an implementation may impose a maximum length or may choose
 to ignore the parameter altogther. If the backlog parameter has
 the value 0, or a negative value, then an implementation specific
 default is used.

Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
backlog - The maximum number of pending connections
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
SecurityException - If a security manager has been installed and its checkListen method denies the operation
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs


"
2,AsynchronousServerSocketChannel,4,"AsynchronousServerSocketChannel bind(SocketAddress local, int backlog, NetworkInterface networkInterface)",False,,NULL
2,AsynchronousServerSocketChannel,5,"AsynchronousServerSocketChannel bind(SocketAddress local, int backlog, InetAddress[] addresses)",False,,NULL
3,AsynchronousSocketChannel,1,Future<Integer> read(ByteBuffer dst),True,,"

read
public abstract Future<Integer> read(ByteBuffer dst)
Description copied from interface: AsynchronousByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  This method initiates an asynchronous read operation to read a
 sequence of bytes from this channel into the given buffer. The method
 behaves in exactly the same manner as the read(ByteBuffer,Object,CompletionHandler) method except that instead
 of specifying a completion handler, this method returns a Future
 representing the pending result. The Future's get method returns the number of bytes read or -1 if no bytes
 could be read because the channel has reached end-of-stream.

Specified by:
read in interface AsynchronousByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
A Future representing the result of the operation
Throws:
IllegalArgumentException - If the buffer is read-only
ReadPendingException - If the channel does not allow more than one read to be outstanding
          and a previous read has not completed
NotYetConnectedException - If this channel is not yet connected


"
3,AsynchronousSocketChannel,2,Future<Integer> write(ByteBuffer src),True,,"

write
public abstract Future<Integer> write(ByteBuffer src)
Description copied from interface: AsynchronousByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  This method initiates an asynchronous write operation to write a
 sequence of bytes to this channel from the given buffer. The method
 behaves in exactly the same manner as the write(ByteBuffer,Object,CompletionHandler) method except that instead
 of specifying a completion handler, this method returns a Future
 representing the pending result. The Future's get method returns the number of bytes written.

Specified by:
write in interface AsynchronousByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
A Future representing the result of the operation
Throws:
WritePendingException - If the channel does not allow more than one write to be outstanding
          and a previous write has not completed
NotYetConnectedException - If this channel is not yet connected


"
3,AsynchronousSocketChannel,3,AsynchronousSocketChannel bind(SocketAddress local),True,,"

bind
public abstract AsynchronousSocketChannel bind(SocketAddress local)
                                        throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
ConnectionPendingException - If a connection operation is already in progress on this channel
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its
          checkListen method denies
          the operation
See Also:
NetworkChannel.getLocalAddress()


"
3,AsynchronousSocketChannel,4,AsynchronousSocketChannel connect(SocketAddress remote),False,,NULL
3,AsynchronousSocketChannel,5,void close(),False,,NULL
4,Channels,1,ReadableByteChannel newChannel(InputStream in),True,,"

newChannel
public static ReadableByteChannel newChannel(InputStream in)
Constructs a channel that reads bytes from the given stream.

  The resulting channel will not be buffered; it will simply redirect
 its I/O operations to the given stream.  Closing the channel will in
 turn cause the stream to be closed.  

Parameters:
in - The stream from which bytes are to be read
Returns:
A new readable byte channel


"
4,Channels,2,WritableByteChannel newChannel(OutputStream out),True,,"

newChannel
public static WritableByteChannel newChannel(OutputStream out)
Constructs a channel that writes bytes to the given stream.

  The resulting channel will not be buffered; it will simply redirect
 its I/O operations to the given stream.  Closing the channel will in
 turn cause the stream to be closed.  

Parameters:
out - The stream to which bytes are to be written
Returns:
A new writable byte channel


"
4,Channels,3,"SeekableByteChannel newChannel(Path path, OpenOption... options)",False,,NULL
4,Channels,4,"FileChannel open(File file, Set<? extends OpenOption> options)",False,,NULL
4,Channels,5,SocketChannel open(SocketAddress remote),False,,NULL
5,DatagramChannel,1,DatagramChannel open(),True,,"

open
public static DatagramChannel open()
                            throws IOException
Opens a datagram channel.

  The new channel is created by invoking the openDatagramChannel method of the system-wide default SelectorProvider object.  The channel will not be
 connected.

  The ProtocolFamily of the channel's socket
 is platform (and possibly configuration) dependent and therefore unspecified.
 The open allows the protocol family to be
 selected when opening a datagram channel, and should be used to open
 datagram channels that are intended for Internet Protocol multicasting.

Returns:
A new datagram channel
Throws:
IOException - If an I/O error occurs


"
5,DatagramChannel,2,"int send(ByteBuffer src, SocketAddress target)",True,,"

send
public abstract int send(ByteBuffer src,
                         SocketAddress target)
                  throws IOException
Sends a datagram via this channel.

  If this channel is in non-blocking mode and there is sufficient room
 in the underlying output buffer, or if this channel is in blocking mode
 and sufficient room becomes available, then the remaining bytes in the
 given buffer are transmitted as a single datagram to the given target
 address.

  The datagram is transferred from the byte buffer as if by a regular
 write operation.

  This method performs exactly the same security checks as the send method of the DatagramSocket class.  That is, if the socket is not connected
 to a specific remote address and a security manager has been installed
 then for each datagram sent this method verifies that the target address
 and port number are permitted by the security manager's checkConnect method.  The
 overhead of this security check can be avoided by first connecting the
 socket via the connect method.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. If this channel's socket is not bound then this method will
 first cause the socket to be bound to an address that is assigned
 automatically, as if by invoking the bind method with a
 parameter of null. 

Parameters:
src - The buffer containing the datagram to be sent
target - The address to which the datagram is to be sent
Returns:
The number of bytes sent, which will be either the number
           of bytes that were remaining in the source buffer when this
           method was invoked or, if this channel is non-blocking, may be
           zero if there was insufficient room for the datagram in the
           underlying output buffer
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit datagrams to be sent
          to the given address
IOException - If some other I/O error occurs


"
5,DatagramChannel,3,SocketAddress receive(ByteBuffer dst),True,,"

receive
public abstract SocketAddress receive(ByteBuffer dst)
                               throws IOException
Receives a datagram via this channel.

  If a datagram is immediately available, or if this channel is in
 blocking mode and one eventually becomes available, then the datagram is
 copied into the given byte buffer and its source address is returned.
 If this channel is in non-blocking mode and a datagram is not
 immediately available then this method immediately returns
 null.

  The datagram is transferred into the given byte buffer starting at
 its current position, as if by a regular read operation.  If there
 are fewer bytes remaining in the buffer than are required to hold the
 datagram then the remainder of the datagram is silently discarded.

  This method performs exactly the same security checks as the receive method of the DatagramSocket class.  That is, if the socket is not connected
 to a specific remote address and a security manager has been installed
 then for each datagram received this method verifies that the source's
 address and port number are permitted by the security manager's checkAccept method.  The overhead
 of this security check can be avoided by first connecting the socket via
 the connect method.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. If this channel's socket is not bound then this method will
 first cause the socket to be bound to an address that is assigned
 automatically, as if invoking the bind method with a
 parameter of null. 

Parameters:
dst - The buffer into which the datagram is to be transferred
Returns:
The datagram's source address,
          or null if this channel is in non-blocking mode
          and no datagram was immediately available
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
SecurityException - If a security manager has been installed
          and it does not permit datagrams to be accepted
          from the datagram's sender
IOException - If some other I/O error occurs


"
5,DatagramChannel,4,int write(ByteBuffer src),True,,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Writes a datagram to this channel.

  This method may only be invoked if this channel's socket is
 connected, in which case it sends datagrams directly to the socket's
 peer.  Otherwise it behaves exactly as specified in the WritableByteChannel interface.  

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
5,DatagramChannel,5,int read(ByteBuffer dst),True,,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Reads a datagram from this channel.

  This method may only be invoked if this channel's socket is
 connected, and it only accepts datagrams from the socket's peer.  If
 there are more bytes in the datagram than remain in the given buffer
 then the remainder of the datagram is silently discarded.  Otherwise
 this method behaves exactly as specified in the ReadableByteChannel interface.  

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel's socket is not connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
6,FileChannel,1,int read(ByteBuffer dst),True,,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Reads a sequence of bytes from this channel into the given buffer.

  Bytes are read starting at this channel's current file position, and
 then the file position is updated with the number of bytes actually
 read.  Otherwise this method behaves exactly as specified in the ReadableByteChannel interface. 

Specified by:
read in interface ReadableByteChannel
Specified by:
read in interface SeekableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
6,FileChannel,2,long write(ByteBuffer src),False,,NULL
6,FileChannel,3,"FileLock lock(long position, long size, boolean shared)",True,,"

lock
public abstract FileLock lock(long position,
                              long size,
                              boolean shared)
                       throws IOException
Acquires a lock on the given region of this channel's file.

  An invocation of this method will block until the region can be
 locked, this channel is closed, or the invoking thread is interrupted,
 whichever comes first.

  If this channel is closed by another thread during an invocation of
 this method then an AsynchronousCloseException will be thrown.

  If the invoking thread is interrupted while waiting to acquire the
 lock then its interrupt status will be set and a FileLockInterruptionException will be thrown.  If the invoker's
 interrupt status is set when this method is invoked then that exception
 will be thrown immediately; the thread's interrupt status will not be
 changed.

  The region specified by the position and size
 parameters need not be contained within, or even overlap, the actual
 underlying file.  Lock regions are fixed in size; if a locked region
 initially contains the end of the file and the file grows beyond the
 region then the new portion of the file will not be covered by the lock.
 If a file is expected to grow in size and a lock on the entire file is
 required then a region starting at zero, and no smaller than the
 expected maximum size of the file, should be locked.  The zero-argument
 lock() method simply locks a region of size Long.MAX_VALUE.

  Some operating systems do not support shared locks, in which case a
 request for a shared lock is automatically converted into a request for
 an exclusive lock.  Whether the newly-acquired lock is shared or
 exclusive may be tested by invoking the resulting lock object's isShared method.

  File locks are held on behalf of the entire Java virtual machine.
 They are not suitable for controlling access to a file by multiple
 threads within the same virtual machine.  

Parameters:
position - The position at which the locked region is to start; must be
         non-negative
size - The size of the locked region; must be non-negative, and the sum
         position + size must be non-negative
shared - true to request a shared lock, in which case this
         channel must be open for reading (and possibly writing);
         false to request an exclusive lock, in which case this
         channel must be open for writing (and possibly reading)
Returns:
A lock object representing the newly-acquired lock
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel while the invoking
          thread is blocked in this method
FileLockInterruptionException - If the invoking thread is interrupted while blocked in this
          method
OverlappingFileLockException - If a lock that overlaps the requested region is already held by
          this Java virtual machine, or if another thread is already
          blocked in this method and is attempting to lock an overlapping
          region
NonReadableChannelException - If shared is true this channel was not
          opened for reading
NonWritableChannelException - If shared is false but this channel was not
          opened for writing
IOException - If some other I/O error occurs
See Also:
lock(), 
tryLock(), 
tryLock(long,long,boolean)


"
6,FileChannel,4,"MappedByteBuffer map(FileChannel.MapMode mode, long position, long size)",True,,"

map
public abstract MappedByteBuffer map(FileChannel.MapMode mode,
                                     long position,
                                     long size)
                              throws IOException
Maps a region of this channel's file directly into memory.

  A region of a file may be mapped into memory in one of three modes:
 

 Read-only: Any attempt to modify the resulting buffer
   will cause a ReadOnlyBufferException to be thrown.
   (MapMode.READ_ONLY) 
 Read/write: Changes made to the resulting buffer will
   eventually be propagated to the file; they may or may not be made
   visible to other programs that have mapped the same file.  (MapMode.READ_WRITE) 
 Private: Changes made to the resulting buffer will not
   be propagated to the file and will not be visible to other programs
   that have mapped the same file; instead, they will cause private
   copies of the modified portions of the buffer to be created.  (MapMode.PRIVATE) 

 For a read-only mapping, this channel must have been opened for
 reading; for a read/write or private mapping, this channel must have
 been opened for both reading and writing.

  The mapped byte buffer
 returned by this method will have a position of zero and a limit and
 capacity of size; its mark will be undefined.  The buffer and
 the mapping that it represents will remain valid until the buffer itself
 is garbage-collected.

  A mapping, once established, is not dependent upon the file channel
 that was used to create it.  Closing the channel, in particular, has no
 effect upon the validity of the mapping.

  Many of the details of memory-mapped files are inherently dependent
 upon the underlying operating system and are therefore unspecified.  The
 behavior of this method when the requested region is not completely
 contained within this channel's file is unspecified.  Whether changes
 made to the content or size of the underlying file, by this program or
 another, are propagated to the buffer is unspecified.  The rate at which
 changes to the buffer are propagated to the file is unspecified.

  For most operating systems, mapping a file into memory is more
 expensive than reading or writing a few tens of kilobytes of data via
 the usual read and write methods.  From the
 standpoint of performance it is generally only worth mapping relatively
 large files into memory.  

Parameters:
mode - One of the constants READ_ONLY, READ_WRITE, or PRIVATE defined in the FileChannel.MapMode class, according to
         whether the file is to be mapped read-only, read/write, or
         privately (copy-on-write), respectively
position - The position within the file at which the mapped region
         is to start; must be non-negative
size - The size of the region to be mapped; must be non-negative and
         no greater than Integer.MAX_VALUE
Returns:
The mapped byte buffer
Throws:
NonReadableChannelException - If the mode is READ_ONLY but
         this channel was not opened for reading
NonWritableChannelException - If the mode is READ_WRITE or
         PRIVATE but this channel was not opened
         for both reading and writing
IllegalArgumentException - If the preconditions on the parameters do not hold
IOException - If some other I/O error occurs
See Also:
FileChannel.MapMode, 
MappedByteBuffer


"
6,FileChannel,5,"long transferTo(long position, long count, WritableByteChannel target)",True,,"

transferTo
public abstract long transferTo(long position,
                                long count,
                                WritableByteChannel target)
                         throws IOException
Transfers bytes from this channel's file to the given writable byte
 channel.

  An attempt is made to read up to count bytes starting at
 the given position in this channel's file and write them to the
 target channel.  An invocation of this method may or may not transfer
 all of the requested bytes; whether or not it does so depends upon the
 natures and states of the channels.  Fewer than the requested number of
 bytes are transferred if this channel's file contains fewer than
 count bytes starting at the given position, or if the
 target channel is non-blocking and it has fewer than count
 bytes free in its output buffer.

  This method does not modify this channel's position.  If the given
 position is greater than the file's current size then no bytes are
 transferred.  If the target channel has a position then bytes are
 written starting at that position and then the position is incremented
 by the number of bytes written.

  This method is potentially much more efficient than a simple loop
 that reads from this channel and writes to the target channel.  Many
 operating systems can transfer bytes directly from the filesystem cache
 to the target channel without actually copying them.  

Parameters:
position - The position within the file at which the transfer is to begin;
         must be non-negative
count - The maximum number of bytes to be transferred; must be
         non-negative
target - The target channel
Returns:
The number of bytes, possibly zero,
          that were actually transferred
Throws:
IllegalArgumentException - If the preconditions on the parameters do not hold
NonReadableChannelException - If this channel was not opened for reading
NonWritableChannelException - If the target channel was not opened for writing
ClosedChannelException - If either this channel or the target channel is closed
AsynchronousCloseException - If another thread closes either channel
          while the transfer is in progress
ClosedByInterruptException - If another thread interrupts the current thread while the
          transfer is in progress, thereby closing both channels and
          setting the current thread's interrupt status
IOException - If some other I/O error occurs


"
7,FileChannel.MapMode,1,FileChannel.MapMode PRIVATE(),False,,NULL
7,FileChannel.MapMode,2,FileChannel.MapMode READ_ONLY(),False,,NULL
7,FileChannel.MapMode,3,FileChannel.MapMode READ_WRITE(),False,,NULL
7,FileChannel.MapMode,4,boolean isPrivate(),False,,NULL
7,FileChannel.MapMode,5,boolean isReadOnly(),False,,NULL
8,FileLock,1,void release(),True,,"

release
public abstract void release()
                      throws IOException
Releases this lock.

  If this lock object is valid then invoking this method releases the
 lock and renders the object invalid.  If this lock object is invalid
 then invoking this method has no effect.  

Throws:
ClosedChannelException - If the channel that was used to acquire this lock
          is no longer open
IOException - If an I/O error occurs


"
8,FileLock,2,boolean isValid(),True,,"

isValid
public abstract boolean isValid()
Tells whether or not this lock is valid.

  A lock object remains valid until it is released or the associated
 file channel is closed, whichever comes first.  

Returns:
true if, and only if, this lock is valid


"
8,FileLock,3,long position(),True,,"

position
public final long position()
Returns the position within the file of the first byte of the locked
 region.

  A locked region need not be contained within, or even overlap, the
 actual underlying file, so the value returned by this method may exceed
 the file's current size.  

Returns:
The position


"
8,FileLock,4,long size(),True,,"

size
public final long size()
Returns the size of the locked region in bytes.

  A locked region need not be contained within, or even overlap, the
 actual underlying file, so the value returned by this method may exceed
 the file's current size.  

Returns:
The size of the locked region


"
8,FileLock,5,Channel channel(),False,,NULL
9,MembershipKey,1,MembershipKey block(),False,,NULL
9,MembershipKey,2,MembershipKey unblock(),False,,NULL
9,MembershipKey,3,MembershipKey drop(),False,,NULL
9,MembershipKey,4,NetworkInterface networkInterface(),True,,"

networkInterface
public abstract NetworkInterface networkInterface()
Returns the network interface for which this membership key was created.
 This method will continue to return the network interface even after the
 membership becomes invalid.

Returns:
the network interface


"
9,MembershipKey,5,InetAddress sourceAddress(),True,,"

sourceAddress
public abstract InetAddress sourceAddress()
Returns the source address if this membership key is source-specific,
 or null if this membership is not source-specific.

Returns:
The source address if this membership key is source-specific,
          otherwise null


"
10,Pipe,1,Pipe.SinkChannel sink(),True,,"

sink
public abstract Pipe.SinkChannel sink()
Returns this pipe's sink channel.

Returns:
This pipe's sink channel


"
10,Pipe,2,Pipe.SourceChannel source(),True,,"

source
public abstract Pipe.SourceChannel source()
Returns this pipe's source channel.

Returns:
This pipe's source channel


"
10,Pipe,3,void close(),False,,NULL
10,Pipe,4,boolean isOpen(),False,,NULL
10,Pipe,5,void write(ByteBuffer src),False,,NULL
11,Pipe.SinkChannel,1,int write(ByteBuffer src),False,,NULL
11,Pipe.SinkChannel,2,"long write(ByteBuffer[] srcs, int offset, int length)",False,,NULL
11,Pipe.SinkChannel,3,long write(ByteBuffer[] srcs),False,,NULL
11,Pipe.SinkChannel,4,"long transferFrom(ReadableByteChannel src, long position, long count)",False,,NULL
11,Pipe.SinkChannel,5,"long transferFrom(FileChannel src, long position, long count)",False,,NULL
12,Pipe.SourceChannel,1,int read(ByteBuffer dst),False,,NULL
12,Pipe.SourceChannel,2,"long read(ByteBuffer[] dsts, int offset, int length)",False,,NULL
12,Pipe.SourceChannel,3,long read(ByteBuffer[] dsts),False,,NULL
12,Pipe.SourceChannel,4,Pipe.SourceChannel configureBlocking(boolean block),False,,NULL
12,Pipe.SourceChannel,5,"long read(ByteBuffer[] dsts, int offset, int length)",False,,NULL
13,SelectableChannel,1,SelectionKey key(),False,,NULL
13,SelectableChannel,2,int validOps(),True,,"

validOps
public abstract int validOps()
Returns an operation set
 identifying this channel's supported operations.  The bits that are set
 in this integer value denote exactly the operations that are valid for
 this channel.  This method always returns the same value for a given
 concrete channel class.

Returns:
The valid-operation set


"
13,SelectableChannel,3,SelectableChannel configureBlocking(boolean block),True,,"

configureBlocking
public abstract SelectableChannel configureBlocking(boolean block)
                                             throws IOException
Adjusts this channel's blocking mode.

  If this channel is registered with one or more selectors then an
 attempt to place it into blocking mode will cause an IllegalBlockingModeException to be thrown.

  This method may be invoked at any time.  The new blocking mode will
 only affect I/O operations that are initiated after this method returns.
 For some implementations this may require blocking until all pending I/O
 operations are complete.

  If this method is invoked while another invocation of this method or
 of the register method is in progress
 then it will first block until the other operation is complete. 

Parameters:
block - If true then this channel will be placed in
                blocking mode; if false then it will be placed
                non-blocking mode
Returns:
This selectable channel
Throws:
ClosedChannelException - If this channel is closed
IllegalBlockingModeException - If block is true and this channel is
          registered with one or more selectors
IOException - If an I/O error occurs


"
13,SelectableChannel,4,SelectorProvider provider(),True,,"

provider
public abstract SelectorProvider provider()
Returns the provider that created this channel.

Returns:
The provider that created this channel


"
13,SelectableChannel,5,int validOps(),True,,"

validOps
public abstract int validOps()
Returns an operation set
 identifying this channel's supported operations.  The bits that are set
 in this integer value denote exactly the operations that are valid for
 this channel.  This method always returns the same value for a given
 concrete channel class.

Returns:
The valid-operation set


"
16,ServerSocketChannel,1,ServerSocketChannel open(),True,,"

open
public static ServerSocketChannel open()
                                throws IOException
Opens a server-socket channel.

  The new channel is created by invoking the openServerSocketChannel method of the system-wide default SelectorProvider object.

  The new channel's socket is initially unbound; it must be bound to a
 specific address via one of its socket's bind methods before
 connections can be accepted.  

Returns:
A new socket channel
Throws:
IOException - If an I/O error occurs


"
16,ServerSocketChannel,2,ServerSocket socket(),True,,"

socket
public abstract ServerSocket socket()
Retrieves a server socket associated with this channel.

  The returned object will not declare any public methods that are not
 declared in the ServerSocket class.  

Returns:
A server socket associated with this channel


"
16,ServerSocketChannel,3,"SelectionKey register(Selector sel, int ops)",False,,NULL
16,ServerSocketChannel,4,ServerSocketChannel bind(SocketAddress local),True,,"

bind
public final ServerSocketChannel bind(SocketAddress local)
                               throws IOException
Binds the channel's socket to a local address and configures the socket
 to listen for connections.

  An invocation of this method is equivalent to the following:
 
 bind(local, 0);
 

Specified by:
bind in interface NetworkChannel
Parameters:
local - The local address to bind the socket, or null to bind
          to an automatically assigned socket address
Returns:
This channel
Throws:
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its checkListen method denies the
          operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
16,ServerSocketChannel,5,SocketChannel accept(),True,,"

accept
public abstract SocketChannel accept()
                              throws IOException
Accepts a connection made to this channel's socket.

  If this channel is in non-blocking mode then this method will
 immediately return null if there are no pending connections.
 Otherwise it will block indefinitely until a new connection is available
 or an I/O error occurs.

  The socket channel returned by this method, if any, will be in
 blocking mode regardless of the blocking mode of this channel.

  This method performs exactly the same security checks as the accept method of the ServerSocket class.  That is, if a security manager has been
 installed then for each new connection this method verifies that the
 address and port number of the connection's remote endpoint are
 permitted by the security manager's checkAccept method.  

Returns:
The socket channel for the new connection,
          or null if this channel is in non-blocking mode
          and no connection is available to be accepted
Throws:
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the accept operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the accept operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
NotYetBoundException - If this channel's socket has not yet been bound
SecurityException - If a security manager has been installed
          and it does not permit access to the remote endpoint
          of the new connection
IOException - If some other I/O error occurs


"
17,SocketChannel,1,SocketChannel open(),True,,"

open
public static SocketChannel open()
                          throws IOException
Opens a socket channel.

  The new channel is created by invoking the openSocketChannel method of the system-wide default SelectorProvider object.  

Returns:
A new socket channel
Throws:
IOException - If an I/O error occurs


"
17,SocketChannel,2,int write(ByteBuffer src),True,,"

write
public abstract int write(ByteBuffer src)
                   throws IOException
Description copied from interface: WritableByteChannel
Writes a sequence of bytes to this channel from the given buffer.

  An attempt is made to write up to r bytes to the channel,
 where r is the number of bytes remaining in the buffer, that is,
 src.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is written, where
 0 <= n <= r.
 This byte sequence will be transferred from the buffer starting at index
 p, where p is the buffer's position at the moment this
 method is invoked; the index of the last byte written will be
 p + n - 1.
 Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  Unless otherwise specified, a write operation will return only after
 writing all of the r requested bytes.  Some types of channels,
 depending upon their state, may write only some of the bytes or possibly
 none at all.  A socket channel in non-blocking mode, for example, cannot
 write any more bytes than are free in the socket's output buffer.

  This method may be invoked at any time.  If another thread has
 already initiated a write operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
write in interface WritableByteChannel
Parameters:
src - The buffer from which bytes are to be retrieved
Returns:
The number of bytes written, possibly zero
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the write operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the write operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
17,SocketChannel,3,int read(ByteBuffer dst),True,,"

read
public abstract int read(ByteBuffer dst)
                  throws IOException
Description copied from interface: ReadableByteChannel
Reads a sequence of bytes from this channel into the given buffer.

  An attempt is made to read up to r bytes from the channel,
 where r is the number of bytes remaining in the buffer, that is,
 dst.remaining(), at the moment this method is invoked.

  Suppose that a byte sequence of length n is read, where
 0 <= n <= r.
 This byte sequence will be transferred into the buffer so that the first
 byte in the sequence is at index p and the last byte is at index
 p + n - 1,
 where p is the buffer's position at the moment this method is
 invoked.  Upon return the buffer's position will be equal to
 p + n; its limit will not have changed.

  A read operation might not fill the buffer, and in fact it might not
 read any bytes at all.  Whether or not it does so depends upon the
 nature and state of the channel.  A socket channel in non-blocking mode,
 for example, cannot read any more bytes than are immediately available
 from the socket's input buffer; similarly, a file channel cannot read
 any more bytes than remain in the file.  It is guaranteed, however, that
 if a channel is in blocking mode and there is at least one byte
 remaining in the buffer then this method will block until at least one
 byte is read.

  This method may be invoked at any time.  If another thread has
 already initiated a read operation upon this channel, however, then an
 invocation of this method will block until the first operation is
 complete. 

Specified by:
read in interface ReadableByteChannel
Parameters:
dst - The buffer into which bytes are to be transferred
Returns:
The number of bytes read, possibly zero, or -1 if the
          channel has reached end-of-stream
Throws:
NotYetConnectedException - If this channel is not yet connected
ClosedChannelException - If this channel is closed
AsynchronousCloseException - If another thread closes this channel
          while the read operation is in progress
ClosedByInterruptException - If another thread interrupts the current thread
          while the read operation is in progress, thereby
          closing the channel and setting the current thread's
          interrupt status
IOException - If some other I/O error occurs


"
17,SocketChannel,4,SocketChannel bind(SocketAddress local),True,,"

bind
public abstract SocketChannel bind(SocketAddress local)
                            throws IOException
Description copied from interface: NetworkChannel
Binds the channel's socket to a local address.

  This method is used to establish an association between the socket and
 a local address. Once an association is established then the socket remains
 bound until the channel is closed. If the local parameter has the
 value null then the socket will be bound to an address that is
 assigned automatically.

Specified by:
bind in interface NetworkChannel
Parameters:
local - The address to bind the socket, or null to bind the socket
          to an automatically assigned socket address
Returns:
This channel
Throws:
ConnectionPendingException - If a non-blocking connect operation is already in progress on
          this channel
AlreadyBoundException - If the socket is already bound
UnsupportedAddressTypeException - If the type of the given address is not supported
ClosedChannelException - If the channel is closed
IOException - If some other I/O error occurs
SecurityException - If a security manager has been installed and its
          checkListen method denies
          the operation
Since:
1.7
See Also:
NetworkChannel.getLocalAddress()


"
17,SocketChannel,5,SocketChannel connect(SocketAddress remote),False,,NULL
