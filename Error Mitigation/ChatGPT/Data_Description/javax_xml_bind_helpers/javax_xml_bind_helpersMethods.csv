ClassName,Method,Return Type,Description,Full Description
AbstractMarshallerImpl,getAdapter(Class<A> type),<A extends XmlAdapter> A,Gets the adapter associated with the specified type.,"

getAdapter
public <A extends XmlAdapter> A getAdapter(Class<A> type)
Description copied from interface: Marshaller
Gets the adapter associated with the specified type.

 This is the reverse operation of the Marshaller.setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter) method.

Specified by:
getAdapter in interface Marshaller


"
AbstractMarshallerImpl,getAttachmentMarshaller(),AttachmentMarshaller,NULL,"

getAttachmentMarshaller
public AttachmentMarshaller getAttachmentMarshaller()

Specified by:
getAttachmentMarshaller in interface Marshaller


"
AbstractMarshallerImpl,getEncoding(),protected String,Convenience method for getting the current output encoding.,"

getEncoding
protected String getEncoding()
Convenience method for getting the current output encoding.

Returns:
the current encoding or ""UTF-8"" if it hasn't been set.


"
AbstractMarshallerImpl,getEventHandler(),ValidationEventHandler,Return the current event handler or the default event handler if one hasn't been set.,"

getEventHandler
public ValidationEventHandler getEventHandler()
                                       throws JAXBException
Description copied from interface: Marshaller
Return the current event handler or the default event handler if one
 hasn't been set.

Specified by:
getEventHandler in interface Marshaller
Returns:
the current ValidationEventHandler or the default event handler
         if it hasn't been set
Throws:
JAXBException - if an error was encountered while getting the
         current event handler
See Also:
Marshaller.getEventHandler()


"
AbstractMarshallerImpl,getJavaEncoding(String encoding),protected String,Gets the corresponding Java encoding name from an IANA name.,"

getJavaEncoding
protected String getJavaEncoding(String encoding)
                          throws UnsupportedEncodingException
Gets the corresponding Java encoding name from an IANA name.

 This method is a helper method for the derived class to convert
 encoding names.

Throws:
UnsupportedEncodingException - If this implementation couldn't find the Java encoding name.


"
AbstractMarshallerImpl,getListener(),Marshaller.Listener,Return Marshaller.Listener registered with this Marshaller.,"

getListener
public Marshaller.Listener getListener()
Description copied from interface: Marshaller
Return Marshaller.Listener registered with this Marshaller.

Specified by:
getListener in interface Marshaller
Returns:
registered Marshaller.Listener or null if no Listener is registered with this Marshaller.


"
AbstractMarshallerImpl,getNode(Object obj),Node,"By default, the getNode method is unsupported and throw an UnsupportedOperationException.","

getNode
public Node getNode(Object obj)
             throws JAXBException
By default, the getNode method is unsupported and throw
 an UnsupportedOperationException.

 Implementations that choose to support this method must
 override this method.

Specified by:
getNode in interface Marshaller
Parameters:
obj - - JAXB Java representation of XML content
Returns:
the DOM tree view of the contentTree
Throws:
JAXBException - If any unexpected problem occurs


"
AbstractMarshallerImpl,getNoNSSchemaLocation(),protected String,Convenience method for getting the current noNamespaceSchemaLocation.,"

getNoNSSchemaLocation
protected String getNoNSSchemaLocation()
Convenience method for getting the current noNamespaceSchemaLocation.

Returns:
the current noNamespaceSchemaLocation or null if it hasn't
 been set


"
AbstractMarshallerImpl,getProperty(String name),Object,Default implementation of the getProperty method handles the four defined properties in Marshaller.,"

getProperty
public Object getProperty(String name)
                   throws PropertyException
Default implementation of the getProperty method handles
 the four defined properties in Marshaller.  If a provider
 needs to support additional provider specific properties,
 it should override this method in a derived class.

Specified by:
getProperty in interface Marshaller
Parameters:
name - the name of the property to retrieve
Returns:
the value of the requested property
Throws:
PropertyException - when there is an error retrieving the given property or value
      property name


"
AbstractMarshallerImpl,getSchema(),Schema,Get the JAXP 1.3 Schema object being used to perform marshal-time validation.,"

getSchema
public Schema getSchema()
Description copied from interface: Marshaller
Get the JAXP 1.3 Schema object
 being used to perform marshal-time validation.  If there is no
 Schema set on the marshaller, then this method will return null
 indicating that marshal-time validation will not be performed.

Specified by:
getSchema in interface Marshaller
Returns:
the Schema object being used to perform marshal-time
      validation or null if not present.


"
AbstractMarshallerImpl,getSchemaLocation(),protected String,Convenience method for getting the current schemaLocation.,"

getSchemaLocation
protected String getSchemaLocation()
Convenience method for getting the current schemaLocation.

Returns:
the current schemaLocation or null if it hasn't been set


"
AbstractMarshallerImpl,isFormattedOutput(),protected boolean,Convenience method for getting the formatted output flag.,"

isFormattedOutput
protected boolean isFormattedOutput()
Convenience method for getting the formatted output flag.

Returns:
the current value of the formatted output flag or false if
 it hasn't been set.


"
AbstractMarshallerImpl,isFragment(),protected boolean,Convenience method for getting the fragment flag.,"

isFragment
protected boolean isFragment()
Convenience method for getting the fragment flag.

Returns:
the current value of the fragment flag or false if
 it hasn't been set.


"
AbstractMarshallerImpl,"marshal(Object obj, ContentHandler handler)",void,Marshal the content tree rooted at jaxbElement into SAX2 events.,"

marshal
public final void marshal(Object obj,
                          ContentHandler handler)
                   throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into SAX2 events.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The root of content tree to be marshalled.
handler - XML will be sent to this handler as SAX2 events.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object jaxbElement, File output)",void,Marshal the content tree rooted at jaxbElement into a file.,"

marshal
public void marshal(Object jaxbElement,
                    File output)
             throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into a file.

Specified by:
marshal in interface Marshaller
Parameters:
jaxbElement - The root of content tree to be marshalled.
output - File to be written. If this file already exists, it will be overwritten.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object obj, Node node)",void,Marshal the content tree rooted at jaxbElement into a DOM tree.,"

marshal
public final void marshal(Object obj,
                          Node node)
                   throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into a DOM tree.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The content tree to be marshalled.
node - DOM nodes will be added as children of this node.
      This parameter must be a Node that accepts children
      (Document,
      DocumentFragment, or
      Element)
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal jaxbElement (or any
      object reachable from jaxbElement).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object obj, OutputStream os)",void,Marshal the content tree rooted at jaxbElement into an output stream.,"

marshal
public final void marshal(Object obj,
                          OutputStream os)
                   throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into an output stream.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The root of content tree to be marshalled.
os - XML will be added to this stream.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object obj, Writer w)",void,Marshal the content tree rooted at jaxbElement into a Writer.,"

marshal
public final void marshal(Object obj,
                          Writer w)
                   throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into a Writer.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The root of content tree to be marshalled.
w - XML will be sent to this writer.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object obj, XMLEventWriter writer)",void,Marshal the content tree rooted at jaxbElement into a XMLEventWriter.,"

marshal
public void marshal(Object obj,
                    XMLEventWriter writer)
             throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into a
 XMLEventWriter.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The content tree rooted at jaxbElement to be marshalled.
writer - XML will be sent to this writer.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"marshal(Object obj, XMLStreamWriter writer)",void,Marshal the content tree rooted at jaxbElement into a XMLStreamWriter.,"

marshal
public void marshal(Object obj,
                    XMLStreamWriter writer)
             throws JAXBException
Description copied from interface: Marshaller
Marshal the content tree rooted at jaxbElement into a
 XMLStreamWriter.

Specified by:
marshal in interface Marshaller
Parameters:
obj - The content tree to be marshalled.
writer - XML will be sent to this writer.
Throws:
JAXBException - If any unexpected problem occurs during the marshalling.
MarshalException - If the ValidationEventHandler
      returns false from its handleEvent method or the
      Marshaller is unable to marshal obj (or any
      object reachable from obj).  See 
      Marshalling a JAXB element.


"
AbstractMarshallerImpl,"setAdapter(Class<A> type, A adapter)",<A extends XmlAdapter> void,Associates a configured instance of XmlAdapter with this marshaller.,"

setAdapter
public <A extends XmlAdapter> void setAdapter(Class<A> type,
                                              A adapter)
Description copied from interface: Marshaller
Associates a configured instance of XmlAdapter with this marshaller.

 
 Every marshaller internally maintains a
 Map<Class,XmlAdapter>,
 which it uses for marshalling classes whose fields/methods are annotated
 with XmlJavaTypeAdapter.

 
 This method allows applications to use a configured instance of XmlAdapter.
 When an instance of an adapter is not given, a marshaller will create
 one by invoking its default constructor.

Specified by:
setAdapter in interface Marshaller
Parameters:
type - The type of the adapter. The specified instance will be used when
      XmlJavaTypeAdapter.value()
      refers to this type.
adapter - The instance of the adapter to be used. If null, it will un-register
      the current adapter set for this type.


"
AbstractMarshallerImpl,setAdapter(XmlAdapter adapter),void,Associates a configured instance of XmlAdapter with this marshaller.,"

setAdapter
public void setAdapter(XmlAdapter adapter)
Description copied from interface: Marshaller
Associates a configured instance of XmlAdapter with this marshaller.

 
 This is a convenience method that invokes setAdapter(adapter.getClass(),adapter);.

Specified by:
setAdapter in interface Marshaller
See Also:
Marshaller.setAdapter(Class,XmlAdapter)


"
AbstractMarshallerImpl,setAttachmentMarshaller(AttachmentMarshaller am),void,Associate a context that enables binary data within an XML document to be transmitted as XML-binary optimized attachment.,"

setAttachmentMarshaller
public void setAttachmentMarshaller(AttachmentMarshaller am)
Description copied from interface: Marshaller
Associate a context that enables binary data within an XML document
 to be transmitted as XML-binary optimized attachment.
 The attachment is referenced from the XML document content model
 by content-id URIs(cid) references stored within the xml document.

Specified by:
setAttachmentMarshaller in interface Marshaller


"
AbstractMarshallerImpl,setEncoding(String encoding),protected void,Convenience method for setting the output encoding.,"

setEncoding
protected void setEncoding(String encoding)
Convenience method for setting the output encoding.

Parameters:
encoding - a valid encoding as specified in the Marshaller class
 documentation


"
AbstractMarshallerImpl,setEventHandler(ValidationEventHandler handler),void,Allow an application to register a validation event handler.,"

setEventHandler
public void setEventHandler(ValidationEventHandler handler)
                     throws JAXBException
Description copied from interface: Marshaller
Allow an application to register a validation event handler.
 
 The validation event handler will be called by the JAXB Provider if any
 validation errors are encountered during calls to any of the marshal
 API's.  If the client application does not register a validation event
 handler before invoking one of the marshal methods, then validation
 events will be handled by the default event handler which will terminate
 the marshal operation after the first error or fatal error is encountered.
 
 Calling this method with a null parameter will cause the Marshaller
 to revert back to the default default event handler.

Specified by:
setEventHandler in interface Marshaller
Parameters:
handler - the validation event handler
Throws:
JAXBException - if an error was encountered while setting the
         event handler
See Also:
Marshaller.setEventHandler(ValidationEventHandler)


"
AbstractMarshallerImpl,setFormattedOutput(boolean v),protected void,Convenience method for setting the formatted output flag.,"

setFormattedOutput
protected void setFormattedOutput(boolean v)
Convenience method for setting the formatted output flag.

Parameters:
v - value of the formatted output flag.


"
AbstractMarshallerImpl,setFragment(boolean v),protected void,Convenience method for setting the fragment flag.,"

setFragment
protected void setFragment(boolean v)
Convenience method for setting the fragment flag.

Parameters:
v - value of the fragment flag.


"
AbstractMarshallerImpl,setListener(Marshaller.Listener listener),void,Register marshal event callback Marshaller.Listener with this Marshaller.,"

setListener
public void setListener(Marshaller.Listener listener)
Description copied from interface: Marshaller

 Register marshal event callback Marshaller.Listener with this Marshaller.

 
 There is only one Listener per Marshaller. Setting a Listener replaces the previous set Listener.
 One can unregister current Listener by setting listener to null.

Specified by:
setListener in interface Marshaller
Parameters:
listener - an instance of a class that implements Marshaller.Listener


"
AbstractMarshallerImpl,setNoNSSchemaLocation(String location),protected void,Convenience method for setting the noNamespaceSchemaLocation.,"

setNoNSSchemaLocation
protected void setNoNSSchemaLocation(String location)
Convenience method for setting the noNamespaceSchemaLocation.

Parameters:
location - the noNamespaceSchemaLocation value


"
AbstractMarshallerImpl,"setProperty(String name, Object value)",void,Default implementation of the setProperty method handles the four defined properties in Marshaller.,"

setProperty
public void setProperty(String name,
                        Object value)
                 throws PropertyException
Default implementation of the setProperty method handles
 the four defined properties in Marshaller. If a provider
 needs to handle additional properties, it should override
 this method in a derived class.

Specified by:
setProperty in interface Marshaller
Parameters:
name - the name of the property to be set. This value can either
              be specified using one of the constant fields or a user
              supplied string.
value - the value of the property to be set
Throws:
PropertyException - when there is an error processing the given
                            property or value


"
AbstractMarshallerImpl,setSchema(Schema schema),void,Specify the JAXP 1.3 Schema object that should be used to validate subsequent marshal operations against.,"

setSchema
public void setSchema(Schema schema)
Description copied from interface: Marshaller
Specify the JAXP 1.3 Schema
 object that should be used to validate subsequent marshal operations
 against.  Passing null into this method will disable validation.

 
 This method allows the caller to validate the marshalled XML as it's marshalled.

 
 Initially this property is set to null.

Specified by:
setSchema in interface Marshaller
Parameters:
schema - Schema object to validate marshal operations against or null to disable validation


"
AbstractMarshallerImpl,setSchemaLocation(String location),protected void,Convenience method for setting the schemaLocation.,"

setSchemaLocation
protected void setSchemaLocation(String location)
Convenience method for setting the schemaLocation.

Parameters:
location - the schemaLocation value


"
AbstractUnmarshallerImpl,createUnmarshalException(SAXException e),protected UnmarshalException,Creates an UnmarshalException from a SAXException.,"

createUnmarshalException
protected UnmarshalException createUnmarshalException(SAXException e)
Creates an UnmarshalException from a SAXException.

 This is an utility method provided for the derived classes.

 
 When a provider-implemented ContentHandler wants to throw a
 JAXBException, it needs to wrap the exception by a SAXException.
 If the unmarshaller implementation blindly wrap SAXException
 by JAXBException, such an exception will be a JAXBException
 wrapped by a SAXException wrapped by another JAXBException.
 This is silly.

 
 This method checks the nested exception of SAXException
 and reduce those excessive wrapping.

Returns:
the resulting UnmarshalException


"
AbstractUnmarshallerImpl,getAdapter(Class<A> type),<A extends XmlAdapter> A,Gets the adapter associated with the specified type.,"

getAdapter
public <A extends XmlAdapter> A getAdapter(Class<A> type)
Description copied from interface: Unmarshaller
Gets the adapter associated with the specified type.

 This is the reverse operation of the Unmarshaller.setAdapter(javax.xml.bind.annotation.adapters.XmlAdapter) method.

Specified by:
getAdapter in interface Unmarshaller


"
AbstractUnmarshallerImpl,getAttachmentUnmarshaller(),AttachmentUnmarshaller,NULL,"

getAttachmentUnmarshaller
public AttachmentUnmarshaller getAttachmentUnmarshaller()

Specified by:
getAttachmentUnmarshaller in interface Unmarshaller


"
AbstractUnmarshallerImpl,getEventHandler(),ValidationEventHandler,Return the current event handler or the default event handler if one hasn't been set.,"

getEventHandler
public ValidationEventHandler getEventHandler()
                                       throws JAXBException
Return the current event handler or the default event handler if one
 hasn't been set.

Specified by:
getEventHandler in interface Unmarshaller
Returns:
the current ValidationEventHandler or the default event handler
        if it hasn't been set
Throws:
JAXBException - if an error was encountered while getting the
        current event handler


"
AbstractUnmarshallerImpl,getListener(),Unmarshaller.Listener,Return Unmarshaller.Listener registered with this Unmarshaller.,"

getListener
public Unmarshaller.Listener getListener()
Description copied from interface: Unmarshaller
Return Unmarshaller.Listener registered with this Unmarshaller.

Specified by:
getListener in interface Unmarshaller
Returns:
registered Unmarshaller.Listener or null if no Listener is registered with this Unmarshaller.


"
AbstractUnmarshallerImpl,getProperty(String name),Object,Default implementation of the getProperty method always throws PropertyException since there are no required properties.,"

getProperty
public Object getProperty(String name)
                   throws PropertyException
Default implementation of the getProperty method always
 throws PropertyException since there are no required
 properties. If a provider needs to handle additional
 properties, it should override this method in a derived class.

Specified by:
getProperty in interface Unmarshaller
Parameters:
name - the name of the property to retrieve
Returns:
the value of the requested property
Throws:
PropertyException - when there is an error retrieving the given property or value
      property name


"
AbstractUnmarshallerImpl,getSchema(),Schema,Get the JAXP 1.3 Schema object being used to perform unmarshal-time validation.,"

getSchema
public Schema getSchema()
Description copied from interface: Unmarshaller
Get the JAXP 1.3 Schema object
 being used to perform unmarshal-time validation.  If there is no
 Schema set on the unmarshaller, then this method will return null
 indicating that unmarshal-time validation will not be performed.
 
 This method provides replacement functionality for the deprecated
 Unmarshaller.isValidating() API as well as access to the Schema object.
 To determine if the Unmarshaller has validation enabled, simply
 test the return type for null:
 

   boolean isValidating = u.getSchema()!=null;
 

Specified by:
getSchema in interface Unmarshaller
Returns:
the Schema object being used to perform unmarshal-time
      validation or null if not present


"
AbstractUnmarshallerImpl,getXMLReader(),protected XMLReader,Obtains a configured XMLReader.,"

getXMLReader
protected XMLReader getXMLReader()
                          throws JAXBException
Obtains a configured XMLReader.

 This method is used when the client-specified
 SAXSource object doesn't have XMLReader.

 Unmarshaller is not re-entrant, so we will
 only use one instance of XMLReader.

Throws:
JAXBException


"
AbstractUnmarshallerImpl,isValidating(),boolean,Indicates whether or not the Unmarshaller is configured to validate during unmarshal operations.,"

isValidating
public boolean isValidating()
                     throws JAXBException
Indicates whether or not the Unmarshaller is configured to validate
 during unmarshal operations.
 
Note: I named this method isValidating() to stay in-line
 with JAXP, as opposed to naming it getValidating(). 

Specified by:
isValidating in interface Unmarshaller
Returns:
true if the Unmarshaller is configured to validate during
        unmarshal operations, false otherwise
Throws:
JAXBException - if an error occurs while retrieving the validating
        flag


"
AbstractUnmarshallerImpl,"setAdapter(Class<A> type, A adapter)",<A extends XmlAdapter> void,Associates a configured instance of XmlAdapter with this unmarshaller.,"

setAdapter
public <A extends XmlAdapter> void setAdapter(Class<A> type,
                                              A adapter)
Description copied from interface: Unmarshaller
Associates a configured instance of XmlAdapter with this unmarshaller.

 
 Every unmarshaller internally maintains a
 Map<Class,XmlAdapter>,
 which it uses for unmarshalling classes whose fields/methods are annotated
 with XmlJavaTypeAdapter.

 
 This method allows applications to use a configured instance of XmlAdapter.
 When an instance of an adapter is not given, an unmarshaller will create
 one by invoking its default constructor.

Specified by:
setAdapter in interface Unmarshaller
Parameters:
type - The type of the adapter. The specified instance will be used when
      XmlJavaTypeAdapter.value()
      refers to this type.
adapter - The instance of the adapter to be used. If null, it will un-register
      the current adapter set for this type.


"
AbstractUnmarshallerImpl,setAdapter(XmlAdapter adapter),void,Associates a configured instance of XmlAdapter with this unmarshaller.,"

setAdapter
public void setAdapter(XmlAdapter adapter)
Description copied from interface: Unmarshaller
Associates a configured instance of XmlAdapter with this unmarshaller.

 
 This is a convenience method that invokes setAdapter(adapter.getClass(),adapter);.

Specified by:
setAdapter in interface Unmarshaller
See Also:
Unmarshaller.setAdapter(Class,XmlAdapter)


"
AbstractUnmarshallerImpl,setAttachmentUnmarshaller(AttachmentUnmarshaller au),void,"Associate a context that resolves cid's, content-id URIs, to binary data passed as attachments.","

setAttachmentUnmarshaller
public void setAttachmentUnmarshaller(AttachmentUnmarshaller au)
Description copied from interface: Unmarshaller
Associate a context that resolves cid's, content-id URIs, to
 binary data passed as attachments.

Unmarshal time validation, enabled via Unmarshaller.setSchema(Schema),
 must be supported even when unmarshaller is performing XOP processing.
 

Specified by:
setAttachmentUnmarshaller in interface Unmarshaller


"
AbstractUnmarshallerImpl,setEventHandler(ValidationEventHandler handler),void,Allow an application to register a validation event handler.,"

setEventHandler
public void setEventHandler(ValidationEventHandler handler)
                     throws JAXBException
Allow an application to register a validation event handler.
 
 The validation event handler will be called by the JAXB Provider if any
 validation errors are encountered during calls to any of the
 unmarshal methods.  If the client application does not register
 a validation event handler before invoking the unmarshal methods, then
 all validation events will be silently ignored and may result in
 unexpected behaviour.

Specified by:
setEventHandler in interface Unmarshaller
Parameters:
handler - the validation event handler
Throws:
JAXBException - if an error was encountered while setting the
        event handler


"
AbstractUnmarshallerImpl,setListener(Unmarshaller.Listener listener),void,Register unmarshal event callback Unmarshaller.Listener with this Unmarshaller.,"

setListener
public void setListener(Unmarshaller.Listener listener)
Description copied from interface: Unmarshaller

 Register unmarshal event callback Unmarshaller.Listener with this Unmarshaller.

 
 There is only one Listener per Unmarshaller. Setting a Listener replaces the previous set Listener.
 One can unregister current Listener by setting listener to null.

Specified by:
setListener in interface Unmarshaller
Parameters:
listener - provides unmarshal event callbacks for this Unmarshaller


"
AbstractUnmarshallerImpl,"setProperty(String name, Object value)",void,Default implementation of the setProperty method always throws PropertyException since there are no required properties.,"

setProperty
public void setProperty(String name,
                        Object value)
                 throws PropertyException
Default implementation of the setProperty method always
 throws PropertyException since there are no required
 properties. If a provider needs to handle additional
 properties, it should override this method in a derived class.

Specified by:
setProperty in interface Unmarshaller
Parameters:
name - the name of the property to be set. This value can either
              be specified using one of the constant fields or a user
              supplied string.
value - the value of the property to be set
Throws:
PropertyException - when there is an error processing the given
                            property or value


"
AbstractUnmarshallerImpl,setSchema(Schema schema),void,Specify the JAXP 1.3 Schema object that should be used to validate subsequent unmarshal operations against.,"

setSchema
public void setSchema(Schema schema)
Description copied from interface: Unmarshaller
Specify the JAXP 1.3 Schema
 object that should be used to validate subsequent unmarshal operations
 against.  Passing null into this method will disable validation.
 
 This method replaces the deprecated setValidating(boolean)
 API.

 
 Initially this property is set to null.

Specified by:
setSchema in interface Unmarshaller
Parameters:
schema - Schema object to validate unmarshal operations against or null to disable validation


"
AbstractUnmarshallerImpl,setValidating(boolean validating),void,Specifies whether or not the Unmarshaller should validate during unmarshal operations.,"

setValidating
public void setValidating(boolean validating)
                   throws JAXBException
Specifies whether or not the Unmarshaller should validate during
 unmarshal operations.  By default, the Unmarshaller does
 not validate.
 
 This method may only be invoked before or after calling one of the
 unmarshal methods.

Specified by:
setValidating in interface Unmarshaller
Parameters:
validating - true if the Unmarshaller should validate during
       unmarshal, false otherwise
Throws:
JAXBException - if an error occurred while enabling or disabling
 validation at unmarshal time


"
AbstractUnmarshallerImpl,unmarshal(File f),Object,Unmarshal XML data from the specified file and return the resulting content tree.,"

unmarshal
public final Object unmarshal(File f)
                       throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified file and return the resulting
 content tree.

 
 Implements Unmarshal Global Root Element.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
f - the file to unmarshal XML data from
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(InputSource source),Object,Unmarshal XML data from the specified SAX InputSource and return the resulting content tree.,"

unmarshal
public final Object unmarshal(InputSource source)
                       throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified SAX InputSource and return the
 resulting content tree.

 
 Implements Unmarshal Global Root Element.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
source - the input source to unmarshal XML data from
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(InputStream is),Object,Unmarshal XML data from the specified InputStream and return the resulting content tree.,"

unmarshal
public final Object unmarshal(InputStream is)
                       throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified InputStream and return the
 resulting content tree.  Validation event location information may
 be incomplete when using this form of the unmarshal API.

 
 Implements Unmarshal Global Root Element.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
is - the InputStream to unmarshal XML data from
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,"unmarshal(Node node, Class<T> expectedType)",<T> JAXBElement<T>,Unmarshal XML data by JAXB mapped declaredType and return the resulting content tree.,"

unmarshal
public <T> JAXBElement<T> unmarshal(Node node,
                                    Class<T> expectedType)
                             throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data by JAXB mapped declaredType
 and return the resulting content tree.

 
 Implements Unmarshal by Declared Type

Specified by:
unmarshal in interface Unmarshaller
Parameters:
node - the document/element to unmarshal XML data from.
      The caller must support at least Document and Element.
expectedType - appropriate JAXB mapped class to hold node's XML data.
Returns:
JAXB Element representation of node
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(Reader reader),Object,Unmarshal XML data from the specified Reader and return the resulting content tree.,"

unmarshal
public final Object unmarshal(Reader reader)
                       throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified Reader and return the
 resulting content tree.  Validation event location information may
 be incomplete when using this form of the unmarshal API,
 because a Reader does not provide the system ID.

 
 Implements Unmarshal Global Root Element.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
reader - the Reader to unmarshal XML data from
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(Source source),Object,Unmarshal XML data from the specified XML Source and return the resulting content tree.,"

unmarshal
public Object unmarshal(Source source)
                 throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified XML Source and return the
 resulting content tree.

 
 Implements Unmarshal Global Root Element.

 

SAX 2.0 Parser Pluggability

 A client application can choose not to use the default parser mechanism
 supplied with their JAXB provider.  Any SAX 2.0 compliant parser can be
 substituted for the JAXB provider's default mechanism.  To do so, the
 client application must properly configure a SAXSource containing
 an XMLReader implemented by the SAX 2.0 parser provider.  If the
 XMLReader has an org.xml.sax.ErrorHandler registered
 on it, it will be replaced by the JAXB Provider so that validation errors
 can be reported via the ValidationEventHandler mechanism of
 JAXB.  If the SAXSource does not contain an XMLReader,
 then the JAXB provider's default parser mechanism will be used.
 
 This parser replacement mechanism can also be used to replace the JAXB
 provider's unmarshal-time validation engine.  The client application
 must properly configure their SAX 2.0 compliant parser to perform
 validation (as shown in the example above).  Any SAXParserExceptions
  encountered by the parser during the unmarshal operation will be
 processed by the JAXB provider and converted into JAXB
 ValidationEvent objects which will be reported back to the
 client via the ValidationEventHandler registered with the
 Unmarshaller.  Note: specifying a substitute validating
 SAX 2.0 parser for unmarshalling does not necessarily replace the
 validation engine used by the JAXB provider for performing on-demand
 validation.
 
 The only way for a client application to specify an alternate parser
 mechanism to be used during unmarshal is via the
 unmarshal(SAXSource) API.  All other forms of the unmarshal
 method (File, URL, Node, etc) will use the JAXB provider's default
 parser and validator mechanisms.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
source - the XML Source to unmarshal XML data from (providers are
        only required to support SAXSource, DOMSource, and StreamSource)
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data
See Also:
Unmarshaller.unmarshal(javax.xml.transform.Source, Class)


"
AbstractUnmarshallerImpl,"unmarshal(Source source, Class<T> expectedType)",<T> JAXBElement<T>,Unmarshal XML data from the specified XML Source by declaredType and return the resulting content tree.,"

unmarshal
public <T> JAXBElement<T> unmarshal(Source source,
                                    Class<T> expectedType)
                             throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified XML Source by declaredType and return the
 resulting content tree.

 
 Implements Unmarshal by Declared Type

 See SAX 2.0 Parser Pluggability

Specified by:
unmarshal in interface Unmarshaller
Parameters:
source - the XML Source to unmarshal XML data from (providers are
        only required to support SAXSource, DOMSource, and StreamSource)
expectedType - appropriate JAXB mapped class to hold source's xml root element
Returns:
Java content rooted by JAXB Element
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(URL url),Object,Unmarshal XML data from the specified URL and return the resulting content tree.,"

unmarshal
public final Object unmarshal(URL url)
                       throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified URL and return the resulting
 content tree.

 
 Implements Unmarshal Global Root Element.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
url - the url to unmarshal XML data from
Returns:
the newly created root object of the java content tree
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,unmarshal(XMLEventReader reader),Object,Unmarshal XML data from the specified pull parser and return the resulting content tree.,"

unmarshal
public Object unmarshal(XMLEventReader reader)
                 throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified pull parser and return the
 resulting content tree.

 
 This method is an Unmarshal Global Root method.

 
 This method assumes that the parser is on a START_DOCUMENT or
 START_ELEMENT event.  Unmarshalling will be done from this
 start event to the corresponding end event.  If this method
 returns successfully, the reader will be pointing at
 the token right after the end event.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
reader - The parser to be read.
Returns:
the newly created root object of the java content tree.
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data
See Also:
Unmarshaller.unmarshal(javax.xml.stream.XMLEventReader, Class)


"
AbstractUnmarshallerImpl,"unmarshal(XMLEventReader reader, Class<T> expectedType)",<T> JAXBElement<T>,Unmarshal root element to JAXB mapped declaredType and return the resulting content tree.,"

unmarshal
public <T> JAXBElement<T> unmarshal(XMLEventReader reader,
                                    Class<T> expectedType)
                             throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal root element to JAXB mapped declaredType
 and return the resulting content tree.

 
 This method implements unmarshal by declaredType.

 
 This method assumes that the parser is on a START_DOCUMENT or
 START_ELEMENT event. Unmarshalling will be done from this
 start event to the corresponding end event.  If this method
 returns successfully, the reader will be pointing at
 the token right after the end event.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
reader - The parser to be read.
expectedType - appropriate JAXB mapped class to hold reader's START_ELEMENT XML data.
Returns:
content tree rooted by JAXB Element representation
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
AbstractUnmarshallerImpl,"unmarshal(XMLReader reader, InputSource source)",protected abstract Object,Unmarshals an object by using the specified XMLReader and the InputSource.,"

unmarshal
protected abstract Object unmarshal(XMLReader reader,
                                    InputSource source)
                             throws JAXBException
Unmarshals an object by using the specified XMLReader and the InputSource.

 The callee should call the setErrorHandler method of the XMLReader
 so that errors are passed to the client-specified ValidationEventHandler.

Throws:
JAXBException


"
AbstractUnmarshallerImpl,unmarshal(XMLStreamReader reader),Object,Unmarshal XML data from the specified pull parser and return the resulting content tree.,"

unmarshal
public Object unmarshal(XMLStreamReader reader)
                 throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal XML data from the specified pull parser and return the
 resulting content tree.

 
 Implements Unmarshal Global Root Element.

 
 This method assumes that the parser is on a START_DOCUMENT or
 START_ELEMENT event.  Unmarshalling will be done from this
 start event to the corresponding end event.  If this method
 returns successfully, the reader will be pointing at
 the token right after the end event.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
reader - The parser to be read.
Returns:
the newly created root object of the java content tree.
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data
See Also:
Unmarshaller.unmarshal(javax.xml.stream.XMLStreamReader, Class)


"
AbstractUnmarshallerImpl,"unmarshal(XMLStreamReader reader, Class<T> expectedType)",<T> JAXBElement<T>,Unmarshal root element to JAXB mapped declaredType and return the resulting content tree.,"

unmarshal
public <T> JAXBElement<T> unmarshal(XMLStreamReader reader,
                                    Class<T> expectedType)
                             throws JAXBException
Description copied from interface: Unmarshaller
Unmarshal root element to JAXB mapped declaredType
 and return the resulting content tree.

 
 This method implements unmarshal by declaredType.
 
 This method assumes that the parser is on a START_DOCUMENT or
 START_ELEMENT event. Unmarshalling will be done from this
 start event to the corresponding end event.  If this method
 returns successfully, the reader will be pointing at
 the token right after the end event.

Specified by:
unmarshal in interface Unmarshaller
Parameters:
reader - The parser to be read.
expectedType - appropriate JAXB mapped class to hold reader's START_ELEMENT XML data.
Returns:
content tree rooted by JAXB Element representation
Throws:
JAXBException - If any unexpected errors occur while unmarshalling
UnmarshalException - If the ValidationEventHandler
     returns false from its handleEvent method or the
     Unmarshaller is unable to perform the XML to Java
     binding.  See Unmarshalling XML Data


"
DefaultValidationEventHandler,handleEvent(ValidationEvent event),boolean,Receive notification of a validation warning or error.,"

handleEvent
public boolean handleEvent(ValidationEvent event)
Description copied from interface: ValidationEventHandler
Receive notification of a validation warning or error.

 The ValidationEvent will have a
 ValidationEventLocator embedded in it that
 indicates where the error or warning occurred.

 
 If an unchecked runtime exception is thrown from this method, the JAXB
 provider will treat it as if the method returned false and interrupt
 the current unmarshal, validate, or marshal operation.

Specified by:
handleEvent in interface ValidationEventHandler
Parameters:
event - the encapsulated validation event information.  It is a
 provider error if this parameter is null.
Returns:
true if the JAXB Provider should attempt to continue the current
         unmarshal, validate, or marshal operation after handling this
         warning/error, false if the provider should terminate the current
         operation with the appropriate UnmarshalException,
         ValidationException, or MarshalException.


"
ValidationEventImpl,getLinkedException(),Throwable,Retrieve the linked exception for this warning/error.,"

getLinkedException
public Throwable getLinkedException()
Description copied from interface: ValidationEvent
Retrieve the linked exception for this warning/error.

Specified by:
getLinkedException in interface ValidationEvent
Returns:
the linked exception for this warning/error or null if one
         wasn't set


"
ValidationEventImpl,getLocator(),ValidationEventLocator,Retrieve the locator for this warning/error.,"

getLocator
public ValidationEventLocator getLocator()
Description copied from interface: ValidationEvent
Retrieve the locator for this warning/error.

Specified by:
getLocator in interface ValidationEvent
Returns:
the locator that indicates where the warning/error occurred


"
ValidationEventImpl,getMessage(),String,Retrieve the text message for this warning/error.,"

getMessage
public String getMessage()
Description copied from interface: ValidationEvent
Retrieve the text message for this warning/error.

Specified by:
getMessage in interface ValidationEvent
Returns:
the text message for this warning/error or null if one wasn't set


"
ValidationEventImpl,getSeverity(),int,Retrieve the severity code for this warning/error.,"

getSeverity
public int getSeverity()
Description copied from interface: ValidationEvent
Retrieve the severity code for this warning/error.

 
 Must be one of ValidationError.WARNING,
 ValidationError.ERROR, or ValidationError.FATAL_ERROR.

Specified by:
getSeverity in interface ValidationEvent
Returns:
the severity code for this warning/error


"
ValidationEventImpl,setLinkedException(Throwable _linkedException),void,Set the linked exception field of this event.,"

setLinkedException
public void setLinkedException(Throwable _linkedException)
Set the linked exception field of this event.

Parameters:
_linkedException - Optional linked exception - may be null.


"
ValidationEventImpl,setLocator(ValidationEventLocator _locator),void,Set the locator object for this event.,"

setLocator
public void setLocator(ValidationEventLocator _locator)
Set the locator object for this event.

Parameters:
_locator - The locator - may be null.


"
ValidationEventImpl,setMessage(String _message),void,Set the message field of this event.,"

setMessage
public void setMessage(String _message)
Set the message field of this event.

Parameters:
_message - String message - may be null.


"
ValidationEventImpl,setSeverity(int _severity),void,Set the severity field of this event.,"

setSeverity
public void setSeverity(int _severity)
Set the severity field of this event.

Parameters:
_severity - Must be one of ValidationEvent.WARNING,
 ValidationEvent.ERROR, or ValidationEvent.FATAL_ERROR.
Throws:
IllegalArgumentException - if an illegal severity field is supplied


"
ValidationEventImpl,toString(),String,Returns a string representation of this object in a format helpful to debugging.,"

toString
public String toString()
Returns a string representation of this object in a format
 helpful to debugging.

Overrides:
toString in class Object
Returns:
a string representation of the object.
See Also:
Object.equals(Object)


"
ValidationEventLocatorImpl,getColumnNumber(),int,Return the column number if available,"

getColumnNumber
public int getColumnNumber()
Description copied from interface: ValidationEventLocator
Return the column number if available

Specified by:
getColumnNumber in interface ValidationEventLocator
Returns:
the column number or -1 if unavailable
See Also:
ValidationEventLocator.getColumnNumber()


"
ValidationEventLocatorImpl,getLineNumber(),int,Return the line number if available,"

getLineNumber
public int getLineNumber()
Description copied from interface: ValidationEventLocator
Return the line number if available

Specified by:
getLineNumber in interface ValidationEventLocator
Returns:
the line number or -1 if unavailable
See Also:
ValidationEventLocator.getLineNumber()


"
ValidationEventLocatorImpl,getNode(),Node,Return a reference to the DOM Node if available,"

getNode
public Node getNode()
Description copied from interface: ValidationEventLocator
Return a reference to the DOM Node if available

Specified by:
getNode in interface ValidationEventLocator
Returns:
a reference to the DOM Node or null if unavailable
See Also:
ValidationEventLocator.getNode()


"
ValidationEventLocatorImpl,getObject(),Object,Return a reference to the object in the Java content tree if available,"

getObject
public Object getObject()
Description copied from interface: ValidationEventLocator
Return a reference to the object in the Java content tree if available

Specified by:
getObject in interface ValidationEventLocator
Returns:
a reference to the object in the Java content tree or null if
         unavailable
See Also:
ValidationEventLocator.getObject()


"
ValidationEventLocatorImpl,getOffset(),int,Return the byte offset if available,"

getOffset
public int getOffset()
Description copied from interface: ValidationEventLocator
Return the byte offset if available

Specified by:
getOffset in interface ValidationEventLocator
Returns:
the byte offset into the input source or -1 if unavailable
See Also:
ValidationEventLocator.getOffset()


"
ValidationEventLocatorImpl,getURL(),URL,Return the name of the XML source as a URL if available,"

getURL
public URL getURL()
Description copied from interface: ValidationEventLocator
Return the name of the XML source as a URL if available

Specified by:
getURL in interface ValidationEventLocator
Returns:
the name of the XML source as a URL or null if unavailable
See Also:
ValidationEventLocator.getURL()


"
ValidationEventLocatorImpl,setColumnNumber(int _columnNumber),void,Set the columnNumber field on this event locator.,"

setColumnNumber
public void setColumnNumber(int _columnNumber)
Set the columnNumber field on this event locator.

Parameters:
_columnNumber - the column number


"
ValidationEventLocatorImpl,setLineNumber(int _lineNumber),void,Set the lineNumber field on this event locator.,"

setLineNumber
public void setLineNumber(int _lineNumber)
Set the lineNumber field on this event locator.

Parameters:
_lineNumber - the line number


"
ValidationEventLocatorImpl,setNode(Node _node),void,Set the Node field on this event locator.,"

setNode
public void setNode(Node _node)
Set the Node field on this event locator.  Null values are allowed.

Parameters:
_node - the Node


"
ValidationEventLocatorImpl,setObject(Object _object),void,Set the Object field on this event locator.,"

setObject
public void setObject(Object _object)
Set the Object field on this event locator.  Null values are allowed.

Parameters:
_object - the java content object


"
ValidationEventLocatorImpl,setOffset(int _offset),void,Set the offset field on this event locator.,"

setOffset
public void setOffset(int _offset)
Set the offset field on this event locator.

Parameters:
_offset - the offset


"
ValidationEventLocatorImpl,setURL(URL _url),void,Set the URL field on this event locator.,"

setURL
public void setURL(URL _url)
Set the URL field on this event locator.  Null values are allowed.

Parameters:
_url - the url


"
ValidationEventLocatorImpl,toString(),String,Returns a string representation of this object in a format helpful to debugging.,"

toString
public String toString()
Returns a string representation of this object in a format
 helpful to debugging.

Overrides:
toString in class Object
Returns:
a string representation of the object.
See Also:
Object.equals(Object)


"
