ClassName,Method,Return Type,Description,Full Description
AbstractExecutorService,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete.","

invokeAll
public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
                              throws InterruptedException
Description copied from interface: ExecutorService
Executes the given tasks, returning a list of Futures holding
 their status and results when all complete.
 Future.isDone() is true for each
 element of the returned list.
 Note that a completed task could have
 terminated either normally or by throwing an exception.
 The results of this method are undefined if the given
 collection is modified while this operation is in progress.

Specified by:
invokeAll in interface ExecutorService
Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
Returns:
a list of Futures representing the tasks, in the same
         sequential order as produced by the iterator for the
         given task list, each of which has completed
Throws:
InterruptedException - if interrupted while waiting, in
         which case unfinished tasks are cancelled


"
AbstractExecutorService,"invokeAll(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.","

invokeAll
public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks,
                                     long timeout,
                                     TimeUnit unit)
                              throws InterruptedException
Description copied from interface: ExecutorService
Executes the given tasks, returning a list of Futures holding
 their status and results
 when all complete or the timeout expires, whichever happens first.
 Future.isDone() is true for each
 element of the returned list.
 Upon return, tasks that have not completed are cancelled.
 Note that a completed task could have
 terminated either normally or by throwing an exception.
 The results of this method are undefined if the given
 collection is modified while this operation is in progress.

Specified by:
invokeAll in interface ExecutorService
Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
a list of Futures representing the tasks, in the same
         sequential order as produced by the iterator for the
         given task list. If the operation did not time out,
         each task will have completed. If it did time out, some
         of these tasks will not have completed.
Throws:
InterruptedException - if interrupted while waiting, in
         which case unfinished tasks are cancelled


"
AbstractExecutorService,invokeAny(Collection<? extends Callable<T>> tasks),<T> T,"Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do.","

invokeAny
public <T> T invokeAny(Collection<? extends Callable<T>> tasks)
                throws InterruptedException,
                       ExecutionException
Description copied from interface: ExecutorService
Executes the given tasks, returning the result
 of one that has completed successfully (i.e., without throwing
 an exception), if any do. Upon normal or exceptional return,
 tasks that have not completed are cancelled.
 The results of this method are undefined if the given
 collection is modified while this operation is in progress.

Specified by:
invokeAny in interface ExecutorService
Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
Returns:
the result returned by one of the tasks
Throws:
InterruptedException - if interrupted while waiting
ExecutionException - if no task successfully completes


"
AbstractExecutorService,"invokeAny(Collection<? extends Callable<T>> tasks, long timeout, TimeUnit unit)",<T> T,"Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses.","

invokeAny
public <T> T invokeAny(Collection<? extends Callable<T>> tasks,
                       long timeout,
                       TimeUnit unit)
                throws InterruptedException,
                       ExecutionException,
                       TimeoutException
Description copied from interface: ExecutorService
Executes the given tasks, returning the result
 of one that has completed successfully (i.e., without throwing
 an exception), if any do before the given timeout elapses.
 Upon normal or exceptional return, tasks that have not
 completed are cancelled.
 The results of this method are undefined if the given
 collection is modified while this operation is in progress.

Specified by:
invokeAny in interface ExecutorService
Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the result returned by one of the tasks
Throws:
InterruptedException - if interrupted while waiting
ExecutionException - if no task successfully completes
TimeoutException - if the given timeout elapses before
         any task successfully completes


"
AbstractExecutorService,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given callable task.,"

newTaskFor
protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
Returns a RunnableFuture for the given callable task.

Type Parameters:
T - the type of the callable's result
Parameters:
callable - the callable task being wrapped
Returns:
a RunnableFuture which, when run, will call the
 underlying callable and which, as a Future, will yield
 the callable's result as its result and provide for
 cancellation of the underlying task
Since:
1.6


"
AbstractExecutorService,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given runnable and default value.,"

newTaskFor
protected <T> RunnableFuture<T> newTaskFor(Runnable runnable,
                                           T value)
Returns a RunnableFuture for the given runnable and default
 value.

Type Parameters:
T - the type of the given value
Parameters:
runnable - the runnable task being wrapped
value - the default value for the returned future
Returns:
a RunnableFuture which, when run, will run the
 underlying runnable and which, as a Future, will yield
 the given value as its result and provide for cancellation of
 the underlying task
Since:
1.6


"
AbstractExecutorService,submit(Callable<T> task),<T> Future<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.,"

submit
public <T> Future<T> submit(Callable<T> task)
Description copied from interface: ExecutorService
Submits a value-returning task for execution and returns a
 Future representing the pending results of the task. The
 Future's get method will return the task's result upon
 successful completion.

 
 If you would like to immediately block waiting
 for a task, you can use constructions of the form
 result = exec.submit(aCallable).get();
Note: The Executors class includes a set of methods
 that can convert some other common closure-like objects,
 for example, PrivilegedAction to
 Callable form so they can be submitted.

Specified by:
submit in interface ExecutorService
Type Parameters:
T - the type of the task's result
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
AbstractExecutorService,submit(Runnable task),Future<?>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public Future<?> submit(Runnable task)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return null upon successful completion.

Specified by:
submit in interface ExecutorService
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
AbstractExecutorService,"submit(Runnable task, T result)",<T> Future<T>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public <T> Future<T> submit(Runnable task,
                            T result)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return the given result upon successful completion.

Specified by:
submit in interface ExecutorService
Type Parameters:
T - the type of the result
Parameters:
task - the task to submit
result - the result to return
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
ArrayBlockingQueue,add(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full.","

add
public boolean add(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and throwing an
 IllegalStateException if this queue is full.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalStateException - if this queue is full
NullPointerException - if the specified element is null


"
ArrayBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.,"

clear
public void clear()
Atomically removes all of the elements from this queue.
 The queue will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractQueue<E>


"
ArrayBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingQueue<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
ArrayBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
ArrayBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
ArrayBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this queue in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this queue in proper sequence


"
ArrayBlockingQueue,offer(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full.","

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.  This method is generally preferable to method add(E),
 which can fail to insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
ArrayBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.","

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
              throws InterruptedException
Inserts the specified element at the tail of this queue, waiting
 up to the specified wait time for space to become available if
 the queue is full.

Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before space is available
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
ArrayBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
ArrayBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
ArrayBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.

Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
ArrayBlockingQueue,put(E e),void,"Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.","

put
public void put(E e)
         throws InterruptedException
Inserts the specified element at the tail of this queue, waiting
 for space to become available if the queue is full.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
ArrayBlockingQueue,remainingCapacity(),int,Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.,"

remainingCapacity
public int remainingCapacity()
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this queue
 less the current size of this queue.

 Note that you cannot always tell if an attempt to insert
 an element will succeed by inspecting remainingCapacity
 because it may be the case that another thread is about to
 insert or remove an element.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
the remaining capacity


"
ArrayBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.
 Returns true if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

 Removal of interior elements in circular array based queues
 is an intrinsically slow and disruptive operation, so should
 be undertaken only in exceptional circumstances, ideally
 only when the queue is known not to be accessible by other
 threads.

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
ArrayBlockingQueue,size(),int,Returns the number of elements in this queue.,"

size
public int size()
Returns the number of elements in this queue.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
ArrayBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this queue.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this queue
Since:
1.8


"
ArrayBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
ArrayBlockingQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence.","

toArray
public Object[] toArray()
Returns an array containing all of the elements in this queue, in
 proper sequence.

 The returned array will be ""safe"" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this queue


"
ArrayBlockingQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array.","

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this queue
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
NullPointerException - if the specified array is null


"
ArrayBlockingQueue,toString(),String,Returns a string representation of this collection.,"

toString
public String toString()
Description copied from class: AbstractCollection
Returns a string representation of this collection.  The string
 representation consists of a list of the collection's elements in the
 order they are returned by its iterator, enclosed in square brackets
 (""[]"").  Adjacent elements are separated by the characters
 "", "" (comma and space).  Elements are converted to strings as
 by String.valueOf(Object).

Overrides:
toString in class AbstractCollection<E>
Returns:
a string representation of this collection


"
CompletableFuture,"acceptEither(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action.","

acceptEither
public CompletableFuture<Void> acceptEither(CompletionStage<? extends T> other,
                                            Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed with the
 corresponding result as argument to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
acceptEither in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action.","

acceptEitherAsync
public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other,
                                                 Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed using this
 stage's default asynchronous execution facility, with the
 corresponding result as argument to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
acceptEitherAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"acceptEitherAsync(CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function.","

acceptEitherAsync
public CompletableFuture<Void> acceptEitherAsync(CompletionStage<? extends T> other,
                                                 Consumer<? super T> action,
                                                 Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed using the
 supplied executor, with the corresponding result as argument to
 the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
acceptEitherAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,allOf(CompletableFuture<?>... cfs),static CompletableFuture<Void>,Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete.,"

allOf
public static CompletableFuture<Void> allOf(CompletableFuture<?>... cfs)
Returns a new CompletableFuture that is completed when all of
 the given CompletableFutures complete.  If any of the given
 CompletableFutures complete exceptionally, then the returned
 CompletableFuture also does so, with a CompletionException
 holding this exception as its cause.  Otherwise, the results,
 if any, of the given CompletableFutures are not reflected in
 the returned CompletableFuture, but may be obtained by
 inspecting them individually. If no CompletableFutures are
 provided, returns a CompletableFuture completed with the value
 null.

 Among the applications of this method is to await completion
 of a set of independent CompletableFutures before continuing a
 program, as in: CompletableFuture.allOf(c1, c2,
 c3).join();.

Parameters:
cfs - the CompletableFutures
Returns:
a new CompletableFuture that is completed when all of the
 given CompletableFutures complete
Throws:
NullPointerException - if the array or any of its elements are
 null


"
CompletableFuture,anyOf(CompletableFuture<?>... cfs),static CompletableFuture<Object>,"Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result.","

anyOf
public static CompletableFuture<Object> anyOf(CompletableFuture<?>... cfs)
Returns a new CompletableFuture that is completed when any of
 the given CompletableFutures complete, with the same result.
 Otherwise, if it completed exceptionally, the returned
 CompletableFuture also does so, with a CompletionException
 holding this exception as its cause.  If no CompletableFutures
 are provided, returns an incomplete CompletableFuture.

Parameters:
cfs - the CompletableFutures
Returns:
a new CompletableFuture that is completed with the
 result or exception of any of the given CompletableFutures when
 one completes
Throws:
NullPointerException - if the array or any of its elements are
 null


"
CompletableFuture,"applyToEither(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function.","

applyToEither
public <U> CompletableFuture<U> applyToEither(CompletionStage<? extends T> other,
                                              Function<? super T,U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed with the
 corresponding result as argument to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
applyToEither in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function.","

applyToEitherAsync
public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other,
                                                   Function<? super T,U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed using this
 stage's default asynchronous execution facility, with the
 corresponding result as argument to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
applyToEitherAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"applyToEitherAsync(CompletionStage<? extends T> other, Function<? super T,U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function.","

applyToEitherAsync
public <U> CompletableFuture<U> applyToEitherAsync(CompletionStage<? extends T> other,
                                                   Function<? super T,U> fn,
                                                   Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, is executed using the
 supplied executor, with the corresponding result as argument to
 the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
applyToEitherAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,cancel(boolean mayInterruptIfRunning),boolean,"If not already completed, completes this CompletableFuture with a CancellationException.","

cancel
public boolean cancel(boolean mayInterruptIfRunning)
If not already completed, completes this CompletableFuture with
 a CancellationException. Dependent CompletableFutures
 that have not already completed will also complete
 exceptionally, with a CompletionException caused by
 this CancellationException.

Specified by:
cancel in interface Future<T>
Parameters:
mayInterruptIfRunning - this value has no effect in this
 implementation because interrupts are not used to control
 processing.
Returns:
true if this task is now cancelled


"
CompletableFuture,complete(T value),boolean,"If not already completed, sets the value returned by get() and related methods to the given value.","

complete
public boolean complete(T value)
If not already completed, sets the value returned by get() and related methods to the given value.

Parameters:
value - the result value
Returns:
true if this invocation caused this CompletableFuture
 to transition to a completed state, else false


"
CompletableFuture,completedFuture(U value),static <U> CompletableFuture<U>,Returns a new CompletableFuture that is already completed with the given value.,"

completedFuture
public static <U> CompletableFuture<U> completedFuture(U value)
Returns a new CompletableFuture that is already completed with
 the given value.

Type Parameters:
U - the type of the value
Parameters:
value - the value
Returns:
the completed CompletableFuture


"
CompletableFuture,completeExceptionally(Throwable ex),boolean,"If not already completed, causes invocations of get() and related methods to throw the given exception.","

completeExceptionally
public boolean completeExceptionally(Throwable ex)
If not already completed, causes invocations of get()
 and related methods to throw the given exception.

Parameters:
ex - the exception
Returns:
true if this invocation caused this CompletableFuture
 to transition to a completed state, else false


"
CompletableFuture,"exceptionally(Function<Throwable,? extends T> fn)",CompletableFuture<T>,"Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value.","

exceptionally
public CompletableFuture<T> exceptionally(Function<Throwable,? extends T> fn)
Returns a new CompletableFuture that is completed when this
 CompletableFuture completes, with the result of the given
 function of the exception triggering this CompletableFuture's
 completion when it completes exceptionally; otherwise, if this
 CompletableFuture completes normally, then the returned
 CompletableFuture also completes normally with the same value.
 Note: More flexible versions of this functionality are
 available using methods whenComplete and handle.

Specified by:
exceptionally in interface CompletionStage<T>
Parameters:
fn - the function to use to compute the value of the
 returned CompletableFuture if this CompletableFuture completed
 exceptionally
Returns:
the new CompletableFuture


"
CompletableFuture,get(),T,"Waits if necessary for this future to complete, and then returns its result.","

get
public T get()
      throws InterruptedException,
             ExecutionException
Waits if necessary for this future to complete, and then
 returns its result.

Specified by:
get in interface Future<T>
Returns:
the result value
Throws:
CancellationException - if this future was cancelled
ExecutionException - if this future completed exceptionally
InterruptedException - if the current thread was interrupted
 while waiting


"
CompletableFuture,"get(long timeout, TimeUnit unit)",T,"Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.","

get
public T get(long timeout,
             TimeUnit unit)
      throws InterruptedException,
             ExecutionException,
             TimeoutException
Waits if necessary for at most the given time for this future
 to complete, and then returns its result, if available.

Specified by:
get in interface Future<T>
Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the result value
Throws:
CancellationException - if this future was cancelled
ExecutionException - if this future completed exceptionally
InterruptedException - if the current thread was interrupted
 while waiting
TimeoutException - if the wait timed out


"
CompletableFuture,getNow(T valueIfAbsent),T,"Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent.","

getNow
public T getNow(T valueIfAbsent)
Returns the result value (or throws any encountered exception)
 if completed, else returns the given valueIfAbsent.

Parameters:
valueIfAbsent - the value to return if not completed
Returns:
the result value, if completed, else the given valueIfAbsent
Throws:
CancellationException - if the computation was cancelled
CompletionException - if this future completed
 exceptionally or a completion computation threw an exception


"
CompletableFuture,getNumberOfDependents(),int,Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture.,"

getNumberOfDependents
public int getNumberOfDependents()
Returns the estimated number of CompletableFutures whose
 completions are awaiting completion of this CompletableFuture.
 This method is designed for use in monitoring system state, not
 for synchronization control.

Returns:
the number of dependent CompletableFutures


"
CompletableFuture,"handle(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function.","

handle
public <U> CompletableFuture<U> handle(BiFunction<? super T,Throwable,? extends U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 either normally or exceptionally, is executed with this stage's
 result and exception as arguments to the supplied function.

 When this stage is complete, the given function is invoked
 with the result (or null if none) and the exception (or
 null if none) of this stage as arguments, and the
 function's result is used to complete the returned stage.

Specified by:
handle in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function.","

handleAsync
public <U> CompletableFuture<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 either normally or exceptionally, is executed using this stage's
 default asynchronous execution facility, with this stage's
 result and exception as arguments to the supplied function.

 When this stage is complete, the given function is invoked
 with the result (or null if none) and the exception (or
 null if none) of this stage as arguments, and the
 function's result is used to complete the returned stage.

Specified by:
handleAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"handleAsync(BiFunction<? super T,Throwable,? extends U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function.","

handleAsync
public <U> CompletableFuture<U> handleAsync(BiFunction<? super T,Throwable,? extends U> fn,
                                            Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 either normally or exceptionally, is executed using the
 supplied executor, with this stage's result and exception as
 arguments to the supplied function.

 When this stage is complete, the given function is invoked
 with the result (or null if none) and the exception (or
 null if none) of this stage as arguments, and the
 function's result is used to complete the returned stage.

Specified by:
handleAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,isCancelled(),boolean,Returns true if this CompletableFuture was cancelled before it completed normally.,"

isCancelled
public boolean isCancelled()
Returns true if this CompletableFuture was cancelled
 before it completed normally.

Specified by:
isCancelled in interface Future<T>
Returns:
true if this CompletableFuture was cancelled
 before it completed normally


"
CompletableFuture,isCompletedExceptionally(),boolean,"Returns true if this CompletableFuture completed exceptionally, in any way.","

isCompletedExceptionally
public boolean isCompletedExceptionally()
Returns true if this CompletableFuture completed
 exceptionally, in any way. Possible causes include
 cancellation, explicit invocation of completeExceptionally, and abrupt termination of a
 CompletionStage action.

Returns:
true if this CompletableFuture completed
 exceptionally


"
CompletableFuture,isDone(),boolean,"Returns true if completed in any fashion: normally, exceptionally, or via cancellation.","

isDone
public boolean isDone()
Returns true if completed in any fashion: normally,
 exceptionally, or via cancellation.

Specified by:
isDone in interface Future<T>
Returns:
true if completed


"
CompletableFuture,join(),T,"Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally.","

join
public T join()
Returns the result value when complete, or throws an
 (unchecked) exception if completed exceptionally. To better
 conform with the use of common functional forms, if a
 computation involved in the completion of this
 CompletableFuture threw an exception, this method throws an
 (unchecked) CompletionException with the underlying
 exception as its cause.

Returns:
the result value
Throws:
CancellationException - if the computation was cancelled
CompletionException - if this future completed
 exceptionally or a completion computation threw an exception


"
CompletableFuture,obtrudeException(Throwable ex),void,"Forcibly causes subsequent invocations of method get() and related methods to throw the given exception, whether or not already completed.","

obtrudeException
public void obtrudeException(Throwable ex)
Forcibly causes subsequent invocations of method get()
 and related methods to throw the given exception, whether or
 not already completed. This method is designed for use only in
 error recovery actions, and even in such situations may result
 in ongoing dependent completions using established versus
 overwritten outcomes.

Parameters:
ex - the exception
Throws:
NullPointerException - if the exception is null


"
CompletableFuture,obtrudeValue(T value),void,"Forcibly sets or resets the value subsequently returned by method get() and related methods, whether or not already completed.","

obtrudeValue
public void obtrudeValue(T value)
Forcibly sets or resets the value subsequently returned by
 method get() and related methods, whether or not
 already completed. This method is designed for use only in
 error recovery actions, and even in such situations may result
 in ongoing dependent completions using established versus
 overwritten outcomes.

Parameters:
value - the completion value


"
CompletableFuture,"runAfterBoth(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action.","

runAfterBoth
public CompletableFuture<Void> runAfterBoth(CompletionStage<?> other,
                                            Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, executes the given action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterBoth in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility.","

runAfterBothAsync
public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other,
                                                 Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, executes the given action using
 this stage's default asynchronous execution facility.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterBothAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"runAfterBothAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, executes the given action using the supplied executor.","

runAfterBothAsync
public CompletableFuture<Void> runAfterBothAsync(CompletionStage<?> other,
                                                 Runnable action,
                                                 Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, executes the given action using
 the supplied executor.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterBothAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,"runAfterEither(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action.","

runAfterEither
public CompletableFuture<Void> runAfterEither(CompletionStage<?> other,
                                              Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterEither in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility.","

runAfterEitherAsync
public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other,
                                                   Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action
 using this stage's default asynchronous execution facility.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterEitherAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"runAfterEitherAsync(CompletionStage<?> other, Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor.","

runAfterEitherAsync
public CompletableFuture<Void> runAfterEitherAsync(CompletionStage<?> other,
                                                   Runnable action,
                                                   Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when either this or the
 other given stage complete normally, executes the given action
 using the supplied executor.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
runAfterEitherAsync in interface CompletionStage<T>
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,runAsync(Runnable runnable),static CompletableFuture<Void>,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after it runs the given action.,"

runAsync
public static CompletableFuture<Void> runAsync(Runnable runnable)
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the ForkJoinPool.commonPool() after
 it runs the given action.

Parameters:
runnable - the action to run before completing the
 returned CompletableFuture
Returns:
the new CompletableFuture


"
CompletableFuture,"runAsync(Runnable runnable, Executor executor)",static CompletableFuture<Void>,Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.,"

runAsync
public static CompletableFuture<Void> runAsync(Runnable runnable,
                                               Executor executor)
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the given executor after it runs the given
 action.

Parameters:
runnable - the action to run before completing the
 returned CompletableFuture
executor - the executor to use for asynchronous execution
Returns:
the new CompletableFuture


"
CompletableFuture,supplyAsync(Supplier<U> supplier),static <U> CompletableFuture<U>,Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() with the value obtained by calling the given Supplier.,"

supplyAsync
public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the ForkJoinPool.commonPool() with
 the value obtained by calling the given Supplier.

Type Parameters:
U - the function's return type
Parameters:
supplier - a function returning the value to be used
 to complete the returned CompletableFuture
Returns:
the new CompletableFuture


"
CompletableFuture,"supplyAsync(Supplier<U> supplier, Executor executor)",static <U> CompletableFuture<U>,Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.,"

supplyAsync
public static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier,
                                                   Executor executor)
Returns a new CompletableFuture that is asynchronously completed
 by a task running in the given executor with the value obtained
 by calling the given Supplier.

Type Parameters:
U - the function's return type
Parameters:
supplier - a function returning the value to be used
 to complete the returned CompletableFuture
executor - the executor to use for asynchronous execution
Returns:
the new CompletableFuture


"
CompletableFuture,thenAccept(Consumer<? super T> action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action.","

thenAccept
public CompletableFuture<Void> thenAccept(Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAccept in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,thenAcceptAsync(Consumer<? super T> action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action.","

thenAcceptAsync
public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using this stage's default asynchronous
 execution facility, with this stage's result as the argument to
 the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAcceptAsync in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenAcceptAsync(Consumer<? super T> action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action.","

thenAcceptAsync
public CompletableFuture<Void> thenAcceptAsync(Consumer<? super T> action,
                                               Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using the supplied Executor, with this
 stage's result as the argument to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAcceptAsync in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,"thenAcceptBoth(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action.","

thenAcceptBoth
public <U> CompletableFuture<Void> thenAcceptBoth(CompletionStage<? extends U> other,
                                                  BiConsumer<? super T,? super U> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed with the two
 results as arguments to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAcceptBoth in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action.","

thenAcceptBothAsync
public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
                                                       BiConsumer<? super T,? super U> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, is executed using this stage's
 default asynchronous execution facility, with the two results
 as arguments to the supplied action.

Specified by:
thenAcceptBothAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenAcceptBothAsync(CompletionStage<? extends U> other, BiConsumer<? super T,? super U> action, Executor executor)",<U> CompletableFuture<Void>,"Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function.","

thenAcceptBothAsync
public <U> CompletableFuture<Void> thenAcceptBothAsync(CompletionStage<? extends U> other,
                                                       BiConsumer<? super T,? super U> action,
                                                       Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, is executed using the supplied
 executor, with the two results as arguments to the supplied
 function.

Specified by:
thenAcceptBothAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
Parameters:
other - the other CompletionStage
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,"thenApply(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function.","

thenApply
public <U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenApply in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function.","

thenApplyAsync
public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using this stage's default asynchronous
 execution facility, with this stage's result as the argument to
 the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenApplyAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenApplyAsync(Function<? super T,? extends U> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function.","

thenApplyAsync
public <U> CompletableFuture<U> thenApplyAsync(Function<? super T,? extends U> fn,
                                               Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using the supplied Executor, with this
 stage's result as the argument to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenApplyAsync in interface CompletionStage<T>
Type Parameters:
U - the function's return type
Parameters:
fn - the function to use to compute the value of
 the returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,"thenCombine(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function.","

thenCombine
public <U,V> CompletableFuture<V> thenCombine(CompletionStage<? extends U> other,
                                              BiFunction<? super T,? super U,? extends V> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage both complete normally, is executed with the two
 results as arguments to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenCombine in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
V - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function.","

thenCombineAsync
public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other,
                                                   BiFunction<? super T,? super U,? extends V> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, is executed using this stage's
 default asynchronous execution facility, with the two results
 as arguments to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenCombineAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
V - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenCombineAsync(CompletionStage<? extends U> other, BiFunction<? super T,? super U,? extends V> fn, Executor executor)","<U,V> CompletableFuture<V>","Returns a new CompletionStage that, when this and the other given stage complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function.","

thenCombineAsync
public <U,V> CompletableFuture<V> thenCombineAsync(CompletionStage<? extends U> other,
                                                   BiFunction<? super T,? super U,? extends V> fn,
                                                   Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this and the other
 given stage complete normally, is executed using the supplied
 executor, with the two results as arguments to the supplied
 function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenCombineAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the other CompletionStage's result
V - the function's return type
Parameters:
other - the other CompletionStage
fn - the function to use to compute the value of
 the returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,"thenCompose(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed with this stage as the argument to the supplied function.","

thenCompose
public <U> CompletableFuture<U> thenCompose(Function<? super T,? extends CompletionStage<U>> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage as the argument
 to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenCompose in interface CompletionStage<T>
Type Parameters:
U - the type of the returned CompletionStage's result
Parameters:
fn - the function returning a new CompletionStage
Returns:
the CompletionStage


"
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage as the argument to the supplied function.","

thenComposeAsync
public <U> CompletableFuture<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using this stage's default asynchronous
 execution facility, with this stage as the argument to the
 supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenComposeAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the returned CompletionStage's result
Parameters:
fn - the function returning a new CompletionStage
Returns:
the CompletionStage


"
CompletableFuture,"thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn, Executor executor)",<U> CompletableFuture<U>,"Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function.","

thenComposeAsync
public <U> CompletableFuture<U> thenComposeAsync(Function<? super T,? extends CompletionStage<U>> fn,
                                                 Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed using the supplied Executor, with this
 stage's result as the argument to the supplied function.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenComposeAsync in interface CompletionStage<T>
Type Parameters:
U - the type of the returned CompletionStage's result
Parameters:
fn - the function returning a new CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the CompletionStage


"
CompletableFuture,thenRun(Runnable action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action.","

thenRun
public CompletableFuture<Void> thenRun(Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenRun in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,thenRunAsync(Runnable action),CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility.","

thenRunAsync
public CompletableFuture<Void> thenRunAsync(Runnable action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action using this stage's default
 asynchronous execution facility.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenRunAsync in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
CompletableFuture,"thenRunAsync(Runnable action, Executor executor)",CompletableFuture<Void>,"Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor.","

thenRunAsync
public CompletableFuture<Void> thenRunAsync(Runnable action,
                                            Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, executes the given action using the supplied Executor.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenRunAsync in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
CompletableFuture,toCompletableFuture(),CompletableFuture<T>,Returns this CompletableFuture.,"

toCompletableFuture
public CompletableFuture<T> toCompletableFuture()
Returns this CompletableFuture.

Specified by:
toCompletableFuture in interface CompletionStage<T>
Returns:
this CompletableFuture


"
CompletableFuture,toString(),String,"Returns a string identifying this CompletableFuture, as well as its completion state.","

toString
public String toString()
Returns a string identifying this CompletableFuture, as well as
 its completion state.  The state, in brackets, contains the
 String ""Completed Normally"" or the String ""Completed Exceptionally"", or the String ""Not
 completed"" followed by the number of CompletableFutures
 dependent upon its completion, if any.

Overrides:
toString in class Object
Returns:
a string identifying this CompletableFuture, as well as its state


"
CompletableFuture,"whenComplete(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes.","

whenComplete
public CompletableFuture<T> whenComplete(BiConsumer<? super T,? super Throwable> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action when this stage completes.

 When this stage is complete, the given action is invoked with the
 result (or null if none) and the exception (or null
 if none) of this stage as arguments.  The returned stage is completed
 when the action returns.  If the supplied action itself encounters an
 exception, then the returned stage exceptionally completes with this
 exception unless this stage also completed exceptionally.

Specified by:
whenComplete in interface CompletionStage<T>
Parameters:
action - the action to perform
Returns:
the new CompletionStage


"
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes.","

whenCompleteAsync
public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using this stage's
 default asynchronous execution facility when this stage completes.

 When this stage is complete, the given action is invoked with the
 result (or null if none) and the exception (or null
 if none) of this stage as arguments.  The returned stage is completed
 when the action returns.  If the supplied action itself encounters an
 exception, then the returned stage exceptionally completes with this
 exception unless this stage also completed exceptionally.

Specified by:
whenCompleteAsync in interface CompletionStage<T>
Parameters:
action - the action to perform
Returns:
the new CompletionStage


"
CompletableFuture,"whenCompleteAsync(BiConsumer<? super T,? super Throwable> action, Executor executor)",CompletableFuture<T>,"Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes.","

whenCompleteAsync
public CompletableFuture<T> whenCompleteAsync(BiConsumer<? super T,? super Throwable> action,
                                              Executor executor)
Description copied from interface: CompletionStage
Returns a new CompletionStage with the same result or exception as
 this stage, that executes the given action using the supplied
 Executor when this stage completes.

 When this stage is complete, the given action is invoked with the
 result (or null if none) and the exception (or null
 if none) of this stage as arguments.  The returned stage is completed
 when the action returns.  If the supplied action itself encounters an
 exception, then the returned stage exceptionally completes with this
 exception unless this stage also completed exceptionally.

Specified by:
whenCompleteAsync in interface CompletionStage<T>
Parameters:
action - the action to perform
executor - the executor to use for asynchronous execution
Returns:
the new CompletionStage


"
ConcurrentHashMap,clear(),void,Removes all of the mappings from this map.,"

clear
public void clear()
Removes all of the mappings from this map.

Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>


"
ConcurrentHashMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).,"

compute
public V compute(K key,
                 BiFunction<? super K,? super V,? extends V> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or null if there is no current
 mapping). The entire method invocation is performed atomically.
 Some attempted update operations on this map by other threads
 may be blocked while computation is in progress, so the
 computation should be short and simple, and must not attempt to
 update any other mappings of this Map.

Specified by:
compute in interface ConcurrentMap<K,V>
Specified by:
compute in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key or remappingFunction
         is null
IllegalStateException - if the computation detectably
         attempts a recursive update to this map that would
         otherwise never complete
RuntimeException - or Error if the remappingFunction does so,
         in which case the mapping is unchanged


"
ConcurrentHashMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.","

computeIfAbsent
public V computeIfAbsent(K key,
                         Function<? super K,? extends V> mappingFunction)
If the specified key is not already associated with a value,
 attempts to compute its value using the given mapping function
 and enters it into this map unless null.  The entire
 method invocation is performed atomically, so the function is
 applied at most once per key.  Some attempted update operations
 on this map by other threads may be blocked while computation
 is in progress, so the computation should be short and simple,
 and must not attempt to update any other mappings of this map.

Specified by:
computeIfAbsent in interface ConcurrentMap<K,V>
Specified by:
computeIfAbsent in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
mappingFunction - the function to compute a value
Returns:
the current (existing or computed) value associated with
         the specified key, or null if the computed value is null
Throws:
NullPointerException - if the specified key or mappingFunction
         is null
IllegalStateException - if the computation detectably
         attempts a recursive update to this map that would
         otherwise never complete
RuntimeException - or Error if the mappingFunction does so,
         in which case the mapping is left unestablished


"
ConcurrentHashMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.","

computeIfPresent
public V computeIfPresent(K key,
                          BiFunction<? super K,? super V,? extends V> remappingFunction)
If the value for the specified key is present, attempts to
 compute a new mapping given the key and its current mapped
 value.  The entire method invocation is performed atomically.
 Some attempted update operations on this map by other threads
 may be blocked while computation is in progress, so the
 computation should be short and simple, and must not attempt to
 update any other mappings of this map.

Specified by:
computeIfPresent in interface ConcurrentMap<K,V>
Specified by:
computeIfPresent in interface Map<K,V>
Parameters:
key - key with which a value may be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key or remappingFunction
         is null
IllegalStateException - if the computation detectably
         attempts a recursive update to this map that would
         otherwise never complete
RuntimeException - or Error if the remappingFunction does so,
         in which case the mapping is unchanged


"
ConcurrentHashMap,contains(Object value),boolean,Legacy method testing if some key maps into the specified value in this table.,"

contains
public boolean contains(Object value)
Legacy method testing if some key maps into the specified value
 in this table.  This method is identical in functionality to
 containsValue(Object), and exists solely to ensure
 full compatibility with class Hashtable,
 which supported this method prior to introduction of the
 Java Collections framework.

Parameters:
value - a value to search for
Returns:
true if and only if some key maps to the
         value argument in this table as
         determined by the equals method;
         false otherwise
Throws:
NullPointerException - if the specified value is null


"
ConcurrentHashMap,containsKey(Object key),boolean,Tests if the specified object is a key in this table.,"

containsKey
public boolean containsKey(Object key)
Tests if the specified object is a key in this table.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - possible key
Returns:
true if and only if the specified object
         is a key in this table, as determined by the
         equals method; false otherwise
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value. Note: This method may require a full traversal
 of the map, and is much slower than method containsKey.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if this map maps one or more keys to the
         specified value
Throws:
NullPointerException - if the specified value is null


"
ConcurrentHashMap,elements(),Enumeration<V>,Returns an enumeration of the values in this table.,"

elements
public Enumeration<V> elements()
Returns an enumeration of the values in this table.

Returns:
an enumeration of the values in this table
See Also:
values()


"
ConcurrentHashMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.,"

entrySet
public Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.

 The view's iterators and spliterators are
 weakly consistent.

 The view's spliterator reports Spliterator.CONCURRENT,
 Spliterator.DISTINCT, and Spliterator.NONNULL.

Specified by:
entrySet in interface Map<K,V>
Specified by:
entrySet in class AbstractMap<K,V>
Returns:
the set view


"
ConcurrentHashMap,equals(Object o),boolean,Compares the specified object with this map for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this map for equality.
 Returns true if the given object is a map with the same
 mappings as this map.  This operation may return misleading
 results if either map is concurrently modified during execution
 of this method.

Specified by:
equals in interface Map<K,V>
Overrides:
equals in class AbstractMap<K,V>
Parameters:
o - object to be compared for equality with this map
Returns:
true if the specified object is equal to this map
See Also:
Object.hashCode(), 
HashMap


"
ConcurrentHashMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.,"

forEach
public void forEach(BiConsumer<? super K,? super V> action)
Description copied from interface: ConcurrentMap
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.   Unless
 otherwise specified by the implementing class, actions are performed in
 the order of entry set iteration (if an iteration order is specified.)
 Exceptions thrown by the action are relayed to the caller.

Specified by:
forEach in interface ConcurrentMap<K,V>
Specified by:
forEach in interface Map<K,V>
Parameters:
action - The action to be performed for each entry


"
ConcurrentHashMap,"forEach(long parallelismThreshold, BiConsumer<? super K,? super V> action)",void,"Performs the given action for each (key, value).","

forEach
public void forEach(long parallelismThreshold,
                    BiConsumer<? super K,? super V> action)
Performs the given action for each (key, value).

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEach(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, Consumer<? super U> action)",<U> void,"Performs the given action for each non-null transformation of each (key, value).","

forEach
public <U> void forEach(long parallelismThreshold,
                        BiFunction<? super K,? super V,? extends U> transformer,
                        Consumer<? super U> action)
Performs the given action for each non-null transformation
 of each (key, value).

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case the action is not applied)
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Consumer<? super Map.Entry<K,V>> action)",void,Performs the given action for each entry.,"

forEachEntry
public void forEachEntry(long parallelismThreshold,
                         Consumer<? super Map.Entry<K,V>> action)
Performs the given action for each entry.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachEntry(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each entry.,"

forEachEntry
public <U> void forEachEntry(long parallelismThreshold,
                             Function<Map.Entry<K,V>,? extends U> transformer,
                             Consumer<? super U> action)
Performs the given action for each non-null transformation
 of each entry.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case the action is not applied)
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Consumer<? super K> action)",void,Performs the given action for each key.,"

forEachKey
public void forEachKey(long parallelismThreshold,
                       Consumer<? super K> action)
Performs the given action for each key.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachKey(long parallelismThreshold, Function<? super K,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each key.,"

forEachKey
public <U> void forEachKey(long parallelismThreshold,
                           Function<? super K,? extends U> transformer,
                           Consumer<? super U> action)
Performs the given action for each non-null transformation
 of each key.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case the action is not applied)
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Consumer<? super V> action)",void,Performs the given action for each value.,"

forEachValue
public void forEachValue(long parallelismThreshold,
                         Consumer<? super V> action)
Performs the given action for each value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
action - the action
Since:
1.8


"
ConcurrentHashMap,"forEachValue(long parallelismThreshold, Function<? super V,? extends U> transformer, Consumer<? super U> action)",<U> void,Performs the given action for each non-null transformation of each value.,"

forEachValue
public <U> void forEachValue(long parallelismThreshold,
                             Function<? super V,? extends U> transformer,
                             Consumer<? super U> action)
Performs the given action for each non-null transformation
 of each value.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case the action is not applied)
action - the action
Since:
1.8


"
ConcurrentHashMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that key.equals(k),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.","

getOrDefault
public V getOrDefault(Object key,
                      V defaultValue)
Returns the value to which the specified key is mapped, or the
 given default value if this map contains no mapping for the
 key.

Specified by:
getOrDefault in interface ConcurrentMap<K,V>
Specified by:
getOrDefault in interface Map<K,V>
Parameters:
key - the key whose associated value is to be returned
defaultValue - the value to return if this map contains
 no mapping for the given key
Returns:
the mapping for the key, if present; else the default value
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap,hashCode(),int,"Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().","

hashCode
public int hashCode()
Returns the hash code value for this Map, i.e.,
 the sum of, for each key-value pair in the map,
 key.hashCode() ^ value.hashCode().

Specified by:
hashCode in interface Map<K,V>
Overrides:
hashCode in class AbstractMap<K,V>
Returns:
the hash code value for this map
See Also:
Map.Entry.hashCode(), 
Object.equals(Object), 
Set.equals(Object)


"
ConcurrentHashMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.,"

isEmpty
public boolean isEmpty()
Returns true if this map contains no key-value mappings.

Specified by:
isEmpty in interface Map<K,V>
Overrides:
isEmpty in class AbstractMap<K,V>
Returns:
true if this map contains no key-value mappings


"
ConcurrentHashMap,keys(),Enumeration<K>,Returns an enumeration of the keys in this table.,"

keys
public Enumeration<K> keys()
Returns an enumeration of the keys in this table.

Returns:
an enumeration of the keys in this table
See Also:
keySet()


"
ConcurrentHashMap,keySet(),"ConcurrentHashMap.KeySetView<K,V>",Returns a Set view of the keys contained in this map.,"

keySet
public ConcurrentHashMap.KeySetView<K,V> keySet()
Returns a Set view of the keys contained in this map.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa. The set supports element
 removal, which removes the corresponding mapping from this map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or
 addAll operations.

 The view's iterators and spliterators are
 weakly consistent.

 The view's spliterator reports Spliterator.CONCURRENT,
 Spliterator.DISTINCT, and Spliterator.NONNULL.

Specified by:
keySet in interface Map<K,V>
Overrides:
keySet in class AbstractMap<K,V>
Returns:
the set view


"
ConcurrentHashMap,keySet(V mappedValue),"ConcurrentHashMap.KeySetView<K,V>","Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).","

keySet
public ConcurrentHashMap.KeySetView<K,V> keySet(V mappedValue)
Returns a Set view of the keys in this map, using the
 given common mapped value for any additions (i.e., Collection.add(E) and Collection.addAll(Collection)).
 This is of course only appropriate if it is acceptable to use
 the same value for all additions from this view.

Parameters:
mappedValue - the mapped value to use for any additions
Returns:
the set view
Throws:
NullPointerException - if the mappedValue is null


"
ConcurrentHashMap,mappingCount(),long,Returns the number of mappings.,"

mappingCount
public long mappingCount()
Returns the number of mappings. This method should be used
 instead of size() because a ConcurrentHashMap may
 contain more mappings than can be represented as an int. The
 value returned is an estimate; the actual count may differ if
 there are concurrent insertions or removals.

Returns:
the number of mappings
Since:
1.8


"
ConcurrentHashMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a (non-null) value, associates it with the given value.","

merge
public V merge(K key,
               V value,
               BiFunction<? super V,? super V,? extends V> remappingFunction)
If the specified key is not already associated with a
 (non-null) value, associates it with the given value.
 Otherwise, replaces the value with the results of the given
 remapping function, or removes if null. The entire
 method invocation is performed atomically.  Some attempted
 update operations on this map by other threads may be blocked
 while computation is in progress, so the computation should be
 short and simple, and must not attempt to update any other
 mappings of this Map.

Specified by:
merge in interface ConcurrentMap<K,V>
Specified by:
merge in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
value - the value to use if absent
remappingFunction - the function to recompute a value if present
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key or the
         remappingFunction is null
RuntimeException - or Error if the remappingFunction does so,
         in which case the mapping is unchanged


"
ConcurrentHashMap,newKeySet(),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>",Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.,"

newKeySet
public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet()
Creates a new Set backed by a ConcurrentHashMap
 from the given type to Boolean.TRUE.

Type Parameters:
K - the element type of the returned set
Returns:
the new set
Since:
1.8


"
ConcurrentHashMap,newKeySet(int initialCapacity),"static <K> ConcurrentHashMap.KeySetView<K,Boolean>",Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.,"

newKeySet
public static <K> ConcurrentHashMap.KeySetView<K,Boolean> newKeySet(int initialCapacity)
Creates a new Set backed by a ConcurrentHashMap
 from the given type to Boolean.TRUE.

Type Parameters:
K - the element type of the returned set
Parameters:
initialCapacity - The implementation performs internal
 sizing to accommodate this many elements.
Returns:
the new set
Throws:
IllegalArgumentException - if the initial capacity of
 elements is negative
Since:
1.8


"
ConcurrentHashMap,"put(K key, V value)",V,Maps the specified key to the specified value in this table.,"

put
public V put(K key,
             V value)
Maps the specified key to the specified value in this table.
 Neither the key nor the value can be null.

 The value can be retrieved by calling the get method
 with a key that is equal to the original key.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key or value is null


"
ConcurrentHashMap,"putAll(Map<? extends K,? extends V> m)",void,Copies all of the mappings from the specified map to this one.,"

putAll
public void putAll(Map<? extends K,? extends V> m)
Copies all of the mappings from the specified map to this one.
 These mappings replace any mappings that this map had for any of the
 keys currently in the specified map.

Specified by:
putAll in interface Map<K,V>
Overrides:
putAll in class AbstractMap<K,V>
Parameters:
m - mappings to be stored in this map


"
ConcurrentHashMap,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value, associate it with the given value.","

putIfAbsent
public V putIfAbsent(K key,
                     V value)
If the specified key is not already associated
 with a value, associate it with the given value.
 This is equivalent to
   
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 

 except that the action is performed atomically.

Specified by:
putIfAbsent in interface ConcurrentMap<K,V>
Specified by:
putIfAbsent in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
NullPointerException - if the specified key or value is null


"
ConcurrentHashMap,"reduce(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.","

reduce
public <U> U reduce(long parallelismThreshold,
                    BiFunction<? super K,? super V,? extends U> transformer,
                    BiFunction<? super U,? super U,? extends U> reducer)
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, or null if none.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case it is not combined)
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all (key, value) pairs
Since:
1.8


"
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)","Map.Entry<K,V>","Returns the result of accumulating all entries using the given reducer to combine values, or null if none.","

reduceEntries
public Map.Entry<K,V> reduceEntries(long parallelismThreshold,
                                    BiFunction<Map.Entry<K,V>,Map.Entry<K,V>,? extends Map.Entry<K,V>> reducer)
Returns the result of accumulating all entries using the
 given reducer to combine values, or null if none.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
reducer - a commutative associative combining function
Returns:
the result of accumulating all entries
Since:
1.8


"
ConcurrentHashMap,"reduceEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.","

reduceEntries
public <U> U reduceEntries(long parallelismThreshold,
                           Function<Map.Entry<K,V>,? extends U> transformer,
                           BiFunction<? super U,? super U,? extends U> reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 or null if none.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case it is not combined)
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all entries
Since:
1.8


"
ConcurrentHashMap,"reduceEntriesToDouble(long parallelismThreshold, ToDoubleFunction<Map.Entry<K,V>> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","

reduceEntriesToDouble
public double reduceEntriesToDouble(long parallelismThreshold,
                                    ToDoubleFunction<Map.Entry<K,V>> transformer,
                                    double basis,
                                    DoubleBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all entries
Since:
1.8


"
ConcurrentHashMap,"reduceEntriesToInt(long parallelismThreshold, ToIntFunction<Map.Entry<K,V>> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","

reduceEntriesToInt
public int reduceEntriesToInt(long parallelismThreshold,
                              ToIntFunction<Map.Entry<K,V>> transformer,
                              int basis,
                              IntBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all entries
Since:
1.8


"
ConcurrentHashMap,"reduceEntriesToLong(long parallelismThreshold, ToLongFunction<Map.Entry<K,V>> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.","

reduceEntriesToLong
public long reduceEntriesToLong(long parallelismThreshold,
                                ToLongFunction<Map.Entry<K,V>> transformer,
                                long basis,
                                LongBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all entries using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all entries
Since:
1.8


"
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, BiFunction<? super K,? super K,? extends K> reducer)",K,"Returns the result of accumulating all keys using the given reducer to combine values, or null if none.","

reduceKeys
public K reduceKeys(long parallelismThreshold,
                    BiFunction<? super K,? super K,? extends K> reducer)
Returns the result of accumulating all keys using the given
 reducer to combine values, or null if none.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
reducer - a commutative associative combining function
Returns:
the result of accumulating all keys using the given
 reducer to combine values, or null if none
Since:
1.8


"
ConcurrentHashMap,"reduceKeys(long parallelismThreshold, Function<? super K,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.","

reduceKeys
public <U> U reduceKeys(long parallelismThreshold,
                        Function<? super K,? extends U> transformer,
                        BiFunction<? super U,? super U,? extends U> reducer)
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, or
 null if none.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case it is not combined)
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all keys
Since:
1.8


"
ConcurrentHashMap,"reduceKeysToDouble(long parallelismThreshold, ToDoubleFunction<? super K> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","

reduceKeysToDouble
public double reduceKeysToDouble(long parallelismThreshold,
                                 ToDoubleFunction<? super K> transformer,
                                 double basis,
                                 DoubleBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all keys
Since:
1.8


"
ConcurrentHashMap,"reduceKeysToInt(long parallelismThreshold, ToIntFunction<? super K> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","

reduceKeysToInt
public int reduceKeysToInt(long parallelismThreshold,
                           ToIntFunction<? super K> transformer,
                           int basis,
                           IntBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all keys
Since:
1.8


"
ConcurrentHashMap,"reduceKeysToLong(long parallelismThreshold, ToLongFunction<? super K> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.","

reduceKeysToLong
public long reduceKeysToLong(long parallelismThreshold,
                             ToLongFunction<? super K> transformer,
                             long basis,
                             LongBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all keys using the given reducer to combine values, and
 the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all keys
Since:
1.8


"
ConcurrentHashMap,"reduceToDouble(long parallelismThreshold, ToDoubleBiFunction<? super K,? super V> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","

reduceToDouble
public double reduceToDouble(long parallelismThreshold,
                             ToDoubleBiFunction<? super K,? super V> transformer,
                             double basis,
                             DoubleBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all (key, value) pairs
Since:
1.8


"
ConcurrentHashMap,"reduceToInt(long parallelismThreshold, ToIntBiFunction<? super K,? super V> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","

reduceToInt
public int reduceToInt(long parallelismThreshold,
                       ToIntBiFunction<? super K,? super V> transformer,
                       int basis,
                       IntBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all (key, value) pairs
Since:
1.8


"
ConcurrentHashMap,"reduceToLong(long parallelismThreshold, ToLongBiFunction<? super K,? super V> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.","

reduceToLong
public long reduceToLong(long parallelismThreshold,
                         ToLongBiFunction<? super K,? super V> transformer,
                         long basis,
                         LongBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all (key, value) pairs using the given reducer to
 combine values, and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all (key, value) pairs
Since:
1.8


"
ConcurrentHashMap,"reduceValues(long parallelismThreshold, BiFunction<? super V,? super V,? extends V> reducer)",V,"Returns the result of accumulating all values using the given reducer to combine values, or null if none.","

reduceValues
public V reduceValues(long parallelismThreshold,
                      BiFunction<? super V,? super V,? extends V> reducer)
Returns the result of accumulating all values using the
 given reducer to combine values, or null if none.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
reducer - a commutative associative combining function
Returns:
the result of accumulating all values
Since:
1.8


"
ConcurrentHashMap,"reduceValues(long parallelismThreshold, Function<? super V,? extends U> transformer, BiFunction<? super U,? super U,? extends U> reducer)",<U> U,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.","

reduceValues
public <U> U reduceValues(long parallelismThreshold,
                          Function<? super V,? extends U> transformer,
                          BiFunction<? super U,? super U,? extends U> reducer)
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values, or
 null if none.

Type Parameters:
U - the return type of the transformer
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element, or null if there is no transformation (in
 which case it is not combined)
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all values
Since:
1.8


"
ConcurrentHashMap,"reduceValuesToDouble(long parallelismThreshold, ToDoubleFunction<? super V> transformer, double basis, DoubleBinaryOperator reducer)",double,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","

reduceValuesToDouble
public double reduceValuesToDouble(long parallelismThreshold,
                                   ToDoubleFunction<? super V> transformer,
                                   double basis,
                                   DoubleBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all values
Since:
1.8


"
ConcurrentHashMap,"reduceValuesToInt(long parallelismThreshold, ToIntFunction<? super V> transformer, int basis, IntBinaryOperator reducer)",int,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","

reduceValuesToInt
public int reduceValuesToInt(long parallelismThreshold,
                             ToIntFunction<? super V> transformer,
                             int basis,
                             IntBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all values
Since:
1.8


"
ConcurrentHashMap,"reduceValuesToLong(long parallelismThreshold, ToLongFunction<? super V> transformer, long basis, LongBinaryOperator reducer)",long,"Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.","

reduceValuesToLong
public long reduceValuesToLong(long parallelismThreshold,
                               ToLongFunction<? super V> transformer,
                               long basis,
                               LongBinaryOperator reducer)
Returns the result of accumulating the given transformation
 of all values using the given reducer to combine values,
 and the given basis as an identity value.

Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
transformer - a function returning the transformation
 for an element
basis - the identity (initial default value) for the reduction
reducer - a commutative associative combining function
Returns:
the result of accumulating the given transformation
 of all values
Since:
1.8


"
ConcurrentHashMap,remove(Object key),V,Removes the key (and its corresponding value) from this map.,"

remove
public V remove(Object key)
Removes the key (and its corresponding value) from this map.
 This method does nothing if the key is not in the map.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - the key that needs to be removed
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap,"remove(Object key, Object value)",boolean,Removes the entry for a key only if currently mapped to a given value.,"

remove
public boolean remove(Object key,
                      Object value)
Removes the entry for a key only if currently mapped to a given value.
 This is equivalent to
   
 if (map.containsKey(key) && Objects.equals(map.get(key), value)) {
   map.remove(key);
   return true;
 } else
   return false;
 

 except that the action is performed atomically.

Specified by:
remove in interface ConcurrentMap<K,V>
Specified by:
remove in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value expected to be associated with the specified key
Returns:
true if the value was removed
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap,"replace(K key, V value)",V,Replaces the entry for a key only if currently mapped to some value.,"

replace
public V replace(K key,
                 V value)
Replaces the entry for a key only if currently mapped to some value.
 This is equivalent to
   
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
NullPointerException - if the specified key or value is null


"
ConcurrentHashMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for a key only if currently mapped to a given value.,"

replace
public boolean replace(K key,
                       V oldValue,
                       V newValue)
Replaces the entry for a key only if currently mapped to a given value.
 This is equivalent to
   
 if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
oldValue - value expected to be associated with the specified key
newValue - value to be associated with the specified key
Returns:
true if the value was replaced
Throws:
NullPointerException - if any of the arguments are null


"
ConcurrentHashMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.,"

replaceAll
public void replaceAll(BiFunction<? super K,? super V,? extends V> function)
Description copied from interface: ConcurrentMap
Replaces each entry's value with the result of invoking the given
 function on that entry until all entries have been processed or the
 function throws an exception.  Exceptions thrown by the function are
 relayed to the caller.

Specified by:
replaceAll in interface ConcurrentMap<K,V>
Specified by:
replaceAll in interface Map<K,V>
Parameters:
function - the function to apply to each entry


"
ConcurrentHashMap,"search(long parallelismThreshold, BiFunction<? super K,? super V,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each (key, value), or null if none.","

search
public <U> U search(long parallelismThreshold,
                    BiFunction<? super K,? super V,? extends U> searchFunction)
Returns a non-null result from applying the given search
 function on each (key, value), or null if none.  Upon
 success, further element processing is suppressed and the
 results of any other parallel invocations of the search
 function are ignored.

Type Parameters:
U - the return type of the search function
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
searchFunction - a function returning a non-null
 result on success, else null
Returns:
a non-null result from applying the given search
 function on each (key, value), or null if none
Since:
1.8


"
ConcurrentHashMap,"searchEntries(long parallelismThreshold, Function<Map.Entry<K,V>,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each entry, or null if none.","

searchEntries
public <U> U searchEntries(long parallelismThreshold,
                           Function<Map.Entry<K,V>,? extends U> searchFunction)
Returns a non-null result from applying the given search
 function on each entry, or null if none.  Upon success,
 further element processing is suppressed and the results of
 any other parallel invocations of the search function are
 ignored.

Type Parameters:
U - the return type of the search function
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
searchFunction - a function returning a non-null
 result on success, else null
Returns:
a non-null result from applying the given search
 function on each entry, or null if none
Since:
1.8


"
ConcurrentHashMap,"searchKeys(long parallelismThreshold, Function<? super K,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each key, or null if none.","

searchKeys
public <U> U searchKeys(long parallelismThreshold,
                        Function<? super K,? extends U> searchFunction)
Returns a non-null result from applying the given search
 function on each key, or null if none. Upon success,
 further element processing is suppressed and the results of
 any other parallel invocations of the search function are
 ignored.

Type Parameters:
U - the return type of the search function
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
searchFunction - a function returning a non-null
 result on success, else null
Returns:
a non-null result from applying the given search
 function on each key, or null if none
Since:
1.8


"
ConcurrentHashMap,"searchValues(long parallelismThreshold, Function<? super V,? extends U> searchFunction)",<U> U,"Returns a non-null result from applying the given search function on each value, or null if none.","

searchValues
public <U> U searchValues(long parallelismThreshold,
                          Function<? super V,? extends U> searchFunction)
Returns a non-null result from applying the given search
 function on each value, or null if none.  Upon success,
 further element processing is suppressed and the results of
 any other parallel invocations of the search function are
 ignored.

Type Parameters:
U - the return type of the search function
Parameters:
parallelismThreshold - the (estimated) number of elements
 needed for this operation to be executed in parallel
searchFunction - a function returning a non-null
 result on success, else null
Returns:
a non-null result from applying the given search
 function on each value, or null if none
Since:
1.8


"
ConcurrentHashMap,size(),int,Returns the number of key-value mappings in this map.,"

size
public int size()
Returns the number of key-value mappings in this map.  If the
 map contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Map<K,V>
Overrides:
size in class AbstractMap<K,V>
Returns:
the number of key-value mappings in this map


"
ConcurrentHashMap,toString(),String,Returns a string representation of this map.,"

toString
public String toString()
Returns a string representation of this map.  The string
 representation consists of a list of key-value mappings (in no
 particular order) enclosed in braces (""{}"").  Adjacent
 mappings are separated by the characters "", "" (comma
 and space).  Each key-value mapping is rendered as the key
 followed by an equals sign (""="") followed by the
 associated value.

Overrides:
toString in class AbstractMap<K,V>
Returns:
a string representation of this map


"
ConcurrentHashMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.,"

values
public Collection<V> values()
Returns a Collection view of the values contained in this map.
 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  The collection
 supports element removal, which removes the corresponding
 mapping from this map, via the Iterator.remove,
 Collection.remove, removeAll,
 retainAll, and clear operations.  It does not
 support the add or addAll operations.

 The view's iterators and spliterators are
 weakly consistent.

 The view's spliterator reports Spliterator.CONCURRENT
 and Spliterator.NONNULL.

Specified by:
values in interface Map<K,V>
Overrides:
values in class AbstractMap<K,V>
Returns:
the collection view


"
ConcurrentHashMap.KeySetView,add(K e),boolean,"Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined.","

add
public boolean add(K e)
Adds the specified key to this set view by mapping the key to
 the default mapped value in the backing map, if defined.

Specified by:
add in interface Collection<K>
Specified by:
add in interface Set<K>
Parameters:
e - key to be added
Returns:
true if this set changed as a result of the call
Throws:
NullPointerException - if the specified key is null
UnsupportedOperationException - if no default mapped value
 for additions was provided


"
ConcurrentHashMap.KeySetView,addAll(Collection<? extends K> c),boolean,"Adds all of the elements in the specified collection to this set, as if by calling add(K) on each one.","

addAll
public boolean addAll(Collection<? extends K> c)
Adds all of the elements in the specified collection to this set,
 as if by calling add(K) on each one.

Specified by:
addAll in interface Collection<K>
Specified by:
addAll in interface Set<K>
Parameters:
c - the elements to be inserted into this set
Returns:
true if this set changed as a result of the call
Throws:
NullPointerException - if the collection or any of its
 elements are null
UnsupportedOperationException - if no default mapped value
 for additions was provided
See Also:
Set.add(Object)


"
ConcurrentHashMap.KeySetView,clear(),void,"Removes all of the elements from this view, by removing all the mappings from the map backing this view.","

clear
public final void clear()
Removes all of the elements from this view, by removing all
 the mappings from the map backing this view.

Specified by:
clear in interface Collection<E>


"
ConcurrentHashMap.KeySetView,contains(Object o),boolean,Returns true if this collection contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this collection contains the specified element.
 More formally, returns true if and only if this collection
 contains at least one element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<K>
Specified by:
contains in interface Set<K>
Parameters:
o - element whose presence in this collection is to be tested
Returns:
true if this collection contains the specified
         element
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap.KeySetView,containsAll(Collection<?> c),boolean,Returns true if this collection contains all of the elements in the specified collection.,"

containsAll
public final boolean containsAll(Collection<?> c)
Description copied from interface: Collection
Returns true if this collection contains all of the elements
 in the specified collection.

Specified by:
containsAll in interface Collection<E>
Parameters:
c - collection to be checked for containment in this collection
Returns:
true if this collection contains all of the elements
         in the specified collection
See Also:
Collection.contains(Object)


"
ConcurrentHashMap.KeySetView,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Specified by:
equals in interface Collection<K>
Specified by:
equals in interface Set<K>
Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ConcurrentHashMap.KeySetView,forEach(Consumer<? super K> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.,"

forEach
public void forEach(Consumer<? super K> action)
Description copied from interface: Iterable
Performs the given action for each element of the Iterable
 until all elements have been processed or the action throws an
 exception.  Unless otherwise specified by the implementing class,
 actions are performed in the order of iteration (if an iteration order
 is specified).  Exceptions thrown by the action are relayed to the
 caller.

Specified by:
forEach in interface Iterable<K>
Parameters:
action - The action to be performed for each element


"
ConcurrentHashMap.KeySetView,getMap(),"ConcurrentHashMap<K,V>",Returns the map backing this view.,"

getMap
public ConcurrentHashMap<K,V> getMap()
Returns the map backing this view.

Returns:
the map backing this view


"
ConcurrentHashMap.KeySetView,getMappedValue(),V,"Returns the default mapped value for additions, or null if additions are not supported.","

getMappedValue
public V getMappedValue()
Returns the default mapped value for additions,
 or null if additions are not supported.

Returns:
the default mapped value for additions, or null
 if not supported


"
ConcurrentHashMap.KeySetView,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Specified by:
hashCode in interface Collection<K>
Specified by:
hashCode in interface Set<K>
Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ConcurrentHashMap.KeySetView,isEmpty(),boolean,Returns true if this collection contains no elements.,"

isEmpty
public final boolean isEmpty()
Description copied from interface: Collection
Returns true if this collection contains no elements.

Specified by:
isEmpty in interface Collection<E>
Returns:
true if this collection contains no elements


"
ConcurrentHashMap.KeySetView,iterator(),Iterator<K>,Returns an iterator over the elements in this collection.,"

iterator
public Iterator<K> iterator()
Returns an iterator over the elements in this collection.

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<K>
Specified by:
iterator in interface Collection<K>
Specified by:
iterator in interface Set<K>
Returns:
an iterator over the keys of the backing map


"
ConcurrentHashMap.KeySetView,remove(Object o),boolean,"Removes the key from this map view, by removing the key (and its corresponding value) from the backing map.","

remove
public boolean remove(Object o)
Removes the key from this map view, by removing the key (and its
 corresponding value) from the backing map.  This method does
 nothing if the key is not in the map.

Specified by:
remove in interface Collection<K>
Specified by:
remove in interface Set<K>
Parameters:
o - the key to be removed from the backing map
Returns:
true if the backing map contained the specified key
Throws:
NullPointerException - if the specified key is null


"
ConcurrentHashMap.KeySetView,removeAll(Collection<?> c),boolean,Removes all of this collection's elements that are also contained in the specified collection (optional operation).,"

removeAll
public final boolean removeAll(Collection<?> c)
Description copied from interface: Collection
Removes all of this collection's elements that are also contained in the
 specified collection (optional operation).  After this call returns,
 this collection will contain no elements in common with the specified
 collection.

Specified by:
removeAll in interface Collection<E>
Parameters:
c - collection containing elements to be removed from this collection
Returns:
true if this collection changed as a result of the
         call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
ConcurrentHashMap.KeySetView,retainAll(Collection<?> c),boolean,Retains only the elements in this collection that are contained in the specified collection (optional operation).,"

retainAll
public final boolean retainAll(Collection<?> c)
Description copied from interface: Collection
Retains only the elements in this collection that are contained in the
 specified collection (optional operation).  In other words, removes from
 this collection all of its elements that are not contained in the
 specified collection.

Specified by:
retainAll in interface Collection<E>
Parameters:
c - collection containing elements to be retained in this collection
Returns:
true if this collection changed as a result of the call
See Also:
Collection.remove(Object), 
Collection.contains(Object)


"
ConcurrentHashMap.KeySetView,size(),int,Returns the number of elements in this collection.,"

size
public final int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Returns:
the number of elements in this collection


"
ConcurrentHashMap.KeySetView,spliterator(),Spliterator<K>,Creates a Spliterator over the elements in this set.,"

spliterator
public Spliterator<K> spliterator()
Description copied from interface: Set
Creates a Spliterator over the elements in this set.

 The Spliterator reports Spliterator.DISTINCT.
 Implementations should document the reporting of additional
 characteristic values.

Specified by:
spliterator in interface Iterable<K>
Specified by:
spliterator in interface Collection<K>
Specified by:
spliterator in interface Set<K>
Returns:
a Spliterator over the elements in this set


"
ConcurrentHashMap.KeySetView,toArray(),Object[],Returns an array containing all of the elements in this collection.,"

toArray
public final Object[] toArray()
Description copied from interface: Collection
Returns an array containing all of the elements in this collection.
 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 The returned array will be ""safe"" in that no references to it are
 maintained by this collection.  (In other words, this method must
 allocate a new array even if this collection is backed by an array).
 The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Returns:
an array containing all of the elements in this collection


"
ConcurrentHashMap.KeySetView,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.,"

toArray
public final <T> T[] toArray(T[] a)
Description copied from interface: Collection
Returns an array containing all of the elements in this collection;
 the runtime type of the returned array is that of the specified array.
 If the collection fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this collection.

 If this collection fits in the specified array with room to spare
 (i.e., the array has more elements than this collection), the element
 in the array immediately following the end of the collection is set to
 null.  (This is useful in determining the length of this
 collection only if the caller knows that this collection does
 not contain any null elements.)

 If this collection makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements in
 the same order.

 Like the Collection.toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a collection known to contain only strings.
 The following code can be used to dump the collection into a newly
 allocated array of String:

 
     String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this collection are to be
        stored, if it is big enough; otherwise, a new array of the same
        runtime type is allocated for this purpose.
Returns:
an array containing all of the elements in this collection


"
ConcurrentHashMap.KeySetView,toString(),String,Returns a string representation of this collection.,"

toString
public final String toString()
Returns a string representation of this collection.
 The string representation consists of the string representations
 of the collection's elements in the order they are returned by
 its iterator, enclosed in square brackets (""[]"").
 Adjacent elements are separated by the characters "", ""
 (comma and space).  Elements are converted to strings as by
 String.valueOf(Object).

Overrides:
toString in class Object
Returns:
a string representation of this collection


"
ConcurrentLinkedDeque,add(E e),boolean,Inserts the specified element at the tail of this deque.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this deque.
 As the deque is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element whose presence in this collection is to be ensured
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator.","

addAll
public boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of
 this deque, in the order that they are returned by the specified
 collection's iterator.  Attempts to addAll of a deque to
 itself result in IllegalArgumentException.

Specified by:
addAll in interface Collection<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - the elements to be inserted into this deque
Returns:
true if this deque changed as a result of the call
Throws:
NullPointerException - if the specified collection or any
         of its elements are null
IllegalArgumentException - if the collection is this deque
See Also:
AbstractCollection.add(Object)


"
ConcurrentLinkedDeque,addFirst(E e),void,Inserts the specified element at the front of this deque.,"

addFirst
public void addFirst(E e)
Inserts the specified element at the front of this deque.
 As the deque is unbounded, this method will never throw
 IllegalStateException.

Specified by:
addFirst in interface Deque<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,addLast(E e),void,Inserts the specified element at the end of this deque.,"

addLast
public void addLast(E e)
Inserts the specified element at the end of this deque.
 As the deque is unbounded, this method will never throw
 IllegalStateException.

 This method is equivalent to add(E).

Specified by:
addLast in interface Deque<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,clear(),void,Removes all of the elements from this deque.,"

clear
public void clear()
Removes all of the elements from this deque.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractCollection<E>


"
ConcurrentLinkedDeque,contains(Object o),boolean,Returns true if this deque contains at least one element e such that o.equals(e).,"

contains
public boolean contains(Object o)
Returns true if this deque contains at least one
 element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Deque<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this deque is to be tested
Returns:
true if this deque contains the specified element


"
ConcurrentLinkedDeque,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.,"

descendingIterator
public Iterator<E> descendingIterator()
Returns an iterator over the elements in this deque in reverse
 sequential order.  The elements will be returned in order from
 last (tail) to first (head).

 The returned iterator is
 weakly consistent.

Specified by:
descendingIterator in interface Deque<E>
Returns:
an iterator over the elements in this deque in reverse order


"
ConcurrentLinkedDeque,element(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque).","

element
public E element()
Description copied from interface: Deque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque).
 This method differs from peek only in that it throws an
 exception if this deque is empty.

 This method is equivalent to Deque.getFirst().

Specified by:
element in interface Deque<E>
Specified by:
element in interface Queue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,getFirst(),E,"Retrieves, but does not remove, the first element of this deque.","

getFirst
public E getFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque.

 This method differs from peekFirst only in that it
 throws an exception if this deque is empty.

Specified by:
getFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,getLast(),E,"Retrieves, but does not remove, the last element of this deque.","

getLast
public E getLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque.
 This method differs from peekLast only in that it
 throws an exception if this deque is empty.

Specified by:
getLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,isEmpty(),boolean,Returns true if this collection contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this collection contains no elements.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this collection contains no elements


"
ConcurrentLinkedDeque,iterator(),Iterator<E>,Returns an iterator over the elements in this deque in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this deque in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface Deque<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this deque in proper sequence


"
ConcurrentLinkedDeque,offer(E e),boolean,Inserts the specified element at the tail of this deque.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this deque.
 As the deque is unbounded, this method will never return false.

Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,offerFirst(E e),boolean,Inserts the specified element at the front of this deque.,"

offerFirst
public boolean offerFirst(E e)
Inserts the specified element at the front of this deque.
 As the deque is unbounded, this method will never return false.

Specified by:
offerFirst in interface Deque<E>
Parameters:
e - the element to add
Returns:
true (as specified by Deque.offerFirst(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,offerLast(E e),boolean,Inserts the specified element at the end of this deque.,"

offerLast
public boolean offerLast(E e)
Inserts the specified element at the end of this deque.
 As the deque is unbounded, this method will never return false.

 This method is equivalent to add(E).

Specified by:
offerLast in interface Deque<E>
Parameters:
e - the element to add
Returns:
true (as specified by Deque.offerLast(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,peek(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

peek
public E peek()
Description copied from interface: Deque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns null if this deque is empty.

 This method is equivalent to Deque.peekFirst().

Specified by:
peek in interface Deque<E>
Specified by:
peek in interface Queue<E>
Returns:
the head of the queue represented by this deque, or
         null if this deque is empty


"
ConcurrentLinkedDeque,peekFirst(),E,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.","

peekFirst
public E peekFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque,
 or returns null if this deque is empty.

Specified by:
peekFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
ConcurrentLinkedDeque,peekLast(),E,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.","

peekLast
public E peekLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque,
 or returns null if this deque is empty.

Specified by:
peekLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
ConcurrentLinkedDeque,poll(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

poll
public E poll()
Description copied from interface: Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the first element of this deque, or null if
         this deque is empty


"
ConcurrentLinkedDeque,pollFirst(),E,"Retrieves and removes the first element of this deque, or returns null if this deque is empty.","

pollFirst
public E pollFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque,
 or returns null if this deque is empty.

Specified by:
pollFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
ConcurrentLinkedDeque,pollLast(),E,"Retrieves and removes the last element of this deque, or returns null if this deque is empty.","

pollLast
public E pollLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque,
 or returns null if this deque is empty.

Specified by:
pollLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
ConcurrentLinkedDeque,pop(),E,Pops an element from the stack represented by this deque.,"

pop
public E pop()
Description copied from interface: Deque
Pops an element from the stack represented by this deque.  In other
 words, removes and returns the first element of this deque.

 This method is equivalent to Deque.removeFirst().

Specified by:
pop in interface Deque<E>
Returns:
the element at the front of this deque (which is the top
         of the stack represented by this deque)
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,push(E e),void,"Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.","

push
public void push(E e)
Description copied from interface: Deque
Pushes an element onto the stack represented by this deque (in other
 words, at the head of this deque) if it is possible to do so
 immediately without violating capacity restrictions, throwing an
 IllegalStateException if no space is currently available.

 This method is equivalent to Deque.addFirst(E).

Specified by:
push in interface Deque<E>
Parameters:
e - the element to push
Throws:
NullPointerException - if the specified element is null and this
         deque does not permit null elements


"
ConcurrentLinkedDeque,remove(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque).","

remove
public E remove()
Description copied from interface: Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque).
 This method differs from poll only in that it throws an
 exception if this deque is empty.

 This method is equivalent to Deque.removeFirst().

Specified by:
remove in interface Deque<E>
Specified by:
remove in interface Queue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,remove(Object o),boolean,"Removes the first element e such that o.equals(e), if such an element exists in this deque.","

remove
public boolean remove(Object o)
Removes the first element e such that
 o.equals(e), if such an element exists in this deque.
 If the deque does not contain the element, it is unchanged.

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Deque<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if the deque contained the specified element
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,removeFirst(),E,Retrieves and removes the first element of this deque.,"

removeFirst
public E removeFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque.  This method
 differs from pollFirst only in that it throws an
 exception if this deque is empty.

Specified by:
removeFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,removeFirstOccurrence(Object o),boolean,"Removes the first element e such that o.equals(e), if such an element exists in this deque.","

removeFirstOccurrence
public boolean removeFirstOccurrence(Object o)
Removes the first element e such that
 o.equals(e), if such an element exists in this deque.
 If the deque does not contain the element, it is unchanged.

Specified by:
removeFirstOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if the deque contained the specified element
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,removeLast(),E,Retrieves and removes the last element of this deque.,"

removeLast
public E removeLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque.  This method
 differs from pollLast only in that it throws an
 exception if this deque is empty.

Specified by:
removeLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
ConcurrentLinkedDeque,removeLastOccurrence(Object o),boolean,"Removes the last element e such that o.equals(e), if such an element exists in this deque.","

removeLastOccurrence
public boolean removeLastOccurrence(Object o)
Removes the last element e such that
 o.equals(e), if such an element exists in this deque.
 If the deque does not contain the element, it is unchanged.

Specified by:
removeLastOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if the deque contained the specified element
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedDeque,size(),int,Returns the number of elements in this deque.,"

size
public int size()
Returns the number of elements in this deque.  If this deque
 contains more than Integer.MAX_VALUE elements, it
 returns Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these deques, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Deque<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this deque


"
ConcurrentLinkedDeque,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this deque.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this deque.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this deque
Since:
1.8


"
ConcurrentLinkedDeque,toArray(),Object[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element).","

toArray
public Object[] toArray()
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).

 The returned array will be ""safe"" in that no references to it are
 maintained by this deque.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this deque


"
ConcurrentLinkedDeque,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.","

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this deque,
 in proper sequence (from first to last element); the runtime
 type of the returned array is that of the specified array.  If
 the deque fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of
 the specified array and the size of this deque.

 If this deque fits in the specified array with room to spare
 (i.e., the array has more elements than this deque), the element in
 the array immediately following the end of the deque is set to
 null.

 Like the toArray() method, this method acts as
 bridge between array-based and collection-based APIs.  Further,
 this method allows precise control over the runtime type of the
 output array, and may, under certain circumstances, be used to
 save allocation costs.

 Suppose x is a deque known to contain only strings.
 The following code can be used to dump the deque into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the deque are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this deque
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this deque
NullPointerException - if the specified array is null


"
ConcurrentLinkedQueue,add(E e),boolean,Inserts the specified element at the tail of this queue.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedQueue,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator.","

addAll
public boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end of
 this queue, in the order that they are returned by the specified
 collection's iterator.  Attempts to addAll of a queue to
 itself result in IllegalArgumentException.

Specified by:
addAll in interface Collection<E>
Overrides:
addAll in class AbstractQueue<E>
Parameters:
c - the elements to be inserted into this queue
Returns:
true if this queue changed as a result of the call
Throws:
NullPointerException - if the specified collection or any
         of its elements are null
IllegalArgumentException - if the collection is this queue
See Also:
AbstractQueue.add(Object)


"
ConcurrentLinkedQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
ConcurrentLinkedQueue,isEmpty(),boolean,Returns true if this queue contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this queue contains no elements.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this queue contains no elements


"
ConcurrentLinkedQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this queue in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this queue in proper sequence


"
ConcurrentLinkedQueue,offer(E e),boolean,Inserts the specified element at the tail of this queue.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
ConcurrentLinkedQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
ConcurrentLinkedQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
ConcurrentLinkedQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.
 Returns true if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

Specified by:
remove in interface Collection<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
ConcurrentLinkedQueue,size(),int,Returns the number of elements in this queue.,"

size
public int size()
Returns the number of elements in this queue.  If this queue
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current
 number of elements requires an O(n) traversal.
 Additionally, if elements are added or removed during execution
 of this method, the returned result may be inaccurate.  Thus,
 this method is typically not very useful in concurrent
 applications.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
ConcurrentLinkedQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this queue.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this queue
Since:
1.8


"
ConcurrentLinkedQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence.","

toArray
public Object[] toArray()
Returns an array containing all of the elements in this queue, in
 proper sequence.

 The returned array will be ""safe"" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this queue


"
ConcurrentLinkedQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array.","

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this queue
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
NullPointerException - if the specified array is null


"
ConcurrentSkipListMap,ceilingEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry.","

ceilingEntry
public Map.Entry<K,V> ceilingEntry(K key)
Returns a key-value mapping associated with the least key
 greater than or equal to the given key, or null if
 there is no such entry. The returned entry does not
 support the Entry.setValue method.

Specified by:
ceilingEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the least key greater than or equal to
         key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,ceilingKey(K key),K,"Returns the least key greater than or equal to the given key, or null if there is no such key.","

ceilingKey
public K ceilingKey(K key)
Description copied from interface: NavigableMap
Returns the least key greater than or equal to the given key,
 or null if there is no such key.

Specified by:
ceilingKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the least key greater than or equal to key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,clear(),void,Removes all of the mappings from this map.,"

clear
public void clear()
Removes all of the mappings from this map.

Specified by:
clear in interface Map<K,V>
Overrides:
clear in class AbstractMap<K,V>


"
ConcurrentSkipListMap,clone(),"ConcurrentSkipListMap<K,V>",Returns a shallow copy of this ConcurrentSkipListMap instance.,"

clone
public ConcurrentSkipListMap<K,V> clone()
Returns a shallow copy of this ConcurrentSkipListMap
 instance. (The keys and values themselves are not cloned.)

Overrides:
clone in class AbstractMap<K,V>
Returns:
a shallow copy of this map
See Also:
Cloneable


"
ConcurrentSkipListMap,comparator(),Comparator<? super K>,"Returns the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys.","

comparator
public Comparator<? super K> comparator()
Description copied from interface: SortedMap
Returns the comparator used to order the keys in this map, or
 null if this map uses the natural ordering of its keys.

Specified by:
comparator in interface SortedMap<K,V>
Returns:
the comparator used to order the keys in this map,
         or null if this map uses the natural ordering
         of its keys


"
ConcurrentSkipListMap,"compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).,"

compute
public V compute(K key,
                 BiFunction<? super K,? super V,? extends V> remappingFunction)
Attempts to compute a mapping for the specified key and its
 current mapped value (or null if there is no current
 mapping). The function is NOT guaranteed to be applied
 once atomically.

Specified by:
compute in interface ConcurrentMap<K,V>
Specified by:
compute in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key is null
         or the remappingFunction is null
Since:
1.8


"
ConcurrentSkipListMap,"computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)",V,"If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null.","

computeIfAbsent
public V computeIfAbsent(K key,
                         Function<? super K,? extends V> mappingFunction)
If the specified key is not already associated with a value,
 attempts to compute its value using the given mapping function
 and enters it into this map unless null.  The function
 is NOT guaranteed to be applied once atomically only
 if the value is not present.

Specified by:
computeIfAbsent in interface ConcurrentMap<K,V>
Specified by:
computeIfAbsent in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
mappingFunction - the function to compute a value
Returns:
the current (existing or computed) value associated with
         the specified key, or null if the computed value is null
Throws:
NullPointerException - if the specified key is null
         or the mappingFunction is null
Since:
1.8


"
ConcurrentSkipListMap,"computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",V,"If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value.","

computeIfPresent
public V computeIfPresent(K key,
                          BiFunction<? super K,? super V,? extends V> remappingFunction)
If the value for the specified key is present, attempts to
 compute a new mapping given the key and its current mapped
 value. The function is NOT guaranteed to be applied
 once atomically.

Specified by:
computeIfPresent in interface ConcurrentMap<K,V>
Specified by:
computeIfPresent in interface Map<K,V>
Parameters:
key - key with which a value may be associated
remappingFunction - the function to compute a value
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key is null
         or the remappingFunction is null
Since:
1.8


"
ConcurrentSkipListMap,containsKey(Object key),boolean,Returns true if this map contains a mapping for the specified key.,"

containsKey
public boolean containsKey(Object key)
Returns true if this map contains a mapping for the specified
 key.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - key whose presence in this map is to be tested
Returns:
true if this map contains a mapping for the specified key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,containsValue(Object value),boolean,Returns true if this map maps one or more keys to the specified value.,"

containsValue
public boolean containsValue(Object value)
Returns true if this map maps one or more keys to the
 specified value.  This operation requires time linear in the
 map size. Additionally, it is possible for the map to change
 during execution of this method, in which case the returned
 result may be inaccurate.

Specified by:
containsValue in interface Map<K,V>
Overrides:
containsValue in class AbstractMap<K,V>
Parameters:
value - value whose presence in this map is to be tested
Returns:
true if a mapping to value exists;
         false otherwise
Throws:
NullPointerException - if the specified value is null


"
ConcurrentSkipListMap,descendingKeySet(),NavigableSet<K>,Returns a reverse order NavigableSet view of the keys contained in this map.,"

descendingKeySet
public NavigableSet<K> descendingKeySet()
Description copied from interface: ConcurrentNavigableMap
Returns a reverse order NavigableSet view of the keys contained in this map.
 The set's iterator returns the keys in descending order.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or addAll
 operations.

 The view's iterators and spliterators are
 weakly consistent.

Specified by:
descendingKeySet in interface ConcurrentNavigableMap<K,V>
Specified by:
descendingKeySet in interface NavigableMap<K,V>
Returns:
a reverse order navigable set view of the keys in this map


"
ConcurrentSkipListMap,descendingMap(),"ConcurrentNavigableMap<K,V>",Returns a reverse order view of the mappings contained in this map.,"

descendingMap
public ConcurrentNavigableMap<K,V> descendingMap()
Description copied from interface: ConcurrentNavigableMap
Returns a reverse order view of the mappings contained in this map.
 The descending map is backed by this map, so changes to the map are
 reflected in the descending map, and vice-versa.

 The returned map has an ordering equivalent to
 Collections.reverseOrder(comparator()).
 The expression m.descendingMap().descendingMap() returns a
 view of m essentially equivalent to m.

Specified by:
descendingMap in interface ConcurrentNavigableMap<K,V>
Specified by:
descendingMap in interface NavigableMap<K,V>
Returns:
a reverse order view of this map


"
ConcurrentSkipListMap,entrySet(),"Set<Map.Entry<K,V>>",Returns a Set view of the mappings contained in this map.,"

entrySet
public Set<Map.Entry<K,V>> entrySet()
Returns a Set view of the mappings contained in this map.

 The set's iterator returns the entries in ascending key order.  The
 set's spliterator additionally reports Spliterator.CONCURRENT,
 Spliterator.NONNULL, Spliterator.SORTED and
 Spliterator.ORDERED, with an encounter order that is ascending
 key order.

 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll and clear
 operations.  It does not support the add or
 addAll operations.

 The view's iterators and spliterators are
 weakly consistent.

 The Map.Entry elements traversed by the iterator
 or spliterator do not support the setValue
 operation.

Specified by:
entrySet in interface Map<K,V>
Specified by:
entrySet in interface SortedMap<K,V>
Specified by:
entrySet in class AbstractMap<K,V>
Returns:
a set view of the mappings contained in this map,
         sorted in ascending key order


"
ConcurrentSkipListMap,equals(Object o),boolean,Compares the specified object with this map for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this map for equality.
 Returns true if the given object is also a map and the
 two maps represent the same mappings.  More formally, two maps
 m1 and m2 represent the same mappings if
 m1.entrySet().equals(m2.entrySet()).  This
 operation may return misleading results if either map is
 concurrently modified during execution of this method.

Specified by:
equals in interface Map<K,V>
Overrides:
equals in class AbstractMap<K,V>
Parameters:
o - object to be compared for equality with this map
Returns:
true if the specified object is equal to this map
See Also:
Object.hashCode(), 
HashMap


"
ConcurrentSkipListMap,firstEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key in this map, or null if the map is empty.","

firstEntry
public Map.Entry<K,V> firstEntry()
Returns a key-value mapping associated with the least
 key in this map, or null if the map is empty.
 The returned entry does not support
 the Entry.setValue method.

Specified by:
firstEntry in interface NavigableMap<K,V>
Returns:
an entry with the least key,
         or null if this map is empty


"
ConcurrentSkipListMap,firstKey(),K,Returns the first (lowest) key currently in this map.,"

firstKey
public K firstKey()
Description copied from interface: SortedMap
Returns the first (lowest) key currently in this map.

Specified by:
firstKey in interface SortedMap<K,V>
Returns:
the first (lowest) key currently in this map
Throws:
NoSuchElementException - if this map is empty


"
ConcurrentSkipListMap,floorEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.","

floorEntry
public Map.Entry<K,V> floorEntry(K key)
Returns a key-value mapping associated with the greatest key
 less than or equal to the given key, or null if there
 is no such key. The returned entry does not support
 the Entry.setValue method.

Specified by:
floorEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the greatest key less than or equal to
         key, or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,floorKey(K key),K,"Returns the greatest key less than or equal to the given key, or null if there is no such key.","

floorKey
public K floorKey(K key)
Description copied from interface: NavigableMap
Returns the greatest key less than or equal to the given key,
 or null if there is no such key.

Specified by:
floorKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the greatest key less than or equal to key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,"forEach(BiConsumer<? super K,? super V> action)",void,Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.,"

forEach
public void forEach(BiConsumer<? super K,? super V> action)
Description copied from interface: ConcurrentMap
Performs the given action for each entry in this map until all entries
 have been processed or the action throws an exception.   Unless
 otherwise specified by the implementing class, actions are performed in
 the order of entry set iteration (if an iteration order is specified.)
 Exceptions thrown by the action are relayed to the caller.

Specified by:
forEach in interface ConcurrentMap<K,V>
Specified by:
forEach in interface Map<K,V>
Parameters:
action - The action to be performed for each entry


"
ConcurrentSkipListMap,get(Object key),V,"Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.","

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that key compares
 equal to k according to the map's ordering, then this
 method returns v; otherwise it returns null.
 (There can be at most one such mapping.)

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,"getOrDefault(Object key, V defaultValue)",V,"Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key.","

getOrDefault
public V getOrDefault(Object key,
                      V defaultValue)
Returns the value to which the specified key is mapped,
 or the given defaultValue if this map contains no mapping for the key.

Specified by:
getOrDefault in interface ConcurrentMap<K,V>
Specified by:
getOrDefault in interface Map<K,V>
Parameters:
key - the key
defaultValue - the value to return if this map contains
 no mapping for the given key
Returns:
the mapping for the key, if present; else the defaultValue
Throws:
NullPointerException - if the specified key is null
Since:
1.8


"
ConcurrentSkipListMap,headMap(K toKey),"ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys are strictly less than toKey.,"

headMap
public ConcurrentNavigableMap<K,V> headMap(K toKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are
 strictly less than toKey.  The returned map is backed
 by this map, so changes in the returned map are reflected in
 this map, and vice-versa.  The returned map supports all
 optional map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside its range.

 Equivalent to headMap(toKey, false).

Specified by:
headMap in interface ConcurrentNavigableMap<K,V>
Specified by:
headMap in interface NavigableMap<K,V>
Specified by:
headMap in interface SortedMap<K,V>
Parameters:
toKey - high endpoint (exclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys are strictly
         less than toKey
Throws:
ClassCastException - if toKey is not compatible
         with this map's comparator (or, if the map has no comparator,
         if toKey does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if toKey cannot be compared to keys
         currently in the map.
NullPointerException - if toKey is null
IllegalArgumentException - if this map itself has a
         restricted range, and toKey lies outside the
         bounds of the range


"
ConcurrentSkipListMap,"headMap(K toKey, boolean inclusive)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey.","

headMap
public ConcurrentNavigableMap<K,V> headMap(K toKey,
                                           boolean inclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are less than (or
 equal to, if inclusive is true) toKey.  The returned
 map is backed by this map, so changes in the returned map are reflected
 in this map, and vice-versa.  The returned map supports all optional
 map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside its range.

Specified by:
headMap in interface ConcurrentNavigableMap<K,V>
Specified by:
headMap in interface NavigableMap<K,V>
Parameters:
toKey - high endpoint of the keys in the returned map
inclusive - true if the high endpoint
        is to be included in the returned view
Returns:
a view of the portion of this map whose keys are less than
         (or equal to, if inclusive is true) toKey
Throws:
ClassCastException - if toKey is not compatible
         with this map's comparator (or, if the map has no comparator,
         if toKey does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if toKey cannot be compared to keys
         currently in the map.
NullPointerException - if toKey is null
IllegalArgumentException - if this map itself has a
         restricted range, and toKey lies outside the
         bounds of the range


"
ConcurrentSkipListMap,higherEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.","

higherEntry
public Map.Entry<K,V> higherEntry(K key)
Returns a key-value mapping associated with the least key
 strictly greater than the given key, or null if there
 is no such key. The returned entry does not support
 the Entry.setValue method.

Specified by:
higherEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the least key greater than key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,higherKey(K key),K,"Returns the least key strictly greater than the given key, or null if there is no such key.","

higherKey
public K higherKey(K key)
Description copied from interface: NavigableMap
Returns the least key strictly greater than the given key, or
 null if there is no such key.

Specified by:
higherKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the least key greater than key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,isEmpty(),boolean,Returns true if this map contains no key-value mappings.,"

isEmpty
public boolean isEmpty()
Returns true if this map contains no key-value mappings.

Specified by:
isEmpty in interface Map<K,V>
Overrides:
isEmpty in class AbstractMap<K,V>
Returns:
true if this map contains no key-value mappings


"
ConcurrentSkipListMap,keySet(),NavigableSet<K>,Returns a NavigableSet view of the keys contained in this map.,"

keySet
public NavigableSet<K> keySet()
Returns a NavigableSet view of the keys contained in this map.

 The set's iterator returns the keys in ascending order.
 The set's spliterator additionally reports Spliterator.CONCURRENT,
 Spliterator.NONNULL, Spliterator.SORTED and
 Spliterator.ORDERED, with an encounter order that is ascending
 key order.  The spliterator's comparator (see
 Spliterator.getComparator()) is null if
 the map's comparator (see comparator()) is null.
 Otherwise, the spliterator's comparator is the same as or imposes the
 same total ordering as the map's comparator.

 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or addAll
 operations.

 The view's iterators and spliterators are
 weakly consistent.

 This method is equivalent to method navigableKeySet.

Specified by:
keySet in interface ConcurrentNavigableMap<K,V>
Specified by:
keySet in interface Map<K,V>
Specified by:
keySet in interface SortedMap<K,V>
Overrides:
keySet in class AbstractMap<K,V>
Returns:
a navigable set view of the keys in this map


"
ConcurrentSkipListMap,lastEntry(),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","

lastEntry
public Map.Entry<K,V> lastEntry()
Returns a key-value mapping associated with the greatest
 key in this map, or null if the map is empty.
 The returned entry does not support
 the Entry.setValue method.

Specified by:
lastEntry in interface NavigableMap<K,V>
Returns:
an entry with the greatest key,
         or null if this map is empty


"
ConcurrentSkipListMap,lastKey(),K,Returns the last (highest) key currently in this map.,"

lastKey
public K lastKey()
Description copied from interface: SortedMap
Returns the last (highest) key currently in this map.

Specified by:
lastKey in interface SortedMap<K,V>
Returns:
the last (highest) key currently in this map
Throws:
NoSuchElementException - if this map is empty


"
ConcurrentSkipListMap,lowerEntry(K key),"Map.Entry<K,V>","Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.","

lowerEntry
public Map.Entry<K,V> lowerEntry(K key)
Returns a key-value mapping associated with the greatest key
 strictly less than the given key, or null if there is
 no such key. The returned entry does not support the
 Entry.setValue method.

Specified by:
lowerEntry in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
an entry with the greatest key less than key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,lowerKey(K key),K,"Returns the greatest key strictly less than the given key, or null if there is no such key.","

lowerKey
public K lowerKey(K key)
Description copied from interface: NavigableMap
Returns the greatest key strictly less than the given key, or
 null if there is no such key.

Specified by:
lowerKey in interface NavigableMap<K,V>
Parameters:
key - the key
Returns:
the greatest key less than key,
         or null if there is no such key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,"merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",V,"If the specified key is not already associated with a value, associates it with the given value.","

merge
public V merge(K key,
               V value,
               BiFunction<? super V,? super V,? extends V> remappingFunction)
If the specified key is not already associated with a value,
 associates it with the given value.  Otherwise, replaces the
 value with the results of the given remapping function, or
 removes if null. The function is NOT
 guaranteed to be applied once atomically.

Specified by:
merge in interface ConcurrentMap<K,V>
Specified by:
merge in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
value - the value to use if absent
remappingFunction - the function to recompute a value if present
Returns:
the new value associated with the specified key, or null if none
Throws:
NullPointerException - if the specified key or value is null
         or the remappingFunction is null
Since:
1.8


"
ConcurrentSkipListMap,navigableKeySet(),NavigableSet<K>,Returns a NavigableSet view of the keys contained in this map.,"

navigableKeySet
public NavigableSet<K> navigableKeySet()
Description copied from interface: ConcurrentNavigableMap
Returns a NavigableSet view of the keys contained in this map.
 The set's iterator returns the keys in ascending order.
 The set is backed by the map, so changes to the map are
 reflected in the set, and vice-versa.  The set supports element
 removal, which removes the corresponding mapping from the map,
 via the Iterator.remove, Set.remove,
 removeAll, retainAll, and clear
 operations.  It does not support the add or addAll
 operations.

 The view's iterators and spliterators are
 weakly consistent.

Specified by:
navigableKeySet in interface ConcurrentNavigableMap<K,V>
Specified by:
navigableKeySet in interface NavigableMap<K,V>
Returns:
a navigable set view of the keys in this map


"
ConcurrentSkipListMap,pollFirstEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.","

pollFirstEntry
public Map.Entry<K,V> pollFirstEntry()
Removes and returns a key-value mapping associated with
 the least key in this map, or null if the map is empty.
 The returned entry does not support
 the Entry.setValue method.

Specified by:
pollFirstEntry in interface NavigableMap<K,V>
Returns:
the removed first entry of this map,
         or null if this map is empty


"
ConcurrentSkipListMap,pollLastEntry(),"Map.Entry<K,V>","Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.","

pollLastEntry
public Map.Entry<K,V> pollLastEntry()
Removes and returns a key-value mapping associated with
 the greatest key in this map, or null if the map is empty.
 The returned entry does not support
 the Entry.setValue method.

Specified by:
pollLastEntry in interface NavigableMap<K,V>
Returns:
the removed last entry of this map,
         or null if this map is empty


"
ConcurrentSkipListMap,"put(K key, V value)",V,Associates the specified value with the specified key in this map.,"

put
public V put(K key,
             V value)
Associates the specified value with the specified key in this map.
 If the map previously contained a mapping for the key, the old
 value is replaced.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key or value is null


"
ConcurrentSkipListMap,"putIfAbsent(K key, V value)",V,"If the specified key is not already associated with a value, associate it with the given value.","

putIfAbsent
public V putIfAbsent(K key,
                     V value)
If the specified key is not already associated
 with a value, associate it with the given value.
 This is equivalent to
   
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 

 except that the action is performed atomically.

Specified by:
putIfAbsent in interface ConcurrentMap<K,V>
Specified by:
putIfAbsent in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key or value is null


"
ConcurrentSkipListMap,remove(Object key),V,Removes the mapping for the specified key from this map if present.,"

remove
public V remove(Object key)
Removes the mapping for the specified key from this map if present.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key for which mapping should be removed
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,"remove(Object key, Object value)",boolean,Removes the entry for a key only if currently mapped to a given value.,"

remove
public boolean remove(Object key,
                      Object value)
Removes the entry for a key only if currently mapped to a given value.
 This is equivalent to
   
 if (map.containsKey(key) && Objects.equals(map.get(key), value)) {
   map.remove(key);
   return true;
 } else
   return false;
 

 except that the action is performed atomically.

Specified by:
remove in interface ConcurrentMap<K,V>
Specified by:
remove in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value expected to be associated with the specified key
Returns:
true if the value was removed
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
ConcurrentSkipListMap,"replace(K key, V value)",V,Replaces the entry for a key only if currently mapped to some value.,"

replace
public V replace(K key,
                 V value)
Replaces the entry for a key only if currently mapped to some value.
 This is equivalent to
   
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key or value is null


"
ConcurrentSkipListMap,"replace(K key, V oldValue, V newValue)",boolean,Replaces the entry for a key only if currently mapped to a given value.,"

replace
public boolean replace(K key,
                       V oldValue,
                       V newValue)
Replaces the entry for a key only if currently mapped to a given value.
 This is equivalent to
   
 if (map.containsKey(key) && Objects.equals(map.get(key), oldValue)) {
   map.put(key, newValue);
   return true;
 } else
   return false;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
oldValue - value expected to be associated with the specified key
newValue - value to be associated with the specified key
Returns:
true if the value was replaced
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if any of the arguments are null


"
ConcurrentSkipListMap,"replaceAll(BiFunction<? super K,? super V,? extends V> function)",void,Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.,"

replaceAll
public void replaceAll(BiFunction<? super K,? super V,? extends V> function)
Description copied from interface: ConcurrentMap
Replaces each entry's value with the result of invoking the given
 function on that entry until all entries have been processed or the
 function throws an exception.  Exceptions thrown by the function are
 relayed to the caller.

Specified by:
replaceAll in interface ConcurrentMap<K,V>
Specified by:
replaceAll in interface Map<K,V>
Parameters:
function - the function to apply to each entry


"
ConcurrentSkipListMap,size(),int,Returns the number of key-value mappings in this map.,"

size
public int size()
Returns the number of key-value mappings in this map.  If this map
 contains more than Integer.MAX_VALUE elements, it
 returns Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these maps, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

Specified by:
size in interface Map<K,V>
Overrides:
size in class AbstractMap<K,V>
Returns:
the number of elements in this map


"
ConcurrentSkipListMap,"subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)","ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys range from fromKey to toKey.,"

subMap
public ConcurrentNavigableMap<K,V> subMap(K fromKey,
                                          boolean fromInclusive,
                                          K toKey,
                                          boolean toInclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys range from
 fromKey to toKey.  If fromKey and
 toKey are equal, the returned map is empty unless
 fromInclusive and toInclusive are both true.  The
 returned map is backed by this map, so changes in the returned map are
 reflected in this map, and vice-versa.  The returned map supports all
 optional map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside of its range, or to construct a
 submap either of whose endpoints lie outside its range.

Specified by:
subMap in interface ConcurrentNavigableMap<K,V>
Specified by:
subMap in interface NavigableMap<K,V>
Parameters:
fromKey - low endpoint of the keys in the returned map
fromInclusive - true if the low endpoint
        is to be included in the returned view
toKey - high endpoint of the keys in the returned map
toInclusive - true if the high endpoint
        is to be included in the returned view
Returns:
a view of the portion of this map whose keys range from
         fromKey to toKey
Throws:
ClassCastException - if fromKey and toKey
         cannot be compared to one another using this map's comparator
         (or, if the map has no comparator, using natural ordering).
         Implementations may, but are not required to, throw this
         exception if fromKey or toKey
         cannot be compared to keys currently in the map.
NullPointerException - if fromKey or toKey is null
IllegalArgumentException - if fromKey is greater than
         toKey; or if this map itself has a restricted
         range, and fromKey or toKey lies
         outside the bounds of the range


"
ConcurrentSkipListMap,"subMap(K fromKey, K toKey)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive.","

subMap
public ConcurrentNavigableMap<K,V> subMap(K fromKey,
                                          K toKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys range from
 fromKey, inclusive, to toKey, exclusive.  (If
 fromKey and toKey are equal, the returned map
 is empty.)  The returned map is backed by this map, so changes
 in the returned map are reflected in this map, and vice-versa.
 The returned map supports all optional map operations that this
 map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside its range.

 Equivalent to subMap(fromKey, true, toKey, false).

Specified by:
subMap in interface ConcurrentNavigableMap<K,V>
Specified by:
subMap in interface NavigableMap<K,V>
Specified by:
subMap in interface SortedMap<K,V>
Parameters:
fromKey - low endpoint (inclusive) of the keys in the returned map
toKey - high endpoint (exclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys range from
         fromKey, inclusive, to toKey, exclusive
Throws:
ClassCastException - if fromKey and toKey
         cannot be compared to one another using this map's comparator
         (or, if the map has no comparator, using natural ordering).
         Implementations may, but are not required to, throw this
         exception if fromKey or toKey
         cannot be compared to keys currently in the map.
NullPointerException - if fromKey or toKey is null
IllegalArgumentException - if fromKey is greater than
         toKey; or if this map itself has a restricted
         range, and fromKey or toKey lies
         outside the bounds of the range


"
ConcurrentSkipListMap,tailMap(K fromKey),"ConcurrentNavigableMap<K,V>",Returns a view of the portion of this map whose keys are greater than or equal to fromKey.,"

tailMap
public ConcurrentNavigableMap<K,V> tailMap(K fromKey)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are
 greater than or equal to fromKey.  The returned map is
 backed by this map, so changes in the returned map are
 reflected in this map, and vice-versa.  The returned map
 supports all optional map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside its range.

 Equivalent to tailMap(fromKey, true).

Specified by:
tailMap in interface ConcurrentNavigableMap<K,V>
Specified by:
tailMap in interface NavigableMap<K,V>
Specified by:
tailMap in interface SortedMap<K,V>
Parameters:
fromKey - low endpoint (inclusive) of the keys in the returned map
Returns:
a view of the portion of this map whose keys are greater
         than or equal to fromKey
Throws:
ClassCastException - if fromKey is not compatible
         with this map's comparator (or, if the map has no comparator,
         if fromKey does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if fromKey cannot be compared to keys
         currently in the map.
NullPointerException - if fromKey is null
IllegalArgumentException - if this map itself has a
         restricted range, and fromKey lies outside the
         bounds of the range


"
ConcurrentSkipListMap,"tailMap(K fromKey, boolean inclusive)","ConcurrentNavigableMap<K,V>","Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey.","

tailMap
public ConcurrentNavigableMap<K,V> tailMap(K fromKey,
                                           boolean inclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys are greater than (or
 equal to, if inclusive is true) fromKey.  The returned
 map is backed by this map, so changes in the returned map are reflected
 in this map, and vice-versa.  The returned map supports all optional
 map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside its range.

Specified by:
tailMap in interface ConcurrentNavigableMap<K,V>
Specified by:
tailMap in interface NavigableMap<K,V>
Parameters:
fromKey - low endpoint of the keys in the returned map
inclusive - true if the low endpoint
        is to be included in the returned view
Returns:
a view of the portion of this map whose keys are greater than
         (or equal to, if inclusive is true) fromKey
Throws:
ClassCastException - if fromKey is not compatible
         with this map's comparator (or, if the map has no comparator,
         if fromKey does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if fromKey cannot be compared to keys
         currently in the map.
NullPointerException - if fromKey is null
IllegalArgumentException - if this map itself has a
         restricted range, and fromKey lies outside the
         bounds of the range


"
ConcurrentSkipListMap,values(),Collection<V>,Returns a Collection view of the values contained in this map.,"

values
public Collection<V> values()
Returns a Collection view of the values contained in this map.
 The collection's iterator returns the values in ascending order
 of the corresponding keys. The collections's spliterator additionally
 reports Spliterator.CONCURRENT, Spliterator.NONNULL and
 Spliterator.ORDERED, with an encounter order that is ascending
 order of the corresponding keys.

 The collection is backed by the map, so changes to the map are
 reflected in the collection, and vice-versa.  The collection
 supports element removal, which removes the corresponding
 mapping from the map, via the Iterator.remove,
 Collection.remove, removeAll,
 retainAll and clear operations.  It does not
 support the add or addAll operations.

 The view's iterators and spliterators are
 weakly consistent.

Specified by:
values in interface Map<K,V>
Specified by:
values in interface SortedMap<K,V>
Overrides:
values in class AbstractMap<K,V>
Returns:
a collection view of the values contained in this map


"
ConcurrentSkipListSet,add(E e),boolean,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that e.equals(e2).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the
         specified element
Throws:
ClassCastException - if e cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,ceiling(E e),E,"Returns the least element in this set greater than or equal to the given element, or null if there is no such element.","

ceiling
public E ceiling(E e)
Description copied from interface: NavigableSet
Returns the least element in this set greater than or equal to
 the given element, or null if there is no such element.

Specified by:
ceiling in interface NavigableSet<E>
Parameters:
e - the value to match
Returns:
the least element greater than or equal to e,
         or null if there is no such element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in the set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,clear(),void,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
ConcurrentSkipListSet,clone(),ConcurrentSkipListSet<E>,Returns a shallow copy of this ConcurrentSkipListSet instance.,"

clone
public ConcurrentSkipListSet<E> clone()
Returns a shallow copy of this ConcurrentSkipListSet
 instance. (The elements themselves are not cloned.)

Overrides:
clone in class Object
Returns:
a shallow copy of this set
See Also:
Cloneable


"
ConcurrentSkipListSet,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements.","

comparator
public Comparator<? super E> comparator()
Description copied from interface: SortedSet
Returns the comparator used to order the elements in this set,
 or null if this set uses the natural ordering of its elements.

Specified by:
comparator in interface SortedSet<E>
Returns:
the comparator used to order the elements in this set,
         or null if this set uses the natural ordering
         of its elements


"
ConcurrentSkipListSet,contains(Object o),boolean,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this set
Returns:
true if this set contains the specified element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in this set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this set in descending order.,"

descendingIterator
public Iterator<E> descendingIterator()
Returns an iterator over the elements in this set in descending order.

Specified by:
descendingIterator in interface NavigableSet<E>
Returns:
an iterator over the elements in this set in descending order


"
ConcurrentSkipListSet,descendingSet(),NavigableSet<E>,Returns a reverse order view of the elements contained in this set.,"

descendingSet
public NavigableSet<E> descendingSet()
Returns a reverse order view of the elements contained in this set.
 The descending set is backed by this set, so changes to the set are
 reflected in the descending set, and vice-versa.

 The returned set has an ordering equivalent to
 Collections.reverseOrder(comparator()).
 The expression s.descendingSet().descendingSet() returns a
 view of s essentially equivalent to s.

Specified by:
descendingSet in interface NavigableSet<E>
Returns:
a reverse order view of this set


"
ConcurrentSkipListSet,equals(Object o),boolean,Compares the specified object with this set for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this set for equality.  Returns
 true if the specified object is also a set, the two sets
 have the same size, and every member of the specified set is
 contained in this set (or equivalently, every member of this set is
 contained in the specified set).  This definition ensures that the
 equals method works properly across different implementations of the
 set interface.

Specified by:
equals in interface Collection<E>
Specified by:
equals in interface Set<E>
Overrides:
equals in class AbstractSet<E>
Parameters:
o - the object to be compared for equality with this set
Returns:
true if the specified object is equal to this set
See Also:
Object.hashCode(), 
HashMap


"
ConcurrentSkipListSet,first(),E,Returns the first (lowest) element currently in this set.,"

first
public E first()
Description copied from interface: SortedSet
Returns the first (lowest) element currently in this set.

Specified by:
first in interface SortedSet<E>
Returns:
the first (lowest) element currently in this set
Throws:
NoSuchElementException - if this set is empty


"
ConcurrentSkipListSet,floor(E e),E,"Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.","

floor
public E floor(E e)
Description copied from interface: NavigableSet
Returns the greatest element in this set less than or equal to
 the given element, or null if there is no such element.

Specified by:
floor in interface NavigableSet<E>
Parameters:
e - the value to match
Returns:
the greatest element less than or equal to e,
         or null if there is no such element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in the set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,headSet(E toElement),NavigableSet<E>,Returns a view of the portion of this set whose elements are strictly less than toElement.,"

headSet
public NavigableSet<E> headSet(E toElement)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements are
 strictly less than toElement.  The returned set is
 backed by this set, so changes in the returned set are
 reflected in this set, and vice-versa.  The returned set
 supports all optional set operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

 Equivalent to headSet(toElement, false).

Specified by:
headSet in interface NavigableSet<E>
Specified by:
headSet in interface SortedSet<E>
Parameters:
toElement - high endpoint (exclusive) of the returned set
Returns:
a view of the portion of this set whose elements are strictly
         less than toElement
Throws:
ClassCastException - if toElement is not compatible
         with this set's comparator (or, if the set has no comparator,
         if toElement does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if toElement cannot be compared to elements
         currently in the set.
NullPointerException - if toElement is null
IllegalArgumentException - if this set itself has a
         restricted range, and toElement lies outside the
         bounds of the range


"
ConcurrentSkipListSet,"headSet(E toElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement.","

headSet
public NavigableSet<E> headSet(E toElement,
                               boolean inclusive)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements are less than
 (or equal to, if inclusive is true) toElement.  The
 returned set is backed by this set, so changes in the returned set are
 reflected in this set, and vice-versa.  The returned set supports all
 optional set operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

Specified by:
headSet in interface NavigableSet<E>
Parameters:
toElement - high endpoint of the returned set
inclusive - true if the high endpoint
        is to be included in the returned view
Returns:
a view of the portion of this set whose elements are less than
         (or equal to, if inclusive is true) toElement
Throws:
ClassCastException - if toElement is not compatible
         with this set's comparator (or, if the set has no comparator,
         if toElement does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if toElement cannot be compared to elements
         currently in the set.
NullPointerException - if toElement is null
IllegalArgumentException - if this set itself has a
         restricted range, and toElement lies outside the
         bounds of the range


"
ConcurrentSkipListSet,higher(E e),E,"Returns the least element in this set strictly greater than the given element, or null if there is no such element.","

higher
public E higher(E e)
Description copied from interface: NavigableSet
Returns the least element in this set strictly greater than the
 given element, or null if there is no such element.

Specified by:
higher in interface NavigableSet<E>
Parameters:
e - the value to match
Returns:
the least element greater than e,
         or null if there is no such element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in the set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,isEmpty(),boolean,Returns true if this set contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this set contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface Set<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this set contains no elements


"
ConcurrentSkipListSet,iterator(),Iterator<E>,Returns an iterator over the elements in this set in ascending order.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this set in ascending order.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface NavigableSet<E>
Specified by:
iterator in interface Set<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this set in ascending order


"
ConcurrentSkipListSet,last(),E,Returns the last (highest) element currently in this set.,"

last
public E last()
Description copied from interface: SortedSet
Returns the last (highest) element currently in this set.

Specified by:
last in interface SortedSet<E>
Returns:
the last (highest) element currently in this set
Throws:
NoSuchElementException - if this set is empty


"
ConcurrentSkipListSet,lower(E e),E,"Returns the greatest element in this set strictly less than the given element, or null if there is no such element.","

lower
public E lower(E e)
Description copied from interface: NavigableSet
Returns the greatest element in this set strictly less than the
 given element, or null if there is no such element.

Specified by:
lower in interface NavigableSet<E>
Parameters:
e - the value to match
Returns:
the greatest element less than e,
         or null if there is no such element
Throws:
ClassCastException - if the specified element cannot be
         compared with the elements currently in the set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,pollFirst(),E,"Retrieves and removes the first (lowest) element, or returns null if this set is empty.","

pollFirst
public E pollFirst()
Description copied from interface: NavigableSet
Retrieves and removes the first (lowest) element,
 or returns null if this set is empty.

Specified by:
pollFirst in interface NavigableSet<E>
Returns:
the first element, or null if this set is empty


"
ConcurrentSkipListSet,pollLast(),E,"Retrieves and removes the last (highest) element, or returns null if this set is empty.","

pollLast
public E pollLast()
Description copied from interface: NavigableSet
Retrieves and removes the last (highest) element,
 or returns null if this set is empty.

Specified by:
pollLast in interface NavigableSet<E>
Returns:
the last element, or null if this set is empty


"
ConcurrentSkipListSet,remove(Object o),boolean,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 o.equals(e), if this set contains such an element.
 Returns true if this set contained the element (or
 equivalently, if this set changed as a result of the call).
 (This set will not contain the element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element
Throws:
ClassCastException - if o cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
ConcurrentSkipListSet,removeAll(Collection<?> c),boolean,Removes from this set all of its elements that are contained in the specified collection.,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this set all of its elements that are contained in
 the specified collection.  If the specified collection is also
 a set, this operation effectively modifies this set so that its
 value is the asymmetric set difference of the two sets.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface Set<E>
Overrides:
removeAll in class AbstractSet<E>
Parameters:
c - collection containing elements to be removed from this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the types of one or more elements in this
         set are incompatible with the specified collection
NullPointerException - if the specified collection or any
         of its elements are null
See Also:
AbstractCollection.remove(Object), 
AbstractCollection.contains(Object)


"
ConcurrentSkipListSet,size(),int,Returns the number of elements in this set.,"

size
public int size()
Returns the number of elements in this set.  If this set
 contains more than Integer.MAX_VALUE elements, it
 returns Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these sets, determining the current
 number of elements requires traversing them all to count them.
 Additionally, it is possible for the size to change during
 execution of this method, in which case the returned result
 will be inaccurate. Thus, this method is typically not very
 useful in concurrent applications.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Set<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this set


"
ConcurrentSkipListSet,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this set.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this set.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.NONNULL, Spliterator.DISTINCT,
 Spliterator.SORTED and Spliterator.ORDERED, with an
 encounter order that is ascending order.  Overriding implementations
 should document the reporting of additional characteristic values.

 The spliterator's comparator (see
 Spliterator.getComparator()) is null if
 the set's comparator (see comparator()) is null.
 Otherwise, the spliterator's comparator is the same as or imposes the
 same total ordering as the set's comparator.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Specified by:
spliterator in interface Set<E>
Specified by:
spliterator in interface SortedSet<E>
Returns:
a Spliterator over the elements in this set
Since:
1.8


"
ConcurrentSkipListSet,"subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)",NavigableSet<E>,Returns a view of the portion of this set whose elements range from fromElement to toElement.,"

subSet
public NavigableSet<E> subSet(E fromElement,
                              boolean fromInclusive,
                              E toElement,
                              boolean toInclusive)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements range from
 fromElement to toElement.  If fromElement and
 toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true.  The returned set
 is backed by this set, so changes in the returned set are reflected in
 this set, and vice-versa.  The returned set supports all optional set
 operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

Specified by:
subSet in interface NavigableSet<E>
Parameters:
fromElement - low endpoint of the returned set
fromInclusive - true if the low endpoint
        is to be included in the returned view
toElement - high endpoint of the returned set
toInclusive - true if the high endpoint
        is to be included in the returned view
Returns:
a view of the portion of this set whose elements range from
         fromElement, inclusive, to toElement, exclusive
Throws:
ClassCastException - if fromElement and
         toElement cannot be compared to one another using this
         set's comparator (or, if the set has no comparator, using
         natural ordering).  Implementations may, but are not required
         to, throw this exception if fromElement or
         toElement cannot be compared to elements currently in
         the set.
NullPointerException - if fromElement or
         toElement is null
IllegalArgumentException - if fromElement is
         greater than toElement; or if this set itself
         has a restricted range, and fromElement or
         toElement lies outside the bounds of the range.


"
ConcurrentSkipListSet,"subSet(E fromElement, E toElement)",NavigableSet<E>,"Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.","

subSet
public NavigableSet<E> subSet(E fromElement,
                              E toElement)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements range
 from fromElement, inclusive, to toElement,
 exclusive.  (If fromElement and toElement are
 equal, the returned set is empty.)  The returned set is backed
 by this set, so changes in the returned set are reflected in
 this set, and vice-versa.  The returned set supports all
 optional set operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

 Equivalent to subSet(fromElement, true, toElement, false).

Specified by:
subSet in interface NavigableSet<E>
Specified by:
subSet in interface SortedSet<E>
Parameters:
fromElement - low endpoint (inclusive) of the returned set
toElement - high endpoint (exclusive) of the returned set
Returns:
a view of the portion of this set whose elements range from
         fromElement, inclusive, to toElement, exclusive
Throws:
ClassCastException - if fromElement and
         toElement cannot be compared to one another using this
         set's comparator (or, if the set has no comparator, using
         natural ordering).  Implementations may, but are not required
         to, throw this exception if fromElement or
         toElement cannot be compared to elements currently in
         the set.
NullPointerException - if fromElement or
         toElement is null
IllegalArgumentException - if fromElement is
         greater than toElement; or if this set itself
         has a restricted range, and fromElement or
         toElement lies outside the bounds of the range


"
ConcurrentSkipListSet,tailSet(E fromElement),NavigableSet<E>,Returns a view of the portion of this set whose elements are greater than or equal to fromElement.,"

tailSet
public NavigableSet<E> tailSet(E fromElement)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements are
 greater than or equal to fromElement.  The returned
 set is backed by this set, so changes in the returned set are
 reflected in this set, and vice-versa.  The returned set
 supports all optional set operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

 Equivalent to tailSet(fromElement, true).

Specified by:
tailSet in interface NavigableSet<E>
Specified by:
tailSet in interface SortedSet<E>
Parameters:
fromElement - low endpoint (inclusive) of the returned set
Returns:
a view of the portion of this set whose elements are greater
         than or equal to fromElement
Throws:
ClassCastException - if fromElement is not compatible
         with this set's comparator (or, if the set has no comparator,
         if fromElement does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if fromElement cannot be compared to elements
         currently in the set.
NullPointerException - if fromElement is null
IllegalArgumentException - if this set itself has a
         restricted range, and fromElement lies outside the
         bounds of the range


"
ConcurrentSkipListSet,"tailSet(E fromElement, boolean inclusive)",NavigableSet<E>,"Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.","

tailSet
public NavigableSet<E> tailSet(E fromElement,
                               boolean inclusive)
Description copied from interface: NavigableSet
Returns a view of the portion of this set whose elements are greater
 than (or equal to, if inclusive is true) fromElement.
 The returned set is backed by this set, so changes in the returned set
 are reflected in this set, and vice-versa.  The returned set supports
 all optional set operations that this set supports.

 The returned set will throw an IllegalArgumentException
 on an attempt to insert an element outside its range.

Specified by:
tailSet in interface NavigableSet<E>
Parameters:
fromElement - low endpoint of the returned set
inclusive - true if the low endpoint
        is to be included in the returned view
Returns:
a view of the portion of this set whose elements are greater
         than or equal to fromElement
Throws:
ClassCastException - if fromElement is not compatible
         with this set's comparator (or, if the set has no comparator,
         if fromElement does not implement Comparable).
         Implementations may, but are not required to, throw this
         exception if fromElement cannot be compared to elements
         currently in the set.
NullPointerException - if fromElement is null
IllegalArgumentException - if this set itself has a
         restricted range, and fromElement lies outside the
         bounds of the range


"
CopyOnWriteArrayList,add(E e),boolean,Appends the specified element to the end of this list.,"

add
public boolean add(E e)
Appends the specified element to the end of this list.

Specified by:
add in interface Collection<E>
Specified by:
add in interface List<E>
Parameters:
e - element to be appended to this list
Returns:
true (as specified by Collection.add(E))


"
CopyOnWriteArrayList,"add(int index, E element)",void,Inserts the specified element at the specified position in this list.,"

add
public void add(int index,
                E element)
Inserts the specified element at the specified position in this
 list. Shifts the element currently at that position (if any) and
 any subsequent elements to the right (adds one to their indices).

Specified by:
add in interface List<E>
Parameters:
index - index at which the specified element is to be inserted
element - element to be inserted
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
CopyOnWriteArrayList,addAll(Collection<? extends E> c),boolean,"Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.","

addAll
public boolean addAll(Collection<? extends E> c)
Appends all of the elements in the specified collection to the end
 of this list, in the order that they are returned by the specified
 collection's iterator.

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface List<E>
Parameters:
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
NullPointerException - if the specified collection is null
See Also:
add(Object)


"
CopyOnWriteArrayList,"addAll(int index, Collection<? extends E> c)",boolean,"Inserts all of the elements in the specified collection into this list, starting at the specified position.","

addAll
public boolean addAll(int index,
                      Collection<? extends E> c)
Inserts all of the elements in the specified collection into this
 list, starting at the specified position.  Shifts the element
 currently at that position (if any) and any subsequent elements to
 the right (increases their indices).  The new elements will appear
 in this list in the order that they are returned by the
 specified collection's iterator.

Specified by:
addAll in interface List<E>
Parameters:
index - index at which to insert the first element
        from the specified collection
c - collection containing elements to be added to this list
Returns:
true if this list changed as a result of the call
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())
NullPointerException - if the specified collection is null
See Also:
add(int,Object)


"
CopyOnWriteArrayList,addAllAbsent(Collection<? extends E> c),int,"Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.","

addAllAbsent
public int addAllAbsent(Collection<? extends E> c)
Appends all of the elements in the specified collection that
 are not already contained in this list, to the end of
 this list, in the order that they are returned by the
 specified collection's iterator.

Parameters:
c - collection containing elements to be added to this list
Returns:
the number of elements added
Throws:
NullPointerException - if the specified collection is null
See Also:
addIfAbsent(Object)


"
CopyOnWriteArrayList,addIfAbsent(E e),boolean,"Appends the element, if not present.","

addIfAbsent
public boolean addIfAbsent(E e)
Appends the element, if not present.

Parameters:
e - element to be added to this list, if absent
Returns:
true if the element was added


"
CopyOnWriteArrayList,clear(),void,Removes all of the elements from this list.,"

clear
public void clear()
Removes all of the elements from this list.
 The list will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface List<E>


"
CopyOnWriteArrayList,clone(),Object,Returns a shallow copy of this list.,"

clone
public Object clone()
Returns a shallow copy of this list.  (The elements themselves
 are not copied.)

Overrides:
clone in class Object
Returns:
a clone of this list
See Also:
Cloneable


"
CopyOnWriteArrayList,contains(Object o),boolean,Returns true if this list contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this list contains the specified element.
 More formally, returns true if and only if this list contains
 at least one element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface List<E>
Parameters:
o - element whose presence in this list is to be tested
Returns:
true if this list contains the specified element


"
CopyOnWriteArrayList,containsAll(Collection<?> c),boolean,Returns true if this list contains all of the elements of the specified collection.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns true if this list contains all of the elements of the
 specified collection.

Specified by:
containsAll in interface Collection<E>
Specified by:
containsAll in interface List<E>
Parameters:
c - collection to be checked for containment in this list
Returns:
true if this list contains all of the elements of the
         specified collection
Throws:
NullPointerException - if the specified collection is null
See Also:
contains(Object)


"
CopyOnWriteArrayList,equals(Object o),boolean,Compares the specified object with this list for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this list for equality.
 Returns true if the specified object is the same object
 as this object, or if it is also a List and the sequence
 of elements returned by an iterator
 over the specified list is the same as the sequence returned by
 an iterator over this list.  The two sequences are considered to
 be the same if they have the same length and corresponding
 elements at the same position in the sequence are equal.
 Two elements e1 and e2 are considered
 equal if (e1==null ? e2==null : e1.equals(e2)).

Specified by:
equals in interface Collection<E>
Specified by:
equals in interface List<E>
Overrides:
equals in class Object
Parameters:
o - the object to be compared for equality with this list
Returns:
true if the specified object is equal to this list
See Also:
Object.hashCode(), 
HashMap


"
CopyOnWriteArrayList,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.,"

forEach
public void forEach(Consumer<? super E> action)
Description copied from interface: Iterable
Performs the given action for each element of the Iterable
 until all elements have been processed or the action throws an
 exception.  Unless otherwise specified by the implementing class,
 actions are performed in the order of iteration (if an iteration order
 is specified).  Exceptions thrown by the action are relayed to the
 caller.

Specified by:
forEach in interface Iterable<E>
Parameters:
action - The action to be performed for each element


"
CopyOnWriteArrayList,get(int index),E,Returns the element at the specified position in this list.,"

get
public E get(int index)
Returns the element at the specified position in this list.

Specified by:
get in interface List<E>
Parameters:
index - index of the element to return
Returns:
the element at the specified position in this list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
CopyOnWriteArrayList,hashCode(),int,Returns the hash code value for this list.,"

hashCode
public int hashCode()
Returns the hash code value for this list.

 This implementation uses the definition in List.hashCode().

Specified by:
hashCode in interface Collection<E>
Specified by:
hashCode in interface List<E>
Overrides:
hashCode in class Object
Returns:
the hash code value for this list
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
CopyOnWriteArrayList,"indexOf(E e, int index)",int,"Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found.","

indexOf
public int indexOf(E e,
                   int index)
Returns the index of the first occurrence of the specified element in
 this list, searching forwards from index, or returns -1 if
 the element is not found.
 More formally, returns the lowest index i such that
 (i >= index && (e==null ? get(i)==null : e.equals(get(i)))),
 or -1 if there is no such index.

Parameters:
e - element to search for
index - index to start searching from
Returns:
the index of the first occurrence of the element in
         this list at position index or later in the list;
         -1 if the element is not found.
Throws:
IndexOutOfBoundsException - if the specified index is negative


"
CopyOnWriteArrayList,indexOf(Object o),int,"Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.","

indexOf
public int indexOf(Object o)
Returns the index of the first occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the lowest index i such that
 (o==null ? get(i)==null : o.equals(get(i))),
 or -1 if there is no such index.

Specified by:
indexOf in interface List<E>
Parameters:
o - element to search for
Returns:
the index of the first occurrence of the specified element in
         this list, or -1 if this list does not contain the element


"
CopyOnWriteArrayList,isEmpty(),boolean,Returns true if this list contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this list contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface List<E>
Returns:
true if this list contains no elements


"
CopyOnWriteArrayList,iterator(),Iterator<E>,Returns an iterator over the elements in this list in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this list in proper sequence.

 The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does NOT support the
 remove method.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface List<E>
Returns:
an iterator over the elements in this list in proper sequence


"
CopyOnWriteArrayList,"lastIndexOf(E e, int index)",int,"Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found.","

lastIndexOf
public int lastIndexOf(E e,
                       int index)
Returns the index of the last occurrence of the specified element in
 this list, searching backwards from index, or returns -1 if
 the element is not found.
 More formally, returns the highest index i such that
 (i <= index && (e==null ? get(i)==null : e.equals(get(i)))),
 or -1 if there is no such index.

Parameters:
e - element to search for
index - index to start searching backwards from
Returns:
the index of the last occurrence of the element at position
         less than or equal to index in this list;
         -1 if the element is not found.
Throws:
IndexOutOfBoundsException - if the specified index is greater
         than or equal to the current size of this list


"
CopyOnWriteArrayList,lastIndexOf(Object o),int,"Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element.","

lastIndexOf
public int lastIndexOf(Object o)
Returns the index of the last occurrence of the specified element
 in this list, or -1 if this list does not contain the element.
 More formally, returns the highest index i such that
 (o==null ? get(i)==null : o.equals(get(i))),
 or -1 if there is no such index.

Specified by:
lastIndexOf in interface List<E>
Parameters:
o - element to search for
Returns:
the index of the last occurrence of the specified element in
         this list, or -1 if this list does not contain the element


"
CopyOnWriteArrayList,listIterator(),ListIterator<E>,Returns a list iterator over the elements in this list (in proper sequence).,"

listIterator
public ListIterator<E> listIterator()
Returns a list iterator over the elements in this list (in proper
 sequence).

 The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does NOT support the
 remove, set or add methods.

Specified by:
listIterator in interface List<E>
Returns:
a list iterator over the elements in this list (in proper
         sequence)


"
CopyOnWriteArrayList,listIterator(int index),ListIterator<E>,"Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.","

listIterator
public ListIterator<E> listIterator(int index)
Returns a list iterator over the elements in this list (in proper
 sequence), starting at the specified position in the list.
 The specified index indicates the first element that would be
 returned by an initial call to next.
 An initial call to previous would
 return the element with the specified index minus one.

 The returned iterator provides a snapshot of the state of the list
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does NOT support the
 remove, set or add methods.

Specified by:
listIterator in interface List<E>
Parameters:
index - index of the first element to be returned from the
        list iterator (by a call to next)
Returns:
a list iterator over the elements in this list (in proper
         sequence), starting at the specified position in the list
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index > size())


"
CopyOnWriteArrayList,remove(int index),E,Removes the element at the specified position in this list.,"

remove
public E remove(int index)
Removes the element at the specified position in this list.
 Shifts any subsequent elements to the left (subtracts one from their
 indices).  Returns the element that was removed from the list.

Specified by:
remove in interface List<E>
Parameters:
index - the index of the element to be removed
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
CopyOnWriteArrayList,remove(Object o),boolean,"Removes the first occurrence of the specified element from this list, if it is present.","

remove
public boolean remove(Object o)
Removes the first occurrence of the specified element from this list,
 if it is present.  If this list does not contain the element, it is
 unchanged.  More formally, removes the element with the lowest index
 i such that
 (o==null ? get(i)==null : o.equals(get(i)))
 (if such an element exists).  Returns true if this list
 contained the specified element (or equivalently, if this list
 changed as a result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface List<E>
Parameters:
o - element to be removed from this list, if present
Returns:
true if this list contained the specified element


"
CopyOnWriteArrayList,removeAll(Collection<?> c),boolean,Removes from this list all of its elements that are contained in the specified collection.,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this list all of its elements that are contained in
 the specified collection. This is a particularly expensive operation
 in this class because of the need for an internal temporary array.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface List<E>
Parameters:
c - collection containing elements to be removed from this list
Returns:
true if this list changed as a result of the call
Throws:
ClassCastException - if the class of an element of this list
         is incompatible with the specified collection
         (optional)
NullPointerException - if this list contains a null element and the
         specified collection does not permit null elements
         (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
CopyOnWriteArrayList,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.,"

removeIf
public boolean removeIf(Predicate<? super E> filter)
Description copied from interface: Collection
Removes all of the elements of this collection that satisfy the given
 predicate.  Errors or runtime exceptions thrown during iteration or by
 the predicate are relayed to the caller.

Specified by:
removeIf in interface Collection<E>
Parameters:
filter - a predicate which returns true for elements to be
        removed
Returns:
true if any elements were removed


"
CopyOnWriteArrayList,replaceAll(UnaryOperator<E> operator),void,Replaces each element of this list with the result of applying the operator to that element.,"

replaceAll
public void replaceAll(UnaryOperator<E> operator)
Description copied from interface: List
Replaces each element of this list with the result of applying the
 operator to that element.  Errors or runtime exceptions thrown by
 the operator are relayed to the caller.

Specified by:
replaceAll in interface List<E>
Parameters:
operator - the operator to apply to each element


"
CopyOnWriteArrayList,retainAll(Collection<?> c),boolean,Retains only the elements in this list that are contained in the specified collection.,"

retainAll
public boolean retainAll(Collection<?> c)
Retains only the elements in this list that are contained in the
 specified collection.  In other words, removes from this list all of
 its elements that are not contained in the specified collection.

Specified by:
retainAll in interface Collection<E>
Specified by:
retainAll in interface List<E>
Parameters:
c - collection containing elements to be retained in this list
Returns:
true if this list changed as a result of the call
Throws:
ClassCastException - if the class of an element of this list
         is incompatible with the specified collection
         (optional)
NullPointerException - if this list contains a null element and the
         specified collection does not permit null elements
         (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
CopyOnWriteArrayList,"set(int index, E element)",E,Replaces the element at the specified position in this list with the specified element.,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element.

Specified by:
set in interface List<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
CopyOnWriteArrayList,size(),int,Returns the number of elements in this list.,"

size
public int size()
Returns the number of elements in this list.

Specified by:
size in interface Collection<E>
Specified by:
size in interface List<E>
Returns:
the number of elements in this list


"
CopyOnWriteArrayList,sort(Comparator<? super E> c),void,Sorts this list according to the order induced by the specified Comparator.,"

sort
public void sort(Comparator<? super E> c)
Description copied from interface: List
Sorts this list according to the order induced by the specified
 Comparator.

 All elements in this list must be mutually comparable using the
 specified comparator (that is, c.compare(e1, e2) must not throw
 a ClassCastException for any elements e1 and e2
 in the list).

 If the specified comparator is null then all elements in this
 list must implement the Comparable interface and the elements'
 natural ordering should be used.

 This list must be modifiable, but need not be resizable.

Specified by:
sort in interface List<E>
Parameters:
c - the Comparator used to compare list elements.
          A null value indicates that the elements'
          natural ordering should be used


"
CopyOnWriteArrayList,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this list.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this list.

 The Spliterator reports Spliterator.IMMUTABLE,
 Spliterator.ORDERED, Spliterator.SIZED, and
 Spliterator.SUBSIZED.

 The spliterator provides a snapshot of the state of the list
 when the spliterator was constructed. No synchronization is needed while
 operating on the spliterator.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Specified by:
spliterator in interface List<E>
Returns:
a Spliterator over the elements in this list
Since:
1.8


"
CopyOnWriteArrayList,"subList(int fromIndex, int toIndex)",List<E>,"Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive.","

subList
public List<E> subList(int fromIndex,
                       int toIndex)
Returns a view of the portion of this list between
 fromIndex, inclusive, and toIndex, exclusive.
 The returned list is backed by this list, so changes in the
 returned list are reflected in this list.

 The semantics of the list returned by this method become
 undefined if the backing list (i.e., this list) is modified in
 any way other than via the returned list.

Specified by:
subList in interface List<E>
Parameters:
fromIndex - low endpoint (inclusive) of the subList
toIndex - high endpoint (exclusive) of the subList
Returns:
a view of the specified range within this list
Throws:
IndexOutOfBoundsException - for an illegal endpoint index value
         (fromIndex < 0 || toIndex > size ||
         fromIndex > toIndex)


"
CopyOnWriteArrayList,toArray(),Object[],Returns an array containing all of the elements in this list in proper sequence (from first to last element).,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 The returned array will be ""safe"" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface List<E>
Returns:
an array containing all the elements in this list
See Also:
Arrays.asList(Object[])


"
CopyOnWriteArrayList,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this list in
 proper sequence (from first to last element); the runtime type of
 the returned array is that of the specified array.  If the list fits
 in the specified array, it is returned therein.  Otherwise, a new
 array is allocated with the runtime type of the specified array and
 the size of this list.

 If this list fits in the specified array with room to spare
 (i.e., the array has more elements than this list), the element in
 the array immediately following the end of the list is set to
 null.  (This is useful in determining the length of this
 list only if the caller knows that this list does not contain
 any null elements.)

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a list known to contain only strings.
 The following code can be used to dump the list into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface List<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the list are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose.
Returns:
an array containing all the elements in this list
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this list
NullPointerException - if the specified array is null


"
CopyOnWriteArrayList,toString(),String,Returns a string representation of this list.,"

toString
public String toString()
Returns a string representation of this list.  The string
 representation consists of the string representations of the list's
 elements in the order they are returned by its iterator, enclosed in
 square brackets (""[]"").  Adjacent elements are separated by
 the characters "", "" (comma and space).  Elements are
 converted to strings as by String.valueOf(Object).

Overrides:
toString in class Object
Returns:
a string representation of this list


"
CopyOnWriteArraySet,add(E e),boolean,Adds the specified element to this set if it is not already present.,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that
 (e==null ? e2==null : e.equals(e2)).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the specified
         element


"
CopyOnWriteArraySet,addAll(Collection<? extends E> c),boolean,Adds all of the elements in the specified collection to this set if they're not already present.,"

addAll
public boolean addAll(Collection<? extends E> c)
Adds all of the elements in the specified collection to this set if
 they're not already present.  If the specified collection is also a
 set, the addAll operation effectively modifies this set so
 that its value is the union of the two sets.  The behavior of
 this operation is undefined if the specified collection is modified
 while the operation is in progress.

Specified by:
addAll in interface Collection<E>
Specified by:
addAll in interface Set<E>
Overrides:
addAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be added to this set
Returns:
true if this set changed as a result of the call
Throws:
NullPointerException - if the specified collection is null
See Also:
add(Object)


"
CopyOnWriteArraySet,clear(),void,Removes all of the elements from this set.,"

clear
public void clear()
Removes all of the elements from this set.
 The set will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
CopyOnWriteArraySet,contains(Object o),boolean,Returns true if this set contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this set is to be tested
Returns:
true if this set contains the specified element


"
CopyOnWriteArraySet,containsAll(Collection<?> c),boolean,Returns true if this set contains all of the elements of the specified collection.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns true if this set contains all of the elements of the
 specified collection.  If the specified collection is also a set, this
 method returns true if it is a subset of this set.

Specified by:
containsAll in interface Collection<E>
Specified by:
containsAll in interface Set<E>
Overrides:
containsAll in class AbstractCollection<E>
Parameters:
c - collection to be checked for containment in this set
Returns:
true if this set contains all of the elements of the
         specified collection
Throws:
NullPointerException - if the specified collection is null
See Also:
contains(Object)


"
CopyOnWriteArraySet,equals(Object o),boolean,Compares the specified object with this set for equality.,"

equals
public boolean equals(Object o)
Compares the specified object with this set for equality.
 Returns true if the specified object is the same object
 as this object, or if it is also a Set and the elements
 returned by an iterator over the
 specified set are the same as the elements returned by an
 iterator over this set.  More formally, the two iterators are
 considered to return the same elements if they return the same
 number of elements and for every element e1 returned by
 the iterator over the specified set, there is an element
 e2 returned by the iterator over this set such that
 (e1==null ? e2==null : e1.equals(e2)).

Specified by:
equals in interface Collection<E>
Specified by:
equals in interface Set<E>
Overrides:
equals in class AbstractSet<E>
Parameters:
o - object to be compared for equality with this set
Returns:
true if the specified object is equal to this set
See Also:
Object.hashCode(), 
HashMap


"
CopyOnWriteArraySet,forEach(Consumer<? super E> action),void,Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.,"

forEach
public void forEach(Consumer<? super E> action)
Description copied from interface: Iterable
Performs the given action for each element of the Iterable
 until all elements have been processed or the action throws an
 exception.  Unless otherwise specified by the implementing class,
 actions are performed in the order of iteration (if an iteration order
 is specified).  Exceptions thrown by the action are relayed to the
 caller.

Specified by:
forEach in interface Iterable<E>
Parameters:
action - The action to be performed for each element


"
CopyOnWriteArraySet,isEmpty(),boolean,Returns true if this set contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this set contains no elements.

Specified by:
isEmpty in interface Collection<E>
Specified by:
isEmpty in interface Set<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this set contains no elements


"
CopyOnWriteArraySet,iterator(),Iterator<E>,Returns an iterator over the elements contained in this set in the order in which these elements were added.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements contained in this set
 in the order in which these elements were added.

 The returned iterator provides a snapshot of the state of the set
 when the iterator was constructed. No synchronization is needed while
 traversing the iterator. The iterator does NOT support the
 remove method.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface Set<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this set


"
CopyOnWriteArraySet,remove(Object o),boolean,Removes the specified element from this set if it is present.,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 (o==null ? e==null : o.equals(e)),
 if this set contains such an element.  Returns true if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element


"
CopyOnWriteArraySet,removeAll(Collection<?> c),boolean,Removes from this set all of its elements that are contained in the specified collection.,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this set all of its elements that are contained in the
 specified collection.  If the specified collection is also a set,
 this operation effectively modifies this set so that its value is the
 asymmetric set difference of the two sets.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface Set<E>
Overrides:
removeAll in class AbstractSet<E>
Parameters:
c - collection containing elements to be removed from this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the class of an element of this set
         is incompatible with the specified collection (optional)
NullPointerException - if this set contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
CopyOnWriteArraySet,removeIf(Predicate<? super E> filter),boolean,Removes all of the elements of this collection that satisfy the given predicate.,"

removeIf
public boolean removeIf(Predicate<? super E> filter)
Description copied from interface: Collection
Removes all of the elements of this collection that satisfy the given
 predicate.  Errors or runtime exceptions thrown during iteration or by
 the predicate are relayed to the caller.

Specified by:
removeIf in interface Collection<E>
Parameters:
filter - a predicate which returns true for elements to be
        removed
Returns:
true if any elements were removed


"
CopyOnWriteArraySet,retainAll(Collection<?> c),boolean,Retains only the elements in this set that are contained in the specified collection.,"

retainAll
public boolean retainAll(Collection<?> c)
Retains only the elements in this set that are contained in the
 specified collection.  In other words, removes from this set all of
 its elements that are not contained in the specified collection.  If
 the specified collection is also a set, this operation effectively
 modifies this set so that its value is the intersection of the
 two sets.

Specified by:
retainAll in interface Collection<E>
Specified by:
retainAll in interface Set<E>
Overrides:
retainAll in class AbstractCollection<E>
Parameters:
c - collection containing elements to be retained in this set
Returns:
true if this set changed as a result of the call
Throws:
ClassCastException - if the class of an element of this set
         is incompatible with the specified collection (optional)
NullPointerException - if this set contains a null element and the
         specified collection does not permit null elements (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
CopyOnWriteArraySet,size(),int,Returns the number of elements in this set.,"

size
public int size()
Returns the number of elements in this set.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Set<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this set


"
CopyOnWriteArraySet,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this set in the order in which these elements were added.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this set in the order
 in which these elements were added.

 The Spliterator reports Spliterator.IMMUTABLE,
 Spliterator.DISTINCT, Spliterator.SIZED, and
 Spliterator.SUBSIZED.

 The spliterator provides a snapshot of the state of the set
 when the spliterator was constructed. No synchronization is needed while
 operating on the spliterator.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Specified by:
spliterator in interface Set<E>
Returns:
a Spliterator over the elements in this set
Since:
1.8


"
CopyOnWriteArraySet,toArray(),Object[],Returns an array containing all of the elements in this set.,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this set.
 If this set makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the
 elements in the same order.

 The returned array will be ""safe"" in that no references to it
 are maintained by this set.  (In other words, this method must
 allocate a new array even if this set is backed by an array).
 The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface Set<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all the elements in this set


"
CopyOnWriteArraySet,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this set; the
 runtime type of the returned array is that of the specified array.
 If the set fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this set.

 If this set fits in the specified array with room to spare
 (i.e., the array has more elements than this set), the element in
 the array immediately following the end of the set is set to
 null.  (This is useful in determining the length of this
 set only if the caller knows that this set does not contain
 any null elements.)

 If this set makes any guarantees as to what order its elements
 are returned by its iterator, this method must return the elements
 in the same order.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a set known to contain only strings.
 The following code can be used to dump the set into a newly allocated
 array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface Set<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of this set are to be
        stored, if it is big enough; otherwise, a new array of the same
        runtime type is allocated for this purpose.
Returns:
an array containing all the elements in this set
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in this
         set
NullPointerException - if the specified array is null


"
CountDownLatch,await(),void,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted.","

await
public void await()
           throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted.

 If the current count is zero then this method returns immediately.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of two things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
CountDownLatch,"await(long timeout, TimeUnit unit)",boolean,"Causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted, or the specified waiting time elapses.","

await
public boolean await(long timeout,
                     TimeUnit unit)
              throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted,
 or the specified waiting time elapses.

 If the current count is zero then this method returns immediately
 with the value true.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of three things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the count reaches zero then the method returns with the
 value true.

 If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if the count reached zero and false
         if the waiting time elapsed before the count reached zero
Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
CountDownLatch,countDown(),void,"Decrements the count of the latch, releasing all waiting threads if the count reaches zero.","

countDown
public void countDown()
Decrements the count of the latch, releasing all waiting threads if
 the count reaches zero.

 If the current count is greater than zero then it is decremented.
 If the new count is zero then all waiting threads are re-enabled for
 thread scheduling purposes.

 If the current count equals zero then nothing happens.

"
CountDownLatch,getCount(),long,Returns the current count.,"

getCount
public long getCount()
Returns the current count.

 This method is typically used for debugging and testing purposes.

Returns:
the current count


"
CountDownLatch,toString(),String,"Returns a string identifying this latch, as well as its state.","

toString
public String toString()
Returns a string identifying this latch, as well as its state.
 The state, in brackets, includes the String ""Count =""
 followed by the current count.

Overrides:
toString in class Object
Returns:
a string identifying this latch, as well as its state


"
CountedCompleter,addToPendingCount(int delta),void,Adds (atomically) the given value to the pending count.,"

addToPendingCount
public final void addToPendingCount(int delta)
Adds (atomically) the given value to the pending count.

Parameters:
delta - the value to add


"
CountedCompleter,"compareAndSetPendingCount(int expected, int count)",boolean,Sets (atomically) the pending count to the given count only if it currently holds the given expected value.,"

compareAndSetPendingCount
public final boolean compareAndSetPendingCount(int expected,
                                               int count)
Sets (atomically) the pending count to the given count only if
 it currently holds the given expected value.

Parameters:
expected - the expected value
count - the new value
Returns:
true if successful


"
CountedCompleter,complete(T rawResult),void,"Regardless of pending count, invokes onCompletion(CountedCompleter), marks this task as complete and further triggers tryComplete() on this task's completer, if one exists.","

complete
public void complete(T rawResult)
Regardless of pending count, invokes
 onCompletion(CountedCompleter), marks this task as
 complete and further triggers tryComplete() on this
 task's completer, if one exists.  The given rawResult is
 used as an argument to setRawResult(T) before invoking
 onCompletion(CountedCompleter) or marking this task
 as complete; its value is meaningful only for classes
 overriding setRawResult.  This method does not modify
 the pending count.

 This method may be useful when forcing completion as soon as
 any one (versus all) of several subtask results are obtained.
 However, in the common (and recommended) case in which setRawResult is not overridden, this effect can be obtained
 more simply using quietlyCompleteRoot();.

Overrides:
complete in class ForkJoinTask<T>
Parameters:
rawResult - the raw result


"
CountedCompleter,compute(),abstract void,The main computation performed by this task.,"

compute
public abstract void compute()
The main computation performed by this task.

"
CountedCompleter,decrementPendingCountUnlessZero(),int,"If the pending count is nonzero, (atomically) decrements it.","

decrementPendingCountUnlessZero
public final int decrementPendingCountUnlessZero()
If the pending count is nonzero, (atomically) decrements it.

Returns:
the initial (undecremented) pending count holding on entry
 to this method


"
CountedCompleter,exec(),protected boolean,Implements execution conventions for CountedCompleters.,"

exec
protected final boolean exec()
Implements execution conventions for CountedCompleters.

Specified by:
exec in class ForkJoinTask<T>
Returns:
true if this task is known to have completed normally


"
CountedCompleter,firstComplete(),CountedCompleter<?>,"If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns null.","

firstComplete
public final CountedCompleter<?> firstComplete()
If this task's pending count is zero, returns this task;
 otherwise decrements its pending count and returns null. This method is designed to be used with nextComplete() in completion traversal loops.

Returns:
this task, if pending count was zero, else null


"
CountedCompleter,getCompleter(),CountedCompleter<?>,"Returns the completer established in this task's constructor, or null if none.","

getCompleter
public final CountedCompleter<?> getCompleter()
Returns the completer established in this task's constructor,
 or null if none.

Returns:
the completer


"
CountedCompleter,getPendingCount(),int,Returns the current pending count.,"

getPendingCount
public final int getPendingCount()
Returns the current pending count.

Returns:
the current pending count


"
CountedCompleter,getRawResult(),T,Returns the result of the computation.,"

getRawResult
public T getRawResult()
Returns the result of the computation. By default
 returns null, which is appropriate for Void
 actions, but in other cases should be overridden, almost
 always to return a field or function of a field that
 holds the result upon completion.

Specified by:
getRawResult in class ForkJoinTask<T>
Returns:
the result of the computation


"
CountedCompleter,getRoot(),CountedCompleter<?>,"Returns the root of the current computation; i.e., this task if it has no completer, else its completer's root.","

getRoot
public final CountedCompleter<?> getRoot()
Returns the root of the current computation; i.e., this
 task if it has no completer, else its completer's root.

Returns:
the root of the current computation


"
CountedCompleter,helpComplete(int maxTasks),void,"If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.","

helpComplete
public final void helpComplete(int maxTasks)
If this task has not completed, attempts to process at most the
 given number of other unprocessed tasks for which this task is
 on the completion path, if any are known to exist.

Parameters:
maxTasks - the maximum number of tasks to process.  If
                 less than or equal to zero, then no tasks are
                 processed.


"
CountedCompleter,nextComplete(),CountedCompleter<?>,"If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null.","

nextComplete
public final CountedCompleter<?> nextComplete()
If this task does not have a completer, invokes ForkJoinTask.quietlyComplete() and returns null.  Or, if
 the completer's pending count is non-zero, decrements that
 pending count and returns null.  Otherwise, returns the
 completer.  This method can be used as part of a completion
 traversal loop for homogeneous task hierarchies:

  
 for (CountedCompleter<?> c = firstComplete();
      c != null;
      c = c.nextComplete()) {
   // ... process c ...
 }

Returns:
the completer, or null if none


"
CountedCompleter,onCompletion(CountedCompleter<?> caller),void,"Performs an action when method tryComplete() is invoked and the pending count is zero, or when the unconditional method complete(T) is invoked.","

onCompletion
public void onCompletion(CountedCompleter<?> caller)
Performs an action when method tryComplete() is invoked
 and the pending count is zero, or when the unconditional
 method complete(T) is invoked.  By default, this method
 does nothing. You can distinguish cases by checking the
 identity of the given caller argument. If not equal to this, then it is typically a subtask that may contain results
 (and/or links to other results) to combine.

Parameters:
caller - the task invoking this method (which may
 be this task itself)


"
CountedCompleter,"onExceptionalCompletion(Throwable ex, CountedCompleter<?> caller)",boolean,"Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already otherwise completed normally.","

onExceptionalCompletion
public boolean onExceptionalCompletion(Throwable ex,
                                       CountedCompleter<?> caller)
Performs an action when method ForkJoinTask.completeExceptionally(Throwable) is invoked or method compute() throws an exception, and this task has not already
 otherwise completed normally. On entry to this method, this task
 ForkJoinTask.isCompletedAbnormally().  The return value
 of this method controls further propagation: If true
 and this task has a completer that has not completed, then that
 completer is also completed exceptionally, with the same
 exception as this completer.  The default implementation of
 this method does nothing except return true.

Parameters:
ex - the exception
caller - the task invoking this method (which may
 be this task itself)
Returns:
true if this exception should be propagated to this
 task's completer, if one exists


"
CountedCompleter,propagateCompletion(),void,"Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task's completer, if one exists, else marks this task as complete.","

propagateCompletion
public final void propagateCompletion()
Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path:
 If the pending count is nonzero, decrements the count;
 otherwise, similarly tries to complete this task's completer, if
 one exists, else marks this task as complete. This method may be
 useful in cases where onCompletion should not, or need
 not, be invoked for each completer in a computation.

"
CountedCompleter,quietlyCompleteRoot(),void,Equivalent to getRoot().quietlyComplete().,"

quietlyCompleteRoot
public final void quietlyCompleteRoot()
Equivalent to getRoot().quietlyComplete().

"
CountedCompleter,setPendingCount(int count),void,Sets the pending count to the given value.,"

setPendingCount
public final void setPendingCount(int count)
Sets the pending count to the given value.

Parameters:
count - the count


"
CountedCompleter,setRawResult(T t),protected void,A method that result-bearing CountedCompleters may optionally use to help maintain result data.,"

setRawResult
protected void setRawResult(T t)
A method that result-bearing CountedCompleters may optionally
 use to help maintain result data.  By default, does nothing.
 Overrides are not recommended. However, if this method is
 overridden to update existing objects or fields, then it must
 in general be defined to be thread-safe.

Specified by:
setRawResult in class ForkJoinTask<T>
Parameters:
t - the value


"
CountedCompleter,tryComplete(),void,"If the pending count is nonzero, decrements the count; otherwise invokes onCompletion(CountedCompleter) and then similarly tries to complete this task's completer, if one exists, else marks this task as complete.","

tryComplete
public final void tryComplete()
If the pending count is nonzero, decrements the count;
 otherwise invokes onCompletion(CountedCompleter)
 and then similarly tries to complete this task's completer,
 if one exists, else marks this task as complete.

"
CyclicBarrier,await(),int,Waits until all parties have invoked await on this barrier.,"

await
public int await()
          throws InterruptedException,
                 BrokenBarrierException
Waits until all parties have invoked
 await on this barrier.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while waiting,
 then all other waiting threads will throw
 BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was
         broken when await was called, or the barrier
         action (if present) failed due to an exception


"
CyclicBarrier,"await(long timeout, TimeUnit unit)",int,"Waits until all parties have invoked await on this barrier, or the specified waiting time elapses.","

await
public int await(long timeout,
                 TimeUnit unit)
          throws InterruptedException,
                 BrokenBarrierException,
                 TimeoutException
Waits until all parties have invoked
 await on this barrier, or the specified waiting time elapses.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 The specified timeout elapses; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException
 is thrown. If the time is less than or equal to zero, the
 method will not wait at all.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while
 waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Parameters:
timeout - the time to wait for the barrier
unit - the time unit of the timeout parameter
Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
TimeoutException - if the specified timeout elapses.
         In this case the barrier will be broken.
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was broken
         when await was called, or the barrier action (if
         present) failed due to an exception


"
CyclicBarrier,getNumberWaiting(),int,Returns the number of parties currently waiting at the barrier.,"

getNumberWaiting
public int getNumberWaiting()
Returns the number of parties currently waiting at the barrier.
 This method is primarily useful for debugging and assertions.

Returns:
the number of parties currently blocked in await()


"
CyclicBarrier,getParties(),int,Returns the number of parties required to trip this barrier.,"

getParties
public int getParties()
Returns the number of parties required to trip this barrier.

Returns:
the number of parties required to trip this barrier


"
CyclicBarrier,isBroken(),boolean,Queries if this barrier is in a broken state.,"

isBroken
public boolean isBroken()
Queries if this barrier is in a broken state.

Returns:
true if one or more parties broke out of this
         barrier due to interruption or timeout since
         construction or the last reset, or a barrier action
         failed due to an exception; false otherwise.


"
CyclicBarrier,reset(),void,Resets the barrier to its initial state.,"

reset
public void reset()
Resets the barrier to its initial state.  If any parties are
 currently waiting at the barrier, they will return with a
 BrokenBarrierException. Note that resets after
 a breakage has occurred for other reasons can be complicated to
 carry out; threads need to re-synchronize in some other way,
 and choose one to perform the reset.  It may be preferable to
 instead create a new barrier for subsequent use.

"
DelayQueue,add(E e),boolean,Inserts the specified element into this delay queue.,"

add
public boolean add(E e)
Inserts the specified element into this delay queue.

Specified by:
add in interface Collection<E extends Delayed>
Specified by:
add in interface BlockingQueue<E extends Delayed>
Specified by:
add in interface Queue<E extends Delayed>
Overrides:
add in class AbstractQueue<E extends Delayed>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
DelayQueue,clear(),void,Atomically removes all of the elements from this delay queue.,"

clear
public void clear()
Atomically removes all of the elements from this delay queue.
 The queue will be empty after this call returns.
 Elements with an unexpired delay are not waited for; they are
 simply discarded from the queue.

Specified by:
clear in interface Collection<E extends Delayed>
Overrides:
clear in class AbstractQueue<E extends Delayed>


"
DelayQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E extends Delayed>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
DelayQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E extends Delayed>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
DelayQueue,iterator(),Iterator<E>,Returns an iterator over all the elements (both expired and unexpired) in this queue.,"

iterator
public Iterator<E> iterator()
Returns an iterator over all the elements (both expired and
 unexpired) in this queue. The iterator does not return the
 elements in any particular order.

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E extends Delayed>
Specified by:
iterator in interface Collection<E extends Delayed>
Specified by:
iterator in class AbstractCollection<E extends Delayed>
Returns:
an iterator over the elements in this queue


"
DelayQueue,offer(E e),boolean,Inserts the specified element into this delay queue.,"

offer
public boolean offer(E e)
Inserts the specified element into this delay queue.

Specified by:
offer in interface BlockingQueue<E extends Delayed>
Specified by:
offer in interface Queue<E extends Delayed>
Parameters:
e - the element to add
Returns:
true
Throws:
NullPointerException - if the specified element is null


"
DelayQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element into this delay queue.,"

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
Inserts the specified element into this delay queue. As the queue is
 unbounded this method will never block.

Specified by:
offer in interface BlockingQueue<E extends Delayed>
Parameters:
e - the element to add
timeout - This parameter is ignored as the method never blocks
unit - This parameter is ignored as the method never blocks
Returns:
true
Throws:
NullPointerException - if the specified element is null


"
DelayQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Retrieves, but does not remove, the head of this queue, or
 returns null if this queue is empty.  Unlike
 poll, if no expired elements are available in the queue,
 this method returns the element that will expire next,
 if one exists.

Specified by:
peek in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue is empty


"
DelayQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay.","

poll
public E poll()
Retrieves and removes the head of this queue, or returns null
 if this queue has no elements with an expired delay.

Specified by:
poll in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue has no elements with an expired delay


"
DelayQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue,
 or the specified wait time expires.

Specified by:
poll in interface BlockingQueue<E extends Delayed>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element with
         an expired delay becomes available
Throws:
InterruptedException - if interrupted while waiting


"
DelayQueue,put(E e),void,Inserts the specified element into this delay queue.,"

put
public void put(E e)
Inserts the specified element into this delay queue. As the queue is
 unbounded this method will never block.

Specified by:
put in interface BlockingQueue<E extends Delayed>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null


"
DelayQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained.,"

remainingCapacity
public int remainingCapacity()
Always returns Integer.MAX_VALUE because
 a DelayQueue is not capacity constrained.

Specified by:
remainingCapacity in interface BlockingQueue<E extends Delayed>
Returns:
Integer.MAX_VALUE


"
DelayQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this
 queue, if it is present, whether or not it has expired.

Specified by:
remove in interface Collection<E extends Delayed>
Specified by:
remove in interface BlockingQueue<E extends Delayed>
Overrides:
remove in class AbstractCollection<E extends Delayed>
Parameters:
o - element to be removed from this collection, if present
Returns:
true if an element was removed as a result of this call


"
DelayQueue,size(),int,Returns the number of elements in this collection.,"

size
public int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E extends Delayed>
Specified by:
size in class AbstractCollection<E extends Delayed>
Returns:
the number of elements in this collection


"
DelayQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue.","

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue.

Specified by:
take in interface BlockingQueue<E extends Delayed>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
DelayQueue,toArray(),Object[],Returns an array containing all of the elements in this queue.,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this queue.
 The returned array elements are in no particular order.

 The returned array will be ""safe"" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E extends Delayed>
Overrides:
toArray in class AbstractCollection<E extends Delayed>
Returns:
an array containing all of the elements in this queue


"
DelayQueue,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
 The returned array elements are in no particular order.
 If the queue fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this queue.

 If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 The following code can be used to dump a delay queue into a newly
 allocated array of Delayed:

   Delayed[] a = q.toArray(new Delayed[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E extends Delayed>
Overrides:
toArray in class AbstractCollection<E extends Delayed>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this queue
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
NullPointerException - if the specified array is null


"
Exchanger,exchange(V x),V,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x)
           throws InterruptedException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted),
 and then transfers the given object to it, receiving its object
 in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of two things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Parameters:
x - the object to exchange
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting


"
Exchanger,"exchange(V x, long timeout, TimeUnit unit)",V,"Waits for another thread to arrive at this exchange point (unless the current thread is interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return.","

exchange
public V exchange(V x,
                  long timeout,
                  TimeUnit unit)
           throws InterruptedException,
                  TimeoutException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of three things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal
 to zero, the method will not wait at all.

Parameters:
x - the object to exchange
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting
TimeoutException - if the specified waiting time elapses
         before another thread enters the exchange


"
ExecutorCompletionService,poll(),Future<V>,"Retrieves and removes the Future representing the next completed task, or null if none are present.","

poll
public Future<V> poll()
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, or null if none are present.

Specified by:
poll in interface CompletionService<V>
Returns:
the Future representing the next completed task, or
         null if none are present


"
ExecutorCompletionService,"poll(long timeout, TimeUnit unit)",Future<V>,"Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.","

poll
public Future<V> poll(long timeout,
                      TimeUnit unit)
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.

Specified by:
poll in interface CompletionService<V>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the Future representing the next completed task or
         null if the specified waiting time elapses
         before one is present
Throws:
InterruptedException - if interrupted while waiting


"
ExecutorCompletionService,submit(Callable<V> task),Future<V>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.,"

submit
public Future<V> submit(Callable<V> task)
Description copied from interface: CompletionService
Submits a value-returning task for execution and returns a Future
 representing the pending results of the task.  Upon completion,
 this task may be taken or polled.

Specified by:
submit in interface CompletionService<V>
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task


"
ExecutorCompletionService,"submit(Runnable task, V result)",Future<V>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public Future<V> submit(Runnable task,
                        V result)
Description copied from interface: CompletionService
Submits a Runnable task for execution and returns a Future
 representing that task.  Upon completion, this task may be
 taken or polled.

Specified by:
submit in interface CompletionService<V>
Parameters:
task - the task to submit
result - the result to return upon successful completion
Returns:
a Future representing pending completion of the task,
         and whose get() method will return the given
         result value upon completion


"
ExecutorCompletionService,take(),Future<V>,"Retrieves and removes the Future representing the next completed task, waiting if none are yet present.","

take
public Future<V> take()
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.

Specified by:
take in interface CompletionService<V>
Returns:
the Future representing the next completed task
Throws:
InterruptedException - if interrupted while waiting


"
Executors,callable(PrivilegedAction<?> action),static Callable<Object>,"Returns a Callable object that, when called, runs the given privileged action and returns its result.","

callable
public static Callable<Object> callable(PrivilegedAction<?> action)
Returns a Callable object that, when
 called, runs the given privileged action and returns its result.

Parameters:
action - the privileged action to run
Returns:
a callable object
Throws:
NullPointerException - if action null


"
Executors,callable(PrivilegedExceptionAction<?> action),static Callable<Object>,"Returns a Callable object that, when called, runs the given privileged exception action and returns its result.","

callable
public static Callable<Object> callable(PrivilegedExceptionAction<?> action)
Returns a Callable object that, when
 called, runs the given privileged exception action and returns
 its result.

Parameters:
action - the privileged exception action to run
Returns:
a callable object
Throws:
NullPointerException - if action null


"
Executors,callable(Runnable task),static Callable<Object>,"Returns a Callable object that, when called, runs the given task and returns null.","

callable
public static Callable<Object> callable(Runnable task)
Returns a Callable object that, when
 called, runs the given task and returns null.

Parameters:
task - the task to run
Returns:
a callable object
Throws:
NullPointerException - if task null


"
Executors,"callable(Runnable task, T result)",static <T> Callable<T>,"Returns a Callable object that, when called, runs the given task and returns the given result.","

callable
public static <T> Callable<T> callable(Runnable task,
                                       T result)
Returns a Callable object that, when
 called, runs the given task and returns the given result.  This
 can be useful when applying methods requiring a
 Callable to an otherwise resultless action.

Type Parameters:
T - the type of the result
Parameters:
task - the task to run
result - the result to return
Returns:
a callable object
Throws:
NullPointerException - if task null


"
Executors,defaultThreadFactory(),static ThreadFactory,Returns a default thread factory used to create new threads.,"

defaultThreadFactory
public static ThreadFactory defaultThreadFactory()
Returns a default thread factory used to create new threads.
 This factory creates all new threads used by an Executor in the
 same ThreadGroup. If there is a SecurityManager, it uses the group of System.getSecurityManager(), else the group of the thread
 invoking this defaultThreadFactory method. Each new
 thread is created as a non-daemon thread with priority set to
 the smaller of Thread.NORM_PRIORITY and the maximum
 priority permitted in the thread group.  New threads have names
 accessible via Thread.getName() of
 pool-N-thread-M, where N is the sequence
 number of this factory, and M is the sequence number
 of the thread created by this factory.

Returns:
a thread factory


"
Executors,newCachedThreadPool(),static ExecutorService,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.","

newCachedThreadPool
public static ExecutorService newCachedThreadPool()
Creates a thread pool that creates new threads as needed, but
 will reuse previously constructed threads when they are
 available.  These pools will typically improve the performance
 of programs that execute many short-lived asynchronous tasks.
 Calls to execute will reuse previously constructed
 threads if available. If no existing thread is available, a new
 thread will be created and added to the pool. Threads that have
 not been used for sixty seconds are terminated and removed from
 the cache. Thus, a pool that remains idle for long enough will
 not consume any resources. Note that pools with similar
 properties but different details (for example, timeout parameters)
 may be created using ThreadPoolExecutor constructors.

Returns:
the newly created thread pool


"
Executors,newCachedThreadPool(ThreadFactory threadFactory),static ExecutorService,"Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.","

newCachedThreadPool
public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory)
Creates a thread pool that creates new threads as needed, but
 will reuse previously constructed threads when they are
 available, and uses the provided
 ThreadFactory to create new threads when needed.

Parameters:
threadFactory - the factory to use when creating new threads
Returns:
the newly created thread pool
Throws:
NullPointerException - if threadFactory is null


"
Executors,newFixedThreadPool(int nThreads),static ExecutorService,Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.,"

newFixedThreadPool
public static ExecutorService newFixedThreadPool(int nThreads)
Creates a thread pool that reuses a fixed number of threads
 operating off a shared unbounded queue.  At any point, at most
 nThreads threads will be active processing tasks.
 If additional tasks are submitted when all threads are active,
 they will wait in the queue until a thread is available.
 If any thread terminates due to a failure during execution
 prior to shutdown, a new one will take its place if needed to
 execute subsequent tasks.  The threads in the pool will exist
 until it is explicitly shutdown.

Parameters:
nThreads - the number of threads in the pool
Returns:
the newly created thread pool
Throws:
IllegalArgumentException - if nThreads <= 0


"
Executors,"newFixedThreadPool(int nThreads, ThreadFactory threadFactory)",static ExecutorService,"Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed.","

newFixedThreadPool
public static ExecutorService newFixedThreadPool(int nThreads,
                                                 ThreadFactory threadFactory)
Creates a thread pool that reuses a fixed number of threads
 operating off a shared unbounded queue, using the provided
 ThreadFactory to create new threads when needed.  At any point,
 at most nThreads threads will be active processing
 tasks.  If additional tasks are submitted when all threads are
 active, they will wait in the queue until a thread is
 available.  If any thread terminates due to a failure during
 execution prior to shutdown, a new one will take its place if
 needed to execute subsequent tasks.  The threads in the pool will
 exist until it is explicitly shutdown.

Parameters:
nThreads - the number of threads in the pool
threadFactory - the factory to use when creating new threads
Returns:
the newly created thread pool
Throws:
NullPointerException - if threadFactory is null
IllegalArgumentException - if nThreads <= 0


"
Executors,newScheduledThreadPool(int corePoolSize),static ScheduledExecutorService,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.","

newScheduledThreadPool
public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)
Creates a thread pool that can schedule commands to run after a
 given delay, or to execute periodically.

Parameters:
corePoolSize - the number of threads to keep in the pool,
 even if they are idle
Returns:
a newly created scheduled thread pool
Throws:
IllegalArgumentException - if corePoolSize < 0


"
Executors,"newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)",static ScheduledExecutorService,"Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.","

newScheduledThreadPool
public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,
                                                              ThreadFactory threadFactory)
Creates a thread pool that can schedule commands to run after a
 given delay, or to execute periodically.

Parameters:
corePoolSize - the number of threads to keep in the pool,
 even if they are idle
threadFactory - the factory to use when the executor
 creates a new thread
Returns:
a newly created scheduled thread pool
Throws:
IllegalArgumentException - if corePoolSize < 0
NullPointerException - if threadFactory is null


"
Executors,newSingleThreadExecutor(),static ExecutorService,Creates an Executor that uses a single worker thread operating off an unbounded queue.,"

newSingleThreadExecutor
public static ExecutorService newSingleThreadExecutor()
Creates an Executor that uses a single worker thread operating
 off an unbounded queue. (Note however that if this single
 thread terminates due to a failure during execution prior to
 shutdown, a new one will take its place if needed to execute
 subsequent tasks.)  Tasks are guaranteed to execute
 sequentially, and no more than one task will be active at any
 given time. Unlike the otherwise equivalent
 newFixedThreadPool(1) the returned executor is
 guaranteed not to be reconfigurable to use additional threads.

Returns:
the newly created single-threaded Executor


"
Executors,newSingleThreadExecutor(ThreadFactory threadFactory),static ExecutorService,"Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed.","

newSingleThreadExecutor
public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)
Creates an Executor that uses a single worker thread operating
 off an unbounded queue, and uses the provided ThreadFactory to
 create a new thread when needed. Unlike the otherwise
 equivalent newFixedThreadPool(1, threadFactory) the
 returned executor is guaranteed not to be reconfigurable to use
 additional threads.

Parameters:
threadFactory - the factory to use when creating new
 threads
Returns:
the newly created single-threaded Executor
Throws:
NullPointerException - if threadFactory is null


"
Executors,newSingleThreadScheduledExecutor(),static ScheduledExecutorService,"Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.","

newSingleThreadScheduledExecutor
public static ScheduledExecutorService newSingleThreadScheduledExecutor()
Creates a single-threaded executor that can schedule commands
 to run after a given delay, or to execute periodically.
 (Note however that if this single
 thread terminates due to a failure during execution prior to
 shutdown, a new one will take its place if needed to execute
 subsequent tasks.)  Tasks are guaranteed to execute
 sequentially, and no more than one task will be active at any
 given time. Unlike the otherwise equivalent
 newScheduledThreadPool(1) the returned executor is
 guaranteed not to be reconfigurable to use additional threads.

Returns:
the newly created scheduled executor


"
Executors,newSingleThreadScheduledExecutor(ThreadFactory threadFactory),static ScheduledExecutorService,"Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.","

newSingleThreadScheduledExecutor
public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory)
Creates a single-threaded executor that can schedule commands
 to run after a given delay, or to execute periodically.  (Note
 however that if this single thread terminates due to a failure
 during execution prior to shutdown, a new one will take its
 place if needed to execute subsequent tasks.)  Tasks are
 guaranteed to execute sequentially, and no more than one task
 will be active at any given time. Unlike the otherwise
 equivalent newScheduledThreadPool(1, threadFactory)
 the returned executor is guaranteed not to be reconfigurable to
 use additional threads.

Parameters:
threadFactory - the factory to use when creating new
 threads
Returns:
a newly created scheduled executor
Throws:
NullPointerException - if threadFactory is null


"
Executors,newWorkStealingPool(),static ExecutorService,Creates a work-stealing thread pool using all available processors as its target parallelism level.,"

newWorkStealingPool
public static ExecutorService newWorkStealingPool()
Creates a work-stealing thread pool using all
 available processors
 as its target parallelism level.

Returns:
the newly created thread pool
Since:
1.8
See Also:
newWorkStealingPool(int)


"
Executors,newWorkStealingPool(int parallelism),static ExecutorService,"Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention.","

newWorkStealingPool
public static ExecutorService newWorkStealingPool(int parallelism)
Creates a thread pool that maintains enough threads to support
 the given parallelism level, and may use multiple queues to
 reduce contention. The parallelism level corresponds to the
 maximum number of threads actively engaged in, or available to
 engage in, task processing. The actual number of threads may
 grow and shrink dynamically. A work-stealing pool makes no
 guarantees about the order in which submitted tasks are
 executed.

Parameters:
parallelism - the targeted parallelism level
Returns:
the newly created thread pool
Throws:
IllegalArgumentException - if parallelism <= 0
Since:
1.8


"
Executors,privilegedCallable(Callable<T> callable),static <T> Callable<T>,"Returns a Callable object that will, when called, execute the given callable under the current access control context.","

privilegedCallable
public static <T> Callable<T> privilegedCallable(Callable<T> callable)
Returns a Callable object that will, when called,
 execute the given callable under the current access
 control context. This method should normally be invoked within
 an AccessController.doPrivileged
 action to create callables that will, if possible, execute
 under the selected permission settings holding within that
 action; or if not possible, throw an associated AccessControlException.

Type Parameters:
T - the type of the callable's result
Parameters:
callable - the underlying task
Returns:
a callable object
Throws:
NullPointerException - if callable null


"
Executors,privilegedCallableUsingCurrentClassLoader(Callable<T> callable),static <T> Callable<T>,"Returns a Callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader.","

privilegedCallableUsingCurrentClassLoader
public static <T> Callable<T> privilegedCallableUsingCurrentClassLoader(Callable<T> callable)
Returns a Callable object that will, when called,
 execute the given callable under the current access
 control context, with the current context class loader as the
 context class loader. This method should normally be invoked
 within an
 AccessController.doPrivileged
 action to create callables that will, if possible, execute
 under the selected permission settings holding within that
 action; or if not possible, throw an associated AccessControlException.

Type Parameters:
T - the type of the callable's result
Parameters:
callable - the underlying task
Returns:
a callable object
Throws:
NullPointerException - if callable null
AccessControlException - if the current access control
 context does not have permission to both set and get context
 class loader


"
Executors,privilegedThreadFactory(),static ThreadFactory,Returns a thread factory used to create new threads that have the same permissions as the current thread.,"

privilegedThreadFactory
public static ThreadFactory privilegedThreadFactory()
Returns a thread factory used to create new threads that
 have the same permissions as the current thread.
 This factory creates threads with the same settings as defaultThreadFactory(), additionally setting the
 AccessControlContext and contextClassLoader of new threads to
 be the same as the thread invoking this
 privilegedThreadFactory method.  A new
 privilegedThreadFactory can be created within an
 AccessController.doPrivileged
 action setting the current thread's access control context to
 create threads with the selected permission settings holding
 within that action.

 Note that while tasks running within such threads will have
 the same access control and class loader settings as the
 current thread, they need not have the same ThreadLocal or InheritableThreadLocal values. If necessary,
 particular values of thread locals can be set or reset before
 any task runs in ThreadPoolExecutor subclasses using
 ThreadPoolExecutor.beforeExecute(Thread, Runnable).
 Also, if it is necessary to initialize worker threads to have
 the same InheritableThreadLocal settings as some other
 designated thread, you can create a custom ThreadFactory in
 which that thread waits for and services requests to create
 others that will inherit its values.

Returns:
a thread factory
Throws:
AccessControlException - if the current access control
 context does not have permission to both get and set context
 class loader


"
Executors,unconfigurableExecutorService(ExecutorService executor),static ExecutorService,"Returns an object that delegates all defined ExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts.","

unconfigurableExecutorService
public static ExecutorService unconfigurableExecutorService(ExecutorService executor)
Returns an object that delegates all defined ExecutorService methods to the given executor, but not any
 other methods that might otherwise be accessible using
 casts. This provides a way to safely ""freeze"" configuration and
 disallow tuning of a given concrete implementation.

Parameters:
executor - the underlying implementation
Returns:
an ExecutorService instance
Throws:
NullPointerException - if executor null


"
Executors,unconfigurableScheduledExecutorService(ScheduledExecutorService executor),static ScheduledExecutorService,"Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts.","

unconfigurableScheduledExecutorService
public static ScheduledExecutorService unconfigurableScheduledExecutorService(ScheduledExecutorService executor)
Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but
 not any other methods that might otherwise be accessible using
 casts. This provides a way to safely ""freeze"" configuration and
 disallow tuning of a given concrete implementation.

Parameters:
executor - the underlying implementation
Returns:
a ScheduledExecutorService instance
Throws:
NullPointerException - if executor null


"
ForkJoinPool,"awaitQuiescence(long timeout, TimeUnit unit)",boolean,"If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask.helpQuiesce().","

awaitQuiescence
public boolean awaitQuiescence(long timeout,
                               TimeUnit unit)
If called by a ForkJoinTask operating in this pool, equivalent
 in effect to ForkJoinTask.helpQuiesce(). Otherwise,
 waits and/or attempts to assist performing tasks until this
 pool isQuiescent() or the indicated timeout elapses.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if quiescent; false if the
 timeout elapsed.


"
ForkJoinPool,"awaitTermination(long timeout, TimeUnit unit)",boolean,"Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.","

awaitTermination
public boolean awaitTermination(long timeout,
                                TimeUnit unit)
                         throws InterruptedException
Blocks until all tasks have completed execution after a
 shutdown request, or the timeout occurs, or the current thread
 is interrupted, whichever happens first. Because the commonPool() never terminates until program shutdown, when
 applied to the common pool, this method is equivalent to awaitQuiescence(long, TimeUnit) but always returns false.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if this executor terminated and
         false if the timeout elapsed before termination
Throws:
InterruptedException - if interrupted while waiting


"
ForkJoinPool,commonPool(),static ForkJoinPool,Returns the common pool instance.,"

commonPool
public static ForkJoinPool commonPool()
Returns the common pool instance. This pool is statically
 constructed; its run state is unaffected by attempts to shutdown() or shutdownNow(). However this pool and any
 ongoing processing are automatically terminated upon program
 System.exit(int).  Any program that relies on asynchronous
 task processing to complete before program termination should
 invoke commonPool().awaitQuiescence,
 before exit.

Returns:
the common pool instance
Since:
1.8


"
ForkJoinPool,drainTasksTo(Collection<? super ForkJoinTask<?>> c),protected int,"Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status.","

drainTasksTo
protected int drainTasksTo(Collection<? super ForkJoinTask<?>> c)
Removes all available unexecuted submitted and forked tasks
 from scheduling queues and adds them to the given collection,
 without altering their execution status. These may include
 artificially generated or wrapped tasks. This method is
 designed to be invoked only when the pool is known to be
 quiescent. Invocations at other times may not remove all
 tasks. A failure encountered while attempting to add elements
 to collection c may result in elements being in
 neither, either or both collections when the associated
 exception is thrown.  The behavior of this operation is
 undefined if the specified collection is modified while the
 operation is in progress.

Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred


"
ForkJoinPool,execute(ForkJoinTask<?> task),void,Arranges for (asynchronous) execution of the given task.,"

execute
public void execute(ForkJoinTask<?> task)
Arranges for (asynchronous) execution of the given task.

Parameters:
task - the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,execute(Runnable task),void,Executes the given command at some time in the future.,"

execute
public void execute(Runnable task)
Description copied from interface: Executor
Executes the given command at some time in the future.  The command
 may execute in a new thread, in a pooled thread, or in the calling
 thread, at the discretion of the Executor implementation.

Parameters:
task - the runnable task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,getActiveThreadCount(),int,Returns an estimate of the number of threads that are currently stealing or executing tasks.,"

getActiveThreadCount
public int getActiveThreadCount()
Returns an estimate of the number of threads that are currently
 stealing or executing tasks. This method may overestimate the
 number of active threads.

Returns:
the number of active threads


"
ForkJoinPool,getAsyncMode(),boolean,Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.,"

getAsyncMode
public boolean getAsyncMode()
Returns true if this pool uses local first-in-first-out
 scheduling mode for forked tasks that are never joined.

Returns:
true if this pool uses async mode


"
ForkJoinPool,getCommonPoolParallelism(),static int,Returns the targeted parallelism level of the common pool.,"

getCommonPoolParallelism
public static int getCommonPoolParallelism()
Returns the targeted parallelism level of the common pool.

Returns:
the targeted parallelism level of the common pool
Since:
1.8


"
ForkJoinPool,getFactory(),ForkJoinPool.ForkJoinWorkerThreadFactory,Returns the factory used for constructing new workers.,"

getFactory
public ForkJoinPool.ForkJoinWorkerThreadFactory getFactory()
Returns the factory used for constructing new workers.

Returns:
the factory used for constructing new workers


"
ForkJoinPool,getParallelism(),int,Returns the targeted parallelism level of this pool.,"

getParallelism
public int getParallelism()
Returns the targeted parallelism level of this pool.

Returns:
the targeted parallelism level of this pool


"
ForkJoinPool,getPoolSize(),int,Returns the number of worker threads that have started but not yet terminated.,"

getPoolSize
public int getPoolSize()
Returns the number of worker threads that have started but not
 yet terminated.  The result returned by this method may differ
 from getParallelism() when threads are created to
 maintain parallelism when others are cooperatively blocked.

Returns:
the number of worker threads


"
ForkJoinPool,getQueuedSubmissionCount(),int,Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing.,"

getQueuedSubmissionCount
public int getQueuedSubmissionCount()
Returns an estimate of the number of tasks submitted to this
 pool that have not yet begun executing.  This method may take
 time proportional to the number of submissions.

Returns:
the number of queued submissions


"
ForkJoinPool,getQueuedTaskCount(),long,Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing).,"

getQueuedTaskCount
public long getQueuedTaskCount()
Returns an estimate of the total number of tasks currently held
 in queues by worker threads (but not including tasks submitted
 to the pool that have not begun executing). This value is only
 an approximation, obtained by iterating across all threads in
 the pool. This method may be useful for tuning task
 granularities.

Returns:
the number of queued tasks


"
ForkJoinPool,getRunningThreadCount(),int,Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization.,"

getRunningThreadCount
public int getRunningThreadCount()
Returns an estimate of the number of worker threads that are
 not blocked waiting to join tasks or for other managed
 synchronization. This method may overestimate the
 number of running threads.

Returns:
the number of worker threads


"
ForkJoinPool,getStealCount(),long,Returns an estimate of the total number of tasks stolen from one thread's work queue by another.,"

getStealCount
public long getStealCount()
Returns an estimate of the total number of tasks stolen from
 one thread's work queue by another. The reported value
 underestimates the actual total number of steals when the pool
 is not quiescent. This value may be useful for monitoring and
 tuning fork/join programs: in general, steal counts should be
 high enough to keep threads busy, but low enough to avoid
 overhead and contention across threads.

Returns:
the number of steals


"
ForkJoinPool,getUncaughtExceptionHandler(),Thread.UncaughtExceptionHandler,Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.,"

getUncaughtExceptionHandler
public Thread.UncaughtExceptionHandler getUncaughtExceptionHandler()
Returns the handler for internal worker threads that terminate
 due to unrecoverable errors encountered while executing tasks.

Returns:
the handler, or null if none


"
ForkJoinPool,hasQueuedSubmissions(),boolean,Returns true if there are any tasks submitted to this pool that have not yet begun executing.,"

hasQueuedSubmissions
public boolean hasQueuedSubmissions()
Returns true if there are any tasks submitted to this
 pool that have not yet begun executing.

Returns:
true if there are any queued submissions


"
ForkJoinPool,invoke(ForkJoinTask<T> task),<T> T,"Performs the given task, returning its result upon completion.","

invoke
public <T> T invoke(ForkJoinTask<T> task)
Performs the given task, returning its result upon completion.
 If the computation encounters an unchecked Exception or Error,
 it is rethrown as the outcome of this invocation.  Rethrown
 exceptions behave in the same way as regular exceptions, but,
 when possible, contain stack traces (as displayed for example
 using ex.printStackTrace()) of both the current thread
 as well as the thread actually encountering the exception;
 minimally only the latter.

Type Parameters:
T - the type of the task's result
Parameters:
task - the task
Returns:
the task's result
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,invokeAll(Collection<? extends Callable<T>> tasks),<T> List<Future<T>>,"Executes the given tasks, returning a list of Futures holding their status and results when all complete.","

invokeAll
public <T> List<Future<T>> invokeAll(Collection<? extends Callable<T>> tasks)
Description copied from interface: ExecutorService
Executes the given tasks, returning a list of Futures holding
 their status and results when all complete.
 Future.isDone() is true for each
 element of the returned list.
 Note that a completed task could have
 terminated either normally or by throwing an exception.
 The results of this method are undefined if the given
 collection is modified while this operation is in progress.

Specified by:
invokeAll in interface ExecutorService
Overrides:
invokeAll in class AbstractExecutorService
Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
Returns:
a list of Futures representing the tasks, in the same
         sequential order as produced by the iterator for the
         given task list, each of which has completed
Throws:
NullPointerException - if tasks or any of its elements are null
RejectedExecutionException - if any task cannot be
         scheduled for execution


"
ForkJoinPool,isQuiescent(),boolean,Returns true if all worker threads are currently idle.,"

isQuiescent
public boolean isQuiescent()
Returns true if all worker threads are currently idle.
 An idle worker is one that cannot obtain a task to execute
 because none are available to steal from other threads, and
 there are no pending submissions to the pool. This method is
 conservative; it might not return true immediately upon
 idleness of all threads, but will eventually become true if
 threads remain inactive.

Returns:
true if all threads are currently idle


"
ForkJoinPool,isShutdown(),boolean,Returns true if this pool has been shut down.,"

isShutdown
public boolean isShutdown()
Returns true if this pool has been shut down.

Returns:
true if this pool has been shut down


"
ForkJoinPool,isTerminated(),boolean,Returns true if all tasks have completed following shut down.,"

isTerminated
public boolean isTerminated()
Returns true if all tasks have completed following shut down.

Returns:
true if all tasks have completed following shut down


"
ForkJoinPool,isTerminating(),boolean,Returns true if the process of termination has commenced but not yet completed.,"

isTerminating
public boolean isTerminating()
Returns true if the process of termination has
 commenced but not yet completed.  This method may be useful for
 debugging. A return of true reported a sufficient
 period after shutdown may indicate that submitted tasks have
 ignored or suppressed interruption, or are waiting for I/O,
 causing this executor not to properly terminate. (See the
 advisory notes for class ForkJoinTask stating that
 tasks should not normally entail blocking operations.  But if
 they do, they must abort them on interrupt.)

Returns:
true if terminating but not yet terminated


"
ForkJoinPool,managedBlock(ForkJoinPool.ManagedBlocker blocker),static void,Runs the given possibly blocking task.,"

managedBlock
public static void managedBlock(ForkJoinPool.ManagedBlocker blocker)
                         throws InterruptedException
Runs the given possibly blocking task.  When running in a ForkJoinPool, this
 method possibly arranges for a spare thread to be activated if
 necessary to ensure sufficient parallelism while the current
 thread is blocked in blocker.block().

 This method repeatedly calls blocker.isReleasable() and
 blocker.block() until either method returns true.
 Every call to blocker.block() is preceded by a call to
 blocker.isReleasable() that returned false.

 If not running in a ForkJoinPool, this method is
 behaviorally equivalent to
   
 while (!blocker.isReleasable())
   if (blocker.block())
     break;

 If running in a ForkJoinPool, the pool may first be expanded to
 ensure sufficient parallelism available during the call to
 blocker.block().

Parameters:
blocker - the blocker task
Throws:
InterruptedException - if blocker.block() did so


"
ForkJoinPool,newTaskFor(Callable<T> callable),protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given callable task.,"

newTaskFor
protected <T> RunnableFuture<T> newTaskFor(Callable<T> callable)
Description copied from class: AbstractExecutorService
Returns a RunnableFuture for the given callable task.

Overrides:
newTaskFor in class AbstractExecutorService
Type Parameters:
T - the type of the callable's result
Parameters:
callable - the callable task being wrapped
Returns:
a RunnableFuture which, when run, will call the
 underlying callable and which, as a Future, will yield
 the callable's result as its result and provide for
 cancellation of the underlying task


"
ForkJoinPool,"newTaskFor(Runnable runnable, T value)",protected <T> RunnableFuture<T>,Returns a RunnableFuture for the given runnable and default value.,"

newTaskFor
protected <T> RunnableFuture<T> newTaskFor(Runnable runnable,
                                           T value)
Description copied from class: AbstractExecutorService
Returns a RunnableFuture for the given runnable and default
 value.

Overrides:
newTaskFor in class AbstractExecutorService
Type Parameters:
T - the type of the given value
Parameters:
runnable - the runnable task being wrapped
value - the default value for the returned future
Returns:
a RunnableFuture which, when run, will run the
 underlying runnable and which, as a Future, will yield
 the given value as its result and provide for cancellation of
 the underlying task


"
ForkJoinPool,pollSubmission(),protected ForkJoinTask<?>,Removes and returns the next unexecuted submission if one is available.,"

pollSubmission
protected ForkJoinTask<?> pollSubmission()
Removes and returns the next unexecuted submission if one is
 available.  This method may be useful in extensions to this
 class that re-assign work in systems with multiple pools.

Returns:
the next submission, or null if none


"
ForkJoinPool,shutdown(),void,"Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.","

shutdown
public void shutdown()
Possibly initiates an orderly shutdown in which previously
 submitted tasks are executed, but no new tasks will be
 accepted. Invocation has no effect on execution state if this
 is the commonPool(), and no additional effect if
 already shut down.  Tasks that are in the process of being
 submitted concurrently during the course of this method may or
 may not be rejected.

Throws:
SecurityException - if a security manager exists and
         the caller is not permitted to modify threads
         because it does not hold RuntimePermission(""modifyThread"")


"
ForkJoinPool,shutdownNow(),List<Runnable>,"Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks.","

shutdownNow
public List<Runnable> shutdownNow()
Possibly attempts to cancel and/or stop all tasks, and reject
 all subsequently submitted tasks.  Invocation has no effect on
 execution state if this is the commonPool(), and no
 additional effect if already shut down. Otherwise, tasks that
 are in the process of being submitted or executed concurrently
 during the course of this method may or may not be
 rejected. This method cancels both existing and unexecuted
 tasks, in order to permit termination in the presence of task
 dependencies. So the method always returns an empty list
 (unlike the case for some other Executors).

Returns:
an empty list
Throws:
SecurityException - if a security manager exists and
         the caller is not permitted to modify threads
         because it does not hold RuntimePermission(""modifyThread"")


"
ForkJoinPool,submit(Callable<T> task),<T> ForkJoinTask<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.,"

submit
public <T> ForkJoinTask<T> submit(Callable<T> task)
Description copied from interface: ExecutorService
Submits a value-returning task for execution and returns a
 Future representing the pending results of the task. The
 Future's get method will return the task's result upon
 successful completion.

 
 If you would like to immediately block waiting
 for a task, you can use constructions of the form
 result = exec.submit(aCallable).get();
Note: The Executors class includes a set of methods
 that can convert some other common closure-like objects,
 for example, PrivilegedAction to
 Callable form so they can be submitted.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Type Parameters:
T - the type of the task's result
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,submit(ForkJoinTask<T> task),<T> ForkJoinTask<T>,Submits a ForkJoinTask for execution.,"

submit
public <T> ForkJoinTask<T> submit(ForkJoinTask<T> task)
Submits a ForkJoinTask for execution.

Type Parameters:
T - the type of the task's result
Parameters:
task - the task to submit
Returns:
the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,submit(Runnable task),ForkJoinTask<?>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public ForkJoinTask<?> submit(Runnable task)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return null upon successful completion.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,"submit(Runnable task, T result)",<T> ForkJoinTask<T>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public <T> ForkJoinTask<T> submit(Runnable task,
                                  T result)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return the given result upon successful completion.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Type Parameters:
T - the type of the result
Parameters:
task - the task to submit
result - the result to return
Returns:
a Future representing pending completion of the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
ForkJoinPool,toString(),String,"Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.","

toString
public String toString()
Returns a string identifying this pool, as well as its state,
 including indications of run state, parallelism level, and
 worker and task counts.

Overrides:
toString in class Object
Returns:
a string identifying this pool, as well as its state


"
ForkJoinTask,adapt(Callable<? extends T> callable),static <T> ForkJoinTask<T>,"Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon join(), translating any checked exceptions encountered into RuntimeException.","

adapt
public static <T> ForkJoinTask<T> adapt(Callable<? extends T> callable)
Returns a new ForkJoinTask that performs the call
 method of the given Callable as its action, and returns
 its result upon join(), translating any checked exceptions
 encountered into RuntimeException.

Type Parameters:
T - the type of the callable's result
Parameters:
callable - the callable action
Returns:
the task


"
ForkJoinTask,adapt(Runnable runnable),static ForkJoinTask<?>,"Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon join().","

adapt
public static ForkJoinTask<?> adapt(Runnable runnable)
Returns a new ForkJoinTask that performs the run
 method of the given Runnable as its action, and returns
 a null result upon join().

Parameters:
runnable - the runnable action
Returns:
the task


"
ForkJoinTask,"adapt(Runnable runnable, T result)",static <T> ForkJoinTask<T>,"Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon join().","

adapt
public static <T> ForkJoinTask<T> adapt(Runnable runnable,
                                        T result)
Returns a new ForkJoinTask that performs the run
 method of the given Runnable as its action, and returns
 the given result upon join().

Type Parameters:
T - the type of the result
Parameters:
runnable - the runnable action
result - the result upon completion
Returns:
the task


"
ForkJoinTask,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.,"

cancel
public boolean cancel(boolean mayInterruptIfRunning)
Attempts to cancel execution of this task. This attempt will
 fail if the task has already completed or could not be
 cancelled for some other reason. If successful, and this task
 has not started when cancel is called, execution of
 this task is suppressed. After this method returns
 successfully, unless there is an intervening call to reinitialize(), subsequent calls to isCancelled(),
 isDone(), and cancel will return true
 and calls to join() and related methods will result in
 CancellationException.

 This method may be overridden in subclasses, but if so, must
 still ensure that these properties hold. In particular, the
 cancel method itself must not throw exceptions.

 This method is designed to be invoked by other
 tasks. To terminate the current task, you can just return or
 throw an unchecked exception from its computation method, or
 invoke completeExceptionally(Throwable).

Specified by:
cancel in interface Future<V>
Parameters:
mayInterruptIfRunning - this value has no effect in the
 default implementation because interrupts are not used to
 control cancellation.
Returns:
true if this task is now cancelled


"
ForkJoinTask,"compareAndSetForkJoinTaskTag(short e, short tag)",boolean,Atomically conditionally sets the tag value for this task.,"

compareAndSetForkJoinTaskTag
public final boolean compareAndSetForkJoinTaskTag(short e,
                                                  short tag)
Atomically conditionally sets the tag value for this task.
 Among other applications, tags can be used as visit markers
 in tasks operating on graphs, as in methods that check: if (task.compareAndSetForkJoinTaskTag((short)0, (short)1))
 before processing, otherwise exiting because the node has
 already been visited.

Parameters:
e - the expected tag value
tag - the new tag value
Returns:
true if successful; i.e., the current value was
 equal to e and is now tag.
Since:
1.8


"
ForkJoinTask,complete(V value),void,"Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations.","

complete
public void complete(V value)
Completes this task, and if not already aborted or cancelled,
 returning the given value as the result of subsequent
 invocations of join and related operations. This method
 may be used to provide results for asynchronous tasks, or to
 provide alternative handling for tasks that would not otherwise
 complete normally. Its use in other situations is
 discouraged. This method is overridable, but overridden
 versions must invoke super implementation to maintain
 guarantees.

Parameters:
value - the result value for this task


"
ForkJoinTask,completeExceptionally(Throwable ex),void,"Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations.","

completeExceptionally
public void completeExceptionally(Throwable ex)
Completes this task abnormally, and if not already aborted or
 cancelled, causes it to throw the given exception upon
 join and related operations. This method may be used
 to induce exceptions in asynchronous tasks, or to force
 completion of tasks that would not otherwise complete.  Its use
 in other situations is discouraged.  This method is
 overridable, but overridden versions must invoke super
 implementation to maintain guarantees.

Parameters:
ex - the exception to throw. If this exception is not a
 RuntimeException or Error, the actual exception
 thrown will be a RuntimeException with cause ex.


"
ForkJoinTask,exec(),protected abstract boolean,"Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally.","

exec
protected abstract boolean exec()
Immediately performs the base action of this task and returns
 true if, upon return from this method, this task is guaranteed
 to have completed normally. This method may return false
 otherwise, to indicate that this task is not necessarily
 complete (or is not known to be complete), for example in
 asynchronous actions that require explicit invocations of
 completion methods. This method may also throw an (unchecked)
 exception to indicate abnormal exit. This method is designed to
 support extensions, and should not in general be called
 otherwise.

Returns:
true if this task is known to have completed normally


"
ForkJoinTask,fork(),ForkJoinTask<V>,"Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool().","

fork
public final ForkJoinTask<V> fork()
Arranges to asynchronously execute this task in the pool the
 current task is running in, if applicable, or using the ForkJoinPool.commonPool() if not inForkJoinPool().  While
 it is not necessarily enforced, it is a usage error to fork a
 task more than once unless it has completed and been
 reinitialized.  Subsequent modifications to the state of this
 task or any data it operates on are not necessarily
 consistently observable by any thread other than the one
 executing it unless preceded by a call to join() or
 related methods, or a call to isDone() returning true.

Returns:
this, to simplify usage


"
ForkJoinTask,get(),V,"Waits if necessary for the computation to complete, and then retrieves its result.","

get
public final V get()
            throws InterruptedException,
                   ExecutionException
Waits if necessary for the computation to complete, and then
 retrieves its result.

Specified by:
get in interface Future<V>
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
ExecutionException - if the computation threw an
 exception
InterruptedException - if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting


"
ForkJoinTask,"get(long timeout, TimeUnit unit)",V,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","

get
public final V get(long timeout,
                   TimeUnit unit)
            throws InterruptedException,
                   ExecutionException,
                   TimeoutException
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.

Specified by:
get in interface Future<V>
Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
ExecutionException - if the computation threw an
 exception
InterruptedException - if the current thread is not a
 member of a ForkJoinPool and was interrupted while waiting
TimeoutException - if the wait timed out


"
ForkJoinTask,getException(),Throwable,"Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed.","

getException
public final Throwable getException()
Returns the exception thrown by the base computation, or a
 CancellationException if cancelled, or null if
 none or if the method has not yet completed.

Returns:
the exception, or null if none


"
ForkJoinTask,getForkJoinTaskTag(),short,Returns the tag for this task.,"

getForkJoinTaskTag
public final short getForkJoinTaskTag()
Returns the tag for this task.

Returns:
the tag for this task
Since:
1.8


"
ForkJoinTask,getPool(),static ForkJoinPool,"Returns the pool hosting the current task execution, or null if this task is executing outside of any ForkJoinPool.","

getPool
public static ForkJoinPool getPool()
Returns the pool hosting the current task execution, or null
 if this task is executing outside of any ForkJoinPool.

Returns:
the pool, or null if none
See Also:
inForkJoinPool()


"
ForkJoinTask,getQueuedTaskCount(),static int,Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed.,"

getQueuedTaskCount
public static int getQueuedTaskCount()
Returns an estimate of the number of tasks that have been
 forked by the current worker thread but not yet executed. This
 value may be useful for heuristic decisions about whether to
 fork other tasks.

Returns:
the number of tasks


"
ForkJoinTask,getRawResult(),abstract V,"Returns the result that would be returned by join(), even if this task completed abnormally, or null if this task is not known to have been completed.","

getRawResult
public abstract V getRawResult()
Returns the result that would be returned by join(), even
 if this task completed abnormally, or null if this task
 is not known to have been completed.  This method is designed
 to aid debugging, as well as to support extensions. Its use in
 any other context is discouraged.

Returns:
the result, or null if not completed


"
ForkJoinTask,getSurplusQueuedTaskCount(),static int,"Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool.","

getSurplusQueuedTaskCount
public static int getSurplusQueuedTaskCount()
Returns an estimate of how many more locally queued tasks are
 held by the current worker thread than there are other worker
 threads that might steal them, or zero if this thread is not
 operating in a ForkJoinPool. This value may be useful for
 heuristic decisions about whether to fork other tasks. In many
 usages of ForkJoinTasks, at steady state, each worker should
 aim to maintain a small constant surplus (for example, 3) of
 tasks, and to process computations locally if this threshold is
 exceeded.

Returns:
the surplus number of tasks, which may be negative


"
ForkJoinTask,helpQuiesce(),static void,Possibly executes tasks until the pool hosting the current task is quiescent.,"

helpQuiesce
public static void helpQuiesce()
Possibly executes tasks until the pool hosting the current task
 is quiescent. This method may
 be of use in designs in which many tasks are forked, but none
 are explicitly joined, instead executing them until all are
 processed.

"
ForkJoinTask,inForkJoinPool(),static boolean,Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.,"

inForkJoinPool
public static boolean inForkJoinPool()
Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.

Returns:
true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation,
 or false otherwise


"
ForkJoinTask,invoke(),V,"Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so.","

invoke
public final V invoke()
Commences performing this task, awaits its completion if
 necessary, and returns its result, or throws an (unchecked)
 RuntimeException or Error if the underlying
 computation did so.

Returns:
the computed result


"
ForkJoinTask,invokeAll(Collection<T> tasks),static <T extends ForkJoinTask<?>> Collection<T>,"Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown.","

invokeAll
public static <T extends ForkJoinTask<?>> Collection<T> invokeAll(Collection<T> tasks)
Forks all tasks in the specified collection, returning when
 isDone holds for each task or an (unchecked) exception
 is encountered, in which case the exception is rethrown. If
 more than one task encounters an exception, then this method
 throws any one of these exceptions. If any task encounters an
 exception, others may be cancelled. However, the execution
 status of individual tasks is not guaranteed upon exceptional
 return. The status of each task may be obtained using getException() and related methods to check if they have been
 cancelled, completed normally or exceptionally, or left
 unprocessed.

Type Parameters:
T - the type of the values returned from the tasks
Parameters:
tasks - the collection of tasks
Returns:
the tasks argument, to simplify usage
Throws:
NullPointerException - if tasks or any element are null


"
ForkJoinTask,invokeAll(ForkJoinTask<?>... tasks),static void,"Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown.","

invokeAll
public static void invokeAll(ForkJoinTask<?>... tasks)
Forks the given tasks, returning when isDone holds for
 each task or an (unchecked) exception is encountered, in which
 case the exception is rethrown. If more than one task
 encounters an exception, then this method throws any one of
 these exceptions. If any task encounters an exception, others
 may be cancelled. However, the execution status of individual
 tasks is not guaranteed upon exceptional return. The status of
 each task may be obtained using getException() and
 related methods to check if they have been cancelled, completed
 normally or exceptionally, or left unprocessed.

Parameters:
tasks - the tasks
Throws:
NullPointerException - if any task is null


"
ForkJoinTask,"invokeAll(ForkJoinTask<?> t1, ForkJoinTask<?> t2)",static void,"Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown.","

invokeAll
public static void invokeAll(ForkJoinTask<?> t1,
                             ForkJoinTask<?> t2)
Forks the given tasks, returning when isDone holds for
 each task or an (unchecked) exception is encountered, in which
 case the exception is rethrown. If more than one task
 encounters an exception, then this method throws any one of
 these exceptions. If any task encounters an exception, the
 other may be cancelled. However, the execution status of
 individual tasks is not guaranteed upon exceptional return. The
 status of each task may be obtained using getException() and related methods to check if they have been
 cancelled, completed normally or exceptionally, or left
 unprocessed.

Parameters:
t1 - the first task
t2 - the second task
Throws:
NullPointerException - if any task is null


"
ForkJoinTask,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.,"

isCancelled
public final boolean isCancelled()
Description copied from interface: Future
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<V>
Returns:
true if this task was cancelled before it completed


"
ForkJoinTask,isCompletedAbnormally(),boolean,Returns true if this task threw an exception or was cancelled.,"

isCompletedAbnormally
public final boolean isCompletedAbnormally()
Returns true if this task threw an exception or was cancelled.

Returns:
true if this task threw an exception or was cancelled


"
ForkJoinTask,isCompletedNormally(),boolean,Returns true if this task completed without throwing an exception and was not cancelled.,"

isCompletedNormally
public final boolean isCompletedNormally()
Returns true if this task completed without throwing an
 exception and was not cancelled.

Returns:
true if this task completed without throwing an
 exception and was not cancelled


"
ForkJoinTask,isDone(),boolean,Returns true if this task completed.,"

isDone
public final boolean isDone()
Description copied from interface: Future
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<V>
Returns:
true if this task completed


"
ForkJoinTask,join(),V,Returns the result of the computation when it is done.,"

join
public final V join()
Returns the result of the computation when it is
 done.  This method differs from get() in that
 abnormal completion results in RuntimeException or
 Error, not ExecutionException, and that
 interrupts of the calling thread do not cause the
 method to abruptly return by throwing InterruptedException.

Returns:
the computed result


"
ForkJoinTask,peekNextLocalTask(),protected static ForkJoinTask<?>,"Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available.","

peekNextLocalTask
protected static ForkJoinTask<?> peekNextLocalTask()
Returns, but does not unschedule or execute, a task queued by
 the current thread but not yet executed, if one is immediately
 available. There is no guarantee that this task will actually
 be polled or executed next. Conversely, this method may return
 null even if a task exists but cannot be accessed without
 contention with other threads.  This method is designed
 primarily to support extensions, and is unlikely to be useful
 otherwise.

Returns:
the next task, or null if none are available


"
ForkJoinTask,pollNextLocalTask(),protected static ForkJoinTask<?>,"Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool.","

pollNextLocalTask
protected static ForkJoinTask<?> pollNextLocalTask()
Unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if the
 current thread is operating in a ForkJoinPool.  This method is
 designed primarily to support extensions, and is unlikely to be
 useful otherwise.

Returns:
the next task, or null if none are available


"
ForkJoinTask,pollTask(),protected static ForkJoinTask<?>,"If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available.","

pollTask
protected static ForkJoinTask<?> pollTask()
If the current thread is operating in a ForkJoinPool,
 unschedules and returns, without executing, the next task
 queued by the current thread but not yet executed, if one is
 available, or if not available, a task that was forked by some
 other thread, if available. Availability may be transient, so a
 null result does not necessarily imply quiescence of
 the pool this task is operating in.  This method is designed
 primarily to support extensions, and is unlikely to be useful
 otherwise.

Returns:
a task, or null if none are available


"
ForkJoinTask,quietlyComplete(),void,Completes this task normally without setting a value.,"

quietlyComplete
public final void quietlyComplete()
Completes this task normally without setting a value. The most
 recent value established by setRawResult(V) (or null by default) will be returned as the result of subsequent
 invocations of join and related operations.

Since:
1.8


"
ForkJoinTask,quietlyInvoke(),void,"Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.","

quietlyInvoke
public final void quietlyInvoke()
Commences performing this task and awaits its completion if
 necessary, without returning its result or throwing its
 exception.

"
ForkJoinTask,quietlyJoin(),void,"Joins this task, without returning its result or throwing its exception.","

quietlyJoin
public final void quietlyJoin()
Joins this task, without returning its result or throwing its
 exception. This method may be useful when processing
 collections of tasks when some have been cancelled or otherwise
 known to have aborted.

"
ForkJoinTask,reinitialize(),void,"Resets the internal bookkeeping state of this task, allowing a subsequent fork.","

reinitialize
public void reinitialize()
Resets the internal bookkeeping state of this task, allowing a
 subsequent fork. This method allows repeated reuse of
 this task, but only if reuse occurs when this task has either
 never been forked, or has been forked, then completed and all
 outstanding joins of this task have also completed. Effects
 under any other usage conditions are not guaranteed.
 This method may be useful when executing
 pre-constructed trees of subtasks in loops.

 Upon completion of this method, isDone() reports
 false, and getException() reports null. However, the value returned by getRawResult is
 unaffected. To clear this value, you can invoke setRawResult(null).

"
ForkJoinTask,setForkJoinTaskTag(short tag),short,Atomically sets the tag value for this task.,"

setForkJoinTaskTag
public final short setForkJoinTaskTag(short tag)
Atomically sets the tag value for this task.

Parameters:
tag - the tag value
Returns:
the previous value of the tag
Since:
1.8


"
ForkJoinTask,setRawResult(V value),protected abstract void,Forces the given value to be returned as a result.,"

setRawResult
protected abstract void setRawResult(V value)
Forces the given value to be returned as a result.  This method
 is designed to support extensions, and should not in general be
 called otherwise.

Parameters:
value - the value


"
ForkJoinTask,tryUnfork(),boolean,Tries to unschedule this task for execution.,"

tryUnfork
public boolean tryUnfork()
Tries to unschedule this task for execution. This method will
 typically (but is not guaranteed to) succeed if this task is
 the most recently forked task by the current thread, and has
 not commenced executing in another thread.  This method may be
 useful when arranging alternative local processing of tasks
 that could have been, but were not, stolen.

Returns:
true if unforked


"
ForkJoinWorkerThread,getPool(),ForkJoinPool,Returns the pool hosting this thread.,"

getPool
public ForkJoinPool getPool()
Returns the pool hosting this thread.

Returns:
the pool


"
ForkJoinWorkerThread,getPoolIndex(),int,Returns the unique index number of this thread in its pool.,"

getPoolIndex
public int getPoolIndex()
Returns the unique index number of this thread in its pool.
 The returned value ranges from zero to the maximum number of
 threads (minus one) that may exist in the pool, and does not
 change during the lifetime of the thread.  This method may be
 useful for applications that track status or collect results
 per-worker-thread rather than per-task.

Returns:
the index number


"
ForkJoinWorkerThread,onStart(),protected void,Initializes internal state after construction but before processing any tasks.,"

onStart
protected void onStart()
Initializes internal state after construction but before
 processing any tasks. If you override this method, you must
 invoke super.onStart() at the beginning of the method.
 Initialization requires care: Most fields must have legal
 default values, to ensure that attempted accesses from other
 threads work correctly even before this thread starts
 processing tasks.

"
ForkJoinWorkerThread,onTermination(Throwable exception),protected void,Performs cleanup associated with termination of this worker thread.,"

onTermination
protected void onTermination(Throwable exception)
Performs cleanup associated with termination of this worker
 thread.  If you override this method, you must invoke
 super.onTermination at the end of the overridden method.

Parameters:
exception - the exception causing this thread to abort due
 to an unrecoverable error, or null if completed normally


"
ForkJoinWorkerThread,run(),void,"This method is required to be public, but should never be called explicitly.","

run
public void run()
This method is required to be public, but should never be
 called explicitly. It performs the main run loop to execute
 ForkJoinTasks.

Specified by:
run in interface Runnable
Overrides:
run in class Thread
See Also:
Thread.start(), 
Thread.stop(), 
Thread.Thread(ThreadGroup, Runnable, String)


"
FutureTask,cancel(boolean mayInterruptIfRunning),boolean,Attempts to cancel execution of this task.,"

cancel
public boolean cancel(boolean mayInterruptIfRunning)
Description copied from interface: Future
Attempts to cancel execution of this task.  This attempt will
 fail if the task has already completed, has already been cancelled,
 or could not be cancelled for some other reason. If successful,
 and this task has not started when cancel is called,
 this task should never run.  If the task has already started,
 then the mayInterruptIfRunning parameter determines
 whether the thread executing this task should be interrupted in
 an attempt to stop the task.

 After this method returns, subsequent calls to Future.isDone() will
 always return true.  Subsequent calls to Future.isCancelled()
 will always return true if this method returned true.

Specified by:
cancel in interface Future<V>
Parameters:
mayInterruptIfRunning - true if the thread executing this
 task should be interrupted; otherwise, in-progress tasks are allowed
 to complete
Returns:
false if the task could not be cancelled,
 typically because it has already completed normally;
 true otherwise


"
FutureTask,done(),protected void,Protected method invoked when this task transitions to state isDone (whether normally or via cancellation).,"

done
protected void done()
Protected method invoked when this task transitions to state
 isDone (whether normally or via cancellation). The
 default implementation does nothing.  Subclasses may override
 this method to invoke completion callbacks or perform
 bookkeeping. Note that you can query status inside the
 implementation of this method to determine whether this task
 has been cancelled.

"
FutureTask,get(),V,"Waits if necessary for the computation to complete, and then retrieves its result.","

get
public V get()
      throws InterruptedException,
             ExecutionException
Description copied from interface: Future
Waits if necessary for the computation to complete, and then
 retrieves its result.

Specified by:
get in interface Future<V>
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception


"
FutureTask,"get(long timeout, TimeUnit unit)",V,"Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.","

get
public V get(long timeout,
             TimeUnit unit)
      throws InterruptedException,
             ExecutionException,
             TimeoutException
Description copied from interface: Future
Waits if necessary for at most the given time for the computation
 to complete, and then retrieves its result, if available.

Specified by:
get in interface Future<V>
Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception
TimeoutException - if the wait timed out


"
FutureTask,isCancelled(),boolean,Returns true if this task was cancelled before it completed normally.,"

isCancelled
public boolean isCancelled()
Description copied from interface: Future
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<V>
Returns:
true if this task was cancelled before it completed


"
FutureTask,isDone(),boolean,Returns true if this task completed.,"

isDone
public boolean isDone()
Description copied from interface: Future
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<V>
Returns:
true if this task completed


"
FutureTask,run(),void,Sets this Future to the result of its computation unless it has been cancelled.,"

run
public void run()
Description copied from interface: RunnableFuture
Sets this Future to the result of its computation
 unless it has been cancelled.

Specified by:
run in interface Runnable
Specified by:
run in interface RunnableFuture<V>
See Also:
Thread.run()


"
FutureTask,runAndReset(),protected boolean,"Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled.","

runAndReset
protected boolean runAndReset()
Executes the computation without setting its result, and then
 resets this future to initial state, failing to do so if the
 computation encounters an exception or is cancelled.  This is
 designed for use with tasks that intrinsically execute more
 than once.

Returns:
true if successfully run and reset


"
FutureTask,set(V v),protected void,Sets the result of this future to the given value unless this future has already been set or has been cancelled.,"

set
protected void set(V v)
Sets the result of this future to the given value unless
 this future has already been set or has been cancelled.

 This method is invoked internally by the run() method
 upon successful completion of the computation.

Parameters:
v - the value


"
FutureTask,setException(Throwable t),protected void,"Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled.","

setException
protected void setException(Throwable t)
Causes this future to report an ExecutionException
 with the given throwable as its cause, unless this future has
 already been set or has been cancelled.

 This method is invoked internally by the run() method
 upon failure of the computation.

Parameters:
t - the cause of failure


"
LinkedBlockingDeque,add(E e),boolean,Inserts the specified element at the end of this deque unless it would violate capacity restrictions.,"

add
public boolean add(E e)
Inserts the specified element at the end of this deque unless it would
 violate capacity restrictions.  When using a capacity-restricted deque,
 it is generally preferable to use method offer.

 This method is equivalent to addLast(E).

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingDeque<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Deque<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
IllegalStateException - if this deque is full
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,addFirst(E e),void,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.","

addFirst
public void addFirst(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the front of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 throwing an IllegalStateException if no space is currently
 available.  When using a capacity-restricted deque, it is generally
 preferable to use offerFirst.

Specified by:
addFirst in interface BlockingDeque<E>
Specified by:
addFirst in interface Deque<E>
Parameters:
e - the element to add
Throws:
IllegalStateException - if this deque is full
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,addLast(E e),void,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.","

addLast
public void addLast(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the end of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 throwing an IllegalStateException if no space is currently
 available.  When using a capacity-restricted deque, it is generally
 preferable to use offerLast.

Specified by:
addLast in interface BlockingDeque<E>
Specified by:
addLast in interface Deque<E>
Parameters:
e - the element to add
Throws:
IllegalStateException - if this deque is full
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,clear(),void,Atomically removes all of the elements from this deque.,"

clear
public void clear()
Atomically removes all of the elements from this deque.
 The deque will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractQueue<E>


"
LinkedBlockingDeque,contains(Object o),boolean,Returns true if this deque contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this deque contains the specified element.
 More formally, returns true if and only if this deque contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingDeque<E>
Specified by:
contains in interface BlockingQueue<E>
Specified by:
contains in interface Deque<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this deque
Returns:
true if this deque contains the specified element


"
LinkedBlockingDeque,descendingIterator(),Iterator<E>,Returns an iterator over the elements in this deque in reverse sequential order.,"

descendingIterator
public Iterator<E> descendingIterator()
Returns an iterator over the elements in this deque in reverse
 sequential order.  The elements will be returned in order from
 last (tail) to first (head).

 The returned iterator is
 weakly consistent.

Specified by:
descendingIterator in interface Deque<E>
Returns:
an iterator over the elements in this deque in reverse order


"
LinkedBlockingDeque,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedBlockingDeque,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedBlockingDeque,element(),E,"Retrieves, but does not remove, the head of the queue represented by this deque.","

element
public E element()
Retrieves, but does not remove, the head of the queue represented by
 this deque.  This method differs from peek only in that
 it throws an exception if this deque is empty.

 This method is equivalent to getFirst.

Specified by:
element in interface BlockingDeque<E>
Specified by:
element in interface Deque<E>
Specified by:
element in interface Queue<E>
Overrides:
element in class AbstractQueue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,getFirst(),E,"Retrieves, but does not remove, the first element of this deque.","

getFirst
public E getFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque.

 This method differs from peekFirst only in that it
 throws an exception if this deque is empty.

Specified by:
getFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,getLast(),E,"Retrieves, but does not remove, the last element of this deque.","

getLast
public E getLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque.
 This method differs from peekLast only in that it
 throws an exception if this deque is empty.

Specified by:
getLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,iterator(),Iterator<E>,Returns an iterator over the elements in this deque in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this deque in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in interface BlockingDeque<E>
Specified by:
iterator in interface Deque<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this deque in proper sequence


"
LinkedBlockingDeque,offer(E e),boolean,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offer
public boolean offer(E e)
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 true upon success and false if no space is currently
 available.  When using a capacity-restricted deque, this method is
 generally preferable to the BlockingDeque.add(E) method, which can fail to
 insert an element only by throwing an exception.

 This method is equivalent to offerLast.

Specified by:
offer in interface BlockingDeque<E>
Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available.","

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
              throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque), waiting up to the
 specified wait time if necessary for space to become available.

 This method is equivalent to
 offerLast.

Specified by:
offer in interface BlockingDeque<E>
Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if the element was added to this deque, else
         false
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,offerFirst(E e),boolean,"Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offerFirst
public boolean offerFirst(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the front of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 returning true upon success and false if no space is
 currently available.
 When using a capacity-restricted deque, this method is generally
 preferable to the addFirst method, which can
 fail to insert an element only by throwing an exception.

Specified by:
offerFirst in interface BlockingDeque<E>
Specified by:
offerFirst in interface Deque<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this deque, else
         false
Throws:
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,"offerFirst(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.","

offerFirst
public boolean offerFirst(E e,
                          long timeout,
                          TimeUnit unit)
                   throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element at the front of this deque,
 waiting up to the specified wait time if necessary for space to
 become available.

Specified by:
offerFirst in interface BlockingDeque<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before space is available
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,offerLast(E e),boolean,"Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.","

offerLast
public boolean offerLast(E e)
Description copied from interface: BlockingDeque
Inserts the specified element at the end of this deque if it is
 possible to do so immediately without violating capacity restrictions,
 returning true upon success and false if no space is
 currently available.
 When using a capacity-restricted deque, this method is generally
 preferable to the addLast method, which can
 fail to insert an element only by throwing an exception.

Specified by:
offerLast in interface BlockingDeque<E>
Specified by:
offerLast in interface Deque<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this deque, else
         false
Throws:
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,"offerLast(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.","

offerLast
public boolean offerLast(E e,
                         long timeout,
                         TimeUnit unit)
                  throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element at the end of this deque,
 waiting up to the specified wait time if necessary for space to
 become available.

Specified by:
offerLast in interface BlockingDeque<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before space is available
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,peek(),E,"Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

peek
public E peek()
Description copied from interface: BlockingDeque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns null if this deque is empty.

 This method is equivalent to peekFirst.

Specified by:
peek in interface BlockingDeque<E>
Specified by:
peek in interface Deque<E>
Specified by:
peek in interface Queue<E>
Returns:
the head of this deque, or null if this deque is empty


"
LinkedBlockingDeque,peekFirst(),E,"Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.","

peekFirst
public E peekFirst()
Description copied from interface: Deque
Retrieves, but does not remove, the first element of this deque,
 or returns null if this deque is empty.

Specified by:
peekFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
LinkedBlockingDeque,peekLast(),E,"Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.","

peekLast
public E peekLast()
Description copied from interface: Deque
Retrieves, but does not remove, the last element of this deque,
 or returns null if this deque is empty.

Specified by:
peekLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
LinkedBlockingDeque,poll(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.","

poll
public E poll()
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface BlockingDeque<E>
Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the head of this deque, or null if this deque is empty


"
LinkedBlockingDeque,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), waiting up to the
 specified wait time if necessary for an element to become available.

 This method is equivalent to
 pollFirst.

Specified by:
poll in interface BlockingDeque<E>
Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this deque, or null if the
         specified waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,pollFirst(),E,"Retrieves and removes the first element of this deque, or returns null if this deque is empty.","

pollFirst
public E pollFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque,
 or returns null if this deque is empty.

Specified by:
pollFirst in interface Deque<E>
Returns:
the head of this deque, or null if this deque is empty


"
LinkedBlockingDeque,"pollFirst(long timeout, TimeUnit unit)",E,"Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.","

pollFirst
public E pollFirst(long timeout,
                   TimeUnit unit)
            throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the first element of this deque, waiting
 up to the specified wait time if necessary for an element to
 become available.

Specified by:
pollFirst in interface BlockingDeque<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this deque, or null if the specified
         waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,pollLast(),E,"Retrieves and removes the last element of this deque, or returns null if this deque is empty.","

pollLast
public E pollLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque,
 or returns null if this deque is empty.

Specified by:
pollLast in interface Deque<E>
Returns:
the tail of this deque, or null if this deque is empty


"
LinkedBlockingDeque,"pollLast(long timeout, TimeUnit unit)",E,"Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.","

pollLast
public E pollLast(long timeout,
                  TimeUnit unit)
           throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the last element of this deque, waiting
 up to the specified wait time if necessary for an element to
 become available.

Specified by:
pollLast in interface BlockingDeque<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the tail of this deque, or null if the specified
         waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,pop(),E,Pops an element from the stack represented by this deque.,"

pop
public E pop()
Description copied from interface: Deque
Pops an element from the stack represented by this deque.  In other
 words, removes and returns the first element of this deque.

 This method is equivalent to Deque.removeFirst().

Specified by:
pop in interface Deque<E>
Returns:
the element at the front of this deque (which is the top
         of the stack represented by this deque)
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,push(E e),void,"Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.","

push
public void push(E e)
Description copied from interface: BlockingDeque
Pushes an element onto the stack represented by this deque (in other
 words, at the head of this deque) if it is possible to do so
 immediately without violating capacity restrictions, throwing an
 IllegalStateException if no space is currently available.

 This method is equivalent to addFirst.

Specified by:
push in interface BlockingDeque<E>
Specified by:
push in interface Deque<E>
Parameters:
e - the element to push
Throws:
IllegalStateException - if this deque is full
NullPointerException - if the specified element is null


"
LinkedBlockingDeque,put(E e),void,"Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available.","

put
public void put(E e)
         throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque), waiting if necessary for
 space to become available.

 This method is equivalent to putLast.

Specified by:
put in interface BlockingDeque<E>
Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,putFirst(E e),void,"Inserts the specified element at the front of this deque, waiting if necessary for space to become available.","

putFirst
public void putFirst(E e)
              throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element at the front of this deque,
 waiting if necessary for space to become available.

Specified by:
putFirst in interface BlockingDeque<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,putLast(E e),void,"Inserts the specified element at the end of this deque, waiting if necessary for space to become available.","

putLast
public void putLast(E e)
             throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element at the end of this deque,
 waiting if necessary for space to become available.

Specified by:
putLast in interface BlockingDeque<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,remainingCapacity(),int,Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking.,"

remainingCapacity
public int remainingCapacity()
Returns the number of additional elements that this deque can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this deque
 less the current size of this deque.

 Note that you cannot always tell if an attempt to insert
 an element will succeed by inspecting remainingCapacity
 because it may be the case that another thread is about to
 insert or remove an element.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
the remaining capacity


"
LinkedBlockingDeque,remove(),E,Retrieves and removes the head of the queue represented by this deque.,"

remove
public E remove()
Retrieves and removes the head of the queue represented by this deque.
 This method differs from poll only in that it throws an
 exception if this deque is empty.

 This method is equivalent to removeFirst.

Specified by:
remove in interface BlockingDeque<E>
Specified by:
remove in interface Deque<E>
Specified by:
remove in interface Queue<E>
Overrides:
remove in class AbstractQueue<E>
Returns:
the head of the queue represented by this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,remove(Object o),boolean,Removes the first occurrence of the specified element from this deque.,"

remove
public boolean remove(Object o)
Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element e such that
 o.equals(e) (if such an element exists).
 Returns true if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

 This method is equivalent to
 removeFirstOccurrence.

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingDeque<E>
Specified by:
remove in interface BlockingQueue<E>
Specified by:
remove in interface Deque<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if this deque changed as a result of the call


"
LinkedBlockingDeque,removeFirst(),E,Retrieves and removes the first element of this deque.,"

removeFirst
public E removeFirst()
Description copied from interface: Deque
Retrieves and removes the first element of this deque.  This method
 differs from pollFirst only in that it throws an
 exception if this deque is empty.

Specified by:
removeFirst in interface Deque<E>
Returns:
the head of this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,removeFirstOccurrence(Object o),boolean,Removes the first occurrence of the specified element from this deque.,"

removeFirstOccurrence
public boolean removeFirstOccurrence(Object o)
Description copied from interface: BlockingDeque
Removes the first occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the first element e such that
 o.equals(e) (if such an element exists).
 Returns true if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

Specified by:
removeFirstOccurrence in interface BlockingDeque<E>
Specified by:
removeFirstOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if an element was removed as a result of this call


"
LinkedBlockingDeque,removeLast(),E,Retrieves and removes the last element of this deque.,"

removeLast
public E removeLast()
Description copied from interface: Deque
Retrieves and removes the last element of this deque.  This method
 differs from pollLast only in that it throws an
 exception if this deque is empty.

Specified by:
removeLast in interface Deque<E>
Returns:
the tail of this deque
Throws:
NoSuchElementException - if this deque is empty


"
LinkedBlockingDeque,removeLastOccurrence(Object o),boolean,Removes the last occurrence of the specified element from this deque.,"

removeLastOccurrence
public boolean removeLastOccurrence(Object o)
Description copied from interface: BlockingDeque
Removes the last occurrence of the specified element from this deque.
 If the deque does not contain the element, it is unchanged.
 More formally, removes the last element e such that
 o.equals(e) (if such an element exists).
 Returns true if this deque contained the specified element
 (or equivalently, if this deque changed as a result of the call).

Specified by:
removeLastOccurrence in interface BlockingDeque<E>
Specified by:
removeLastOccurrence in interface Deque<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if an element was removed as a result of this call


"
LinkedBlockingDeque,size(),int,Returns the number of elements in this deque.,"

size
public int size()
Returns the number of elements in this deque.

Specified by:
size in interface Collection<E>
Specified by:
size in interface BlockingDeque<E>
Specified by:
size in interface Deque<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this deque


"
LinkedBlockingDeque,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this deque.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this deque.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this deque
Since:
1.8


"
LinkedBlockingDeque,take(),E,"Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), waiting if
 necessary until an element becomes available.

 This method is equivalent to takeFirst.

Specified by:
take in interface BlockingDeque<E>
Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this deque
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,takeFirst(),E,"Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.","

takeFirst
public E takeFirst()
            throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the first element of this deque, waiting
 if necessary until an element becomes available.

Specified by:
takeFirst in interface BlockingDeque<E>
Returns:
the head of this deque
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,takeLast(),E,"Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available.","

takeLast
public E takeLast()
           throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the last element of this deque, waiting
 if necessary until an element becomes available.

Specified by:
takeLast in interface BlockingDeque<E>
Returns:
the tail of this deque
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingDeque,toArray(),Object[],"Returns an array containing all of the elements in this deque, in proper sequence (from first to last element).","

toArray
public Object[] toArray()
Returns an array containing all of the elements in this deque, in
 proper sequence (from first to last element).

 The returned array will be ""safe"" in that no references to it are
 maintained by this deque.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this deque


"
LinkedBlockingDeque,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array.","

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this deque, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the deque fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this deque.

 If this deque fits in the specified array with room to spare
 (i.e., the array has more elements than this deque), the element in
 the array immediately following the end of the deque is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a deque known to contain only strings.
 The following code can be used to dump the deque into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the deque are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this deque
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this deque
NullPointerException - if the specified array is null


"
LinkedBlockingDeque,toString(),String,Returns a string representation of this collection.,"

toString
public String toString()
Description copied from class: AbstractCollection
Returns a string representation of this collection.  The string
 representation consists of a list of the collection's elements in the
 order they are returned by its iterator, enclosed in square brackets
 (""[]"").  Adjacent elements are separated by the characters
 "", "" (comma and space).  Elements are converted to strings as
 by String.valueOf(Object).

Overrides:
toString in class AbstractCollection<E>
Returns:
a string representation of this collection


"
LinkedBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.,"

clear
public void clear()
Atomically removes all of the elements from this queue.
 The queue will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractQueue<E>


"
LinkedBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingQueue<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
LinkedBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this queue in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this queue in proper sequence


"
LinkedBlockingQueue,offer(E e),boolean,"Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full.","

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.
 When using a capacity-restricted queue, this method is generally
 preferable to method add, which can fail to
 insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
LinkedBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available.","

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
              throws InterruptedException
Inserts the specified element at the tail of this queue, waiting if
 necessary up to the specified wait time for space to become available.

Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before space is available
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
LinkedBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
LinkedBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
LinkedBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.

Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingQueue,put(E e),void,"Inserts the specified element at the tail of this queue, waiting if necessary for space to become available.","

put
public void put(E e)
         throws InterruptedException
Inserts the specified element at the tail of this queue, waiting if
 necessary for space to become available.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
LinkedBlockingQueue,remainingCapacity(),int,Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.,"

remainingCapacity
public int remainingCapacity()
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this queue
 less the current size of this queue.

 Note that you cannot always tell if an attempt to insert
 an element will succeed by inspecting remainingCapacity
 because it may be the case that another thread is about to
 insert or remove an element.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
the remaining capacity


"
LinkedBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.
 Returns true if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
LinkedBlockingQueue,size(),int,Returns the number of elements in this queue.,"

size
public int size()
Returns the number of elements in this queue.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
LinkedBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this queue.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this queue
Since:
1.8


"
LinkedBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
LinkedBlockingQueue,toArray(),Object[],"Returns an array containing all of the elements in this queue, in proper sequence.","

toArray
public Object[] toArray()
Returns an array containing all of the elements in this queue, in
 proper sequence.

 The returned array will be ""safe"" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this queue


"
LinkedBlockingQueue,toArray(T[] a),<T> T[],"Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array.","

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this queue, in
 proper sequence; the runtime type of the returned array is that of
 the specified array.  If the queue fits in the specified array, it
 is returned therein.  Otherwise, a new array is allocated with the
 runtime type of the specified array and the size of this queue.

 If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this queue
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
NullPointerException - if the specified array is null


"
LinkedBlockingQueue,toString(),String,Returns a string representation of this collection.,"

toString
public String toString()
Description copied from class: AbstractCollection
Returns a string representation of this collection.  The string
 representation consists of a list of the collection's elements in the
 order they are returned by its iterator, enclosed in square brackets
 (""[]"").  Adjacent elements are separated by the characters
 "", "" (comma and space).  Elements are converted to strings as
 by String.valueOf(Object).

Overrides:
toString in class AbstractCollection<E>
Returns:
a string representation of this collection


"
LinkedTransferQueue,add(E e),boolean,Inserts the specified element at the tail of this queue.,"

add
public boolean add(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never throw
 IllegalStateException or return false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
NullPointerException - if the specified element is null


"
LinkedTransferQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingQueue<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
LinkedTransferQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedTransferQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
LinkedTransferQueue,getWaitingConsumerCount(),int,Returns an estimate of the number of consumers waiting to receive elements via BlockingQueue.take() or timed poll.,"

getWaitingConsumerCount
public int getWaitingConsumerCount()
Description copied from interface: TransferQueue
Returns an estimate of the number of consumers waiting to
 receive elements via BlockingQueue.take() or timed
 poll.  The return value is an
 approximation of a momentary state of affairs, that may be
 inaccurate if consumers have completed or given up waiting.
 The value may be useful for monitoring and heuristics, but
 not for synchronization control.  Implementations of this
 method are likely to be noticeably slower than those for
 TransferQueue.hasWaitingConsumer().

Specified by:
getWaitingConsumerCount in interface TransferQueue<E>
Returns:
the number of consumers waiting to receive elements


"
LinkedTransferQueue,hasWaitingConsumer(),boolean,Returns true if there is at least one consumer waiting to receive an element via BlockingQueue.take() or timed poll.,"

hasWaitingConsumer
public boolean hasWaitingConsumer()
Description copied from interface: TransferQueue
Returns true if there is at least one consumer waiting
 to receive an element via BlockingQueue.take() or
 timed poll.
 The return value represents a momentary state of affairs.

Specified by:
hasWaitingConsumer in interface TransferQueue<E>
Returns:
true if there is at least one waiting consumer


"
LinkedTransferQueue,isEmpty(),boolean,Returns true if this queue contains no elements.,"

isEmpty
public boolean isEmpty()
Returns true if this queue contains no elements.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this queue contains no elements


"
LinkedTransferQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue in proper sequence.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this queue in proper sequence.
 The elements will be returned in order from first (head) to last (tail).

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this queue in proper sequence


"
LinkedTransferQueue,offer(E e),boolean,Inserts the specified element at the tail of this queue.,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
LinkedTransferQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element at the tail of this queue.,"

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never block or
 return false.

Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true (as specified by
  BlockingQueue.offer)
Throws:
NullPointerException - if the specified element is null


"
LinkedTransferQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
LinkedTransferQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
LinkedTransferQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.

Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
LinkedTransferQueue,put(E e),void,Inserts the specified element at the tail of this queue.,"

put
public void put(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never block.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null


"
LinkedTransferQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a LinkedTransferQueue is not capacity constrained.,"

remainingCapacity
public int remainingCapacity()
Always returns Integer.MAX_VALUE because a
 LinkedTransferQueue is not capacity constrained.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
Integer.MAX_VALUE (as specified by
         BlockingQueue.remainingCapacity)


"
LinkedTransferQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.
 Returns true if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
LinkedTransferQueue,size(),int,Returns the number of elements in this queue.,"

size
public int size()
Returns the number of elements in this queue.  If this queue
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current
 number of elements requires an O(n) traversal.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
LinkedTransferQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this queue.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.CONCURRENT,
 Spliterator.ORDERED, and Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator implements trySplit to permit limited
 parallelism.
Returns:
a Spliterator over the elements in this queue
Since:
1.8


"
LinkedTransferQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
LinkedTransferQueue,transfer(E e),void,"Transfers the element to a consumer, waiting if necessary to do so.","

transfer
public void transfer(E e)
              throws InterruptedException
Transfers the element to a consumer, waiting if necessary to do so.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 else inserts the specified element at the tail of this queue
 and waits until the element is received by a consumer.

Specified by:
transfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting,
         in which case the element is not left enqueued


"
LinkedTransferQueue,tryTransfer(E e),boolean,"Transfers the element to a waiting consumer immediately, if possible.","

tryTransfer
public boolean tryTransfer(E e)
Transfers the element to a waiting consumer immediately, if possible.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 otherwise returning false without enqueuing the element.

Specified by:
tryTransfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
Returns:
true if the element was transferred, else
         false
Throws:
NullPointerException - if the specified element is null


"
LinkedTransferQueue,"tryTransfer(E e, long timeout, TimeUnit unit)",boolean,Transfers the element to a consumer if it is possible to do so before the timeout elapses.,"

tryTransfer
public boolean tryTransfer(E e,
                           long timeout,
                           TimeUnit unit)
                    throws InterruptedException
Transfers the element to a consumer if it is possible to do so
 before the timeout elapses.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 else inserts the specified element at the tail of this queue
 and waits until the element is received by a consumer,
 returning false if the specified wait time elapses
 before the element can be transferred.

Specified by:
tryTransfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before completion,
         in which case the element is not left enqueued
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting,
         in which case the element is not left enqueued


"
Phaser,arrive(),int,"Arrives at this phaser, without waiting for others to arrive.","

arrive
public int arrive()
Arrives at this phaser, without waiting for others to arrive.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
Phaser,arriveAndAwaitAdvance(),int,Arrives at this phaser and awaits others.,"

arriveAndAwaitAdvance
public int arriveAndAwaitAdvance()
Arrives at this phaser and awaits others. Equivalent in effect
 to awaitAdvance(arrive()).  If you need to await with
 interruption or timeout, you can arrange this with an analogous
 construction using one of the other forms of the awaitAdvance method.  If instead you need to deregister upon
 arrival, use awaitAdvance(arriveAndDeregister()).

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or the (negative)
 current phase if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
Phaser,arriveAndDeregister(),int,Arrives at this phaser and deregisters from it without waiting for others to arrive.,"

arriveAndDeregister
public int arriveAndDeregister()
Arrives at this phaser and deregisters from it without waiting
 for others to arrive. Deregistration reduces the number of
 parties required to advance in future phases.  If this phaser
 has a parent, and deregistration causes this phaser to have
 zero parties, this phaser is also deregistered from its parent.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of registered or unarrived parties would become negative


"
Phaser,awaitAdvance(int phase),int,"Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.","

awaitAdvance
public int awaitAdvance(int phase)
Awaits the phase of this phaser to advance from the given phase
 value, returning immediately if the current phase is not equal
 to the given phase value or this phaser is terminated.

Parameters:
phase - an arrival phase number, or negative value if
 terminated; this argument is normally the value returned by a
 previous call to arrive or arriveAndDeregister.
Returns:
the next arrival phase number, or the argument if it is
 negative, or the (negative) current phase
 if terminated


"
Phaser,awaitAdvanceInterruptibly(int phase),int,"Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.","

awaitAdvanceInterruptibly
public int awaitAdvanceInterruptibly(int phase)
                              throws InterruptedException
Awaits the phase of this phaser to advance from the given phase
 value, throwing InterruptedException if interrupted
 while waiting, or returning immediately if the current phase is
 not equal to the given phase value or this phaser is
 terminated.

Parameters:
phase - an arrival phase number, or negative value if
 terminated; this argument is normally the value returned by a
 previous call to arrive or arriveAndDeregister.
Returns:
the next arrival phase number, or the argument if it is
 negative, or the (negative) current phase
 if terminated
Throws:
InterruptedException - if thread interrupted while waiting


"
Phaser,"awaitAdvanceInterruptibly(int phase, long timeout, TimeUnit unit)",int,"Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.","

awaitAdvanceInterruptibly
public int awaitAdvanceInterruptibly(int phase,
                                     long timeout,
                                     TimeUnit unit)
                              throws InterruptedException,
                                     TimeoutException
Awaits the phase of this phaser to advance from the given phase
 value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or
 returning immediately if the current phase is not equal to the
 given phase value or this phaser is terminated.

Parameters:
phase - an arrival phase number, or negative value if
 terminated; this argument is normally the value returned by a
 previous call to arrive or arriveAndDeregister.
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the next arrival phase number, or the argument if it is
 negative, or the (negative) current phase
 if terminated
Throws:
InterruptedException - if thread interrupted while waiting
TimeoutException - if timed out while waiting


"
Phaser,bulkRegister(int parties),int,Adds the given number of new unarrived parties to this phaser.,"

bulkRegister
public int bulkRegister(int parties)
Adds the given number of new unarrived parties to this phaser.
 If an ongoing invocation of onAdvance(int, int) is in progress,
 this method may await its completion before returning.  If this
 phaser has a parent, and the given number of parties is greater
 than zero, and this phaser previously had no registered
 parties, this child phaser is also registered with its parent.
 If this phaser is terminated, the attempt to register has no
 effect, and a negative value is returned.

Parameters:
parties - the number of additional parties required to
 advance to the next phase
Returns:
the arrival phase number to which this registration
 applied.  If this value is negative, then this phaser has
 terminated, in which case registration has no effect.
Throws:
IllegalStateException - if attempting to register more
 than the maximum supported number of parties
IllegalArgumentException - if parties < 0


"
Phaser,forceTermination(),void,Forces this phaser to enter termination state.,"

forceTermination
public void forceTermination()
Forces this phaser to enter termination state.  Counts of
 registered parties are unaffected.  If this phaser is a member
 of a tiered set of phasers, then all of the phasers in the set
 are terminated.  If this phaser is already terminated, this
 method has no effect.  This method may be useful for
 coordinating recovery after one or more tasks encounter
 unexpected exceptions.

"
Phaser,getArrivedParties(),int,Returns the number of registered parties that have arrived at the current phase of this phaser.,"

getArrivedParties
public int getArrivedParties()
Returns the number of registered parties that have arrived at
 the current phase of this phaser. If this phaser has terminated,
 the returned value is meaningless and arbitrary.

Returns:
the number of arrived parties


"
Phaser,getParent(),Phaser,"Returns the parent of this phaser, or null if none.","

getParent
public Phaser getParent()
Returns the parent of this phaser, or null if none.

Returns:
the parent of this phaser, or null if none


"
Phaser,getPhase(),int,Returns the current phase number.,"

getPhase
public final int getPhase()
Returns the current phase number. The maximum phase number is
 Integer.MAX_VALUE, after which it restarts at
 zero. Upon termination, the phase number is negative,
 in which case the prevailing phase prior to termination
 may be obtained via getPhase() + Integer.MIN_VALUE.

Returns:
the phase number, or a negative value if terminated


"
Phaser,getRegisteredParties(),int,Returns the number of parties registered at this phaser.,"

getRegisteredParties
public int getRegisteredParties()
Returns the number of parties registered at this phaser.

Returns:
the number of parties


"
Phaser,getRoot(),Phaser,"Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent.","

getRoot
public Phaser getRoot()
Returns the root ancestor of this phaser, which is the same as
 this phaser if it has no parent.

Returns:
the root ancestor of this phaser


"
Phaser,getUnarrivedParties(),int,Returns the number of registered parties that have not yet arrived at the current phase of this phaser.,"

getUnarrivedParties
public int getUnarrivedParties()
Returns the number of registered parties that have not yet
 arrived at the current phase of this phaser. If this phaser has
 terminated, the returned value is meaningless and arbitrary.

Returns:
the number of unarrived parties


"
Phaser,isTerminated(),boolean,Returns true if this phaser has been terminated.,"

isTerminated
public boolean isTerminated()
Returns true if this phaser has been terminated.

Returns:
true if this phaser has been terminated


"
Phaser,"onAdvance(int phase, int registeredParties)",protected boolean,"Overridable method to perform an action upon impending phase advance, and to control termination.","

onAdvance
protected boolean onAdvance(int phase,
                            int registeredParties)
Overridable method to perform an action upon impending phase
 advance, and to control termination. This method is invoked
 upon arrival of the party advancing this phaser (when all other
 waiting parties are dormant).  If this method returns true, this phaser will be set to a final termination state
 upon advance, and subsequent calls to isTerminated()
 will return true. Any (unchecked) Exception or Error thrown by
 an invocation of this method is propagated to the party
 attempting to advance this phaser, in which case no advance
 occurs.

 The arguments to this method provide the state of the phaser
 prevailing for the current transition.  The effects of invoking
 arrival, registration, and waiting methods on this phaser from
 within onAdvance are unspecified and should not be
 relied on.

 If this phaser is a member of a tiered set of phasers, then
 onAdvance is invoked only for its root phaser on each
 advance.

 To support the most common use cases, the default
 implementation of this method returns true when the
 number of registered parties has become zero as the result of a
 party invoking arriveAndDeregister.  You can disable
 this behavior, thus enabling continuation upon future
 registrations, by overriding this method to always return
 false:

  
 Phaser phaser = new Phaser() {
   protected boolean onAdvance(int phase, int parties) { return false; }
 }

Parameters:
phase - the current phase number on entry to this method,
 before this phaser is advanced
registeredParties - the current number of registered parties
Returns:
true if this phaser should terminate


"
Phaser,register(),int,Adds a new unarrived party to this phaser.,"

register
public int register()
Adds a new unarrived party to this phaser.  If an ongoing
 invocation of onAdvance(int, int) is in progress, this method
 may await its completion before returning.  If this phaser has
 a parent, and this phaser previously had no registered parties,
 this child phaser is also registered with its parent. If
 this phaser is terminated, the attempt to register has
 no effect, and a negative value is returned.

Returns:
the arrival phase number to which this registration
 applied.  If this value is negative, then this phaser has
 terminated, in which case registration has no effect.
Throws:
IllegalStateException - if attempting to register more
 than the maximum supported number of parties


"
Phaser,toString(),String,"Returns a string identifying this phaser, as well as its state.","

toString
public String toString()
Returns a string identifying this phaser, as well as its
 state.  The state, in brackets, includes the String ""phase = "" followed by the phase number, ""parties = ""
 followed by the number of registered parties, and ""arrived = "" followed by the number of arrived parties.

Overrides:
toString in class Object
Returns:
a string identifying this phaser, as well as its state


"
PriorityBlockingQueue,add(E e),boolean,Inserts the specified element into this priority queue.,"

add
public boolean add(E e)
Inserts the specified element into this priority queue.

Specified by:
add in interface Collection<E>
Specified by:
add in interface BlockingQueue<E>
Specified by:
add in interface Queue<E>
Overrides:
add in class AbstractQueue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Collection.add(E))
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
PriorityBlockingQueue,clear(),void,Atomically removes all of the elements from this queue.,"

clear
public void clear()
Atomically removes all of the elements from this queue.
 The queue will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractQueue<E>


"
PriorityBlockingQueue,comparator(),Comparator<? super E>,"Returns the comparator used to order the elements in this queue, or null if this queue uses the natural ordering of its elements.","

comparator
public Comparator<? super E> comparator()
Returns the comparator used to order the elements in this queue,
 or null if this queue uses the natural ordering of its elements.

Returns:
the comparator used to order the elements in this queue,
         or null if this queue uses the natural
         ordering of its elements


"
PriorityBlockingQueue,contains(Object o),boolean,Returns true if this queue contains the specified element.,"

contains
public boolean contains(Object o)
Returns true if this queue contains the specified element.
 More formally, returns true if and only if this queue contains
 at least one element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingQueue<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - object to be checked for containment in this queue
Returns:
true if this queue contains the specified element


"
PriorityBlockingQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
PriorityBlockingQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
PriorityBlockingQueue,iterator(),Iterator<E>,Returns an iterator over the elements in this queue.,"

iterator
public Iterator<E> iterator()
Returns an iterator over the elements in this queue. The
 iterator does not return the elements in any particular order.

 The returned iterator is
 weakly consistent.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an iterator over the elements in this queue


"
PriorityBlockingQueue,offer(E e),boolean,Inserts the specified element into this priority queue.,"

offer
public boolean offer(E e)
Inserts the specified element into this priority queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
PriorityBlockingQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,Inserts the specified element into this priority queue.,"

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
Inserts the specified element into this priority queue.
 As the queue is unbounded, this method will never block or
 return false.

Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - This parameter is ignored as the method never blocks
unit - This parameter is ignored as the method never blocks
Returns:
true (as specified by
  BlockingQueue.offer)
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
PriorityBlockingQueue,peek(),E,"Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.","

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
PriorityBlockingQueue,poll(),E,"Retrieves and removes the head of this queue, or returns null if this queue is empty.","

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
PriorityBlockingQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting up to the
 specified wait time if necessary for an element to become available.

Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element is available
Throws:
InterruptedException - if interrupted while waiting


"
PriorityBlockingQueue,put(E e),void,Inserts the specified element into this priority queue.,"

put
public void put(E e)
Inserts the specified element into this priority queue.
 As the queue is unbounded, this method will never block.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
PriorityBlockingQueue,remainingCapacity(),int,Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained.,"

remainingCapacity
public int remainingCapacity()
Always returns Integer.MAX_VALUE because
 a PriorityBlockingQueue is not capacity constrained.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
Integer.MAX_VALUE always


"
PriorityBlockingQueue,remove(Object o),boolean,"Removes a single instance of the specified element from this queue, if it is present.","

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.  Returns true if and only if this queue contained
 the specified element (or equivalently, if this queue changed as a
 result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
PriorityBlockingQueue,size(),int,Returns the number of elements in this collection.,"

size
public int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this collection


"
PriorityBlockingQueue,spliterator(),Spliterator<E>,Returns a Spliterator over the elements in this queue.,"

spliterator
public Spliterator<E> spliterator()
Returns a Spliterator over the elements in this queue.

 The returned spliterator is
 weakly consistent.

 The Spliterator reports Spliterator.SIZED and
 Spliterator.NONNULL.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Implementation Note:
The Spliterator additionally reports Spliterator.SUBSIZED.
Returns:
a Spliterator over the elements in this queue
Since:
1.8


"
PriorityBlockingQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.","

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
PriorityBlockingQueue,toArray(),Object[],Returns an array containing all of the elements in this queue.,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this queue.
 The returned array elements are in no particular order.

 The returned array will be ""safe"" in that no references to it are
 maintained by this queue.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
an array containing all of the elements in this queue


"
PriorityBlockingQueue,toArray(T[] a),<T> T[],Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.,"

toArray
public <T> T[] toArray(T[] a)
Returns an array containing all of the elements in this queue; the
 runtime type of the returned array is that of the specified array.
 The returned array elements are in no particular order.
 If the queue fits in the specified array, it is returned therein.
 Otherwise, a new array is allocated with the runtime type of the
 specified array and the size of this queue.

 If this queue fits in the specified array with room to spare
 (i.e., the array has more elements than this queue), the element in
 the array immediately following the end of the queue is set to
 null.

 Like the toArray() method, this method acts as bridge between
 array-based and collection-based APIs.  Further, this method allows
 precise control over the runtime type of the output array, and may,
 under certain circumstances, be used to save allocation costs.

 Suppose x is a queue known to contain only strings.
 The following code can be used to dump the queue into a newly
 allocated array of String:

    String[] y = x.toArray(new String[0]);

 Note that toArray(new Object[0]) is identical in function to
 toArray().

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array into which the elements of the queue are to
          be stored, if it is big enough; otherwise, a new array of the
          same runtime type is allocated for this purpose
Returns:
an array containing all of the elements in this queue
Throws:
ArrayStoreException - if the runtime type of the specified array
         is not a supertype of the runtime type of every element in
         this queue
NullPointerException - if the specified array is null


"
PriorityBlockingQueue,toString(),String,Returns a string representation of this collection.,"

toString
public String toString()
Description copied from class: AbstractCollection
Returns a string representation of this collection.  The string
 representation consists of a list of the collection's elements in the
 order they are returned by its iterator, enclosed in square brackets
 (""[]"").  Adjacent elements are separated by the characters
 "", "" (comma and space).  Elements are converted to strings as
 by String.valueOf(Object).

Overrides:
toString in class AbstractCollection<E>
Returns:
a string representation of this collection


"
RecursiveAction,compute(),protected abstract void,The main computation performed by this task.,"

compute
protected abstract void compute()
The main computation performed by this task.

"
RecursiveAction,exec(),protected boolean,Implements execution conventions for RecursiveActions.,"

exec
protected final boolean exec()
Implements execution conventions for RecursiveActions.

Specified by:
exec in class ForkJoinTask<Void>
Returns:
true if this task is known to have completed normally


"
RecursiveAction,getRawResult(),Void,Always returns null.,"

getRawResult
public final Void getRawResult()
Always returns null.

Specified by:
getRawResult in class ForkJoinTask<Void>
Returns:
null always


"
RecursiveAction,setRawResult(Void mustBeNull),protected void,Requires null completion value.,"

setRawResult
protected final void setRawResult(Void mustBeNull)
Requires null completion value.

Specified by:
setRawResult in class ForkJoinTask<Void>
Parameters:
mustBeNull - the value


"
RecursiveTask,compute(),protected abstract V,The main computation performed by this task.,"

compute
protected abstract V compute()
The main computation performed by this task.

Returns:
the result of the computation


"
RecursiveTask,exec(),protected boolean,Implements execution conventions for RecursiveTask.,"

exec
protected final boolean exec()
Implements execution conventions for RecursiveTask.

Specified by:
exec in class ForkJoinTask<V>
Returns:
true if this task is known to have completed normally


"
RecursiveTask,getRawResult(),V,"Returns the result that would be returned by ForkJoinTask.join(), even if this task completed abnormally, or null if this task is not known to have been completed.","

getRawResult
public final V getRawResult()
Description copied from class: ForkJoinTask
Returns the result that would be returned by ForkJoinTask.join(), even
 if this task completed abnormally, or null if this task
 is not known to have been completed.  This method is designed
 to aid debugging, as well as to support extensions. Its use in
 any other context is discouraged.

Specified by:
getRawResult in class ForkJoinTask<V>
Returns:
the result, or null if not completed


"
RecursiveTask,setRawResult(V value),protected void,Forces the given value to be returned as a result.,"

setRawResult
protected final void setRawResult(V value)
Description copied from class: ForkJoinTask
Forces the given value to be returned as a result.  This method
 is designed to support extensions, and should not in general be
 called otherwise.

Specified by:
setRawResult in class ForkJoinTask<V>
Parameters:
value - the value


"
ScheduledThreadPoolExecutor,"decorateTask(Callable<V> callable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>,Modifies or replaces the task used to execute a callable.,"

decorateTask
protected <V> RunnableScheduledFuture<V> decorateTask(Callable<V> callable,
                                                      RunnableScheduledFuture<V> task)
Modifies or replaces the task used to execute a callable.
 This method can be used to override the concrete
 class used for managing internal tasks.
 The default implementation simply returns the given task.

Type Parameters:
V - the type of the task's result
Parameters:
callable - the submitted Callable
task - the task created to execute the callable
Returns:
a task that can execute the callable
Since:
1.6


"
ScheduledThreadPoolExecutor,"decorateTask(Runnable runnable, RunnableScheduledFuture<V> task)",protected <V> RunnableScheduledFuture<V>,Modifies or replaces the task used to execute a runnable.,"

decorateTask
protected <V> RunnableScheduledFuture<V> decorateTask(Runnable runnable,
                                                      RunnableScheduledFuture<V> task)
Modifies or replaces the task used to execute a runnable.
 This method can be used to override the concrete
 class used for managing internal tasks.
 The default implementation simply returns the given task.

Type Parameters:
V - the type of the task's result
Parameters:
runnable - the submitted Runnable
task - the task created to execute the runnable
Returns:
a task that can execute the runnable
Since:
1.6


"
ScheduledThreadPoolExecutor,execute(Runnable command),void,Executes command with zero required delay.,"

execute
public void execute(Runnable command)
Executes command with zero required delay.
 This has effect equivalent to
 schedule(command, 0, anyUnit).
 Note that inspections of the queue and of the list returned by
 shutdownNow will access the zero-delayed
 ScheduledFuture, not the command itself.

 A consequence of the use of ScheduledFuture objects is
 that afterExecute is always
 called with a null second Throwable argument, even if the
 command terminated abruptly.  Instead, the Throwable
 thrown by such a task can be obtained via Future.get().

Specified by:
execute in interface Executor
Overrides:
execute in class ThreadPoolExecutor
Parameters:
command - the task to execute
Throws:
RejectedExecutionException - at discretion of
         RejectedExecutionHandler, if the task
         cannot be accepted for execution because the
         executor has been shut down
NullPointerException - if command is null


"
ScheduledThreadPoolExecutor,getContinueExistingPeriodicTasksAfterShutdownPolicy(),boolean,Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.,"

getContinueExistingPeriodicTasksAfterShutdownPolicy
public boolean getContinueExistingPeriodicTasksAfterShutdownPolicy()
Gets the policy on whether to continue executing existing
 periodic tasks even when this executor has been shutdown.
 In this case, these tasks will only terminate upon
 shutdownNow or after setting the policy to
 false when already shutdown.
 This value is by default false.

Returns:
true if will continue after shutdown
See Also:
setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean)


"
ScheduledThreadPoolExecutor,getExecuteExistingDelayedTasksAfterShutdownPolicy(),boolean,Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.,"

getExecuteExistingDelayedTasksAfterShutdownPolicy
public boolean getExecuteExistingDelayedTasksAfterShutdownPolicy()
Gets the policy on whether to execute existing delayed
 tasks even when this executor has been shutdown.
 In this case, these tasks will only terminate upon
 shutdownNow, or after setting the policy to
 false when already shutdown.
 This value is by default true.

Returns:
true if will execute after shutdown
See Also:
setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean)


"
ScheduledThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>,Returns the task queue used by this executor.,"

getQueue
public BlockingQueue<Runnable> getQueue()
Returns the task queue used by this executor.  Each element of
 this queue is a ScheduledFuture, including those
 tasks submitted using execute which are for scheduling
 purposes used as the basis of a zero-delay
 ScheduledFuture.  Iteration over this queue is
 not guaranteed to traverse tasks in the order in
 which they will execute.

Overrides:
getQueue in class ThreadPoolExecutor
Returns:
the task queue


"
ScheduledThreadPoolExecutor,getRemoveOnCancelPolicy(),boolean,Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.,"

getRemoveOnCancelPolicy
public boolean getRemoveOnCancelPolicy()
Gets the policy on whether cancelled tasks should be immediately
 removed from the work queue at time of cancellation.  This value is
 by default false.

Returns:
true if cancelled tasks are immediately removed
         from the queue
Since:
1.7
See Also:
setRemoveOnCancelPolicy(boolean)


"
ScheduledThreadPoolExecutor,"schedule(Callable<V> callable, long delay, TimeUnit unit)",<V> ScheduledFuture<V>,Creates and executes a ScheduledFuture that becomes enabled after the given delay.,"

schedule
public <V> ScheduledFuture<V> schedule(Callable<V> callable,
                                       long delay,
                                       TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a ScheduledFuture that becomes enabled after the
 given delay.

Specified by:
schedule in interface ScheduledExecutorService
Type Parameters:
V - the type of the callable's result
Parameters:
callable - the function to execute
delay - the time from now to delay execution
unit - the time unit of the delay parameter
Returns:
a ScheduledFuture that can be used to extract result or cancel
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if callable is null


"
ScheduledThreadPoolExecutor,"schedule(Runnable command, long delay, TimeUnit unit)",ScheduledFuture<?>,Creates and executes a one-shot action that becomes enabled after the given delay.,"

schedule
public ScheduledFuture<?> schedule(Runnable command,
                                   long delay,
                                   TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a one-shot action that becomes enabled
 after the given delay.

Specified by:
schedule in interface ScheduledExecutorService
Parameters:
command - the task to execute
delay - the time from now to delay execution
unit - the time unit of the delay parameter
Returns:
a ScheduledFuture representing pending completion of
         the task and whose get() method will return
         null upon completion
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null


"
ScheduledThreadPoolExecutor,"scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",ScheduledFuture<?>,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on.","

scheduleAtFixedRate
public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                                              long initialDelay,
                                              long period,
                                              TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the given
 period; that is executions will commence after
 initialDelay then initialDelay+period, then
 initialDelay + 2 * period, and so on.
 If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.  If any execution of this task
 takes longer than its period, then subsequent executions
 may start late, but will not concurrently execute.

Specified by:
scheduleAtFixedRate in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
period - the period between successive executions
unit - the time unit of the initialDelay and period parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if period less than or equal to zero


"
ScheduledThreadPoolExecutor,"scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",ScheduledFuture<?>,"Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.","

scheduleWithFixedDelay
public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
                                                 long initialDelay,
                                                 long delay,
                                                 TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the
 given delay between the termination of one execution and the
 commencement of the next.  If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.

Specified by:
scheduleWithFixedDelay in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
delay - the delay between the termination of one
 execution and the commencement of the next
unit - the time unit of the initialDelay and delay parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if delay less than or equal to zero


"
ScheduledThreadPoolExecutor,setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value),void,Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown.,"

setContinueExistingPeriodicTasksAfterShutdownPolicy
public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)
Sets the policy on whether to continue executing existing
 periodic tasks even when this executor has been shutdown.
 In this case, these tasks will only terminate upon
 shutdownNow or after setting the policy to
 false when already shutdown.
 This value is by default false.

Parameters:
value - if true, continue after shutdown, else don't
See Also:
getContinueExistingPeriodicTasksAfterShutdownPolicy()


"
ScheduledThreadPoolExecutor,setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value),void,Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown.,"

setExecuteExistingDelayedTasksAfterShutdownPolicy
public void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean value)
Sets the policy on whether to execute existing delayed
 tasks even when this executor has been shutdown.
 In this case, these tasks will only terminate upon
 shutdownNow, or after setting the policy to
 false when already shutdown.
 This value is by default true.

Parameters:
value - if true, execute after shutdown, else don't
See Also:
getExecuteExistingDelayedTasksAfterShutdownPolicy()


"
ScheduledThreadPoolExecutor,setRemoveOnCancelPolicy(boolean value),void,Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation.,"

setRemoveOnCancelPolicy
public void setRemoveOnCancelPolicy(boolean value)
Sets the policy on whether cancelled tasks should be immediately
 removed from the work queue at time of cancellation.  This value is
 by default false.

Parameters:
value - if true, remove on cancellation, else don't
Since:
1.7
See Also:
getRemoveOnCancelPolicy()


"
ScheduledThreadPoolExecutor,shutdown(),void,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.","

shutdown
public void shutdown()
Initiates an orderly shutdown in which previously submitted
 tasks are executed, but no new tasks will be accepted.
 Invocation has no additional effect if already shut down.

 This method does not wait for previously submitted tasks to
 complete execution.  Use awaitTermination
 to do that.

 If the ExecuteExistingDelayedTasksAfterShutdownPolicy
 has been set false, existing delayed tasks whose delays
 have not yet elapsed are cancelled.  And unless the ContinueExistingPeriodicTasksAfterShutdownPolicy has been set
 true, future executions of existing periodic tasks will
 be cancelled.

Specified by:
shutdown in interface ExecutorService
Overrides:
shutdown in class ThreadPoolExecutor
Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
ScheduledThreadPoolExecutor,shutdownNow(),List<Runnable>,"Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.","

shutdownNow
public List<Runnable> shutdownNow()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution.

 This method does not wait for actively executing tasks to
 terminate.  Use awaitTermination to
 do that.

 There are no guarantees beyond best-effort attempts to stop
 processing actively executing tasks.  This implementation
 cancels tasks via Thread.interrupt(), so any task that
 fails to respond to interrupts may never terminate.

Specified by:
shutdownNow in interface ExecutorService
Overrides:
shutdownNow in class ThreadPoolExecutor
Returns:
list of tasks that never commenced execution.
         Each element of this list is a ScheduledFuture,
         including those tasks submitted using execute,
         which are for scheduling purposes used as the basis of a
         zero-delay ScheduledFuture.
Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
ScheduledThreadPoolExecutor,submit(Callable<T> task),<T> Future<T>,Submits a value-returning task for execution and returns a Future representing the pending results of the task.,"

submit
public <T> Future<T> submit(Callable<T> task)
Description copied from interface: ExecutorService
Submits a value-returning task for execution and returns a
 Future representing the pending results of the task. The
 Future's get method will return the task's result upon
 successful completion.

 
 If you would like to immediately block waiting
 for a task, you can use constructions of the form
 result = exec.submit(aCallable).get();
Note: The Executors class includes a set of methods
 that can convert some other common closure-like objects,
 for example, PrivilegedAction to
 Callable form so they can be submitted.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Type Parameters:
T - the type of the task's result
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
ScheduledThreadPoolExecutor,submit(Runnable task),Future<?>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public Future<?> submit(Runnable task)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return null upon successful completion.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
ScheduledThreadPoolExecutor,"submit(Runnable task, T result)",<T> Future<T>,Submits a Runnable task for execution and returns a Future representing that task.,"

submit
public <T> Future<T> submit(Runnable task,
                            T result)
Description copied from interface: ExecutorService
Submits a Runnable task for execution and returns a Future
 representing that task. The Future's get method will
 return the given result upon successful completion.

Specified by:
submit in interface ExecutorService
Overrides:
submit in class AbstractExecutorService
Type Parameters:
T - the type of the result
Parameters:
task - the task to submit
result - the result to return
Returns:
a Future representing pending completion of the task
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if the task is null


"
Semaphore,acquire(),void,"Acquires a permit from this semaphore, blocking until one is available, or the thread is interrupted.","

acquire
public void acquire()
             throws InterruptedException
Acquires a permit from this semaphore, blocking until one is
 available, or the thread is interrupted.

 Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 
Some other thread invokes the release() method for this
 semaphore and the current thread is next to be assigned a permit; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted


"
Semaphore,acquire(int permits),void,"Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is interrupted.","

acquire
public void acquire(int permits)
             throws InterruptedException
Acquires the given number of permits from this semaphore,
 blocking until all are available,
 or the thread is interrupted.

 Acquires the given number of permits, if they are available,
 and returns immediately, reducing the number of available permits
 by the given amount.

 If insufficient permits are available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 
Some other thread invokes one of the release
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.
 Any permits that were to be assigned to this thread are instead
 assigned to other threads trying to acquire permits, as if
 permits had been made available by a call to release().

Parameters:
permits - the number of permits to acquire
Throws:
InterruptedException - if the current thread is interrupted
IllegalArgumentException - if permits is negative


"
Semaphore,acquireUninterruptibly(),void,"Acquires a permit from this semaphore, blocking until one is available.","

acquireUninterruptibly
public void acquireUninterruptibly()
Acquires a permit from this semaphore, blocking until one is
 available.

 Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 some other thread invokes the release() method for this
 semaphore and the current thread is next to be assigned a permit.

 If the current thread is interrupted
 while waiting for a permit then it will continue to wait, but the
 time at which the thread is assigned a permit may change compared to
 the time it would have received the permit had no interruption
 occurred.  When the thread does return from this method its interrupt
 status will be set.

"
Semaphore,acquireUninterruptibly(int permits),void,"Acquires the given number of permits from this semaphore, blocking until all are available.","

acquireUninterruptibly
public void acquireUninterruptibly(int permits)
Acquires the given number of permits from this semaphore,
 blocking until all are available.

 Acquires the given number of permits, if they are available,
 and returns immediately, reducing the number of available permits
 by the given amount.

 If insufficient permits are available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 some other thread invokes one of the release
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request.

 If the current thread is interrupted
 while waiting for permits then it will continue to wait and its
 position in the queue is not affected.  When the thread does return
 from this method its interrupt status will be set.

Parameters:
permits - the number of permits to acquire
Throws:
IllegalArgumentException - if permits is negative


"
Semaphore,availablePermits(),int,Returns the current number of permits available in this semaphore.,"

availablePermits
public int availablePermits()
Returns the current number of permits available in this semaphore.

 This method is typically used for debugging and testing purposes.

Returns:
the number of permits available in this semaphore


"
Semaphore,drainPermits(),int,Acquires and returns all permits that are immediately available.,"

drainPermits
public int drainPermits()
Acquires and returns all permits that are immediately available.

Returns:
the number of permits acquired


"
Semaphore,getQueuedThreads(),protected Collection<Thread>,Returns a collection containing threads that may be waiting to acquire.,"

getQueuedThreads
protected Collection<Thread> getQueuedThreads()
Returns a collection containing threads that may be waiting to acquire.
 Because the actual set of threads may change dynamically while
 constructing this result, the returned collection is only a best-effort
 estimate.  The elements of the returned collection are in no particular
 order.  This method is designed to facilitate construction of
 subclasses that provide more extensive monitoring facilities.

Returns:
the collection of threads


"
Semaphore,getQueueLength(),int,Returns an estimate of the number of threads waiting to acquire.,"

getQueueLength
public final int getQueueLength()
Returns an estimate of the number of threads waiting to acquire.
 The value is only an estimate because the number of threads may
 change dynamically while this method traverses internal data
 structures.  This method is designed for use in monitoring of the
 system state, not for synchronization control.

Returns:
the estimated number of threads waiting for this lock


"
Semaphore,hasQueuedThreads(),boolean,Queries whether any threads are waiting to acquire.,"

hasQueuedThreads
public final boolean hasQueuedThreads()
Queries whether any threads are waiting to acquire. Note that
 because cancellations may occur at any time, a true
 return does not guarantee that any other thread will ever
 acquire.  This method is designed primarily for use in
 monitoring of the system state.

Returns:
true if there may be other threads waiting to
         acquire the lock


"
Semaphore,isFair(),boolean,Returns true if this semaphore has fairness set true.,"

isFair
public boolean isFair()
Returns true if this semaphore has fairness set true.

Returns:
true if this semaphore has fairness set true


"
Semaphore,reducePermits(int reduction),protected void,Shrinks the number of available permits by the indicated reduction.,"

reducePermits
protected void reducePermits(int reduction)
Shrinks the number of available permits by the indicated
 reduction. This method can be useful in subclasses that use
 semaphores to track resources that become unavailable. This
 method differs from acquire in that it does not block
 waiting for permits to become available.

Parameters:
reduction - the number of permits to remove
Throws:
IllegalArgumentException - if reduction is negative


"
Semaphore,release(),void,"Releases a permit, returning it to the semaphore.","

release
public void release()
Releases a permit, returning it to the semaphore.

 Releases a permit, increasing the number of available permits by
 one.  If any threads are trying to acquire a permit, then one is
 selected and given the permit that was just released.  That thread
 is (re)enabled for thread scheduling purposes.

 There is no requirement that a thread that releases a permit must
 have acquired that permit by calling acquire().
 Correct usage of a semaphore is established by programming convention
 in the application.

"
Semaphore,release(int permits),void,"Releases the given number of permits, returning them to the semaphore.","

release
public void release(int permits)
Releases the given number of permits, returning them to the semaphore.

 Releases the given number of permits, increasing the number of
 available permits by that amount.
 If any threads are trying to acquire permits, then one
 is selected and given the permits that were just released.
 If the number of available permits satisfies that thread's request
 then that thread is (re)enabled for thread scheduling purposes;
 otherwise the thread will wait until sufficient permits are available.
 If there are still permits available
 after this thread's request has been satisfied, then those permits
 are assigned in turn to other threads trying to acquire permits.

 There is no requirement that a thread that releases a permit must
 have acquired that permit by calling acquire.
 Correct usage of a semaphore is established by programming convention
 in the application.

Parameters:
permits - the number of permits to release
Throws:
IllegalArgumentException - if permits is negative


"
Semaphore,toString(),String,"Returns a string identifying this semaphore, as well as its state.","

toString
public String toString()
Returns a string identifying this semaphore, as well as its state.
 The state, in brackets, includes the String ""Permits =""
 followed by the number of permits.

Overrides:
toString in class Object
Returns:
a string identifying this semaphore, as well as its state


"
Semaphore,tryAcquire(),boolean,"Acquires a permit from this semaphore, only if one is available at the time of invocation.","

tryAcquire
public boolean tryAcquire()
Acquires a permit from this semaphore, only if one is available at the
 time of invocation.

 Acquires a permit, if one is available and returns immediately,
 with the value true,
 reducing the number of available permits by one.

 If no permit is available then this method will return
 immediately with the value false.

 Even when this semaphore has been set to use a
 fair ordering policy, a call to tryAcquire() will
 immediately acquire a permit if one is available, whether or not
 other threads are currently waiting.
 This ""barging"" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to honor
 the fairness setting, then use
 tryAcquire(0, TimeUnit.SECONDS) 
 which is almost equivalent (it also detects interruption).

Returns:
true if a permit was acquired and false
         otherwise


"
Semaphore,tryAcquire(int permits),boolean,"Acquires the given number of permits from this semaphore, only if all are available at the time of invocation.","

tryAcquire
public boolean tryAcquire(int permits)
Acquires the given number of permits from this semaphore, only
 if all are available at the time of invocation.

 Acquires the given number of permits, if they are available, and
 returns immediately, with the value true,
 reducing the number of available permits by the given amount.

 If insufficient permits are available then this method will return
 immediately with the value false and the number of available
 permits is unchanged.

 Even when this semaphore has been set to use a fair ordering
 policy, a call to tryAcquire will
 immediately acquire a permit if one is available, whether or
 not other threads are currently waiting.  This
 ""barging"" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to
 honor the fairness setting, then use tryAcquire(permits, 0, TimeUnit.SECONDS) 
 which is almost equivalent (it also detects interruption).

Parameters:
permits - the number of permits to acquire
Returns:
true if the permits were acquired and
         false otherwise
Throws:
IllegalArgumentException - if permits is negative


"
Semaphore,"tryAcquire(int permits, long timeout, TimeUnit unit)",boolean,"Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been interrupted.","

tryAcquire
public boolean tryAcquire(int permits,
                          long timeout,
                          TimeUnit unit)
                   throws InterruptedException
Acquires the given number of permits from this semaphore, if all
 become available within the given waiting time and the current
 thread has not been interrupted.

 Acquires the given number of permits, if they are available and
 returns immediately, with the value true,
 reducing the number of available permits by the given amount.

 If insufficient permits are available then
 the current thread becomes disabled for thread scheduling
 purposes and lies dormant until one of three things happens:
 
Some other thread invokes one of the release
 methods for this semaphore, the current thread is next to be assigned
 permits and the number of available permits satisfies this request; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the permits are acquired then the value true is returned.

 If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 to acquire the permits,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.
 Any permits that were to be assigned to this thread, are instead
 assigned to other threads trying to acquire permits, as if
 the permits had been made available by a call to release().

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.  Any permits that were to be assigned to this
 thread, are instead assigned to other threads trying to acquire
 permits, as if the permits had been made available by a call to
 release().

Parameters:
permits - the number of permits to acquire
timeout - the maximum time to wait for the permits
unit - the time unit of the timeout argument
Returns:
true if all permits were acquired and false
         if the waiting time elapsed before all permits were acquired
Throws:
InterruptedException - if the current thread is interrupted
IllegalArgumentException - if permits is negative


"
Semaphore,"tryAcquire(long timeout, TimeUnit unit)",boolean,"Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been interrupted.","

tryAcquire
public boolean tryAcquire(long timeout,
                          TimeUnit unit)
                   throws InterruptedException
Acquires a permit from this semaphore, if one becomes available
 within the given waiting time and the current thread has not
 been interrupted.

 Acquires a permit, if one is available and returns immediately,
 with the value true,
 reducing the number of available permits by one.

 If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of three things happens:
 
Some other thread invokes the release() method for this
 semaphore and the current thread is next to be assigned a permit; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If a permit is acquired then the value true is returned.

 If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 to acquire a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.

Parameters:
timeout - the maximum time to wait for a permit
unit - the time unit of the timeout argument
Returns:
true if a permit was acquired and false
         if the waiting time elapsed before a permit was acquired
Throws:
InterruptedException - if the current thread is interrupted


"
SynchronousQueue,clear(),void,Does nothing.,"

clear
public void clear()
Does nothing.
 A SynchronousQueue has no internal capacity.

Specified by:
clear in interface Collection<E>
Overrides:
clear in class AbstractQueue<E>


"
SynchronousQueue,contains(Object o),boolean,Always returns false.,"

contains
public boolean contains(Object o)
Always returns false.
 A SynchronousQueue has no internal capacity.

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface BlockingQueue<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - the element
Returns:
false


"
SynchronousQueue,containsAll(Collection<?> c),boolean,Returns false unless the given collection is empty.,"

containsAll
public boolean containsAll(Collection<?> c)
Returns false unless the given collection is empty.
 A SynchronousQueue has no internal capacity.

Specified by:
containsAll in interface Collection<E>
Overrides:
containsAll in class AbstractCollection<E>
Parameters:
c - the collection
Returns:
false unless given collection is empty
See Also:
AbstractCollection.contains(Object)


"
SynchronousQueue,drainTo(Collection<? super E> c),int,Removes all available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c)
Description copied from interface: BlockingQueue
Removes all available elements from this queue and adds them
 to the given collection.  This operation may be more
 efficient than repeatedly polling this queue.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
SynchronousQueue,"drainTo(Collection<? super E> c, int maxElements)",int,Removes at most the given number of available elements from this queue and adds them to the given collection.,"

drainTo
public int drainTo(Collection<? super E> c,
                   int maxElements)
Description copied from interface: BlockingQueue
Removes at most the given number of available elements from
 this queue and adds them to the given collection.  A failure
 encountered while attempting to add elements to
 collection c may result in elements being in neither,
 either or both collections when the associated exception is
 thrown.  Attempts to drain a queue to itself result in
 IllegalArgumentException. Further, the behavior of
 this operation is undefined if the specified collection is
 modified while the operation is in progress.

Specified by:
drainTo in interface BlockingQueue<E>
Parameters:
c - the collection to transfer elements into
maxElements - the maximum number of elements to transfer
Returns:
the number of elements transferred
Throws:
UnsupportedOperationException - if addition of elements
         is not supported by the specified collection
ClassCastException - if the class of an element of this queue
         prevents it from being added to the specified collection
NullPointerException - if the specified collection is null
IllegalArgumentException - if the specified collection is this
         queue, or some property of an element of this queue prevents
         it from being added to the specified collection


"
SynchronousQueue,isEmpty(),boolean,Always returns true.,"

isEmpty
public boolean isEmpty()
Always returns true.
 A SynchronousQueue has no internal capacity.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true


"
SynchronousQueue,iterator(),Iterator<E>,Returns an empty iterator in which hasNext always returns false.,"

iterator
public Iterator<E> iterator()
Returns an empty iterator in which hasNext always returns
 false.

Specified by:
iterator in interface Iterable<E>
Specified by:
iterator in interface Collection<E>
Specified by:
iterator in class AbstractCollection<E>
Returns:
an empty iterator


"
SynchronousQueue,offer(E e),boolean,"Inserts the specified element into this queue, if another thread is waiting to receive it.","

offer
public boolean offer(E e)
Inserts the specified element into this queue, if another thread is
 waiting to receive it.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
SynchronousQueue,"offer(E e, long timeout, TimeUnit unit)",boolean,"Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.","

offer
public boolean offer(E e,
                     long timeout,
                     TimeUnit unit)
              throws InterruptedException
Inserts the specified element into this queue, waiting if necessary
 up to the specified wait time for another thread to receive it.

Specified by:
offer in interface BlockingQueue<E>
Parameters:
e - the element to add
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if the
         specified waiting time elapses before a consumer appears
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
SynchronousQueue,peek(),E,Always returns null.,"

peek
public E peek()
Always returns null.
 A SynchronousQueue does not return elements
 unless actively waited on.

Specified by:
peek in interface Queue<E>
Returns:
null


"
SynchronousQueue,poll(),E,"Retrieves and removes the head of this queue, if another thread is currently making an element available.","

poll
public E poll()
Retrieves and removes the head of this queue, if another thread
 is currently making an element available.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if no
         element is available


"
SynchronousQueue,"poll(long timeout, TimeUnit unit)",E,"Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.","

poll
public E poll(long timeout,
              TimeUnit unit)
       throws InterruptedException
Retrieves and removes the head of this queue, waiting
 if necessary up to the specified wait time, for another thread
 to insert it.

Specified by:
poll in interface BlockingQueue<E>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the head of this queue, or null if the
         specified waiting time elapses before an element is present
Throws:
InterruptedException - if interrupted while waiting


"
SynchronousQueue,put(E e),void,"Adds the specified element to this queue, waiting if necessary for another thread to receive it.","

put
public void put(E e)
         throws InterruptedException
Adds the specified element to this queue, waiting if necessary for
 another thread to receive it.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
SynchronousQueue,remainingCapacity(),int,Always returns zero.,"

remainingCapacity
public int remainingCapacity()
Always returns zero.
 A SynchronousQueue has no internal capacity.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
zero


"
SynchronousQueue,remove(Object o),boolean,Always returns false.,"

remove
public boolean remove(Object o)
Always returns false.
 A SynchronousQueue has no internal capacity.

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - the element to remove
Returns:
false


"
SynchronousQueue,removeAll(Collection<?> c),boolean,Always returns false.,"

removeAll
public boolean removeAll(Collection<?> c)
Always returns false.
 A SynchronousQueue has no internal capacity.

Specified by:
removeAll in interface Collection<E>
Overrides:
removeAll in class AbstractCollection<E>
Parameters:
c - the collection
Returns:
false
See Also:
AbstractCollection.remove(Object), 
AbstractCollection.contains(Object)


"
SynchronousQueue,retainAll(Collection<?> c),boolean,Always returns false.,"

retainAll
public boolean retainAll(Collection<?> c)
Always returns false.
 A SynchronousQueue has no internal capacity.

Specified by:
retainAll in interface Collection<E>
Overrides:
retainAll in class AbstractCollection<E>
Parameters:
c - the collection
Returns:
false
See Also:
AbstractCollection.remove(Object), 
AbstractCollection.contains(Object)


"
SynchronousQueue,size(),int,Always returns zero.,"

size
public int size()
Always returns zero.
 A SynchronousQueue has no internal capacity.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
zero


"
SynchronousQueue,spliterator(),Spliterator<E>,Returns an empty spliterator in which calls to Spliterator.trySplit() always return null.,"

spliterator
public Spliterator<E> spliterator()
Returns an empty spliterator in which calls to
 Spliterator.trySplit() always return null.

Specified by:
spliterator in interface Iterable<E>
Specified by:
spliterator in interface Collection<E>
Returns:
an empty spliterator
Since:
1.8


"
SynchronousQueue,take(),E,"Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.","

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 for another thread to insert it.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
SynchronousQueue,toArray(),Object[],Returns a zero-length array.,"

toArray
public Object[] toArray()
Returns a zero-length array.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Returns:
a zero-length array


"
SynchronousQueue,toArray(T[] a),<T> T[],Sets the zeroeth element of the specified array to null (if the array has non-zero length) and returns it.,"

toArray
public <T> T[] toArray(T[] a)
Sets the zeroeth element of the specified array to null
 (if the array has non-zero length) and returns it.

Specified by:
toArray in interface Collection<E>
Overrides:
toArray in class AbstractCollection<E>
Type Parameters:
T - the runtime type of the array to contain the collection
Parameters:
a - the array
Returns:
the specified array
Throws:
NullPointerException - if the specified array is null


"
ThreadLocalRandom,current(),static ThreadLocalRandom,Returns the current thread's ThreadLocalRandom.,"

current
public static ThreadLocalRandom current()
Returns the current thread's ThreadLocalRandom.

Returns:
the current thread's ThreadLocalRandom


"
ThreadLocalRandom,doubles(),DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).","

doubles
public DoubleStream doubles()
Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one
 (exclusive).

Overrides:
doubles in class Random
Implementation Note:
This method is implemented to be equivalent to doubles(Long.MAX_VALUE).
Returns:
a stream of pseudorandom double values
Since:
1.8


"
ThreadLocalRandom,"doubles(double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).","

doubles
public DoubleStream doubles(double randomNumberOrigin,
                            double randomNumberBound)
Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound
 (exclusive).

Overrides:
doubles in class Random
Implementation Note:
This method is implemented to be equivalent to doubles(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound).
Parameters:
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom double values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,doubles(long streamSize),DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).","

doubles
public DoubleStream doubles(long streamSize)
Returns a stream producing the given streamSize number of
 pseudorandom double values, each between zero
 (inclusive) and one (exclusive).

Overrides:
doubles in class Random
Parameters:
streamSize - the number of values to generate
Returns:
a stream of double values
Throws:
IllegalArgumentException - if streamSize is
         less than zero
Since:
1.8


"
ThreadLocalRandom,"doubles(long streamSize, double randomNumberOrigin, double randomNumberBound)",DoubleStream,"Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).","

doubles
public DoubleStream doubles(long streamSize,
                            double randomNumberOrigin,
                            double randomNumberBound)
Returns a stream producing the given streamSize number of
 pseudorandom double values, each conforming to the given origin
 (inclusive) and bound (exclusive).

Overrides:
doubles in class Random
Parameters:
streamSize - the number of values to generate
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom double values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if streamSize is
         less than zero
IllegalArgumentException - if randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,ints(),IntStream,Returns an effectively unlimited stream of pseudorandom int values.,"

ints
public IntStream ints()
Returns an effectively unlimited stream of pseudorandom int
 values.

Overrides:
ints in class Random
Implementation Note:
This method is implemented to be equivalent to ints(Long.MAX_VALUE).
Returns:
a stream of pseudorandom int values
Since:
1.8


"
ThreadLocalRandom,"ints(int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).","

ints
public IntStream ints(int randomNumberOrigin,
                      int randomNumberBound)
Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound
 (exclusive).

Overrides:
ints in class Random
Implementation Note:
This method is implemented to be equivalent to ints(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound).
Parameters:
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom int values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,ints(long streamSize),IntStream,Returns a stream producing the given streamSize number of pseudorandom int values.,"

ints
public IntStream ints(long streamSize)
Returns a stream producing the given streamSize number of
 pseudorandom int values.

Overrides:
ints in class Random
Parameters:
streamSize - the number of values to generate
Returns:
a stream of pseudorandom int values
Throws:
IllegalArgumentException - if streamSize is
         less than zero
Since:
1.8


"
ThreadLocalRandom,"ints(long streamSize, int randomNumberOrigin, int randomNumberBound)",IntStream,"Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).","

ints
public IntStream ints(long streamSize,
                      int randomNumberOrigin,
                      int randomNumberBound)
Returns a stream producing the given streamSize number
 of pseudorandom int values, each conforming to the given
 origin (inclusive) and bound (exclusive).

Overrides:
ints in class Random
Parameters:
streamSize - the number of values to generate
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom int values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if streamSize is
         less than zero, or randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,longs(),LongStream,Returns an effectively unlimited stream of pseudorandom long values.,"

longs
public LongStream longs()
Returns an effectively unlimited stream of pseudorandom long
 values.

Overrides:
longs in class Random
Implementation Note:
This method is implemented to be equivalent to longs(Long.MAX_VALUE).
Returns:
a stream of pseudorandom long values
Since:
1.8


"
ThreadLocalRandom,longs(long streamSize),LongStream,Returns a stream producing the given streamSize number of pseudorandom long values.,"

longs
public LongStream longs(long streamSize)
Returns a stream producing the given streamSize number of
 pseudorandom long values.

Overrides:
longs in class Random
Parameters:
streamSize - the number of values to generate
Returns:
a stream of pseudorandom long values
Throws:
IllegalArgumentException - if streamSize is
         less than zero
Since:
1.8


"
ThreadLocalRandom,"longs(long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).","

longs
public LongStream longs(long randomNumberOrigin,
                        long randomNumberBound)
Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound
 (exclusive).

Overrides:
longs in class Random
Implementation Note:
This method is implemented to be equivalent to longs(Long.MAX_VALUE, randomNumberOrigin, randomNumberBound).
Parameters:
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom long values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,"longs(long streamSize, long randomNumberOrigin, long randomNumberBound)",LongStream,"Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).","

longs
public LongStream longs(long streamSize,
                        long randomNumberOrigin,
                        long randomNumberBound)
Returns a stream producing the given streamSize number of
 pseudorandom long, each conforming to the given origin
 (inclusive) and bound (exclusive).

Overrides:
longs in class Random
Parameters:
streamSize - the number of values to generate
randomNumberOrigin - the origin (inclusive) of each random value
randomNumberBound - the bound (exclusive) of each random value
Returns:
a stream of pseudorandom long values,
         each with the given origin (inclusive) and bound (exclusive)
Throws:
IllegalArgumentException - if streamSize is
         less than zero, or randomNumberOrigin
         is greater than or equal to randomNumberBound
Since:
1.8


"
ThreadLocalRandom,next(int bits),protected int,Generates the next pseudorandom number.,"

next
protected int next(int bits)
Description copied from class: Random
Generates the next pseudorandom number. Subclasses should
 override this, as this is used by all other methods.

 The general contract of next is that it returns an
 int value and if the argument bits is between
 1 and 32 (inclusive), then that many low-order
 bits of the returned value will be (approximately) independently
 chosen bit values, each of which is (approximately) equally
 likely to be 0 or 1. The method next is
 implemented by class Random by atomically updating the seed to
   (seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1)
 and returning
   (int)(seed >>> (48 - bits)).

 This is a linear congruential pseudorandom number generator, as
 defined by D. H. Lehmer and described by Donald E. Knuth in
 The Art of Computer Programming, Volume 3:
 Seminumerical Algorithms, section 3.2.1.

Overrides:
next in class Random
Parameters:
bits - random bits
Returns:
the next pseudorandom value from this random number
         generator's sequence


"
ThreadLocalRandom,nextBoolean(),boolean,Returns a pseudorandom boolean value.,"

nextBoolean
public boolean nextBoolean()
Returns a pseudorandom boolean value.

Overrides:
nextBoolean in class Random
Returns:
a pseudorandom boolean value


"
ThreadLocalRandom,nextDouble(),double,Returns a pseudorandom double value between zero (inclusive) and one (exclusive).,"

nextDouble
public double nextDouble()
Returns a pseudorandom double value between zero
 (inclusive) and one (exclusive).

Overrides:
nextDouble in class Random
Returns:
a pseudorandom double value between zero
         (inclusive) and one (exclusive)
See Also:
Math.random()


"
ThreadLocalRandom,nextDouble(double bound),double,Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).,"

nextDouble
public double nextDouble(double bound)
Returns a pseudorandom double value between 0.0
 (inclusive) and the specified bound (exclusive).

Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
a pseudorandom double value between zero
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if bound is not positive


"
ThreadLocalRandom,"nextDouble(double origin, double bound)",double,Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).,"

nextDouble
public double nextDouble(double origin,
                         double bound)
Returns a pseudorandom double value between the specified
 origin (inclusive) and bound (exclusive).

Parameters:
origin - the least value returned
bound - the upper bound (exclusive)
Returns:
a pseudorandom double value between the origin
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if origin is greater than
         or equal to bound


"
ThreadLocalRandom,nextFloat(),float,Returns a pseudorandom float value between zero (inclusive) and one (exclusive).,"

nextFloat
public float nextFloat()
Returns a pseudorandom float value between zero
 (inclusive) and one (exclusive).

Overrides:
nextFloat in class Random
Returns:
a pseudorandom float value between zero
         (inclusive) and one (exclusive)


"
ThreadLocalRandom,nextGaussian(),double,"Returns the next pseudorandom, Gaussian (""normally"") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence.","

nextGaussian
public double nextGaussian()
Description copied from class: Random
Returns the next pseudorandom, Gaussian (""normally"") distributed
 double value with mean 0.0 and standard
 deviation 1.0 from this random number generator's sequence.
 
 The general contract of nextGaussian is that one
 double value, chosen from (approximately) the usual
 normal distribution with mean 0.0 and standard deviation
 1.0, is pseudorandomly generated and returned.

 The method nextGaussian is implemented by class
 Random as if by a threadsafe version of the following:
   
 private double nextNextGaussian;
 private boolean haveNextNextGaussian = false;

 public double nextGaussian() {
   if (haveNextNextGaussian) {
     haveNextNextGaussian = false;
     return nextNextGaussian;
   } else {
     double v1, v2, s;
     do {
       v1 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
       v2 = 2 * nextDouble() - 1;   // between -1.0 and 1.0
       s = v1 * v1 + v2 * v2;
     } while (s >= 1 || s == 0);
     double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
     nextNextGaussian = v2 * multiplier;
     haveNextNextGaussian = true;
     return v1 * multiplier;
   }
 }
 This uses the polar method of G. E. P. Box, M. E. Muller, and
 G. Marsaglia, as described by Donald E. Knuth in The Art of
 Computer Programming, Volume 3: Seminumerical Algorithms,
 section 3.4.1, subsection C, algorithm P. Note that it generates two
 independent values at the cost of only one call to StrictMath.log
 and one call to StrictMath.sqrt.

Overrides:
nextGaussian in class Random
Returns:
the next pseudorandom, Gaussian (""normally"") distributed
         double value with mean 0.0 and
         standard deviation 1.0 from this random number
         generator's sequence


"
ThreadLocalRandom,nextInt(),int,Returns a pseudorandom int value.,"

nextInt
public int nextInt()
Returns a pseudorandom int value.

Overrides:
nextInt in class Random
Returns:
a pseudorandom int value


"
ThreadLocalRandom,nextInt(int bound),int,Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).,"

nextInt
public int nextInt(int bound)
Returns a pseudorandom int value between zero (inclusive)
 and the specified bound (exclusive).

Overrides:
nextInt in class Random
Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
a pseudorandom int value between zero
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if bound is not positive


"
ThreadLocalRandom,"nextInt(int origin, int bound)",int,Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).,"

nextInt
public int nextInt(int origin,
                   int bound)
Returns a pseudorandom int value between the specified
 origin (inclusive) and the specified bound (exclusive).

Parameters:
origin - the least value returned
bound - the upper bound (exclusive)
Returns:
a pseudorandom int value between the origin
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if origin is greater than
         or equal to bound


"
ThreadLocalRandom,nextLong(),long,Returns a pseudorandom long value.,"

nextLong
public long nextLong()
Returns a pseudorandom long value.

Overrides:
nextLong in class Random
Returns:
a pseudorandom long value


"
ThreadLocalRandom,nextLong(long bound),long,Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).,"

nextLong
public long nextLong(long bound)
Returns a pseudorandom long value between zero (inclusive)
 and the specified bound (exclusive).

Parameters:
bound - the upper bound (exclusive).  Must be positive.
Returns:
a pseudorandom long value between zero
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if bound is not positive


"
ThreadLocalRandom,"nextLong(long origin, long bound)",long,Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).,"

nextLong
public long nextLong(long origin,
                     long bound)
Returns a pseudorandom long value between the specified
 origin (inclusive) and the specified bound (exclusive).

Parameters:
origin - the least value returned
bound - the upper bound (exclusive)
Returns:
a pseudorandom long value between the origin
         (inclusive) and the bound (exclusive)
Throws:
IllegalArgumentException - if origin is greater than
         or equal to bound


"
ThreadLocalRandom,setSeed(long seed),void,Throws UnsupportedOperationException.,"

setSeed
public void setSeed(long seed)
Throws UnsupportedOperationException.  Setting seeds in
 this generator is not supported.

Overrides:
setSeed in class Random
Parameters:
seed - the initial seed
Throws:
UnsupportedOperationException - always


"
ThreadPoolExecutor,"afterExecute(Runnable r, Throwable t)",protected void,Method invoked upon completion of execution of the given Runnable.,"

afterExecute
protected void afterExecute(Runnable r,
                            Throwable t)
Method invoked upon completion of execution of the given Runnable.
 This method is invoked by the thread that executed the task. If
 non-null, the Throwable is the uncaught RuntimeException
 or Error that caused execution to terminate abruptly.

 This implementation does nothing, but may be customized in
 subclasses. Note: To properly nest multiple overridings, subclasses
 should generally invoke super.afterExecute at the
 beginning of this method.

 Note: When actions are enclosed in tasks (such as
 FutureTask) either explicitly or via methods such as
 submit, these task objects catch and maintain
 computational exceptions, and so they do not cause abrupt
 termination, and the internal exceptions are not
 passed to this method. If you would like to trap both kinds of
 failures in this method, you can further probe for such cases,
 as in this sample subclass that prints either the direct cause
 or the underlying exception if a task has been aborted:

   
 class ExtendedExecutor extends ThreadPoolExecutor {
   // ...
   protected void afterExecute(Runnable r, Throwable t) {
     super.afterExecute(r, t);
     if (t == null && r instanceof Future<?>) {
       try {
         Object result = ((Future<?>) r).get();
       } catch (CancellationException ce) {
           t = ce;
       } catch (ExecutionException ee) {
           t = ee.getCause();
       } catch (InterruptedException ie) {
           Thread.currentThread().interrupt(); // ignore/reset
       }
     }
     if (t != null)
       System.out.println(t);
   }
 }

Parameters:
r - the runnable that has completed
t - the exception that caused termination, or null if
 execution completed normally


"
ThreadPoolExecutor,allowCoreThreadTimeOut(boolean value),void,"Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive.","

allowCoreThreadTimeOut
public void allowCoreThreadTimeOut(boolean value)
Sets the policy governing whether core threads may time out and
 terminate if no tasks arrive within the keep-alive time, being
 replaced if needed when new tasks arrive. When false, core
 threads are never terminated due to lack of incoming
 tasks. When true, the same keep-alive policy applying to
 non-core threads applies also to core threads. To avoid
 continual thread replacement, the keep-alive time must be
 greater than zero when setting true. This method
 should in general be called before the pool is actively used.

Parameters:
value - true if should time out, else false
Throws:
IllegalArgumentException - if value is true
         and the current keep-alive time is not greater than zero
Since:
1.6


"
ThreadPoolExecutor,allowsCoreThreadTimeOut(),boolean,"Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive.","

allowsCoreThreadTimeOut
public boolean allowsCoreThreadTimeOut()
Returns true if this pool allows core threads to time out and
 terminate if no tasks arrive within the keepAlive time, being
 replaced if needed when new tasks arrive. When true, the same
 keep-alive policy applying to non-core threads applies also to
 core threads. When false (the default), core threads are never
 terminated due to lack of incoming tasks.

Returns:
true if core threads are allowed to time out,
         else false
Since:
1.6


"
ThreadPoolExecutor,"awaitTermination(long timeout, TimeUnit unit)",boolean,"Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.","

awaitTermination
public boolean awaitTermination(long timeout,
                                TimeUnit unit)
                         throws InterruptedException
Description copied from interface: ExecutorService
Blocks until all tasks have completed execution after a shutdown
 request, or the timeout occurs, or the current thread is
 interrupted, whichever happens first.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if this executor terminated and
         false if the timeout elapsed before termination
Throws:
InterruptedException - if interrupted while waiting


"
ThreadPoolExecutor,"beforeExecute(Thread t, Runnable r)",protected void,Method invoked prior to executing the given Runnable in the given thread.,"

beforeExecute
protected void beforeExecute(Thread t,
                             Runnable r)
Method invoked prior to executing the given Runnable in the
 given thread.  This method is invoked by thread t that
 will execute task r, and may be used to re-initialize
 ThreadLocals, or to perform logging.

 This implementation does nothing, but may be customized in
 subclasses. Note: To properly nest multiple overridings, subclasses
 should generally invoke super.beforeExecute at the end of
 this method.

Parameters:
t - the thread that will run task r
r - the task that will be executed


"
ThreadPoolExecutor,execute(Runnable command),void,Executes the given task sometime in the future.,"

execute
public void execute(Runnable command)
Executes the given task sometime in the future.  The task
 may execute in a new thread or in an existing pooled thread.

 If the task cannot be submitted for execution, either because this
 executor has been shutdown or because its capacity has been reached,
 the task is handled by the current RejectedExecutionHandler.

Parameters:
command - the task to execute
Throws:
RejectedExecutionException - at discretion of
         RejectedExecutionHandler, if the task
         cannot be accepted for execution
NullPointerException - if command is null


"
ThreadPoolExecutor,finalize(),protected void,Invokes shutdown when this executor is no longer referenced and it has no threads.,"

finalize
protected void finalize()
Invokes shutdown when this executor is no longer
 referenced and it has no threads.

Overrides:
finalize in class Object
See Also:
WeakReference, 
PhantomReference


"
ThreadPoolExecutor,getActiveCount(),int,Returns the approximate number of threads that are actively executing tasks.,"

getActiveCount
public int getActiveCount()
Returns the approximate number of threads that are actively
 executing tasks.

Returns:
the number of threads


"
ThreadPoolExecutor,getCompletedTaskCount(),long,Returns the approximate total number of tasks that have completed execution.,"

getCompletedTaskCount
public long getCompletedTaskCount()
Returns the approximate total number of tasks that have
 completed execution. Because the states of tasks and threads
 may change dynamically during computation, the returned value
 is only an approximation, but one that does not ever decrease
 across successive calls.

Returns:
the number of tasks


"
ThreadPoolExecutor,getCorePoolSize(),int,Returns the core number of threads.,"

getCorePoolSize
public int getCorePoolSize()
Returns the core number of threads.

Returns:
the core number of threads
See Also:
setCorePoolSize(int)


"
ThreadPoolExecutor,getKeepAliveTime(TimeUnit unit),long,"Returns the thread keep-alive time, which is the amount of time that threads in excess of the core pool size may remain idle before being terminated.","

getKeepAliveTime
public long getKeepAliveTime(TimeUnit unit)
Returns the thread keep-alive time, which is the amount of time
 that threads in excess of the core pool size may remain
 idle before being terminated.

Parameters:
unit - the desired time unit of the result
Returns:
the time limit
See Also:
setKeepAliveTime(long, TimeUnit)


"
ThreadPoolExecutor,getLargestPoolSize(),int,Returns the largest number of threads that have ever simultaneously been in the pool.,"

getLargestPoolSize
public int getLargestPoolSize()
Returns the largest number of threads that have ever
 simultaneously been in the pool.

Returns:
the number of threads


"
ThreadPoolExecutor,getMaximumPoolSize(),int,Returns the maximum allowed number of threads.,"

getMaximumPoolSize
public int getMaximumPoolSize()
Returns the maximum allowed number of threads.

Returns:
the maximum allowed number of threads
See Also:
setMaximumPoolSize(int)


"
ThreadPoolExecutor,getPoolSize(),int,Returns the current number of threads in the pool.,"

getPoolSize
public int getPoolSize()
Returns the current number of threads in the pool.

Returns:
the number of threads


"
ThreadPoolExecutor,getQueue(),BlockingQueue<Runnable>,Returns the task queue used by this executor.,"

getQueue
public BlockingQueue<Runnable> getQueue()
Returns the task queue used by this executor. Access to the
 task queue is intended primarily for debugging and monitoring.
 This queue may be in active use.  Retrieving the task queue
 does not prevent queued tasks from executing.

Returns:
the task queue


"
ThreadPoolExecutor,getRejectedExecutionHandler(),RejectedExecutionHandler,Returns the current handler for unexecutable tasks.,"

getRejectedExecutionHandler
public RejectedExecutionHandler getRejectedExecutionHandler()
Returns the current handler for unexecutable tasks.

Returns:
the current handler
See Also:
setRejectedExecutionHandler(RejectedExecutionHandler)


"
ThreadPoolExecutor,getTaskCount(),long,Returns the approximate total number of tasks that have ever been scheduled for execution.,"

getTaskCount
public long getTaskCount()
Returns the approximate total number of tasks that have ever been
 scheduled for execution. Because the states of tasks and
 threads may change dynamically during computation, the returned
 value is only an approximation.

Returns:
the number of tasks


"
ThreadPoolExecutor,getThreadFactory(),ThreadFactory,Returns the thread factory used to create new threads.,"

getThreadFactory
public ThreadFactory getThreadFactory()
Returns the thread factory used to create new threads.

Returns:
the current thread factory
See Also:
setThreadFactory(ThreadFactory)


"
ThreadPoolExecutor,isShutdown(),boolean,Returns true if this executor has been shut down.,"

isShutdown
public boolean isShutdown()
Description copied from interface: ExecutorService
Returns true if this executor has been shut down.

Returns:
true if this executor has been shut down


"
ThreadPoolExecutor,isTerminated(),boolean,Returns true if all tasks have completed following shut down.,"

isTerminated
public boolean isTerminated()
Description copied from interface: ExecutorService
Returns true if all tasks have completed following shut down.
 Note that isTerminated is never true unless
 either shutdown or shutdownNow was called first.

Returns:
true if all tasks have completed following shut down


"
ThreadPoolExecutor,isTerminating(),boolean,Returns true if this executor is in the process of terminating after shutdown() or shutdownNow() but has not completely terminated.,"

isTerminating
public boolean isTerminating()
Returns true if this executor is in the process of terminating
 after shutdown() or shutdownNow() but has not
 completely terminated.  This method may be useful for
 debugging. A return of true reported a sufficient
 period after shutdown may indicate that submitted tasks have
 ignored or suppressed interruption, causing this executor not
 to properly terminate.

Returns:
true if terminating but not yet terminated


"
ThreadPoolExecutor,prestartAllCoreThreads(),int,"Starts all core threads, causing them to idly wait for work.","

prestartAllCoreThreads
public int prestartAllCoreThreads()
Starts all core threads, causing them to idly wait for work. This
 overrides the default policy of starting core threads only when
 new tasks are executed.

Returns:
the number of threads started


"
ThreadPoolExecutor,prestartCoreThread(),boolean,"Starts a core thread, causing it to idly wait for work.","

prestartCoreThread
public boolean prestartCoreThread()
Starts a core thread, causing it to idly wait for work. This
 overrides the default policy of starting core threads only when
 new tasks are executed. This method will return false
 if all core threads have already been started.

Returns:
true if a thread was started


"
ThreadPoolExecutor,purge(),void,Tries to remove from the work queue all Future tasks that have been cancelled.,"

purge
public void purge()
Tries to remove from the work queue all Future
 tasks that have been cancelled. This method can be useful as a
 storage reclamation operation, that has no other impact on
 functionality. Cancelled tasks are never executed, but may
 accumulate in work queues until worker threads can actively
 remove them. Invoking this method instead tries to remove them now.
 However, this method may fail to remove tasks in
 the presence of interference by other threads.

"
ThreadPoolExecutor,remove(Runnable task),boolean,"Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started.","

remove
public boolean remove(Runnable task)
Removes this task from the executor's internal queue if it is
 present, thus causing it not to be run if it has not already
 started.

 This method may be useful as one part of a cancellation
 scheme.  It may fail to remove tasks that have been converted
 into other forms before being placed on the internal queue. For
 example, a task entered using submit might be
 converted into a form that maintains Future status.
 However, in such cases, method purge() may be used to
 remove those Futures that have been cancelled.

Parameters:
task - the task to remove
Returns:
true if the task was removed


"
ThreadPoolExecutor,setCorePoolSize(int corePoolSize),void,Sets the core number of threads.,"

setCorePoolSize
public void setCorePoolSize(int corePoolSize)
Sets the core number of threads.  This overrides any value set
 in the constructor.  If the new value is smaller than the
 current value, excess existing threads will be terminated when
 they next become idle.  If larger, new threads will, if needed,
 be started to execute any queued tasks.

Parameters:
corePoolSize - the new core size
Throws:
IllegalArgumentException - if corePoolSize < 0
See Also:
getCorePoolSize()


"
ThreadPoolExecutor,"setKeepAliveTime(long time, TimeUnit unit)",void,Sets the time limit for which threads may remain idle before being terminated.,"

setKeepAliveTime
public void setKeepAliveTime(long time,
                             TimeUnit unit)
Sets the time limit for which threads may remain idle before
 being terminated.  If there are more than the core number of
 threads currently in the pool, after waiting this amount of
 time without processing a task, excess threads will be
 terminated.  This overrides any value set in the constructor.

Parameters:
time - the time to wait.  A time value of zero will cause
        excess threads to terminate immediately after executing tasks.
unit - the time unit of the time argument
Throws:
IllegalArgumentException - if time less than zero or
         if time is zero and allowsCoreThreadTimeOut
See Also:
getKeepAliveTime(TimeUnit)


"
ThreadPoolExecutor,setMaximumPoolSize(int maximumPoolSize),void,Sets the maximum allowed number of threads.,"

setMaximumPoolSize
public void setMaximumPoolSize(int maximumPoolSize)
Sets the maximum allowed number of threads. This overrides any
 value set in the constructor. If the new value is smaller than
 the current value, excess existing threads will be
 terminated when they next become idle.

Parameters:
maximumPoolSize - the new maximum
Throws:
IllegalArgumentException - if the new maximum is
         less than or equal to zero, or
         less than the core pool size
See Also:
getMaximumPoolSize()


"
ThreadPoolExecutor,setRejectedExecutionHandler(RejectedExecutionHandler handler),void,Sets a new handler for unexecutable tasks.,"

setRejectedExecutionHandler
public void setRejectedExecutionHandler(RejectedExecutionHandler handler)
Sets a new handler for unexecutable tasks.

Parameters:
handler - the new handler
Throws:
NullPointerException - if handler is null
See Also:
getRejectedExecutionHandler()


"
ThreadPoolExecutor,setThreadFactory(ThreadFactory threadFactory),void,Sets the thread factory used to create new threads.,"

setThreadFactory
public void setThreadFactory(ThreadFactory threadFactory)
Sets the thread factory used to create new threads.

Parameters:
threadFactory - the new thread factory
Throws:
NullPointerException - if threadFactory is null
See Also:
getThreadFactory()


"
ThreadPoolExecutor,shutdown(),void,"Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.","

shutdown
public void shutdown()
Initiates an orderly shutdown in which previously submitted
 tasks are executed, but no new tasks will be accepted.
 Invocation has no additional effect if already shut down.

 This method does not wait for previously submitted tasks to
 complete execution.  Use awaitTermination
 to do that.

Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
ThreadPoolExecutor,shutdownNow(),List<Runnable>,"Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.","

shutdownNow
public List<Runnable> shutdownNow()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution. These tasks are drained (removed)
 from the task queue upon return from this method.

 This method does not wait for actively executing tasks to
 terminate.  Use awaitTermination to
 do that.

 There are no guarantees beyond best-effort attempts to stop
 processing actively executing tasks.  This implementation
 cancels tasks via Thread.interrupt(), so any task that
 fails to respond to interrupts may never terminate.

Returns:
list of tasks that never commenced execution
Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
ThreadPoolExecutor,terminated(),protected void,Method invoked when the Executor has terminated.,"

terminated
protected void terminated()
Method invoked when the Executor has terminated.  Default
 implementation does nothing. Note: To properly nest multiple
 overridings, subclasses should generally invoke
 super.terminated within this method.

"
ThreadPoolExecutor,toString(),String,"Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.","

toString
public String toString()
Returns a string identifying this pool, as well as its state,
 including indications of run state and estimated worker and
 task counts.

Overrides:
toString in class Object
Returns:
a string identifying this pool, as well as its state


"
ThreadPoolExecutor.AbortPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,Always throws RejectedExecutionException.,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Always throws RejectedExecutionException.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task
Throws:
RejectedExecutionException - always


"
ThreadPoolExecutor.CallerRunsPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.","

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
ThreadPoolExecutor.DiscardOldestPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded.","

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Obtains and ignores the next task that the executor
 would otherwise execute, if one is immediately available,
 and then retries execution of task r, unless the executor
 is shut down, in which case task r is instead discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
ThreadPoolExecutor.DiscardPolicy,"rejectedExecution(Runnable r, ThreadPoolExecutor e)",void,"Does nothing, which has the effect of discarding task r.","

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Does nothing, which has the effect of discarding task r.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
