Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AbstractExecutorService,1,void shutdown(),False,,NULL
0,AbstractExecutorService,2,List<Runnable> shutdownNow(),False,,NULL
0,AbstractExecutorService,3,boolean isShutdown(),False,,NULL
0,AbstractExecutorService,4,boolean isTerminated(),False,,NULL
0,AbstractExecutorService,5,"boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException",False,,NULL
1,ArrayBlockingQueue,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.  This method is generally preferable to method add(E),
 which can fail to insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
1,ArrayBlockingQueue,2,E poll(),True,,"

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
1,ArrayBlockingQueue,3,E peek(),True,,"

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
1,ArrayBlockingQueue,4,int remainingCapacity(),True,,"

remainingCapacity
public int remainingCapacity()
Returns the number of additional elements that this queue can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this queue
 less the current size of this queue.

 Note that you cannot always tell if an attempt to insert
 an element will succeed by inspecting remainingCapacity
 because it may be the case that another thread is about to
 insert or remove an element.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
the remaining capacity


"
1,ArrayBlockingQueue,5,int size(),True,,"

size
public int size()
Returns the number of elements in this queue.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
2,CompletableFuture,1,CompletableFuture<T> complete(T value),False,,NULL
2,CompletableFuture,2,"CompletableFuture<T> exceptionally(Function<Throwable, ? extends T> fn)",True,,"

exceptionally
public CompletableFuture<T> exceptionally(Function<Throwable,? extends T> fn)
Returns a new CompletableFuture that is completed when this
 CompletableFuture completes, with the result of the given
 function of the exception triggering this CompletableFuture's
 completion when it completes exceptionally; otherwise, if this
 CompletableFuture completes normally, then the returned
 CompletableFuture also completes normally with the same value.
 Note: More flexible versions of this functionality are
 available using methods whenComplete and handle.

Specified by:
exceptionally in interface CompletionStage<T>
Parameters:
fn - the function to use to compute the value of the
 returned CompletableFuture if this CompletableFuture completed
 exceptionally
Returns:
the new CompletableFuture


"
2,CompletableFuture,3,"CompletableFuture<T> thenApply(Function<? super T,? extends U> fn)",False,,NULL
2,CompletableFuture,4,CompletableFuture<Void> thenAccept(Consumer<? super T> action),True,,"

thenAccept
public CompletableFuture<Void> thenAccept(Consumer<? super T> action)
Description copied from interface: CompletionStage
Returns a new CompletionStage that, when this stage completes
 normally, is executed with this stage's result as the argument
 to the supplied action.

 See the CompletionStage documentation for rules
 covering exceptional completion.

Specified by:
thenAccept in interface CompletionStage<T>
Parameters:
action - the action to perform before completing the
 returned CompletionStage
Returns:
the new CompletionStage


"
2,CompletableFuture,5,"CompletableFuture<T> exceptionallyCompose(Function<Throwable, ? extends CompletionStage<T>> fn)",False,,NULL
3,ConcurrentHashMap,1,"V put(K key, V value)",True,,"

put
public V put(K key,
             V value)
Maps the specified key to the specified value in this table.
 Neither the key nor the value can be null.

 The value can be retrieved by calling the get method
 with a key that is equal to the original key.

Specified by:
put in interface Map<K,V>
Overrides:
put in class AbstractMap<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key or value is null


"
3,ConcurrentHashMap,2,V get(Object key),True,,"

get
public V get(Object key)
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that key.equals(k),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<K,V>
Overrides:
get in class AbstractMap<K,V>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
Throws:
NullPointerException - if the specified key is null


"
3,ConcurrentHashMap,3,V remove(Object key),True,,"

remove
public V remove(Object key)
Removes the key (and its corresponding value) from this map.
 This method does nothing if the key is not in the map.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - the key that needs to be removed
Returns:
the previous value associated with key, or
         null if there was no mapping for key
Throws:
NullPointerException - if the specified key is null


"
3,ConcurrentHashMap,4,boolean containsKey(Object key),True,,"

containsKey
public boolean containsKey(Object key)
Tests if the specified object is a key in this table.

Specified by:
containsKey in interface Map<K,V>
Overrides:
containsKey in class AbstractMap<K,V>
Parameters:
key - possible key
Returns:
true if and only if the specified object
         is a key in this table, as determined by the
         equals method; false otherwise
Throws:
NullPointerException - if the specified key is null


"
3,ConcurrentHashMap,5,Set<K> keySet(),False,,NULL
4,ConcurrentHashMap.KeySetView,1,boolean addKey(K key),False,,NULL
4,ConcurrentHashMap.KeySetView,2,boolean removeKey(Object key),False,,NULL
4,ConcurrentHashMap.KeySetView,3,boolean containsKey(Object key),False,,NULL
4,ConcurrentHashMap.KeySetView,4,void clear(),True,,"

clear
public final void clear()
Removes all of the elements from this view, by removing all
 the mappings from the map backing this view.

Specified by:
clear in interface Collection<E>


"
4,ConcurrentHashMap.KeySetView,5,Spliterator<K> spliterator(),True,,"

spliterator
public Spliterator<K> spliterator()
Description copied from interface: Set
Creates a Spliterator over the elements in this set.

 The Spliterator reports Spliterator.DISTINCT.
 Implementations should document the reporting of additional
 characteristic values.

Specified by:
spliterator in interface Iterable<K>
Specified by:
spliterator in interface Collection<K>
Specified by:
spliterator in interface Set<K>
Returns:
a Spliterator over the elements in this set


"
5,ConcurrentLinkedDeque,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this deque.
 As the deque is unbounded, this method will never return false.

Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
5,ConcurrentLinkedDeque,2,E poll(),True,,"

poll
public E poll()
Description copied from interface: Deque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the first element of this deque, or null if
         this deque is empty


"
5,ConcurrentLinkedDeque,3,E peek(),True,,"

peek
public E peek()
Description copied from interface: Deque
Retrieves, but does not remove, the head of the queue represented by
 this deque (in other words, the first element of this deque), or
 returns null if this deque is empty.

 This method is equivalent to Deque.peekFirst().

Specified by:
peek in interface Deque<E>
Specified by:
peek in interface Queue<E>
Returns:
the head of the queue represented by this deque, or
         null if this deque is empty


"
5,ConcurrentLinkedDeque,4,boolean remove(Object o),True,,"

remove
public boolean remove(Object o)
Removes the first element e such that
 o.equals(e), if such an element exists in this deque.
 If the deque does not contain the element, it is unchanged.

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Deque<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this deque, if present
Returns:
true if the deque contained the specified element
Throws:
NullPointerException - if the specified element is null


"
5,ConcurrentLinkedDeque,5,boolean contains(Object o),True,,"

contains
public boolean contains(Object o)
Returns true if this deque contains at least one
 element e such that o.equals(e).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Deque<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this deque is to be tested
Returns:
true if this deque contains the specified element


"
6,ConcurrentLinkedQueue,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
NullPointerException - if the specified element is null


"
6,ConcurrentLinkedQueue,2,E poll(),True,,"

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
6,ConcurrentLinkedQueue,3,E peek(),True,,"

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
6,ConcurrentLinkedQueue,4,boolean isEmpty(),True,,"

isEmpty
public boolean isEmpty()
Returns true if this queue contains no elements.

Specified by:
isEmpty in interface Collection<E>
Overrides:
isEmpty in class AbstractCollection<E>
Returns:
true if this queue contains no elements


"
6,ConcurrentLinkedQueue,5,int size(),True,,"

size
public int size()
Returns the number of elements in this queue.  If this queue
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

 Beware that, unlike in most collections, this method is
 NOT a constant-time operation. Because of the
 asynchronous nature of these queues, determining the current
 number of elements requires an O(n) traversal.
 Additionally, if elements are added or removed during execution
 of this method, the returned result may be inaccurate.  Thus,
 this method is typically not very useful in concurrent
 applications.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this queue


"
7,ConcurrentSkipListMap,1,"V putIfAbsent(K key, V value)",True,,"

putIfAbsent
public V putIfAbsent(K key,
                     V value)
If the specified key is not already associated
 with a value, associate it with the given value.
 This is equivalent to
   
 if (!map.containsKey(key))
   return map.put(key, value);
 else
   return map.get(key);
 

 except that the action is performed atomically.

Specified by:
putIfAbsent in interface ConcurrentMap<K,V>
Specified by:
putIfAbsent in interface Map<K,V>
Parameters:
key - key with which the specified value is to be associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key or value is null


"
7,ConcurrentSkipListMap,2,V remove(Object key),True,,"

remove
public V remove(Object key)
Removes the mapping for the specified key from this map if present.

Specified by:
remove in interface Map<K,V>
Overrides:
remove in class AbstractMap<K,V>
Parameters:
key - key for which mapping should be removed
Returns:
the previous value associated with the specified key, or
         null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key is null


"
7,ConcurrentSkipListMap,3,"V replace(K key, V value)",True,,"

replace
public V replace(K key,
                 V value)
Replaces the entry for a key only if currently mapped to some value.
 This is equivalent to
   
 if (map.containsKey(key)) {
   return map.put(key, value);
 } else
   return null;
 

 except that the action is performed atomically.

Specified by:
replace in interface ConcurrentMap<K,V>
Specified by:
replace in interface Map<K,V>
Parameters:
key - key with which the specified value is associated
value - value to be associated with the specified key
Returns:
the previous value associated with the specified key,
         or null if there was no mapping for the key
Throws:
ClassCastException - if the specified key cannot be compared
         with the keys currently in the map
NullPointerException - if the specified key or value is null


"
7,ConcurrentSkipListMap,4,"V getOrDefault(Object key, V defaultValue)",True,,"

getOrDefault
public V getOrDefault(Object key,
                      V defaultValue)
Returns the value to which the specified key is mapped,
 or the given defaultValue if this map contains no mapping for the key.

Specified by:
getOrDefault in interface ConcurrentMap<K,V>
Specified by:
getOrDefault in interface Map<K,V>
Parameters:
key - the key
defaultValue - the value to return if this map contains
 no mapping for the given key
Returns:
the mapping for the key, if present; else the defaultValue
Throws:
NullPointerException - if the specified key is null
Since:
1.8


"
7,ConcurrentSkipListMap,5,"ConcurrentNavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",True,,"

subMap
public ConcurrentNavigableMap<K,V> subMap(K fromKey,
                                          boolean fromInclusive,
                                          K toKey,
                                          boolean toInclusive)
Description copied from interface: NavigableMap
Returns a view of the portion of this map whose keys range from
 fromKey to toKey.  If fromKey and
 toKey are equal, the returned map is empty unless
 fromInclusive and toInclusive are both true.  The
 returned map is backed by this map, so changes in the returned map are
 reflected in this map, and vice-versa.  The returned map supports all
 optional map operations that this map supports.

 The returned map will throw an IllegalArgumentException
 on an attempt to insert a key outside of its range, or to construct a
 submap either of whose endpoints lie outside its range.

Specified by:
subMap in interface ConcurrentNavigableMap<K,V>
Specified by:
subMap in interface NavigableMap<K,V>
Parameters:
fromKey - low endpoint of the keys in the returned map
fromInclusive - true if the low endpoint
        is to be included in the returned view
toKey - high endpoint of the keys in the returned map
toInclusive - true if the high endpoint
        is to be included in the returned view
Returns:
a view of the portion of this map whose keys range from
         fromKey to toKey
Throws:
ClassCastException - if fromKey and toKey
         cannot be compared to one another using this map's comparator
         (or, if the map has no comparator, using natural ordering).
         Implementations may, but are not required to, throw this
         exception if fromKey or toKey
         cannot be compared to keys currently in the map.
NullPointerException - if fromKey or toKey is null
IllegalArgumentException - if fromKey is greater than
         toKey; or if this map itself has a restricted
         range, and fromKey or toKey lies
         outside the bounds of the range


"
8,ConcurrentSkipListSet,1,boolean add(E e),True,,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that e.equals(e2).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the
         specified element
Throws:
ClassCastException - if e cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
8,ConcurrentSkipListSet,2,boolean remove(Object o),True,,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 o.equals(e), if this set contains such an element.
 Returns true if this set contained the element (or
 equivalently, if this set changed as a result of the call).
 (This set will not contain the element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element
Throws:
ClassCastException - if o cannot be compared
         with the elements currently in this set
NullPointerException - if the specified element is null


"
8,ConcurrentSkipListSet,3,E pollFirst(),True,,"

pollFirst
public E pollFirst()
Description copied from interface: NavigableSet
Retrieves and removes the first (lowest) element,
 or returns null if this set is empty.

Specified by:
pollFirst in interface NavigableSet<E>
Returns:
the first element, or null if this set is empty


"
8,ConcurrentSkipListSet,4,E pollLast(),True,,"

pollLast
public E pollLast()
Description copied from interface: NavigableSet
Retrieves and removes the last (highest) element,
 or returns null if this set is empty.

Specified by:
pollLast in interface NavigableSet<E>
Returns:
the last element, or null if this set is empty


"
8,ConcurrentSkipListSet,5,NavigableSet<E> descendingSet(),True,,"

descendingSet
public NavigableSet<E> descendingSet()
Returns a reverse order view of the elements contained in this set.
 The descending set is backed by this set, so changes to the set are
 reflected in the descending set, and vice-versa.

 The returned set has an ordering equivalent to
 Collections.reverseOrder(comparator()).
 The expression s.descendingSet().descendingSet() returns a
 view of s essentially equivalent to s.

Specified by:
descendingSet in interface NavigableSet<E>
Returns:
a reverse order view of this set


"
9,CopyOnWriteArrayList,1,boolean addIfAbsent(E e),True,,"

addIfAbsent
public boolean addIfAbsent(E e)
Appends the element, if not present.

Parameters:
e - element to be added to this list, if absent
Returns:
true if the element was added


"
9,CopyOnWriteArrayList,2,void clear(),True,,"

clear
public void clear()
Removes all of the elements from this list.
 The list will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface List<E>


"
9,CopyOnWriteArrayList,3,boolean removeAll(Collection<?> c),True,,"

removeAll
public boolean removeAll(Collection<?> c)
Removes from this list all of its elements that are contained in
 the specified collection. This is a particularly expensive operation
 in this class because of the need for an internal temporary array.

Specified by:
removeAll in interface Collection<E>
Specified by:
removeAll in interface List<E>
Parameters:
c - collection containing elements to be removed from this list
Returns:
true if this list changed as a result of the call
Throws:
ClassCastException - if the class of an element of this list
         is incompatible with the specified collection
         (optional)
NullPointerException - if this list contains a null element and the
         specified collection does not permit null elements
         (optional),
         or if the specified collection is null
See Also:
remove(Object)


"
9,CopyOnWriteArrayList,4,"E set(int index, E element)",True,,"

set
public E set(int index,
             E element)
Replaces the element at the specified position in this list with the
 specified element.

Specified by:
set in interface List<E>
Parameters:
index - index of the element to replace
element - element to be stored at the specified position
Returns:
the element previously at the specified position
Throws:
IndexOutOfBoundsException - if the index is out of range
         (index < 0 || index >= size())


"
9,CopyOnWriteArrayList,5,Object[] toArray(),True,,"

toArray
public Object[] toArray()
Returns an array containing all of the elements in this list
 in proper sequence (from first to last element).

 The returned array will be ""safe"" in that no references to it are
 maintained by this list.  (In other words, this method must allocate
 a new array).  The caller is thus free to modify the returned array.

 This method acts as bridge between array-based and collection-based
 APIs.

Specified by:
toArray in interface Collection<E>
Specified by:
toArray in interface List<E>
Returns:
an array containing all the elements in this list
See Also:
Arrays.asList(Object[])


"
10,CopyOnWriteArraySet,1,boolean add(E e),True,,"

add
public boolean add(E e)
Adds the specified element to this set if it is not already present.
 More formally, adds the specified element e to this set if
 the set contains no element e2 such that
 (e==null ? e2==null : e.equals(e2)).
 If this set already contains the element, the call leaves the set
 unchanged and returns false.

Specified by:
add in interface Collection<E>
Specified by:
add in interface Set<E>
Overrides:
add in class AbstractCollection<E>
Parameters:
e - element to be added to this set
Returns:
true if this set did not already contain the specified
         element


"
10,CopyOnWriteArraySet,2,boolean remove(Object o),True,,"

remove
public boolean remove(Object o)
Removes the specified element from this set if it is present.
 More formally, removes an element e such that
 (o==null ? e==null : o.equals(e)),
 if this set contains such an element.  Returns true if
 this set contained the element (or equivalently, if this set
 changed as a result of the call).  (This set will not contain the
 element once the call returns.)

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface Set<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - object to be removed from this set, if present
Returns:
true if this set contained the specified element


"
10,CopyOnWriteArraySet,3,boolean contains(Object o),True,,"

contains
public boolean contains(Object o)
Returns true if this set contains the specified element.
 More formally, returns true if and only if this set
 contains an element e such that
 (o==null ? e==null : o.equals(e)).

Specified by:
contains in interface Collection<E>
Specified by:
contains in interface Set<E>
Overrides:
contains in class AbstractCollection<E>
Parameters:
o - element whose presence in this set is to be tested
Returns:
true if this set contains the specified element


"
10,CopyOnWriteArraySet,4,int size(),True,,"

size
public int size()
Returns the number of elements in this set.

Specified by:
size in interface Collection<E>
Specified by:
size in interface Set<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this set


"
10,CopyOnWriteArraySet,5,void clear(),True,,"

clear
public void clear()
Removes all of the elements from this set.
 The set will be empty after this call returns.

Specified by:
clear in interface Collection<E>
Specified by:
clear in interface Set<E>
Overrides:
clear in class AbstractCollection<E>


"
11,CountDownLatch,1,void await(),True,,"

await
public void await()
           throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted.

 If the current count is zero then this method returns immediately.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of two things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
11,CountDownLatch,2,void countDown(),True,,"

countDown
public void countDown()
Decrements the count of the latch, releasing all waiting threads if
 the count reaches zero.

 If the current count is greater than zero then it is decremented.
 If the new count is zero then all waiting threads are re-enabled for
 thread scheduling purposes.

 If the current count equals zero then nothing happens.

"
11,CountDownLatch,3,long getCount(),True,,"

getCount
public long getCount()
Returns the current count.

 This method is typically used for debugging and testing purposes.

Returns:
the current count


"
11,CountDownLatch,4,"boolean await(long timeout, TimeUnit unit) throws InterruptedException",True,,"

await
public boolean await(long timeout,
                     TimeUnit unit)
              throws InterruptedException
Causes the current thread to wait until the latch has counted down to
 zero, unless the thread is interrupted,
 or the specified waiting time elapses.

 If the current count is zero then this method returns immediately
 with the value true.

 If the current count is greater than zero then the current
 thread becomes disabled for thread scheduling purposes and lies
 dormant until one of three things happen:
 
The count reaches zero due to invocations of the
 countDown() method; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the count reaches zero then the method returns with the
 value true.

 If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then the value false
 is returned.  If the time is less than or equal to zero, the method
 will not wait at all.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if the count reached zero and false
         if the waiting time elapsed before the count reached zero
Throws:
InterruptedException - if the current thread is interrupted
         while waiting


"
11,CountDownLatch,5,void await(Consumer<Long> consumer),False,,NULL
12,CountedCompleter,1,void onCompletion(CountedCompleter<?> caller),True,,"

onCompletion
public void onCompletion(CountedCompleter<?> caller)
Performs an action when method tryComplete() is invoked
 and the pending count is zero, or when the unconditional
 method complete(T) is invoked.  By default, this method
 does nothing. You can distinguish cases by checking the
 identity of the given caller argument. If not equal to this, then it is typically a subtask that may contain results
 (and/or links to other results) to combine.

Parameters:
caller - the task invoking this method (which may
 be this task itself)


"
12,CountedCompleter,2,"void onExceptionalCompletion(Throwable ex, CountedCompleter<?> caller)",False,,NULL
12,CountedCompleter,3,void tryComplete(),True,,"

tryComplete
public final void tryComplete()
If the pending count is nonzero, decrements the count;
 otherwise invokes onCompletion(CountedCompleter)
 and then similarly tries to complete this task's completer,
 if one exists, else marks this task as complete.

"
12,CountedCompleter,4,void propagateCompletion(),True,,"

propagateCompletion
public final void propagateCompletion()
Equivalent to tryComplete() but does not invoke onCompletion(CountedCompleter) along the completion path:
 If the pending count is nonzero, decrements the count;
 otherwise, similarly tries to complete this task's completer, if
 one exists, else marks this task as complete. This method may be
 useful in cases where onCompletion should not, or need
 not, be invoked for each completer in a computation.

"
12,CountedCompleter,5,void setPendingCount(int count),True,,"

setPendingCount
public final void setPendingCount(int count)
Sets the pending count to the given value.

Parameters:
count - the count


"
13,CyclicBarrier,1,int getParties(),True,,"

getParties
public int getParties()
Returns the number of parties required to trip this barrier.

Returns:
the number of parties required to trip this barrier


"
13,CyclicBarrier,2,int await(),True,,"

await
public int await()
          throws InterruptedException,
                 BrokenBarrierException
Waits until all parties have invoked
 await on this barrier.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while waiting,
 then all other waiting threads will throw
 BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was
         broken when await was called, or the barrier
         action (if present) failed due to an exception


"
13,CyclicBarrier,3,"int await(long timeout, TimeUnit unit) throws InterruptedException, BrokenBarrierException, TimeoutException",True,,"

await
public int await(long timeout,
                 TimeUnit unit)
          throws InterruptedException,
                 BrokenBarrierException,
                 TimeoutException
Waits until all parties have invoked
 await on this barrier, or the specified waiting time elapses.

 If the current thread is not the last to arrive then it is
 disabled for thread scheduling purposes and lies dormant until
 one of the following things happens:
 
The last thread arrives; or
 The specified timeout elapses; or
 Some other thread interrupts
 the current thread; or
 Some other thread interrupts
 one of the other waiting threads; or
 Some other thread times out while waiting for barrier; or
 Some other thread invokes reset() on this barrier.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException
 is thrown. If the time is less than or equal to zero, the
 method will not wait at all.

 If the barrier is reset() while any thread is waiting,
 or if the barrier is broken when
 await is invoked, or while any thread is waiting, then
 BrokenBarrierException is thrown.

 If any thread is interrupted while
 waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken
 state.

 If the current thread is the last thread to arrive, and a
 non-null barrier action was supplied in the constructor, then the
 current thread runs the action before allowing the other threads to
 continue.
 If an exception occurs during the barrier action then that exception
 will be propagated in the current thread and the barrier is placed in
 the broken state.

Parameters:
timeout - the time to wait for the barrier
unit - the time unit of the timeout parameter
Returns:
the arrival index of the current thread, where index
         getParties() - 1 indicates the first
         to arrive and zero indicates the last to arrive
Throws:
InterruptedException - if the current thread was interrupted
         while waiting
TimeoutException - if the specified timeout elapses.
         In this case the barrier will be broken.
BrokenBarrierException - if another thread was
         interrupted or timed out while the current thread was
         waiting, or the barrier was reset, or the barrier was broken
         when await was called, or the barrier action (if
         present) failed due to an exception


"
13,CyclicBarrier,4,boolean isBroken(),True,,"

isBroken
public boolean isBroken()
Queries if this barrier is in a broken state.

Returns:
true if one or more parties broke out of this
         barrier due to interruption or timeout since
         construction or the last reset, or a barrier action
         failed due to an exception; false otherwise.


"
13,CyclicBarrier,5,void reset(),True,,"

reset
public void reset()
Resets the barrier to its initial state.  If any parties are
 currently waiting at the barrier, they will return with a
 BrokenBarrierException. Note that resets after
 a breakage has occurred for other reasons can be complicated to
 carry out; threads need to re-synchronize in some other way,
 and choose one to perform the reset.  It may be preferable to
 instead create a new barrier for subsequent use.

"
14,DelayQueue,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element into this delay queue.

Specified by:
offer in interface BlockingQueue<E extends Delayed>
Specified by:
offer in interface Queue<E extends Delayed>
Parameters:
e - the element to add
Returns:
true
Throws:
NullPointerException - if the specified element is null


"
14,DelayQueue,2,E poll(),True,,"

poll
public E poll()
Retrieves and removes the head of this queue, or returns null
 if this queue has no elements with an expired delay.

Specified by:
poll in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue has no elements with an expired delay


"
14,DelayQueue,3,E peek(),True,,"

peek
public E peek()
Retrieves, but does not remove, the head of this queue, or
 returns null if this queue is empty.  Unlike
 poll, if no expired elements are available in the queue,
 this method returns the element that will expire next,
 if one exists.

Specified by:
peek in interface Queue<E extends Delayed>
Returns:
the head of this queue, or null if this
         queue is empty


"
14,DelayQueue,4,void put(E e) throws InterruptedException,True,,"

put
public void put(E e)
Inserts the specified element into this delay queue. As the queue is
 unbounded this method will never block.

Specified by:
put in interface BlockingQueue<E extends Delayed>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null


"
14,DelayQueue,5,E take() throws InterruptedException,True,,"

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 until an element with an expired delay is available on this queue.

Specified by:
take in interface BlockingQueue<E extends Delayed>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
15,Exchanger,1,V exchange(V x),True,,"

exchange
public V exchange(V x)
           throws InterruptedException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted),
 and then transfers the given object to it, receiving its object
 in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of two things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Parameters:
x - the object to exchange
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting


"
15,Exchanger,2,"V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException",True,,"

exchange
public V exchange(V x,
                  long timeout,
                  TimeUnit unit)
           throws InterruptedException,
                  TimeoutException
Waits for another thread to arrive at this exchange point (unless
 the current thread is interrupted or
 the specified waiting time elapses), and then transfers the given
 object to it, receiving its object in return.

 If another thread is already waiting at the exchange point then
 it is resumed for thread scheduling purposes and receives the object
 passed in by the current thread.  The current thread returns immediately,
 receiving the object passed to the exchange by that other thread.

 If no other thread is already waiting at the exchange then the
 current thread is disabled for thread scheduling purposes and lies
 dormant until one of three things happens:
 
Some other thread enters the exchange; or
 Some other thread interrupts
 the current thread; or
 The specified waiting time elapses.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for the exchange,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

 If the specified waiting time elapses then TimeoutException is thrown.  If the time is less than or equal
 to zero, the method will not wait at all.

Parameters:
x - the object to exchange
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
the object provided by the other thread
Throws:
InterruptedException - if the current thread was
         interrupted while waiting
TimeoutException - if the specified waiting time elapses
         before another thread enters the exchange


"
15,Exchanger,3,boolean hasWaitingConsumer(),False,,NULL
15,Exchanger,4,boolean remove(V x),False,,NULL
15,Exchanger,5,int getWaitingConsumerCount(),False,,NULL
16,ExecutorCompletionService,1,Future<V> submit(Callable<V> task),True,,"

submit
public Future<V> submit(Callable<V> task)
Description copied from interface: CompletionService
Submits a value-returning task for execution and returns a Future
 representing the pending results of the task.  Upon completion,
 this task may be taken or polled.

Specified by:
submit in interface CompletionService<V>
Parameters:
task - the task to submit
Returns:
a Future representing pending completion of the task


"
16,ExecutorCompletionService,2,"Future<V> submit(Runnable task, V result)",True,,"

submit
public Future<V> submit(Runnable task,
                        V result)
Description copied from interface: CompletionService
Submits a Runnable task for execution and returns a Future
 representing that task.  Upon completion, this task may be
 taken or polled.

Specified by:
submit in interface CompletionService<V>
Parameters:
task - the task to submit
result - the result to return upon successful completion
Returns:
a Future representing pending completion of the task,
         and whose get() method will return the given
         result value upon completion


"
16,ExecutorCompletionService,3,Future<V> take(),True,,"

take
public Future<V> take()
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if none are yet present.

Specified by:
take in interface CompletionService<V>
Returns:
the Future representing the next completed task
Throws:
InterruptedException - if interrupted while waiting


"
16,ExecutorCompletionService,4,Future<V> poll(),True,,"

poll
public Future<V> poll()
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, or null if none are present.

Specified by:
poll in interface CompletionService<V>
Returns:
the Future representing the next completed task, or
         null if none are present


"
16,ExecutorCompletionService,5,"Future<V> poll(long timeout, TimeUnit unit)",True,,"

poll
public Future<V> poll(long timeout,
                      TimeUnit unit)
               throws InterruptedException
Description copied from interface: CompletionService
Retrieves and removes the Future representing the next
 completed task, waiting if necessary up to the specified wait
 time if none are yet present.

Specified by:
poll in interface CompletionService<V>
Parameters:
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
the Future representing the next completed task or
         null if the specified waiting time elapses
         before one is present
Throws:
InterruptedException - if interrupted while waiting


"
17,Executors,1,ExecutorService newFixedThreadPool(int nThreads),True,,"

newFixedThreadPool
public static ExecutorService newFixedThreadPool(int nThreads)
Creates a thread pool that reuses a fixed number of threads
 operating off a shared unbounded queue.  At any point, at most
 nThreads threads will be active processing tasks.
 If additional tasks are submitted when all threads are active,
 they will wait in the queue until a thread is available.
 If any thread terminates due to a failure during execution
 prior to shutdown, a new one will take its place if needed to
 execute subsequent tasks.  The threads in the pool will exist
 until it is explicitly shutdown.

Parameters:
nThreads - the number of threads in the pool
Returns:
the newly created thread pool
Throws:
IllegalArgumentException - if nThreads <= 0


"
17,Executors,2,ScheduledExecutorService newScheduledThreadPool(int corePoolSize),True,,"

newScheduledThreadPool
public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)
Creates a thread pool that can schedule commands to run after a
 given delay, or to execute periodically.

Parameters:
corePoolSize - the number of threads to keep in the pool,
 even if they are idle
Returns:
a newly created scheduled thread pool
Throws:
IllegalArgumentException - if corePoolSize < 0


"
17,Executors,3,ThreadFactory defaultThreadFactory(),True,,"

defaultThreadFactory
public static ThreadFactory defaultThreadFactory()
Returns a default thread factory used to create new threads.
 This factory creates all new threads used by an Executor in the
 same ThreadGroup. If there is a SecurityManager, it uses the group of System.getSecurityManager(), else the group of the thread
 invoking this defaultThreadFactory method. Each new
 thread is created as a non-daemon thread with priority set to
 the smaller of Thread.NORM_PRIORITY and the maximum
 priority permitted in the thread group.  New threads have names
 accessible via Thread.getName() of
 pool-N-thread-M, where N is the sequence
 number of this factory, and M is the sequence number
 of the thread created by this factory.

Returns:
a thread factory


"
17,Executors,4,Callable<Void> callable(Runnable task),False,,NULL
17,Executors,5,ExecutorService unconfigurableExecutorService(ExecutorService executor),True,,"

unconfigurableExecutorService
public static ExecutorService unconfigurableExecutorService(ExecutorService executor)
Returns an object that delegates all defined ExecutorService methods to the given executor, but not any
 other methods that might otherwise be accessible using
 casts. This provides a way to safely ""freeze"" configuration and
 disallow tuning of a given concrete implementation.

Parameters:
executor - the underlying implementation
Returns:
an ExecutorService instance
Throws:
NullPointerException - if executor null


"
18,ForkJoinPool,1,void execute(ForkJoinTask<?> task),True,,"

execute
public void execute(ForkJoinTask<?> task)
Arranges for (asynchronous) execution of the given task.

Parameters:
task - the task
Throws:
NullPointerException - if the task is null
RejectedExecutionException - if the task cannot be
         scheduled for execution


"
18,ForkJoinPool,2,int getParallelism(),True,,"

getParallelism
public int getParallelism()
Returns the targeted parallelism level of this pool.

Returns:
the targeted parallelism level of this pool


"
18,ForkJoinPool,3,long getStealCount(),True,,"

getStealCount
public long getStealCount()
Returns an estimate of the total number of tasks stolen from
 one thread's work queue by another. The reported value
 underestimates the actual total number of steals when the pool
 is not quiescent. This value may be useful for monitoring and
 tuning fork/join programs: in general, steal counts should be
 high enough to keep threads busy, but low enough to avoid
 overhead and contention across threads.

Returns:
the number of steals


"
18,ForkJoinPool,4,int getActiveThreadCount(),True,,"

getActiveThreadCount
public int getActiveThreadCount()
Returns an estimate of the number of threads that are currently
 stealing or executing tasks. This method may overestimate the
 number of active threads.

Returns:
the number of active threads


"
18,ForkJoinPool,5,boolean isQuiescent(),True,,"

isQuiescent
public boolean isQuiescent()
Returns true if all worker threads are currently idle.
 An idle worker is one that cannot obtain a task to execute
 because none are available to steal from other threads, and
 there are no pending submissions to the pool. This method is
 conservative; it might not return true immediately upon
 idleness of all threads, but will eventually become true if
 threads remain inactive.

Returns:
true if all threads are currently idle


"
19,ForkJoinTask,1,void fork(),False,,NULL
19,ForkJoinTask,2,V join(),True,,"

join
public final V join()
Returns the result of the computation when it is
 done.  This method differs from get() in that
 abnormal completion results in RuntimeException or
 Error, not ExecutionException, and that
 interrupts of the calling thread do not cause the
 method to abruptly return by throwing InterruptedException.

Returns:
the computed result


"
19,ForkJoinTask,3,boolean cancel(boolean mayInterruptIfRunning),True,,"

cancel
public boolean cancel(boolean mayInterruptIfRunning)
Attempts to cancel execution of this task. This attempt will
 fail if the task has already completed or could not be
 cancelled for some other reason. If successful, and this task
 has not started when cancel is called, execution of
 this task is suppressed. After this method returns
 successfully, unless there is an intervening call to reinitialize(), subsequent calls to isCancelled(),
 isDone(), and cancel will return true
 and calls to join() and related methods will result in
 CancellationException.

 This method may be overridden in subclasses, but if so, must
 still ensure that these properties hold. In particular, the
 cancel method itself must not throw exceptions.

 This method is designed to be invoked by other
 tasks. To terminate the current task, you can just return or
 throw an unchecked exception from its computation method, or
 invoke completeExceptionally(Throwable).

Specified by:
cancel in interface Future<V>
Parameters:
mayInterruptIfRunning - this value has no effect in the
 default implementation because interrupts are not used to
 control cancellation.
Returns:
true if this task is now cancelled


"
19,ForkJoinTask,4,boolean isDone(),True,,"

isDone
public final boolean isDone()
Description copied from interface: Future
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<V>
Returns:
true if this task completed


"
19,ForkJoinTask,5,boolean isCancelled(),True,,"

isCancelled
public final boolean isCancelled()
Description copied from interface: Future
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<V>
Returns:
true if this task was cancelled before it completed


"
20,ForkJoinWorkerThread,1,void onStart(),True,,"

onStart
protected void onStart()
Initializes internal state after construction but before
 processing any tasks. If you override this method, you must
 invoke super.onStart() at the beginning of the method.
 Initialization requires care: Most fields must have legal
 default values, to ensure that attempted accesses from other
 threads work correctly even before this thread starts
 processing tasks.

"
20,ForkJoinWorkerThread,2,void onTermination(Throwable exception),True,,"

onTermination
protected void onTermination(Throwable exception)
Performs cleanup associated with termination of this worker
 thread.  If you override this method, you must invoke
 super.onTermination at the end of the overridden method.

Parameters:
exception - the exception causing this thread to abort due
 to an unrecoverable error, or null if completed normally


"
20,ForkJoinWorkerThread,3,ForkJoinPool getPool(),True,,"

getPool
public ForkJoinPool getPool()
Returns the pool hosting this thread.

Returns:
the pool


"
20,ForkJoinWorkerThread,4,int getPoolIndex(),True,,"

getPoolIndex
public int getPoolIndex()
Returns the unique index number of this thread in its pool.
 The returned value ranges from zero to the maximum number of
 threads (minus one) that may exist in the pool, and does not
 change during the lifetime of the thread.  This method may be
 useful for applications that track status or collect results
 per-worker-thread rather than per-task.

Returns:
the index number


"
20,ForkJoinWorkerThread,5,void setAsyncMode(boolean async),False,,NULL
21,FutureTask,1,void run(),True,,"

run
public void run()
Description copied from interface: RunnableFuture
Sets this Future to the result of its computation
 unless it has been cancelled.

Specified by:
run in interface Runnable
Specified by:
run in interface RunnableFuture<V>
See Also:
Thread.run()


"
21,FutureTask,2,boolean cancel(boolean mayInterruptIfRunning),True,,"

cancel
public boolean cancel(boolean mayInterruptIfRunning)
Description copied from interface: Future
Attempts to cancel execution of this task.  This attempt will
 fail if the task has already completed, has already been cancelled,
 or could not be cancelled for some other reason. If successful,
 and this task has not started when cancel is called,
 this task should never run.  If the task has already started,
 then the mayInterruptIfRunning parameter determines
 whether the thread executing this task should be interrupted in
 an attempt to stop the task.

 After this method returns, subsequent calls to Future.isDone() will
 always return true.  Subsequent calls to Future.isCancelled()
 will always return true if this method returned true.

Specified by:
cancel in interface Future<V>
Parameters:
mayInterruptIfRunning - true if the thread executing this
 task should be interrupted; otherwise, in-progress tasks are allowed
 to complete
Returns:
false if the task could not be cancelled,
 typically because it has already completed normally;
 true otherwise


"
21,FutureTask,3,boolean isCancelled(),True,,"

isCancelled
public boolean isCancelled()
Description copied from interface: Future
Returns true if this task was cancelled before it completed
 normally.

Specified by:
isCancelled in interface Future<V>
Returns:
true if this task was cancelled before it completed


"
21,FutureTask,4,boolean isDone(),True,,"

isDone
public boolean isDone()
Description copied from interface: Future
Returns true if this task completed.

 Completion may be due to normal termination, an exception, or
 cancellation -- in all of these cases, this method will return
 true.

Specified by:
isDone in interface Future<V>
Returns:
true if this task completed


"
21,FutureTask,5,"V get() throws InterruptedException, ExecutionException",True,,"

get
public V get()
      throws InterruptedException,
             ExecutionException
Description copied from interface: Future
Waits if necessary for the computation to complete, and then
 retrieves its result.

Specified by:
get in interface Future<V>
Returns:
the computed result
Throws:
CancellationException - if the computation was cancelled
InterruptedException - if the current thread was interrupted
 while waiting
ExecutionException - if the computation threw an
 exception


"
22,LinkedBlockingDeque,1,void put(E e),True,,"

put
public void put(E e)
         throws InterruptedException
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque), waiting if necessary for
 space to become available.

 This method is equivalent to putLast.

Specified by:
put in interface BlockingDeque<E>
Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting


"
22,LinkedBlockingDeque,2,E take(),True,,"

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), waiting if
 necessary until an element becomes available.

 This method is equivalent to takeFirst.

Specified by:
take in interface BlockingDeque<E>
Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this deque
Throws:
InterruptedException - if interrupted while waiting


"
22,LinkedBlockingDeque,3,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Description copied from interface: BlockingDeque
Inserts the specified element into the queue represented by this deque
 (in other words, at the tail of this deque) if it is possible to do so
 immediately without violating capacity restrictions, returning
 true upon success and false if no space is currently
 available.  When using a capacity-restricted deque, this method is
 generally preferable to the BlockingDeque.add(E) method, which can fail to
 insert an element only by throwing an exception.

 This method is equivalent to offerLast.

Specified by:
offer in interface BlockingDeque<E>
Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Deque<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
22,LinkedBlockingDeque,4,E poll(),True,,"

poll
public E poll()
Description copied from interface: BlockingDeque
Retrieves and removes the head of the queue represented by this deque
 (in other words, the first element of this deque), or returns
 null if this deque is empty.

 This method is equivalent to Deque.pollFirst().

Specified by:
poll in interface BlockingDeque<E>
Specified by:
poll in interface Deque<E>
Specified by:
poll in interface Queue<E>
Returns:
the head of this deque, or null if this deque is empty


"
22,LinkedBlockingDeque,5,int remainingCapacity(),True,,"

remainingCapacity
public int remainingCapacity()
Returns the number of additional elements that this deque can ideally
 (in the absence of memory or resource constraints) accept without
 blocking. This is always equal to the initial capacity of this deque
 less the current size of this deque.

 Note that you cannot always tell if an attempt to insert
 an element will succeed by inspecting remainingCapacity
 because it may be the case that another thread is about to
 insert or remove an element.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
the remaining capacity


"
23,LinkedBlockingQueue,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element at the tail of this queue if it is
 possible to do so immediately without exceeding the queue's capacity,
 returning true upon success and false if this queue
 is full.
 When using a capacity-restricted queue, this method is generally
 preferable to method add, which can fail to
 insert an element only by throwing an exception.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
23,LinkedBlockingQueue,2,E poll(),True,,"

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
23,LinkedBlockingQueue,3,E peek(),True,,"

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
23,LinkedBlockingQueue,4,void put(E e),True,,"

put
public void put(E e)
         throws InterruptedException
Inserts the specified element at the tail of this queue, waiting if
 necessary for space to become available.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
23,LinkedBlockingQueue,5,boolean remove(Object o),True,,"

remove
public boolean remove(Object o)
Removes a single instance of the specified element from this queue,
 if it is present.  More formally, removes an element e such
 that o.equals(e), if this queue contains one or more such
 elements.
 Returns true if this queue contained the specified element
 (or equivalently, if this queue changed as a result of the call).

Specified by:
remove in interface Collection<E>
Specified by:
remove in interface BlockingQueue<E>
Overrides:
remove in class AbstractCollection<E>
Parameters:
o - element to be removed from this queue, if present
Returns:
true if this queue changed as a result of the call


"
24,LinkedTransferQueue,1,boolean tryTransfer(E e),True,,"

tryTransfer
public boolean tryTransfer(E e)
Transfers the element to a waiting consumer immediately, if possible.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 otherwise returning false without enqueuing the element.

Specified by:
tryTransfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
Returns:
true if the element was transferred, else
         false
Throws:
NullPointerException - if the specified element is null


"
24,LinkedTransferQueue,2,"boolean tryTransfer(E e, long timeout, TimeUnit unit)",True,,"

tryTransfer
public boolean tryTransfer(E e,
                           long timeout,
                           TimeUnit unit)
                    throws InterruptedException
Transfers the element to a consumer if it is possible to do so
 before the timeout elapses.

 More precisely, transfers the specified element immediately
 if there exists a consumer already waiting to receive it (in
 take() or timed poll),
 else inserts the specified element at the tail of this queue
 and waits until the element is received by a consumer,
 returning false if the specified wait time elapses
 before the element can be transferred.

Specified by:
tryTransfer in interface TransferQueue<E>
Parameters:
e - the element to transfer
timeout - how long to wait before giving up, in units of
        unit
unit - a TimeUnit determining how to interpret the
        timeout parameter
Returns:
true if successful, or false if
         the specified waiting time elapses before completion,
         in which case the element is not left enqueued
Throws:
NullPointerException - if the specified element is null
InterruptedException - if interrupted while waiting,
         in which case the element is not left enqueued


"
24,LinkedTransferQueue,3,E take(),True,,"

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
24,LinkedTransferQueue,4,boolean hasWaitingConsumer(),True,,"

hasWaitingConsumer
public boolean hasWaitingConsumer()
Description copied from interface: TransferQueue
Returns true if there is at least one consumer waiting
 to receive an element via BlockingQueue.take() or
 timed poll.
 The return value represents a momentary state of affairs.

Specified by:
hasWaitingConsumer in interface TransferQueue<E>
Returns:
true if there is at least one waiting consumer


"
24,LinkedTransferQueue,5,int getWaitingConsumerCount(),True,,"

getWaitingConsumerCount
public int getWaitingConsumerCount()
Description copied from interface: TransferQueue
Returns an estimate of the number of consumers waiting to
 receive elements via BlockingQueue.take() or timed
 poll.  The return value is an
 approximation of a momentary state of affairs, that may be
 inaccurate if consumers have completed or given up waiting.
 The value may be useful for monitoring and heuristics, but
 not for synchronization control.  Implementations of this
 method are likely to be noticeably slower than those for
 TransferQueue.hasWaitingConsumer().

Specified by:
getWaitingConsumerCount in interface TransferQueue<E>
Returns:
the number of consumers waiting to receive elements


"
25,Phaser,1,int register(),True,,"

register
public int register()
Adds a new unarrived party to this phaser.  If an ongoing
 invocation of onAdvance(int, int) is in progress, this method
 may await its completion before returning.  If this phaser has
 a parent, and this phaser previously had no registered parties,
 this child phaser is also registered with its parent. If
 this phaser is terminated, the attempt to register has
 no effect, and a negative value is returned.

Returns:
the arrival phase number to which this registration
 applied.  If this value is negative, then this phaser has
 terminated, in which case registration has no effect.
Throws:
IllegalStateException - if attempting to register more
 than the maximum supported number of parties


"
25,Phaser,2,int arrive(),True,,"

arrive
public int arrive()
Arrives at this phaser, without waiting for others to arrive.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
25,Phaser,3,int arriveAndDeregister(),True,,"

arriveAndDeregister
public int arriveAndDeregister()
Arrives at this phaser and deregisters from it without waiting
 for others to arrive. Deregistration reduces the number of
 parties required to advance in future phases.  If this phaser
 has a parent, and deregistration causes this phaser to have
 zero parties, this phaser is also deregistered from its parent.

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or a negative value if terminated
Throws:
IllegalStateException - if not terminated and the number
 of registered or unarrived parties would become negative


"
25,Phaser,4,int arriveAndAwaitAdvance(),True,,"

arriveAndAwaitAdvance
public int arriveAndAwaitAdvance()
Arrives at this phaser and awaits others. Equivalent in effect
 to awaitAdvance(arrive()).  If you need to await with
 interruption or timeout, you can arrange this with an analogous
 construction using one of the other forms of the awaitAdvance method.  If instead you need to deregister upon
 arrival, use awaitAdvance(arriveAndDeregister()).

 It is a usage error for an unregistered party to invoke this
 method.  However, this error may result in an IllegalStateException only upon some subsequent operation on
 this phaser, if ever.

Returns:
the arrival phase number, or the (negative)
 current phase if terminated
Throws:
IllegalStateException - if not terminated and the number
 of unarrived parties would become negative


"
25,Phaser,5,int bulkRegister(int parties),True,,"

bulkRegister
public int bulkRegister(int parties)
Adds the given number of new unarrived parties to this phaser.
 If an ongoing invocation of onAdvance(int, int) is in progress,
 this method may await its completion before returning.  If this
 phaser has a parent, and the given number of parties is greater
 than zero, and this phaser previously had no registered
 parties, this child phaser is also registered with its parent.
 If this phaser is terminated, the attempt to register has no
 effect, and a negative value is returned.

Parameters:
parties - the number of additional parties required to
 advance to the next phase
Returns:
the arrival phase number to which this registration
 applied.  If this value is negative, then this phaser has
 terminated, in which case registration has no effect.
Throws:
IllegalStateException - if attempting to register more
 than the maximum supported number of parties
IllegalArgumentException - if parties < 0


"
26,PriorityBlockingQueue,1,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element into this priority queue.
 As the queue is unbounded, this method will never return false.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true (as specified by Queue.offer(E))
Throws:
ClassCastException - if the specified element cannot be compared
         with elements currently in the priority queue according to the
         priority queue's ordering
NullPointerException - if the specified element is null


"
26,PriorityBlockingQueue,2,E poll(),True,,"

poll
public E poll()
Description copied from interface: Queue
Retrieves and removes the head of this queue,
 or returns null if this queue is empty.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
26,PriorityBlockingQueue,3,E peek(),True,,"

peek
public E peek()
Description copied from interface: Queue
Retrieves, but does not remove, the head of this queue,
 or returns null if this queue is empty.

Specified by:
peek in interface Queue<E>
Returns:
the head of this queue, or null if this queue is empty


"
26,PriorityBlockingQueue,4,E take() throws InterruptedException,True,,"

take
public E take()
       throws InterruptedException
Description copied from interface: BlockingQueue
Retrieves and removes the head of this queue, waiting if necessary
 until an element becomes available.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
26,PriorityBlockingQueue,5,int size(),True,,"

size
public int size()
Description copied from interface: Collection
Returns the number of elements in this collection.  If this collection
 contains more than Integer.MAX_VALUE elements, returns
 Integer.MAX_VALUE.

Specified by:
size in interface Collection<E>
Specified by:
size in class AbstractCollection<E>
Returns:
the number of elements in this collection


"
27,RecursiveAction,1,void compute(),True,,"

compute
protected abstract void compute()
The main computation performed by this task.

"
27,RecursiveAction,2,void invokeAll(ForkJoinTask<?>... tasks),False,,NULL
27,RecursiveAction,3,void fork(),False,,NULL
27,RecursiveAction,4,void join(),False,,NULL
27,RecursiveAction,5,boolean tryUnfork(),False,,NULL
28,RecursiveTask,1,V compute(),True,,"

compute
protected abstract V compute()
The main computation performed by this task.

Returns:
the result of the computation


"
28,RecursiveTask,2,void completeExceptionally(Throwable ex),False,,NULL
28,RecursiveTask,3,ForkJoinTask<V> fork(),False,,NULL
28,RecursiveTask,4,V join(),False,,NULL
28,RecursiveTask,5,boolean tryUnfork(),False,,NULL
29,ScheduledThreadPoolExecutor,1,"ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)",True,,"

schedule
public ScheduledFuture<?> schedule(Runnable command,
                                   long delay,
                                   TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a one-shot action that becomes enabled
 after the given delay.

Specified by:
schedule in interface ScheduledExecutorService
Parameters:
command - the task to execute
delay - the time from now to delay execution
unit - the time unit of the delay parameter
Returns:
a ScheduledFuture representing pending completion of
         the task and whose get() method will return
         null upon completion
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null


"
29,ScheduledThreadPoolExecutor,2,"ScheduledFuture<?> schedule(Callable<V> callable, long delay, TimeUnit unit)",False,,NULL
29,ScheduledThreadPoolExecutor,3,"ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",True,,"

scheduleAtFixedRate
public ScheduledFuture<?> scheduleAtFixedRate(Runnable command,
                                              long initialDelay,
                                              long period,
                                              TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the given
 period; that is executions will commence after
 initialDelay then initialDelay+period, then
 initialDelay + 2 * period, and so on.
 If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.  If any execution of this task
 takes longer than its period, then subsequent executions
 may start late, but will not concurrently execute.

Specified by:
scheduleAtFixedRate in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
period - the period between successive executions
unit - the time unit of the initialDelay and period parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if period less than or equal to zero


"
29,ScheduledThreadPoolExecutor,4,"ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",True,,"

scheduleWithFixedDelay
public ScheduledFuture<?> scheduleWithFixedDelay(Runnable command,
                                                 long initialDelay,
                                                 long delay,
                                                 TimeUnit unit)
Description copied from interface: ScheduledExecutorService
Creates and executes a periodic action that becomes enabled first
 after the given initial delay, and subsequently with the
 given delay between the termination of one execution and the
 commencement of the next.  If any execution of the task
 encounters an exception, subsequent executions are suppressed.
 Otherwise, the task will only terminate via cancellation or
 termination of the executor.

Specified by:
scheduleWithFixedDelay in interface ScheduledExecutorService
Parameters:
command - the task to execute
initialDelay - the time to delay first execution
delay - the delay between the termination of one
 execution and the commencement of the next
unit - the time unit of the initialDelay and delay parameters
Returns:
a ScheduledFuture representing pending completion of
         the task, and whose get() method will throw an
         exception upon cancellation
Throws:
RejectedExecutionException - if the task cannot be
         scheduled for execution
NullPointerException - if command is null
IllegalArgumentException - if delay less than or equal to zero


"
29,ScheduledThreadPoolExecutor,5,void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value),True,,"

setContinueExistingPeriodicTasksAfterShutdownPolicy
public void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean value)
Sets the policy on whether to continue executing existing
 periodic tasks even when this executor has been shutdown.
 In this case, these tasks will only terminate upon
 shutdownNow or after setting the policy to
 false when already shutdown.
 This value is by default false.

Parameters:
value - if true, continue after shutdown, else don't
See Also:
getContinueExistingPeriodicTasksAfterShutdownPolicy()


"
30,Semaphore,1,void acquire(),True,,"

acquire
public void acquire()
             throws InterruptedException
Acquires a permit from this semaphore, blocking until one is
 available, or the thread is interrupted.

 Acquires a permit, if one is available and returns immediately,
 reducing the number of available permits by one.

 If no permit is available then the current thread becomes
 disabled for thread scheduling purposes and lies dormant until
 one of two things happens:
 
Some other thread invokes the release() method for this
 semaphore and the current thread is next to be assigned a permit; or
 Some other thread interrupts
 the current thread.
 
If the current thread:
 
has its interrupted status set on entry to this method; or
 is interrupted while waiting
 for a permit,
 
 then InterruptedException is thrown and the current thread's
 interrupted status is cleared.

Throws:
InterruptedException - if the current thread is interrupted


"
30,Semaphore,2,void release(),True,,"

release
public void release()
Releases a permit, returning it to the semaphore.

 Releases a permit, increasing the number of available permits by
 one.  If any threads are trying to acquire a permit, then one is
 selected and given the permit that was just released.  That thread
 is (re)enabled for thread scheduling purposes.

 There is no requirement that a thread that releases a permit must
 have acquired that permit by calling acquire().
 Correct usage of a semaphore is established by programming convention
 in the application.

"
30,Semaphore,3,int availablePermits(),True,,"

availablePermits
public int availablePermits()
Returns the current number of permits available in this semaphore.

 This method is typically used for debugging and testing purposes.

Returns:
the number of permits available in this semaphore


"
30,Semaphore,4,int getQueueLength(),True,,"

getQueueLength
public final int getQueueLength()
Returns an estimate of the number of threads waiting to acquire.
 The value is only an estimate because the number of threads may
 change dynamically while this method traverses internal data
 structures.  This method is designed for use in monitoring of the
 system state, not for synchronization control.

Returns:
the estimated number of threads waiting for this lock


"
30,Semaphore,5,boolean tryAcquire(),True,,"

tryAcquire
public boolean tryAcquire()
Acquires a permit from this semaphore, only if one is available at the
 time of invocation.

 Acquires a permit, if one is available and returns immediately,
 with the value true,
 reducing the number of available permits by one.

 If no permit is available then this method will return
 immediately with the value false.

 Even when this semaphore has been set to use a
 fair ordering policy, a call to tryAcquire() will
 immediately acquire a permit if one is available, whether or not
 other threads are currently waiting.
 This ""barging"" behavior can be useful in certain
 circumstances, even though it breaks fairness. If you want to honor
 the fairness setting, then use
 tryAcquire(0, TimeUnit.SECONDS) 
 which is almost equivalent (it also detects interruption).

Returns:
true if a permit was acquired and false
         otherwise


"
31,SynchronousQueue,1,void put(E e),True,,"

put
public void put(E e)
         throws InterruptedException
Adds the specified element to this queue, waiting if necessary for
 another thread to receive it.

Specified by:
put in interface BlockingQueue<E>
Parameters:
e - the element to add
Throws:
InterruptedException - if interrupted while waiting
NullPointerException - if the specified element is null


"
31,SynchronousQueue,2,E take(),True,,"

take
public E take()
       throws InterruptedException
Retrieves and removes the head of this queue, waiting if necessary
 for another thread to insert it.

Specified by:
take in interface BlockingQueue<E>
Returns:
the head of this queue
Throws:
InterruptedException - if interrupted while waiting


"
31,SynchronousQueue,3,boolean offer(E e),True,,"

offer
public boolean offer(E e)
Inserts the specified element into this queue, if another thread is
 waiting to receive it.

Specified by:
offer in interface BlockingQueue<E>
Specified by:
offer in interface Queue<E>
Parameters:
e - the element to add
Returns:
true if the element was added to this queue, else
         false
Throws:
NullPointerException - if the specified element is null


"
31,SynchronousQueue,4,E poll(),True,,"

poll
public E poll()
Retrieves and removes the head of this queue, if another thread
 is currently making an element available.

Specified by:
poll in interface Queue<E>
Returns:
the head of this queue, or null if no
         element is available


"
31,SynchronousQueue,5,int remainingCapacity(),True,,"

remainingCapacity
public int remainingCapacity()
Always returns zero.
 A SynchronousQueue has no internal capacity.

Specified by:
remainingCapacity in interface BlockingQueue<E>
Returns:
zero


"
33,ThreadPoolExecutor,1,void execute(Runnable command),True,,"

execute
public void execute(Runnable command)
Executes the given task sometime in the future.  The task
 may execute in a new thread or in an existing pooled thread.

 If the task cannot be submitted for execution, either because this
 executor has been shutdown or because its capacity has been reached,
 the task is handled by the current RejectedExecutionHandler.

Parameters:
command - the task to execute
Throws:
RejectedExecutionException - at discretion of
         RejectedExecutionHandler, if the task
         cannot be accepted for execution
NullPointerException - if command is null


"
33,ThreadPoolExecutor,2,List<Runnable> shutdownNow(),True,,"

shutdownNow
public List<Runnable> shutdownNow()
Attempts to stop all actively executing tasks, halts the
 processing of waiting tasks, and returns a list of the tasks
 that were awaiting execution. These tasks are drained (removed)
 from the task queue upon return from this method.

 This method does not wait for actively executing tasks to
 terminate.  Use awaitTermination to
 do that.

 There are no guarantees beyond best-effort attempts to stop
 processing actively executing tasks.  This implementation
 cancels tasks via Thread.interrupt(), so any task that
 fails to respond to interrupts may never terminate.

Returns:
list of tasks that never commenced execution
Throws:
SecurityException - if a security manager exists and
         shutting down this ExecutorService may manipulate
         threads that the caller is not permitted to modify
         because it does not hold RuntimePermission(""modifyThread""),
         or the security manager's checkAccess method
         denies access.


"
33,ThreadPoolExecutor,3,"boolean awaitTermination(long timeout, TimeUnit unit)",True,,"

awaitTermination
public boolean awaitTermination(long timeout,
                                TimeUnit unit)
                         throws InterruptedException
Description copied from interface: ExecutorService
Blocks until all tasks have completed execution after a shutdown
 request, or the timeout occurs, or the current thread is
 interrupted, whichever happens first.

Parameters:
timeout - the maximum time to wait
unit - the time unit of the timeout argument
Returns:
true if this executor terminated and
         false if the timeout elapsed before termination
Throws:
InterruptedException - if interrupted while waiting


"
33,ThreadPoolExecutor,4,int getActiveCount(),True,,"

getActiveCount
public int getActiveCount()
Returns the approximate number of threads that are actively
 executing tasks.

Returns:
the number of threads


"
33,ThreadPoolExecutor,5,boolean isTerminated(),True,,"

isTerminated
public boolean isTerminated()
Description copied from interface: ExecutorService
Returns true if all tasks have completed following shut down.
 Note that isTerminated is never true unless
 either shutdown or shutdownNow was called first.

Returns:
true if all tasks have completed following shut down


"
34,ThreadPoolExecutor.AbortPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Always throws RejectedExecutionException.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task
Throws:
RejectedExecutionException - always


"
34,ThreadPoolExecutor.AbortPolicy,2,void onShutdown(),False,,NULL
34,ThreadPoolExecutor.AbortPolicy,3,void terminated(),False,,NULL
34,ThreadPoolExecutor.AbortPolicy,4,"void beforeExecute(Thread t, Runnable r)",False,,NULL
34,ThreadPoolExecutor.AbortPolicy,5,"void afterExecute(Runnable r, Throwable t)",False,,NULL
35,ThreadPoolExecutor.CallerRunsPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
35,ThreadPoolExecutor.CallerRunsPolicy,2,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
35,ThreadPoolExecutor.CallerRunsPolicy,3,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
35,ThreadPoolExecutor.CallerRunsPolicy,4,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
35,ThreadPoolExecutor.CallerRunsPolicy,5,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Executes task r in the caller's thread, unless the executor
 has been shut down, in which case the task is discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
36,ThreadPoolExecutor.DiscardOldestPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Obtains and ignores the next task that the executor
 would otherwise execute, if one is immediately available,
 and then retries execution of task r, unless the executor
 is shut down, in which case task r is instead discarded.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
36,ThreadPoolExecutor.DiscardOldestPolicy,2,String toString(),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,3,boolean equals(Object obj),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,4,int hashCode(),False,,NULL
36,ThreadPoolExecutor.DiscardOldestPolicy,5,DiscardOldestPolicy clone(),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor executor)",True,,"

rejectedExecution
public void rejectedExecution(Runnable r,
                              ThreadPoolExecutor e)
Does nothing, which has the effect of discarding task r.

Specified by:
rejectedExecution in interface RejectedExecutionHandler
Parameters:
r - the runnable task requested to be executed
e - the executor attempting to execute this task


"
37,ThreadPoolExecutor.DiscardPolicy,2,void discardPolicy(),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,3,void onRejectedTask(Runnable task),False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,4,"void handleRejectedTask(Runnable task, ThreadPoolExecutor executor)",False,,NULL
37,ThreadPoolExecutor.DiscardPolicy,5,void discardRejectedTask(Runnable task),False,,NULL
