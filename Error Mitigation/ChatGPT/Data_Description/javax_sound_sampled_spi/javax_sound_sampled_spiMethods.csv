ClassName,Method,Return Type,Description,Full Description
AudioFileReader,getAudioFileFormat(File file),abstract AudioFileFormat,Obtains the audio file format of the File provided.,"

getAudioFileFormat
public abstract AudioFileFormat getAudioFileFormat(File file)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains the audio file format of the File provided.  The File must
 point to valid audio file data.

Parameters:
file - the File from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the audio file format
Throws:
UnsupportedAudioFileException - if the File does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioFileReader,getAudioFileFormat(InputStream stream),abstract AudioFileFormat,Obtains the audio file format of the input stream provided.,"

getAudioFileFormat
public abstract AudioFileFormat getAudioFileFormat(InputStream stream)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains the audio file format of the input stream provided.  The stream must
 point to valid audio file data.  In general, audio file readers may
 need to read some data from the stream before determining whether they
 support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they
 support the stream, and, if not, reset the stream's read pointer to its original
 position.  If the input stream does not support this, this method may fail
 with an IOException.

Parameters:
stream - the input stream from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the audio file format
Throws:
UnsupportedAudioFileException - if the stream does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
AudioFileReader,getAudioFileFormat(URL url),abstract AudioFileFormat,Obtains the audio file format of the URL provided.,"

getAudioFileFormat
public abstract AudioFileFormat getAudioFileFormat(URL url)
                                            throws UnsupportedAudioFileException,
                                                   IOException
Obtains the audio file format of the URL provided.  The URL must
 point to valid audio file data.

Parameters:
url - the URL from which file format information should be
 extracted
Returns:
an AudioFileFormat object describing the audio file format
Throws:
UnsupportedAudioFileException - if the URL does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioFileReader,getAudioInputStream(File file),abstract AudioInputStream,Obtains an audio input stream from the File provided.,"

getAudioInputStream
public abstract AudioInputStream getAudioInputStream(File file)
                                              throws UnsupportedAudioFileException,
                                                     IOException
Obtains an audio input stream from the File provided.  The File must
 point to valid audio file data.

Parameters:
file - the File for which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data pointed
 to by the File
Throws:
UnsupportedAudioFileException - if the File does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioFileReader,getAudioInputStream(InputStream stream),abstract AudioInputStream,Obtains an audio input stream from the input stream provided.,"

getAudioInputStream
public abstract AudioInputStream getAudioInputStream(InputStream stream)
                                              throws UnsupportedAudioFileException,
                                                     IOException
Obtains an audio input stream from the input stream provided.  The stream must
 point to valid audio file data.  In general, audio file readers may
 need to read some data from the stream before determining whether they
 support it.  These parsers must
 be able to mark the stream, read enough data to determine whether they
 support the stream, and, if not, reset the stream's read pointer to its original
 position.  If the input stream does not support this, this method may fail
 with an IOException.

Parameters:
stream - the input stream from which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data contained
 in the input stream.
Throws:
UnsupportedAudioFileException - if the stream does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs
See Also:
InputStream.markSupported(), 
InputStream.mark(int)


"
AudioFileReader,getAudioInputStream(URL url),abstract AudioInputStream,Obtains an audio input stream from the URL provided.,"

getAudioInputStream
public abstract AudioInputStream getAudioInputStream(URL url)
                                              throws UnsupportedAudioFileException,
                                                     IOException
Obtains an audio input stream from the URL provided.  The URL must
 point to valid audio file data.

Parameters:
url - the URL for which the AudioInputStream should be
 constructed
Returns:
an AudioInputStream object based on the audio file data pointed
 to by the URL
Throws:
UnsupportedAudioFileException - if the URL does not point to valid audio
 file data recognized by the system
IOException - if an I/O exception occurs


"
AudioFileWriter,getAudioFileTypes(),abstract AudioFileFormat.Type[],Obtains the file types for which file writing support is provided by this audio file writer.,"

getAudioFileTypes
public abstract AudioFileFormat.Type[] getAudioFileTypes()
Obtains the file types for which file writing support is provided by this
 audio file writer.

Returns:
array of file types.  If no file types are supported,
 an array of length 0 is returned.


"
AudioFileWriter,getAudioFileTypes(AudioInputStream stream),abstract AudioFileFormat.Type[],Obtains the file types that this audio file writer can write from the audio input stream specified.,"

getAudioFileTypes
public abstract AudioFileFormat.Type[] getAudioFileTypes(AudioInputStream stream)
Obtains the file types that this audio file writer can write from the
 audio input stream specified.

Parameters:
stream - the audio input stream for which audio file type support
 is queried
Returns:
array of file types.  If no file types are supported,
 an array of length 0 is returned.


"
AudioFileWriter,isFileTypeSupported(AudioFileFormat.Type fileType),boolean,Indicates whether file writing support for the specified file type is provided by this audio file writer.,"

isFileTypeSupported
public boolean isFileTypeSupported(AudioFileFormat.Type fileType)
Indicates whether file writing support for the specified file type is provided
 by this audio file writer.

Parameters:
fileType - the file type for which write capabilities are queried
Returns:
true if the file type is supported,
 otherwise false


"
AudioFileWriter,"isFileTypeSupported(AudioFileFormat.Type fileType, AudioInputStream stream)",boolean,Indicates whether an audio file of the type specified can be written from the audio input stream indicated.,"

isFileTypeSupported
public boolean isFileTypeSupported(AudioFileFormat.Type fileType,
                                   AudioInputStream stream)
Indicates whether an audio file of the type specified can be written
 from the audio input stream indicated.

Parameters:
fileType - file type for which write capabilities are queried
stream - for which file writing support is queried
Returns:
true if the file type is supported for this audio input stream,
 otherwise false


"
AudioFileWriter,"write(AudioInputStream stream, AudioFileFormat.Type fileType, File out)",abstract int,Writes a stream of bytes representing an audio file of the file format indicated to the external file provided.,"

write
public abstract int write(AudioInputStream stream,
                          AudioFileFormat.Type fileType,
                          File out)
                   throws IOException
Writes a stream of bytes representing an audio file of the file format
 indicated to the external file provided.

Parameters:
stream - the audio input stream containing audio data to be
 written to the file
fileType - file type to be written to the file
out - external file to which the file data should be written
Returns:
the number of bytes written to the file
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file format is not supported by
 the system
See Also:
isFileTypeSupported(javax.sound.sampled.AudioFileFormat.Type), 
getAudioFileTypes()


"
AudioFileWriter,"write(AudioInputStream stream, AudioFileFormat.Type fileType, OutputStream out)",abstract int,Writes a stream of bytes representing an audio file of the file type indicated to the output stream provided.,"

write
public abstract int write(AudioInputStream stream,
                          AudioFileFormat.Type fileType,
                          OutputStream out)
                   throws IOException
Writes a stream of bytes representing an audio file of the file type
 indicated to the output stream provided.  Some file types require that
 the length be written into the file header, and cannot be written from
 start to finish unless the length is known in advance.  An attempt
 to write such a file type will fail with an IOException if the length in
 the audio file format is
 AudioSystem.NOT_SPECIFIED.

Parameters:
stream - the audio input stream containing audio data to be
 written to the output stream
fileType - file type to be written to the output stream
out - stream to which the file data should be written
Returns:
the number of bytes written to the output stream
Throws:
IOException - if an I/O exception occurs
IllegalArgumentException - if the file type is not supported by
 the system
See Also:
isFileTypeSupported(AudioFileFormat.Type, AudioInputStream), 
getAudioFileTypes()


"
FormatConversionProvider,"getAudioInputStream(AudioFormat.Encoding targetEncoding, AudioInputStream sourceStream)",abstract AudioInputStream,Obtains an audio input stream with the specified encoding from the given audio input stream.,"

getAudioInputStream
public abstract AudioInputStream getAudioInputStream(AudioFormat.Encoding targetEncoding,
                                                     AudioInputStream sourceStream)
Obtains an audio input stream with the specified encoding from the given audio
 input stream.

Parameters:
targetEncoding - desired encoding of the stream after processing
sourceStream - stream from which data to be processed should be read
Returns:
stream from which processed data with the specified target encoding may be read
Throws:
IllegalArgumentException - if the format combination supplied is
 not supported.


"
FormatConversionProvider,"getAudioInputStream(AudioFormat targetFormat, AudioInputStream sourceStream)",abstract AudioInputStream,Obtains an audio input stream with the specified format from the given audio input stream.,"

getAudioInputStream
public abstract AudioInputStream getAudioInputStream(AudioFormat targetFormat,
                                                     AudioInputStream sourceStream)
Obtains an audio input stream with the specified format from the given audio
 input stream.

Parameters:
targetFormat - desired data format of the stream after processing
sourceStream - stream from which data to be processed should be read
Returns:
stream from which processed data with the specified format may be read
Throws:
IllegalArgumentException - if the format combination supplied is
 not supported.


"
FormatConversionProvider,getSourceEncodings(),abstract AudioFormat.Encoding[],Obtains the set of source format encodings from which format conversion services are provided by this provider.,"

getSourceEncodings
public abstract AudioFormat.Encoding[] getSourceEncodings()
Obtains the set of source format encodings from which format
 conversion services are provided by this provider.

Returns:
array of source format encodings. If for some reason provider
 does not provide any conversion services, an array of length 0 is
 returned.


"
FormatConversionProvider,getTargetEncodings(),abstract AudioFormat.Encoding[],Obtains the set of target format encodings to which format conversion services are provided by this provider.,"

getTargetEncodings
public abstract AudioFormat.Encoding[] getTargetEncodings()
Obtains the set of target format encodings to which format
 conversion services are provided by this provider.

Returns:
array of target format encodings. If for some reason provider
 does not provide any conversion services, an array of length 0 is
 returned.


"
FormatConversionProvider,getTargetEncodings(AudioFormat sourceFormat),abstract AudioFormat.Encoding[],Obtains the set of target format encodings supported by the format converter given a particular source format.,"

getTargetEncodings
public abstract AudioFormat.Encoding[] getTargetEncodings(AudioFormat sourceFormat)
Obtains the set of target format encodings supported by the format converter
 given a particular source format.
 If no target format encodings are supported for this source format,
 an array of length 0 is returned.

Parameters:
sourceFormat - format of the incoming data
Returns:
array of supported target format encodings.


"
FormatConversionProvider,"getTargetFormats(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)",abstract AudioFormat[],"Obtains the set of target formats with the encoding specified supported by the format converter If no target formats with the specified encoding are supported for this source format, an array of length 0 is returned.","

getTargetFormats
public abstract AudioFormat[] getTargetFormats(AudioFormat.Encoding targetEncoding,
                                               AudioFormat sourceFormat)
Obtains the set of target formats with the encoding specified
 supported by the format converter
 If no target formats with the specified encoding are supported
 for this source format, an array of length 0 is returned.

Parameters:
targetEncoding - desired encoding of the stream after processing
sourceFormat - format of the incoming data
Returns:
array of supported target formats.


"
FormatConversionProvider,"isConversionSupported(AudioFormat.Encoding targetEncoding, AudioFormat sourceFormat)",boolean,Indicates whether the format converter supports conversion to a particular encoding from a particular format.,"

isConversionSupported
public boolean isConversionSupported(AudioFormat.Encoding targetEncoding,
                                     AudioFormat sourceFormat)
Indicates whether the format converter supports conversion to a particular encoding
 from a particular format.

Parameters:
targetEncoding - desired encoding of the outgoing data
sourceFormat - format of the incoming data
Returns:
true if the conversion is supported, otherwise false


"
FormatConversionProvider,"isConversionSupported(AudioFormat targetFormat, AudioFormat sourceFormat)",boolean,Indicates whether the format converter supports conversion to one particular format from another.,"

isConversionSupported
public boolean isConversionSupported(AudioFormat targetFormat,
                                     AudioFormat sourceFormat)
Indicates whether the format converter supports conversion to one
 particular format from another.

Parameters:
targetFormat - desired format of outgoing data
sourceFormat - format of the incoming data
Returns:
true if the conversion is supported, otherwise false


"
FormatConversionProvider,isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding),boolean,Indicates whether the format converter supports conversion from the specified source format encoding.,"

isSourceEncodingSupported
public boolean isSourceEncodingSupported(AudioFormat.Encoding sourceEncoding)
Indicates whether the format converter supports conversion from the
 specified source format encoding.

Parameters:
sourceEncoding - the source format encoding for which support is queried
Returns:
true if the encoding is supported, otherwise false


"
FormatConversionProvider,isTargetEncodingSupported(AudioFormat.Encoding targetEncoding),boolean,Indicates whether the format converter supports conversion to the specified target format encoding.,"

isTargetEncodingSupported
public boolean isTargetEncodingSupported(AudioFormat.Encoding targetEncoding)
Indicates whether the format converter supports conversion to the
 specified target format encoding.

Parameters:
targetEncoding - the target format encoding for which support is queried
Returns:
true if the encoding is supported, otherwise false


"
MixerProvider,getMixer(Mixer.Info info),abstract Mixer,Obtains an instance of the mixer represented by the info object.,"

getMixer
public abstract Mixer getMixer(Mixer.Info info)
Obtains an instance of the mixer represented by the info object.
 
 The full set of the mixer info objects that represent the mixers
 supported by this MixerProvider may be obtained
 through the getMixerInfo method.
 Use the isMixerSupported method to test whether
 this MixerProvider supports a particular mixer.

Parameters:
info - an info object that describes the desired mixer
Returns:
mixer instance
Throws:
IllegalArgumentException - if the info object specified does not
     match the info object for a mixer supported by this MixerProvider.
See Also:
getMixerInfo(), 
isMixerSupported(Mixer.Info)


"
MixerProvider,getMixerInfo(),abstract Mixer.Info[],Obtains the set of info objects representing the mixer or mixers provided by this MixerProvider.,"

getMixerInfo
public abstract Mixer.Info[] getMixerInfo()
Obtains the set of info objects representing the mixer
 or mixers provided by this MixerProvider.
 
 The isMixerSupported method returns true
 for all the info objects returned by this method.
 The corresponding mixer instances for the info objects
 are returned by the getMixer method.

Returns:
a set of mixer info objects
See Also:
getMixer(Mixer.Info), 
isMixerSupported(Mixer.Info)


"
MixerProvider,isMixerSupported(Mixer.Info info),boolean,Indicates whether the mixer provider supports the mixer represented by the specified mixer info object.,"

isMixerSupported
public boolean isMixerSupported(Mixer.Info info)
Indicates whether the mixer provider supports the mixer represented by
 the specified mixer info object.
 
 The full set of mixer info objects that represent the mixers supported
 by this MixerProvider may be obtained
 through the getMixerInfo method.

Parameters:
info - an info object that describes the mixer for which support is queried
Returns:
true if the specified mixer is supported,
     otherwise false
See Also:
getMixerInfo()


"
