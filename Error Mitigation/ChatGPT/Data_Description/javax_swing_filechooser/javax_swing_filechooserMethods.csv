ClassName,Method,Return Type,Description,Full Description
FileFilter,accept(File f),abstract boolean,Whether the given file is accepted by this filter.,"

accept
public abstract boolean accept(File f)
Whether the given file is accepted by this filter.

"
FileFilter,getDescription(),abstract String,The description of this filter.,"

getDescription
public abstract String getDescription()
The description of this filter. For example: ""JPG and GIF Images""

See Also:
FileView.getName(java.io.File)


"
FileNameExtensionFilter,accept(File f),boolean,"Tests the specified file, returning true if the file is accepted, false otherwise.","

accept
public boolean accept(File f)
Tests the specified file, returning true if the file is
 accepted, false otherwise. True is returned if the extension
 matches one of the file name extensions of this FileFilter, or the file is a directory.

Specified by:
accept in class FileFilter
Parameters:
f - the File to test
Returns:
true if the file is to be accepted, false otherwise


"
FileNameExtensionFilter,getDescription(),String,The description of this filter.,"

getDescription
public String getDescription()
The description of this filter. For example: ""JPG and GIF Images.""

Specified by:
getDescription in class FileFilter
Returns:
the description of this filter
See Also:
FileView.getName(java.io.File)


"
FileNameExtensionFilter,getExtensions(),String[],Returns the set of file name extensions files are tested against.,"

getExtensions
public String[] getExtensions()
Returns the set of file name extensions files are tested against.

Returns:
the set of file name extensions files are tested against


"
FileNameExtensionFilter,toString(),String,Returns a string representation of the FileNameExtensionFilter.,"

toString
public String toString()
Returns a string representation of the FileNameExtensionFilter.
 This method is intended to be used for debugging purposes,
 and the content and format of the returned string may vary
 between implementations.

Overrides:
toString in class Object
Returns:
a string representation of this FileNameExtensionFilter


"
FileSystemView,"createFileObject(File dir, String filename)",File,Returns a File object constructed in dir from the given filename.,"

createFileObject
public File createFileObject(File dir,
                             String filename)
Returns a File object constructed in dir from the given filename.

"
FileSystemView,createFileObject(String path),File,Returns a File object constructed from the given path string.,"

createFileObject
public File createFileObject(String path)
Returns a File object constructed from the given path string.

"
FileSystemView,createFileSystemRoot(File f),protected File,Creates a new File object for f with correct behavior for a file system root directory.,"

createFileSystemRoot
protected File createFileSystemRoot(File f)
Creates a new File object for f with correct
 behavior for a file system root directory.

Parameters:
f - a File object representing a file system root
          directory, for example ""/"" on Unix or ""C:\"" on Windows.
Returns:
a new File object
Since:
1.4


"
FileSystemView,createNewFolder(File containingDir),abstract File,Creates a new folder with a default folder name.,"

createNewFolder
public abstract File createNewFolder(File containingDir)
                              throws IOException
Creates a new folder with a default folder name.

Throws:
IOException


"
FileSystemView,"getChild(File parent, String fileName)",File,NULL,"

getChild
public File getChild(File parent,
                     String fileName)

Parameters:
parent - a File object representing a directory or special folder
fileName - a name of a file or folder which exists in parent
Returns:
a File object. This is normally constructed with new
 File(parent, fileName) except when parent and child are both
 special folders, in which case the File is a wrapper containing
 a ShellFolder object.
Since:
1.4


"
FileSystemView,getDefaultDirectory(),File,Return the user's default starting directory for the file chooser.,"

getDefaultDirectory
public File getDefaultDirectory()
Return the user's default starting directory for the file chooser.

Returns:
a File object representing the default
         starting folder
Since:
1.4


"
FileSystemView,"getFiles(File dir, boolean useFileHiding)",File[],Gets the list of shown (i.e.,"

getFiles
public File[] getFiles(File dir,
                       boolean useFileHiding)
Gets the list of shown (i.e. not hidden) files.

"
FileSystemView,getFileSystemView(),static FileSystemView,NULL,"

getFileSystemView
public static FileSystemView getFileSystemView()

"
FileSystemView,getHomeDirectory(),File,NULL,"

getHomeDirectory
public File getHomeDirectory()

"
FileSystemView,getParentDirectory(File dir),File,Returns the parent directory of dir.,"

getParentDirectory
public File getParentDirectory(File dir)
Returns the parent directory of dir.

Parameters:
dir - the File being queried
Returns:
the parent directory of dir, or
   null if dir is null


"
FileSystemView,getRoots(),File[],Returns all root partitions on this system.,"

getRoots
public File[] getRoots()
Returns all root partitions on this system. For example, on
 Windows, this would be the ""Desktop"" folder, while on DOS this
 would be the A: through Z: drives.

"
FileSystemView,getSystemDisplayName(File f),String,"Name of a file, directory, or folder as it would be displayed in a system file browser.","

getSystemDisplayName
public String getSystemDisplayName(File f)
Name of a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the ""M:\"" directory
 displays as ""CD-ROM (M:)""

 The default implementation gets information from the ShellFolder class.

Parameters:
f - a File object
Returns:
the file name as it would be displayed by a native file chooser
Since:
1.4
See Also:
JFileChooser.getName(java.io.File)


"
FileSystemView,getSystemIcon(File f),Icon,"Icon for a file, directory, or folder as it would be displayed in a system file browser.","

getSystemIcon
public Icon getSystemIcon(File f)
Icon for a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the ""M:\"" directory
 displays a CD-ROM icon.

 The default implementation gets information from the ShellFolder class.

Parameters:
f - a File object
Returns:
an icon as it would be displayed by a native file chooser
Since:
1.4
See Also:
JFileChooser.getIcon(java.io.File)


"
FileSystemView,getSystemTypeDescription(File f),String,"Type description for a file, directory, or folder as it would be displayed in a system file browser.","

getSystemTypeDescription
public String getSystemTypeDescription(File f)
Type description for a file, directory, or folder as it would be displayed in
 a system file browser. Example from Windows: the ""Desktop"" folder
 is described as ""Desktop"".

 Override for platforms with native ShellFolder implementations.

Parameters:
f - a File object
Returns:
the file type description as it would be displayed by a native file chooser
 or null if no native information is available.
Since:
1.4
See Also:
JFileChooser.getTypeDescription(java.io.File)


"
FileSystemView,isComputerNode(File dir),boolean,"Used by UI classes to decide whether to display a special icon for a computer node, e.g.","

isComputerNode
public boolean isComputerNode(File dir)
Used by UI classes to decide whether to display a special icon
 for a computer node, e.g. ""My Computer"" or a network server.

 The default implementation has no way of knowing, so always returns false.

Parameters:
dir - a directory
Returns:
false always
Since:
1.4


"
FileSystemView,isDrive(File dir),boolean,"Used by UI classes to decide whether to display a special icon for drives or partitions, e.g.","

isDrive
public boolean isDrive(File dir)
Used by UI classes to decide whether to display a special icon
 for drives or partitions, e.g. a ""hard disk"" icon.

 The default implementation has no way of knowing, so always returns false.

Parameters:
dir - a directory
Returns:
false always
Since:
1.4


"
FileSystemView,isFileSystem(File f),boolean,"Checks if f represents a real directory or file as opposed to a special folder such as ""Desktop"".","

isFileSystem
public boolean isFileSystem(File f)
Checks if f represents a real directory or file as opposed to a
 special folder such as ""Desktop"". Used by UI classes to decide if
 a folder is selectable when doing directory choosing.

Parameters:
f - a File object
Returns:
true if f is a real file or directory.
Since:
1.4


"
FileSystemView,isFileSystemRoot(File dir),boolean,"Is dir the root of a tree in the file system, such as a drive or partition.","

isFileSystemRoot
public boolean isFileSystemRoot(File dir)
Is dir the root of a tree in the file system, such as a drive
 or partition. Example: Returns true for ""C:\"" on Windows 98.

Parameters:
dir - a File object representing a directory
Returns:
true if f is a root of a filesystem
Since:
1.4
See Also:
isRoot(java.io.File)


"
FileSystemView,isFloppyDrive(File dir),boolean,Used by UI classes to decide whether to display a special icon for a floppy disk.,"

isFloppyDrive
public boolean isFloppyDrive(File dir)
Used by UI classes to decide whether to display a special icon
 for a floppy disk. Implies isDrive(dir).

 The default implementation has no way of knowing, so always returns false.

Parameters:
dir - a directory
Returns:
false always
Since:
1.4


"
FileSystemView,isHiddenFile(File f),boolean,Returns whether a file is hidden or not.,"

isHiddenFile
public boolean isHiddenFile(File f)
Returns whether a file is hidden or not.

"
FileSystemView,"isParent(File folder, File file)",boolean,"On Windows, a file can appear in multiple folders, other than its parent directory in the filesystem.","

isParent
public boolean isParent(File folder,
                        File file)
On Windows, a file can appear in multiple folders, other than its
 parent directory in the filesystem. Folder could for example be the
 ""Desktop"" folder which is not the same as file.getParentFile().

Parameters:
folder - a File object representing a directory or special folder
file - a File object
Returns:
true if folder is a directory or special folder and contains file.
Since:
1.4


"
FileSystemView,isRoot(File f),boolean,Determines if the given file is a root in the navigable tree(s).,"

isRoot
public boolean isRoot(File f)
Determines if the given file is a root in the navigable tree(s).
 Examples: Windows 98 has one root, the Desktop folder. DOS has one root
 per drive letter, C:\, D:\, etc. Unix has one root,
 the ""/"" directory.

 The default implementation gets information from the ShellFolder class.

Parameters:
f - a File object representing a directory
Returns:
true if f is a root in the navigable tree.
See Also:
isFileSystemRoot(java.io.File)


"
FileSystemView,isTraversable(File f),Boolean,Returns true if the file (directory) can be visited.,"

isTraversable
public Boolean isTraversable(File f)
Returns true if the file (directory) can be visited.
 Returns false if the directory cannot be traversed.

Parameters:
f - the File
Returns:
true if the file/directory can be traversed, otherwise false
Since:
1.4
See Also:
JFileChooser.isTraversable(java.io.File), 
FileView.isTraversable(java.io.File)


"
FileView,getDescription(File f),String,A human readable description of the file.,"

getDescription
public String getDescription(File f)
A human readable description of the file. For example,
 a file named jag.jpg might have a description that read:
 ""A JPEG image file of James Gosling's face"".

"
FileView,getIcon(File f),Icon,The icon that represents this file in the JFileChooser.,"

getIcon
public Icon getIcon(File f)
The icon that represents this file in the JFileChooser.

"
FileView,getName(File f),String,The name of the file.,"

getName
public String getName(File f)
The name of the file. Normally this would be simply
 f.getName().

"
FileView,getTypeDescription(File f),String,A human readable description of the type of the file.,"

getTypeDescription
public String getTypeDescription(File f)
A human readable description of the type of the file. For
 example, a jpg file might have a type description of:
 ""A JPEG Compressed Image File""

"
FileView,isTraversable(File f),Boolean,Whether the directory is traversable or not.,"

isTraversable
public Boolean isTraversable(File f)
Whether the directory is traversable or not. This might be
 useful, for example, if you want a directory to represent
 a compound document and don't want the user to descend into it.

"
