ClassName,Method,Return Type,Description,Full Description
TransformService,getAlgorithm(),String,Returns the URI of the algorithm supported by this TransformService.,"

getAlgorithm
public final String getAlgorithm()
Returns the URI of the algorithm supported by this
 TransformService.

Specified by:
getAlgorithm in interface AlgorithmMethod
Returns:
the algorithm URI


"
TransformService,"getInstance(String algorithm, String mechanismType)",static TransformService,Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM).,"

getInstance
public static TransformService getInstance(String algorithm,
                                           String mechanismType)
                                    throws NoSuchAlgorithmException
Returns a TransformService that supports the specified
 algorithm URI (ex: Transform.XPATH2) and mechanism type
 (ex: DOM).

 This method uses the standard JCA provider lookup mechanism to
 locate and instantiate a TransformService implementation
 of the desired algorithm and MechanismType service
 attribute. It traverses the list of registered security
 Providers, starting with the most preferred
 Provider. A new TransformService object
 from the first Provider that supports the specified
 algorithm and mechanism type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the URI of the algorithm
mechanismType - the type of the XML processing mechanism and
   representation
Returns:
a new TransformService
Throws:
NullPointerException - if algorithm or
   mechanismType is  null
NoSuchAlgorithmException - if no Provider supports a
   TransformService implementation for the specified
   algorithm and mechanism type
See Also:
Provider


"
TransformService,"getInstance(String algorithm, String mechanismType, Provider provider)",static TransformService,Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM) as supplied by the specified provider.,"

getInstance
public static TransformService getInstance(String algorithm,
                                           String mechanismType,
                                           Provider provider)
                                    throws NoSuchAlgorithmException
Returns a TransformService that supports the specified
 algorithm URI (ex: Transform.XPATH2) and mechanism type
 (ex: DOM) as supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the
 provider list.

Parameters:
algorithm - the URI of the algorithm
mechanismType - the type of the XML processing mechanism and
   representation
provider - the Provider object
Returns:
a new TransformService
Throws:
NullPointerException - if provider,
   algorithm, or mechanismType is
   null
NoSuchAlgorithmException - if a TransformService
   implementation for the specified algorithm and mechanism type is not
   available from the specified Provider object
See Also:
Provider


"
TransformService,"getInstance(String algorithm, String mechanismType, String provider)",static TransformService,Returns a TransformService that supports the specified algorithm URI (ex: Transform.XPATH2) and mechanism type (ex: DOM) as supplied by the specified provider.,"

getInstance
public static TransformService getInstance(String algorithm,
                                           String mechanismType,
                                           String provider)
                                    throws NoSuchAlgorithmException,
                                           NoSuchProviderException
Returns a TransformService that supports the specified
 algorithm URI (ex: Transform.XPATH2) and mechanism type
 (ex: DOM) as supplied by the specified provider. The specified provider
 must be registered in the security provider list.

 Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
algorithm - the URI of the algorithm
mechanismType - the type of the XML processing mechanism and
   representation
provider - the string name of the provider
Returns:
a new TransformService
Throws:
NoSuchProviderException - if the specified provider is not
   registered in the security provider list
NullPointerException - if provider,
   mechanismType, or algorithm is
   null
NoSuchAlgorithmException - if a TransformService
   implementation for the specified algorithm and mechanism type is not
   available from the specified provider
See Also:
Provider


"
TransformService,getMechanismType(),String,Returns the mechanism type supported by this TransformService.,"

getMechanismType
public final String getMechanismType()
Returns the mechanism type supported by this TransformService.

Returns:
the mechanism type


"
TransformService,getProvider(),Provider,Returns the provider of this TransformService.,"

getProvider
public final Provider getProvider()
Returns the provider of this TransformService.

Returns:
the provider


"
TransformService,init(TransformParameterSpec params),abstract void,Initializes this TransformService with the specified parameters.,"

init
public abstract void init(TransformParameterSpec params)
                   throws InvalidAlgorithmParameterException
Initializes this TransformService with the specified
 parameters.

 If the parameters exist in XML form, the
 init(XMLStructure, XMLCryptoContext) method should be used to
 initialize the TransformService.

Parameters:
params - the algorithm parameters (may be null if
   not required or optional)
Throws:
InvalidAlgorithmParameterException - if the specified parameters
   are invalid for this algorithm


"
TransformService,"init(XMLStructure parent, XMLCryptoContext context)",abstract void,Initializes this TransformService with the specified parameters and document context.,"

init
public abstract void init(XMLStructure parent,
                          XMLCryptoContext context)
                   throws InvalidAlgorithmParameterException
Initializes this TransformService with the specified
 parameters and document context.

Parameters:
parent - a mechanism-specific structure containing the parent
    structure
context - the XMLCryptoContext containing
    additional context (may be null if not applicable)
Throws:
ClassCastException - if the type of parent or
    context is not compatible with this
    TransformService
NullPointerException - if parent is null
InvalidAlgorithmParameterException - if the specified parameters
   are invalid for this algorithm


"
TransformService,"marshalParams(XMLStructure parent, XMLCryptoContext context)",abstract void,Marshals the algorithm-specific parameters.,"

marshalParams
public abstract void marshalParams(XMLStructure parent,
                                   XMLCryptoContext context)
                            throws MarshalException
Marshals the algorithm-specific parameters. If there are no parameters
 to be marshalled, this method returns without throwing an exception.

Parameters:
parent - a mechanism-specific structure containing the parent
    node that the marshalled parameters should be appended to
context - the XMLCryptoContext containing
    additional context (may be null if not applicable)
Throws:
ClassCastException - if the type of parent or
    context is not compatible with this
    TransformService
NullPointerException - if parent is null
MarshalException - if the parameters cannot be marshalled


"
XMLSignatureFactory,getInstance(),static XMLSignatureFactory,"Returns an XMLSignatureFactory that supports the default XML processing mechanism and representation type (""DOM"").","

getInstance
public static XMLSignatureFactory getInstance()
Returns an XMLSignatureFactory that supports the
 default XML processing mechanism and representation type (""DOM"").

 This method uses the standard JCA provider lookup mechanism to
 locate and instantiate an XMLSignatureFactory
 implementation of the default mechanism type. It traverses the list of
 registered security Providers, starting with the most
 preferred Provider.  A new XMLSignatureFactory
 object from the first Provider that supports the DOM
 mechanism is returned.

 Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Returns:
a new XMLSignatureFactory
Throws:
NoSuchMechanismException - if no Provider supports an
    XMLSignatureFactory implementation for the DOM
    mechanism
See Also:
Provider


"
XMLSignatureFactory,getInstance(String mechanismType),static XMLSignatureFactory,"Returns an XMLSignatureFactory that supports the specified XML processing mechanism and representation type (ex: ""DOM"").","

getInstance
public static XMLSignatureFactory getInstance(String mechanismType)
Returns an XMLSignatureFactory that supports the
 specified XML processing mechanism and representation type (ex: ""DOM"").

 This method uses the standard JCA provider lookup mechanism to
 locate and instantiate an XMLSignatureFactory
 implementation of the desired mechanism type. It traverses the list of
 registered security Providers, starting with the most
 preferred Provider.  A new XMLSignatureFactory
 object from the first Provider that supports the specified
 mechanism is returned.

 Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
Returns:
a new XMLSignatureFactory
Throws:
NullPointerException - if mechanismType is
    null
NoSuchMechanismException - if no Provider supports an
    XMLSignatureFactory implementation for the specified
    mechanism
See Also:
Provider


"
XMLSignatureFactory,"getInstance(String mechanismType, Provider provider)",static XMLSignatureFactory,"Returns an XMLSignatureFactory that supports the requested XML processing mechanism and representation type (ex: ""DOM""), as supplied by the specified provider.","

getInstance
public static XMLSignatureFactory getInstance(String mechanismType,
                                              Provider provider)
Returns an XMLSignatureFactory that supports the
 requested XML processing mechanism and representation type (ex: ""DOM""),
 as supplied by the specified provider. Note that the specified
 Provider object does not have to be registered in the
 provider list.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
provider - the Provider object
Returns:
a new XMLSignatureFactory
Throws:
NullPointerException - if provider or
    mechanismType is null
NoSuchMechanismException - if an XMLSignatureFactory
   implementation for the specified mechanism is not available
   from the specified Provider object
See Also:
Provider


"
XMLSignatureFactory,"getInstance(String mechanismType, String provider)",static XMLSignatureFactory,"Returns an XMLSignatureFactory that supports the requested XML processing mechanism and representation type (ex: ""DOM""), as supplied by the specified provider.","

getInstance
public static XMLSignatureFactory getInstance(String mechanismType,
                                              String provider)
                                       throws NoSuchProviderException
Returns an XMLSignatureFactory that supports the
 requested XML processing mechanism and representation type (ex: ""DOM""),
 as supplied by the specified provider. The specified provider must be
 registered in the security provider list.

 Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
mechanismType - the type of the XML processing mechanism and
    representation. See the 
    Service Providers section of the API overview for a list of
    standard mechanism types.
provider - the string name of the provider
Returns:
a new XMLSignatureFactory
Throws:
NoSuchProviderException - if the specified provider is not
    registered in the security provider list
NullPointerException - if provider or
    mechanismType is null
NoSuchMechanismException - if an XMLSignatureFactory
    implementation for the specified mechanism is not
    available from the specified provider
See Also:
Provider


"
XMLSignatureFactory,getKeyInfoFactory(),KeyInfoFactory,Returns a KeyInfoFactory that creates KeyInfo objects.,"

getKeyInfoFactory
public final KeyInfoFactory getKeyInfoFactory()
Returns a KeyInfoFactory that creates KeyInfo
 objects. The returned KeyInfoFactory has the same
 mechanism type and provider as this XMLSignatureFactory.

Returns:
a KeyInfoFactory
Throws:
NoSuchMechanismException - if a KeyFactory
    implementation with the same mechanism type and provider
    is not available


"
XMLSignatureFactory,getMechanismType(),String,"Returns the type of the XML processing mechanism and representation supported by this XMLSignatureFactory (ex: ""DOM"").","

getMechanismType
public final String getMechanismType()
Returns the type of the XML processing mechanism and representation
 supported by this XMLSignatureFactory (ex: ""DOM"").

Returns:
the XML processing mechanism type supported by this
    XMLSignatureFactory


"
XMLSignatureFactory,getProvider(),Provider,Returns the provider of this XMLSignatureFactory.,"

getProvider
public final Provider getProvider()
Returns the provider of this XMLSignatureFactory.

Returns:
the provider of this XMLSignatureFactory


"
XMLSignatureFactory,getURIDereferencer(),abstract URIDereferencer,Returns a reference to the URIDereferencer that is used by default to dereference URIs in Reference objects.,"

getURIDereferencer
public abstract URIDereferencer getURIDereferencer()
Returns a reference to the URIDereferencer that is used by
 default to dereference URIs in Reference objects.

Returns:
a reference to the default URIDereferencer (never
    null)


"
XMLSignatureFactory,isFeatureSupported(String feature),abstract boolean,Indicates whether a specified feature is supported.,"

isFeatureSupported
public abstract boolean isFeatureSupported(String feature)
Indicates whether a specified feature is supported.

Parameters:
feature - the feature name (as an absolute URI)
Returns:
true if the specified feature is supported,
    false otherwise
Throws:
NullPointerException - if feature is null


"
XMLSignatureFactory,"newCanonicalizationMethod(String algorithm, C14NMethodParameterSpec params)",abstract CanonicalizationMethod,Creates a CanonicalizationMethod for the specified algorithm URI and parameters.,"

newCanonicalizationMethod
public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,
                                                                 C14NMethodParameterSpec params)
                                                          throws NoSuchAlgorithmException,
                                                                 InvalidAlgorithmParameterException
Creates a CanonicalizationMethod for the specified
 algorithm URI and parameters.

Parameters:
algorithm - the URI identifying the canonicalization algorithm
params - algorithm-specific canonicalization parameters (may be
    null)
Returns:
the CanonicalizationMethod
Throws:
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,"newCanonicalizationMethod(String algorithm, XMLStructure params)",abstract CanonicalizationMethod,Creates a CanonicalizationMethod for the specified algorithm URI and parameters.,"

newCanonicalizationMethod
public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,
                                                                 XMLStructure params)
                                                          throws NoSuchAlgorithmException,
                                                                 InvalidAlgorithmParameterException
Creates a CanonicalizationMethod for the specified
 algorithm URI and parameters. The parameters are specified as a
 mechanism-specific XMLStructure (ex: DOMStructure).
 This method is useful when the parameters are in XML form or there is
 no standard class for specifying the parameters.

Parameters:
algorithm - the URI identifying the canonicalization algorithm
params - a mechanism-specific XML structure from which to
   unmarshal the parameters from (may be null if
   not required or optional)
Returns:
the CanonicalizationMethod
Throws:
ClassCastException - if the type of params is
   inappropriate for this XMLSignatureFactory
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,"newDigestMethod(String algorithm, DigestMethodParameterSpec params)",abstract DigestMethod,Creates a DigestMethod for the specified algorithm URI and parameters.,"

newDigestMethod
public abstract DigestMethod newDigestMethod(String algorithm,
                                             DigestMethodParameterSpec params)
                                      throws NoSuchAlgorithmException,
                                             InvalidAlgorithmParameterException
Creates a DigestMethod for the specified algorithm URI
 and parameters.

Parameters:
algorithm - the URI identifying the digest algorithm
params - algorithm-specific digest parameters (may be
    null)
Returns:
the DigestMethod
Throws:
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,newManifest(List references),abstract Manifest,Creates a Manifest containing the specified list of References.,"

newManifest
public abstract Manifest newManifest(List references)
Creates a Manifest containing the specified
 list of References.

Parameters:
references - a list of one or more References. The list
    is defensively copied to protect against subsequent modification.
Returns:
a Manifest
Throws:
NullPointerException - if references is
    null
IllegalArgumentException - if references is empty
ClassCastException - if references contains any
    entries that are not of type Reference


"
XMLSignatureFactory,"newManifest(List references, String id)",abstract Manifest,Creates a Manifest containing the specified list of References and optional id.,"

newManifest
public abstract Manifest newManifest(List references,
                                     String id)
Creates a Manifest containing the specified
 list of References and optional id.

Parameters:
references - a list of one or more References. The list
    is defensively copied to protect against subsequent modification.
id - the id (may be null)
Returns:
a Manifest
Throws:
NullPointerException - if references is
    null
IllegalArgumentException - if references is empty
ClassCastException - if references contains any
    entries that are not of type Reference


"
XMLSignatureFactory,"newReference(String uri, DigestMethod dm)",abstract Reference,Creates a Reference with the specified URI and digest method.,"

newReference
public abstract Reference newReference(String uri,
                                       DigestMethod dm)
Creates a Reference with the specified URI and digest
 method.

Parameters:
uri - the reference URI (may be null)
dm - the digest method
Returns:
a Reference
Throws:
IllegalArgumentException - if uri is not RFC 2396
    compliant
NullPointerException - if dm is null


"
XMLSignatureFactory,"newReference(String uri, DigestMethod dm, List appliedTransforms, Data result, List transforms, String type, String id)",abstract Reference,Creates a Reference with the specified parameters.,"

newReference
public abstract Reference newReference(String uri,
                                       DigestMethod dm,
                                       List appliedTransforms,
                                       Data result,
                                       List transforms,
                                       String type,
                                       String id)
Creates a Reference with the specified parameters.

 This method is useful when a list of transforms have already been
 applied to the Reference. See for example,
 the
 
 OASIS-DSS (Digital Signature Services) specification.

 When an XMLSignature containing this reference is
 generated, the specified transforms (if non-null) are
 applied to the specified result. The
 Transforms element of the resulting Reference
 element is set to the concatenation of the
 appliedTransforms and transforms.

Parameters:
uri - the reference URI (may be null)
dm - the digest method
appliedTransforms - a list of Transforms that have
    already been applied. The list is defensively
    copied to protect against subsequent modification. The list must
    contain at least one entry.
result - the result of processing the sequence of
    appliedTransforms
transforms - a list of Transforms that are to be applied
    when generating the signature. The list is defensively copied to
    protect against subsequent modification. May be null
    or empty.
type - the reference type, as a URI (may be null)
id - the reference ID (may be null)
Returns:
a Reference
Throws:
ClassCastException - if any of the transforms (in either list)
    are not of type Transform
IllegalArgumentException - if uri is not RFC 2396
    compliant or appliedTransforms is empty
NullPointerException - if dm,
    appliedTransforms or result is
    null


"
XMLSignatureFactory,"newReference(String uri, DigestMethod dm, List transforms, String type, String id)",abstract Reference,Creates a Reference with the specified parameters.,"

newReference
public abstract Reference newReference(String uri,
                                       DigestMethod dm,
                                       List transforms,
                                       String type,
                                       String id)
Creates a Reference with the specified parameters.

Parameters:
uri - the reference URI (may be null)
dm - the digest method
transforms - a list of Transforms. The list is defensively
    copied to protect against subsequent modification. May be
    null or empty.
type - the reference type, as a URI (may be null)
id - the reference ID (may be null)
Returns:
a Reference
Throws:
ClassCastException - if any of the transforms are
    not of type Transform
IllegalArgumentException - if uri is not RFC 2396
    compliant
NullPointerException - if dm is null


"
XMLSignatureFactory,"newReference(String uri, DigestMethod dm, List transforms, String type, String id, byte[] digestValue)",abstract Reference,Creates a Reference with the specified parameters and pre-calculated digest value.,"

newReference
public abstract Reference newReference(String uri,
                                       DigestMethod dm,
                                       List transforms,
                                       String type,
                                       String id,
                                       byte[] digestValue)
Creates a Reference with the specified parameters and
 pre-calculated digest value.

 This method is useful when the digest value of a
 Reference has been previously computed. See for example,
 the
 
 OASIS-DSS (Digital Signature Services) specification.

Parameters:
uri - the reference URI (may be null)
dm - the digest method
transforms - a list of Transforms. The list is defensively
    copied to protect against subsequent modification. May be
    null or empty.
type - the reference type, as a URI (may be null)
id - the reference ID (may be null)
digestValue - the digest value. The array is cloned to protect
    against subsequent modification.
Returns:
a Reference
Throws:
ClassCastException - if any of the transforms are
    not of type Transform
IllegalArgumentException - if uri is not RFC 2396
    compliant
NullPointerException - if dm or
    digestValue is null


"
XMLSignatureFactory,"newSignatureMethod(String algorithm, SignatureMethodParameterSpec params)",abstract SignatureMethod,Creates a SignatureMethod for the specified algorithm URI and parameters.,"

newSignatureMethod
public abstract SignatureMethod newSignatureMethod(String algorithm,
                                                   SignatureMethodParameterSpec params)
                                            throws NoSuchAlgorithmException,
                                                   InvalidAlgorithmParameterException
Creates a SignatureMethod for the specified algorithm URI
 and parameters.

Parameters:
algorithm - the URI identifying the signature algorithm
params - algorithm-specific signature parameters (may be
    null)
Returns:
the SignatureMethod
Throws:
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,"newSignatureProperties(List properties, String id)",abstract SignatureProperties,Creates a SignatureProperties containing the specified list of SignaturePropertys and optional id.,"

newSignatureProperties
public abstract SignatureProperties newSignatureProperties(List properties,
                                                           String id)
Creates a SignatureProperties containing the specified
 list of SignaturePropertys and optional id.

Parameters:
properties - a list of one or more SignaturePropertys.
    The list is defensively copied to protect against subsequent
    modification.
id - the id (may be null)
Returns:
a SignatureProperties
Throws:
NullPointerException - if properties
    is null
IllegalArgumentException - if properties is empty
ClassCastException - if properties contains any
    entries that are not of type SignatureProperty


"
XMLSignatureFactory,"newSignatureProperty(List content, String target, String id)",abstract SignatureProperty,"Creates a SignatureProperty containing the specified list of XMLStructures, target URI and optional id.","

newSignatureProperty
public abstract SignatureProperty newSignatureProperty(List content,
                                                       String target,
                                                       String id)
Creates a SignatureProperty containing the specified
 list of XMLStructures, target URI and optional id.

Parameters:
content - a list of one or more XMLStructures. The list
    is defensively copied to protect against subsequent modification.
target - the target URI of the Signature that this property applies
    to
id - the id (may be null)
Returns:
a SignatureProperty
Throws:
NullPointerException - if content or
    target is null
IllegalArgumentException - if content is empty
ClassCastException - if content contains any
    entries that are not of type XMLStructure


"
XMLSignatureFactory,"newSignedInfo(CanonicalizationMethod cm, SignatureMethod sm, List references)",abstract SignedInfo,"Creates a SignedInfo with the specified canonicalization and signature methods, and list of one or more references.","

newSignedInfo
public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,
                                         SignatureMethod sm,
                                         List references)
Creates a SignedInfo with the specified canonicalization
 and signature methods, and list of one or more references.

Parameters:
cm - the canonicalization method
sm - the signature method
references - a list of one or more References. The list is
    defensively copied to protect against subsequent modification.
Returns:
a SignedInfo
Throws:
ClassCastException - if any of the references are not of
    type Reference
IllegalArgumentException - if references is empty
NullPointerException - if any of the parameters
    are null


"
XMLSignatureFactory,"newSignedInfo(CanonicalizationMethod cm, SignatureMethod sm, List references, String id)",abstract SignedInfo,Creates a SignedInfo with the specified parameters.,"

newSignedInfo
public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,
                                         SignatureMethod sm,
                                         List references,
                                         String id)
Creates a SignedInfo with the specified parameters.

Parameters:
cm - the canonicalization method
sm - the signature method
references - a list of one or more References. The list is
    defensively copied to protect against subsequent modification.
id - the id (may be null)
Returns:
a SignedInfo
Throws:
ClassCastException - if any of the references are not of
    type Reference
IllegalArgumentException - if references is empty
NullPointerException - if cm, sm, or
    references are null


"
XMLSignatureFactory,"newTransform(String algorithm, TransformParameterSpec params)",abstract Transform,Creates a Transform for the specified algorithm URI and parameters.,"

newTransform
public abstract Transform newTransform(String algorithm,
                                       TransformParameterSpec params)
                                throws NoSuchAlgorithmException,
                                       InvalidAlgorithmParameterException
Creates a Transform for the specified algorithm URI
 and parameters.

Parameters:
algorithm - the URI identifying the transform algorithm
params - algorithm-specific transform parameters (may be
    null)
Returns:
the Transform
Throws:
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,"newTransform(String algorithm, XMLStructure params)",abstract Transform,Creates a Transform for the specified algorithm URI and parameters.,"

newTransform
public abstract Transform newTransform(String algorithm,
                                       XMLStructure params)
                                throws NoSuchAlgorithmException,
                                       InvalidAlgorithmParameterException
Creates a Transform for the specified algorithm URI
 and parameters. The parameters are specified as a mechanism-specific
 XMLStructure (ex: DOMStructure). This method is
 useful when the parameters are in XML form or there is no standard
 class for specifying the parameters.

Parameters:
algorithm - the URI identifying the transform algorithm
params - a mechanism-specific XML structure from which to
   unmarshal the parameters from (may be null if
   not required or optional)
Returns:
the Transform
Throws:
ClassCastException - if the type of params is
   inappropriate for this XMLSignatureFactory
InvalidAlgorithmParameterException - if the specified parameters
    are inappropriate for the requested algorithm
NoSuchAlgorithmException - if an implementation of the
    specified algorithm cannot be found
NullPointerException - if algorithm is
    null


"
XMLSignatureFactory,"newXMLObject(List content, String id, String mimeType, String encoding)",abstract XMLObject,Creates an XMLObject from the specified parameters.,"

newXMLObject
public abstract XMLObject newXMLObject(List content,
                                       String id,
                                       String mimeType,
                                       String encoding)
Creates an XMLObject from the specified parameters.

Parameters:
content - a list of XMLStructures. The list
    is defensively copied to protect against subsequent modification.
    May be null or empty.
id - the Id (may be null)
mimeType - the mime type (may be null)
encoding - the encoding (may be null)
Returns:
an XMLObject
Throws:
ClassCastException - if content contains any
    entries that are not of type XMLStructure


"
XMLSignatureFactory,"newXMLSignature(SignedInfo si, KeyInfo ki)",abstract XMLSignature,Creates an XMLSignature and initializes it with the contents of the specified SignedInfo and KeyInfo objects.,"

newXMLSignature
public abstract XMLSignature newXMLSignature(SignedInfo si,
                                             KeyInfo ki)
Creates an XMLSignature and initializes it with the contents
 of the specified SignedInfo and KeyInfo
 objects.

Parameters:
si - the signed info
ki - the key info (may be null)
Returns:
an XMLSignature
Throws:
NullPointerException - if si is null


"
XMLSignatureFactory,"newXMLSignature(SignedInfo si, KeyInfo ki, List objects, String id, String signatureValueId)",abstract XMLSignature,Creates an XMLSignature and initializes it with the specified parameters.,"

newXMLSignature
public abstract XMLSignature newXMLSignature(SignedInfo si,
                                             KeyInfo ki,
                                             List objects,
                                             String id,
                                             String signatureValueId)
Creates an XMLSignature and initializes it with the
 specified parameters.

Parameters:
si - the signed info
ki - the key info (may be null)
objects - a list of XMLObjects (may be empty or
    null)
id - the Id (may be null)
signatureValueId - the SignatureValue Id (may be null)
Returns:
an XMLSignature
Throws:
NullPointerException - if si is null
ClassCastException - if any of the objects are not of
    type XMLObject


"
XMLSignatureFactory,unmarshalXMLSignature(XMLStructure xmlStructure),abstract XMLSignature,Unmarshals a new XMLSignature instance from a mechanism-specific XMLStructure instance.,"

unmarshalXMLSignature
public abstract XMLSignature unmarshalXMLSignature(XMLStructure xmlStructure)
                                            throws MarshalException
Unmarshals a new XMLSignature instance from a
 mechanism-specific XMLStructure instance.
 This method is useful if you only want to unmarshal (and not
 validate) an XMLSignature.

Parameters:
xmlStructure - a mechanism-specific XML structure from which to
    unmarshal the signature from
Returns:
the XMLSignature
Throws:
NullPointerException - if xmlStructure is
    null
ClassCastException - if the type of xmlStructure is
    inappropriate for this factory
MarshalException - if an unrecoverable exception occurs
    during unmarshalling


"
XMLSignatureFactory,unmarshalXMLSignature(XMLValidateContext context),abstract XMLSignature,Unmarshals a new XMLSignature instance from a mechanism-specific XMLValidateContext instance.,"

unmarshalXMLSignature
public abstract XMLSignature unmarshalXMLSignature(XMLValidateContext context)
                                            throws MarshalException
Unmarshals a new XMLSignature instance from a
 mechanism-specific XMLValidateContext instance.

Parameters:
context - a mechanism-specific context from which to unmarshal the
    signature from
Returns:
the XMLSignature
Throws:
NullPointerException - if context is
    null
ClassCastException - if the type of context is
    inappropriate for this factory
MarshalException - if an unrecoverable exception occurs
    during unmarshalling


"
