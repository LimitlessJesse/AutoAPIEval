Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AccessibleObject,1,void setAccessible(boolean flag),True,,"

setAccessible
public void setAccessible(boolean flag)
                   throws SecurityException
Set the accessible flag for this object to
 the indicated boolean value.  A value of true indicates that
 the reflected object should suppress Java language access
 checking when it is used.  A value of false indicates
 that the reflected object should enforce Java language access checks.

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of this object may not be changed
 (for example, if this element object is a Constructor object for
 the class Class).

 A SecurityException is raised if this object is a Constructor object for the class
 java.lang.Class, and flag is true.

Parameters:
flag - the new value for the accessible flag
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
0,AccessibleObject,2,boolean isAccessible(),True,,"

isAccessible
public boolean isAccessible()
Get the value of the accessible flag for this object.

Returns:
the value of the object's accessible flag


"
0,AccessibleObject,3,Annotation[] getAnnotations(),True,,"

getAnnotations
public Annotation[] getAnnotations()
Description copied from interface: AnnotatedElement
Returns annotations that are present on this element.

 If there are no annotations present on this element, the return
 value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getAnnotations in interface AnnotatedElement
Returns:
annotations present on this element
Since:
1.5


"
0,AccessibleObject,4,Annotation getAnnotation(Class<? extends Annotation> annotationClass),False,,NULL
0,AccessibleObject,5,"void setAccessible(AccessibleObject[] array, boolean flag)",True,,"

setAccessible
public static void setAccessible(AccessibleObject[] array,
                                 boolean flag)
                          throws SecurityException
Convenience method to set the accessible flag for an
 array of objects with a single security check (for efficiency).

 First, if there is a security manager, its
 checkPermission method is called with a
 ReflectPermission(""suppressAccessChecks"") permission.

 A SecurityException is raised if flag is
 true but accessibility of any of the elements of the input
 array may not be changed (for example, if the element
 object is a Constructor object for the class Class).  In the event of such a SecurityException, the
 accessibility of objects is set to flag for array elements
 upto (and excluding) the element for which the exception occurred; the
 accessibility of elements beyond (and including) the element for which
 the exception occurred is unchanged.

Parameters:
array - the array of AccessibleObjects
flag - the new value for the accessible flag
              in each object
Throws:
SecurityException - if the request is denied.
See Also:
SecurityManager.checkPermission(java.security.Permission), 
RuntimePermission


"
1,Array,1,"Object newInstance(Class<?> componentType, int length)",True,,"

newInstance
public static Object newInstance(Class<?> componentType,
                                 int length)
                          throws NegativeArraySizeException
Creates a new array with the specified component type and
 length.
 Invoking this method is equivalent to creating an array
 as follows:
 

 int[] x = {length};
 Array.newInstance(componentType, x);
 

The number of dimensions of the new array must not
 exceed 255.

Parameters:
componentType - the Class object representing the
 component type of the new array
length - the length of the new array
Returns:
the new array
Throws:
NullPointerException - if the specified
 componentType parameter is null
IllegalArgumentException - if componentType is Void.TYPE or if the number of dimensions of the requested array
 instance exceed 255.
NegativeArraySizeException - if the specified length
 is negative


"
1,Array,2,int getLength(Object array),True,,"

getLength
public static int getLength(Object array)
                     throws IllegalArgumentException
Returns the length of the specified array object, as an int.

Parameters:
array - the array
Returns:
the length of the array
Throws:
IllegalArgumentException - if the object argument is not
 an array


"
1,Array,3,"Object get(Object array, int index)",True,,"

get
public static Object get(Object array,
                         int index)
                  throws IllegalArgumentException,
                         ArrayIndexOutOfBoundsException
Returns the value of the indexed component in the specified
 array object.  The value is automatically wrapped in an object
 if it has a primitive type.

Parameters:
array - the array
index - the index
Returns:
the (possibly wrapped) value of the indexed component in
 the specified array
Throws:
NullPointerException - If the specified object is null
IllegalArgumentException - If the specified object is not
 an array
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to the
 length of the specified array


"
1,Array,4,"void set(Object array, int index, Object value)",True,,"

set
public static void set(Object array,
                       int index,
                       Object value)
                throws IllegalArgumentException,
                       ArrayIndexOutOfBoundsException
Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.

Parameters:
array - the array
index - the index into the array
value - the new value of the indexed component
Throws:
NullPointerException - If the specified object argument
 is null
IllegalArgumentException - If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails
ArrayIndexOutOfBoundsException - If the specified index
 argument is negative, or if it is greater than or equal to
 the length of the specified array


"
1,Array,5,"Object get(Object array, int index, Object value)",False,,NULL
2,Constructor,1,Class<?> getDeclaringClass(),False,,NULL
2,Constructor,2,Class<?>[] getExceptionTypes(),True,,"

getExceptionTypes
public Class<?>[] getExceptionTypes()
Returns an array of Class objects that represent the
 types of exceptions declared to be thrown by the underlying
 executable represented by this object.  Returns an array of
 length 0 if the executable declares no exceptions in its throws clause.

Specified by:
getExceptionTypes in class Executable
Returns:
the exception types declared as being thrown by the
 executable this object represents


"
2,Constructor,3,int getModifiers(),True,,"

getModifiers
public int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Specified by:
getModifiers in class Executable
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
2,Constructor,4,String getName(),True,,"

getName
public String getName()
Returns the name of this constructor, as a string.  This is
 the binary name of the constructor's declaring class.

Specified by:
getName in interface Member
Specified by:
getName in class Executable
Returns:
the simple name of the underlying member


"
2,Constructor,5,Class<?>[] getParameterTypes(),True,,"

getParameterTypes
public Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Specified by:
getParameterTypes in class Executable
Returns:
the parameter types for the executable this object
 represents


"
3,Executable,1,Annotation[] getDeclaredAnnotations(),True,,"

getDeclaredAnnotations
public Annotation[] getDeclaredAnnotations()
Returns annotations that are directly present on this element.
 This method ignores inherited annotations.

 If there are no annotations directly present on this element,
 the return value is an array of length 0.

 The caller of this method is free to modify the returned array; it will
 have no effect on the arrays returned to other callers.

Specified by:
getDeclaredAnnotations in interface AnnotatedElement
Overrides:
getDeclaredAnnotations in class AccessibleObject
Returns:
annotations directly present on this element


"
3,Executable,2,Class<?> getDeclaringClass(),True,,"

getDeclaringClass
public abstract Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Returns:
an object representing the declaring class of the
 underlying member


"
3,Executable,3,int getParameterCount(),True,,"

getParameterCount
public int getParameterCount()
Returns the number of formal parameters (whether explicitly
 declared or implicitly declared or neither) for the executable
 represented by this object.

Returns:
The number of formal parameters for the executable this
 object represents


"
3,Executable,4,Parameter[] getParameters(),True,,"

getParameters
public Parameter[] getParameters()
Returns an array of Parameter objects that represent
 all the parameters to the underlying executable represented by
 this object.  Returns an array of length 0 if the executable
 has no parameters.

 The parameters of the underlying executable do not necessarily
 have unique names, or names that are legal identifiers in the
 Java programming language (JLS 3.8).

Returns:
an array of Parameter objects representing all
 the parameters to the executable this object represents.
Throws:
MalformedParametersException - if the class file contains
 a MethodParameters attribute that is improperly formatted.


"
3,Executable,5,TypeVariable<Method>[] getTypeParameters(),False,,NULL
4,Field,1,Class<?> getDeclaringClass(),True,,"

getDeclaringClass
public Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the field represented by this Field object.

Specified by:
getDeclaringClass in interface Member
Returns:
an object representing the declaring class of the
 underlying member


"
4,Field,2,int getModifiers(),True,,"

getModifiers
public int getModifiers()
Returns the Java language modifiers for the field represented
 by this Field object, as an integer. The Modifier class should
 be used to decode the modifiers.

Specified by:
getModifiers in interface Member
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
4,Field,3,String getName(),True,,"

getName
public String getName()
Returns the name of the field represented by this Field object.

Specified by:
getName in interface Member
Returns:
the simple name of the underlying member


"
4,Field,4,Class<?> getType(),True,,"

getType
public Class<?> getType()
Returns a Class object that identifies the
 declared type for the field represented by this
 Field object.

Returns:
a Class object identifying the declared
 type of the field represented by this object


"
4,Field,5,Object get(Object obj),True,,"

get
public Object get(Object obj)
           throws IllegalArgumentException,
                  IllegalAccessException
Returns the value of the field represented by this Field, on
 the specified object. The value is automatically wrapped in an
 object if it has a primitive type.

 The underlying field's value is obtained as follows:

 If the underlying field is a static field, the obj argument
 is ignored; it may be null.

 Otherwise, the underlying field is an instance field.  If the
 specified obj argument is null, the method throws a
 NullPointerException. If the specified object is not an
 instance of the class or interface declaring the underlying
 field, the method throws an IllegalArgumentException.

 If this Field object is enforcing Java language access control, and
 the underlying field is inaccessible, the method throws an
 IllegalAccessException.
 If the underlying field is static, the class that declared the
 field is initialized if it has not already been initialized.

 Otherwise, the value is retrieved from the underlying instance
 or static field.  If the field has a primitive type, the value
 is wrapped in an object before being returned, otherwise it is
 returned as is.

 If the field is hidden in the type of obj,
 the field's value is obtained according to the preceding rules.

Parameters:
obj - object from which the represented field's value is
 to be extracted
Returns:
the value of the represented field in object
 obj; primitive values are wrapped in an appropriate
 object before being returned
Throws:
IllegalAccessException - if this Field object
              is enforcing Java language access control and the underlying
              field is inaccessible.
IllegalArgumentException - if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof).
NullPointerException - if the specified object is null
              and the field is an instance field.
ExceptionInInitializerError - if the initialization provoked
              by this method fails.


"
5,Method,1,Class<?> getDeclaringClass(),True,,"

getDeclaringClass
public Class<?> getDeclaringClass()
Returns the Class object representing the class or interface
 that declares the executable represented by this object.

Specified by:
getDeclaringClass in interface Member
Specified by:
getDeclaringClass in class Executable
Returns:
an object representing the declaring class of the
 underlying member


"
5,Method,2,String getName(),True,,"

getName
public String getName()
Returns the name of the method represented by this Method
 object, as a String.

Specified by:
getName in interface Member
Specified by:
getName in class Executable
Returns:
the simple name of the underlying member


"
5,Method,3,Class<?>[] getParameterTypes(),True,,"

getParameterTypes
public Class<?>[] getParameterTypes()
Returns an array of Class objects that represent the formal
 parameter types, in declaration order, of the executable
 represented by this object.  Returns an array of length
 0 if the underlying executable takes no parameters.

Specified by:
getParameterTypes in class Executable
Returns:
the parameter types for the executable this object
 represents


"
5,Method,4,"Object invoke(Object obj, Object... args)",True,,"

invoke
public Object invoke(Object obj,
                     Object... args)
              throws IllegalAccessException,
                     IllegalArgumentException,
                     InvocationTargetException
Invokes the underlying method represented by this Method
 object, on the specified object with the specified parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as
 necessary.

 If the underlying method is static, then the specified obj
 argument is ignored. It may be null.

 If the number of formal parameters required by the underlying method is
 0, the supplied args array may be of length 0 or null.

 If the underlying method is an instance method, it is invoked
 using dynamic method lookup as documented in The Java Language
 Specification, Second Edition, section 15.12.4.4; in particular,
 overriding based on the runtime type of the target object will occur.

 If the underlying method is static, the class that declared
 the method is initialized if it has not already been initialized.

 If the method completes normally, the value it returns is
 returned to the caller of invoke; if the value has a primitive
 type, it is first appropriately wrapped in an object. However,
 if the value has the type of an array of a primitive type, the
 elements of the array are not wrapped in objects; in
 other words, an array of primitive type is returned.  If the
 underlying method return type is void, the invocation returns
 null.

Parameters:
obj - the object the underlying method is invoked from
args - the arguments used for the method call
Returns:
the result of dispatching the method represented by
 this object on obj with parameters
 args
Throws:
IllegalAccessException - if this Method object
              is enforcing Java language access control and the underlying
              method is inaccessible.
IllegalArgumentException - if the method is an
              instance method and the specified object argument
              is not an instance of the class or interface
              declaring the underlying method (or of a subclass
              or implementor thereof); if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion.
InvocationTargetException - if the underlying method
              throws an exception.
NullPointerException - if the specified object is null
              and the method is an instance method.
ExceptionInInitializerError - if the initialization
 provoked by this method fails.


"
5,Method,5,int getModifiers(),True,,"

getModifiers
public int getModifiers()
Returns the Java language modifiers for
 the executable represented by this object.

Specified by:
getModifiers in interface Member
Specified by:
getModifiers in class Executable
Returns:
the Java language modifiers for the underlying member
See Also:
Modifier


"
7,Parameter,1,String getName(),True,,"

getName
public String getName()
Returns the name of the parameter.  If the parameter's name is
 present, then this method returns
 the name provided by the class file. Otherwise, this method
 synthesizes a name of the form argN, where N is the index of
 the parameter in the descriptor of the method which declares
 the parameter.

Returns:
The name of the parameter, either provided by the class
         file or synthesized if the class file does not provide
         a name.


"
7,Parameter,2,int getModifiers(),True,,"

getModifiers
public int getModifiers()
Get the modifier flags for this the parameter represented by
 this Parameter object.

Returns:
The modifier flags for this parameter.


"
7,Parameter,3,Type getParameterizedType(),True,,"

getParameterizedType
public Type getParameterizedType()
Returns a Type object that identifies the parameterized
 type for the parameter represented by this Parameter
 object.

Returns:
a Type object identifying the parameterized
 type of the parameter represented by this object


"
7,Parameter,4,int getPosition(),False,,NULL
7,Parameter,5,AnnotatedType getAnnotatedType(),True,,"

getAnnotatedType
public AnnotatedType getAnnotatedType()
Returns an AnnotatedType object that represents the use of a type to
 specify the type of the formal parameter represented by this Parameter.

Returns:
an AnnotatedType object representing the use of a type
         to specify the type of the formal parameter represented by this
         Parameter


"
8,Proxy,1,"Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)",True,,"

newProxyInstance
public static Object newProxyInstance(ClassLoader loader,
                                      Class<?>[] interfaces,
                                      InvocationHandler h)
                               throws IllegalArgumentException
Returns an instance of a proxy class for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.

 Proxy.newProxyInstance throws
 IllegalArgumentException for the same reasons that
 Proxy.getProxyClass does.

Parameters:
loader - the class loader to define the proxy class
interfaces - the list of interfaces for the proxy class
          to implement
h - the invocation handler to dispatch method invocations to
Returns:
a proxy instance with the specified invocation handler of a
          proxy class that is defined by the specified class loader
          and that implements the specified interfaces
Throws:
IllegalArgumentException - if any of the restrictions on the
          parameters that may be passed to getProxyClass
          are violated
SecurityException - if a security manager, s, is present
          and any of the following conditions is met:
          
 the given loader is null and
               the caller's class loader is not null and the
               invocation of s.checkPermission with
               RuntimePermission(""getClassLoader"") permission
               denies access;
 for each proxy interface, intf,
               the caller's class loader is not the same as or an
               ancestor of the class loader for intf and
               invocation of s.checkPackageAccess() denies access to intf;
 any of the given proxy interfaces is non-public and the
               caller class is not in the same runtime package
               as the non-public interface and the invocation of
               s.checkPermission with
               ReflectPermission(""newProxyInPackage.{package name}"")
               permission denies access.

NullPointerException - if the interfaces array
          argument or any of its elements are null, or
          if the invocation handler, h, is
          null


"
8,Proxy,2,"Class<?> getProxyClass(ClassLoader loader, Class<?>... interfaces)",True,,"

getProxyClass
public static Class<?> getProxyClass(ClassLoader loader,
                                     Class<?>... interfaces)
                              throws IllegalArgumentException
Returns the java.lang.Class object for a proxy class
 given a class loader and an array of interfaces.  The proxy class
 will be defined by the specified class loader and will implement
 all of the supplied interfaces.  If any of the given interfaces
 is non-public, the proxy class will be non-public. If a proxy class
 for the same permutation of interfaces has already been defined by the
 class loader, then the existing proxy class will be returned; otherwise,
 a proxy class for those interfaces will be generated dynamically
 and defined by the class loader.

 There are several restrictions on the parameters that may be
 passed to Proxy.getProxyClass:

 
All of the Class objects in the
 interfaces array must represent interfaces, not
 classes or primitive types.

 No two elements in the interfaces array may
 refer to identical Class objects.

 All of the interface types must be visible by name through the
 specified class loader.  In other words, for class loader
 cl and every interface i, the following
 expression must be true:
 
     Class.forName(i.getName(), false, cl) == i
 
All non-public interfaces must be in the same package;
 otherwise, it would not be possible for the proxy class to
 implement all of the interfaces, regardless of what package it is
 defined in.

 For any set of member methods of the specified interfaces
 that have the same signature:
 
If the return type of any of the methods is a primitive
 type or void, then all of the methods must have that same
 return type.
 Otherwise, one of the methods must have a return type that
 is assignable to all of the return types of the rest of the
 methods.
 
The resulting proxy class must not exceed any limits imposed
 on classes by the virtual machine.  For example, the VM may limit
 the number of interfaces that a class may implement to 65535; in
 that case, the size of the interfaces array must not
 exceed 65535.
 
If any of these restrictions are violated,
 Proxy.getProxyClass will throw an
 IllegalArgumentException.  If the interfaces
 array argument or any of its elements are null, a
 NullPointerException will be thrown.

 Note that the order of the specified proxy interfaces is
 significant: two requests for a proxy class with the same combination
 of interfaces but in a different order will result in two distinct
 proxy classes.

Parameters:
loader - the class loader to define the proxy class
interfaces - the list of interfaces for the proxy class
          to implement
Returns:
a proxy class that is defined in the specified class loader
          and that implements the specified interfaces
Throws:
IllegalArgumentException - if any of the restrictions on the
          parameters that may be passed to getProxyClass
          are violated
SecurityException - if a security manager, s, is present
          and any of the following conditions is met:
          
 the given loader is null and
             the caller's class loader is not null and the
             invocation of s.checkPermission with
             RuntimePermission(""getClassLoader"") permission
             denies access.
 for each proxy interface, intf,
             the caller's class loader is not the same as or an
             ancestor of the class loader for intf and
             invocation of s.checkPackageAccess() denies access to intf.

NullPointerException - if the interfaces array
          argument or any of its elements are null


"
8,Proxy,3,InvocationHandler getInvocationHandler(Object proxy),True,,"

getInvocationHandler
public static InvocationHandler getInvocationHandler(Object proxy)
                                              throws IllegalArgumentException
Returns the invocation handler for the specified proxy instance.

Parameters:
proxy - the proxy instance to return the invocation handler for
Returns:
the invocation handler for the proxy instance
Throws:
IllegalArgumentException - if the argument is not a
          proxy instance
SecurityException - if a security manager, s, is present
          and the caller's class loader is not the same as or an
          ancestor of the class loader for the invocation handler
          and invocation of s.checkPackageAccess() denies access to the invocation
          handler's class.


"
8,Proxy,4,boolean isProxyClass(Class<?> cl),True,,"

isProxyClass
public static boolean isProxyClass(Class<?> cl)
Returns true if and only if the specified class was dynamically
 generated to be a proxy class using the getProxyClass
 method or the newProxyInstance method.

 The reliability of this method is important for the ability
 to use it to make security decisions, so its implementation should
 not just test if the class in question extends Proxy.

Parameters:
cl - the class to test
Returns:
true if the class is a proxy class and
          false otherwise
Throws:
NullPointerException - if cl is null


"
8,Proxy,5,Class<?>[] getProxyInterfaces(Class<?> proxyClass),False,,NULL
9,ReflectPermission,1,"void checkMemberAccess(Class<?> clazz, int which)",False,,NULL
9,ReflectPermission,2,void checkPackageAccess(String pkg),False,,NULL
9,ReflectPermission,3,void checkPermission(Permission perm),False,,NULL
9,ReflectPermission,4,boolean equals(Object obj),False,,NULL
9,ReflectPermission,5,String getActions(),False,,NULL
