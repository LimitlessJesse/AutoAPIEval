Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Schema,1,javax.xml.validation.Validator newValidator(),False,,NULL
0,Schema,2,javax.xml.validation.ValidatorHandler newValidatorHandler(),False,,NULL
0,Schema,3,javax.xml.validation.TypeInfoProvider getTypeInfoProvider(),False,,NULL
0,Schema,4,javax.xml.validation.ValidatorHandler newValidatorHandler(javax.xml.transform.Source source),False,,NULL
0,Schema,5,javax.xml.validation.ValidatorHandler newValidatorHandler(javax.xml.transform.Source[] schemas),False,,NULL
1,SchemaFactory,1,javax.xml.validation.Schema newSchema(Source schema),False,,NULL
1,SchemaFactory,2,javax.xml.validation.Schema newSchema(File schema),False,,NULL
1,SchemaFactory,3,javax.xml.validation.Schema newSchema(InputStream is),False,,NULL
1,SchemaFactory,4,javax.xml.validation.Schema newSchema(Source[] schemas),False,,NULL
1,SchemaFactory,5,"javax.xml.validation.Schema newSchema(Source schema, LSResourceResolver resourceResolver)",False,,NULL
2,SchemaFactoryLoader,1,SchemaFactory newFactory(String schemaLanguage),True,,"

newFactory
public abstract SchemaFactory newFactory(String schemaLanguage)
Creates a new SchemaFactory object for the specified
 schema language.

Parameters:
schemaLanguage - See 
      the list of available schema languages.
Returns:
null if the callee fails to create one.
Throws:
NullPointerException - If the schemaLanguage parameter is null.


"
2,SchemaFactoryLoader,2,SchemaFactory newDefaultFactory(),False,,NULL
2,SchemaFactoryLoader,3,"void setFeature(String name, boolean value)",False,,NULL
2,SchemaFactoryLoader,4,"void setProperty(String name, Object object)",False,,NULL
2,SchemaFactoryLoader,5,SchemaFactoryLoader newInstance(),False,,NULL
3,TypeInfoProvider,1,TypeInfo getElementTypeInfo(),True,,"

getElementTypeInfo
public abstract TypeInfo getElementTypeInfo()
Returns the immutable TypeInfo object for the current
 element.
The method may only be called by the startElement event
 or the endElement event
 of the ContentHandler that the application sets to
 the ValidatorHandler.
When W3C XML Schema validation is being performed, in the
 case where an element has a union type, the TypeInfo
 returned by a call to getElementTypeInfo() from the
 startElement
 event will be the union type. The TypeInfo
 returned by a call
 from the endElement event will be the actual member type used
 to validate the element.

Returns:
An immutable TypeInfo object that represents the
      type of the current element.
      Note that the caller can keep references to the obtained
      TypeInfo longer than the callback scope.

      Otherwise, this method returns
      null if the validator is unable to
      determine the type of the current element for some reason
      (for example, if the validator is recovering from
      an earlier error.)
Throws:
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
3,TypeInfoProvider,2,TypeInfo getAttributeTypeInfo(int index),True,,"

getAttributeTypeInfo
public abstract TypeInfo getAttributeTypeInfo(int index)
Returns the immutable TypeInfo object for the specified
 attribute of the current element.

 
 The method may only be called by the startElement event of
 the ContentHandler that the application sets to the
 ValidatorHandler.

Parameters:
index - The index of the attribute. The same index for
      the Attributes object passed to the
      startElement callback.
Returns:
An immutable TypeInfo object that represents the
      type of the specified attribute.
      Note that the caller can keep references to the obtained
      TypeInfo longer than the callback scope.

      Otherwise, this method returns
      null if the validator is unable to
      determine the type.
Throws:
IndexOutOfBoundsException - If the index is invalid.
IllegalStateException - If this method is called from other ContentHandler
      methods.


"
3,TypeInfoProvider,3,TypeInfo getAttributeTypeInfo(QName name),False,,NULL
3,TypeInfoProvider,4,"TypeInfo getAttributeTypeInfo(String namespaceURI, String localName)",False,,NULL
3,TypeInfoProvider,5,TypeInfo getDeclaredAttributeTypeInfo(int index),False,,NULL
4,Validator,1,void validate(Source source),True,,"

validate
public void validate(Source source)
              throws SAXException,
                     IOException
Validates the specified input.

 This is just a convenience method for
 validate(Source source, Result result)
 with result of null.

Parameters:
source - XML to be validated. Must be an XML document or
      XML element and must not be null. For backwards compatibility,
      the results of attempting to validate anything other than
      a document or element are implementation-dependent.
      Implementations must either recognize and process the input
      or throw an IllegalArgumentException.
Throws:
IllegalArgumentException - If the Source
      is an XML artifact that the implementation cannot
      validate (for example, a processing instruction).
SAXException - If the ErrorHandler throws a SAXException or
      if a fatal error is found and the ErrorHandler returns
      normally.
IOException - If the validator is processing a
      SAXSource and the
      underlying XMLReader throws an
      IOException.
NullPointerException - If source is
   null.
See Also:
validate(Source source, Result result)


"
4,Validator,2,void setErrorHandler(ErrorHandler errorHandler),True,,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler errorHandler)
Sets the ErrorHandler to receive errors encountered
 during the validate method invocation.

 
 Error handler can be used to customize the error handling process
 during a validation. When an ErrorHandler is set,
 errors found during the validation will be first sent
 to the ErrorHandler.

 
 The error handler can abort further validation immediately
 by throwing SAXException from the handler. Or for example
 it can print an error to the screen and try to continue the
 validation by returning normally from the ErrorHandler

 If any Throwable is thrown from an ErrorHandler,
 the caller of the validate method will be thrown
 the same Throwable object.

 
Validator is not allowed to
 throw SAXException without first reporting it to
 ErrorHandler.

 
 When the ErrorHandler is null, the implementation will
 behave as if the following ErrorHandler is set:
 
 class DraconianErrorHandler implements ErrorHandler {
     public void fatalError( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void error( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void warning( SAXParseException e ) throws SAXException {
         // noop
     }
 }
 

 When a new Validator object is created, initially
 this field is set to null.

Parameters:
errorHandler - A new error handler to be set. This parameter can be null.


"
4,Validator,3,void setResourceResolverLS(LSResourceResolver resourceResolver),False,,NULL
4,Validator,4,"void setProperty(String name, Object value)",True,,"

setProperty
public void setProperty(String name,
                        Object object)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a Validator to recognize a property name but
 to be unable to change the current value.
 Some property values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.

 All implementations that implement JAXP 1.5 or newer are required to
 support the XMLConstants.ACCESS_EXTERNAL_DTD and
 XMLConstants.ACCESS_EXTERNAL_SCHEMA properties.
 


Access to external DTDs in source or Schema file is restricted to
      the protocols specified by the XMLConstants.ACCESS_EXTERNAL_DTD
      property.  If access is denied during validation due to the restriction
      of this property, SAXException will be thrown by the
      validate(Source) method.
Access to external reference set by the schemaLocation attribute is
      restricted to the protocols specified by the
      XMLConstants.ACCESS_EXTERNAL_SCHEMA property.
      If access is denied during validation due to the restriction of this property,
      SAXException will be thrown by the
      validate(Source) method.



Parameters:
name - The property name, which is a non-null fully-qualified URI.
object - The requested value for the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   Validator recognizes the property name but
   cannot set the requested value.
NullPointerException - When the name parameter is null.


"
4,Validator,5,Schema getSchema(),False,,NULL
5,ValidatorHandler,1,"void setFeature(String name, boolean value)",True,,"

setFeature
public void setFeature(String name,
                       boolean value)
                throws SAXNotRecognizedException,
                       SAXNotSupportedException
Set a feature for this ValidatorHandler.
Feature can be used to control the way a
 ValidatorHandler parses schemas. The feature name is
 any fully-qualified URI. It is possible for a
 SchemaFactory to
 expose a feature value but to be unable to change the current
 value. Some feature values may be immutable or mutable only in
 specific contexts, such as before, during, or after a
 validation.
All implementations are required to support the XMLConstants.FEATURE_SECURE_PROCESSING feature.
 When the feature is:


true: the implementation will limit XML processing to conform to implementation limits.
     Examples include enity expansion limits and XML Schema constructs that would consume large amounts of resources.
     If XML processing is limited for security reasons, it will be reported via a call to the registered
    ErrorHandler.fatalError(SAXParseException exception).
     See setErrorHandler(ErrorHandler errorHandler).
   

false: the implementation will processing XML according to the XML specifications without
     regard to possible implementation limits.
   


Parameters:
name - The feature name, which is a non-null fully-qualified URI.
value - The requested value of the feature (true or false).
Throws:
SAXNotRecognizedException - If the feature
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   ValidatorHandler recognizes the feature name but
   cannot set the requested value.
NullPointerException - When name is null.
See Also:
getFeature(String)


"
5,ValidatorHandler,2,"void setProperty(String name, Object value)",True,,"

setProperty
public void setProperty(String name,
                        Object object)
                 throws SAXNotRecognizedException,
                        SAXNotSupportedException
Set the value of a property.

 The property name is any fully-qualified URI.  It is
 possible for a ValidatorHandler to recognize a property name but
 to be unable to change the current value.
 Some property values may be immutable or mutable only
 in specific contexts, such as before, during, or after
 a validation.
ValidatorHandlers are not required to recognize setting
 any specific property names.

Parameters:
name - The property name, which is a non-null fully-qualified URI.
object - The requested value for the property.
Throws:
SAXNotRecognizedException - If the property
   value can't be assigned or retrieved.
SAXNotSupportedException - When the
   ValidatorHandler recognizes the property name but
   cannot set the requested value.
NullPointerException - When name is null.


"
5,ValidatorHandler,3,void setContentHandler(ContentHandler receiver),True,,"

setContentHandler
public abstract void setContentHandler(ContentHandler receiver)
Sets the ContentHandler which receives
 the augmented validation result.

 
 When a ContentHandler is specified, a
 ValidatorHandler will work as a filter
 and basically copy the incoming events to the
 specified ContentHandler.

 
 In doing so, a ValidatorHandler may modify
 the events, for example by adding defaulted attributes.

 
 A ValidatorHandler may buffer events to certain
 extent, but to allow ValidatorHandler to be used
 by a parser, the following requirement has to be met.

 
When
      ContentHandler.startElement(String, String, String, Attributes),
      ContentHandler.endElement(String, String, String),
      ContentHandler.startDocument(), or
      ContentHandler.endDocument()
      are invoked on a ValidatorHandler,
      the same method on the user-specified ContentHandler
      must be invoked for the same event before the callback
      returns.
  ValidatorHandler may not introduce new elements that
      were not present in the input.

  ValidatorHandler may not remove attributes that were
      present in the input.
 

 When a callback method on the specified ContentHandler
 throws an exception, the same exception object must be thrown
 from the ValidatorHandler. The ErrorHandler
 should not be notified of such an exception.

 
 This method can be called even during a middle of a validation.

Parameters:
receiver - A ContentHandler or a null value.


"
5,ValidatorHandler,4,void setErrorHandler(ErrorHandler errorHandler),True,,"

setErrorHandler
public abstract void setErrorHandler(ErrorHandler errorHandler)
Sets the ErrorHandler to receive errors encountered
 during the validation.

 
 Error handler can be used to customize the error handling process
 during a validation. When an ErrorHandler is set,
 errors found during the validation will be first sent
 to the ErrorHandler.

 
 The error handler can abort further validation immediately
 by throwing SAXException from the handler. Or for example
 it can print an error to the screen and try to continue the
 validation by returning normally from the ErrorHandler

 If any Throwable is thrown from an ErrorHandler,
 the same Throwable object will be thrown toward the
 root of the call stack.

 
ValidatorHandler is not allowed to
 throw SAXException without first reporting it to
 ErrorHandler.

 
 When the ErrorHandler is null, the implementation will
 behave as if the following ErrorHandler is set:
 
 class DraconianErrorHandler implements ErrorHandler {
     public void fatalError( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void error( SAXParseException e ) throws SAXException {
         throw e;
     }
     public void warning( SAXParseException e ) throws SAXException {
         // noop
     }
 }
 

 When a new ValidatorHandler object is created, initially
 this field is set to null.

Parameters:
errorHandler - A new error handler to be set. This parameter can be null.


"
5,ValidatorHandler,5,void setResourceResolver(LSResourceResolver resourceResolver),True,,"

setResourceResolver
public abstract void setResourceResolver(LSResourceResolver resourceResolver)
Sets the LSResourceResolver to customize
 resource resolution while in a validation episode.

 
ValidatorHandler uses a LSResourceResolver
 when it needs to locate external resources while a validation,
 although exactly what constitutes ""locating external resources"" is
 up to each schema language.

 
 When the LSResourceResolver is null, the implementation will
 behave as if the following LSResourceResolver is set:
 
 class DumbLSResourceResolver implements LSResourceResolver {
     public LSInput resolveResource(
         String publicId, String systemId, String baseURI) {

         return null; // always return null
     }
 }
 

 If a LSResourceResolver throws a RuntimeException
  (or instances of its derived classes),
 then the ValidatorHandler will abort the parsing and
 the caller of the validate method will receive
 the same RuntimeException.

 
 When a new ValidatorHandler object is created, initially
 this field is set to null.

Parameters:
resourceResolver - A new resource resolver to be set. This parameter can be null.


"
