ClassName,Method,Return Type,Description,Full Description
EventReaderDelegate,close(),void,Frees any resources associated with this Reader.,"

close
public void close()
           throws XMLStreamException
Description copied from interface: XMLEventReader
Frees any resources associated with this Reader.  This method does not close the
 underlying input source.

Specified by:
close in interface XMLEventReader
Throws:
XMLStreamException - if there are errors freeing associated resources


"
EventReaderDelegate,getElementText(),String,Reads the content of a text-only element.,"

getElementText
public String getElementText()
                      throws XMLStreamException
Description copied from interface: XMLEventReader
Reads the content of a text-only element. Precondition:
 the current event is START_ELEMENT. Postcondition:
 The current event is the corresponding END_ELEMENT.

Specified by:
getElementText in interface XMLEventReader
Throws:
XMLStreamException - if the current event is not a START_ELEMENT
 or if a non text element is encountered


"
EventReaderDelegate,getParent(),XMLEventReader,Get the parent of this instance.,"

getParent
public XMLEventReader getParent()
Get the parent of this instance.

Returns:
the parent or null if none is set


"
EventReaderDelegate,getProperty(String name),Object,Get the value of a feature/property from the underlying implementation,"

getProperty
public Object getProperty(String name)
                   throws IllegalArgumentException
Description copied from interface: XMLEventReader
Get the value of a feature/property from the underlying implementation

Specified by:
getProperty in interface XMLEventReader
Parameters:
name - The name of the property
Returns:
The value of the property
Throws:
IllegalArgumentException - if the property is not supported


"
EventReaderDelegate,hasNext(),boolean,Check if there are more events.,"

hasNext
public boolean hasNext()
Description copied from interface: XMLEventReader
Check if there are more events.
 Returns true if there are more events and false otherwise.

Specified by:
hasNext in interface Iterator
Specified by:
hasNext in interface XMLEventReader
Returns:
true if the event reader has more events, false otherwise


"
EventReaderDelegate,next(),Object,Returns the next element in the iteration.,"

next
public Object next()
Description copied from interface: Iterator
Returns the next element in the iteration.

Specified by:
next in interface Iterator
Returns:
the next element in the iteration


"
EventReaderDelegate,nextEvent(),XMLEvent,Get the next XMLEvent,"

nextEvent
public XMLEvent nextEvent()
                   throws XMLStreamException
Description copied from interface: XMLEventReader
Get the next XMLEvent

Specified by:
nextEvent in interface XMLEventReader
Throws:
XMLStreamException - if there is an error with the underlying XML.
See Also:
XMLEvent


"
EventReaderDelegate,nextTag(),XMLEvent,Skips any insignificant space events until a START_ELEMENT or END_ELEMENT is reached.,"

nextTag
public XMLEvent nextTag()
                 throws XMLStreamException
Description copied from interface: XMLEventReader
Skips any insignificant space events until a START_ELEMENT or
 END_ELEMENT is reached. If anything other than space characters are
 encountered, an exception is thrown. This method should
 be used when processing element-only content because
 the parser is not able to recognize ignorable whitespace if
 the DTD is missing or not interpreted.

Specified by:
nextTag in interface XMLEventReader
Throws:
XMLStreamException - if anything other than space characters are encountered


"
EventReaderDelegate,peek(),XMLEvent,Check the next XMLEvent without reading it from the stream.,"

peek
public XMLEvent peek()
              throws XMLStreamException
Description copied from interface: XMLEventReader
Check the next XMLEvent without reading it from the stream.
 Returns null if the stream is at EOF or has no more XMLEvents.
 A call to peek() will be equal to the next return of next().

Specified by:
peek in interface XMLEventReader
Throws:
XMLStreamException
See Also:
XMLEvent


"
EventReaderDelegate,remove(),void,Removes from the underlying collection the last element returned by this iterator (optional operation).,"

remove
public void remove()
Description copied from interface: Iterator
Removes from the underlying collection the last element returned
 by this iterator (optional operation).  This method can be called
 only once per call to Iterator.next().  The behavior of an iterator
 is unspecified if the underlying collection is modified while the
 iteration is in progress in any way other than by calling this
 method.

Specified by:
remove in interface Iterator


"
EventReaderDelegate,setParent(XMLEventReader reader),void,Set the parent of this instance.,"

setParent
public void setParent(XMLEventReader reader)
Set the parent of this instance.

Parameters:
reader - the new parent


"
StreamReaderDelegate,close(),void,Frees any resources associated with this Reader.,"

close
public void close()
           throws XMLStreamException
Description copied from interface: XMLStreamReader
Frees any resources associated with this Reader.  This method does not close the
 underlying input source.

Specified by:
close in interface XMLStreamReader
Throws:
XMLStreamException - if there are errors freeing associated resources


"
StreamReaderDelegate,getAttributeCount(),int,"Returns the count of attributes on this START_ELEMENT, this method is only valid on a START_ELEMENT or ATTRIBUTE.","

getAttributeCount
public int getAttributeCount()
Description copied from interface: XMLStreamReader
Returns the count of attributes on this START_ELEMENT,
 this method is only valid on a START_ELEMENT or ATTRIBUTE.  This
 count excludes namespace definitions.  Attribute indices are
 zero-based.

Specified by:
getAttributeCount in interface XMLStreamReader
Returns:
returns the number of attributes


"
StreamReaderDelegate,getAttributeLocalName(int index),String,Returns the localName of the attribute at the provided index,"

getAttributeLocalName
public String getAttributeLocalName(int index)
Description copied from interface: XMLStreamReader
Returns the localName of the attribute at the provided
 index

Specified by:
getAttributeLocalName in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the localName of the attribute


"
StreamReaderDelegate,getAttributeName(int index),QName,Returns the qname of the attribute at the provided index,"

getAttributeName
public QName getAttributeName(int index)
Description copied from interface: XMLStreamReader
Returns the qname of the attribute at the provided index

Specified by:
getAttributeName in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the QName of the attribute


"
StreamReaderDelegate,getAttributeNamespace(int index),String,Returns the namespace of the attribute at the provided index,"

getAttributeNamespace
public String getAttributeNamespace(int index)
Description copied from interface: XMLStreamReader
Returns the namespace of the attribute at the provided
 index

Specified by:
getAttributeNamespace in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the namespace URI (can be null)


"
StreamReaderDelegate,getAttributePrefix(int index),String,Returns the prefix of this attribute at the provided index,"

getAttributePrefix
public String getAttributePrefix(int index)
Description copied from interface: XMLStreamReader
Returns the prefix of this attribute at the
 provided index

Specified by:
getAttributePrefix in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the prefix of the attribute


"
StreamReaderDelegate,getAttributeType(int index),String,Returns the XML type of the attribute at the provided index,"

getAttributeType
public String getAttributeType(int index)
Description copied from interface: XMLStreamReader
Returns the XML type of the attribute at the provided
 index

Specified by:
getAttributeType in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the XML type of the attribute


"
StreamReaderDelegate,getAttributeValue(int index),String,Returns the value of the attribute at the index,"

getAttributeValue
public String getAttributeValue(int index)
Description copied from interface: XMLStreamReader
Returns the value of the attribute at the
 index

Specified by:
getAttributeValue in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
the attribute value


"
StreamReaderDelegate,"getAttributeValue(String namespaceUri, String localName)",String,Returns the normalized attribute value of the attribute with the namespace and localName If the namespaceURI is null the namespace is not checked for equality,"

getAttributeValue
public String getAttributeValue(String namespaceUri,
                                String localName)
Description copied from interface: XMLStreamReader
Returns the normalized attribute value of the
 attribute with the namespace and localName
 If the namespaceURI is null the namespace
 is not checked for equality

Specified by:
getAttributeValue in interface XMLStreamReader
Parameters:
namespaceUri - the namespace of the attribute
localName - the local name of the attribute, cannot be null
Returns:
returns the value of the attribute , returns null if not found


"
StreamReaderDelegate,getCharacterEncodingScheme(),String,Returns the character encoding declared on the xml declaration Returns null if none was declared,"

getCharacterEncodingScheme
public String getCharacterEncodingScheme()
Description copied from interface: XMLStreamReader
Returns the character encoding declared on the xml declaration
 Returns null if none was declared

Specified by:
getCharacterEncodingScheme in interface XMLStreamReader
Returns:
the encoding declared in the document or null


"
StreamReaderDelegate,getElementText(),String,"Reads the content of a text-only element, an exception is thrown if this is not a text-only element.","

getElementText
public String getElementText()
                      throws XMLStreamException
Description copied from interface: XMLStreamReader
Reads the content of a text-only element, an exception is thrown if this is
 not a text-only element.
 Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content.
  Precondition: the current event is START_ELEMENT.
  Postcondition: the current event is the corresponding END_ELEMENT.

 The method does the following (implementations are free to optimized
 but must do equivalent processing):
 
 if(getEventType() != XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 ""parser must be on START_ELEMENT to read next text"", getLocation());
 }
 int eventType = next();
 StringBuffer content = new StringBuffer();
 while(eventType != XMLStreamConstants.END_ELEMENT ) {
 if(eventType == XMLStreamConstants.CHARACTERS
 || eventType == XMLStreamConstants.CDATA
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.ENTITY_REFERENCE) {
 buf.append(getText());
 } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT) {
 // skipping
 } else if(eventType == XMLStreamConstants.END_DOCUMENT) {
 throw new XMLStreamException(
 ""unexpected end of document when reading element text content"", this);
 } else if(eventType == XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 ""element text content may not contain START_ELEMENT"", getLocation());
 } else {
 throw new XMLStreamException(
 ""Unexpected event type ""+eventType, getLocation());
 }
 eventType = next();
 }
 return buf.toString();
 

Specified by:
getElementText in interface XMLStreamReader
Throws:
XMLStreamException - if the current event is not a START_ELEMENT
 or if a non text element is encountered


"
StreamReaderDelegate,getEncoding(),String,Return input encoding if known or null if unknown.,"

getEncoding
public String getEncoding()
Description copied from interface: XMLStreamReader
Return input encoding if known or null if unknown.

Specified by:
getEncoding in interface XMLStreamReader
Returns:
the encoding of this instance or null


"
StreamReaderDelegate,getEventType(),int,Returns an integer code that indicates the type of the event the cursor is pointing to.,"

getEventType
public int getEventType()
Description copied from interface: XMLStreamReader
Returns an integer code that indicates the type
 of the event the cursor is pointing to.

Specified by:
getEventType in interface XMLStreamReader


"
StreamReaderDelegate,getLocalName(),String,Returns the (local) name of the current event.,"

getLocalName
public String getLocalName()
Description copied from interface: XMLStreamReader
Returns the (local) name of the current event.
 For START_ELEMENT or END_ELEMENT returns the (local) name of the current element.
 For ENTITY_REFERENCE it returns entity name.
 The current event must be START_ELEMENT or END_ELEMENT,
 or ENTITY_REFERENCE

Specified by:
getLocalName in interface XMLStreamReader
Returns:
the localName


"
StreamReaderDelegate,getLocation(),Location,Return the current location of the processor.,"

getLocation
public Location getLocation()
Description copied from interface: XMLStreamReader
Return the current location of the processor.
 If the Location is unknown the processor should return
 an implementation of Location that returns -1 for the
 location and null for the publicId and systemId.
 The location information is only valid until next() is
 called.

Specified by:
getLocation in interface XMLStreamReader


"
StreamReaderDelegate,getName(),QName,Returns a QName for the current START_ELEMENT or END_ELEMENT event,"

getName
public QName getName()
Description copied from interface: XMLStreamReader
Returns a QName for the current START_ELEMENT or END_ELEMENT event

Specified by:
getName in interface XMLStreamReader
Returns:
the QName for the current START_ELEMENT or END_ELEMENT event


"
StreamReaderDelegate,getNamespaceContext(),NamespaceContext,Returns a read only namespace context for the current position.,"

getNamespaceContext
public NamespaceContext getNamespaceContext()
Description copied from interface: XMLStreamReader
Returns a read only namespace context for the current
 position.  The context is transient and only valid until
 a call to next() changes the state of the reader.

Specified by:
getNamespaceContext in interface XMLStreamReader
Returns:
return a namespace context


"
StreamReaderDelegate,getNamespaceCount(),int,"Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT, this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE.","

getNamespaceCount
public int getNamespaceCount()
Description copied from interface: XMLStreamReader
Returns the count of namespaces declared on this START_ELEMENT or END_ELEMENT,
 this method is only valid on a START_ELEMENT, END_ELEMENT or NAMESPACE. On
 an END_ELEMENT the count is of the namespaces that are about to go
 out of scope.  This is the equivalent of the information reported
 by SAX callback for an end element event.

Specified by:
getNamespaceCount in interface XMLStreamReader
Returns:
returns the number of namespace declarations on this specific element


"
StreamReaderDelegate,getNamespacePrefix(int index),String,Returns the prefix for the namespace declared at the index.,"

getNamespacePrefix
public String getNamespacePrefix(int index)
Description copied from interface: XMLStreamReader
Returns the prefix for the namespace declared at the
 index.  Returns null if this is the default namespace
 declaration

Specified by:
getNamespacePrefix in interface XMLStreamReader
Parameters:
index - the position of the namespace declaration
Returns:
returns the namespace prefix


"
StreamReaderDelegate,getNamespaceURI(),String,If the current event is a START_ELEMENT or END_ELEMENT this method returns the URI of the prefix or the default namespace.,"

getNamespaceURI
public String getNamespaceURI()
Description copied from interface: XMLStreamReader
If the current event is a START_ELEMENT or END_ELEMENT  this method
 returns the URI of the prefix or the default namespace.
 Returns null if the event does not have a prefix.

Specified by:
getNamespaceURI in interface XMLStreamReader
Returns:
the URI bound to this elements prefix, the default namespace, or null


"
StreamReaderDelegate,getNamespaceURI(int index),String,Returns the uri for the namespace declared at the index.,"

getNamespaceURI
public String getNamespaceURI(int index)
Description copied from interface: XMLStreamReader
Returns the uri for the namespace declared at the
 index.

Specified by:
getNamespaceURI in interface XMLStreamReader
Parameters:
index - the position of the namespace declaration
Returns:
returns the namespace uri


"
StreamReaderDelegate,getNamespaceURI(String prefix),String,Return the uri for the given prefix.,"

getNamespaceURI
public String getNamespaceURI(String prefix)
Description copied from interface: XMLStreamReader
Return the uri for the given prefix.
 The uri returned depends on the current state of the processor.

 NOTE:The 'xml' prefix is bound as defined in
 Namespaces in XML
 specification to ""http://www.w3.org/XML/1998/namespace"".

 NOTE: The 'xmlns' prefix must be resolved to following namespace
 http://www.w3.org/2000/xmlns/

Specified by:
getNamespaceURI in interface XMLStreamReader
Parameters:
prefix - The prefix to lookup, may not be null
Returns:
the uri bound to the given prefix or null if it is not bound


"
StreamReaderDelegate,getParent(),XMLStreamReader,Get the parent of this instance.,"

getParent
public XMLStreamReader getParent()
Get the parent of this instance.

Returns:
the parent or null if none is set


"
StreamReaderDelegate,getPIData(),String,Get the data section of a processing instruction,"

getPIData
public String getPIData()
Description copied from interface: XMLStreamReader
Get the data section of a processing instruction

Specified by:
getPIData in interface XMLStreamReader
Returns:
the data or null


"
StreamReaderDelegate,getPITarget(),String,Get the target of a processing instruction,"

getPITarget
public String getPITarget()
Description copied from interface: XMLStreamReader
Get the target of a processing instruction

Specified by:
getPITarget in interface XMLStreamReader
Returns:
the target or null


"
StreamReaderDelegate,getPrefix(),String,Returns the prefix of the current event or null if the event does not have a prefix,"

getPrefix
public String getPrefix()
Description copied from interface: XMLStreamReader
Returns the prefix of the current event or null if the event does not have a prefix

Specified by:
getPrefix in interface XMLStreamReader
Returns:
the prefix or null


"
StreamReaderDelegate,getProperty(String name),Object,Get the value of a feature/property from the underlying implementation,"

getProperty
public Object getProperty(String name)
Description copied from interface: XMLStreamReader
Get the value of a feature/property from the underlying implementation

Specified by:
getProperty in interface XMLStreamReader
Parameters:
name - The name of the property, may not be null
Returns:
The value of the property


"
StreamReaderDelegate,getText(),String,"Returns the current value of the parse event as a string, this returns the string value of a CHARACTERS event, returns the value of a COMMENT, the replacement value for an ENTITY_REFERENCE, the string value of a CDATA section, the string value for a SPACE event, or the String value of the internal subset of the DTD.","

getText
public String getText()
Description copied from interface: XMLStreamReader
Returns the current value of the parse event as a string,
 this returns the string value of a CHARACTERS event,
 returns the value of a COMMENT, the replacement value
 for an ENTITY_REFERENCE, the string value of a CDATA section,
 the string value for a SPACE event,
 or the String value of the internal subset of the DTD.
 If an ENTITY_REFERENCE has been resolved, any character data
 will be reported as CHARACTERS events.

Specified by:
getText in interface XMLStreamReader
Returns:
the current text or null


"
StreamReaderDelegate,getTextCharacters(),char[],Returns an array which contains the characters from this event.,"

getTextCharacters
public char[] getTextCharacters()
Description copied from interface: XMLStreamReader
Returns an array which contains the characters from this event.
 This array should be treated as read-only and transient. I.e. the array will
 contain the text characters until the XMLStreamReader moves on to the next event.
 Attempts to hold onto the character array beyond that time or modify the
 contents of the array are breaches of the contract for this interface.

Specified by:
getTextCharacters in interface XMLStreamReader
Returns:
the current text or an empty array


"
StreamReaderDelegate,"getTextCharacters(int sourceStart, char[] target, int targetStart, int length)",int,"Gets the the text associated with a CHARACTERS, SPACE or CDATA event.","

getTextCharacters
public int getTextCharacters(int sourceStart,
                             char[] target,
                             int targetStart,
                             int length)
                      throws XMLStreamException
Description copied from interface: XMLStreamReader
Gets the the text associated with a CHARACTERS, SPACE or CDATA event.
 Text starting a ""sourceStart"" is copied into ""target"" starting at ""targetStart"".
 Up to ""length"" characters are copied.  The number of characters actually copied is returned.

 The ""sourceStart"" argument must be greater or equal to 0 and less than or equal to
 the number of characters associated with the event.  Usually, one requests text starting at a ""sourceStart"" of 0.
 If the number of characters actually copied is less than the ""length"", then there is no more text.
 Otherwise, subsequent calls need to be made until all text has been retrieved. For example:


 int length = 1024;
 char[] myBuffer = new char[ length ];

 for ( int sourceStart = 0 ; ; sourceStart += length )
 {
    int nCopied = stream.getTextCharacters( sourceStart, myBuffer, 0, length );

   if (nCopied < length)
       break;
 }
 
 XMLStreamException may be thrown if there are any XML errors in the underlying source.
 The ""targetStart"" argument must be greater than or equal to 0 and less than the length of ""target"",
 Length must be greater than 0 and ""targetStart + length"" must be less than or equal to length of ""target"".

Specified by:
getTextCharacters in interface XMLStreamReader
Parameters:
sourceStart - the index of the first character in the source array to copy
target - the destination array
targetStart - the start offset in the target array
length - the number of characters to copy
Returns:
the number of characters actually copied
Throws:
XMLStreamException - if the underlying XML source is not well-formed


"
StreamReaderDelegate,getTextLength(),int,Returns the length of the sequence of characters for this Text event within the text character array.,"

getTextLength
public int getTextLength()
Description copied from interface: XMLStreamReader
Returns the length of the sequence of characters for this
 Text event within the text character array.

Specified by:
getTextLength in interface XMLStreamReader


"
StreamReaderDelegate,getTextStart(),int,Returns the offset into the text character array where the first character (of this text event) is stored.,"

getTextStart
public int getTextStart()
Description copied from interface: XMLStreamReader
Returns the offset into the text character array where the first
 character (of this text event) is stored.

Specified by:
getTextStart in interface XMLStreamReader


"
StreamReaderDelegate,getVersion(),String,Get the xml version declared on the xml declaration Returns null if none was declared,"

getVersion
public String getVersion()
Description copied from interface: XMLStreamReader
Get the xml version declared on the xml declaration
 Returns null if none was declared

Specified by:
getVersion in interface XMLStreamReader
Returns:
the XML version or null


"
StreamReaderDelegate,hasName(),boolean,returns true if the current event has a name (is a START_ELEMENT or END_ELEMENT) returns false otherwise,"

hasName
public boolean hasName()
Description copied from interface: XMLStreamReader
returns true if the current event has a name (is a START_ELEMENT or END_ELEMENT)
 returns false otherwise

Specified by:
hasName in interface XMLStreamReader


"
StreamReaderDelegate,hasNext(),boolean,Returns true if there are more parsing events and false if there are no more events.,"

hasNext
public boolean hasNext()
                throws XMLStreamException
Description copied from interface: XMLStreamReader
Returns true if there are more parsing events and false
 if there are no more events.  This method will return
 false if the current state of the XMLStreamReader is
 END_DOCUMENT

Specified by:
hasNext in interface XMLStreamReader
Returns:
true if there are more events, false otherwise
Throws:
XMLStreamException - if there is a fatal error detecting the next state


"
StreamReaderDelegate,hasText(),boolean,"Return true if the current event has text, false otherwise The following events have text: CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE","

hasText
public boolean hasText()
Description copied from interface: XMLStreamReader
Return true if the current event has text, false otherwise
 The following events have text:
 CHARACTERS,DTD ,ENTITY_REFERENCE, COMMENT, SPACE

Specified by:
hasText in interface XMLStreamReader


"
StreamReaderDelegate,isAttributeSpecified(int index),boolean,Returns a boolean which indicates if this attribute was created by default,"

isAttributeSpecified
public boolean isAttributeSpecified(int index)
Description copied from interface: XMLStreamReader
Returns a boolean which indicates if this
 attribute was created by default

Specified by:
isAttributeSpecified in interface XMLStreamReader
Parameters:
index - the position of the attribute
Returns:
true if this is a default attribute


"
StreamReaderDelegate,isCharacters(),boolean,Returns true if the cursor points to a character data event,"

isCharacters
public boolean isCharacters()
Description copied from interface: XMLStreamReader
Returns true if the cursor points to a character data event

Specified by:
isCharacters in interface XMLStreamReader
Returns:
true if the cursor points to character data, false otherwise


"
StreamReaderDelegate,isEndElement(),boolean,Returns true if the cursor points to an end tag (otherwise false),"

isEndElement
public boolean isEndElement()
Description copied from interface: XMLStreamReader
Returns true if the cursor points to an end tag (otherwise false)

Specified by:
isEndElement in interface XMLStreamReader
Returns:
true if the cursor points to an end tag, false otherwise


"
StreamReaderDelegate,isStandalone(),boolean,Get the standalone declaration from the xml declaration,"

isStandalone
public boolean isStandalone()
Description copied from interface: XMLStreamReader
Get the standalone declaration from the xml declaration

Specified by:
isStandalone in interface XMLStreamReader
Returns:
true if this is standalone, or false otherwise


"
StreamReaderDelegate,isStartElement(),boolean,Returns true if the cursor points to a start tag (otherwise false),"

isStartElement
public boolean isStartElement()
Description copied from interface: XMLStreamReader
Returns true if the cursor points to a start tag (otherwise false)

Specified by:
isStartElement in interface XMLStreamReader
Returns:
true if the cursor points to a start tag, false otherwise


"
StreamReaderDelegate,isWhiteSpace(),boolean,Returns true if the cursor points to a character data event that consists of all whitespace,"

isWhiteSpace
public boolean isWhiteSpace()
Description copied from interface: XMLStreamReader
Returns true if the cursor points to a character data event
 that consists of all whitespace

Specified by:
isWhiteSpace in interface XMLStreamReader
Returns:
true if the cursor points to all whitespace, false otherwise


"
StreamReaderDelegate,next(),int,"Get next parsing event - a processor may return all contiguous character data in a single chunk, or it may split it into several chunks.","

next
public int next()
         throws XMLStreamException
Description copied from interface: XMLStreamReader
Get next parsing event - a processor may return all contiguous
 character data in a single chunk, or it may split it into several chunks.
 If the property javax.xml.stream.isCoalescing is set to true
 element content must be coalesced and only one CHARACTERS event
 must be returned for contiguous element content or
 CDATA Sections.

 By default entity references must be
 expanded and reported transparently to the application.
 An exception will be thrown if an entity reference cannot be expanded.
 If element content is empty (i.e. content is """") then no CHARACTERS event will be reported.

 Given the following XML:
 <foo><!--description-->content text<![CDATA[<greeting>Hello</greeting>]]>other content</foo>
 The behavior of calling next() when being on foo will be:
 1- the comment (COMMENT)
 2- then the characters section (CHARACTERS)
 3- then the CDATA section (another CHARACTERS)
 4- then the next characters section (another CHARACTERS)
 5- then the END_ELEMENT
NOTE: empty element (such as <tag/>) will be reported
  with  two separate events: START_ELEMENT, END_ELEMENT - This preserves
   parsing equivalency of empty element to <tag></tag>.

 This method will throw an IllegalStateException if it is called after hasNext() returns false.

Specified by:
next in interface XMLStreamReader
Returns:
the integer code corresponding to the current parse event
Throws:
XMLStreamException - if there is an error processing the underlying XML source
See Also:
XMLEvent


"
StreamReaderDelegate,nextTag(),int,"Skips any white space (isWhiteSpace() returns true), COMMENT, or PROCESSING_INSTRUCTION, until a START_ELEMENT or END_ELEMENT is reached.","

nextTag
public int nextTag()
            throws XMLStreamException
Description copied from interface: XMLStreamReader
Skips any white space (isWhiteSpace() returns true), COMMENT,
 or PROCESSING_INSTRUCTION,
 until a START_ELEMENT or END_ELEMENT is reached.
 If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT
 are encountered, an exception is thrown. This method should
 be used when processing element-only content seperated by white space.

  Precondition: none
  Postcondition: the current event is START_ELEMENT or END_ELEMENT
 and cursor may have moved over any whitespace event.

 Essentially it does the following (implementations are free to optimized
 but must do equivalent processing):
 
 int eventType = next();
 while((eventType == XMLStreamConstants.CHARACTERS && isWhiteSpace()) // skip whitespace
 || (eventType == XMLStreamConstants.CDATA && isWhiteSpace())
 // skip whitespace
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT
 ) {
 eventType = next();
 }
 if (eventType != XMLStreamConstants.START_ELEMENT && eventType != XMLStreamConstants.END_ELEMENT) {
 throw new String XMLStreamException(""expected start or end tag"", getLocation());
 }
 return eventType;
 

Specified by:
nextTag in interface XMLStreamReader
Returns:
the event type of the element read (START_ELEMENT or END_ELEMENT)
Throws:
XMLStreamException - if the current event is not white space, PROCESSING_INSTRUCTION,
 START_ELEMENT or END_ELEMENT


"
StreamReaderDelegate,"require(int type, String namespaceURI, String localName)",void,Test if the current event is of the given type and if the namespace and name match the current namespace and name of the current event.,"

require
public void require(int type,
                    String namespaceURI,
                    String localName)
             throws XMLStreamException
Description copied from interface: XMLStreamReader
Test if the current event is of the given type and if the namespace and name match the current
 namespace and name of the current event.  If the namespaceURI is null it is not checked for equality,
 if the localName is null it is not checked for equality.

Specified by:
require in interface XMLStreamReader
Parameters:
type - the event type
namespaceURI - the uri of the event, may be null
localName - the localName of the event, may be null
Throws:
XMLStreamException - if the required values are not matched.


"
StreamReaderDelegate,setParent(XMLStreamReader reader),void,Set the parent of this instance.,"

setParent
public void setParent(XMLStreamReader reader)
Set the parent of this instance.

Parameters:
reader - the new parent


"
StreamReaderDelegate,standaloneSet(),boolean,Checks if standalone was set in the document,"

standaloneSet
public boolean standaloneSet()
Description copied from interface: XMLStreamReader
Checks if standalone was set in the document

Specified by:
standaloneSet in interface XMLStreamReader
Returns:
true if standalone was set in the document, or false otherwise


"
