Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,EventReaderDelegate,1,XMLEvent nextEvent(),True,,"

nextEvent
public XMLEvent nextEvent()
                   throws XMLStreamException
Description copied from interface: XMLEventReader
Get the next XMLEvent

Specified by:
nextEvent in interface XMLEventReader
Throws:
XMLStreamException - if there is an error with the underlying XML.
See Also:
XMLEvent


"
0,EventReaderDelegate,2,boolean hasNext(),True,,"

hasNext
public boolean hasNext()
Description copied from interface: XMLEventReader
Check if there are more events.
 Returns true if there are more events and false otherwise.

Specified by:
hasNext in interface Iterator
Specified by:
hasNext in interface XMLEventReader
Returns:
true if the event reader has more events, false otherwise


"
0,EventReaderDelegate,3,XMLEvent peek(),True,,"

peek
public XMLEvent peek()
              throws XMLStreamException
Description copied from interface: XMLEventReader
Check the next XMLEvent without reading it from the stream.
 Returns null if the stream is at EOF or has no more XMLEvents.
 A call to peek() will be equal to the next return of next().

Specified by:
peek in interface XMLEventReader
Throws:
XMLStreamException
See Also:
XMLEvent


"
0,EventReaderDelegate,4,void setParent(XMLEventReader parent),True,,"

setParent
public void setParent(XMLEventReader reader)
Set the parent of this instance.

Parameters:
reader - the new parent


"
0,EventReaderDelegate,5,void setParent(XMLEventReader parent),True,,"

setParent
public void setParent(XMLEventReader reader)
Set the parent of this instance.

Parameters:
reader - the new parent


"
1,StreamReaderDelegate,1,int next(),True,,"

next
public int next()
         throws XMLStreamException
Description copied from interface: XMLStreamReader
Get next parsing event - a processor may return all contiguous
 character data in a single chunk, or it may split it into several chunks.
 If the property javax.xml.stream.isCoalescing is set to true
 element content must be coalesced and only one CHARACTERS event
 must be returned for contiguous element content or
 CDATA Sections.

 By default entity references must be
 expanded and reported transparently to the application.
 An exception will be thrown if an entity reference cannot be expanded.
 If element content is empty (i.e. content is """") then no CHARACTERS event will be reported.

 Given the following XML:
 <foo><!--description-->content text<![CDATA[<greeting>Hello</greeting>]]>other content</foo>
 The behavior of calling next() when being on foo will be:
 1- the comment (COMMENT)
 2- then the characters section (CHARACTERS)
 3- then the CDATA section (another CHARACTERS)
 4- then the next characters section (another CHARACTERS)
 5- then the END_ELEMENT
NOTE: empty element (such as <tag/>) will be reported
  with  two separate events: START_ELEMENT, END_ELEMENT - This preserves
   parsing equivalency of empty element to <tag></tag>.

 This method will throw an IllegalStateException if it is called after hasNext() returns false.

Specified by:
next in interface XMLStreamReader
Returns:
the integer code corresponding to the current parse event
Throws:
XMLStreamException - if there is an error processing the underlying XML source
See Also:
XMLEvent


"
1,StreamReaderDelegate,2,int nextTag(),True,,"

nextTag
public int nextTag()
            throws XMLStreamException
Description copied from interface: XMLStreamReader
Skips any white space (isWhiteSpace() returns true), COMMENT,
 or PROCESSING_INSTRUCTION,
 until a START_ELEMENT or END_ELEMENT is reached.
 If other than white space characters, COMMENT, PROCESSING_INSTRUCTION, START_ELEMENT, END_ELEMENT
 are encountered, an exception is thrown. This method should
 be used when processing element-only content seperated by white space.

  Precondition: none
  Postcondition: the current event is START_ELEMENT or END_ELEMENT
 and cursor may have moved over any whitespace event.

 Essentially it does the following (implementations are free to optimized
 but must do equivalent processing):
 
 int eventType = next();
 while((eventType == XMLStreamConstants.CHARACTERS && isWhiteSpace()) // skip whitespace
 || (eventType == XMLStreamConstants.CDATA && isWhiteSpace())
 // skip whitespace
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT
 ) {
 eventType = next();
 }
 if (eventType != XMLStreamConstants.START_ELEMENT && eventType != XMLStreamConstants.END_ELEMENT) {
 throw new String XMLStreamException(""expected start or end tag"", getLocation());
 }
 return eventType;
 

Specified by:
nextTag in interface XMLStreamReader
Returns:
the event type of the element read (START_ELEMENT or END_ELEMENT)
Throws:
XMLStreamException - if the current event is not white space, PROCESSING_INSTRUCTION,
 START_ELEMENT or END_ELEMENT


"
1,StreamReaderDelegate,3,String getElementText(),True,,"

getElementText
public String getElementText()
                      throws XMLStreamException
Description copied from interface: XMLStreamReader
Reads the content of a text-only element, an exception is thrown if this is
 not a text-only element.
 Regardless of value of javax.xml.stream.isCoalescing this method always returns coalesced content.
  Precondition: the current event is START_ELEMENT.
  Postcondition: the current event is the corresponding END_ELEMENT.

 The method does the following (implementations are free to optimized
 but must do equivalent processing):
 
 if(getEventType() != XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 ""parser must be on START_ELEMENT to read next text"", getLocation());
 }
 int eventType = next();
 StringBuffer content = new StringBuffer();
 while(eventType != XMLStreamConstants.END_ELEMENT ) {
 if(eventType == XMLStreamConstants.CHARACTERS
 || eventType == XMLStreamConstants.CDATA
 || eventType == XMLStreamConstants.SPACE
 || eventType == XMLStreamConstants.ENTITY_REFERENCE) {
 buf.append(getText());
 } else if(eventType == XMLStreamConstants.PROCESSING_INSTRUCTION
 || eventType == XMLStreamConstants.COMMENT) {
 // skipping
 } else if(eventType == XMLStreamConstants.END_DOCUMENT) {
 throw new XMLStreamException(
 ""unexpected end of document when reading element text content"", this);
 } else if(eventType == XMLStreamConstants.START_ELEMENT) {
 throw new XMLStreamException(
 ""element text content may not contain START_ELEMENT"", getLocation());
 } else {
 throw new XMLStreamException(
 ""Unexpected event type ""+eventType, getLocation());
 }
 eventType = next();
 }
 return buf.toString();
 

Specified by:
getElementText in interface XMLStreamReader
Throws:
XMLStreamException - if the current event is not a START_ELEMENT
 or if a non text element is encountered


"
1,StreamReaderDelegate,4,int getAttributeCount(),True,,"

getAttributeCount
public int getAttributeCount()
Description copied from interface: XMLStreamReader
Returns the count of attributes on this START_ELEMENT,
 this method is only valid on a START_ELEMENT or ATTRIBUTE.  This
 count excludes namespace definitions.  Attribute indices are
 zero-based.

Specified by:
getAttributeCount in interface XMLStreamReader
Returns:
returns the number of attributes


"
1,StreamReaderDelegate,5,String getLocalName(),True,,"

getLocalName
public String getLocalName()
Description copied from interface: XMLStreamReader
Returns the (local) name of the current event.
 For START_ELEMENT or END_ELEMENT returns the (local) name of the current element.
 For ENTITY_REFERENCE it returns entity name.
 The current event must be START_ELEMENT or END_ELEMENT,
 or ENTITY_REFERENCE

Specified by:
getLocalName in interface XMLStreamReader
Returns:
the localName


"
