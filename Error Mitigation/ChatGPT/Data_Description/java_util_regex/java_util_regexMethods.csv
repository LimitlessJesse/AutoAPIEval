ClassName,Method,Return Type,Description,Full Description
Matcher,"appendReplacement(StringBuffer sb, String replacement)",Matcher,Implements a non-terminal append-and-replace step.,"

appendReplacement
public Matcher appendReplacement(StringBuffer sb,
                                 String replacement)
Implements a non-terminal append-and-replace step.

  This method performs the following actions: 

 It reads characters from the input sequence, starting at the
   append position, and appends them to the given string buffer.  It
   stops after reading the last character preceding the previous match,
   that is, the character at index start() - 1.  
 It appends the given replacement string to the string buffer.
   
 It sets the append position of this matcher to the index of
   the last character matched, plus one, that is, to end().
   

 The replacement string may contain references to subsequences
 captured during the previous match: Each occurrence of
 ${name} or $g
 will be replaced by the result of evaluating the corresponding
 group(name) or group(g)
 respectively. For  $g,
 the first number after the $ is always treated as part of
 the group reference. Subsequent numbers are incorporated into g if
 they would form a legal group reference. Only the numerals '0'
 through '9' are considered as potential components of the group
 reference. If the second group matched the string ""foo"", for
 example, then passing the replacement string ""$2bar"" would
 cause ""foobar"" to be appended to the string buffer. A dollar
 sign ($) may be included as a literal in the replacement
 string by preceding it with a backslash (\$).

  Note that backslashes (\) and dollar signs ($) in
 the replacement string may cause the results to be different than if it
 were being treated as a literal replacement string. Dollar signs may be
 treated as references to captured subsequences as described above, and
 backslashes are used to escape literal characters in the replacement
 string.

  This method is intended to be used in a loop together with the
 appendTail and find methods.  The
 following code, for example, writes one dog two dogs in the
 yard to the standard-output stream: 

 Pattern p = Pattern.compile(""cat"");
 Matcher m = p.matcher(""one cat two cats in the yard"");
 StringBuffer sb = new StringBuffer();
 while (m.find()) {
     m.appendReplacement(sb, ""dog"");
 }
 m.appendTail(sb);
 System.out.println(sb.toString());

Parameters:
sb - The target string buffer
replacement - The replacement string
Returns:
This matcher
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IllegalArgumentException - If the replacement string refers to a named-capturing
          group that does not exist in the pattern
IndexOutOfBoundsException - If the replacement string refers to a capturing group
          that does not exist in the pattern


"
Matcher,appendTail(StringBuffer sb),StringBuffer,Implements a terminal append-and-replace step.,"

appendTail
public StringBuffer appendTail(StringBuffer sb)
Implements a terminal append-and-replace step.

  This method reads characters from the input sequence, starting at
 the append position, and appends them to the given string buffer.  It is
 intended to be invoked after one or more invocations of the appendReplacement method in order to copy the
 remainder of the input sequence.  

Parameters:
sb - The target string buffer
Returns:
The target string buffer


"
Matcher,end(),int,Returns the offset after the last character matched.,"

end
public int end()
Returns the offset after the last character matched.

Specified by:
end in interface MatchResult
Returns:
The offset after the last character matched
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
Matcher,end(int group),int,Returns the offset after the last character of the subsequence captured by the given group during the previous match operation.,"

end
public int end(int group)
Returns the offset after the last character of the subsequence
 captured by the given group during the previous match operation.

  Capturing groups are indexed from left
 to right, starting at one.  Group zero denotes the entire pattern, so
 the expression m.end(0) is equivalent to
 m.end().  

Specified by:
end in interface MatchResult
Parameters:
group - The index of a capturing group in this matcher's pattern
Returns:
The offset after the last character captured by the group,
          or -1 if the match was successful
          but the group itself did not match anything
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IndexOutOfBoundsException - If there is no capturing group in the pattern
          with the given index


"
Matcher,end(String name),int,Returns the offset after the last character of the subsequence captured by the given named-capturing group during the previous match operation.,"

end
public int end(String name)
Returns the offset after the last character of the subsequence
 captured by the given named-capturing
 group during the previous match operation.

Parameters:
name - The name of a named-capturing group in this matcher's pattern
Returns:
The offset after the last character captured by the group,
          or -1 if the match was successful
          but the group itself did not match anything
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IllegalArgumentException - If there is no capturing group in the pattern
          with the given name
Since:
1.8


"
Matcher,find(),boolean,Attempts to find the next subsequence of the input sequence that matches the pattern.,"

find
public boolean find()
Attempts to find the next subsequence of the input sequence that matches
 the pattern.

  This method starts at the beginning of this matcher's region, or, if
 a previous invocation of the method was successful and the matcher has
 not since been reset, at the first character not matched by the previous
 match.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, a subsequence of the input
          sequence matches this matcher's pattern


"
Matcher,find(int start),boolean,"Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern, starting at the specified index.","

find
public boolean find(int start)
Resets this matcher and then attempts to find the next subsequence of
 the input sequence that matches the pattern, starting at the specified
 index.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods, and subsequent
 invocations of the find() method will start at the first
 character not matched by this match.  

Parameters:
start - the index to start searching for a match
Returns:
true if, and only if, a subsequence of the input
          sequence starting at the given index matches this matcher's
          pattern
Throws:
IndexOutOfBoundsException - If start is less than zero or if start is greater than the
          length of the input sequence.


"
Matcher,group(),String,Returns the input subsequence matched by the previous match.,"

group
public String group()
Returns the input subsequence matched by the previous match.

  For a matcher m with input sequence s,
 the expressions m.group() and
 s.substring(m.start(), m.end())
 are equivalent.  
 Note that some patterns, for example a*, match the empty
 string.  This method will return the empty string when the pattern
 successfully matches the empty string in the input.  

Specified by:
group in interface MatchResult
Returns:
The (possibly empty) subsequence matched by the previous match,
         in string form
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
Matcher,group(int group),String,Returns the input subsequence captured by the given group during the previous match operation.,"

group
public String group(int group)
Returns the input subsequence captured by the given group during the
 previous match operation.

  For a matcher m, input sequence s, and group index
 g, the expressions m.group(g) and
 s.substring(m.start(g), m.end(g))
 are equivalent.  
 Capturing groups are indexed from left
 to right, starting at one.  Group zero denotes the entire pattern, so
 the expression m.group(0) is equivalent to m.group().
 
 If the match was successful but the group specified failed to match
 any part of the input sequence, then null is returned. Note
 that some groups, for example (a*), match the empty string.
 This method will return the empty string when such a group successfully
 matches the empty string in the input.  

Specified by:
group in interface MatchResult
Parameters:
group - The index of a capturing group in this matcher's pattern
Returns:
The (possibly empty) subsequence captured by the group
          during the previous match, or null if the group
          failed to match part of the input
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IndexOutOfBoundsException - If there is no capturing group in the pattern
          with the given index


"
Matcher,group(String name),String,Returns the input subsequence captured by the given named-capturing group during the previous match operation.,"

group
public String group(String name)
Returns the input subsequence captured by the given
 named-capturing group during the previous
 match operation.

  If the match was successful but the group specified failed to match
 any part of the input sequence, then null is returned. Note
 that some groups, for example (a*), match the empty string.
 This method will return the empty string when such a group successfully
 matches the empty string in the input.  

Parameters:
name - The name of a named-capturing group in this matcher's pattern
Returns:
The (possibly empty) subsequence captured by the named group
          during the previous match, or null if the group
          failed to match part of the input
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IllegalArgumentException - If there is no capturing group in the pattern
          with the given name
Since:
1.7


"
Matcher,groupCount(),int,Returns the number of capturing groups in this matcher's pattern.,"

groupCount
public int groupCount()
Returns the number of capturing groups in this matcher's pattern.

  Group zero denotes the entire pattern by convention. It is not
 included in this count.

  Any non-negative integer smaller than or equal to the value
 returned by this method is guaranteed to be a valid group index for
 this matcher.  

Specified by:
groupCount in interface MatchResult
Returns:
The number of capturing groups in this matcher's pattern


"
Matcher,hasAnchoringBounds(),boolean,Queries the anchoring of region bounds for this matcher.,"

hasAnchoringBounds
public boolean hasAnchoringBounds()
Queries the anchoring of region bounds for this matcher.

  This method returns true if this matcher uses
 anchoring bounds, false otherwise.

  See useAnchoringBounds for a
 description of anchoring bounds.

  By default, a matcher uses anchoring region boundaries.

Returns:
true iff this matcher is using anchoring bounds,
         false otherwise.
Since:
1.5
See Also:
useAnchoringBounds(boolean)


"
Matcher,hasTransparentBounds(),boolean,Queries the transparency of region bounds for this matcher.,"

hasTransparentBounds
public boolean hasTransparentBounds()
Queries the transparency of region bounds for this matcher.

  This method returns true if this matcher uses
 transparent bounds, false if it uses opaque
 bounds.

  See useTransparentBounds for a
 description of transparent and opaque bounds.

  By default, a matcher uses opaque region boundaries.

Returns:
true iff this matcher is using transparent bounds,
         false otherwise.
Since:
1.5
See Also:
useTransparentBounds(boolean)


"
Matcher,hitEnd(),boolean,Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher.,"

hitEnd
public boolean hitEnd()
Returns true if the end of input was hit by the search engine in
 the last match operation performed by this matcher.

 When this method returns true, then it is possible that more input
 would have changed the result of the last search.

Returns:
true iff the end of input was hit in the last match; false
          otherwise
Since:
1.5


"
Matcher,lookingAt(),boolean,"Attempts to match the input sequence, starting at the beginning of the region, against the pattern.","

lookingAt
public boolean lookingAt()
Attempts to match the input sequence, starting at the beginning of the
 region, against the pattern.

  Like the matches method, this method always starts
 at the beginning of the region; unlike that method, it does not
 require that the entire region be matched.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, a prefix of the input
          sequence matches this matcher's pattern


"
Matcher,matches(),boolean,Attempts to match the entire region against the pattern.,"

matches
public boolean matches()
Attempts to match the entire region against the pattern.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, the entire region sequence
          matches this matcher's pattern


"
Matcher,pattern(),Pattern,Returns the pattern that is interpreted by this matcher.,"

pattern
public Pattern pattern()
Returns the pattern that is interpreted by this matcher.

Returns:
The pattern for which this matcher was created


"
Matcher,quoteReplacement(String s),static String,Returns a literal replacement String for the specified String.,"

quoteReplacement
public static String quoteReplacement(String s)
Returns a literal replacement String for the specified
 String.

 This method produces a String that will work
 as a literal replacement s in the
 appendReplacement method of the Matcher class.
 The String produced will match the sequence of characters
 in s treated as a literal sequence. Slashes ('\') and
 dollar signs ('$') will be given no special meaning.

Parameters:
s - The string to be literalized
Returns:
A literal string replacement
Since:
1.5


"
Matcher,"region(int start, int end)",Matcher,Sets the limits of this matcher's region.,"

region
public Matcher region(int start,
                      int end)
Sets the limits of this matcher's region. The region is the part of the
 input sequence that will be searched to find a match. Invoking this
 method resets the matcher, and then sets the region to start at the
 index specified by the start parameter and end at the
 index specified by the end parameter.

 Depending on the transparency and anchoring being used (see
 useTransparentBounds and
 useAnchoringBounds), certain constructs such
 as anchors may behave differently at or around the boundaries of the
 region.

Parameters:
start - The index to start searching at (inclusive)
end - The index to end searching at (exclusive)
Returns:
this matcher
Throws:
IndexOutOfBoundsException - If start or end is less than zero, if
          start is greater than the length of the input sequence, if
          end is greater than the length of the input sequence, or if
          start is greater than end.
Since:
1.5


"
Matcher,regionEnd(),int,Reports the end index (exclusive) of this matcher's region.,"

regionEnd
public int regionEnd()
Reports the end index (exclusive) of this matcher's region.
 The searches this matcher conducts are limited to finding matches
 within regionStart (inclusive) and
 regionEnd (exclusive).

Returns:
the ending point of this matcher's region
Since:
1.5


"
Matcher,regionStart(),int,Reports the start index of this matcher's region.,"

regionStart
public int regionStart()
Reports the start index of this matcher's region. The
 searches this matcher conducts are limited to finding matches
 within regionStart (inclusive) and
 regionEnd (exclusive).

Returns:
The starting point of this matcher's region
Since:
1.5


"
Matcher,replaceAll(String replacement),String,Replaces every subsequence of the input sequence that matches the pattern with the given replacement string.,"

replaceAll
public String replaceAll(String replacement)
Replaces every subsequence of the input sequence that matches the
 pattern with the given replacement string.

  This method first resets this matcher.  It then scans the input
 sequence looking for matches of the pattern.  Characters that are not
 part of any match are appended directly to the result string; each match
 is replaced in the result by the replacement string.  The replacement
 string may contain references to captured subsequences as in the appendReplacement method.

  Note that backslashes (\) and dollar signs ($) in
 the replacement string may cause the results to be different than if it
 were being treated as a literal replacement string. Dollar signs may be
 treated as references to captured subsequences as described above, and
 backslashes are used to escape literal characters in the replacement
 string.

  Given the regular expression a*b, the input
 ""aabfooaabfooabfoob"", and the replacement string
 ""-"", an invocation of this method on a matcher for that
 expression would yield the string ""-foo-foo-foo-"".

  Invoking this method changes this matcher's state.  If the matcher
 is to be used in further matching operations then it should first be
 reset.  

Parameters:
replacement - The replacement string
Returns:
The string constructed by replacing each matching subsequence
          by the replacement string, substituting captured subsequences
          as needed


"
Matcher,replaceFirst(String replacement),String,Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string.,"

replaceFirst
public String replaceFirst(String replacement)
Replaces the first subsequence of the input sequence that matches the
 pattern with the given replacement string.

  This method first resets this matcher.  It then scans the input
 sequence looking for a match of the pattern.  Characters that are not
 part of the match are appended directly to the result string; the match
 is replaced in the result by the replacement string.  The replacement
 string may contain references to captured subsequences as in the appendReplacement method.

 Note that backslashes (\) and dollar signs ($) in
 the replacement string may cause the results to be different than if it
 were being treated as a literal replacement string. Dollar signs may be
 treated as references to captured subsequences as described above, and
 backslashes are used to escape literal characters in the replacement
 string.

  Given the regular expression dog, the input
 ""zzzdogzzzdogzzz"", and the replacement string
 ""cat"", an invocation of this method on a matcher for that
 expression would yield the string ""zzzcatzzzdogzzz"".  
 Invoking this method changes this matcher's state.  If the matcher
 is to be used in further matching operations then it should first be
 reset.  

Parameters:
replacement - The replacement string
Returns:
The string constructed by replacing the first matching
          subsequence by the replacement string, substituting captured
          subsequences as needed


"
Matcher,requireEnd(),boolean,Returns true if more input could change a positive match into a negative one.,"

requireEnd
public boolean requireEnd()
Returns true if more input could change a positive match into a
 negative one.

 If this method returns true, and a match was found, then more
 input could cause the match to be lost. If this method returns false
 and a match was found, then more input might change the match but the
 match won't be lost. If a match was not found, then requireEnd has no
 meaning.

Returns:
true iff more input could change a positive match into a
          negative one.
Since:
1.5


"
Matcher,reset(),Matcher,Resets this matcher.,"

reset
public Matcher reset()
Resets this matcher.

  Resetting a matcher discards all of its explicit state information
 and sets its append position to zero. The matcher's region is set to the
 default region, which is its entire character sequence. The anchoring
 and transparency of this matcher's region boundaries are unaffected.

Returns:
This matcher


"
Matcher,reset(CharSequence input),Matcher,Resets this matcher with a new input sequence.,"

reset
public Matcher reset(CharSequence input)
Resets this matcher with a new input sequence.

  Resetting a matcher discards all of its explicit state information
 and sets its append position to zero.  The matcher's region is set to
 the default region, which is its entire character sequence.  The
 anchoring and transparency of this matcher's region boundaries are
 unaffected.

Parameters:
input - The new input character sequence
Returns:
This matcher


"
Matcher,start(),int,Returns the start index of the previous match.,"

start
public int start()
Returns the start index of the previous match.

Specified by:
start in interface MatchResult
Returns:
The index of the first character matched
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
Matcher,start(int group),int,Returns the start index of the subsequence captured by the given group during the previous match operation.,"

start
public int start(int group)
Returns the start index of the subsequence captured by the given group
 during the previous match operation.

  Capturing groups are indexed from left
 to right, starting at one.  Group zero denotes the entire pattern, so
 the expression m.start(0) is equivalent to
 m.start().  

Specified by:
start in interface MatchResult
Parameters:
group - The index of a capturing group in this matcher's pattern
Returns:
The index of the first character captured by the group,
          or -1 if the match was successful but the group
          itself did not match anything
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IndexOutOfBoundsException - If there is no capturing group in the pattern
          with the given index


"
Matcher,start(String name),int,Returns the start index of the subsequence captured by the given named-capturing group during the previous match operation.,"

start
public int start(String name)
Returns the start index of the subsequence captured by the given
 named-capturing group during the
 previous match operation.

Parameters:
name - The name of a named-capturing group in this matcher's pattern
Returns:
The index of the first character captured by the group,
          or -1 if the match was successful but the group
          itself did not match anything
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed
IllegalArgumentException - If there is no capturing group in the pattern
          with the given name
Since:
1.8


"
Matcher,toMatchResult(),MatchResult,Returns the match state of this matcher as a MatchResult.,"

toMatchResult
public MatchResult toMatchResult()
Returns the match state of this matcher as a MatchResult.
 The result is unaffected by subsequent operations performed upon this
 matcher.

Returns:
a MatchResult with the state of this matcher
Since:
1.5


"
Matcher,toString(),String,Returns the string representation of this matcher.,"

toString
public String toString()
Returns the string representation of this matcher. The
 string representation of a Matcher contains information
 that may be useful for debugging. The exact format is unspecified.

Overrides:
toString in class Object
Returns:
The string representation of this matcher
Since:
1.5


"
Matcher,useAnchoringBounds(boolean b),Matcher,Sets the anchoring of region bounds for this matcher.,"

useAnchoringBounds
public Matcher useAnchoringBounds(boolean b)
Sets the anchoring of region bounds for this matcher.

  Invoking this method with an argument of true will set this
 matcher to use anchoring bounds. If the boolean
 argument is false, then non-anchoring bounds will be
 used.

  Using anchoring bounds, the boundaries of this
 matcher's region match anchors such as ^ and $.

  Without anchoring bounds, the boundaries of this
 matcher's region will not match anchors such as ^ and $.

  By default, a matcher uses anchoring region boundaries.

Parameters:
b - a boolean indicating whether or not to use anchoring bounds.
Returns:
this matcher
Since:
1.5
See Also:
hasAnchoringBounds()


"
Matcher,usePattern(Pattern newPattern),Matcher,Changes the Pattern that this Matcher uses to find matches with.,"

usePattern
public Matcher usePattern(Pattern newPattern)
Changes the Pattern that this Matcher uses to
 find matches with.

  This method causes this matcher to lose information
 about the groups of the last match that occurred. The
 matcher's position in the input is maintained and its
 last append position is unaffected.

Parameters:
newPattern - The new pattern used by this matcher
Returns:
This matcher
Throws:
IllegalArgumentException - If newPattern is null
Since:
1.5


"
Matcher,useTransparentBounds(boolean b),Matcher,Sets the transparency of region bounds for this matcher.,"

useTransparentBounds
public Matcher useTransparentBounds(boolean b)
Sets the transparency of region bounds for this matcher.

  Invoking this method with an argument of true will set this
 matcher to use transparent bounds. If the boolean
 argument is false, then opaque bounds will be used.

  Using transparent bounds, the boundaries of this
 matcher's region are transparent to lookahead, lookbehind,
 and boundary matching constructs. Those constructs can see beyond the
 boundaries of the region to see if a match is appropriate.

  Using opaque bounds, the boundaries of this matcher's
 region are opaque to lookahead, lookbehind, and boundary matching
 constructs that may try to see beyond them. Those constructs cannot
 look past the boundaries so they will fail to match anything outside
 of the region.

  By default, a matcher uses opaque bounds.

Parameters:
b - a boolean indicating whether to use opaque or transparent
         regions
Returns:
this matcher
Since:
1.5
See Also:
hasTransparentBounds()


"
Pattern,asPredicate(),Predicate<String>,Creates a predicate which can be used to match a string.,"

asPredicate
public Predicate<String> asPredicate()
Creates a predicate which can be used to match a string.

Returns:
The predicate which can be used for matching on a string
Since:
1.8


"
Pattern,compile(String regex),static Pattern,Compiles the given regular expression into a pattern.,"

compile
public static Pattern compile(String regex)
Compiles the given regular expression into a pattern.

Parameters:
regex - The expression to be compiled
Returns:
the given regular expression compiled into a pattern
Throws:
PatternSyntaxException - If the expression's syntax is invalid


"
Pattern,"compile(String regex, int flags)",static Pattern,Compiles the given regular expression into a pattern with the given flags.,"

compile
public static Pattern compile(String regex,
                              int flags)
Compiles the given regular expression into a pattern with the given
 flags.

Parameters:
regex - The expression to be compiled
flags - Match flags, a bit mask that may include
         CASE_INSENSITIVE, MULTILINE, DOTALL,
         UNICODE_CASE, CANON_EQ, UNIX_LINES,
         LITERAL, UNICODE_CHARACTER_CLASS
         and COMMENTS
Returns:
the given regular expression compiled into a pattern with the given flags
Throws:
IllegalArgumentException - If bit values other than those corresponding to the defined
          match flags are set in flags
PatternSyntaxException - If the expression's syntax is invalid


"
Pattern,flags(),int,Returns this pattern's match flags.,"

flags
public int flags()
Returns this pattern's match flags.

Returns:
The match flags specified when this pattern was compiled


"
Pattern,matcher(CharSequence input),Matcher,Creates a matcher that will match the given input against this pattern.,"

matcher
public Matcher matcher(CharSequence input)
Creates a matcher that will match the given input against this pattern.

Parameters:
input - The character sequence to be matched
Returns:
A new matcher for this pattern


"
Pattern,"matches(String regex, CharSequence input)",static boolean,Compiles the given regular expression and attempts to match the given input against it.,"

matches
public static boolean matches(String regex,
                              CharSequence input)
Compiles the given regular expression and attempts to match the given
 input against it.

  An invocation of this convenience method of the form

 
 Pattern.matches(regex, input);

 behaves in exactly the same way as the expression

 
 Pattern.compile(regex).matcher(input).matches()
 If a pattern is to be used multiple times, compiling it once and reusing
 it will be more efficient than invoking this method each time.  

Parameters:
regex - The expression to be compiled
input - The character sequence to be matched
Returns:
whether or not the regular expression matches on the input
Throws:
PatternSyntaxException - If the expression's syntax is invalid


"
Pattern,pattern(),String,Returns the regular expression from which this pattern was compiled.,"

pattern
public String pattern()
Returns the regular expression from which this pattern was compiled.

Returns:
The source of this pattern


"
Pattern,quote(String s),static String,Returns a literal pattern String for the specified String.,"

quote
public static String quote(String s)
Returns a literal pattern String for the specified
 String.

 This method produces a String that can be used to
 create a Pattern that would match the string
 s as if it were a literal pattern. Metacharacters
 or escape sequences in the input sequence will be given no special
 meaning.

Parameters:
s - The string to be literalized
Returns:
A literal string replacement
Since:
1.5


"
Pattern,split(CharSequence input),String[],Splits the given input sequence around matches of this pattern.,"

split
public String[] split(CharSequence input)
Splits the given input sequence around matches of this pattern.

  This method works as if by invoking the two-argument split method with the given input
 sequence and a limit argument of zero.  Trailing empty strings are
 therefore not included in the resulting array. 
 The input ""boo:and:foo"", for example, yields the following
 results with these expressions:

 
Regex    
Result
:
{ ""boo"", ""and"", ""foo"" }
o
{ ""b"", """", "":and:f"" }


Parameters:
input - The character sequence to be split
Returns:
The array of strings computed by splitting the input
          around matches of this pattern


"
Pattern,"split(CharSequence input, int limit)",String[],Splits the given input sequence around matches of this pattern.,"

split
public String[] split(CharSequence input,
                      int limit)
Splits the given input sequence around matches of this pattern.

  The array returned by this method contains each substring of the
 input sequence that is terminated by another subsequence that matches
 this pattern or is terminated by the end of the input sequence.  The
 substrings in the array are in the order in which they occur in the
 input. If this pattern does not match any subsequence of the input then
 the resulting array has just one element, namely the input sequence in
 string form.

  When there is a positive-width match at the beginning of the input
 sequence then an empty leading substring is included at the beginning
 of the resulting array. A zero-width match at the beginning however
 never produces such empty leading substring.

  The limit parameter controls the number of times the
 pattern is applied and therefore affects the length of the resulting
 array.  If the limit n is greater than zero then the pattern
 will be applied at most n - 1 times, the array's
 length will be no greater than n, and the array's last entry
 will contain all input beyond the last matched delimiter.  If n
 is non-positive then the pattern will be applied as many times as
 possible and the array can have any length.  If n is zero then
 the pattern will be applied as many times as possible, the array can
 have any length, and trailing empty strings will be discarded.

  The input ""boo:and:foo"", for example, yields the following
 results with these parameters:

 
Regex    
Limit    
Result    
:
2
{ ""boo"", ""and:foo"" }
:
5
{ ""boo"", ""and"", ""foo"" }
:
-2
{ ""boo"", ""and"", ""foo"" }
o
5
{ ""b"", """", "":and:f"", """", """" }
o
-2
{ ""b"", """", "":and:f"", """", """" }
o
0
{ ""b"", """", "":and:f"" }


Parameters:
input - The character sequence to be split
limit - The result threshold, as described above
Returns:
The array of strings computed by splitting the input
          around matches of this pattern


"
Pattern,splitAsStream(CharSequence input),Stream<String>,Creates a stream from the given input sequence around matches of this pattern.,"

splitAsStream
public Stream<String> splitAsStream(CharSequence input)
Creates a stream from the given input sequence around matches of this
 pattern.

  The stream returned by this method contains each substring of the
 input sequence that is terminated by another subsequence that matches
 this pattern or is terminated by the end of the input sequence.  The
 substrings in the stream are in the order in which they occur in the
 input. Trailing empty strings will be discarded and not encountered in
 the stream.

  If this pattern does not match any subsequence of the input then
 the resulting stream has just one element, namely the input sequence in
 string form.

  When there is a positive-width match at the beginning of the input
 sequence then an empty leading substring is included at the beginning
 of the stream. A zero-width match at the beginning however never produces
 such empty leading substring.

  If the input sequence is mutable, it must remain constant during the
 execution of the terminal stream operation.  Otherwise, the result of the
 terminal stream operation is undefined.

Parameters:
input - The character sequence to be split
Returns:
The stream of strings computed by splitting the input
          around matches of this pattern
Since:
1.8
See Also:
split(CharSequence)


"
Pattern,toString(),String,Returns the string representation of this pattern.,"

toString
public String toString()
Returns the string representation of this pattern. This
 is the regular expression from which this pattern was
 compiled.

Overrides:
toString in class Object
Returns:
The string representation of this pattern
Since:
1.5


"
