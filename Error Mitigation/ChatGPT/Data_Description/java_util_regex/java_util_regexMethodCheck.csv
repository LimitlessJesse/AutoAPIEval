Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,Matcher,1,boolean matches(),True,,"

matches
public boolean matches()
Attempts to match the entire region against the pattern.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, the entire region sequence
          matches this matcher's pattern


"
0,Matcher,2,boolean find(),True,,"

find
public boolean find()
Attempts to find the next subsequence of the input sequence that matches
 the pattern.

  This method starts at the beginning of this matcher's region, or, if
 a previous invocation of the method was successful and the matcher has
 not since been reset, at the first character not matched by the previous
 match.

  If the match succeeds then more information can be obtained via the
 start, end, and group methods.  

Returns:
true if, and only if, a subsequence of the input
          sequence matches this matcher's pattern


"
0,Matcher,3,String group(),True,,"

group
public String group()
Returns the input subsequence matched by the previous match.

  For a matcher m with input sequence s,
 the expressions m.group() and
 s.substring(m.start(), m.end())
 are equivalent.  
 Note that some patterns, for example a*, match the empty
 string.  This method will return the empty string when the pattern
 successfully matches the empty string in the input.  

Specified by:
group in interface MatchResult
Returns:
The (possibly empty) subsequence matched by the previous match,
         in string form
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
0,Matcher,4,int start(),True,,"

start
public int start()
Returns the start index of the previous match.

Specified by:
start in interface MatchResult
Returns:
The index of the first character matched
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
0,Matcher,5,int end(),True,,"

end
public int end()
Returns the offset after the last character matched.

Specified by:
end in interface MatchResult
Returns:
The offset after the last character matched
Throws:
IllegalStateException - If no match has yet been attempted,
          or if the previous match operation failed


"
1,Pattern,1,Matcher matcher(CharSequence input),True,,"

matcher
public Matcher matcher(CharSequence input)
Creates a matcher that will match the given input against this pattern.

Parameters:
input - The character sequence to be matched
Returns:
A new matcher for this pattern


"
1,Pattern,2,String pattern(),True,,"

pattern
public String pattern()
Returns the regular expression from which this pattern was compiled.

Returns:
The source of this pattern


"
1,Pattern,3,Pattern compile(String regex),True,,"

compile
public static Pattern compile(String regex)
Compiles the given regular expression into a pattern.

Parameters:
regex - The expression to be compiled
Returns:
the given regular expression compiled into a pattern
Throws:
PatternSyntaxException - If the expression's syntax is invalid


"
1,Pattern,4,boolean matches(String input),False,,NULL
1,Pattern,5,String[] split(CharSequence input),True,,"

split
public String[] split(CharSequence input)
Splits the given input sequence around matches of this pattern.

  This method works as if by invoking the two-argument split method with the given input
 sequence and a limit argument of zero.  Trailing empty strings are
 therefore not included in the resulting array. 
 The input ""boo:and:foo"", for example, yields the following
 results with these expressions:

 
Regex    
Result
:
{ ""boo"", ""and"", ""foo"" }
o
{ ""b"", """", "":and:f"" }


Parameters:
input - The character sequence to be split
Returns:
The array of strings computed by splitting the input
          around matches of this pattern


"
