Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AffineTransform,1,"void translate(double tx, double ty)",True,,"

translate
public void translate(double tx,
                      double ty)
Concatenates this transform with a translation transformation.
 This is equivalent to calling concatenate(T), where T is an
 AffineTransform represented by the following matrix:
 
          [   1    0    tx  ]
          [   0    1    ty  ]
          [   0    0    1   ]
 

Parameters:
tx - the distance by which coordinates are translated in the
 X axis direction
ty - the distance by which coordinates are translated in the
 Y axis direction
Since:
1.2


"
0,AffineTransform,2,void rotate(double theta),True,,"

rotate
public void rotate(double theta)
Concatenates this transform with a rotation transformation.
 This is equivalent to calling concatenate(R), where R is an
 AffineTransform represented by the following matrix:
 
          [   cos(theta)    -sin(theta)    0   ]
          [   sin(theta)     cos(theta)    0   ]
          [       0              0         1   ]
 
 Rotating by a positive angle theta rotates points on the positive
 X axis toward the positive Y axis.
 Note also the discussion of
 Handling 90-Degree Rotations
 above.

Parameters:
theta - the angle of rotation measured in radians
Since:
1.2


"
0,AffineTransform,3,"void scale(double sx, double sy)",True,,"

scale
public void scale(double sx,
                  double sy)
Concatenates this transform with a scaling transformation.
 This is equivalent to calling concatenate(S), where S is an
 AffineTransform represented by the following matrix:
 
          [   sx   0    0   ]
          [   0    sy   0   ]
          [   0    0    1   ]
 

Parameters:
sx - the factor by which coordinates are scaled along the
 X axis direction
sy - the factor by which coordinates are scaled along the
 Y axis direction
Since:
1.2


"
0,AffineTransform,4,"void shear(double shx, double shy)",True,,"

shear
public void shear(double shx,
                  double shy)
Concatenates this transform with a shearing transformation.
 This is equivalent to calling concatenate(SH), where SH is an
 AffineTransform represented by the following matrix:
 
          [   1   shx   0   ]
          [  shy   1    0   ]
          [   0    0    1   ]
 

Parameters:
shx - the multiplier by which coordinates are shifted in the
 direction of the positive X axis as a factor of their Y coordinate
shy - the multiplier by which coordinates are shifted in the
 direction of the positive Y axis as a factor of their X coordinate
Since:
1.2


"
0,AffineTransform,5,"Point2D transform(Point2D ptSrc, Point2D ptDst)",True,,"

transform
public Point2D transform(Point2D ptSrc,
                         Point2D ptDst)
Transforms the specified ptSrc and stores the result
 in ptDst.
 If ptDst is null, a new Point2D
 object is allocated and then the result of the transformation is
 stored in this object.
 In either case, ptDst, which contains the
 transformed point, is returned for convenience.
 If ptSrc and ptDst are the same
 object, the input point is correctly overwritten with
 the transformed point.

Parameters:
ptSrc - the specified Point2D to be transformed
ptDst - the specified Point2D that stores the
 result of transforming ptSrc
Returns:
the ptDst after transforming
 ptSrc and storing the result in ptDst.
Since:
1.2


"
1,Arc2D,1,double getAngleExtent(),True,,"

getAngleExtent
public abstract double getAngleExtent()
Returns the angular extent of the arc.

Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
setAngleExtent(double)


"
1,Arc2D,2,double getAngleStart(),True,,"

getAngleStart
public abstract double getAngleStart()
Returns the starting angle of the arc.

Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
setAngleStart(double)


"
1,Arc2D,3,double getHeight(),False,,NULL
1,Arc2D,4,double getWidth(),False,,NULL
1,Arc2D,5,int getArcType(),True,,"

getArcType
public int getArcType()
Returns the arc closure type of the arc: OPEN,
 CHORD, or PIE.

Returns:
One of the integer constant closure types defined
 in this class.
Since:
1.2
See Also:
setArcType(int)


"
2,Arc2D.Double,1,double getAngleExtent(),True,,"

getAngleExtent
public double getAngleExtent()
Returns the angular extent of the arc.

Specified by:
getAngleExtent in class Arc2D
Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleExtent(double)


"
2,Arc2D.Double,2,double getAngleStart(),True,,"

getAngleStart
public double getAngleStart()
Returns the starting angle of the arc.

Specified by:
getAngleStart in class Arc2D
Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleStart(double)


"
2,Arc2D.Double,3,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,4,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.
 Note that the arc
 partially inscribes
 the framing rectangle of this RectangularShape.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
2,Arc2D.Double,5,"void setFrame(double x, double y, double w, double h)",False,,NULL
3,Arc2D.Float,1,double getAngleExtent(),True,,"

getAngleExtent
public double getAngleExtent()
Returns the angular extent of the arc.

Specified by:
getAngleExtent in class Arc2D
Returns:
A double value that represents the angular extent
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleExtent(double)


"
3,Arc2D.Float,2,double getAngleStart(),True,,"

getAngleStart
public double getAngleStart()
Returns the starting angle of the arc.

Specified by:
getAngleStart in class Arc2D
Returns:
A double value that represents the starting angle
 of the arc in degrees.
Since:
1.2
See Also:
Arc2D.setAngleStart(double)


"
3,Arc2D.Float,3,Point2D getEndPoint(),False,,NULL
3,Arc2D.Float,4,Point2D getStartPoint(),False,,NULL
3,Arc2D.Float,5,void setAngleExtent(double extent),True,,"

setAngleExtent
public void setAngleExtent(double angExt)
Sets the angular extent of this arc to the specified double
 value.

Specified by:
setAngleExtent in class Arc2D
Parameters:
angExt - The angular extent of the arc in degrees.
Since:
1.2
See Also:
Arc2D.getAngleExtent()


"
4,Area,1,void add(Area rhs),True,,"

add
public void add(Area rhs)
Adds the shape of the specified Area to the
 shape of this Area.
 The resulting shape of this Area will include
 the union of both shapes, or all areas that were contained
 in either this or the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.add(a2);

        a1(before)     +         a2         =     a1(after)

     ################     ################     ################
     ##############         ##############     ################
     ############             ############     ################
     ##########                 ##########     ################
     ########                     ########     ################
     ######                         ######     ######    ######
     ####                             ####     ####        ####
     ##                                 ##     ##            ##
 

Parameters:
rhs - the Area to be added to the
          current shape
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
4,Area,2,void subtract(Area rhs),True,,"

subtract
public void subtract(Area rhs)
Subtracts the shape of the specified Area from the
 shape of this Area.
 The resulting shape of this Area will include
 areas that were contained only in this Area
 and not in the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.subtract(a2);

        a1(before)     -         a2         =     a1(after)

     ################     ################
     ##############         ##############     ##
     ############             ############     ####
     ##########                 ##########     ######
     ########                     ########     ########
     ######                         ######     ######
     ####                             ####     ####
     ##                                 ##     ##
 

Parameters:
rhs - the Area to be subtracted from the
          current shape
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
4,Area,3,void intersect(Area rhs),True,,"

intersect
public void intersect(Area rhs)
Sets the shape of this Area to the intersection of
 its current shape and the shape of the specified Area.
 The resulting shape of this Area will include
 only areas that were contained in both this Area
 and also in the specified Area.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.intersect(a2);

      a1(before)   intersect     a2         =     a1(after)

     ################     ################     ################
     ##############         ##############       ############
     ############             ############         ########
     ##########                 ##########           ####
     ########                     ########
     ######                         ######
     ####                             ####
     ##                                 ##
 

Parameters:
rhs - the Area to be intersected with this
          Area
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
4,Area,4,void exclusiveOr(Area rhs),True,,"

exclusiveOr
public void exclusiveOr(Area rhs)
Sets the shape of this Area to be the combined area
 of its current shape and the shape of the specified Area,
 minus their intersection.
 The resulting shape of this Area will include
 only areas that were contained in either this Area
 or in the specified Area, but not in both.
 
     // Example:
     Area a1 = new Area([triangle 0,0 => 8,0 => 0,8]);
     Area a2 = new Area([triangle 0,0 => 8,0 => 8,8]);
     a1.exclusiveOr(a2);

        a1(before)    xor        a2         =     a1(after)

     ################     ################
     ##############         ##############     ##            ##
     ############             ############     ####        ####
     ##########                 ##########     ######    ######
     ########                     ########     ################
     ######                         ######     ######    ######
     ####                             ####     ####        ####
     ##                                 ##     ##            ##
 

Parameters:
rhs - the Area to be exclusive ORed with this
          Area.
Throws:
NullPointerException - if rhs is null
Since:
1.2


"
4,Area,5,Rectangle2D getBounds2D(),True,,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision bounding Rectangle2D that
 completely encloses this Area.
 
 The Area class will attempt to return the tightest bounding
 box possible for the Shape.  The bounding box will not be
 padded to include the control points of curves in the outline
 of the Shape, but should tightly fit the actual geometry of
 the outline itself.

Specified by:
getBounds2D in interface Shape
Returns:
the bounding Rectangle2D for the
 Area.
Since:
1.2
See Also:
Shape.getBounds()


"
5,CubicCurve2D,1,double getX1(),True,,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,2,double getY1(),True,,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,3,double getCtrlX1(),True,,"

getCtrlX1
public abstract double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,4,double getCtrlY1(),True,,"

getCtrlY1
public abstract double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
5,CubicCurve2D,5,double getCtrlX2(),True,,"

getCtrlX2
public abstract double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class CubicCurve2D
Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class CubicCurve2D
Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,3,double getCtrlX1(),True,,"

getCtrlX1
public double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Specified by:
getCtrlX1 in class CubicCurve2D
Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,4,double getCtrlY1(),True,,"

getCtrlY1
public double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Specified by:
getCtrlY1 in class CubicCurve2D
Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
6,CubicCurve2D.Double,5,double getCtrlX2(),True,,"

getCtrlX2
public double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Specified by:
getCtrlX2 in class CubicCurve2D
Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
7,CubicCurve2D.Float,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class CubicCurve2D
Returns:
the X coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
7,CubicCurve2D.Float,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class CubicCurve2D
Returns:
the Y coordinate of the start point of the
         CubicCurve2D.
Since:
1.2


"
7,CubicCurve2D.Float,3,double getCtrlX1(),True,,"

getCtrlX1
public double getCtrlX1()
Returns the X coordinate of the first control point in double precision.

Specified by:
getCtrlX1 in class CubicCurve2D
Returns:
the X coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
7,CubicCurve2D.Float,4,double getCtrlY1(),True,,"

getCtrlY1
public double getCtrlY1()
Returns the Y coordinate of the first control point in double precision.

Specified by:
getCtrlY1 in class CubicCurve2D
Returns:
the Y coordinate of the first control point of the
         CubicCurve2D.
Since:
1.2


"
7,CubicCurve2D.Float,5,double getCtrlX2(),True,,"

getCtrlX2
public double getCtrlX2()
Returns the X coordinate of the second control point
 in double precision.

Specified by:
getCtrlX2 in class CubicCurve2D
Returns:
the X coordinate of the second control point of the
         CubicCurve2D.
Since:
1.2


"
8,Dimension2D,1,double getWidth(),True,,"

getWidth
public abstract double getWidth()
Returns the width of this Dimension in double
 precision.

Returns:
the width of this Dimension.
Since:
1.2


"
8,Dimension2D,2,double getHeight(),True,,"

getHeight
public abstract double getHeight()
Returns the height of this Dimension in double
 precision.

Returns:
the height of this Dimension.
Since:
1.2


"
8,Dimension2D,3,"void setSize(double width, double height)",True,,"

setSize
public abstract void setSize(double width,
                             double height)
Sets the size of this Dimension object to the
 specified width and height.
 This method is included for completeness, to parallel the
 getSize method of
 Component.

Parameters:
width - the new width for the Dimension
 object
height - the new height for the Dimension
 object
Since:
1.2


"
8,Dimension2D,4,void setSize(Dimension2D d),True,,"

setSize
public void setSize(Dimension2D d)
Sets the size of this Dimension2D object to
 match the specified size.
 This method is included for completeness, to parallel the
 getSize method of Component.

Parameters:
d - the new size for the Dimension2D
 object
Since:
1.2


"
8,Dimension2D,5,"void setSize(double width, double height)",True,,"

setSize
public abstract void setSize(double width,
                             double height)
Sets the size of this Dimension object to the
 specified width and height.
 This method is included for completeness, to parallel the
 getSize method of
 Component.

Parameters:
width - the new width for the Dimension
 object
height - the new height for the Dimension
 object
Since:
1.2


"
9,Ellipse2D,1,double getHeight(),False,,NULL
9,Ellipse2D,2,double getWidth(),False,,NULL
9,Ellipse2D,3,double getX(),False,,NULL
9,Ellipse2D,4,double getY(),False,,NULL
9,Ellipse2D,5,"void setFrame(double x, double y, double w, double h)",False,,NULL
10,Ellipse2D.Double,1,double getX(),True,,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,2,double getY(),True,,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,3,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,4,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
10,Ellipse2D.Double,5,Rectangle2D getBounds2D(),True,,"

getBounds2D
public Rectangle2D getBounds2D()
Returns a high precision and more accurate bounding box of
 the Shape than the getBounds method.
 Note that there is no guarantee that the returned
 Rectangle2D is the smallest bounding box that encloses
 the Shape, only that the Shape lies
 entirely within the indicated Rectangle2D.  The
 bounding box returned by this method is usually tighter than that
 returned by the getBounds method and never fails due
 to overflow problems since the return value can be an instance of
 the Rectangle2D that uses double precision values to
 store the dimensions.

 
 Note that the 
 definition of insideness can lead to situations where points
 on the defining outline of the shape may not be considered
 contained in the returned bounds object, but only in cases
 where those points are also not considered contained in the original
 shape.
 

 If a point is inside the shape according to the
 contains(point) method, then it must
 be inside the returned Rectangle2D bounds object according
 to the contains(point) method of the
 bounds. Specifically:
 

shape.contains(p) requires bounds.contains(p)


 If a point is not inside the shape, then it might
 still be contained in the bounds object:
 

bounds.contains(p) does not imply shape.contains(p)


Specified by:
getBounds2D in interface Shape
Returns:
an instance of Rectangle2D that is a
                 high-precision bounding box of the Shape.
Since:
1.2
See Also:
Shape.getBounds()


"
11,Ellipse2D.Float,1,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
11,Ellipse2D.Float,2,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
11,Ellipse2D.Float,3,double getX(),True,,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
11,Ellipse2D.Float,4,double getY(),True,,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
11,Ellipse2D.Float,5,"void setFrame(double x, double y, double w, double h)",True,,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
12,FlatteningPathIterator,1,int getWindingRule(),True,,"

getWindingRule
public int getWindingRule()
Returns the winding rule for determining the interior of the
 path.

Specified by:
getWindingRule in interface PathIterator
Returns:
the winding rule of the original unflattened path being
 iterated over.
See Also:
PathIterator.WIND_EVEN_ODD, 
PathIterator.WIND_NON_ZERO


"
12,FlatteningPathIterator,2,boolean isDone(),True,,"

isDone
public boolean isDone()
Tests if the iteration is complete.

Specified by:
isDone in interface PathIterator
Returns:
true if all the segments have
 been read; false otherwise.


"
12,FlatteningPathIterator,3,void next(),True,,"

next
public void next()
Moves the iterator to the next segment of the path forwards
 along the primary direction of traversal as long as there are
 more points in that direction.

Specified by:
next in interface PathIterator


"
12,FlatteningPathIterator,4,int currentSegment(float[] coords),True,,"

currentSegment
public int currentSegment(float[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A float array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of float x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
12,FlatteningPathIterator,5,int currentSegment(double[] coords),True,,"

currentSegment
public int currentSegment(double[] coords)
Returns the coordinates and type of the current path segment in
 the iteration.
 The return value is the path segment type:
 SEG_MOVETO, SEG_LINETO, or SEG_CLOSE.
 A double array of length 6 must be passed in and can be used to
 store the coordinates of the point(s).
 Each point is stored as a pair of double x,y coordinates.
 SEG_MOVETO and SEG_LINETO types return one point,
 and SEG_CLOSE does not return any points.

Specified by:
currentSegment in interface PathIterator
Parameters:
coords - an array that holds the data returned from
 this method
Returns:
the path segment type of the current path segment.
Throws:
NoSuchElementException - if there
          are no more elements in the flattening path to be
          returned.
See Also:
PathIterator.SEG_MOVETO, 
PathIterator.SEG_LINETO, 
PathIterator.SEG_CLOSE


"
13,GeneralPath,1,"void moveTo(float x, float y)",False,,NULL
13,GeneralPath,2,"void lineTo(float x, float y)",False,,NULL
13,GeneralPath,3,"void quadTo(float x1, float y1, float x2, float y2)",False,,NULL
13,GeneralPath,4,"void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)",False,,NULL
13,GeneralPath,5,void closePath(),False,,NULL
14,Line2D,1,double getX1(),True,,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in double precision.

Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
14,Line2D,2,double getY1(),True,,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in double precision.

Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
14,Line2D,3,double getX2(),True,,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in double precision.

Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
14,Line2D,4,double getY2(),True,,"

getY2
public abstract double getY2()
Returns the Y coordinate of the end point in double precision.

Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
14,Line2D,5,"void setLine(double x1, double y1, double x2, double y2)",True,,"

setLine
public abstract void setLine(double x1,
                             double y1,
                             double x2,
                             double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
15,Line2D.Double,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,3,double getX2(),True,,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,4,double getY2(),True,,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
15,Line2D.Double,5,"void setLine(double x1, double y1, double x2, double y2)",True,,"

setLine
public void setLine(double x1,
                    double y1,
                    double x2,
                    double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Specified by:
setLine in class Line2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
16,Line2D.Float,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in double precision.

Specified by:
getX1 in class Line2D
Returns:
the X coordinate of the start point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in double precision.

Specified by:
getY1 in class Line2D
Returns:
the Y coordinate of the start point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,3,double getX2(),True,,"

getX2
public double getX2()
Returns the X coordinate of the end point in double precision.

Specified by:
getX2 in class Line2D
Returns:
the X coordinate of the end point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,4,double getY2(),True,,"

getY2
public double getY2()
Returns the Y coordinate of the end point in double precision.

Specified by:
getY2 in class Line2D
Returns:
the Y coordinate of the end point of this
         Line2D object.
Since:
1.2


"
16,Line2D.Float,5,"void setLine(double x1, double y1, double x2, double y2)",True,,"

setLine
public void setLine(double x1,
                    double y1,
                    double x2,
                    double y2)
Sets the location of the end points of this Line2D to
 the specified double coordinates.

Specified by:
setLine in class Line2D
Parameters:
x1 - the X coordinate of the start point
y1 - the Y coordinate of the start point
x2 - the X coordinate of the end point
y2 - the Y coordinate of the end point
Since:
1.2


"
17,Path2D,1,"void moveTo(double x, double y)",True,,"

moveTo
public abstract void moveTo(double x,
                            double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
17,Path2D,2,"void lineTo(double x, double y)",True,,"

lineTo
public abstract void lineTo(double x,
                            double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
17,Path2D,3,"void quadTo(double x1, double y1, double x2, double y2)",True,,"

quadTo
public abstract void quadTo(double x1,
                            double y1,
                            double x2,
                            double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in double precision.

Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6


"
17,Path2D,4,"void curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",True,,"

curveTo
public abstract void curveTo(double x1,
                             double y1,
                             double x2,
                             double y2,
                             double x3,
                             double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in double precision.

Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6


"
17,Path2D,5,void closePath(),True,,"

closePath
public final void closePath()
Closes the current subpath by drawing a straight line back to
 the coordinates of the last moveTo.  If the path is already
 closed then this method has no effect.

Since:
1.6


"
18,Path2D.Double,1,"void moveTo(double x, double y)",True,,"

moveTo
public final void moveTo(double x,
                         double y)
Adds a point to the path by moving to the specified
 coordinates specified in double precision.

Specified by:
moveTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
18,Path2D.Double,2,"void lineTo(double x, double y)",True,,"

lineTo
public final void lineTo(double x,
                         double y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in double precision.

Specified by:
lineTo in class Path2D
Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6


"
18,Path2D.Double,3,"void quadTo(double x1, double y1, double x2, double y2)",True,,"

quadTo
public final void quadTo(double x1,
                         double y1,
                         double x2,
                         double y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in double precision.

Specified by:
quadTo in class Path2D
Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6


"
18,Path2D.Double,4,"void curveTo(double x1, double y1, double x2, double y2, double x3, double y3)",True,,"

curveTo
public final void curveTo(double x1,
                          double y1,
                          double x2,
                          double y2,
                          double x3,
                          double y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in double precision.

Specified by:
curveTo in class Path2D
Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6


"
18,Path2D.Double,5,void closePath(),False,,NULL
19,Path2D.Float,1,"void moveTo(float x, float y)",True,,"

moveTo
public final void moveTo(float x,
                         float y)
Adds a point to the path by moving to the specified
 coordinates specified in float precision.
 
 This method provides a single precision variant of
 the double precision moveTo() method on the
 base Path2D class.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6
See Also:
Path2D.moveTo(double, double)


"
19,Path2D.Float,2,"void lineTo(float x, float y)",True,,"

lineTo
public final void lineTo(float x,
                         float y)
Adds a point to the path by drawing a straight line from the
 current coordinates to the new specified coordinates
 specified in float precision.
 
 This method provides a single precision variant of
 the double precision lineTo() method on the
 base Path2D class.

Parameters:
x - the specified X coordinate
y - the specified Y coordinate
Since:
1.6
See Also:
Path2D.lineTo(double, double)


"
19,Path2D.Float,3,"void quadTo(float x1, float y1, float x2, float y2)",True,,"

quadTo
public final void quadTo(float x1,
                         float y1,
                         float x2,
                         float y2)
Adds a curved segment, defined by two new points, to the path by
 drawing a Quadratic curve that intersects both the current
 coordinates and the specified coordinates (x2,y2),
 using the specified point (x1,y1) as a quadratic
 parametric control point.
 All coordinates are specified in float precision.
 
 This method provides a single precision variant of
 the double precision quadTo() method on the
 base Path2D class.

Parameters:
x1 - the X coordinate of the quadratic control point
y1 - the Y coordinate of the quadratic control point
x2 - the X coordinate of the final end point
y2 - the Y coordinate of the final end point
Since:
1.6
See Also:
Path2D.quadTo(double, double, double, double)


"
19,Path2D.Float,4,"void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)",True,,"

curveTo
public final void curveTo(float x1,
                          float y1,
                          float x2,
                          float y2,
                          float x3,
                          float y3)
Adds a curved segment, defined by three new points, to the path by
 drawing a Bézier curve that intersects both the current
 coordinates and the specified coordinates (x3,y3),
 using the specified points (x1,y1) and (x2,y2) as
 Bézier control points.
 All coordinates are specified in float precision.
 
 This method provides a single precision variant of
 the double precision curveTo() method on the
 base Path2D class.

Parameters:
x1 - the X coordinate of the first Bézier control point
y1 - the Y coordinate of the first Bézier control point
x2 - the X coordinate of the second Bézier control point
y2 - the Y coordinate of the second Bézier control point
x3 - the X coordinate of the final end point
y3 - the Y coordinate of the final end point
Since:
1.6
See Also:
Path2D.curveTo(double, double, double, double, double, double)


"
19,Path2D.Float,5,void closePath(),False,,NULL
20,Point2D,1,double getX(),True,,"

getX
public abstract double getX()
Returns the X coordinate of this Point2D in
 double precision.

Returns:
the X coordinate of this Point2D.
Since:
1.2


"
20,Point2D,2,double getY(),True,,"

getY
public abstract double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
20,Point2D,3,"void setLocation(double x, double y)",True,,"

setLocation
public abstract void setLocation(double x,
                                 double y)
Sets the location of this Point2D to the
 specified double coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
20,Point2D,4,"double distance(double x, double y)",True,,"

distance
public double distance(double px,
                       double py)
Returns the distance from this Point2D to
 a specified point.

Parameters:
px - the X coordinate of the specified point to be measured
           against this Point2D
py - the Y coordinate of the specified point to be measured
           against this Point2D
Returns:
the distance between this Point2D
 and a specified point.
Since:
1.2


"
20,Point2D,5,Point2D clone(),False,,NULL
21,Point2D.Double,1,double getX(),True,,"

getX
public double getX()
Returns the X coordinate of this Point2D in
 double precision.

Specified by:
getX in class Point2D
Returns:
the X coordinate of this Point2D.
Since:
1.2


"
21,Point2D.Double,2,double getY(),True,,"

getY
public double getY()
Returns the Y coordinate of this Point2D in
 double precision.

Specified by:
getY in class Point2D
Returns:
the Y coordinate of this Point2D.
Since:
1.2


"
21,Point2D.Double,3,"void setLocation(double x, double y)",True,,"

setLocation
public void setLocation(double x,
                        double y)
Sets the location of this Point2D to the
 specified double coordinates.

Specified by:
setLocation in class Point2D
Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
21,Point2D.Double,4,Point2D.Double clone(),False,,NULL
21,Point2D.Double,5,"double distance(double x, double y)",False,,NULL
22,Point2D.Float,1,float getX(),False,,NULL
22,Point2D.Float,2,float getY(),False,,NULL
22,Point2D.Float,3,"void setLocation(float x, float y)",True,,"

setLocation
public void setLocation(float x,
                        float y)
Sets the location of this Point2D to the
 specified float coordinates.

Parameters:
x - the new X coordinate of this Point2D
y - the new Y coordinate of this Point2D
Since:
1.2


"
22,Point2D.Float,4,Point2D.Float clone(),False,,NULL
22,Point2D.Float,5,String toString(),True,,"

toString
public String toString()
Returns a String that represents the value
 of this Point2D.

Overrides:
toString in class Object
Returns:
a string representation of this Point2D.
Since:
1.2


"
23,QuadCurve2D,1,double getX1(),True,,"

getX1
public abstract double getX1()
Returns the X coordinate of the start point in
 double in precision.

Returns:
the X coordinate of the start point.
Since:
1.2


"
23,QuadCurve2D,2,double getY1(),True,,"

getY1
public abstract double getY1()
Returns the Y coordinate of the start point in
 double precision.

Returns:
the Y coordinate of the start point.
Since:
1.2


"
23,QuadCurve2D,3,double getCtrlX(),True,,"

getCtrlX
public abstract double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Returns:
X coordinate the control point
Since:
1.2


"
23,QuadCurve2D,4,double getCtrlY(),True,,"

getCtrlY
public abstract double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Returns:
the Y coordinate of the control point.
Since:
1.2


"
23,QuadCurve2D,5,double getX2(),True,,"

getX2
public abstract double getX2()
Returns the X coordinate of the end point in
 double precision.

Returns:
the x coordinate of the end point.
Since:
1.2


"
24,QuadCurve2D.Double,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in
 double in precision.

Specified by:
getX1 in class QuadCurve2D
Returns:
the X coordinate of the start point.
Since:
1.2


"
24,QuadCurve2D.Double,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in
 double precision.

Specified by:
getY1 in class QuadCurve2D
Returns:
the Y coordinate of the start point.
Since:
1.2


"
24,QuadCurve2D.Double,3,double getCtrlX(),True,,"

getCtrlX
public double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Specified by:
getCtrlX in class QuadCurve2D
Returns:
X coordinate the control point
Since:
1.2


"
24,QuadCurve2D.Double,4,double getCtrlY(),True,,"

getCtrlY
public double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Specified by:
getCtrlY in class QuadCurve2D
Returns:
the Y coordinate of the control point.
Since:
1.2


"
24,QuadCurve2D.Double,5,double getX2(),True,,"

getX2
public double getX2()
Returns the X coordinate of the end point in
 double precision.

Specified by:
getX2 in class QuadCurve2D
Returns:
the x coordinate of the end point.
Since:
1.2


"
25,QuadCurve2D.Float,1,double getX1(),True,,"

getX1
public double getX1()
Returns the X coordinate of the start point in
 double in precision.

Specified by:
getX1 in class QuadCurve2D
Returns:
the X coordinate of the start point.
Since:
1.2


"
25,QuadCurve2D.Float,2,double getY1(),True,,"

getY1
public double getY1()
Returns the Y coordinate of the start point in
 double precision.

Specified by:
getY1 in class QuadCurve2D
Returns:
the Y coordinate of the start point.
Since:
1.2


"
25,QuadCurve2D.Float,3,double getCtrlX(),True,,"

getCtrlX
public double getCtrlX()
Returns the X coordinate of the control point in
 double precision.

Specified by:
getCtrlX in class QuadCurve2D
Returns:
X coordinate the control point
Since:
1.2


"
25,QuadCurve2D.Float,4,double getCtrlY(),True,,"

getCtrlY
public double getCtrlY()
Returns the Y coordinate of the control point in
 double precision.

Specified by:
getCtrlY in class QuadCurve2D
Returns:
the Y coordinate of the control point.
Since:
1.2


"
25,QuadCurve2D.Float,5,double getX2(),True,,"

getX2
public double getX2()
Returns the X coordinate of the end point in
 double precision.

Specified by:
getX2 in class QuadCurve2D
Returns:
the x coordinate of the end point.
Since:
1.2


"
26,Rectangle2D,1,double getHeight(),False,,NULL
26,Rectangle2D,2,double getWidth(),False,,NULL
26,Rectangle2D,3,"void setRect(double x, double y, double w, double h)",True,,"

setRect
public abstract void setRect(double x,
                             double y,
                             double w,
                             double h)
Sets the location and size of this Rectangle2D
 to the specified double values.

Parameters:
x - the X coordinate of the upper-left corner
          of this Rectangle2D
y - the Y coordinate of the upper-left corner
          of this Rectangle2D
w - the width of this Rectangle2D
h - the height of this Rectangle2D
Since:
1.2


"
26,Rectangle2D,4,Rectangle2D createIntersection(Rectangle2D r),True,,"

createIntersection
public abstract Rectangle2D createIntersection(Rectangle2D r)
Returns a new Rectangle2D object representing the
 intersection of this Rectangle2D with the specified
 Rectangle2D.

Parameters:
r - the Rectangle2D to be intersected with
 this Rectangle2D
Returns:
the largest Rectangle2D contained in both
          the specified Rectangle2D and in this
          Rectangle2D.
Since:
1.2


"
26,Rectangle2D,5,"boolean contains(double x, double y)",True,,"

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
27,Rectangle2D.Double,1,double getX(),True,,"

getX
public double getX()
Returns the X coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getX in class RectangularShape
Returns:
the X coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,2,double getY(),True,,"

getY
public double getY()
Returns the Y coordinate of the upper-left corner of
 the framing rectangle in double precision.

Specified by:
getY in class RectangularShape
Returns:
the Y coordinate of the upper-left corner of
 the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,3,double getWidth(),True,,"

getWidth
public double getWidth()
Returns the width of the framing rectangle in
 double precision.

Specified by:
getWidth in class RectangularShape
Returns:
the width of the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,4,double getHeight(),True,,"

getHeight
public double getHeight()
Returns the height of the framing rectangle
 in double precision.

Specified by:
getHeight in class RectangularShape
Returns:
the height of the framing rectangle.
Since:
1.2


"
27,Rectangle2D.Double,5,"void setFrame(double x, double y, double w, double h)",False,,NULL
28,Rectangle2D.Float,1,float getX(),False,,NULL
28,Rectangle2D.Float,2,float getY(),False,,NULL
28,Rectangle2D.Float,3,float getWidth(),False,,NULL
28,Rectangle2D.Float,4,float getHeight(),False,,NULL
28,Rectangle2D.Float,5,"void setFrame(float x, float y, float w, float h)",False,,NULL
29,RectangularShape,1,double getHeight(),True,,"

getHeight
public abstract double getHeight()
Returns the height of the framing rectangle
 in double precision.

Returns:
the height of the framing rectangle.
Since:
1.2


"
29,RectangularShape,2,double getWidth(),True,,"

getWidth
public abstract double getWidth()
Returns the width of the framing rectangle in
 double precision.

Returns:
the width of the framing rectangle.
Since:
1.2


"
29,RectangularShape,3,"void setFrame(double x, double y, double w, double h)",True,,"

setFrame
public abstract void setFrame(double x,
                              double y,
                              double w,
                              double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
getFrame()


"
29,RectangularShape,4,"void setFrameFromDiagonal(double x1, double y1, double x2, double y2)",True,,"

setFrameFromDiagonal
public void setFrameFromDiagonal(double x1,
                                 double y1,
                                 double x2,
                                 double y2)
Sets the diagonal of the framing rectangle of this Shape
 based on the two specified coordinates.  The framing rectangle is
 used by the subclasses of RectangularShape to define
 their geometry.

Parameters:
x1 - the X coordinate of the start point of the specified diagonal
y1 - the Y coordinate of the start point of the specified diagonal
x2 - the X coordinate of the end point of the specified diagonal
y2 - the Y coordinate of the end point of the specified diagonal
Since:
1.2


"
29,RectangularShape,5,"void setFrameFromDiagonal(Point2D p1, Point2D p2)",True,,"

setFrameFromDiagonal
public void setFrameFromDiagonal(Point2D p1,
                                 Point2D p2)
Sets the diagonal of the framing rectangle of this Shape
 based on two specified Point2D objects.  The framing
 rectangle is used by the subclasses of RectangularShape
 to define their geometry.

Parameters:
p1 - the start Point2D of the specified diagonal
p2 - the end Point2D of the specified diagonal
Since:
1.2


"
30,RoundRectangle2D,1,double getArcWidth(),True,,"

getArcWidth
public abstract double getArcWidth()
Gets the width of the arc that rounds off the corners.

Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
30,RoundRectangle2D,2,double getArcHeight(),True,,"

getArcHeight
public abstract double getArcHeight()
Gets the height of the arc that rounds off the corners.

Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
30,RoundRectangle2D,3,"void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)",True,,"

setRoundRect
public abstract void setRoundRect(double x,
                                  double y,
                                  double w,
                                  double h,
                                  double arcWidth,
                                  double arcHeight)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcWidth - the width to which to set the arc of this
                 RoundRectangle2D
arcHeight - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
30,RoundRectangle2D,4,"void setFrame(double x, double y, double w, double h)",True,,"

setFrame
public void setFrame(double x,
                     double y,
                     double w,
                     double h)
Sets the location and size of the framing rectangle of this
 Shape to the specified rectangular values.

Specified by:
setFrame in class RectangularShape
Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular shape
y - the Y coordinate of the upper-left corner of the
          specified rectangular shape
w - the width of the specified rectangular shape
h - the height of the specified rectangular shape
Since:
1.2
See Also:
RectangularShape.getFrame()


"
30,RoundRectangle2D,5,"boolean contains(double x, double y)",True,,"

contains
public boolean contains(double x,
                        double y)
Tests if the specified coordinates are inside the boundary of the
 Shape, as described by the
 
 definition of insideness.

Parameters:
x - the specified X coordinate to be tested
y - the specified Y coordinate to be tested
Returns:
true if the specified coordinates are inside
         the Shape boundary; false
         otherwise.
Since:
1.2


"
31,RoundRectangle2D.Double,1,double getArcWidth(),True,,"

getArcWidth
public double getArcWidth()
Gets the width of the arc that rounds off the corners.

Specified by:
getArcWidth in class RoundRectangle2D
Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
31,RoundRectangle2D.Double,2,double getArcHeight(),True,,"

getArcHeight
public double getArcHeight()
Gets the height of the arc that rounds off the corners.

Specified by:
getArcHeight in class RoundRectangle2D
Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
31,RoundRectangle2D.Double,3,"void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)",True,,"

setRoundRect
public void setRoundRect(double x,
                         double y,
                         double w,
                         double h,
                         double arcw,
                         double arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Specified by:
setRoundRect in class RoundRectangle2D
Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
                 RoundRectangle2D
arch - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
31,RoundRectangle2D.Double,4,"void setFrame(double x, double y, double w, double h)",False,,NULL
31,RoundRectangle2D.Double,5,"void setFrameFromDiagonal(double x1, double y1, double x2, double y2)",False,,NULL
32,RoundRectangle2D.Float,1,double getArcWidth(),True,,"

getArcWidth
public double getArcWidth()
Gets the width of the arc that rounds off the corners.

Specified by:
getArcWidth in class RoundRectangle2D
Returns:
the width of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
32,RoundRectangle2D.Float,2,double getArcHeight(),True,,"

getArcHeight
public double getArcHeight()
Gets the height of the arc that rounds off the corners.

Specified by:
getArcHeight in class RoundRectangle2D
Returns:
the height of the arc that rounds off the corners
 of this RoundRectangle2D.
Since:
1.2


"
32,RoundRectangle2D.Float,3,"void setRoundRect(double x, double y, double w, double h, double arcWidth, double arcHeight)",True,,"

setRoundRect
public void setRoundRect(double x,
                         double y,
                         double w,
                         double h,
                         double arcw,
                         double arch)
Sets the location, size, and corner radii of this
 RoundRectangle2D to the specified
 double values.

Specified by:
setRoundRect in class RoundRectangle2D
Parameters:
x - the X coordinate to which to set the
          location of this RoundRectangle2D
y - the Y coordinate to which to set the
          location of this RoundRectangle2D
w - the width to which to set this
          RoundRectangle2D
h - the height to which to set this
          RoundRectangle2D
arcw - the width to which to set the arc of this
                 RoundRectangle2D
arch - the height to which to set the arc of this
                  RoundRectangle2D
Since:
1.2


"
32,RoundRectangle2D.Float,4,"void setFrame(double x, double y, double w, double h)",False,,NULL
32,RoundRectangle2D.Float,5,"void setFrameFromDiagonal(double x1, double y1, double x2, double y2)",False,,NULL
