ClassName,Method,Return Type,Description,Full Description
AffineTransformOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.,"

createCompatibleDestImage
public BufferedImage createCompatibleDestImage(BufferedImage src,
                                               ColorModel destCM)
Creates a zeroed destination image with the correct size and number of
 bands.  A RasterFormatException may be thrown if the
 transformed width or height is equal to 0.
 
 If destCM is null,
 an appropriate ColorModel is used; this
 ColorModel may have
 an alpha channel even if the source ColorModel is opaque.

Specified by:
createCompatibleDestImage in interface BufferedImageOp
Parameters:
src - The BufferedImage to be transformed.
destCM - ColorModel of the destination.  If null,
 an appropriate ColorModel is used.
Returns:
The zeroed destination image.


"
AffineTransformOp,createCompatibleDestRaster(Raster src),WritableRaster,Creates a zeroed destination Raster with the correct size and number of bands.,"

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed destination Raster with the correct size
 and number of bands.  A RasterFormatException may be thrown
 if the transformed width or height is equal to 0.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - The Raster to be transformed.
Returns:
The zeroed destination Raster.


"
AffineTransformOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Transforms the source BufferedImage and stores the results in the destination BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Transforms the source BufferedImage and stores the results
 in the destination BufferedImage.
 If the color models for the two images do not match, a color
 conversion into the destination color model is performed.
 If the destination image is null,
 a BufferedImage is created with the source
 ColorModel.
 
 The coordinates of the rectangle returned by
 getBounds2D(BufferedImage)
 are not necessarily the same as the coordinates of the
 BufferedImage returned by this method.  If the
 upper-left corner coordinates of the rectangle are
 negative then this part of the rectangle is not drawn.  If the
 upper-left corner coordinates of the  rectangle are positive
 then the filtered image is drawn at that position in the
 destination BufferedImage.
 
 An IllegalArgumentException is thrown if the source is
 the same as the destination.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - The BufferedImage to transform.
dst - The BufferedImage in which to store the results
 of the transformation.
Returns:
The filtered BufferedImage.
Throws:
IllegalArgumentException - if src and
         dst are the same
ImagingOpException - if the image cannot be transformed
         because of a data-processing error that might be
         caused by an invalid image format, tile format, or
         image-processing operation, or any other unsupported
         operation.


"
AffineTransformOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Transforms the source Raster and stores the results in the destination Raster.,"

filter
public final WritableRaster filter(Raster src,
                                   WritableRaster dst)
Transforms the source Raster and stores the results in
 the destination Raster.  This operation performs the
 transform band by band.
 
 If the destination Raster is null, a new
 Raster is created.
 An IllegalArgumentException may be thrown if the source is
 the same as the destination or if the number of bands in
 the source is not equal to the number of bands in the
 destination.
 
 The coordinates of the rectangle returned by
 getBounds2D(Raster)
 are not necessarily the same as the coordinates of the
 WritableRaster returned by this method.  If the
 upper-left corner coordinates of rectangle are negative then
 this part of the rectangle is not drawn.  If the coordinates
 of the rectangle are positive then the filtered image is drawn at
 that position in the destination Raster.
 

Specified by:
filter in interface RasterOp
Parameters:
src - The Raster to transform.
dst - The Raster in which to store the results of the
 transformation.
Returns:
The transformed Raster.
Throws:
ImagingOpException - if the raster cannot be transformed
         because of a data-processing error that might be
         caused by an invalid image format, tile format, or
         image-processing operation, or any other unsupported
         operation.


"
AffineTransformOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the transformed destination.,"

getBounds2D
public final Rectangle2D getBounds2D(BufferedImage src)
Returns the bounding box of the transformed destination.  The
 rectangle returned is the actual bounding box of the
 transformed points.  The coordinates of the upper-left corner
 of the returned rectangle might not be (0, 0).

Specified by:
getBounds2D in interface BufferedImageOp
Parameters:
src - The BufferedImage to be transformed.
Returns:
The Rectangle2D representing the destination's
 bounding box.


"
AffineTransformOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the transformed destination.,"

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the transformed destination.  The
 rectangle returned will be the actual bounding box of the
 transformed points.  The coordinates of the upper-left corner
 of the returned rectangle might not be (0, 0).

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - The Raster to be transformed.
Returns:
The Rectangle2D representing the destination's
 bounding box.


"
AffineTransformOp,getInterpolationType(),int,Returns the interpolation type used by this op.,"

getInterpolationType
public final int getInterpolationType()
Returns the interpolation type used by this op.

Returns:
the interpolation type.
See Also:
TYPE_NEAREST_NEIGHBOR, 
TYPE_BILINEAR, 
TYPE_BICUBIC


"
AffineTransformOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the corresponding destination point given a point in the source.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the corresponding destination point given a
 point in the source.  If dstPt is specified, it
 is used to hold the return value.

Specified by:
getPoint2D in interface BufferedImageOp
Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - The Point2D that represents the source
              point.
dstPt - The Point2D in which to store the result.
Returns:
The Point2D in the destination that corresponds to
 the specified point in the source.


"
AffineTransformOp,getRenderingHints(),RenderingHints,Returns the rendering hints used by this transform operation.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints used by this transform operation.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
The RenderingHints object associated with this op.


"
AffineTransformOp,getTransform(),AffineTransform,Returns the affine transform used by this transform operation.,"

getTransform
public final AffineTransform getTransform()
Returns the affine transform used by this transform operation.

Returns:
The AffineTransform associated with this op.


"
AreaAveragingScaleFilter,setHints(int hints),void,Detect if the data is being delivered with the necessary hints to allow the averaging algorithm to do its work.,"

setHints
public void setHints(int hints)
Detect if the data is being delivered with the necessary hints
 to allow the averaging algorithm to do its work.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose
 pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setHints in interface ImageConsumer
Overrides:
setHints in class ImageFilter
Parameters:
hints - a set of hints that the ImageConsumer uses to
        process the pixels
See Also:
ImageConsumer.setHints(int)


"
AreaAveragingScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Combine the components for the delivered byte pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
Combine the components for the delivered byte pixels into the
 accumulation arrays and send on any averaged data for rows of
 pixels that are complete.  If the correct hints were not
 specified in the setHints call then relay the work to our
 superclass which is capable of scaling pixels regardless of
 the delivery hints.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image
 whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ReplicateScaleFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ReplicateScaleFilter


"
AreaAveragingScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Combine the components for the delivered int pixels into the accumulation arrays and send on any averaged data for rows of pixels that are complete.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
Combine the components for the delivered int pixels into the
 accumulation arrays and send on any averaged data for rows of
 pixels that are complete.  If the correct hints were not
 specified in the setHints call then relay the work to our
 superclass which is capable of scaling pixels regardless of
 the delivery hints.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image
 whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ReplicateScaleFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ReplicateScaleFilter


"
BandCombineOp,createCompatibleDestRaster(Raster src),WritableRaster,Creates a zeroed destination Raster with the correct size and number of bands.,"

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed destination Raster with the correct size
 and number of bands.
 An IllegalArgumentException may be thrown if the number of
 bands in the source is incompatible with the matrix.  See
 the class comments for more details.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - The Raster to be filtered.
Returns:
The zeroed destination Raster.


"
BandCombineOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Transforms the Raster using the matrix specified in the constructor.,"

filter
public WritableRaster filter(Raster src,
                             WritableRaster dst)
Transforms the Raster using the matrix specified in the
 constructor. An IllegalArgumentException may be thrown if
 the number of bands in the source or destination is incompatible with
 the matrix.  See the class comments for more details.
 
 If the destination is null, it will be created with a number of bands
 equalling the number of rows in the matrix. No exception is thrown
 if the operation causes a data overflow.

Specified by:
filter in interface RasterOp
Parameters:
src - The Raster to be filtered.
dst - The Raster in which to store the results
 of the filter operation.
Returns:
The filtered Raster.
Throws:
IllegalArgumentException - If the number of bands in the
 source or destination is incompatible with the matrix.


"
BandCombineOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the transformed destination.,"

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the transformed destination.  Since
 this is not a geometric operation, the bounding box is the same for
 the source and destination.
 An IllegalArgumentException may be thrown if the number of
 bands in the source is incompatible with the matrix.  See
 the class comments for more details.

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - The Raster to be filtered.
Returns:
The Rectangle2D representing the destination
 image's bounding box.
Throws:
IllegalArgumentException - If the number of bands in the source
 is incompatible with the matrix.


"
BandCombineOp,getMatrix(),float[][],Returns a copy of the linear combination matrix.,"

getMatrix
public final float[][] getMatrix()
Returns a copy of the linear combination matrix.

Returns:
The matrix associated with this band combine operation.


"
BandCombineOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the corresponding destination point given a point in the source Raster.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the corresponding destination point given a
 point in the source Raster.  If dstPt is
 specified, it is used to hold the return value.
 Since this is not a geometric operation, the point returned
 is the same as the specified srcPt.

Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - The Point2D that represents the point in
              the source Raster
dstPt - The Point2D in which to store the result.
Returns:
The Point2D in the destination image that
 corresponds to the specified point in the source image.


"
BandCombineOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this operation.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints for this operation.

Specified by:
getRenderingHints in interface RasterOp
Returns:
The RenderingHints object associated with this
 operation.  Returns null if no hints have been set.


"
BandedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new BandedSampleModel with the specified width and height.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a new BandedSampleModel with the specified
 width and height.  The new BandedSampleModel will have the same
 number of bands, storage data type, and bank indices
 as this BandedSampleModel.  The band offsets will be compressed
 such that the offset between bands will be w*pixelStride and
 the minimum of all of the band offsets is zero.

Overrides:
createCompatibleSampleModel in class ComponentSampleModel
Parameters:
w - the width of the resulting BandedSampleModel
h - the height of the resulting BandedSampleModel
Returns:
a new BandedSampleModel with the specified
         width and height.
Throws:
IllegalArgumentException - if w or
         h equals either
         Integer.MAX_VALUE or
         Integer.MIN_VALUE
IllegalArgumentException - if dataType is not
         one of the supported data types


"
BandedSampleModel,createDataBuffer(),DataBuffer,"Creates a DataBuffer that corresponds to this BandedSampleModel, The DataBuffer's data type, number of banks, and size will be consistent with this BandedSampleModel.","

createDataBuffer
public DataBuffer createDataBuffer()
Creates a DataBuffer that corresponds to this BandedSampleModel,
 The DataBuffer's data type, number of banks, and size
 will be consistent with this BandedSampleModel.

Overrides:
createDataBuffer in class ComponentSampleModel
Returns:
a DataBuffer whose data type, number of banks
         and size are consistent with this
         ComponentSampleModel.
Throws:
IllegalArgumentException - if dataType is not
         one of the supported types.


"
BandedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new BandedSampleModel with a subset of the bands of this BandedSampleModel.,"

createSubsetSampleModel
public SampleModel createSubsetSampleModel(int[] bands)
Creates a new BandedSampleModel with a subset of the bands of this
 BandedSampleModel.  The new BandedSampleModel can be
 used with any DataBuffer that the existing BandedSampleModel
 can be used with.  The new BandedSampleModel/DataBuffer
 combination will represent an image with a subset of the bands
 of the original BandedSampleModel/DataBuffer combination.

Overrides:
createSubsetSampleModel in class ComponentSampleModel
Parameters:
bands - a subset of bands from this
              ComponentSampleModel
Returns:
a ComponentSampleModel created with a subset
          of bands from this ComponentSampleModel.
Throws:
RasterFormatException - if the number of bands is greater than
                               the number of banks in this sample model.
IllegalArgumentException - if dataType is not
         one of the supported data types


"
BandedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              Object obj,
                              DataBuffer data)
Returns data for a single pixel in a primitive array of type
 TransferType.  For a BandedSampleModel, this will be the same
 as the data type, and samples will be returned one per array
 element.  Generally, obj
 should be passed in as null, so that the Object will be created
 automatically and will be of the right primitive data type.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 BandedSampleModel bsm1, to DataBuffer db2,
 whose storage layout is described by
 BandedSampleModel bsm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       BandedSampleModel bsm1, bsm2;
       DataBufferInt db1, db2;
       bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                            db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is non-null, it should be a primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is non-null and is not large enough to hold
 the pixel data.

Overrides:
getDataElements in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
obj - If non-null, a primitive array in which to return
                  the pixel data.
data - The DataBuffer containing the image data.
Returns:
the data for the specified pixel.
See Also:
setDataElements(int, int, Object, DataBuffer)


"
BandedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns all samples for the specified pixel in an int array.,"

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray,
                      DataBuffer data)
Returns all samples for the specified pixel in an int array.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getPixel in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples for the specified pixel.
See Also:
setPixel(int, int, int[], DataBuffer)


"
BandedSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per data array element.","

getPixels
public int[] getPixels(int x,
                       int y,
                       int w,
                       int h,
                       int[] iArray,
                       DataBuffer data)
Returns all samples for the specified rectangle of pixels in
 an int array, one sample per data array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getPixels in class ComponentSampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples for the pixels within the specified region.
See Also:
setPixels(int, int, int, int, int[], DataBuffer)


"
BandedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y).","

getSample
public int getSample(int x,
                     int y,
                     int b,
                     DataBuffer data)
Returns as int the sample in a specified band for the pixel
 located at (x,y).
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getSample in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
data - The DataBuffer containing the image data
Returns:
the sample in the specified band for the specified pixel.
See Also:
setSample(int, int, int, int, DataBuffer)


"
BandedSampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double.","

getSampleDouble
public double getSampleDouble(int x,
                              int y,
                              int b,
                              DataBuffer data)
Returns the sample in a specified band
 for a pixel located at (x,y) as a double.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getSampleDouble in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
data - The DataBuffer containing the image data
Returns:
a double value that represents the sample in the specified
 band for the specified pixel.


"
BandedSampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float.","

getSampleFloat
public float getSampleFloat(int x,
                            int y,
                            int b,
                            DataBuffer data)
Returns the sample in a specified band
 for the pixel located at (x,y) as a float.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getSampleFloat in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
data - The DataBuffer containing the image data
Returns:
a float value that represents the sample in the specified
 band for the specified pixel.


"
BandedSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element.","

getSamples
public int[] getSamples(int x,
                        int y,
                        int w,
                        int h,
                        int b,
                        int[] iArray,
                        DataBuffer data)
Returns the samples in a specified band for the specified rectangle
 of pixels in an int array, one sample per data array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getSamples in class ComponentSampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
b - The band to return
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples in the specified band for the pixels within
 the specified region.
See Also:
setSamples(int, int, int, int, int, int[], DataBuffer)


"
BandedSampleModel,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class ComponentSampleModel
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
BandedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Object obj,
                            DataBuffer data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.  For a BandedSampleModel,
 this will be the same as the data type, and samples are transferred
 one per array element.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 BandedSampleModel bsm1, to DataBuffer db2,
 whose storage layout is described by
 BandedSampleModel bsm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       BandedSampleModel bsm1, bsm2;
       DataBufferInt db1, db2;
       bsm2.setDataElements(x, y, bsm1.getDataElements(x, y, null, db1),
                            db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 obj must be a primitive array of type TransferType.  Otherwise,
 a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is not large enough to hold the pixel data.

Overrides:
setDataElements in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
obj - If non-null, returns the primitive array in this
                  object
data - The DataBuffer containing the image data
See Also:
getDataElements(int, int, Object, DataBuffer)


"
BandedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using an int array of samples for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setPixel in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
iArray - The input samples in an int array
data - The DataBuffer containing the image data
See Also:
getPixel(int, int, int[], DataBuffer)


"
BandedSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      int[] iArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from an int array containing
 one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setPixels in class ComponentSampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
iArray - The input samples in an int array
data - The DataBuffer containing the image data
See Also:
getPixels(int, int, int, int, int[], DataBuffer)


"
BandedSampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      double s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a double for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setSample in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to set
s - The input sample as a double
data - The DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
BandedSampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      float s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a float for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setSample in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to set
s - The input sample as a float
data - The DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
BandedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setSample in class ComponentSampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to set
s - The input sample as an int
data - The DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
BandedSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       int[] iArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from an int array containing one sample per data array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setSamples in class ComponentSampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
b - The band to set
iArray - The input sample array
data - The DataBuffer containing the image data
See Also:
getSamples(int, int, int, int, int, int[], DataBuffer)


"
BufferedImage,addTileObserver(TileObserver to),void,Adds a tile observer.,"

addTileObserver
public void addTileObserver(TileObserver to)
Adds a tile observer.  If the observer is already present,
 it receives multiple notifications.

Specified by:
addTileObserver in interface WritableRenderedImage
Parameters:
to - the specified TileObserver


"
BufferedImage,coerceData(boolean isAlphaPremultiplied),void,Forces the data to match the state specified in the isAlphaPremultiplied variable.,"

coerceData
public void coerceData(boolean isAlphaPremultiplied)
Forces the data to match the state specified in the
 isAlphaPremultiplied variable.  It may multiply or
 divide the color raster data by alpha, or do nothing if the data is
 in the correct state.

Parameters:
isAlphaPremultiplied - true if the alpha has been
          premultiplied; false otherwise.


"
BufferedImage,copyData(WritableRaster outRaster),WritableRaster,Computes an arbitrary rectangular region of the BufferedImage and copies it into a specified WritableRaster.,"

copyData
public WritableRaster copyData(WritableRaster outRaster)
Computes an arbitrary rectangular region of the
 BufferedImage and copies it into a specified
 WritableRaster.  The region to be computed is
 determined from the bounds of the specified
 WritableRaster.  The specified
 WritableRaster must have a
 SampleModel that is compatible with this image.  If
 outRaster is null,
 an appropriate WritableRaster is created.

Specified by:
copyData in interface RenderedImage
Parameters:
outRaster - a WritableRaster to hold the returned
          part of the image, or null
Returns:
a reference to the supplied or created
          WritableRaster.


"
BufferedImage,createGraphics(),Graphics2D,"Creates a Graphics2D, which can be used to draw into this BufferedImage.","

createGraphics
public Graphics2D createGraphics()
Creates a Graphics2D, which can be used to draw into
 this BufferedImage.

Returns:
a Graphics2D, used for drawing into this
          image.


"
BufferedImage,getAlphaRaster(),WritableRaster,"Returns a WritableRaster representing the alpha channel for BufferedImage objects with ColorModel objects that support a separate spatial alpha channel, such as ComponentColorModel and DirectColorModel.","

getAlphaRaster
public WritableRaster getAlphaRaster()
Returns a WritableRaster representing the alpha
 channel for BufferedImage objects
 with ColorModel objects that support a separate
 spatial alpha channel, such as ComponentColorModel and
 DirectColorModel.  Returns null if there
 is no alpha channel associated with the ColorModel in
 this image.  This method assumes that for all
 ColorModel objects other than
 IndexColorModel, if the ColorModel
 supports alpha, there is a separate alpha channel
 which is stored as the last band of image data.
 If the image uses an IndexColorModel that
 has alpha in the lookup table, this method returns
 null since there is no spatially discrete alpha
 channel.  This method creates a new
 WritableRaster, but shares the data array.

Returns:
a WritableRaster or null if this
          BufferedImage has no alpha channel associated
          with its ColorModel.


"
BufferedImage,getColorModel(),ColorModel,Returns the ColorModel.,"

getColorModel
public ColorModel getColorModel()
Returns the ColorModel.

Specified by:
getColorModel in interface RenderedImage
Returns:
the ColorModel of this
  BufferedImage.


"
BufferedImage,getData(),Raster,Returns the image as one large tile.,"

getData
public Raster getData()
Returns the image as one large tile.  The Raster
 returned is a copy of the image data is not updated if the
 image is changed.

Specified by:
getData in interface RenderedImage
Returns:
a Raster that is a copy of the image data.
See Also:
setData(Raster)


"
BufferedImage,getData(Rectangle rect),Raster,Computes and returns an arbitrary region of the BufferedImage.,"

getData
public Raster getData(Rectangle rect)
Computes and returns an arbitrary region of the
 BufferedImage.  The Raster returned is a
 copy of the image data and is not updated if the image is
 changed.

Specified by:
getData in interface RenderedImage
Parameters:
rect - the region of the BufferedImage to be
 returned.
Returns:
a Raster that is a copy of the image data of
          the specified region of the BufferedImage
See Also:
setData(Raster)


"
BufferedImage,getGraphics(),Graphics,"This method returns a Graphics2D, but is here for backwards compatibility.","

getGraphics
public Graphics getGraphics()
This method returns a Graphics2D, but is here
 for backwards compatibility.  createGraphics is more
 convenient, since it is declared to return a
 Graphics2D.

Specified by:
getGraphics in class Image
Returns:
a Graphics2D, which can be used to draw into
          this image.
See Also:
Graphics, 
Component.createImage(int, int)


"
BufferedImage,getHeight(),int,Returns the height of the BufferedImage.,"

getHeight
public int getHeight()
Returns the height of the BufferedImage.

Specified by:
getHeight in interface RenderedImage
Returns:
the height of this BufferedImage


"
BufferedImage,getHeight(ImageObserver observer),int,Returns the height of the BufferedImage.,"

getHeight
public int getHeight(ImageObserver observer)
Returns the height of the BufferedImage.

Specified by:
getHeight in class Image
Parameters:
observer - ignored
Returns:
the height of this BufferedImage
See Also:
Image.getWidth(java.awt.image.ImageObserver), 
ImageObserver


"
BufferedImage,getMinTileX(),int,Returns the minimum tile index in the x direction.,"

getMinTileX
public int getMinTileX()
Returns the minimum tile index in the x direction.
 This is always zero.

Specified by:
getMinTileX in interface RenderedImage
Returns:
the minimum tile index in the x direction.


"
BufferedImage,getMinTileY(),int,Returns the minimum tile index in the y direction.,"

getMinTileY
public int getMinTileY()
Returns the minimum tile index in the y direction.
 This is always zero.

Specified by:
getMinTileY in interface RenderedImage
Returns:
the minimum tile index in the y direction.


"
BufferedImage,getMinX(),int,Returns the minimum x coordinate of this BufferedImage.,"

getMinX
public int getMinX()
Returns the minimum x coordinate of this
 BufferedImage.  This is always zero.

Specified by:
getMinX in interface RenderedImage
Returns:
the minimum x coordinate of this
          BufferedImage.


"
BufferedImage,getMinY(),int,Returns the minimum y coordinate of this BufferedImage.,"

getMinY
public int getMinY()
Returns the minimum y coordinate of this
 BufferedImage.  This is always zero.

Specified by:
getMinY in interface RenderedImage
Returns:
the minimum y coordinate of this
          BufferedImage.


"
BufferedImage,getNumXTiles(),int,Returns the number of tiles in the x direction.,"

getNumXTiles
public int getNumXTiles()
Returns the number of tiles in the x direction.
 This is always one.

Specified by:
getNumXTiles in interface RenderedImage
Returns:
the number of tiles in the x direction.


"
BufferedImage,getNumYTiles(),int,Returns the number of tiles in the y direction.,"

getNumYTiles
public int getNumYTiles()
Returns the number of tiles in the y direction.
 This is always one.

Specified by:
getNumYTiles in interface RenderedImage
Returns:
the number of tiles in the y direction.


"
BufferedImage,getProperty(String name),Object,Returns a property of the image by name.,"

getProperty
public Object getProperty(String name)
Returns a property of the image by name.

Specified by:
getProperty in interface RenderedImage
Parameters:
name - the property name
Returns:
an Object that is the property referred to by
          the specified name.
Throws:
NullPointerException - if the property name is null.
See Also:
Image.UndefinedProperty


"
BufferedImage,"getProperty(String name, ImageObserver observer)",Object,Returns a property of the image by name.,"

getProperty
public Object getProperty(String name,
                          ImageObserver observer)
Returns a property of the image by name.  Individual property names
 are defined by the various image formats.  If a property is not
 defined for a particular image, this method returns the
 UndefinedProperty field.  If the properties
 for this image are not yet known, then this method returns
 null and the ImageObserver object is
 notified later.  The property name ""comment"" should be used to
 store an optional comment that can be presented to the user as a
 description of the image, its source, or its author.

Specified by:
getProperty in class Image
Parameters:
name - the property name
observer - the ImageObserver that receives
  notification regarding image information
Returns:
an Object that is the property referred to by the
          specified name or null if the
          properties of this image are not yet known.
Throws:
NullPointerException - if the property name is null.
See Also:
ImageObserver, 
Image.UndefinedProperty


"
BufferedImage,getPropertyNames(),String[],"Returns an array of names recognized by getProperty(String) or null, if no property names are recognized.","

getPropertyNames
public String[] getPropertyNames()
Returns an array of names recognized by
 getProperty(String)
 or null, if no property names are recognized.

Specified by:
getPropertyNames in interface RenderedImage
Returns:
a String array containing all of the property
          names that getProperty(String) recognizes;
          or null if no property names are recognized.


"
BufferedImage,getRaster(),WritableRaster,Returns the WritableRaster.,"

getRaster
public WritableRaster getRaster()
Returns the WritableRaster.

Returns:
the WriteableRaster of this
  BufferedImage.


"
BufferedImage,"getRGB(int x, int y)",int,Returns an integer pixel in the default RGB color model (TYPE_INT_ARGB) and default sRGB colorspace.,"

getRGB
public int getRGB(int x,
                  int y)
Returns an integer pixel in the default RGB color model
 (TYPE_INT_ARGB) and default sRGB colorspace.  Color
 conversion takes place if this default model does not match
 the image ColorModel.  There are only 8-bits of
 precision for each color component in the returned data when using
 this method.

 

 An ArrayOutOfBoundsException may be thrown
 if the coordinates are not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - the X coordinate of the pixel from which to get
          the pixel in the default RGB color model and sRGB
          color space
y - the Y coordinate of the pixel from which to get
          the pixel in the default RGB color model and sRGB
          color space
Returns:
an integer pixel in the default RGB color model and
          default sRGB colorspace.
See Also:
setRGB(int, int, int), 
setRGB(int, int, int, int, int[], int, int)


"
BufferedImage,"getRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)",int[],"Returns an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, from a portion of the image data.","

getRGB
public int[] getRGB(int startX,
                    int startY,
                    int w,
                    int h,
                    int[] rgbArray,
                    int offset,
                    int scansize)
Returns an array of integer pixels in the default RGB color model
 (TYPE_INT_ARGB) and default sRGB color space,
 from a portion of the image data.  Color conversion takes
 place if the default model does not match the image
 ColorModel.  There are only 8-bits of precision for
 each color component in the returned data when
 using this method.  With a specified coordinate (x, y) in the
 image, the ARGB pixel can be accessed in this way:

 
    pixel   = rgbArray[offset + (y-startY)*scansize + (x-startX)]; 


 An ArrayOutOfBoundsException may be thrown
 if the region is not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
startX - the starting X coordinate
startY - the starting Y coordinate
w - width of region
h - height of region
rgbArray - if not null, the rgb pixels are
          written here
offset - offset into the rgbArray
scansize - scanline stride for the rgbArray
Returns:
array of RGB pixels.
See Also:
setRGB(int, int, int), 
setRGB(int, int, int, int, int[], int, int)


"
BufferedImage,getSampleModel(),SampleModel,Returns the SampleModel associated with this BufferedImage.,"

getSampleModel
public SampleModel getSampleModel()
Returns the SampleModel associated with this
 BufferedImage.

Specified by:
getSampleModel in interface RenderedImage
Returns:
the SampleModel of this
          BufferedImage.


"
BufferedImage,getSource(),ImageProducer,Returns the object that produces the pixels for the image.,"

getSource
public ImageProducer getSource()
Returns the object that produces the pixels for the image.

Specified by:
getSource in class Image
Returns:
the ImageProducer that is used to produce the
 pixels for this image.
See Also:
ImageProducer


"
BufferedImage,getSources(),Vector<RenderedImage>,"Returns a Vector of RenderedImage objects that are the immediate sources, not the sources of these immediate sources, of image data for this BufferedImage.","

getSources
public Vector<RenderedImage> getSources()
Returns a Vector of RenderedImage objects that are
 the immediate sources, not the sources of these immediate sources,
 of image data for this BufferedImage.  This
 method returns null if the BufferedImage
 has no information about its immediate sources.  It returns an
 empty Vector if the BufferedImage has no
 immediate sources.

Specified by:
getSources in interface RenderedImage
Returns:
a Vector containing immediate sources of
          this BufferedImage object's image date, or
          null if this BufferedImage has
          no information about its immediate sources, or an empty
          Vector if this BufferedImage
          has no immediate sources.


"
BufferedImage,"getSubimage(int x, int y, int w, int h)",BufferedImage,Returns a subimage defined by a specified rectangular region.,"

getSubimage
public BufferedImage getSubimage(int x,
                                 int y,
                                 int w,
                                 int h)
Returns a subimage defined by a specified rectangular region.
 The returned BufferedImage shares the same
 data array as the original image.

Parameters:
x - the X coordinate of the upper-left corner of the
          specified rectangular region
y - the Y coordinate of the upper-left corner of the
          specified rectangular region
w - the width of the specified rectangular region
h - the height of the specified rectangular region
Returns:
a BufferedImage that is the subimage of this
          BufferedImage.
Throws:
RasterFormatException - if the specified
 area is not contained within this BufferedImage.


"
BufferedImage,"getTile(int tileX, int tileY)",Raster,"Returns tile (tileX, tileY).","

getTile
public Raster getTile(int tileX,
                      int tileY)
Returns tile (tileX, tileY).  Note
 that tileX and tileY are indices
 into the tile array, not pixel locations.  The Raster
 that is returned is live, which means that it is updated if the
 image is changed.

Specified by:
getTile in interface RenderedImage
Parameters:
tileX - the x index of the requested tile in the tile array
tileY - the y index of the requested tile in the tile array
Returns:
a Raster that is the tile defined by the
          arguments tileX and tileY.
Throws:
ArrayIndexOutOfBoundsException - if both
          tileX and tileY are not
          equal to 0


"
BufferedImage,getTileGridXOffset(),int,"Returns the x offset of the tile grid relative to the origin, For example, the x coordinate of the location of tile (0, 0).","

getTileGridXOffset
public int getTileGridXOffset()
Returns the x offset of the tile grid relative to the origin,
 For example, the x coordinate of the location of tile
 (0, 0).  This is always zero.

Specified by:
getTileGridXOffset in interface RenderedImage
Returns:
the x offset of the tile grid.


"
BufferedImage,getTileGridYOffset(),int,"Returns the y offset of the tile grid relative to the origin, For example, the y coordinate of the location of tile (0, 0).","

getTileGridYOffset
public int getTileGridYOffset()
Returns the y offset of the tile grid relative to the origin,
 For example, the y coordinate of the location of tile
 (0, 0).  This is always zero.

Specified by:
getTileGridYOffset in interface RenderedImage
Returns:
the y offset of the tile grid.


"
BufferedImage,getTileHeight(),int,Returns the tile height in pixels.,"

getTileHeight
public int getTileHeight()
Returns the tile height in pixels.

Specified by:
getTileHeight in interface RenderedImage
Returns:
the tile height in pixels.


"
BufferedImage,getTileWidth(),int,Returns the tile width in pixels.,"

getTileWidth
public int getTileWidth()
Returns the tile width in pixels.

Specified by:
getTileWidth in interface RenderedImage
Returns:
the tile width in pixels.


"
BufferedImage,getTransparency(),int,Returns the transparency.,"

getTransparency
public int getTransparency()
Returns the transparency.  Returns either OPAQUE, BITMASK,
 or TRANSLUCENT.

Specified by:
getTransparency in interface Transparency
Returns:
the transparency of this BufferedImage.
Since:
1.5
See Also:
Transparency.OPAQUE, 
Transparency.BITMASK, 
Transparency.TRANSLUCENT


"
BufferedImage,getType(),int,Returns the image type.,"

getType
public int getType()
Returns the image type.  If it is not one of the known types,
 TYPE_CUSTOM is returned.

Returns:
the image type of this BufferedImage.
See Also:
TYPE_INT_RGB, 
TYPE_INT_ARGB, 
TYPE_INT_ARGB_PRE, 
TYPE_INT_BGR, 
TYPE_3BYTE_BGR, 
TYPE_4BYTE_ABGR, 
TYPE_4BYTE_ABGR_PRE, 
TYPE_BYTE_GRAY, 
TYPE_BYTE_BINARY, 
TYPE_BYTE_INDEXED, 
TYPE_USHORT_GRAY, 
TYPE_USHORT_565_RGB, 
TYPE_USHORT_555_RGB, 
TYPE_CUSTOM


"
BufferedImage,getWidth(),int,Returns the width of the BufferedImage.,"

getWidth
public int getWidth()
Returns the width of the BufferedImage.

Specified by:
getWidth in interface RenderedImage
Returns:
the width of this BufferedImage


"
BufferedImage,getWidth(ImageObserver observer),int,Returns the width of the BufferedImage.,"

getWidth
public int getWidth(ImageObserver observer)
Returns the width of the BufferedImage.

Specified by:
getWidth in class Image
Parameters:
observer - ignored
Returns:
the width of this BufferedImage
See Also:
Image.getHeight(java.awt.image.ImageObserver), 
ImageObserver


"
BufferedImage,"getWritableTile(int tileX, int tileY)",WritableRaster,Checks out a tile for writing.,"

getWritableTile
public WritableRaster getWritableTile(int tileX,
                                      int tileY)
Checks out a tile for writing.  All registered
 TileObservers are notified when a tile goes from having
 no writers to having one writer.

Specified by:
getWritableTile in interface WritableRenderedImage
Parameters:
tileX - the x index of the tile
tileY - the y index of the tile
Returns:
a WritableRaster that is the tile, indicated by
            the specified indices, to be checked out for writing.


"
BufferedImage,getWritableTileIndices(),Point[],Returns an array of Point objects indicating which tiles are checked out for writing.,"

getWritableTileIndices
public Point[] getWritableTileIndices()
Returns an array of Point objects indicating which tiles
 are checked out for writing.  Returns null if none are
 checked out.

Specified by:
getWritableTileIndices in interface WritableRenderedImage
Returns:
a Point array that indicates the tiles that
          are checked out for writing, or null if no
          tiles are checked out for writing.


"
BufferedImage,hasTileWriters(),boolean,Returns whether or not any tile is checked out for writing.,"

hasTileWriters
public boolean hasTileWriters()
Returns whether or not any tile is checked out for writing.
 Semantically equivalent to
 
 (getWritableTileIndices() != null).
 

Specified by:
hasTileWriters in interface WritableRenderedImage
Returns:
true if any tile is checked out for writing;
          false otherwise.


"
BufferedImage,isAlphaPremultiplied(),boolean,Returns whether or not the alpha has been premultiplied.,"

isAlphaPremultiplied
public boolean isAlphaPremultiplied()
Returns whether or not the alpha has been premultiplied.  It
 returns false if there is no alpha.

Returns:
true if the alpha has been premultiplied;
          false otherwise.


"
BufferedImage,"isTileWritable(int tileX, int tileY)",boolean,Returns whether or not a tile is currently checked out for writing.,"

isTileWritable
public boolean isTileWritable(int tileX,
                              int tileY)
Returns whether or not a tile is currently checked out for writing.

Specified by:
isTileWritable in interface WritableRenderedImage
Parameters:
tileX - the x index of the tile.
tileY - the y index of the tile.
Returns:
true if the tile specified by the specified
          indices is checked out for writing; false
          otherwise.
Throws:
ArrayIndexOutOfBoundsException - if both
          tileX and tileY are not equal
          to 0


"
BufferedImage,"releaseWritableTile(int tileX, int tileY)",void,Relinquishes permission to write to a tile.,"

releaseWritableTile
public void releaseWritableTile(int tileX,
                                int tileY)
Relinquishes permission to write to a tile.  If the caller
 continues to write to the tile, the results are undefined.
 Calls to this method should only appear in matching pairs
 with calls to getWritableTile(int, int).  Any other leads
 to undefined results.  All registered TileObservers
 are notified when a tile goes from having one writer to having no
 writers.

Specified by:
releaseWritableTile in interface WritableRenderedImage
Parameters:
tileX - the x index of the tile
tileY - the y index of the tile


"
BufferedImage,removeTileObserver(TileObserver to),void,Removes a tile observer.,"

removeTileObserver
public void removeTileObserver(TileObserver to)
Removes a tile observer.  If the observer was not registered,
 nothing happens.  If the observer was registered for multiple
 notifications, it is now registered for one fewer notification.

Specified by:
removeTileObserver in interface WritableRenderedImage
Parameters:
to - the specified TileObserver.


"
BufferedImage,setData(Raster r),void,"Sets a rectangular region of the image to the contents of the specified Raster r, which is assumed to be in the same coordinate space as the BufferedImage.","

setData
public void setData(Raster r)
Sets a rectangular region of the image to the contents of the
 specified Raster r, which is
 assumed to be in the same coordinate space as the
 BufferedImage. The operation is clipped to the bounds
 of the BufferedImage.

Specified by:
setData in interface WritableRenderedImage
Parameters:
r - the specified Raster
See Also:
getData(), 
getData(Rectangle)


"
BufferedImage,"setRGB(int x, int y, int rgb)",void,Sets a pixel in this BufferedImage to the specified RGB value.,"

setRGB
public void setRGB(int x,
                   int y,
                   int rgb)
Sets a pixel in this BufferedImage to the specified
 RGB value. The pixel is assumed to be in the default RGB color
 model, TYPE_INT_ARGB, and default sRGB color space.  For images
 with an IndexColorModel, the index with the nearest
 color is chosen.

 

 An ArrayOutOfBoundsException may be thrown
 if the coordinates are not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - the X coordinate of the pixel to set
y - the Y coordinate of the pixel to set
rgb - the RGB value
See Also:
getRGB(int, int), 
getRGB(int, int, int, int, int[], int, int)


"
BufferedImage,"setRGB(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)",void,"Sets an array of integer pixels in the default RGB color model (TYPE_INT_ARGB) and default sRGB color space, into a portion of the image data.","

setRGB
public void setRGB(int startX,
                   int startY,
                   int w,
                   int h,
                   int[] rgbArray,
                   int offset,
                   int scansize)
Sets an array of integer pixels in the default RGB color model
 (TYPE_INT_ARGB) and default sRGB color space,
 into a portion of the image data.  Color conversion takes place
 if the default model does not match the image
 ColorModel.  There are only 8-bits of precision for
 each color component in the returned data when
 using this method.  With a specified coordinate (x, y) in the
 this image, the ARGB pixel can be accessed in this way:
 
    pixel   = rgbArray[offset + (y-startY)*scansize + (x-startX)];
 
 WARNING: No dithering takes place.

 

 An ArrayOutOfBoundsException may be thrown
 if the region is not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
startX - the starting X coordinate
startY - the starting Y coordinate
w - width of the region
h - height of the region
rgbArray - the rgb pixels
offset - offset into the rgbArray
scansize - scanline stride for the rgbArray
See Also:
getRGB(int, int), 
getRGB(int, int, int, int, int[], int, int)


"
BufferedImage,toString(),String,Returns a String representation of this BufferedImage object and its values.,"

toString
public String toString()
Returns a String representation of this
 BufferedImage object and its values.

Overrides:
toString in class Object
Returns:
a String representing this
          BufferedImage.


"
BufferedImageFilter,getBufferedImageOp(),BufferedImageOp,Returns the BufferedImageOp.,"

getBufferedImageOp
public BufferedImageOp getBufferedImageOp()
Returns the BufferedImageOp.

Returns:
the operator of this BufferedImageFilter.


"
BufferedImageFilter,imageComplete(int status),void,Filters the information provided in the imageComplete method of the ImageConsumer interface.,"

imageComplete
public void imageComplete(int status)
Filters the information provided in the imageComplete
 method of the ImageConsumer interface.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
imageComplete in interface ImageConsumer
Overrides:
imageComplete in class ImageFilter
Parameters:
status - the status of image loading
Throws:
ImagingOpException - if there was a problem calling the filter
 method of the BufferedImageOp associated with this
 instance.
See Also:
ImageConsumer.imageComplete(int)


"
BufferedImageFilter,setColorModel(ColorModel model),void,Filters the information provided in the setColorModel method of the ImageConsumer interface.,"

setColorModel
public void setColorModel(ColorModel model)
Filters the information provided in the
 setColorModel method
 of the ImageConsumer interface.
 
 If model is null, this
 method clears the current ColorModel of this
 BufferedImageFilter.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image
 whose pixels are being filtered.  Developers using this
 class to retrieve pixels from an image
 should avoid calling this method directly since that
 operation could result in problems with retrieving the
 requested pixels.

Specified by:
setColorModel in interface ImageConsumer
Overrides:
setColorModel in class ImageFilter
Parameters:
model - the ColorModel to which to set the
        ColorModel of this BufferedImageFilter
See Also:
ImageConsumer.setColorModel(java.awt.image.ColorModel)


"
BufferedImageFilter,"setDimensions(int width, int height)",void,Filters the information provided in the setDimensions method of the ImageConsumer interface.,"

setDimensions
public void setDimensions(int width,
                          int height)
Filters the information provided in the
 setDimensions  method
 of the ImageConsumer interface.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels are
 being filtered. Developers using this class to retrieve pixels from
 an image should avoid calling this method directly since that
 operation could result in problems with retrieving the requested
 pixels.
 

Specified by:
setDimensions in interface ImageConsumer
Overrides:
setDimensions in class ImageFilter
Parameters:
width - the width to which to set the width of this
        BufferedImageFilter
height - the height to which to set the height of this
        BufferedImageFilter
See Also:
ImageConsumer.setDimensions(int, int)


"
BufferedImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
Filters the information provided in the setPixels
 method of the ImageConsumer interface which takes
 an array of bytes.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
Throws:
IllegalArgumentException - if width or height are less than
 zero.
See Also:
ImageConsumer.setPixels(int, int, int, int, ColorModel, byte[],
                                    int, int)


"
BufferedImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
Filters the information provided in the setPixels
 method of the ImageConsumer interface which takes
 an array of integers.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose
 pixels are being filtered.  Developers using this class to
 retrieve pixels from an image should avoid calling this method
 directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
Throws:
IllegalArgumentException - if width or height are less than
 zero.
See Also:
ImageConsumer.setPixels(int, int, int, int, ColorModel, int[],
                                    int, int)


"
BufferStrategy,contentsLost(),abstract boolean,Returns whether the drawing buffer was lost since the last call to getDrawGraphics.,"

contentsLost
public abstract boolean contentsLost()
Returns whether the drawing buffer was lost since the last call to
 getDrawGraphics.  Since the buffers in a buffer strategy
 are usually type VolatileImage, they may become lost.
 For a discussion on lost buffers, see VolatileImage.

Returns:
Whether or not the drawing buffer was lost since the last call
 to getDrawGraphics.
See Also:
VolatileImage


"
BufferStrategy,contentsRestored(),abstract boolean,Returns whether the drawing buffer was recently restored from a lost state and reinitialized to the default background color (white).,"

contentsRestored
public abstract boolean contentsRestored()
Returns whether the drawing buffer was recently restored from a lost
 state and reinitialized to the default background color (white).
 Since the buffers in a buffer strategy are usually type
 VolatileImage, they may become lost.  If a surface has
 been recently restored from a lost state since the last call to
 getDrawGraphics, it may require repainting.
 For a discussion on lost buffers, see VolatileImage.

Returns:
Whether or not the drawing buffer was restored since the last
         call to getDrawGraphics.
See Also:
VolatileImage


"
BufferStrategy,dispose(),void,Releases system resources currently consumed by this BufferStrategy and removes it from the associated Component.,"

dispose
public void dispose()
Releases system resources currently consumed by this
 BufferStrategy and
 removes it from the associated Component.  After invoking this
 method, getBufferStrategy will return null.  Trying
 to use a BufferStrategy after it has been disposed will
 result in undefined behavior.

Since:
1.6
See Also:
Window.createBufferStrategy(int), 
Canvas.createBufferStrategy(int), 
Window.getBufferStrategy(), 
Canvas.getBufferStrategy()


"
BufferStrategy,getCapabilities(),abstract BufferCapabilities,Returns the BufferCapabilities for this BufferStrategy.,"

getCapabilities
public abstract BufferCapabilities getCapabilities()
Returns the BufferCapabilities for this
 BufferStrategy.

Returns:
the buffering capabilities of this strategy


"
BufferStrategy,getDrawGraphics(),abstract Graphics,Creates a graphics context for the drawing buffer.,"

getDrawGraphics
public abstract Graphics getDrawGraphics()
Creates a graphics context for the drawing buffer.  This method may not
 be synchronized for performance reasons; use of this method by multiple
 threads should be handled at the application level.  Disposal of the
 graphics object obtained must be handled by the application.

Returns:
a graphics context for the drawing buffer


"
BufferStrategy,show(),abstract void,Makes the next available buffer visible by either copying the memory (blitting) or changing the display pointer (flipping).,"

show
public abstract void show()
Makes the next available buffer visible by either copying the memory
 (blitting) or changing the display pointer (flipping).

"
ByteLookupTable,getTable(),byte[][],Returns the lookup table data by reference.,"

getTable
public final byte[][] getTable()
Returns the lookup table data by reference.  If this ByteLookupTable
 was constructed using a single byte array, the length of the returned
 array is one.

Returns:
the data array of this ByteLookupTable.


"
ByteLookupTable,"lookupPixel(byte[] src, byte[] dst)",byte[],"Returns an array of samples of a pixel, translated with the lookup table.","

lookupPixel
public byte[] lookupPixel(byte[] src,
                          byte[] dst)
Returns an array of samples of a pixel, translated with the lookup
 table. The source and destination array can be the same array.
 Array dst is returned.

Parameters:
src - the source array.
dst - the destination array. This array must be at least as
         long as src.  If dst is
         null, a new array will be allocated having the
         same length as src.
Returns:
the array dst, an int array of
         samples.
Throws:
ArrayIndexOutOfBoundsException - if src is
            longer than dst or if for any element
            i of src,
            (src[i]&0xff)-offset is either less than
            zero or greater than or equal to the length of the
            lookup table for any band.


"
ByteLookupTable,"lookupPixel(int[] src, int[] dst)",int[],"Returns an array of samples of a pixel, translated with the lookup table.","

lookupPixel
public int[] lookupPixel(int[] src,
                         int[] dst)
Returns an array of samples of a pixel, translated with the lookup
 table. The source and destination array can be the same array.
 Array dst is returned.

Specified by:
lookupPixel in class LookupTable
Parameters:
src - the source array.
dst - the destination array. This array must be at least as
         long as src.  If dst is
         null, a new array will be allocated having the
         same length as src.
Returns:
the array dst, an int array of
         samples.
Throws:
ArrayIndexOutOfBoundsException - if src is
            longer than dst or if for any element
            i of src,
            src[i]-offset is either less than zero or
            greater than or equal to the length of the lookup table
            for any band.


"
ColorConvertOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,"Creates a zeroed destination image with the correct size and number of bands, given this source.","

createCompatibleDestImage
public BufferedImage createCompatibleDestImage(BufferedImage src,
                                               ColorModel destCM)
Creates a zeroed destination image with the correct size and number of
 bands, given this source.

Specified by:
createCompatibleDestImage in interface BufferedImageOp
Parameters:
src - Source image for the filter operation.
destCM - ColorModel of the destination.  If null, an
                  appropriate ColorModel will be used.
Returns:
a BufferedImage with the correct size and
 number of bands from the specified src.
Throws:
IllegalArgumentException - if destCM is
         null and this ColorConvertOp was
         created without any ICC_Profile or
         ColorSpace defined for the destination


"
ColorConvertOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed destination Raster with the correct size and number of bands, given this source.","

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed destination Raster with the correct size and number of
 bands, given this source.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - the specified Raster
Returns:
a WritableRaster with the correct size and number
         of bands from the specified src
Throws:
IllegalArgumentException - if this ColorConvertOp
         was created without sufficient information to define the
         dst and src color spaces


"
ColorConvertOp,"filter(BufferedImage src, BufferedImage dest)",BufferedImage,ColorConverts the source BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dest)
ColorConverts the source BufferedImage.
 If the destination image is null,
 a BufferedImage will be created with an appropriate ColorModel.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the source BufferedImage to be converted
dest - the destination BufferedImage,
        or null
Returns:
dest color converted from src
         or a new, converted BufferedImage
         if dest is null
Throws:
IllegalArgumentException - if dest is null and this op was
             constructed using the constructor which takes only a
             RenderingHints argument, since the operation is ill defined.


"
ColorConvertOp,"filter(Raster src, WritableRaster dest)",WritableRaster,ColorConverts the image data in the source Raster.,"

filter
public final WritableRaster filter(Raster src,
                                   WritableRaster dest)
ColorConverts the image data in the source Raster.
 If the destination Raster is null, a new Raster will be created.
 The number of bands in the source and destination Rasters must
 meet the requirements explained above.  The constructor used to
 create this ColorConvertOp must have provided enough information
 to define both source and destination color spaces.  See above.
 Otherwise, an exception is thrown.

Specified by:
filter in interface RasterOp
Parameters:
src - the source Raster to be converted
dest - the destination WritableRaster,
        or null
Returns:
dest color converted from src
         or a new, converted WritableRaster
         if dest is null
Throws:
IllegalArgumentException - if the number of source or
             destination bands is incorrect, the source or destination
             color spaces are undefined, or this op was constructed
             with one of the constructors that applies only to
             operations on BufferedImages.


"
ColorConvertOp,getBounds2D(BufferedImage src),Rectangle2D,"Returns the bounding box of the destination, given this source.","

getBounds2D
public final Rectangle2D getBounds2D(BufferedImage src)
Returns the bounding box of the destination, given this source.
 Note that this will be the same as the the bounding box of the
 source.

Specified by:
getBounds2D in interface BufferedImageOp
Parameters:
src - the source BufferedImage
Returns:
a Rectangle2D that is the bounding box
         of the destination, given the specified src


"
ColorConvertOp,getBounds2D(Raster src),Rectangle2D,"Returns the bounding box of the destination, given this source.","

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the destination, given this source.
 Note that this will be the same as the the bounding box of the
 source.

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - the source Raster
Returns:
a Rectangle2D that is the bounding box
         of the destination, given the specified src


"
ColorConvertOp,getICC_Profiles(),ICC_Profile[],Returns the array of ICC_Profiles used to construct this ColorConvertOp.,"

getICC_Profiles
public final ICC_Profile[] getICC_Profiles()
Returns the array of ICC_Profiles used to construct this ColorConvertOp.
 Returns null if the ColorConvertOp was not constructed from such an
 array.

Returns:
the array of ICC_Profile objects of this
         ColorConvertOp, or null if this
         ColorConvertOp was not constructed with an
         array of ICC_Profile objects.


"
ColorConvertOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the destination point given a
 point in the source.  If dstPt is non-null,
 it will be used to hold the return value.  Note that
 for this class, the destination point will be the same
 as the source point.

Specified by:
getPoint2D in interface BufferedImageOp
Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - the specified source Point2D
dstPt - the destination Point2D
Returns:
dstPt after setting its location to be
         the same as srcPt


"
ColorConvertOp,getRenderingHints(),RenderingHints,Returns the rendering hints used by this op.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints used by this op.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
the RenderingHints object of this
         ColorConvertOp


"
ColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel.","

coerceData
public ColorModel coerceData(WritableRaster raster,
                             boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
 isAlphaPremultiplied variable, assuming the data is
 currently correctly described by this ColorModel.  It
 may multiply or divide the color raster data by alpha, or do
 nothing if the data is in the correct state.  If the data needs to
 be coerced, this method will also return an instance of this
 ColorModel with the isAlphaPremultiplied
 flag set appropriately.  This method will throw a
 UnsupportedOperationException if it is not supported
 by this ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
raster - the WritableRaster data
isAlphaPremultiplied - true if the alpha is
 premultiplied; false otherwise
Returns:
a ColorModel object that represents the
 coerced data.


"
ColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a SampleModel with the specified width and
 height that has a data layout compatible with this
 ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
w - the width to apply to the new SampleModel
h - the height to apply to the new SampleModel
Returns:
a SampleModel object with the specified
 width and height.
Throws:
UnsupportedOperationException - if this
          method is not supported by this ColorModel
See Also:
SampleModel


"
ColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.,"

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(int w,
                                                     int h)
Creates a WritableRaster with the specified width and
 height that has a data layout (SampleModel) compatible
 with this ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
w - the width to apply to the new WritableRaster
h - the height to apply to the new WritableRaster
Returns:
a WritableRaster object with the specified
 width and height.
Throws:
UnsupportedOperationException - if this
          method is not supported by this ColorModel
See Also:
WritableRaster, 
SampleModel


"
ColorModel,equals(Object obj),boolean,Tests if the specified Object is an instance of ColorModel and if it equals this ColorModel.,"

equals
public boolean equals(Object obj)
Tests if the specified Object is an instance of
 ColorModel and if it equals this
 ColorModel.

Overrides:
equals in class Object
Parameters:
obj - the Object to test for equality
Returns:
true if the specified Object
 is an instance of ColorModel and equals this
 ColorModel; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ColorModel,finalize(),void,Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.,"

finalize
public void finalize()
Disposes of system resources associated with this
 ColorModel once this ColorModel is no
 longer referenced.

Overrides:
finalize in class Object
See Also:
WeakReference, 
PhantomReference


"
ColorModel,getAlpha(int pixel),abstract int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public abstract int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.

Parameters:
pixel - the specified pixel
Returns:
the value of alpha component of the specified pixel.


"
ColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public int getAlpha(Object inData)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified by an array of data
 elements of type transferType passed in as an object reference.
 If inData is not a primitive array of type transferType, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 inData is not large enough to hold a pixel value for
 this ColorModel.
 If this transferType is not supported, a
 UnsupportedOperationException will be
 thrown.  Since
 ColorModel is an abstract class, any instance
 must be an instance of a subclass.  Subclasses inherit the
 implementation of this method and if they don't override it, this
 method throws an exception if the subclass uses a
 transferType other than
 DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, or
 DataBuffer.TYPE_INT.

Parameters:
inData - the specified pixel
Returns:
the alpha component of the specified pixel, scaled from
 0 to 255.
Throws:
ClassCastException - if inData
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  inData is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  tranferType is not supported by this
  ColorModel


"
ColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a Raster representing the alpha channel of an image, extracted from the input Raster, provided that pixel values of this ColorModel represent color and alpha information as separate spatial bands (e.g.","

getAlphaRaster
public WritableRaster getAlphaRaster(WritableRaster raster)
Returns a Raster representing the alpha channel of an
 image, extracted from the input Raster, provided that
 pixel values of this ColorModel represent color and
 alpha information as separate spatial bands (e.g.
 ComponentColorModel and DirectColorModel).
 This method assumes that Raster objects associated
 with such a ColorModel store the alpha band, if
 present, as the last band of image data.  Returns null
 if there is no separate spatial alpha channel associated with this
 ColorModel.  If this is an
 IndexColorModel which has alpha in the lookup table,
 this method will return null since
 there is no spatially discrete alpha channel.
 This method will create a new Raster (but will share
 the data array).
 Since ColorModel is an abstract class, any instance
 is an instance of a subclass.  Subclasses must override this
 method to get any behavior other than returning null
 because the implementation in this abstract class returns
 null.

Parameters:
raster - the specified Raster
Returns:
a Raster representing the alpha channel of
 an image, obtained from the specified Raster.


"
ColorModel,getBlue(int pixel),abstract int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public abstract int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel values
 for this ColorModel are not conveniently representable
 as a single int.  The returned value is a non pre-multiplied
 value, for example, if the alpha is premultiplied, this method
 divides it out before returning the value.  If the alpha value is
 0, the blue value is 0.

Parameters:
pixel - the specified pixel
Returns:
the value of the blue component of the specified pixel.


"
ColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public int getBlue(Object inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is
 specified by an array of data elements of type transferType passed
 in as an object reference.  The returned value is a non
 pre-multiplied value.  For example, if the alpha is premultiplied,
 this method divides it out before returning the value.  If the
 alpha value is 0, the blue value will be 0.  If
 inData is not a primitive array of type transferType,
 a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.
 If this transferType is not supported, a
 UnsupportedOperationException will be
 thrown.  Since
 ColorModel is an abstract class, any instance
 must be an instance of a subclass.  Subclasses inherit the
 implementation of this method and if they don't override it, this
 method throws an exception if the subclass uses a
 transferType other than
 DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, or
 DataBuffer.TYPE_INT.

Parameters:
inData - an array of pixel values
Returns:
the value of the blue component of the specified pixel.
Throws:
ClassCastException - if inData
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  inData is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  tranferType is not supported by this
  ColorModel


"
ColorModel,getColorSpace(),ColorSpace,Returns the ColorSpace associated with this ColorModel.,"

getColorSpace
public final ColorSpace getColorSpace()
Returns the ColorSpace associated with this
 ColorModel.

Returns:
the ColorSpace of this
 ColorModel.


"
ColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public int[] getComponents(int pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.  The pixel value is specified as
 an int.  An IllegalArgumentException
 will be thrown if pixel values for this ColorModel are
 not conveniently representable as a single int or if
 color component values for this ColorModel are not
 conveniently representable in the unnormalized form.
 For example, this method can be used to retrieve the
 components for a specific pixel value in a
 DirectColorModel.  If the components array is
 null, a new array will be allocated.  The
 components array will be returned.  Color/alpha components are
 stored in the components array starting at offset
 (even if the array is allocated by this method).  An
 ArrayIndexOutOfBoundsException is thrown if  the
 components array is not null and is not large
 enough to hold all the color and alpha components (starting at offset).
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
pixel - the specified pixel
components - the array to receive the color and alpha
 components of the specified pixel
offset - the offset into the components array at
 which to start storing the color and alpha components
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.
Throws:
UnsupportedOperationException - if this
          method is not supported by this ColorModel


"
ColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public int[] getComponents(Object pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.  The pixel value is specified by
 an array of data elements of type transferType passed in as an
 object reference.  If pixel is not a primitive array
 of type transferType, a ClassCastException is thrown.
 An IllegalArgumentException will be thrown if color
 component values for this ColorModel are not
 conveniently representable in the unnormalized form.
 An ArrayIndexOutOfBoundsException is
 thrown if pixel is not large enough to hold a pixel
 value for this ColorModel.
 This method can be used to retrieve the components for a specific
 pixel value in any ColorModel.  If the components
 array is null, a new array will be allocated.  The
 components array will be returned.  Color/alpha components are
 stored in the components array starting at
 offset (even if the array is allocated by this
 method).  An ArrayIndexOutOfBoundsException
 is thrown if  the components array is not null and is
 not large enough to hold all the color and alpha components
 (starting at offset).
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
pixel - the specified pixel
components - an array that receives the color and alpha
 components of the specified pixel
offset - the index into the components array at
 which to begin storing the color and alpha components of the
 specified pixel
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.
Throws:
UnsupportedOperationException - if this
          method is not supported by this ColorModel


"
ColorModel,getComponentSize(),int[],Returns an array of the number of bits per color/alpha component.,"

getComponentSize
public int[] getComponentSize()
Returns an array of the number of bits per color/alpha component.
 The array contains the color components in the order specified by the
 ColorSpace, followed by the alpha component, if
 present.

Returns:
an array of the number of bits per color/alpha component


"
ColorModel,getComponentSize(int componentIdx),int,Returns the number of bits for the specified color/alpha component.,"

getComponentSize
public int getComponentSize(int componentIdx)
Returns the number of bits for the specified color/alpha component.
 Color components are indexed in the order specified by the
 ColorSpace.  Typically, this order reflects the name
 of the color space type. For example, for TYPE_RGB, index 0
 corresponds to red, index 1 to green, and index 2
 to blue.  If this ColorModel supports alpha, the alpha
 component corresponds to the index following the last color
 component.

Parameters:
componentIdx - the index of the color/alpha component
Returns:
the number of bits for the color/alpha component at the
          specified index.
Throws:
ArrayIndexOutOfBoundsException - if componentIdx
         is greater than the number of components or
         less than zero
NullPointerException - if the number of bits array is
         null


"
ColorModel,"getDataElement(float[] normComponents, int normOffset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components.","

getDataElement
public int getDataElement(float[] normComponents,
                          int normOffset)
Returns a pixel value represented as an int in this
 ColorModel, given an array of normalized color/alpha
 components.  This method will throw an
 IllegalArgumentException if pixel values for this
 ColorModel are not conveniently representable as a
 single int.  An
 ArrayIndexOutOfBoundsException is thrown if  the
 normComponents array is not large enough to hold all the
 color and alpha components (starting at normOffset).
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  The default implementation
 of this method in this abstract class first converts from the
 normalized form to the unnormalized form and then calls
 getDataElement(int[], int).  Subclasses which may
 have instances which do not support the unnormalized form must
 override this method.

Parameters:
normComponents - an array of normalized color and alpha
 components
normOffset - the index into normComponents at which to
 begin retrieving the color and alpha components
Returns:
an int pixel value in this
 ColorModel corresponding to the specified components.
Throws:
IllegalArgumentException - if
  pixel values for this ColorModel are not
  conveniently representable as a single int
ArrayIndexOutOfBoundsException - if
  the normComponents array is not large enough to
  hold all of the color and alpha components starting at
  normOffset
Since:
1.4


"
ColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElement
public int getDataElement(int[] components,
                          int offset)
Returns a pixel value represented as an int in this
 ColorModel, given an array of unnormalized color/alpha
 components.  This method will throw an
 IllegalArgumentException if component values for this
 ColorModel are not conveniently representable as a
 single int or if color component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.  An
 ArrayIndexOutOfBoundsException is thrown if  the
 components array is not large enough to hold all the
 color and alpha components (starting at offset).
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving the color and alpha components
Returns:
an int pixel value in this
 ColorModel corresponding to the specified components.
Throws:
IllegalArgumentException - if
  pixel values for this ColorModel are not
  conveniently representable as a single int
IllegalArgumentException - if
  component values for this ColorModel are not
  conveniently representable in the unnormalized form
ArrayIndexOutOfBoundsException - if
  the components array is not large enough to
  hold all of the color and alpha components starting at
  offset
UnsupportedOperationException - if this
  method is not supported by this ColorModel


"
ColorModel,"getDataElements(float[] normComponents, int normOffset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components.","

getDataElements
public Object getDataElements(float[] normComponents,
                              int normOffset,
                              Object obj)
Returns a data element array representation of a pixel in this
 ColorModel, given an array of normalized color/alpha
 components.  This array can then be passed to the
 setDataElements method of a WritableRaster
 object.  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not large enough to hold
 all the color and alpha components (starting at
 normOffset).  If the obj variable is
 null, a new array will be allocated.  If
 obj is not null, it must be a primitive
 array of type transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 obj is not large enough to hold a pixel value for this
 ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  The default implementation
 of this method in this abstract class first converts from the
 normalized form to the unnormalized form and then calls
 getDataElement(int[], int, Object).  Subclasses which may
 have instances which do not support the unnormalized form must
 override this method.

Parameters:
normComponents - an array of normalized color and alpha
 components
normOffset - the index into normComponents at which to
 begin retrieving color and alpha components
obj - a primitive data array to hold the returned pixel
Returns:
an Object which is a primitive data array
 representation of a pixel
Throws:
ClassCastException - if obj
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  obj is not large enough to hold a pixel value
  for this ColorModel or the normComponents
  array is not large enough to hold all of the color and alpha
  components starting at normOffset
Since:
1.4
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElements
public Object getDataElements(int[] components,
                              int offset,
                              Object obj)
Returns a data element array representation of a pixel in this
 ColorModel, given an array of unnormalized color/alpha
 components.  This array can then be passed to the
 setDataElements method of a WritableRaster
 object.  This method will throw an IllegalArgumentException
 if color component values for this ColorModel are not
 conveniently representable in the unnormalized form.
 An ArrayIndexOutOfBoundsException is thrown
 if the components array is not large enough to hold
 all the color and alpha components (starting at
 offset).  If the obj variable is
 null, a new array will be allocated.  If
 obj is not null, it must be a primitive
 array of type transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 obj is not large enough to hold a pixel value for this
 ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving color and alpha components
obj - the Object representing an array of color
 and alpha components
Returns:
an Object representing an array of color and
 alpha components.
Throws:
ClassCastException - if obj
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  obj is not large enough to hold a pixel value
  for this ColorModel or the components
  array is not large enough to hold all of the color and alpha
  components starting at offset
IllegalArgumentException - if
  component values for this ColorModel are not
  conveniently representable in the unnormalized form
UnsupportedOperationException - if this
  method is not supported by this ColorModel
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model.","

getDataElements
public Object getDataElements(int rgb,
                              Object pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation in
 the default RGB color model.
 This array can then be passed to the
 WritableRaster.setDataElements(int, int, java.lang.Object) method of
 a WritableRaster object.  If the pixel variable is
 null, a new array will be allocated.  If
 pixel is not
 null, it must be a primitive array of type
 transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 pixel is
 not large enough to hold a pixel value for this
 ColorModel. The pixel array is returned.
 If this transferType is not supported, a
 UnsupportedOperationException will be
 thrown.  Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
rgb - the integer pixel representation in the default RGB
 color model
pixel - the specified pixel
Returns:
an array representation of the specified pixel in this
  ColorModel.
Throws:
ClassCastException - if pixel
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  pixel is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  method is not supported by this ColorModel
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ColorModel,getGreen(int pixel),abstract int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public abstract int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.  The returned value is a non
 pre-multiplied value.  For example, if the alpha is premultiplied,
 this method divides it out before returning
 the value.  If the alpha value is 0, the green value is 0.

Parameters:
pixel - the specified pixel
Returns:
the value of the green component of the specified pixel.


"
ColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public int getGreen(Object inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is
 specified by an array of data elements of type transferType passed
 in as an object reference.  The returned value will be a non
 pre-multiplied value.  For example, if the alpha is premultiplied,
 this method divides it out before returning the value.  If the
 alpha value is 0, the green value is 0.  If inData is
 not a primitive array of type transferType, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 inData is not large enough to hold a pixel value for
 this ColorModel.
 If this transferType is not supported, a
 UnsupportedOperationException will be
 thrown.  Since
 ColorModel is an abstract class, any instance
 must be an instance of a subclass.  Subclasses inherit the
 implementation of this method and if they don't override it, this
 method throws an exception if the subclass uses a
 transferType other than
 DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, or
 DataBuffer.TYPE_INT.

Parameters:
inData - an array of pixel values
Returns:
the value of the green component of the specified pixel.
Throws:
ClassCastException - if inData
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  inData is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  tranferType is not supported by this
  ColorModel


"
ColorModel,"getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array.","

getNormalizedComponents
public float[] getNormalizedComponents(int[] components,
                                       int offset,
                                       float[] normComponents,
                                       int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given an unnormalized component array.  Unnormalized components
 are unsigned integral values between 0 and 2n - 1, where
 n is the number of bits for a particular component.  Normalized
 components are float values between a per component minimum and
 maximum specified by the ColorSpace object for this
 ColorModel.  An IllegalArgumentException
 will be thrown if color component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.  If the
 normComponents array is null, a new array
 will be allocated.  The normComponents array
 will be returned.  Color/alpha components are stored in the
 normComponents array starting at
 normOffset (even if the array is allocated by this
 method).  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not null
 and is not large enough to hold all the color and alpha components
 (starting at normOffset).  An
 IllegalArgumentException is thrown if the
 components array is not large enough to hold all the
 color and alpha components starting at offset.
 
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  The default implementation
 of this method in this abstract class assumes that component values
 for this class are conveniently representable in the unnormalized
 form.  Therefore, subclasses which may
 have instances which do not support the unnormalized form must
 override this method.

Parameters:
components - an array containing unnormalized components
offset - the offset into the components array at
 which to start retrieving unnormalized components
normComponents - an array that receives the normalized components
normOffset - the index into normComponents at
 which to begin storing normalized components
Returns:
an array containing normalized color and alpha
 components.
Throws:
IllegalArgumentException - If the component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.
UnsupportedOperationException - if the
          constructor of this ColorModel called the
          super(bits) constructor, but did not
          override this method.  See the constructor,
          ColorModel(int).
UnsupportedOperationException - if this method is unable
          to determine the number of bits per component


"
ColorModel,"getNormalizedComponents(Object pixel, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel.","

getNormalizedComponents
public float[] getNormalizedComponents(Object pixel,
                                       float[] normComponents,
                                       int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given a pixel in this ColorModel.  The pixel
 value is specified by an array of data elements of type transferType
 passed in as an object reference.  If pixel is not a primitive array
 of type transferType, a ClassCastException is thrown.
 An ArrayIndexOutOfBoundsException is thrown if
 pixel is not large enough to hold a pixel value for this
 ColorModel.
 Normalized components are float values between a per component minimum
 and maximum specified by the ColorSpace object for this
 ColorModel.  If the
 normComponents array is null, a new array
 will be allocated.  The normComponents array
 will be returned.  Color/alpha components are stored in the
 normComponents array starting at
 normOffset (even if the array is allocated by this
 method).  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not null
 and is not large enough to hold all the color and alpha components
 (starting at normOffset).
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  The default implementation
 of this method in this abstract class first retrieves color and alpha
 components in the unnormalized form using
 getComponents(Object, int[], int) and then calls
 getNormalizedComponents(int[], int, float[], int).
 Subclasses which may
 have instances which do not support the unnormalized form must
 override this method.

Parameters:
pixel - the specified pixel
normComponents - an array to receive the normalized components
normOffset - the offset into the normComponents
 array at which to start storing normalized components
Returns:
an array containing normalized color and alpha
 components.
Throws:
ClassCastException - if pixel is not a primitive
          array of type transferType
ArrayIndexOutOfBoundsException - if
          normComponents is not large enough to hold all
          color and alpha components starting at normOffset
ArrayIndexOutOfBoundsException - if
          pixel is not large enough to hold a pixel
          value for this ColorModel.
UnsupportedOperationException - if the
          constructor of this ColorModel called the
          super(bits) constructor, but did not
          override this method.  See the constructor,
          ColorModel(int).
UnsupportedOperationException - if this method is unable
          to determine the number of bits per component
Since:
1.4


"
ColorModel,getNumColorComponents(),int,Returns the number of color components in this ColorModel.,"

getNumColorComponents
public int getNumColorComponents()
Returns the number of color components in this
 ColorModel.
 This is the number of components returned by
 ColorSpace.getNumComponents().

Returns:
the number of color components in this
 ColorModel.
See Also:
ColorSpace.getNumComponents()


"
ColorModel,getNumComponents(),int,"Returns the number of components, including alpha, in this ColorModel.","

getNumComponents
public int getNumComponents()
Returns the number of components, including alpha, in this
 ColorModel.  This is equal to the number of color
 components, optionally plus one, if there is an alpha component.

Returns:
the number of components in this ColorModel


"
ColorModel,getPixelSize(),int,Returns the number of bits per pixel described by this ColorModel.,"

getPixelSize
public int getPixelSize()
Returns the number of bits per pixel described by this
 ColorModel.

Returns:
the number of bits per pixel.


"
ColorModel,getRed(int pixel),abstract int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public abstract int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 An IllegalArgumentException is thrown if pixel
 values for this ColorModel are not conveniently
 representable as a single int.  The returned value is not a
 pre-multiplied value.  For example, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, the red value is 0.

Parameters:
pixel - a specified pixel
Returns:
the value of the red component of the specified pixel.


"
ColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public int getRed(Object inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is
 specified by an array of data elements of type transferType passed
 in as an object reference.  The returned value is a non
 pre-multiplied value.  For example, if alpha is premultiplied,
 this method divides it out before returning
 the value.  If the alpha value is 0, the red value is 0.
 If inData is not a primitive array of type
 transferType, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 inData is not large enough to hold a pixel value for
 this ColorModel.
 If this transferType is not supported, a
 UnsupportedOperationException will be
 thrown.  Since
 ColorModel is an abstract class, any instance
 must be an instance of a subclass.  Subclasses inherit the
 implementation of this method and if they don't override it, this
 method throws an exception if the subclass uses a
 transferType other than
 DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, or
 DataBuffer.TYPE_INT.

Parameters:
inData - an array of pixel values
Returns:
the value of the red component of the specified pixel.
Throws:
ClassCastException - if inData
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  inData is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  tranferType is not supported by this
  ColorModel


"
ColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.,"

getRGB
public int getRGB(int pixel)
Returns the color/alpha components of the pixel in the default
 RGB color model format.  A color conversion is done if necessary.
 The pixel value is specified as an int.
 An IllegalArgumentException thrown if pixel values
 for this ColorModel are not conveniently representable
 as a single int.  The returned value is in a non
 pre-multiplied format. For example, if the alpha is premultiplied,
 this method divides it out of the color components.  If the alpha
 value is 0, the color values are 0.

Parameters:
pixel - the specified pixel
Returns:
the RGB value of the color/alpha components of the
          specified pixel.
See Also:
getRGBdefault()


"
ColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.,"

getRGB
public int getRGB(Object inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.  A color conversion is done if
 necessary.  The pixel value is specified by an array of data
 elements of type transferType passed in as an object reference.
 If inData is not a primitive array of type transferType, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.
 The returned value will be in a non pre-multiplied format, i.e. if
 the alpha is premultiplied, this method will divide it out of the
 color components (if the alpha value is 0, the color values will be 0).

Parameters:
inData - the specified pixel
Returns:
the color and alpha components of the specified pixel.
See Also:
getRGBdefault()


"
ColorModel,getRGBdefault(),static ColorModel,Returns a DirectColorModel that describes the default format for integer RGB values used in many of the methods in the AWT image interfaces for the convenience of the programmer.,"

getRGBdefault
public static ColorModel getRGBdefault()
Returns a DirectColorModel that describes the default
 format for integer RGB values used in many of the methods in the
 AWT image interfaces for the convenience of the programmer.
 The color space is the default ColorSpace, sRGB.
 The format for the RGB values is an integer with 8 bits
 each of alpha, red, green, and blue color components ordered
 correspondingly from the most significant byte to the least
 significant byte, as in:  0xAARRGGBB.  Color components are
 not premultiplied by the alpha component.  This format does not
 necessarily represent the native or the most efficient
 ColorModel for a particular device or for all images.
 It is merely used as a common color model format.

Returns:
a DirectColorModelobject describing default
          RGB values.


"
ColorModel,getTransferType(),int,Returns the transfer type of this ColorModel.,"

getTransferType
public final int getTransferType()
Returns the transfer type of this ColorModel.
 The transfer type is the type of primitive array used to represent
 pixel values as arrays.

Returns:
the transfer type.
Since:
1.3


"
ColorModel,getTransparency(),int,Returns the transparency.,"

getTransparency
public int getTransparency()
Returns the transparency.  Returns either OPAQUE, BITMASK,
 or TRANSLUCENT.

Specified by:
getTransparency in interface Transparency
Returns:
the transparency of this ColorModel.
See Also:
Transparency.OPAQUE, 
Transparency.BITMASK, 
Transparency.TRANSLUCENT


"
ColorModel,"getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset)",int[],"Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array.","

getUnnormalizedComponents
public int[] getUnnormalizedComponents(float[] normComponents,
                                       int normOffset,
                                       int[] components,
                                       int offset)
Returns an array of all of the color/alpha components in unnormalized
 form, given a normalized component array.  Unnormalized components
 are unsigned integral values between 0 and 2n - 1, where
 n is the number of bits for a particular component.  Normalized
 components are float values between a per component minimum and
 maximum specified by the ColorSpace object for this
 ColorModel.  An IllegalArgumentException
 will be thrown if color component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.  If the
 components array is null, a new array
 will be allocated.  The components array will
 be returned.  Color/alpha components are stored in the
 components array starting at offset (even
 if the array is allocated by this method). An
 ArrayIndexOutOfBoundsException is thrown if the
 components array is not null and is not
 large enough to hold all the color and alpha
 components (starting at offset).  An
 IllegalArgumentException is thrown if the
 normComponents array is not large enough to hold
 all the color and alpha components starting at
 normOffset.

Parameters:
normComponents - an array containing normalized components
normOffset - the offset into the normComponents
 array at which to start retrieving normalized components
components - an array that receives the components from
 normComponents
offset - the index into components at which to
 begin storing normalized components from
 normComponents
Returns:
an array containing unnormalized color and alpha
 components.
Throws:
IllegalArgumentException - If the component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.
IllegalArgumentException - if the length of
          normComponents minus normOffset
          is less than numComponents
UnsupportedOperationException - if the
          constructor of this ColorModel called the
          super(bits) constructor, but did not
          override this method.  See the constructor,
          ColorModel(int).


"
ColorModel,hasAlpha(),boolean,Returns whether or not alpha is supported in this ColorModel.,"

hasAlpha
public final boolean hasAlpha()
Returns whether or not alpha is supported in this
 ColorModel.

Returns:
true if alpha is supported in this
 ColorModel; false otherwise.


"
ColorModel,hashCode(),int,Returns the hash code for this ColorModel.,"

hashCode
public int hashCode()
Returns the hash code for this ColorModel.

Overrides:
hashCode in class Object
Returns:
a hash code for this ColorModel.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ColorModel,isAlphaPremultiplied(),boolean,Returns whether or not the alpha has been premultiplied in the pixel values to be translated by this ColorModel.,"

isAlphaPremultiplied
public final boolean isAlphaPremultiplied()
Returns whether or not the alpha has been premultiplied in the
 pixel values to be translated by this ColorModel.
 If the boolean is true, this ColorModel
 is to be used to interpret pixel values in which color and alpha
 information are represented as separate spatial bands, and color
 samples are assumed to have been multiplied by the
 alpha sample.

Returns:
true if the alpha values are premultiplied
          in the pixel values to be translated by this
          ColorModel; false otherwise.


"
ColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel and false if it is not.,"

isCompatibleRaster
public boolean isCompatibleRaster(Raster raster)
Returns true if raster is compatible
 with this ColorModel and false if it is
 not.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
raster - the Raster object to test for compatibility
Returns:
true if raster is compatible
 with this ColorModel.
Throws:
UnsupportedOperationException - if this
         method has not been implemented for this
         ColorModel


"
ColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the SampleModel is compatible with this ColorModel.,"

isCompatibleSampleModel
public boolean isCompatibleSampleModel(SampleModel sm)
Checks if the SampleModel is compatible with this
 ColorModel.
 Since ColorModel is an abstract class,
 any instance is an instance of a subclass.  Subclasses must
 override this method since the implementation in this abstract
 class throws an UnsupportedOperationException.

Parameters:
sm - the specified SampleModel
Returns:
true if the specified SampleModel
 is compatible with this ColorModel; false
 otherwise.
Throws:
UnsupportedOperationException - if this
          method is not supported by this ColorModel
See Also:
SampleModel


"
ColorModel,toString(),String,Returns the String representation of the contents of this ColorModelobject.,"

toString
public String toString()
Returns the String representation of the contents of
 this ColorModelobject.

Overrides:
toString in class Object
Returns:
a String representing the contents of this
 ColorModel object.


"
ComponentColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel.","

coerceData
public ColorModel coerceData(WritableRaster raster,
                             boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
 isAlphaPremultiplied variable, assuming the data
 is currently correctly described by this ColorModel.
 It may multiply or divide the color raster data by alpha, or
 do nothing if the data is in the correct state.  If the data needs
 to be coerced, this method also returns an instance of
 this ColorModel with
 the isAlphaPremultiplied flag set appropriately.
 Since ColorModel can be subclassed, subclasses inherit
 the implementation of this method and if they don't override it
 then they throw an exception if they use an unsupported
 transferType.

Overrides:
coerceData in class ColorModel
Parameters:
raster - the WritableRaster data
isAlphaPremultiplied - true if the alpha is
 premultiplied; false otherwise
Returns:
a ColorModel object that represents the
 coerced data.
Throws:
NullPointerException - if raster is
 null and data coercion is required.
UnsupportedOperationException - if the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.


"
ComponentColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,"Creates a SampleModel with the specified width and height, that has a data layout compatible with this ColorModel.","

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a SampleModel with the specified width and height,
 that  has a data layout compatible with this ColorModel.

Overrides:
createCompatibleSampleModel in class ColorModel
Parameters:
w - The width of the SampleModel you want to create.
h - The height of the SampleModel you want to create.
Returns:
A SampleModel that is compatible with this
 ColorModel.
See Also:
SampleModel


"
ComponentColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,"Creates a WritableRaster with the specified width and height, that has a data layout (SampleModel) compatible with this ColorModel.","

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(int w,
                                                     int h)
Creates a WritableRaster with the specified width and height,
 that  has a data layout (SampleModel) compatible with
 this ColorModel.

Overrides:
createCompatibleWritableRaster in class ColorModel
Parameters:
w - The width of the WritableRaster you want to create.
h - The height of the WritableRaster you want to create.
Returns:
A WritableRaster that is compatible with
 this ColorModel.
See Also:
WritableRaster, 
SampleModel


"
ComponentColorModel,equals(Object obj),boolean,Compares this color model with another for equality.,"

equals
public boolean equals(Object obj)
Compares this color model with another for equality.

Overrides:
equals in class ColorModel
Parameters:
obj - The object to compare with this color model.
Returns:
true if the color model objects are equal,
 false if they are not.
See Also:
Object.hashCode(), 
HashMap


"
ComponentColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.   The pixel value is specified as an int.

Specified by:
getAlpha in class ColorModel
Parameters:
pixel - The pixel from which you want to get the alpha component.
Returns:
The alpha component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
ComponentColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public int getAlpha(Object inData)
Returns the alpha component for the specified pixel, scaled from
 0 to 255.  The pixel value is specified by an array of data
 elements of type transferType passed in as an
 object reference.  Since ComponentColorModel can be
 subclassed, subclasses inherit the
 implementation of this method and if they don't override it then
 they throw an exception if they use an unsupported
 transferType.

Overrides:
getAlpha in class ColorModel
Parameters:
inData - The pixel from which you want to get the alpha component,
 specified by an array of data elements of type transferType.
Returns:
The alpha component for the specified pixel, as an int.
Throws:
ClassCastException - If inData is not a primitive array
 of type transferType.
ArrayIndexOutOfBoundsException - if inData is not
 large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.


"
ComponentColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a Raster representing the alpha channel of an image, extracted from the input Raster.","

getAlphaRaster
public WritableRaster getAlphaRaster(WritableRaster raster)
Returns a Raster representing the alpha channel of an image,
 extracted from the input Raster.
 This method assumes that Raster objects associated with
 this ColorModel store the alpha band, if present, as
 the last band of image data. Returns null if there is no separate spatial
 alpha channel associated with this ColorModel.
 This method creates a new Raster, but will share the data
 array.

Overrides:
getAlphaRaster in class ColorModel
Parameters:
raster - The WritableRaster from which to extract the
 alpha  channel.
Returns:
A WritableRaster containing the image's alpha channel.


"
ComponentColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non
 pre-multiplied value. If the alpha is premultiplied, this method
 divides it out before returning the value (if the alpha value is 0,
 the blue value will be 0).

Specified by:
getBlue in class ColorModel
Parameters:
pixel - The pixel from which you want to get the blue color component.
Returns:
The blue color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
ComponentColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public int getBlue(Object inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.
 A color conversion is done if necessary.  The pixel value is
 specified by an array of data elements of type transferType
 passed in as an object reference. The returned value is a non pre-multiplied
 value. If the alpha is premultiplied, this method divides it out before
 returning the value (if the alpha value is 0, the blue value will be 0).
 Since ComponentColorModel can be subclassed,
 subclasses inherit the implementation of this method and if they
 don't override it then they throw an exception if they use an
 unsupported transferType.

Overrides:
getBlue in class ColorModel
Parameters:
inData - The pixel from which you want to get the blue color component,
 specified by an array of data elements of type transferType.
Returns:
The blue color component for the specified pixel, as an int.
Throws:
ClassCastException - If inData is not a primitive array
 of type transferType.
ArrayIndexOutOfBoundsException - if inData is not
 large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.


"
ComponentColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public int[] getComponents(int pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.
 An IllegalArgumentException is thrown if the component value for this
 ColorModel is not conveniently representable in the
 unnormalized form.  Color/alpha components are stored
 in the components array starting at offset
 (even if the array is allocated by this method).

Overrides:
getComponents in class ColorModel
Parameters:
pixel - The pixel value specified as an integer.
components - An integer array in which to store the unnormalized
 color/alpha components. If the components array is null,
 a new array is allocated.
offset - An offset into the components array.
Returns:
The components array.
Throws:
IllegalArgumentException - If there is more than one
 component in this ColorModel.
IllegalArgumentException - If this
 ColorModel does not support the unnormalized form
ArrayIndexOutOfBoundsException - If the components
 array is not null and is not large enough to hold all the color and
 alpha components (starting at offset).


"
ComponentColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public int[] getComponents(Object pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.  The pixel value is specified by an
 array of data elements of type transferType passed in as
 an object reference.
 An IllegalArgumentException is thrown if the component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.
 Color/alpha components are stored in the components array
 starting at  offset (even if the array is allocated by
 this method).  Since ComponentColorModel can be
 subclassed, subclasses inherit the
 implementation of this method and if they don't override it then
 this method might throw an exception if they use an unsupported
 transferType.

Overrides:
getComponents in class ColorModel
Parameters:
pixel - A pixel value specified by an array of data elements of
 type transferType.
components - An integer array in which to store the unnormalized
 color/alpha components. If the components array is null,
 a new array is allocated.
offset - An offset into the components array.
Returns:
The components array.
Throws:
IllegalArgumentException - If this
 ComponentColorModel does not support the unnormalized form
UnsupportedOperationException - in some cases iff the
 transfer type of this ComponentColorModel
 is not one of the following transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 or DataBuffer.TYPE_INT.
ClassCastException - If pixel is not a primitive
 array of type transferType.
IllegalArgumentException - If the components array is
 not null and is not large enough to hold all the color and alpha
 components (starting at offset), or if pixel is not large
 enough to hold a pixel value for this ColorModel.


"
ComponentColorModel,"getDataElement(float[] normComponents, int normOffset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of normalized color/alpha components.","

getDataElement
public int getDataElement(float[] normComponents,
                          int normOffset)
Returns a pixel value represented as an int in this
 ColorModel, given an array of normalized color/alpha
 components.  This method will throw an
 IllegalArgumentException if pixel values for this
 ColorModel are not conveniently representable as a
 single int.  An
 ArrayIndexOutOfBoundsException is thrown if  the
 normComponents array is not large enough to hold all the
 color and alpha components (starting at normOffset).

Overrides:
getDataElement in class ColorModel
Parameters:
normComponents - an array of normalized color and alpha
 components
normOffset - the index into normComponents at which to
 begin retrieving the color and alpha components
Returns:
an int pixel value in this
 ColorModel corresponding to the specified components.
Throws:
IllegalArgumentException - if
  pixel values for this ColorModel are not
  conveniently representable as a single int
ArrayIndexOutOfBoundsException - if
  the normComponents array is not large enough to
  hold all of the color and alpha components starting at
  normOffset
Since:
1.4


"
ComponentColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElement
public int getDataElement(int[] components,
                          int offset)
Returns a pixel value represented as an int in this ColorModel,
 given an array of unnormalized color/alpha components.

Overrides:
getDataElement in class ColorModel
Parameters:
components - An array of unnormalized color/alpha components.
offset - An offset into the components array.
Returns:
A pixel value represented as an int.
Throws:
IllegalArgumentException - If there is more than one component
 in this ColorModel.
IllegalArgumentException - If this
 ComponentColorModel does not support the unnormalized form


"
ComponentColorModel,"getDataElements(float[] normComponents, int normOffset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of normalized color/alpha components.","

getDataElements
public Object getDataElements(float[] normComponents,
                              int normOffset,
                              Object obj)
Returns a data element array representation of a pixel in this
 ColorModel, given an array of normalized color/alpha
 components.  This array can then be passed to the
 setDataElements method of a WritableRaster
 object.  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not large enough to hold
 all the color and alpha components (starting at
 normOffset).  If the obj variable is
 null, a new array will be allocated.  If
 obj is not null, it must be a primitive
 array of type transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if
 obj is not large enough to hold a pixel value for this
 ColorModel.

Overrides:
getDataElements in class ColorModel
Parameters:
normComponents - an array of normalized color and alpha
 components
normOffset - the index into normComponents at which to
 begin retrieving color and alpha components
obj - a primitive data array to hold the returned pixel
Returns:
an Object which is a primitive data array
 representation of a pixel
Throws:
ClassCastException - if obj
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  obj is not large enough to hold a pixel value
  for this ColorModel or the normComponents
  array is not large enough to hold all of the color and alpha
  components starting at normOffset
Since:
1.4
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ComponentColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElements
public Object getDataElements(int[] components,
                              int offset,
                              Object obj)
Returns a data element array representation of a pixel in this
 ColorModel, given an array of unnormalized color/alpha
 components. This array can then be passed to the setDataElements
 method of a WritableRaster object.

Overrides:
getDataElements in class ColorModel
Parameters:
components - An array of unnormalized color/alpha components.
offset - The integer offset into the components array.
obj - The object in which to store the data element array
 representation of the pixel. If obj variable is null,
 a new array is allocated.  If obj is not null, it must
 be a primitive array of type transferType. An
 ArrayIndexOutOfBoundsException is thrown if
 obj is not large enough to hold a pixel value
 for this ColorModel.  Since
 ComponentColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an
 unsupported transferType.
Returns:
The data element array representation of a pixel
 in this ColorModel.
Throws:
IllegalArgumentException - If the components array
 is not large enough to hold all the color and alpha components
 (starting at offset).
ClassCastException - If obj is not null and is not a
 primitive  array of type transferType.
ArrayIndexOutOfBoundsException - If obj is not large
 enough to hold a pixel value for this ColorModel.
IllegalArgumentException - If this
 ComponentColorModel does not support the unnormalized form
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the following transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 or DataBuffer.TYPE_INT.
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ComponentColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model.","

getDataElements
public Object getDataElements(int rgb,
                              Object pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation
 in the default RGB color model.
 This array can then be passed to the setDataElements
 method of a WritableRaster object.  If the
 pixel
 parameter is null, a new array is allocated.  Since
 ComponentColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then
 they throw an exception if they use an unsupported
 transferType.

Overrides:
getDataElements in class ColorModel
Parameters:
rgb - the integer representation of the pixel in the RGB
            color model
pixel - the specified pixel
Returns:
The data element array representation of a pixel
 in this ColorModel.
Throws:
ClassCastException - If pixel is not null and
 is not a primitive array of type transferType.
ArrayIndexOutOfBoundsException - If pixel is
 not large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
ComponentColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non
 pre-multiplied value. If the alpha is premultiplied, this method
 divides it out before returning the value (if the alpha value is 0,
 the green value will be 0).

Specified by:
getGreen in class ColorModel
Parameters:
pixel - The pixel from which you want to get the green color component.
Returns:
The green color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
ComponentColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public int getGreen(Object inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.
 A color conversion is done if necessary.  The pixel value
 is specified by an array of data elements of type transferType
 passed in as an object reference. The returned value is a non pre-multiplied
 value. If the alpha is premultiplied, this method divides it out before
 returning the value (if the alpha value is 0, the green value will be 0).
 Since ComponentColorModel can be subclassed,
 subclasses inherit the implementation of this method and if they
 don't override it then they throw an exception if they use an
 unsupported transferType.

Overrides:
getGreen in class ColorModel
Parameters:
inData - The pixel from which you want to get the green color component,
 specified by an array of data elements of type transferType.
Returns:
The green color component for the specified pixel, as an int.
Throws:
ClassCastException - If inData is not a primitive array
 of type transferType.
ArrayIndexOutOfBoundsException - if inData is not
 large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.


"
ComponentColorModel,"getNormalizedComponents(int[] components, int offset, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given an unnormalized component array.","

getNormalizedComponents
public float[] getNormalizedComponents(int[] components,
                                       int offset,
                                       float[] normComponents,
                                       int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given an unnormalized component array.  Unnormalized components
 are unsigned integral values between 0 and 2n - 1, where
 n is the number of bits for a particular component.  Normalized
 components are float values between a per component minimum and
 maximum specified by the ColorSpace object for this
 ColorModel.  An IllegalArgumentException
 will be thrown if color component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.  If the
 normComponents array is null, a new array
 will be allocated.  The normComponents array
 will be returned.  Color/alpha components are stored in the
 normComponents array starting at
 normOffset (even if the array is allocated by this
 method).  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not null
 and is not large enough to hold all the color and alpha components
 (starting at normOffset).  An
 IllegalArgumentException is thrown if the
 components array is not large enough to hold all the
 color and alpha components starting at offset.

Overrides:
getNormalizedComponents in class ColorModel
Parameters:
components - an array containing unnormalized components
offset - the offset into the components array at
 which to start retrieving unnormalized components
normComponents - an array that receives the normalized components
normOffset - the index into normComponents at
 which to begin storing normalized components
Returns:
an array containing normalized color and alpha
 components.
Throws:
IllegalArgumentException - If this
 ComponentColorModel does not support the unnormalized form


"
ComponentColorModel,"getNormalizedComponents(Object pixel, float[] normComponents, int normOffset)",float[],"Returns an array of all of the color/alpha components in normalized form, given a pixel in this ColorModel.","

getNormalizedComponents
public float[] getNormalizedComponents(Object pixel,
                                       float[] normComponents,
                                       int normOffset)
Returns an array of all of the color/alpha components in normalized
 form, given a pixel in this ColorModel.  The pixel
 value is specified by an array of data elements of type transferType
 passed in as an object reference.  If pixel is not a primitive array
 of type transferType, a ClassCastException is thrown.
 An ArrayIndexOutOfBoundsException is thrown if
 pixel is not large enough to hold a pixel value for this
 ColorModel.
 Normalized components are float values between a per component minimum
 and maximum specified by the ColorSpace object for this
 ColorModel.  If the
 normComponents array is null, a new array
 will be allocated.  The normComponents array
 will be returned.  Color/alpha components are stored in the
 normComponents array starting at
 normOffset (even if the array is allocated by this
 method).  An ArrayIndexOutOfBoundsException is thrown
 if the normComponents array is not null
 and is not large enough to hold all the color and alpha components
 (starting at normOffset).
 
 This method must be overridden by a subclass if that subclass
 is designed to translate pixel sample values to color component values
 in a non-default way.  The default translations implemented by this
 class is described in the class comments.  Any subclass implementing
 a non-default translation must follow the constraints on allowable
 translations defined there.

Overrides:
getNormalizedComponents in class ColorModel
Parameters:
pixel - the specified pixel
normComponents - an array to receive the normalized components
normOffset - the offset into the normComponents
 array at which to start storing normalized components
Returns:
an array containing normalized color and alpha
 components.
Throws:
ClassCastException - if pixel is not a primitive
          array of type transferType
ArrayIndexOutOfBoundsException - if
          normComponents is not large enough to hold all
          color and alpha components starting at normOffset
ArrayIndexOutOfBoundsException - if
          pixel is not large enough to hold a pixel
          value for this ColorModel.
Since:
1.4


"
ComponentColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified as an int.
 The returned value will be a non pre-multiplied value.
 If the alpha is premultiplied, this method divides
 it out before returning the value (if the alpha value is 0,
 the red value will be 0).

Specified by:
getRed in class ColorModel
Parameters:
pixel - The pixel from which you want to get the red color component.
Returns:
The red color component for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed


"
ComponentColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public int getRed(Object inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A color conversion
 is done if necessary.  The pixel value is specified by an array
 of data elements of type transferType passed in as an object
 reference. The returned value will be a non pre-multiplied value. If the
 alpha is premultiplied, this method divides it out before returning
 the value (if the alpha value is 0, the red value will be 0). Since
 ComponentColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't override
 it then they throw an exception if they use an unsupported
 transferType.

Overrides:
getRed in class ColorModel
Parameters:
inData - The pixel from which you want to get the red color component,
 specified by an array of data elements of type transferType.
Returns:
The red color component for the specified pixel, as an int.
Throws:
ClassCastException - If inData is not a primitive array
 of type transferType.
ArrayIndexOutOfBoundsException - if inData is not
 large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.


"
ComponentColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.,"

getRGB
public int getRGB(int pixel)
Returns the color/alpha components of the pixel in the default
 RGB color model format.  A color conversion is done if necessary.
 The returned value will be in a non pre-multiplied format. If
 the alpha is premultiplied, this method divides it out of the
 color components (if the alpha value is 0, the color values will be 0).

Overrides:
getRGB in class ColorModel
Parameters:
pixel - The pixel from which you want to get the color/alpha components.
Returns:
The color/alpha components for the specified pixel, as an int.
Throws:
IllegalArgumentException - If there is more than
 one component in this ColorModel.
IllegalArgumentException - If the component value for this
 ColorModel is signed
See Also:
ColorModel.getRGBdefault()


"
ComponentColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.,"

getRGB
public int getRGB(Object inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.  A color conversion is done if
 necessary.  The pixel value is specified by an
 array of data elements of type transferType passed
 in as an object reference.
 The returned value is in a non pre-multiplied format. If
 the alpha is premultiplied, this method divides it out of the
 color components (if the alpha value is 0, the color values will be 0).
 Since ComponentColorModel can be subclassed,
 subclasses inherit the implementation of this method and if they
 don't override it then they throw an exception if they use an
 unsupported transferType.

Overrides:
getRGB in class ColorModel
Parameters:
inData - The pixel from which you want to get the color/alpha components,
 specified by an array of data elements of type transferType.
Returns:
The color/alpha components for the specified pixel, as an int.
Throws:
ClassCastException - If inData is not a primitive array
 of type transferType.
ArrayIndexOutOfBoundsException - if inData is not
 large enough to hold a pixel value for this
 ColorModel.
UnsupportedOperationException - If the transfer type of
 this ComponentColorModel
 is not one of the supported transfer types:
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.
See Also:
ColorModel.getRGBdefault()


"
ComponentColorModel,"getUnnormalizedComponents(float[] normComponents, int normOffset, int[] components, int offset)",int[],"Returns an array of all of the color/alpha components in unnormalized form, given a normalized component array.","

getUnnormalizedComponents
public int[] getUnnormalizedComponents(float[] normComponents,
                                       int normOffset,
                                       int[] components,
                                       int offset)
Returns an array of all of the color/alpha components in unnormalized
 form, given a normalized component array.  Unnormalized components
 are unsigned integral values between 0 and 2n - 1, where
 n is the number of bits for a particular component.  Normalized
 components are float values between a per component minimum and
 maximum specified by the ColorSpace object for this
 ColorModel.  An IllegalArgumentException
 will be thrown if color component values for this
 ColorModel are not conveniently representable in the
 unnormalized form.  If the
 components array is null, a new array
 will be allocated.  The components array will
 be returned.  Color/alpha components are stored in the
 components array starting at offset (even
 if the array is allocated by this method). An
 ArrayIndexOutOfBoundsException is thrown if the
 components array is not null and is not
 large enough to hold all the color and alpha
 components (starting at offset).  An
 IllegalArgumentException is thrown if the
 normComponents array is not large enough to hold
 all the color and alpha components starting at
 normOffset.

Overrides:
getUnnormalizedComponents in class ColorModel
Parameters:
normComponents - an array containing normalized components
normOffset - the offset into the normComponents
 array at which to start retrieving normalized components
components - an array that receives the components from
 normComponents
offset - the index into components at which to
 begin storing normalized components from
 normComponents
Returns:
an array containing unnormalized color and alpha
 components.
Throws:
IllegalArgumentException - If this
 ComponentColorModel does not support the unnormalized form
IllegalArgumentException - if the length of
          normComponents minus normOffset
          is less than numComponents


"
ComponentColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel; false if it is not.,"

isCompatibleRaster
public boolean isCompatibleRaster(Raster raster)
Returns true if raster is compatible with this
 ColorModel; false if it is not.

Overrides:
isCompatibleRaster in class ColorModel
Parameters:
raster - The Raster object to test for compatibility.
Returns:
true if raster is compatible with this
 ColorModel, false if it is not.


"
ComponentColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks whether or not the specified SampleModel is compatible with this ColorModel.,"

isCompatibleSampleModel
public boolean isCompatibleSampleModel(SampleModel sm)
Checks whether or not the specified SampleModel
 is compatible with this ColorModel.

Overrides:
isCompatibleSampleModel in class ColorModel
Parameters:
sm - The SampleModel to test for compatibility.
Returns:
true if the SampleModel is
 compatible with this ColorModel, false
 if it is not.
See Also:
SampleModel


"
ComponentSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new ComponentSampleModel with the specified width and height.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a new ComponentSampleModel with the specified
 width and height.  The new SampleModel will have the same
 number of bands, storage data type, interleaving scheme, and
 pixel stride as this SampleModel.

Specified by:
createCompatibleSampleModel in class SampleModel
Parameters:
w - the width of the resulting SampleModel
h - the height of the resulting SampleModel
Returns:
a new ComponentSampleModel with the specified size
Throws:
IllegalArgumentException - if w or
         h is not greater than 0


"
ComponentSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this ComponentSampleModel.,"

createDataBuffer
public DataBuffer createDataBuffer()
Creates a DataBuffer that corresponds to this
 ComponentSampleModel.
 The DataBuffer object's data type, number of banks,
 and size are be consistent with this ComponentSampleModel.

Specified by:
createDataBuffer in class SampleModel
Returns:
a DataBuffer whose data type, number of banks
         and size are consistent with this
         ComponentSampleModel.


"
ComponentSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new ComponentSampleModel with a subset of the bands of this ComponentSampleModel.,"

createSubsetSampleModel
public SampleModel createSubsetSampleModel(int[] bands)
Creates a new ComponentSampleModel with a subset of the bands
 of this ComponentSampleModel.  The new ComponentSampleModel can be
 used with any DataBuffer that the existing ComponentSampleModel
 can be used with.  The new ComponentSampleModel/DataBuffer
 combination will represent an image with a subset of the bands
 of the original ComponentSampleModel/DataBuffer combination.

Specified by:
createSubsetSampleModel in class SampleModel
Parameters:
bands - a subset of bands from this
              ComponentSampleModel
Returns:
a ComponentSampleModel created with a subset
          of bands from this ComponentSampleModel.


"
ComponentSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
ComponentSampleModel,getBandOffsets(),int[],Returns the band offset for all bands.,"

getBandOffsets
public final int[] getBandOffsets()
Returns the band offset for all bands.

Returns:
the band offsets for all bands.


"
ComponentSampleModel,getBankIndices(),int[],Returns the bank indices for all bands.,"

getBankIndices
public final int[] getBankIndices()
Returns the bank indices for all bands.

Returns:
the bank indices for all bands.


"
ComponentSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              Object obj,
                              DataBuffer data)
Returns data for a single pixel in a primitive array of type
 TransferType.  For a ComponentSampleModel,
 this is the same as the data type, and samples are returned
 one per array element.  Generally, obj should
 be passed in as null, so that the Object
 is created automatically and is the right primitive data type.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is
 described by ComponentSampleModel csm1,
 to DataBuffer db2, whose storage layout
 is described by ComponentSampleModel csm2.
 The transfer is usually more efficient than using
 getPixel and setPixel.
 
       ComponentSampleModel csm1, csm2;
       DataBufferInt db1, db2;
       csm2.setDataElements(x, y,
                            csm1.getDataElements(x, y, null, db1), db2);
 

 Using getDataElements and setDataElements
 to transfer between two DataBuffer/SampleModel
 pairs is legitimate if the SampleModel objects have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is not null, it should be a
 primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException might be thrown if the
 coordinates are not in bounds, or if obj is not
 null and is not large enough to hold
 the pixel data.

Specified by:
getDataElements in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
obj - if non-null, a primitive array
                  in which to return the pixel data
data - the DataBuffer containing the image data
Returns:
the data of the specified pixel
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is too small to hold the output.
See Also:
setDataElements(int, int, Object, DataBuffer)


"
ComponentSampleModel,getNumDataElements(),int,"Returns the number of data elements needed to transfer a pixel with the getDataElements(int, int, Object, DataBuffer) and setDataElements(int, int, Object, DataBuffer) methods.","

getNumDataElements
public final int getNumDataElements()
Returns the number of data elements needed to transfer a pixel
 with the
 getDataElements(int, int, Object, DataBuffer) and
 setDataElements(int, int, Object, DataBuffer)
 methods.
 For a ComponentSampleModel, this is identical to the
 number of bands.

Specified by:
getNumDataElements in class SampleModel
Returns:
the number of data elements needed to transfer a pixel with
         the getDataElements and
         setDataElements methods.
See Also:
SampleModel.getNumDataElements(), 
SampleModel.getNumBands()


"
ComponentSampleModel,"getOffset(int x, int y)",int,"Gets the offset for the first band of pixel (x,y).","

getOffset
public int getOffset(int x,
                     int y)
Gets the offset for the first band of pixel (x,y).
  A sample of the first band can be retrieved from a
 DataBuffer
data with a ComponentSampleModel
csm as
 
        data.getElem(csm.getOffset(x, y));
 

Parameters:
x - the X location of the pixel
y - the Y location of the pixel
Returns:
the offset for the first band of the specified pixel.


"
ComponentSampleModel,"getOffset(int x, int y, int b)",int,"Gets the offset for band b of pixel (x,y).","

getOffset
public int getOffset(int x,
                     int y,
                     int b)
Gets the offset for band b of pixel (x,y).
  A sample of band b can be retrieved from a
  DataBuffer data
  with a ComponentSampleModel csm as
 
       data.getElem(csm.getOffset(x, y, b));
 

Parameters:
x - the X location of the specified pixel
y - the Y location of the specified pixel
b - the specified band
Returns:
the offset for the specified band of the specified pixel.


"
ComponentSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified pixel in an int array, one sample per array element.","

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray,
                      DataBuffer data)
Returns all samples for the specified pixel in an int array,
 one sample per array element.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Overrides:
getPixel in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples of the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if iArray is too small to hold the output.
See Also:
setPixel(int, int, int[], DataBuffer)


"
ComponentSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per array element.","

getPixels
public int[] getPixels(int x,
                       int y,
                       int w,
                       int h,
                       int[] iArray,
                       DataBuffer data)
Returns all samples for the specified rectangle of pixels in
 an int array, one sample per array element.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Overrides:
getPixels in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples of the pixels within the specified region.
See Also:
setPixels(int, int, int, int, int[], DataBuffer)


"
ComponentSampleModel,getPixelStride(),int,Returns the pixel stride of this ComponentSampleModel.,"

getPixelStride
public final int getPixelStride()
Returns the pixel stride of this ComponentSampleModel.

Returns:
the pixel stride of this ComponentSampleModel.


"
ComponentSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y).","

getSample
public int getSample(int x,
                     int y,
                     int b,
                     DataBuffer data)
Returns as int the sample in a specified band for the pixel
 located at (x,y).
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Specified by:
getSample in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
b - the band to return
data - the DataBuffer containing the image data
Returns:
the sample in a specified band for the specified pixel
See Also:
setSample(int, int, int, int, DataBuffer)


"
ComponentSampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double.","

getSampleDouble
public double getSampleDouble(int x,
                              int y,
                              int b,
                              DataBuffer data)
Returns the sample in a specified band
 for a pixel located at (x,y) as a double.
 An ArrayIndexOutOfBoundsException might be
 thrown if the coordinates are not in bounds.

Overrides:
getSampleDouble in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
data - The DataBuffer containing the image data
Returns:
a double value representing the sample in the specified
 band for the specified pixel.


"
ComponentSampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float.","

getSampleFloat
public float getSampleFloat(int x,
                            int y,
                            int b,
                            DataBuffer data)
Returns the sample in a specified band
 for the pixel located at (x,y) as a float.
 An ArrayIndexOutOfBoundsException might be
 thrown if the coordinates are not in bounds.

Overrides:
getSampleFloat in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
data - The DataBuffer containing the image data
Returns:
a float value representing the sample in the specified
 band for the specified pixel.


"
ComponentSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples in a specified band for the specified rectangle of pixels in an int array, one sample per data array element.","

getSamples
public int[] getSamples(int x,
                        int y,
                        int w,
                        int h,
                        int b,
                        int[] iArray,
                        DataBuffer data)
Returns the samples in a specified band for the specified rectangle
 of pixels in an int array, one sample per data array element.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Overrides:
getSamples in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - the width of the pixel rectangle
h - the height of the pixel rectangle
b - the band to return
iArray - if non-null, returns the samples
                  in this array
data - the DataBuffer containing the image data
Returns:
the samples in the specified band of the specified pixel
See Also:
setSamples(int, int, int, int, int, int[], DataBuffer)


"
ComponentSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.,"

getSampleSize
public final int[] getSampleSize()
Returns the number of bits per sample for all bands.

Specified by:
getSampleSize in class SampleModel
Returns:
an array containing the number of bits per sample
          for all bands, where each element in the array
          represents a band.


"
ComponentSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.,"

getSampleSize
public final int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
ComponentSampleModel,getScanlineStride(),int,Returns the scanline stride of this ComponentSampleModel.,"

getScanlineStride
public final int getScanlineStride()
Returns the scanline stride of this ComponentSampleModel.

Returns:
the scanline stride of this ComponentSampleModel.


"
ComponentSampleModel,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
ComponentSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Object obj,
                            DataBuffer data)
Sets the data for a single pixel in the specified
 DataBuffer from a primitive array of type
 TransferType.  For a ComponentSampleModel,
 this is the same as the data type, and samples are transferred
 one per array element.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is
 described by ComponentSampleModel csm1,
 to DataBuffer db2, whose storage layout
 is described by ComponentSampleModel csm2.
 The transfer is usually more efficient than using
 getPixel and setPixel.
 
       ComponentSampleModel csm1, csm2;
       DataBufferInt db1, db2;
       csm2.setDataElements(x, y, csm1.getDataElements(x, y, null, db1),
                            db2);
 
 Using getDataElements and setDataElements
 to transfer between two DataBuffer/SampleModel pairs
 is legitimate if the SampleModel objects have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 A ClassCastException is thrown if obj is not
 a primitive array of type TransferType.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds, or if obj is not large
 enough to hold the pixel data.

Specified by:
setDataElements in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
obj - a primitive array containing pixel data
data - the DataBuffer containing the image data
See Also:
getDataElements(int, int, Object, DataBuffer)


"
ComponentSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using an int array of
 samples for input.  An ArrayIndexOutOfBoundsException
 might be thrown if the coordinates are
 not in bounds.

Overrides:
setPixel in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
iArray - The input samples in an int array
data - The DataBuffer containing the image data
See Also:
getPixel(int, int, int[], DataBuffer)


"
ComponentSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      int[] iArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from an int array containing
 one sample per array element.
 An ArrayIndexOutOfBoundsException might be thrown if the
 coordinates are not in bounds.

Overrides:
setPixels in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
iArray - The input samples in an int array
data - The DataBuffer containing the image data
See Also:
getPixels(int, int, int, int, int[], DataBuffer)


"
ComponentSampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      double s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a double for input.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Overrides:
setSample in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to set
s - The input sample as a double
data - The DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
ComponentSampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      float s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a float for input.
 An ArrayIndexOutOfBoundsException might be thrown if
 the coordinates are not in bounds.

Overrides:
setSample in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to set
s - The input sample as a float
data - The DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
ComponentSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 An ArrayIndexOutOfBoundsException might be thrown if the
 coordinates are not in bounds.

Specified by:
setSample in class SampleModel
Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - the band to set
s - the input sample as an int
data - the DataBuffer containing the image data
See Also:
getSample(int, int, int, DataBuffer)


"
ComponentSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per data array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       int[] iArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from an int array containing one sample per data array element.
 An ArrayIndexOutOfBoundsException might be thrown if the
 coordinates are not in bounds.

Overrides:
setSamples in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location
y - The Y coordinate of the upper left pixel location
w - The width of the pixel rectangle
h - The height of the pixel rectangle
b - The band to set
iArray - The input samples in an int array
data - The DataBuffer containing the image data
See Also:
getSamples(int, int, int, int, int, int[], DataBuffer)


"
ConvolveOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.,"

createCompatibleDestImage
public BufferedImage createCompatibleDestImage(BufferedImage src,
                                               ColorModel destCM)
Creates a zeroed destination image with the correct size and number
 of bands.  If destCM is null, an appropriate ColorModel will be used.

Specified by:
createCompatibleDestImage in interface BufferedImageOp
Parameters:
src - Source image for the filter operation.
destCM - ColorModel of the destination.  Can be null.
Returns:
a destination BufferedImage with the correct
         size and number of bands.


"
ConvolveOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed destination Raster with the correct size and number of bands, given this source.","

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed destination Raster with the correct size and number
 of bands, given this source.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - the source Raster
Returns:
a WritableRaster that is compatible with
         src


"
ConvolveOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Performs a convolution on BufferedImages.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Performs a convolution on BufferedImages.  Each component of the
 source image will be convolved (including the alpha component, if
 present).
 If the color model in the source image is not the same as that
 in the destination image, the pixels will be converted
 in the destination.  If the destination image is null,
 a BufferedImage will be created with the source ColorModel.
 The IllegalArgumentException may be thrown if the source is the
 same as the destination.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the source BufferedImage to filter
dst - the destination BufferedImage for the
        filtered src
Returns:
the filtered BufferedImage
Throws:
NullPointerException - if src is null
IllegalArgumentException - if src equals
         dst
ImagingOpException - if src cannot be filtered


"
ConvolveOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Performs a convolution on Rasters.,"

filter
public final WritableRaster filter(Raster src,
                                   WritableRaster dst)
Performs a convolution on Rasters.  Each band of the source Raster
 will be convolved.
 The source and destination must have the same number of bands.
 If the destination Raster is null, a new Raster will be created.
 The IllegalArgumentException may be thrown if the source is
 the same as the destination.

Specified by:
filter in interface RasterOp
Parameters:
src - the source Raster to filter
dst - the destination WritableRaster for the
        filtered src
Returns:
the filtered WritableRaster
Throws:
NullPointerException - if src is null
ImagingOpException - if src and dst
         do not have the same number of bands
ImagingOpException - if src cannot be filtered
IllegalArgumentException - if src equals
         dst


"
ConvolveOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the filtered destination image.,"

getBounds2D
public final Rectangle2D getBounds2D(BufferedImage src)
Returns the bounding box of the filtered destination image.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface BufferedImageOp
Parameters:
src - The BufferedImage to be filtered
Returns:
The Rectangle2D representing the destination
 image's bounding box.


"
ConvolveOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the filtered destination Raster.,"

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the filtered destination Raster.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - the source Raster
Returns:
a Rectangle2D that is the bounding box of
         the Raster resulting from the filtering
         operation.


"
ConvolveOp,getEdgeCondition(),int,Returns the edge condition.,"

getEdgeCondition
public int getEdgeCondition()
Returns the edge condition.

Returns:
the edge condition of this ConvolveOp.
See Also:
EDGE_NO_OP, 
EDGE_ZERO_FILL


"
ConvolveOp,getKernel(),Kernel,Returns the Kernel.,"

getKernel
public final Kernel getKernel()
Returns the Kernel.

Returns:
the Kernel of this ConvolveOp.


"
ConvolveOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the destination point given a
 point in the source.  If dstPt is non-null, it will
 be used to hold the return value.  Since this is not a geometric
 operation, the srcPt will equal the dstPt.

Specified by:
getPoint2D in interface BufferedImageOp
Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - the Point2D that represents the point in
 the source image
dstPt - The Point2D in which to store the result
Returns:
The Point2D in the destination image that
 corresponds to the specified point in the source image.


"
ConvolveOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints for this op.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
The RenderingHints object for this
 BufferedImageOp.  Returns
 null if no hints have been set.


"
CropImageFilter,"setDimensions(int w, int h)",void,Override the source image's dimensions and pass the dimensions of the rectangular cropped region to the ImageConsumer.,"

setDimensions
public void setDimensions(int w,
                          int h)
Override the source image's dimensions and pass the dimensions
 of the rectangular cropped region to the ImageConsumer.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose
 pixels are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setDimensions in interface ImageConsumer
Overrides:
setDimensions in class ImageFilter
Parameters:
w - the width of the source image
h - the height of the source image
See Also:
ImageConsumer


"
CropImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Determine whether the delivered byte pixels intersect the region to be extracted and passes through only that subset of pixels that appear in the output region.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
Determine whether the delivered byte pixels intersect the region to
 be extracted and passes through only that subset of pixels that
 appear in the output region.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose
 pixels are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
CropImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Determine if the delivered int pixels intersect the region to be extracted and pass through only that subset of pixels that appear in the output region.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
Determine if the delivered int pixels intersect the region to
 be extracted and pass through only that subset of pixels that
 appear in the output region.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose
 pixels are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
CropImageFilter,"setProperties(Hashtable<?,?> props)",void,Passes along the properties from the source object after adding a property indicating the cropped region.,"

setProperties
public void setProperties(Hashtable<?,?> props)
Passes along  the properties from the source object after adding a
 property indicating the cropped region.
 This method invokes super.setProperties,
 which might result in additional properties being added.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setProperties in interface ImageConsumer
Overrides:
setProperties in class ImageFilter
Parameters:
props - the properties from the source object


"
DataBuffer,getDataType(),int,Returns the data type of this DataBuffer.,"

getDataType
public int getDataType()
Returns the data type of this DataBuffer.

Returns:
the data type of this DataBuffer.


"
DataBuffer,getDataTypeSize(int type),static int,"Returns the size (in bits) of the data type, given a datatype tag.","

getDataTypeSize
public static int getDataTypeSize(int type)
Returns the size (in bits) of the data type, given a datatype tag.

Parameters:
type - the value of one of the defined datatype tags
Returns:
the size of the data type
Throws:
IllegalArgumentException - if type is less than
         zero or greater than TYPE_DOUBLE


"
DataBuffer,getElem(int i),int,Returns the requested data array element from the first (default) bank as an integer.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank
 as an integer.

Parameters:
i - the index of the requested data array element
Returns:
the data array element at the specified index.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBuffer,"getElem(int bank, int i)",abstract int,Returns the requested data array element from the specified bank as an integer.,"

getElem
public abstract int getElem(int bank,
                            int i)
Returns the requested data array element from the specified bank
 as an integer.

Parameters:
bank - the specified bank
i - the index of the requested data array element
Returns:
the data array element at the specified index from the
         specified bank at the specified index.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBuffer,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.,"

getElemDouble
public double getElemDouble(int i)
Returns the requested data array element from the first (default) bank
 as a double.  The implementation in this class is to cast
 getElem(int)
 to a double.  Subclasses can override this method if another
 implementation is needed.

Parameters:
i - the specified index
Returns:
a double value representing the element at the specified
 index in the data array.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBuffer,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.,"

getElemDouble
public double getElemDouble(int bank,
                            int i)
Returns the requested data array element from the specified bank as
 a double.  The implementation in this class is to cast getElem(bank, i)
 to a double.  Subclasses may override this method if another
 implementation is needed.

Parameters:
bank - the specified bank
i - the specified index
Returns:
a double value representing the element from the specified
 bank at the specified index in the data array.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBuffer,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.,"

getElemFloat
public float getElemFloat(int i)
Returns the requested data array element from the first (default) bank
 as a float.  The implementation in this class is to cast getElem(i)
 to a float.  Subclasses may override this method if another
 implementation is needed.

Parameters:
i - the index of the requested data array element
Returns:
a float value representing the data array element at the
  specified index.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBuffer,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.,"

getElemFloat
public float getElemFloat(int bank,
                          int i)
Returns the requested data array element from the specified bank
 as a float.  The implementation in this class is to cast
 getElem(int, int)
 to a float.  Subclasses can override this method if another
 implementation is needed.

Parameters:
bank - the specified bank
i - the index of the requested data array element
Returns:
a float value representing the data array element from the
 specified bank at the specified index.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBuffer,getNumBanks(),int,Returns the number of banks in this DataBuffer.,"

getNumBanks
public int getNumBanks()
Returns the number of banks in this DataBuffer.

Returns:
the number of banks.


"
DataBuffer,getOffset(),int,Returns the offset of the default bank in array elements.,"

getOffset
public int getOffset()
Returns the offset of the default bank in array elements.

Returns:
the offset of the default bank.


"
DataBuffer,getOffsets(),int[],Returns the offsets (in array elements) of all the banks.,"

getOffsets
public int[] getOffsets()
Returns the offsets (in array elements) of all the banks.

Returns:
the offsets of all banks.


"
DataBuffer,getSize(),int,Returns the size (in array elements) of all banks.,"

getSize
public int getSize()
Returns the size (in array elements) of all banks.

Returns:
the size of all banks.


"
DataBuffer,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank from the given integer.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default) bank
 from the given integer.

Parameters:
i - the specified index into the data array
val - the data to set the element at the specified index in
 the data array
See Also:
getElem(int), 
getElem(int, int)


"
DataBuffer,"setElem(int bank, int i, int val)",abstract void,Sets the requested data array element in the specified bank from the given integer.,"

setElem
public abstract void setElem(int bank,
                             int i,
                             int val)
Sets the requested data array element in the specified bank
 from the given integer.

Parameters:
bank - the specified bank
i - the specified index into the data array
val - the data to set the element in the specified bank
 at the specified index in the data array
See Also:
getElem(int), 
getElem(int, int)


"
DataBuffer,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank from the given double.,"

setElemDouble
public void setElemDouble(int i,
                          double val)
Sets the requested data array element in the first (default) bank
 from the given double.  The implementation in this class is to cast
 val to an int and call setElem(int, int).  Subclasses can
 override this method if another implementation is needed.

Parameters:
i - the specified index
val - the value to set the element at the specified index
 in the data array
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBuffer,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank from the given double.,"

setElemDouble
public void setElemDouble(int bank,
                          int i,
                          double val)
Sets the requested data array element in the specified bank
 from the given double.  The implementation in this class is to cast
 val to an int and call setElem(int, int).  Subclasses can
 override this method if another implementation is needed.

Parameters:
bank - the specified bank
i - the specified index
val - the value to set the element in the specified bank
 at the specified index of the data array
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBuffer,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank from the given float.,"

setElemFloat
public void setElemFloat(int i,
                         float val)
Sets the requested data array element in the first (default) bank
 from the given float.  The implementation in this class is to cast
 val to an int and call setElem(int, int).  Subclasses
 can override this method if another implementation is needed.

Parameters:
i - the specified index
val - the value to set the element at the specified index in
 the data array
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBuffer,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank from the given float.,"

setElemFloat
public void setElemFloat(int bank,
                         int i,
                         float val)
Sets the requested data array element in the specified bank
 from the given float.  The implementation in this class is to cast
 val to an int and call setElem(int, int).  Subclasses can
 override this method if another implementation is needed.

Parameters:
bank - the specified bank
i - the specified index
val - the value to set the element in the specified bank at
 the specified index in the data array
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBufferByte,getBankData(),byte[][],Returns the data arrays for all banks.,"

getBankData
public byte[][] getBankData()
Returns the data arrays for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
All of the data arrays.


"
DataBufferByte,getData(),byte[],Returns the default (first) byte data array.,"

getData
public byte[] getData()
Returns the default (first) byte data array.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
The first byte data array.


"
DataBufferByte,getData(int bank),byte[],Returns the data array for the specified bank.,"

getData
public byte[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - The bank whose data array you want to get.
Returns:
The data array for the specified bank.


"
DataBufferByte,getElem(int i),int,Returns the requested data array element from the first (default) bank.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank.

Overrides:
getElem in class DataBuffer
Parameters:
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferByte,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified bank.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank from which you want to get a data array element.
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferByte,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default) bank
 to the specified value.

Overrides:
setElem in class DataBuffer
Parameters:
i - The data array element you want to set.
val - The integer value to which you want to set the data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferByte,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 from the given integer.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank in which you want to set the data array element.
i - The data array element you want to set.
val - The integer value to which you want to set the specified data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferDouble,getBankData(),double[][],Returns the data array for all banks.,"

getBankData
public double[][] getBankData()
Returns the data array for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
all data arrays from this data buffer.


"
DataBufferDouble,getData(),double[],Returns the default (first) double data array.,"

getData
public double[] getData()
Returns the default (first) double data array.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
the first double data array.


"
DataBufferDouble,getData(int bank),double[],Returns the data array for the specified bank.,"

getData
public double[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - the data array
Returns:
the data array specified by bank.


"
DataBufferDouble,getElem(int i),int,Returns the requested data array element from the first (default) bank as an int.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first
 (default) bank as an int.

Overrides:
getElem in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as an int.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferDouble,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank as an int.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified
 bank as an int.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as an int.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferDouble,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.,"

getElemDouble
public double getElemDouble(int i)
Returns the requested data array element from the first
 (default) bank as a double.

Overrides:
getElemDouble in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as a double.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBufferDouble,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.,"

getElemDouble
public double getElemDouble(int bank,
                            int i)
Returns the requested data array element from the specified
 bank as a double.

Overrides:
getElemDouble in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as a double.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBufferDouble,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.,"

getElemFloat
public float getElemFloat(int i)
Returns the requested data array element from the first
 (default) bank as a float.

Overrides:
getElemFloat in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as a float.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBufferDouble,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.,"

getElemFloat
public float getElemFloat(int bank,
                          int i)
Returns the requested data array element from the specified
 bank as a float.

Overrides:
getElemFloat in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as a float.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBufferDouble,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the given int.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default)
 bank to the given int.

Overrides:
setElem in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferDouble,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the given int.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 to the given int.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferDouble,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank to the given double.,"

setElemDouble
public void setElemDouble(int i,
                          double val)
Sets the requested data array element in the first (default)
 bank to the given double.

Overrides:
setElemDouble in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBufferDouble,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank to the given double.,"

setElemDouble
public void setElemDouble(int bank,
                          int i,
                          double val)
Sets the requested data array element in the specified bank to
 the given double.

Overrides:
setElemDouble in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBufferDouble,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank to the given float.,"

setElemFloat
public void setElemFloat(int i,
                         float val)
Sets the requested data array element in the first (default)
 bank to the given float.

Overrides:
setElemFloat in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBufferDouble,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank to the given float.,"

setElemFloat
public void setElemFloat(int bank,
                         int i,
                         float val)
Sets the requested data array element in the specified bank to
 the given float.

Overrides:
setElemFloat in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBufferFloat,getBankData(),float[][],Returns the data array for all banks.,"

getBankData
public float[][] getBankData()
Returns the data array for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
all data arrays for this data buffer.


"
DataBufferFloat,getData(),float[],Returns the default (first) float data array.,"

getData
public float[] getData()
Returns the default (first) float data array.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
the first float data array.


"
DataBufferFloat,getData(int bank),float[],Returns the data array for the specified bank.,"

getData
public float[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - the data array
Returns:
the data array specified by bank.


"
DataBufferFloat,getElem(int i),int,Returns the requested data array element from the first (default) bank as an int.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first
 (default) bank as an int.

Overrides:
getElem in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as an int.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferFloat,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank as an int.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified
 bank as an int.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as an int.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferFloat,getElemDouble(int i),double,Returns the requested data array element from the first (default) bank as a double.,"

getElemDouble
public double getElemDouble(int i)
Returns the requested data array element from the first
 (default) bank as a double.

Overrides:
getElemDouble in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as a double.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBufferFloat,"getElemDouble(int bank, int i)",double,Returns the requested data array element from the specified bank as a double.,"

getElemDouble
public double getElemDouble(int bank,
                            int i)
Returns the requested data array element from the specified
 bank as a double.

Overrides:
getElemDouble in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as a double.
See Also:
setElemDouble(int, double), 
setElemDouble(int, int, double)


"
DataBufferFloat,getElemFloat(int i),float,Returns the requested data array element from the first (default) bank as a float.,"

getElemFloat
public float getElemFloat(int i)
Returns the requested data array element from the first
 (default) bank as a float.

Overrides:
getElemFloat in class DataBuffer
Parameters:
i - The desired data array element.
Returns:
The data entry as a float.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBufferFloat,"getElemFloat(int bank, int i)",float,Returns the requested data array element from the specified bank as a float.,"

getElemFloat
public float getElemFloat(int bank,
                          int i)
Returns the requested data array element from the specified
 bank as a float.

Overrides:
getElemFloat in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
Returns:
The data entry as a float.
See Also:
setElemFloat(int, float), 
setElemFloat(int, int, float)


"
DataBufferFloat,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the given int.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default)
 bank to the given int.

Overrides:
setElem in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferFloat,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the given int.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank to
 the given int.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferFloat,"setElemDouble(int i, double val)",void,Sets the requested data array element in the first (default) bank to the given double.,"

setElemDouble
public void setElemDouble(int i,
                          double val)
Sets the requested data array element in the first (default)
 bank to the given double.

Overrides:
setElemDouble in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBufferFloat,"setElemDouble(int bank, int i, double val)",void,Sets the requested data array element in the specified bank to the given double.,"

setElemDouble
public void setElemDouble(int bank,
                          int i,
                          double val)
Sets the requested data array element in the specified bank to
 the given double.

Overrides:
setElemDouble in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElemDouble(int), 
getElemDouble(int, int)


"
DataBufferFloat,"setElemFloat(int i, float val)",void,Sets the requested data array element in the first (default) bank to the given float.,"

setElemFloat
public void setElemFloat(int i,
                         float val)
Sets the requested data array element in the first (default)
 bank to the given float.

Overrides:
setElemFloat in class DataBuffer
Parameters:
i - The desired data array element.
val - The value to be set.
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBufferFloat,"setElemFloat(int bank, int i, float val)",void,Sets the requested data array element in the specified bank to the given float.,"

setElemFloat
public void setElemFloat(int bank,
                         int i,
                         float val)
Sets the requested data array element in the specified bank to
 the given float.

Overrides:
setElemFloat in class DataBuffer
Parameters:
bank - The bank number.
i - The desired data array element.
val - The value to be set.
See Also:
getElemFloat(int), 
getElemFloat(int, int)


"
DataBufferInt,getBankData(),int[][],Returns the data arrays for all banks.,"

getBankData
public int[][] getBankData()
Returns the data arrays for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
All of the data arrays.


"
DataBufferInt,getData(),int[],Returns the default (first) int data array in DataBuffer.,"

getData
public int[] getData()
Returns the default (first) int data array in DataBuffer.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
The first integer data array.


"
DataBufferInt,getData(int bank),int[],Returns the data array for the specified bank.,"

getData
public int[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - The bank whose data array you want to get.
Returns:
The data array for the specified bank.


"
DataBufferInt,getElem(int i),int,Returns the requested data array element from the first (default) bank.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank.

Overrides:
getElem in class DataBuffer
Parameters:
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferInt,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified bank.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank from which you want to get a data array element.
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferInt,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default) bank
 to the specified value.

Overrides:
setElem in class DataBuffer
Parameters:
i - The data array element you want to set.
val - The integer value to which you want to set the data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferInt,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank to the integer value i.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 to the integer value i.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank in which you want to set the data array element.
i - The data array element you want to set.
val - The integer value to which you want to set the specified data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferShort,getBankData(),short[][],Returns the data arrays for all banks.,"

getBankData
public short[][] getBankData()
Returns the data arrays for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
All of the data arrays.


"
DataBufferShort,getData(),short[],Returns the default (first) byte data array.,"

getData
public short[] getData()
Returns the default (first) byte data array.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
The first short data array.


"
DataBufferShort,getData(int bank),short[],Returns the data array for the specified bank.,"

getData
public short[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - The bank whose data array you want to get.
Returns:
The data array for the specified bank.


"
DataBufferShort,getElem(int i),int,Returns the requested data array element from the first (default) bank.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank.

Overrides:
getElem in class DataBuffer
Parameters:
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferShort,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified bank.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank from which you want to get a data array element.
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferShort,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default) bank
 to the specified value.

Overrides:
setElem in class DataBuffer
Parameters:
i - The data array element you want to set.
val - The integer value to which you want to set the data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferShort,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 from the given integer.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank in which you want to set the data array element.
i - The data array element you want to set.
val - The integer value to which you want to set the specified data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferUShort,getBankData(),short[][],Returns the data arrays for all banks.,"

getBankData
public short[][] getBankData()
Returns the data arrays for all banks.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
All of the data arrays.


"
DataBufferUShort,getData(),short[],Returns the default (first) unsigned-short data array.,"

getData
public short[] getData()
Returns the default (first) unsigned-short data array.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Returns:
The first unsigned-short data array.


"
DataBufferUShort,getData(int bank),short[],Returns the data array for the specified bank.,"

getData
public short[] getData(int bank)
Returns the data array for the specified bank.
 
 Note that calling this method may cause this DataBuffer
 object to be incompatible with performance
 optimizations used by some implementations (such as caching
 an associated image in video memory).

Parameters:
bank - The bank whose data array you want to get.
Returns:
The data array for the specified bank.


"
DataBufferUShort,getElem(int i),int,Returns the requested data array element from the first (default) bank.,"

getElem
public int getElem(int i)
Returns the requested data array element from the first (default) bank.

Overrides:
getElem in class DataBuffer
Parameters:
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferUShort,"getElem(int bank, int i)",int,Returns the requested data array element from the specified bank.,"

getElem
public int getElem(int bank,
                   int i)
Returns the requested data array element from the specified bank.

Specified by:
getElem in class DataBuffer
Parameters:
bank - The bank from which you want to get a data array element.
i - The data array element you want to get.
Returns:
The requested data array element as an integer.
See Also:
setElem(int, int), 
setElem(int, int, int)


"
DataBufferUShort,"setElem(int i, int val)",void,Sets the requested data array element in the first (default) bank to the specified value.,"

setElem
public void setElem(int i,
                    int val)
Sets the requested data array element in the first (default) bank
 to the specified value.

Overrides:
setElem in class DataBuffer
Parameters:
i - The data array element you want to set.
val - The integer value to which you want to set the data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DataBufferUShort,"setElem(int bank, int i, int val)",void,Sets the requested data array element in the specified bank from the given integer.,"

setElem
public void setElem(int bank,
                    int i,
                    int val)
Sets the requested data array element in the specified bank
 from the given integer.

Specified by:
setElem in class DataBuffer
Parameters:
bank - The bank in which you want to set the data array element.
i - The data array element you want to set.
val - The integer value to which you want to set the specified data array element.
See Also:
getElem(int), 
getElem(int, int)


"
DirectColorModel,"coerceData(WritableRaster raster, boolean isAlphaPremultiplied)",ColorModel,"Forces the raster data to match the state specified in the isAlphaPremultiplied variable, assuming the data is currently correctly described by this ColorModel.","

coerceData
public final ColorModel coerceData(WritableRaster raster,
                                   boolean isAlphaPremultiplied)
Forces the raster data to match the state specified in the
 isAlphaPremultiplied variable, assuming the data is
 currently correctly described by this ColorModel.  It
 may multiply or divide the color raster data by alpha, or do
 nothing if the data is in the correct state.  If the data needs to
 be coerced, this method will also return an instance of this
 ColorModel with the isAlphaPremultiplied
 flag set appropriately.  This method will throw a
 UnsupportedOperationException if this transferType is
 not supported by this ColorModel.  Since
 ColorModel can be subclassed, subclasses inherit the
 implementation of this method and if they don't override it then
 they throw an exception if they use an unsupported transferType.

Overrides:
coerceData in class ColorModel
Parameters:
raster - the WritableRaster data
isAlphaPremultiplied - true if the alpha is
 premultiplied; false otherwise
Returns:
a ColorModel object that represents the
 coerced data.
Throws:
UnsupportedOperationException - if this
            transferType is not supported by this
            color model


"
DirectColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.,"

createCompatibleWritableRaster
public final WritableRaster createCompatibleWritableRaster(int w,
                                                           int h)
Creates a WritableRaster with the specified width and
 height that has a data layout (SampleModel) compatible
 with this ColorModel.

Overrides:
createCompatibleWritableRaster in class ColorModel
Parameters:
w - the width to apply to the new WritableRaster
h - the height to apply to the new WritableRaster
Returns:
a WritableRaster object with the specified
 width and height.
Throws:
IllegalArgumentException - if w or h
         is less than or equal to zero
See Also:
WritableRaster, 
SampleModel


"
DirectColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public final int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified as an int.

Specified by:
getAlpha in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the alpha component of pixel
         from 0 to 255.


"
DirectColorModel,getAlpha(Object inData),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public int getAlpha(Object inData)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified by an array of data
 elements of type transferType passed in as an object
 reference.
 If inData is not a primitive array of type
 transferType, a ClassCastException is
 thrown.  An ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.  Since
 DirectColorModel can be subclassed, subclasses inherit
 the implementation of this method and if they don't override it
 then they throw an exception if they use an unsupported
 transferType.
 If this transferType is not supported, an
 UnsupportedOperationException is thrown.

Overrides:
getAlpha in class ColorModel
Parameters:
inData - the specified pixel
Returns:
the alpha component of the specified pixel, scaled from
         0 to 255.
Throws:
ClassCastException - if inData
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  inData is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  tranferType is not supported by this
  ColorModel


"
DirectColorModel,getAlphaMask(),int,Returns the mask indicating which bits in an int pixel representation contain the alpha component.,"

getAlphaMask
public final int getAlphaMask()
Returns the mask indicating which bits in an int pixel
 representation contain the alpha component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the alpha sample.


"
DirectColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public final int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 as an int.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the blue value
 is 0.

Specified by:
getBlue in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the blue color component for the specified pixel, from
         0 to 255 in the sRGB ColorSpace.


"
DirectColorModel,getBlue(Object inData),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public int getBlue(Object inData)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 by an array of data elements of type transferType passed
 in as an object reference.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the blue value
 is 0.  If inData is not a primitive array of type
 transferType, a ClassCastException is thrown.
  An ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.  Since
 DirectColorModel can be subclassed, subclasses inherit
 the implementation of this method and if they don't override it
 then they throw an exception if they use an unsupported
 transferType.
 An UnsupportedOperationException is
 thrown if this transferType is not supported by this
 ColorModel.

Overrides:
getBlue in class ColorModel
Parameters:
inData - the array containing the pixel value
Returns:
the value of the blue component of the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if inData is not
         large enough to hold a pixel value for this color model
ClassCastException - if inData is not a
         primitive array of type transferType
UnsupportedOperationException - if this transferType
         is not supported by this color model


"
DirectColorModel,getBlueMask(),int,Returns the mask indicating which bits in an int pixel representation contain the blue color component.,"

getBlueMask
public final int getBlueMask()
Returns the mask indicating which bits in an int pixel
 representation contain the blue color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the blue color sample.


"
DirectColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public final int[] getComponents(int pixel,
                                 int[] components,
                                 int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.  The pixel value is specified as an
 int.  If the components array is
 null, a new array is allocated.  The
 components array is returned.  Color/alpha components are
 stored in the components array starting at
 offset, even if the array is allocated by this method.
 An ArrayIndexOutOfBoundsException is thrown if the
 components array is not null and is not large
 enough to hold all the color and alpha components, starting at
 offset.

Overrides:
getComponents in class ColorModel
Parameters:
pixel - the specified pixel
components - the array to receive the color and alpha
 components of the specified pixel
offset - the offset into the components array at
 which to start storing the color and alpha components
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.


"
DirectColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components given a pixel in this ColorModel.,"

getComponents
public final int[] getComponents(Object pixel,
                                 int[] components,
                                 int offset)
Returns an array of unnormalized color/alpha components given a pixel
 in this ColorModel.  The pixel value is specified by an
 array of data elements of type transferType passed in as
 an object reference.  If pixel is not a primitive array
 of type transferType, a ClassCastException
 is thrown.  An ArrayIndexOutOfBoundsException is
 thrown if pixel is not large enough to hold a
 pixel value for this ColorModel.  If the
 components array is null, a new
 array is allocated.  The components array is returned.
 Color/alpha components are stored in the components array
 starting at offset, even if the array is allocated by
 this method.  An ArrayIndexOutOfBoundsException
 is thrown if the components array is not
 null and is not large enough to hold all the color and
 alpha components, starting at offset.
 Since DirectColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an unsupported
 transferType.

Overrides:
getComponents in class ColorModel
Parameters:
pixel - the specified pixel
components - the array to receive the color and alpha
        components of the specified pixel
offset - the offset into the components array at
        which to start storing the color and alpha components
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.
Throws:
ClassCastException - if pixel
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  pixel is not large enough to hold a pixel value
  for this ColorModel, or if components
  is not null and is not large enough to hold all the
  color and alpha components, starting at offset
UnsupportedOperationException - if this
            transferType is not supported by this
            color model


"
DirectColorModel,"getDataElement(int[] components, int offset)",int,"Returns a pixel value represented as an int in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElement
public int getDataElement(int[] components,
                          int offset)
Returns a pixel value represented as an int in this
 ColorModel, given an array of unnormalized color/alpha
 components.   An ArrayIndexOutOfBoundsException is
 thrown if the components array is
 not large enough to hold all the color and alpha components, starting
 at offset.

Overrides:
getDataElement in class ColorModel
Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving the color and alpha components
Returns:
an int pixel value in this
 ColorModel corresponding to the specified components.
Throws:
ArrayIndexOutOfBoundsException - if
  the components array is not large enough to
  hold all of the color and alpha components starting at
  offset


"
DirectColorModel,"getDataElements(int[] components, int offset, Object obj)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an array of unnormalized color/alpha components.","

getDataElements
public Object getDataElements(int[] components,
                              int offset,
                              Object obj)
Returns a data element array representation of a pixel in this
 ColorModel, given an array of unnormalized color/alpha
 components.
 This array can then be passed to the setDataElements
 method of a WritableRaster object.
 An ArrayIndexOutOfBoundsException is thrown if the
 components array
 is not large enough to hold all the color and alpha components,
 starting at offset.  If the obj variable is
 null, a new array is allocated.  If obj is
 not null, it must be a primitive array
 of type transferType; otherwise, a
 ClassCastException is thrown.
 An ArrayIndexOutOfBoundsException is thrown if
 obj is not large enough to hold a pixel value for this
 ColorModel.
 Since DirectColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an unsupported
 transferType.

Overrides:
getDataElements in class ColorModel
Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving color and alpha components
obj - the Object representing an array of color
 and alpha components
Returns:
an Object representing an array of color and
 alpha components.
Throws:
ClassCastException - if obj
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  obj is not large enough to hold a pixel value
  for this ColorModel or the components
  array is not large enough to hold all of the color and alpha
  components starting at offset
UnsupportedOperationException - if this
            transferType is not supported by this
            color model
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
DirectColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model.","

getDataElements
public Object getDataElements(int rgb,
                              Object pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation in the
 default RGB color model.
 This array can then be passed to the setDataElements
 method of a WritableRaster object.  If the pixel variable
 is null, a new array is allocated.  If pixel
 is not null, it must be a primitive array of type
 transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is
 thrown if pixel is not large enough to hold a pixel
 value for this ColorModel.  The pixel array is returned.
 Since DirectColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an unsupported
 transferType.

Overrides:
getDataElements in class ColorModel
Parameters:
rgb - the integer pixel representation in the default RGB
            color model
pixel - the specified pixel
Returns:
an array representation of the specified pixel in this
         ColorModel
Throws:
ClassCastException - if pixel
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  pixel is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if this
  transferType is not supported by this
  ColorModel
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
DirectColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public final int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 as an int.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the green value
 is 0.

Specified by:
getGreen in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the green color component for the specified pixel, from
         0 to 255 in the sRGB ColorSpace.


"
DirectColorModel,getGreen(Object inData),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public int getGreen(Object inData)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 by an array of data elements of type transferType passed
 in as an object reference.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the green value
 is 0.  If inData is not a primitive array of type
 transferType, a ClassCastException is thrown.
  An ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.  Since
 DirectColorModel can be subclassed, subclasses inherit
 the implementation of this method and if they don't override it
 then they throw an exception if they use an unsupported
 transferType.
 An UnsupportedOperationException is
 thrown if this transferType is not supported by this
 ColorModel.

Overrides:
getGreen in class ColorModel
Parameters:
inData - the array containing the pixel value
Returns:
the value of the green component of the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if inData is not
         large enough to hold a pixel value for this color model
ClassCastException - if inData is not a
         primitive array of type transferType
UnsupportedOperationException - if this transferType
         is not supported by this color model


"
DirectColorModel,getGreenMask(),int,Returns the mask indicating which bits in an int pixel representation contain the green color component.,"

getGreenMask
public final int getGreenMask()
Returns the mask indicating which bits in an int pixel
 representation contain the green color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the green color sample.


"
DirectColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public final int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 as an int.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the red value
 is 0.

Specified by:
getRed in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the red color component for the specified pixel, from
         0 to 255 in the sRGB ColorSpace.


"
DirectColorModel,getRed(Object inData),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public int getRed(Object inData)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  A
 color conversion is done if necessary.  The pixel value is specified
 by an array of data elements of type transferType passed
 in as an object reference.
 The returned value is a non pre-multiplied value.  Thus, if the
 alpha is premultiplied, this method divides it out before returning
 the value.  If the alpha value is 0, for example, the red value
 is 0.
 If inData is not a primitive array of type
 transferType, a ClassCastException is
 thrown.  An ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a
 pixel value for this ColorModel.  Since
 DirectColorModel can be subclassed, subclasses inherit
 the implementation of this method and if they don't override it
 then they throw an exception if they use an unsupported
 transferType.
 An UnsupportedOperationException is thrown if this
 transferType is not supported by this
 ColorModel.

Overrides:
getRed in class ColorModel
Parameters:
inData - the array containing the pixel value
Returns:
the value of the red component of the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if inData is not
         large enough to hold a pixel value for this color model
ClassCastException - if inData is not a
         primitive array of type transferType
UnsupportedOperationException - if this transferType
         is not supported by this color model


"
DirectColorModel,getRedMask(),int,Returns the mask indicating which bits in an int pixel representation contain the red color component.,"

getRedMask
public final int getRedMask()
Returns the mask indicating which bits in an int pixel
 representation contain the red color component.

Returns:
the mask, which indicates which bits of the int
         pixel representation contain the red color sample.


"
DirectColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.,"

getRGB
public final int getRGB(int pixel)
Returns the color/alpha components of the pixel in the default
 RGB color model format.  A color conversion is done if necessary.
 The pixel value is specified as an int.
 The returned value is in a non pre-multiplied format.  Thus, if
 the alpha is premultiplied, this method divides it out of the
 color components.  If the alpha value is 0, for example, the color
 values are each 0.

Overrides:
getRGB in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the RGB value of the color/alpha components of the specified
         pixel.
See Also:
ColorModel.getRGBdefault()


"
DirectColorModel,getRGB(Object inData),int,Returns the color/alpha components for the specified pixel in the default RGB color model format.,"

getRGB
public int getRGB(Object inData)
Returns the color/alpha components for the specified pixel in the
 default RGB color model format.  A color conversion is done if
 necessary.  The pixel value is specified by an array of data
 elements of type transferType passed in as an object
 reference.  If inData is not a primitive array of type
 transferType, a ClassCastException is
 thrown.  An ArrayIndexOutOfBoundsException is
 thrown if inData is not large enough to hold a pixel
 value for this ColorModel.
 The returned value is in a non pre-multiplied format.  Thus, if
 the alpha is premultiplied, this method divides it out of the
 color components.  If the alpha value is 0, for example, the color
 values is 0.  Since DirectColorModel can be
 subclassed, subclasses inherit the implementation of this method
 and if they don't override it then
 they throw an exception if they use an unsupported
 transferType.

Overrides:
getRGB in class ColorModel
Parameters:
inData - the specified pixel
Returns:
the color and alpha components of the specified pixel.
Throws:
UnsupportedOperationException - if this
            transferType is not supported by this
            ColorModel
See Also:
ColorModel.getRGBdefault()


"
DirectColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel and false if it is not.,"

isCompatibleRaster
public boolean isCompatibleRaster(Raster raster)
Returns true if raster is compatible
 with this ColorModel and false if it is
 not.

Overrides:
isCompatibleRaster in class ColorModel
Parameters:
raster - the Raster object to test for compatibility
Returns:
true if raster is compatible
 with this ColorModel; false otherwise.


"
DirectColorModel,toString(),String,Returns a String that represents this DirectColorModel.,"

toString
public String toString()
Returns a String that represents this
 DirectColorModel.

Overrides:
toString in class ColorModel
Returns:
a String representing this
 DirectColorModel.


"
FilteredImageSource,addConsumer(ImageConsumer ic),void,Adds the specified ImageConsumer to the list of consumers interested in data for the filtered image.,"

addConsumer
public void addConsumer(ImageConsumer ic)
Adds the specified ImageConsumer
 to the list of consumers interested in data for the filtered image.
 An instance of the original ImageFilter
 is created
 (using the filter's getFilterInstance method)
 to manipulate the image data
 for the specified ImageConsumer.
 The newly created filter instance
 is then passed to the addConsumer method
 of the original ImageProducer.

 
 This method is public as a side effect
 of this class implementing
 the ImageProducer interface.
 It should not be called from user code,
 and its behavior if called from user code is unspecified.

Specified by:
addConsumer in interface ImageProducer
Parameters:
ic - the consumer for the filtered image
See Also:
ImageConsumer


"
FilteredImageSource,isConsumer(ImageConsumer ic),boolean,Determines whether an ImageConsumer is on the list of consumers currently interested in data for this image.,"

isConsumer
public boolean isConsumer(ImageConsumer ic)
Determines whether an ImageConsumer is on the list of consumers
 currently interested in data for this image.

 
 This method is public as a side effect
 of this class implementing
 the ImageProducer interface.
 It should not be called from user code,
 and its behavior if called from user code is unspecified.

Specified by:
isConsumer in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
Returns:
true if the ImageConsumer is on the list; false otherwise
See Also:
ImageConsumer


"
FilteredImageSource,removeConsumer(ImageConsumer ic),void,Removes an ImageConsumer from the list of consumers interested in data for this image.,"

removeConsumer
public void removeConsumer(ImageConsumer ic)
Removes an ImageConsumer from the list of consumers interested in
 data for this image.

 
 This method is public as a side effect
 of this class implementing
 the ImageProducer interface.
 It should not be called from user code,
 and its behavior if called from user code is unspecified.

Specified by:
removeConsumer in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
See Also:
ImageConsumer


"
FilteredImageSource,requestTopDownLeftRightResend(ImageConsumer ic),void,"Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order.","

requestTopDownLeftRightResend
public void requestTopDownLeftRightResend(ImageConsumer ic)
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.  The request is
 handed to the ImageFilter for further processing, since the
 ability to preserve the pixel ordering depends on the filter.

 
 This method is public as a side effect
 of this class implementing
 the ImageProducer interface.
 It should not be called from user code,
 and its behavior if called from user code is unspecified.

Specified by:
requestTopDownLeftRightResend in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
See Also:
ImageConsumer


"
FilteredImageSource,startProduction(ImageConsumer ic),void,Starts production of the filtered image.,"

startProduction
public void startProduction(ImageConsumer ic)
Starts production of the filtered image.
 If the specified ImageConsumer
 isn't already a consumer of the filtered image,
 an instance of the original ImageFilter
 is created
 (using the filter's getFilterInstance method)
 to manipulate the image data
 for the ImageConsumer.
 The filter instance for the ImageConsumer
 is then passed to the startProduction method
 of the original ImageProducer.

 
 This method is public as a side effect
 of this class implementing
 the ImageProducer interface.
 It should not be called from user code,
 and its behavior if called from user code is unspecified.

Specified by:
startProduction in interface ImageProducer
Parameters:
ic - the consumer for the filtered image
See Also:
ImageConsumer


"
ImageFilter,clone(),Object,Clones this object.,"

clone
public Object clone()
Clones this object.

Overrides:
clone in class Object
Returns:
a clone of this instance.
See Also:
Cloneable


"
ImageFilter,getFilterInstance(ImageConsumer ic),ImageFilter,Returns a unique instance of an ImageFilter object which will actually perform the filtering for the specified ImageConsumer.,"

getFilterInstance
public ImageFilter getFilterInstance(ImageConsumer ic)
Returns a unique instance of an ImageFilter object which will
 actually perform the filtering for the specified ImageConsumer.
 The default implementation just clones this object.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Parameters:
ic - the specified ImageConsumer
Returns:
an ImageFilter used to perform the
         filtering for the specified ImageConsumer.


"
ImageFilter,imageComplete(int status),void,Filters the information provided in the imageComplete method of the ImageConsumer interface.,"

imageComplete
public void imageComplete(int status)
Filters the information provided in the imageComplete method of
 the ImageConsumer interface.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
imageComplete in interface ImageConsumer
Parameters:
status - the status of image loading
See Also:
ImageConsumer.imageComplete(int)


"
ImageFilter,resendTopDownLeftRight(ImageProducer ip),void,Responds to a request for a TopDownLeftRight (TDLR) ordered resend of the pixel data from an ImageConsumer.,"

resendTopDownLeftRight
public void resendTopDownLeftRight(ImageProducer ip)
Responds to a request for a TopDownLeftRight (TDLR) ordered resend
 of the pixel data from an ImageConsumer.
 When an ImageConsumer being fed
 by an instance of this ImageFilter
 requests a resend of the data in TDLR order,
 the FilteredImageSource
 invokes this method of the ImageFilter.

 

 An ImageFilter subclass might override this method or not,
 depending on if and how it can send data in TDLR order.
 Three possibilities exist:

 

 Do not override this method.
 This makes the subclass use the default implementation,
 which is to
 forward the request
 to the indicated ImageProducer
 using this filter as the requesting ImageConsumer.
 This behavior
 is appropriate if the filter can determine
 that it will forward the pixels
 in TDLR order if its upstream producer object
 sends them in TDLR order.

 
 Override the method to simply send the data.
 This is appropriate if the filter can handle the request itself —
 for example,
 if the generated pixels have been saved in some sort of buffer.

 
 Override the method to do nothing.
 This is appropriate
 if the filter cannot produce filtered data in TDLR order.
 

Parameters:
ip - the ImageProducer that is feeding this instance of
 the filter - also the ImageProducer that the request should be
 forwarded to if necessary
Throws:
NullPointerException - if ip is null
See Also:
ImageProducer.requestTopDownLeftRightResend(java.awt.image.ImageConsumer)


"
ImageFilter,setColorModel(ColorModel model),void,Filter the information provided in the setColorModel method of the ImageConsumer interface.,"

setColorModel
public void setColorModel(ColorModel model)
Filter the information provided in the setColorModel method
 of the ImageConsumer interface.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setColorModel in interface ImageConsumer
Parameters:
model - the specified ColorModel
See Also:
ImageConsumer.setColorModel(java.awt.image.ColorModel)


"
ImageFilter,"setDimensions(int width, int height)",void,Filters the information provided in the setDimensions method of the ImageConsumer interface.,"

setDimensions
public void setDimensions(int width,
                          int height)
Filters the information provided in the setDimensions method
 of the ImageConsumer interface.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setDimensions in interface ImageConsumer
Parameters:
width - the width of the source image
height - the height of the source image
See Also:
ImageConsumer.setDimensions(int, int)


"
ImageFilter,setHints(int hints),void,Filters the information provided in the setHints method of the ImageConsumer interface.,"

setHints
public void setHints(int hints)
Filters the information provided in the setHints method
 of the ImageConsumer interface.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setHints in interface ImageConsumer
Parameters:
hints - a set of hints that the ImageConsumer uses to
        process the pixels
See Also:
ImageConsumer.setHints(int)


"
ImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of bytes.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
Filters the information provided in the setPixels method of the
 ImageConsumer interface which takes an array of bytes.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
ImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,Filters the information provided in the setPixels method of the ImageConsumer interface which takes an array of integers.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
Filters the information provided in the setPixels method of the
 ImageConsumer interface which takes an array of integers.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
ImageFilter,"setProperties(Hashtable<?,?> props)",void,Passes the properties from the source object along after adding a property indicating the stream of filters it has been run through.,"

setProperties
public void setProperties(Hashtable<?,?> props)
Passes the properties from the source object along after adding a
 property indicating the stream of filters it has been run through.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being filtered.  Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setProperties in interface ImageConsumer
Parameters:
props - the properties from the source object
Throws:
NullPointerException - if props is null


"
IndexColorModel,"convertToIntDiscrete(Raster raster, boolean forceARGB)",BufferedImage,Returns a new BufferedImage of TYPE_INT_ARGB or TYPE_INT_RGB that has a Raster with pixel data computed by expanding the indices in the source Raster using the color/alpha component arrays of this ColorModel.,"

convertToIntDiscrete
public BufferedImage convertToIntDiscrete(Raster raster,
                                          boolean forceARGB)
Returns a new BufferedImage of TYPE_INT_ARGB or
 TYPE_INT_RGB that has a Raster with pixel data
 computed by expanding the indices in the source Raster
 using the color/alpha component arrays of this ColorModel.
 Only the lower n bits of each index value in the source
 Raster, as specified in the
 class description above, are used to
 compute the color/alpha values in the returned image.
 If forceARGB is true, a TYPE_INT_ARGB image is
 returned regardless of whether or not this ColorModel
 has an alpha component array or a transparent pixel.

Parameters:
raster - the specified Raster
forceARGB - if true, the returned
     BufferedImage is TYPE_INT_ARGB; otherwise it is
     TYPE_INT_RGB
Returns:
a BufferedImage created with the specified
     Raster
Throws:
IllegalArgumentException - if the raster argument is not
           compatible with this IndexColorModel


"
IndexColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a SampleModel with the specified
 width and height that has a data layout compatible with
 this ColorModel.

Overrides:
createCompatibleSampleModel in class ColorModel
Parameters:
w - the width to apply to the new SampleModel
h - the height to apply to the new SampleModel
Returns:
a SampleModel object with the specified
 width and height.
Throws:
IllegalArgumentException - if w or
         h is not greater than 0
See Also:
SampleModel


"
IndexColorModel,"createCompatibleWritableRaster(int w, int h)",WritableRaster,Creates a WritableRaster with the specified width and height that has a data layout (SampleModel) compatible with this ColorModel.,"

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(int w,
                                                     int h)
Creates a WritableRaster with the specified width
 and height that has a data layout (SampleModel)
 compatible with this ColorModel.  This method
 only works for color models with 16 or fewer bits per pixel.
 
 Since IndexColorModel can be subclassed, any
 subclass that supports greater than 16 bits per pixel must
 override this method.

Overrides:
createCompatibleWritableRaster in class ColorModel
Parameters:
w - the width to apply to the new WritableRaster
h - the height to apply to the new WritableRaster
Returns:
a WritableRaster object with the specified
 width and height.
Throws:
UnsupportedOperationException - if the number of bits in a
         pixel is greater than 16
See Also:
WritableRaster, 
SampleModel


"
IndexColorModel,finalize(),void,Disposes of system resources associated with this ColorModel once this ColorModel is no longer referenced.,"

finalize
public void finalize()
Disposes of system resources associated with this
 ColorModel once this ColorModel is no
 longer referenced.

Overrides:
finalize in class ColorModel
See Also:
WeakReference, 
PhantomReference


"
IndexColorModel,getAlpha(int pixel),int,"Returns the alpha component for the specified pixel, scaled from 0 to 255.","

getAlpha
public final int getAlpha(int pixel)
Returns the alpha component for the specified pixel, scaled
 from 0 to 255.  The pixel value is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.

Specified by:
getAlpha in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the alpha component for the specified pixel


"
IndexColorModel,getAlphas(byte[] a),void,Copies the array of alpha transparency components into the specified array.,"

getAlphas
public final void getAlphas(byte[] a)
Copies the array of alpha transparency components into the
 specified array.  Only the initial entries of the array as specified
 by getMapSize are written.

Parameters:
a - the specified array into which the elements of the
      array of alpha components are copied


"
IndexColorModel,getBlue(int pixel),int,"Returns the blue color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getBlue
public final int getBlue(int pixel)
Returns the blue color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getBlue in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the blue color component for the specified pixel


"
IndexColorModel,getBlues(byte[] b),void,Copies the array of blue color components into the specified array.,"

getBlues
public final void getBlues(byte[] b)
Copies the array of blue color components into the specified array.
 Only the initial entries of the array as specified by
 getMapSize are written.

Parameters:
b - the specified array into which the elements of the
      array of blue color components are copied


"
IndexColorModel,"getComponents(int pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel.,"

getComponents
public int[] getComponents(int pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components for a
 specified pixel in this ColorModel.  The pixel value
 is specified as an int.  If the components array is null,
 a new array is allocated that contains
 offset + getNumComponents() elements.
 The components array is returned,
 with the alpha component included
 only if hasAlpha returns true.
 Color/alpha components are stored in the components array starting
 at offset even if the array is allocated by this method.
 An ArrayIndexOutOfBoundsException
 is thrown if  the components array is not null and is
 not large enough to hold all the color and alpha components
 starting at offset.

Overrides:
getComponents in class ColorModel
Parameters:
pixel - the specified pixel
components - the array to receive the color and alpha
 components of the specified pixel
offset - the offset into the components array at
 which to start storing the color and alpha components
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.
See Also:
ColorModel.hasAlpha(), 
ColorModel.getNumComponents()


"
IndexColorModel,"getComponents(Object pixel, int[] components, int offset)",int[],Returns an array of unnormalized color/alpha components for a specified pixel in this ColorModel.,"

getComponents
public int[] getComponents(Object pixel,
                           int[] components,
                           int offset)
Returns an array of unnormalized color/alpha components for
 a specified pixel in this ColorModel.  The pixel
 value is specified by an array of data elements of type
 transferType passed in as an object reference.
 If pixel is not a primitive array of type
 transferType, a ClassCastException
 is thrown.  An ArrayIndexOutOfBoundsException
 is thrown if pixel is not large enough to hold
 a pixel value for this ColorModel.  If the
 components array is null, a new array
 is allocated that contains
 offset + getNumComponents() elements.
 The components array is returned,
 with the alpha component included
 only if hasAlpha returns true.
 Color/alpha components are stored in the components
 array starting at offset even if the array is
 allocated by this method.  An
 ArrayIndexOutOfBoundsException is also
 thrown if  the components array is not
 null and is not large enough to hold all the color
 and alpha components starting at offset.
 
 Since IndexColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an
 unsupported transferType.

Overrides:
getComponents in class ColorModel
Parameters:
pixel - the specified pixel
components - an array that receives the color and alpha
 components of the specified pixel
offset - the index into the components array at
 which to begin storing the color and alpha components of the
 specified pixel
Returns:
an array containing the color and alpha components of the
 specified pixel starting at the specified offset.
Throws:
ArrayIndexOutOfBoundsException - if pixel
            is not large enough to hold a pixel value for this
            ColorModel or if the
            components array is not null
            and is not large enough to hold all the color
            and alpha components starting at offset
ClassCastException - if pixel is not a
            primitive array of type transferType
UnsupportedOperationException - if transferType
         is not one of the supported transfer types
See Also:
ColorModel.hasAlpha(), 
ColorModel.getNumComponents()


"
IndexColorModel,getComponentSize(),int[],Returns an array of the number of bits for each color/alpha component.,"

getComponentSize
public int[] getComponentSize()
Returns an array of the number of bits for each color/alpha component.
 The array contains the color components in the order red, green,
 blue, followed by the alpha component, if present.

Overrides:
getComponentSize in class ColorModel
Returns:
an array containing the number of bits of each color
         and alpha component of this IndexColorModel


"
IndexColorModel,"getDataElement(int[] components, int offset)",int,Returns a pixel value represented as an int in this ColorModel given an array of unnormalized color/alpha components.,"

getDataElement
public int getDataElement(int[] components,
                          int offset)
Returns a pixel value represented as an int in this
 ColorModel given an array of unnormalized
 color/alpha components.  An
 ArrayIndexOutOfBoundsException
 is thrown if the components array is not large
 enough to hold all of the color and alpha components starting
 at offset.  Since
 ColorModel can be subclassed, subclasses inherit the
 implementation of this method and if they don't override it then
 they throw an exception if they use an unsupported transferType.

Overrides:
getDataElement in class ColorModel
Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving the color and alpha components
Returns:
an int pixel value in this
 ColorModel corresponding to the specified components.
Throws:
ArrayIndexOutOfBoundsException - if
  the components array is not large enough to
  hold all of the color and alpha components starting at
  offset
UnsupportedOperationException - if transferType
         is invalid


"
IndexColorModel,"getDataElements(int[] components, int offset, Object pixel)",Object,Returns a data element array representation of a pixel in this ColorModel given an array of unnormalized color/alpha components.,"

getDataElements
public Object getDataElements(int[] components,
                              int offset,
                              Object pixel)
Returns a data element array representation of a pixel in this
 ColorModel given an array of unnormalized color/alpha
 components.  This array can then be passed to the
 setDataElements method of a WritableRaster
 object.  An ArrayIndexOutOfBoundsException is
 thrown if the
 components array is not large enough to hold all of the
 color and alpha components starting at offset.
 If the pixel variable is null, a new array
 is allocated.  If pixel is not null,
 it must be a primitive array of type transferType;
 otherwise, a ClassCastException is thrown.
 An ArrayIndexOutOfBoundsException is thrown if pixel
 is not large enough to hold a pixel value for this
 ColorModel.
 
 Since IndexColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an
 unsupported transferType

Overrides:
getDataElements in class ColorModel
Parameters:
components - an array of unnormalized color and alpha
 components
offset - the index into components at which to
 begin retrieving color and alpha components
pixel - the Object representing an array of color
 and alpha components
Returns:
an Object representing an array of color and
 alpha components.
Throws:
ClassCastException - if pixel
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  pixel is not large enough to hold a pixel value
  for this ColorModel or the components
  array is not large enough to hold all of the color and alpha
  components starting at offset
UnsupportedOperationException - if transferType
         is not one of the supported transfer types
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
IndexColorModel,"getDataElements(int rgb, Object pixel)",Object,"Returns a data element array representation of a pixel in this ColorModel, given an integer pixel representation in the default RGB color model.","

getDataElements
public Object getDataElements(int rgb,
                              Object pixel)
Returns a data element array representation of a pixel in this
 ColorModel, given an integer pixel representation in the
 default RGB color model.  This array can then be passed to the
 setDataElements
 method of a WritableRaster object.  If the pixel variable is
 null, a new array is allocated.  If pixel
 is not null, it must be
 a primitive array of type transferType; otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is
 thrown if pixel is not large enough to hold a pixel
 value for this ColorModel.  The pixel array is returned.
 
 Since IndexColorModel can be subclassed, subclasses
 inherit the implementation of this method and if they don't
 override it then they throw an exception if they use an
 unsupported transferType.

Overrides:
getDataElements in class ColorModel
Parameters:
rgb - the integer pixel representation in the default RGB
 color model
pixel - the specified pixel
Returns:
an array representation of the specified pixel in this
  IndexColorModel.
Throws:
ClassCastException - if pixel
  is not a primitive array of type transferType
ArrayIndexOutOfBoundsException - if
  pixel is not large enough to hold a pixel value
  for this ColorModel
UnsupportedOperationException - if transferType
         is invalid
See Also:
WritableRaster.setDataElements(int, int, java.lang.Object), 
SampleModel.setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)


"
IndexColorModel,getGreen(int pixel),int,"Returns the green color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getGreen
public final int getGreen(int pixel)
Returns the green color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getGreen in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the green color component for the specified pixel


"
IndexColorModel,getGreens(byte[] g),void,Copies the array of green color components into the specified array.,"

getGreens
public final void getGreens(byte[] g)
Copies the array of green color components into the specified array.
 Only the initial entries of the array as specified by
 getMapSize are written.

Parameters:
g - the specified array into which the elements of the
      array of green color components are copied


"
IndexColorModel,getMapSize(),int,Returns the size of the color/alpha component arrays in this IndexColorModel.,"

getMapSize
public final int getMapSize()
Returns the size of the color/alpha component arrays in this
 IndexColorModel.

Returns:
the size of the color and alpha component arrays.


"
IndexColorModel,getRed(int pixel),int,"Returns the red color component for the specified pixel, scaled from 0 to 255 in the default RGB ColorSpace, sRGB.","

getRed
public final int getRed(int pixel)
Returns the red color component for the specified pixel, scaled
 from 0 to 255 in the default RGB ColorSpace, sRGB.  The pixel value
 is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is a non pre-multiplied value.

Specified by:
getRed in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the value of the red color component for the specified pixel


"
IndexColorModel,getReds(byte[] r),void,Copies the array of red color components into the specified array.,"

getReds
public final void getReds(byte[] r)
Copies the array of red color components into the specified array.
 Only the initial entries of the array as specified by
 getMapSize are written.

Parameters:
r - the specified array into which the elements of the
      array of red color components are copied


"
IndexColorModel,getRGB(int pixel),int,Returns the color/alpha components of the pixel in the default RGB color model format.,"

getRGB
public final int getRGB(int pixel)
Returns the color/alpha components of the pixel in the default
 RGB color model format.  The pixel value is specified as an int.
 Only the lower n bits of the pixel value, as specified in the
 class description above, are used to
 calculate the returned value.
 The returned value is in a non pre-multiplied format.

Overrides:
getRGB in class ColorModel
Parameters:
pixel - the specified pixel
Returns:
the color and alpha components of the specified pixel
See Also:
ColorModel.getRGBdefault()


"
IndexColorModel,getRGBs(int[] rgb),void,Converts data for each index from the color and alpha component arrays to an int in the default RGB ColorModel format and copies the resulting 32-bit ARGB values into the specified array.,"

getRGBs
public final void getRGBs(int[] rgb)
Converts data for each index from the color and alpha component
 arrays to an int in the default RGB ColorModel format and copies
 the resulting 32-bit ARGB values into the specified array.  Only
 the initial entries of the array as specified by
 getMapSize are
 written.

Parameters:
rgb - the specified array into which the converted ARGB
        values from this array of color and alpha components
        are copied.


"
IndexColorModel,getTransparency(),int,Returns the transparency.,"

getTransparency
public int getTransparency()
Returns the transparency.  Returns either OPAQUE, BITMASK,
 or TRANSLUCENT

Specified by:
getTransparency in interface Transparency
Overrides:
getTransparency in class ColorModel
Returns:
the transparency of this IndexColorModel
See Also:
Transparency.OPAQUE, 
Transparency.BITMASK, 
Transparency.TRANSLUCENT


"
IndexColorModel,getTransparentPixel(),int,Returns the index of a transparent pixel in this IndexColorModel or -1 if there is no pixel with an alpha value of 0.,"

getTransparentPixel
public final int getTransparentPixel()
Returns the index of a transparent pixel in this
 IndexColorModel or -1 if there is no pixel
 with an alpha value of 0.  If a transparent pixel was
 explicitly specified in one of the constructors by its
 index, then that index will be preferred, otherwise,
 the index of any pixel which happens to be fully transparent
 may be returned.

Returns:
the index of a transparent pixel in this
         IndexColorModel object, or -1 if there
         is no such pixel


"
IndexColorModel,getValidPixels(),BigInteger,Returns a BigInteger that indicates the valid/invalid pixels in the colormap.,"

getValidPixels
public BigInteger getValidPixels()
Returns a BigInteger that indicates the valid/invalid
 pixels in the colormap.  A bit is valid if the
 BigInteger value at that index is set, and is invalid
 if the BigInteger value at that index is not set.
 The only valid ranges to query in the BigInteger are
 between 0 and the map size.

Returns:
a BigInteger indicating the valid/invalid pixels.
Since:
1.3


"
IndexColorModel,isCompatibleRaster(Raster raster),boolean,Returns true if raster is compatible with this ColorModel or false if it is not compatible with this ColorModel.,"

isCompatibleRaster
public boolean isCompatibleRaster(Raster raster)
Returns true if raster is compatible
 with this ColorModel or false if it
 is not compatible with this ColorModel.

Overrides:
isCompatibleRaster in class ColorModel
Parameters:
raster - the Raster object to test for compatibility
Returns:
true if raster is compatible
 with this ColorModel; false otherwise.


"
IndexColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the specified SampleModel is compatible with this ColorModel.,"

isCompatibleSampleModel
public boolean isCompatibleSampleModel(SampleModel sm)
Checks if the specified SampleModel is compatible
 with this ColorModel.  If sm is
 null, this method returns false.

Overrides:
isCompatibleSampleModel in class ColorModel
Parameters:
sm - the specified SampleModel,
           or null
Returns:
true if the specified SampleModel
 is compatible with this ColorModel; false
 otherwise.
See Also:
SampleModel


"
IndexColorModel,isValid(),boolean,Returns whether or not all of the pixels are valid.,"

isValid
public boolean isValid()
Returns whether or not all of the pixels are valid.

Returns:
true if all pixels are valid;
 false otherwise.
Since:
1.3


"
IndexColorModel,isValid(int pixel),boolean,Returns whether or not the pixel is valid.,"

isValid
public boolean isValid(int pixel)
Returns whether or not the pixel is valid.

Parameters:
pixel - the specified pixel value
Returns:
true if pixel
 is valid; false otherwise.
Since:
1.3


"
IndexColorModel,toString(),String,Returns the String representation of the contents of this ColorModelobject.,"

toString
public String toString()
Returns the String representation of the contents of
 this ColorModelobject.

Overrides:
toString in class ColorModel
Returns:
a String representing the contents of this
 ColorModel object.


"
Kernel,clone(),Object,Clones this object.,"

clone
public Object clone()
Clones this object.

Overrides:
clone in class Object
Returns:
a clone of this object.
See Also:
Cloneable


"
Kernel,getHeight(),int,Returns the height of this Kernel.,"

getHeight
public final int getHeight()
Returns the height of this Kernel.

Returns:
the height of this Kernel.


"
Kernel,getKernelData(float[] data),float[],Returns the kernel data in row major order.,"

getKernelData
public final float[] getKernelData(float[] data)
Returns the kernel data in row major order.
 The data array is returned.  If data
 is null, a new array is allocated.

Parameters:
data - if non-null, contains the returned kernel data
Returns:
the data array containing the kernel data
         in row major order or, if data is
         null, a newly allocated array containing
         the kernel data in row major order
Throws:
IllegalArgumentException - if data is less
         than the size of this Kernel


"
Kernel,getWidth(),int,Returns the width of this Kernel.,"

getWidth
public final int getWidth()
Returns the width of this Kernel.

Returns:
the width of this Kernel.


"
Kernel,getXOrigin(),int,Returns the X origin of this Kernel.,"

getXOrigin
public final int getXOrigin()
Returns the X origin of this Kernel.

Returns:
the X origin.


"
Kernel,getYOrigin(),int,Returns the Y origin of this Kernel.,"

getYOrigin
public final int getYOrigin()
Returns the Y origin of this Kernel.

Returns:
the Y origin.


"
LookupOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.,"

createCompatibleDestImage
public BufferedImage createCompatibleDestImage(BufferedImage src,
                                               ColorModel destCM)
Creates a zeroed destination image with the correct size and number of
 bands.  If destCM is null, an appropriate
 ColorModel will be used.

Specified by:
createCompatibleDestImage in interface BufferedImageOp
Parameters:
src - Source image for the filter operation.
destCM - the destination's ColorModel, which
                  can be null.
Returns:
a filtered destination BufferedImage.


"
LookupOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed-destination Raster with the correct size and number of bands, given this source.","

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed-destination Raster with the
 correct size and number of bands, given this source.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - the Raster to be transformed
Returns:
the zeroed-destination Raster.


"
LookupOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Performs a lookup operation on a BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Performs a lookup operation on a BufferedImage.
 If the color model in the source image is not the same as that
 in the destination image, the pixels will be converted
 in the destination.  If the destination image is null,
 a BufferedImage will be created with an appropriate
 ColorModel.  An IllegalArgumentException
 might be thrown if the number of arrays in the
 LookupTable does not meet the restrictions
 stated in the class comment above, or if the source image
 has an IndexColorModel.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the BufferedImage to be filtered
dst - the BufferedImage in which to
            store the results of the filter operation
Returns:
the filtered BufferedImage.
Throws:
IllegalArgumentException - if the number of arrays in the
         LookupTable does not meet the restrictions
         described in the class comments, or if the source image
         has an IndexColorModel.


"
LookupOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Performs a lookup operation on a Raster.,"

filter
public final WritableRaster filter(Raster src,
                                   WritableRaster dst)
Performs a lookup operation on a Raster.
 If the destination Raster is null,
 a new Raster will be created.
 The IllegalArgumentException might be thrown
 if the source Raster and the destination
 Raster do not have the same
 number of bands or if the number of arrays in the
 LookupTable does not meet the
 restrictions stated in the class comment above.

Specified by:
filter in interface RasterOp
Parameters:
src - the source Raster to filter
dst - the destination WritableRaster for the
            filtered src
Returns:
the filtered WritableRaster.
Throws:
IllegalArgumentException - if the source and destinations
         rasters do not have the same number of bands, or the
         number of arrays in the LookupTable does
         not meet the restrictions described in the class comments.


"
LookupOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the filtered destination image.,"

getBounds2D
public final Rectangle2D getBounds2D(BufferedImage src)
Returns the bounding box of the filtered destination image.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface BufferedImageOp
Parameters:
src - the BufferedImage to be filtered
Returns:
the bounds of the filtered definition image.


"
LookupOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the filtered destination Raster.,"

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the filtered destination Raster.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - the Raster to be filtered
Returns:
the bounds of the filtered definition Raster.


"
LookupOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the destination point given a
 point in the source.  If dstPt is not
 null, it will be used to hold the return value.
 Since this is not a geometric operation, the srcPt
 will equal the dstPt.

Specified by:
getPoint2D in interface BufferedImageOp
Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - a Point2D that represents a point
        in the source image
dstPt - a Point2Dthat represents the location
        in the destination
Returns:
the Point2D in the destination that
         corresponds to the specified point in the source.


"
LookupOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints for this op.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
the RenderingHints object associated
         with this op.


"
LookupOp,getTable(),LookupTable,Returns the LookupTable.,"

getTable
public final LookupTable getTable()
Returns the LookupTable.

Returns:
the LookupTable of this
         LookupOp.


"
LookupTable,getNumComponents(),int,Returns the number of components in the lookup table.,"

getNumComponents
public int getNumComponents()
Returns the number of components in the lookup table.

Returns:
the number of components in this LookupTable.


"
LookupTable,getOffset(),int,Returns the offset.,"

getOffset
public int getOffset()
Returns the offset.

Returns:
the offset of this LookupTable.


"
LookupTable,"lookupPixel(int[] src, int[] dest)",abstract int[],Returns an int array of components for one pixel.,"

lookupPixel
public abstract int[] lookupPixel(int[] src,
                                  int[] dest)
Returns an int array of components for
 one pixel.  The dest array contains the
 result of the lookup and is returned.  If dest is
 null, a new array is allocated.  The
 source and destination can be equal.

Parameters:
src - the source array of components of one pixel
dest - the destination array of components for one pixel,
        translated with this LookupTable
Returns:
an int array of components for one
         pixel.


"
MemoryImageSource,addConsumer(ImageConsumer ic),void,Adds an ImageConsumer to the list of consumers interested in data for this image.,"

addConsumer
public void addConsumer(ImageConsumer ic)
Adds an ImageConsumer to the list of consumers interested in
 data for this image.

Specified by:
addConsumer in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
Throws:
NullPointerException - if the specified
           ImageConsumer is null
See Also:
ImageConsumer


"
MemoryImageSource,isConsumer(ImageConsumer ic),boolean,Determines if an ImageConsumer is on the list of consumers currently interested in data for this image.,"

isConsumer
public boolean isConsumer(ImageConsumer ic)
Determines if an ImageConsumer is on the list of consumers currently
 interested in data for this image.

Specified by:
isConsumer in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
Returns:
true if the ImageConsumer
 is on the list; false otherwise.
See Also:
ImageConsumer


"
MemoryImageSource,newPixels(),void,Sends a whole new buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete.,"

newPixels
public void newPixels()
Sends a whole new buffer of pixels to any ImageConsumers that
 are currently interested in the data for this image and notify
 them that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.

See Also:
newPixels(int, int, int, int, boolean), 
ImageConsumer, 
setAnimated(boolean)


"
MemoryImageSource,"newPixels(byte[] newpix, ColorModel newmodel, int offset, int scansize)",void,Changes to a new byte array to hold the pixels for this image.,"

newPixels
public void newPixels(byte[] newpix,
                      ColorModel newmodel,
                      int offset,
                      int scansize)
Changes to a new byte array to hold the pixels for this image.
 If the animation flag has been turned on through the setAnimated()
 method, then the new pixels will be immediately delivered to any
 ImageConsumers that are currently interested in the data for
 this image.

Parameters:
newpix - the new pixel array
newmodel - the specified ColorModel
offset - the offset into the array
scansize - the distance from one row of pixels to the next in
 the array
See Also:
newPixels(int, int, int, int, boolean), 
setAnimated(boolean)


"
MemoryImageSource,"newPixels(int[] newpix, ColorModel newmodel, int offset, int scansize)",void,Changes to a new int array to hold the pixels for this image.,"

newPixels
public void newPixels(int[] newpix,
                      ColorModel newmodel,
                      int offset,
                      int scansize)
Changes to a new int array to hold the pixels for this image.
 If the animation flag has been turned on through the setAnimated()
 method, then the new pixels will be immediately delivered to any
 ImageConsumers that are currently interested in the data for
 this image.

Parameters:
newpix - the new pixel array
newmodel - the specified ColorModel
offset - the offset into the array
scansize - the distance from one row of pixels to the next in
 the array
See Also:
newPixels(int, int, int, int, boolean), 
setAnimated(boolean)


"
MemoryImageSource,"newPixels(int x, int y, int w, int h)",void,Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image and notify them that an animation frame is complete.,"

newPixels
public void newPixels(int x,
                      int y,
                      int w,
                      int h)
Sends a rectangular region of the buffer of pixels to any
 ImageConsumers that are currently interested in the data for
 this image and notify them that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.
 If the full buffer update flag was turned on with the
 setFullBufferUpdates() method then the rectangle parameters
 will be ignored and the entire buffer will always be sent.

Parameters:
x - the x coordinate of the upper left corner of the rectangle
 of pixels to be sent
y - the y coordinate of the upper left corner of the rectangle
 of pixels to be sent
w - the width of the rectangle of pixels to be sent
h - the height of the rectangle of pixels to be sent
See Also:
newPixels(int, int, int, int, boolean), 
ImageConsumer, 
setAnimated(boolean), 
setFullBufferUpdates(boolean)


"
MemoryImageSource,"newPixels(int x, int y, int w, int h, boolean framenotify)",void,Sends a rectangular region of the buffer of pixels to any ImageConsumers that are currently interested in the data for this image.,"

newPixels
public void newPixels(int x,
                      int y,
                      int w,
                      int h,
                      boolean framenotify)
Sends a rectangular region of the buffer of pixels to any
 ImageConsumers that are currently interested in the data for
 this image.
 If the framenotify parameter is true then the consumers are
 also notified that an animation frame is complete.
 This method only has effect if the animation flag has been
 turned on through the setAnimated() method.
 If the full buffer update flag was turned on with the
 setFullBufferUpdates() method then the rectangle parameters
 will be ignored and the entire buffer will always be sent.

Parameters:
x - the x coordinate of the upper left corner of the rectangle
 of pixels to be sent
y - the y coordinate of the upper left corner of the rectangle
 of pixels to be sent
w - the width of the rectangle of pixels to be sent
h - the height of the rectangle of pixels to be sent
framenotify - true if the consumers should be sent a
 SINGLEFRAMEDONE notification
See Also:
ImageConsumer, 
setAnimated(boolean), 
setFullBufferUpdates(boolean)


"
MemoryImageSource,removeConsumer(ImageConsumer ic),void,Removes an ImageConsumer from the list of consumers interested in data for this image.,"

removeConsumer
public void removeConsumer(ImageConsumer ic)
Removes an ImageConsumer from the list of consumers interested in
 data for this image.

Specified by:
removeConsumer in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
See Also:
ImageConsumer


"
MemoryImageSource,requestTopDownLeftRightResend(ImageConsumer ic),void,"Requests that a given ImageConsumer have the image data delivered one more time in top-down, left-right order.","

requestTopDownLeftRightResend
public void requestTopDownLeftRightResend(ImageConsumer ic)
Requests that a given ImageConsumer have the image data delivered
 one more time in top-down, left-right order.

Specified by:
requestTopDownLeftRightResend in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
See Also:
ImageConsumer


"
MemoryImageSource,setAnimated(boolean animated),void,Changes this memory image into a multi-frame animation or a single-frame static image depending on the animated parameter.,"

setAnimated
public void setAnimated(boolean animated)
Changes this memory image into a multi-frame animation or a
 single-frame static image depending on the animated parameter.
 This method should be called immediately after the
 MemoryImageSource is constructed and before an image is
 created with it to ensure that all ImageConsumers will
 receive the correct multi-frame data.  If an ImageConsumer
 is added to this ImageProducer before this flag is set then
 that ImageConsumer will see only a snapshot of the pixel
 data that was available when it connected.

Parameters:
animated - true if the image is a
       multi-frame animation


"
MemoryImageSource,setFullBufferUpdates(boolean fullbuffers),void,Specifies whether this animated memory image should always be updated by sending the complete buffer of pixels whenever there is a change.,"

setFullBufferUpdates
public void setFullBufferUpdates(boolean fullbuffers)
Specifies whether this animated memory image should always be
 updated by sending the complete buffer of pixels whenever
 there is a change.
 This flag is ignored if the animation flag is not turned on
 through the setAnimated() method.
 This method should be called immediately after the
 MemoryImageSource is constructed and before an image is
 created with it to ensure that all ImageConsumers will
 receive the correct pixel delivery hints.

Parameters:
fullbuffers - true if the complete pixel
             buffer should always
 be sent
See Also:
setAnimated(boolean)


"
MemoryImageSource,startProduction(ImageConsumer ic),void,Adds an ImageConsumer to the list of consumers interested in data for this image and immediately starts delivery of the image data through the ImageConsumer interface.,"

startProduction
public void startProduction(ImageConsumer ic)
Adds an ImageConsumer to the list of consumers interested in
 data for this image and immediately starts delivery of the
 image data through the ImageConsumer interface.

Specified by:
startProduction in interface ImageProducer
Parameters:
ic - the specified ImageConsumer
 image data through the ImageConsumer interface.
See Also:
ImageConsumer


"
MultiPixelPackedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new MultiPixelPackedSampleModel with the specified width and height.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a new MultiPixelPackedSampleModel with the
 specified width and height.  The new
 MultiPixelPackedSampleModel has the
 same storage data type and number of bits per pixel as this
 MultiPixelPackedSampleModel.

Specified by:
createCompatibleSampleModel in class SampleModel
Parameters:
w - the specified width
h - the specified height
Returns:
a SampleModel with the specified width and height
 and with the same storage data type and number of bits per pixel
 as this MultiPixelPackedSampleModel.
Throws:
IllegalArgumentException - if w or
         h is not greater than 0


"
MultiPixelPackedSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this MultiPixelPackedSampleModel.,"

createDataBuffer
public DataBuffer createDataBuffer()
Creates a DataBuffer that corresponds to this
 MultiPixelPackedSampleModel.  The
 DataBuffer object's data type and size
 is consistent with this MultiPixelPackedSampleModel.
 The DataBuffer has a single bank.

Specified by:
createDataBuffer in class SampleModel
Returns:
a DataBuffer with the same data type and
 size as this MultiPixelPackedSampleModel.


"
MultiPixelPackedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new MultiPixelPackedSampleModel with a subset of the bands of this MultiPixelPackedSampleModel.,"

createSubsetSampleModel
public SampleModel createSubsetSampleModel(int[] bands)
Creates a new MultiPixelPackedSampleModel with a
 subset of the bands of this
 MultiPixelPackedSampleModel.  Since a
 MultiPixelPackedSampleModel only has one band, the
 bands argument must have a length of one and indicate the zeroth
 band.

Specified by:
createSubsetSampleModel in class SampleModel
Parameters:
bands - the specified bands
Returns:
a new SampleModel with a subset of bands of
 this MultiPixelPackedSampleModel.
Throws:
RasterFormatException - if the number of bands requested
 is not one.
IllegalArgumentException - if w or
         h is not greater than 0


"
MultiPixelPackedSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
MultiPixelPackedSampleModel,getBitOffset(int x),int,"Returns the offset, in bits, into the data element in which it is stored for the xth pixel of a scanline.","

getBitOffset
public int getBitOffset(int x)
Returns the offset, in bits, into the data element in which it is
  stored for the xth pixel of a scanline.
  This offset is the same for all scanlines.

Parameters:
x - the specified pixel
Returns:
the bit offset of the specified pixel.


"
MultiPixelPackedSampleModel,getDataBitOffset(),int,Returns the data bit offset in bits.,"

getDataBitOffset
public int getDataBitOffset()
Returns the data bit offset in bits.

Returns:
the dataBitOffset of this
 MultiPixelPackedSampleModel.


"
MultiPixelPackedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              Object obj,
                              DataBuffer data)
Returns data for a single pixel in a primitive array of type
 TransferType.  For a MultiPixelPackedSampleModel,
 the array has one element, and the type is the smallest of
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
 that can hold a single pixel.  Generally, obj
 should be passed in as null, so that the
 Object is created automatically and is the
 correct primitive data type.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is
 described by MultiPixelPackedSampleModel
mppsm1, to DataBuffer db2,
 whose storage layout is described by
 MultiPixelPackedSampleModel mppsm2.
 The transfer is generally more efficient than using
 getPixel or setPixel.
 
       MultiPixelPackedSampleModel mppsm1, mppsm2;
       DataBufferInt db1, db2;
       mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                              db1), db2);
 
 Using getDataElements or setDataElements
 to transfer between two DataBuffer/SampleModel pairs
 is legitimate if the SampleModels have the same number
 of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is not null, it should be a
 primitive array of type TransferType.  Otherwise, a
 ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if the
 coordinates are not in bounds, or if obj is not
 null and is not large enough to hold the pixel data.

Specified by:
getDataElements in class SampleModel
Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
obj - a primitive array in which to return the pixel data or
          null.
data - the DataBuffer containing the image data.
Returns:
an Object containing data for the specified
  pixel.
Throws:
ClassCastException - if obj is not a
  primitive array of type TransferType or is not null
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is not null or
 not large enough to hold the pixel data
See Also:
setDataElements(int, int, Object, DataBuffer)


"
MultiPixelPackedSampleModel,getNumDataElements(),int,"Returns the number of data elements needed to transfer one pixel via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) methods.","

getNumDataElements
public int getNumDataElements()
Returns the number of data elements needed to transfer one pixel
 via the getDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer) and setDataElements(int, int, java.lang.Object, java.awt.image.DataBuffer)
 methods.  For a MultiPixelPackedSampleModel, this is
 one.

Specified by:
getNumDataElements in class SampleModel
Returns:
the number of data elements.
See Also:
SampleModel.getDataElements(int, int, Object, DataBuffer), 
SampleModel.getDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.getTransferType()


"
MultiPixelPackedSampleModel,"getOffset(int x, int y)",int,"Returns the offset of pixel (x, y) in data array elements.","

getOffset
public int getOffset(int x,
                     int y)
Returns the offset of pixel (x, y) in data array elements.

Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
Returns:
the offset of the specified pixel.


"
MultiPixelPackedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns the specified single band pixel in the first element of an int array.,"

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray,
                      DataBuffer data)
Returns the specified single band pixel in the first element
 of an int array.
 ArrayIndexOutOfBoundsException is thrown if the
 coordinates are not in bounds.

Overrides:
getPixel in class SampleModel
Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
iArray - the array containing the pixel to be returned or
  null
data - the DataBuffer where image data is stored
Returns:
an array containing the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates
  are not in bounds
See Also:
setPixel(int, int, int[], DataBuffer)


"
MultiPixelPackedSampleModel,getPixelBitStride(),int,Returns the pixel bit stride in bits.,"

getPixelBitStride
public int getPixelBitStride()
Returns the pixel bit stride in bits.  This value is the same as
 the number of bits per pixel.

Returns:
the pixelBitStride of this
 MultiPixelPackedSampleModel.


"
MultiPixelPackedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x, y).","

getSample
public int getSample(int x,
                     int y,
                     int b,
                     DataBuffer data)
Returns as int the sample in a specified band for the
 pixel located at (x, y).  An
 ArrayIndexOutOfBoundsException is thrown if the
 coordinates are not in bounds.

Specified by:
getSample in class SampleModel
Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
b - the band to return, which is assumed to be 0
data - the DataBuffer containing the image
                  data
Returns:
the specified band containing the sample of the specified
 pixel.
Throws:
ArrayIndexOutOfBoundsException - if the specified
          coordinates are not in bounds.
See Also:
setSample(int, int, int, int, DataBuffer)


"
MultiPixelPackedSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.,"

getSampleSize
public int[] getSampleSize()
Returns the number of bits per sample for all bands.

Specified by:
getSampleSize in class SampleModel
Returns:
the number of bits per sample.


"
MultiPixelPackedSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.,"

getSampleSize
public int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the number of bits per sample for the specified band.


"
MultiPixelPackedSampleModel,getScanlineStride(),int,Returns the scanline stride.,"

getScanlineStride
public int getScanlineStride()
Returns the scanline stride.

Returns:
the scanline stride of this
 MultiPixelPackedSampleModel.


"
MultiPixelPackedSampleModel,getTransferType(),int,Returns the TransferType used to transfer pixels by way of the getDataElements and setDataElements methods.,"

getTransferType
public int getTransferType()
Returns the TransferType used to transfer pixels by way of the
  getDataElements and setDataElements
  methods. The TransferType might or might not be the same as the
  storage DataType.  The TransferType is one of
  DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
  or DataBuffer.TYPE_INT.

Overrides:
getTransferType in class SampleModel
Returns:
the transfertype.
See Also:
SampleModel.getDataElements(int, int, Object, DataBuffer), 
SampleModel.getDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.getNumDataElements(), 
DataBuffer


"
MultiPixelPackedSampleModel,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
MultiPixelPackedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Object obj,
                            DataBuffer data)
Sets the data for a single pixel in the specified
 DataBuffer from a primitive array of type
 TransferType.  For a MultiPixelPackedSampleModel,
 only the first element of the array holds valid data,
 and the type must be the smallest of
 DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT
 that can hold a single pixel.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is
 described by MultiPixelPackedSampleModel
mppsm1, to DataBuffer db2,
 whose storage layout is described by
 MultiPixelPackedSampleModel mppsm2.
 The transfer is generally more efficient than using
 getPixel or setPixel.
 
       MultiPixelPackedSampleModel mppsm1, mppsm2;
       DataBufferInt db1, db2;
       mppsm2.setDataElements(x, y, mppsm1.getDataElements(x, y, null,
                              db1), db2);
 
 Using getDataElements or setDataElements to
 transfer between two DataBuffer/SampleModel pairs is
 legitimate if the SampleModel objects have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
obj must be a primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException is thrown if the
 coordinates are not in bounds, or if obj is not large
 enough to hold the pixel data.

Specified by:
setDataElements in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
obj - a primitive array containing pixel data
data - the DataBuffer containing the image data
See Also:
getDataElements(int, int, Object, DataBuffer)


"
MultiPixelPackedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using an
 int array for input.
 ArrayIndexOutOfBoundsException is thrown if
 the coordinates are not in bounds.

Overrides:
setPixel in class SampleModel
Parameters:
x - the X coordinate of the pixel location
y - the Y coordinate of the pixel location
iArray - the input pixel in an int array
data - the DataBuffer containing the image data
See Also:
getPixel(int, int, int[], DataBuffer)


"
MultiPixelPackedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x, y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at
 (x, y) in the DataBuffer using an
 int for input.
 An ArrayIndexOutOfBoundsException is thrown if the
 coordinates are not in bounds.

Specified by:
setSample in class SampleModel
Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
b - the band to return, which is assumed to be 0
s - the input sample as an int
data - the DataBuffer where image data is stored
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds.
See Also:
getSample(int, int, int, DataBuffer)


"
PackedColorModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a SampleModel with the specified width and height that has a data layout compatible with this ColorModel.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a SampleModel with the specified width and
 height that has a data layout compatible with this
 ColorModel.

Overrides:
createCompatibleSampleModel in class ColorModel
Parameters:
w - the width (in pixels) of the region of the image data
          described
h - the height (in pixels) of the region of the image data
          described
Returns:
the newly created SampleModel.
Throws:
IllegalArgumentException - if w or
         h is not greater than 0
See Also:
SampleModel


"
PackedColorModel,equals(Object obj),boolean,Tests if the specified Object is an instance of PackedColorModel and equals this PackedColorModel.,"

equals
public boolean equals(Object obj)
Tests if the specified Object is an instance
 of PackedColorModel and equals this
 PackedColorModel.

Overrides:
equals in class ColorModel
Parameters:
obj - the Object to test for equality
Returns:
true if the specified Object
 is an instance of PackedColorModel and equals this
 PackedColorModel; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
PackedColorModel,getAlphaRaster(WritableRaster raster),WritableRaster,"Returns a WritableRaster representing the alpha channel of an image, extracted from the input WritableRaster.","

getAlphaRaster
public WritableRaster getAlphaRaster(WritableRaster raster)
Returns a WritableRaster representing the alpha channel of
 an image, extracted from the input WritableRaster.
 This method assumes that WritableRaster objects
 associated with this ColorModel store the alpha band,
 if present, as the last band of image data.  Returns null
 if there is no separate spatial alpha channel associated with this
 ColorModel.  This method creates a new
 WritableRaster, but shares the data array.

Overrides:
getAlphaRaster in class ColorModel
Parameters:
raster - a WritableRaster containing an image
Returns:
a WritableRaster that represents the alpha
         channel of the image contained in raster.


"
PackedColorModel,getMask(int index),int,Returns the mask indicating which bits in a pixel contain the specified color/alpha sample.,"

getMask
public final int getMask(int index)
Returns the mask indicating which bits in a pixel
 contain the specified color/alpha sample.  For color
 samples, index corresponds to the placement of color
 sample names in the color space.  Thus, an index
 equal to 0 for a CMYK ColorSpace would correspond to
 Cyan and an index equal to 1 would correspond to
 Magenta.  If there is alpha, the alpha index would be:
 
      alphaIndex = numComponents() - 1;
 

Parameters:
index - the specified color or alpha sample
Returns:
the mask, which indicates which bits of the int
         pixel representation contain the color or alpha sample specified
         by index.
Throws:
ArrayIndexOutOfBoundsException - if index is
         greater than the number of components minus 1 in this
         PackedColorModel or if index is
         less than zero


"
PackedColorModel,getMasks(),int[],Returns a mask array indicating which bits in a pixel contain the color and alpha samples.,"

getMasks
public final int[] getMasks()
Returns a mask array indicating which bits in a pixel
 contain the color and alpha samples.

Returns:
the mask array , which indicates which bits of the
         int pixel
         representation contain the color or alpha samples.


"
PackedColorModel,isCompatibleSampleModel(SampleModel sm),boolean,Checks if the specified SampleModel is compatible with this ColorModel.,"

isCompatibleSampleModel
public boolean isCompatibleSampleModel(SampleModel sm)
Checks if the specified SampleModel is compatible
 with this ColorModel.  If sm is
 null, this method returns false.

Overrides:
isCompatibleSampleModel in class ColorModel
Parameters:
sm - the specified SampleModel,
 or null
Returns:
true if the specified SampleModel
         is compatible with this ColorModel;
         false otherwise.
See Also:
SampleModel


"
PixelGrabber,abortGrabbing(),void,Request the PixelGrabber to abort the image fetch.,"

abortGrabbing
public void abortGrabbing()
Request the PixelGrabber to abort the image fetch.

"
PixelGrabber,getColorModel(),ColorModel,Get the ColorModel for the pixels stored in the array.,"

getColorModel
public ColorModel getColorModel()
Get the ColorModel for the pixels stored in the array.  If the
 PixelGrabber was constructed with an explicit pixel buffer then
 this method will always return the default RGB ColorModel,
 otherwise it may return null until the ColorModel used by the
 ImageProducer is known.
 Since the PixelGrabber may fall back on accumulating the data
 in the default RGB ColorModel at any time if the source image
 uses more than one ColorModel to deliver the data, the ColorModel
 object returned by this method may change over time until the
 image grab is complete and may not reflect any of the ColorModel
 objects that was used by the ImageProducer to deliver the pixels.

Returns:
the ColorModel object used for storing the pixels
See Also:
getStatus(), 
ColorModel.getRGBdefault(), 
setColorModel(ColorModel)


"
PixelGrabber,getHeight(),int,Get the height of the pixel buffer (after adjusting for image height).,"

getHeight
public int getHeight()
Get the height of the pixel buffer (after adjusting for image height).
 If no width was specified for the rectangle of pixels to grab then
 then this information will only be available after the image has
 delivered the dimensions.

Returns:
the final height used for the pixel buffer or -1 if the height
 is not yet known
See Also:
getStatus()


"
PixelGrabber,getPixels(),Object,Get the pixel buffer.,"

getPixels
public Object getPixels()
Get the pixel buffer.  If the PixelGrabber was not constructed
 with an explicit pixel buffer to hold the pixels then this method
 will return null until the size and format of the image data is
 known.
 Since the PixelGrabber may fall back on accumulating the data
 in the default RGB ColorModel at any time if the source image
 uses more than one ColorModel to deliver the data, the array
 object returned by this method may change over time until the
 image grab is complete.

Returns:
either a byte array or an int array
See Also:
getStatus(), 
setPixels(int, int, int, int, ColorModel, byte[], int, int), 
setPixels(int, int, int, int, ColorModel, int[], int, int)


"
PixelGrabber,getStatus(),int,Return the status of the pixels.,"

getStatus
public int getStatus()
Return the status of the pixels.  The ImageObserver flags
 representing the available pixel information are returned.

Returns:
the bitwise OR of all relevant ImageObserver flags
See Also:
ImageObserver


"
PixelGrabber,getWidth(),int,Get the width of the pixel buffer (after adjusting for image width).,"

getWidth
public int getWidth()
Get the width of the pixel buffer (after adjusting for image width).
 If no width was specified for the rectangle of pixels to grab then
 then this information will only be available after the image has
 delivered the dimensions.

Returns:
the final width used for the pixel buffer or -1 if the width
 is not yet known
See Also:
getStatus()


"
PixelGrabber,grabPixels(),boolean,Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered.,"

grabPixels
public boolean grabPixels()
                   throws InterruptedException
Request the Image or ImageProducer to start delivering pixels and
 wait for all of the pixels in the rectangle of interest to be
 delivered.

Returns:
true if the pixels were successfully grabbed, false on
 abort, error or timeout
Throws:
InterruptedException - Another thread has interrupted this thread.


"
PixelGrabber,grabPixels(long ms),boolean,Request the Image or ImageProducer to start delivering pixels and wait for all of the pixels in the rectangle of interest to be delivered or until the specified timeout has elapsed.,"

grabPixels
public boolean grabPixels(long ms)
                   throws InterruptedException
Request the Image or ImageProducer to start delivering pixels and
 wait for all of the pixels in the rectangle of interest to be
 delivered or until the specified timeout has elapsed.  This method
 behaves in the following ways, depending on the value of
 ms:
 
 If ms == 0, waits until all pixels are delivered
  If ms > 0, waits until all pixels are delivered
 as timeout expires.
  If ms < 0, returns true if all pixels
 are grabbed, false otherwise and does not wait.
 

Parameters:
ms - the number of milliseconds to wait for the image pixels
 to arrive before timing out
Returns:
true if the pixels were successfully grabbed, false on
 abort, error or timeout
Throws:
InterruptedException - Another thread has interrupted this thread.


"
PixelGrabber,imageComplete(int status),void,The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

imageComplete
public void imageComplete(int status)
The imageComplete method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
imageComplete in interface ImageConsumer
Parameters:
status - the status of image loading
See Also:
ImageProducer.removeConsumer(java.awt.image.ImageConsumer)


"
PixelGrabber,setColorModel(ColorModel model),void,The setColorModel method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setColorModel
public void setColorModel(ColorModel model)
The setColorModel method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setColorModel in interface ImageConsumer
Parameters:
model - the specified ColorModel
See Also:
getColorModel()


"
PixelGrabber,"setDimensions(int width, int height)",void,The setDimensions method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setDimensions
public void setDimensions(int width,
                          int height)
The setDimensions method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setDimensions in interface ImageConsumer
Parameters:
width - the width of the dimension
height - the height of the dimension


"
PixelGrabber,setHints(int hints),void,The setHints method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setHints
public void setHints(int hints)
The setHints method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setHints in interface ImageConsumer
Parameters:
hints - a set of hints used to process the pixels


"
PixelGrabber,"setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, byte[] pixels, int srcOff, int srcScan)",void,The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setPixels
public void setPixels(int srcX,
                      int srcY,
                      int srcW,
                      int srcH,
                      ColorModel model,
                      byte[] pixels,
                      int srcOff,
                      int srcScan)
The setPixels method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setPixels in interface ImageConsumer
Parameters:
srcX - the X coordinate of the upper-left corner
        of the area of pixels to be set
srcY - the Y coordinate of the upper-left corner
        of the area of pixels to be set
srcW - the width of the area of pixels
srcH - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
srcOff - the offset into the pixels array
srcScan - the distance from one row of pixels to the next
        in the pixels array
See Also:
getPixels()


"
PixelGrabber,"setPixels(int srcX, int srcY, int srcW, int srcH, ColorModel model, int[] pixels, int srcOff, int srcScan)",void,The setPixels method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setPixels
public void setPixels(int srcX,
                      int srcY,
                      int srcW,
                      int srcH,
                      ColorModel model,
                      int[] pixels,
                      int srcOff,
                      int srcScan)
The setPixels method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setPixels in interface ImageConsumer
Parameters:
srcX - the X coordinate of the upper-left corner
        of the area of pixels to be set
srcY - the Y coordinate of the upper-left corner
        of the area of pixels to be set
srcW - the width of the area of pixels
srcH - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
srcOff - the offset into the pixels array
srcScan - the distance from one row of pixels to the next
        in the pixels array
See Also:
getPixels()


"
PixelGrabber,"setProperties(Hashtable<?,?> props)",void,The setProperties method is part of the ImageConsumer API which this class must implement to retrieve the pixels.,"

setProperties
public void setProperties(Hashtable<?,?> props)
The setProperties method is part of the ImageConsumer API which
 this class must implement to retrieve the pixels.
 
 Note: This method is intended to be called by the ImageProducer
 of the Image whose pixels are being grabbed.  Developers using
 this class to retrieve pixels from an image should avoid calling
 this method directly since that operation could result in problems
 with retrieving the requested pixels.

Specified by:
setProperties in interface ImageConsumer
Parameters:
props - the list of properties


"
PixelGrabber,startGrabbing(),void,Request the PixelGrabber to start fetching the pixels.,"

startGrabbing
public void startGrabbing()
Request the PixelGrabber to start fetching the pixels.

"
PixelGrabber,status(),int,Returns the status of the pixels.,"

status
public int status()
Returns the status of the pixels.  The ImageObserver flags
 representing the available pixel information are returned.
 This method and getStatus have the
 same implementation, but getStatus is the
 preferred method because it conforms to the convention of
 naming information-retrieval methods with the form
 ""getXXX"".

Returns:
the bitwise OR of all relevant ImageObserver flags
See Also:
ImageObserver, 
getStatus()


"
PixelInterleavedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new PixelInterleavedSampleModel with the specified width and height.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a new PixelInterleavedSampleModel with the specified
 width and height.  The new PixelInterleavedSampleModel will have the
 same number of bands, storage data type, and pixel stride
 as this PixelInterleavedSampleModel.  The band offsets may be
 compressed such that the minimum of all of the band offsets is zero.

Overrides:
createCompatibleSampleModel in class ComponentSampleModel
Parameters:
w - the width of the resulting SampleModel
h - the height of the resulting SampleModel
Returns:
a new SampleModel with the specified width
         and height.
Throws:
IllegalArgumentException - if w or
         h is not greater than 0


"
PixelInterleavedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,Creates a new PixelInterleavedSampleModel with a subset of the bands of this PixelInterleavedSampleModel.,"

createSubsetSampleModel
public SampleModel createSubsetSampleModel(int[] bands)
Creates a new PixelInterleavedSampleModel with a subset of the
 bands of this PixelInterleavedSampleModel.  The new
 PixelInterleavedSampleModel can be used with any DataBuffer that the
 existing PixelInterleavedSampleModel can be used with.  The new
 PixelInterleavedSampleModel/DataBuffer combination will represent
 an image with a subset of the bands of the original
 PixelInterleavedSampleModel/DataBuffer combination.

Overrides:
createSubsetSampleModel in class ComponentSampleModel
Parameters:
bands - a subset of bands from this
              ComponentSampleModel
Returns:
a ComponentSampleModel created with a subset
          of bands from this ComponentSampleModel.


"
PixelInterleavedSampleModel,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class ComponentSampleModel
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
Raster,"createBandedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified DataBuffer, width, height, scanline stride, bank indices, and band offsets.","

createBandedRaster
public static WritableRaster createBandedRaster(DataBuffer dataBuffer,
                                                int w,
                                                int h,
                                                int scanlineStride,
                                                int[] bankIndices,
                                                int[] bandOffsets,
                                                Point location)
Creates a Raster based on a BandedSampleModel with the
 specified DataBuffer, width, height, scanline stride, bank
 indices, and band offsets.  The number of bands is inferred
 from bankIndices.length and bandOffsets.length, which must be
 the same.  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.

Parameters:
dataBuffer - the DataBuffer that contains the
        image data
w - the width in pixels of the image data
h - the height in pixels of the image data
scanlineStride - the line stride of the image data
bankIndices - the bank indices for each band
bandOffsets - the offsets of all bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified
         DataBuffer, width, height, scanline stride,
         bank indices and band offsets.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT
NullPointerException - if dataBuffer is null


"
Raster,"createBandedRaster(int dataType, int w, int h, int scanlineStride, int[] bankIndices, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified data type, width, height, scanline stride, bank indices and band offsets.","

createBandedRaster
public static WritableRaster createBandedRaster(int dataType,
                                                int w,
                                                int h,
                                                int scanlineStride,
                                                int[] bankIndices,
                                                int[] bandOffsets,
                                                Point location)
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, scanline stride, bank
 indices and band offsets.  The number of bands is inferred from
 bankIndices.length and bandOffsets.length, which must be the
 same.

  The upper left corner of the Raster is given by the
 location argument.  The dataType parameter should be one of the
 enumerated values defined in the DataBuffer class.

  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
 and TYPE_INT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
scanlineStride - the line stride of the image data
bankIndices - the bank indices for each band
bandOffsets - the offsets of all bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height, scanline stride, bank indices and band
         offsets.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT
ArrayIndexOutOfBoundsException - if bankIndices
         or bandOffsets is null


"
Raster,"createBandedRaster(int dataType, int w, int h, int bands, Point location)",static WritableRaster,"Creates a Raster based on a BandedSampleModel with the specified data type, width, height, and number of bands.","

createBandedRaster
public static WritableRaster createBandedRaster(int dataType,
                                                int w,
                                                int h,
                                                int bands,
                                                Point location)
Creates a Raster based on a BandedSampleModel with the
 specified data type, width, height, and number of bands.

  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.
 The dataType parameter should be one of the enumerated values
 defined in the DataBuffer class.

  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
 and TYPE_INT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
bands - the number of bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height and number of bands.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
ArrayIndexOutOfBoundsException - if bands
         is less than 1


"
Raster,"createChild(int parentX, int parentY, int width, int height, int childMinX, int childMinY, int[] bandList)",Raster,Returns a new Raster which shares all or part of this Raster's DataBuffer.,"

createChild
public Raster createChild(int parentX,
                          int parentY,
                          int width,
                          int height,
                          int childMinX,
                          int childMinY,
                          int[] bandList)
Returns a new Raster which shares all or part of this Raster's
 DataBuffer.  The new Raster will possess a reference to the
 current Raster, accessible through its getParent() method.

  The parentX, parentY, width and height parameters
 form a Rectangle in this Raster's coordinate space,
 indicating the area of pixels to be shared.  An error will
 be thrown if this Rectangle is not contained with the bounds
 of the current Raster.

  The new Raster may additionally be translated to a
 different coordinate system for the plane than that used by the current
 Raster.  The childMinX and childMinY parameters give the new
 (x, y) coordinate of the upper-left pixel of the returned
 Raster; the coordinate (childMinX, childMinY) in the new Raster
 will map to the same pixel as the coordinate (parentX, parentY)
 in the current Raster.

  The new Raster may be defined to contain only a subset of
 the bands of the current Raster, possibly reordered, by means
 of the bandList parameter.  If bandList is null, it is taken to
 include all of the bands of the current Raster in their current
 order.

  To create a new Raster that contains a subregion of the current
 Raster, but shares its coordinate system and bands,
 this method should be called with childMinX equal to parentX,
 childMinY equal to parentY, and bandList equal to null.

Parameters:
parentX - The X coordinate of the upper-left corner
        in this Raster's coordinates
parentY - The Y coordinate of the upper-left corner
        in this Raster's coordinates
width - Width of the region starting at (parentX, parentY)
height - Height of the region starting at (parentX, parentY).
childMinX - The X coordinate of the upper-left corner
                   of the returned Raster
childMinY - The Y coordinate of the upper-left corner
                   of the returned Raster
bandList - Array of band indices, or null to use all bands
Returns:
a new Raster.
Throws:
RasterFormatException - if the specified subregion is outside
                               of the raster bounds.
RasterFormatException - if width or
         height
         is less than or equal to zero, or computing any of
         parentX + width, parentY + height,
         childMinX + width, or
         childMinY + height results in integer
         overflow


"
Raster,createCompatibleWritableRaster(),WritableRaster,Create a compatible WritableRaster the same size as this Raster with the same SampleModel and a new initialized DataBuffer.,"

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster()
Create a compatible WritableRaster the same size as this Raster with
 the same SampleModel and a new initialized DataBuffer.

Returns:
a compatible WritableRaster with the same sample
         model and a new data buffer.


"
Raster,"createCompatibleWritableRaster(int w, int h)",WritableRaster,"Create a compatible WritableRaster with the specified size, a new SampleModel, and a new initialized DataBuffer.","

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(int w,
                                                     int h)
Create a compatible WritableRaster with the specified size, a new
 SampleModel, and a new initialized DataBuffer.

Parameters:
w - the specified width of the new WritableRaster
h - the specified height of the new WritableRaster
Returns:
a compatible WritableRaster with the specified
         size and a new sample model and data buffer.
Throws:
RasterFormatException - if the width or height is less than
                               or equal to zero.


"
Raster,"createCompatibleWritableRaster(int x, int y, int w, int h)",WritableRaster,"Create a compatible WritableRaster with the specified location (minX, minY) and size (width, height), a new SampleModel, and a new initialized DataBuffer.","

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(int x,
                                                     int y,
                                                     int w,
                                                     int h)
Create a compatible WritableRaster with the specified
 location (minX, minY) and size (width, height), a
 new SampleModel, and a new initialized DataBuffer.

Parameters:
x - the X coordinate of the upper-left corner of
        the WritableRaster
y - the Y coordinate of the upper-left corner of
        the WritableRaster
w - the specified width of the WritableRaster
h - the specified height of the WritableRaster
Returns:
a compatible WritableRaster with the specified
         size and location and a new sample model and data buffer.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         x + w or
         y + h results in integer
         overflow


"
Raster,createCompatibleWritableRaster(Rectangle rect),WritableRaster,"Create a compatible WritableRaster with location (minX, minY) and size (width, height) specified by rect, a new SampleModel, and a new initialized DataBuffer.","

createCompatibleWritableRaster
public WritableRaster createCompatibleWritableRaster(Rectangle rect)
Create a compatible WritableRaster with location (minX, minY)
 and size (width, height) specified by rect, a
 new SampleModel, and a new initialized DataBuffer.

Parameters:
rect - a Rectangle that specifies the size and
        location of the WritableRaster
Returns:
a compatible WritableRaster with the specified
         size and location and a new sample model and data buffer.
Throws:
RasterFormatException - if rect has width
         or height less than or equal to zero, or computing either
         rect.x + rect.width or
         rect.y + rect.height results in integer
         overflow
NullPointerException - if rect is null


"
Raster,"createInterleavedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified DataBuffer, width, height, scanline stride, pixel stride, and band offsets.","

createInterleavedRaster
public static WritableRaster createInterleavedRaster(DataBuffer dataBuffer,
                                                     int w,
                                                     int h,
                                                     int scanlineStride,
                                                     int pixelStride,
                                                     int[] bandOffsets,
                                                     Point location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified DataBuffer, width, height, scanline stride, pixel
 stride, and band offsets.  The number of bands is inferred from
 bandOffsets.length.  The upper left corner of the Raster
 is given by the location argument.  If location is null, (0, 0)
 will be used.
  Note that interleaved DataBuffer.TYPE_INT
 Rasters are not supported.  To create a 1-band Raster of type
 DataBuffer.TYPE_INT, use
 Raster.createPackedRaster().

Parameters:
dataBuffer - the DataBuffer that contains the
        image data
w - the width in pixels of the image data
h - the height in pixels of the image data
scanlineStride - the line stride of the image data
pixelStride - the pixel stride of the image data
bandOffsets - the offsets of all bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified
         DataBuffer, width, height, scanline stride,
         pixel stride and band offsets.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
RasterFormatException - if dataBuffer has more
         than one bank.
NullPointerException - if dataBuffer is null


"
Raster,"createInterleavedRaster(int dataType, int w, int h, int scanlineStride, int pixelStride, int[] bandOffsets, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, scanline stride, pixel stride, and band offsets.","

createInterleavedRaster
public static WritableRaster createInterleavedRaster(int dataType,
                                                     int w,
                                                     int h,
                                                     int scanlineStride,
                                                     int pixelStride,
                                                     int[] bandOffsets,
                                                     Point location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, scanline stride, pixel
 stride, and band offsets.  The number of bands is inferred from
 bandOffsets.length.

  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.
 The dataType parameter should be one of the enumerated values
 defined in the DataBuffer class.

  Note that interleaved DataBuffer.TYPE_INT
 Rasters are not supported.  To create a 1-band Raster of type
 DataBuffer.TYPE_INT, use
 Raster.createPackedRaster().
  The only dataTypes supported currently are TYPE_BYTE
 and TYPE_USHORT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
scanlineStride - the line stride of the image data
pixelStride - the pixel stride of the image data
bandOffsets - the offsets of all bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height, scanline stride, pixel stride and band
         offsets.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE, or
         DataBuffer.TYPE_USHORT.


"
Raster,"createInterleavedRaster(int dataType, int w, int h, int bands, Point location)",static WritableRaster,"Creates a Raster based on a PixelInterleavedSampleModel with the specified data type, width, height, and number of bands.","

createInterleavedRaster
public static WritableRaster createInterleavedRaster(int dataType,
                                                     int w,
                                                     int h,
                                                     int bands,
                                                     Point location)
Creates a Raster based on a PixelInterleavedSampleModel with the
 specified data type, width, height, and number of bands.

  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.
 The dataType parameter should be one of the enumerated values
 defined in the DataBuffer class.

  Note that interleaved DataBuffer.TYPE_INT
 Rasters are not supported.  To create a 1-band Raster of type
 DataBuffer.TYPE_INT, use
 Raster.createPackedRaster().
  The only dataTypes supported currently are TYPE_BYTE
 and TYPE_USHORT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
bands - the number of bands
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height and number of bands.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow


"
Raster,"createPackedRaster(DataBuffer dataBuffer, int w, int h, int scanlineStride, int[] bandMasks, Point location)",static WritableRaster,"Creates a Raster based on a SinglePixelPackedSampleModel with the specified DataBuffer, width, height, scanline stride, and band masks.","

createPackedRaster
public static WritableRaster createPackedRaster(DataBuffer dataBuffer,
                                                int w,
                                                int h,
                                                int scanlineStride,
                                                int[] bandMasks,
                                                Point location)
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified DataBuffer, width, height, scanline stride, and
 band masks.  The number of bands is inferred from bandMasks.length.
 The upper left corner of the Raster is given by
 the location argument.  If location is null, (0, 0) will be used.

Parameters:
dataBuffer - the DataBuffer that contains the
        image data
w - the width in pixels of the image data
h - the height in pixels of the image data
scanlineStride - the line stride of the image data
bandMasks - an array containing an entry for each band
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified
         DataBuffer, width, height, scanline stride,
         and band masks.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT
RasterFormatException - if dataBuffer has more
         than one bank.
NullPointerException - if dataBuffer is null


"
Raster,"createPackedRaster(DataBuffer dataBuffer, int w, int h, int bitsPerPixel, Point location)",static WritableRaster,"Creates a Raster based on a MultiPixelPackedSampleModel with the specified DataBuffer, width, height, and bits per pixel.","

createPackedRaster
public static WritableRaster createPackedRaster(DataBuffer dataBuffer,
                                                int w,
                                                int h,
                                                int bitsPerPixel,
                                                Point location)
Creates a Raster based on a MultiPixelPackedSampleModel with the
 specified DataBuffer, width, height, and bits per pixel.  The upper
 left corner of the Raster is given by the location argument.  If
 location is null, (0, 0) will be used.

Parameters:
dataBuffer - the DataBuffer that contains the
        image data
w - the width in pixels of the image data
h - the height in pixels of the image data
bitsPerPixel - the number of bits for each pixel
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified
         DataBuffer, width, height, and
         bits per pixel.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT
RasterFormatException - if dataBuffer has more
         than one bank.
NullPointerException - if dataBuffer is null


"
Raster,"createPackedRaster(int dataType, int w, int h, int[] bandMasks, Point location)",static WritableRaster,"Creates a Raster based on a SinglePixelPackedSampleModel with the specified data type, width, height, and band masks.","

createPackedRaster
public static WritableRaster createPackedRaster(int dataType,
                                                int w,
                                                int h,
                                                int[] bandMasks,
                                                Point location)
Creates a Raster based on a SinglePixelPackedSampleModel with
 the specified data type, width, height, and band masks.
 The number of bands is inferred from bandMasks.length.

  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.
 The dataType parameter should be one of the enumerated values
 defined in the DataBuffer class.

  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
 and TYPE_INT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
bandMasks - an array containing an entry for each band
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height, and band masks.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT


"
Raster,"createPackedRaster(int dataType, int w, int h, int bands, int bitsPerBand, Point location)",static WritableRaster,"Creates a Raster based on a packed SampleModel with the specified data type, width, height, number of bands, and bits per band.","

createPackedRaster
public static WritableRaster createPackedRaster(int dataType,
                                                int w,
                                                int h,
                                                int bands,
                                                int bitsPerBand,
                                                Point location)
Creates a Raster based on a packed SampleModel with the
 specified data type, width, height, number of bands, and bits
 per band.  If the number of bands is one, the SampleModel will
 be a MultiPixelPackedSampleModel.

  If the number of bands is more than one, the SampleModel
 will be a SinglePixelPackedSampleModel, with each band having
 bitsPerBand bits.  In either case, the requirements on dataType
 and bitsPerBand imposed by the corresponding SampleModel must
 be met.

  The upper left corner of the Raster is given by the
 location argument.  If location is null, (0, 0) will be used.
 The dataType parameter should be one of the enumerated values
 defined in the DataBuffer class.

  The only dataTypes supported currently are TYPE_BYTE, TYPE_USHORT,
 and TYPE_INT.

Parameters:
dataType - the data type for storing samples
w - the width in pixels of the image data
h - the height in pixels of the image data
bands - the number of bands
bitsPerBand - the number of bits per band
location - the upper-left corner of the Raster
Returns:
a WritableRaster object with the specified data type,
         width, height, number of bands, and bits per band.
Throws:
RasterFormatException - if w or h
         is less than or equal to zero, or computing either
         location.x + w or
         location.y + h results in integer
         overflow
IllegalArgumentException - if the product of
         bitsPerBand and bands is
         greater than the number of bits held by
         dataType
IllegalArgumentException - if bitsPerBand or
         bands is not greater than zero
IllegalArgumentException - if dataType is not
         one of the supported data types, which are
         DataBuffer.TYPE_BYTE,
         DataBuffer.TYPE_USHORT
         or DataBuffer.TYPE_INT


"
Raster,"createRaster(SampleModel sm, DataBuffer db, Point location)",static Raster,Creates a Raster with the specified SampleModel and DataBuffer.,"

createRaster
public static Raster createRaster(SampleModel sm,
                                  DataBuffer db,
                                  Point location)
Creates a Raster with the specified SampleModel and DataBuffer.
  The upper left corner of the Raster is given by the location argument.
  If location is null, (0, 0) will be used.

Parameters:
sm - the specified SampleModel
db - the specified DataBuffer
location - the upper-left corner of the Raster
Returns:
a Raster with the specified
          SampleModel, DataBuffer, and
          location.
Throws:
RasterFormatException - if computing either
         location.x + sm.getWidth() or
         location.y + sm.getHeight() results in integer
         overflow
RasterFormatException - if db has more
         than one bank and sm is a
         PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
         or MultiPixelPackedSampleModel.
NullPointerException - if either SampleModel or DataBuffer is
          null


"
Raster,"createTranslatedChild(int childMinX, int childMinY)",Raster,"Create a Raster with the same size, SampleModel and DataBuffer as this one, but with a different location.","

createTranslatedChild
public Raster createTranslatedChild(int childMinX,
                                    int childMinY)
Create a Raster with the same size, SampleModel and DataBuffer
 as this one, but with a different location.  The new Raster
 will possess a reference to the current Raster, accessible
 through its getParent() method.

Parameters:
childMinX - the X coordinate of the upper-left
        corner of the new Raster
childMinY - the Y coordinate of the upper-left
        corner of the new Raster
Returns:
a new Raster with the same size, SampleModel,
         and DataBuffer as this Raster, but with the
         specified location.
Throws:
RasterFormatException - if  computing either
         childMinX + this.getWidth() or
         childMinY + this.getHeight() results in integer
         overflow


"
Raster,"createWritableRaster(SampleModel sm, DataBuffer db, Point location)",static WritableRaster,Creates a WritableRaster with the specified SampleModel and DataBuffer.,"

createWritableRaster
public static WritableRaster createWritableRaster(SampleModel sm,
                                                  DataBuffer db,
                                                  Point location)
Creates a WritableRaster with the specified SampleModel and DataBuffer.
  The upper left corner of the Raster is given by the location argument.
  If location is null, (0, 0) will be used.

Parameters:
sm - the specified SampleModel
db - the specified DataBuffer
location - the upper-left corner of the
         WritableRaster
Returns:
a WritableRaster with the specified
          SampleModel, DataBuffer, and
          location.
Throws:
RasterFormatException - if computing either
         location.x + sm.getWidth() or
         location.y + sm.getHeight() results in integer
         overflow
RasterFormatException - if db has more
         than one bank and sm is a
         PixelInterleavedSampleModel, SinglePixelPackedSampleModel,
         or MultiPixelPackedSampleModel.
NullPointerException - if either SampleModel or DataBuffer is null


"
Raster,"createWritableRaster(SampleModel sm, Point location)",static WritableRaster,Creates a WritableRaster with the specified SampleModel.,"

createWritableRaster
public static WritableRaster createWritableRaster(SampleModel sm,
                                                  Point location)
Creates a WritableRaster with the specified SampleModel.
  The upper left corner of the Raster is given by the location argument.
  If location is null, (0, 0) will be used.

Parameters:
sm - the specified SampleModel
location - the upper-left corner of the
         WritableRaster
Returns:
a WritableRaster with the specified
          SampleModel and location.
Throws:
RasterFormatException - if computing either
          location.x + sm.getWidth() or
          location.y + sm.getHeight() results in integer
          overflow


"
Raster,getBounds(),Rectangle,Returns the bounding Rectangle of this Raster.,"

getBounds
public Rectangle getBounds()
Returns the bounding Rectangle of this Raster. This function returns
 the same information as getMinX/MinY/Width/Height.

Returns:
the bounding box of this Raster.


"
Raster,getDataBuffer(),DataBuffer,Returns the DataBuffer associated with this Raster.,"

getDataBuffer
public DataBuffer getDataBuffer()
Returns the DataBuffer associated with this Raster.

Returns:
the DataBuffer of this Raster.


"
Raster,"getDataElements(int x, int y, int w, int h, Object outData)",Object,Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              int w,
                              int h,
                              Object outData)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
 For image data supported by the Java 2D API, this
 will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
 or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
 thus increasing efficiency for data transfers.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.
 A ClassCastException will be thrown if the input object is non null
 and references anything other than an array of TransferType.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
outData - An object reference to an array of type defined by
                 getTransferType() and length w*h*getNumDataElements().
                 If null, an array of appropriate type and size will be
                 allocated.
Returns:
An object reference to an array of type defined by
                 getTransferType() with the requested pixel data.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if outData is too small to hold the output.
See Also:
SampleModel.getDataElements(int, int, int, int, Object, DataBuffer)


"
Raster,"getDataElements(int x, int y, Object outData)",Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              Object outData)
Returns data for a single pixel in a primitive array of type
 TransferType.  For image data supported by the Java 2D(tm) API,
 this will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
 or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
 thus increasing efficiency for data transfers.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.
 A ClassCastException will be thrown if the input object is non null
 and references anything other than an array of TransferType.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
outData - An object reference to an array of type defined by
                 getTransferType() and length getNumDataElements().
                 If null, an array of appropriate type and size will be
                 allocated
Returns:
An object reference to an array of type defined by
                 getTransferType() with the requested pixel data.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if outData is too small to hold the output.
See Also:
SampleModel.getDataElements(int, int, Object, DataBuffer)


"
Raster,getHeight(),int,Returns the height in pixels of the Raster.,"

getHeight
public final int getHeight()
Returns the height in pixels of the Raster.

Returns:
the height of this Raster.


"
Raster,getMinX(),int,Returns the minimum valid X coordinate of the Raster.,"

getMinX
public final int getMinX()
Returns the minimum valid X coordinate of the Raster.

Returns:
the minimum x coordinate of this Raster.


"
Raster,getMinY(),int,Returns the minimum valid Y coordinate of the Raster.,"

getMinY
public final int getMinY()
Returns the minimum valid Y coordinate of the Raster.

Returns:
the minimum y coordinate of this Raster.


"
Raster,getNumBands(),int,Returns the number of bands (samples per pixel) in this Raster.,"

getNumBands
public final int getNumBands()
Returns the number of bands (samples per pixel) in this Raster.

Returns:
the number of bands of this Raster.


"
Raster,getNumDataElements(),int,Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods.,"

getNumDataElements
public final int getNumDataElements()
Returns the number of data elements needed to transfer one pixel
  via the getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  underlying SampleModel.  Using these methods, pixels are transferred
  as an array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage data type of the DataBuffer.

Returns:
the number of data elements.


"
Raster,getParent(),Raster,Returns the parent Raster (if any) of this Raster or null.,"

getParent
public Raster getParent()
Returns the parent Raster (if any) of this Raster or null.

Returns:
the parent Raster or null.


"
Raster,"getPixel(int x, int y, double[] dArray)",double[],Returns the samples in an array of double for the specified pixel.,"

getPixel
public double[] getPixel(int x,
                         int y,
                         double[] dArray)
Returns the samples in an array of double for the specified pixel.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
dArray - An optionally preallocated double array
Returns:
the samples for the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if dArray is too small to hold the output.


"
Raster,"getPixel(int x, int y, float[] fArray)",float[],Returns the samples in an array of float for the specified pixel.,"

getPixel
public float[] getPixel(int x,
                        int y,
                        float[] fArray)
Returns the samples in an array of float for the
 specified pixel.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
fArray - An optionally preallocated float array
Returns:
the samples for the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if fArray is too small to hold the output.


"
Raster,"getPixel(int x, int y, int[] iArray)",int[],Returns the samples in an array of int for the specified pixel.,"

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray)
Returns the samples in an array of int for the specified pixel.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
iArray - An optionally preallocated int array
Returns:
the samples for the specified pixel.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if iArray is too small to hold the output.


"
Raster,"getPixels(int x, int y, int w, int h, double[] dArray)",double[],"Returns a double array containing all samples for a rectangle of pixels, one sample per array element.","

getPixels
public double[] getPixels(int x,
                          int y,
                          int w,
                          int h,
                          double[] dArray)
Returns a double array containing all samples for a rectangle of pixels,
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
dArray - An optionally pre-allocated double array
Returns:
the samples for the specified rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if dArray is too small to hold the output.


"
Raster,"getPixels(int x, int y, int w, int h, float[] fArray)",float[],"Returns a float array containing all samples for a rectangle of pixels, one sample per array element.","

getPixels
public float[] getPixels(int x,
                         int y,
                         int w,
                         int h,
                         float[] fArray)
Returns a float array containing all samples for a rectangle of pixels,
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
fArray - An optionally pre-allocated float array
Returns:
the samples for the specified rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if fArray is too small to hold the output.


"
Raster,"getPixels(int x, int y, int w, int h, int[] iArray)",int[],"Returns an int array containing all samples for a rectangle of pixels, one sample per array element.","

getPixels
public int[] getPixels(int x,
                       int y,
                       int w,
                       int h,
                       int[] iArray)
Returns an int array containing all samples for a rectangle of pixels,
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
iArray - An optionally pre-allocated int array
Returns:
the samples for the specified rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if iArray is too small to hold the output.


"
Raster,"getSample(int x, int y, int b)",int,"Returns the sample in a specified band for the pixel located at (x,y) as an int.","

getSample
public int getSample(int x,
                     int y,
                     int b)
Returns the sample in a specified band for the pixel located
 at (x,y) as an int.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
Returns:
the sample in the specified band for the pixel at the
         specified coordinate.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
Raster,"getSampleDouble(int x, int y, int b)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double.","

getSampleDouble
public double getSampleDouble(int x,
                              int y,
                              int b)
Returns the sample in a specified band
 for a pixel located at (x,y) as a double.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
Returns:
the sample in the specified band for the pixel at the
         specified coordinate.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
Raster,"getSampleFloat(int x, int y, int b)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float.","

getSampleFloat
public float getSampleFloat(int x,
                            int y,
                            int b)
Returns the sample in a specified band
 for the pixel located at (x,y) as a float.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
b - The band to return
Returns:
the sample in the specified band for the pixel at the
         specified coordinate.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
Raster,getSampleModel(),SampleModel,Returns the SampleModel that describes the layout of the image data.,"

getSampleModel
public SampleModel getSampleModel()
Returns the SampleModel that describes the layout of the image data.

Returns:
the SampleModel of this Raster.


"
Raster,getSampleModelTranslateX(),int,Returns the X translation from the coordinate system of the SampleModel to that of the Raster.,"

getSampleModelTranslateX
public final int getSampleModelTranslateX()
Returns the X translation from the coordinate system of the
 SampleModel to that of the Raster.  To convert a pixel's X
 coordinate from the Raster coordinate system to the SampleModel
 coordinate system, this value must be subtracted.

Returns:
the X translation from the coordinate space of the
         Raster's SampleModel to that of the Raster.


"
Raster,getSampleModelTranslateY(),int,Returns the Y translation from the coordinate system of the SampleModel to that of the Raster.,"

getSampleModelTranslateY
public final int getSampleModelTranslateY()
Returns the Y translation from the coordinate system of the
 SampleModel to that of the Raster.  To convert a pixel's Y
 coordinate from the Raster coordinate system to the SampleModel
 coordinate system, this value must be subtracted.

Returns:
the Y translation from the coordinate space of the
         Raster's SampleModel to that of the Raster.


"
Raster,"getSamples(int x, int y, int w, int h, int b, double[] dArray)",double[],"Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element.","

getSamples
public double[] getSamples(int x,
                           int y,
                           int w,
                           int h,
                           int b,
                           double[] dArray)
Returns the samples for a specified band for a specified rectangle
 of pixels in a double array, one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
b - The band to return
dArray - An optionally pre-allocated double array
Returns:
the samples for the specified band for the specified
         rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if dArray is too small to
 hold the output.


"
Raster,"getSamples(int x, int y, int w, int h, int b, float[] fArray)",float[],"Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element.","

getSamples
public float[] getSamples(int x,
                          int y,
                          int w,
                          int h,
                          int b,
                          float[] fArray)
Returns the samples for a specified band for the specified rectangle
 of pixels in a float array, one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
b - The band to return
fArray - An optionally pre-allocated float array
Returns:
the samples for the specified band for the specified
         rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if fArray is too small to
 hold the output.


"
Raster,"getSamples(int x, int y, int w, int h, int b, int[] iArray)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element.","

getSamples
public int[] getSamples(int x,
                        int y,
                        int w,
                        int h,
                        int b,
                        int[] iArray)
Returns the samples for a specified band for the specified rectangle
 of pixels in an int array, one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown
 if the coordinates are not in bounds.  However, explicit bounds
 checking is not guaranteed.

Parameters:
x - The X coordinate of the upper-left pixel location
y - The Y coordinate of the upper-left pixel location
w - Width of the pixel rectangle
h - Height of the pixel rectangle
b - The band to return
iArray - An optionally pre-allocated int array
Returns:
the samples for the specified band for the specified
         rectangle of pixels.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if iArray is too small to
 hold the output.


"
Raster,getTransferType(),int,Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods.,"

getTransferType
public final int getTransferType()
Returns the TransferType used to transfer pixels via the
  getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  underlying SampleModel.  Using these methods, pixels are transferred
  as an array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage data type of the DataBuffer.  The TransferType will
  be one of the types defined in DataBuffer.

Returns:
this transfer type.


"
Raster,getWidth(),int,Returns the width in pixels of the Raster.,"

getWidth
public final int getWidth()
Returns the width in pixels of the Raster.

Returns:
the width of this Raster.


"
ReplicateScaleFilter,"setDimensions(int w, int h)",void,Override the dimensions of the source image and pass the dimensions of the new scaled size to the ImageConsumer.,"

setDimensions
public void setDimensions(int w,
                          int h)
Override the dimensions of the source image and pass the dimensions
 of the new scaled size to the ImageConsumer.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setDimensions in interface ImageConsumer
Overrides:
setDimensions in class ImageFilter
Parameters:
w - the width of the source image
h - the height of the source image
See Also:
ImageConsumer


"
ReplicateScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,"Choose which rows and columns of the delivered byte pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary.","

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
Choose which rows and columns of the delivered byte pixels are
 needed for the destination scaled image and pass through just
 those rows and columns that are needed, replicated as necessary.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
ReplicateScaleFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,"Choose which rows and columns of the delivered int pixels are needed for the destination scaled image and pass through just those rows and columns that are needed, replicated as necessary.","

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
Choose which rows and columns of the delivered int pixels are
 needed for the destination scaled image and pass through just
 those rows and columns that are needed, replicated as necessary.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ImageConsumer.setPixels(int, int, int, int, java.awt.image.ColorModel, byte[], int, int)


"
ReplicateScaleFilter,"setProperties(Hashtable<?,?> props)",void,Passes along the properties from the source object after adding a property indicating the scale applied.,"

setProperties
public void setProperties(Hashtable<?,?> props)
Passes along the properties from the source object after adding a
 property indicating the scale applied.
 This method invokes super.setProperties,
 which might result in additional properties being added.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setProperties in interface ImageConsumer
Overrides:
setProperties in class ImageFilter
Parameters:
props - the properties from the source object


"
RescaleOp,"createCompatibleDestImage(BufferedImage src, ColorModel destCM)",BufferedImage,Creates a zeroed destination image with the correct size and number of bands.,"

createCompatibleDestImage
public BufferedImage createCompatibleDestImage(BufferedImage src,
                                               ColorModel destCM)
Creates a zeroed destination image with the correct size and number of
 bands.

Specified by:
createCompatibleDestImage in interface BufferedImageOp
Parameters:
src - Source image for the filter operation.
destCM - ColorModel of the destination.  If null, the
                  ColorModel of the source will be used.
Returns:
the zeroed-destination image.


"
RescaleOp,createCompatibleDestRaster(Raster src),WritableRaster,"Creates a zeroed-destination Raster with the correct size and number of bands, given this source.","

createCompatibleDestRaster
public WritableRaster createCompatibleDestRaster(Raster src)
Creates a zeroed-destination Raster with the correct
 size and number of bands, given this source.

Specified by:
createCompatibleDestRaster in interface RasterOp
Parameters:
src - the source Raster
Returns:
the zeroed-destination Raster.


"
RescaleOp,"filter(BufferedImage src, BufferedImage dst)",BufferedImage,Rescales the source BufferedImage.,"

filter
public final BufferedImage filter(BufferedImage src,
                                  BufferedImage dst)
Rescales the source BufferedImage.
 If the color model in the source image is not the same as that
 in the destination image, the pixels will be converted
 in the destination.  If the destination image is null,
 a BufferedImage will be created with the source ColorModel.
 An IllegalArgumentException may be thrown if the number of
 scaling factors/offsets in this object does not meet the
 restrictions stated in the class comments above, or if the
 source image has an IndexColorModel.

Specified by:
filter in interface BufferedImageOp
Parameters:
src - the BufferedImage to be filtered
dst - the destination for the filtering operation
            or null
Returns:
the filtered BufferedImage.
Throws:
IllegalArgumentException - if the ColorModel
         of src is an IndexColorModel,
         or if the number of scaling factors and offsets in this
         RescaleOp do not meet the requirements
         stated in the class comments.


"
RescaleOp,"filter(Raster src, WritableRaster dst)",WritableRaster,Rescales the pixel data in the source Raster.,"

filter
public final WritableRaster filter(Raster src,
                                   WritableRaster dst)
Rescales the pixel data in the source Raster.
 If the destination Raster is null, a new Raster will be created.
 The source and destination must have the same number of bands.
 Otherwise, an IllegalArgumentException is thrown.
 Note that the number of scaling factors/offsets in this object must
 meet the restrictions stated in the class comments above.
 Otherwise, an IllegalArgumentException is thrown.

Specified by:
filter in interface RasterOp
Parameters:
src - the Raster to be filtered
dst - the destination for the filtering operation
            or null
Returns:
the filtered WritableRaster.
Throws:
IllegalArgumentException - if src and
         dst do not have the same number of bands,
         or if the number of scaling factors and offsets in this
         RescaleOp do not meet the requirements
         stated in the class comments.


"
RescaleOp,getBounds2D(BufferedImage src),Rectangle2D,Returns the bounding box of the rescaled destination image.,"

getBounds2D
public final Rectangle2D getBounds2D(BufferedImage src)
Returns the bounding box of the rescaled destination image.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface BufferedImageOp
Parameters:
src - The BufferedImage to be filtered
Returns:
The Rectangle2D representing the destination
 image's bounding box.


"
RescaleOp,getBounds2D(Raster src),Rectangle2D,Returns the bounding box of the rescaled destination Raster.,"

getBounds2D
public final Rectangle2D getBounds2D(Raster src)
Returns the bounding box of the rescaled destination Raster.  Since
 this is not a geometric operation, the bounding box does not
 change.

Specified by:
getBounds2D in interface RasterOp
Parameters:
src - the rescaled destination Raster
Returns:
the bounds of the specified Raster.


"
RescaleOp,getNumFactors(),int,Returns the number of scaling factors and offsets used in this RescaleOp.,"

getNumFactors
public final int getNumFactors()
Returns the number of scaling factors and offsets used in this
 RescaleOp.

Returns:
the number of scaling factors and offsets of this
         RescaleOp.


"
RescaleOp,getOffsets(float[] offsets),float[],Returns the offsets in the given array.,"

getOffsets
public final float[] getOffsets(float[] offsets)
Returns the offsets in the given array. The array is also returned
 for convenience.  If offsets is null, a new array
 will be allocated.

Parameters:
offsets - the array to contain the offsets of
        this RescaleOp
Returns:
the offsets of this RescaleOp.


"
RescaleOp,"getPoint2D(Point2D srcPt, Point2D dstPt)",Point2D,Returns the location of the destination point given a point in the source.,"

getPoint2D
public final Point2D getPoint2D(Point2D srcPt,
                                Point2D dstPt)
Returns the location of the destination point given a
 point in the source.  If dstPt is non-null, it will
 be used to hold the return value.  Since this is not a geometric
 operation, the srcPt will equal the dstPt.

Specified by:
getPoint2D in interface BufferedImageOp
Specified by:
getPoint2D in interface RasterOp
Parameters:
srcPt - a point in the source image
dstPt - the destination point or null
Returns:
the location of the destination point.


"
RescaleOp,getRenderingHints(),RenderingHints,Returns the rendering hints for this op.,"

getRenderingHints
public final RenderingHints getRenderingHints()
Returns the rendering hints for this op.

Specified by:
getRenderingHints in interface BufferedImageOp
Specified by:
getRenderingHints in interface RasterOp
Returns:
the rendering hints of this RescaleOp.


"
RescaleOp,getScaleFactors(float[] scaleFactors),float[],Returns the scale factors in the given array.,"

getScaleFactors
public final float[] getScaleFactors(float[] scaleFactors)
Returns the scale factors in the given array. The array is also
 returned for convenience.  If scaleFactors is null, a new array
 will be allocated.

Parameters:
scaleFactors - the array to contain the scale factors of
        this RescaleOp
Returns:
the scale factors of this RescaleOp.


"
RGBImageFilter,filterIndexColorModel(IndexColorModel icm),IndexColorModel,Filters an IndexColorModel object by running each entry in its color tables through the filterRGB function that RGBImageFilter subclasses must provide.,"

filterIndexColorModel
public IndexColorModel filterIndexColorModel(IndexColorModel icm)
Filters an IndexColorModel object by running each entry in its
 color tables through the filterRGB function that RGBImageFilter
 subclasses must provide.  Uses coordinates of -1 to indicate that
 a color table entry is being filtered rather than an actual
 pixel value.

Parameters:
icm - the IndexColorModel object to be filtered
Returns:
a new IndexColorModel representing the filtered colors
Throws:
NullPointerException - if icm is null


"
RGBImageFilter,"filterRGB(int x, int y, int rgb)",abstract int,Subclasses must specify a method to convert a single input pixel in the default RGB ColorModel to a single output pixel.,"

filterRGB
public abstract int filterRGB(int x,
                              int y,
                              int rgb)
Subclasses must specify a method to convert a single input pixel
 in the default RGB ColorModel to a single output pixel.

Parameters:
x - the X coordinate of the pixel
y - the Y coordinate of the pixel
rgb - the integer pixel representation in the default RGB
            color model
Returns:
a filtered pixel in the default RGB color model.
See Also:
ColorModel.getRGBdefault(), 
filterRGBPixels(int, int, int, int, int[], int, int)


"
RGBImageFilter,"filterRGBPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)",void,Filters a buffer of pixels in the default RGB ColorModel by passing them one by one through the filterRGB method.,"

filterRGBPixels
public void filterRGBPixels(int x,
                            int y,
                            int w,
                            int h,
                            int[] pixels,
                            int off,
                            int scansize)
Filters a buffer of pixels in the default RGB ColorModel by passing
 them one by one through the filterRGB method.

Parameters:
x - the X coordinate of the upper-left corner of the region
          of pixels
y - the Y coordinate of the upper-left corner of the region
          of pixels
w - the width of the region of pixels
h - the height of the region of pixels
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next
        in the array
See Also:
ColorModel.getRGBdefault(), 
filterRGB(int, int, int)


"
RGBImageFilter,setColorModel(ColorModel model),void,"If the ColorModel is an IndexColorModel and the subclass has set the canFilterIndexColorModel flag to true, we substitute a filtered version of the color model here and wherever that original ColorModel object appears in the setPixels methods.","

setColorModel
public void setColorModel(ColorModel model)
If the ColorModel is an IndexColorModel and the subclass has
 set the canFilterIndexColorModel flag to true, we substitute
 a filtered version of the color model here and wherever
 that original ColorModel object appears in the setPixels methods.
 If the ColorModel is not an IndexColorModel or is null, this method
 overrides the default ColorModel used by the ImageProducer and
 specifies the default RGB ColorModel instead.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setColorModel in interface ImageConsumer
Overrides:
setColorModel in class ImageFilter
Parameters:
model - the specified ColorModel
See Also:
ImageConsumer, 
ColorModel.getRGBdefault()


"
RGBImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, byte[] pixels, int off, int scansize)",void,"If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel.","

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      byte[] pixels,
                      int off,
                      int scansize)
If the ColorModel object is the same one that has already
 been converted, then simply passes the pixels through with the
 converted ColorModel. Otherwise converts the buffer of byte
 pixels to the default RGB ColorModel and passes the converted
 buffer to the filterRGBPixels method to be converted one by one.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ColorModel.getRGBdefault(), 
filterRGBPixels(int, int, int, int, int[], int, int)


"
RGBImageFilter,"setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)",void,"If the ColorModel object is the same one that has already been converted, then simply passes the pixels through with the converted ColorModel, otherwise converts the buffer of integer pixels to the default RGB ColorModel and passes the converted buffer to the filterRGBPixels method to be converted one by one.","

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      ColorModel model,
                      int[] pixels,
                      int off,
                      int scansize)
If the ColorModel object is the same one that has already
 been converted, then simply passes the pixels through with the
 converted ColorModel, otherwise converts the buffer of integer
 pixels to the default RGB ColorModel and passes the converted
 buffer to the filterRGBPixels method to be converted one by one.
 Converts a buffer of integer pixels to the default RGB ColorModel
 and passes the converted buffer to the filterRGBPixels method.
 
 Note: This method is intended to be called by the
 ImageProducer of the Image whose pixels
 are being filtered. Developers using
 this class to filter pixels from an image should avoid calling
 this method directly since that operation could interfere
 with the filtering operation.

Specified by:
setPixels in interface ImageConsumer
Overrides:
setPixels in class ImageFilter
Parameters:
x - the X coordinate of the upper-left corner of the
        area of pixels to be set
y - the Y coordinate of the upper-left corner of the
        area of pixels to be set
w - the width of the area of pixels
h - the height of the area of pixels
model - the specified ColorModel
pixels - the array of pixels
off - the offset into the pixels array
scansize - the distance from one row of pixels to the next in
 the pixels array
See Also:
ColorModel.getRGBdefault(), 
filterRGBPixels(int, int, int, int, int[], int, int)


"
RGBImageFilter,"substituteColorModel(ColorModel oldcm, ColorModel newcm)",void,Registers two ColorModel objects for substitution.,"

substituteColorModel
public void substituteColorModel(ColorModel oldcm,
                                 ColorModel newcm)
Registers two ColorModel objects for substitution.  If the oldcm
 is encountered during any of the setPixels methods, the newcm
 is substituted and the pixels passed through
 untouched (but with the new ColorModel object).

Parameters:
oldcm - the ColorModel object to be replaced on the fly
newcm - the ColorModel object to replace oldcm on the fly


"
SampleModel,"createCompatibleSampleModel(int w, int h)",abstract SampleModel,"Creates a SampleModel which describes data in this SampleModel's format, but with a different width and height.","

createCompatibleSampleModel
public abstract SampleModel createCompatibleSampleModel(int w,
                                                        int h)
Creates a SampleModel which describes data in this SampleModel's
  format, but with a different width and height.

Parameters:
w - the width of the image data
h - the height of the image data
Returns:
a SampleModel describing the same image
          data as this SampleModel, but with a
          different size.


"
SampleModel,createDataBuffer(),abstract DataBuffer,Creates a DataBuffer that corresponds to this SampleModel.,"

createDataBuffer
public abstract DataBuffer createDataBuffer()
Creates a DataBuffer that corresponds to this SampleModel.
 The DataBuffer's width and height will match this SampleModel's.

Returns:
a DataBuffer corresponding to this
         SampleModel.


"
SampleModel,createSubsetSampleModel(int[] bands),abstract SampleModel,Creates a new SampleModel with a subset of the bands of this SampleModel.,"

createSubsetSampleModel
public abstract SampleModel createSubsetSampleModel(int[] bands)
Creates a new SampleModel
 with a subset of the bands of this
 SampleModel.

Parameters:
bands - the subset of bands of this SampleModel
Returns:
a SampleModel with a subset of bands of this
         SampleModel.


"
SampleModel,"getDataElements(int x, int y, int w, int h, Object obj, DataBuffer data)",Object,Returns the pixel data for the specified rectangle of pixels in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              int w,
                              int h,
                              Object obj,
                              DataBuffer data)
Returns the pixel data for the specified rectangle of pixels in a
 primitive array of type TransferType.
 For image data supported by the Java 2D API, this
 will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
 or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
 thus increasing efficiency for data transfers. Generally, obj
 should be passed in as null, so that the Object will be created
 automatically and will be of the right primitive data type.
 
 The following code illustrates transferring data for a rectangular
 region of pixels from
 DataBuffer db1, whose storage layout is described by
 SampleModel sm1, to DataBuffer db2, whose
 storage layout is described by SampleModel sm2.
 The transfer will generally be more efficient than using
 getPixels/setPixels.
 
       SampleModel sm1, sm2;
       DataBuffer db1, db2;
       sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w,
                           h, null, db1), db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is non-null, it should be a primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is non-null and is not large enough to hold
 the pixel data.

Parameters:
x - The minimum X coordinate of the pixel rectangle.
y - The minimum Y coordinate of the pixel rectangle.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
obj - If non-null, a primitive array in which to return
                  the pixel data.
data - The DataBuffer containing the image data.
Returns:
the data elements for the specified region of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is too small to hold the output.
See Also:
getNumDataElements(), 
getTransferType(), 
setDataElements(int, int, int, int, Object, DataBuffer), 
DataBuffer


"
SampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",abstract Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public abstract Object getDataElements(int x,
                                       int y,
                                       Object obj,
                                       DataBuffer data)
Returns data for a single pixel in a primitive array of type
 TransferType.  For image data supported by the Java 2D API, this
 will be one of DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT,
 DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT,
 or DataBuffer.TYPE_DOUBLE.  Data may be returned in a packed format,
 thus increasing efficiency for data transfers. Generally, obj
 should be passed in as null, so that the Object will be created
 automatically and will be of the right primitive data type.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 SampleModel sm1, to DataBuffer db2, whose
 storage layout is described by SampleModel sm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       SampleModel sm1, sm2;
       DataBuffer db1, db2;
       sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1), db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is non-null, it should be a primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is non-null and is not large enough to hold
 the pixel data.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
obj - If non-null, a primitive array in which to return
                  the pixel data.
data - The DataBuffer containing the image data.
Returns:
the data elements for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is too small to hold the output.
See Also:
getNumDataElements(), 
getTransferType(), 
DataBuffer, 
setDataElements(int, int, Object, DataBuffer)


"
SampleModel,getDataType(),int,Returns the data type of the DataBuffer storing the pixel data.,"

getDataType
public final int getDataType()
Returns the data type of the DataBuffer storing the pixel data.

Returns:
the data type.


"
SampleModel,getHeight(),int,Returns the height in pixels.,"

getHeight
public final int getHeight()
Returns the height in pixels.

Returns:
the height in pixels of the region of image data
          that this SampleModel describes.


"
SampleModel,getNumBands(),int,Returns the total number of bands of image data.,"

getNumBands
public final int getNumBands()
Returns the total number of bands of image data.

Returns:
the number of bands of image data that this
          SampleModel describes.


"
SampleModel,getNumDataElements(),abstract int,Returns the number of data elements needed to transfer a pixel via the getDataElements and setDataElements methods.,"

getNumDataElements
public abstract int getNumDataElements()
Returns the number of data elements needed to transfer a pixel
  via the getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  SampleModel.  Using these methods, pixels are transferred as an
  array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage DataType.

Returns:
the number of data elements.
See Also:
getDataElements(int, int, Object, DataBuffer), 
getDataElements(int, int, int, int, Object, DataBuffer), 
setDataElements(int, int, Object, DataBuffer), 
setDataElements(int, int, int, int, Object, DataBuffer), 
getTransferType()


"
SampleModel,"getPixel(int x, int y, double[] dArray, DataBuffer data)",double[],Returns the samples for the specified pixel in an array of double.,"

getPixel
public double[] getPixel(int x,
                         int y,
                         double[] dArray,
                         DataBuffer data)
Returns the samples for the specified pixel in an array of double.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
dArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if dArray is too small to hold the output.
See Also:
setPixel(int, int, double[], DataBuffer)


"
SampleModel,"getPixel(int x, int y, float[] fArray, DataBuffer data)",float[],Returns the samples for the specified pixel in an array of float.,"

getPixel
public float[] getPixel(int x,
                        int y,
                        float[] fArray,
                        DataBuffer data)
Returns the samples for the specified pixel in an array of float.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
fArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if fArray is too small to hold the output.
See Also:
setPixel(int, int, float[], DataBuffer)


"
SampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified pixel in an int array, one sample per array element.","

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray,
                      DataBuffer data)
Returns the samples for a specified pixel in an int array,
 one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location
y - The Y coordinate of the pixel location
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data
Returns:
the samples for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if iArray is too small to hold the output.
See Also:
setPixel(int, int, int[], DataBuffer)


"
SampleModel,"getPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data)",double[],"Returns all samples for a rectangle of pixels in a double array, one sample per array element.","

getPixels
public double[] getPixels(int x,
                          int y,
                          int w,
                          int h,
                          double[] dArray,
                          DataBuffer data)
Returns all samples for a rectangle of pixels in a double
 array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
dArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified region of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if dArray is too small to hold the output.
See Also:
setPixels(int, int, int, int, double[], DataBuffer)


"
SampleModel,"getPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data)",float[],"Returns all samples for a rectangle of pixels in a float array, one sample per array element.","

getPixels
public float[] getPixels(int x,
                         int y,
                         int w,
                         int h,
                         float[] fArray,
                         DataBuffer data)
Returns all samples for a rectangle of pixels in a float
 array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
fArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified region of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if fArray is too small to hold the output.
See Also:
setPixels(int, int, int, int, float[], DataBuffer)


"
SampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for a rectangle of pixels in an int array, one sample per array element.","

getPixels
public int[] getPixels(int x,
                       int y,
                       int w,
                       int h,
                       int[] iArray,
                       DataBuffer data)
Returns all samples for a rectangle of pixels in an
 int array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
iArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified region of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if iArray is too small to hold the output.
See Also:
setPixels(int, int, int, int, int[], DataBuffer)


"
SampleModel,"getSample(int x, int y, int b, DataBuffer data)",abstract int,"Returns the sample in a specified band for the pixel located at (x,y) as an int.","

getSample
public abstract int getSample(int x,
                              int y,
                              int b,
                              DataBuffer data)
Returns the sample in a specified band for the pixel located
 at (x,y) as an int.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to return.
data - The DataBuffer containing the image data.
Returns:
the sample in a specified band for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.
See Also:
setSample(int, int, int, int, DataBuffer)


"
SampleModel,"getSampleDouble(int x, int y, int b, DataBuffer data)",double,"Returns the sample in a specified band for a pixel located at (x,y) as a double.","

getSampleDouble
public double getSampleDouble(int x,
                              int y,
                              int b,
                              DataBuffer data)
Returns the sample in a specified band
 for a pixel located at (x,y) as a double.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to return.
data - The DataBuffer containing the image data.
Returns:
the sample in a specified band for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
SampleModel,"getSampleFloat(int x, int y, int b, DataBuffer data)",float,"Returns the sample in a specified band for the pixel located at (x,y) as a float.","

getSampleFloat
public float getSampleFloat(int x,
                            int y,
                            int b,
                            DataBuffer data)
Returns the sample in a specified band
 for the pixel located at (x,y) as a float.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to return.
data - The DataBuffer containing the image data.
Returns:
the sample in a specified band for the specified pixel.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
SampleModel,"getSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data)",double[],"Returns the samples for a specified band for a specified rectangle of pixels in a double array, one sample per array element.","

getSamples
public double[] getSamples(int x,
                           int y,
                           int w,
                           int h,
                           int b,
                           double[] dArray,
                           DataBuffer data)
Returns the samples for a specified band for a specified rectangle
 of pixels in a double array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to return.
dArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified band for the specified region
         of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if dArray is too small to
 hold the output.
See Also:
setSamples(int, int, int, int, int, double[], DataBuffer)


"
SampleModel,"getSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data)",float[],"Returns the samples for a specified band for the specified rectangle of pixels in a float array, one sample per array element.","

getSamples
public float[] getSamples(int x,
                          int y,
                          int w,
                          int h,
                          int b,
                          float[] fArray,
                          DataBuffer data)
Returns the samples for a specified band for the specified rectangle
 of pixels in a float array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to return.
fArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified band for the specified region
         of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if fArray is too small to
 hold the output.
See Also:
setSamples(int, int, int, int, int, float[], DataBuffer)


"
SampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element.","

getSamples
public int[] getSamples(int x,
                        int y,
                        int w,
                        int h,
                        int b,
                        int[] iArray,
                        DataBuffer data)
Returns the samples for a specified band for the specified rectangle
 of pixels in an int array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to return.
iArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified band for the specified region
         of pixels.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if iArray is too small to
 hold the output.
See Also:
setSamples(int, int, int, int, int, int[], DataBuffer)


"
SampleModel,getSampleSize(),abstract int[],Returns the size in bits of samples for all bands.,"

getSampleSize
public abstract int[] getSampleSize()
Returns the size in bits of samples for all bands.

Returns:
the size of samples for all bands.


"
SampleModel,getSampleSize(int band),abstract int,Returns the size in bits of samples for the specified band.,"

getSampleSize
public abstract int getSampleSize(int band)
Returns the size in bits of samples for the specified band.

Parameters:
band - the specified band
Returns:
the size of the samples of the specified band.


"
SampleModel,getTransferType(),int,Returns the TransferType used to transfer pixels via the getDataElements and setDataElements methods.,"

getTransferType
public int getTransferType()
Returns the TransferType used to transfer pixels via the
  getDataElements and setDataElements methods.  When pixels
  are transferred via these methods, they may be transferred in a
  packed or unpacked format, depending on the implementation of the
  SampleModel.  Using these methods, pixels are transferred as an
  array of getNumDataElements() elements of a primitive type given
  by getTransferType().  The TransferType may or may not be the same
  as the storage DataType.  The TransferType will be one of the types
  defined in DataBuffer.

Returns:
the transfer type.
See Also:
getDataElements(int, int, Object, DataBuffer), 
getDataElements(int, int, int, int, Object, DataBuffer), 
setDataElements(int, int, Object, DataBuffer), 
setDataElements(int, int, int, int, Object, DataBuffer), 
getNumDataElements(), 
DataBuffer


"
SampleModel,getWidth(),int,Returns the width in pixels.,"

getWidth
public final int getWidth()
Returns the width in pixels.

Returns:
the width in pixels of the region of image data
          that this SampleModel describes.


"
SampleModel,"setDataElements(int x, int y, int w, int h, Object obj, DataBuffer data)",void,Sets the data for a rectangle of pixels in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            int w,
                            int h,
                            Object obj,
                            DataBuffer data)
Sets the data for a rectangle of pixels in the specified DataBuffer
 from a primitive array of type TransferType.  For image data supported
 by the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
 may be in a packed format, thus increasing efficiency for data
 transfers.
 
 The following code illustrates transferring data for a rectangular
 region of pixels from
 DataBuffer db1, whose storage layout is described by
 SampleModel sm1, to DataBuffer db2, whose
 storage layout is described by SampleModel sm2.
 The transfer will generally be more efficient than using
 getPixels/setPixels.
 
       SampleModel sm1, sm2;
       DataBuffer db1, db2;
       sm2.setDataElements(x, y, w, h, sm1.getDataElements(x, y, w, h,
                           null, db1), db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 obj must be a primitive array of type TransferType.  Otherwise,
 a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is not large enough to hold the pixel data.

Parameters:
x - The minimum X coordinate of the pixel rectangle.
y - The minimum Y coordinate of the pixel rectangle.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
obj - A primitive array containing pixel data.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is too small to hold the input.
See Also:
getNumDataElements(), 
getTransferType(), 
getDataElements(int, int, int, int, Object, DataBuffer), 
DataBuffer


"
SampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",abstract void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public abstract void setDataElements(int x,
                                     int y,
                                     Object obj,
                                     DataBuffer data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.  For image data supported by
 the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
 may be in a packed format, thus increasing efficiency for data
 transfers.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 SampleModel sm1, to DataBuffer db2, whose
 storage layout is described by SampleModel sm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       SampleModel sm1, sm2;
       DataBuffer db1, db2;
       sm2.setDataElements(x, y, sm1.getDataElements(x, y, null, db1),
                           db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 obj must be a primitive array of type TransferType.  Otherwise,
 a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is not large enough to hold the pixel data.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
obj - A primitive array containing pixel data.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if obj is too small to hold the input.
See Also:
getNumDataElements(), 
getTransferType(), 
getDataElements(int, int, Object, DataBuffer), 
DataBuffer


"
SampleModel,"setPixel(int x, int y, double[] dArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using a double array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     double[] dArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using a double array of samples
 for input.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
dArray - The input samples in a double array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if dArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if fArray is too small to hold the input.
See Also:
getPixel(int, int, double[], DataBuffer)


"
SampleModel,"setPixel(int x, int y, float[] fArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using a float array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     float[] fArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using a float array of samples for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
fArray - The input samples in a float array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if fArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if fArray is too small to hold the input.
See Also:
getPixel(int, int, float[], DataBuffer)


"
SampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray,
                     DataBuffer data)
Sets a pixel in  the DataBuffer using an int array of samples for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if iArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if iArray is too small to hold the input.
See Also:
getPixel(int, int, int[], DataBuffer)


"
SampleModel,"setPixels(int x, int y, int w, int h, double[] dArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from a double array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      double[] dArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from a double array
 containing one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
dArray - The input samples in a double array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if dArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if dArray is too small to hold the input.
See Also:
getPixels(int, int, int, int, double[], DataBuffer)


"
SampleModel,"setPixels(int x, int y, int w, int h, float[] fArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from a float array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      float[] fArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from a float array containing
 one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
fArray - The input samples in a float array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if fArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if fArray is too small to hold the input.
See Also:
getPixels(int, int, int, int, float[], DataBuffer)


"
SampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      int[] iArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from an int array containing
 one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if iArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates are
 not in bounds, or if iArray is too small to hold the input.
See Also:
getPixels(int, int, int, int, int[], DataBuffer)


"
SampleModel,"setSample(int x, int y, int b, double s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      double s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a double for input.
 The default implementation of this method casts the input
 double sample to an int and then calls the
 setSample(int, int, int, DataBuffer) method using
 that int value.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as a double.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.
See Also:
getSample(int, int, int, DataBuffer)


"
SampleModel,"setSample(int x, int y, int b, float s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      float s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a float for input.
 The default implementation of this method casts the input
 float sample to an int and then calls the
 setSample(int, int, int, DataBuffer) method using
 that int value.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as a float.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.
See Also:
getSample(int, int, int, DataBuffer)


"
SampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",abstract void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public abstract void setSample(int x,
                               int y,
                               int b,
                               int s,
                               DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as an int.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.
See Also:
getSample(int, int, int,  DataBuffer)


"
SampleModel,"setSamples(int x, int y, int w, int h, int b, double[] dArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       double[] dArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from a double array containing one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to set.
dArray - The input samples in a double array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if dArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if dArray is too small to
 hold the input.
See Also:
getSamples(int, int, int, int, int, double[], DataBuffer)


"
SampleModel,"setSamples(int x, int y, int w, int h, int b, float[] fArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       float[] fArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from a float array containing one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to set.
fArray - The input samples in a float array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if fArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if fArray is too small to
 hold the input.
See Also:
getSamples(int, int, int, int, int, float[], DataBuffer)


"
SampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       int[] iArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from an int array containing one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to set.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
Throws:
NullPointerException - if iArray or data is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if iArray is too small to
 hold the input.
See Also:
getSamples(int, int, int, int, int, int[], DataBuffer)


"
ShortLookupTable,getTable(),short[][],Returns the lookup table data by reference.,"

getTable
public final short[][] getTable()
Returns the lookup table data by reference.  If this ShortLookupTable
 was constructed using a single short array, the length of the returned
 array is one.

Returns:
ShortLookupTable data array.


"
ShortLookupTable,"lookupPixel(int[] src, int[] dst)",int[],"Returns an array of samples of a pixel, translated with the lookup table.","

lookupPixel
public int[] lookupPixel(int[] src,
                         int[] dst)
Returns an array of samples of a pixel, translated with the lookup
 table. The source and destination array can be the same array.
 Array dst is returned.

Specified by:
lookupPixel in class LookupTable
Parameters:
src - the source array.
dst - the destination array. This array must be at least as
         long as src.  If dst is
         null, a new array will be allocated having the
         same length as src.
Returns:
the array dst, an int array of
         samples.
Throws:
ArrayIndexOutOfBoundsException - if src is
            longer than dst or if for any element
            i of src,
            (src[i]&0xffff)-offset is either less than
            zero or greater than or equal to the length of the
            lookup table for any band.


"
ShortLookupTable,"lookupPixel(short[] src, short[] dst)",short[],"Returns an array of samples of a pixel, translated with the lookup table.","

lookupPixel
public short[] lookupPixel(short[] src,
                           short[] dst)
Returns an array of samples of a pixel, translated with the lookup
 table. The source and destination array can be the same array.
 Array dst is returned.

Parameters:
src - the source array.
dst - the destination array. This array must be at least as
         long as src.  If dst is
         null, a new array will be allocated having the
         same length as src.
Returns:
the array dst, an int array of
         samples.
Throws:
ArrayIndexOutOfBoundsException - if src is
            longer than dst or if for any element
            i of src,
            (src[i]&0xffff)-offset is either less than
            zero or greater than or equal to the length of the
            lookup table for any band.


"
SinglePixelPackedSampleModel,"createCompatibleSampleModel(int w, int h)",SampleModel,Creates a new SinglePixelPackedSampleModel with the specified width and height.,"

createCompatibleSampleModel
public SampleModel createCompatibleSampleModel(int w,
                                               int h)
Creates a new SinglePixelPackedSampleModel with the specified
 width and height.  The new SinglePixelPackedSampleModel will have the
 same storage data type and bit masks as this
 SinglePixelPackedSampleModel.

Specified by:
createCompatibleSampleModel in class SampleModel
Parameters:
w - the width of the resulting SampleModel
h - the height of the resulting SampleModel
Returns:
a SinglePixelPackedSampleModel with the
         specified width and height.
Throws:
IllegalArgumentException - if w or
         h is not greater than 0


"
SinglePixelPackedSampleModel,createDataBuffer(),DataBuffer,Creates a DataBuffer that corresponds to this SinglePixelPackedSampleModel.,"

createDataBuffer
public DataBuffer createDataBuffer()
Creates a DataBuffer that corresponds to this
 SinglePixelPackedSampleModel.  The DataBuffer's data type and size
 will be consistent with this SinglePixelPackedSampleModel.  The
 DataBuffer will have a single bank.

Specified by:
createDataBuffer in class SampleModel
Returns:
a DataBuffer corresponding to this
         SampleModel.


"
SinglePixelPackedSampleModel,createSubsetSampleModel(int[] bands),SampleModel,This creates a new SinglePixelPackedSampleModel with a subset of the bands of this SinglePixelPackedSampleModel.,"

createSubsetSampleModel
public SampleModel createSubsetSampleModel(int[] bands)
This creates a new SinglePixelPackedSampleModel with a subset of the
 bands of this SinglePixelPackedSampleModel.  The new
 SinglePixelPackedSampleModel can be used with any DataBuffer that the
 existing SinglePixelPackedSampleModel can be used with.  The new
 SinglePixelPackedSampleModel/DataBuffer combination will represent
 an image with a subset of the bands of the original
 SinglePixelPackedSampleModel/DataBuffer combination.

Specified by:
createSubsetSampleModel in class SampleModel
Parameters:
bands - the subset of bands of this SampleModel
Returns:
a SampleModel with a subset of bands of this
         SampleModel.
Throws:
RasterFormatException - if the length of the bands argument is
                                  greater than the number of bands in
                                  the sample model.


"
SinglePixelPackedSampleModel,equals(Object o),boolean,"Indicates whether some other object is ""equal to"" this one.","

equals
public boolean equals(Object o)
Description copied from class: Object
Indicates whether some other object is ""equal to"" this one.
 
 The equals method implements an equivalence relation
 on non-null object references:
 
It is reflexive: for any non-null reference value
     x, x.equals(x) should return
     true.
 It is symmetric: for any non-null reference values
     x and y, x.equals(y)
     should return true if and only if
     y.equals(x) returns true.
 It is transitive: for any non-null reference values
     x, y, and z, if
     x.equals(y) returns true and
     y.equals(z) returns true, then
     x.equals(z) should return true.
 It is consistent: for any non-null reference values
     x and y, multiple invocations of
     x.equals(y) consistently return true
     or consistently return false, provided no
     information used in equals comparisons on the
     objects is modified.
 For any non-null reference value x,
     x.equals(null) should return false.
 

 The equals method for class Object implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values x and
 y, this method returns true if and only
 if x and y refer to the same object
 (x == y has the value true).
 
 Note that it is generally necessary to override the hashCode
 method whenever this method is overridden, so as to maintain the
 general contract for the hashCode method, which states
 that equal objects must have equal hash codes.

Overrides:
equals in class Object
Parameters:
o - the reference object with which to compare.
Returns:
true if this object is the same as the obj
          argument; false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
SinglePixelPackedSampleModel,getBitMasks(),int[],Returns the bit masks for all bands.,"

getBitMasks
public int[] getBitMasks()
Returns the bit masks for all bands.

Returns:
the bit masks for all bands.


"
SinglePixelPackedSampleModel,getBitOffsets(),int[],Returns the bit offsets into the data array element representing a pixel for all bands.,"

getBitOffsets
public int[] getBitOffsets()
Returns the bit offsets into the data array element representing
  a pixel for all bands.

Returns:
the bit offsets representing a pixel for all bands.


"
SinglePixelPackedSampleModel,"getDataElements(int x, int y, Object obj, DataBuffer data)",Object,Returns data for a single pixel in a primitive array of type TransferType.,"

getDataElements
public Object getDataElements(int x,
                              int y,
                              Object obj,
                              DataBuffer data)
Returns data for a single pixel in a primitive array of type
 TransferType.  For a SinglePixelPackedSampleModel, the array will
 have one element, and the type will be the same as the storage
 data type.  Generally, obj
 should be passed in as null, so that the Object will be created
 automatically and will be of the right primitive data type.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 SinglePixelPackedSampleModel sppsm1, to
 DataBuffer db2, whose storage layout is described by
 SinglePixelPackedSampleModel sppsm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       SinglePixelPackedSampleModel sppsm1, sppsm2;
       DataBufferInt db1, db2;
       sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                              db1), db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 If obj is non-null, it should be a primitive array of type TransferType.
 Otherwise, a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is non-null and is not large enough to hold
 the pixel data.

Specified by:
getDataElements in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
obj - If non-null, a primitive array in which to return
                  the pixel data.
data - The DataBuffer containing the image data.
Returns:
the data for the specified pixel.
See Also:
setDataElements(int, int, Object, DataBuffer)


"
SinglePixelPackedSampleModel,getNumDataElements(),int,Returns the number of data elements needed to transfer one pixel via the getDataElements and setDataElements methods.,"

getNumDataElements
public int getNumDataElements()
Returns the number of data elements needed to transfer one pixel
 via the getDataElements and setDataElements methods.
 For a SinglePixelPackedSampleModel, this is one.

Specified by:
getNumDataElements in class SampleModel
Returns:
the number of data elements.
See Also:
SampleModel.getDataElements(int, int, Object, DataBuffer), 
SampleModel.getDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, Object, DataBuffer), 
SampleModel.setDataElements(int, int, int, int, Object, DataBuffer), 
SampleModel.getTransferType()


"
SinglePixelPackedSampleModel,"getOffset(int x, int y)",int,"Returns the offset (in data array elements) of pixel (x,y).","

getOffset
public int getOffset(int x,
                     int y)
Returns the offset (in data array elements) of pixel (x,y).
  The data element containing pixel x,y
  can be retrieved from a DataBuffer data with a
  SinglePixelPackedSampleModel sppsm as:
 
        data.getElem(sppsm.getOffset(x, y));
 

Parameters:
x - the X coordinate of the specified pixel
y - the Y coordinate of the specified pixel
Returns:
the offset of the specified pixel.


"
SinglePixelPackedSampleModel,"getPixel(int x, int y, int[] iArray, DataBuffer data)",int[],Returns all samples in for the specified pixel in an int array.,"

getPixel
public int[] getPixel(int x,
                      int y,
                      int[] iArray,
                      DataBuffer data)
Returns all samples in for the specified pixel in an int array.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getPixel in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
iArray - If non-null, returns the samples in this array
data - The DataBuffer containing the image data.
Returns:
all samples for the specified pixel.
See Also:
setPixel(int, int, int[], DataBuffer)


"
SinglePixelPackedSampleModel,"getPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",int[],"Returns all samples for the specified rectangle of pixels in an int array, one sample per array element.","

getPixels
public int[] getPixels(int x,
                       int y,
                       int w,
                       int h,
                       int[] iArray,
                       DataBuffer data)
Returns all samples for the specified rectangle of pixels in
 an int array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getPixels in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
iArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
all samples for the specified region of pixels.
See Also:
setPixels(int, int, int, int, int[], DataBuffer)


"
SinglePixelPackedSampleModel,"getSample(int x, int y, int b, DataBuffer data)",int,"Returns as int the sample in a specified band for the pixel located at (x,y).","

getSample
public int getSample(int x,
                     int y,
                     int b,
                     DataBuffer data)
Returns as int the sample in a specified band for the pixel
 located at (x,y).
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Specified by:
getSample in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to return.
data - The DataBuffer containing the image data.
Returns:
the sample in a specified band for the specified
         pixel.
See Also:
setSample(int, int, int, int, DataBuffer)


"
SinglePixelPackedSampleModel,"getSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",int[],"Returns the samples for a specified band for the specified rectangle of pixels in an int array, one sample per array element.","

getSamples
public int[] getSamples(int x,
                        int y,
                        int w,
                        int h,
                        int b,
                        int[] iArray,
                        DataBuffer data)
Returns the samples for a specified band for the specified rectangle
 of pixels in an int array, one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
getSamples in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to return.
iArray - If non-null, returns the samples in this array.
data - The DataBuffer containing the image data.
Returns:
the samples for the specified band for the specified
         region of pixels.
See Also:
setSamples(int, int, int, int, int, int[], DataBuffer)


"
SinglePixelPackedSampleModel,getSampleSize(),int[],Returns the number of bits per sample for all bands.,"

getSampleSize
public int[] getSampleSize()
Returns the number of bits per sample for all bands.

Specified by:
getSampleSize in class SampleModel
Returns:
the size of samples for all bands.


"
SinglePixelPackedSampleModel,getSampleSize(int band),int,Returns the number of bits per sample for the specified band.,"

getSampleSize
public int getSampleSize(int band)
Returns the number of bits per sample for the specified band.

Specified by:
getSampleSize in class SampleModel
Parameters:
band - the specified band
Returns:
the size of the samples of the specified band.


"
SinglePixelPackedSampleModel,getScanlineStride(),int,Returns the scanline stride of this SinglePixelPackedSampleModel.,"

getScanlineStride
public int getScanlineStride()
Returns the scanline stride of this SinglePixelPackedSampleModel.

Returns:
the scanline stride of this
          SinglePixelPackedSampleModel.


"
SinglePixelPackedSampleModel,hashCode(),int,Returns a hash code value for the object.,"

hashCode
public int hashCode()
Description copied from class: Object
Returns a hash code value for the object. This method is
 supported for the benefit of hash tables such as those provided by
 HashMap.
 
 The general contract of hashCode is:
 
Whenever it is invoked on the same object more than once during
     an execution of a Java application, the hashCode method
     must consistently return the same integer, provided no information
     used in equals comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 If two objects are equal according to the equals(Object)
     method, then calling the hashCode method on each of
     the two objects must produce the same integer result.
 It is not required that if two objects are unequal
     according to the Object.equals(java.lang.Object)
     method, then calling the hashCode method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hash tables.
 

 As much as is reasonably practical, the hashCode method defined by
 class Object does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java™ programming language.)

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
SinglePixelPackedSampleModel,"setDataElements(int x, int y, Object obj, DataBuffer data)",void,Sets the data for a single pixel in the specified DataBuffer from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Object obj,
                            DataBuffer data)
Sets the data for a single pixel in the specified DataBuffer from a
 primitive array of type TransferType.  For a
 SinglePixelPackedSampleModel, only the first element of the array
 will hold valid data, and the type of the array must be the same as
 the storage data type of the SinglePixelPackedSampleModel.
 
 The following code illustrates transferring data for one pixel from
 DataBuffer db1, whose storage layout is described by
 SinglePixelPackedSampleModel sppsm1,
 to DataBuffer db2, whose storage layout is described by
 SinglePixelPackedSampleModel sppsm2.
 The transfer will generally be more efficient than using
 getPixel/setPixel.
 
       SinglePixelPackedSampleModel sppsm1, sppsm2;
       DataBufferInt db1, db2;
       sppsm2.setDataElements(x, y, sppsm1.getDataElements(x, y, null,
                              db1), db2);
 
 Using getDataElements/setDataElements to transfer between two
 DataBuffer/SampleModel pairs is legitimate if the SampleModels have
 the same number of bands, corresponding bands have the same number of
 bits per sample, and the TransferTypes are the same.
 
 obj must be a primitive array of type TransferType.  Otherwise,
 a ClassCastException is thrown.  An
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if obj is not large enough to hold the pixel data.

Specified by:
setDataElements in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
obj - A primitive array containing pixel data.
data - The DataBuffer containing the image data.
See Also:
getDataElements(int, int, Object, DataBuffer)


"
SinglePixelPackedSampleModel,"setPixel(int x, int y, int[] iArray, DataBuffer data)",void,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray,
                     DataBuffer data)
Sets a pixel in the DataBuffer using an int array of samples for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setPixel in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
See Also:
getPixel(int, int, int[], DataBuffer)


"
SinglePixelPackedSampleModel,"setPixels(int x, int y, int w, int h, int[] iArray, DataBuffer data)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      int[] iArray,
                      DataBuffer data)
Sets all samples for a rectangle of pixels from an int array containing
 one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setPixels in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
See Also:
getPixels(int, int, int, int, int[], DataBuffer)


"
SinglePixelPackedSampleModel,"setSample(int x, int y, int b, int s, DataBuffer data)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s,
                      DataBuffer data)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Specified by:
setSample in class SampleModel
Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as an int.
data - The DataBuffer containing the image data.
See Also:
getSample(int, int, int, DataBuffer)


"
SinglePixelPackedSampleModel,"setSamples(int x, int y, int w, int h, int b, int[] iArray, DataBuffer data)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       int[] iArray,
                       DataBuffer data)
Sets the samples in the specified band for the specified rectangle
 of pixels from an int array containing one sample per array element.
 ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.

Overrides:
setSamples in class SampleModel
Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - The width of the pixel rectangle.
h - The height of the pixel rectangle.
b - The band to set.
iArray - The input samples in an int array.
data - The DataBuffer containing the image data.
See Also:
getSamples(int, int, int, int, int, int[], DataBuffer)


"
VolatileImage,contentsLost(),abstract boolean,Returns true if rendering data was lost since last validate call.,"

contentsLost
public abstract boolean contentsLost()
Returns true if rendering data was lost since last
 validate call.  This method should be called by the
 application at the end of any series of rendering operations to
 or from the image to see whether
 the image needs to be validated and the rendering redone.

Returns:
true if the drawing surface needs to be restored;
 false otherwise.


"
VolatileImage,createGraphics(),abstract Graphics2D,"Creates a Graphics2D, which can be used to draw into this VolatileImage.","

createGraphics
public abstract Graphics2D createGraphics()
Creates a Graphics2D, which can be used to draw into
 this VolatileImage.

Returns:
a Graphics2D, used for drawing into this
          image.


"
VolatileImage,getCapabilities(),abstract ImageCapabilities,Returns an ImageCapabilities object which can be inquired as to the specific capabilities of this VolatileImage.,"

getCapabilities
public abstract ImageCapabilities getCapabilities()
Returns an ImageCapabilities object which can be
 inquired as to the specific capabilities of this
 VolatileImage.  This would allow programmers to find
 out more runtime information on the specific VolatileImage
 object that they have created.  For example, the user
 might create a VolatileImage but the system may have
 no video memory left for creating an image of that
 size, so although the object is a VolatileImage, it is
 not as accelerated as other VolatileImage objects on
 this platform might be.  The user might want that
 information to find other solutions to their problem.

Returns:
an ImageCapabilities object that contains
         the capabilities of this VolatileImage.
Since:
1.4


"
VolatileImage,getGraphics(),Graphics,"This method returns a Graphics2D, but is here for backwards compatibility.","

getGraphics
public Graphics getGraphics()
This method returns a Graphics2D, but is here
 for backwards compatibility.  createGraphics is more
 convenient, since it is declared to return a
 Graphics2D.

Specified by:
getGraphics in class Image
Returns:
a Graphics2D, which can be used to draw into
          this image.
See Also:
Graphics, 
Component.createImage(int, int)


"
VolatileImage,getHeight(),abstract int,Returns the height of the VolatileImage.,"

getHeight
public abstract int getHeight()
Returns the height of the VolatileImage.

Returns:
the height of this VolatileImage.


"
VolatileImage,getSnapshot(),abstract BufferedImage,Returns a static snapshot image of this object.,"

getSnapshot
public abstract BufferedImage getSnapshot()
Returns a static snapshot image of this object.  The
 BufferedImage returned is only current with
 the VolatileImage at the time of the request
 and will not be updated with any future changes to the
 VolatileImage.

Returns:
a BufferedImage representation of this
          VolatileImage
See Also:
BufferedImage


"
VolatileImage,getSource(),ImageProducer,This returns an ImageProducer for this VolatileImage.,"

getSource
public ImageProducer getSource()
This returns an ImageProducer for this VolatileImage.
 Note that the VolatileImage object is optimized for
 rendering operations and blitting to the screen or other
 VolatileImage objects, as opposed to reading back the
 pixels of the image.  Therefore, operations such as
 getSource may not perform as fast as
 operations that do not rely on reading the pixels.
 Note also that the pixel values read from the image are current
 with those in the image only at the time that they are
 retrieved. This method takes a snapshot
 of the image at the time the request is made and the
 ImageProducer object returned works with
 that static snapshot image, not the original VolatileImage.
 Calling getSource()
 is equivalent to calling getSnapshot().getSource().

Specified by:
getSource in class Image
Returns:
an ImageProducer that can be used to produce the
 pixels for a BufferedImage representation of
 this Image.
See Also:
ImageProducer, 
getSnapshot()


"
VolatileImage,getTransparency(),int,Returns the transparency.,"

getTransparency
public int getTransparency()
Returns the transparency.  Returns either OPAQUE, BITMASK,
 or TRANSLUCENT.

Specified by:
getTransparency in interface Transparency
Returns:
the transparency of this VolatileImage.
Since:
1.5
See Also:
Transparency.OPAQUE, 
Transparency.BITMASK, 
Transparency.TRANSLUCENT


"
VolatileImage,getWidth(),abstract int,Returns the width of the VolatileImage.,"

getWidth
public abstract int getWidth()
Returns the width of the VolatileImage.

Returns:
the width of this VolatileImage.


"
VolatileImage,validate(GraphicsConfiguration gc),abstract int,Attempts to restore the drawing surface of the image if the surface had been lost since the last validate call.,"

validate
public abstract int validate(GraphicsConfiguration gc)
Attempts to restore the drawing surface of the image if the surface
 had been lost since the last validate call.  Also
 validates this image against the given GraphicsConfiguration
 parameter to see whether operations from this image to the
 GraphicsConfiguration are compatible.  An example of an
 incompatible combination might be a situation where a VolatileImage
 object was created on one graphics device and then was used
 to render to a different graphics device.  Since VolatileImage
 objects tend to be very device-specific, this operation might
 not work as intended, so the return code from this validate
 call would note that incompatibility.  A null or incorrect
 value for gc may cause incorrect values to be returned from
 validate and may cause later problems with rendering.

Parameters:
gc - a GraphicsConfiguration object for this
          image to be validated against.  A null gc implies that the
          validate method should skip the compatibility test.
Returns:
IMAGE_OK if the image did not need validation
IMAGE_RESTORED if the image needed restoration.
          Restoration implies that the contents of the image may have
          been affected and the image may need to be re-rendered.
IMAGE_INCOMPATIBLE if the image is incompatible
          with the GraphicsConfiguration object passed
          into the validate method.  Incompatibility
          implies that the image may need to be recreated with a
          new Component or
          GraphicsConfiguration in order to get an image
          that can be used successfully with this
          GraphicsConfiguration.
          An incompatible image is not checked for whether restoration
          was necessary, so the state of the image is unchanged
          after a return value of IMAGE_INCOMPATIBLE
          and this return value implies nothing about whether the
          image needs to be restored.
See Also:
GraphicsConfiguration, 
Component, 
IMAGE_OK, 
IMAGE_RESTORED, 
IMAGE_INCOMPATIBLE


"
WritableRaster,"createWritableChild(int parentX, int parentY, int w, int h, int childMinX, int childMinY, int[] bandList)",WritableRaster,Returns a new WritableRaster which shares all or part of this WritableRaster's DataBuffer.,"

createWritableChild
public WritableRaster createWritableChild(int parentX,
                                          int parentY,
                                          int w,
                                          int h,
                                          int childMinX,
                                          int childMinY,
                                          int[] bandList)
Returns a new WritableRaster which shares all or part of this
 WritableRaster's DataBuffer.  The new WritableRaster will
 possess a reference to the current WritableRaster, accessible
 through its getParent() and getWritableParent() methods.

  The parentX, parentY, width and height parameters form a
 Rectangle in this WritableRaster's coordinate space, indicating
 the area of pixels to be shared.  An error will be thrown if
 this Rectangle is not contained with the bounds of the current
 WritableRaster.

  The new WritableRaster may additionally be translated to a
 different coordinate system for the plane than that used by the current
 WritableRaster.  The childMinX and childMinY parameters give
 the new (x, y) coordinate of the upper-left pixel of the
 returned WritableRaster; the coordinate (childMinX, childMinY)
 in the new WritableRaster will map to the same pixel as the
 coordinate (parentX, parentY) in the current WritableRaster.

  The new WritableRaster may be defined to contain only a
 subset of the bands of the current WritableRaster, possibly
 reordered, by means of the bandList parameter.  If bandList is
 null, it is taken to include all of the bands of the current
 WritableRaster in their current order.

  To create a new WritableRaster that contains a subregion of
 the current WritableRaster, but shares its coordinate system
 and bands, this method should be called with childMinX equal to
 parentX, childMinY equal to parentY, and bandList equal to
 null.

Parameters:
parentX - X coordinate of the upper left corner in this
                   WritableRaster's coordinates.
parentY - Y coordinate of the upper left corner in this
                   WritableRaster's coordinates.
w - Width of the region starting at (parentX, parentY).
h - Height of the region starting at (parentX, parentY).
childMinX - X coordinate of the upper left corner of
                   the returned WritableRaster.
childMinY - Y coordinate of the upper left corner of
                   the returned WritableRaster.
bandList - Array of band indices, or null to use all bands.
Returns:
a WritableRaster sharing all or part of the
         DataBuffer of this WritableRaster.
Throws:
RasterFormatException - if the subregion is outside of the
                               raster bounds.
RasterFormatException - if w or
         h
         is less than or equal to zero, or computing any of
         parentX + w, parentY + h,
         childMinX + w, or
         childMinY + h results in integer
         overflow


"
WritableRaster,"createWritableTranslatedChild(int childMinX, int childMinY)",WritableRaster,"Create a WritableRaster with the same size, SampleModel and DataBuffer as this one, but with a different location.","

createWritableTranslatedChild
public WritableRaster createWritableTranslatedChild(int childMinX,
                                                    int childMinY)
Create a WritableRaster with the same size, SampleModel and DataBuffer
 as this one, but with a different location.  The new WritableRaster
 will possess a reference to the current WritableRaster, accessible
 through its getParent() and getWritableParent() methods.

Parameters:
childMinX - X coord of the upper left corner of the new Raster.
childMinY - Y coord of the upper left corner of the new Raster.
Returns:
a WritableRaster the same as this one except
         for the specified location.
Throws:
RasterFormatException - if  computing either
         childMinX + this.getWidth() or
         childMinY + this.getHeight() results in integer
         overflow


"
WritableRaster,getWritableParent(),WritableRaster,"Returns the parent WritableRaster (if any) of this WritableRaster, or else null.","

getWritableParent
public WritableRaster getWritableParent()
Returns the parent WritableRaster (if any) of this WritableRaster,
  or else null.

Returns:
the parent of this WritableRaster, or
          null.


"
WritableRaster,"setDataElements(int x, int y, int w, int h, Object inData)",void,Sets the data for a rectangle of pixels from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            int w,
                            int h,
                            Object inData)
Sets the data for a rectangle of pixels from a
 primitive array of type TransferType.  For image data supported by
 the Java 2D API, this will be one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
 may be in a packed format, thus increasing efficiency for data
 transfers.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if inData is not large enough to hold the pixel data.
 However, explicit bounds checking is not guaranteed.
 A ClassCastException will be thrown if the input object is not null
 and references anything other than an array of TransferType.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
inData - An object reference to an array of type defined by
                 getTransferType() and length w*h*getNumDataElements()
                 containing the pixel data to place between x,y and
                 x+w-1, y+h-1.
Throws:
NullPointerException - if inData is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if inData is too small to hold the input.
See Also:
SampleModel.setDataElements(int, int, int, int, Object, DataBuffer)


"
WritableRaster,"setDataElements(int x, int y, Object inData)",void,Sets the data for a single pixel from a primitive array of type TransferType.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Object inData)
Sets the data for a single pixel from a
 primitive array of type TransferType.  For image data supported by
 the Java 2D(tm) API, this will be one of DataBuffer.TYPE_BYTE,
 DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT, DataBuffer.TYPE_SHORT,
 DataBuffer.TYPE_FLOAT, or DataBuffer.TYPE_DOUBLE.  Data in the array
 may be in a packed format, thus increasing efficiency for data
 transfers.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds, or if inData is not large enough to hold the pixel data.
 However, explicit bounds checking is not guaranteed.
 A ClassCastException will be thrown if the input object is not null
 and references anything other than an array of TransferType.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
inData - An object reference to an array of type defined by
                 getTransferType() and length getNumDataElements()
                 containing the pixel data to place at x,y.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if inData is too small to hold the input.
See Also:
SampleModel.setDataElements(int, int, Object, DataBuffer)


"
WritableRaster,"setDataElements(int x, int y, Raster inRaster)",void,Sets the data for a rectangle of pixels from an input Raster.,"

setDataElements
public void setDataElements(int x,
                            int y,
                            Raster inRaster)
Sets the data for a rectangle of pixels from an input Raster.
 The input Raster must be compatible with this WritableRaster
 in that they must have the same number of bands, corresponding bands
 must have the same number of bits per sample, the TransferTypes
 and NumDataElements must be the same, and the packing used by
 the getDataElements/setDataElements must be identical.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
inRaster - Raster containing data to place at x,y.
Throws:
NullPointerException - if inRaster is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds.


"
WritableRaster,"setPixel(int x, int y, double[] dArray)",void,Sets a pixel in the DataBuffer using a double array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     double[] dArray)
Sets a pixel in the DataBuffer using a double array of samples for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
dArray - The input samples in a double array.
Throws:
NullPointerException - if dArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if dArray is too small to hold the input.


"
WritableRaster,"setPixel(int x, int y, float[] fArray)",void,Sets a pixel in the DataBuffer using a float array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     float[] fArray)
Sets a pixel in the DataBuffer using a float array of samples for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
fArray - The input samples in a float array.
Throws:
NullPointerException - if fArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if fArray is too small to hold the input.


"
WritableRaster,"setPixel(int x, int y, int[] iArray)",void,Sets a pixel in the DataBuffer using an int array of samples for input.,"

setPixel
public void setPixel(int x,
                     int y,
                     int[] iArray)
Sets a pixel in the DataBuffer using an int array of samples for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
iArray - The input samples in a int array.
Throws:
NullPointerException - if iArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if iArray is too small to hold the input.


"
WritableRaster,"setPixels(int x, int y, int w, int h, double[] dArray)",void,Sets all samples for a rectangle of pixels from a double array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      double[] dArray)
Sets all samples for a rectangle of pixels from a double array containing
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
dArray - The input double pixel array.
Throws:
NullPointerException - if dArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if dArray is too small to hold the input.


"
WritableRaster,"setPixels(int x, int y, int w, int h, float[] fArray)",void,Sets all samples for a rectangle of pixels from a float array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      float[] fArray)
Sets all samples for a rectangle of pixels from a float array containing
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
fArray - The input float pixel array.
Throws:
NullPointerException - if fArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if fArray is too small to hold the input.


"
WritableRaster,"setPixels(int x, int y, int w, int h, int[] iArray)",void,Sets all samples for a rectangle of pixels from an int array containing one sample per array element.,"

setPixels
public void setPixels(int x,
                      int y,
                      int w,
                      int h,
                      int[] iArray)
Sets all samples for a rectangle of pixels from an int array containing
 one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
iArray - The input int pixel array.
Throws:
NullPointerException - if iArray is null.
ArrayIndexOutOfBoundsException - if the coordinates are not
 in bounds, or if iArray is too small to hold the input.


"
WritableRaster,"setRect(int dx, int dy, Raster srcRaster)",void,Copies pixels from Raster srcRaster to this WritableRaster.,"

setRect
public void setRect(int dx,
                    int dy,
                    Raster srcRaster)
Copies pixels from Raster srcRaster to this WritableRaster.
 For each (x, y) address in srcRaster, the corresponding pixel
 is copied to address (x+dx, y+dy) in this WritableRaster,
 unless (x+dx, y+dy) falls outside the bounds of this raster.
 srcRaster must have the same number of bands as this WritableRaster.
 The copy is a simple copy of source samples to the corresponding
 destination samples.  For details, see
 setRect(Raster).

Parameters:
dx - The X translation factor from src space to dst space
                  of the copy.
dy - The Y translation factor from src space to dst space
                  of the copy.
srcRaster - The Raster from which to copy pixels.
Throws:
NullPointerException - if srcRaster is null.


"
WritableRaster,setRect(Raster srcRaster),void,Copies pixels from Raster srcRaster to this WritableRaster.,"

setRect
public void setRect(Raster srcRaster)
Copies pixels from Raster srcRaster to this WritableRaster.  Each pixel
 in srcRaster is copied to the same x,y address in this raster, unless
 the address falls outside the bounds of this raster.  srcRaster
 must have the same number of bands as this WritableRaster.  The
 copy is a simple copy of source samples to the corresponding destination
 samples.
 
 If all samples of both source and destination Rasters are of
 integral type and less than or equal to 32 bits in size, then calling
 this method is equivalent to executing the following code for all
 x,y addresses valid in both Rasters.
 
       Raster srcRaster;
       WritableRaster dstRaster;
       for (int b = 0; b < srcRaster.getNumBands(); b++) {
           dstRaster.setSample(x, y, b, srcRaster.getSample(x, y, b));
       }
 
 Thus, when copying an integral type source to an integral type
 destination, if the source sample size is greater than the destination
 sample size for a particular band, the high order bits of the source
 sample are truncated.  If the source sample size is less than the
 destination size for a particular band, the high order bits of the
 destination are zero-extended or sign-extended depending on whether
 srcRaster's SampleModel treats the sample as a signed or unsigned
 quantity.
 
 When copying a float or double source to an integral type destination,
 each source sample is cast to the destination type.  When copying an
 integral type source to a float or double destination, the source
 is first converted to a 32-bit int (if necessary), using the above
 rules for integral types, and then the int is cast to float or
 double.
 

Parameters:
srcRaster - The  Raster from which to copy pixels.
Throws:
NullPointerException - if srcRaster is null.


"
WritableRaster,"setSample(int x, int y, int b, double s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a double for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      double s)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a double for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as a double.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
WritableRaster,"setSample(int x, int y, int b, float s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using a float for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      float s)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using a float for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample as a float.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
WritableRaster,"setSample(int x, int y, int b, int s)",void,"Sets a sample in the specified band for the pixel located at (x,y) in the DataBuffer using an int for input.","

setSample
public void setSample(int x,
                      int y,
                      int b,
                      int s)
Sets a sample in the specified band for the pixel located at (x,y)
 in the DataBuffer using an int for input.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the pixel location.
y - The Y coordinate of the pixel location.
b - The band to set.
s - The input sample.
Throws:
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds.


"
WritableRaster,"setSamples(int x, int y, int w, int h, int b, double[] dArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from a double array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       double[] dArray)
Sets the samples in the specified band for the specified rectangle
 of pixels from a double array containing one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
b - The band to set.
dArray - The input double sample array.
Throws:
NullPointerException - if dArray is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if dArray is too small to
 hold the input.


"
WritableRaster,"setSamples(int x, int y, int w, int h, int b, float[] fArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from a float array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       float[] fArray)
Sets the samples in the specified band for the specified rectangle
 of pixels from a float array containing one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
b - The band to set.
fArray - The input float sample array.
Throws:
NullPointerException - if fArray is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if fArray is too small to
 hold the input.


"
WritableRaster,"setSamples(int x, int y, int w, int h, int b, int[] iArray)",void,Sets the samples in the specified band for the specified rectangle of pixels from an int array containing one sample per array element.,"

setSamples
public void setSamples(int x,
                       int y,
                       int w,
                       int h,
                       int b,
                       int[] iArray)
Sets the samples in the specified band for the specified rectangle
 of pixels from an int array containing one sample per array element.
 An ArrayIndexOutOfBoundsException may be thrown if the coordinates are
 not in bounds.
 However, explicit bounds checking is not guaranteed.

Parameters:
x - The X coordinate of the upper left pixel location.
y - The Y coordinate of the upper left pixel location.
w - Width of the pixel rectangle.
h - Height of the pixel rectangle.
b - The band to set.
iArray - The input int sample array.
Throws:
NullPointerException - if iArray is null.
ArrayIndexOutOfBoundsException - if the coordinates or
 the band index are not in bounds, or if iArray is too small to
 hold the input.


"
