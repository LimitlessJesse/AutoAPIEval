Sample Number,ClassName,Snippet Number,Method,Exist,Description,Full Description
0,AccessControlContext,1,AccessControlContext optimize(),False,,NULL
0,AccessControlContext,2,DomainCombiner getDomainCombiner(),True,,"

getDomainCombiner
public DomainCombiner getDomainCombiner()
Get the DomainCombiner associated with this
 AccessControlContext.

 

Returns:
the DomainCombiner associated with this
          AccessControlContext, or null
          if there is none.
Throws:
SecurityException - if a security manager is installed and
          the caller does not have the ""getDomainCombiner""
          SecurityPermission
Since:
1.3


"
0,AccessControlContext,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Checks two AccessControlContext objects for equality.
 Checks that obj is
 an AccessControlContext and has the same set of ProtectionDomains
 as this context.
 

Overrides:
equals in class Object
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an AccessControlContext, and has the
 same set of ProtectionDomains as this context, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
0,AccessControlContext,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code value for this context. The hash code
 is computed by exclusive or-ing the hash code of all the protection
 domains in the context together.

Overrides:
hashCode in class Object
Returns:
a hash code value for this context.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
0,AccessControlContext,5,String toString(),False,,NULL
1,AccessController,1,Object doPrivileged(PrivilegedAction action),False,,NULL
1,AccessController,2,Object doPrivileged(PrivilegedExceptionAction action) throws PrivilegedActionException,False,,NULL
1,AccessController,3,"<T> T doPrivileged(PrivilegedAction<T> action, AccessControlContext context)",True,,"

doPrivileged
public static <T> T doPrivileged(PrivilegedAction<T> action,
                                 AccessControlContext context)
Performs the specified PrivilegedAction with privileges
 enabled and restricted by the specified AccessControlContext.
 The action is performed with the intersection of the permissions
 possessed by the caller's protection domain, and those possessed
 by the domains represented by the specified AccessControlContext.
 
 If the action's run method throws an (unchecked) exception,
 it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the PrivilegedAction's
                  run method.
Parameters:
action - the action to be performed.
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null, then no additional restriction is applied.
Returns:
the value returned by the action's run method.
Throws:
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedExceptionAction,AccessControlContext)


"
1,AccessController,4,"<T> T doPrivileged(PrivilegedExceptionAction<T> action, AccessControlContext context) throws PrivilegedActionException",True,,"

doPrivileged
public static <T> T doPrivileged(PrivilegedExceptionAction<T> action,
                                 AccessControlContext context)
                          throws PrivilegedActionException
Performs the specified PrivilegedExceptionAction with
 privileges enabled and restricted by the specified
 AccessControlContext.  The action is performed with the
 intersection of the permissions possessed by the caller's
 protection domain, and those possessed by the domains represented by the
 specified AccessControlContext.
 
 If the action's run method throws an unchecked
 exception, it will propagate through this method.
 
 If a security manager is installed and the specified
 AccessControlContext was not created by system code and the
 caller's ProtectionDomain has not been granted the
 ""createAccessControlContext""
 SecurityPermission, then the action is performed
 with no permissions.

Type Parameters:
T - the type of the value returned by the
                  PrivilegedExceptionAction's run method.
Parameters:
action - the action to be performed
context - an access control context
                representing the restriction to be applied to the
                caller's domain's privileges before performing
                the specified action.  If the context is
                null, then no additional restriction is applied.
Returns:
the value returned by the action's run method
Throws:
PrivilegedActionException - if the specified action's
         run method threw a checked exception
NullPointerException - if the action is null
See Also:
doPrivileged(PrivilegedAction), 
doPrivileged(PrivilegedAction,AccessControlContext)


"
1,AccessController,5,AccessControlContext getContext(),True,,"

getContext
public static AccessControlContext getContext()
This method takes a ""snapshot"" of the current calling context, which
 includes the current Thread's inherited AccessControlContext and any
 limited privilege scope, and places it in an AccessControlContext object.
 This context may then be checked at a later point, possibly in another thread.

Returns:
the AccessControlContext based on the current context.
See Also:
AccessControlContext


"
2,AlgorithmParameterGenerator,1,void init(int strength),True,,"

init
public final void init(int size)
Initializes this parameter generator for a certain size.
 To create the parameters, the SecureRandom
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
size - the size (number of bits).


"
2,AlgorithmParameterGenerator,2,AlgorithmParameters generateParameters(),True,,"

generateParameters
public final AlgorithmParameters generateParameters()
Generates the parameters.

Returns:
the new AlgorithmParameters object.


"
2,AlgorithmParameterGenerator,3,void init(AlgorithmParameterSpec paramSpec),True,,"

init
public final void init(AlgorithmParameterSpec genParamSpec)
                throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.
 To generate the parameters, the SecureRandom
 implementation of the highest-priority installed provider is used as
 the source of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
2,AlgorithmParameterGenerator,4,"void init(AlgorithmParameterSpec paramSpec, SecureRandom random)",True,,"

init
public final void init(AlgorithmParameterSpec genParamSpec,
                       SecureRandom random)
                throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of algorithm-specific
 parameter generation values.

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
random - the source of randomness.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
2,AlgorithmParameterGenerator,5,"void init(AlgorithmParameterSpec paramSpec, AlgorithmParameterSpec paramSpec2)",False,,NULL
3,AlgorithmParameterGeneratorSpi,1,"void engineInit(int size, SecureRandom random)",True,,"

engineInit
protected abstract void engineInit(int size,
                                   SecureRandom random)
Initializes this parameter generator for a certain size
 and source of randomness.

Parameters:
size - the size (number of bits).
random - the source of randomness.


"
3,AlgorithmParameterGeneratorSpi,2,AlgorithmParameters engineGenerateParameters(),True,,"

engineGenerateParameters
protected abstract AlgorithmParameters engineGenerateParameters()
Generates the parameters.

Returns:
the new AlgorithmParameters object.


"
3,AlgorithmParameterGeneratorSpi,3,"void engineInit(AlgorithmParameterSpec params, SecureRandom random)",True,,"

engineInit
protected abstract void engineInit(AlgorithmParameterSpec genParamSpec,
                                   SecureRandom random)
                            throws InvalidAlgorithmParameterException
Initializes this parameter generator with a set of
 algorithm-specific parameter generation values.

Parameters:
genParamSpec - the set of algorithm-specific parameter generation values.
random - the source of randomness.
Throws:
InvalidAlgorithmParameterException - if the given parameter
 generation values are inappropriate for this parameter generator.


"
3,AlgorithmParameterGeneratorSpi,4,void engineInit(AlgorithmParameterSpec params),False,,NULL
3,AlgorithmParameterGeneratorSpi,5,void engineInit(int size),False,,NULL
5,AlgorithmParametersSpi,1,byte[] engineGetEncoded(),True,,"

engineGetEncoded
protected abstract byte[] engineGetEncoded()
                                    throws IOException
Returns the parameters in their primary encoding format.
 The primary encoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

Returns:
the parameters encoded using their primary encoding format.
Throws:
IOException - on encoding errors.


"
5,AlgorithmParametersSpi,2,void engineInit(AlgorithmParameterSpec params),True,,"

engineInit
protected abstract void engineInit(AlgorithmParameterSpec paramSpec)
                            throws InvalidParameterSpecException
Initializes this parameters object using the parameters
 specified in paramSpec.

Parameters:
paramSpec - the parameter specification.
Throws:
InvalidParameterSpecException - if the given parameter
 specification is inappropriate for the initialization of this parameter
 object.


"
5,AlgorithmParametersSpi,3,void engineInit(byte[] params),True,,"

engineInit
protected abstract void engineInit(byte[] params)
                            throws IOException
Imports the specified parameters and decodes them
 according to the primary decoding format for parameters.
 The primary decoding format for parameters is ASN.1, if an ASN.1
 specification for this type of parameters exists.

Parameters:
params - the encoded parameters.
Throws:
IOException - on decoding errors


"
5,AlgorithmParametersSpi,4,AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec),False,,NULL
5,AlgorithmParametersSpi,5,"void engineInit(byte[] params, String format)",True,,"

engineInit
protected abstract void engineInit(byte[] params,
                                   String format)
                            throws IOException
Imports the parameters from params and
 decodes them according to the specified decoding format.
 If format is null, the
 primary decoding format for parameters is used. The primary decoding
 format is ASN.1, if an ASN.1 specification for these parameters
 exists.

Parameters:
params - the encoded parameters.
format - the name of the decoding format.
Throws:
IOException - on decoding errors


"
6,AllPermission,1,boolean implies(Permission p),True,,"

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object. This method always returns true.

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
return


"
6,AllPermission,2,String getActions(),True,,"

getActions
public String getActions()
Returns the canonical string representation of the actions.

Specified by:
getActions in class Permission
Returns:
the actions.


"
6,AllPermission,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Checks two AllPermission objects for equality. Two AllPermission
 objects are always equal.

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj is an AllPermission, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
6,AllPermission,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code value for this object.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
6,AllPermission,5,String toString(),False,,NULL
7,AuthProvider,1,void login(),False,,NULL
7,AuthProvider,2,void logout(),True,,"

logout
public abstract void logout()
                     throws LoginException
Log out from this provider.

Throws:
LoginException - if the logout operation fails
SecurityException - if the caller does not pass a
  security check for
  SecurityPermission(""authProvider.name""),
  where name is the value returned by
  this provider's getName method


"
7,AuthProvider,3,boolean isAuthenticated(),False,,NULL
7,AuthProvider,4,String getProviderName(),False,,NULL
7,AuthProvider,5,void setCallbackHandler(CallbackHandler handler),True,,"

setCallbackHandler
public abstract void setCallbackHandler(CallbackHandler handler)
Set a CallbackHandler.

  The provider uses this handler if one is not passed to the
 login method.  The provider also uses this handler
 if it invokes login on behalf of callers.
 In either case if a handler is not set via this method,
 the provider queries the
 auth.login.defaultCallbackHandler security property
 for the fully qualified class name of a default handler implementation.
 If the security property is not set,
 the provider is assumed to have alternative means
 for obtaining authentication information.

Parameters:
handler - a CallbackHandler for obtaining
          authentication information, which may be null
Throws:
SecurityException - if the caller does not pass a
  security check for
  SecurityPermission(""authProvider.name""),
  where name is the value returned by
  this provider's getName method


"
8,BasicPermission,1,String getActions(),True,,"

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 a BasicPermission.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
8,BasicPermission,2,boolean implies(Permission permission),True,,"

implies
public boolean implies(Permission p)
Checks if the specified permission is ""implied"" by
 this object.
 
 More specifically, this method returns true if:
 
 p's class is the same as this object's class, and
  p's name equals or (in the case of wildcards)
      is implied by this object's
      name. For example, ""a.b.*"" implies ""a.b.c"".
 

Specified by:
implies in class Permission
Parameters:
p - the permission to check against.
Returns:
true if the passed permission is equal to or
 implied by this permission, false otherwise.


"
8,BasicPermission,3,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Checks two BasicPermission objects for equality.
 Checks that obj's class is the same as this object's class
 and has the same name as this object.
 

Specified by:
equals in class Permission
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if obj's class is the same as this object's class
  and has the same name as this BasicPermission object, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
8,BasicPermission,4,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code value for this object.
 The hash code used is the hash code of the name, that is,
 getName().hashCode(), where getName is
 from the Permission superclass.

Specified by:
hashCode in class Permission
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
8,BasicPermission,5,String toString(),False,,NULL
9,CodeSigner,1,CodeSigner[] getSigners(),False,,NULL
9,CodeSigner,2,String toString(),True,,"

toString
public String toString()
Returns a string describing this code signer.

Overrides:
toString in class Object
Returns:
A string comprising the signer's certificate and a timestamp,
         if present.


"
9,CodeSigner,3,"CodeSigner(String signerCertPath, String signerCertType)",False,,NULL
9,CodeSigner,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 code signer. Two code signers are considered equal if their
 signer certificate paths are equal and if their timestamps are equal,
 if present in both.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
9,CodeSigner,5,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hash code value for this code signer.
 The hash code is generated using the signer's certificate path and the
 timestamp, if present.

Overrides:
hashCode in class Object
Returns:
a hash code value for this code signer.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
10,CodeSource,1,Certificate[] getCertificates(),True,,"

getCertificates
public final Certificate[] getCertificates()
Returns the certificates associated with this CodeSource.
 
 If this CodeSource object was created using the
 CodeSource(URL url, CodeSigner[] signers)
 constructor then its certificate chains are extracted and used to
 create an array of Certificate objects. Each signer certificate is
 followed by its supporting certificate chain (which may be empty).
 Each signer certificate and its supporting certificate chain is ordered
 bottom-to-top (i.e., with the signer certificate first and the (root)
 certificate authority last).

Returns:
A copy of the certificates array, or null if there is none.


"
10,CodeSource,2,URL getLocation(),True,,"

getLocation
public final URL getLocation()
Returns the location associated with this CodeSource.

Returns:
the location (URL).


"
10,CodeSource,3,boolean implies(CodeSource codesource),True,,"

implies
public boolean implies(CodeSource codesource)
Returns true if this CodeSource object ""implies"" the specified CodeSource.
 
 More specifically, this method makes the following checks.
 If any fail, it returns false. If they all succeed, it returns true.
 
 codesource must not be null.
  If this object's certificates are not null, then all
 of this object's certificates must be present in codesource's
 certificates.
  If this object's location (getLocation()) is not null, then the
 following checks are made against this object's location and
 codesource's:
   
 codesource's location must not be null.

       If this object's location
           equals codesource's location, then return true.

       This object's protocol (getLocation().getProtocol()) must be
           equal to codesource's protocol, ignoring case.

       If this object's host (getLocation().getHost()) is not null,
           then the SocketPermission
           constructed with this object's host must imply the
           SocketPermission constructed with codesource's host.

       If this object's port (getLocation().getPort()) is not
           equal to -1 (that is, if a port is specified), it must equal
           codesource's port or default port
           (codesource.getLocation().getDefaultPort()).

       If this object's file (getLocation().getFile()) doesn't equal
           codesource's file, then the following checks are made:
           If this object's file ends with ""/-"",
           then codesource's file must start with this object's
           file (exclusive the trailing ""-"").
           If this object's file ends with a ""/*"",
           then codesource's file must start with this object's
           file and must not have any further ""/"" separators.
           If this object's file doesn't end with a ""/"",
           then codesource's file must match this object's
           file with a '/' appended.

       If this object's reference (getLocation().getRef()) is
           not null, it must equal codesource's reference.

   


 For example, the codesource objects with the following locations
 and null certificates all imply
 the codesource with the location ""http://java.sun.com/classes/foo.jar""
 and null certificates:
 
     http:
     http://*.sun.com/classes/*
     http://java.sun.com/classes/-
     http://java.sun.com/classes/foo.jar
 

 Note that if this CodeSource has a null location and a null
 certificate chain, then it implies every other CodeSource.

Parameters:
codesource - CodeSource to compare against.
Returns:
true if the specified codesource is implied by this codesource,
 false if not.


"
10,CodeSource,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Tests for equality between the specified object and this
 object. Two CodeSource objects are considered equal if their
 locations are of identical value and if their signer certificate
 chains are of identical value. It is not required that
 the certificate chains be in the same order.

Overrides:
equals in class Object
Parameters:
obj - the object to test for equality with this object.
Returns:
true if the objects are considered equal, false otherwise.
See Also:
Object.hashCode(), 
HashMap


"
10,CodeSource,5,String toString(),True,,"

toString
public String toString()
Returns a string describing this CodeSource, telling its
 URL and certificates.

Overrides:
toString in class Object
Returns:
information about this CodeSource.


"
11,DigestInputStream,1,int read(),True,,"

read
public int read()
         throws IOException
Reads a byte, and updates the message digest (if the digest
 function is on).  That is, this method reads a byte from the
 input stream, blocking until the byte is actually read. If the
 digest function is on (see on), this method
 will then call update on the message digest associated
 with this stream, passing it the byte read.

Overrides:
read in class FilterInputStream
Returns:
the byte read.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
11,DigestInputStream,2,int read(byte[] b),False,,NULL
11,DigestInputStream,3,"int read(byte[] b, int off, int len)",True,,"

read
public int read(byte[] b,
                int off,
                int len)
         throws IOException
Reads into a byte array, and updates the message digest (if the
 digest function is on).  That is, this method reads up to
 len bytes from the input stream into the array
 b, starting at offset off. This method
 blocks until the data is actually
 read. If the digest function is on (see
 on), this method will then call update
 on the message digest associated with this stream, passing it
 the data.

Overrides:
read in class FilterInputStream
Parameters:
b - the array into which the data is read.
off - the starting offset into b of where the
 data should be placed.
len - the maximum number of bytes to be read from the input
 stream into b, starting at offset off.
Returns:
the actual number of bytes read. This is less than
 len if the end of the stream is reached prior to
 reading len bytes. -1 is returned if no bytes were
 read because the end of the stream had already been reached when
 the call was made.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
11,DigestInputStream,4,MessageDigest getMessageDigest(),True,,"

getMessageDigest
public MessageDigest getMessageDigest()
Returns the message digest associated with this stream.

Returns:
the message digest associated with this stream.
See Also:
setMessageDigest(java.security.MessageDigest)


"
11,DigestInputStream,5,void on(boolean on),True,,"

on
public void on(boolean on)
Turns the digest function on or off. The default is on.  When
 it is on, a call to one of the read methods results in an
 update on the message digest.  But when it is off, the message
 digest is not updated.

Parameters:
on - true to turn the digest function on, false to turn
 it off.


"
12,DigestOutputStream,1,void on(boolean on),True,,"

on
public void on(boolean on)
Turns the digest function on or off. The default is on.  When
 it is on, a call to one of the write methods results in an
 update on the message digest.  But when it is off, the message
 digest is not updated.

Parameters:
on - true to turn the digest function on, false to turn it
 off.


"
12,DigestOutputStream,2,void setMessageDigest(MessageDigest digest),True,,"

setMessageDigest
public void setMessageDigest(MessageDigest digest)
Associates the specified message digest with this stream.

Parameters:
digest - the message digest to be associated with this stream.
See Also:
getMessageDigest()


"
12,DigestOutputStream,3,MessageDigest getMessageDigest(),True,,"

getMessageDigest
public MessageDigest getMessageDigest()
Returns the message digest associated with this stream.

Returns:
the message digest associated with this stream.
See Also:
setMessageDigest(java.security.MessageDigest)


"
12,DigestOutputStream,4,void write(int b),True,,"

write
public void write(int b)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified byte, and in any case writes the byte
 to the output stream. That is, if the digest function is on
 (see on), this method calls
 update on the message digest associated with this
 stream, passing it the byte b. This method then
 writes the byte to the output stream, blocking until the byte
 is actually written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the byte to be used for updating and writing to the
 output stream.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte)


"
12,DigestOutputStream,5,"void write(byte[] b, int off, int len)",True,,"

write
public void write(byte[] b,
                  int off,
                  int len)
           throws IOException
Updates the message digest (if the digest function is on) using
 the specified subarray, and in any case writes the subarray to
 the output stream. That is, if the digest function is on (see
 on), this method calls update
 on the message digest associated with this stream, passing it
 the subarray specifications. This method then writes the subarray
 bytes to the output stream, blocking until the bytes are actually
 written.

Overrides:
write in class FilterOutputStream
Parameters:
b - the array containing the subarray to be used for updating
 and writing to the output stream.
off - the offset into b of the first byte to
 be updated and written.
len - the number of bytes of data to be updated and written
 from b, starting at offset off.
Throws:
IOException - if an I/O error occurs.
See Also:
MessageDigest.update(byte[], int, int)


"
13,DomainLoadStoreParameter,1,String getDomainName(),False,,NULL
13,DomainLoadStoreParameter,2,KeyStore getKeystore(),False,,NULL
13,DomainLoadStoreParameter,3,ProtectionParameter getProtectionParameter(),False,,NULL
13,DomainLoadStoreParameter,4,boolean isOverrideDefaultKeystore(),False,,NULL
13,DomainLoadStoreParameter,5,boolean isOverrideDefaultProtectionParameter(),False,,NULL
14,GuardedObject,1,Object getObject(),True,,"

getObject
public Object getObject()
                 throws SecurityException
Retrieves the guarded object, or throws an exception if access
 to the guarded object is denied by the guard.

Returns:
the guarded object.
Throws:
SecurityException - if access to the guarded object is
 denied.


"
14,GuardedObject,2,void checkGuard(Object guard),False,,NULL
14,GuardedObject,3,"GuardedObject(Object object, Guard guard)",False,,NULL
14,GuardedObject,4,void setObject(Object object),False,,NULL
14,GuardedObject,5,boolean equals(Object obj),False,,NULL
15,Identity,1,String getName(),True,,"

getName
public final String getName()
Deprecated. 
Returns this identity's name.

Specified by:
getName in interface Principal
Returns:
the name of this identity.


"
15,Identity,2,PublicKey getPublicKey(),True,,"

getPublicKey
public PublicKey getPublicKey()
Deprecated. 
Returns this identity's public key.

Returns:
the public key for this identity.
See Also:
setPublicKey(java.security.PublicKey)


"
15,Identity,3,Certificate[] certificates(),True,,"

certificates
public Certificate[] certificates()
Deprecated. 
Returns a copy of all the certificates for this identity.

Returns:
a copy of all the certificates for this identity.


"
15,Identity,4,void addCertificate(Certificate certificate),True,,"

addCertificate
public void addCertificate(Certificate certificate)
                    throws KeyManagementException
Deprecated. 
Adds a certificate for this identity. If the identity has a public
 key, the public key in the certificate must be the same, and if
 the identity does not have a public key, the identity's
 public key is set to be that specified in the certificate.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""addIdentityCertificate""
 as its argument to see if it's ok to add a certificate.

Parameters:
certificate - the certificate to be added.
Throws:
KeyManagementException - if the certificate is not valid,
 if the public key in the certificate being added conflicts with
 this identity's public key, or if another exception occurs.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 adding a certificate.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
15,Identity,5,void removeCertificate(Certificate certificate),True,,"

removeCertificate
public void removeCertificate(Certificate certificate)
                       throws KeyManagementException
Deprecated. 
Removes a certificate from this identity.

 First, if there is a security manager, its checkSecurityAccess
 method is called with ""removeIdentityCertificate""
 as its argument to see if it's ok to remove a certificate.

Parameters:
certificate - the certificate to be removed.
Throws:
KeyManagementException - if the certificate is
 missing, or if another exception occurs.
SecurityException - if a security manager exists and its
 checkSecurityAccess method doesn't allow
 removing a certificate.
See Also:
SecurityManager.checkSecurityAccess(java.lang.String)


"
16,IdentityScope,1,void addIdentity(Identity identity),True,,"

addIdentity
public abstract void addIdentity(Identity identity)
                          throws KeyManagementException
Deprecated. 
Adds an identity to this identity scope.

Parameters:
identity - the identity to be added.
Throws:
KeyManagementException - if the identity is not
 valid, a name conflict occurs, another identity has the same
 public key as the identity being added, or another exception
 occurs.


"
16,IdentityScope,2,Identity getIdentity(Principal principal),True,,"

getIdentity
public Identity getIdentity(Principal principal)
Deprecated. 
Retrieves the identity whose name is the same as that of the
 specified principal. (Note: Identity implements Principal.)

Parameters:
principal - the principal corresponding to the identity
 to be retrieved.
Returns:
the identity whose name is the same as that of the
 principal, or null if there are no identities of the same name
 in this scope.


"
16,IdentityScope,3,Identity getIdentity(String name),True,,"

getIdentity
public abstract Identity getIdentity(String name)
Deprecated. 
Returns the identity in this scope with the specified name (if any).

Parameters:
name - the name of the identity to be retrieved.
Returns:
the identity named name, or null if there are
 no identities named name in this scope.


"
16,IdentityScope,4,Enumeration<Identity> identities(),True,,"

identities
public abstract Enumeration<Identity> identities()
Deprecated. 
Returns an enumeration of all identities in this identity scope.

Returns:
an enumeration of all identities in this identity scope.


"
16,IdentityScope,5,void removeIdentity(Identity identity),True,,"

removeIdentity
public abstract void removeIdentity(Identity identity)
                             throws KeyManagementException
Deprecated. 
Removes an identity from this identity scope.

Parameters:
identity - the identity to be removed.
Throws:
KeyManagementException - if the identity is missing,
 or another exception occurs.


"
17,KeyFactory,1,PublicKey generatePublic(KeySpec keySpec),True,,"

generatePublic
public final PublicKey generatePublic(KeySpec keySpec)
                               throws InvalidKeySpecException
Generates a public key object from the provided key specification
 (key material).

Parameters:
keySpec - the specification (key material) of the public key.
Returns:
the public key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a public key.


"
17,KeyFactory,2,PrivateKey generatePrivate(KeySpec keySpec),True,,"

generatePrivate
public final PrivateKey generatePrivate(KeySpec keySpec)
                                 throws InvalidKeySpecException
Generates a private key object from the provided key specification
 (key material).

Parameters:
keySpec - the specification (key material) of the private key.
Returns:
the private key.
Throws:
InvalidKeySpecException - if the given key specification
 is inappropriate for this key factory to produce a private key.


"
17,KeyFactory,3,Key translateKey(Key key),True,,"

translateKey
public final Key translateKey(Key key)
                       throws InvalidKeyException
Translates a key object, whose provider may be unknown or potentially
 untrusted, into a corresponding key object of this key factory.

Parameters:
key - the key whose provider is unknown or untrusted.
Returns:
the translated key.
Throws:
InvalidKeyException - if the given key cannot be processed
 by this key factory.


"
17,KeyFactory,4,String getAlgorithm(),True,,"

getAlgorithm
public final String getAlgorithm()
Gets the name of the algorithm
 associated with this KeyFactory.

Returns:
the name of the algorithm associated with this
 KeyFactory


"
18,KeyFactorySpi,1,Key engineGeneratePublic(KeySpec keySpec),False,,NULL
18,KeyFactorySpi,2,Key engineGeneratePrivate(KeySpec keySpec),False,,NULL
18,KeyFactorySpi,3,"KeySpec engineGetKeySpec(Key key, Class keySpec)",False,,NULL
18,KeyFactorySpi,4,Key engineTranslateKey(Key key),True,,"

engineTranslateKey
protected abstract Key engineTranslateKey(Key key)
                                   throws InvalidKeyException
Translates a key object, whose provider may be unknown or
 potentially untrusted, into a corresponding key object of this key
 factory.

Parameters:
key - the key whose provider is unknown or untrusted.
Returns:
the translated key.
Throws:
InvalidKeyException - if the given key cannot be processed
 by this key factory.


"
18,KeyFactorySpi,5,void engineInit(KeySpec keySpec),False,,NULL
19,KeyPair,1,PublicKey getPublic(),True,,"

getPublic
public PublicKey getPublic()
Returns a reference to the public key component of this key pair.

Returns:
a reference to the public key.


"
19,KeyPair,2,PrivateKey getPrivate(),True,,"

getPrivate
public PrivateKey getPrivate()
Returns a reference to the private key component of this key pair.

Returns:
a reference to the private key.


"
19,KeyPair,3,String getAlgorithm(),False,,NULL
19,KeyPair,4,byte[] getEncoded(),False,,NULL
19,KeyPair,5,String getFormat(),False,,NULL
20,KeyPairGenerator,1,KeyPair generateKeyPair(),True,,"

generateKeyPair
public KeyPair generateKeyPair()
Generates a key pair.

 If this KeyPairGenerator has not been initialized explicitly,
 provider-specific defaults will be used for the size and other
 (algorithm-specific) values of the generated keys.

 This will generate a new key pair every time it is called.

 This method is functionally equivalent to
 genKeyPair.

Specified by:
generateKeyPair in class KeyPairGeneratorSpi
Returns:
the generated key pair


"
20,KeyPairGenerator,2,void initialize(int keysize),True,,"

initialize
public void initialize(int keysize)
Initializes the key pair generator for a certain keysize using
 a default parameter set and the SecureRandom
 implementation of the highest-priority installed provider as the source
 of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.)

Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGenerator object.


"
20,KeyPairGenerator,3,String getAlgorithm(),True,,"

getAlgorithm
public String getAlgorithm()
Returns the standard name of the algorithm for this key pair generator.
 See the KeyPairGenerator section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

Returns:
the standard string name of the algorithm.


"
20,KeyPairGenerator,4,Provider getProvider(),True,,"

getProvider
public final Provider getProvider()
Returns the provider of this key pair generator object.

Returns:
the provider of this key pair generator object


"
20,KeyPairGenerator,5,void initialize(AlgorithmParameterSpec params),True,,"

initialize
public void initialize(AlgorithmParameterSpec params)
                throws InvalidAlgorithmParameterException
Initializes the key pair generator using the specified parameter
 set and the SecureRandom
 implementation of the highest-priority installed provider as the source
 of randomness.
 (If none of the installed providers supply an implementation of
 SecureRandom, a system-provided source of randomness is
 used.).

 This concrete method has been added to this previously-defined
 abstract class.
 This method calls the KeyPairGeneratorSpi
 initialize method,
 passing it params and a source of randomness (obtained
 from the highest-priority installed provider or system-provided if none
 of the installed providers supply one).
 That initialize method always throws an
 UnsupportedOperationException if it is not overridden by the provider.

Parameters:
params - the parameter set used to generate the keys.
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this key pair generator.
Since:
1.2


"
21,KeyPairGeneratorSpi,1,KeyPair generateKeyPair(),True,,"

generateKeyPair
public abstract KeyPair generateKeyPair()
Generates a key pair. Unless an initialization method is called
 using a KeyPairGenerator interface, algorithm-specific defaults
 will be used. This will generate a new key pair every time it
 is called.

Returns:
the newly generated KeyPair


"
21,KeyPairGeneratorSpi,2,"void initialize(int keysize, SecureRandom random)",True,,"

initialize
public abstract void initialize(int keysize,
                                SecureRandom random)
Initializes the key pair generator for a certain keysize, using
 the default parameter set.

Parameters:
keysize - the keysize. This is an
 algorithm-specific metric, such as modulus length, specified in
 number of bits.
random - the source of randomness for this generator.
Throws:
InvalidParameterException - if the keysize is not
 supported by this KeyPairGeneratorSpi object.


"
21,KeyPairGeneratorSpi,3,"void initialize(AlgorithmParameterSpec params, SecureRandom random)",True,,"

initialize
public void initialize(AlgorithmParameterSpec params,
                       SecureRandom random)
                throws InvalidAlgorithmParameterException
Initializes the key pair generator using the specified parameter
 set and user-provided source of randomness.

 This concrete method has been added to this previously-defined
 abstract class. (For backwards compatibility, it cannot be abstract.)
 It may be overridden by a provider to initialize the key pair
 generator. Such an override
 is expected to throw an InvalidAlgorithmParameterException if
 a parameter is inappropriate for this key pair generator.
 If this method is not overridden, it always throws an
 UnsupportedOperationException.

Parameters:
params - the parameter set used to generate the keys.
random - the source of randomness for this generator.
Throws:
InvalidAlgorithmParameterException - if the given parameters
 are inappropriate for this key pair generator.
Since:
1.2


"
21,KeyPairGeneratorSpi,4,KeyPair generateKeyPair(AlgorithmParameterSpec params),False,,NULL
21,KeyPairGeneratorSpi,5,void initialize(int keysize),False,,NULL
22,KeyRep,1,String getFormat(),False,,NULL
22,KeyRep,2,String getAlgorithm(),False,,NULL
22,KeyRep,3,byte[] getEncoded(),False,,NULL
22,KeyRep,4,Object readResolve(),True,,"

readResolve
protected Object readResolve()
                      throws ObjectStreamException
Resolve the Key object.

  This method supports three Type/format combinations:
 
 Type.SECRET/""RAW"" - returns a SecretKeySpec object
 constructed using encoded key bytes and algorithm
  Type.PUBLIC/""X.509"" - gets a KeyFactory instance for
 the key algorithm, constructs an X509EncodedKeySpec with the
 encoded key bytes, and generates a public key from the spec
  Type.PRIVATE/""PKCS#8"" - gets a KeyFactory instance for
 the key algorithm, constructs a PKCS8EncodedKeySpec with the
 encoded key bytes, and generates a private key from the spec
 


Returns:
the resolved Key object
Throws:
ObjectStreamException - if the Type/format
  combination is unrecognized, if the algorithm, key format, or
  encoded key bytes are unrecognized/invalid, of if the
  resolution of the key fails for any reason


"
22,KeyRep,5,"KeyRep(KeyRep.Type type, String algorithm, String format, byte[] encoded)",False,,NULL
23,KeyStore,1,KeyStore getInstance(String type),True,,"

getInstance
public static KeyStore getInstance(String type)
                            throws KeyStoreException
Returns a keystore object of the specified type.

  This method traverses the list of registered security Providers,
 starting with the most preferred Provider.
 A new KeyStore object encapsulating the
 KeyStoreSpi implementation from the first
 Provider that supports the specified type is returned.

  Note that the list of registered providers may be retrieved via
 the Security.getProviders() method.

Parameters:
type - the type of keystore.
 See the KeyStore section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard keystore types.
Returns:
a keystore object of the specified type.
Throws:
KeyStoreException - if no Provider supports a
          KeyStoreSpi implementation for the
          specified type.
See Also:
Provider


"
23,KeyStore,2,"void load(InputStream stream, char[] password)",True,,"

load
public final void load(InputStream stream,
                       char[] password)
                throws IOException,
                       NoSuchAlgorithmException,
                       CertificateException
Loads this KeyStore from the given input stream.

 A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

 In order to create an empty keystore, or if the keystore cannot
 be initialized from a stream, pass null
 as the stream argument.

  Note that if this keystore has already been loaded, it is
 reinitialized and loaded again from the given input stream.

Parameters:
stream - the input stream from which the keystore is loaded,
 or null
password - the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or null
Throws:
IOException - if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the cause of the
 IOException should be an
 UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
 keystore could not be loaded


"
23,KeyStore,3,"void store(OutputStream stream, char[] password)",True,,"

store
public final void store(OutputStream stream,
                        char[] password)
                 throws KeyStoreException,
                        IOException,
                        NoSuchAlgorithmException,
                        CertificateException
Stores this keystore to the given output stream, and protects its
 integrity with the given password.

Parameters:
stream - the output stream to which this keystore is written.
password - the password to generate the keystore integrity check
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
 algorithm could not be found
CertificateException - if any of the certificates included in
 the keystore data could not be stored


"
23,KeyStore,4,Enumeration<String> aliases(),True,,"

aliases
public final Enumeration<String> aliases()
                                  throws KeyStoreException
Lists all the alias names of this keystore.

Returns:
enumeration of the alias names
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).


"
23,KeyStore,5,"Key getKey(String alias, char[] password)",True,,"

getKey
public final Key getKey(String alias,
                        char[] password)
                 throws KeyStoreException,
                        NoSuchAlgorithmException,
                        UnrecoverableKeyException
Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry or SecretKeyEntry.

Parameters:
alias - the alias name
password - the password for recovering the key
Returns:
the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.
Throws:
KeyStoreException - if the keystore has not been initialized
 (loaded).
NoSuchAlgorithmException - if the algorithm for recovering the
 key cannot be found
UnrecoverableKeyException - if the key cannot be recovered
 (e.g., the given password is wrong).


"
24,KeyStore.Builder,1,KeyStore getKeyStore(),True,,"

getKeyStore
public abstract KeyStore getKeyStore()
                              throws KeyStoreException
Returns the KeyStore described by this object.

Returns:
the KeyStore described by this object
Throws:
KeyStoreException - if an error occurred during the
   operation, for example if the KeyStore could not be
   instantiated or loaded


"
24,KeyStore.Builder,2,Provider getProvider(),False,,NULL
24,KeyStore.Builder,3,ProtectionParameter getProtectionParameter(),False,,NULL
24,KeyStore.Builder,4,KeyStore.ProtectionParameter getKeyProtectionParameter(KeyStore.ProtectionParameter parameter),False,,NULL
24,KeyStore.Builder,5,KeyStore.Builder newInstance(KeyStore.ProtectionParameter protection),False,,NULL
25,KeyStore.CallbackHandlerProtection,1,CallbackHandler getCallbackHandler(),True,,"

getCallbackHandler
public CallbackHandler getCallbackHandler()
Returns the CallbackHandler.

Returns:
the CallbackHandler.


"
25,KeyStore.CallbackHandlerProtection,2,String toString(),False,,NULL
25,KeyStore.CallbackHandlerProtection,3,boolean equals(Object obj),False,,NULL
25,KeyStore.CallbackHandlerProtection,4,int hashCode(),False,,NULL
25,KeyStore.CallbackHandlerProtection,5,Class<?> getClass(),False,,NULL
26,KeyStore.PasswordProtection,1,char[] getPassword(),True,,"

getPassword
public char[] getPassword()
Gets the password.

 Note that this method returns a reference to the password.
 If a clone of the array is created it is the caller's
 responsibility to zero out the password information
 after it is no longer needed.

Returns:
the password, which may be null
Throws:
IllegalStateException - if the password has
              been cleared (destroyed)
See Also:
destroy()


"
26,KeyStore.PasswordProtection,2,void destroy(),True,,"

destroy
public void destroy()
             throws DestroyFailedException
Clears the password.

Specified by:
destroy in interface Destroyable
Throws:
DestroyFailedException - if this method was unable
      to clear the password


"
26,KeyStore.PasswordProtection,3,boolean isDestroyed(),True,,"

isDestroyed
public boolean isDestroyed()
Determines if password has been cleared.

Specified by:
isDestroyed in interface Destroyable
Returns:
true if the password has been cleared, false otherwise


"
26,KeyStore.PasswordProtection,4,void refresh(),False,,NULL
26,KeyStore.PasswordProtection,5,Object clone(),False,,NULL
27,KeyStore.PrivateKeyEntry,1,Certificate[] getCertificateChain(),True,,"

getCertificateChain
public Certificate[] getCertificateChain()
Gets the Certificate chain from this entry.

  The stored chain is cloned before being returned.

Returns:
an array of Certificates corresponding
      to the certificate chain for the public key.
      If the certificates are of type X.509,
      the runtime type of the returned array is
      X509Certificate[].


"
27,KeyStore.PrivateKeyEntry,2,PrivateKey getPrivateKey(),True,,"

getPrivateKey
public PrivateKey getPrivateKey()
Gets the PrivateKey from this entry.

Returns:
the PrivateKey from this entry


"
27,KeyStore.PrivateKeyEntry,3,String toString(),True,,"

toString
public String toString()
Returns a string representation of this PrivateKeyEntry.

Overrides:
toString in class Object
Returns:
a string representation of this PrivateKeyEntry.


"
27,KeyStore.PrivateKeyEntry,4,boolean equals(Object obj),False,,NULL
27,KeyStore.PrivateKeyEntry,5,int hashCode(),False,,NULL
28,KeyStore.SecretKeyEntry,1,SecretKey getSecretKey(),True,,"

getSecretKey
public SecretKey getSecretKey()
Gets the SecretKey from this entry.

Returns:
the SecretKey from this entry


"
28,KeyStore.SecretKeyEntry,2,String getAlgorithm(),False,,NULL
28,KeyStore.SecretKeyEntry,3,byte[] getEncoded(),False,,NULL
28,KeyStore.SecretKeyEntry,4,String getFormat(),False,,NULL
28,KeyStore.SecretKeyEntry,5,void setSecretKey(SecretKey key),False,,NULL
29,KeyStore.TrustedCertificateEntry,1,Certificate getTrustedCertificate(),True,,"

getTrustedCertificate
public Certificate getTrustedCertificate()
Gets the trusted Certficate from this entry.

Returns:
the trusted Certificate from this entry


"
29,KeyStore.TrustedCertificateEntry,2,void setTrustedCertificate(Certificate cert),False,,NULL
29,KeyStore.TrustedCertificateEntry,3,String toString(),True,,"

toString
public String toString()
Returns a string representation of this TrustedCertificateEntry.

Overrides:
toString in class Object
Returns:
a string representation of this TrustedCertificateEntry.


"
29,KeyStore.TrustedCertificateEntry,4,boolean equals(Object obj),False,,NULL
29,KeyStore.TrustedCertificateEntry,5,int hashCode(),False,,NULL
30,KeyStoreSpi,1,"Key engineGetKey(String alias, char[] password)",True,,"

engineGetKey
public abstract Key engineGetKey(String alias,
                                 char[] password)
                          throws NoSuchAlgorithmException,
                                 UnrecoverableKeyException
Returns the key associated with the given alias, using the given
 password to recover it.  The key must have been associated with
 the alias by a call to setKeyEntry,
 or by a call to setEntry with a
 PrivateKeyEntry or SecretKeyEntry.

Parameters:
alias - the alias name
password - the password for recovering the key
Returns:
the requested key, or null if the given alias does not exist
 or does not identify a key-related entry.
Throws:
NoSuchAlgorithmException - if the algorithm for recovering the
 key cannot be found
UnrecoverableKeyException - if the key cannot be recovered
 (e.g., the given password is wrong).


"
30,KeyStoreSpi,2,Enumeration<String> engineAliases(),True,,"

engineAliases
public abstract Enumeration<String> engineAliases()
Lists all the alias names of this keystore.

Returns:
enumeration of the alias names


"
30,KeyStoreSpi,3,"void engineLoad(InputStream stream, char[] password)",True,,"

engineLoad
public abstract void engineLoad(InputStream stream,
                                char[] password)
                         throws IOException,
                                NoSuchAlgorithmException,
                                CertificateException
Loads the keystore from the given input stream.

 A password may be given to unlock the keystore
 (e.g. the keystore resides on a hardware token device),
 or to check the integrity of the keystore data.
 If a password is not given for integrity checking,
 then integrity checking is not performed.

Parameters:
stream - the input stream from which the keystore is loaded,
 or null
password - the password used to check the integrity of
 the keystore, the password used to unlock the keystore,
 or null
Throws:
IOException - if there is an I/O or format problem with the
 keystore data, if a password is required but not given,
 or if the given password was incorrect. If the error is due to a
 wrong password, the cause of the
 IOException should be an
 UnrecoverableKeyException
NoSuchAlgorithmException - if the algorithm used to check
 the integrity of the keystore cannot be found
CertificateException - if any of the certificates in the
 keystore could not be loaded


"
30,KeyStoreSpi,4,"void engineStore(OutputStream stream, char[] password)",True,,"

engineStore
public abstract void engineStore(OutputStream stream,
                                 char[] password)
                          throws IOException,
                                 NoSuchAlgorithmException,
                                 CertificateException
Stores this keystore to the given output stream, and protects its
 integrity with the given password.

Parameters:
stream - the output stream to which this keystore is written.
password - the password to generate the keystore integrity check
Throws:
IOException - if there was an I/O problem with data
NoSuchAlgorithmException - if the appropriate data integrity
 algorithm could not be found
CertificateException - if any of the certificates included in
 the keystore data could not be stored


"
30,KeyStoreSpi,5,void engineDeleteEntry(String alias),True,,"

engineDeleteEntry
public abstract void engineDeleteEntry(String alias)
                                throws KeyStoreException
Deletes the entry identified by the given alias from this keystore.

Parameters:
alias - the alias name
Throws:
KeyStoreException - if the entry cannot be removed.


"
31,MessageDigest,1,void update(byte[] input),True,,"

update
public void update(byte[] input)
Updates the digest using the specified array of bytes.

Parameters:
input - the array of bytes.


"
31,MessageDigest,2,byte[] digest(),True,,"

digest
public byte[] digest()
Completes the hash computation by performing final operations
 such as padding. The digest is reset after this call is made.

Returns:
the array of bytes for the resulting hash value.


"
31,MessageDigest,3,"int digest(byte[] buf, int offset, int len)",True,,"

digest
public int digest(byte[] buf,
                  int offset,
                  int len)
           throws DigestException
Completes the hash computation by performing final operations
 such as padding. The digest is reset after this call is made.

Parameters:
buf - output buffer for the computed digest
offset - offset into the output buffer to begin storing the digest
len - number of bytes within buf allotted for the digest
Returns:
the number of bytes placed into buf
Throws:
DigestException - if an error occurs.


"
31,MessageDigest,4,void reset(),True,,"

reset
public void reset()
Resets the digest for further use.

"
31,MessageDigest,5,String getAlgorithm(),True,,"

getAlgorithm
public final String getAlgorithm()
Returns a string that identifies the algorithm, independent of
 implementation details. The name should be a standard
 Java Security name (such as ""SHA-256"").
 See the MessageDigest section in the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

Returns:
the name of the algorithm


"
32,MessageDigestSpi,1,void engineUpdate(byte input),True,,"

engineUpdate
protected abstract void engineUpdate(byte input)
Updates the digest using the specified byte.

Parameters:
input - the byte to use for the update.


"
32,MessageDigestSpi,2,"void engineUpdate(byte[] input, int offset, int len)",True,,"

engineUpdate
protected abstract void engineUpdate(byte[] input,
                                     int offset,
                                     int len)
Updates the digest using the specified array of bytes,
 starting at the specified offset.

Parameters:
input - the array of bytes to use for the update.
offset - the offset to start from in the array of bytes.
len - the number of bytes to use, starting at
 offset.


"
32,MessageDigestSpi,3,byte[] engineDigest(),True,,"

engineDigest
protected abstract byte[] engineDigest()
Completes the hash computation by performing final
 operations such as padding. Once engineDigest has
 been called, the engine should be reset (see
 engineReset).
 Resetting is the responsibility of the
 engine implementor.

Returns:
the array of bytes for the resulting hash value.


"
32,MessageDigestSpi,4,"int engineDigest(byte[] buf, int offset, int len)",True,,"

engineDigest
protected int engineDigest(byte[] buf,
                           int offset,
                           int len)
                    throws DigestException
Completes the hash computation by performing final
 operations such as padding. Once engineDigest has
 been called, the engine should be reset (see
 engineReset).
 Resetting is the responsibility of the
 engine implementor.

 This method should be abstract, but we leave it concrete for
 binary compatibility.  Knowledgeable providers should override this
 method.

Parameters:
buf - the output buffer in which to store the digest
offset - offset to start from in the output buffer
len - number of bytes within buf allotted for the digest.
 Both this default implementation and the SUN provider do not
 return partial digests.  The presence of this parameter is solely
 for consistency in our API's.  If the value of this parameter is less
 than the actual digest length, the method will throw a DigestException.
 This parameter is ignored if its value is greater than or equal to
 the actual digest length.
Returns:
the length of the digest stored in the output buffer.
Throws:
DigestException - if an error occurs.
Since:
1.2


"
32,MessageDigestSpi,5,void engineReset(),True,,"

engineReset
protected abstract void engineReset()
Resets the digest for further use.

"
33,Permission,1,String getActions(),True,,"

getActions
public abstract String getActions()
Returns the actions as a String. This is abstract
 so subclasses can defer creating a String representation until
 one is needed. Subclasses should always return actions in what they
 consider to be their
 canonical form. For example, two FilePermission objects created via
 the following:

 
   perm1 = new FilePermission(p1,""read,write"");
   perm2 = new FilePermission(p2,""write,read"");
 

 both return
 ""read,write"" when the getActions method is invoked.

Returns:
the actions of this Permission.


"
33,Permission,2,boolean implies(Permission permission),True,,"

implies
public abstract boolean implies(Permission permission)
Checks if the specified permission's actions are ""implied by""
 this object's actions.
 
 This must be implemented by subclasses of Permission, as they are the
 only ones that can impose semantics on a Permission object.

 The implies method is used by the AccessController to determine
 whether or not a requested permission is implied by another permission that
 is known to be valid in the current execution context.

Parameters:
permission - the permission to check against.
Returns:
true if the specified permission is implied by this object,
 false if not.


"
33,Permission,3,PermissionCollection newPermissionCollection(),True,,"

newPermissionCollection
public PermissionCollection newPermissionCollection()
Returns an empty PermissionCollection for a given Permission object, or null if
 one is not defined. Subclasses of class Permission should
 override this if they need to store their permissions in a particular
 PermissionCollection object in order to provide the correct semantics
 when the PermissionCollection.implies method is called.
 If null is returned,
 then the caller of this method is free to store permissions of this
 type in any PermissionCollection they choose (one that uses a Hashtable,
 one that uses a Vector, etc).

Returns:
a new PermissionCollection object for this type of Permission, or
 null if one is not defined.


"
33,Permission,4,boolean equals(Object obj),True,,"

equals
public abstract boolean equals(Object obj)
Checks two Permission objects for equality.
 
 Do not use the equals method for making access control
 decisions; use the implies method.

Overrides:
equals in class Object
Parameters:
obj - the object we are testing for equality with this object.
Returns:
true if both Permission objects are equivalent.
See Also:
Object.hashCode(), 
HashMap


"
33,Permission,5,int hashCode(),True,,"

hashCode
public abstract int hashCode()
Returns the hash code value for this Permission object.
 
 The required hashCode behavior for Permission Objects is
 the following:
 
Whenever it is invoked on the same Permission object more than
     once during an execution of a Java application, the
     hashCode method
     must consistently return the same integer. This integer need not
     remain consistent from one execution of an application to another
     execution of the same application.
 If two Permission objects are equal according to the
     equals
     method, then calling the hashCode method on each of the
     two Permission objects must produce the same integer result.
 

Overrides:
hashCode in class Object
Returns:
a hash code value for this object.
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
34,PermissionCollection,1,void add(Permission permission),True,,"

add
public abstract void add(Permission permission)
Adds a permission object to the current collection of permission objects.

Parameters:
permission - the Permission object to add.
Throws:
SecurityException - -  if this PermissionCollection object
                                 has been marked readonly
IllegalArgumentException - - if this PermissionCollection
                object is a homogeneous collection and the permission
                is not of the correct type.


"
34,PermissionCollection,2,boolean implies(Permission permission),True,,"

implies
public abstract boolean implies(Permission permission)
Checks to see if the specified permission is implied by
 the collection of Permission objects held in this PermissionCollection.

Parameters:
permission - the Permission object to compare.
Returns:
true if ""permission"" is implied by the  permissions in
 the collection, false if not.


"
34,PermissionCollection,3,Enumeration<Permission> elements(),True,,"

elements
public abstract Enumeration<Permission> elements()
Returns an enumeration of all the Permission objects in the collection.

Returns:
an enumeration of all the Permissions.


"
34,PermissionCollection,4,void setReadOnly(),True,,"

setReadOnly
public void setReadOnly()
Marks this PermissionCollection object as ""readonly"". After
 a PermissionCollection object
 is marked as readonly, no new Permission objects can be added to it
 using add.

"
34,PermissionCollection,5,int size(),False,,NULL
35,Permissions,1,void add(Permission permission),True,,"

add
public void add(Permission permission)
Adds a permission object to the PermissionCollection for the class the
 permission belongs to. For example, if permission is a
 FilePermission, it is added to the FilePermissionCollection stored
 in this Permissions object.

 This method creates
 a new PermissionCollection object (and adds the permission to it)
 if an appropriate collection does not yet exist. 

Specified by:
add in class PermissionCollection
Parameters:
permission - the Permission object to add.
Throws:
SecurityException - if this Permissions object is
 marked as readonly.
See Also:
PermissionCollection.isReadOnly()


"
35,Permissions,2,void remove(Permission permission),False,,NULL
35,Permissions,3,boolean implies(Permission permission),True,,"

implies
public boolean implies(Permission permission)
Checks to see if this object's PermissionCollection for permissions of
 the specified permission's class implies the permissions
 expressed in the permission object. Returns true if the
 combination of permissions in the appropriate PermissionCollection
 (e.g., a FilePermissionCollection for a FilePermission) together
 imply the specified permission.

 For example, suppose there is a FilePermissionCollection in this
 Permissions object, and it contains one FilePermission that specifies
 ""read"" access for  all files in all subdirectories of the ""/tmp""
 directory, and another FilePermission that specifies ""write"" access
 for all files in the ""/tmp/scratch/foo"" directory.
 Then if the implies method
 is called with a permission specifying both ""read"" and ""write"" access
 to files in the ""/tmp/scratch/foo"" directory, true is
 returned.

 Additionally, if this PermissionCollection contains the
 AllPermission, this method will always return true.
 

Specified by:
implies in class PermissionCollection
Parameters:
permission - the Permission object to check.
Returns:
true if ""permission"" is implied by the permissions in the
 PermissionCollection it
 belongs to, false if not.


"
35,Permissions,4,Enumeration<Permission> elements(),True,,"

elements
public Enumeration<Permission> elements()
Returns an enumeration of all the Permission objects in all the
 PermissionCollections in this Permissions object.

Specified by:
elements in class PermissionCollection
Returns:
an enumeration of all the Permissions.


"
35,Permissions,5,int size(),False,,NULL
36,PKCS12Attribute,1,String getName(),True,,"

getName
public String getName()
Returns the attribute's ASN.1 Object Identifier represented as a
 list of dot-separated integers.

Specified by:
getName in interface KeyStore.Entry.Attribute
Returns:
the attribute's identifier


"
36,PKCS12Attribute,2,byte[] getEncoded(),True,,"

getEncoded
public byte[] getEncoded()
Returns the attribute's ASN.1 DER encoding.

Returns:
a clone of the attribute's DER encoding


"
36,PKCS12Attribute,3,Object clone(),False,,NULL
36,PKCS12Attribute,4,boolean equals(Object obj),True,,"

equals
public boolean equals(Object obj)
Compares this PKCS12Attribute and a specified object for
 equality.

Overrides:
equals in class Object
Parameters:
obj - the comparison object
Returns:
true if obj is a PKCS12Attribute and
 their DER encodings are equal.
See Also:
Object.hashCode(), 
HashMap


"
36,PKCS12Attribute,5,int hashCode(),True,,"

hashCode
public int hashCode()
Returns the hashcode for this PKCS12Attribute.
 The hash code is computed from its DER encoding.

Overrides:
hashCode in class Object
Returns:
the hash code
See Also:
Object.equals(java.lang.Object), 
System.identityHashCode(java.lang.Object)


"
37,Policy,1,PermissionCollection getPermissions(ProtectionDomain domain),True,,"

getPermissions
public PermissionCollection getPermissions(ProtectionDomain domain)
Return a PermissionCollection object containing the set of
 permissions granted to the specified ProtectionDomain.

  Applications are discouraged from calling this method
 since this operation may not be supported by all policy implementations.
 Applications should rely on the implies method
 to perform policy checks.

  The default implementation of this method first retrieves
 the permissions returned via getPermissions(CodeSource)
 (the CodeSource is taken from the specified ProtectionDomain),
 as well as the permissions located inside the specified ProtectionDomain.
 All of these permissions are then combined and returned in a new
 PermissionCollection object.  If getPermissions(CodeSource)
 returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method
 returns the permissions contained inside the specified ProtectionDomain
 in a new PermissionCollection object.

  This method can be overridden if the policy implementation
 supports returning a set of permissions granted to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified ProtectionDomain.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
Since:
1.4


"
37,Policy,2,void refresh(),True,,"

refresh
public void refresh()
Refreshes/reloads the policy configuration. The behavior of this method
 depends on the implementation. For example, calling refresh
 on a file-based policy will cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the policy implementation.

"
37,Policy,3,void refreshPolicy(),False,,NULL
37,Policy,4,void addPolicy(Policy.Parameters params),False,,NULL
37,Policy,5,void removePolicy(Policy.Parameters params),False,,NULL
38,PolicySpi,1,PermissionCollection engineGetPermissions(ProtectionDomain domain),True,,"

engineGetPermissions
protected PermissionCollection engineGetPermissions(ProtectionDomain domain)
Return a PermissionCollection object containing the set of
 permissions granted to the specified ProtectionDomain.

  The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
 overridden if the policy implementation can return a set of
 permissions granted to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified ProtectionDomain.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.


"
38,PolicySpi,2,"boolean engineImplies(ProtectionDomain domain, Permission permission)",True,,"

engineImplies
protected abstract boolean engineImplies(ProtectionDomain domain,
                                         Permission permission)
Check whether the policy has granted a Permission to a ProtectionDomain.

Parameters:
domain - the ProtectionDomain to check.
permission - check whether this permission is granted to the
          specified domain.
Returns:
boolean true if the permission is granted to the domain.


"
38,PolicySpi,3,void engineRefresh(),True,,"

engineRefresh
protected void engineRefresh()
Refreshes/reloads the policy configuration. The behavior of this method
 depends on the implementation. For example, calling refresh
 on a file-based policy will cause the file to be re-read.

  The default implementation of this method does nothing.
 This method should be overridden if a refresh operation is supported
 by the policy implementation.

"
38,PolicySpi,4,PermissionCollection engineGetPermissions(CodeSource codesource),True,,"

engineGetPermissions
protected PermissionCollection engineGetPermissions(CodeSource codesource)
Return a PermissionCollection object containing the set of
 permissions granted to the specified CodeSource.

  The default implementation of this method returns
 Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
 overridden if the policy implementation can return a set of
 permissions granted to a CodeSource.

Parameters:
codesource - the CodeSource to which the returned
          PermissionCollection has been granted.
Returns:
a set of permissions granted to the specified CodeSource.
          If this operation is supported, the returned
          set of permissions must be a new mutable instance
          and it must support heterogeneous Permission types.
          If this operation is not supported,
          Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.


"
38,PolicySpi,5,void engineSetPolicy(Policy policy),False,,NULL
39,ProtectionDomain,1,CodeSource getCodeSource(),True,,"

getCodeSource
public final CodeSource getCodeSource()
Returns the CodeSource of this domain.

Returns:
the CodeSource of this domain which may be null.
Since:
1.2


"
39,ProtectionDomain,2,PermissionCollection getPermissions(),True,,"

getPermissions
public final PermissionCollection getPermissions()
Returns the static permissions granted to this domain.

Returns:
the static set of permissions for this domain which may be null.
See Also:
Policy.refresh(), 
Policy.getPermissions(ProtectionDomain)


"
39,ProtectionDomain,3,ClassLoader getClassLoader(),True,,"

getClassLoader
public final ClassLoader getClassLoader()
Returns the ClassLoader of this domain.

Returns:
the ClassLoader of this domain which may be null.
Since:
1.4


"
39,ProtectionDomain,4,Principal[] getPrincipals(),True,,"

getPrincipals
public final Principal[] getPrincipals()
Returns an array of principals for this domain.

Returns:
a non-null array of principals for this domain.
 Returns a new array each time this method is called.
Since:
1.4


"
39,ProtectionDomain,5,boolean implies(Permission permission),True,,"

implies
public boolean implies(Permission permission)
Check and see if this ProtectionDomain implies the permissions
 expressed in the Permission object.
 
 The set of permissions evaluated is a function of whether the
 ProtectionDomain was constructed with a static set of permissions
 or it was bound to a dynamically mapped set of permissions.
 
 If the ProtectionDomain was constructed to a
 statically bound PermissionCollection then the permission will
 only be checked against the PermissionCollection supplied at
 construction.
 
 However, if the ProtectionDomain was constructed with
 the constructor variant which supports
 dynamically binding
 permissions, then the permission will be checked against the
 combination of the PermissionCollection supplied at construction and
 the current Policy binding.
 

Parameters:
permission - the Permission object to check.
Returns:
true if ""permission"" is implicit to this ProtectionDomain.


"
40,Provider,1,String getName(),True,,"

getName
public String getName()
Returns the name of this provider.

Returns:
the name of this provider.


"
40,Provider,2,double getVersion(),True,,"

getVersion
public double getVersion()
Returns the version number for this provider.

Returns:
the version number for this provider.


"
40,Provider,3,Set<Service> getServices(),False,,NULL
40,Provider,4,"Service getService(String type, String algorithm)",False,,NULL
40,Provider,5,Object get(Object key),True,,"

get
public Object get(Object key)
Description copied from class: Hashtable
Returns the value to which the specified key is mapped,
 or null if this map contains no mapping for the key.

 More formally, if this map contains a mapping from a key
 k to a value v such that (key.equals(k)),
 then this method returns v; otherwise it returns
 null.  (There can be at most one such mapping.)

Specified by:
get in interface Map<Object,Object>
Overrides:
get in class Hashtable<Object,Object>
Parameters:
key - the key whose associated value is to be returned
Returns:
the value to which the specified key is mapped, or
         null if this map contains no mapping for the key
See Also:
Hashtable.put(Object, Object)


"
41,Provider.Service,1,String getType(),True,,"

getType
public final String getType()
Get the type of this service. For example, MessageDigest.

Returns:
the type of this service


"
41,Provider.Service,2,String getAlgorithm(),True,,"

getAlgorithm
public final String getAlgorithm()
Return the name of the algorithm of this service. For example,
 SHA-1.

Returns:
the algorithm of this service


"
41,Provider.Service,3,String getClassName(),True,,"

getClassName
public final String getClassName()
Return the name of the class implementing this service.

Returns:
the name of the class implementing this service


"
41,Provider.Service,4,String getAttribute(String name),True,,"

getAttribute
public final String getAttribute(String name)
Return the value of the specified attribute or null if this
 attribute is not set for this Service.

Parameters:
name - the name of the requested attribute
Returns:
the value of the specified attribute or null if the
         attribute is not present
Throws:
NullPointerException - if name is null


"
41,Provider.Service,5,Set<String> getAttributeNames(),False,,NULL
42,SecureClassLoader,1,"Class<?> defineClass(String name, byte[] b, int off, int len)",False,,NULL
42,SecureClassLoader,2,"Class<?> defineClass(String name, ByteBuffer b, ProtectionDomain protectionDomain)",False,,NULL
42,SecureClassLoader,3,"Class<?> defineClass(String name, byte[] b, int off, int len, CodeSource cs)",True,,"

defineClass
protected final Class<?> defineClass(String name,
                                     byte[] b,
                                     int off,
                                     int len,
                                     CodeSource cs)
Converts an array of bytes into an instance of class Class,
 with an optional CodeSource. Before the
 class can be used it must be resolved.
 
 If a non-null CodeSource is supplied a ProtectionDomain is
 constructed and associated with the class being defined.
 

Parameters:
name - the expected name of the class, or null
                  if not known, using '.' and not '/' as the separator
                  and without a trailing "".class"" suffix.
b - the bytes that make up the class data. The bytes in
             positions off through off+len-1
             should have the format of a valid class file as defined by
             The Java™ Virtual Machine Specification.
off - the start offset in b of the class data
len - the length of the class data
cs - the associated CodeSource, or null if none
Returns:
the Class object created from the data,
         and optional CodeSource.
Throws:
ClassFormatError - if the data did not contain a valid class
IndexOutOfBoundsException - if either off or
             len is negative, or if
             off+len is greater than b.length.
SecurityException - if an attempt is made to add this class
             to a package that contains classes that were signed by
             a different set of certificates than this class, or if
             the class name begins with ""java."".


"
42,SecureClassLoader,4,"Class<?> defineClass(String name, byte[] b, int off, int len, ProtectionDomain protectionDomain)",False,,NULL
42,SecureClassLoader,5,"Class<?> defineClass(String name, byte[] b, CodeSource cs)",False,,NULL
43,SecureRandom,1,void nextBytes(byte[] bytes),True,,"

nextBytes
public void nextBytes(byte[] bytes)
Generates a user-specified number of random bytes.

  If a call to setSeed had not occurred previously,
 the first call to this method forces this SecureRandom object
 to seed itself.  This self-seeding will not occur if
 setSeed was previously called.

Overrides:
nextBytes in class Random
Parameters:
bytes - the array to be filled in with random bytes.


"
43,SecureRandom,2,int nextInt(),False,,NULL
43,SecureRandom,3,long nextLong(),False,,NULL
43,SecureRandom,4,double nextDouble(),False,,NULL
43,SecureRandom,5,void setSeed(byte[] seed),True,,"

setSeed
public void setSeed(byte[] seed)
Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

Parameters:
seed - the seed.
See Also:
getSeed(int)


"
44,SecureRandomSpi,1,byte[] engineGenerateSeed(int numBytes),True,,"

engineGenerateSeed
protected abstract byte[] engineGenerateSeed(int numBytes)
Returns the given number of seed bytes.  This call may be used to
 seed other random number generators.

Parameters:
numBytes - the number of seed bytes to generate.
Returns:
the seed bytes.


"
44,SecureRandomSpi,2,void engineSetSeed(byte[] seed),True,,"

engineSetSeed
protected abstract void engineSetSeed(byte[] seed)
Reseeds this random object. The given seed supplements, rather than
 replaces, the existing seed. Thus, repeated calls are guaranteed
 never to reduce randomness.

Parameters:
seed - the seed.


"
44,SecureRandomSpi,3,void engineNextBytes(byte[] bytes),True,,"

engineNextBytes
protected abstract void engineNextBytes(byte[] bytes)
Generates a user-specified number of random bytes.

  If a call to engineSetSeed had not occurred previously,
 the first call to this method forces this SecureRandom implementation
 to seed itself.  This self-seeding will not occur if
 engineSetSeed was previously called.

Parameters:
bytes - the array to be filled in with random bytes.


"
44,SecureRandomSpi,4,void engineSetSeed(long seed),False,,NULL
44,SecureRandomSpi,5,"void engineNextBytes(byte[] bytes, int offset, int len)",False,,NULL
45,Security,1,void addProvider(Provider provider),False,,NULL
45,Security,2,"String getAlgorithmProperty(String algName, String propName)",True,,"

getAlgorithmProperty
@Deprecated
public static String getAlgorithmProperty(String algName,
                                                      String propName)
Deprecated. This method used to return the value of a proprietary
 property in the master file of the ""SUN"" Cryptographic Service
 Provider in order to determine how to parse algorithm-specific
 parameters. Use the new provider-based and algorithm-independent
 AlgorithmParameters and KeyFactory engine
 classes (introduced in the J2SE version 1.2 platform) instead.
Gets a specified property for an algorithm. The algorithm name
 should be a standard name. See the 
 Java Cryptography Architecture Standard Algorithm Name Documentation
 for information about standard algorithm names.

 One possible use is by specialized algorithm parsers, which may map
 classes to algorithms which they understand (much like Key parsers
 do).

Parameters:
algName - the algorithm name.
propName - the name of the property to get.
Returns:
the value of the specified property.


"
45,Security,3,Provider getProvider(String name),True,,"

getProvider
public static Provider getProvider(String name)
Returns the provider installed with the specified name, if
 any. Returns null if no provider with the specified name is
 installed or if name is null.

Parameters:
name - the name of the provider to get.
Returns:
the provider of the specified name.
See Also:
removeProvider(java.lang.String), 
addProvider(java.security.Provider)


"
45,Security,4,String getProperty(String key),True,,"

getProperty
public static String getProperty(String key)
Gets a security property value.

 First, if there is a security manager, its
 checkPermission  method is called with a
 java.security.SecurityPermission(""getProperty.""+key)
 permission to see if it's ok to retrieve the specified
 security property value..

Parameters:
key - the key of the property being retrieved.
Returns:
the value of the security property corresponding to key.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies
          access to retrieve the specified security property value
NullPointerException - is key is null
See Also:
setProperty(java.lang.String, java.lang.String), 
SecurityPermission


"
45,Security,5,"void setProperty(String key, String datum)",True,,"

setProperty
public static void setProperty(String key,
                               String datum)
Sets a security property value.

 First, if there is a security manager, its
 checkPermission method is called with a
 java.security.SecurityPermission(""setProperty.""+key)
 permission to see if it's ok to set the specified
 security property value.

Parameters:
key - the name of the property to be set.
datum - the value of the property to be set.
Throws:
SecurityException - if a security manager exists and its SecurityManager.checkPermission(java.security.Permission) method
          denies access to set the specified security property value
NullPointerException - if key or datum is null
See Also:
getProperty(java.lang.String), 
SecurityPermission


"
46,SecurityPermission,1,String getName(),False,,NULL
46,SecurityPermission,2,boolean implies(Permission permission),False,,NULL
46,SecurityPermission,3,int hashCode(),False,,NULL
46,SecurityPermission,4,boolean equals(Object obj),False,,NULL
46,SecurityPermission,5,String getActions(),False,,NULL
47,Signature,1,void initSign(PrivateKey privateKey),True,,"

initSign
public final void initSign(PrivateKey privateKey)
                    throws InvalidKeyException
Initialize this object for signing. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
privateKey - the private key of the identity whose signature
 is going to be generated.
Throws:
InvalidKeyException - if the key is invalid.


"
47,Signature,2,void initVerify(PublicKey publicKey),True,,"

initVerify
public final void initVerify(PublicKey publicKey)
                      throws InvalidKeyException
Initializes this object for verification. If this method is called
 again with a different argument, it negates the effect
 of this call.

Parameters:
publicKey - the public key of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the key is invalid.


"
47,Signature,3,void update(byte[] data),True,,"

update
public final void update(byte[] data)
                  throws SignatureException
Updates the data to be signed or verified, using the specified
 array of bytes.

Parameters:
data - the byte array to use for the update.
Throws:
SignatureException - if this signature object is not
 initialized properly.


"
47,Signature,4,byte[] sign(),True,,"

sign
public final byte[] sign()
                  throws SignatureException
Returns the signature bytes of all the data updated.
 The format of the signature depends on the underlying
 signature scheme.

 A call to this method resets this signature object to the state
 it was in when previously initialized for signing via a
 call to initSign(PrivateKey). That is, the object is
 reset and available to generate another signature from the same
 signer, if desired, via new calls to update and
 sign.

Returns:
the signature bytes of the signing operation's result.
Throws:
SignatureException - if this signature object is not
 initialized properly or if this signature algorithm is unable to
 process the input data provided.


"
47,Signature,5,boolean verify(byte[] signature),True,,"

verify
public final boolean verify(byte[] signature)
                     throws SignatureException
Verifies the passed-in signature.

 A call to this method resets this signature object to the state
 it was in when previously initialized for verification via a
 call to initVerify(PublicKey). That is, the object is
 reset and available to verify another signature from the identity
 whose public key was specified in the call to initVerify.

Parameters:
signature - the signature bytes to be verified.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if this signature object is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.


"
48,SignatureSpi,1,void engineInitVerify(PublicKey publicKey),True,,"

engineInitVerify
protected abstract void engineInitVerify(PublicKey publicKey)
                                  throws InvalidKeyException
Initializes this signature object with the specified
 public key for verification operations.

Parameters:
publicKey - the public key of the identity whose signature is
 going to be verified.
Throws:
InvalidKeyException - if the key is improperly
 encoded, parameters are missing, and so on.


"
48,SignatureSpi,2,void engineInitSign(PrivateKey privateKey),True,,"

engineInitSign
protected abstract void engineInitSign(PrivateKey privateKey)
                                throws InvalidKeyException
Initializes this signature object with the specified
 private key for signing operations.

Parameters:
privateKey - the private key of the identity whose signature
 will be generated.
Throws:
InvalidKeyException - if the key is improperly
 encoded, parameters are missing, and so on.


"
48,SignatureSpi,3,byte[] engineSign(),True,,"

engineSign
protected abstract byte[] engineSign()
                              throws SignatureException
Returns the signature bytes of all the data
 updated so far.
 The format of the signature depends on the underlying
 signature scheme.

Returns:
the signature bytes of the signing operation's result.
Throws:
SignatureException - if the engine is not
 initialized properly or if this signature algorithm is unable to
 process the input data provided.


"
48,SignatureSpi,4,boolean engineVerify(byte[] signature),True,,"

engineVerify
protected abstract boolean engineVerify(byte[] sigBytes)
                                 throws SignatureException
Verifies the passed-in signature.

Parameters:
sigBytes - the signature bytes to be verified.
Returns:
true if the signature was verified, false if not.
Throws:
SignatureException - if the engine is not
 initialized properly, the passed-in signature is improperly
 encoded or of the wrong type, if this signature algorithm is unable to
 process the input data provided, etc.


"
48,SignatureSpi,5,void engineUpdate(byte b),True,,"

engineUpdate
protected abstract void engineUpdate(byte b)
                              throws SignatureException
Updates the data to be signed or verified
 using the specified byte.

Parameters:
b - the byte to use for the update.
Throws:
SignatureException - if the engine is not initialized
 properly.


"
49,SignedObject,1,Object getObject(),True,,"

getObject
public Object getObject()
                 throws IOException,
                        ClassNotFoundException
Retrieves the encapsulated object.
 The encapsulated object is de-serialized before it is returned.

Returns:
the encapsulated object.
Throws:
IOException - if an error occurs during de-serialization
ClassNotFoundException - if an error occurs during
 de-serialization


"
49,SignedObject,2,"boolean verify(PublicKey verificationKey, Signature verificationEngine)",True,,"

verify
public boolean verify(PublicKey verificationKey,
                      Signature verificationEngine)
               throws InvalidKeyException,
                      SignatureException
Verifies that the signature in this SignedObject is the valid
 signature for the object stored inside, with the given
 verification key, using the designated verification engine.

Parameters:
verificationKey - the public key for verification.
verificationEngine - the signature verification engine.
Returns:
true if the signature
 is valid, false otherwise
Throws:
SignatureException - if signature verification failed.
InvalidKeyException - if the verification key is invalid.


"
49,SignedObject,3,byte[] getSignature(),True,,"

getSignature
public byte[] getSignature()
Retrieves the signature on the signed object, in the form of a
 byte array.

Returns:
the signature. Returns a new array each time this
 method is called.


"
49,SignedObject,4,String getAlgorithm(),True,,"

getAlgorithm
public String getAlgorithm()
Retrieves the name of the signature algorithm.

Returns:
the signature algorithm name.


"
49,SignedObject,5,boolean verify(PublicKey verificationKey),False,,NULL
50,Signer,1,void sign(byte[] data),False,,NULL
50,Signer,2,void update(byte b),False,,NULL
50,Signer,3,byte[] sign(),False,,NULL
50,Signer,4,void initVerify(PublicKey publicKey),False,,NULL
50,Signer,5,boolean verify(byte[] signature),False,,NULL
51,Timestamp,1,long getTimestamp(),False,,NULL
51,Timestamp,2,String getSignerName(),False,,NULL
51,Timestamp,3,byte[] getSignature(),False,,NULL
51,Timestamp,4,boolean isExpired(),False,,NULL
51,Timestamp,5,String getAlgorithm(),False,,NULL
52,UnresolvedPermission,1,String getActions(),True,,"

getActions
public String getActions()
Returns the canonical string representation of the actions,
 which currently is the empty string """", since there are no actions for
 an UnresolvedPermission. That is, the actions for the
 permission that will be created when this UnresolvedPermission
 is resolved may be non-null, but an UnresolvedPermission
 itself is never considered to have any actions.

Specified by:
getActions in class Permission
Returns:
the empty string """".


"
52,UnresolvedPermission,2,String getUnresolvedName(),True,,"

getUnresolvedName
public String getUnresolvedName()
Get the target name of the underlying permission that
 has not been resolved.

Returns:
the target name of the underlying permission that
          has not been resolved, or null,
          if there is no target name
Since:
1.5


"
52,UnresolvedPermission,3,String getUnresolvedActions(),True,,"

getUnresolvedActions
public String getUnresolvedActions()
Get the actions for the underlying permission that
 has not been resolved.

Returns:
the actions for the underlying permission that
          has not been resolved, or null
          if there are no actions
Since:
1.5


"
52,UnresolvedPermission,4,String getUnresolvedType(),True,,"

getUnresolvedType
public String getUnresolvedType()
Get the type (class name) of the underlying permission that
 has not been resolved.

Returns:
the type (class name) of the underlying permission that
  has not been resolved
Since:
1.5


"
52,UnresolvedPermission,5,String toString(),True,,"

toString
public String toString()
Returns a string describing this UnresolvedPermission.  The convention
 is to specify the class name, the permission name, and the actions, in
 the following format: '(unresolved ""ClassName"" ""name"" ""actions"")'.

Overrides:
toString in class Permission
Returns:
information about this UnresolvedPermission.


"
53,URIParameter,1,URIParameter(URI uri),False,,NULL
53,URIParameter,2,URI getURI(),True,,"

getURI
public URI getURI()
Returns the URI.

Returns:
uri the URI.


"
53,URIParameter,3,boolean equals(Object obj),False,,NULL
53,URIParameter,4,int hashCode(),False,,NULL
53,URIParameter,5,String toString(),False,,NULL
