Sample Number,ClassName,Snippet Number,Method,Exist
0,AtomicBoolean,1,boolean get(),True
0,AtomicBoolean,2,void set(boolean newValue),True
0,AtomicBoolean,3,boolean getAndSet(boolean newValue),True
0,AtomicBoolean,4,void lazySet(boolean newValue),True
0,AtomicBoolean,5,"boolean compareAndSet(boolean expectedValue, boolean newValue)",True
1,AtomicInteger,1,int get(),True
1,AtomicInteger,2,int getAndIncrement(),True
1,AtomicInteger,3,int getAndDecrement(),True
1,AtomicInteger,4,int incrementAndGet(),True
1,AtomicInteger,5,int decrementAndGet(),True
2,AtomicIntegerArray,1,int get(int i),True
2,AtomicIntegerArray,2,"void set(int i, int newValue)",True
2,AtomicIntegerArray,3,"int getAndSet(int i, int newValue)",True
2,AtomicIntegerArray,4,int getAndIncrement(int i),True
2,AtomicIntegerArray,5,int getAndDecrement(int i),True
3,AtomicIntegerFieldUpdater,1,V get(T obj),False
3,AtomicIntegerFieldUpdater,2,"boolean compareAndSet(T obj, int expectedValue, int newValue)",True
3,AtomicIntegerFieldUpdater,3,"void lazySet(T obj, int newValue)",True
3,AtomicIntegerFieldUpdater,4,int getAndIncrement(T obj),True
3,AtomicIntegerFieldUpdater,5,int getAndDecrement(T obj),True
4,AtomicLong,1,long get(),True
4,AtomicLong,2,long getAndIncrement(),True
4,AtomicLong,3,long getAndDecrement(),True
4,AtomicLong,4,void incrementAndGet(),False
4,AtomicLong,5,void decrementAndGet(),False
5,AtomicLongArray,1,AtomicLongArray(int length),False
5,AtomicLongArray,2,AtomicLongArray(long[] array),False
5,AtomicLongArray,3,long get(int index),True
5,AtomicLongArray,4,"void set(int index, long newValue)",True
5,AtomicLongArray,5,"long getAndSet(int index, long newValue)",True
6,AtomicLongFieldUpdater,1,V get(T obj),False
6,AtomicLongFieldUpdater,2,"boolean compareAndSet(T obj, long expectedValue, long newValue)",True
6,AtomicLongFieldUpdater,3,"void lazySet(T obj, long newValue)",True
6,AtomicLongFieldUpdater,4,"boolean weakCompareAndSet(T obj, long expectedValue, long newValue)",True
6,AtomicLongFieldUpdater,5,"boolean getAndSet(T obj, long newValue)",False
7,AtomicMarkableReference,1,V getReference(),True
7,AtomicMarkableReference,2,boolean getMark(),False
7,AtomicMarkableReference,3,"void set(V newReference, boolean newMark)",True
7,AtomicMarkableReference,4,"boolean compareAndSet(V expectedReference, V newReference, boolean expectedMark, boolean newMark)",True
7,AtomicMarkableReference,5,void reset(),False
8,AtomicReference,1,V get(),True
8,AtomicReference,2,"boolean compareAndSet(V expectedReference, V newReference)",True
8,AtomicReference,3,void set(V newReference),True
8,AtomicReference,4,"boolean weakCompareAndSet(V expectedReference, V newReference)",True
8,AtomicReference,5,V getAndSet(V newReference),True
8,AtomicReference,6,int get(int i),False
8,AtomicReference,7,"int getAndSet(int i, int newValue)",False
8,AtomicReference,8,int getAndIncrement(int i),False
8,AtomicReference,9,int getAndDecrement(int i),False
8,AtomicReference,10,"int getAndAdd(int i, int delta)",False
8,AtomicReference,11,long get(int i),False
8,AtomicReference,12,"long getAndSet(int i, long newValue)",False
8,AtomicReference,13,long getAndIncrement(int i),False
8,AtomicReference,14,long getAndDecrement(int i),False
8,AtomicReference,15,"long getAndAdd(int i, long delta)",False
9,AtomicReferenceArray,1,AtomicReferenceArray(int length),False
9,AtomicReferenceArray,2,AtomicReferenceArray(AtomicReferenceArray<? extends E> array),False
9,AtomicReferenceArray,3,int length(),True
9,AtomicReferenceArray,4,E get(int index),True
9,AtomicReferenceArray,5,"void set(int index, E newValue)",True
9,AtomicReferenceArray,6,AtomicReferenceArray<E> getArray(),False
9,AtomicReferenceArray,7,"void lazySet(int index, E newValue)",True
9,AtomicReferenceArray,8,"boolean compareAndSet(int index, E expectedValue, E newValue)",True
9,AtomicReferenceArray,9,"boolean weakCompareAndSet(int index, E expectedValue, E newValue)",True
9,AtomicReferenceArray,10,"boolean tryCompareAndSet(int index, E expectedValue, E newValue)",False
9,AtomicReferenceArray,11,"boolean tryWeakCompareAndSet(int index, E expectedValue, E newValue)",False
10,AtomicReferenceFieldUpdater,1,V get(U updater),False
10,AtomicReferenceFieldUpdater,2,"boolean compareAndSet(T obj, V expect, V update)",True
10,AtomicReferenceFieldUpdater,3,"void lazySet(T obj, V newValue)",True
10,AtomicReferenceFieldUpdater,4,"boolean weakCompareAndSet(T obj, V expect, V update)",True
10,AtomicReferenceFieldUpdater,5,"boolean weakCompareAndSetPlain(T obj, V expect, V update)",False
11,AtomicStampedReference,1,V getReference(),True
11,AtomicStampedReference,2,int getStamp(),True
11,AtomicStampedReference,3,"boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",True
11,AtomicStampedReference,4,"void set(V newReference, int newStamp)",True
11,AtomicStampedReference,5,"boolean weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)",True
12,DoubleAccumulator,1,double get(),True
12,DoubleAccumulator,2,void accumulate(double x),True
12,DoubleAccumulator,3,void set(double newValue),False
12,DoubleAccumulator,4,DoubleBinaryOperator getFunction(),False
12,DoubleAccumulator,5,void setFunction(DoubleBinaryOperator f),False
13,DoubleAdder,1,DoubleAdder(),False
13,DoubleAdder,2,void add(double x),True
13,DoubleAdder,3,void increment(),False
13,DoubleAdder,4,double sum(),True
13,DoubleAdder,5,void reset(),True
14,LongAccumulator,1,"LongAccumulator(LongBinaryOperator accumulatorFunction, long identity)",False
14,LongAccumulator,2,void accumulate(long x),True
14,LongAccumulator,3,long get(),True
14,LongAccumulator,4,void reset(),True
14,LongAccumulator,5,LongAccumulator identity(),False
15,LongAdder,1,void increment(),True
15,LongAdder,2,void add(long x),True
15,LongAdder,3,long sum(),True
15,LongAdder,4,void reset(),True
15,LongAdder,5,long longValue(),True
