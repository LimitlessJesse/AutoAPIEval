Sample: Attribute_2
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/Attribute_2.java:14: error: incompatible types: String cannot be converted to int
            Attribute attr = attrList.get("Name");
                                          ^
./Data/javax_management/javaFiles/Attribute_2.java:18: error: incompatible types: String cannot be converted to int
            attr = attrList.get("Age");
                                ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: Attribute_3
----------------------------------------------------------------
stdout:
name = value

================================================================

Sample: Attribute_4
----------------------------------------------------------------
stdout:
attr1 and attr2 are equal: true
attr1 and attr3 are equal: false

================================================================

Sample: Attribute_5
----------------------------------------------------------------
stdout:
Hash code of the attribute: 111143930

================================================================

Sample: AttributeList_2
----------------------------------------------------------------
stdout:
[name = value]

================================================================

Sample: AttributeValueExp_2
----------------------------------------------------------------
stdout:
null

stderr:
Note: ./Data/javax_management/javaFiles/AttributeValueExp_2.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.

================================================================

Sample: ImmutableDescriptor_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Missing = character: MyDescriptor
	at java.management/javax.management.ImmutableDescriptor.makeMap(ImmutableDescriptor.java:190)
	at java.management/javax.management.ImmutableDescriptor.<init>(ImmutableDescriptor.java:94)
	at ImmutableDescriptor_2.main(ImmutableDescriptor_2.java:5)

================================================================

Sample: ImmutableDescriptor_3
----------------------------------------------------------------
stdout:
Hash code: 0

================================================================

Sample: ImmutableDescriptor_4
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Missing = character: desc1
	at java.management/javax.management.ImmutableDescriptor.makeMap(ImmutableDescriptor.java:190)
	at java.management/javax.management.ImmutableDescriptor.<init>(ImmutableDescriptor.java:94)
	at ImmutableDescriptor_4.main(ImmutableDescriptor_4.java:5)

================================================================

Sample: MBeanAttributeInfo_5
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanAttributeInfo_5.java:5: error: no suitable constructor found for MBeanAttributeInfo(String,String,String,boolean,boolean,boolean,boolean,<null>)
        MBeanAttributeInfo attributeInfo = new MBeanAttributeInfo("name", "type", "description", true, false, false, false, null);
                                           ^
    constructor MBeanAttributeInfo.MBeanAttributeInfo(String,String,String,boolean,boolean,boolean) is not applicable
      (actual and formal argument lists differ in length)
    constructor MBeanAttributeInfo.MBeanAttributeInfo(String,String,String,boolean,boolean,boolean,Descriptor) is not applicable
      (actual and formal argument lists differ in length)
    constructor MBeanAttributeInfo.MBeanAttributeInfo(String,String,Method,Method) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: MBeanFeatureInfo_1
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanFeatureInfo_1.java:5: error: no suitable constructor found for MBeanFeatureInfo(String,String,String,boolean,boolean,boolean,boolean,<null>,<null>,<null>,<null>)
        MBeanFeatureInfo featureInfo = new MBeanFeatureInfo("getName", "java.lang.String", "The name of the feature", true, false, false, false, null, null, null, null);
                                       ^
    constructor MBeanFeatureInfo.MBeanFeatureInfo(String,String) is not applicable
      (actual and formal argument lists differ in length)
    constructor MBeanFeatureInfo.MBeanFeatureInfo(String,String,Descriptor) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: MBeanFeatureInfo_2
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanFeatureInfo_2.java:5: error: no suitable constructor found for MBeanFeatureInfo(String,String,String,boolean,boolean,boolean,boolean,<null>)
        MBeanFeatureInfo featureInfo = new MBeanFeatureInfo("add", "boolean", "This method appends the specified element to the end of this list.", true, false, false, false, null);
                                       ^
    constructor MBeanFeatureInfo.MBeanFeatureInfo(String,String) is not applicable
      (actual and formal argument lists differ in length)
    constructor MBeanFeatureInfo.MBeanFeatureInfo(String,String,Descriptor) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: MBeanInfo_2
----------------------------------------------------------------
stderr:
javax.management.NotCompliantMBeanException: MBean class Test does not implement DynamicMBean, and neither follows the Standard MBean conventions (javax.management.NotCompliantMBeanException: Class Test is not a JMX compliant Standard MBean) nor the MXBean conventions (javax.management.NotCompliantMBeanException: Test: Class Test is not a JMX compliant MXBean)
	at java.management/com.sun.jmx.mbeanserver.Introspector.checkCompliance(Introspector.java:178)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:313)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:523)
	at MBeanInfo_2.main(MBeanInfo_2.java:14)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
javax.management.InstanceNotFoundException: com.example:type=Test
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1088)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBeanInfo(DefaultMBeanServerInterceptor.java:1358)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.getMBeanInfo(JmxMBeanServer.java:921)
	at MBeanInfo_2.main(MBeanInfo_2.java:21)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "javax.management.MBeanInfo.getClassName()" because "<local3>" is null
	at MBeanInfo_2.main(MBeanInfo_2.java:26)

================================================================

Sample: MBeanInfo_3
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_3.java:19: error: cannot find symbol
        } catch (InstanceAlreadyExistsException | MBeanRegistrationException | NotCompliantMBeanException | MalformedObjectNameException e) {
                                                  ^
  symbol:   class MBeanRegistrationException
  location: class MBeanInfo_3
1 error


================================================================

Sample: MBeanInfo_5
----------------------------------------------------------------
stdout:
Verbose
ObjectPendingFinalizationCount
HeapMemoryUsage
NonHeapMemoryUsage
ObjectName

================================================================

Sample: MBeanInfo_6
----------------------------------------------------------------
stderr:
javax.management.InstanceNotFoundException: java.lang:type=HotSwap
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBean(DefaultMBeanServerInterceptor.java:1088)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getMBeanInfo(DefaultMBeanServerInterceptor.java:1358)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.getMBeanInfo(JmxMBeanServer.java:921)
	at MBeanInfo_6.main(MBeanInfo_6.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: MBeanInfo_7
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_7.java:9: error: method getObjectName in interface PlatformManagedObject cannot be applied to given types;
        MBeanInfo info = ManagementFactory.getThreadMXBean().getObjectName(name).getMBeanInfo();
                                                            ^
  required: no arguments
  found:    ObjectName
  reason: actual and formal argument lists differ in length
./Data/javax_management/javaFiles/MBeanInfo_7.java:18: error: cannot find symbol
            for (MBeanParameterInfo argument : operation.getArguments()) {
                                                        ^
  symbol:   method getArguments()
  location: variable operation of type MBeanOperationInfo
./Data/javax_management/javaFiles/MBeanInfo_7.java:18: error: cannot find symbol
            for (MBeanParameterInfo argument : operation.getArguments()) {
                 ^
  symbol:   class MBeanParameterInfo
  location: class MBeanInfo_7
3 errors


================================================================

Sample: MBeanInfo_8
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_8.java:9: error: cannot find symbol
            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
                              ^
  symbol:   variable ManagementFactory
  location: class MBeanInfo_8
./Data/javax_management/javaFiles/MBeanInfo_8.java:19: error: incompatible types: ObjectName cannot be converted to String
            mbs.createMBean(name, new Test(), attributes);
                            ^
./Data/javax_management/javaFiles/MBeanInfo_8.java:29: error: cannot find symbol
                System.out.println("Notification Type: " + notification.getNotificationType());
                                                                       ^
  symbol:   method getNotificationType()
  location: variable notification of type MBeanNotificationInfo
./Data/javax_management/javaFiles/MBeanInfo_8.java:30: error: cannot find symbol
                System.out.println("Notification Class: " + notification.getClassName());
                                                                        ^
  symbol:   method getClassName()
  location: variable notification of type MBeanNotificationInfo
./Data/javax_management/javaFiles/MBeanInfo_8.java:39: error: Test is not abstract and does not override abstract method getNotificationInfo() in NotificationBroadcaster
class Test implements NotificationBroadcaster {
^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
5 errors


================================================================

Sample: MBeanInfo_10
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_10.java:7: error: no suitable constructor found for StandardMBean(MyBean,Class<MyMBean>,boolean)
        StandardMBean mbean1 = new StandardMBean(new MyBean(), MyMBean.class, true);
                               ^
    constructor StandardMBean.<T#1>StandardMBean(T#1,Class<T#1>) is not applicable
      (cannot infer type-variable(s) T#1
        (actual and formal argument lists differ in length))
    constructor StandardMBean.<T#2>StandardMBean(T#2,Class<T#2>,boolean) is not applicable
      (inference variable T#2 has incompatible bounds
        equality constraints: MyMBean
        lower bounds: MyBean)
  where T#1,T#2 are type-variables:
    T#1 extends Object declared in constructor <T#1>StandardMBean(T#1,Class<T#1>)
    T#2 extends Object declared in constructor <T#2>StandardMBean(T#2,Class<T#2>,boolean)
./Data/javax_management/javaFiles/MBeanInfo_10.java:9: error: cannot find symbol
        mbean1.setObjectName(name1);
              ^
  symbol:   method setObjectName(ObjectName)
  location: variable mbean1 of type StandardMBean
./Data/javax_management/javaFiles/MBeanInfo_10.java:11: error: no suitable constructor found for StandardMBean(MyBean,Class<MyMBean>,boolean)
        StandardMBean mbean2 = new StandardMBean(new MyBean(), MyMBean.class, true);
                               ^
    constructor StandardMBean.<T#1>StandardMBean(T#1,Class<T#1>) is not applicable
      (cannot infer type-variable(s) T#1
        (actual and formal argument lists differ in length))
    constructor StandardMBean.<T#2>StandardMBean(T#2,Class<T#2>,boolean) is not applicable
      (inference variable T#2 has incompatible bounds
        equality constraints: MyMBean
        lower bounds: MyBean)
  where T#1,T#2 are type-variables:
    T#1 extends Object declared in constructor <T#1>StandardMBean(T#1,Class<T#1>)
    T#2 extends Object declared in constructor <T#2>StandardMBean(T#2,Class<T#2>,boolean)
./Data/javax_management/javaFiles/MBeanInfo_10.java:13: error: cannot find symbol
        mbean2.setObjectName(name2);
              ^
  symbol:   method setObjectName(ObjectName)
  location: variable mbean2 of type StandardMBean
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
4 errors


================================================================

Sample: MBeanInfo_11
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_11.java:7: error: no suitable constructor found for StandardMBean(Object,ObjectName)
        StandardMBean mbean = new StandardMBean(new Object(), new ObjectName("name"));
                              ^
    constructor StandardMBean.<T#1>StandardMBean(T#1,Class<T#1>) is not applicable
      (cannot infer type-variable(s) T#1
        (argument mismatch; ObjectName cannot be converted to Class<T#1>))
    constructor StandardMBean.<T#2>StandardMBean(T#2,Class<T#2>,boolean) is not applicable
      (cannot infer type-variable(s) T#2
        (actual and formal argument lists differ in length))
    constructor StandardMBean.StandardMBean(Class<?>,boolean) is not applicable
      (argument mismatch; Object cannot be converted to Class<?>)
  where T#1,T#2 are type-variables:
    T#1 extends Object declared in constructor <T#1>StandardMBean(T#1,Class<T#1>)
    T#2 extends Object declared in constructor <T#2>StandardMBean(T#2,Class<T#2>,boolean)
./Data/javax_management/javaFiles/MBeanInfo_11.java:11: error: cannot find symbol
        System.out.println(info.getHashCode());
                               ^
  symbol:   method getHashCode()
  location: variable info of type MBeanInfo
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: MBeanInfo_12
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanInfo_12.java:16: error: cannot find symbol
        MBeanServer server = MBeanServer.getMBeanServer();
                                        ^
  symbol:   method getMBeanServer()
  location: interface MBeanServer
1 error


================================================================

Sample: MBeanNotificationInfo_6
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanNotificationInfo_6.java:5: error: incompatible types: String cannot be converted to String[]
        MBeanNotificationInfo info1 = new MBeanNotificationInfo(new String[]{"Test"}.getClass().getName(), "Test", "Test");
                                                                                                       ^
./Data/javax_management/javaFiles/MBeanNotificationInfo_6.java:6: error: incompatible types: String cannot be converted to String[]
        MBeanNotificationInfo info2 = new MBeanNotificationInfo(new String[]{"Test"}.getClass().getName(), "Test", "Test");
                                                                                                       ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: MBeanNotificationInfo_7
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanNotificationInfo_7.java:5: error: incompatible types: Class<CAP#1> cannot be converted to String[]
        MBeanNotificationInfo notificationInfo = new MBeanNotificationInfo(new String[]{"Test"}.getClass(), "Test", "Test");
                                                                                                        ^
  where CAP#1 is a fresh type-variable:
    CAP#1 extends String[] from capture of ? extends String[]
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: MBeanNotificationInfo_8
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanNotificationInfo_8.java:6: error: incompatible types: Integer[] cannot be converted to String[]
            new Integer[]{1, 2, 3},
            ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: MBeanPermission_1
----------------------------------------------------------------
stdout:
true

================================================================

Sample: MBeanPermission_5
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Invalid permission: read
	at java.management/javax.management.MBeanPermission.getMask(MBeanPermission.java:955)
	at java.management/javax.management.MBeanPermission.parseActions(MBeanPermission.java:263)
	at java.management/javax.management.MBeanPermission.<init>(MBeanPermission.java:408)
	at MBeanPermission_5.main(MBeanPermission_5.java:5)

================================================================

Sample: MBeanServerFactory_1
----------------------------------------------------------------
stdout:
com.sun.jmx.mbeanserver.JmxMBeanServer@5c18298f

================================================================

Sample: MBeanServerPermission_4
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/MBeanServerPermission_4.java:7: error: Permission is abstract; cannot be instantiated
        Permission permission = new Permission("read");
                                ^
1 error


================================================================

Sample: Notification_3
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/Notification_3.java:8: error: <anonymous Notification_3$1> is not abstract and does not override abstract method getNotificationInfo() in NotificationBroadcaster
        NotificationBroadcaster broadcaster = new NotificationBroadcaster() {
                                                                            ^
./Data/javax_management/javaFiles/Notification_3.java:18: error: non-static variable this cannot be referenced from a static context
        Notification notification = new Notification("TEST", this, 1, System.currentTimeMillis()) {
                                                             ^
2 errors


================================================================

Sample: Notification_4
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/Notification_4.java:6: error: <anonymous Notification_4$1> is not abstract and does not override abstract method getNotificationInfo() in NotificationBroadcaster
        NotificationBroadcaster broadcaster = new NotificationBroadcaster() {
                                                                            ^
./Data/javax_management/javaFiles/Notification_4.java:7: error: method does not override or implement a method from a supertype
            @Override
            ^
2 errors


================================================================

Sample: NotificationBroadcasterSupport_2
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/NotificationBroadcasterSupport_2.java:24: error: unreported exception ListenerNotFoundException; must be caught or declared to be thrown
        broadcaster.removeNotificationListener(listener);
                                              ^
1 error


================================================================

Sample: NotificationBroadcasterSupport_3
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/NotificationBroadcasterSupport_3.java:12: error: incompatible types: String cannot be converted to long
                "Notification Message"
                ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ObjectInstance_1
----------------------------------------------------------------
output:
./Data/javax_management/javaFiles/ObjectInstance_1.java:12: error: cannot find symbol
            MBeanServer mbs = javax.management.ManagementFactory.getPlatformMBeanServer();
                                              ^
  symbol:   class ManagementFactory
  location: package javax.management
./Data/javax_management/javaFiles/ObjectInstance_1.java:17: error: Alternatives in a multi-catch statement cannot be related by subclassing
        } catch (JMException | MalformedObjectNameException | InstanceNotFoundException e) {
                               ^
  Alternative MalformedObjectNameException is a subclass of alternative JMException
./Data/javax_management/javaFiles/ObjectInstance_1.java:17: error: Alternatives in a multi-catch statement cannot be related by subclassing
        } catch (JMException | MalformedObjectNameException | InstanceNotFoundException e) {
                                                              ^
  Alternative InstanceNotFoundException is a subclass of alternative JMException
3 errors


================================================================

Sample: StringValueExp_3
----------------------------------------------------------------
stdout:
Hello

================================================================

