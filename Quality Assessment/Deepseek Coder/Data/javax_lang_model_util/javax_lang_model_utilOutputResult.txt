Sample: ElementFilter_2
----------------------------------------------------------------
output:
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:11: error: cannot find symbol
                    public Name getSimpleName() {
                           ^
  symbol: class Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:16: error: cannot find symbol
                    public Kind getKind() {
                           ^
  symbol: class Kind
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:21: error: cannot find symbol
                    public TypeMirror asType() {
                           ^
  symbol: class TypeMirror
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:46: error: cannot find symbol
                    public void accept(ElementVisitor<? super Void, Void> v, Void p) {
                                       ^
  symbol: class ElementVisitor
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:9: error: <anonymous ElementFilter_2$1> is not abstract and does not override abstract method <R,P>accept(ElementVisitor<R,P>,P) in Element
                new Element() {
                              ^
  where R,P are type-variables:
    R extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
    P extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:36: error: getModifiers() in <anonymous ElementFilter_2$1> cannot implement getModifiers() in Element
                    public List<? extends Element> getModifiers() {
                                                   ^
  return type List<? extends Element> is not compatible with Set<Modifier>
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:12: error: cannot find symbol
                        return Name.identifier("String");
                               ^
  symbol: variable Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:17: error: cannot find symbol
                        return Kind.CLASS;
                               ^
  symbol: variable Kind
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:35: error: method does not override or implement a method from a supertype
                    @Override
                    ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:40: error: method does not override or implement a method from a supertype
                    @Override
                    ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_2.java:45: error: method does not override or implement a method from a supertype
                    @Override
                    ^
11 errors


================================================================

Sample: ElementFilter_3
----------------------------------------------------------------
output:
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:9: error: <anonymous ElementFilter_3$1> is not abstract and does not override abstract method <R,P>accept(ElementVisitor<R,P>,P) in Element
                new Element() {
                              ^
  where R,P are type-variables:
    R extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
    P extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:13: error: <anonymous ElementFilter_3$1$1> is not abstract and does not override abstract method getEnclosingElement() in VariableElement
                                new VariableElement() {
                                                      ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:15: error: getSimpleName() in <anonymous ElementFilter_3$1$1> cannot implement getSimpleName() in VariableElement
                                    public String getSimpleName() {
                                                  ^
  return type String is not compatible with Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:14: error: method does not override or implement a method from a supertype
                                    @Override
                                    ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:19: error: <anonymous ElementFilter_3$1$2> is not abstract and does not override abstract method getEnclosingElement() in VariableElement
                                new VariableElement() {
                                                      ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:21: error: getSimpleName() in <anonymous ElementFilter_3$1$2> cannot implement getSimpleName() in VariableElement
                                    public String getSimpleName() {
                                                  ^
  return type String is not compatible with Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:20: error: method does not override or implement a method from a supertype
                                    @Override
                                    ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:28: error: <anonymous ElementFilter_3$2> is not abstract and does not override abstract method <R,P>accept(ElementVisitor<R,P>,P) in Element
                new Element() {
                              ^
  where R,P are type-variables:
    R extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
    P extends Object declared in method <R,P>accept(ElementVisitor<R,P>,P)
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:32: error: <anonymous ElementFilter_3$2$1> is not abstract and does not override abstract method getEnclosingElement() in VariableElement
                                new VariableElement() {
                                                      ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:34: error: getSimpleName() in <anonymous ElementFilter_3$2$1> cannot implement getSimpleName() in VariableElement
                                    public String getSimpleName() {
                                                  ^
  return type String is not compatible with Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:33: error: method does not override or implement a method from a supertype
                                    @Override
                                    ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:38: error: <anonymous ElementFilter_3$2$2> is not abstract and does not override abstract method getEnclosingElement() in VariableElement
                                new VariableElement() {
                                                      ^
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:40: error: getSimpleName() in <anonymous ElementFilter_3$2$2> cannot implement getSimpleName() in VariableElement
                                    public String getSimpleName() {
                                                  ^
  return type String is not compatible with Name
./Data/javax_lang_model_util/javaFiles/ElementFilter_3.java:39: error: method does not override or implement a method from a supertype
                                    @Override
                                    ^
14 errors


================================================================

Sample: ElementFilter_5
----------------------------------------------------------------
output:
./Data/javax_lang_model_util/javaFiles/ElementFilter_5.java:9: error: cannot find symbol
        List<Element> elements = new ArrayList<>();
                                     ^
  symbol:   class ArrayList
  location: class ElementFilter_5
1 error


================================================================

