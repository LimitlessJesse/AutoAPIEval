Sample: DSAParameterSpec_1
----------------------------------------------------------------
stdout:
P: 11237573451661459040819508033829861609082098203702395966683261278697926573743703901454095936171492588031793346733877371735708566280400535321351692192505577

================================================================

Sample: DSAParameterSpec_2
----------------------------------------------------------------
stdout:
The value of q is: 1162258900746254053429797463942464994865895209477346262510228443859277264467

================================================================

Sample: DSAParameterSpec_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAParameterSpec_3.java:7: error: constructor DSAParameterSpec in class DSAParameterSpec cannot be applied to given types;
        DSAParameterSpec dsaParameterSpec = new DSAParameterSpec(
                                            ^
  required: BigInteger,BigInteger,BigInteger
  found:    BigInteger,BigInteger,BigInteger,BigInteger,BigInteger
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: DSAPrivateKeySpec_1
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAPrivateKeySpec_1.java:11: error: cannot find symbol
        DSAPrivateKeySpec dks = kp.getPrivate().getSpec();
                                               ^
  symbol:   method getSpec()
  location: interface PrivateKey
1 error


================================================================

Sample: DSAPrivateKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAPrivateKeySpec_2.java:38: error: cannot find symbol
        BigInteger gValue = ((DSAPrivateKey) privKey).getParams().getG();
                              ^
  symbol:   class DSAPrivateKey
  location: class DSAPrivateKeySpec_2
1 error


================================================================

Sample: DSAPrivateKeySpec_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAPrivateKeySpec_3.java:12: error: constructor DSAPrivateKeySpec in class DSAPrivateKeySpec cannot be applied to given types;
        DSAPrivateKeySpec dsaPrivateKeySpec = new DSAPrivateKeySpec(keyPair.getPrivate().getEncoded());
                                              ^
  required: BigInteger,BigInteger,BigInteger,BigInteger
  found:    byte[]
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: DSAPrivateKeySpec_4
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAPrivateKeySpec_4.java:12: error: constructor DSAPrivateKeySpec in class DSAPrivateKeySpec cannot be applied to given types;
        DSAPrivateKeySpec dsaPrivateKeySpec = new DSAPrivateKeySpec(keyPair.getPrivate().getEncoded());
                                              ^
  required: BigInteger,BigInteger,BigInteger,BigInteger
  found:    byte[]
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: DSAPublicKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/DSAPublicKeySpec_2.java:12: error: incompatible types: PublicKey cannot be converted to DSAPublicKeySpec
        DSAPublicKeySpec publicKeySpec = keyPair.getPublic();
                                                          ^
1 error


================================================================

Sample: ECFieldFp_2
----------------------------------------------------------------
stdout:
115792089210356248762697446949407573530086143415290314195533631308867097853951

================================================================

Sample: ECPrivateKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECPrivateKeySpec_2.java:26: error: incompatible types: EllipticCurve cannot be converted to ECParameterSpec
        ECPrivateKeySpec privateKeySpec = new ECPrivateKeySpec(privateKey.getS(), privateKey.getParams().getCurve());
                                                                                                                 ^
./Data/java_security_spec/javaFiles/ECPrivateKeySpec_2.java:31: error: cannot find symbol
        System.out.println("Curve name: " + params.getCurve().getCurveName());
                                                             ^
  symbol:   method getCurveName()
  location: class EllipticCurve
./Data/java_security_spec/javaFiles/ECPrivateKeySpec_2.java:32: error: cannot find symbol
        System.out.println("Field size: " + params.getCurve().getFieldSize());
                                                             ^
  symbol:   method getFieldSize()
  location: class EllipticCurve
./Data/java_security_spec/javaFiles/ECPrivateKeySpec_2.java:33: error: cannot find symbol
        System.out.println("Cofactor: " + params.getCurve().getCofactor());
                                                           ^
  symbol:   method getCofactor()
  location: class EllipticCurve
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
4 errors


================================================================

Sample: ECPublicKeySpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/ECPublicKeySpec_2.java:23: error: cannot find symbol
        ECPublicKeySpec publicKeySpec = publicKey.getSpec();
                                                 ^
  symbol:   method getSpec()
  location: variable publicKey of type ECPublicKey
./Data/java_security_spec/javaFiles/ECPublicKeySpec_2.java:29: error: cannot find symbol
        System.out.println("Curve name: " + params.getCurve().getCurveName());
                                                             ^
  symbol:   method getCurveName()
  location: class EllipticCurve
./Data/java_security_spec/javaFiles/ECPublicKeySpec_2.java:30: error: cannot find symbol
        System.out.println("Point count: " + params.getPointCount());
                                                   ^
  symbol:   method getPointCount()
  location: variable params of type ECParameterSpec
3 errors


================================================================

Sample: EllipticCurve_1
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/EllipticCurve_1.java:9: error: incompatible types: BigInteger cannot be converted to ECField
        EllipticCurve ellipticCurve = new EllipticCurve(a, b, p);
                                                        ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: EllipticCurve_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/EllipticCurve_2.java:8: error: no suitable constructor found for EllipticCurve(BigInteger,BigInteger)
        EllipticCurve ec = new EllipticCurve(a, b);
                           ^
    constructor EllipticCurve.EllipticCurve(ECField,BigInteger,BigInteger) is not applicable
      (actual and formal argument lists differ in length)
    constructor EllipticCurve.EllipticCurve(ECField,BigInteger,BigInteger,byte[]) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: PKCS8EncodedKeySpec_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Illegal base64 character 2e
	at java.base/java.util.Base64$Decoder.decode0(Base64.java:848)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:566)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:589)
	at PKCS8EncodedKeySpec_2.main(PKCS8EncodedKeySpec_2.java:23)

================================================================

Sample: PKCS8EncodedKeySpec_4
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: Illegal base64 character 2e
	at java.base/java.util.Base64$Decoder.decode0(Base64.java:848)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:566)
	at java.base/java.util.Base64$Decoder.decode(Base64.java:589)
	at PKCS8EncodedKeySpec_4.main(PKCS8EncodedKeySpec_4.java:23)

================================================================

Sample: PSSParameterSpec_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_2.java:10: error: no suitable constructor found for PSSParameterSpec(int,String,MGF1ParameterSpec)
        PSSParameterSpec pssSpec = new PSSParameterSpec(md.getDigestLength(), "SHA-256", spec);
                                   ^
    constructor PSSParameterSpec.PSSParameterSpec() is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: PSSParameterSpec_3
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_3.java:5: error: no suitable constructor found for PSSParameterSpec(int,int)
        PSSParameterSpec spec = new PSSParameterSpec(1024, 128);
                                ^
    constructor PSSParameterSpec.PSSParameterSpec() is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: PSSParameterSpec_7
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/PSSParameterSpec_7.java:6: error: no suitable constructor found for PSSParameterSpec(String,String,BigInteger,String)
        PSSParameterSpec pssParameterSpec = new PSSParameterSpec(
                                            ^
    constructor PSSParameterSpec.PSSParameterSpec() is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(String,String,AlgorithmParameterSpec,int,int) is not applicable
      (actual and formal argument lists differ in length)
    constructor PSSParameterSpec.PSSParameterSpec(int) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAKeyGenParameterSpec_1
----------------------------------------------------------------
stdout:
Public Exponent: 65537

================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_8
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_8.java:15: error: no suitable constructor found for RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger[],BigInteger[],BigInteger[],BigInteger[],BigInteger)
        RSAMultiPrimePrivateCrtKeySpec spec = new RSAMultiPrimePrivateCrtKeySpec(modulus, publicExponent, privateExponent, primeP, primeQ, exponentP, exponentQ, crtCoefficient);
                                              ^
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAMultiPrimePrivateCrtKeySpec_11
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAMultiPrimePrivateCrtKeySpec_11.java:20: error: no suitable constructor found for RSAMultiPrimePrivateCrtKeySpec(RSAPrivateCrtKeySpec,BigInteger,BigInteger,BigInteger)
        RSAMultiPrimePrivateCrtKeySpec multiPrimeSpec = new RSAMultiPrimePrivateCrtKeySpec(spec, dp, dq, r);
                                                        ^
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor RSAMultiPrimePrivateCrtKeySpec.RSAMultiPrimePrivateCrtKeySpec(BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,BigInteger,RSAOtherPrimeInfo[],AlgorithmParameterSpec) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: RSAOtherPrimeInfo_2
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAOtherPrimeInfo_2.java:3: error: cannot find symbol
import java.security.spec.RSAPrimeInfo;
                         ^
  symbol:   class RSAPrimeInfo
  location: package java.security.spec
./Data/java_security_spec/javaFiles/RSAOtherPrimeInfo_2.java:8: error: constructor RSAOtherPrimeInfo in class RSAOtherPrimeInfo cannot be applied to given types;
        RSAOtherPrimeInfo rsaOtherPrimeInfo = new RSAOtherPrimeInfo(
                                              ^
  required: BigInteger,BigInteger,BigInteger
  found:    BigInteger,BigInteger,BigInteger,BigInteger
  reason: actual and formal argument lists differ in length
2 errors


================================================================

Sample: RSAOtherPrimeInfo_9
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAOtherPrimeInfo_9.java:3: error: cannot find symbol
import java.security.spec.RSAPrimeInfo;
                         ^
  symbol:   class RSAPrimeInfo
  location: package java.security.spec
./Data/java_security_spec/javaFiles/RSAOtherPrimeInfo_9.java:8: error: cannot find symbol
        RSAPrimeInfo primeInfo = new RSAOtherPrimeInfo(BigInteger.valueOf(3), BigInteger.valueOf(5), BigInteger.valueOf(7));
        ^
  symbol:   class RSAPrimeInfo
  location: class RSAOtherPrimeInfo_9
2 errors


================================================================

Sample: RSAPrivateCrtKeySpec_4
----------------------------------------------------------------
================================================================

Sample: RSAPrivateCrtKeySpec_7
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAPrivateCrtKeySpec_7.java:16: error: incompatible types: BigInteger cannot be converted to AlgorithmParameterSpec
        RSAPrivateCrtKeySpec spec = new RSAPrivateCrtKeySpec(p, q, dp, dq, iq, p1, p2, q1, q2);
                                                                                           ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: RSAPrivateCrtKeySpec_8
----------------------------------------------------------------
output:
./Data/java_security_spec/javaFiles/RSAPrivateCrtKeySpec_8.java:13: error: cannot find symbol
        RSAPrivateCrtKeySpec privateKeySpec = keyPair.getPrivate().getSpec(RSAPrivateCrtKeySpec.class);
                                                                  ^
  symbol:   method getSpec(Class<RSAPrivateCrtKeySpec>)
  location: interface PrivateKey
1 error


================================================================

Sample: X509EncodedKeySpec_2
----------------------------------------------------------------
stdout:
Encoded form of the public key:
48 -126 1 34 48 13 6 9 42 -122 72 -122 -9 13 1 1 1 5 0 3 -126 1 15 0 48 -126 1 10 2 -126 1 1 0 -56 -115 -21 42 -23 -27 -54 70 -20 -72 49 27 47 -66 -92 -43 -77 -60 -7 33 37 80 -3 19 43 106 -34 -104 106 -60 123 104 12 83 30 -55 65 -57 84 -82 77 -53 50 -50 -7 -118 -77 65 22 67 125 123 2 -52 37 -80 -65 -73 31 -104 70 -112 61 -113 10 -25 10 -40 17 -86 64 -94 4 26 70 -19 -74 -122 -35 52 8 -121 38 59 -2 -78 34 105 53 78 37 -76 -97 -96 100 42 -61 -17 15 -77 46 -3 -120 98 -74 -80 -103 61 -87 3 53 63 101 -27 16 95 -120 -69 86 42 -103 11 -87 28 36 110 77 5 76 13 57 -33 -70 18 -5 -37 -58 -90 -110 74 125 79 14 52 58 0 -26 -78 110 102 102 56 15 72 115 42 -90 -5 117 100 91 -57 -128 -43 107 52 75 83 -45 39 59 91 -30 -54 102 118 37 -48 80 69 -6 89 21 44 -12 48 15 82 -95 92 105 -36 -25 0 -63 8 -17 -82 34 49 -18 -12 -10 105 -75 56 87 -93 47 21 56 -94 100 81 -22 4 85 -98 117 -60 84 63 -39 -44 42 98 73 41 -110 0 -48 33 16 10 -101 66 54 -49 21 123 -39 -58 42 -41 -95 -73 58 -40 41 21 106 -112 -78 -69 -22 113 2 3 1 0 1 

================================================================

