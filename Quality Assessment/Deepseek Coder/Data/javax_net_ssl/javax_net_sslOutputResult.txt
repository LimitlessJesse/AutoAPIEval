Sample: KeyManagerFactory_1
----------------------------------------------------------------
================================================================

Sample: KeyManagerFactory_3
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/KeyManagerFactory_3.java:20: error: unreported exception UnrecoverableKeyException; must be caught or declared to be thrown
            keyManagerFactory.init(keyStore, "password".toCharArray());
                                  ^
1 error


================================================================

Sample: KeyManagerFactory_8
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/KeyManagerFactory_8.java:14: error: unreported exception CertificateException; must be caught or declared to be thrown
            ks.load(new java.io.FileInputStream("keystore.jks"), "password".toCharArray());
                   ^
1 error


================================================================

Sample: SNIServerName_3
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIServerName_3.java:5: error: cannot find symbol
        SNIServerName sniServerName1 = SNIServerName.from("example.com");
                                                    ^
  symbol:   method from(String)
  location: class SNIServerName
./Data/javax_net_ssl/javaFiles/SNIServerName_3.java:6: error: cannot find symbol
        SNIServerName sniServerName2 = SNIServerName.from("example.com");
                                                    ^
  symbol:   method from(String)
  location: class SNIServerName
2 errors


================================================================

Sample: SNIServerName_5
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SNIServerName_5.java:6: error: SNIServerName is abstract; cannot be instantiated
        SNIServerName sniServerName = new SNIServerName("www.example.com".getBytes());
                                      ^
1 error


================================================================

Sample: SSLContext_1
----------------------------------------------------------------
stdout:
SSLContext instance created: javax.net.ssl.SSLContext@60611244

================================================================

Sample: SSLContext_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalStateException: SSLContext is not initialized
	at java.base/sun.security.ssl.SSLContextImpl.engineCreateSSLEngine(SSLContextImpl.java:173)
	at java.base/javax.net.ssl.SSLContext.createSSLEngine(SSLContext.java:373)
	at SSLContext_2.main(SSLContext_2.java:7)

================================================================

Sample: SSLContext_3
----------------------------------------------------------------
stdout:
Enabled Cipher Suites: [TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
Supported Cipher Suites: [TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]

================================================================

Sample: SSLContext_4
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLContext_4.java:16: error: incompatible types: no instance(s) of type variable(s) T exist so that List<T> conforms to String[]
            sslEngine.setEnabledCipherSuites(Arrays.asList(sslEngine.getSupportedCipherSuites()));
                     ^
  where T is a type-variable:
    T extends Object declared in method <T>asList(T...)
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: SSLEngine_1
----------------------------------------------------------------
stdout:
Enabled Cipher Suites: [TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA]

================================================================

Sample: SSLEngine_2
----------------------------------------------------------------
stdout:
[TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]

================================================================

Sample: SSLEngine_4
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_4.java:5: error: cannot find symbol
        SSLEngine engine = SSLEngine.getDefault();
                                    ^
  symbol:   method getDefault()
  location: class SSLEngine
1 error


================================================================

Sample: SSLEngine_5
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_5.java:5: error: cannot find symbol
        SSLEngine engine = SSLEngine.getInstance("TLS");
                                    ^
  symbol:   method getInstance(String)
  location: class SSLEngine
1 error


================================================================

Sample: SSLEngine_6
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_6.java:5: error: cannot find symbol
        SSLEngine engine = SSLContext.getInstance("TLS").createSSLEngine();
                           ^
  symbol:   variable SSLContext
  location: class SSLEngine_6
1 error


================================================================

Sample: SSLEngine_7
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_7.java:14: error: no suitable method found for createSocket(InetSocketAddress)
        SSLSocket socket = (SSLSocket) factory.createSocket(new InetSocketAddress("www.google.com", 443));
                                              ^
    method SocketFactory.createSocket() is not applicable
      (actual and formal argument lists differ in length)
    method SocketFactory.createSocket(String,int) is not applicable
      (actual and formal argument lists differ in length)
    method SocketFactory.createSocket(String,int,InetAddress,int) is not applicable
      (actual and formal argument lists differ in length)
    method SocketFactory.createSocket(InetAddress,int) is not applicable
      (actual and formal argument lists differ in length)
    method SocketFactory.createSocket(InetAddress,int,InetAddress,int) is not applicable
      (actual and formal argument lists differ in length)
    method SSLSocketFactory.createSocket(Socket,String,int,boolean) is not applicable
      (actual and formal argument lists differ in length)
    method SSLSocketFactory.createSocket(Socket,InputStream,boolean) is not applicable
      (actual and formal argument lists differ in length)
./Data/javax_net_ssl/javaFiles/SSLEngine_7.java:15: error: cannot find symbol
        SSLEngine engine = socket.getEnabledSSLEngines().get(0);
                                 ^
  symbol:   method getEnabledSSLEngines()
  location: variable socket of type SSLSocket
2 errors


================================================================

Sample: SSLEngine_10
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_10.java:5: error: cannot find symbol
        SSLEngine engine = SSLContext.getInstance("TLS").createSSLEngine();
                           ^
  symbol:   variable SSLContext
  location: class SSLEngine_10
1 error


================================================================

Sample: SSLEngine_11
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_11.java:5: error: cannot find symbol
        SSLEngine engine = SSLEngine.getInstance("TLS");
                                    ^
  symbol:   method getInstance(String)
  location: class SSLEngine
1 error


================================================================

Sample: SSLEngine_22
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_22.java:10: error: cannot find symbol
        } catch (NoSuchAlgorithmException e) {
                 ^
  symbol:   class NoSuchAlgorithmException
  location: class SSLEngine_22
./Data/javax_net_ssl/javaFiles/SSLEngine_22.java:20: error: incompatible types: no instance(s) of type variable(s) T exist so that List<T> conforms to String[]
        sslParams.setProtocols(Arrays.asList("TLSv1.2"));
                 ^
  where T is a type-variable:
    T extends Object declared in method <T>asList(T...)
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: SSLEngine_23
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_23.java:6: error: cannot find symbol
        SSLEngine engine = SSLContext.getDefault().createSSLEngine();
                           ^
  symbol:   variable SSLContext
  location: class SSLEngine_23
1 error


================================================================

Sample: SSLEngine_26
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_26.java:5: error: cannot find symbol
        SSLEngine engine = SSLContext.getInstance("TLS").createSSLEngine();
                           ^
  symbol:   variable SSLContext
  location: class SSLEngine_26
1 error


================================================================

Sample: SSLEngine_27
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/SSLEngine_27.java:5: error: cannot find symbol
        SSLEngine engine = SSLEngine.getInstance("TLS");
                                    ^
  symbol:   method getInstance(String)
  location: class SSLEngine
1 error


================================================================

Sample: SSLParameters_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot read the array length because "<local5>" is null
	at SSLParameters_2.main(SSLParameters_2.java:14)

================================================================

Sample: SSLParameters_3
----------------------------------------------------------------
stdout:
Protocols: [TLSv1.2, TLSv1.3]

================================================================

Sample: SSLParameters_4
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot read the array length because "<local3>" is null
	at SSLParameters_4.main(SSLParameters_4.java:8)

================================================================

Sample: SSLParameters_7
----------------------------------------------------------------
================================================================

Sample: SSLParameters_8
----------------------------------------------------------------
stdout:
Need Client Authentication: false

================================================================

Sample: SSLParameters_11
----------------------------------------------------------------
================================================================

Sample: SSLParameters_12
----------------------------------------------------------------
stdout:
Want Client Auth: false

================================================================

Sample: SSLSocket_7
----------------------------------------------------------------
stderr:
error: no class declared in source file

================================================================

Sample: SSLSocket_9
----------------------------------------------------------------
stdout:
TLS_AES_256_GCM_SHA384
TLS_AES_128_GCM_SHA256
TLS_CHACHA20_POLY1305_SHA256
TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256
TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_RSA_WITH_AES_256_CBC_SHA
TLS_DHE_DSS_WITH_AES_256_CBC_SHA
TLS_DHE_RSA_WITH_AES_128_CBC_SHA
TLS_DHE_DSS_WITH_AES_128_CBC_SHA
TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
TLS_RSA_WITH_AES_256_GCM_SHA384
TLS_RSA_WITH_AES_128_GCM_SHA256
TLS_RSA_WITH_AES_256_CBC_SHA256
TLS_RSA_WITH_AES_128_CBC_SHA256
TLS_RSA_WITH_AES_256_CBC_SHA
TLS_RSA_WITH_AES_128_CBC_SHA
TLS_EMPTY_RENEGOTIATION_INFO_SCSV

================================================================

Sample: SSLSocket_10
----------------------------------------------------------------
stdout:
Handshake started successfully

================================================================

Sample: SSLSocket_12
----------------------------------------------------------------
stdout:
Use Client Mode: true

================================================================

Sample: SSLSocket_14
----------------------------------------------------------------
stdout:
Need client authentication: false

================================================================

Sample: SSLSocket_18
----------------------------------------------------------------
================================================================

Sample: SSLSocket_31
----------------------------------------------------------------
stderr:
java.net.SocketException: already connected
	at java.base/java.net.Socket.connect(Socket.java:614)
	at java.base/sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:304)
	at java.base/sun.security.ssl.BaseSSLSocketImpl.connect(BaseSSLSocketImpl.java:174)
	at SSLSocket_31.main(SSLSocket_31.java:12)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: TrustManagerFactory_1
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_1.java:33: error: exception CertificateException is never thrown in body of corresponding try statement
        } catch (KeyStoreException | NoSuchAlgorithmException | CertificateException e) {
                                                                ^
1 error


================================================================

Sample: TrustManagerFactory_4
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_4.java:19: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_4.java:24: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_4.java:29: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_4.java:34: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_4.java:39: error: method does not override or implement a method from a supertype
            @Override
            ^
5 errors


================================================================

Sample: TrustManagerFactory_11
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_11.java:19: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_11.java:24: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_11.java:29: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_11.java:34: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactory_11.java:39: error: method does not override or implement a method from a supertype
            @Override
            ^
5 errors


================================================================

Sample: TrustManagerFactorySpi_4
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactorySpi_4.java:20: error: method getService in class Provider cannot be applied to given types;
        TrustManagerFactorySpi spi = tmf.getProvider().getService().newInstance();
                                                      ^
  required: String,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/javax_net_ssl/javaFiles/TrustManagerFactorySpi_4.java:23: error: no suitable method found for engineInit(KeyStore)
        spi.engineInit(ks);
           ^
    method TrustManagerFactorySpi.engineInit(KeyStore) is not applicable
      (engineInit(KeyStore) has protected access in TrustManagerFactorySpi)
    method TrustManagerFactorySpi.engineInit(ManagerFactoryParameters) is not applicable
      (argument mismatch; KeyStore cannot be converted to ManagerFactoryParameters)
2 errors


================================================================

Sample: TrustManagerFactorySpi_5
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactorySpi_5.java:19: error: ManagerFactoryParameters is abstract; cannot be instantiated
        ManagerFactoryParameters spec = new ManagerFactoryParameters(ks, null);
                                        ^
1 error


================================================================

Sample: TrustManagerFactorySpi_6
----------------------------------------------------------------
output:
./Data/javax_net_ssl/javaFiles/TrustManagerFactorySpi_6.java:10: error: TrustManagerFactorySpi is abstract; cannot be instantiated
            TrustManagerFactorySpi trustManagerFactorySpi = new TrustManagerFactorySpi();
                                                            ^
./Data/javax_net_ssl/javaFiles/TrustManagerFactorySpi_6.java:25: error: cannot find symbol
        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                                                                  ^
  symbol:   class InvocationTargetException
  location: class TrustManagerFactorySpi_6
2 errors


================================================================

