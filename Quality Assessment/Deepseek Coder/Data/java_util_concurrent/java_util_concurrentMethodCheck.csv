Sample Number,ClassName,Snippet Number,Method,Exist
0,AbstractExecutorService,1,void execute(Runnable command),False
0,AbstractExecutorService,2,Future<?> submit(Runnable task),True
0,AbstractExecutorService,3,Future<T> submit(Callable<T> task),False
0,AbstractExecutorService,4,void shutdown(),False
0,AbstractExecutorService,5,List<Runnable> shutdownNow(),False
1,ArrayBlockingQueue,1,boolean add(E e),True
1,ArrayBlockingQueue,2,boolean offer(E e),True
1,ArrayBlockingQueue,3,E take(),True
1,ArrayBlockingQueue,4,E poll(),True
1,ArrayBlockingQueue,5,E peek(),True
2,CompletableFuture,1,CompletableFuture<Void> runAsync(Runnable task),True
2,CompletableFuture,2,"<U> CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)",True
2,CompletableFuture,3,CompletableFuture<Void> thenRun(Runnable action),True
2,CompletableFuture,4,"CompletableFuture<T> exceptionally(Function<Throwable,? extends T> fn)",True
2,CompletableFuture,5,"CompletableFuture<Void> whenComplete(BiConsumer<? super T,? super Throwable> action)",False
3,ConcurrentHashMap,1,"V putIfAbsent(K key, V value)",True
3,ConcurrentHashMap,2,"V replace(K key, V value)",True
3,ConcurrentHashMap,3,"boolean remove(Object key, Object value)",True
3,ConcurrentHashMap,4,"V compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)",True
3,ConcurrentHashMap,5,"V merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)",True
4,ConcurrentHashMap.KeySetView,1,boolean add(E e),False
4,ConcurrentHashMap.KeySetView,2,void clear(),True
4,ConcurrentHashMap.KeySetView,3,boolean contains(Object o),True
4,ConcurrentHashMap.KeySetView,4,boolean remove(Object o),True
4,ConcurrentHashMap.KeySetView,5,int size(),True
5,ConcurrentLinkedDeque,1,boolean add(E e),True
5,ConcurrentLinkedDeque,2,boolean offer(E e),True
5,ConcurrentLinkedDeque,3,E poll(),True
5,ConcurrentLinkedDeque,4,E peek(),True
5,ConcurrentLinkedDeque,5,boolean remove(Object o),True
6,ConcurrentLinkedQueue,1,boolean add(E e),True
6,ConcurrentLinkedQueue,2,boolean offer(E e),True
6,ConcurrentLinkedQueue,3,E poll(),True
6,ConcurrentLinkedQueue,4,E peek(),True
6,ConcurrentLinkedQueue,5,boolean remove(Object o),True
7,ConcurrentSkipListMap,1,"ConcurrentNavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)",True
7,ConcurrentSkipListMap,2,"ConcurrentNavigableMap<K,V> headMap(K toKey, boolean inclusive)",True
7,ConcurrentSkipListMap,3,"ConcurrentNavigableMap<K,V> tailMap(K fromKey, boolean inclusive)",True
7,ConcurrentSkipListMap,4,K firstKey(),True
7,ConcurrentSkipListMap,5,K lastKey(),True
8,ConcurrentSkipListSet,1,boolean add(E e),True
8,ConcurrentSkipListSet,2,void clear(),True
8,ConcurrentSkipListSet,3,boolean contains(Object o),True
8,ConcurrentSkipListSet,4,boolean isEmpty(),True
8,ConcurrentSkipListSet,5,boolean remove(Object o),True
9,CopyOnWriteArrayList,1,boolean add(E e),True
9,CopyOnWriteArrayList,2,"void add(int index, E element)",True
9,CopyOnWriteArrayList,3,void clear(),True
9,CopyOnWriteArrayList,4,boolean contains(Object o),True
9,CopyOnWriteArrayList,5,E get(int index),True
10,CopyOnWriteArraySet,1,boolean add(E e),True
10,CopyOnWriteArraySet,2,void clear(),True
10,CopyOnWriteArraySet,3,boolean contains(Object o),True
10,CopyOnWriteArraySet,4,boolean isEmpty(),True
10,CopyOnWriteArraySet,5,boolean remove(Object o),True
11,CountDownLatch,1,CountDownLatch(int count),False
11,CountDownLatch,2,void await(),True
11,CountDownLatch,3,void countDown(),True
11,CountDownLatch,4,long getCount(),True
11,CountDownLatch,5,String toString(),True
12,CountedCompleter,1,CountedCompleter(),False
12,CountedCompleter,2,"CountedCompleter(CountedCompleter parent, int completionCount)",False
12,CountedCompleter,3,void beginCountedCompletion(),False
12,CountedCompleter,4,void tryComplete(),True
12,CountedCompleter,5,void completeExceptionally(Throwable ex),False
13,CyclicBarrier,1,int await(),True
13,CyclicBarrier,2,int getParties(),True
13,CyclicBarrier,3,int getNumberWaiting(),True
13,CyclicBarrier,4,boolean isBroken(),True
13,CyclicBarrier,5,void reset(),True
14,DelayQueue,1,boolean add(E e),True
14,DelayQueue,2,E take(),True
14,DelayQueue,3,E poll(),True
14,DelayQueue,4,E peek(),True
14,DelayQueue,5,boolean remove(Object o),True
15,Exchanger,1,V exchange(V x),True
15,Exchanger,2,"void exchange(V x, long timeout, TimeUnit unit)",False
15,Exchanger,3,"V exchange(V x, long timeoutMillis)",False
15,Exchanger,4,"V exchange(V x, Timeout timeout)",False
15,Exchanger,5,void Bind(Exchanger<? extends V> xchg),False
15,Exchanger,6,Exchanger<V> unboundExchanger(),False
15,Exchanger,7,boolean isBound(),False
15,Exchanger,8,Exchanger<V> getBoundExchanger(),False
15,Exchanger,9,void setBoundExchanger(Exchanger<V> exchanger),False
15,Exchanger,10,void unbind(),False
16,ExecutorCompletionService,1,ExecutorCompletionService(Executor executor),False
16,ExecutorCompletionService,2,Future<V> submit(Callable<V> task),True
16,ExecutorCompletionService,3,"Future<V> submit(Runnable task, V result)",True
16,ExecutorCompletionService,4,V get(),False
16,ExecutorCompletionService,5,V take(),False
17,Executors,1,ExecutorService newFixedThreadPool(int nThreads),True
17,Executors,2,ExecutorService newCachedThreadPool(),True
17,Executors,3,ExecutorService newSingleThreadExecutor(),True
17,Executors,4,ScheduledExecutorService newScheduledThreadPool(int corePoolSize),True
17,Executors,5,ExecutorService newWorkStealingPool(int parallelism),True
18,ForkJoinPool,1,ForkJoinPool(),False
18,ForkJoinPool,2,submit(ForkJoinTask<T> task),False
18,ForkJoinPool,3,shutdown(),False
18,ForkJoinPool,4,"awaitTermination(long timeout, TimeUnit unit)",False
18,ForkJoinPool,5,execute(Runnable task),False
19,ForkJoinTask,1,<T> ForkJoinTask<T> adapt(RunnableFuture<T> task),False
19,ForkJoinTask,2,final boolean cancel(boolean mayInterruptIfRunning),False
19,ForkJoinTask,3,boolean isCancelled(),True
19,ForkJoinTask,4,boolean isDone(),True
19,ForkJoinTask,5,T get(),False
20,ForkJoinWorkerThread,1,void start(),False
20,ForkJoinWorkerThread,2,void run(),True
20,ForkJoinWorkerThread,3,void interrupt(),False
20,ForkJoinWorkerThread,4,void stop(),False
20,ForkJoinWorkerThread,5,void join(),False
21,FutureTask,1,V get(),True
21,FutureTask,2,boolean cancel(boolean mayInterruptIfRunning),True
21,FutureTask,3,boolean isCancelled(),True
21,FutureTask,4,boolean isDone(),True
21,FutureTask,5,void run(),True
22,LinkedBlockingDeque,1,boolean add(E e),True
22,LinkedBlockingDeque,2,boolean offer(E e),True
22,LinkedBlockingDeque,3,E take(),True
22,LinkedBlockingDeque,4,E poll(),True
22,LinkedBlockingDeque,5,E peek(),True
23,LinkedBlockingQueue,1,boolean add(E e),False
23,LinkedBlockingQueue,2,E take(),True
23,LinkedBlockingQueue,3,boolean offer(E e),True
23,LinkedBlockingQueue,4,E poll(),True
23,LinkedBlockingQueue,5,int size(),True
24,LinkedTransferQueue,1,boolean add(E e),True
24,LinkedTransferQueue,2,boolean offer(E e),True
24,LinkedTransferQueue,3,E take(),True
24,LinkedTransferQueue,4,E poll(),True
24,LinkedTransferQueue,5,E peek(),True
25,Phaser,1,int getPhase(),True
25,Phaser,2,int getRegisteredParties(),True
25,Phaser,3,int getUnarrivedParties(),True
25,Phaser,4,boolean isTerminated(),True
25,Phaser,5,void register(),False
25,Phaser,6,void register(int parties),False
25,Phaser,7,void arrive(),False
25,Phaser,8,void arriveAndAwaitAdvance(),False
25,Phaser,9,void arriveAndDeregister(),False
25,Phaser,10,void awaitAdvance(int phase),False
25,Phaser,11,void bulkRegister(int parties),False
25,Phaser,12,void forceTermination(),True
25,Phaser,13,void setPhase(int phase),False
25,Phaser,14,void unregister(),False
25,Phaser,15,void unregisterQuietly(),False
25,Phaser,16,void awaitAdvanceInterruptibly(int phase),False
25,Phaser,17,void arriveAndAwaitAdvanceInterruptibly(),False
25,Phaser,18,void arriveAndDeregisterQuietly(),False
25,Phaser,19,void awaitAdvanceInterruptibly(int phase),False
25,Phaser,20,void arriveAndAwaitAdvanceInterruptibly(),False
25,Phaser,21,void arriveAndDeregisterQuietly(),False
25,Phaser,22,void awaitAdvanceInterruptibly(int phase),False
25,Phaser,23,void arriveAndAwaitAdvanceInterruptibly(),False
25,Phaser,24,void arriveAndDeregisterQuietly(),False
26,PriorityBlockingQueue,1,boolean add(E e),True
26,PriorityBlockingQueue,2,E take(),True
26,PriorityBlockingQueue,3,E poll(),True
26,PriorityBlockingQueue,4,boolean offer(E e),True
26,PriorityBlockingQueue,5,boolean remove(Object o),True
27,RecursiveAction,1,void compute(),True
27,RecursiveAction,2,void join(),False
27,RecursiveAction,3,boolean isDone(),False
27,RecursiveAction,4,boolean isCancelled(),False
27,RecursiveAction,5,void cancel(),False
28,RecursiveTask,1,V getRawResult(),True
28,RecursiveTask,2,void setRawResult(V value),True
28,RecursiveTask,3,boolean isCancelled(),False
28,RecursiveTask,4,void cancel(boolean mayInterruptIfRunning),False
28,RecursiveTask,5,boolean isDone(),False
28,RecursiveTask,6,boolean isExceptional(),False
28,RecursiveTask,7,Throwable getException(),False
28,RecursiveTask,8,E get(),False
28,RecursiveTask,9,"E get(long timeout, TimeUnit unit)",False
28,RecursiveTask,10,E invoke(),False
28,RecursiveTask,11,E invokeAll(Collection<? extends Callable<E>> tasks),False
28,RecursiveTask,12,E invokeAny(Collection<? extends Callable<E>> tasks),False
28,RecursiveTask,13,boolean isCancelled(Callable<E> task),False
28,RecursiveTask,14,boolean cancel(boolean mayInterruptIfRunning),False
28,RecursiveTask,15,boolean isDone(Callable<E> task),False
28,RecursiveTask,16,boolean isExceptional(Callable<E> task),False
28,RecursiveTask,17,Throwable getException(Callable<E> task),False
28,RecursiveTask,18,E get(Callable<E> task),False
28,RecursiveTask,19,"E get(Callable<E> task, long timeout, TimeUnit unit)",False
28,RecursiveTask,20,E invoke(Callable<E> task),False
28,RecursiveTask,21,E invokeAll(Callable<E> task),False
28,RecursiveTask,22,E invokeAny(Callable<E> task),False
29,ScheduledThreadPoolExecutor,1,"void schedule(Runnable command, long delay, TimeUnit unit)",False
29,ScheduledThreadPoolExecutor,2,"ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)",True
29,ScheduledThreadPoolExecutor,3,"ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)",True
29,ScheduledThreadPoolExecutor,4,void shutdown(),True
29,ScheduledThreadPoolExecutor,5,List<Runnable> shutdownNow(),True
30,Semaphore,1,Semaphore(int permits),False
30,Semaphore,2,void acquire(),True
30,Semaphore,3,void acquire(int permits),True
30,Semaphore,4,void release(),True
30,Semaphore,5,void release(int permits),True
30,Semaphore,6,int availablePermits(),True
30,Semaphore,7,int drainPermits(),True
30,Semaphore,8,boolean tryAcquire(),True
30,Semaphore,9,"boolean tryAcquire(long timeout, TimeUnit unit)",True
30,Semaphore,10,boolean tryAcquire(int permits),True
30,Semaphore,11,"boolean tryAcquire(int permits, long timeout, TimeUnit unit)",True
30,Semaphore,12,boolean hasQueuedThreads(),True
30,Semaphore,13,int getQueueLength(),True
30,Semaphore,14,Collection<Thread> getQueuedThreads(),True
30,Semaphore,15,boolean isFair(),True
30,Semaphore,16,boolean isPermitAvailable(Permit permit),False
30,Semaphore,17,boolean isAcquired(Permit permit),False
30,Semaphore,18,boolean isAvailable(int permits),False
30,Semaphore,19,"boolean tryAcquire(int permits, long timeout, TimeUnit unit, boolean interruptible)",False
30,Semaphore,20,boolean tryAcquireUninterruptibly(int permits),False
31,SynchronousQueue,1,boolean offer(E e),True
31,SynchronousQueue,2,E take(),True
31,SynchronousQueue,3,"boolean poll(long timeout, TimeUnit unit)",False
31,SynchronousQueue,4,boolean tryOffer(E e),False
31,SynchronousQueue,5,boolean isEmpty(),True
32,ThreadLocalRandom,1,int nextInt(),True
32,ThreadLocalRandom,2,long nextLong(),True
32,ThreadLocalRandom,3,double nextDouble(),True
32,ThreadLocalRandom,4,boolean nextBoolean(),True
32,ThreadLocalRandom,5,float nextFloat(),True
33,ThreadPoolExecutor,1,void execute(Runnable command),True
33,ThreadPoolExecutor,2,void shutdown(),True
33,ThreadPoolExecutor,3,List<Runnable> shutdownNow(),True
33,ThreadPoolExecutor,4,boolean isShutdown(),True
33,ThreadPoolExecutor,5,boolean isTerminated(),True
34,ThreadPoolExecutor.AbortPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True
34,ThreadPoolExecutor.AbortPolicy,2,synchronized void remove(Object o),False
34,ThreadPoolExecutor.AbortPolicy,3,"boolean remove(Object o, Object a)",False
34,ThreadPoolExecutor.AbortPolicy,4,"boolean remove(Object o, Object a, Object b)",False
34,ThreadPoolExecutor.AbortPolicy,5,"boolean remove(Object o, Object a, Object b, Object c)",False
35,ThreadPoolExecutor.CallerRunsPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True
35,ThreadPoolExecutor.CallerRunsPolicy,2,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardPolicy policy)",False
35,ThreadPoolExecutor.CallerRunsPolicy,3,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.DiscardOldestPolicy policy)",False
35,ThreadPoolExecutor.CallerRunsPolicy,4,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, ThreadPoolExecutor.AbortPolicy policy)",False
35,ThreadPoolExecutor.CallerRunsPolicy,5,"void rejectedExecution(Runnable r, ThreadPoolExecutor e, RejectedExecutionHandler handler)",False
36,ThreadPoolExecutor.DiscardOldestPolicy,1,boolean remove(Object o),False
36,ThreadPoolExecutor.DiscardOldestPolicy,2,boolean contains(Object o),False
36,ThreadPoolExecutor.DiscardOldestPolicy,3,int size(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,4,boolean isEmpty(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,5,Object[] toArray(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,6,void execute(Runnable command),False
36,ThreadPoolExecutor.DiscardOldestPolicy,7,void shutdown(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,8,List<Runnable> shutdownNow(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,9,int getActiveCount(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,10,int getCorePoolSize(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,11,int getMaximumPoolSize(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,12,int getPoolSize(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,13,long getTaskCount(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,14,long getCompletedTaskCount(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,15,boolean isShutdown(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,16,boolean isTerminated(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,17,"boolean awaitTermination(long timeout, TimeUnit unit)",False
36,ThreadPoolExecutor.DiscardOldestPolicy,18,void setRejectedExecutionHandler(RejectedExecutionHandler handler),False
36,ThreadPoolExecutor.DiscardOldestPolicy,19,ThreadPoolExecutor.AbortPolicy(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,20,ThreadPoolExecutor.CallerRunsPolicy(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,21,ThreadPoolExecutor.DiscardPolicy(),False
36,ThreadPoolExecutor.DiscardOldestPolicy,22,ThreadPoolExecutor.DiscardOldestPolicy(),False
37,ThreadPoolExecutor.DiscardPolicy,1,"void rejectedExecution(Runnable r, ThreadPoolExecutor e)",True
37,ThreadPoolExecutor.DiscardPolicy,2,long getCompletedTaskCount(),False
37,ThreadPoolExecutor.DiscardPolicy,3,int getPoolSize(),False
37,ThreadPoolExecutor.DiscardPolicy,4,int getActiveCount(),False
37,ThreadPoolExecutor.DiscardPolicy,5,boolean isShutdown(),False
