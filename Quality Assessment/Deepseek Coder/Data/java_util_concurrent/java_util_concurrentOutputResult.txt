Sample: AbstractExecutorService_2
----------------------------------------------------------------
stdout:
Task executed

================================================================

Sample: ArrayBlockingQueue_1
----------------------------------------------------------------
stdout:
Addition successful: true
Queue: [Hello]

================================================================

Sample: ArrayBlockingQueue_2
----------------------------------------------------------------
stdout:
Element added successfully

================================================================

Sample: ArrayBlockingQueue_3
----------------------------------------------------------------
stdout:
Element taken: Hello

================================================================

Sample: ArrayBlockingQueue_4
----------------------------------------------------------------
stdout:
Polled element: Element 1
Polled element: Element 2
Polled element: Element 3

================================================================

Sample: ArrayBlockingQueue_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: CompletableFuture_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/CompletableFuture_1.java:1: error: class, interface, enum, or record expected
CompletableFuture<Void> future = CompletableFuture.runAsync(() -> {
^
./Data/java_util_concurrent/javaFiles/CompletableFuture_1.java:4: error: class, interface, enum, or record expected
});
^
./Data/java_util_concurrent/javaFiles/CompletableFuture_1.java:6: error: class, interface, enum, or record expected
future.join();  // This will make the main thread wait for the asynchronous task to complete
^
3 errors


================================================================

Sample: CompletableFuture_2
----------------------------------------------------------------
================================================================

Sample: CompletableFuture_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/CompletableFuture_3.java:5: error: incompatible types: inference variable U has incompatible bounds
        CompletableFuture<Void> future = CompletableFuture.supplyAsync(() -> {
                                                                      ^
    equality constraints: Void
    lower bounds: String
  where U is a type-variable:
    U extends Object declared in method <U>supplyAsync(Supplier<U>)
1 error


================================================================

Sample: CompletableFuture_4
----------------------------------------------------------------
stdout:
Handled exception: java.lang.RuntimeException: Failed

================================================================

Sample: ConcurrentHashMap_1
----------------------------------------------------------------
stdout:
{key1=value1, key2=value2}

================================================================

Sample: ConcurrentHashMap_2
----------------------------------------------------------------
stdout:
Before replace: {key1=value1, key2=value2, key3=value3}
After replace: {key1=value1, key2=newValue, key3=value3}

================================================================

Sample: ConcurrentHashMap_3
----------------------------------------------------------------
stdout:
Initial map: {key1=value1, key2=value2, key3=value3}
Is 'key2' removed? true
Map after removal: {key1=value1, key3=value3}

================================================================

Sample: ConcurrentHashMap_4
----------------------------------------------------------------
stdout:
Result: 2
Map: {one=2, two=2, three=3}

================================================================

Sample: ConcurrentHashMap_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ConcurrentHashMap_5.java:11: error: incompatible types: BiFunction<String,Integer,Integer> cannot be converted to BiFunction<? super Integer,? super Integer,? extends Integer>
        Integer result = map.merge("one", 2, remappingFunction);
                                             ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ConcurrentHashMap_KeySetView_2
----------------------------------------------------------------
stdout:
Before clear: [1, 2, 3]
After clear: []

================================================================

Sample: ConcurrentHashMap_KeySetView_3
----------------------------------------------------------------
stdout:
Contains key '1': true
Contains key '3': false

================================================================

Sample: ConcurrentHashMap_KeySetView_4
----------------------------------------------------------------
stdout:
Is the element removed? true
The map after removal: {2=World}

================================================================

Sample: ConcurrentHashMap_KeySetView_5
----------------------------------------------------------------
stdout:
Size of the ConcurrentHashMap.KeySetView: 3

================================================================

Sample: ConcurrentLinkedDeque_1
----------------------------------------------------------------
stdout:
Addition successful: true
Deque: [Hello]

================================================================

Sample: ConcurrentLinkedDeque_2
----------------------------------------------------------------
stdout:
Addition successful: true
Deque: [Hello]

================================================================

Sample: ConcurrentLinkedDeque_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentLinkedDeque_4
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentLinkedDeque_5
----------------------------------------------------------------
stdout:
[Hello, World]
Removed: true
[Hello]

================================================================

Sample: ConcurrentLinkedQueue_1
----------------------------------------------------------------
stdout:
Addition successful: true
Queue: [Hello]

================================================================

Sample: ConcurrentLinkedQueue_2
----------------------------------------------------------------
stdout:
Addition successful: true
Queue: [Hello]

================================================================

Sample: ConcurrentLinkedQueue_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: ConcurrentLinkedQueue_5
----------------------------------------------------------------
stdout:
Original Queue: [Element1, Element2, Element3]
Is 'Element2' removed? true
Updated Queue: [Element1, Element3]

================================================================

Sample: ConcurrentSkipListMap_1
----------------------------------------------------------------
stdout:
Submap: {2=Two, 3=Three}

================================================================

Sample: ConcurrentSkipListMap_2
----------------------------------------------------------------
stdout:
Original Map: {1=One, 2=Two, 3=Three, 4=Four, 5=Five}
Head Map: {1=One, 2=Two, 3=Three}

================================================================

Sample: ConcurrentSkipListMap_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.ClassCastException: class java.util.concurrent.ConcurrentSkipListMap$SubMap cannot be cast to class java.util.concurrent.ConcurrentSkipListMap (java.util.concurrent.ConcurrentSkipListMap$SubMap and java.util.concurrent.ConcurrentSkipListMap are in module java.base of loader 'bootstrap')
	at ConcurrentSkipListMap_3.main(ConcurrentSkipListMap_3.java:12)

================================================================

Sample: ConcurrentSkipListMap_4
----------------------------------------------------------------
stdout:
First Key: 1

================================================================

Sample: ConcurrentSkipListMap_5
----------------------------------------------------------------
stdout:
Last Key: 3

================================================================

Sample: ConcurrentSkipListSet_1
----------------------------------------------------------------
stdout:
true
[Hello]

================================================================

Sample: ConcurrentSkipListSet_2
----------------------------------------------------------------
stdout:
[Hello, World]
[]

================================================================

Sample: ConcurrentSkipListSet_3
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentSkipListSet_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: ConcurrentSkipListSet_5
----------------------------------------------------------------
stdout:
true
[]

================================================================

Sample: CopyOnWriteArrayList_1
----------------------------------------------------------------
stdout:
[Hello]

================================================================

Sample: CopyOnWriteArrayList_2
----------------------------------------------------------------
stdout:
[Hello, Java, World]

================================================================

Sample: CopyOnWriteArrayList_3
----------------------------------------------------------------
stdout:
[Hello, World]
[]

================================================================

Sample: CopyOnWriteArrayList_4
----------------------------------------------------------------
stdout:
true

================================================================

Sample: CopyOnWriteArrayList_5
----------------------------------------------------------------
stdout:
World

================================================================

Sample: CopyOnWriteArraySet_1
----------------------------------------------------------------
stdout:
Element added successfully: true
Set: [Hello]

================================================================

Sample: CopyOnWriteArraySet_2
----------------------------------------------------------------
stdout:
[Hello, World]
[]

================================================================

Sample: CopyOnWriteArraySet_3
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_4
----------------------------------------------------------------
stdout:
true
false

================================================================

Sample: CopyOnWriteArraySet_5
----------------------------------------------------------------
stdout:
Is element removed? true
Set: []

================================================================

Sample: CountDownLatch_2
----------------------------------------------------------------
stdout:
Thread 1 is running
Thread 3 is running
Thread 2 is running
All threads have finished executing

================================================================

Sample: CountDownLatch_3
----------------------------------------------------------------
stdout:
Thread 1 is running
Thread 3 is running
Thread 2 is running
All threads have finished executing

================================================================

Sample: CountDownLatch_4
----------------------------------------------------------------
stdout:
Initial count: 3
Count after first countDown(): 2
Count after second countDown(): 1
Count after third countDown(): 0

================================================================

Sample: CountDownLatch_5
----------------------------------------------------------------
stdout:
java.util.concurrent.CountDownLatch@6eceb130[Count = 3]

================================================================

Sample: CountedCompleter_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/CountedCompleter_4.java:4: error: class MyCountedCompleter is public, should be declared in a file named MyCountedCompleter.java
public class MyCountedCompleter extends CountedCompleter<Void> {
       ^
./Data/java_util_concurrent/javaFiles/CountedCompleter_4.java:32: error: cannot find symbol
        completer.decrementCount();
                 ^
  symbol:   method decrementCount()
  location: variable completer of type CountedCompleter<Void>
./Data/java_util_concurrent/javaFiles/CountedCompleter_4.java:33: error: cannot find symbol
        completer.decrementCount();
                 ^
  symbol:   method decrementCount()
  location: variable completer of type CountedCompleter<Void>
3 errors


================================================================

Sample: CyclicBarrier_1
----------------------------------------------------------------
stdout:
Thread 1 is waiting on barrier
Thread 3 is waiting on barrier
Thread 2 is waiting on barrier
Thread 2 has crossed the barrier
Thread 1 has crossed the barrier
Thread 3 has crossed the barrier

================================================================

Sample: CyclicBarrier_2
----------------------------------------------------------------
stdout:
Number of parties: 3

================================================================

Sample: CyclicBarrier_3
----------------------------------------------------------------
stdout:
Thread 3 is waiting
Thread 2 is waiting
Thread 1 is waiting
All threads are released
Thread 2 released
Thread 3 released
Thread 1 released

================================================================

Sample: CyclicBarrier_4
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: CyclicBarrier_5
----------------------------------------------------------------
stdout:
Thread 1 is waiting on barrier
Thread 2 is waiting on barrier
Thread 3 is waiting on barrier
Barrier Reached
Thread 2 has crossed the barrier
Thread 1 has crossed the barrier
Thread 3 has crossed the barrier

================================================================

Sample: DelayQueue_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_2.java:15: error: unreported exception InterruptedException; must be caught or declared to be thrown
        DelayedElement takenElement = delayQueue.take();
                                                     ^
1 error


================================================================

Sample: DelayQueue_3
----------------------------------------------------------------
stdout:
No elements in the delay queue

================================================================

Sample: DelayQueue_4
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: DelayQueue_5
----------------------------------------------------------------
stdout:
DelayQueue: [Hello]
Is object removed? true
DelayQueue after removal: []

================================================================

Sample: Exchanger_1
----------------------------------------------------------------
stdout:
Thread 2 received: Hello from thread 1
Thread 1 received: Hello from thread 2

================================================================

Sample: ExecutorCompletionService_2
----------------------------------------------------------------
stdout:
Waiting for task completion...
Task completed: Task completed

================================================================

Sample: ExecutorCompletionService_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ExecutorCompletionService_3.java:10: error: incompatible types: bad return type in lambda expression
        Future<String> future = completionService.submit(() -> {
                                                         ^
    unexpected return value
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: Executors_1
----------------------------------------------------------------
stdout:
Task 4 is running on thread pool-1-thread-5
Task 3 is running on thread pool-1-thread-4
Task 1 is running on thread pool-1-thread-2
Task 5 is running on thread pool-1-thread-5
Task 8 is running on thread pool-1-thread-5
Task 7 is running on thread pool-1-thread-4
Task 6 is running on thread pool-1-thread-2
Task 9 is running on thread pool-1-thread-5
Task 0 is running on thread pool-1-thread-1
Task 2 is running on thread pool-1-thread-3

================================================================

Sample: Executors_2
----------------------------------------------------------------
stdout:
pool-1-thread-5 is running, task = 4
pool-1-thread-4 is running, task = 3
pool-1-thread-2 is running, task = 1
pool-1-thread-3 is running, task = 2
pool-1-thread-1 is running, task = 0

================================================================

Sample: Executors_3
----------------------------------------------------------------
stdout:
Task executed by pool-1-thread-1

================================================================

Sample: Executors_4
----------------------------------------------------------------
stdout:
Scheduled task executed

================================================================

Sample: Executors_5
----------------------------------------------------------------
stdout:
Hello, World!

================================================================

Sample: ForkJoinTask_3
----------------------------------------------------------------
stdout:
true

================================================================

Sample: ForkJoinTask_4
----------------------------------------------------------------
stdout:
Is task done? false

================================================================

Sample: ForkJoinWorkerThread_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinWorkerThread_2.java:5: error: constructor ForkJoinWorkerThread in class ForkJoinWorkerThread cannot be applied to given types;
        ForkJoinWorkerThread thread = new ForkJoinWorkerThread(null);
                                      ^
  required: ForkJoinPool
  found:    <null>
  reason: ForkJoinWorkerThread(ForkJoinPool) has protected access in ForkJoinWorkerThread
./Data/java_util_concurrent/javaFiles/ForkJoinWorkerThread_2.java:9: error: cannot find symbol
        thread.getPendingTask().add(() -> System.out.println("Hello, World"));
              ^
  symbol:   method getPendingTask()
  location: variable thread of type ForkJoinWorkerThread
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: FutureTask_1
----------------------------------------------------------------
stdout:
Hello, World!

================================================================

Sample: FutureTask_2
----------------------------------------------------------------
stdout:
Task cancelled: true

================================================================

Sample: FutureTask_3
----------------------------------------------------------------
stdout:
Is task cancelled? false

================================================================

Sample: FutureTask_4
----------------------------------------------------------------
stdout:
Is the task done? false
Result: Hello, World!

================================================================

Sample: FutureTask_5
----------------------------------------------------------------
stdout:
Doing something...

================================================================

Sample: LinkedBlockingDeque_1
----------------------------------------------------------------
stdout:
Addition successful: true
Deque: [Hello]

================================================================

Sample: LinkedBlockingDeque_2
----------------------------------------------------------------
stdout:
Offer Successful: true
Deque: [Hello]

================================================================

Sample: LinkedBlockingDeque_3
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingDeque_4
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingDeque_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedBlockingQueue_2
----------------------------------------------------------------
stdout:
Taken element: Hello

================================================================

Sample: LinkedBlockingQueue_3
----------------------------------------------------------------
stdout:
Element added successfully

================================================================

Sample: LinkedBlockingQueue_4
----------------------------------------------------------------
stdout:
Queue: [Element 1, Element 2, Element 3]
Removed element: Element 1
Updated queue: [Element 2, Element 3]

================================================================

Sample: LinkedBlockingQueue_5
----------------------------------------------------------------
stdout:
Size of the queue: 3

================================================================

Sample: LinkedTransferQueue_1
----------------------------------------------------------------
stdout:
Element added successfully

================================================================

Sample: LinkedTransferQueue_2
----------------------------------------------------------------
stdout:
Offer successful: true

================================================================

Sample: LinkedTransferQueue_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/LinkedTransferQueue_3.java:7: error: unreported exception InterruptedException; must be caught or declared to be thrown
        String element = queue.take();
                                   ^
1 error


================================================================

Sample: LinkedTransferQueue_4
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: LinkedTransferQueue_5
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: Phaser_1
----------------------------------------------------------------
stdout:
Phase: 0
Phase: 1

================================================================

Sample: Phaser_2
----------------------------------------------------------------
stdout:
Initial number of registered parties: 1
Number of registered parties after registering another: 2
Number of registered parties after deregistering: 1

================================================================

Sample: Phaser_3
----------------------------------------------------------------
stdout:
Unarrived parties: 1
Unarrived parties: 0

================================================================

Sample: Phaser_4
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Phaser_12
----------------------------------------------------------------
stdout:
Phase: 0
Is terminated: true

================================================================

Sample: PriorityBlockingQueue_2
----------------------------------------------------------------
stdout:
10

================================================================

Sample: PriorityBlockingQueue_3
----------------------------------------------------------------
stdout:
Queue: [Element 1, Element 2, Element 3]
Head of the queue: Element 1
Queue after poll operation: [Element 2, Element 3]

================================================================

Sample: PriorityBlockingQueue_4
----------------------------------------------------------------
stdout:
Offer success: true

================================================================

Sample: PriorityBlockingQueue_5
----------------------------------------------------------------
stdout:
Original Queue: [10, 20, 30]
Is 20 removed? true
Queue after remove: [10, 30]

================================================================

Sample: RecursiveAction_1
----------------------------------------------------------------
stdout:
1

================================================================

Sample: RecursiveTask_1
----------------------------------------------------------------
stdout:
null

================================================================

Sample: RecursiveTask_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/RecursiveTask_2.java:3: error: class MyRecursiveTask is public, should be declared in a file named MyRecursiveTask.java
public class MyRecursiveTask extends RecursiveTask<String> {
       ^
1 error


================================================================

Sample: ScheduledThreadPoolExecutor_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ScheduledThreadPoolExecutor_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ScheduledThreadPoolExecutor_4
----------------------------------------------------------------
stdout:
Task executed

================================================================

Sample: ScheduledThreadPoolExecutor_5
----------------------------------------------------------------
================================================================

Sample: Semaphore_2
----------------------------------------------------------------
stdout:
Thread 1 is running
Thread 1 is done
Thread 2 is running
Thread 2 is done

================================================================

Sample: Semaphore_3
----------------------------------------------------------------
stdout:
Acquired the permit
Released the permit

================================================================

Sample: Semaphore_4
----------------------------------------------------------------
stdout:
Semaphore acquired
Semaphore released

================================================================

Sample: Semaphore_5
----------------------------------------------------------------
stdout:
Acquired the semaphore
Released 2 permits

================================================================

Sample: Semaphore_6
----------------------------------------------------------------
stdout:
Available permits: 1

================================================================

Sample: Semaphore_7
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Semaphore_8
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/Semaphore_8.java:10: error: cannot find symbol
            permitAcquired = semaphore.tryAcquire(1000, TimeUnit.MILLISECONDS);
                                                        ^
  symbol:   variable TimeUnit
  location: class Semaphore_8
1 error


================================================================

Sample: Semaphore_9
----------------------------------------------------------------
stdout:
Thread 1: Acquiring lock...
Thread 1: Lock acquired.
Thread 2: Trying to acquire lock...
Thread 2: Could not acquire lock.
Thread 1: Lock released.

================================================================

Sample: Semaphore_10
----------------------------------------------------------------
stdout:
Permit acquired: true

================================================================

Sample: Semaphore_11
----------------------------------------------------------------
stdout:
Thread 1: Acquired permit
Thread 2: Could not acquire permit
Thread 1: Releasing permit

================================================================

Sample: Semaphore_12
----------------------------------------------------------------
stdout:
false

================================================================

Sample: Semaphore_13
----------------------------------------------------------------
stdout:
Queue length: 0

================================================================

Sample: Semaphore_14
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/Semaphore_14.java:59: error: getQueuedThreads() has protected access in Semaphore
        Collection<Thread> queuedThreads = semaphore.getQueuedThreads();
                                                    ^
1 error


================================================================

Sample: Semaphore_15
----------------------------------------------------------------
stdout:
true

================================================================

Sample: SynchronousQueue_1
----------------------------------------------------------------
stdout:
Offer successful: false

================================================================

Sample: SynchronousQueue_2
----------------------------------------------------------------
stdout:
Producer producing: Hello
Consumer consumed: Hello

================================================================

Sample: SynchronousQueue_5
----------------------------------------------------------------
stdout:
true

stderr:
Exception in thread "main" java.lang.IllegalStateException: Queue full
	at java.base/java.util.AbstractQueue.add(AbstractQueue.java:98)
	at SynchronousQueue_5.main(SynchronousQueue_5.java:8)

================================================================

Sample: ThreadLocalRandom_1
----------------------------------------------------------------
stdout:
Random Integer: 233596625

================================================================

Sample: ThreadLocalRandom_2
----------------------------------------------------------------
stdout:
Random Long: 3956416026367445307

================================================================

Sample: ThreadLocalRandom_3
----------------------------------------------------------------
stdout:
0.14865766524760005

================================================================

Sample: ThreadLocalRandom_4
----------------------------------------------------------------
stdout:
Generated boolean: false

================================================================

Sample: ThreadLocalRandom_5
----------------------------------------------------------------
stdout:
0.08642322

================================================================

Sample: ThreadPoolExecutor_1
----------------------------------------------------------------
stdout:
Asynchronous task is running...

================================================================

Sample: ThreadPoolExecutor_2
----------------------------------------------------------------
================================================================

Sample: ThreadPoolExecutor_3
----------------------------------------------------------------
stdout:
Task is running
Task is interrupted

================================================================

Sample: ThreadPoolExecutor_4
----------------------------------------------------------------
stdout:
Is executor shutdown? false
Is executor shutdown? true
Task completed

================================================================

Sample: ThreadPoolExecutor_AbortPolicy_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_1
----------------------------------------------------------------
stdout:
Start task 0
End task 0
Start task 1
End task 1
Start task 2
End task 2
Start task 3
End task 3
Start task 4
End task 4

================================================================

Sample: ThreadPoolExecutor_DiscardPolicy_1
----------------------------------------------------------------
stdout:
Running task
Running another task

================================================================

