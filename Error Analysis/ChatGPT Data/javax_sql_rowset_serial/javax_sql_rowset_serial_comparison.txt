Sample: 0 SerialArray
----------------------------------------------------------------
1. `Object getArray()`: This method returns the array that contains the ordered elements of the SerialArray object.
2. `String getBaseTypeName()`: This method returns the base type name of the SQL array that this SerialArray object represents.
3. `ResultSet getResultSet()`: This method creates and returns a ResultSet object that contains all of the elements in the SerialArray object.
4. `Map <String, Class<?>> getTypeMap()`: This method returns the type map that contains the mapping of SQL UDT names to Java classes.
5. `long length()`: This method returns the number of elements in the array that this SerialArray object represents.
================================================================

Sample: 1 SerialBlob
----------------------------------------------------------------
1. `byte[] getBytes()`: This method returns the byte array that makes up the SerialBlob object.
2. `long length()`: This method returns the number of bytes in the SQL blob that this SerialBlob object represents.
3. `InputStream getBinaryStream()`: This method retrieves the number of bytes from the blob value designated by this SerialBlob object.
4. `OutputStream setBinaryStream(long pos)`: This method retrieves a stream for writing to the SQL blob that this SerialBlob object represents, starting at the specified position.
5. `int setBytes(long pos, byte[] bytes)`: This method writes the given byte array to the SQL BLOB value that this SerialBlob object represents, starting at the specified position.
================================================================

Sample: 2 SerialClob
----------------------------------------------------------------
1. `long length()`: Returns the number of characters in the serial Clob value.
2. `Reader getCharacterStream()`: Retrieves the Clob value designated by this SerialClob instance as a Reader object.
3. `String getSubString(long pos, int length)`: Retrieves a substring of the Clob value that starts at a specified position and has a specified length.
4. `OutputStream setAsciiStream(long pos)`: Retrieves a stream that can be used to write to the Clob value starting at the specified position in ASCII format.
5. `Writer setCharacterStream(long pos)`: Retrieves a stream that can be used to write characters to the Clob value starting at the specified position.
================================================================

Sample: 3 SerialDatalink
----------------------------------------------------------------
1. `String getURL()`: This method returns the URL value as a String.
2. `InputStream getInputStream()`: This method returns the contents of the data source as a stream of bytes.
3. `void setURL(String url)`: This method sets the URL to the given String value.
4. `void setInputStream(InputStream istream)`: This method sets the contents of the data source to the provided InputStream.
5. `boolean equals(Object obj)`: This method compares this SerialDatalink object to the specified object.
================================================================

Sample: 4 SerialJavaObject
----------------------------------------------------------------
1. `void set(java.sql.ResultSet rs)`: This method sets the contents of the SerialJavaObject with the data from the specified ResultSet.
2. `java.lang.Object getObject()`: This method retrieves the Object instance contained in the SerialJavaObject.
3. `java.lang.String getClassName()`: This method retrieves the class name of the class in the SerialJavaObject object.
4. `java.sql.Struct getStruct()`: This method retrieves the instance that contains the value within the object in SerialJavaObject as a Struct value.
5. `void setObject(java.lang.Object obj)`: This method sets the Object instance in the SerialJavaObject.
================================================================

Sample: 5 SerialRef
----------------------------------------------------------------
1. `SerialRef createRef()`: This method creates a new instance of SerialRef.
2. `Object getObject()`: This method retrieves the object from the SQL structured type that this SerialRef represents.
3. `String getBaseTypeName()`: This method retrieves the base type name of the SQL structured type that this SerialRef represents.
4. `String getSQLTypeName()`: This method retrieves the SQL type name of the SQL structured type that this SerialRef represents.
5. `void setObject(Object obj)`: This method sets the object for the SQL structured type that this SerialRef represents.
================================================================

Sample: 6 SerialStruct
----------------------------------------------------------------
1. SerialStruct createStruct(String sqlTypeName, Object[] attributes) : This method creates a new SerialStruct object with the given SQL type name and attributes.
2. Object[] getAttributes() : This method returns an array of Objects containing the attribute values for the Struct object.
3. StructDescriptor getDescriptor() : This method returns the StructDescriptor for this SerialStruct object.
4. Map<String, Class<?>> getAttributesMap() : This method returns a Map of attribute names and corresponding Java Class types for the Struct object.
5. String getSQLTypeName() : This method returns the SQL type name for the Struct object.
================================================================

Sample: 7 SQLInputImpl
----------------------------------------------------------------
1. `boolean readBoolean()`: This method reads a boolean value from the stream.
2. `String readString()`: This method reads a String value from the stream.
3. `long readLong()`: This method reads a long value from the stream.
4. `java.sql.Date readDate()`: This method reads a Date value from the stream.
5. `java.sql.Time readTime()`: This method reads a Time value from the stream.
================================================================

Sample: 8 SQLOutputImpl
----------------------------------------------------------------
1. `void writeBoolean(boolean x)`: This method writes a boolean value to the SQLOutputImpl object.
2. `void writeByte(byte x)`: This method writes a byte value to the SQLOutputImpl object.
3. `void writeBytes(byte[] x)`: This method writes a byte array to the SQLOutputImpl object.
4. `void writeChars(String x)`: This method writes a String of Unicode characters to the SQLOutputImpl object.
5. `void writeObject(Object x)`: This method writes an Object value to the SQLOutputImpl object.
================================================================

