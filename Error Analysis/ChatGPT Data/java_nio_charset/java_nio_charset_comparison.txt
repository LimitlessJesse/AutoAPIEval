Sample: 0 Charset
----------------------------------------------------------------
1. `SortedMap<String,Charset> availableCharsets()`: This method returns a sorted map of all available charsets supported by the Java platform.
2. `Charset forName(String charsetName)`: This method returns a charset object for the given charset name.
3. `CharsetDecoder newDecoder()`: This method returns a new charset decoder for this charset.
4. `CharsetEncoder newEncoder()`: This method returns a new charset encoder for this charset.
5. `SortedSet<String> availableCharsets()`: This method returns a sorted set of all available charsets supported by the Java platform.
================================================================

Sample: 1 CharsetDecoder
----------------------------------------------------------------
1. `Charset charset()`: Returns the charset that created this decoder.
2. `CodingErrorAction malformedInputAction()`: Returns the current action for malformed-input.
3. `CharsetDecoder onMalformedInput(CodingErrorAction action)`: Set the new action for malformed-input errors.
4. `CharsetDecoder onUnmappableCharacter(CodingErrorAction action)`: Set the new action for unmappable-character errors.
5. `CharsetDecoder replaceWith(byte[] newReplacement)`: Set the new byte array that the decoder should use for unmappable-character errors.
================================================================

Sample: 2 CharsetEncoder
----------------------------------------------------------------
1. `boolean canEncode(char c)`: This method checks if the given character can be encoded.
2. `int encode(CharBuffer in, ByteBuffer out, boolean endOfInput)`: This method encodes characters from the input buffer into the output buffer.
3. `Charset charset()`: This method returns the charset that created this encoder.
4. `boolean isLegalReplacement(byte[] replacement)`: This method checks if the given replacement byte sequence is legal for this encoder.
5. `void replaceWith(byte[] newReplacement)`: This method changes the byte sequence used as the replacement for illegal input.
================================================================

Sample: 3 CoderResult
----------------------------------------------------------------
1. `static CoderResult malformedForLength(int length)`: This method returns a singleton instance of CoderResult representing a malformed-input error of the given length.
2. `static CoderResult unmappableForLength(int length)`: This method returns a singleton instance of CoderResult representing an unmappable-character error of the given length.
3. `static CoderResult overflow()` : This method returns a singleton instance of CoderResult representing an overflow error.
4. `static CoderResult underflow()`: This method returns a singleton instance of CoderResult representing an underflow error.
5. `static CoderResult unmappableForLength(int length, char[] src)` : This method returns a singleton instance of CoderResult representing an unmappable-character error of the given length, with additional details provided by the source character array.
================================================================

Sample: 4 CodingErrorAction
----------------------------------------------------------------
1. `CodingErrorAction ACTION_REPLACEMENT()`: Returns the action indicating that the error must be replaced with the replacement character.
2. `CodingErrorAction ACTION_IGNORE()`: Returns the action indicating that the error must be ignored.
3. `CodingErrorAction ACTION_REPORT()`: Returns the action indicating that the error must be reported.
4. `CodingErrorAction ACTION_MALFORMED()`: Returns the action indicating that the error must be handled as malformed input.
5. `CodingErrorAction ACTION_UNMAPPABLE()`: Returns the action indicating that the error must be handled as unmappable character.
================================================================

Sample: 5 StandardCharsets
----------------------------------------------------------------
1. `Charset forName(String charsetName)`: Returns a charset object for the named charset.
2. `SortedMap<String, Charset> availableCharsets()`: Returns a sorted map of all available charsets.
3. `String[] isoVersions()`: Returns an array of strings containing the names of all installed charsets.
4. `Charset defaultCharset()`: Returns the default charset of this Java virtual machine.
5. `CharsetEncoder newEncoder()`: Returns a new charset encoder for this charset.
================================================================

