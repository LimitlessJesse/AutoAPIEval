Sample: 0 Instrument
----------------------------------------------------------------
1. `Soundbank getSoundbank()`: This method returns the Soundbank associated with this Instrument.
2. `Patch getPatch()`: This method returns the Patch object that represents the bank and program number of this Instrument.
3. `String getName()`: This method returns the name of this Instrument.
4. `int getPolyphony()`: This method returns the maximum number of notes that can be played at the same time on this Instrument.
5. `String toString()`: This method returns a string representation of this Instrument.
================================================================

Sample: 1 MetaMessage
----------------------------------------------------------------
1. `int getType()`: Returns the type of this meta message.
2. `byte[] getData()`: Returns a reference to the data in this meta message.
3. `void setMessage(int type, byte[] data, int length)`: Sets the contents of the meta message.
4. `long getTick()`: Returns the timing information in the meta message.
5. `String toString()`: Returns a string representation of the meta message.
================================================================

Sample: 2 MidiDevice.Info
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the MIDI device.
2. `String getVendor()`: This method returns the vendor of the MIDI device.
3. `String getDescription()`: This method returns the description of the MIDI device.
4. `String getVersion()`: This method returns the version of the MIDI device.
5. `String toString()`: This method returns a string representation of the MIDI device info.
================================================================

Sample: 3 MidiEvent
----------------------------------------------------------------
1. `long getTick()`: This method returns the tick value of this MidiEvent.
2. `void setTick(long tick)`: This method sets the tick value of this MidiEvent.
3. `byte[] getMessage()`: This method returns the MIDI message data byte array of this MidiEvent.
4. `void setMessage(byte[] message, int length)`: This method sets the MIDI message data of this MidiEvent with the given byte array and length.
5. `int compareTo(MidiEvent otherEvent)`: This method compares this MidiEvent to another MidiEvent based on their tick values.
================================================================

Sample: 4 MidiFileFormat
----------------------------------------------------------------
1. `int getType()`: This method returns the type of the MIDI file.
2. `int getResolution()`: This method returns the timing resolution for the MIDI file.
3. `int getDivisionType()`: This method returns the division type for the MIDI file.
4. `int getByteLength()`: This method returns the length of the MIDI file in bytes.
5. `long getMicrosecondLength()`: This method returns the length of the MIDI file in microseconds.
================================================================

Sample: 5 MidiMessage
----------------------------------------------------------------
1. `int getMessage()`: This method returns the status byte of the MIDI message.
2. `int getLength()`: This method returns the length of the MIDI message in bytes.
3. `byte[] getMessage(): This method returns the raw bytes of the MIDI message.
4. `String toString()`: This method returns a string representation of the MIDI message.
5. `MidiMessage clone()`: This method creates and returns a copy of this MIDI message.
================================================================

Sample: 6 MidiSystem
----------------------------------------------------------------
1. `Sequence getSequence(URL url)`: This method returns a Sequence object from the specified URL.
2. `Sequence getSequence(File file)`: This method returns a Sequence object from the specified File.
3. `Receiver getReceiver()`: This method returns a Receiver object that sends MidiEvent objects to the default device.
4. `Transmitter getTransmitter()`: This method returns a Transmitter object that receives MidiEvent objects from an external source.
5. `SoundbankReader getSoundbankReader()`: This method returns a SoundbankReader object for reading Soundbank objects.
================================================================

Sample: 7 Patch
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the Patch.
2. `int getBank()`: This method returns the bank index of the Patch.
3. `int getProgram()`: This method returns the program number of the Patch.
4. `void setBank(int bank)`: This method sets the bank index of the Patch.
5. `void setProgram(int program)`: This method sets the program number of the Patch.
================================================================

Sample: 8 Sequence
----------------------------------------------------------------
1. `int createTrack()`: This method creates a new track and returns the index of the newly created track.
2. `long getMicrosecondLength()`: This method returns the length of the sequence in microseconds.
3. `int getResolution()`: This method returns the timing resolution of the sequence.
4. `float getDivisionType()`: This method returns the division type of the sequence.
5. `float getTempoInBPM()`: This method returns the tempo of the sequence in beats per minute.
================================================================

Sample: 9 Sequencer.SyncMode
----------------------------------------------------------------
1. `SyncMode getMasterSyncMode()`: This method returns the master sync mode of the sequencer.
2. `SyncMode getSlaveSyncMode()`: This method returns the slave sync mode of the sequencer.
3. `void setMasterSyncMode(SyncMode syncMode)`: This method sets the master sync mode for the sequencer.
4. `void setSlaveSyncMode(SyncMode syncMode)`: This method sets the slave sync mode for the sequencer.
================================================================

Sample: 10 ShortMessage
----------------------------------------------------------------
1. `int getChannel()`: Returns the MIDI channel associated with this ShortMessage.
2. `int getData1()`: Returns the first data byte in the message.
3. `int getData2()`: Returns the second data byte in the message.
4. `int getLength()`: Returns the length of the message in bytes.
5. `int getCommand()`: Returns the status byte of the message.
================================================================

Sample: 11 SoundbankResource
----------------------------------------------------------------
1. `SoundbankResource[] getSoundbanks()`: This method returns an array of SoundbankResource objects representing the soundbanks available in this SoundbankResource object.
2. `SoundbankResource getDefaultSoundbank()`: This method returns the default SoundbankResource object from this SoundbankResource object.
3. `Instrument[] getInstruments()`: This method returns an array of Instrument objects representing the instruments available in this SoundbankResource object.
4. `Instrument getInstrument(Patch patch)`: This method returns the Instrument object associated with the specified Patch object.
5. `String getDescription()`: This method returns a description of this SoundbankResource object.
================================================================

Sample: 12 SysexMessage
----------------------------------------------------------------
1. `byte[] getData()`: This method returns the data bytes of this SysexMessage.
2. `int getLength()`: This method returns the length of the data in this SysexMessage.
3. `int getStatus()`: This method returns the status byte of this SysexMessage.
4. `void setMessage(int status, byte[] data, int length)`: This method sets the contents of the SysexMessage with the specified status byte, data bytes, and length.
5. `Object clone()`: This method creates and returns a copy of this SysexMessage.
================================================================

Sample: 13 Track
----------------------------------------------------------------
1. `int size()`: This method returns the number of events in this Track.
2. `MidiEvent get(int index)`: This method returns the event at the specified index in this Track.
3. `void add(MidiEvent event)`: This method adds a new event to the end of this Track.
4. `MidiEvent remove(int index)`: This method removes and returns the event at the specified index in this Track.
5. `long ticks()`: This method returns the length of this Track in MIDI ticks.
================================================================

Sample: 14 VoiceStatus
----------------------------------------------------------------
1. `int getChannel()`: Returns the MIDI channel associated with this voice status.
2. `int getBank()`: Returns the bank number for the instrument being played by this voice.
3. `int getProgram()`: Returns the program number for the instrument being played by this voice.
4. `boolean isBusy()`: Returns true if this voice is currently playing a note, false otherwise.
5. `int getVoiceID()`: Returns the ID of this voice.
================================================================

