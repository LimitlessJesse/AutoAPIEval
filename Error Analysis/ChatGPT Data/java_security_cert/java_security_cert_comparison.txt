Sample: 0 Certificate
----------------------------------------------------------------
1. `PublicKey getPublicKey()`: This method returns the public key of the certificate.
2. `byte[] getEncoded()`: This method returns the encoded form of the certificate.
3. `Principal getIssuerDN()`: This method returns the issuer of the certificate.
4. `Principal getSubjectDN()`: This method returns the subject of the certificate.
5. `Date getNotAfter()`: This method returns the expiration date of the certificate.
================================================================

Sample: 1 Certificate.CertificateRep
----------------------------------------------------------------
1. `byte[] getEncoded()`: Returns the encoded form of this certificate information, using the default encoding.
2. `String toString()`: Returns a string representation of this certificate.
3. `PublicKey getPublicKey()`: Returns the public key of the principal that issued the certificate.
4. `byte[] getEncoded(String encoding)`: Returns the encoded form of this certificate information, using the specified encoding.
5. `Object writeReplace()`: Resolve the CertificateRep to a Certificate.
================================================================

Sample: 2 CertificateFactory
----------------------------------------------------------------
1. `Certificate generateCertificate(InputStream inStream)`: This method generates a certificate object and initializes it with the data read from the specified input stream.
2. `Collection<? extends Certificate> generateCertificates(InputStream inStream)`: This method generates a collection of certificates from the data read from the specified input stream.
3. `CRL generateCRL(InputStream inStream)`: This method generates a Certificate Revocation List (CRL) object and initializes it with the data read from the specified input stream.
4. `Collection<? extends CRL> generateCRLs(InputStream inStream)`: This method generates a collection of Certificate Revocation Lists (CRLs) from the data read from the specified input stream.
5. `CertPath generateCertPath(InputStream inStream)`: This method generates a CertPath object and initializes it with the data read from the specified input stream.
================================================================

Sample: 3 CertificateFactorySpi
----------------------------------------------------------------
1. `java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream inStream)`: This method generates a certificate from the data read from the input stream.
2. `java.security.cert.CRL engineGenerateCRL(java.io.InputStream inStream)`: This method generates a certificate revocation list (CRL) from the data read from the input stream.
3. `java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream inStream)`: This method generates a certification path (CertPath) from the data read from the input stream.
4. `java.security.cert.CertPath engineGenerateCertPath(java.util.List<? extends Certificate> certificates)`: This method generates a certification path (CertPath) from a list of certificates.
5. `byte[] engineGenerateCRLBytes(java.security.cert.CRL crl)`: This method generates the encoded form of a CRL byte array.
================================================================

Sample: 4 CertPath
----------------------------------------------------------------
1. `List<? extends Certificate> getCertificates()`: This method returns an immutable List of the Certifcates in the certification path.

2. `String getType()`: Returns the type of this certification path.

3. `byte[] getEncoded()`: Returns the encoded form of this certification path, using the default encoding.

4. `Iterator<String> getEncodings()`: Returns an iterator of the names of the supported encodings for certification paths.

5. `boolean isForward()`: Returns true if this certification path is a forward certification path.
================================================================

Sample: 5 CertPath.CertPathRep
----------------------------------------------------------------
1. `byte[] getEncoded()`: This method returns the encoded form of this certification path.
2. `List<? extends Certificate> getCertificates()`: This method returns the list of certificates in this certification path.
3. `CertPath getCertPath(): This method returns a CertPath object that can be used to call methods associated with the CertPath class.
4. `String getType()`: This method returns the type of certification path.
5. `byte[] encode()`: This method encodes the certification path and returns the result as a byte array.
================================================================

Sample: 6 CertPathBuilder
----------------------------------------------------------------
1. `CertPathBuilderResult build(CertPathParameters params)`: This method builds and validates a certification path using the specified algorithm parameters.
2. `CertPathBuilderResult engineBuild(CertPathParameters params)`: This method is used by subclasses to build and validate a certification path using the specified algorithm parameters.
3. `CertPathBuilderException getException()`: This method returns the certification path builder exception that caused the build to fail.
4. `CertPathChecker getRevocationChecker()`: This method returns the revocation checker used by this CertPathBuilder.
5. `void setRevocationEnabled(boolean val)`: This method sets whether revocation checking is enabled.
================================================================

Sample: 7 CertPathBuilderSpi
----------------------------------------------------------------
1. `java.security.cert.CertPathBuilderResult engineBuild()`: This method builds and returns a certification path.
2. `java.security.cert.CertPathBuilderResult2 engineBuild(CertPathParameters params)`: This method builds and returns a certification path with the specified parameters.
3. `java.security.cert.CertPathChecker engineGetRevocationChecker()`: This method returns a revocation checker for this CertPathBuilder.
4. `java.security.cert.CertPath engineGenerateCertPath(InputStream inStream)`: This method generates a certification path from the given input stream.
5. `List<CertStore> engineGetCertStores()`: This method returns the list of certificate stores used in this CertPathBuilder.
================================================================

Sample: 8 CertPathValidator
----------------------------------------------------------------
1. `CertPathValidatorResult validate(CertPath certPath, CertPathParameters params)`: This method validates the specified certification path using the specified algorithm parameters and returns the result.
2. `void setRevocationEnabled(boolean val)`: This method sets the revocation checking enabled/disabled for this CertPathValidator.
3. `PKIXParameters getParameters()`: This method returns the parameters used for initializing this CertPathValidator.
4. `List<? extends Certificate> getCertificates()` : This method returns a list of certificates from the certification path that was successfully validated.
5. `CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)`: This method performs the validation of the specified certification path with the given algorithm parameters and returns the result.
================================================================

Sample: 9 CertPathValidatorSpi
----------------------------------------------------------------
1. `CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)`: This method validates the specified certification path using the specified certification path parameters.
2. `CertPathValidatorResult engineValidate(CertPath certPath)`: This method validates the specified certification path using the default certification path parameters.
3. `void engineInit(CertPathParameters params)`: This method initializes the validator with the specified certification path parameters.
4. `void engineInit(Validator spi, CertPathParameters params)`: This method initializes the validator with the specified validation algorithm and certification path parameters.
5. `CertPathChecker engineGetRevocationChecker()`: This method returns the revocation checker used by this validator.
================================================================

Sample: 10 CertStore
----------------------------------------------------------------
1. `Collection<X509Certificate> getCertificates(CertSelector selector)`: This method returns a Collection of X.509 certificates that match the specified selector.
2. `Collection<CRL> getCRLs(CRLSelector selector)`: This method returns a Collection of Certificate Revocation Lists (CRLs) that match the specified selector.
3. `CertStoreSpi engineGetCertStoreParameters()`: This method returns the parameters used to initialize the CertStore.
4. `Collection<? extends Certificate> engineGetCertificates(CertSelector selector)`: This method returns a collection of certificates that match the specified selector.
5. `Collection<? extends CRL> engineGetCRLs(CRLSelector selector)`: This method returns a collection of CRLs that match the specified selector.
================================================================

Sample: 11 CertStoreSpi
----------------------------------------------------------------
1. `Collection<? extends X509Certificate> engineGetCertificates(CertSelector selector)`: This method returns a collection of X.509 certificates that match the specified selector.
2. `Collection<? extends CRL> engineGetCRLs(CRLSelector selector)`: This method returns a collection of CRLs that match the specified selector.
3. `Collection<?> engineGetCertStoreParameters()`: This method returns the parameters used to initialize this CertStoreSpi.
4. `void engineInit(CertStoreParameters params)`: This method initializes this CertStoreSpi with the specified parameters.
5. `void engineSetParameter(CertStoreParameters params)`: This method sets the parameters used to initialize this CertStoreSpi.
================================================================

Sample: 12 CollectionCertStoreParameters
----------------------------------------------------------------
1. `void CollectionCertStoreParameters(Collection<? extends Certificate> coll)`: Constructor that initializes a new instance of CollectionCertStoreParameters with the given collection of certificates.
2. `Collection<? extends Certificate> getCollection()`: Returns the collection of certificates stored in this CollectionCertStoreParameters instance.
3. `void setCollection(Collection<? extends Certificate> coll)`: Sets the collection of certificates in this CollectionCertStoreParameters instance to the specified collection.
4. `boolean equals(Object obj)`: Compares this CollectionCertStoreParameters instance with the specified object for equality.
5. `int hashCode()`: Returns a hash code value for this CollectionCertStoreParameters instance.
================================================================

Sample: 13 CRL
----------------------------------------------------------------
1. `boolean isRevoked(java.security.cert.X509Certificate cert)`: This method checks whether the specified certificate is revoked in this CRL.
2. `int getVersion()`: This method returns the version number of this CRL.
3. `java.util.Date getThisUpdate()`: This method returns the date of the last CRL update.
4. `java.util.Date getNextUpdate()`: This method returns the date when the next CRL update is expected.
5. `java.util.Set<?> getRevokedCertificates()`: This method returns a Set view of the X.509 certificate entries in this CRL.
================================================================

Sample: 14 LDAPCertStoreParameters
----------------------------------------------------------------
1. `LDAPCertStoreParameters(String serverName, int port)`: This constructor creates a new instance of LDAPCertStoreParameters with the specified LDAP server name and port.
   
2. `String getServerName()`: This method returns the LDAP server name from the parameters.
   
3. `int getPort()`: This method returns the port number from the parameters.
   
4. `void setServerName(String serverName)`: This method sets the LDAP server name in the parameters to the specified value.
   
5. `void setPort(int port)`: This method sets the port number in the parameters to the specified value.
================================================================

Sample: 15 PKIXBuilderParameters
----------------------------------------------------------------
1. `void setMaxPathLength(int maxPathLength)`: Sets the maximum number of intermediate certificates that can exist in a certification path.

2. `int getMaxPathLength()`: Returns the maximum number of intermediate certificates that can exist in a certification path.

3. `void setMaxPathLength(int maxPathLength)`: Sets the maximum number of intermediate certificates that can exist in a certification path.

4. `PKIXRevocationChecker getRevocationChecker()`: Returns the PKIXRevocationChecker used to check revocation status of certificates.

5. `void setRevocationEnabled(boolean val)`: Sets whether revocation checking is enabled.
================================================================

Sample: 16 PKIXCertPathBuilderResult
----------------------------------------------------------------
1. `java.security.cert.X509Certificate getTrustAnchor()`: This method returns the trust anchor that serves as the starting point for build process.
2. `java.util.List getCertificates()`: This method returns an immutable list of the certificates that are part of the certification path.
3. `java.security.cert.PolicyNode getPolicyTree()`: This method returns the policy tree, or null if there is none.
4. `java.security.PublicKey getPublicKey()`: This method returns the public key of the end-entity certificate.
5. `java.security.cert.CertPath getCertPath()`: This method returns the certification path that was validated.
================================================================

Sample: 17 PKIXCertPathChecker
----------------------------------------------------------------
1. `void check(Certificate cert)`   
2. `void init(boolean forward)`   
3. `boolean isForwardCheckingSupported()`  
4. `void reset()`   
5. `Set<String> getSupportedExtensions()`  
================================================================

Sample: 18 PKIXCertPathValidatorResult
----------------------------------------------------------------
1. `Map<String, Certificate> getTrustedCertMap()`: This method returns a map of certificates that are trusted.
2. `PublicKey getPublicKey()`: This method returns the public key of the end-entity certificate in the validation path.
3. `String getTrustAnchor():` This method returns the name of the trust anchor for the certification path.
4. `String toString()`: This method returns a string representation of the PKIXCertPathValidatorResult object.
================================================================

Sample: 19 PKIXParameters
----------------------------------------------------------------
1. `void setRevocationEnabled(boolean val)`: This method sets whether revocation checking is enabled.
2. `void setDate( Date date)`: This method sets the current date and time for this parameters instance.
3. `Set<TrustAnchor> getTrustAnchors()`: This method returns the Set of initial set of TrustAnchors.
4. `void addCertStore(CertStore store)`: This method adds a CertStore to the list of CertStores used in finding certificates.
5. `void setCertStores(Set<CertStore> stores)`: This method sets the list of CertStores used in finding certificates.
================================================================

Sample: 20 PKIXRevocationChecker
----------------------------------------------------------------
1. `List<String> getOcspResponses()`: This method returns a list of all the OCSP responses.
2. `Map<X509Certificate, byte[]> getOcspResponses(X509Certificate cert, List<String> url)`: This method returns a mapping of OCSP responses for a specific certificate and list of URLs.
3. `Set<OCSP.PKIXCertPathCheckerOption> getOptions()`: This method returns the options used for the PKIX revocation checker.
4. `void setOcspResponses(List<String> ocspResponses)`: This method sets the list of OCSP responses.
5. `void setOptions(Set<OCSP.PKIXCertPathCheckerOption> options)`: This method sets the options for the PKIX revocation checker.
================================================================

Sample: 21 PolicyQualifierInfo
----------------------------------------------------------------
1. `String getPolicyQualifierId()`: This method returns the Object Identifiers (OID) of the policy qualifier.
2. `byte[] getPolicyQualifier()`: This method returns the ASN.1 DER encoded form of the policy qualifier.
3. `String toString()`: This method returns a string representation of the PolicyQualifierInfo.
4. `boolean equals(Object obj)`: This method compares the specified object with this PolicyQualifierInfo for equality.
5. `int hashCode()`: This method returns a hashcode for this PolicyQualifierInfo.
================================================================

Sample: 22 TrustAnchor
----------------------------------------------------------------
1. `X509Certificate getTrustedCert()`: Returns the trusted certificate associated with this TrustAnchor.
2. `String getNameConstraints()`: Returns the name constraints for the associated trusted certificate.
3. `boolean nameConstraintsAllowed(String domain)`: Checks if the specified domain name is allowed based on the name constraints of the associated trusted certificate.
4. `PublicKey getCAPublicKey()`: Returns the public key of the CA associated with this TrustAnchor.
5. `byte[] getSubjectAsBytes()`: Returns the subject name in byte array format for the associated trusted certificate.
================================================================

Sample: 23 X509Certificate
----------------------------------------------------------------
1. `PublicKey getPublicKey()`: This method returns the public key of the certificate.
2. `byte[] getEncoded()`: This method returns the encoded form of the certificate.
3. `Date getNotBefore()`: This method returns the date before which the certificate is not valid.
4. `Date getNotAfter()`: This method returns the date after which the certificate is not valid.
5. `String toString()`: This method returns a string representation of the certificate.
================================================================

Sample: 24 X509CertSelector
----------------------------------------------------------------
1. `void setCertificate(X509Certificate certificate)`: This method sets the certificate to be matched by this selector.
2. `void setIssuer(X500Principal issuer)`: This method sets the issuer distinguished name (DN) to be matched by this selector.
3. `void setKeyUsage(boolean[] keyUsage): This method sets the key usage bits to be matched by this selector.
4. `void setSubject(X500Principal subject)`: This method sets the subject distinguished name (DN) to be matched by this selector.
5. `void setSubjectPublicKey(PublicKey publicKey)`: This method sets the public key to be matched by this selector.
================================================================

Sample: 25 X509CRL
----------------------------------------------------------------
1. `String getVersion()`: This method returns the version of this X.509 CRL.
2. `Date getNextUpdate()`: This method returns the next update time of this X.509 CRL.
3. `Set<String> getCriticalExtensionOIDs()`: This method returns a Set of the critical extension OID strings.
4. `Set<String> getNonCriticalExtensionOIDs()`: This method returns a Set of the non-critical extension OID strings.
5. `byte[] getTBSCertList()`: This method returns the TBSCertList value of this X.509 CRL.
================================================================

Sample: 26 X509CRLEntry
----------------------------------------------------------------
1. `Date getRevocationDate()`: This method returns the date on which this X.509 CRL entry was revoked.
2. `BigInteger getSerialNumber()`: This method returns the serial number of the revoked certificate.
3. `boolean hasExtensions()`: This method returns true if the X.509 CRL entry includes extensions, false otherwise.
4. `String toString()`: This method returns a string representation of the X.509 CRL entry.
5. `Set<String> getCriticalExtensionOIDs()`: This method returns a Set of the OID strings of the critical extensions in this X.509 CRL entry.
================================================================

Sample: 27 X509CRLSelector
----------------------------------------------------------------
1. `void setIssuers(Collection<X500Principal> issuers)`: Sets the issuer criteria to be used for selecting CRLs.

2. `void setDateAndTime(Date dateAndTime)`: Sets the dateAndTime to be used for selecting CRLs.

3. `void addIssuerName(String issuerName)`: Adds an issuer name to the set of issuer names in the criteria.

4. `void addIssuer(X500Principal issuer)`: Adds an issuer to the set of issuers in the criteria.

5. `void setMinCRLNumber(BigInteger minCRL)`: Sets the minimum CRL number to be used for selecting CRLs.
================================================================

