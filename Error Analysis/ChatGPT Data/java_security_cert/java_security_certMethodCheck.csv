Sample Number,ClassName,Snippet Number,Method,Exist
0,Certificate,1,PublicKey getPublicKey(),True
0,Certificate,2,byte[] getEncoded(),True
0,Certificate,3,Principal getIssuerDN(),False
0,Certificate,4,Principal getSubjectDN(),False
0,Certificate,5,Date getNotAfter(),False
1,Certificate.CertificateRep,1,byte[] getEncoded(),False
1,Certificate.CertificateRep,2,String toString(),False
1,Certificate.CertificateRep,3,PublicKey getPublicKey(),False
1,Certificate.CertificateRep,4,byte[] getEncoded(String encoding),False
1,Certificate.CertificateRep,5,Object writeReplace(),False
2,CertificateFactory,1,Certificate generateCertificate(InputStream inStream),True
2,CertificateFactory,2,Collection<? extends Certificate> generateCertificates(InputStream inStream),True
2,CertificateFactory,3,CRL generateCRL(InputStream inStream),True
2,CertificateFactory,4,Collection<? extends CRL> generateCRLs(InputStream inStream),True
2,CertificateFactory,5,CertPath generateCertPath(InputStream inStream),True
3,CertificateFactorySpi,1,java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream inStream),False
3,CertificateFactorySpi,2,java.security.cert.CRL engineGenerateCRL(java.io.InputStream inStream),False
3,CertificateFactorySpi,3,java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream inStream),False
3,CertificateFactorySpi,4,java.security.cert.CertPath engineGenerateCertPath(java.util.List<? extends Certificate> certificates),False
3,CertificateFactorySpi,5,byte[] engineGenerateCRLBytes(java.security.cert.CRL crl),False
4,CertPath,1,List<? extends Certificate> getCertificates(),True
4,CertPath,2,String getType(),True
4,CertPath,3,byte[] getEncoded(),True
4,CertPath,4,Iterator<String> getEncodings(),True
4,CertPath,5,boolean isForward(),False
5,CertPath.CertPathRep,1,byte[] getEncoded(),False
5,CertPath.CertPathRep,2,List<? extends Certificate> getCertificates(),False
5,CertPath.CertPathRep,3,String getType(),False
5,CertPath.CertPathRep,4,byte[] encode(),False
6,CertPathBuilder,1,CertPathBuilderResult build(CertPathParameters params),True
6,CertPathBuilder,2,CertPathBuilderResult engineBuild(CertPathParameters params),False
6,CertPathBuilder,3,CertPathBuilderException getException(),False
6,CertPathBuilder,4,CertPathChecker getRevocationChecker(),True
6,CertPathBuilder,5,void setRevocationEnabled(boolean val),False
7,CertPathBuilderSpi,1,java.security.cert.CertPathBuilderResult engineBuild(),False
7,CertPathBuilderSpi,2,java.security.cert.CertPathBuilderResult2 engineBuild(CertPathParameters params),False
7,CertPathBuilderSpi,3,java.security.cert.CertPathChecker engineGetRevocationChecker(),False
7,CertPathBuilderSpi,4,java.security.cert.CertPath engineGenerateCertPath(InputStream inStream),False
7,CertPathBuilderSpi,5,List<CertStore> engineGetCertStores(),False
8,CertPathValidator,1,"CertPathValidatorResult validate(CertPath certPath, CertPathParameters params)",True
8,CertPathValidator,2,void setRevocationEnabled(boolean val),False
8,CertPathValidator,3,PKIXParameters getParameters(),False
8,CertPathValidator,4,List<? extends Certificate> getCertificates(),False
8,CertPathValidator,5,"CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)",False
9,CertPathValidatorSpi,1,"CertPathValidatorResult engineValidate(CertPath certPath, CertPathParameters params)",True
9,CertPathValidatorSpi,2,CertPathValidatorResult engineValidate(CertPath certPath),False
9,CertPathValidatorSpi,3,void engineInit(CertPathParameters params),False
9,CertPathValidatorSpi,4,"void engineInit(Validator spi, CertPathParameters params)",False
9,CertPathValidatorSpi,5,CertPathChecker engineGetRevocationChecker(),True
10,CertStore,1,Collection<X509Certificate> getCertificates(CertSelector selector),False
10,CertStore,2,Collection<CRL> getCRLs(CRLSelector selector),False
10,CertStore,3,CertStoreSpi engineGetCertStoreParameters(),False
10,CertStore,4,Collection<? extends Certificate> engineGetCertificates(CertSelector selector),False
10,CertStore,5,Collection<? extends CRL> engineGetCRLs(CRLSelector selector),False
11,CertStoreSpi,1,Collection<? extends X509Certificate> engineGetCertificates(CertSelector selector),False
11,CertStoreSpi,2,Collection<? extends CRL> engineGetCRLs(CRLSelector selector),True
11,CertStoreSpi,3,Collection<?> engineGetCertStoreParameters(),False
11,CertStoreSpi,4,void engineInit(CertStoreParameters params),False
11,CertStoreSpi,5,void engineSetParameter(CertStoreParameters params),False
12,CollectionCertStoreParameters,1,void CollectionCertStoreParameters(Collection<? extends Certificate> coll),False
12,CollectionCertStoreParameters,2,Collection<? extends Certificate> getCollection(),False
12,CollectionCertStoreParameters,3,void setCollection(Collection<? extends Certificate> coll),False
12,CollectionCertStoreParameters,4,boolean equals(Object obj),False
12,CollectionCertStoreParameters,5,int hashCode(),False
13,CRL,1,boolean isRevoked(java.security.cert.X509Certificate cert),False
13,CRL,2,int getVersion(),False
13,CRL,3,java.util.Date getThisUpdate(),False
13,CRL,4,java.util.Date getNextUpdate(),False
13,CRL,5,java.util.Set<?> getRevokedCertificates(),False
14,LDAPCertStoreParameters,1,"LDAPCertStoreParameters(String serverName, int port)",False
14,LDAPCertStoreParameters,2,String getServerName(),True
14,LDAPCertStoreParameters,3,int getPort(),True
14,LDAPCertStoreParameters,4,void setServerName(String serverName),False
14,LDAPCertStoreParameters,5,void setPort(int port),False
15,PKIXBuilderParameters,1,void setMaxPathLength(int maxPathLength),True
15,PKIXBuilderParameters,2,int getMaxPathLength(),True
15,PKIXBuilderParameters,3,void setMaxPathLength(int maxPathLength),True
15,PKIXBuilderParameters,4,PKIXRevocationChecker getRevocationChecker(),False
15,PKIXBuilderParameters,5,void setRevocationEnabled(boolean val),False
16,PKIXCertPathBuilderResult,1,java.security.cert.X509Certificate getTrustAnchor(),False
16,PKIXCertPathBuilderResult,2,java.util.List getCertificates(),False
16,PKIXCertPathBuilderResult,3,java.security.cert.PolicyNode getPolicyTree(),False
16,PKIXCertPathBuilderResult,4,java.security.PublicKey getPublicKey(),False
16,PKIXCertPathBuilderResult,5,java.security.cert.CertPath getCertPath(),False
17,PKIXCertPathChecker,1,void check(Certificate cert),True
17,PKIXCertPathChecker,2,void init(boolean forward),True
17,PKIXCertPathChecker,3,boolean isForwardCheckingSupported(),True
17,PKIXCertPathChecker,4,void reset(),False
17,PKIXCertPathChecker,5,Set<String> getSupportedExtensions(),True
18,PKIXCertPathValidatorResult,1,"Map<String, Certificate> getTrustedCertMap()",False
18,PKIXCertPathValidatorResult,2,PublicKey getPublicKey(),True
18,PKIXCertPathValidatorResult,3,String getTrustAnchor():,False
18,PKIXCertPathValidatorResult,4,String toString(),True
19,PKIXParameters,1,void setRevocationEnabled(boolean val),True
19,PKIXParameters,2,void setDate( Date date),True
19,PKIXParameters,3,Set<TrustAnchor> getTrustAnchors(),True
19,PKIXParameters,4,void addCertStore(CertStore store),True
19,PKIXParameters,5,void setCertStores(Set<CertStore> stores),False
20,PKIXRevocationChecker,1,List<String> getOcspResponses(),False
20,PKIXRevocationChecker,2,"Map<X509Certificate, byte[]> getOcspResponses(X509Certificate cert, List<String> url)",False
20,PKIXRevocationChecker,3,Set<OCSP.PKIXCertPathCheckerOption> getOptions(),False
20,PKIXRevocationChecker,4,void setOcspResponses(List<String> ocspResponses),False
20,PKIXRevocationChecker,5,void setOptions(Set<OCSP.PKIXCertPathCheckerOption> options),False
21,PolicyQualifierInfo,1,String getPolicyQualifierId(),True
21,PolicyQualifierInfo,2,byte[] getPolicyQualifier(),True
21,PolicyQualifierInfo,3,String toString(),True
21,PolicyQualifierInfo,4,boolean equals(Object obj),False
21,PolicyQualifierInfo,5,int hashCode(),False
22,TrustAnchor,1,X509Certificate getTrustedCert(),True
22,TrustAnchor,2,String getNameConstraints(),False
22,TrustAnchor,3,boolean nameConstraintsAllowed(String domain),False
22,TrustAnchor,4,PublicKey getCAPublicKey(),True
22,TrustAnchor,5,byte[] getSubjectAsBytes(),False
23,X509Certificate,1,PublicKey getPublicKey(),False
23,X509Certificate,2,byte[] getEncoded(),False
23,X509Certificate,3,Date getNotBefore(),True
23,X509Certificate,4,Date getNotAfter(),True
23,X509Certificate,5,String toString(),False
24,X509CertSelector,1,void setCertificate(X509Certificate certificate),True
24,X509CertSelector,2,void setIssuer(X500Principal issuer),True
24,X509CertSelector,3,void setSubject(X500Principal subject),True
24,X509CertSelector,4,void setSubjectPublicKey(PublicKey publicKey),True
25,X509CRL,1,String getVersion(),False
25,X509CRL,2,Date getNextUpdate(),True
25,X509CRL,3,Set<String> getCriticalExtensionOIDs(),False
25,X509CRL,4,Set<String> getNonCriticalExtensionOIDs(),False
25,X509CRL,5,byte[] getTBSCertList(),True
26,X509CRLEntry,1,Date getRevocationDate(),True
26,X509CRLEntry,2,BigInteger getSerialNumber(),True
26,X509CRLEntry,3,boolean hasExtensions(),True
26,X509CRLEntry,4,String toString(),True
26,X509CRLEntry,5,Set<String> getCriticalExtensionOIDs(),False
27,X509CRLSelector,1,void setIssuers(Collection<X500Principal> issuers),True
27,X509CRLSelector,2,void setDateAndTime(Date dateAndTime),True
27,X509CRLSelector,3,void addIssuerName(String issuerName),True
27,X509CRLSelector,4,void addIssuer(X500Principal issuer),True
27,X509CRLSelector,5,void setMinCRLNumber(BigInteger minCRL),True
