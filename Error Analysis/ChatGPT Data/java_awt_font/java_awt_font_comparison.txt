Sample: 0 FontRenderContext
----------------------------------------------------------------
1. `FontRenderContext(RenderingHints hints)`: This constructor creates a new FontRenderContext object with the specified rendering hints.
2. `RenderingHints getRenderingHints()`: This method returns the rendering hints of this FontRenderContext.
3. `AffineTransform getTransform()`: This method returns the transform of this FontRenderContext.
4. `boolean isAntiAliased()`: This method returns whether or not text anti-aliasing is requested for this FontRenderContext.
5. `boolean usesFractionalMetrics()`: This method returns whether or not fractional metrics are requested for this FontRenderContext.
================================================================

Sample: 1 GlyphJustificationInfo
----------------------------------------------------------------
1. `float getWeight()`: Returns the weight factor of this GlyphJustificationInfo.
2. `float getLeadingExpansion()`: Returns the leading expansion factor of this GlyphJustificationInfo.
3. `float getTrailingExpansion()`: Returns the trailing expansion factor of this GlyphJustificationInfo.
4. `float getPriority()`: Returns the priority of this GlyphJustificationInfo.
5. `float getGrowAbsorb()`: Returns the grow absorb factor of this GlyphJustificationInfo.
================================================================

Sample: 2 GlyphMetrics
----------------------------------------------------------------
1. `float getAdvanceX()` : Returns the advance width of the glyph.
   
2. `float getAdvanceY()` : Returns the advance height of the glyph.
   
3. `float getLSB()` : Returns the left side bearing of the glyph.
   
4. `float getRSB()` : Returns the right side bearing of the glyph.
   
5. `float getVOriginX()` : Returns the X coordinate of the vertical origin of the glyph.
================================================================

Sample: 3 GlyphVector
----------------------------------------------------------------
1. `java.awt.Shape getOutline()`: This method returns the outline shape of this GlyphVector.
2. `int getNumGlyphs()`: This method returns the total number of glyphs in this GlyphVector.
3. `int getGlyphCode(int glyphIndex)`: This method returns the glyphcode of the specified glyph index.
4. `java.awt.font.GlyphMetrics getGlyphMetrics(int glyphIndex)`: This method returns the metrics of the specified glyph.
5. `float[] getGlyphPositions(int beginGlyphIndex, int numEntries, float[] positions)`: This method returns the positions of the specified glyphs.
================================================================

Sample: 4 GraphicAttribute
----------------------------------------------------------------
1. `int getAscent()`: This method returns the ascent of the GraphicAttribute.
2. `int getDescent()`: This method returns the descent of the GraphicAttribute.
3. `int getAdvance()`: This method returns the advance of the GraphicAttribute.
4. `Rectangle2D getBounds()`: This method returns the bounds of the GraphicAttribute.
5. `GraphicAttribute getMirror()`: This method returns a mirror-image of the GraphicAttribute.
================================================================

Sample: 5 ImageGraphicAttribute
----------------------------------------------------------------
1. `float getImageWidth()`: Returns the width of the image in the graphic attribute.
2. `float getImageHeight()`: Returns the height of the image in the graphic attribute.
3. `Rectangle getBounds()`: Returns the bounds of the image in the graphic attribute.
4. `int getAlignment()`: Returns the alignment of the graphic attribute.
5. `boolean isFlipped()`: Returns true if the image in the graphic attribute is flipped vertically.
================================================================

Sample: 6 LayoutPath
----------------------------------------------------------------
1. void moveTo(float x, float y)
2. PathIterator getPathIterator(AffineTransform at)
3. void movePoint(float x, float y)
4. Point2D getInsertionPoint()
5. byte getMajorOrder()
================================================================

Sample: 7 LineBreakMeasurer
----------------------------------------------------------------
1. `TextLayout nextLayout(float wrappingWidth)` 
   - Return type: TextLayout
   - Parameters: float wrappingWidth

2. `int getOffset()` 
   - Return type: int
   - Parameters: None

3. `int nextOffset(int limit)` 
   - Return type: int
   - Parameters: int limit

4. `boolean isAtEnd()` 
   - Return type: boolean
   - Parameters: None

5. `TextLayout nextLayout(float wrappingWidth, int offsetLimit, boolean requireNextWord)` 
   - Return type: TextLayout
   - Parameters: float wrappingWidth, int offsetLimit, boolean requireNextWord
================================================================

Sample: 8 LineMetrics
----------------------------------------------------------------
1. `int getNumChars()`: This method returns the number of characters utilized by this LineMetrics object.
2. `float getDescent()`: This method returns the descent of the LineMetrics object.
3. `float getLeading()`: This method returns the leading amount of the LineMetrics object.
4. `float getHeight()`: This method returns the total height of the LineMetrics object.
5. `float getStrikethroughOffset()`: This method returns the offset from the baseline to the strikethrough line.
================================================================

Sample: 9 NumericShaper
----------------------------------------------------------------
1. `NumericShaper.Range[] getRanges()`: Returns an array of NumericShaper.Range containing the Unicode ranges that this NumericShaper object covers.

2. `boolean failsToString()`: Returns true if the conversion of the number into a string is supported, false otherwise.

3. `void shape(char[] text, int start, int count, int context, char[] result, int resultStart, int resultCount)`: Shapes the numeric digits in the specified text array according to the specified context.

4. `void shape(char[] text, int start, int count)`: Shapes the numeric digits in the specified text array starting from the specified index.

5. `NumericShaper getContextualShaper(int context)` : Returns a new NumericShaper object that shapes numeric digits according to the provided context.
================================================================

Sample: 10 ShapeGraphicAttribute
----------------------------------------------------------------
1. `Shape getShape()`: This method returns the shape associated with this graphic attribute.
2. `Point2D getLocation()`: This method returns the location of the shape within the text.
3. `boolean equals(Object obj)`: This method compares this graphic attribute with the specified object for equality.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 11 TextAttribute
----------------------------------------------------------------
1. `String toString()`: This method returns a string representation of the TextAttribute.
2. `boolean equals(Object obj)`: This method compares the specified object with this TextAttribute for equality.
3. `int hashCode()`: This method returns a hash code for this TextAttribute.
4. `TextAttribute resolveAttribute(TextAttribute attribute)`: This method resolves the specified TextAttribute and returns the resolved TextAttribute.
5. `Object clone()`: This method creates and returns a copy of this TextAttribute.
================================================================

Sample: 12 TextHitInfo
----------------------------------------------------------------
1. `int getInsertionIndex()`: This method returns the index in the character array where the caret or insertion point would be located.
2. `int getCharIndex()`: This method returns the index of the character hit by the TextLayout.
3. `int getCharOffset()`: This method returns the offset of the insertion point from the leading edge of the character hit by the TextLayout.
4. `int getTrailingEdge()`: This method returns the offset from the leading edge of the character at the current hit to the trailing edge of the character.
5. `boolean isLeadingEdge()`: This method returns true if the offset is the leading edge of the character hit, false otherwise.
================================================================

Sample: 13 TextLayout
----------------------------------------------------------------
1. `Rectangle2D getBounds()`: This method returns the bounds of the text layout.
2. `TextLayout getJustifiedLayout(float justificationWidth)`: This method returns a new TextLayout, justified to the specified width.
3. `Shape getOutline(AffineTransform transform)`: This method returns the outline of the text layout with the specified transformation.
4. `Rectangle getPixelBounds(FontRenderContext frc, float x, float y)`: This method returns the pixel bounds of the text layout as a Rectangle.
5. `TextHitInfo hitTestChar(float x, float y)`: This method returns information about the character hit by the specified point.
================================================================

Sample: 14 TextLayout.CaretPolicy
----------------------------------------------------------------
1. `Rectangle2D getVisualHighlightShape(TextHitInfo hit1, TextHitInfo hit2)`: Returns the shape representing the visual highlight of the specified text range.

2. `CaretPolicy getStrongCaret(TextHitInfo hit1, TextHitInfo hit2, TextLayout layout)`: Returns the caret policy for a text range within a specified TextLayout.

3. `CaretPolicy getStrongCaret(TextHitInfo hit1, TextHitInfo hit2, TextLayout layout, float[] info, int carets[])`: Returns the caret policy for a text range within a specified TextLayout, providing additional information and output parameters.

4. `CaretPolicy getLogicalCaret(TextHitInfo hit1, TextHitInfo hit2, TextLayout layout)`: Returns the caret policy for a text range within a specified TextLayout using logical bounds.

5. `CaretPolicy getLogicalCaret(TextHitInfo hit1, TextHitInfo hit2, TextLayout layout, float[] info, int carets[])`: Returns the caret policy for a text range within a specified TextLayout using logical bounds, providing additional information and output parameters.
================================================================

Sample: 15 TextMeasurer
----------------------------------------------------------------
1. `float getAdvance():` Returns the advance width of the measured text.
2. `boolean isDirectionLTR():` Returns true if the text is measured in left-to-right order.
3. `TextLayout getLayout(CharSequence text, FontRenderContext frc):` Returns a TextLayout object for the specified text using the provided FontRenderContext.
4. `TextLayout getLayout():` Returns a TextLayout object for the measured text.
5. `TextLayout getNextLayout(float wrappingWidth):` Returns the next TextLayout object based on the specified wrapping width.
================================================================

Sample: 16 TransformAttribute
----------------------------------------------------------------
1. `double getScaleX()`: Returns the X scale factor of the font transform.
2. `double getScaleY()`: Returns the Y scale factor of the font transform.
3. `double getShearX()`: Returns the X shear factor of the font transform.
4. `double getShearY()`: Returns the Y shear factor of the font transform.
5. `double getTranslateX()`: Returns the X translation factor of the font transform.
================================================================

