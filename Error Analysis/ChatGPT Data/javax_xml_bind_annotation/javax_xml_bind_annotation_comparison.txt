Sample: 0 W3CDomHandler
----------------------------------------------------------------
1. `Object getElement(W3CDOM xmlElement)`: This method returns the object representation of the specified W3C DOM element.
2. `W3CDOM marshal(Object rt, W3CDOM xmlRootElement, String declaredType)`: This method marshals the specified object representation to a W3C DOM element with the specified root element and declared type.
3. `List<W3CDOM> updateElem(W3CDOM xmlNode, Object o, Object n)`: This method updates the specified W3C DOM element with the new object representation.
4. `W3CDOM createElem(Object o)`: This method creates a W3C DOM element from the specified object.
5. `Object wrapElem(W3CDOM domElement)`: This method wraps the specified W3C DOM element into its object representation.
================================================================

Sample: 1 XmlElement.DEFAULT
----------------------------------------------------------------
1. `String name()`: This method returns the name of the XML element.
2. `boolean nillable()`: This method returns whether the XML element can be nillable.
3. `Class<?> type()`: This method returns the type of the XML element.
4. `String namespace()`: This method returns the namespace of the XML element.
5. `boolean required()`: This method returns whether the XML element is required.
================================================================

Sample: 2 XmlElementDecl.GLOBAL
----------------------------------------------------------------
1. `QName createQName(String localPart)`: This method creates a QName with the specified local part.
2. `String namespace()`: This method returns the namespace URI of this element declaration.
3. `Class<?> scope()`: This method returns the class on which this element declaration is declared.
4. `String defaultValue()`: This method returns the default value for this element declaration.
5. `String substitutionHeadNamespace()`: This method returns the namespace of the element declaration for which this element declaration is a substitution head.
================================================================

Sample: 3 XmlElementRef.DEFAULT
----------------------------------------------------------------
1. `boolean required()`: This method returns true if the reference is required, false otherwise.
2. `java.lang.Class type()`: This method returns the class of the referenced type.
3. `java.lang.String name()`: This method returns the name of the XML element for referencing.
4. `boolean nillable()`: This method returns true if the reference can be absent, false otherwise.
5. `boolean defaultValue()`: This method returns the default value for the reference.
================================================================

Sample: 4 XmlSchemaType.DEFAULT
----------------------------------------------------------------
1. `String name()`: This method returns the name of the type (local name) in XML Schema.

2. `XmlNsForm attributeFormDefault()`: This method returns the form for attributes in this package's XML schema type.

3. `XmlNsForm elementFormDefault()`: This method returns the form for elements in this package's XML schema type.

4. `XmlNs[] xmlns()`: This method returns an array that represents the namespace declarations to be used on package-info classes.

5. `XmlAccessType accessType()`: This method returns the access type for the annotated package.
================================================================

Sample: 5 XmlType.DEFAULT
----------------------------------------------------------------
1. `String name()`: This method returns the local name of the xmlType
2. `String namespace()`: This method returns the namespace of the xmlType
3. `String[] propOrder()`: This method returns the order in which the properties of the xmlType should appear in the XML representation
4. `String factoryClass()`: This method returns the factory class name for the xmlType
5. `String factoryMethod()`: This method returns the factory method name for the xmlType
================================================================

