Sample: 0 AbstractChronology
----------------------------------------------------------------
1. `boolean isLeapYear(long prolepticYear)`: This method determines if the prolepticYear is a leap year.
2. `LocalDate date(int prolepticYear, int month, int dayOfMonth)`: This method obtains a LocalDate object from the proleptic year, month, and day of month.
3. `String getId()`: This method gets the unique id of the chronology.
4. `int prolepticYear(Era era, int yearOfEra)`: This method gets the proleptic year based on the era and year of era.
5. `int eraOf(int prolepticYear)`: This method gets the era for the given proleptic year.
================================================================

Sample: 1 HijrahChronology
----------------------------------------------------------------
1. `HijrahDate resolveDate(Map<TemporalField, Long> fieldValues)`: Returns a date object initialized with the specified field values.
2. `HijrahDate of(int prolepticYear, int month, int dayOfMonth)`: Returns a date object representing the Hijrah date with the specified proleptic year, month, and day of month.
3. `int prolepticYear(HijrahDate date)`: Returns the proleptic year value for the specified Hijrah date.
4. `HijrahDate dateNow()`: Obtains the current Hijrah date from the clock in the default time-zone.
5. `HijrahDate date(TemporalAccessor temporal)` : Obtains an instance of HijrahDate from a temporal object.
================================================================

Sample: 2 HijrahDate
----------------------------------------------------------------
1. `HijrahDate plusDays(long days)`: Returns a new HijrahDate that is 'days' days after this date.
2. `HijrahDate minusDays(long days)`: Returns a new HijrahDate that is 'days' days before this date.
3. `HijrahDate with(TemporalAdjuster adjuster)`: Returns a new HijrahDate with the specified adjuster.
4. `int lengthOfYear()`: Gets the length of the year in days.
5. `ChronoLocalDateTime<HijrahDate> atTime(LocalTime localTime)`: Combines this date with a time to create a ChronoLocalDateTime.
================================================================

Sample: 3 IsoChronology
----------------------------------------------------------------
1. `LocalDate date(LocalDate eras, int prolepticYear, int month, int dayOfMonth)`: This method creates an instance of LocalDate from the proleptic year, month, and day of month.
2. `boolean isLeapYear(long prolepticYear)`: This method checks if the given proleptic year is a leap year according to the ISO calendar system.
3. `IsoEra eraOf(int eraValue)`: This method returns the IsoEra constant corresponding to the specified era value.
4. `IsoEra eraOf(LocalDate date)`: This method returns the IsoEra constant corresponding to the era of the specified date.
5. `LocalDateTime date(BaseLocalDate date)`: This method combines this chronology with a local date to create a LocalDateTime.
================================================================

Sample: 4 JapaneseChronology
----------------------------------------------------------------
1. `JapaneseDate date(LocalDate isoDate)`: This method returns a JapaneseDate object representing the specified ISO date.
2. `JapaneseEra eraOf(int japaneseEraValue)`: This method returns the JapaneseEra constant for the specified era value.
3. `JapaneseDate date(int prolepticYear, int month, int dayOfMonth)`: This method returns a JapaneseDate object representing the specified proleptic year, month, and day of month.
4. `ChronoLocalDate dateEpochDay(long epochDay)`: This method returns a ChronoLocalDate representing the specified epoch day.
5. `JapaneseDate dateNow()`: This method returns the current date in the Japanese calendar system.
================================================================

Sample: 5 JapaneseDate
----------------------------------------------------------------
1. `int lengthOfMonth()`: This method returns the length of the month represented by this JapaneseDate.
2. `JapaneseEra getEra()`: This method returns the era of this JapaneseDate.
3. `JapaneseDate with(ChronoField field, long newValue)`: This method returns a copy of this JapaneseDate with the specified field updated.
4. `JapaneseDate plus(long amountToAdd, TemporalUnit unit)`: This method returns a copy of this JapaneseDate with the specified amount added.
5. `boolean isLeapYear()`: This method checks if the year of this JapaneseDate is a leap year.
================================================================

Sample: 6 JapaneseEra
----------------------------------------------------------------
1. `JapaneseEra of(int eraValue)`: This method returns the JapaneseEra instance for the specified era value.
2. `int getValue()`: This method returns the era value of the JapaneseEra instance.
3. `boolean isSupported(ChronoField field)`: This method checks if the specified ChronoField is supported by the JapaneseEra class.
4. `String getDisplayName(TextStyle style, Locale locale)`: This method returns the localized name of the JapaneseEra in the specified style and locale.
5. `boolean isShowa()` : This method returns true if the JapaneseEra represents the era of Showa.
================================================================

Sample: 7 MinguoChronology
----------------------------------------------------------------
1. `MinguoDate dateNow()`: This method returns the current Minguo date.
2. `MinguoDate date(int year, int month, int dayOfMonth)`: This method creates a Minguo date from the specified year, month, and day of the month.
3. `MinguoDate resolveDate(Map<TemporalField, Long> fieldValues, ResolverStyle resolverStyle)`: This method resolves the date based on the field values and resolver style provided.
4. `MinguoEra eraOf(int eraValue)`: This method obtains the Minguo era using the era value.
5. `MinguoDate dateNow(Clock clock)`: This method returns the current Minguo date based on the provided Clock.
================================================================

Sample: 8 MinguoDate
----------------------------------------------------------------
1. `MinguoDate plusYears(long years)`: This method returns a new MinguoDate obtained by adding the specified number of years.
2. `MinguoDate minusYears(long years)`: This method returns a new MinguoDate obtained by subtracting the specified number of years.
3. `MinguoDate plusMonths(long months)`: This method returns a new MinguoDate obtained by adding the specified number of months.
4. `MinguoDate minusMonths(long months)`: This method returns a new MinguoDate obtained by subtracting the specified number of months.
5. `MinguoChronology chronology()`: This method returns the MinguoChronology instance associated with this date.
================================================================

Sample: 9 ThaiBuddhistChronology
----------------------------------------------------------------
1. `ThaiBuddhistDate now()`: This method returns the current date of the ThaiBuddhist calendar.
2. `ThaiBuddhistDate date(LocalDate isoDate)`: This method converts a LocalDate to a ThaiBuddhistDate.
3. `ThaiBuddhistEra eraOf(int ThaiBuddhistEraValue)`: This method returns the ThaiBuddhistEra for a given era value.
4. `ThaiBuddhistChronology getInstance()`: This method returns the singleton instance of ThaiBuddhistChronology.
5. `ChronoLocalDateTime<ThaiBuddhistDate> localDateTime(TemporalAccessor temporal)`: This method converts a temporal object to a ThaiBuddhist ChronoLocalDateTime.
================================================================

Sample: 10 ThaiBuddhistDate
----------------------------------------------------------------
1. `static ThaiBuddhistDate now()`: This method returns the current date in the Thai Buddhist calendar.
   
2. `int lengthOfMonth()`: This method returns the length of the month represented by this ThaiBuddhistDate.
   
3. `int getYear()`: This method returns the year of this ThaiBuddhistDate.
   
4. `ThaiBuddhistDate plusYears(long yearsToAdd)`: This method returns a copy of this ThaiBuddhistDate with the specified number of years added.
   
5. `ThaiBuddhistDate withDayOfMonth(int dayOfMonth)`: This method returns a copy of this ThaiBuddhistDate with the day-of-month altered.
================================================================

