Sample: 0 AbstractAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs the action associated with this class.
2. `void putValue(String key, Object value)`: This method associates the specified value with the specified key in this action.
3. `Object getValue(String key)`: This method returns the value associated with the specified key in this action.
4. `void setEnabled(boolean b)`: This method enables or disables the action associated with this class.
5. `void setEnabled(boolean b)`: This method enables or disables the action associated with this class.
================================================================

Sample: 1 AbstractButton
----------------------------------------------------------------
1. `void setMnemonic(int mnemonic)`: This method sets the key mnemonic on the button.
2. `void setHorizontalAlignment(int alignment)`: This method sets the horizontal alignment of the button's content.
3. `void setVerticalAlignment(int alignment)`: This method sets the vertical alignment of the button's content.
4. `void setText(String text)`: This method sets the text of the button.
5. `void setIcon(Icon defaultIcon)`: This method sets the icon to display on the button.
================================================================

Sample: 2 AbstractCellEditor
----------------------------------------------------------------
1. Object getCellEditorValue(): This method returns the value contained in the editor.

2. Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column): This method returns the editor component for editing the value in a cell.

3. boolean isCellEditable(EventObject anEvent): This method returns true if the editing cell should be selected, false otherwise.

4. boolean stopCellEditing(): This method stops editing and returns true if editing was stopped.

5. void cancelCellEditing(): This method cancels editing.
================================================================

Sample: 3 AbstractListModel
----------------------------------------------------------------
1. `void fireContentsChanged(Object source, int index0, int index1)`: This method notifies all ListDataListeners that the contents of the list has changed within the specified range.
2. `void fireIntervalAdded(Object source, int index0, int index1)`: This method notifies all ListDataListeners that a contiguous range of items has been added to the list.
3. `void fireIntervalRemoved(Object source, int index0, int index1)`: This method notifies all ListDataListeners that a contiguous range of items has been removed from the list.
4. `void fireContentsChanged(Object source, int index)`: This method notifies all ListDataListeners that the contents of the list at the specified index has changed.
5. `void fireContentsChanged(Object source)`: This method notifies all ListDataListeners that the contents of the list has changed.
================================================================

Sample: 4 AbstractSpinnerModel
----------------------------------------------------------------
1. `Object getNextValue()`: This method returns the object that represents the next legal value.

2. `Object getPreviousValue()`: This method returns the object that represents the previous legal value.

3. `void setMinimum(Object minimum)`: This method sets the minimum allowed value for the spinner model.

4. `void setMaximum(Object maximum)`: This method sets the maximum allowed value for the spinner model.

5. `void setValue(Object value)`: This method sets the current value for the spinner model.
================================================================

Sample: 5 ActionMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Action action)`: This method associates the specified KeyStroke with the specified Action.
2. `void put(Action action)`: This method associates the specified Action with its default action key.
3. `Action get(Action action)`: This method returns the Action named actionName, which will be created and stored in the local ActionMap if it is not already in the map.
4. `Map<KeyStroke, Action> allKeys()`: This method returns an array of the KeyStrokes defined in this ActionMap and all parent ActionMaps.
5. `void clear()`: This method removes all the mappings from this ActionMap.
================================================================

Sample: 6 BorderFactory
----------------------------------------------------------------
1. `Border createEmptyBorder(int top, int left, int bottom, int right)`: This method creates an empty border with the specified dimensions.
2. `Border createMatteBorder(int top, int left, int bottom, int right, Color color)`: This method creates a matte border with the specified dimensions and color.
3. `Border createEtchedBorder()`: This method creates an etched border.
4. `Border createLineBorder(Color color)`: This method creates a line border with the specified color.
5. `Border createCompoundBorder(Border outsideBorder, Border insideBorder)`: This method creates a compound border using the specified outside and inside borders.
================================================================

Sample: 7 Box
----------------------------------------------------------------
1. Box createHorizontalBox(): This method creates a horizontal box.
2. Box createVerticalBox(): This method creates a vertical box.
3. Component createHorizontalGlue(): This method creates a horizontal glue component.
4. Component createVerticalGlue(): This method creates a vertical glue component.
5. Component createHorizontalStrut(int width): This method creates a horizontal strut component with the specified width.
================================================================

Sample: 8 Box.Filler
----------------------------------------------------------------
1. `int getResizeWeight()`: This method returns the resize weight of the filler.
2. `void changeShape(int delta, int axis)`: This method changes the shape of the filler by the specified amount in the specified axis.
3. `void setSpring(boolean isSpring)`: This method sets whether the filler acts as a spring or not.
4. `void setPreferredSize(Dimension size)`: This method sets the preferred size of the filler.
5. `void changeShape(Rectangle shape)`: This method changes the shape of the filler to the specified rectangle.
================================================================

Sample: 9 BoxLayout
----------------------------------------------------------------
1. `void setAlignmentX(float alignmentX)`: This method sets the horizontal alignment of components within the X-axis.
2. `void setAlignmentY(float alignmentY)`: This method sets the vertical alignment of components within the Y-axis.
3. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, using the specified constraints.
4. `void addLayoutComponent(String name, Component comp)`: This method adds the specified component to the layout, associating it with the specified name.
5. `void layoutContainer(Container target)`: This method lays out the specified container using this layout.
================================================================

Sample: 10 ButtonGroup
----------------------------------------------------------------
1. `void add(AbstractButton b)`: This method adds a radio button to the button group.
2. `void remove(AbstractButton b)`: This method removes a radio button from the button group.
3. `Enumeration<AbstractButton> getElements()`: This method returns an enumeration of all the buttons in the group.
4. `AbstractButton getSelection()`: This method returns the selected radio button in the group.
5. `void setSelected(AbstractButton b, boolean selected)`: This method sets the selected state of the specified radio button in the group.
================================================================

Sample: 11 CellRendererPane
----------------------------------------------------------------
1. `void paintComponent(Graphics g)`: This method paints the component by calling its paint method.
2. `Component getParent()`: This method returns the parent container for this cell renderer pane.
3. `void setBorder(Border border)`: This method sets the border of this cell renderer pane.
4. `void updateUI()`: This method resets the UI property to a value from the current look and feel.
5. `void validate()`: This method validates this container and all of its subcomponents.
================================================================

Sample: 12 ComponentInputMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Object actionMapKey)`: This method binds a KeyStroke to an action key. 
2. `Object get(KeyStroke keyStroke)`: This method returns the action key for the specified KeyStroke.
3. `void put(KeyStroke[] keyStrokes, Object actionMapKey)`: This method binds an array of KeyStrokes to an action key.
4. `void remove(KeyStroke keyStroke)`: This method removes the KeyStroke mapping for the specified KeyStroke.
5. `void clear()`: This method removes all KeyStroke mappings from the ComponentInputMap.
================================================================

Sample: 13 DebugGraphics
----------------------------------------------------------------
1. `void setClip(int x, int y, int width, int height)`: This method sets the clipping region of this graphics context.
2. `void translate(int x, int y)`: This method translates the origin of the graphics context to the point (x, y) in the current coordinate system.
3. `void clearRect(int x, int y, int width, int height)`: This method clears the specified rectangle by filling it with the background color of the current drawing surface.
4. `void drawString(String str, int x, int y)`: This method draws the specified string at the specified location (x, y) with the current font and color.
5. `void fillRect(int x, int y, int width, int height)`: This method fills the specified rectangle with the current color.
================================================================

Sample: 14 DefaultBoundedRangeModel
----------------------------------------------------------------
1. `int getExtent()`: This method returns the size of the extent.  
2. `int getMaximum()`: This method returns the maximum value of the model.  
3. `int getMinimum()`: This method returns the minimum value of the model.  
4. `int getValue()`: This method returns the current value of the model.  
5. `void setExtent(int extent)`: This method sets the size of the extent.
================================================================

Sample: 15 DefaultButtonModel
----------------------------------------------------------------
1. `void setPressed(boolean b)`: This method sets the pressed state of the button model.
2. `void setArmed(boolean b)`: This method sets the armed state of the button model.
3. `void setRollover(boolean b)`: This method sets the rollover state of the button model.
4. `void setMnemonic(int key)`: This method sets the mnemonic keycode for the button model.
5. `void setActionCommand(String actionCommand)`: This method sets the action command string for the button model.
================================================================

Sample: 16 DefaultCellEditor
----------------------------------------------------------------
1. `void createTextField()`: This method creates a new JTextField to be used as the cell editor component.

2. `void setClickCountToStart(int count)`: This method sets the number of clicks needed to start editing.

3. `void setStopCellEditing(boolean stop)` : This method sets whether cell editing should be stopped.

4. `void setClickInText(boolean click)` : This method sets whether a click in the text should start the editing process.

5. `boolean isCellEditable(EventObject anEvent)`: This method returns true if anEvent is the type of event the editor is supposed to react to.
================================================================

Sample: 17 DefaultComboBoxModel
----------------------------------------------------------------
1. `void addElement(Object anObject)`: This method appends the specified element to the end of this list.
2. `void insertElementAt(Object anObject, int index)`: This method inserts the specified element at the specified position in this list.
3. `void removeElement(Object anObject)`: This method removes the first occurrence of the specified element from this list, if it is present.
4. `void removeElementAt(int index)`: This method removes the element at the specified position in this list.
5. `void removeAllElements()`: This method removes all elements from this list.
================================================================

Sample: 18 DefaultDesktopManager
----------------------------------------------------------------
1. `void activateFrame(JInternalFrame f)`: Activate the specified internal frame.
2. `void closeFrame(JInternalFrame f)`: Close the specified internal frame.
3. `void iconifyFrame(JInternalFrame f)`: Iconify the specified internal frame.
4. `void deiconifyFrame(JInternalFrame f)`: Deiconify the specified internal frame.
5. `void maximizeFrame(JInternalFrame f)`: Maximize the specified internal frame.
================================================================

Sample: 19 DefaultFocusManager
----------------------------------------------------------------
1. `void setFocusTraversalPolicyProvider(boolean focusTraversalPolicyProvider)`: Set whether the specified Container is the provider of focus traversal keys for this GUI component.
2. `void increment()`: Increment index in the direction of the next component focus traversal cycle.
3. `void setDefaultFocusTraversalPolicy(FocusTraversalPolicy defaultPolicy)`: Set the FocusTraversalPolicy.
4. `void focusNextComponent()`: Move the focus to the next component.
5. `void setHead(Component head)` Set the component with focus.
================================================================

Sample: 20 DefaultListCellRenderer
----------------------------------------------------------------
1. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a component that renders the specified value in the list.
2. `Icon getDisabledIcon()`: This method returns the icon used to represent a disabled item in the list.
3. `void installBorder(JList list)`: This method installs the border for the list component.
4. `void setIconTextGap(int iconTextGap)`: This method sets the gap between the icon and text in the list component.
5. `void setOpaque(boolean isOpaque)`: This method sets whether or not the list component is opaque.
================================================================

Sample: 21 DefaultListCellRenderer.UIResource
----------------------------------------------------------------
1. `void setValue(Object value)`: Sets the value of the current cell to the given value.
2. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: Returns a component that will be used to draw the cell representing the specified value.
3. `void validate()`: Validates the cell renderer’s current state.
4. `void invalidate()`: Invalidates the cell renderer.
5. `void repaint()`: Repaints the cell renderer.
================================================================

Sample: 22 DefaultListModel
----------------------------------------------------------------
1. `void addElement(Object obj)`: This method appends the specified element to the end of this list.
2. `void insertElementAt(Object obj, int index)`: This method inserts the specified element at the specified position in this list.
3. `Object get(int index)`: This method returns the element at the specified position in this list.
4. `Object removeElementAt(int index)`: This method removes the element at the specified position in this list.
5. `int indexOf(Object obj)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element.
================================================================

Sample: 23 DefaultListSelectionModel
----------------------------------------------------------------
1. `void setSelectionInterval(int anchor, int lead)`: This method sets the selection to be the union of the specified interval with any existing selection.
2. `void addSelectionInterval(int index0, int index1)`: This method adds the specified interval to the selection.
3. `void removeSelectionInterval(int index0, int index1)`: This method removes the specified interval from the selection.
4. `void setSelectionInterval(int index0, int index1)`: This method changes the selection to be the set of indices between index0 and index1 inclusive.
5. `void removeIndexInterval(int index0, int index1)`: This method removes the indices in the interval index0 to index1 (inclusive) from the selection.
================================================================

Sample: 24 DefaultRowSorter
----------------------------------------------------------------
1. `SortKey getPrimarySortKey()`: Returns the primary sort key of the row sorter.
2. `void setSortable(int column, boolean sortable)`: Sets whether or not the specified column is sortable.
3. `int convertRowIndexToModel(int index)`: Converts the row index of the view to the corresponding row index in the model.
4. `void setRowFilter(RowFilter<? super M, ? super Integer> filter)`: Sets the filter that determines the rows provided to the model.
5. `void toggleSortOrder(int column)`: Toggles the sort order of the specified column.
================================================================

Sample: 25 DefaultRowSorter.ModelWrapper
----------------------------------------------------------------
1. `Class<?> getModel()`: This method returns the Class object for the model wrapped by this ModelWrapper.
2. `void setModel(Class<?> modelClass)`: This method sets the Class object for the model to be wrapped by this ModelWrapper.
3. `boolean isUnsortable(int column)`: This method returns true if the specified column is unsortable, false otherwise.
4. `void setUnsortable(int column, boolean unsortable)`: This method sets whether the specified column is unsortable.
5. `void setSortable(boolean sortable)`: This method sets whether the model is sortable.
================================================================

Sample: 26 DefaultSingleSelectionModel
----------------------------------------------------------------
1. int getMaxSelectionIndex(): Returns the index of the last selected item.
2. int getMinSelectionIndex(): Returns the index of the first selected item.
3. void setSelectionInterval(int index0, int index1): Sets the selection to be the set of indices specified by the two indices.
4. void addSelectionInterval(int index0, int index1): Adds the selection to the set of selected indices.
5. void removeSelectionInterval(int index0, int index1): Removes the selection from the set of selected indices.
================================================================

Sample: 27 FocusManager
----------------------------------------------------------------
1. `Component getComponent()` : This method returns the currently focused component.
2. `void clearGlobalFocusOwner()` : This method clears the global focus owner.
3. `Window getFocusedWindow()` : This method returns the currently focused Window.
4. `void clearFocusOwner()` : This method clears the current focus owner.
5. `Component getFocusOwner()` : This method returns the currently focused component.
================================================================

Sample: 28 GrayFilter
----------------------------------------------------------------
1. `ImageProducer createDisabledImage(Image img)`: This method creates a gray-filtered version of the specified image.
2. `void lighten(Color color)`: This method lightens the specified color by a predefined amount.
3. `void darken(Color color)`: This method darkens the specified color by a predefined amount.
4. `ImageProducer createDisabledImage(Image img, int brightness)` : This method creates a gray-filtered version of the specified image with a specified brightness level.
5. `ImageProducer createDisabledImage(Image img, int x, int y, int w, int h)`: This method creates a gray-filtered version of the specified image within the specified bounds.
================================================================

Sample: 29 GroupLayout
----------------------------------------------------------------
1. `void setVerticalGroup(Group group)`: This method sets the vertical group for the layout.
2. `void setHorizontalGroup(Group group)`: This method sets the horizontal group for the layout.
3. `Group createParallelGroup(Group.Alignment alignment)`: This method creates a parallel group with the specified alignment.
4. `Group createSequentialGroup()`: This method creates a sequential group.
5. `void linkSize(Component... components)`: This method links the sizes of the specified components.
================================================================

Sample: 30 ImageIcon
----------------------------------------------------------------
1. `int getIconHeight()`: This method returns the height of the icon.
2. `int getIconWidth()`: This method returns the width of the icon.
3. `void setImageObserver(ImageObserver observer)`: This method sets an image observer for this icon.
4. `Image getImage()`: This method returns the image contained in the icon.
5. `ImageObserver getImageObserver()`: This method returns the image observer for this icon.
================================================================

Sample: 31 InputMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Object actionMapKey)`: This method binds the specified KeyStroke to the specified actionMapKey.
2. `void remove(KeyStroke key)`: This method removes the binding for the specified KeyStroke.
3. `Object get(KeyStroke keyStroke)`: This method returns the binding for the specified KeyStroke.
4. `void setParent(InputMap map)`: This method sets the parent InputMap for this InputMap.
5. `KeyStroke[] keys()`: This method returns all the KeyStrokes currently in the InputMap.
================================================================

Sample: 32 InputVerifier
----------------------------------------------------------------
1. `boolean shouldYieldFocus(JComponent input)`: This method determines whether the input is valid and the focus can be transferred from the input.
2. `void verify(JComponent input)`: This method verifies the input and may call `shouldYieldFocus` to determine if the focus can be transferred.
3. `void verify(JComponent input, boolean fireEvent)`: This method verifies the input and can specify whether to fire an input verification event.
4. `InputVerifier clone()`: This method creates and returns a copy of this input verifier.
5. `void shouldYieldFocus(JComponent source, JComponent target)`: This method is called to determine if the focus can be transferred from the source component to the target component.
================================================================

Sample: 33 InternalFrameFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container container, Component component)`: This method returns the component that should receive the focus after a given component within a specified container.

2. `Component getComponentBefore(Container container, Component component)`: This method returns the component that should receive the focus before a given component within a specified container.

3. `Component getFirstComponent(Container container)`: This method returns the first component in the traversal order for a specified container.

4. `Component getLastComponent(Container container)`: This method returns the last component in the traversal order for a specified container.

5. `Component getDefaultComponent(Container container)`: This method returns the default component to focus on within a specified container.
================================================================

Sample: 34 JApplet
----------------------------------------------------------------
1. `void init()`: This method is called by the browser or applet viewer to inform this applet that it has been loaded into the system.

2. `void start()`: This method is called by the browser or applet viewer to inform this applet that it should start its execution.

3. `void stop()`: This method is called by the browser or applet viewer to inform this applet that it should stop its execution.

4. `void paint(Graphics g)`: This method is called by the applet viewer to request that this applet paint itself.

5. `void destroy()`: This method is called by the browser or applet viewer to inform this applet that it is being reclaimed and that it should destroy any resources that it has allocated.
================================================================

Sample: 35 JButton
----------------------------------------------------------------
1. `void setText(String text)`: Sets the text of the button.
2. `void setEnabled(boolean enabled)`: Enables or disables the button.
3. `void addActionListener(ActionListener listener)`: Adds an ActionListener to the button.
4. `void setToolTipText(String text)`: Sets the tool tip text for the button.
5. `Dimension getPreferredSize()`: Returns the preferred size of the button.
================================================================

Sample: 36 JCheckBox
----------------------------------------------------------------
1. `boolean isSelected()`: This method returns a boolean value indicating whether the checkbox is selected or not.
2. `void setSelected(boolean selected)`: This method sets the selected state of the checkbox based on the boolean parameter passed.
3. `String getText()`: This method returns the text displayed on the checkbox.
4. `void setText(String text)`: This method sets the text to be displayed on the checkbox.
5. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the checkbox to handle events when the checkbox is clicked.
================================================================

Sample: 37 JCheckBoxMenuItem
----------------------------------------------------------------
1. `void setState(boolean b)`: This method sets the selected state of the checkbox.
2. `boolean getState()`: This method returns the current selected state of the checkbox.
3. `void setAccelerator(KeyStroke keystroke)`: This method sets the accelerator key combination for the checkbox menu item.
4. `KeyStroke getAccelerator()`: This method returns the current accelerator key combination for the checkbox menu item.
5. `void setSelected(boolean selected)`: This method sets whether the checkbox menu item is selected or not.
================================================================

Sample: 38 JColorChooser
----------------------------------------------------------------
1. `Color showDialog(Component parent, String title, Color initialColor)`: This method displays a modal color-chooser dialog.
   
2. `void setColor(Color color)`: This method sets the selected color in the color chooser.

3. `Color getColor()`: This method returns the currently selected color in the color chooser.

4. `void setPreviewPanel(JPanel preview): This method sets the preview panel that displays the selected color.

5. `void setChooserPanels(AbstractColorChooserPanel[] panels)`: This method sets the panels to be displayed in the color chooser dialog.
================================================================

Sample: 39 JComboBox
----------------------------------------------------------------
1. `void addItem(Object item)`: This method adds an item to the end of the combo box.
2. `void insertItemAt(Object item, int index)`: This method inserts an item at the specified index in the combo box.
3. `void removeItem(Object item)`: This method removes the specified item from the combo box.
4. `Object getSelectedItem()`: This method returns the currently selected item in the combo box.
5. `void setSelectedItem(Object anObject)`: This method sets the selected item in the combo box to the specified object.
================================================================

Sample: 40 JComponent
----------------------------------------------------------------
1. `void paintComponent(Graphics g)`: This method is called by the Swing painting system when a component is being painted.
   
2. `void setPreferredSize(Dimension preferredSize)`: This method sets the preferred size of this component.

3. `Component add(Component comp)`: This method adds the specified component to this container.

4. `void remove(Component comp)`: This method removes the specified component from the container.

5. `void repaint()`: This method schedules a repaint of this component.
================================================================

Sample: 41 JDesktopPane
----------------------------------------------------------------
1. `void setLayer(Component c, int layer)`: This method sets the desktop layer property for a specified component.
2. `Component add(JInternalFrame f)`: This method adds a JInternalFrame to the desktop pane and returns the component.
3. `void remove(Component c)`: This method removes the specified component from the desktop pane.
4. `Component getSelectedFrame()`: This method returns the selected frame within the desktop pane.
5. `void setDragMode(int dragMode)`: This method sets the drag mode for the desktop pane.
================================================================

Sample: 42 JDialog
----------------------------------------------------------------
1. `void setVisible(boolean visible)`: This method sets the visibility of the dialog.
2. `void setTitle(String title)`: This method sets the title of the dialog.
3. `void setModal(boolean modal)`: This method sets whether the dialog is modal or not.
4. `void setResizable(boolean resizable)`: This method sets whether the dialog is resizable or not.
5. `void setLocationRelativeTo(Component c)`: This method sets the location of the dialog relative to the specified component.
================================================================

Sample: 43 JEditorPane
----------------------------------------------------------------
1. `void setPage(String url)`: This method sets the URL for the content to be displayed in the JEditorPane.
2. `void setText(String t)`: This method sets the plain text of the JEditorPane to the specified text.
3. `void setContentType(String type)`: This method sets the content type for the JEditorPane, such as "text/html" or "text/plain".
4. `String getContentType()`: This method returns the content type of the JEditorPane.
5. `void setEditable(boolean editable)`: This method sets whether the JEditorPane is editable or not.
================================================================

Sample: 44 JFileChooser
----------------------------------------------------------------
1. `int showOpenDialog(Component parent)`: This method displays an "Open File" dialog to the user and returns the option chosen by the user.
   
2. `int showSaveDialog(Component parent)`: This method displays a "Save File" dialog to the user and returns the option chosen by the user.

3. `File getSelectedFile()`: This method returns the selected file chosen by the user in the file chooser dialog.

4. `File[] getSelectedFiles()`: This method returns an array of selected files chosen by the user in the file chooser dialog.

5. `void setFileSelectionMode(int mode)`: This method sets the file selection mode for the file chooser, options include JFileChooser.FILES_ONLY, JFileChooser.DIRECTORIES_ONLY, JFileChooser.FILES_AND_DIRECTORIES.
================================================================

Sample: 45 JFormattedTextField
----------------------------------------------------------------
1. `void setFormatter(AbstractFormatter format)`: This method sets the AbstractFormatter that will be used to format the current value.
2. `void setValue(Object value)`: This method sets the current value of the formatted text field.
3. `Object getValue()`: This method returns the current value of the formatted text field.
4. `String getText()`: This method returns the text contained in the formatted text field.
5. `void setPlaceholder(String text)`: This method sets the placeholder text to be displayed when the field is empty.
================================================================

Sample: 46 JFormattedTextField.AbstractFormatter
----------------------------------------------------------------
1. `Object stringToValue(String text)`: This method converts a String to an Object value.
2. `String valueToString(Object value)`: This method converts an Object value to a String.
3. `void install(JFormattedTextField ftf)`: This method installs the AbstractFormatter onto a JFormattedTextField.
4. `void uninstall()`: This method uninstalls the AbstractFormatter from the JFormattedTextField it is installed on.
5. `void setCommitsOnValidEdit(boolean commitsOnValidEdit)`: This method sets whether the AbstractFormatter commits the value on a valid edit.
================================================================

Sample: 47 JFormattedTextField.AbstractFormatterFactory
----------------------------------------------------------------
1. `JFormattedTextField.AbstractFormatter getFormatter(JFormattedTextField tf)`: This method returns the AbstractFormatter that should be installed on the JFormattedTextField for the AbstractFormatterFactory to create and parse the text correctly.

2. `JFormattedTextField.AbstractFormatter getDisplayFormatter(JFormattedTextField tf)`: This method returns the AbstractFormatter that will be used on the JFormattedTextField when the field has focus and is being edited.

3. `void setDefaultFormatter(JFormattedTextField.AbstractFormatter defaultFormat): This method sets the default AbstractFormatter that will be used if no other suitable formatter is provided.

4. `void setDisplayFormatter(JFormattedTextField.AbstractFormatter displayFormat)`: This method sets the AbstractFormatter that will be used on the JFormattedTextField when the field has focus and is being edited.

5. `JFormattedTextField.AbstractFormatter getDefaultFormatter()`: This method returns the default AbstractFormatter that will be used if no other suitable formatter is provided.
================================================================

Sample: 48 JFrame
----------------------------------------------------------------
1. `void setTitle(String title)`: This method sets the title of the JFrame.
2. `void setSize(int width, int height)`: This method sets the size of the JFrame.
3. `void setDefaultCloseOperation(int operation)`: This method sets the default close operation for the JFrame.
4. `Component add(Component comp)`: This method adds the specified component to the JFrame's content pane.
5. `void setVisible(boolean b)`: This method shows or hides the JFrame.
================================================================

Sample: 49 JInternalFrame
----------------------------------------------------------------
1. `void setTitle(String title)`: Sets the title of the internal frame.
2. `void setClosable(boolean closable)`: Sets whether the internal frame can be closed by the user.
3. `void setResizable(boolean resizable)`: Sets whether the internal frame can be resized by the user.
4. `void setMaximizable(boolean maximizable)`: Sets whether the internal frame can be maximized by the user.
5. `void setIconifiable(boolean iconifiable)`: Sets whether the internal frame can be iconified (minimized) by the user.
================================================================

Sample: 50 JInternalFrame.JDesktopIcon
----------------------------------------------------------------
1. `JInternalFrame getInternalFrame()`: This method returns the JInternalFrame associated with the JDesktopIcon.
2. `void setBounds(int x, int y, int width, int height)`: This method sets the bounds of the JDesktopIcon.
3. `void setSelectable(boolean selectable)`: This method sets whether the JDesktopIcon is selectable.
4. `void setUI(JDesktopIconUI ui)`: This method sets the UI delegate for the JDesktopIcon.
5. `void updateUI()`: This method updates the UI of the JDesktopIcon.
================================================================

Sample: 51 JLabel
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the JLabel to the specified text.
2. `void setIcon(Icon icon)`: This method sets the icon of the JLabel to the specified icon.
3. `String getText()`: This method returns the text of the JLabel.
4. `Icon getIcon()`: This method returns the icon of the JLabel.
5. `void setHorizontalAlignment(int alignment)`: This method sets the horizontal alignment of the JLabel.
================================================================

Sample: 52 JLayer
----------------------------------------------------------------
1. `void setView(Component view)`: This method sets the view component that will be rendered by the JLayer.
2. `void setUI(LayerUI<? extends Component> ui)`: This method sets the LayerUI for the JLayer.
3. `Component getView()`: This method returns the view component that is being rendered by the JLayer.
4. `void setGlassPane(Component glassPane)`: This method sets the glass pane component for the JLayer.
5. `Component getGlassPane()`: This method returns the glass pane component that is set for the JLayer.
================================================================

Sample: 53 JLayeredPane
----------------------------------------------------------------
1. `void add(Component comp, Integer layer)`: This method adds the specified component to the specified layer.
2. `void setPosition(Component c, int position)`: This method sets the position of the specified component in the layered pane.
3. `void setLayer(Component c, Integer layer, int position)`: This method sets the layer of the specified component along with its position.
4. `void moveToFront(Component c)`: This method moves the specified component to the front of its layer.
5. `void moveToBack(Component c)`: This method moves the specified component to the back of its layer.
================================================================

Sample: 54 JList
----------------------------------------------------------------
1. `void setListData(Object[] listData)`: This method sets the list data with the specified array of objects.
2. `void clearSelection()`: This method clears the current selection from the list.
3. `int getSelectedIndex()`: This method returns the index of the currently selected item in the list.
4. `void setSelectionMode(int selectionMode)`: This method sets the selection mode for the list.
5. `int getSelectedIndices()`: This method returns an array of all the currently selected indices in the list.
================================================================

Sample: 55 JList.DropLocation
----------------------------------------------------------------
1. `int getIndex()`: This method returns the index of the drop location within the JList.
2. `int getIndex()`: This method returns the child index on the drop line in the list where a drop occurred.
3. `boolean isInsert()`: This method returns true if the drop location represents an insert.
4. `boolean isInsert()`: This method returns true if the drop location is on the leading edge of the item at index.
5. `boolean isInsert()`: This method returns true if the drop location is on the trailing edge of the item at index.
================================================================

Sample: 56 JMenu
----------------------------------------------------------------
1. `void add(JMenuItem menuItem)`: This method adds a JMenuItem to the end of this JMenu.
2. `Component getPopupMenu()`: This method returns the popup menu associated with this JMenu.
3. `void setPopupMenuVisible(boolean b)`: This method sets the visibility of the popup menu associated with this JMenu.
4. `void setMnemonic(char key)`: This method sets the mnemonic for this JMenu based on the specified key.
5. `void setMenuLocation(int x, int y)`: This method sets the location of the JMenu when it is popped up.
================================================================

Sample: 57 JMenuBar
----------------------------------------------------------------
1. `void add(JMenu menu)`: This method adds a JMenu to the menu bar.
2. `JMenu getMenu(int index)`: This method returns the JMenu at the specified index in the menu bar.
3. `void remove(int index)`: This method removes the JMenu at the specified index from the menu bar.
4. `int getMenuCount()`: This method returns the number of menus in the menu bar.
5. `void setHelpMenu(JMenu menu)`: This method sets the specified menu as the help menu for the menu bar.
================================================================

Sample: 58 JMenuItem
----------------------------------------------------------------
1. `String getText()`: This method returns the text of the JMenuItem.
2. `void setText(String text)`: This method sets the text of the JMenuItem to the specified string.
3. `Icon getIcon()`: This method returns the icon of the JMenuItem.
4. `void setIcon(Icon icon)`: This method sets the icon of the JMenuItem to the specified icon.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the JMenuItem.
================================================================

Sample: 59 JOptionPane
----------------------------------------------------------------
1. `int showConfirmDialog(Component parentComponent, Object message)`: This method displays a confirmation dialog with the specified message and parent component, returning an integer based on the user's choice.
2. `String showInputDialog(Component parentComponent, Object message)`: This method displays an input dialog with the specified message and parent component, returning the user's input as a String.
3. `void showMessageDialog(Component parentComponent, Object message)`: This method displays a message dialog with the specified message and parent component.
4. `int showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)`: This method displays a customized option dialog with the specified parameters, returning an integer based on the user's choice.
5. `String showInputDialog(Component parentComponent, Object message, String initialValue)`: This method displays an input dialog with the specified message, parent component, and initial value, returning the user's input as a String.
================================================================

Sample: 60 JPanel
----------------------------------------------------------------
1. `void add(JComponent comp)`: This method adds the specified component to this panel.
2. `void remove(JComponent comp)`: This method removes the specified component from this panel.
3. `Component add(String name, Component comp)`: This method adds the specified named component to this panel.
4. `void setLayout(LayoutManager layout)`: This method sets the layout manager for this panel.
5. `Dimension getPreferredSize()`: This method returns the preferred size of this panel.
================================================================

Sample: 61 JPasswordField
----------------------------------------------------------------
1. `char[] getPassword()`: This method returns the password contained in the JPasswordField as an array of characters.
2. `void setEchoChar(char c)`: This method sets the echo character for the JPasswordField, which is displayed instead of the actual characters when typing. 
3. `void setSelectionColor(Color c)`: This method sets the color used to render the selected text in the JPasswordField.
4. `void setEchoCharEnabled(boolean enabled)`: This method enables or disables the echoing of characters as they are typed into the JPasswordField.
5. `void setBorder(Border border)`: This method sets the border of the JPasswordField component.
================================================================

Sample: 62 JPopupMenu
----------------------------------------------------------------
1. `void show(Component invoker, int x, int y)`: Displays the popup menu at the specified location relative to the specified component.
   
2. `void add(JMenuItem menuItem)`: Adds the specified menu item to the end of the popup menu.
   
3. `void removeAll()`: Removes all menu items from the popup menu.

4. `void setLightWeightPopupEnabled(boolean aFlag)`: Sets whether lightweight (all-Java) popups are to be used.

5. `MenuElement[] getSubElements()`: Returns an array containing the sub-elements of this menu element.
================================================================

Sample: 63 JPopupMenu.Separator
----------------------------------------------------------------
1. `javax.swing.Component getComponent()`: This method returns the component that represents this separator.
2. `javax.swing.JMenu getInheritedMenu()`: This method returns the JMenu this separator is contained in.
3. `void setComponent(javax.swing.Component c)`: This method sets the component that represents this separator.
4. `void setInheritedMenu(javax.swing.JMenu m)`: This method sets the JMenu this separator is contained in.
5. `void paint(java.awt.Graphics g, int x, int y, int width, int height)`: This method paints the separator at the specified location with the specified dimensions.
================================================================

Sample: 64 JProgressBar
----------------------------------------------------------------
1. `void setValue(int n)`: This method sets the current value of the progress bar to the specified integer value.
2. `int getValue()`: This method returns the current value of the progress bar.
3. `void setString(String s)`: This method sets the string that will be displayed on the progress bar.
4. `String getString()`: This method returns the string displayed on the progress bar.
5. `void setIndeterminate(boolean newValue)`: This method sets the progress bar to indeterminate mode, which means that the progress bar will animate without a specific value.
================================================================

Sample: 65 JRadioButton
----------------------------------------------------------------
1. void setSelected(boolean selected): This method sets the selected state of the radio button.
2. boolean isSelected(): This method returns true if the radio button is selected, false otherwise.
3. void setEnabled(boolean enabled): This method sets the enabled state of the radio button.
4. String getText(): This method returns the text of the radio button.
5. void setText(String text): This method sets the text of the radio button.
================================================================

Sample: 66 JRadioButtonMenuItem
----------------------------------------------------------------
1. `ButtonGroup getGroup()`: returns the group this radio button menu item is a part of.
2. `boolean isSelected()`: returns true if the radio button menu item is selected, false otherwise.
3. `void setSelected(boolean selected)`: sets the selected state of the radio button menu item.
4. `void addActionListener(ActionListener l)`: adds an action listener to the radio button menu item.
5. `void removeActionListener(ActionListener l)`: removes an action listener from the radio button menu item.
================================================================

Sample: 67 JRootPane
----------------------------------------------------------------
1. `JMenuBar getJMenuBar()`: Returns the menu bar for this root pane.
2. `JLayeredPane getLayeredPane()`: Returns the layered pane for this root pane.
3. `Container getContentPane()`: Returns the content pane for this root pane.
4. `JRootPaneUI getUI()`: Returns the look and feel delegate for this root pane.
5. `void setContentPane(Container contentPane)`: Sets the content pane for this root pane to the specified container.
================================================================

Sample: 68 JScrollBar
----------------------------------------------------------------
1. `int getOrientation()`: This method returns the orientation of the scroll bar.
2. `void setModel(BoundedRangeModel newModel)`: This method sets the data model that handles how the scroll bar's value is determined.
3. `void setUnitIncrement(int unitIncrement)`: This method sets the unit increment for the scroll bar.
4. `void setBlockIncrement(int blockIncrement)`: This method sets the block increment for the scroll bar.
5. `void setValues(int newValue, int newExtent, int newMin, int newMax)`: This method sets all of the scroll bar's values at once.
================================================================

Sample: 69 JScrollPane
----------------------------------------------------------------
1. `JScrollPane getViewport()`: This method returns the JViewport object used by the scroll pane.
2. `void setViewportView(Component view)`: This method sets the component to be displayed in the scroll pane's viewport.
3. `int getVerticalScrollBarPolicy()`: This method returns the vertical scroll bar policy for the scroll pane.
4. `void setVerticalScrollBarPolicy(int policy)`: This method sets the vertical scroll bar policy for the scroll pane.
5. `void setHorizontalScrollBarPolicy(int policy)`: This method sets the horizontal scroll bar policy for the scroll pane.
================================================================

Sample: 70 JSeparator
----------------------------------------------------------------
1. `int getOrientation()`: Returns the orientation of the separator.
2. `void setOrientation(int orientation)`: Sets the orientation of the separator.
3. `void setForeground(Color fg)`: Sets the foreground color of the separator.
4. `void setPreferredSize(Dimension size)`: Sets the preferred size of the separator.
5. `void setBorder(Border border)`: Sets the border of the separator.
================================================================

Sample: 71 JSlider
----------------------------------------------------------------
1. `void setMinimum(int minimum)`: Set the minimum value of the slider.
2. `void setMaximum(int maximum)`: Set the maximum value of the slider.
3. `void setValue(int value)`: Set the current value of the slider.
4. `int getMinimum()`: Get the minimum value of the slider.
5. `int getMaximum()`: Get the maximum value of the slider.
================================================================

Sample: 72 JSpinner
----------------------------------------------------------------
1. `void setValue(Object value)`: This method sets the current value of the spinner to the specified object.
   
2. `void setMinimum(Object min)`: This method sets the minimum allowed value for the spinner.

3. `void setMaximum(Object max)`: This method sets the maximum allowed value for the spinner.

4. `void setStepSize(Number stepSize)`: This method sets the step size for incrementing or decrementing the value of the spinner.

5. `void setEditor(JComponent editor)`: This method sets the editor component for the spinner.
================================================================

Sample: 73 JSpinner.DateEditor
----------------------------------------------------------------
1. `DateEditFormatter getTextFieldFormatter()`: This method returns the formatter used for the text field.
   
2. `void setMinimumDate(Date min)`: This method sets the minimum allowed date in the spinner.

3. `void setMaximumDate(Date max)`: This method sets the maximum allowed date in the spinner.

4. `void setDefaultSize(Dimension size)`: This method sets the default size of the spinner's text field.

5. `void setClickCountToStart(int clickCount)`: This method sets the number of clicks needed to start editing the text field.
================================================================

Sample: 74 JSpinner.DefaultEditor
----------------------------------------------------------------
1. `void setTextField(JFormattedTextField textField)`: This method sets the JFormattedTextField used to edit the value displayed by the spinner.
2. `JFormattedTextField getTextField()`: This method returns the JFormattedTextField used to edit the value displayed by the spinner.
3. `void setCommitsOnValidEdit(boolean commitsOnValidEdit)`: This method sets whether the editor should commit the value on a valid edit.
4. `boolean getCommitsOnValidEdit()`: This method returns whether the editor commits the value on a valid edit.
5. `void setClickCountToStart(int clickCountToStart)`: This method sets the number of clicks needed to start editing.
================================================================

Sample: 75 JSpinner.ListEditor
----------------------------------------------------------------
1. `Object setSource(Object source)`: This method sets the source object that is the JSpinner object.
2. `ListEntry(JList list, Object value)`: This constructor creates a ListEntry instance with the specified JList and Object value.
3. `void setList(JList<T> list)`: This method sets the JList for this ListEditor.
4. `Object valueForTouchUIPainter()`: This method creates the actual value to be painted.
================================================================

Sample: 76 JSpinner.NumberEditor
----------------------------------------------------------------
1. `JSpinner.NumberEditor(JSpinner spinner)`: This constructor creates a new NumberEditor given a JSpinner object.
   
2. `void setMinimum(Comparable minimum)`: This method sets the minimum allowable value for the spinner.

3. `void setMaximum(Comparable maximum)`: This method sets the maximum allowable value for the spinner.

4. `void setStepSize(Number stepSize)`: This method sets the increment that is used to change the spinner value.

5. `Number getMinimum()`: This method returns the minimum allowable value for the spinner.
================================================================

Sample: 77 JSplitPane
----------------------------------------------------------------
1. `void setDividerSize(int newSize)`: Sets the size of the divider.
2. `void setDividerLocation(double proportionalLocation)`: Sets the location of the divider.
3. `void setOneTouchExpandable(boolean newValue)`: Sets the property that determines whether the split pane can be expanded/collapsed in one touch.
4. `void setContinuousLayout(boolean newContinuousLayout)`: Sets the property that determines whether the components of the split pane continuously layout as the divider is being moved.
5. `int getDividerLocation()`: Returns the location of the divider.
================================================================

Sample: 78 JTabbedPane
----------------------------------------------------------------
1. void addTab(String title, Component component): This method adds a new tab with the specified title and component to this JTabbedPane.
2. void removeTabAt(int index): This method removes the tab at the specified index from this JTabbedPane.
3. Component getSelectedComponent(): This method returns the component currently selected in this JTabbedPane.
4. void setSelectedIndex(int index): This method sets the selected index of this JTabbedPane to the specified index.
5. int indexOfComponent(Component component): This method returns the index of the tab with the specified component in this JTabbedPane.
================================================================

Sample: 79 JTable
----------------------------------------------------------------
1. `void setAutoResizeMode(int mode)`: Sets the auto-resize mode of the JTable.
   
2. `void setCellSelectionEnabled(boolean flag)`: Sets whether cell selection is allowed in the JTable.
   
3. `void setModel(TableModel dataModel)`: Sets the data model for this JTable to the specified TableModel.
   
4. `TableColumnModel getColumnModel()`: Returns the TableColumnModel that contains all the columns in the JTable.
   
5. `void clearSelection()`: Clears the current selection in the JTable.
================================================================

Sample: 80 JTable.DropLocation
----------------------------------------------------------------
1. `int getColumn()`: Returns the column index at the drop location.
2. `int getRow()`: Returns the row index at the drop location.
3. `boolean isInsertRow()`: Returns true if the drop location indicates that the dragged items should be inserted before the row index.
4. `boolean isInsertColumn()`: Returns true if the drop location indicates that the dragged items should be inserted before the column index.
5. `boolean isInsert()`: Returns true if the drop location indicates that the dragged items should be inserted based on both row and column indexes.
================================================================

Sample: 81 JTextArea
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the JTextArea to the specified text.
2. `String getText()`: This method returns the text contained in the JTextArea.
3. `void append(String text)`: This method appends the specified text to the end of the JTextArea.
4. `void setEditable(boolean editable)`: This method sets whether the JTextArea is editable or not.
5. `void setLineWrap(boolean wrap)`: This method sets whether the JTextArea should wrap lines or not.
================================================================

Sample: 82 JTextField
----------------------------------------------------------------
1. `void setText(String text)`: This method sets the text of the JTextField to the specified string.
2. `String getText()`: This method returns the text contained in the JTextField.
3. `void setEditable(boolean editable)`: This method sets whether the text field can be edited by the user.
4. `void setToolTipText(String text)`: This method sets the text that appears when the mouse pointer hovers over the JTextField.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the JTextField to listen for events.
================================================================

Sample: 83 JTextPane
----------------------------------------------------------------
1. `StyledDocument getStyledDocument()`: This method returns the styled document model that represents the content of the JTextPane.
2. `void setStyledDocument(StyledDocument doc)`: This method sets the styled document to be used for the JTextPane.
3. `void insertComponent(Component comp)`: This method inserts the specified component into the text at the current position.
4. `void insertIcon(Icon icon)`: This method inserts the specified icon into the text at the current position.
5. `void replaceSelection(String content)`: This method replaces the currently selected content with the specified text.
================================================================

Sample: 84 JToggleButton
----------------------------------------------------------------
1. `void setSelected(boolean selected)`: Set the selected state of the toggle button.
2. `void setEnabled(boolean enabled)`: Set the enabled state of the toggle button.
3. `void setText(String text)`: Set the text displayed on the toggle button.
4. `boolean isSelected()`: Returns true if the toggle button is currently selected, false otherwise.
5. `boolean isEnabled()`: Returns true if the toggle button is currently enabled, false otherwise.
================================================================

Sample: 85 JToggleButton.ToggleButtonModel
----------------------------------------------------------------
1. `ButtonGroup getGroup()`: This method returns the ButtonGroup to which this model belongs.
2. `boolean isSelected()`: This method returns true if the button is selected, false otherwise.
3. `void setSelected(boolean b)`: This method sets the selected state of the button.
4. `void setGroup(ButtonGroup group)`: This method sets the ButtonGroup to which this model belongs.
5. `void setPressed(boolean b)`: This method sets the pressed state of the button.
================================================================

Sample: 86 JToolBar
----------------------------------------------------------------
1. `void add(Component comp)`: Adds the specified component to the toolbar.
2. `void addSeparator()`: Adds a separator to the toolbar.
3. `JButton add(Action a)`: Adds a button to the toolbar using the specified Action.
4. `void setFloatable(boolean floatable)`: Sets whether the toolbar can be moved by the user.
5. `void setOrientation(int orientation)`: Sets the orientation of the toolbar.
================================================================

Sample: 87 JToolBar.Separator
----------------------------------------------------------------
1. `int getOrientation()`: This method returns the current orientation of the separator.
2. `void setOrientation(int orientation)`: This method sets the orientation of the separator to the specified value.
3. `void setBorderPainted(boolean b)`: This method sets whether the border of the separator should be painted.
4. `boolean isBorderPainted()`: This method returns true if the border of the separator is painted, false otherwise.
5. `void setSeparatorSize(Dimension size)`: This method sets the size of the separator to the specified dimension.
================================================================

Sample: 88 JToolTip
----------------------------------------------------------------
1. `void setTipText(String tipText)`: This method sets the text to be displayed in the tooltip.
2. `String getTipText()`: This method returns the text currently displayed in the tooltip.
3. `void setDismissDelay(int dismissDelay)`: This method sets the dismiss delay for the tooltip.
4. `int getDismissDelay()`: This method returns the current dismiss delay for the tooltip.
5. `void setComponent(JComponent component)`: This method sets the component for which the tooltip is being displayed.
================================================================

Sample: 89 JTree
----------------------------------------------------------------
1. `void expandRow(int row)`: Expands the specified row in the tree.
2. `TreePath getLeadSelectionPath()`: Returns the path to the currently lead-selected row.
3. `int getRowCount()`: Returns the number of visible rows.
4. `void collapseRow(int row)`: Collapses the specified row in the tree.
5. `boolean isPathSelected(TreePath path)`: Returns true if the specified path is selected.
================================================================

Sample: 90 JTree.DropLocation
----------------------------------------------------------------
1. `int getChildIndex()`: Returns the index of the child in the parent node.
2. `Rectangle getDropPoint()`: Returns the location of the drop within the node.
3. `boolean isInsert()`: Returns true if the drop location indicates a valid insert location.
4. `boolean isParentOfChild()`: Returns true if the drop location indicates a parent-child relationship.
5. `String toString()`: Returns a string representation of the drop location.
================================================================

Sample: 91 JTree.DynamicUtilTreeNode
----------------------------------------------------------------
1. `void nodeChanged(TreeNode node)`: This method notifies all listeners that the node has changed.
2. `void nodeInserted(TreeNode node, int index)`: This method notifies all listeners that a new node has been inserted.
3. `void nodeRemoved(TreeNode node, int index)`: This method notifies all listeners that a node has been removed.
4. `void nodesWereInserted(TreeNode parent, int[] childIndices)`: This method notifies all listeners that the children of the node parent have been inserted.
5. `void nodesWereRemoved(TreeNode parent, int[] childIndices, Object[] children)`: This method notifies all listeners that the children of the node parent have been removed.
================================================================

Sample: 92 JTree.EmptySelectionModel
----------------------------------------------------------------
1. `void clearSelection()`: This method clears the selection.
2. `int getSelectionCount()`: This method returns the number of selected items.
3. `boolean isSelectionEmpty()`: This method checks if the selection is empty.
4. `TreePath getLeadSelectionPath()`: This method returns the path to the lead selection.
5. `void setSelectionPath(TreePath path)`: This method sets the selection to the specified path.
================================================================

Sample: 93 JViewport
----------------------------------------------------------------
1. Component getView() : This method returns the view component of the JViewport.
2. Dimension getExtentSize() : This method returns the size of the visible view in this JViewport.
3. Point getViewPosition() : This method returns the coordinates of the view in the viewport.
4. void setViewPosition(Point p) : This method sets the coordinates of the view in the viewport to the specified Point.
5. boolean isBackingStoreEnabled() : This method returns true if backing store is enabled for this viewport, false otherwise.
================================================================

Sample: 94 JWindow
----------------------------------------------------------------
1. `void setLocation(int x, int y)`: Sets the location of the JWindow to the specified coordinates.
2. `void setSize(int width, int height)`: Sets the size of the JWindow to the specified width and height.
3. `void setVisible(boolean b)`: Sets the visibility of the JWindow based on the boolean parameter.
4. `void setAlwaysOnTop(boolean alwaysOnTop)`: Sets whether the JWindow should always stay on top of other windows.
5. `void toFront()`: Moves the JWindow to the front of the stacking order.
================================================================

Sample: 95 KeyStroke
----------------------------------------------------------------
1. `KeyStroke getKeyStroke(String s)`: Returns a shared instance of a KeyStroke that represents a key stroke description string.
2. `KeyStroke getKeyStroke(int keyCode, int modifiers)`: Returns a KeyStroke that represents a specific key and modifiers.
3. `String getKeyStrokeText(KeyStroke ks)`: Returns a string representing the stroke sequence, which is a key code combined with an optional modifier.
4. `int getKeyEventType(KeyStroke ks)`: Returns the type of action that should result from a key event for a given KeyStroke.
5. `int getKeyChar(KeyStroke ks)`: Returns the character for a KeyStroke, or KeyEvent.CHAR_UNDEFINED if a valid Unicode character can't be generated.
================================================================

Sample: 96 LayoutFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getDefaultComponent(Container focusCycleRoot)`: Returns the Component that should receive the focus when the focus traversal policy determines that the focus should be given to the entire focus cycle, but that the native windowing system itself doesn't (or can't) determine a default component for the app.
    
2. `Component getComponentAfter(Container focusCycleRoot, Component aComponent)`: Returns the Component that should receive the focus after aComponent.
    
3. `Component getFirstComponent(Container focusCycleRoot)`: Returns the first Component in the traversal cycle.
    
4. `Component getLastComponent(Container focusCycleRoot)`: Returns the last Component in the traversal cycle.
    
5. `Component getComponentBefore(Container focusCycleRoot, Component aComponent)`: Returns the Component that should receive the focus before aComponent.
================================================================

Sample: 97 LayoutStyle
----------------------------------------------------------------
1. `void setPreferredGap(ComponentPlacement component1, ComponentPlacement component2, int type, int size)`: This method sets the gap size between two components based on the provided component placements, gap type, and size.
   
2. `int getPreferredGap(ComponentPlacement component1, ComponentPlacement component2, int type)`: This method returns the gap size between two components based on the provided component placements and gap type.

3. `void setContainerGap(ComponentPlacement component, int size)`: This method sets the gap size at the end of the specified component.

4. `int getContainerGap(ComponentPlacement component)`: This method returns the gap size at the end of the specified component.

5. `void setHonorsVisibility(Component component, Boolean doHonorsVisibility)`: This method sets whether or not the specified component honors visibility.
================================================================

Sample: 98 LookAndFeel
----------------------------------------------------------------
1. `String getName()`: Returns the name of the LookAndFeel.
2. `UIResource getDisabledIcon(JComponent component, Icon icon)`: Returns a disabled version of the specified icon for a component.
3. `Color getColor(ColorType type)`: Returns the color associated with the specified ColorType.
4. `Font getFont(UIDefaults table)`: Returns the default font used in the LookAndFeel.
5. `Icon getDisabledIcon(JComponent component, Icon icon)`: Returns a disabled version of the specified icon for a component.
================================================================

Sample: 99 MenuSelectionManager
----------------------------------------------------------------
1. `MenuElement getSelectedPath()`: This method returns the path to the currently selected menu item.
   
2. `void processKeyEvent(KeyEvent event)`: This method processes a key event, typically by changing the selection in the menu.

3. `void setSelectedPath(MenuElement[] path)`: This method sets the path to the currently selected menu item.

4. `void clearSelectedPath()`: This method clears the currently selected path in the menu.

5. `void appendPath(MenuElement[] path)`: This method appends a menu element path to the existing selected path.
================================================================

Sample: 100 OverlayLayout
----------------------------------------------------------------
1. `void layoutContainer(Container parent)`: This method lays out the specified container.
2. `void invalidateLayout(Container target)`: This method invalidates the layout, indicating that the layout needs to be recalculated.
3. `Dimension preferredLayoutSize(Container target)`: This method calculates the preferred size dimensions for the specified container, given the components it contains.
4. `Dimension minimumLayoutSize(Container target)`: This method calculates the minimum size dimensions for the specified container, given the components it contains.
5. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, associating it with the specified constraint.
================================================================

Sample: 101 Popup
----------------------------------------------------------------
1. `void show(Component owner, int x, int y)`: This method displays the popup at the specified location relative to the specified component.
2. `void hide()`: This method hides the popup.
3. `boolean isLightWeightPopupEnabled()`: This method returns a boolean value indicating whether lightweight popups are enabled.
4. `void setLightWeightPopupEnabled(boolean aFlag)`: This method sets whether lightweight popups are enabled.
5. `void updateComponentTreeUI()`: This method updates the UI of the popup and its descendants.
================================================================

Sample: 102 PopupFactory
----------------------------------------------------------------
1. `Popup getPopup(Component owner, Component contents, int x, int y)`: This method returns a Popup that can display a popup window at the specified location.
2. `void setPopupType(int type)`: This method sets the type of popup that will be created by this factory.
3. `void setSharedInstance(PopupFactory factory)`: This method sets the shared instance of PopupFactory that will be used throughout the application.
4. `void setLWPopupEnabled(JComponent component, boolean enabled)`: This method enables or disables lightweight popups for the specified component.
5. `void setPopupPostion(int x, int y)`: This method sets the default position where popups will be displayed.
================================================================

Sample: 103 ProgressMonitor
----------------------------------------------------------------
1. `void setProgress(int nv)`: This method sets the progress level for the progress monitor.
2. `void setMillisToPopup(int millisToPopup)`: This method sets the amount of time this progress monitor waits before popping up a progress monitor dialog.
3. `void setNote(String note)`: This method sets the descriptive note that will be displayed along with the progress meter.
4. `void close()`: This method closes the progress monitor dialog.
5. `void setMillisToDecideToPopup(int millisToDecideToPopup)`: This method sets the amount of time this progress monitor waits before deciding to pop up a progress monitor dialog.
================================================================

Sample: 104 ProgressMonitorInputStream
----------------------------------------------------------------
1. `int getProgress()`: This method returns the current progress of the input stream.
2. `int getMaximum()`: This method returns the maximum value of the progress.
3. `void setMillisToDecideToPopup(int millis)`: This method sets the amount of time before the progress monitor decides to popup a progress monitor.
4. `void setMillisToPopup(int millis)`: This method sets the amount of time between updates to the progress monitor.
5. `void close()`: This method closes the progress monitor.
================================================================

Sample: 105 RepaintManager
----------------------------------------------------------------
1. `void addDirtyRegion(JComponent c, int x, int y, int w, int h)`: This method adds a region to be repainted.
2. `void addInvalidComponent(JComponent component)`: This method marks the component as needing to be repainted.
3. `void markCompletelyClean(JComponent aComponent)`: This method marks the component as completely painted. 
4. `void paintDirtyRegions()`: This method repaints all dirty regions.
5. `void validateInvalidComponents()`: This method validates all components that are marked as invalid.
================================================================

Sample: 106 RowFilter
----------------------------------------------------------------
1. `RowFilter.Entry<V> public RowFilter.Entry<V>`: This method returns the entry object for the specified value.
   
2. `RowFilter.Entry<V> public RowFilter.Entry<V>`: This method returns the entry object for the specified value.

3. `RowFilter.Entry<V> public RowFilter.Entry<V>`: This method returns the entry object for the specified value.

4. `boolean include(Entry<? extends V> value)`: This method determines if the specified value should be included in the filtered view.

5. `Object getValue(int index)`: This method returns the value at the specified index in the row.
================================================================

Sample: 107 RowFilter.Entry
----------------------------------------------------------------
1. `boolean include(javax.swing.RowFilter.Entry entry)`: This method determines if the specified RowFilter.Entry should be included in the filtered view.

2. `void setModel(javax.swing.table.TableModel model)`: This method sets the TableModel on which RowFilter.Entry should be invoked.

3. `void setIdentifier(java.lang.Object identifier)`: This method sets an identifier for the RowFilter.Entry.

4. `void setValue(int index, java.lang.Object value)`: This method sets the value at the specified index for the RowFilter.Entry.

5. `void setComparisonType(javax.swing.RowFilter.ComparisonType type)`: This method sets the ComparisonType for the RowFilter.Entry.
================================================================

Sample: 108 RowSorter
----------------------------------------------------------------
1. `SortKey getSortKey(int column)`: This method returns the SortKey for the specified column.
2. `void setSortable(int column, boolean sortable)`: This method sets whether or not the specified column is sortable.
3. `void toggleSortOrder(int column)`: This method toggles the sort order of the specified column.
4. `void setSortKeys(List<? extends SortKey> sortKeys)`: This method sets the sort keys to use during sorting.
5. `void setSortKeys(SortKey... sortKeys)`: This method sets the sort keys to use during sorting using a varargs parameter.
================================================================

Sample: 109 RowSorter.SortKey
----------------------------------------------------------------
1. `int getColumn()`: This method returns the index of the column that the sort key applies to.
2. `SortOrder getSortOrder()`: This method returns the sort order of the sort key.
3. `SortKey(Object sortKey, SortOrder sortOrder)`: This method creates a sort key for the specified column index and sort order.
4. `Object getValue()`: This method returns the value that the sort key is based on.
5. `int hashCode()`: This method returns the hash code value for the sort key.
================================================================

Sample: 110 ScrollPaneLayout
----------------------------------------------------------------
1. `void layoutContainer(Container parent)`: This method lays out the specified container.
2. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
3. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
4. `void syncWithScrollPane(JScrollPane sp)`: This method synchronizes the row and column headers with the JScrollPane.
5. `void layoutContainer(Container parent)`: This method lays out the specified container.
================================================================

Sample: 111 ScrollPaneLayout.UIResource
----------------------------------------------------------------
1. `JScrollBar createHorizontalScrollBar()`: This method creates a horizontal scroll bar.
2. `JScrollBar createVerticalScrollBar()`: This method creates a vertical scroll bar.
3. `void layoutContainer(Container parent)`: This method lays out the specified container.
4. `void syncWithScrollPane(JViewport viewport)`: This method synchronizes the layout with the specified viewport.
5. `void syncWithScrollPane(int rowHead, int colHead)`: This method synchronizes the layout with the specified row and column headers.
================================================================

Sample: 112 SizeRequirements
----------------------------------------------------------------
1. `int getSize()`: This method returns the size of the component.
2. `int getAlignment()`: This method returns the alignment of the component.
3. `int getPreferredSize()`: This method returns the preferred size of the component.
4. `int[] getMinimumSize()`: This method returns an array containing the minimum size of the component.
5. `int getMaximumSize()`: This method returns the maximum size of the component.
================================================================

Sample: 113 SizeSequence
----------------------------------------------------------------
1. `void setSize(int size)`: Sets the size of the SizeSequence.
2. `int getSize()`: Returns the size of the SizeSequence.
3. `void setSize(int index, int size)`: Sets the size for the element at the specified index.
4. `int getSize(int index)`: Returns the size of the element at the specified index.
5. `void removeSize(int index)`: Removes the size at the specified index.
================================================================

Sample: 114 SortingFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus after aComponent in aContainer.
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus before aComponent in aContainer.
3. `Component getFirstComponent(Container aContainer)`: This method returns the first component in the traversal cycle for aContainer.
4. `Component getLastComponent(Container aContainer)`: This method returns the last component in the traversal cycle for aContainer.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default traversal cycle start component for aContainer.
================================================================

Sample: 115 SpinnerDateModel
----------------------------------------------------------------
1. `Date getDate()`: This method returns the current value of the spinner.
2. `void setStart(Date start)`: This method sets the minimum value for the spinner to the specified date.
3. `void setEnd(Date end)`: This method sets the maximum value for the spinner to the specified date.
4. `void setCalendarField(int calendarField)`: This method sets the calendar field for the spinner.
5. `void setTimeZone(TimeZone zone)`: This method sets the time zone for the spinner.
================================================================

Sample: 116 SpinnerListModel
----------------------------------------------------------------
1. `Object getNextValue()`: This method returns the next value in the sequence.
2. `Object getPreviousValue()`: This method returns the previous value in the sequence.
3. `void setValue(Object value)`: This method sets the current value of the spinner.
4. `Object getValue()`: This method returns the current value of the spinner.
5. `void setList(List<?> list)`: This method sets the list of values that the spinner can cycle through.
================================================================

Sample: 117 SpinnerNumberModel
----------------------------------------------------------------
1. `int getMaximum()`: This method returns the maximum value allowed for the spinner.
2. `int getMinimum()`: This method returns the minimum value allowed for the spinner.
3. `Number getValue()`: This method returns the current value of the spinner.
4. `void setValue(Object value)`: This method sets the current value of the spinner to the specified value.
5. `void setStepSize(Number stepSize)`: This method sets the size of the increment/decrement step for the spinner.
================================================================

Sample: 118 Spring
----------------------------------------------------------------
1. `Spring xCoordinate(double value)`: Returns a Spring object with the specified x coordinate value.
   
2. `Spring.width(double value)`: Returns a Spring object with the specified width value.

3. `Spring.height(double value)`: Returns a Spring object with the specified height value.

4. `Spring.sum(Spring s1, Spring s2)`: Returns a Spring object representing the sum of two given Spring objects.

5. `Spring.max(Spring s1, Spring s2)`: Returns a Spring object representing the maximum of two given Spring objects.
================================================================

Sample: 119 SpringLayout
----------------------------------------------------------------
1. `SpringLayout.Constraints getConstraints(Component c)`: This method returns the constraints for the specified component.
2. `void putConstraint(String edgeName, Component c1, int pad, String relativeName, Component c2)`: This method specifies how far the edge of one component is from the edge of another component.
3. `void putConstraint(String edgeName, Component c1, int pad, String relEdge, Component c2, String relEdge2)`: This method specifies how one edge of a component relates to another component's edge.
4. `void removeLayoutComponent(Component c)`: This method removes the constraints for the specified component.
5. `void layoutContainer(Container parent)`: This method lays out the specified container using this spring layout.
================================================================

Sample: 120 SpringLayout.Constraints
----------------------------------------------------------------
1. `float getWidth()`: Return the width constraint for the component.
2. `float getHeight()`: Return the height constraint for the component.
3. `void setX(float x)`: Set the x constraint for the component.
4. `void setY(float y)`: Set the y constraint for the component.
5. `void setConstraint(String edgeName, Spring s)`: Set the constraint for a specific edge of the component.
================================================================

Sample: 121 SwingUtilities
----------------------------------------------------------------
1. `void invokeLater(Runnable doRun)`: This method causes the Runnable instance to be executed asynchronously on the Event Dispatch Thread.
2. `void invokeAndWait(Runnable doRun)`: This method causes the Runnable instance to be executed synchronously on the Event Dispatch Thread.
3. `boolean isEventDispatchThread()`: This method returns true if the current thread is an event dispatch thread.
4. `void invokeLater(Runnable doRun, Object key)`: This method posts a doRun runnable to be executed asynchronously on the AWT event dispatching thread.
5. `void invokeAndWait(Runnable doRun, Object key)`: This method posts a doRun runnable to be executed synchronously on the AWT event dispatching thread.
================================================================

Sample: 122 SwingWorker
----------------------------------------------------------------
1. `Void doInBackground()`: This method must be implemented by the programmer to perform a computation in a background thread.
2. `Void process(List<V> chunks)`: This method processes chunks of data that are produced while the background computation is running.
3. `Void done()`: This method is called on the Event Dispatch Thread after the doInBackground method has finished.
4. `Void publish(V... chunks)`: This method is used to pass data chunks from the background thread to process them on the Event Dispatch Thread.
5. `Void setProgress(int progress)`: This method is used to update the progress of the background task.
================================================================

Sample: 123 Timer
----------------------------------------------------------------
1. `void start()`: This method starts the Timer.
2. `void stop()`: This method stops the Timer.
3. `void setDelay(int delay)`: This method sets the delay between the firing of Timer events.
4. `void setInitialDelay(int initialDelay)`: This method sets the initial delay before the Timer starts firing events.
5. `void addActionListener(ActionListener listener)`: This method adds an ActionListener to the Timer to handle Timer events.
================================================================

Sample: 124 ToolTipManager
----------------------------------------------------------------
1. `void setInitialDelay(int milliseconds)`: This method sets the initial delay value for the tooltips to appear.
2. `int getDismissDelay()`: This method returns the dismiss delay value for the tooltips.
3. `void setLightWeightPopupEnabled(boolean aFlag)`: This method sets whether lightweight (all-Java) tooltips are used.
4. `boolean isLightWeightPopupEnabled()`: This method returns true if lightweight tooltips are used, false otherwise.
5. `void setDismissDelay(int milliseconds)`: This method sets the dismiss delay value for the tooltips.
================================================================

Sample: 125 TransferHandler
----------------------------------------------------------------
1. `void exportToClipboard(JComponent comp, Clipboard clipboard, int action)`: This method exports the component's data to the clipboard.
2. `boolean canImport(TransferSupport support)`: This method determines whether or not the import can happen.
3. `void exportAsDrag(JComponent comp, InputEvent e, int action)`: This method starts a drag and drop operation.
4. `boolean importData(TransferSupport support)`: This method imports the data into the component.
5. `void exportDone(JComponent source, Transferable data, int action)`: This method signals the end of a transfer.
================================================================

Sample: 126 TransferHandler.DropLocation
----------------------------------------------------------------
1. `int getChildIndex()`: This method returns the index of the child associated with the DropLocation.
2. `Point getDropPoint()`: This method returns the drop point within the associated Component.
3. `Rectangle getDropRect()`: This method returns the bounds of the drop target component.
4. `boolean isInsert()`: This method returns whether the drop location is an insert location.
5. `Component getComponent()`: This method returns the component associated with the DropLocation.
================================================================

Sample: 127 TransferHandler.TransferSupport
----------------------------------------------------------------
1. `boolean isDataFlavorSupported(DataFlavor flavor)`: This method returns true if the specified data flavor is supported for the transfer operation.
2. `Component getComponent()`: This method returns the component that is the source for the data transfer.
3. `DataFlavor[] getDataFlavors()`: This method returns the data flavors that are available for the transfer operation.
4. `Transferable getTransferable()`: This method returns the transferable object that represents the data to be transferred.
5. `int getSourceActions()`: This method returns the user action that triggered the transfer.
================================================================

Sample: 128 UIDefaults
----------------------------------------------------------------
1. `Object put(Object key, Object value)`: This method associates the specified value with the specified key in this map.
2. `Object get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `void clear()`: This method clears all of the mappings from this map.
4. `String getProperty(String key)`: This method gets the property with the specified key.
5. `void setDefaultLocale(Locale l)`: This method sets the default Locale for this instance.
================================================================

Sample: 129 UIDefaults.LazyInputMap
----------------------------------------------------------------
1. `void put(KeyStroke keyStroke, Object actionName)`: Add a mapping from keyStroke to actionName.
2. `void remove(KeyStroke key)`: Remove a mapping from keyStroke.
3. `void remove(KeyStroke keyStroke, Object actionName)`: Remove the mapping from keyStroke to actionName.
4. `void setParent(InputMap map)`: Set the parent InputMap.
5. `void setPartialReturn(boolean newValue)`: Sets whether or not partial matches are valid.
================================================================

Sample: 130 UIDefaults.ProxyLazyValue
----------------------------------------------------------------
1. `Object createValue(UIDefaults table)`: This method creates and returns a value based on the UIDefaults table.
2. `Object createValue(UIDefaults table, Object key)`: This method creates and returns a value based on the UIDefaults table and the specified key.
3. `boolean equals(Object obj)`: This method checks if this ProxyLazyValue is equal to the specified object.
4. `int hashCode()`: This method returns the hash code value for this ProxyLazyValue.
5. `String toString()`: This method returns a string representation of this ProxyLazyValue.
================================================================

Sample: 131 UIManager
----------------------------------------------------------------
1. `void setLookAndFeel(String className)`: This method sets the look and feel for the current application.
2. `void put(Object key, Object value)`: This method stores a key-value pair in the defaults table.
3. `void setLookAndFeel(LookAndFeel newLookAndFeel)`: This method sets the look and feel for the current application using a LookAndFeel object.
4. `LookAndFeel getLookAndFeel()`: This method returns the look and feel object currently set for the application.
5. `void installLookAndFeel(String name, String className)`: This method installs a new look and feel into the UIManager.
================================================================

Sample: 132 UIManager.LookAndFeelInfo
----------------------------------------------------------------
1. `String getClassName()`: Returns the fully qualified class name of the LookAndFeel class.
2. `String getName()`: Returns the name of the LookAndFeel.
3. `LookAndFeel getLookAndFeel()`: Returns an instance of the LookAndFeel class.
4. `String toString()`: Returns a string representation of the LookAndFeelInfo object.
5. `String getID()`: Returns a unique identifier for the LookAndFeel.
================================================================

Sample: 133 ViewportLayout
----------------------------------------------------------------
1. `void setViewPosition(Point p)`: This method sets the view position.
2. `Point getViewPosition()`: This method returns the current view position.
3. `void setExtentSize(Dimension newExtent)`: This method sets the size of the visible part of the viewport.
4. `Dimension getExtentSize()`: This method returns the size of the visible part of the viewport.
5. `void setViewSize(Dimension newSize)`: This method sets the size of the view.
================================================================

