Sample: 0 AuthorizeCallback
----------------------------------------------------------------
1. `String getAuthorizationID()`: This method returns the authorization ID to be used for authorization.
2. `boolean isAuthorized()`: This method returns whether the authentication ID was successfully authorized.
3. `void setAuthorized(boolean ok)`: This method sets whether the authentication ID is authorized.
4. `String getAuthorizedID()`: This method returns the authentication ID that was successfully authorized.
5. `AuthorizeCallback(String prompt, String authId, String authzId)`: This method constructs an instance with the specified prompting, authentication ID, and authorization ID.
================================================================

Sample: 1 RealmCallback
----------------------------------------------------------------
1. `String getText()`: This method returns the text of the prompt.
2. `void setText(String text)`: This method sets the text of the prompt.
3. `String getDefaultText()`: This method returns the default text that can be used for the Realm.
4. `void setDefaultText(String defaultText)`: This method sets the default text that can be used for the Realm.
5. `String getPrompt()`: This method returns the prompt that can be used for the Realm.
================================================================

Sample: 2 RealmChoiceCallback
----------------------------------------------------------------
1. `String[] getChoices()`: This method returns an array of choices for the realm.
2. `boolean isSelected()`: This method returns a boolean indicating if the realm choice is selected.
3. `void setSelectedIndex(int selectedIndex)`: This method sets the selected index of the realm choice.
4. `int getSelectedIndex()`: This method returns the selected index of the realm choice.
5. `String getPrompt()`: This method returns the prompt for the realm choice.
================================================================

Sample: 3 Sasl
----------------------------------------------------------------
1. `String getMechanismName()`: This method returns the IANA-registered name of the SASL mechanism.
2. `byte[] evaluateResponse(byte[] response)`: This method evaluates the response data and generates a challenge.
3. `void dispose()`: This method releases any resources allocated for the SASL negotiation.
4. `boolean hasInitialResponse()`: This method returns true if the mechanism has an initial response, false otherwise.
5. `String getNegotiationQop()`: This method returns the available QOP (Quality of Protection) options for the SASL mechanism.
================================================================

