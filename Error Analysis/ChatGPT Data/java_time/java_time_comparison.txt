Sample: 0 Clock
----------------------------------------------------------------
1. `ZoneId getZone()`: This method returns the time-zone of the clock.
2. `Clock withZone(ZoneId zone)`: This method returns a copy of this clock with a different time-zone.
3. `Instant instant()`: This method returns the current instant of the clock.
4. `long millis()`: This method returns the current millisecond instant of the clock.
5. `Clock systemDefaultZone()`: This method returns a clock that uses the best available system clock in the default time-zone.
================================================================

Sample: 1 Duration
----------------------------------------------------------------
1. `static Duration of(long amount, TemporalUnit unit)`: This method creates a Duration from the given amount and unit.
2. `long toDays()`: This method returns the number of days in the Duration.
3. `Duration minus(Duration duration)`: This method subtracts the specified Duration from this Duration.
4. `Duration plus(Duration duration)`: This method adds the specified Duration to this Duration.
5. `boolean isNegative()`: This method checks if this Duration is negative.
================================================================

Sample: 2 Instant
----------------------------------------------------------------
1. `Instant now()`: This method returns the current instant from the system clock.
2. `Instant plusSeconds(long seconds)`: This method returns an Instant representing a specified number of seconds added to this instant.
3. `Instant minusSeconds(long seconds)`: This method returns an Instant representing a specified number of seconds subtracted from this instant.
4. `boolean isAfter(Instant otherInstant)`: This method checks if this instant is after the specified instant.
5. `boolean isBefore(Instant otherInstant)`: This method checks if this instant is before the specified instant.
================================================================

Sample: 3 LocalDate
----------------------------------------------------------------
1. `static LocalDate now()`: This method returns the current date.
2. `static LocalDate of(int year, int month, int dayOfMonth)`: This method returns a LocalDate instance representing the specified year, month, and day.
3. `LocalDate plusDays(long daysToAdd)`: This method returns a LocalDate instance that is 'daysToAdd' days after the current date.
4. `LocalDate minusDays(long daysToSubtract)`: This method returns a LocalDate instance that is 'daysToSubtract' before the current date.
5. `LocalDate withYear(int year)`: This method returns a LocalDate instance with the year set to the specified value.
================================================================

Sample: 4 LocalDateTime
----------------------------------------------------------------
1. `LocalDateTime now()`: This method returns the current date and time.
2. `LocalDateTime plusDays(long daysToAdd)`: This method returns a copy of this `LocalDateTime` with the specified number of days added.
3. `LocalDateTime minusHours(long hoursToSubtract)`: This method returns a copy of this `LocalDateTime` with the specified number of hours subtracted.
4. `LocalDateTime withYear(int year)`: This method returns a copy of this `LocalDateTime` with the year altered.
5. `boolean isAfter(LocalDateTime dateTime)`: This method checks if this `LocalDateTime` is after the specified `LocalDateTime`.
================================================================

Sample: 5 LocalTime
----------------------------------------------------------------
1. `LocalTime now()`: This method returns the current time based on the system clock.
2. `LocalTime of(int hour, int minute)`: This method returns an instance of LocalTime initialized with the specified hour and minute.
3. `int getHour()`: This method returns the hour-of-day field.
4. `int getMinute()`: This method returns the minute-of-hour field.
5. `LocalTime plusHours(long hoursToAdd)`: This method returns a copy of this LocalTime with the specified number of hours added.
================================================================

Sample: 6 MonthDay
----------------------------------------------------------------
1. `static MonthDay now()`: This method returns the current month-day using the system clock in the default time-zone.
2. `int getDayOfMonth()`: This method returns the day-of-month value.
3. `int getMonthValue()`: This method returns the month-of-year value.
4. `MonthDay plusDays(long daysToAdd)`: This method returns a copy of this MonthDay with the specified number of days added.
5. `MonthDay minusMonths(long monthsToSubtract)`: This method returns a copy of this MonthDay with the specified number of months subtracted.
================================================================

Sample: 7 OffsetDateTime
----------------------------------------------------------------
1. `int getHour()`: This method returns the hour-of-day field ranging from 0 to 23.
2. `int getMinute()`: This method returns the minute-of-hour field ranging from 0 to 59.
3. `int getSecond()`: This method returns the second-of-minute field ranging from 0 to 59.
4. `OffsetDateTime withHour(int hour)`: This method returns a copy of this OffsetDateTime with the hour-of-day altered.
5. `OffsetDateTime plusHours(long hours)`: This method returns a copy of this OffsetDateTime with the specified number of hours added.
================================================================

Sample: 8 OffsetTime
----------------------------------------------------------------
1. `OffsetTime from(LocalTime time, ZoneOffset offset)`: This method returns an OffsetTime object representing the time with the specified offset.
2. `int getHour()`: This method returns the hour-of-day field as an integer from 0 to 23.
3. `OffsetTime minusHours(long hours)`: This method returns a copy of this OffsetTime with the specified number of hours subtracted.
4. `boolean isAfter(OffsetTime other)`: This method checks if this OffsetTime is after the specified OffsetTime.
5. `LocalTime toLocalTime()`: This method returns a LocalTime object representing the time component of this OffsetTime.
================================================================

Sample: 9 Period
----------------------------------------------------------------
1. `Period between(LocalDate startDateInclusive, LocalDate endDateExclusive)`: Returns a Period representing the time between the specified start date (inclusive) and end date (exclusive).
2. `Period parse(CharSequence text)`: Returns a Period parsed from the specified text.
3. `String toString()`: Returns a string representation of the Period in the ISO-8601 duration format.
4. `int getYears()`: Returns the years part of the Period.
5. `int getMonths()`: Returns the months part of the Period.
================================================================

Sample: 10 Year
----------------------------------------------------------------
1. `int getValue()`: This method returns the year value as an integer.
2. `boolean isLeap()`: This method checks if the year is a leap year and returns a boolean value.
3. `Year minusYears(long years)`: This method returns a copy of this Year with the specified number of years subtracted.
4. `Year plusYears(long years)`: This method returns a copy of this Year with the specified number of years added.
5. `Year with(TemporalAdjuster adjuster)`: This method returns a copy of this Year with the adjustment made by the specified TemporalAdjuster.
================================================================

Sample: 11 YearMonth
----------------------------------------------------------------
1. `YearMonth from(TemporalAccessor temporal)`: Returns a YearMonth instance representing the same year and month as the specified TemporalAccessor.
2. `long lengthOfYear()`: Returns the length of the year in days for this YearMonth.
3. `Month getMonth()`: Returns the month-of-year field, which is an enum Month.
4. `int getYear()`: Returns the year field.
5. `boolean isAfter(YearMonth other)`: Checks if this YearMonth is after the specified YearMonth.
================================================================

Sample: 12 ZonedDateTime
----------------------------------------------------------------
1. `ZonedDateTime now()`: Returns the current date and time in the default time zone.
2. `ZonedDateTime withZoneSameLocal(ZoneId zone)`: Returns a copy of this ZonedDateTime with a different time zone, retaining the same local date and time.
3. `ZonedDateTime plus(Duration amountToAdd)`: Returns a copy of this ZonedDateTime with the specified amount added.
4. `ZonedDateTime minus(Duration amountToSubtract)`: Returns a copy of this ZonedDateTime with the specified amount subtracted.
5. `boolean isEqual(ZonedDateTime other)`: Checks if this ZonedDateTime is equal to another ZonedDateTime.
================================================================

Sample: 13 ZoneId
----------------------------------------------------------------
1. `Set<String> getAvailableZoneIds()`: This method returns a set of all available zone IDs.
2. `ZoneId of(String zoneId)`: This method obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use.
3. `ZoneId systemDefault()`: This method returns the system default time-zone.
4. `List<ZoneId> getAvailableZoneIds()`: This method returns a list of all available zone IDs.
================================================================

Sample: 14 ZoneOffset
----------------------------------------------------------------
1. `boolean equals(Object obj)`: This method compares this ZoneOffset with another ZoneOffset
2. `int compareTo(ZoneOffset other)`: This method compares this ZoneOffset with another ZoneOffset
3. `static ZoneOffset ofHours(int hours)`: This method obtains an instance of ZoneOffset using the number of hours from UTC/Greenwich
4. `static ZoneOffset ofTotalSeconds(int totalSeconds)`: This method obtains an instance of ZoneOffset using the total time in seconds
5. `String toString()`: This method returns the string representation of this ZoneOffset
================================================================

