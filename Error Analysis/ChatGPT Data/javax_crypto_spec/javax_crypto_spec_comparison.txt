Sample: 0 DESedeKeySpec
----------------------------------------------------------------
1. `int getKeySize()`: This method returns the size of the key used in bits.
2. `byte[] getKey()`: This method returns the key in byte array format.
3. `void setKey(byte[] key)`: This method sets the key using the provided byte array.
4. `boolean isParityAdjusted()`: This method returns true if the key has been adjusted for parity, false otherwise.
5. `void setParityAdjustment(boolean isParityAdjusted)`: This method adjusts the key for parity if set to true.
================================================================

Sample: 1 DESKeySpec
----------------------------------------------------------------
1. `byte[] getKey()`: This method returns the DES key.
2. `boolean isParityAdjusted()`: This method returns true if the DES key is parity adjusted, false otherwise.
3. `void setKeyParity(byte[] key)`: This method sets the parity bits for the DES key.
4. `void clearKeyParity(byte[] key)`: This method clears the parity bits for the DES key.
5. `int getKeyLength()`: This method returns the length of the DES key in bytes.
================================================================

Sample: 2 DHGenParameterSpec
----------------------------------------------------------------
1. `int getPrimeSize()`: This method returns the size in bits of the prime modulus.
2. `BigInteger getP()`: This method returns the prime modulus `p`.
3. `BigInteger getG()`: This method returns the base generator `g`.
4. `int getExponentSize()`: This method returns the size in bits of the private value `x`.
5. `DHParameterSpec getDHParameterSpec()`: This method returns a DHParameterSpec object representing the parameter values of the Diffie-Hellman key agreement.
================================================================

Sample: 3 DHParameterSpec
----------------------------------------------------------------
1. `BigInteger getP()`: This method returns the prime modulus P.

2. `BigInteger getG()`: This method returns the base generator G.

3. `int getL()`: This method returns the size in bits of the random exponent used in the Key Agreement Protocol.

4. `DHParameterSpec(BigInteger p, BigInteger g)`: This constructor creates a new DHParameterSpec with the specified prime modulus P and base generator G.

5. `DHParameterSpec(BigInteger p, BigInteger g, int l)`: This constructor creates a new DHParameterSpec with the specified prime modulus P, base generator G, and size of the random exponent in bits.
================================================================

Sample: 4 DHPrivateKeySpec
----------------------------------------------------------------
1. `BigInteger getX()`: This method returns the private value, x.
2. `DHParameterSpec getParams()`: This method returns the DHParameterSpec associated with this private key.
3. `String getAlgorithm()`: This method returns the algorithm name of this DH private key.
4. `int hashCode()`: This method returns the hash code value for this DH private key.
5. `byte[] getEncoded()`: This method returns the key in its primary encoding format.
================================================================

Sample: 5 DHPublicKeySpec
----------------------------------------------------------------
1. `BigInteger getP()`: This method returns the prime modulus P.
2. `BigInteger getG()`: This method returns the base generator G.
3. `int getL()`: This method returns the private value length.
================================================================

Sample: 6 GCMParameterSpec
----------------------------------------------------------------
1. `int getTLen()`: Returns the TLen (length in bits of the authentication tag) for this GCM parameter specification.
2. `byte[] getNonce()`: Returns the nonce (initialization vector) for this GCM parameter specification.
3. `int getTLen()`: Returns the TLen (length in bits of the authentication tag) for this GCM parameter specification.
4. `int getTLen()`: Returns the TLen (length in bits of the authentication tag) for this GCM parameter specification.
5. `byte[] getNonce()`: Returns the nonce (initialization vector) for this GCM parameter specification.
================================================================

Sample: 7 IvParameterSpec
----------------------------------------------------------------
1. `byte[] getIV()`: This method returns the initialization vector (IV) used with this IvParameterSpec.
2. `int getOffset()`: This method returns the offset within the buffer at which the IV starts.
3. `void setIV(byte[] iv)`: This method sets the initialization vector (IV) for this IvParameterSpec.
4. `void setOffset(int offset)`: This method sets the offset within the buffer at which the IV starts.
5. `boolean equals(Object obj)`: This method compares the specified object with this IvParameterSpec for equality.
================================================================

Sample: 8 OAEPParameterSpec
----------------------------------------------------------------
1. `String getMGFAlgorithm()`: This method returns the name of the mask generation function algorithm.
2. `AlgorithmParameterSpec getDigestAlgorithm()`: This method returns the digest algorithm parameter specification.
3. `String getPSourceAlgorithm()`: This method returns the name of the parameter source algorithm.
4. `boolean getPSourcePSpec()`: This method returns whether the parameter source is present.
5. `String getLabel()`: This method returns the label.
================================================================

Sample: 9 PBEKeySpec
----------------------------------------------------------------
1. `int getKeyLength()`: This method returns the key length used for encryption.
2. `char[] getPassword()`: This method returns the password used as input for the key derivation function.
3. `int getIterationCount()`: This method returns the iteration count used for encryption.
4. `byte[] getSalt()`: This method returns the salt used for encryption.
5. `PBEKeySpec(char[] password)`: Constructor that creates a PBEKeySpec with the specified password.
================================================================

Sample: 10 PBEParameterSpec
----------------------------------------------------------------
1. `int getIterationCount()`: This method returns the iteration count.
2. `byte[] getSalt()`: This method returns the salt.
3. `int getKeyLength()`: This method returns the key length.
4. `AlgorithmParameterSpec clone()`: This method returns a clone of this PBEParameterSpec.
5. `String toString()`: This method returns a string representation of the PBEParameterSpec.
================================================================

Sample: 11 PSource
----------------------------------------------------------------
1. `String getAlgorithm()`: Returns the algorithm name of this PSource object.
2. `byte[] getEncoding()`: Returns the encoding value of this PSource object.
3. `int getCounter()` : Returns the counter value of this PSource object.
4. `PSource.PSpecified getPSpecified()` : Returns the PSpecified object of this PSource object.
5. `String getAlgorithm()` : Returns the algorithm name of this PSource object.
================================================================

Sample: 12 PSource.PSpecified
----------------------------------------------------------------
1. `byte[] getEncoding()`: This method returns the encoding value as byte array.
2. `PSource pSpecified(byte[] encoding)`: This method creates a new PSpecified object with the specified encoding.
3. `String getAlgorithm()`: This method returns the algorithm name as a String.
4. `boolean equals(Object obj)`: This method checks if the specified object is equal to this PSpecified object.
5. `int hashCode()`: This method returns the hash code value for this PSpecified object.
================================================================

Sample: 13 RC2ParameterSpec
----------------------------------------------------------------
1. `int getEffectiveKeyBits()`: This method returns the number of effective key bits.
2. `int getBlockSize()`: This method returns the block size in bytes.
3. `byte[] getIV()`: This method returns the initialization vector.
4. `void destroy()`: This method clears the key data in this parameter specification.
5. `Object clone()`: This method clones this RC2ParameterSpec object.
================================================================

Sample: 14 RC5ParameterSpec
----------------------------------------------------------------
1. `int getWordSize()`: Returns the word size in bits for this RC5ParameterSpec object.
2. `int getRounds()`: Returns the number of rounds for this RC5ParameterSpec object.
3. `byte[] getIV()`: Returns the initialization vector (IV) for this RC5ParameterSpec object.
4. `int getVersion()`: Returns the version of RC5 being used for this RC5ParameterSpec object.
5. `AlgorithmParameterSpec clone()`: Returns a clone of this RC5ParameterSpec object.
================================================================

Sample: 15 SecretKeySpec
----------------------------------------------------------------
1. `byte[] getEncoded()`: Returns the key as a byte array.
2. `String getAlgorithm()`: Returns the algorithm name of this secret key.
3. `int hashCode()`: Returns a hash code value for the object.
4. `boolean equals(Object obj)`: Compares the specified object with this key for equality.
5. `String toString()`: Returns a string representation of the object.
================================================================

