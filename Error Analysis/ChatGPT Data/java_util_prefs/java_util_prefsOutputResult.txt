Sample: AbstractPreferences_1
----------------------------------------------------------------
================================================================

Sample: AbstractPreferences_2
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:5: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:7: error: cannot find symbol
            protected void sync() throws BackingStoreException {
                                         ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:5: error: <anonymous AbstractPreferences_2$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_2.java:7: error: sync() in <anonymous AbstractPreferences_2$1> cannot override sync() in Preferences
            protected void sync() throws BackingStoreException {
                           ^
  attempting to assign weaker access privileges; was public
4 errors


================================================================

Sample: AbstractPreferences_3
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_3.java:6: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_3.java:6: error: <anonymous AbstractPreferences_3$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_3.java:8: error: flush() in <anonymous AbstractPreferences_3$1> cannot override flush() in Preferences
            protected void flush() {
                           ^
  attempting to assign weaker access privileges; was public
3 errors


================================================================

Sample: AbstractPreferences_4
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:5: error: constructor AbstractPreferences in class AbstractPreferences cannot be applied to given types;
        AbstractPreferences preferences = new AbstractPreferences() {
                                          ^
  required: AbstractPreferences,String
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:22: error: cannot find symbol
            protected void sync() throws BackingStoreException {
                                         ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:27: error: cannot find symbol
            protected void flush() throws BackingStoreException {
                                          ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:47: error: cannot find symbol
            protected void removeNodeSpi() throws BackingStoreException {
                                                  ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:52: error: cannot find symbol
            protected String[] keysSpi() throws BackingStoreException {
                                                ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:57: error: cannot find symbol
            protected String[] childrenNamesSpi() throws BackingStoreException {
                                                         ^
  symbol: class BackingStoreException
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:5: error: <anonymous AbstractPreferences_4$1> is not abstract and does not override abstract method flushSpi() in AbstractPreferences
        AbstractPreferences preferences = new AbstractPreferences() {
                                                                    ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:22: error: sync() in <anonymous AbstractPreferences_4$1> cannot override sync() in Preferences
            protected void sync() throws BackingStoreException {
                           ^
  attempting to assign weaker access privileges; was public
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:27: error: flush() in <anonymous AbstractPreferences_4$1> cannot override flush() in Preferences
            protected void flush() throws BackingStoreException {
                           ^
  attempting to assign weaker access privileges; was public
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:7: error: isUserNode() in <anonymous AbstractPreferences_4$1> cannot override isUserNode() in Preferences
            protected boolean isUserNode() {
                              ^
  attempting to assign weaker access privileges; was public
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:11: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/java_util_prefs/javaFiles/AbstractPreferences_4.java:16: error: method does not override or implement a method from a supertype
            @Override
            ^
12 errors


================================================================

Sample: AbstractPreferences_5
----------------------------------------------------------------
================================================================

Sample: NodeChangeEvent_3
----------------------------------------------------------------
stdout:
Parent Preferences: User Preference Node: /

================================================================

Sample: PreferenceChangeEvent_1
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.IllegalArgumentException: null source
	at java.base/java.util.EventObject.<init>(EventObject.java:57)
	at java.prefs/java.util.prefs.PreferenceChangeEvent.<init>(PreferenceChangeEvent.java:71)
	at PreferenceChangeEvent_1.main(PreferenceChangeEvent_1.java:5)

================================================================

Sample: PreferenceChangeEvent_2
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/PreferenceChangeEvent_2.java:6: error: cannot find symbol
        Preferences prefs = Preferences.userNodeForPackage(Main.class);
                                                           ^
  symbol:   class Main
  location: class PreferenceChangeEvent_2
./Data/java_util_prefs/javaFiles/PreferenceChangeEvent_2.java:12: error: incompatible types: NodeChangeListener is not a functional interface
        prefs.addNodeChangeListener(event -> {
             ^
    multiple non-overriding abstract methods found in interface NodeChangeListener
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: Preferences_1
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/Preferences_1.java:5: error: cannot find symbol
        Preferences preferences = Preferences.userNodeForPackage(Main.class);
                                                                 ^
  symbol:   class Main
  location: class Preferences_1
1 error


================================================================

Sample: Preferences_2
----------------------------------------------------------------
stdout:
1234567890

================================================================

Sample: Preferences_3
----------------------------------------------------------------
stdout:
Preference with key 'key1' has been removed.

================================================================

Sample: Preferences_4
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/Preferences_4.java:6: error: unreported exception BackingStoreException; must be caught or declared to be thrown
        prefs.clear();
                   ^
1 error


================================================================

Sample: Preferences_5
----------------------------------------------------------------
output:
./Data/java_util_prefs/javaFiles/Preferences_5.java:7: error: unreported exception BackingStoreException; must be caught or declared to be thrown
        String[] keys = preferences.keys();
                                        ^
1 error


================================================================

