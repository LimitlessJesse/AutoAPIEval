Sample: 0 AbstractOwnableSynchronizer
----------------------------------------------------------------
1. void acquire(int arg): This method acquires the lock if it is available, setting the owner to the current thread and setting the lock count to 1.
2. boolean tryAcquire(int arg): This method tries to acquire the lock if it is available, returning true if the lock was acquired successfully.
3. void release(int arg): This method releases the lock, setting the lock count to 0.
4. boolean isHeldExclusively(): This method returns true if the current thread holds the lock.
5. Condition newCondition(): This method returns a new Condition instance for this synchronization object.
================================================================

Sample: 1 AbstractQueuedLongSynchronizer
----------------------------------------------------------------
1. `void acquire(int arg)`: This method acquires in exclusive mode, ignoring interrupts.
2. `void acquireInterruptibly(int arg)`: This method acquires in exclusive mode, aborting if interrupted.
3. `boolean hasQueuedPredecessors()`: This method queries whether any threads have been waiting to acquire longer than the current thread.
4. `boolean hasQueuedThreads()`: This method queries whether any threads are waiting to acquire.
5. `boolean isHeldExclusively()`: This method queries whether the current thread holds the exclusive lock.
================================================================

Sample: 2 AbstractQueuedSynchronizer
----------------------------------------------------------------
1. `boolean tryAcquire(int arg)`: This method tries to acquire the lock if it is available and returns true, or returns false if the lock is not available.
2. `void acquire(int arg)`: This method acquires the lock, blocking until it is available.
3. `int getState()`: This method returns the current state of the synchronizer.
4. `Condition newCondition()`: This method returns a new Condition instance for this synchronizer.
5. `void release(int arg)`: This method releases the lock.
================================================================

Sample: 3 LockSupport
----------------------------------------------------------------
1. void park(): This method disables the current thread for thread scheduling purposes, until being unparked.
2. void parkNanos(long nanos): This method disables the current thread for thread scheduling purposes, up to the specified waiting time.
3. void parkUntil(long deadline): This method disables the current thread for thread scheduling purposes, until a specified deadline.
4. void unpark(Thread thread): This method makes the given thread ready to unpark.
5. void unpark(Object blocker): This method makes any thread whose permit is still unfulfilled to be eligible to unpark.
================================================================

Sample: 4 ReentrantLock
----------------------------------------------------------------
1. `void lock()`: This method acquires the lock.
2. `void unlock()`: This method releases the lock.
3. `boolean isLocked()`: This method returns true if the lock is held by any thread.
4. `int getHoldCount()`: This method returns the hold count of the lock by the current thread. 
5. `boolean isHeldByCurrentThread()`: This method returns true if the current thread holds the lock.
================================================================

Sample: 5 ReentrantReadWriteLock
----------------------------------------------------------------
1. `void readLock()`: This method acquires the read lock.
2. `void writeLock()`: This method acquires the write lock.
3. `void unlock()`: This method releases either the read or write lock.
4. `int getReadLockCount()`: This method returns the number of read locks held on this ReentrantReadWriteLock.
5. `boolean isWriteLocked()`: This method checks if the write lock is currently held by any thread.
================================================================

Sample: 6 ReentrantReadWriteLock.ReadLock
----------------------------------------------------------------
1. `void lock()`: This method acquires the read lock.

2. `void unlock()`: This method releases the read lock.

3. `int getQueueLength()`: This method returns an estimate of the number of threads waiting to acquire the read lock.

4. `boolean tryLock()`: This method acquires the read lock only if it is not held by another thread at the time of invocation.

5. `boolean tryLock(long timeout, TimeUnit unit)`: This method acquires the read lock if it is not held by another thread within the given waiting time.
================================================================

Sample: 7 ReentrantReadWriteLock.WriteLock
----------------------------------------------------------------
1. void lock(): Acquires the write lock.
2. boolean tryLock(): Acquires the lock if it is not held by another thread at the time of invocation.
3. boolean tryLock(long timeout, TimeUnit unit): Acquires the lock if it is not held by another thread within the given waiting time.
4. void lockInterruptibly(): Acquires the lock unless the current thread is interrupted.
5. Condition newCondition(): Returns a new Condition instance that is bound to this WriteLock instance.
================================================================

Sample: 8 StampedLock
----------------------------------------------------------------
1. `long tryOptimisticRead()`: This method returns a stamp that can be used to validate a possibly optimistic read.
   
2. `long tryReadLock()`: This method acquires a read lock if it is available, returning a stamp that is used to release the lock later.
   
3. `long tryWriteLock()`: This method acquires the write lock if it is available, returning a stamp that is used to release the lock later.
   
4. `boolean tryConvertToWriteLock(long stamp)`: This method attempts to transition a read lock to a write lock.
   
5. `long tryConvertToOptimisticRead(long stamp)`: This method attempts to transition a read lock to an optimistic read.
================================================================

