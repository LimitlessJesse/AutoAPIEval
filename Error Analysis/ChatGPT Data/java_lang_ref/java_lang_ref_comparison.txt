Sample: 0 PhantomReference
----------------------------------------------------------------
1. `Object get()`: This method returns the referent object that this phantom reference is monitoring.
2. `boolean isEnqueued()`: This method returns true if the referent object has been enqueued, false otherwise.
3. `void clear()`: This method clears the phantom reference, making it no longer reference any object.
4. `ReferenceQueue<? super T> queue()`: This method returns the reference queue on which this phantom reference was registered.
5. `Reference<T> tryCreate(ReferenceQueue queue, T referent)`: This method creates a new phantom reference with the given reference queue and referent object.
================================================================

Sample: 1 Reference
----------------------------------------------------------------
1. `Object get()`: This method returns the object to which this reference refers, or null if the object has been collected.
2. `void clear()`: This method clears this reference object, making it inactive.
3. `boolean isEnqueued()`: This method returns true if this reference has been enqueued, or false otherwise.
4. `ReferenceQueue<? super T> queue()`: This method returns the queue with which this reference is registered, or null if it is not registered with any queue.
5. `void enqueue()`: This method adds this reference to its reference queue.
================================================================

Sample: 2 ReferenceQueue
----------------------------------------------------------------
1. `Reference<? extends T> poll()`: This method retrieves and removes the next reference object from the queue, or returns null if the queue is empty.
2. `Reference<? extends T> remove()`: This method retrieves and removes the next reference object from the queue, waiting if necessary until one becomes available.
3. `ReferenceQueue()`: Constructor method to create a new reference queue.
4. `void register(Reference<? extends T> r)`: This method registers a reference object with this queue.
5. `boolean remove(Reference<? extends T> r)`: This method removes a particular reference object from this queue.
================================================================

Sample: 3 SoftReference
----------------------------------------------------------------
1. `T get()`: This method retrieves the value from the SoftReference.
2. `void clear()`: This method clears the SoftReference.
3. `boolean isEnqueued()`: This method checks if the referent has been enqueued.
4. `void enqueue()`: This method enqueues the referent.
5. `void finalizeReferent()`: This method ensures that the object is not reachable before making referent null.
================================================================

Sample: 4 WeakReference
----------------------------------------------------------------
1. `T get()`: This method returns the object being referenced by this WeakReference. 
2. `void clear()`: This method clears the reference to the object being referenced by this WeakReference. 
3. `boolean enqueue()`: This method adds this reference to the queue with the given reference object. 
4. `boolean isEnqueued()`: This method returns true if this reference object has been enqueued. 
5. `T rget()`: This method returns the object being referenced by this WeakReference, if it has not been cleared.
================================================================

