Sample: 0 Boolean_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        boolean bool = true;
        Boolean boolObj = Boolean.valueOf(bool);
        System.out.println("Boolean object created: " + boolObj);
    }
}
```
================================================================

Sample: 1 Boolean_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Boolean bool = true;
        boolean value = bool.booleanValue();
        System.out.println("Boolean value: " + value);
    }
}
```
================================================================

Sample: 2 Boolean_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean bool1 = true;
        Boolean bool2 = false;
        
        int comparison1 = bool1.compareTo(bool2);
        System.out.println("Comparison 1: " + comparison1); // Output: 1 (true is greater than false)
        
        int comparison2 = bool2.compareTo(bool1);
        System.out.println("Comparison 2: " + comparison2); // Output: -1 (false is less than true)
        
        int comparison3 = bool1.compareTo(true);
        System.out.println("Comparison 3: " + comparison3); // Output: 0 (true is equal to true)
        
        int comparison4 = bool2.compareTo(false);
        System.out.println("Comparison 4: " + comparison4); // Output: 0 (false is equal to false)
    }
}
```
================================================================

Sample: 3 Boolean_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean bool1 = true;
        Boolean bool2 = false;
        
        System.out.println(bool1.equals(bool2)); // Output: false
        System.out.println(bool1.equals(true)); // Output: true
    }
}
```
================================================================

Sample: 4 Boolean_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Boolean;

public class Main {
    public static void main(String[] args) {
        Boolean bool = true;
        int hashCode = bool.hashCode();
        System.out.println("Hash code of boolean value: " + hashCode);
    }
}
```
================================================================

Sample: 5 Byte_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String s = "10";
        byte b = Byte.parseByte(s);
        System.out.println("Parsed byte value: " + b);
    }
}
```
================================================================

Sample: 6 Byte_3
----------------------------------------------------------------
`int compare(byte x, byte y)`: This method compares two byte values numerically.

Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        byte x = 10;
        byte y = 20;
        
        int result = Byte.compare(x, y);
        System.out.println("Comparison result: " + result);
    }
}
```
================================================================

Sample: 7 Byte_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        byte b = 10;
        String result = Byte.toString(b);
        System.out.println(result);
    }
}
```
================================================================

Sample: 8 Byte_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Byte;

public class Main {
    public static void main(String[] args) {
        byte value = 65;
        int hashCode = Byte.hashCode(value);
        System.out.println("Hash code of " + value + ": " + hashCode);
    }
}
```
================================================================

Sample: 9 Character_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        char ch = 'A';
        boolean result = Character.isLetter(ch);
        System.out.println("Is letter: " + result);
    }
}
```
================================================================

Sample: 10 Character_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        char lowercaseChar = 'a';
        char uppercaseChar = Character.toUpperCase(lowercaseChar);
        System.out.println("Uppercase char: " + uppercaseChar);
    }
}
```
================================================================

Sample: 11 Character_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        char ch = 'A';
        char lowerCaseCh = Character.toLowerCase(ch);
        
        System.out.println("Original char: " + ch);
        System.out.println("Lowercase char: " + lowerCaseCh);
    }
}
```
================================================================

Sample: 12 Character_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        char ch = '7';
        boolean isDigit = Character.isDigit(ch);
        System.out.println("Is '" + ch + "' a digit? " + isDigit);
    }
}
```
================================================================

Sample: 13 Character_Subset_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Character.Subset;

public class Main {
    public static void main(String[] args) {
        Subset subset = new Subset("Test");
        int hashCode = subset.hashCode();
        System.out.println("HashCode: " + hashCode);
    }
}
```
================================================================

Sample: 14 Class_1
----------------------------------------------------------------
`String getName()`: This method returns the name of the class. 

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Class<?> clazz = Main.class;
        String className = clazz.getName();
        System.out.println("Class name: " + className);
    }
}
```
================================================================

Sample: 15 Class_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.reflect.Constructor;

public class Main {
    public static void main(String[] args) {
        Class<?> clazz = String.class;
        Constructor<?>[] constructors = clazz.getConstructors();
        
        for(Constructor<?> constructor : constructors) {
            System.out.println(constructor);
        }
    }
}
```
================================================================

Sample: 16 Class_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.reflect.Field;

public class Main {
    public static void main(String[] args) {
        Class<?> myClass = String.class;
        Field[] fields = myClass.getFields();

        for (Field field : fields) {
            System.out.println(field.getName());
        }
    }
}
```
================================================================

Sample: 17 ClassValue_3
----------------------------------------------------------------
void remove(Class<?> type): This method removes the mapping for the specified class key if present.

Code snippet:
```java
import java.lang.ClassValue;

public class Main {
    public static void main(String[] args) {
        ClassValue<String> classValue = new ClassValue<String>() {
            @Override
            protected String computeValue(Class<?> type) {
                return "Value for " + type.getSimpleName();
            }
        };
        
        Class<?> keyClass = String.class;
        System.out.println("Value for " + keyClass.getSimpleName() + ": " + classValue.get(keyClass));
        
        // Remove the mapping for the specified class key
        classValue.remove(keyClass);
        
        // Try to get the value again after removal
        System.out.println("Value for " + keyClass.getSimpleName() + " after removal: " + classValue.get(keyClass));
    }
}
```
================================================================

Sample: 18 Compiler_4
----------------------------------------------------------------
void enable(): This method is used to enable the compiler to exert control over runtime generation and loading of classes.

Code snippet:
```java
import java.lang.Compiler;

public class Main {
    public static void main(String[] args) {
        Compiler.enable();
        System.out.println("Compiler enabled successfully.");
    }
}
```
================================================================

Sample: 19 Compiler_5
----------------------------------------------------------------
void disable(): This method disables the compiler from being used.

Code snippet:
```java
import java.lang.Compiler;

public class Main {
    public static void main(String[] args) {
        Compiler.disable();
    }
}
```
================================================================

Sample: 20 Double_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        String numberStr = "3.14";
        double numberDouble = Double.parseDouble(numberStr);
        System.out.println("Parsed double value: " + numberDouble);
    }
}
```
================================================================

Sample: 21 Double_2
----------------------------------------------------------------
`int hashCode()`: This method returns a hash code for this Double object.

Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double number = 10.5;
        int hashCode = number.hashCode();
        System.out.println("Hash code for Double value: " + hashCode);
    }
}
```
================================================================

Sample: 22 Double_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Double;

public class Main {
    public static void main(String[] args) {
        Double num1 = 10.5;
        Double num2 = 20.5;
        
        int comparison = num1.compareTo(num2);
        
        if(comparison < 0) {
            System.out.println(num1 + " is less than " + num2);
        } else if(comparison > 0) {
            System.out.println(num1 + " is greater than " + num2);
        } else {
            System.out.println(num1 + " is equal to " + num2);
        }
    }
}
```
================================================================

Sample: 23 Double_4
----------------------------------------------------------------
Code snippet:

```java
public class Main {
    public static void main(String[] args) {
        Double number = 10.5;
        System.out.println("Original value: " + number);
        
        double doubleValue = number.doubleValue();
        System.out.println("Double value: " + doubleValue);
    }
}
```
================================================================

Sample: 24 Double_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Double number = 10.5;
        String numberStr = number.toString();
        System.out.println("Number as String: " + numberStr);
    }
}
```
================================================================

Sample: 25 Enum_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    
    public enum ExampleEnum {
        FIRST, SECOND, THIRD;
    }
    
    public static void main(String[] args) {
        
        ExampleEnum first = ExampleEnum.FIRST;
        ExampleEnum second = ExampleEnum.SECOND;
        
        int result = first.compareTo(second);
        
        if (result < 0) {
            System.out.println(first + " comes before " + second);
        } else if (result == 0) {
            System.out.println(first + " is equal to " + second);
        } else {
            System.out.println(first + " comes after " + second);
        }
    }
}
```
================================================================

Sample: 26 Enum_4
----------------------------------------------------------------
Code snippet:
```java
enum Days {
    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY
}

public class Main {
    public static void main(String[] args) {
        Days day = Days.FRIDAY;
        int ordinalValue = day.ordinal();
        System.out.println("Ordinal value of " + day + " is: " + ordinalValue);
    }
}
```
================================================================

Sample: 27 Enum_5
----------------------------------------------------------------
```
import java.util.ArrayList;

public class Main {
    public enum Day {
        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
    }

    public static void main(String[] args) {
        for (Day day : Day.values()) {
            System.out.println(day.name());
        }
    }
}
```
================================================================

Sample: 28 Float_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        Float f1 = new Float(5.0);
        Float f2 = new Float(10.0);
        
        int compareResult = f1.compareTo(f2);
        
        if(compareResult < 0) {
            System.out.println(f1 + " is less than " + f2);
        } else if(compareResult > 0) {
            System.out.println(f1 + " is greater than " + f2);
        } else {
            System.out.println(f1 + " is equal to " + f2);
        }
    }
}
```
================================================================

Sample: 29 Float_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Float floatNumber = 10.5f;
        int intValue = floatNumber.intValue();
        System.out.println("Integer value of the float number: " + intValue);
    }
}
```
================================================================

Sample: 30 Float_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        String floatStr = "3.14";
        float floatValue = Float.parseFloat(floatStr);
        System.out.println("Float value: " + floatValue);
    }
}
```
================================================================

Sample: 31 Float_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Float;

public class Main {
    public static void main(String[] args) {
        float number = Float.NaN;
        boolean result = Float.isNaN(number);
        System.out.println("Is NaN: " + result);
    }
}
```
================================================================

Sample: 32 Float_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        float num1 = Float.POSITIVE_INFINITY;
        float num2 = Float.NEGATIVE_INFINITY;

        System.out.println(Float.isInfinite(num1)); // true
        System.out.println(Float.isInfinite(num2)); // true
    }
}
```
================================================================

Sample: 33 Integer_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        String number = "123";
        int parsedNumber = Integer.parseInt(number);
        System.out.println("Parsed number: " + parsedNumber);
    }
}
```
================================================================

Sample: 34 Integer_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        int number = 10;
        Integer integerValue = Integer.valueOf(number);
        System.out.println("Integer value: " + integerValue);
    }
}
```
================================================================

Sample: 35 Integer_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        Integer number = 10;
        String numberStr = number.toString();
        System.out.println("String representation of the Integer number: " + numberStr);
    }
}
```
================================================================

Sample: 36 Integer_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Integer;

public class Main {
    public static void main(String[] args) {
        int x = 5;
        int y = 10;
        
        System.out.println(Integer.compare(x, y));
    }
}
```
================================================================

Sample: 37 Integer_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        int num = 10;
        int leadingZeros = Integer.numberOfLeadingZeros(num);
        System.out.println("Number of leading zeros in " + num + ": " + leadingZeros);
    }
}
```
================================================================

Sample: 38 Long_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Long;

public class Main {
    public static void main(String[] args) {
        long a = Long.MAX_VALUE;
        long b = Long.MIN_VALUE;
        
        long max = Long.max(a, b);
        System.out.println("The maximum value between " + a + " and " + b + " is: " + max);
    }
}
```
================================================================

Sample: 39 Long_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Long;

public class Main {
    public static void main(String[] args) {
        long a = 10;
        long b = 5;
        
        long minResult = Long.min(a, b);
        System.out.println("Minimum value between " + a + " and " + b + " is: " + minResult);
    }
}
```
================================================================

Sample: 40 Long_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        long num = 23;
        System.out.println("Original number: " + num);
        long highestOneBit = Long.highestOneBit(num);
        System.out.println("Highest one bit: " + highestOneBit);
    }
}
```
================================================================

Sample: 41 Long_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        long number = 9L;
        long lowestBit = Long.lowestOneBit(number);
        System.out.println("Lowest one bit of " + number + " is: " + lowestBit);
    }
}
```
================================================================

Sample: 42 Math_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Math;

public class Main {
    public static void main(String[] args) {
        double randomNumber = Math.random() * 2;
        System.out.println(randomNumber);
    }
}
```
================================================================

Sample: 43 Math_2
----------------------------------------------------------------
`int abs(int a)`: This method returns the absolute value of the argument.

Code snippet:
```java
import java.lang.Math;

public class Main {
    public static void main(String[] args) {
        int num = -10;
        int absNum = Math.abs(num);
        System.out.println("Absolute value of " + num + " is " + absNum);
    }
}
```
================================================================

Sample: 44 Math_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Math;

public class Main {
    public static void main(String[] args) {
        double num = 16.0;
        double result = Math.sqrt(num);
        System.out.println("Square root of " + num + " is: " + result);
    }
}
```
================================================================

Sample: 45 Math_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Math;

public class Main {
    public static void main(String[] args) {
        double a = 30.0;
        double result = Math.sin(a);
        System.out.println("The sine of " + a + " is: " + result);
    }
}
```
================================================================

Sample: 46 Math_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Math;

public class Main {
    public static void main(String[] args) {
        double result = Math.pow(2.0, 3.0);
        System.out.println(result);
    }
}
```
================================================================

Sample: 47 Number_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        Number num = 10;
        int value = num.intValue();
        System.out.println("Integer value: " + value);
    }
}
```
================================================================

Sample: 48 Number_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Long longValue = new Long(100L);
        long result = longValue.longValue();
        System.out.println("Long value: " + result);
    }
}
```
================================================================

Sample: 49 Number_3
----------------------------------------------------------------
`float floatValue()`: This method returns the value of this Number object as a float.

Code snippet:
```java
import java.lang.Number;

public class Main {
    public static void main(String[] args) {
        Integer myInt = 10;
        Double myDouble = 5.5;
        
        System.out.println("Integer value as float: " + myInt.floatValue());
        System.out.println("Double value as float: " + myDouble.floatValue());
    }
}
```
================================================================

Sample: 50 Number_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.*;

public class Main {
    public static void main(String[] args) {
        Double number = 10.5;
        System.out.println(number.doubleValue());
    }
}
```
================================================================

Sample: 51 Object_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "World";

        // Using equals() method to compare two strings
        boolean result1 = str1.equals(str2);
        System.out.println("Result 1: " + result1); // Output: false

        // Using equals() method to compare two strings
        boolean result2 = Objects.equals(str1, str2);
        System.out.println("Result 2: " + result2); // Output: false
    }
}
```
================================================================

Sample: 52 Object_2
----------------------------------------------------------------
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        int hashCode = obj.hashCode();
        System.out.println("HashCode: " + hashCode);
    }
}
```
================================================================

Sample: 53 Object_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        System.out.println(obj.toString());
    }
}
```
================================================================

Sample: 54 Object_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println(list.getClass());
    }
}
```
================================================================

Sample: 55 Object_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        // Create an object
        Object obj = new Object();
        
        // Notify the object
        synchronized(obj) {
            obj.notify();
        }
    }
}
```
================================================================

Sample: 56 Process_1
----------------------------------------------------------------
`InputStream getInputStream()`: This method retrieves the input stream for this process.

Code snippet:
```java
import java.io.IOException;
import java.io.InputStream;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("ls");
            InputStream inputStream = process.getInputStream();
            int data = 0;
            while ((data = inputStream.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 57 Process_2
----------------------------------------------------------------
Code snippet:
```java
import java.io.IOException;
import java.io.OutputStream;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("echo Hello");
            OutputStream outputStream = process.getOutputStream();
            outputStream.write(Hello.getBytes());
            outputStream.flush();
            outputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 58 Process_3
----------------------------------------------------------------
`int waitFor()`: This method causes the current thread to wait for the process represented by this Process object to terminate.

Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        Process process = null;
        try {
            process = Runtime.getRuntime().exec("notepad.exe");
            int exitValue = process.waitFor();
            System.out.println("Process exited with value: " + exitValue);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 59 Process_4
----------------------------------------------------------------
`int exitValue()`: This method returns the exit value of the subprocess represented by this Process object.

Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("notepad.exe");
            int exitValue = process.waitFor();
            System.out.println("Exit Value: " + exitValue);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 60 Process_5
----------------------------------------------------------------
`void destroy()`: This method destroys the subprocess. 

Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("ls");
            process.destroy();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 61 ProcessBuilder_1
----------------------------------------------------------------
Code snippet:
```java
import java.io.File;
import java.io.IOException;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder pb = new ProcessBuilder("ls");
        File directory = new File("/Users/user/Desktop");
        pb.directory(directory);
        
        try {
            Process process = pb.start();
            int exitCode = process.waitFor();
            System.out.println("Process executed with exit code: " + exitCode);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 62 ProcessBuilder_2
----------------------------------------------------------------
Code snippet:
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("ls", "-l");
        
        try {
            Process process = processBuilder.start();
            
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            
            int exitCode = process.waitFor();
            System.out.println("Exited with error code: " + exitCode);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 63 ProcessBuilder_3
----------------------------------------------------------------
Code snippet:
```java
import java.io.IOException;

public class Main {
    public static void main(String[] args) throws IOException {
        ProcessBuilder processBuilder = new ProcessBuilder("ls", "-la");
        Process process = processBuilder.start();
    }
}
```
================================================================

Sample: 64 ProcessBuilder_5
----------------------------------------------------------------
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("ls");
        
        try {
            Process process = processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT).start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 65 ProcessBuilder_Redirect_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ProcessBuilder.Redirect;

public class Main {
    public static void main(String[] args) {
        // Create a ProcessBuilder object
        ProcessBuilder processBuilder = new ProcessBuilder("ls");

        // Specify the file to redirect the standard output
        processBuilder.redirectOutput(Redirect.from(new File("output.txt")));

        // Start the process
        Process process;
        try {
            process = processBuilder.start();
            process.waitFor();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 66 ProcessBuilder_Redirect_3
----------------------------------------------------------------
`ProcessBuilder.Redirect to(File file)`: This method sets the destination for the standard input, output, or error, from a file.

Code snippet:
```java
import java.io.File;
import java.io.IOException;
import java.lang.ProcessBuilder.Redirect;

public class Main {
    public static void main(String[] args) {
        File outputFile = new File("output.txt");

        ProcessBuilder processBuilder = new ProcessBuilder("echo", "Hello World!");
        processBuilder.redirectOutput(Redirect.to(outputFile));

        try {
            processBuilder.start();
            System.out.println("Output redirected to file: " + outputFile.getAbsolutePath());
        } catch (IOException e) {
            System.out.println("Error redirecting output to file.");
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 67 ProcessBuilder_Redirect_5
----------------------------------------------------------------
Code snippet:
```java
import java.io.File;
import java.io.IOException;
import java.lang.ProcessBuilder;

public class Main {
    public static void main(String[] args) {
        ProcessBuilder processBuilder = new ProcessBuilder("echo", "Hello World");
        File outputFile = new File("output.txt");
        
        // Redirect the output of the process to append to a file
        processBuilder.redirectOutput(ProcessBuilder.Redirect.appendTo(outputFile));
        
        try {
            Process process = processBuilder.start();
            process.waitFor();
            
            // Display the contents of the output file
            System.out.println("Contents of output file:");
            System.out.println(java.nio.file.Files.readString(outputFile.toPath()));
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 68 Runtime_1
----------------------------------------------------------------
Code snippet:
```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec("ls -l");
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 69 Runtime_2
----------------------------------------------------------------
Code snippet:
```java
import java.io.BufferedReader;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) {
        try {
            Process process = Runtime.getRuntime().exec(new String[]{"ls", "-l"});
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 70 Runtime_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        System.out.println("Program will exit now.");
        Runtime.getRuntime().exit(0);
        System.out.println("This message will not be printed as the program has exited.");
    }
}
```
================================================================

Sample: 71 Runtime_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Runtime;

public class Main {
    public static void main(String[] args) {
        long freeMemory = Runtime.getRuntime().freeMemory();
        System.out.println("Free memory (in bytes): " + freeMemory);
    }
}
```
================================================================

Sample: 72 Runtime_5
----------------------------------------------------------------
`void gc()`: This method is used to suggest that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. The implementation of this method is delegated to the `java.lang.Runtime` class.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Runtime rt = Runtime.getRuntime();
        rt.gc();
    }
}
```
================================================================

Sample: 73 SecurityManager_1
----------------------------------------------------------------
Code snippet:
```java
import java.security.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = System.getSecurityManager();
        if (securityManager != null) {
            securityManager.checkAccept("localhost", 8080);
            System.out.println("Access allowed for host 'localhost' at port 8080");
        } else {
            System.out.println("No SecurityManager set");
        }
    }
}
```
================================================================

Sample: 74 SecurityManager_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager sm = new SecurityManager();
        sm.checkListen(8080); // Check if listening on port 8080 is allowed
    }
}
```
================================================================

Sample: 75 SecurityManager_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = System.getSecurityManager();
        if (securityManager != null) {
            securityManager.checkPrintJobAccess();
            System.out.println("Print job access granted.");
        } else {
            System.out.println("No security manager exists.");
        }
    }
}
```
================================================================

Sample: 76 SecurityManager_4
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = System.getSecurityManager();
        if(securityManager != null){
            securityManager.checkSystemClipboardAccess();
            System.out.println("System clipboard access is allowed");
        } else{
            System.out.println("No SecurityManager found");
        }
    }
}
```
================================================================

Sample: 77 SecurityManager_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.SecurityManager;

public class Main {
    public static void main(String[] args) {
        SecurityManager securityManager = new SecurityManager();
        securityManager.checkPropertiesAccess();
    }
}
```
================================================================

Sample: 78 Short_1
----------------------------------------------------------------
`short parseShort(String s)`: This method parses the string argument as a signed decimal short.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String number = "12345";
        short parsedNumber = Short.parseShort(number);
        System.out.println("Parsed Short: " + parsedNumber);
    }
}
```
================================================================

Sample: 79 Short_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short num = 10;
        
        int hashCode = num.hashCode();
        System.out.println("Hash code of " + num + " is: " + hashCode);
    }
}
```
================================================================

Sample: 80 Short_3
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short number = 10;
        String numberString = number.toString();
        System.out.println("String representation of Short: " + numberString);
    }
}
```
================================================================

Sample: 81 Short_4
----------------------------------------------------------------
`int compareTo(Short anotherShort)`: This method compares two Short objects numerically. 

Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short short1 = 10;
        Short short2 = 20;
        
        System.out.println(short1.compareTo(short2)); // Output: -1
    }
}
```
================================================================

Sample: 82 Short_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Short;

public class Main {
    public static void main(String[] args) {
        Short num = 10;
        double result = num.doubleValue();
        System.out.println(result);
    }
}
```
================================================================

Sample: 83 StackTraceElement_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            System.out.println("Method name: " + element.getMethodName() + " Line number: " + element.getLineNumber());
        }
    }
}
```
================================================================

Sample: 84 StackTraceElement_2
----------------------------------------------------------------
Code snippet:
```java
import java.lang.StackTraceElement;

public class Main {
    public static void main(String[] args) {
        // Getting the current method's stack trace elements
        StackTraceElement[] elements = Thread.currentThread().getStackTrace();
        
        // Printing the class name of the method that called this method
        if (elements.length > 2) {
            String className = elements[2].getClassName();
            System.out.println("Class name: " + className);
        } else {
            System.out.println("Unable to retrieve caller class name");
        }
    }
}
```
================================================================

Sample: 85 StackTraceElement_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        StackTraceElement[] elements = Thread.currentThread().getStackTrace();
        
        // Get the method name of the caller
        String methodName = elements[1].getMethodName();
        System.out.println("Method name: " + methodName);
    }
}
```
================================================================

Sample: 86 StackTraceElement_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        
        for (StackTraceElement element : stackTrace) {
            String fileName = element.getFileName();
            System.out.println("File name: " + fileName);
        }
    }
}
```
================================================================

Sample: 87 StackTraceElement_5
----------------------------------------------------------------
`boolean isNativeMethod()`: This method returns true if this element represents a native method. 

Code snippet:
```java
import java.lang.StackTraceElement;

public class Main {
    public static void main(String[] args) {
        StackTraceElement element = new Exception().getStackTrace()[0];
        System.out.println("Is native method: " + element.isNativeMethod());
    }
}
```
================================================================

Sample: 88 String_1
----------------------------------------------------------------
`int length()`: This method returns the length of the string.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello, world!";
        int length = str.length();
        System.out.println("Length of the string: " + length);
    }
}
```
================================================================

Sample: 89 String_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "World";
        String result = str1.concat(str2);
        System.out.println(result);
    }
}
```
================================================================

Sample: 90 String_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello, World!";
        char result = str.charAt(7);
        System.out.println("Character at index 7: " + result);
    }
}
```
================================================================

Sample: 91 String_4
----------------------------------------------------------------
`String substring(int beginIndex)`: This method returns a new string that is a substring of this string. The substring begins at the specified `beginIndex` and extends to the end of the original string.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String str = "Hello, World!";
        String substr = str.substring(7);
        System.out.println(substr); // Output: World!
    }
}
```
================================================================

Sample: 92 String_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        String str = "Hello, World!";
        int index = str.indexOf("World");
        System.out.println("Index of 'World' in the string: " + index);
    }
}
```
================================================================

Sample: 93 StringBuffer_1
----------------------------------------------------------------
`StringBuffer append(String str)`: This method appends the specified string to the end of this StringBuffer.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        sb.append(" World");
        System.out.println(sb.toString());
    }
}
```
================================================================

Sample: 94 StringBuffer_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello");
        System.out.println("Before setCharAt: " + sb); // Before modification
        sb.setCharAt(1, 'a'); // changing the character at index 1 to 'a'
        System.out.println("After setCharAt: " + sb); // After modification
    }
}
```
================================================================

Sample: 95 StringBuffer_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuffer sb = new StringBuffer("Hello World");
        System.out.println("Before deletion: " + sb);

        sb.delete(6, 11);
        System.out.println("After deletion: " + sb);
    }
}
```
================================================================

Sample: 96 StringBuffer_5
----------------------------------------------------------------
`int length()`: This method returns the length (character count) of this `StringBuffer`.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuffer stringBuffer = new StringBuffer("Hello");
        int length = stringBuffer.length();
        System.out.println("Length of the StringBuffer: " + length);
    }
}
```
================================================================

Sample: 97 StringBuilder_1
----------------------------------------------------------------
`String append(String str)`: This method appends the specified string to the end of this StringBuilder.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello ");
        sb.append("World");
        System.out.println(sb.toString());
    }
}
```
================================================================

Sample: 98 StringBuilder_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello World");
        sb.insert(6, "Java ");
        System.out.println(sb.toString()); // Output: Hello Java World
    }
}
```
================================================================

Sample: 99 StringBuilder_3
----------------------------------------------------------------
`delete(int start, int end)`: This method removes the characters in a substring of this `StringBuilder`. The substring begins at the specified `start` index and extends to the character at index `end - 1`.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello World");
        
        System.out.println("Before delete: " + sb);
        
        sb.delete(6, 11);
        
        System.out.println("After delete: " + sb);
    }
}
```
================================================================

Sample: 100 StringBuilder_4
----------------------------------------------------------------
`void reverse()`: This method causes this character sequence to be replaced by the reverse of the sequence.

Code snippet:
```java
import java.lang.StringBuilder;

public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello");
        System.out.println("Before reverse: " + sb);
        
        sb.reverse();
        System.out.println("After reverse: " + sb);
    }
}
```
================================================================

Sample: 101 StringBuilder_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder("Hello, World!");
        int index = sb.indexOf("World");
        System.out.println("Index of 'World' in StringBuilder: " + index);
    }
}
```
================================================================

Sample: 102 System_1
----------------------------------------------------------------
`void exit(int status)`: This method terminates the currently running Java Virtual Machine with the specified status code.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        System.exit(0); // Exits the JVM with status code 0
    }
}
```
================================================================

Sample: 103 System_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        long currentTime = System.currentTimeMillis();
        System.out.println("Current Time in milliseconds: " + currentTime);
    }
}
```
================================================================

Sample: 104 System_3
----------------------------------------------------------------
Code snippet:

```java
import java.util.Properties;

public class Main {
    public static void main(String[] args) {
        Properties properties = System.getProperties();
        properties.forEach((key, value) -> System.out.println(key + " : " + value));
    }
}
```
================================================================

Sample: 105 System_4
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        String javaVersion = System.getProperty("java.version");
        System.out.println("Java Version: " + javaVersion);
    }
}
```
================================================================

Sample: 106 System_5
----------------------------------------------------------------
Code snippet:
```java
import java.io.PrintStream;

public class Main {
    public static void main(String[] args) {
        PrintStream ps = System.out;
        ps.println("Hello, world!");
    }
}
```
================================================================

Sample: 107 Thread_1
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread() {
            public void run() {
                System.out.println("Thread running");
            }
        };

        thread.start();
    }
}
```
================================================================

Sample: 108 Thread_2
----------------------------------------------------------------
`void run()`: This method is used to perform the task for the thread. 

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread myThread = new Thread() {
            public void run() {
                System.out.println("Thread is running");
            }
        };
        
        myThread.start();
    }
}
```
================================================================

Sample: 109 Thread_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        // Sleep for 2 seconds
        try {
            Thread.sleep(2000);
            System.out.println("Slept for 2 seconds");
        } catch (InterruptedException e) {
            System.out.println("Thread sleep interrupted");
        }
    }
}
```
================================================================

Sample: 110 Thread_4
----------------------------------------------------------------
void join(): This method waits for this thread to die.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(() -> {
            System.out.println("Thread is running");
        });
        
        thread.start();
        
        try {
            thread.join();
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
        
        System.out.println("Main thread finished");
    }
}
```
================================================================

Sample: 111 Thread_5
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("Thread running");
            }
        });

        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 112 ThreadGroup_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ThreadGroup;

public class Main {
    public static void main(String[] args) {
        ThreadGroup threadGroup = new ThreadGroup("Group1");
        System.out.println("Active threads count: " + threadGroup.activeCount());
    }
}
```
================================================================

Sample: 113 ThreadGroup_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        ThreadGroup threadGroup = new ThreadGroup("exampleGroup");
        Thread thread = new Thread(threadGroup, new MyRunnable());
        
        // Setting the thread as a daemon
        thread.setDaemon(true);
        
        thread.start();
    }

    static class MyRunnable implements Runnable {
        @Override
        public void run() {
            System.out.println("Thread is running");
        }
    }
}
```
================================================================

Sample: 114 ThreadGroup_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        ThreadGroup parentGroup = new ThreadGroup("ParentGroup");
        ThreadGroup childGroup = new ThreadGroup(parentGroup, "ChildGroup");
        
        Thread thread = new Thread(childGroup, () -> {
            System.out.println("Thread executing in child group");
            ThreadGroup currentGroup = (ThreadGroup) Thread.currentThread().getThreadGroup().getParent();
            System.out.println("Parent group name: " + currentGroup.getName());
        });
        
        thread.start();
    }
}
```
================================================================

Sample: 115 ThreadGroup_5
----------------------------------------------------------------
`void interrupt()`: This method interrupts the current thread group.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        ThreadGroup threadGroup = new ThreadGroup("ExampleGroup");
        threadGroup.interrupt();
    }
}
```
================================================================

Sample: 116 ThreadLocal_1
----------------------------------------------------------------
Code snippet:
```java
import java.lang.ThreadLocal;

public class Main {
    public static void main(String[] args) {
        ThreadLocal<String> threadLocal = new ThreadLocal<>();
        threadLocal.set("Value");
        System.out.println(threadLocal.get());
    }
}
```
================================================================

Sample: 117 ThreadLocal_2
----------------------------------------------------------------
`T get()`: This method returns the value in the current thread's copy of this thread-local variable.

```java
import java.lang.ThreadLocal;

public class Main {
    public static void main(String[] args) {
        ThreadLocal<String> threadLocal = new ThreadLocal<>();
        threadLocal.set("Hello ThreadLocal");
        
        String value = threadLocal.get();
        System.out.println(value);
    }
}
```
================================================================

Sample: 118 ThreadLocal_3
----------------------------------------------------------------
`void remove()`: This method removes the current thread's value for this thread-local variable.

Code snippet:
```java
import java.lang.ThreadLocal;

public class Main {
    public static void main(String[] args) {
        ThreadLocal<String> threadLocal = new ThreadLocal<>();
        threadLocal.set("Value to remove");
        
        System.out.println("Before removal: " + threadLocal.get());
        
        threadLocal.remove();
        
        System.out.println("After removal: " + threadLocal.get());
    }
}
```
================================================================

Sample: 119 Throwable_1
----------------------------------------------------------------
`String getMessage()`: This method returns the detail message string of this Throwable.

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom exception message");
        } catch (NullPointerException e) {
            System.out.println(e.getMessage());
        }
    }
}
```
================================================================

Sample: 120 Throwable_2
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            // Force a NullPointerException by accessing a null object
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 121 Throwable_3
----------------------------------------------------------------
Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom message");
        } catch (NullPointerException e) {
            e.fillInStackTrace();
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 122 Throwable_4
----------------------------------------------------------------
`void setStackTrace(StackTraceElement[] stackTrace)`: This method sets the stack trace elements that will be used by this Throwable. 

Code snippet:
```java
public class Main {
    public static void main(String[] args) {
        try {
            throw new NullPointerException("Custom Exception");
        } catch (NullPointerException e) {
            StackTraceElement[] stackTrace = {
                new StackTraceElement("Class1", "method1", "file1", 101),
                new StackTraceElement("Class2", "method2", "file2", 202)
            };
            e.setStackTrace(stackTrace);
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 123 Throwable_5
----------------------------------------------------------------
Code snippet:
```java
import java.lang.Throwable;

public class Main {
    public static void main(String[] args) {
        try {
            throw new Exception("This is an error message");
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
}
```
================================================================

