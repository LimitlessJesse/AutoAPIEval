Sample: 0 Boolean
----------------------------------------------------------------
1. `Boolean valueOf(boolean b)`: This method returns a Boolean instance representing the specified boolean value.
2. `boolean booleanValue()`: This method returns the value of this Boolean object as a boolean primitive.
3. `int compareTo(Boolean b)`: This method compares this Boolean object to another Boolean object.
4. `boolean equals(Object obj)`: This method compares this Boolean object to the specified object.
5. `int hashCode()`: This method returns a hash code for this Boolean object.
================================================================

Sample: 1 Byte
----------------------------------------------------------------
1. `byte parseByte(String s)`: This method parses the string argument as a signed byte.
2. `byte valueOf(String s)`: This method returns a Byte object holding the value of the specified String.
3. `int compare(byte x, byte y)`: This method compares two byte values numerically.
4. `String toString(byte b)`: This method returns a String object representing the specified byte value.
5. `int hashCode(byte value)`: This method returns a hash code for a byte value.
================================================================

Sample: 2 Character
----------------------------------------------------------------
1. `boolean isLetter(char ch)`: This method determines if the specified character is a letter.
2. `char toUpperCase(char ch)`: This method converts the specified character to uppercase.
3. `char toLowerCase(char ch)`: This method converts the specified character to lowercase.
4. `boolean isDigit(char ch)`: This method determines if the specified character is a digit.
5. `int compareTo(char x, char y)`: This method compares two char values numerically.
================================================================

Sample: 3 Character.Subset
----------------------------------------------------------------
1. `char charAt(int index)`: This method returns the char value at the specified index.
2. `int charCount()`: This method returns the total number of characters in the subset.
3. `boolean contains(char c)`: This method returns true if the subset contains the specified character.
4. `String getChars()`: This method returns a String containing all the characters in the subset.
5. `int hashCode()`: This method returns a hash code value for the subset.
================================================================

Sample: 4 Character.UnicodeBlock
----------------------------------------------------------------
1. `boolean canDisplay(char c)`: This method determines if the specified character can be displayed.
2. `UnicodeBlock of(char c)`: This method returns the UnicodeBlock that the specified character belongs to.
3. `boolean isAlphabetic(char c)`: This method determines if the specified character is alphabetic.
4. `boolean isDigit(char c)`: This method determines if the specified character is a digit.
5. `boolean isLetter(char c)`: This method determines if the specified character is a letter.
================================================================

Sample: 5 Class
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the class.
2. `Class<?> getSuperclass()`: This method returns the superclass of the class.
3. `Object newInstance()`: This method creates a new instance of the class it represents.
4. `Constructor<?>[] getConstructors()`: This method returns an array of Constructor objects that represent the public constructors of the class.
5. `Field[] getFields()`: This method returns an array of Field objects that reflect the public fields of the class.
================================================================

Sample: 6 ClassLoader
----------------------------------------------------------------
1. `java.lang.Class<?> loadClass(String name)`: This method loads the class with the specified binary name.
2. `java.net.URL getResource(String name)`: This method finds the resource with the given name.
3. `java.io.InputStream getResourceAsStream(String name)`: This method locates the resource with the given name.
4. `java.util.Enumeration<java.net.URL> getResources(String name)`: This method finds all resources with the given name.
5. `java.lang.Class<?> findClass(String name)`: This method loads the class with the specified binary name.
================================================================

Sample: 7 ClassValue
----------------------------------------------------------------
1. `Object get(Class<?> type)`: This method returns the value associated with the specified type.
2. `void put(Class<?> type, Object value)`: This method associates the specified value with the specified type.
3. `void remove(Class<?> type)`: This method removes the value associated with the specified type.
4. `void removeEntry(Class<?> type)`: This method removes the value associated with the specified type, without notifying ClassValue's cache.
5. `boolean isPresent(Class<?> type)`: This method checks if a value is associated with the specified type.
================================================================

Sample: 8 Compiler
----------------------------------------------------------------
1. `void compileClass(Class<?> clazz)`: This method compiles the specified class.
2. `CompilationTask getTask(Writer out, JavaFileManager fileManager, DiagnosticListener<? super JavaFileObject> diagnosticListener, Iterable<String> options, Iterable<String> classes, Iterable<? extends JavaFileObject> compilationUnits)`: This method creates a future for a compilation task with the specified parameter values.
3. `Object compile(Iterable<? extends JavaFileObject> compilationUnits)`: This method compiles the Java source in the given file objects.
4. `void enable()`: This method enables the compiler.
5. `void disable()`: This method disables the compiler.
================================================================

Sample: 9 Double
----------------------------------------------------------------
1. `double parseDouble(String s)`: This method returns a new double initialized to the value represented by the specified String.
2. `int hashCode()`: This method returns a hash code for this Double object.
3. `int compareTo(Double anotherDouble)`: This method compares two Double objects numerically.
4. `double doubleValue()`: This method returns the double value of this Double object.
5. `String toString()`: This method returns a String representation of the Double object.
================================================================

Sample: 10 Enum
----------------------------------------------------------------
1. `int compareTo(E o)`: Compares this enum with the specified object for order. (int o)
2. `T valueOf(Class<T> enumType, String name)`: Returns the enum constant of the specified enum type with the specified name. (T enumType, String name)
3. `T[] values()`: Returns an array containing the constants of this enum type, in the order they are declared. ()
4. `int ordinal()`: Returns the ordinal of this enumeration constant. ()
5. `String name()`: Returns the name of this enumeration constant. ()
================================================================

Sample: 11 Float
----------------------------------------------------------------
1. `int compareTo(Float f)`: Compares this Float object to another Float object.
2. `int intValue()`: Returns the value of this Float as an int.
3. `float floatValue()`: Returns the value of this Float as a float.
4. `boolean isNaN()`: Returns true if this Float value is NaN (not a number).
5. `boolean isInfinite()`: Returns true if this Float value is infinitely large in magnitude.
================================================================

Sample: 12 InheritableThreadLocal
----------------------------------------------------------------
1. `void set(T value)`: This method sets the current value for the current thread.
2. `T get()`: This method returns the current value for the current thread.
3. `void remove()`: This method removes the current value for the current thread.
4. `protected T initialValue()`: This method returns the initial value for this InheritableThreadLocal variable.
5. `void childValue(T parentValue)`: This method returns the child's value based on the parent's value.
================================================================

Sample: 13 Integer
----------------------------------------------------------------
1. `int parseInt(String s)`: This method parses the string argument as a signed decimal integer.
2. `Integer valueOf(int i)`: This method returns an Integer object holding the specified int value.
3. `String toString()`: This method returns a String object representing the specified Integer value.
4. `int compare(int x, int y)`: This method compares two int values numerically.
5. `int numberOfLeadingZeros(int i)`: This method returns the number of leading zeros in the binary representation of the specified int value.
================================================================

Sample: 14 Long
----------------------------------------------------------------
1. `static long compare(long x, long y)`: This method compares two `long` values numerically.
2. `static long max(long a, long b)`: This method returns the greater of two `long` values.
3. `static long min(long a, long b)`: This method returns the smaller of two `long` values.
4. `static long highestOneBit(long i)`: This method returns a long value with at most a single one-bit, in the position of the highest-order ("leftmost") one-bit in the specified long value.
5. `static long lowestOneBit(long i)`: This method returns a long value with at most a single one-bit, in the position of the lowest-order ("rightmost") one-bit in the specified long value.
================================================================

Sample: 15 Math
----------------------------------------------------------------
1. `double random()`: This method returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0.
2. `int abs(int a)`: This method returns the absolute value of an int value.
3. `double sqrt(double a)`: This method returns the correctly rounded positive square root of a double value.
4. `double sin(double a)`: This method returns the trigonometric sine of an angle.
5. `double pow(double a, double b)`: This method returns the value of the first argument raised to the power of the second argument.
================================================================

Sample: 16 Number
----------------------------------------------------------------
1. `int intValue()`: This method returns the value of this Number as an int.
2. `long longValue()`: This method returns the value of this Number as a long.
3. `float floatValue()`: This method returns the value of this Number as a float.
4. `double doubleValue()`: This method returns the value of this Number as a double.
================================================================

Sample: 17 Object
----------------------------------------------------------------
1. `boolean equals(Object obj)`: This method compares this object against the specified object.
2. `int hashCode()`: This method returns a hash code value for the object.
3. `String toString()`: This method returns a string representation of the object.
4. `Class<?> getClass()`: This method returns the runtime class of this Object.
5. `void notify()`: This method wakes up a single thread that is waiting on this object's monitor.
================================================================

Sample: 18 Package
----------------------------------------------------------------
1. String getImplementationTitle()
2. String getImplementationVersion()
3. String getName()
4. String getSpecificationTitle()
5. String getSpecificationVersion()
================================================================

Sample: 19 Process
----------------------------------------------------------------
1. `InputStream getInputStream()`: This method gets the input stream of the process.
2. `OutputStream getOutputStream()`: This method gets the output stream of the process.
3. `int waitFor()`: This method causes the current thread to wait, if necessary, for the process to complete.
4. `int exitValue()`: This method returns the exit value for the subprocess.
5. `void destroy()`: This method destroys the process.
================================================================

Sample: 20 ProcessBuilder
----------------------------------------------------------------
1. `ProcessBuilder directory(File directory)`: This method sets the working directory of the process.
2. `ProcessBuilder command(String... command)`: This method sets the command and arguments for the process to be executed.
3. `Process start() throws IOException`: This method starts a new process using the attributes of this ProcessBuilder.
4. `Map<String, String> environment()`: This method returns a copy of the environment of this ProcessBuilder.
5. `ProcessBuilder redirectOutput(ProcessBuilder.Redirect destination)`: This method sets the destination for the standard output of the process.
================================================================

Sample: 21 ProcessBuilder.Redirect
----------------------------------------------------------------
1. `ProcessBuilder.Redirect from(File file)`: Returns a redirect to read from the specified file.
2. `static ProcessBuilder.Redirect inherit()`: Returns a special object to inherit the source or destination of the current process.
3. `ProcessBuilder.Redirect to(File file)`: Returns a redirect to write to the specified file.
4. `static ProcessBuilder.Redirect discart()`: Returns a special object to discard the output from the process.
5. `ProcessBuilder.Redirect appendTo(File file)`: Returns a redirect to append to the specified file.
================================================================

Sample: 22 Runtime
----------------------------------------------------------------
1. `Process exec(String command)`: This method executes the specified string command in a separate process.
2. `Process exec(String[] cmdarray)`: This method executes the specified command and arguments in a separate process.
3. `void exit(int status)`: This method terminates the currently running virtual machine with the given status code.
4. `long freeMemory()`: This method returns the amount of free memory in the Java Virtual Machine.
5. `void gc()`: This method runs the garbage collector.
================================================================

Sample: 23 RuntimePermission
----------------------------------------------------------------
1. `boolean implies(java.security.Permission permission)`: This method checks if a permission implies the specified permission.
2. `java.security.PermissionCollection newPermissionCollection()`: This method returns a new PermissionCollection object for storing permissions.
3. `void checkPermission(java.security.Permission perm)`: This method checks if a permission object implies the permissions in the permission object passed.
4. `java.security.PermissionCollection getPermissions()`: This method returns the current set of permissions granted.
5. `void setSecurityManager(java.lang.SecurityManager sm)`: This method sets the SecurityManager for this RuntimePermission.
================================================================

Sample: 24 SecurityManager
----------------------------------------------------------------
1. `void checkAccept(String host, int port)`: This method checks if a connection to the specified host/port is allowed.
2. `void checkListen(int port)`: This method checks if the operation to listen on the specified port is allowed.
3. `void checkPrintJobAccess()`: This method checks if the current thread is allowed to initiate a print job request.
4. `void checkSystemClipboardAccess()`: This method checks if the current thread is allowed to access the system clipboard.
5. `void checkPropertiesAccess()`: This method checks if the current thread is allowed to access system properties.
================================================================

Sample: 25 Short
----------------------------------------------------------------
1. `short parseShort(String s)`: This method parses the string argument as a signed decimal short.
2. `int hashCode()` : This method returns a hash code for this Short object.
3. `String toString()`: This method returns a String object representing this Short's value.
4. `int compareTo(Short anotherShort)`: This method compares two Short objects numerically.
5. `double doubleValue()`: This method returns the numeric value represented by this object after conversion to type double.
================================================================

Sample: 26 StackTraceElement
----------------------------------------------------------------
1. `int getLineNumber()`: This method returns the line number in the source file where the class was actually called.
2. `String getClassName()`: This method returns the fully-qualified name of the class where the stack trace element was created.
3. `String getMethodName()`: This method returns the name of the method that generated the stack trace element.
4. `String getFileName()`: This method returns the name of the source file (if available) where the class was actually called.
5. `boolean isNativeMethod()`: This method returns true if the method is a native method.
================================================================

Sample: 27 StrictMath
----------------------------------------------------------------
1. double acos(double a): Returns the arc cosine of a value.
2. double asin(double a): Returns the arc sine of a value.
3. double exp(double a): Returns Euler's number e raised to the power of a double value.
4. double log(double a): Returns the natural logarithm (base e) of a double value.
5. double tan(double a): Returns the tangent of an angle.
================================================================

Sample: 28 String
----------------------------------------------------------------
1. `int length()`: This method returns the length of the string.
2. `String concat(String str)`: This method concatenates the specified string to the end of this string.
3. `char charAt(int index)`: This method returns the character at the specified index in the string.
4. `String substring(int beginIndex)`: This method returns a new string that is a substring of this string starting from the specified index.
5. `int indexOf(String str)`: This method returns the index within this string of the first occurrence of the specified substring.
================================================================

Sample: 29 StringBuffer
----------------------------------------------------------------
1. `StringBuffer append(String str)`: This method appends the specified string to the end of the current StringBuffer object.
2. `void setCharAt(int index, char ch)`: This method sets the character at the specified index to the specified character.
3. `StringBuffer delete(int start, int end)`: This method deletes the characters between the specified start and end indices.
4. `void replace(int start, int end, String str)`: This method replaces the characters between the specified start and end indices with the specified string.
5. `int length()`: This method returns the length of the current StringBuffer object.
================================================================

Sample: 30 StringBuilder
----------------------------------------------------------------
1. `StringBuilder append(String str)`: This method appends the specified string to the end of the StringBuilder.
   
2. `StringBuilder insert(int offset, String str)`: This method inserts the specified string at the specified position in the StringBuilder.

3. `StringBuilder delete(int start, int end)`: This method deletes the substring from the specified start index to the specified end index in the StringBuilder.

4. `StringBuilder reverse()`: This method reverses the characters in the StringBuilder.

5. `int indexOf(String str)`: This method returns the index within the StringBuilder of the first occurrence of the specified string.
================================================================

Sample: 31 System
----------------------------------------------------------------
1. `void exit(int status)`: This method terminates the currently running Java virtual machine with the specified status code.
2. `long currentTimeMillis()`: This method returns the current time in milliseconds.
3. `Properties getProperties()`: This method returns a Properties object containing all the system properties.
4. `String getProperty(String key)`: This method gets the system property indicated by the specified key.
5. `void setOut(PrintStream out)`: This method reassigns the "standard" output stream.
================================================================

Sample: 32 Thread
----------------------------------------------------------------
1. `void start()`: This method starts the thread, causing it to begin execution.
2. `void run()`: This method contains the code that will be executed by the thread.
3. `void sleep(long millis)`: This method causes the currently executing thread to sleep for the specified number of milliseconds.
4. `void join()`: This method waits for this thread to die.
5. `void interrupt()`: This method interrupts this thread.
================================================================

Sample: 33 ThreadGroup
----------------------------------------------------------------
1. `int activeCount()`: This method returns the number of active threads in this thread group.
2. `void setDaemon(boolean daemon)`: This method sets the daemon status of this thread group.
3. `ThreadGroup getParent()`: This method returns the parent of this thread group.
4. `Thread[] getThreads()`: This method returns an array of all threads that are part of this thread group.
5. `void interrupt()`: This method interrupts all threads in this thread group.
================================================================

Sample: 34 ThreadLocal
----------------------------------------------------------------
1. `void set(T value)`: This method sets the current thread's copy of the variable to the specified value.
2. `T get()`: This method returns the current thread's value of the variable.
3. `void remove()`: This method removes the current thread's value of the variable.
4. `boolean isPresent()`: This method returns true if the current thread has a value for the variable, false otherwise.
5. `void initialValue()`: This method returns the initial value for this thread-local variable.
================================================================

Sample: 35 Throwable
----------------------------------------------------------------
1. `String getMessage()`: This method returns the detail message string of this throwable.
2. `void printStackTrace()`: This method prints this throwable and its backtrace to the standard error stream.
3. `Throwable fillInStackTrace()`: This method fills in the execution stack trace.
4. `void setStackTrace(StackTraceElement[] stackTrace)`: This method sets the stack trace elements.
5. `String toString()`: This method returns a short description of this throwable.
================================================================

Sample: 36 Void
----------------------------------------------------------------
1.  `void wait()`: This method causes the current thread to wait until another thread invokes the `notify()` method or the `notifyAll()` method for this object.
2. `void notify()`: This method wakes up a single thread that is waiting on this object's monitor.
3. `void notifyAll()`: This method wakes up all threads that are waiting on this object's monitor.
4. `void finalize()`: This method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
5. `void clone()`: This method creates and returns a copy of this object.
================================================================

