Sample: 0 AtomicBoolean
----------------------------------------------------------------
1. `void set(boolean newValue)`: This method sets the boolean value to the given new value.
2. `boolean get()`: This method gets the current value of the boolean.
3. `boolean compareAndSet(boolean expect, boolean update)`: This method atomically sets the value to the given update value if the current value equals the expected value.
4. `boolean getAndSet(boolean newValue)`: This method atomically sets the value to the given new value and returns the old value.
5. `String toString()`: This method returns a string representation of the boolean value.
================================================================

Sample: 1 AtomicInteger
----------------------------------------------------------------
1. `int get()`: This method gets the current value of the AtomicInteger.
2. `void set(int newValue)`: This method sets the specified value as the new value of the AtomicInteger.
3. `int incrementAndGet()`: This method increments the current value of the AtomicInteger by 1 and returns the updated value.
4. `int decrementAndGet()`: This method decrements the current value of the AtomicInteger by 1 and returns the updated value.
5. `int getAndIncrement()`: This method gets the current value of the AtomicInteger and then increments it by 1.
================================================================

Sample: 2 AtomicIntegerArray
----------------------------------------------------------------
1. int get(int i)
2. void set(int i, int newValue)
3. int length()
4. int addAndGet(int i, int delta)
5. boolean compareAndSet(int i, int expect, int update)
================================================================

Sample: 3 AtomicIntegerFieldUpdater
----------------------------------------------------------------
1. int getAndIncrement(T obj): Return type is int, no parameters
2. int getAndAdd(T obj, int delta): Return type is int, parameters are (T obj, int delta)
3. int getAndSet(T obj, int newValue): Return type is int, parameters are (T obj, int newValue)
4. int incrementAndGet(T obj): Return type is int, no parameters
5. boolean compareAndSet(T obj, int expect, int update): Return type is boolean, parameters are (T obj, int expect, int update)
================================================================

Sample: 4 AtomicLong
----------------------------------------------------------------
1. `long get()`: Returns the current value.
2. `void set(long newValue)`: Sets the value.
3. `long incrementAndGet()`: Atomically increments by one the current value.
4. `long decrementAndGet()`: Atomically decrements by one the current value.
5. `long addAndGet(long delta)`: Atomically adds the specified value to the current value.
================================================================

Sample: 5 AtomicLongArray
----------------------------------------------------------------
1. int length(): This method returns the length of the array.
2. long get(int index): This method returns the value at the specified index.
3. void set(int index, long newValue): This method sets the value at the specified index to the given new value.
4. int incrementAndGet(int index): This method atomically increments by one the element at index and returns the updated value.
5. void lazySet(int index, long newValue): This method eventually sets the element at the specified index to the given value.
================================================================

Sample: 6 AtomicLongFieldUpdater
----------------------------------------------------------------
1. `void set(Object obj, long newValue)`: This method sets the field of the given object to the given value.
2. `long get(Object obj)`: This method gets the current value of the field in the given object.
3. `long getAndSet(Object obj, long newValue)`: This method atomically sets the field in the given object to the given value and returns the old value.
4. `boolean compareAndSet(Object obj, long expect, long update)`: This method atomically sets the field in the given object to the given update value if the current value is equal to the expected value.
5. `long incrementAndGet(Object obj)`: This method atomically increments the current value of the field in the given object and returns the updated value.
================================================================

Sample: 7 AtomicMarkableReference
----------------------------------------------------------------
1. `boolean attemptMark(Object expectedReference, boolean newMark)`: This method atomically sets the value of the reference and mark to the given update values if the current reference is equal to the expected reference and the current mark is equal to the expected mark. Returns true if successful, false otherwise.

2. `boolean isMarked()`: This method returns the current value of the mark.

3. `boolean compareAndSet(Object expectedReference, Object newReference, boolean expectedMark, boolean newMark)`: This method atomically sets the values of both the reference and mark to the given update values if the current reference is equal to the expected reference and the current mark is equal to the expected mark. Returns true if successful, false otherwise.

4. `Pair<V, Boolean> get()`: This method returns the current value of the reference and mark as a Pair object.

5. `V getReference()`: This method returns the current value of the reference only.
================================================================

Sample: 8 AtomicReference
----------------------------------------------------------------
1. `void set(V newValue)`: Sets the value of this AtomicReference to the given updated value.
2. `V get()`: Gets the current value held by this AtomicReference.
3. `boolean compareAndSet(V expect, V update)`: Atomically sets the value to the given updated value if the current value equals the expected value.
4. `V getAndSet(V newValue)`: Atomically sets the value to the given updated value and returns the old value.
5. `boolean weakCompareAndSet(V expect, V update)`: Unconditionally sets to the given value.
================================================================

Sample: 9 AtomicReferenceArray
----------------------------------------------------------------
1. `void set(int index, E newValue)`: This method sets the element at the specified index to the new value.
2. `boolean compareAndSet(int index, E expect, E update)`: This method atomically sets the value of the element at the specified index to the given update value if the current value equals the expected value.
3. `E get(int index)`: This method returns the current value of the element at the specified index.
4. `int length()`: This method returns the length of the array.
5. `int hashCode()`: This method returns the hash code value for the array.
================================================================

Sample: 10 AtomicReferenceFieldUpdater
----------------------------------------------------------------
1. `void set(Object obj, V newValue)`: This method sets the field of the given object to the new value.
2. `V get(Object obj)`: This method retrieves the current value of the field of the given object.
3. `boolean compareAndSet(Object obj, V expect, V update)`: This method atomically sets the field of the given object to the new value if it currently holds the expected value.
4. `V getAndSet(Object obj, V newValue)`: This method atomically sets the field of the given object to the new value and returns the previous value.
5. `boolean weakCompareAndSet(Object obj, V expect, V update)`: This method performs a weak CAS operation on the field of the given object, setting it to the update value if it currently holds the expected value.
================================================================

Sample: 11 AtomicStampedReference
----------------------------------------------------------------
1. `void set(V reference, int stamp)`: This method sets the reference and stamp to the given values.
2. `V getReference()`: This method returns the current reference.
3. `int getStamp()`: This method returns the current stamp.
4. `boolean weakCompareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)`: This method atomically sets the value of both the reference and the stamp to the given update values if the current reference is equal to the expected reference and the current stamp is equal to the expected stamp.
5. `boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)`: This method atomically sets the value of both the reference and the stamp to the given update values if the current reference is equal to the expected reference and the current stamp is equal to the expected stamp.
================================================================

Sample: 12 DoubleAccumulator
----------------------------------------------------------------
1. `double get()`: This method returns the current value of the accumulator.
2. `void reset()`: This method resets the value of the accumulator to the identity value.
3. `double accumulate(double x)`: This method adds the given value to the accumulator using a summation function.
4. `void accumulate(double x, DoubleBinaryOperator accumulatorFunction)`: This method applies the given accumulator function to the current value and the given value. 
5. `DoubleAccumulator getThenReset()`: This method atomically sets the value to the identity value and returns the previous value.
================================================================

Sample: 13 DoubleAdder
----------------------------------------------------------------
1. double sum(): This method returns the current sum of the DoubleAdder.
2. void reset(): This method resets the sum to 0.
3. void add(double x): This method adds the given value to the current sum.
4. double sumThenReset(): This method returns the current sum and resets it to 0.
5. void increment(): This method increments the current sum by 1.
================================================================

Sample: 14 LongAccumulator
----------------------------------------------------------------
1. `void accumulate(long x)`: This method adds the given value to the current value of the accumulator.
2. `long get()`: This method returns the current value of the accumulator.
3. `void reset()`: This method resets the accumulated value to the identity value.
4. `long getThenReset()`: This method returns the current value of the accumulator and then resets it to the identity value.
5. `void accumulateThenReset(long x)`: This method adds the given value to the current value of the accumulator and then resets it to the identity value.
================================================================

Sample: 15 LongAdder
----------------------------------------------------------------
1. `void add(long x)`: Adds the given value to the current sum.
2. `void increment()`: Increments the sum by one.
3. `void decrement()`: Decrements the sum by one.
4. `long sum()`: Returns the current sum value.
5. `void reset()`: Resets the sum to zero.
================================================================

