Sample: 0 Adler32
----------------------------------------------------------------
1. long getValue(): This method returns the current Adler-32 checksum value.
2. void reset(): This method resets the Adler-32 checksum to its initial value.
3. void update(byte[] buf): This method updates the checksum with the bytes from the specified byte array.
4. void update(byte[] buf, int off, int len): This method updates the checksum with the bytes from the specified byte array starting at the specified offset and using the specified length.
5. void update(int b): This method updates the checksum with the specified byte.
================================================================

Sample: 1 CheckedInputStream
----------------------------------------------------------------
1. `int read()`: This method reads a byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data into an array of bytes from the input stream.
3. `void reset()`: This method resets the checksum to its initial value.
4. `Checksum getChecksum()`: This method returns the checksum value.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 2 CheckedOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
3. `void write(byte[] b)`: This method writes all the bytes from the specified byte array to the output stream.
4. `void close()`: This method closes the output stream.
5. `void flush()`: This method flushes the output stream.
================================================================

Sample: 3 CRC32
----------------------------------------------------------------
1. `void update(byte[] data)`: This method updates the CRC-32 checksum with the specified byte array data.
2. `long getValue()`: This method returns the current CRC-32 checksum value.
3. `void reset()`: This method resets the CRC-32 checksum to its initial value.
4. `void update(int b)`: This method updates the CRC-32 checksum with the specified byte value.
5. `void update(byte[] data, int off, int len)`: This method updates the CRC-32 checksum with the specified byte array data starting at the specified offset and length.
================================================================

Sample: 4 Deflater
----------------------------------------------------------------
1. `int deflate(byte[] input, int offset, int length)`: This method compresses the data in the input byte array and stores the result in the internal output buffer.
2. `void finish()`: This method indicates that compression should finish with the current contents of the input buffer.
3. `int getAdler()`: This method returns the Adler-32 value of the uncompressed data.
4. `void reset()`: This method resets the deflater to its initial state.
5. `void setLevel(int level)`: This method sets the compression level to the specified value.
================================================================

Sample: 5 DeflaterInputStream
----------------------------------------------------------------
1. `int read(byte[] buf, int off, int len)`: This method reads compressed data into a byte array.
2. `int available()`: This method returns an estimate of the number of bytes that can be read from the input stream without blocking.
3. `boolean markSupported()`: This method tests if this input stream supports the `mark` and `reset` methods.
4. `void close()`: This method closes the input stream.
5. `long skip(long n)`: This method skips over and discards `n` bytes of data from the input stream.
================================================================

Sample: 6 DeflaterOutputStream
----------------------------------------------------------------
1. `void write(byte[] b)`: This method writes an array of bytes to the output stream.
2. `void write(byte[] b, int off, int len)`: This method writes a subarray of bytes to the output stream.
3. `void flush()`: This method flushes the compressed output stream.
4. `void finish()`: This method finishes writing compressed data to the output stream without closing it.
5. `void close()`: This method closes the output stream.
================================================================

Sample: 7 GZIPInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] buf, int off, int len)`: This method reads up to `len` bytes of data from the input stream into an array of bytes, starting at the specified offset `off`.
3. `void close()`: This method closes the input stream.
4. `void finish()`: This method finishes writing compressed data to the output stream without closing it.
5. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
================================================================

Sample: 8 GZIPOutputStream
----------------------------------------------------------------
1. `void finish()`: This method finishes writing the compressed data without closing the underlying stream.
2. `int available()`: This method returns the number of bytes that can be read without blocking.
3. `void write(byte[] b, int off, int len)`: This method writes an array of bytes to the compressed output stream.
4. `void setLevel(int level)`: This method sets the compression level for subsequent entries which are written into the output stream.
5. `void setComment(String comment)`: This method sets the optional file comment string for the entry.
================================================================

Sample: 9 Inflater
----------------------------------------------------------------
1. `void setInput(byte[] b, int off, int len)`: This method sets input data for decompression.
2. `boolean needsInput()`: This method returns true if no more input data is needed.
3. `int totalIn()`: This method returns the total number of input bytes processed so far.
4. `boolean finished()`: This method returns true if the end of the compressed data stream has been reached.
5. `int inflate(byte[] b, int off, int len)`: This method decompresses data into the specified buffer.
================================================================

Sample: 10 InflaterInputStream
----------------------------------------------------------------
1. `int read(byte[] b)`: This method reads compressed data into an array of bytes.
2. `int read(byte[] b, int off, int len)`: This method reads compressed data into a portion of an array of bytes.
3. `int available()`: This method returns an estimate of the number of bytes that can be read from the input stream without blocking.
4. `boolean markSupported()`: This method returns true if the input stream supports the mark and reset methods.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 11 InflaterOutputStream
----------------------------------------------------------------
1. `void write(byte[] b, int off, int len)`: This method writes compressed data to the output stream.
2. `void finish()`: This method finishes writing compressed data to the output stream.
3. `void flush()`: This method flushes any pending output to the underlying stream.
4. `int getDeflateLevel()`: This method returns the compression level used by the Deflater.
5. `void setDictionary(byte[] b)`: This method sets the dictionary to be used in the next call to deflate().
================================================================

Sample: 12 ZipEntry
----------------------------------------------------------------
1. String getName(): Returns the name of the entry.
2. long getTime(): Returns the last modified time of the entry.
3. long getSize(): Returns the uncompressed size of the entry data.
4. boolean isDirectory(): Returns a boolean indicating if the entry is a directory.
5. int getMethod(): Returns the compression method of the entry.
================================================================

Sample: 13 ZipFile
----------------------------------------------------------------
1. `ZipEntry getEntry(String name)`: This method returns the ZipEntry for the specified entry name.
2. `Enumeration<? extends ZipEntry> entries()`: This method returns an enumeration of all the ZipEntries in the ZipFile.
3. `void close()`: This method closes the ZIP file.
4. `InputStream getInputStream(ZipEntry entry)`: This method returns an InputStream for reading the contents of the specified ZipEntry.
5. `int size()`: This method returns the number of entries in the ZIP file.
================================================================

Sample: 14 ZipInputStream
----------------------------------------------------------------
1. `ZipEntry getNextEntry()`: This method retrieves the next entry from the ZIP archive.
2. `void closeEntry()`: This method closes the current ZIP entry and positions the stream for reading the next entry.
3. `int read(byte[] b, int off, int len)`: This method reads data from the current ZIP entry into the specified byte array.
4. `ZipEntry getNextEntry()`: This method retrieves the next entry from the ZIP archive.
5. `int available()`: This method returns the number of bytes that can be read from the current ZIP entry.
================================================================

Sample: 15 ZipOutputStream
----------------------------------------------------------------
1. `void putNextEntry(ZipEntry e)`: This method puts the next ZIP file entry and positions the stream for writing the data for this entry.
2. `void closeEntry()`: This method closes the current ZIP entry and positions the stream for writing the next entry.
3. `void setComment(String comment)`: This method sets the comment for the ZIP file being written.
4. `void setMethod(int method)`: This method sets the compression method for entries subsequently added to the ZIP file.
5. `void finish()`: This method finishes writing the contents of the ZIP output stream without closing the underlying stream.
================================================================

