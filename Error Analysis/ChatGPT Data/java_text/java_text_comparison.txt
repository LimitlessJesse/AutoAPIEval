Sample: 0 Annotation
----------------------------------------------------------------
1. `boolean hasSomeAnnotation()`: This method checks if the element has some annotation.
2. `Annotation getAnnotation(Class<?> annotationClass)`: This method returns the annotation associated with the specified annotation class.
3. `Object getValue()`: This method returns the value of the annotation.
4. `int hashCode()`: This method returns the hash code of the annotation.
5. `String toString()`: This method returns a string representation of the annotation.
================================================================

Sample: 1 AttributedCharacterIterator.Attribute
----------------------------------------------------------------
1. `Attribute` - This method returns the attribute key.

   Return type: Object

2. `equals(Object obj)` - This method compares the specified object with this attribute.

   Return type: boolean

3. `hashCode()` - This method returns the hash code value for this attribute.

   Return type: int

4. `getName()` - This method returns the name of this attribute.

   Return type: String

5. `toString()` - This method returns a string representation of this attribute.

   Return type: String
================================================================

Sample: 2 AttributedString
----------------------------------------------------------------
1. `void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value)`: This method adds an attribute to the entire text of the AttributedString.
2. `String getString()`: This method returns the string content of the AttributedString.
3. `void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value, int beginIndex, int endIndex)`: This method adds an attribute to the specified range of text in the AttributedString.
4. `AttributedCharacterIterator getIterator()`: This method returns an iterator that gives access to the complete set of attributes for each character in the AttributedString.
5. `void addAttributes(Map<? extends AttributedCharacterIterator.Attribute, ?> attributes, int beginIndex, int endIndex)`: This method adds a set of attributes to the specified range of text in the AttributedString.
================================================================

Sample: 3 Bidi
----------------------------------------------------------------
1. `int getRunCount()`: Returns the number of level runs.
2. `int getRunLevel(int run)`: Returns the level of the specified run.
3. `int getRunLimit(int run)`: Returns the limit (the limit of the run) of the specified run.
4. `String writeReordered(int options)`: Returns the reordered text that conforms to the logical order.
5. `boolean isMixed()` : Returns true if the text is considered to have "mixed" directional segments.
================================================================

Sample: 4 BreakIterator
----------------------------------------------------------------
1. `int first()`: This method returns the first boundary.
2. `int last()`: This method returns the last boundary.
3. `int next(int n)`: This method returns the nth boundary after the current boundary.
4. `int previous()`: This method returns the previous boundary.
5. `int following(int offset)`: This method returns the boundary that follows the specified offset.
================================================================

Sample: 5 ChoiceFormat
----------------------------------------------------------------
1. `int format(double number)`: This method formats a double value as a string based on the ranges and corresponding string values defined in the ChoiceFormat.
2. `String toPattern()`: This method returns the pattern string representing the ChoiceFormat.
3. `void applyPattern(String newPattern)`: This method sets the pattern string for the ChoiceFormat to the specified new pattern.
4. `Object[] getFormats()`: This method returns the array of ranges and string values used in the ChoiceFormat.
5. `double[] getLimits()`: This method returns the array of limits used in the ChoiceFormat.
================================================================

Sample: 6 CollationElementIterator
----------------------------------------------------------------
1. `int getMaxExpansion(int order)`: Returns the maximum number of characters that may follow the specified collation order.
2. `int getOffset()`: Returns the offset of the current collation element in the source string.
3. `int next()`: Returns the next collation element in the iteration.
4. `int reset()`: Resets the cursor to the beginning of the string.
5. `RuleBasedCollator getCollator()`: Returns the RuleBasedCollator used by this CollationElementIterator.
================================================================

Sample: 7 CollationKey
----------------------------------------------------------------
1. `byte[] toByteArray()`: This method returns a byte array representation of the CollationKey.
2. `int compareTo(CollationKey target)`: This method compares this CollationKey to another CollationKey and returns an integer value indicating their relative order.
3. `String getSourceString()`: This method returns the original string used to create the CollationKey.
4. `int hashCode()`: This method returns the hash code value for the CollationKey.
5. `String toString()`: This method returns a string representation of the CollationKey.
================================================================

Sample: 8 Collator
----------------------------------------------------------------
1. `int compare(String source, String target)`: This method compares two strings based on the collation rules defined in this Collator.
2. `Collator getInstance(Locale locale)`: This method gets a Collator for the specified locale.
3. `int hashCode()`: This method returns the hash code value for this Collator.
4. `Object clone()`: This method creates and returns a copy of this Collator.
5. `int getStrength()`: This method gets the current strength for this Collator.
================================================================

Sample: 9 DateFormat
----------------------------------------------------------------
1. `String format(Date date)`: This method formats a Date object into a date/time string.
2. `Date parse(String source)`: This method parses a date/time string to produce a Date object.
3. `DateFormat getTimeInstance(int style)`: This method returns a date/time formatter with the given formatting style for the default locale.
4. `DateFormat getDateInstance(int style)`: This method returns a date formatter with the given formatting style for the default locale.
5. `void setTimeZone(TimeZone timezone)`: This method sets the time zone for the date/time format.
================================================================

Sample: 10 DateFormat.Field
----------------------------------------------------------------
1. `String getDisplayName(int style, Locale locale)`: This method returns the string representation of this field for the specified style and locale.
2. `int getCalendarField()`: This method returns the calendar field constant for this field.
3. `String toString()`: This method returns a string representation of this field.
4. `static DateFormat.Field ofCalendarField(int calendarField)`: This method returns the field constant of DateFormat for a given calendar field constant.
5. `boolean equals(Object obj)`: This method compares this field to the specified object.
================================================================

Sample: 11 DateFormatSymbols
----------------------------------------------------------------
1. `String[] getMonths()`: This method returns an array of strings containing the localized names of the months.
2. `String[] getWeekdays()`: This method returns an array of strings containing the localized names of the weekdays.
3. `String[] getShortMonths()`: This method returns an array of strings containing the localized abbreviated names of the months.
4. `String[] getShortWeekdays()`: This method returns an array of strings containing the localized abbreviated names of the weekdays.
5. `String[] getAmPmStrings()`: This method returns an array of strings containing the localized strings for the AM/PM designations.
================================================================

Sample: 12 DecimalFormat
----------------------------------------------------------------
1. `String format(double number)`: This method formats a double into a string.
2. `StringBuffer format(Object number, StringBuffer toAppendTo, FieldPosition pos)`: This method formats an object into a StringBuffer according to the pattern specified.
3. `Number parse(String source)`: This method parses a string into a Number object.
4. `Object clone()`: This method creates and returns a copy of this DecimalFormat object.
5. `void setDecimalSeparatorAlwaysShown(boolean newValue)`: This method sets whether the decimal separator should always be shown in the formatted output.
================================================================

Sample: 13 DecimalFormatSymbols
----------------------------------------------------------------
1. `char getDecimalSeparator()`: This method returns the character used as the decimal separator.
2. `char getGroupingSeparator()`: This method returns the character used as the grouping separator.
3. `String getCurrencySymbol()`: This method returns the currency symbol.
4. `char getMinusSign()`: This method returns the character used as the minus sign.
5. `void setDecimalSeparator(char newSeparator)`: This method sets the character to be used as the decimal separator.
================================================================

Sample: 14 FieldPosition
----------------------------------------------------------------
1. `void setBeginIndex(int index)`: This method sets the beginning index where the field is to be formatted in the formatted string.
   
2. `int getBeginIndex()`: This method returns the beginning index of the field within the formatted string.

3. `void setEndIndex(int index)`: This method sets the end index where the field is to be formatted in the formatted string.

4. `int getEndIndex()`: This method returns the end index of the field within the formatted string.

5. `String toString()`: This method returns a string representation of the FieldPosition object.
================================================================

Sample: 15 Format
----------------------------------------------------------------
1. `Object parseObject(String source)`: This method parses the given string and returns an object.
2. `StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)`: This method formats the given object and appends the result to a StringBuffer, using the specified field position.
3. `FieldPosition parseObject(String source, ParsePosition pos)`: This method parses the given string using the specified parse position and returns a field position.
4. `StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)`: This method formats the given object and appends the result to a StringBuffer, using the specified field position.
5. `Object parseObject(String source, ParsePosition pos)`: This method parses the given string using the specified parse position and returns an object.
================================================================

Sample: 16 Format.Field
----------------------------------------------------------------
1. `Format.Field[] getFields()`: This method returns an array of all the Field objects defined in this Format.
2. `Enumeration<Object> getArguments()`: This method returns an Enumeration of attribute values for this Field.
3. `String getField()`: This method returns the Format Field's name.
4. `Class<?> getFieldAttribute()`: This method returns the class type of the Field's value.
================================================================

Sample: 17 MessageFormat
----------------------------------------------------------------
1. `String format(String pattern, Object... arguments)`: This method formats a message string using this message format and the given arguments.
2. `void applyPattern(String pattern)`: This method sets the pattern to use in the format method.
3. `void setLocale(Locale newLocale)`: This method sets the locale to be used when the format method is called.
4. `void setFormatByArgumentIndex(int argumentIndex, Format newFormat)`: This method sets a new format object to use for the format of the argument with the given index.
5. `static String format(String pattern, Object... arguments)`: This method formats a message string using the provided pattern and arguments, without needing to create an instance of MessageFormat.
================================================================

Sample: 18 MessageFormat.Field
----------------------------------------------------------------
1. `int hashCode()` 
2. `boolean equals(Object obj)` 
3. `String toString()` 
4. `Object clone()` 
5. `String getRequestedCharSet`
================================================================

Sample: 19 Normalizer
----------------------------------------------------------------
1. `String normalize(CharSequence src, Normalizer.Form form)`: This method normalizes a string according to the specified normalization form.
2. `boolean isNormalized(CharSequence src, Normalizer.Form form)`: This method checks if a string is normalized according to the specified normalization form.
3. `String compose(CharSequence src, boolean compat): This method composes the characters in the specified string based on their canonical decomposition.
4. `String decompose(CharSequence src, boolean compat): This method decomposes the characters in the specified string based on their canonical decomposition.
5. `Iteratable<String> getNormalizationPairs()`: This method returns an iterator over the normalization pairs used by this Normalizer instance.
================================================================

Sample: 20 NumberFormat
----------------------------------------------------------------
1. `static NumberFormat getInstance()`: This method returns a NumberFormat instance for the default locale.
2. `String format(double number)`: This method formats a double into a string.
3. `Number parse(String source) throws ParseException`: This method parses a string to produce a Number.
4. `void setMaximumFractionDigits(int newValue)`: This method sets the maximum number of digits allowed in the fraction portion of a number.
5. `void setGroupingUsed(boolean newValue)`: This method sets whether grouping is used in the formatted numbers.
================================================================

Sample: 21 NumberFormat.Field
----------------------------------------------------------------
1. `int hashCode()`: This method returns the hash code value for this NumberFormat.Field object.
2. `static NumberFormat.Field ofCurrency()` : This method returns a NumberFormat.Field instance for currency.
3. `static NumberFormat.Field ofInteger()` : This method returns a NumberFormat.Field instance for integer.
4. `static NumberFormat.Field ofPercent()` : This method returns a NumberFormat.Field instance for percent.
5. `static NumberFormat.Field ofFraction()` : This method returns a NumberFormat.Field instance for fraction.
================================================================

Sample: 22 ParsePosition
----------------------------------------------------------------
1. int getIndex() : This method returns the current index in the string being parsed.
2. void setIndex(int index) : This method sets the current index in the string being parsed.
3. ParsePosition(int index) : This is the constructor for creating a new ParsePosition object with the specified index.
4. String toString() : This method returns a string representation of the ParsePosition object.
5. boolean equals(Object obj) : This method compares the specified object with this ParsePosition for equality.
================================================================

Sample: 23 RuleBasedCollator
----------------------------------------------------------------
1. `RuleBasedCollator clone()`: This method creates a new RuleBasedCollator with the same rules as this RuleBasedCollator.
2. `int getStrength()`: This method returns the current comparison strength.
3. `void setStrength(int newStrength)`: This method sets the comparison strength to the specified strength.
4. `void setDecomposition(int decompositionMode)`: This method sets the decomposition mode for this RuleBasedCollator.
5. `String getRules()`: This method returns the collation rules of this RuleBasedCollator as a string.
================================================================

Sample: 24 SimpleDateFormat
----------------------------------------------------------------
1. `String format(Date date)`: This method formats the given Date object into a String representation according to the pattern specified in the SimpleDateFormat object.
2. `void applyLocalizedPattern(String pattern)`: This method changes the pattern to be used by this SimpleDateFormat object to a localized pattern.
3. `void applyPattern(String pattern)`: This method changes the pattern to be used by this SimpleDateFormat object.
4. `Date parse(String source) throws ParseException`: This method parses the given string and returns a Date object according to the pattern specified in the SimpleDateFormat object.
5. `String toPattern()`: This method returns the current pattern that is being used by this SimpleDateFormat object.
================================================================

Sample: 25 StringCharacterIterator
----------------------------------------------------------------
1. `char first()`: This method returns the first character in the iteration.
2. `char last()`: This method returns the last character in the iteration.
3. `char current()`: This method returns the character at the current position in the iteration.
4. `char next()`: This method returns the character at the next position in the iteration.
5. `char previous()`: This method returns the character at the previous position in the iteration.
================================================================

