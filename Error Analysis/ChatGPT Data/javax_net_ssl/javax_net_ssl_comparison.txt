Sample: 0 CertPathTrustManagerParameters
----------------------------------------------------------------
1. `List<String> getCertPath()` : This method returns the CertPath object associated with this CertPathTrustManagerParameters instance.
2. `TrustAnchor getTrustAnchor()` : This method returns the TrustAnchor object associated with this CertPathTrustManagerParameters instance.
3. `String getAlgorithmConstraints()` : This method returns the algorithm constraints associated with this CertPathTrustManagerParameters instance.
4. `boolean getRevocationEnabled()` : This method returns a boolean indicating whether revocation checking is enabled for this CertPathTrustManagerParameters instance.
5. `CertSelector getTargetCertConstraints()` : This method returns the CertSelector object associated with this CertPathTrustManagerParameters instance.
================================================================

Sample: 1 ExtendedSSLSession
----------------------------------------------------------------
1. `String getCipherSuite()`: This method returns the name of the cipher suite used in the SSL session.
2. `javax.security.cert.X509Certificate[] getLocalCertificates()`: This method returns the certificate chain used by the local end of the SSL connection.
3. `javax.security.cert.X509Certificate[] getPeerCertificates()`: This method returns the certificate chain sent by the peer during the SSL handshake.
4. `String[] getLocalSupportedSignatureAlgorithms()`: This method returns the signature algorithms supported by the local end of the SSL connection.
5. `String[] getPeerSupportedSignatureAlgorithms()`: This method returns the signature algorithms supported by the peer during the SSL handshake.
================================================================

Sample: 2 HandshakeCompletedEvent
----------------------------------------------------------------
1. `SSLSocket getSocket()`: This method returns the SSLSocket for which the handshake was completed.

2. `String getCipherSuite()`: This method returns the name of the cipher suite used in the SSL handshake.

3. `Certificate[] getLocalCertificates()`: This method returns an array of certificates that were sent to the peer during the SSL handshake.

4. `Certificate[] getPeerCertificates()`: This method returns an array of certificates that were received from the peer during the SSL handshake.

5. `javax.security.cert.X509Certificate[] getPeerCertificateChain()`: This method returns the peer's certificate chain, which is an array of X.509 certificates.
================================================================

Sample: 3 HttpsURLConnection
----------------------------------------------------------------
1. `void setRequestMethod(String method)`: Sets the request method to be used for the URL request.
2. `int getResponseCode()`: Returns the HTTP response code.
3. `String getCipherSuite()`: Returns the name of the cipher suite in use on an established connection.
4. `void setHostnameVerifier(HostnameVerifier v)`: Sets the HostnameVerifier used to verify the hostname for the server.
5. `void setSSLSocketFactory(SSLSocketFactory sf)`: Sets the SSLSocketFactory to be used for creating SSL sockets.
================================================================

Sample: 4 KeyManagerFactory
----------------------------------------------------------------
1. `KeyManagerFactory getDefaultAlgorithm()`: This method returns the default algorithm name for the KeyManagerFactory.
2. `KeyManager[] getKeyManagers()`: This method returns the key managers for this KeyManagerFactory.
3. `String getAlgorithm()`: This method returns the algorithm name of this KeyManagerFactory.
4. `void init(KeyStore ks, char[] password)`: This method initializes this KeyManagerFactory with a source of key material.
5. `void init(ManagerFactoryParameters spec)`: This method initializes this KeyManagerFactory with a source of provider-specific properties.
================================================================

Sample: 5 KeyManagerFactorySpi
----------------------------------------------------------------
1. `KeyManagerFactorySpi getInstance(String algorithm)`: This method returns a KeyManagerFactorySpi object for the specified algorithm.
2. `void engineInit(KeyStore ks, char[] password)`: Initializes this KeyManagerFactorySpi with the given KeyStore and password.
3. `KeyManager[] engineGetKeyManagers()`: Returns one KeyManager for each key type this KeyManagerFactorySpi manages.
4. `void engineInit(ManagerFactoryParameters spec)`: Initializes this KeyManagerFactorySpi with the specified ManagerFactoryParameters.
5. `String[] engineGetClientAliases(String keyType, Principal[] issuers)`: Returns the aliases of the keystore as an array of strings.
================================================================

Sample: 6 KeyStoreBuilderParameters
----------------------------------------------------------------
1. `KeyStoreBuilderParameters(KeyStore.Builder builder)`: This constructor creates a new instance of KeyStoreBuilderParameters with the provided KeyStore Builder.
2. `KeyStore.Builder getParameters()`: This method returns the KeyStore.Builder object associated with this KeyStoreBuilderParameters instance.
3. `boolean equals(Object obj)`: This method compares this KeyStoreBuilderParameters instance with the specified object for equality.
4. `int hashCode()`: This method returns the hash code value for this KeyStoreBuilderParameters instance.
5. `String toString()`: This method returns a string representation of the KeyStoreBuilderParameters instance.
================================================================

Sample: 7 SNIHostName
----------------------------------------------------------------
1. `String getAsciiName()`: This method returns the ASCII-encoded name of the SNI host name.
2. `byte[] getEncoded()`: This method returns a byte array containing the encoded form of the SNI host name.
3. `String getHost()`: This method returns the SNI host name as a String.
4. `byte[] getRaw()`: This method returns a byte array containing the raw bytes of the SNI host name.
5. `String type()`: This method returns the type of the SNIHostName, which is always "server_name".
================================================================

Sample: 8 SNIMatcher
----------------------------------------------------------------
1. `boolean matches(SNIServerName serverName)`: This method checks if the given server name matches the type and criteria of this matcher.
2. `SNIMatcher clone()`: This method creates and returns a copy of this SNIMatcher.
3. `String getType()`: This method returns the type of this matcher.
4. `Object clone()`: This method creates and returns a copy of this object.
5. `boolean serverNameMatches(String type, byte[] data)`: This method checks if the server name of the specified type and data matches the criteria of this matcher.
================================================================

Sample: 9 SNIServerName
----------------------------------------------------------------
1. `String getHostName()`: This method returns the host name indicated by this SNI server name.
2. `byte[] getEncoded()`: This method returns the encoded form of this server name.
3. `int getType()`: This method returns the type of this server name.
4. `int hashCode()`: This method returns a hash code value for the object.
5. `boolean equals(Object obj)`: This method compares this server name with the specified object for equality.
================================================================

Sample: 10 SSLContext
----------------------------------------------------------------
1. `SSLParameters getSupportedSSLParameters()`: This method returns a copy of the SSLParameters object that is supported by the implementation.
2. `SSLSession getSession()`: This method returns the SSLSession for this connection.
3. `SSLEngine createSSLEngine(String host, int port)`: This method creates an SSLEngine for use with this SSLContext.
4. `SSLSessionContext getClientSessionContext()`: This method returns the SSLSessionContext for client connections created by this SSLContext.
5. `SSLServerSessionContext getServerSessionContext()`: This method returns the SSLSessionContext for server connections created by this SSLContext.
================================================================

Sample: 11 SSLContextSpi
----------------------------------------------------------------
1. `SSLSessionContext getServerSessionContext()`: Returns the SSLSessionContext object for server side SSL sessions.
2. `SSLSessionContext getClientSessionContext()`: Returns the SSLSessionContext object for client side SSL sessions.
3. `void engineInit(KeyManager[] km, TrustManager[] tm, SecureRandom random)`: Initializes this SSLContextSpi with the provided KeyManager, TrustManager, and SecureRandom objects.
4. `SSLEngine engineCreateSSLEngine()`: Creates a new SSLEngine object for this SSLContextSpi.
5. `SSLEngine engineCreateSSLEngine(String host, int port)`: Creates a new SSLEngine object for this SSLContextSpi with the specified host and port.
================================================================

Sample: 12 SSLEngine
----------------------------------------------------------------
1. `SSLSession getSession()`: Returns the SSLSession associated with this SSLEngine.
2. `void beginHandshake()`: Starts the initial handshake on this engine.
3. `void closeInbound()`: Closes this engine's inbound side.
4. `SSLParameters getSSLParameters()`: Gets the SSL parameters that indicates the supported cipher suites, the supported protocols, the endpoint identification algorithm, etc.
5. `void setUseClientMode(boolean mode)`: Configures this engine to act in client or server mode.
================================================================

Sample: 13 SSLEngineResult
----------------------------------------------------------------
1. `HandshakeStatus getHandshakeStatus()`: Returns the current handshake status of the SSLEngine.
2. `SSLEngineResult.HandshakeStatus getHandshakeStatus()`: Returns the resulting status after a wrap or unwrap operation.
3. `boolean isInboundDone()`: Returns true if the inbound operations are completed.
4. `boolean isOutboundDone()`: Returns true if the outbound operations are completed.
5. `int bytesProduced()`: Returns the number of bytes produced after a wrap or unwrap operation.
================================================================

Sample: 14 SSLParameters
----------------------------------------------------------------
1. `String[] getCipherSuites()`: This method returns an array of the names of the cipher suites that are enabled.
2. `String[] getProtocols()`: This method returns an array of the names of the protocols that are enabled.
3. `boolean getNeedClientAuth()`: This method returns a boolean value indicating whether client authentication is required.
4. `boolean getWantClientAuth()`: This method returns a boolean value indicating whether client authentication is requested but not required.
5. `SSLParameters setUseCipherSuitesOrder(boolean honorOrder)`: This method sets whether the order of the cipher suites preferred by the socket should be honored.
================================================================

Sample: 15 SSLPermission
----------------------------------------------------------------
1. `void checkGuard(Guard guard)`: This method checks if the permission can be checked against the specified Guard object.
2. `void checkGuard(Object context)`: This method checks if the permission can be checked against the specified context object.
3. `String getActions()`: This method returns the actions for which this permission is allowed.
4. `String getName()`: This method returns the name of this permission.
5. `boolean implies(Permission permission)`: This method returns true if the specified permission is implied by this SSLPermission object, false otherwise.
================================================================

Sample: 16 SSLServerSocket
----------------------------------------------------------------
1. `SSLSocket accept()`: This method listens for a connection to be made to this socket and accepts it.
2. `String[] getSupportedCipherSuites()`: This method returns a string array of the cipher suites that are currently enabled for use on this SSLServerSocket.
3. `boolean getUseClientMode()`: This method returns whether this SSLServerSocket is in client mode.
4. `void setWantClientAuth(boolean want)`: This method sets whether client authentication is desired or not for this SSLServerSocket.
5. `void setNeedClientAuth(boolean need)`: This method sets whether client authentication is required for this SSLServerSocket.
================================================================

Sample: 17 SSLServerSocketFactory
----------------------------------------------------------------
1. `SSLServerSocket createServerSocket(int port)`: This method creates a SSLServerSocket bound to a specific port.
2. `SSLServerSocket createServerSocket(int port, int backlog)`: This method creates a SSLServerSocket bound to a specific port with a specified backlog.
3. `SSLServerSocket createServerSocket(int port, int backlog, InetAddress iAddress)`: This method creates a SSLServerSocket bound to a specific port with a specified backlog and InetAddress.
4. `String[] getDefaultCipherSuites()`: This method returns the names of the cipher suites that are enabled by default.
5. `String[] getSupportedCipherSuites()`: This method returns the names of the cipher suites that are supported for SSL/TLS connections.
================================================================

Sample: 18 SSLSessionBindingEvent
----------------------------------------------------------------
1. `javax.net.ssl.SSLSession getSession()`: This method returns the SSL session associated with the event.
2. `String getName()`: This method returns the name of the session attribute associated with this event.
3. `Object getValue()`: This method returns the value of the session attribute associated with this event.
4. `boolean getValueIsSet()`: This method returns true if the value of the session attribute has been set.
5. `void setValue(Object value)`: This method sets the value of the session attribute associated with this event.
================================================================

Sample: 19 SSLSocket
----------------------------------------------------------------
1. `void startHandshake()`: Initiates a handshake on this SSL socket.
2. `javax.net.ssl.SSLSession getSession()`: Returns the SSL session associated with this SSL socket.
3. `boolean getEnableSessionCreation()`: Returns whether session creation is enabled.
4. `void setEnableSessionCreation(boolean flag)`: Sets whether session creation is enabled.
5. `void setNeedClientAuth(boolean need)`: Sets whether the client is required to authenticate itself when establishing connection.
================================================================

Sample: 20 SSLSocketFactory
----------------------------------------------------------------
1. `SSLSocket createSocket(String host, int port)`: This method creates a SSL socket connected to the specified host and port.
2. `Socket createSocket(InetAddress host, int port)`: This method creates a SSL socket connected to the specified IP address and port.
3. `Socket createSocket(InetAddress host, int port, InetAddress localHost, int localPort)`: This method creates a SSL socket connected to the specified IP address and port, using the specified local IP address and port.
4. `Socket createSocket(String host, int port, InetAddress localHost, int localPort)`: This method creates a SSL socket connected to the specified host and port, using the specified local IP address and port.
5. `Socket createSocket(Socket s, String host, int port, boolean autoClose)`: This method creates a SSL socket that is connected to the specified host and port via the given socket, with the option to auto-close the new socket.
================================================================

Sample: 21 StandardConstants
----------------------------------------------------------------
1. `String defaultAlgorithm()`: Returns the default SSL handshake algorithm.
2. `int get()`: Returns the value of this StandardConstants instance.
3. `String valueOf(int value)`: Returns the name of the specified value in this enumeration.
4. `String valueOf(String name)`: Returns the value of the specified name in this enumeration.
5. `boolean validate(int value)`: Validates the specified value against this enumeration.
================================================================

Sample: 22 TrustManagerFactory
----------------------------------------------------------------
1. `TrustManager[] getTrustManagers()`: This method returns an array of TrustManagers.
2. `String getAlgorithm()`: This method returns the algorithm name of this TrustManagerFactory.
3. `static TrustManagerFactory getInstance(String algorithm)`: This method returns a TrustManagerFactory object that implements the specified algorithm.
4. `String getProvider()`: This method returns the name of the provider of this TrustManagerFactory.
5. `void init(KeyStore ks)`: This method initializes this TrustManagerFactory with a KeyStore.
================================================================

Sample: 23 TrustManagerFactorySpi
----------------------------------------------------------------
1. `void engineInit(ManagerFactoryParameters spec)`: This method initializes this TrustManagerFactorySpi with a set of algorithm-specific parameters.

2. `TrustManager[] engineGetTrustManagers()`: This method returns an array of TrustManagers based on the data initialized in this TrustManagerFactorySpi.

3. `TrustManagerFactorySpi engineGetInstance(String algorithm, Provider provider)`: This method returns an instance of the specified TrustManagerFactorySpi implementation from the specified provider.

4. `void engineInit(KeyStore ks)`: This method initializes this TrustManagerFactorySpi with the given keystore.

5. `void engineInit(ManagerFactoryParameters spec, KeyStore ks)`: This method initializes this TrustManagerFactorySpi with a combination of algorithm-specific parameters and a keystore.
================================================================

Sample: 24 X509ExtendedKeyManager
----------------------------------------------------------------
1. `String chooseClientAlias(String[] keyType, Principal[] issuers, Socket socket)`: This method selects the client alias to authenticate the client side of a secure socket given the key types and issuers.
2. `String[] getClientAliases(String keyType, Principal[] issuers)`: This method gets all matching aliases for authenticating the client side of a secure socket given the key type and issuers.
3. `String chooseServerAlias(String keyType, Principal[] issuers, Socket socket)`: This method selects the server alias to authenticate the server side of a secure socket given the key type and issuers.
4. `String[] getServerAliases(String keyType, Principal[] issuers)`: This method gets all matching aliases for authenticating the server side of a secure socket given the key type and issuers.
5. `X509Certificate[] getCertificateChain(String alias)`: This method returns the certificate chain associated with the given alias.
================================================================

Sample: 25 X509ExtendedTrustManager
----------------------------------------------------------------
1. `void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket)`: This method checks if the client should be trusted.
2. `void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket)`: This method checks if the server should be trusted.
3. `void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine)`: This method checks if the client should be trusted for an SSL engine.
4. `void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine)`: This method checks if the server should be trusted for an SSL engine.
5. `X509Certificate[] getAcceptedIssuers()`: This method returns an array of certificate authority certificates that are trusted for authenticating peers.
================================================================

