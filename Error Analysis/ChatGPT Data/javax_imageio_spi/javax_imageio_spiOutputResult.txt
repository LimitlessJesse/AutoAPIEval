Sample: IIOServiceProvider_2
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/IIOServiceProvider_2.java:23: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_imageio_spi/javaFiles/IIOServiceProvider_2.java:28: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_imageio_spi/javaFiles/IIOServiceProvider_2.java:33: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/javax_imageio_spi/javaFiles/IIOServiceProvider_2.java:38: error: method does not override or implement a method from a supertype
            @Override
            ^
4 errors


================================================================

Sample: ImageInputStreamSpi_2
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageInputStreamSpi_2.java:12: error: cannot find symbol
            ImageInputStreamSpi spi = ImageIO.getImageReaderSpiByFormatName("JPEG").createInputStreamInstance(null, new File("example.jpg"));
                                             ^
  symbol:   method getImageReaderSpiByFormatName(String)
  location: class ImageIO
./Data/javax_imageio_spi/javaFiles/ImageInputStreamSpi_2.java:13: error: no suitable method found for createInputStreamInstance(<null>,File)
            imageInputStream = spi.createInputStreamInstance(null, new File("example.jpg"));
                                  ^
    method ImageInputStreamSpi.createInputStreamInstance(Object,boolean,File) is not applicable
      (actual and formal argument lists differ in length)
    method ImageInputStreamSpi.createInputStreamInstance(Object) is not applicable
      (actual and formal argument lists differ in length)
2 errors


================================================================

Sample: ImageOutputStreamSpi_3
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageOutputStreamSpi_3.java:39: error: no interface expected here
class MyImageOutputStream extends ImageOutputStream {
                                  ^
./Data/javax_imageio_spi/javaFiles/ImageOutputStreamSpi_3.java:19: error: MyImageOutputStreamSpi is not abstract and does not override abstract method createOutputStreamInstance(Object,boolean,File) in ImageOutputStreamSpi
class MyImageOutputStreamSpi extends ImageOutputStreamSpi {
^
./Data/javax_imageio_spi/javaFiles/ImageOutputStreamSpi_3.java:24: error: method does not override or implement a method from a supertype
    @Override
    ^
./Data/javax_imageio_spi/javaFiles/ImageOutputStreamSpi_3.java:32: error: incompatible types: MyImageOutputStream cannot be converted to ImageOutputStream
            return new MyImageOutputStream((File) output);
                   ^
4 errors


================================================================

Sample: ImageOutputStreamSpi_5
----------------------------------------------------------------
================================================================

Sample: ImageReaderSpi_1
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageReaderSpi_1.java:6: error: unreported exception IOException; must be caught or declared to be thrown
        boolean result = readerSpi.canDecodeInput("source"); // Replace "source" with actual source object
                                                 ^
1 error


================================================================

Sample: ImageReaderSpi_2
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageReaderSpi_2.java:9: error: cannot find symbol
        ImageReaderSpi provider = ImageIO.getReaderSpiByFormatName(formatName);
                                         ^
  symbol:   method getReaderSpiByFormatName(String)
  location: class ImageIO
1 error


================================================================

Sample: ImageReaderWriterSpi_4
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageReaderWriterSpi_4.java:5: error: ImageReaderWriterSpi is abstract; cannot be instantiated
        ImageReaderWriterSpi spi = new ImageReaderWriterSpi();
                                   ^
1 error


================================================================

Sample: ImageReaderWriterSpi_5
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageReaderWriterSpi_5.java:5: error: <anonymous ImageReaderWriterSpi_5$1> is not abstract and does not override abstract method getDescription(Locale) in IIOServiceProvider
        ImageReaderWriterSpi spi = new ImageReaderWriterSpi() {
                                                              ^
1 error


================================================================

Sample: ImageWriterSpi_3
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageWriterSpi_3.java:8: error: constructor ImageTypeSpecifier in class ImageTypeSpecifier cannot be applied to given types;
        ImageTypeSpecifier type = new ImageTypeSpecifier();
                                  ^
  required: no arguments
  found:    no arguments
  reason: ImageTypeSpecifier() has private access in ImageTypeSpecifier
./Data/javax_imageio_spi/javaFiles/ImageWriterSpi_3.java:13: error: MyImageWriterSpi is not abstract and does not override abstract method createWriterInstance(Object) in ImageWriterSpi
    static class MyImageWriterSpi extends ImageWriterSpi {
           ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: ImageWriterSpi_4
----------------------------------------------------------------
output:
./Data/javax_imageio_spi/javaFiles/ImageWriterSpi_4.java:8: error: cannot find symbol
        ImageWriterSpi spi = ImageIO.getImageWriterSpiByFormatName("gif");
                                    ^
  symbol:   method getImageWriterSpiByFormatName(String)
  location: class ImageIO
1 error


================================================================

