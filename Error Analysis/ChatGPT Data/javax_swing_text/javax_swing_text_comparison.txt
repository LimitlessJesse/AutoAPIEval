Sample: 0 AbstractDocument
----------------------------------------------------------------
1. `void setDocumentFilter(DocumentFilter filter)`: This method sets the DocumentFilter for this AbstractDocument.
2. `int getLength()`: This method returns the length of the content in this AbstractDocument.
3. `Element getDefaultRootElement()`: This method returns the default root element for this AbstractDocument.
4. `void insertString(int offset, String str, AttributeSet a)`: This method inserts the specified text at the given offset in this AbstractDocument.
5. `void remove(int offs, int len)`: This method removes the specified range of text from this AbstractDocument.
================================================================

Sample: 1 AbstractDocument.ElementEdit
----------------------------------------------------------------
1. `int getElementIndex(Element elem)`: This method returns the index of the given element.
2. `Element element(int index)`: This method returns the element at the specified index.
3. `boolean removeElement(Element elem)`: This method removes the specified element from the document.
4. `int getElementCount()`: This method returns the number of elements in the document.
5. `Element getParentElement(Element elem)`: This method returns the parent element of the specified element.
================================================================

Sample: 2 AbstractWriter
----------------------------------------------------------------
1. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
2. `void write(int c)`: This method writes a single character.
3. `void flush()`: This method flushes the stream.
4. `void close()`: This method closes the stream, flushing it first.
5. `void write(String str, int off, int len)`: This method writes a portion of a string.
================================================================

Sample: 3 AsyncBoxView
----------------------------------------------------------------
1. `View getLogicalView()`: Returns the logical view associated with this view.
2. `int getAxis()`: Returns the axis of this view.
3. `int flow(int axis, int pos, int len, int start, Position.Bias bias)`: Performs layout of the major axis of the box.
4. `float getPreferredSpan(int axis)`: Returns the span represented by the specified axis.
5. `float getMinimumSpan(int axis)`: Returns the minimum span represented by the specified axis.
================================================================

Sample: 4 BoxView
----------------------------------------------------------------
1. `float getWidth()`: This method returns the width of the BoxView.
2. `float getHeight()`: This method returns the height of the BoxView.
3. `View getView(int n)`: This method returns the view at the specified index within the BoxView.
4. `Shape getChildAllocation(int index, Shape a)`: This method returns the shape allocated to the child view at the specified index within the BoxView.
5. `void layout(int width, int height)`: This method lays out the children of the BoxView within the specified width and height.
================================================================

Sample: 5 ComponentView
----------------------------------------------------------------
1. AttributeSet getAttributes()
   - Return type: AttributeSet
2. float getPreferredSpan(int axis)
   - Return type: float
   - Parameters: int axis
3. float getMinimumSpan(int axis)
   - Return type: float
   - Parameters: int axis
4. float getMaximumSpan(int axis)
   - Return type: float
   - Parameters: int axis
5. void paint(Graphics g, Shape allocation)
   - Return type: void
   - Parameters: Graphics g, Shape allocation
================================================================

Sample: 6 CompositeView
----------------------------------------------------------------
1. `View getChild(int index)`: Returns the child view at the specified index.
2. `int getViewIndex(int position, Position.Bias bias)`: Returns the view index at the specified position and bias.
3. `Shape getChildAllocation(int index, Shape a)`: Returns the child allocation at the specified index and shape.
4. `View getViewAtPoint(int x, int y, Rectangle a)`: Returns the view at the specified point within the rectangle.
5. `int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)`: Returns the next visual position for the cursor movement.
================================================================

Sample: 7 DateFormatter
----------------------------------------------------------------
1. `String valueToString(Object value)`: This method returns a string representation of the specified value.
2. `Object stringToValue(String text)`: This method returns the formatted value corresponding to the specified string.
3. `void setFormat(Format format)`: This method sets the format that will be used for converting between dates and strings.
4. `AbstractFormatter getDocumentFilter()`: This method returns the DocumentFilter used by this formatter to restrict the type of characters entered.
5. `void setAllowsInvalid(boolean allowsInvalid)`: This method sets whether the formatter allows invalid values to be edited.
================================================================

Sample: 8 DefaultCaret
----------------------------------------------------------------
1. `void setUpdatePolicy(int policy)`: This method sets the update policy to be used. 
2. `int getUpdatePolicy()`: This method returns the update policy.
3. `boolean isSelectionVisible()`: This method returns whether or not the caret will be made visible if it is currently not visible.
4. `void setSelectionVisible(boolean e)`: This method specifies whether or not the caret should be made visible if it is currently not visible.
5. `void setVisible(boolean e)`: This method specifies whether or not the caret should be visible.
================================================================

Sample: 9 DefaultEditorKit
----------------------------------------------------------------
1. `void cut()`: This method cuts the selected region and places its contents into the system clipboard.
2. `void copy()`: This method copies the selected region and places its contents into the system clipboard.
3. `void paste()`: This method transfers the contents of the system clipboard into the document at the current caret position.
4. `void selectAll()`: This method selects the entire document.
5. `void write(Writer out, Document doc, int pos, int len)`: This method writes content from the specified partial document to the specified stream.
================================================================

Sample: 10 DefaultEditorKit.BeepAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method is called when an action is triggered.
2. `String toString()`: This method returns a string representation of the object.
3. `Object clone()`: This method creates and returns a copy of this object.
4. `void setLookAndFeel(String lnfName)`: This method sets the look and feel for the GUI.
5. `void beep()` : This method causes a beep sound to be played.
================================================================

Sample: 11 DefaultEditorKit.CopyAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs the action.
2. `void copy()`: This method copies the selected region and places its contents into the system clipboard.
3. `void cut()`: This method deletes the contents of the selection without altering the contents of the clipboard.
4. `void paste()`: This method inserts the contents of the clipboard at the current caret position, replacing the current selection.
5. `TextAction(TextAction.Command command)`: This method constructs a TextAction with the specified command.
================================================================

Sample: 12 DefaultEditorKit.CutAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs the action associated with this action object.
2. `void cut(JTextComponent c)`: Cuts the selected region and places its contents into the system clipboard.
3. `boolean isEnabled()`: Returns whether the action is enabled.
4. `void actionPerformed(ActionEvent e, JTextComponent c)`: This method performs the action associated with this action object on the specified text component.
5. `void setEnabled(boolean b)`: Sets whether the action is enabled.
================================================================

Sample: 13 DefaultEditorKit.DefaultKeyTypedAction
----------------------------------------------------------------
1. `void keyTyped(KeyEvent e)`: This method processes a key typed event.
2. `void actionPerformed(ActionEvent e)`: This method performs the action associated with this key typed event.
3. `void keyReleased(KeyEvent e)`: This method processes a key released event.
4. `void install(JTextComponent c)`: This method installs the key typed action on the specified text component.
5. `void deinstall(JTextComponent c)`: This method deinstalls the key typed action from the specified text component.
================================================================

Sample: 14 DefaultEditorKit.InsertBreakAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method is invoked when an action occurs.
2. `boolean isEnabled()`: This method returns whether the action is currently enabled.
3. `String toString()`: This method returns a string representation of the object.
4. `boolean equals(Object o)`: This method compares this object with the specified object for equality.
5. `Object clone()`: This method creates and returns a copy of this object.
================================================================

Sample: 15 DefaultEditorKit.InsertContentAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method inserts content into the text document at the current caret position.
2. `boolean isEnabled()`: This method returns whether the action is currently enabled.
3. `String getDescription()`: This method returns a brief human-readable description of the action.
4. `void undo()`: This method undoes the last operation.
5. `void redo()`: This method redoes the last operation that was undone.
================================================================

Sample: 16 DefaultEditorKit.InsertTabAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs the action associated with this action object.
2. `boolean isEnabled()`: This method returns whether the action is enabled.
3. `String getActionCommand()`: This method returns the string associated with this action, used to identify the command.
4. `void actionPerformed(ActionEvent e, JTextComponent textComponent)`: This method performs the action associated with this action object on the specified JTextComponent.
5. `void overwrite(JTextComponent textComponent, Action action)`: This method overwrites the specified action on the specified JTextComponent.
================================================================

Sample: 17 DefaultEditorKit.PasteAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs a paste action in response to the specified ActionEvent.
2. `String getActionCommand()`: This method returns the command string associated with this action.
3. `Clipboard getClipboard()`: This method returns the clipboard used by this PasteAction.
4. `void setClipboard(Clipboard clipboard)`: This method sets the clipboard to be used by this PasteAction.
5. `void setPasteType(String pasteType)`: This method sets the type of paste operation to be performed by this PasteAction.
================================================================

Sample: 18 DefaultFormatter
----------------------------------------------------------------
1. `String valueToString(Object value)`: This method converts the passed in value into a String.
   
2. `Object stringToValue(String text)`: This method converts the passed in String into an Object.

3. `void setOverwriteMode(boolean mode)`: This method sets whether overwrite mode is enabled.

4. `void setValueClass(Class<?> valueClass)`: This method sets the class type expected for the value.

5. `void setAllowsInvalid(boolean allowsInvalid)`: This method sets whether the formatter allows invalid values.
================================================================

Sample: 19 DefaultFormatterFactory
----------------------------------------------------------------
1. `void setDefaultFormatter(AbstractFormatter defaultFormatter)`: This method sets the default AbstractFormatter to use.
2. `void setAllowsInvalid(boolean allowsInvalid)`: This method sets whether the formatter should allow invalid values.
3. `void setCommitsOnValidEdit(boolean commitsOnValidEdit)`: This method sets whether the formatter should commit on valid edit.
4. `void setNullFormatter(AbstractFormatter nullFormatter)`: This method sets the AbstractFormatter to use when there is a null.
5. `void setDisplayFormatter(AbstractFormatter displayFormatter)`: This method sets the AbstractFormatter to use when the field is not being edited.
================================================================

Sample: 20 DefaultHighlighter
----------------------------------------------------------------
1. `void setDrawsLayeredHighlights(boolean newValue)`: This method sets the flag that determines whether highlights are drawn on top of component children.
2. `int getDrawsLayeredHighlights()`: This method returns the flag that determines whether highlights are drawn on top of component children.
3. `void paintLayeredHighlights(java.awt.Graphics g, int p0, int p1, java.awt.Shape viewBounds, javax.swing.text.JTextComponent editor, javax.swing.text.View view)`: This method paints the highlights.
4. `void setChangeEventsSuppressed(boolean newValue)`: This method sets whether change events are suppressed during the highlighting process.
5. `boolean isChangeEventsSuppressed()`: This method returns whether change events are suppressed during the highlighting process.
================================================================

Sample: 21 DefaultHighlighter.DefaultHighlightPainter
----------------------------------------------------------------
1. `Color getColor()`: This method returns the color used for highlighting.
2. `Shape getUnderlineShape()`: This method returns the shape used for underlining text.
3. `Shape getDrawsLayer()`: This method returns the shape used for drawing the highlight.
4. `Rectangle getPaintedBox(Rectangle alloc, int p0, int p1)`: This method returns the rectangle of the highlighted area.
5. `Shape getBorderShape(Rectangle bounds)`: This method returns the shape of the border around the highlighted text.
================================================================

Sample: 22 DefaultStyledDocument
----------------------------------------------------------------
1. `Element createLeaf(Element parent, AttributeSet a, int offs0, int offs1)`: This method creates a leaf element with the given attributes and offsets under the specified parent element.
  
2. `Style addStyle(String nm, Style parent)`: This method adds a new named style based on the specified parent style.
  
3. `void removeStyle(String nm)`: This method removes the named style from the document.
  
4. `void insertString(int offset, String str, AttributeSet a)`: This method inserts the specified text at the given offset with the given attributes.
  
5. `void remove(int offs0, int offs1)`: This method removes text from the document between the specified offsets.
================================================================

Sample: 23 DefaultStyledDocument.AttributeUndoableEdit
----------------------------------------------------------------
1. `void setAttributes(MutableAttributeSet attr)`: This method sets the attributes of the document to the specified MutableAttributeSet.
2. `void addDocumentListener(DocumentListener listener)`: This method adds a DocumentListener to the list that's notified each time the document changes.
3. `void removeDocumentListener(DocumentListener listener)`: This method removes a DocumentListener from the list.
4. `void addUndoableEdit(UndoableEdit anEdit)`: This method adds an UndoableEdit to the list.
5. `void discardAllEdits()`: This method discards all edits from the undo manager.
================================================================

Sample: 24 DefaultStyledDocument.ElementSpec
----------------------------------------------------------------
1. `void insert(int offset, int length, DefaultStyledDocument.ElementSpec[] data)`: This method inserts a sequence of ElementSpec objects into the document at the specified offset.
2. `void remove(int offset, int length)`: This method removes a sequence of content from the document starting at the specified offset.
3. `void change(int offset, int length, DefaultStyledDocument.ElementSpec[] data)`: This method replaces a sequence of content in the document with a new sequence of ElementSpec objects.
4. `void change(int offset, int length, AttributeSet attrs)`: This method replaces the attributes of a sequence of content in the document with the specified AttributeSet.
5. `void create(int offset, int length, AttributeSet a)`: This method creates a new element with the specified attributes at the specified offset in the document.
================================================================

Sample: 25 DefaultTextUI
----------------------------------------------------------------
1. `void install()`: This method installs the necessary properties into the UI delegate properties.
2. `void uninstall()`: This method uninstalls any necessary properties from the UI delegate properties.
3. `int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)`: This method returns the next visual position for the cursor, in the specified direction.
4. `Rectangle modelToView(JTextComponent c, int pos, Position.Bias bias)`: This method returns the bounding box for the given position in the model.
5. `int viewToModel(JTextComponent c, Point pt)`: This method returns the closest model location to the given view location.
================================================================

Sample: 26 DocumentFilter
----------------------------------------------------------------
1. `void insertString(FilterBypass fb, int offset, String text, AttributeSet attr)`: This method inserts some content into the document.
2. `void remove(FilterBypass fb, int offset, int length)`: This method removes some content from the document.
3. `void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs)`: This method replaces some content in the document with new content.
4. `DocumentFilter.DocumentFilter.FilterBypass`: This nested class provides a way to access and modify the document directly.
5. `void setText(Document text)`: This method sets the document to be filtered.
================================================================

Sample: 27 DocumentFilter.FilterBypass
----------------------------------------------------------------
1. `void insertString(DocumentFilter.FilterBypass fb, int offset, String string, AttributeSet attr)`: This method inserts a string into the document at the specified offset with the specified attributes.
   
2. `void remove(DocumentFilter.FilterBypass fb, int offset, int length)`: This method removes text from the document at the specified offset for the specified length.

3. `void replace(DocumentFilter.FilterBypass fb, int offset, int length, String text, AttributeSet attrs)`: This method replaces text in the document starting at the specified offset with the specified length, with the given text and attributes.

4. `Document getDocument()`: This method returns the document associated with the FilterBypass.

5. `AbstractDocument.Content getContent()`: This method returns the content of the document associated with the FilterBypass.
================================================================

Sample: 28 EditorKit
----------------------------------------------------------------
1. `void read(Reader in, Document doc, int pos)`: This method reads content from the given Reader and inserts it into the specified position in the Document.
2. `void write(Writer out, Document doc, int pos, int len)`: This method writes content from the specified range in the Document to the given Writer.
3. `void insertHTML(Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts HTML content into the Document at the specified offset.
4. `void write(Writer out, Document doc)`: This method writes the content of the Document to the given Writer.
5. `void read(InputStream in, Document doc, int pos)`: This method reads content from the InputStream and inserts it into the specified position in the Document.
================================================================

Sample: 29 ElementIterator
----------------------------------------------------------------
1. `Element next()`: This method returns the next Element in the iteration sequence.
2. `boolean nextElement()`: This method moves the iterator to the next Element and returns true if there is a next Element.
3. `int previousIndex()`: This method returns the index of the Element that was just returned by a call to next().
4. `Object current()`: This method returns the current Element that the iterator is pointing to.
5. `Element first()`: This method returns the first Element in the iteration sequence.
================================================================

Sample: 30 FieldView
----------------------------------------------------------------
1. `void insertUpdate(DocumentEvent e)`: This method is called when the Document has changed, it will insert the update. 
2. `void removeUpdate(DocumentEvent e)`: This method is called when the Document has changed, it will remove the update. 
3. `void changedUpdate(DocumentEvent e)`: This method is called when the Document has changed, it will change the update. 
4. `View breakView(int axis, int p0, float pos, float len)`: This method breaks a view along an axis. 
5. `Shape modelToView(int pos, Shape a, Bias b)`: This method converts the given location in the model to a place in the view coordinate system.
================================================================

Sample: 31 FlowView
----------------------------------------------------------------
1. `boolean isVisible()`: This method returns a boolean value indicating whether the view is visible.
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the specified axis.
3. `View getView(int n)`: This method returns the view at the specified position.
4. `Shape modelToView(int pos, Shape a, Position.Bias b)`: This method converts the given location in the model to a view coordinate.
5. `int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)`: This method converts the given view location to a model coordinate.
================================================================

Sample: 32 FlowView.FlowStrategy
----------------------------------------------------------------
1. `void calculateMinorAxisRequirements(int axis, SizeRequirements r)`: This method calculates the minimum, preferred, and maximum sizes for children along the specified axis.
   
2. `void layout(int width, int height)`: This method lays out the children in the given width and height.

3. `void setSpanOnAxis(int axis, int index, int span)`: This method sets the span of the child at the specified index along the specified axis.

4. `void setFlow(int axis, int pos, int len)`: This method sets the flow start and end positions along the specified axis.

5. `boolean isBefore(int x, int y, Rectangle alloc)`: This method checks if the given point is before the given rectangle.
================================================================

Sample: 33 GapContent
----------------------------------------------------------------
1. `int length()`: This method returns the length of the content.
2. `String getString(int where, int len)`: This method returns a portion of the content as a String.
3. `void insertString(int where, String str)`: This method inserts a String into the content at the specified position.
4. `void remove(int where, int nitems)`: This method removes a specified number of items from the content starting at the specified position.
5. `void shiftEnd(int where, int nitems)`: This method moves items in the content starting from the specified position to the end of the content.

================================================================

Sample: 34 GlyphView
----------------------------------------------------------------
1. `Shape modelToView(int pos, Shape a, Position.Bias b)`: Returns the allocation for a given region.
2. `int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)`: Returns the next visual position for the cursor.
3. `void paint(Graphics g, Shape a)`: Renders the glyphs of the view.
4. `GlyphPainter getGlyphPainter()`: Returns the painter for the view.
5. `TextHitInfo viewToModel(float fx, float fy, Shape a, Position.Bias[] biasReturn)`: Gives the potential position of the caret within the model.
================================================================

Sample: 35 GlyphView.GlyphPainter
----------------------------------------------------------------
1. int getMaxCharIndex(): This method returns the maximum character index.
2. Rectangle getGlyphAllocation(int p0, int p1, Shape a): This method returns the bounds of the specified range as a rectangle.
3. Shape modelToView(int p0, Position.Bias b0, int p1, Position.Bias b1, Shape a): This method converts the given range in the model to a view x, y, width, height.
4. void paint(GlyphView v, Graphics g, Shape a, int p0, int p1): This method paints the specified range in the view.
5. void setView(GlyphView v): This method sets the view for the painter.
================================================================

Sample: 36 IconView
----------------------------------------------------------------
1. `int getIconWidth()`: This method returns the width of the icon.
2. `int getIconHeight()`: This method returns the height of the icon.
3. `View getParent()`: This method returns the parent view of the icon view.
4. `Shape modelToView(int pos, Shape a, Position.Bias b) throws BadLocationException`: This method converts the given position in the model to a region in the view coordinate system.
5. `int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)`: This method converts the given point in the view coordinate system to the nearest representative location in the model.
================================================================

Sample: 37 InternationalFormatter
----------------------------------------------------------------
1. `void setAllowsInvalid(boolean allowsInvalid)`: Allows invalid values in the text field.
2. `void setCommitsOnValidEdit(boolean commitsOnValidEdit)`: Sets whether edits are committed after each valid edit.
3. `void setFormat(Object format)`: Sets the format that the value will be formatted according to.
4. `void setMaximum(Integer max)`: Sets the maximum allowable value for this formatter.
5. `void setMinimum(Integer min)`: Sets the minimum allowable value for this formatter.
================================================================

Sample: 38 JTextComponent
----------------------------------------------------------------
1. `void replaceSelection(String content)`: This method replaces the currently selected content with new content.
2. `String getText()`: This method returns the text contained in the JTextComponent.
3. `void append(String str)`: This method appends the specified text to the end of the JTextComponent.
4. `void setCaretPosition(int position)`: This method sets the caret position at the specified index in the text.
5. `boolean isEditable()`: This method returns a boolean value indicating whether the JTextComponent is editable.
================================================================

Sample: 39 JTextComponent.DropLocation
----------------------------------------------------------------
1. `Rectangle getBounds()`: This method returns the bounds of the drop location.
2. `int getChildIndex()`: This method returns the child index of the drop location.
3. `Position getDropPoint()`: This method returns the drop point of the drop location.
4. `boolean isInsert()`: This method returns true if the drop location is an insert location.
5. `DropLocation getDropLocation(JTextComponent textComponent, Point p)`: This method returns the drop location for the given text component and point.
================================================================

Sample: 40 JTextComponent.KeyBinding
----------------------------------------------------------------
1. `Action[] getActions()`: This method returns an array of Actions defined.
2. `Keymap getKeymap()`: This method returns the keymap that is being managed.
3. `String getActionForKeyStroke(KeyStroke aKeyStroke)`: This method returns the name of the action performed by a given keystroke.
4. `void setKeymap(Keymap map)`: This method sets the keymap to be managed.
5. `void replaceKeyBindings(KeyStroke[] keystrokes, Object[] actions)`: This method replaces the key bindings in the current keymap with the ones provided.
================================================================

Sample: 41 LabelView
----------------------------------------------------------------
1. `void setLabel(String text)`: This method sets the text to be displayed on the label.
2. `String getLabel()`: This method returns the text currently being displayed on the label.
3. `void setForeground(Color fg)`: This method sets the foreground color of the label.
4. `Color getForeground()`: This method returns the current foreground color of the label.
5. `void setBackground(Color bg)`: This method sets the background color of the label.
================================================================

Sample: 42 LayeredHighlighter
----------------------------------------------------------------
1. `void install(JTextComponent c)`: This method installs the necessary event listeners and initializes the LayeredHighlighter for the specified JTextComponent.
2. `void deinstall(JTextComponent c)`: This method removes the LayeredHighlighter from the specified JTextComponent.
3. `Highlight addHighlight(int p0, int p1, Highlighter.HighlightPainter p)`: This method adds a highlight to the document for the specified range of text and using the specified HighlightPainter.
4. `void changeHighlight(Object tag, int p0, int p1)`: This method changes the range of the existing highlight with the specified tag to the new range specified by p0 and p1.
5. `void removeAllHighlights()`: This method removes all highlights from the document.
================================================================

Sample: 43 LayeredHighlighter.LayerPainter
----------------------------------------------------------------
1. `Shape paintLayer(Graphics g, int p0, int p1, Shape bounds, JTextComponent c, View view)`: This method paints a portion of a highlight. Returns the Shape that was painted.
2. `void finalize(Hashtable<View, Shape> highlights)`: This method called when the highlight is being removed to do cleanup.
3. `Highlighter.HighlightPainter getPainter()`: This method returns the painter used to render the highlights.
4. `Shape adjustPaintRegion(Shape allocation)`: This method can adjust the allocation size required for painting.
5. `int hashCode()`: This method returns a hash code value for the object.
================================================================

Sample: 44 LayoutQueue
----------------------------------------------------------------
1. `void addTask(Runnable task)`: This method adds a task to the layout queue.
2. `void removeTask(Runnable task)`: This method removes a task from the layout queue.
3. `boolean isTask enqueued(Runnable task)`: This method checks if a task is already enqueued in the layout queue.
4. `boolean waitIO(Runnable task)`: This method waits for an IO operation to finish before processing the task.
5. `void postReadWriteTask(DocumentFilter.FilterBypass fb, DocumentFilter.FilterBypass fb, AttributeSet attr)`: This method posts a read-write task to the layout queue.
================================================================

Sample: 45 MaskFormatter
----------------------------------------------------------------
1. `void setPlaceholderCharacter(char placeholder)`: This method sets the character used for a place holder.
2. `void setValidCharacters(String validCharacters)`: This method sets the valid characters for the mask formatter.
3. `void setAllowsInvalid(boolean allowsInvalid)`: This method sets whether the allows invalid values during editing.
4. `void setCommitsOnValidEdit(boolean commit)`: This method sets whether the formatter commits the edit if the value is valid.
================================================================

Sample: 46 NavigationFilter
----------------------------------------------------------------
1. `void setDot(NavigationFilter.FilterBypass fb, int dot, Position.Bias bias)`: This method sets the position of the dot in the specified FilterBypass with the given bias.
2. `void setMark(NavigationFilter.FilterBypass fb, int mark, Position.Bias bias)`: This method sets the position of the mark in the specified FilterBypass with the given bias.
3. `int getNextVisualPositionFrom(JTextComponent text, int pos, Position.Bias bias, int direction, Position.Bias[] biasRet)`: This method returns the next visual position for the text component given a starting position and direction.
4. `Rectangle getBoundedPosition(JTextComponent text, int p0, int p1)`: This method returns the bounding rectangle for the given text positions in the text component.
5. `int getNextVisualPositionFrom(JTextComponent text, int pos, Position.Bias bias, int direction, Position.Bias[] biasRet, Rectangle shape)`: This method returns the next visual position for the text component given a starting position and direction, and updates the provided shape rectangle.
================================================================

Sample: 47 NavigationFilter.FilterBypass
----------------------------------------------------------------
1. `void setDot(int dot)`
2. `void moveDot(int dot)`
3. `void setDot(int dot, Position.Bias bias)`
4. `void moveDot(int dot, Position.Bias bias)`
5. `void setDot(int dot, Position.Bias bias)`
================================================================

Sample: 48 NumberFormatter
----------------------------------------------------------------
1. `void setValueClass(Class<?> classType)`: This method sets the class type of the value to be formatted.
2. `Class<?> getValueClass()`: This method returns the class type of the value being formatted.
3. `void setMinimum(Number min)`: This method sets the minimum allowable value.
4. `Number getMinimum()`: This method returns the minimum allowable value.
5. `void setMaximum(Number max)`: This method sets the maximum allowable value.
================================================================

Sample: 49 ParagraphView
----------------------------------------------------------------
1. `float getMinimumSpan(int axis)`: This method returns the minimum span for the paragraph along an axis.
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the paragraph along an axis.
3. `void setParent(View parent)`: This method sets the parent view of this ParagraphView.
4. `void setInsets(float top, float left, float bottom, float right)`: This method sets the insets for the paragraph view.
5. `Shape modelToView(int pos, Shape a, Position.Bias b)`: This method returns the Shape that represents the current allocation of the most shallow view containing the given position.
================================================================

Sample: 50 PasswordView
----------------------------------------------------------------
1. `int modelToView(int pos)`: This method converts the model location to a view location.
2. `int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)`: This method converts the given place in the view coordinate space to the nearest representative location in the model.
3. `int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet): This method returns the next visual position for the cursor, in either the east or south direction.
4. `void damageRange(int p0, int p1)`: This method indicates damage from a change.
5. `void damageRange(Polygon p0, Polygon p1)`: This method indicates damage from a change within the given bounds.
================================================================

Sample: 51 PlainDocument
----------------------------------------------------------------
1. `void insertString(int offset, String str, AttributeSet a)`: This method inserts the specified text at the given offset position in the document with the specified attributes.
   
2. `void remove(int offs, int len)`: This method removes the specified range of characters from the document.

3. `Object getProperty(Object key)`: This method returns the attribute set for a given key.

4. `void putProperty(Object key, Object value)`: This method associates the specified value with the specified key in the property storage.

5. `void setDocumentFilter(DocumentFilter filter)`: This method sets the document filter for this PlainDocument.
================================================================

Sample: 52 PlainView
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the view.
2. `int getHeight()`: This method returns the height of the view.
3. `Element getElement(int pos)`: This method returns the element represented by the view at the specified position.
4. `void insertUpdate(DocumentEvent e, Shape a, ViewFactory f)`: This method inserts an update to the view when the document changes.
5. `void removeUpdate(DocumentEvent e, Shape a, ViewFactory f)`: This method removes an update from the view when the document changes.
================================================================

Sample: 53 Position.Bias
----------------------------------------------------------------
1. `Position.Bias Forward()`: Returns the bias that represents a position closer to the next character in the text.
2. `Position.Bias Backward()`: Returns the bias that represents a position closer to the previous character in the text.
3. `String toString()`: Returns a string representation of the Position.Bias object.
4. `boolean isForward()`: Returns true if the bias is for a position closer to the next character in the text.
5. `boolean isBackward()`: Returns true if the bias is for a position closer to the previous character in the text.
================================================================

Sample: 54 Segment
----------------------------------------------------------------
1. `char first()`: Returns the first character in the segment.
2. `char last()`: Returns the last character in the segment.
3. `int offset`: Returns the offset of the segment.
4. `int count()`: Returns the number of characters in the segment.
5. `char charAt(int index)`: Returns the character at the specified index in the segment.
================================================================

Sample: 55 SimpleAttributeSet
----------------------------------------------------------------
1. `void setBold(boolean bold)`: This method sets whether the text should be displayed as bold.
2. `void setItalic(boolean italic)`: This method sets whether the text should be displayed as italic.
3. `void setForeground(Color fg)`: This method sets the text color.
4. `void setBackground(Color bg)`: This method sets the background color for the text.
5. `void setFont(Font font)`: This method sets the font for the text.
================================================================

Sample: 56 StringContent
----------------------------------------------------------------
1. `void insertString(int where, String str)`: This method inserts the specified string at the specified position in the content.
2. `void remove(int where, int nitems)`: This method removes the specified number of items starting from the specified position in the content.
3. `String getString(int where, int len)`: This method returns the substring of content starting from the specified position with the specified length.
4. `CharSequence getChars(int where, int len)`: This method returns the characters starting from the specified position with the specified length as a CharSeqeunce.
5. `void replace(int where, int nitems, String chars)`: This method replaces the specified number of items starting from the specified position with the specified characters in the content.
================================================================

Sample: 57 StyleConstants
----------------------------------------------------------------
1. `void setBold( AttributeSet a, boolean bold)`: Sets the bold attribute for the specified AttributeSet.
2. `void setItalic( AttributeSet a, boolean italic)`: Sets the italic attribute for the specified AttributeSet.
3. `void setForeground( MutableAttributeSet attr, Color fg)`: Sets the foreground color for the specified MutableAttributeSet.
4. `void setFontFamily( MutableAttributeSet attr, String family)`: Sets the font family for the specified MutableAttributeSet.
5. `void setFontSize( MutableAttributeSet attr, int size)`: Sets the font size for the specified MutableAttributeSet.
================================================================

Sample: 58 StyleConstants.CharacterConstants
----------------------------------------------------------------
1. `void setBold(AttributeSet attr, boolean bold)`: This method sets the bold attribute for the specified attribute set.
2. `void setItalic(AttributeSet attr, boolean italic)`: This method sets the italic attribute for the specified attribute set.
3. `void setUnderline(AttributeSet attr, boolean underline)`: This method sets the underline attribute for the specified attribute set.
4. `void setStrikeThrough(AttributeSet attr, boolean strikethrough)`: This method sets the strike-through attribute for the specified attribute set.
5. `void setFontFamily(AttributeSet attr, String fontFamily)`: This method sets the font family attribute for the specified attribute set.
================================================================

Sample: 59 StyleConstants.ColorConstants
----------------------------------------------------------------
1. `Color foregroundColor()`: Returns the foreground color.
2. `void setForegroundColor(Color color)`: Sets the foreground color.
3. `Color backgroundColor()`: Returns the background color.
4. `void setBackgroundColor(Color color)`: Sets the background color.
5. `boolean isBold()`: Returns true if the bold attribute is set, false otherwise.
================================================================

Sample: 60 StyleConstants.FontConstants
----------------------------------------------------------------
1. `public static Font getFont(AttributeSet attr)`: This method returns the font from the given attribute set.
2. `public static void setFont(AttributeSet attr, Font font)`: This method sets the font in the given attribute set to the specified font.
3. `public static void setBold(AttributeSet attr, boolean bold)`: This method sets whether the text in the given attribute set should be bold.
4. `public static void setItalic(AttributeSet attr, boolean italic)`: This method sets whether the text in the given attribute set should be italicized.
5. `public static void setFontSize(AttributeSet attr, int size)`: This method sets the font size in the given attribute set to the specified size.
================================================================

Sample: 61 StyleConstants.ParagraphConstants
----------------------------------------------------------------
1. `boolean getAlignment()`: This method returns the alignment settings for the paragraph.
2. `void setAlignment(boolean align)`: This method sets the alignment settings for the paragraph.
3. `float getLineSpacing()`: This method returns the line spacing for the paragraph.
4. `void setLineSpacing(float spacing)`: This method sets the line spacing for the paragraph.
================================================================

Sample: 62 StyleContext
----------------------------------------------------------------
1. `Style addStyle(String nm, Style parent)`: This method adds a new style with the given name and parent style.
2. `void removeStyle(String nm)`: This method removes the style with the given name.
3. `Style getStyle(String nm)`: This method retrieves the style with the given name.
4. `Enumeration<?> getStyleNames()`: This method returns an enumeration of all the style names.
5. `void addAttribute(AttributeSet name, Object value)`: This method adds an attribute with the given name and value to all styles.
================================================================

Sample: 63 StyledEditorKit
----------------------------------------------------------------
1. `void setCharacterAttributes(AttributeSet attr, boolean replace)`: This method sets the character attributes for the current selection or the input attributes.
2. `void setParagraphAttributes(AttributeSet attr, boolean replace)`: This method sets the paragraph attributes for the current selection or the input attributes.
3. `void setLogicalStyle(Style s)`: This method sets the logical style for the current paragraph.
4. `void setCharacterAttributes(AttributeSet attr, boolean replace, boolean update)`: This method sets the character attributes for either the input attributes, the input range or the current selection.
5. `void setParagraphAttributes(AttributeSet attr, boolean replace, boolean update)`: This method sets the paragraph attributes for either the input attributes, the input range or the current selection.
================================================================

Sample: 64 StyledEditorKit.AlignmentAction
----------------------------------------------------------------
1. `void setAlignment(StyledDocument doc, JTextPane textPane, int align)`: This method sets the alignment for the selected text in the given StyledDocument and JTextPane.
2. `int getAlignment()`: This method returns the current alignment of the selected text.
3. `void center(JTextComponent c)`: This method centers the text in the JTextComponent.
4. `void justify(JTextComponent c)`: This method justifies the text in the JTextComponent.
5. `void right(JTextComponent c)`: This method aligns the text to the right in the JTextComponent.
================================================================

Sample: 65 StyledEditorKit.BoldAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method performs the action on the specified event.
2. `String getActionCommand()`: This method returns the command String for the action event.
3. `StyledEditorKit getEditorKit(JTextComponent c)`: This method returns the editor kit used by the given text component.
4. `String getMacroText(Action a)`: This method returns the macro text description for the specified action.
5. `void setEditorKit(EditorKit kit)`: This method sets the editor kit for the StyledEditorKit.
================================================================

Sample: 66 StyledEditorKit.FontFamilyAction
----------------------------------------------------------------
1. `void setFontFamily(String family)`: This method sets the font family for the selected text in the styled document.

2. `String[] getFamilyNames()`: This method returns an array of font family names available in the system.

3. `boolean isLegalCharacter(char c)`: This method determines whether a character is valid for use in a font family name.

4. `String getFamilyName(String fontFamily)`: This method returns the actual font family name for a given family name.

5. `void actionPerformed(ActionEvent e)`: This method is invoked when an action occurs.
================================================================

Sample: 67 StyledEditorKit.FontSizeAction
----------------------------------------------------------------
1. `void increaseFontSize(float size)`: This method increases the font size of the current selection.
2. `void decreaseFontSize(float size)`: This method decreases the font size of the current selection.
3. `void setFontSize(float size)`: This method sets the font size of the current selection to the specified size.
4. `float getFontSize()`: This method returns the font size of the current selection.
5. `void selectFontSize(float size)`: This method selects text in the editor that has the specified font size.
================================================================

Sample: 68 StyledEditorKit.ForegroundAction
----------------------------------------------------------------
1. `void setForeground(Color fg)`: This method sets the foreground color for the selected text.
2. `Color getForeground()`: This method returns the foreground color of the selected text.
3. `void setActionCommand(String command)`: This method sets the action command for this action.
4. `String getActionCommand()`: This method returns the action command for this action.
5. `void actionPerformed(ActionEvent e)`: This method performs the action associated with this action.
================================================================

Sample: 69 StyledEditorKit.ItalicAction
----------------------------------------------------------------
1. `void setItalic(boolean italic)`: This method sets whether the selected text should be italic.
2. `boolean isItalic()`: This method returns true if the selected text is italic, false otherwise.
3. `StyledEditorKit.FontFamilyAction(String family)`: This method sets the font family for the selected text.
4. `StyledEditorKit.FontSizeAction(String size, int points)`: This method sets the font size for the selected text.
5. `void toggleItalic()`: This method toggles the italic style of the selected text.
================================================================

Sample: 70 StyledEditorKit.StyledTextAction
----------------------------------------------------------------
1. `void insertHTML(Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts HTML into a document at the specified offset position with given tag information.
2. `void removeColor(JTextComponent textComponent)`: This method removes the color attributes from the selected text in the JTextComponent.
3. `Style addAttributes(Style style, AttributeSet attr)`: This method adds the specified attributes to the given style.
4. `void scrollToReference(String reference)`: This method scrolls the view of the associated JTextComponent so that the referenced position becomes visible.
5. `void writeHTML(Writer out, Document doc, int pos, int len)`: This method writes out HTML content from the specified position for the given length in the document to the provided writer.
================================================================

Sample: 71 StyledEditorKit.UnderlineAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent e)`: This method defines the actionPerformed behavior for this action.
2. `void actionPropertyChanged(ActionEvent e)`: This method is called when a property of the Action has changed.
3. `void customize(EditorKit kit, ViewFactory factory)`: This method customizes the appearance and behavior of the editor.
4. `void update(StyledEditorKit kit, JTextComponent comp, AttributeSet attr)`: This method updates the given attributes in the kit.
5. `void actionPerformed(ActionEvent e, JTextComponent textComponent)`: This method defines the actionPerformed behavior for this action on a specific text component.
================================================================

Sample: 72 TableView
----------------------------------------------------------------
1. `int getRowCount()`: Returns the number of rows in the table.
2. `int getColumnCount()`: Returns the number of columns in the table.
3. `void setValueAt(Object value, int row, int column)`: Sets the value at the specified row and column in the table.
4. `Object getValueAt(int row, int column)`: Returns the value at the specified row and column in the table.
5. `void clear()`: Clears all the data in the table.
================================================================

Sample: 73 TabSet
----------------------------------------------------------------
1. `int getTabCount()`: This method returns the number of tabs in this TabSet.
2. `TabStop getTab(int index)`: This method returns the TabStop object at the specified index in this TabSet.
3. `boolean equals(Object o)`: This method compares the specified object with this TabSet for equality.
4. `int hashCode()`: This method returns the hash code value for this TabSet.
5. `String toString()`: This method returns a string representation of this TabSet.
================================================================

Sample: 74 TabStop
----------------------------------------------------------------
1. `double getPosition()`: This method returns the position of the tab stop.
2. `void setPosition(double position)`: This method sets the position of the tab stop.
3. `int getAlignment()`: This method returns the alignment of the tab stop.
4. `void setAlignment(int alignment)`: This method sets the alignment of the tab stop.
5. `int getLeader()`: This method returns the leader style for the tab stop.
================================================================

Sample: 75 TextAction
----------------------------------------------------------------
1. `void actionPerformed(ActionEvent event)`: This method is called when the action is performed.
2. `String getText()`: This method returns the text associated with the action.
3. `void setText(String text)`: This method sets the text associated with the action.
4. `JTextComponent getTextComponent()`: This method returns the text component associated with the action.
5. `void setEnabled(boolean enabled)`: This method enables or disables the action.
================================================================

Sample: 76 Utilities
----------------------------------------------------------------
1. int getTabbedTextOffset(int x, javax.swing.text.Segment s)

This method returns the offset within the given segment that represents the tab expansion at the specified location.

2. int getTabbedTextWidth(javax.swing.text.Segment s, java.awt.FontMetrics metrics, int x, javax.swing.text.TabExpander e, int pos)

This method calculates the width of a segment of text between two tab stops.

3. int getRowStart(javax.swing.text.JTextComponent c, int offs)

This method returns the offset of the start of the row that contains the specified location.

4. int getRowHeight(javax.swing.text.JTextComponent c)

This method returns the height of a row in the specified text component.

5. int getHeight2S(byte[] info, javax.swing.text.TabExpander e, int startOffset, int x) 

This method returns the height of a line of text, measuring up to the specified location.
================================================================

Sample: 77 View
----------------------------------------------------------------
1. `Shape modelToView(int pos, Shape a, Position.Bias b)`: Return type: java.awt.Shape, Parameters: int pos, java.awt.Shape a, javax.swing.text.Position.Bias b
2. `int viewToModel(float x, float y, Shape a, Position.Bias[] biasReturn)`: Return type: int, Parameters: float x, float y, java.awt.Shape a, javax.swing.text.Position.Bias[] biasReturn
3. `View breakView(int axis, int offset, float pos, float len)`: Return type: javax.swing.text.View, Parameters: int axis, int offset, float pos, float len
4. `View getView(int n)`: Return type: javax.swing.text.View, Parameters: int n
5. `int getViewCount()`: Return type: int, Parameters: None
================================================================

Sample: 78 WrappedPlainView
----------------------------------------------------------------
1. `int drawUnselectedText(Graphics g, int x, int y, int p0, int p1)`: Draw the given range of text in the given Graphics context, accumulating the lines painted in an array. Returns the y location at the end of the region.
2. `int findOffsetToCharactersUnits(int pos, int direction)`: Converts the given position in the model to a view coordinate.
3. `void forwardUpdate(DocumentEvent.ElementChange ec, DocumentEvent e, Shape a, ViewFactory f)`: Informs the view that there was a change in the document.
4. `void setInsets(int top, int left, int bottom, int right)`: Set the inset which is used to calculate how to place the child views.
5. `void updateMetrics()`: Update any cached representation of the view.
================================================================

Sample: 79 ZoneView
----------------------------------------------------------------
1. `Shape getChildAllocation(int index, Shape a)`: This method returns the shape allocated to a child view.
2. `int getViewIndexAtPosition(int pos)`: This method returns the child view index at a given position.
3. `void setSize(float width, float height)`: This method sets the size of the zone view.
4. `void setAlignment(int align)`: This method sets the alignment of the zone view.
5. `void paintChild(Graphics g, Rectangle alloc, int index)`: This method paints the child view at the specified index.
================================================================

