Sample: 0 LogStream
----------------------------------------------------------------
1. `void put(String msg)`: This method writes the specified message to the log stream.
2. `void write(char[] s, int off, int len)`: This method writes a portion of an array of characters to the log stream.
3. `void write(int b)`: This method writes a byte to the log stream.
4. `void write(byte[] b, int off, int len)`: This method writes a portion of a byte array to the log stream.
5. `void flush()`: This method flushes the log stream.
================================================================

Sample: 1 ObjID
----------------------------------------------------------------
1. `int hashCode()`: This method returns a hash code value for the object.
2. `static ObjID read(DataInput in) throws IOException`: This method reads an object ID from a data input stream.
3. `void write(DataOutput out) throws IOException`: This method writes the object ID to a data output stream.
4. `String toString()`: This method returns a string representation of the object ID.
5. `boolean equals(Object obj)`: This method compares the specified object with this object for equality.
================================================================

Sample: 2 Operation
----------------------------------------------------------------
1. `String[] getInvocationSignature()`: Returns the signature of the remote method that the current operation encapsulates.

2. `Object getParameterValue(int index)`: Returns the parameter value at the specified index.

3. `int getOperation(): Returns the identifier for the operation.

4. `void setParameter(int index, Object value)`: Sets the parameter at the specified index to the specified value.

5. `void setResponse(Object response)`: Sets the response value for the operation.
================================================================

Sample: 3 RemoteObject
----------------------------------------------------------------
1. `String getRef()`: Returns the remote reference for the remote object.
2. `void setRef(String ref)`: Sets the remote reference for the remote object.
3. `void exportObject(Remote obj)`: Exports the remote object to make it available to receive incoming calls.
4. `void unexportObject(Remote obj)`: Unexports the remote object, removing it from the RMI runtime.
5. `String getLog()`: Returns a string representation of the object's current remote log.
================================================================

Sample: 4 RemoteObjectInvocationHandler
----------------------------------------------------------------
1. `Object invoke(Remote obj, Method method, Object[] params)`: This method invokes a method on a remote object.
2. `Remote getRef()`: This method returns the remote reference for the remote object associated with this invocation handler.
3. `RemoteObjectInvocationHandler(RemoteObject obj)`: Constructor that creates a new RemoteObjectInvocationHandler with the specified RemoteObject.
4. `Object writeReplace()`: This method returns a replacement object during serialization.
5. `Object invoke(Remote obj, Method method, Object[] params, long opnum)`: This method invokes a method on a remote object with a specific operation number.
================================================================

Sample: 5 RemoteServer
----------------------------------------------------------------
1. `int getClientHost()`: Returns the hostname of the client, as given in the request that started the current operation.
2. `int getClientPort()`: Returns the port number of the client, as given in the request that started the current operation.
3. `Object getClientMeta()`: Returns a reference to the remote client's meta object.
4. `void setLog(OutputStream out)`: Sets the stream for the output log records.
================================================================

Sample: 6 RemoteStub
----------------------------------------------------------------
1. `int hashCode()`: This method returns a hash code value for the object.
2. `String toString()`: This method returns a string representation of the object.
3. `void readObject(ObjectInput in) throws IOException, ClassNotFoundException`: This method deserializes the object. 
4. `void writeObject(ObjectOutput out) throws IOException`: This method serializes the object.
5. `RemoteStub clone() throws CloneNotSupportedException`: This method creates and returns a copy of this object.
================================================================

Sample: 7 RMIClassLoader
----------------------------------------------------------------
1. `Class<?> loadClass(String codebase, String name)`: This method loads a class from the specified codebase with the given name.
2. `Class getProviderClass(String className)`: This method returns the class with the specified name using the default provider.
3. `ClassLoader getClassLoader(String codebase)`: This method returns the class loader for the specified codebase.
4. `Object getSecurityContext(ClassLoader loader)`: This method returns the security context for the specified class loader.
5. `String getSecurityKey()`: This method returns the security key for the current context.
================================================================

Sample: 8 RMIClassLoaderSpi
----------------------------------------------------------------
1. `Class loadClass(String codebase, String name)`: This method loads the class with the specified name from the provided codebase.
  
2. `Class loadProxyClass(String codebase, String[] interfaces)`: This method loads and returns a proxy class for the specified interfaces from the provided codebase.
  
3. `Object getSecurityContext(ClassLoader loader)`: This method returns the security context for the specified class loader.

4. `Class loadClass(String codebase, String name, ClassLoader defaultLoader)`: This method loads the class with the specified name from the provided codebase using the default class loader if necessary.

5. `Class[] loadProxyInterfaces(String codebase, String name, ClassLoader defaultLoader)`: This method loads and returns the proxy interfaces for the specified name from the provided codebase using the default class loader if necessary.
================================================================

Sample: 9 RMISocketFactory
----------------------------------------------------------------
1. `Socket createSocket()`: This method creates a socket.
2. `ServerSocket createServerSocket(int port)`: This method creates a server socket bound to the specified port.
3. `ServerSocket createServerSocket(int port, int backlog)`: This method creates a server socket and binds it to the specified port and backlog.
4. `ServerSocket createServerSocket(int port, int backlog, InetAddress bindAddress)`: This method creates a server socket and binds it to the specified port, backlog, and bind address.
5. `void setSocketFactory(RMISocketFactory fac)`: This method sets the specified RMISocketFactory as the global RMI socket factory.
================================================================

Sample: 10 UID
----------------------------------------------------------------
1. `String toString()`: This method returns a String representation of the UID object.
2. `boolean equals(Object obj)`: This method compares this UID to the specified object.
3. `int hashCode()`: This method returns a hash code value for the UID.
4. `int uidCompare(UID uid)`: This method compares this UID to the specified UID.
5. `UID(int uid)`: Constructor method to create a new UID object with the specified unique ID.
================================================================

Sample: 11 UnicastRemoteObject
----------------------------------------------------------------
1. `RemoteRef getRef()`: This method returns the RemoteRef for the remote object.
2. `void exportObject(Remote obj)`: This method exports the remote object to receive incoming remote calls.
3. `void unexportObject(Remote obj, boolean force)`: This method unexports the remote object, allowing it to no longer receive incoming remote calls.
4. `Object activate()`: This method activates the remote object and returns a stub suitable for receiving remote calls.
5. `void deactivated()`: This method deactivates the remote object.
================================================================

