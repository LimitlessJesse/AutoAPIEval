Sample: 0 AlphaComposite
----------------------------------------------------------------
1. `AlphaComposite SrcOver(float alpha)`: This method creates an AlphaComposite object with the specified alpha value for the source pixel.
2. `AlphaComposite SrcIn(float alpha)`: This method creates an AlphaComposite object that uses the source alpha channel as the composite source. 
3. `AlphaComposite DstOver(float alpha)`: This method creates an AlphaComposite object that uses the destination alpha channel as the composite destination. 
4. `AlphaComposite DstIn(float alpha)`: This method creates an AlphaComposite object that uses the destination alpha channel as the composite destination and the source alpha channel as the composite source.
================================================================

Sample: 1 AWTEvent
----------------------------------------------------------------
1. `long getWhen()`: This method returns the timestamp of when the event occurred.
2. `int getID()`: This method returns the type of the event.
3. `Object getSource()`: This method returns the object that is the source of the event.
4. `void consume()`: This method marks the event as consumed.
5. `String paramString()`: This method returns a parameter string identifying this event.
================================================================

Sample: 2 AWTEventMulticaster
----------------------------------------------------------------
1. `void AWTEventMulticaster(ActionListener a, ActionListener b)`: This method creates a new event multicaster instance with two event listeners.
2. `void remove(ActionListener oldl)`: This method removes the specified listener from this multicaster.
3. `void addAdjustmentListener(AdjustmentListener l)`: This method adds an adjustment listener to the event multicaster.
4. `void addTextListener(TextListener l)`: This method adds a text listener to the event multicaster.
5. `void removeKeyListener(KeyListener oldl)`: This method removes the specified key listener from the event multicaster.
================================================================

Sample: 3 AWTKeyStroke
----------------------------------------------------------------
1. `AWTKeyStroke[] getAWTKeyStrokes(ActionEvent ae)`: This method returns an array of AWTKeyStrokes corresponding to an ActionEvent.
2. `char getKeyChar()`: This method returns the character associated with this key stroke.
3. `int getModifiers()`: This method returns the modifiers for this key stroke.
4. `int getModifiersEx()`: This method returns the extended modifiers for this key stroke.
5. `String toString()`: This method returns a string representation of this key stroke.
================================================================

Sample: 4 AWTPermission
----------------------------------------------------------------
1. `void getName()`: This method returns the name of the permission.
2. `boolean implies(Permission permission)`: This method checks if the specified permission is implied by this permission.
3. `String getActions()`: This method returns the "actions" for the permission.
4. `void newPermissionCollection()`: This method creates a new PermissionCollection object for storing permissions.
5. `boolean equals(Object obj)`: This method compares this permission to the specified object for equality.
================================================================

Sample: 5 BasicStroke
----------------------------------------------------------------
1. `float getLineWidth()`: This method returns the line width of the BasicStroke.
2. `int getEndCap()`: This method returns the end cap style for the BasicStroke.
3. `int getLineJoin()`: This method returns the line join style for the BasicStroke.
4. `float[] getDashArray()`: This method returns the dash array for the BasicStroke.
5. `float getMiterLimit()`: This method returns the limit for the miter joins for the BasicStroke.
================================================================

Sample: 6 BorderLayout
----------------------------------------------------------------
1. `Component getLayoutComponent(String position)`: This method returns the component in the specified layout position.
2. `void addLayoutComponent(Component comp, Object constraints)`: This method adds the specified component to the layout, using the specified constraint object.
3. `void removeLayoutComponent(Component comp)`: This method removes the specified component from the layout.
4. `Component getLayoutComponent(Container target)`: This method returns the component with the specified constraints in the container's layout.
5. `Dimension preferredLayoutSize(Container parent)`: This method calculates the preferred size dimensions for the specified container.
================================================================

Sample: 7 BufferCapabilities
----------------------------------------------------------------
1. `ImageCapabilities getImageCapabilities()`: Returns the ImageCapabilities object associated with this BufferCapabilities.
2. `BufferCapabilities getFrontBufferCapabilities()`: Returns the capabilities of the front buffer.
3. `boolean isFullScreenRequired()`: Returns whether or not full-screen is required for this BufferCapabilities.
4. `boolean isPageFlipping()`: Returns whether or not page flipping is supported by this BufferCapabilities.
5. `ImageCapabilities getBackBufferCapabilities()`: Returns the capabilities of the back buffer.
================================================================

Sample: 8 BufferCapabilities.FlipContents
----------------------------------------------------------------
1. `boolean isPageFlipping`
2. `FlipContents flipContent()
3. `boolean isFullScreenRequired()
4. `boolean isPageRederred`
5. `FlipContents getNextFlip()`
================================================================

Sample: 9 Button
----------------------------------------------------------------
1. `void setLabel(String label)`: This method sets the label of the Button to the specified string.
2. `String getLabel()`: This method returns the label of the Button.
3. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the Button.
4. `void removeActionListener(ActionListener l)`: This method removes the specified ActionListener from the Button.
5. `void setEnabled(boolean enabled)`: This method enables or disables the Button based on the specified boolean value.
================================================================

Sample: 10 Canvas
----------------------------------------------------------------
1. `Graphics getGraphics()`: This method returns the Graphics context for drawing on the canvas.
2. `void setSize(int width, int height)`: This method sets the size of the canvas to the specified width and height.
3. `void setBackground(Color color)`: This method sets the background color of the canvas.
4. `void setBounds(int x, int y, int width, int height)`: This method sets the bounds of the canvas to the specified x, y, width, and height.
5. `void paint(Graphics g)`: This method paints the canvas using the specified graphics context.
================================================================

Sample: 11 CardLayout
----------------------------------------------------------------
1. `void show(Container parent, String name)`: This method displays the component with the specified name.
2. `void next(Container parent)`: This method flips to the next "card" in the container.
3. `void previous(Container parent)`: This method flips to the previous "card" in the container.
4. `void first(Container parent)`: This method flips to the first "card" in the container.
5. `void last(Container parent)`: This method flips to the last "card" in the container.
================================================================

Sample: 12 Checkbox
----------------------------------------------------------------
1. `void setLabel(String label)`: Sets the label displayed on the Checkbox.
2. `void setState(boolean state)`: Sets the state of the Checkbox.
3. `String getLabel()`: Returns the label displayed on the Checkbox.
4. `boolean getState()`: Returns the state of the Checkbox.
5. `void addItemListener(ItemListener l)`: Adds the specified item listener to receive item events from the Checkbox.
================================================================

Sample: 13 CheckboxGroup
----------------------------------------------------------------
1. `Checkbox getCurrent()`: This method returns the currently selected Checkbox in the CheckboxGroup.
2. `Checkbox getSelectedCheckbox()`:  This method retrieves the Checkbox that is currently selected in the CheckboxGroup.
3. `void setSelectedCheckbox(Checkbox box)`: This method sets the selected Checkbox in the CheckboxGroup.
4. `void setCurrent(Checkbox box)`: This method sets a specific Checkbox as the current Checkbox in the CheckboxGroup.
5. `void setSelectedCheckbox(String name)`: This method sets the selected Checkbox in the CheckboxGroup based on the Checkbox's label.
================================================================

Sample: 14 CheckboxMenuItem
----------------------------------------------------------------
1. `void setState(boolean state)`: This method sets the state of the checkbox menu item to either selected or deselected based on the boolean value passed as a parameter.
2. `boolean getState()`: This method returns the current state of the checkbox menu item, whether it is selected or deselected.
3. `void addItemListener(ItemListener l)`: This method adds an item listener to the checkbox menu item to listen for item events.
4. `void removeItemListener(ItemListener l)`: This method removes the specified item listener from the checkbox menu item.
5. `void setLabel(String label)`: This method sets the label displayed on the checkbox menu item to the specified String value.
================================================================

Sample: 15 Choice
----------------------------------------------------------------
1. `void addItem(String item)`: This method adds an item to the end of the choice list.
2. `void insert(String item, int index)`: This method inserts the specified item at the specified index in the choice list.
3. `String getItem(int index)`: This method returns the item at the specified index in the choice list.
4. `void remove(int index)`: This method removes the item at the specified index from the choice list.
5. `void removeAll()`: This method removes all items from the choice list.
================================================================

Sample: 16 Color
----------------------------------------------------------------
1. `int getRGB()`: This method returns the RGB value representing the color in the default sRGB ColorModel.
2. `int getRed()`: This method returns the red component in the range 0-255.
3. `int getGreen()`: This method returns the green component in the range 0-255.
4. `int getBlue()`: This method returns the blue component in the range 0-255.
5. `String toString()`: This method returns a string representation of the color in the format "java.awt.Color[r=red,g=green,b=blue]".
================================================================

Sample: 17 Component
----------------------------------------------------------------
1. `void setSize(int width, int height)`: This method sets the size of the component to the specified width and height.
2. `void setLocation(int x, int y)`: This method sets the location of the component to the specified x and y coordinates.
3. `Dimension getPreferredSize()`: This method returns the preferred size of the component.
4. `void setBackground(Color bg)`: This method sets the background color of the component.
5. `void setForeground(Color fg)`: This method sets the foreground color of the component.
================================================================

Sample: 18 ComponentOrientation
----------------------------------------------------------------
1. `ComponentOrientation getOrientation()`: Returns the orientation of this component.
2. `void setOrientation(ComponentOrientation orientation)`: Sets the orientation of this component.
3. `boolean isHorizontal()`: Returns true if this component's orientation is horizontal, false otherwise.
4. `void setManager(ComponentOrientation orientation)`: Sets the orientation of this component for use with left-to-right and right-to-left languages.
5. `boolean isLeftToRight()`: Returns true if the orientation of this component is left-to-right, false otherwise.
================================================================

Sample: 19 Container
----------------------------------------------------------------
1. `void add(Component comp)`: This method adds the specified component to this container.
2. `void remove(Component comp)`: This method removes the specified component from this container.
3. `Component getComponent(int index)`: This method returns the component at the specified index in this container.
4. `void removeAll()`: This method removes all components from this container.
5. `Component[] getComponents()`: This method returns an array of all the components in this container.
================================================================

Sample: 20 ContainerOrderFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus after aComponent in aContainer.
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus before aComponent in aContainer.
3. `Component getFirstComponent(Container aContainer)`: This method returns the first component in the traversal order of aContainer.
4. `Component getLastComponent(Container aContainer)`: This method returns the last component in the traversal order of aContainer.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default component to focus on when no other component has the focus in aContainer.
================================================================

Sample: 21 Cursor
----------------------------------------------------------------
1. `void setCursor(Cursor cursor)`: This method sets the cursor image to the specified cursor.
2. `Cursor getPredefinedCursor(int type)`: This method returns the system default cursor for the specified cursor type.
3. `Cursor getCustomCursor(Image cursor, Point hotSpot, String name)`: This method creates a new cursor object with the specified image, hotspot coordinates, and name.
4. `int getType()`: This method returns the type of the cursor.
5. `Point getHotSpot()`: This method returns the coordinates of the cursor's hotspot.
================================================================

Sample: 22 DefaultFocusTraversalPolicy
----------------------------------------------------------------
1. `Component getFirstComponent(Container aContainer)`: This method returns the first component in the traversal cycle for the specified container.
2. `Component getFirstComponent(Container aContainer, Component aComponent)`: This method returns the next component that should receive the focus after aComponent in the specified container.
3. `Component getLastComponent(Container aContainer)`: This method returns the last component in the traversal cycle for the specified container.
4. `Component getLastComponent(Container aContainer, Component aComponent)`: This method returns the previous component that should receive the focus before aComponent in the specified container.
5. `Component getDefaultComponent(Container aContainer)`: This method returns the default component to focus on when aContainer is first focused.
================================================================

Sample: 23 DefaultKeyboardFocusManager
----------------------------------------------------------------
1. `java.awt.Component getCurrentFocusOwner()`: This method returns the current focus owner in the system.
2. `void clearGlobalFocusOwner()`: This method clears the global focus owner.
3. `void setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy policy)`: This method sets the default focus traversal policy for all Components within the application.
4. `void setDefaultFocusTraversalKeys(int id, java.util.Set<? extends java.awt.AWTKeyStroke> keystrokes)`: This method sets the default focus traversal keys for a given traversal operation.
5. `java.awt.Component getComponentAfter(java.awt.Container aContainer, java.awt.Component aComponent)`: This method returns the Component that should receive focus after aComponent, based on the current focus traversal policy.
================================================================

Sample: 24 Desktop
----------------------------------------------------------------
1. `boolean isSupported(Desktop.Action action)`: This method checks if an action is supported on the current platform.
2. `void browse(URI uri)`: This method launches the default browser to display a URI.
3. `void edit(File file)`: This method launches the associated application to open or edit the specified file.
4. `void mail(URI mailtoURI)`: This method launches the default mail client with an optional mailto URI.
5. `void open(File file)`: This method opens the specified file with the associated application.
================================================================

Sample: 25 Dialog
----------------------------------------------------------------
1. `void setTitle(String title)`: This method sets the title of the dialog window.
2. `void setResizable(boolean resizable)`: This method sets whether the dialog window is resizable or not.
3. `void setModal(boolean modal)`: This method sets whether the dialog window is modal or not.
4. `void setLayout(LayoutManager layout)`: This method sets the layout manager for the dialog window.
5. `void setAlwaysOnTop(boolean alwaysOnTop)`: This method sets whether the dialog window should always be on top of other windows.
================================================================

Sample: 26 Dimension
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width value of the dimension.
2. `int getHeight()`: This method returns the height value of the dimension.
3. `void setSize(int width, int height)`: This method sets the size of the dimension to the specified width and height values.
4. `Dimension getSize()`: This method returns a new Dimension object with the same width and height values as the original dimension.
5. `void setSize(Dimension d)`: This method sets the size of the dimension to the same width and height values as the specified Dimension object.
================================================================

Sample: 27 DisplayMode
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the display mode.
2. `int getHeight()`: This method returns the height of the display mode.
3. `int getRefreshRate()`: This method returns the refresh rate of the display mode.
4. `int getBitDepth()`: This method returns the bit depth of the display mode.
5. `boolean equals(Object obj)`: This method checks if the specified object is equal to this display mode.
================================================================

Sample: 28 Event
----------------------------------------------------------------
1. `void consume()`: This method consumes this event so that it will not be processed in the default manner by the source which originated it.
2. `String paramString()`: This method returns a parameter string identifying this event.
3. `int x()`: This method returns the horizontal x position of the event.
4. `int y()`: This method returns the vertical y position of the event.
5. `long when()`: This method returns the time stamp of when this event occurred.
================================================================

Sample: 29 EventQueue
----------------------------------------------------------------
1. void invokeLater(Runnable runnable): This method asynchronously processes the specified runnable on the AWT event dispatching thread.
2. boolean isDispatchThread(): This method returns true if the current thread is an AWT event dispatching thread.
3. void invokeAndWait(Runnable runnable): This method executes the specified runnable on the AWT event dispatching thread and waits for it to finish.
4. boolean isEventDispatchThread(): This method determines if the current thread is the AWT event dispatch thread.
5. void invokeLater(Consumer<T> consumer, T parameter): This method asynchronously executes the specified Consumer on the AWT event dispatching thread with the specified parameter.
================================================================

Sample: 30 FileDialog
----------------------------------------------------------------
1. `String getDirectory()`: Returns the current directory.
2. `String getFile()`: Returns the selected file.
3. `int getFileType()`: Returns the type of the dialog.
4. `void setFile(String file)`: Sets the selected file to the specified file.
5. `void setDirectory(String dir)`: Sets the current directory to the specified directory.
================================================================

Sample: 31 FlowLayout
----------------------------------------------------------------
1. `void setAlignment(int align)`
2. `void setHgap(int hgap)`
3. `void setVgap(int vgap)`
4. `int getAlignment()`
5. `int getHgap()`
================================================================

Sample: 32 FocusTraversalPolicy
----------------------------------------------------------------
1. `Component getComponentAfter(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus after aComponent in aContainer.
   
2. `Component getComponentBefore(Container aContainer, Component aComponent)`: This method returns the component that should receive the focus before aComponent in aContainer.

3. `Component getDefaultComponent(Container aContainer)`: This method returns the default component to focus on in aContainer.

4. `Component getFirstComponent(Container aContainer)`: This method returns the first component that should receive the focus in aContainer.

5. `Component getLastComponent(Container aContainer)`: This method returns the last component that should receive the focus in aContainer.
================================================================

Sample: 33 Font
----------------------------------------------------------------
1. `String getFamily()`: This method returns the family name of the font.
2. `int getSize()`: This method returns the point size of the font.
3. `int getStyle()`: This method returns the style of the font.
4. `int hashCode()`: This method returns a hash code for this Font.
5. `boolean isPlain()`: This method returns true if the font is plain (not bold, italic, or bold italic).
================================================================

Sample: 34 FontMetrics
----------------------------------------------------------------
1. `int stringWidth(String str)`: This method returns the total advance width for showing the specified String in the current Font.
2. `Rectangle2D getStringBounds(String str)`: This method returns the bounds for the specified text in the current font.
3. `int getAscent()`: This method returns the ascent of the current Font.
4. `int getDescent()`: This method returns the descent of the current Font.
5. `int getHeight()`: This method returns the height of the current Font.
================================================================

Sample: 35 Frame
----------------------------------------------------------------
1. `void setTitle(String title)`: Sets the title of the frame.
2. `void setSize(int width, int height)`: Sets the size of the frame.
3. `void setVisible(boolean visible)`: Sets the visibility of the frame.
4. `void setLocation(int x, int y)`: Sets the location of the frame on the screen.
5. `void setResizable(boolean resizable)`: Sets whether the frame is resizable by the user.
================================================================

Sample: 36 GradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: Returns the color at the starting point of the gradient.
2. `Color getColor2()`: Returns the color at the ending point of the gradient.
3. `Point2D getPoint1()`: Returns the starting point of the gradient.
4. `Point2D getPoint2()`: Returns the ending point of the gradient.
5. `boolean isCyclic()`: Returns true if the gradient cycles repeatedly between the two colors.
================================================================

Sample: 37 Graphics
----------------------------------------------------------------
1. `void drawLine(int x1, int y1, int x2, int y2)`: This method draws a line between the coordinates (x1, y1) and (x2, y2).
2. `void drawRect(int x, int y, int width, int height)`: This method draws a rectangle at the specified location with the specified width and height.
3. `void fillRect(int x, int y, int width, int height)`: This method fills a rectangle at the specified location with the specified width and height.
4. `void drawOval(int x, int y, int width, int height)`: This method draws an oval with the specified bounding box.
5. `void fillOval(int x, int y, int width, int height)`: This method fills an oval with the specified bounding box.
================================================================

Sample: 38 Graphics2D
----------------------------------------------------------------
1. `void setColor(Color c)`: Sets the current color to the specified color.
2. `void setRenderingHint(RenderingHints.Key hintKey, Object hintValue)`: Sets the value of a single preference for the rendering algorithms.
3. `void draw(Shape s)`: Draws the outline of the specified Shape.
4. `void fill(Shape s)`: Fills the interior of the specified Shape.
5. `void setStroke(Stroke s)`: Sets the Stroke object used to draw lines.
================================================================

Sample: 39 GraphicsConfigTemplate
----------------------------------------------------------------
1. `int getPriority()`: This method returns the priority value associated with this GraphicsConfig.
2. `int getVisualID()` : This method returns the unique visual ID value of this GraphicsConfiguration.
3. `BufferCapabilities getBufferCapabilities()`: This method returns the BufferCapabilities of this GraphicsConfiguration.
4. `ImageCapabilities getImageCapabilities()`: This method returns the ImageCapabilities of this GraphicsConfiguration.
5. `Rectangle getBounds()`: This method returns the bounds of the GraphicsConfiguration.
================================================================

Sample: 40 GraphicsConfiguration
----------------------------------------------------------------
1. GraphicsDevice[] getDevices(): This method returns an array of all of the screen devices that are associated with this GraphicsConfiguration.
2. Rectangle getBounds(): This method returns the bounds of the graphics configuration area.
3. DisplayMode[] getDisplayModes(): This method returns an array of all of the display modes that are available on this GraphicsConfiguration.
4. Graphics2D getGraphics(): This method returns a Graphics2D object for rendering into the specified graphics configuration.
5. BufferedImage createCompatibleImage(int width, int height): This method creates a BufferedImage with a data layout and color model compatible with this GraphicsConfiguration.
================================================================

Sample: 41 GraphicsDevice
----------------------------------------------------------------
1. `GraphicsConfiguration getDefaultConfiguration()`: This method returns the default GraphicsConfiguration associated with this GraphicsDevice.
2. `DisplayMode getDisplayMode()`: This method returns the current display mode of this GraphicsDevice.
3. `DisplayMode[] getDisplayModes()`: This method returns an array of all display modes available on this GraphicsDevice.
4. `int getType()`: This method returns the type of this GraphicsDevice, such as TYPE_RASTER_SCREEN or TYPE_PRINTER.
5. `void setFullScreenWindow(Window w)`: This method sets the Window for full-screen exclusive mode on this GraphicsDevice.
================================================================

Sample: 42 GraphicsEnvironment
----------------------------------------------------------------
1. `GraphicsDevice[] getScreenDevices()`: This method returns an array of all the screen devices available.
2. `GraphicsDevice getDefaultScreenDevice()`: This method returns the default screen device.
3. `Font[] getAllFonts()`: This method returns an array of all the available fonts on the system.
4. `GraphicsConfiguration[] getConfigurations()`: This method returns an array of all the graphics configurations available on the system.
5. `Font getDefaultScreenDeviceFont()`: This method returns the default font for the default screen device.
================================================================

Sample: 43 GridBagConstraints
----------------------------------------------------------------
1. `void setConstraints(GridBagConstraints constr)`: This method sets the constraints for the cell at the specified position.
2. `GridBagConstraints getConstraints()`: This method returns the constraints for the cell at the current position.
3. `void gridwidth(int width)`: This method specifies the number of cells in a row for the current component until the next line break.
4. `void gridheight(int height)`: This method specifies the number of cells in a column for the current component until the next line break.
5. `void weightx(double weight)`: This method specifies how much additional space the component should occupy along the x-axis.
================================================================

Sample: 44 GridBagLayout
----------------------------------------------------------------
1. `void setConstraints(GridBagConstraints constraints)`: Sets the constraints for this layout.
2. `void setLayoutDimensions(int[] minSizes, int[] prefSizes, int[] maxSizes, int[] weights, boolean fill)`: Sets the column and row sizes, their preferred sizes, and whether they should be filled from end to end.
3. `void setLayoutDimensions(double[] minSizes, double[] prefSizes, double[] maxSizes, double[] weights, boolean fill)`: Sets the column and row sizes, their preferred sizes, and whether they should be filled from end to end using double values.
4. `void setConstraints(int gridx, int gridy, int gridwidth, int gridheight, double weightx, double weighty, int anchor, int fill, Insets insets, int ipadx, int ipady)`: Sets the constraints for the specified cell in the grid.
5. `void setConstraints(GridBagConstraints constraints, GridBagConstraints newConstraints)`: Sets the constraints for a specified cell using a separate GridBagConstraints object.
================================================================

Sample: 45 GridBagLayoutInfo
----------------------------------------------------------------
1. `GridBagLayoutInfo()` - Constructor for a new GridBagLayoutInfo object.
2. `GridBagLayoutInfo(GridBagLayout layout)` - Constructor for a new GridBagLayoutInfo object with the given GridBagLayout.
3. `GridBagLayout getLayout()` - Returns the GridBagLayout associated with this GridBagLayoutInfo.
4. `void setConstraints(Component comp, GridBagConstraints constraints)` - Associates the specified constraints with the specified component.
5. `GridBagConstraints getConstraints(Component comp)` - Returns the constraints associated with the specified component.
================================================================

Sample: 46 GridLayout
----------------------------------------------------------------
1. `int getHgap()`: This method returns the horizontal gap between components.
2. `void setHgap(int hgap)`: This method sets the horizontal gap between components.
3. `int getVgap()`: This method returns the vertical gap between components.
4. `void setVgap(int vgap)`: This method sets the vertical gap between components.
5. `void setRows(int rows)`: This method sets the number of rows in this grid layout.
================================================================

Sample: 47 Image
----------------------------------------------------------------
1. `int getWidth()`: Returns the width of this image.
2. `int getHeight()`: Returns the height of this image.
3. `void flush()`: Clears all resources from the image.
4. `Image getScaledInstance(int width, int height, int hints)`: Returns a scaled version of the image.
5. `Graphics getGraphics()`: Creates a graphics context for drawing to this image.
================================================================

Sample: 48 ImageCapabilities
----------------------------------------------------------------
1. boolean isTrueVolatile()
2. boolean isTrueAccelerated()
3. boolean isTrueAcceleratedMemory()
4. boolean isTrueAcceleratedOffscreen()
5. boolean isTrueAcceleratedSurfaceLost()
================================================================

Sample: 49 Insets
----------------------------------------------------------------
1. `int top()`: This method returns the top inset value.
2. `int bottom()`: This method returns the bottom inset value.
3. `int left()`: This method returns the left inset value.
4. `int right()`: This method returns the right inset value.
5. `boolean equals(Object obj)`: This method compares this Insets object to the specified object.
================================================================

Sample: 50 JobAttributes
----------------------------------------------------------------
1. `java.awt.JobAttributes.SidesType getSides()`
   Return Type: java.awt.JobAttributes.SidesType
   Parameters: none

2. `MediaSize getMediaSize()`
   Return Type: MediaSize
   Parameters: none

3. `boolean setDialog(java.awt.Dialog dialog)`
   Return Type: boolean
   Parameters: java.awt.Dialog dialog

4. `boolean setMinPage(int minPage)`
   Return Type: boolean
   Parameters: int minPage

5. `boolean setPrintServiceAttributeSet(javax.print.attribute.PrintServiceAttributeSet aset)`
   Return Type: boolean
   Parameters: javax.print.attribute.PrintServiceAttributeSet aset
================================================================

Sample: 51 JobAttributes.DefaultSelectionType
----------------------------------------------------------------
1. `java.awt.JobAttributes.DefaultSelectionType getSelected()`:
   - Return type: java.awt.JobAttributes.DefaultSelectionType
   - Parameters: None

2. `void setSelected(java.awt.JobAttributes.DefaultSelectionType selectionType)`:
   - Return type: void
   - Parameters: java.awt.JobAttributes.DefaultSelectionType selectionType

3. `boolean isSelected(java.awt.JobAttributes.DefaultSelectionType selectionType)`:
   - Return type: boolean
   - Parameters: java.awt.JobAttributes.DefaultSelectionType selectionType

4. `String toString()`:
   - Return type: String
   - Parameters: None

5. `boolean equals(Object obj)`:
   - Return type: boolean
   - Parameters: Object obj
================================================================

Sample: 52 JobAttributes.DestinationType
----------------------------------------------------------------
1. `int getDestinationType()`: This method returns the destination type of the job attributes.
2. `void setDestinationType(int destinationType)`: This method sets the destination type of the job attributes.
3. `boolean equals(Object obj)`: This method compares this JobAttributes with the specified object for equality.
4. `int hashCode()`: This method returns a hash code value for the JobAttributes object.
5. `String toString()`: This method returns a string representation of the JobAttributes object.
================================================================

Sample: 53 JobAttributes.DialogType
----------------------------------------------------------------
1. `java.awt.JobAttributes.DialogType PREEMPTIVE()`
2. `java.awt.JobAttributes.DialogType MODELESS()`
3. `java.awt.JobAttributes.DialogType MODAL()`
4. `java.awt.JobAttributes.DialogType PROPERTYLESS()`
5. `java.awt.JobAttributes.DialogType POPUP()`

================================================================

Sample: 54 JobAttributes.MultipleDocumentHandlingType
----------------------------------------------------------------
1. `MultipleDocumentHandlingType.BOOKLET`
2. `MultipleDocumentHandlingType.SEPARATE_DOCUMENTS`
3. `MultipleDocumentHandlingType.SINGLE_DOCUMENT`
4. `MultipleDocumentHandlingType.STACK`
5. `MultipleDocumentHandlingType.STAPLE_BOTTOM_LEFT`
================================================================

Sample: 55 JobAttributes.SidesType
----------------------------------------------------------------
1. `int getValue()`: This method returns the value of the sides type.
2. `JobAttributes.SidesType setBothSides(int value)`: This method sets the value of both sides to the specified value.
3. `JobAttributes.SidesType setOneSide(int side, int value)`: This method sets the value of one side to the specified value.
4. `JobAttributes.SidesType setTwoSides(int side1, int value1, int side2, int value2)`: This method sets the values of two sides to the specified values.
5. `String toString()`: This method returns a string representation of the sides type.
================================================================

Sample: 56 KeyboardFocusManager
----------------------------------------------------------------
1. `void addKeyEventDispatcher(KeyEventDispatcher dispatcher)`: This method adds a KeyEventDispatcher to the current KeyboardFocusManager.
2. `void removeKeyEventDispatcher(KeyEventDispatcher dispatcher)`: This method removes a previously added KeyEventDispatcher from the KeyboardFocusManager.
3. `KeyEventDispatcher getCurrentKeyEventDispatcher()`: This method returns the current KeyEventDispatcher for the KeyboardFocusManager.
4. `void addPropertyChangeListener(String propertyName, PropertyChangeListener listener)`: This method adds a PropertyChangeListener to listen for changes in a specific property.
5. `void removePropertyChangeListener(String propertyName, PropertyChangeListener listener)`: This method removes a previously added PropertyChangeListener from listening for changes in a specific property.
================================================================

Sample: 57 Label
----------------------------------------------------------------
1. `String getText()`: This method returns the text of the label.
2. `void setText(String text)`: This method sets the text of the label to the specified text.
3. `Dimension getPreferredSize()`: This method returns the preferred size of the label.
4. `Color getBackground()`: This method returns the background color of the label.
5. `void setBackground(Color c)`: This method sets the background color of the label to the specified color.
================================================================

Sample: 58 LinearGradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: This method returns the starting color of the gradient.
2. `Point2D getPoint1()`: This method returns the starting point of the gradient.
3. `Color getColor2()`: This method returns the ending color of the gradient.
4. `Point2D getPoint2()`: This method returns the ending point of the gradient.
5. `CycleMethod getCycleMethod()`: This method returns the cycle method of the gradient.
================================================================

Sample: 59 List
----------------------------------------------------------------
1. `void add(String item)`: This method adds the specified item to the end of the list.
2. `void removeAll()`: This method removes all of the items from the list.
3. `int getItemCount()`: This method returns the number of items in the list.
4. `String getItem(int index)`: This method returns the item at the specified index in the list.
5. `void select(int index)`: This method selects the item at the specified index in the list.
================================================================

Sample: 60 MediaTracker
----------------------------------------------------------------
1. `void addImage(Image image, int id)`: Adds an image to the list of images being tracked by the MediaTracker.
2. `void removeImage(Image image)`: Removes the specified image from the list of images being tracked by the MediaTracker.
3. `void waitForAll()`: Causes this method to wait until all of the images tracked by this MediaTracker have finished loading.
4. `boolean checkAll()`: Checks the status of all the images.
5. `boolean checkID(int id)`: Checks the status of the specified image ID.
================================================================

Sample: 61 Menu
----------------------------------------------------------------
1. `void add(MenuComponent m)`: Adds the specified menu component to this menu.
2. `void remove(int index)`: Removes the menu item at the specified index in this menu.
3. `MenuShortcut getShortcut()`: Returns the shortcut key associated with this menu item.
4. `int getItemCount()`: Returns the number of items on this menu.
5. `MenuComponent getMenuComponent(int index)`: Returns the menu component at the specified index in this menu.
================================================================

Sample: 62 MenuBar
----------------------------------------------------------------
1. `Menu add(Menu m)`: This method adds a new Menu to the MenuBar.
2. `void remove(int index)`: This method removes the Menu at the specified index from the MenuBar.
3. `Menu getMenu(int index)`: This method returns the Menu at the specified index from the MenuBar.
4. `int getMenuCount()`: This method returns the number of Menus in the MenuBar.
5. `void remove(Menu m)`: This method removes the specified Menu from the MenuBar.
================================================================

Sample: 63 MenuComponent
----------------------------------------------------------------
1. `Dimension getPreferredSize()`: This method returns the preferred size of this menu component.
2. `void setLocation(int x, int y)`: This method sets the location of this menu component to the specified coordinates.
3. `void setFont(Font f)`: This method sets the font of this menu component.
4. `void setEnabled(boolean b)`: This method enables or disables this menu component based on the specified boolean value.
5. `MenuContainer getParent()`: This method returns the parent menu container of this menu component.
================================================================

Sample: 64 MenuItem
----------------------------------------------------------------
1. void setActionCommand(String command): Sets the action command for this menu item.
2. String getActionCommand(): Returns the action command for this menu item.
3. void setLabel(String label): Sets the label for this menu item.
4. String getLabel(): Returns the label for this menu item.
5. void addActionListener(ActionListener l): Adds the specified action listener to receive action events from this menu item.
================================================================

Sample: 65 MenuShortcut
----------------------------------------------------------------
1. `char getKey()`: This method returns the character representation of the key associated with this MenuShortcut.
2. `MenuItem getMenuShortcutMenuItem()`: This method returns the MenuItem object associated with this MenuShortcut.
3. `int getModifiers()`: This method returns the modifier key for this MenuShortcut.
4. `boolean usesShiftModifier()`: This method returns true if this MenuShortcut uses the SHIFT key modifier.
5. `boolean equals(MenuShortcut s)`: This method checks if this MenuShortcut is equal to the specified MenuShortcut.
================================================================

Sample: 66 MouseInfo
----------------------------------------------------------------
1. `Point getPointerInfo()`: This method returns a Point object representing the current location of the pointer.
2. `int getNumberOfButtons()`: This method returns the number of buttons on the mouse.
3. `boolean isButtonPressed(int button)`: This method returns true if the specified button is currently pressed, false otherwise.
4. `int getMousePosition().x`: This method returns the x-coordinate of the mouse pointer.
5. `int getMousePosition().y`: This method returns the y-coordinate of the mouse pointer.
================================================================

Sample: 67 MultipleGradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: Returns the first color used by this gradient paint.
2. `Color getColor2()`: Returns the second color used by this gradient paint.
3. `Point2D getStartPoint()`: Returns the starting point for the gradient.
4. `Point2D getEndPoint()`: Returns the ending point for the gradient.
5. `boolean isCyclic()`: Returns whether this gradient paint cycles repeatedly between the two colors.
================================================================

Sample: 68 PageAttributes
----------------------------------------------------------------
1. `boolean setMedia(int mediaType)`
   
2. `void setColor(ColorType colorType, float[] colors)`
   
3. `PaperSize getPaperSize()`
   
4. `boolean setPaperSize(PaperSize paperSize)`
   
5. `float[] getResolution()`
================================================================

Sample: 69 PageAttributes.ColorType
----------------------------------------------------------------
1. `boolean usesPrinterColors()`: This method returns a boolean indicating whether the color management system should use printer colors.
2. `int hashCode()`: This method returns the hash code value for this object.
3. `boolean equals(Object obj)`: This method compares this ColorType object to the specified object.
4. `String toString()`: This method returns a string representation of the object.
5. `Object clone()`: This method creates and returns a copy of this object.
================================================================

Sample: 70 PageAttributes.MediaType
----------------------------------------------------------------
1. `String toString()`: This method returns a string representation of the MediaType object.
2. `boolean equals(Object obj)`: This method compares this MediaType to the specified object.
3. `int hashCode()`: This method returns a hash code value for the MediaType object.
4. `String getMediaType()`: This method returns the name of the media type.
5. `boolean setColor(float[] components)`: This method sets the color components for this MediaType.
================================================================

Sample: 71 PageAttributes.OrientationRequestedType
----------------------------------------------------------------
1. int getValue(): This method returns the value of the orientation requested.
2. boolean equals(Object obj): This method compares this PageAttributes.OrientationRequestedType object to the specified object.
3. static PageAttributes.OrientationRequestedType enumValueOf(int value): This method returns the enumeration type with the specified int value.
4. String toString(): This method returns the name of this enum constant, as contained in the declaration.
5. static PageAttributes.OrientationRequestedType[] values(): This method returns an array containing all of the values of the PageAttributes.OrientationRequestedType enum.
================================================================

Sample: 72 PageAttributes.OriginType
----------------------------------------------------------------
1. `int getOriginType()`: This method returns the origin type of the page attributes.
2. `void setOriginType(int type)`: This method sets the origin type of the page attributes.
3. `PageAttributes.OriginType clone()`: This method creates a copy of this origin type object.
4. `boolean equals(Object obj)`: This method compares this origin type to the specified object.
5. `String toString()`: This method returns a string representation of the origin type.
================================================================

Sample: 73 PageAttributes.PrintQualityType
----------------------------------------------------------------
1. `PrintQualityType getValue()`: This method returns the value of the PrintQualityType.
2. `PrintQualityType getDefault()`: This method returns the default PrintQualityType.
3. `PrintQualityType[] getValues()`: This method returns an array of all the possible PrintQualityType values.
4. `int hashCode()`: This method returns the hash code value for the PrintQualityType.
5. `String toString()`: This method returns a string representation of the PrintQualityType.
================================================================

Sample: 74 Panel
----------------------------------------------------------------
1. `void setBackground(Color bg)`: This method sets the background color of this panel.
2. `Dimension getPreferredSize()`: This method returns the preferred size of this panel.
3. `void setLocation(int x, int y)`: This method sets the location of this panel to the specified coordinates.
4. `void setVisible(boolean visible)`: This method sets the visibility of this panel.
5. `void removeAll()`: This method removes all components from this panel.
================================================================

Sample: 75 Point
----------------------------------------------------------------
1. `double distance(double x, double y)`: This method calculates the distance between this Point and a specified point with coordinates x and y.
2. `void setLocation(double x, double y)`: This method sets the location of this Point to the specified coordinates x and y.
3. `double getX()`: This method returns the x-coordinate of this Point.
4. `double getY()`: This method returns the y-coordinate of this Point.
5. `Point getLocation()`: This method returns a copy of this Point.
================================================================

Sample: 76 PointerInfo
----------------------------------------------------------------
1. `Point getLocation()`: This method returns the current location of the pointer.
2. `boolean isConfined()`: This method returns true if the pointer is confined to a particular area on the screen.
3. `boolean isVisible()`: This method returns true if the pointer is currently visible on the screen.
4. `Component getComponent()`: This method returns the component over which the pointer is located.
5. `Cursor getCursor()` : This method returns the cursor that is currently being used by the pointer.
================================================================

Sample: 77 Polygon
----------------------------------------------------------------
1. `void addPoint(int x, int y)`: Adds a new point to the polygon with the specified x and y coordinates.
2. `boolean contains(int x, int y)`: Checks whether the polygon contains the specified point with the given x and y coordinates.
3. `Rectangle getBounds()`: Returns the bounding box of the polygon as a Rectangle object.
4. `int npoints()`: Returns the total number of points in the polygon.
5. `void reset()`: Resets the polygon to have zero points.
================================================================

Sample: 78 PopupMenu
----------------------------------------------------------------
1. void addSeparator()
2. MenuItem add(MenuItem item)
3. void remove(int index)
4. void show(Component origin, int x, int y)
5. void hide()
================================================================

Sample: 79 PrintJob
----------------------------------------------------------------
1. `Graphics getGraphics()`: This method returns the Graphics context which is used to draw to the printer.
2. `PageFormat getPageFormat()`: This method returns the PageFormat object describing the page size, orientation, and imageable area of the print job.
3. `PrinterJob getPrinterJob()`: This method returns the PrinterJob object associated with this PrintJob.
4. `void end()`: This method ends the print job once all the pages have been printed.
5. `void start()`: This method starts the print job, causing all pages added with append() to be sent to the printer.
================================================================

Sample: 80 RadialGradientPaint
----------------------------------------------------------------
1. `Color getColor1()`: Return type: Color, Parameters: None
2. `Color getColor2()`: Return type: Color, Parameters: None
3. `Point2D getFocus()`: Return type: Point2D, Parameters: None
4. `float[] getFractions()`: Return type: float[], Parameters: None
5. `Point2D getCenterPoint()`: Return type: Point2D, Parameters: None
================================================================

Sample: 81 Rectangle
----------------------------------------------------------------
1. `int getHeight()`: This method returns the height of the rectangle.
2. `int getWidth()`: This method returns the width of the rectangle.
3. `void setLocation(int x, int y)`: This method sets the location of the top left corner of the rectangle to the specified x and y coordinates.
4. `boolean contains(int x, int y)`: This method returns true if the specified point is contained within the rectangle.
5. `void setRect(double x, double y, double width, double height)`: This method sets the location and size of the rectangle to the specified values.
================================================================

Sample: 82 RenderingHints
----------------------------------------------------------------
1. `Object get(Object key)`: This method returns the value to which the specified key is mapped in this rendering hints.
2. `RenderingHints clone()`: This method creates a shallow copy of this rendering hints object.
3. `Object put(Object key, Object value)`: This method associates the specified value with the specified key in this rendering hints object.
4. `boolean containsKey(Object key)`: This method returns true if this rendering hints object contains the specified key.
5. `void clear()`: This method clears all keys and their associated values from this rendering hints object.
================================================================

Sample: 83 RenderingHints.Key
----------------------------------------------------------------
1. Object clone()
2. boolean equals(Object obj)
3. int hashCode()
4. String toString()
5. int intValue()
================================================================

Sample: 84 Robot
----------------------------------------------------------------
1. void mouseMove(int x, int y): Moves the mouse pointer to the specified screen coordinates.
2. void mousePress(int buttons): Presses one or more mouse buttons.
3. void mouseRelease(int buttons): Releases one or more mouse buttons.
4. void keyPress(int keycode): Presses a given key on the keyboard.
5. void keyRelease(int keycode): Releases a given key on the keyboard.
================================================================

Sample: 85 Scrollbar
----------------------------------------------------------------
1. `int getValue()`: This method returns the current value of the Scrollbar.
2. `void setValues(int newValue, int newExtent, int newMin, int newMax)`: This method sets the values for the Scrollbar.
3. `void setUnitIncrement(int unitIncrement)`: This method sets the unit increment value for the Scrollbar.
4. `void setBlockIncrement(int blockIncrement)`: This method sets the block increment value for the Scrollbar.
5. `void addAdjustmentListener(AdjustmentListener l)`: This method adds an AdjustmentListener to listen for scroll events on the Scrollbar.
================================================================

Sample: 86 ScrollPane
----------------------------------------------------------------
1. `void setRowHeaderView(Component view)`: Set the row header, which can be any java.awt.Component.
2. `void setColumnHeaderView(Component view)`: Set the column header, which can be any java.awt.Component.
3. `void setViewportView(Component view)`: Set the view that appears within the scroll pane's viewport.
4. `void setCorner(String key, Component corner)`: Set one of the four corners of the scroll pane.
5. `Point getViewPosition()`: Get the current position of the view in the scroll pane.
================================================================

Sample: 87 ScrollPaneAdjustable
----------------------------------------------------------------
1. `void setUnitIncrement(int unitIncrement)`: Set the unit increment value for scrolling in both x and y directions.

2. `void setBlockIncrement(int blockIncrement)`: Set the block increment value for scrolling in both x and y directions.

3. `int getUnitIncrement()`: Get the unit increment value for scrolling in both x and y directions.

4. `int getBlockIncrement()`: Get the block increment value for scrolling in both x and y directions.

5. `void setValue(int newValue)`: Set the current value of the adjustable.
================================================================

Sample: 88 SplashScreen
----------------------------------------------------------------
1. `void update()`: This method updates the splash screen with the changes that have been made.
2. `Image getImage()`: This method returns the image used for the splash screen.
3. `void close()`: This method closes the splash screen.
4. `void setAutoscroll(boolean autoscroll)`: This method sets whether the splash screen should automatically scroll.
5. `Rectangle getBounds()`: This method returns the bounds of the splash screen.
================================================================

Sample: 89 SystemColor
----------------------------------------------------------------
1. `Color activeCaption()`: This method returns the color used for captions of active windows.
2. `Color activeCaptionBorder()`: This method returns the color of the border surrounding the caption of active windows.
3. `Color activeCaptionText()`: This method returns the color of the text in the caption of active windows.
4. `Color control()`: This method returns the color used for the background of controls.
5. `Color controlDkShadow()`: This method returns the color of the shadow on 3D elements where the bottom and right sides meet.
================================================================

Sample: 90 SystemTray
----------------------------------------------------------------
1. `void add(TrayIcon trayIcon)`: Adds a TrayIcon to the SystemTray.
2. `void remove(TrayIcon trayIcon)`: Removes a TrayIcon from the SystemTray.
3. `TrayIcon[] getTrayIcons()`: Returns an array of all TrayIcons added to the SystemTray.
4. `void setTrayIcons(TrayIcon[] icons)`: Sets the array of TrayIcons for the SystemTray.
5. `Dimension getTrayIconSize()`: Returns the size of the TrayIcon in the SystemTray.
================================================================

Sample: 91 TextArea
----------------------------------------------------------------
1. `void append(String str)`: This method appends the specified string to the end of the text area.
2. `void insert(String str, int pos)`: This method inserts the specified string at the specified position in the text area.
3. `void replaceRange(String str, int start, int end)`: This method replaces the text between the specified start and end positions with the specified string.
4. `String getText()`: This method returns the text content of the text area as a string.
5. `void setEditable(boolean b)`: This method sets whether the text area is editable or not.
================================================================

Sample: 92 TextComponent
----------------------------------------------------------------
1. `String getText()`: This method returns the text contained in the TextComponent.
2. `void setText(String text)`: This method sets the text of the TextComponent to the specified string.
3. `int getCaretPosition()`: This method returns the position of the text insertion caret.
4. `void setCaretPosition(int position)`: This method sets the position of the text insertion caret.
5. `Color getBackground()`: This method returns the background color of the TextComponent.
================================================================

Sample: 93 TextField
----------------------------------------------------------------
1. `String getText()`: This method returns the current text displayed in the TextField.
2. `void setText(String text)`: This method sets the text of the TextField to the specified value.
3. `int getColumns()`: This method returns the number of columns in the TextField.
4. `void setColumns(int columns)`: This method sets the number of columns in the TextField to the specified value.
5. `boolean isEditable()`: This method returns true if the TextField is editable, false otherwise.
================================================================

Sample: 94 TexturePaint
----------------------------------------------------------------
1. `Rectangle getAnchorRect()` 
   return_type: Rectangle 
   
2. `BufferedImage getImage()`
   return_type: BufferedImage 
   
3. `PaintContext createContext(ColorModel cm, Rectangle deviceBounds, Rectangle2D userBounds, AffineTransform xform, RenderingHints hints)`
   return_type: PaintContext 
   parameters: 
   - cm: ColorModel
   - deviceBounds: Rectangle
   - userBounds: Rectangle2D
   - xform: AffineTransform
   - hints: RenderingHints
   
4. `int getTransparency()`
   return_type: int 
   
5. `void setTransform(AffineTransform xform)`
   parameters:
   - xform: AffineTransform
================================================================

Sample: 95 Toolkit
----------------------------------------------------------------
1. `Image getImage(String filename)`: This method returns an Image object that can be drawn on the screen.
2. `Dimension getScreenSize()`: This method returns a Dimension object representing the size of the screen.
3. `Clipboard getSystemClipboard()`: This method returns the system Clipboard object for copying and pasting data.
4. `ColorModel getColorModel()`: This method returns the ColorModel object used by the Toolkit for the screen.
5. `FontMetrics getFontMetrics(Font font)`: This method returns FontMetrics object for the specified Font.
================================================================

Sample: 96 TrayIcon
----------------------------------------------------------------
1. `void displayMessage(String caption, String text, TrayIcon.MessageType messageType)`: This method displays a transient popup message at the position of the tray icon.
2. `void setImage(Image image)`: This method sets the image to be displayed in the system tray for the tray icon.
3. `PopupMenu getPopupMenu()`: This method returns the popup menu associated with the tray icon.
4. `void setPopupMenu(PopupMenu popup)` : This method sets the popup menu for the tray icon.
5. `void setToolTip(String tooltip)`: This method sets the tooltip text that will be displayed when the mouse hovers over the tray icon.
================================================================

Sample: 97 Window
----------------------------------------------------------------
1. `void setLocation(int x, int y)`: Sets the location of the window to the specified x and y coordinates.
2. `void setSize(int width, int height)`: Sets the size of the window to the specified width and height.
3. `void setTitle(String title)`: Sets the title of the window to the specified string.
4. `void setVisible(boolean visible)`: Sets the visibility of the window based on the specified boolean value.
5. `void dispose()`: Closes and disposes of the window, releasing any resources associated with it.
================================================================

