Sample: DefaultPersistenceDelegate_4
----------------------------------------------------------------
================================================================

Sample: DefaultPersistenceDelegate_5
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/DefaultPersistenceDelegate_5.java:12: error: initialize(Class<?>,Object,Object,Encoder) has protected access in DefaultPersistenceDelegate
        delegate.initialize(type, oldInstance, newInstance, out);
                ^
1 error


================================================================

Sample: Encoder_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/Encoder_1.java:13: error: cannot find symbol
            protected Expression instantiate(Object oldInstance, Encoder out) {
                      ^
  symbol: class Expression
./Data/java_beans/javaFiles/Encoder_1.java:15: error: cannot find symbol
                return new Expression(oldInstance, String.class, "new", new Object[]{((String) oldInstance).toUpperCase()});
                           ^
  symbol: class Expression
./Data/java_beans/javaFiles/Encoder_1.java:24: error: cannot find symbol
        encoder.writeStatement(new Expression(original, type, "new", new Object[]{original}));
                                   ^
  symbol:   class Expression
  location: class Encoder_1
3 errors


================================================================

Sample: Encoder_2
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/Encoder_2.java:7: error: non-static method getPersistenceDelegate(Class<?>) cannot be referenced from a static context
        PersistenceDelegate pd = Encoder.getPersistenceDelegate(ArrayList.class);
                                        ^
1 error


================================================================

Sample: Encoder_3
----------------------------------------------------------------
================================================================

Sample: Encoder_4
----------------------------------------------------------------
stdout:
ExceptionListener: java.beans.Statement$1@481a15ff

================================================================

Sample: Encoder_5
----------------------------------------------------------------
stdout:
null

================================================================

Sample: Expression_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/Expression_1.java:7: error: unreported exception Exception; must be caught or declared to be thrown
        Object result = expression.getValue();
                                           ^
1 error


================================================================

Sample: Expression_2
----------------------------------------------------------------
stderr:
java.lang.NoSuchMethodException: <unbound>=Object.setValue(Integer);
	at java.desktop/java.beans.Statement.invokeInternal(Statement.java:327)
	at java.desktop/java.beans.Statement$2.run(Statement.java:189)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.desktop/java.beans.Statement.invoke(Statement.java:186)
	at java.desktop/java.beans.Expression.execute(Expression.java:121)
	at Expression_2.main(Expression_2.java:7)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: Expression_3
----------------------------------------------------------------
================================================================

Sample: FeatureDescriptor_1
----------------------------------------------------------------
stdout:
Name: null

================================================================

Sample: FeatureDescriptor_2
----------------------------------------------------------------
stdout:
MyFeature

================================================================

Sample: FeatureDescriptor_4
----------------------------------------------------------------
stdout:
Display Name: MyDisplayName

================================================================

Sample: FeatureDescriptor_5
----------------------------------------------------------------
stdout:
false

================================================================

Sample: IndexedPropertyChangeEvent_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/IndexedPropertyChangeEvent_1.java:5: error: non-static variable this cannot be referenced from a static context
        IndexedPropertyChangeEvent event = new IndexedPropertyChangeEvent(this, "propertyName", true, 0, "oldValue", "newValue");
                                                                          ^
./Data/java_beans/javaFiles/IndexedPropertyChangeEvent_1.java:5: error: constructor IndexedPropertyChangeEvent in class IndexedPropertyChangeEvent cannot be applied to given types;
        IndexedPropertyChangeEvent event = new IndexedPropertyChangeEvent(this, "propertyName", true, 0, "oldValue", "newValue");
                                           ^
  required: Object,String,Object,Object,int
  found:    IndexedPropertyChangeEvent_1,String,boolean,int,String,String
  reason: actual and formal argument lists differ in length
2 errors


================================================================

Sample: Introspector_3
----------------------------------------------------------------
stdout:
age
class
name

================================================================

Sample: PropertyChangeEvent_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/PropertyChangeEvent_1.java:5: error: non-static variable this cannot be referenced from a static context
        PropertyChangeEvent event = new PropertyChangeEvent(this, "propertyName", null, "new value");
                                                            ^
1 error


================================================================

Sample: PropertyChangeEvent_2
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/PropertyChangeEvent_2.java:6: error: non-static variable this cannot be referenced from a static context
        PropertyChangeEvent event = new PropertyChangeEvent(this, "propertyName", "oldValue", "newValue");
                                                            ^
1 error


================================================================

Sample: PropertyChangeEvent_3
----------------------------------------------------------------
stdout:
New Value: newValue

================================================================

Sample: PropertyChangeEvent_5
----------------------------------------------------------------
stdout:
Propagation Id: propagationId

================================================================

Sample: PropertyChangeListenerProxy_3
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/PropertyChangeListenerProxy_3.java:6: error: cannot find symbol
        PropertyChangeListenerProxy proxy = new PropertyChangeListenerProxy("propertyName", new PropertyChangeListener() {
                                                                                                ^
  symbol:   class PropertyChangeListener
  location: class PropertyChangeListenerProxy_3
./Data/java_beans/javaFiles/PropertyChangeListenerProxy_3.java:7: error: method does not override or implement a method from a supertype
            @Override
            ^
./Data/java_beans/javaFiles/PropertyChangeListenerProxy_3.java:13: error: non-static variable this cannot be referenced from a static context
        proxy.propertyChange(new PropertyChangeEvent(this, "propertyName", null, "New value"));
                                                     ^
3 errors


================================================================

Sample: PropertyChangeSupport_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/PropertyChangeSupport_1.java:6: error: non-static variable this cannot be referenced from a static context
        PropertyChangeSupport support = new PropertyChangeSupport(this);
                                                                  ^
./Data/java_beans/javaFiles/PropertyChangeSupport_1.java:10: error: cannot find symbol
            public void propertyChange(PropertyChangeEvent evt) {
                                       ^
  symbol: class PropertyChangeEvent
2 errors


================================================================

Sample: PropertyChangeSupport_2
----------------------------------------------------------------
================================================================

Sample: PropertyChangeSupport_3
----------------------------------------------------------------
================================================================

Sample: PropertyChangeSupport_4
----------------------------------------------------------------
================================================================

Sample: PropertyChangeSupport_5
----------------------------------------------------------------
================================================================

Sample: PropertyDescriptor_2
----------------------------------------------------------------
stdout:
Property Type: java.lang.String

================================================================

Sample: PropertyDescriptor_3
----------------------------------------------------------------
stdout:
Read method: getName

================================================================

Sample: PropertyDescriptor_4
----------------------------------------------------------------
stdout:
Write Method: public void MyClass.setPropertyName(java.lang.String)

================================================================

Sample: PropertyEditorManager_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/PropertyEditorManager_1.java:8: error: incompatible types: PropertyEditor cannot be converted to PropertyEditorSupport
        PropertyEditorSupport editor = PropertyEditorManager.findEditor(String.class);
                                                                       ^
1 error


================================================================

Sample: PropertyEditorManager_3
----------------------------------------------------------------
================================================================

Sample: PropertyEditorManager_5
----------------------------------------------------------------
stdout:
Editor search path:
sun.beans.editors

================================================================

Sample: SimpleBeanInfo_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/SimpleBeanInfo_1.java:4: error: class MyBeanInfo is public, should be declared in a file named MyBeanInfo.java
public class MyBeanInfo extends SimpleBeanInfo {
       ^
1 error


================================================================

Sample: SimpleBeanInfo_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot read the array length because "<local3>" is null
	at SimpleBeanInfo_2.main(SimpleBeanInfo_2.java:13)

================================================================

Sample: SimpleBeanInfo_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot read the array length because "<local3>" is null
	at SimpleBeanInfo_3.main(SimpleBeanInfo_3.java:13)

================================================================

Sample: SimpleBeanInfo_4
----------------------------------------------------------------
================================================================

Sample: SimpleBeanInfo_5
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/SimpleBeanInfo_5.java:9: error: cannot find symbol
                BeanDescriptor bd = new BeanDescriptor(Main.class);
                                                       ^
  symbol: class Main
1 error


================================================================

Sample: VetoableChangeSupport_1
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/VetoableChangeSupport_1.java:10: error: non-static variable this cannot be referenced from a static context
        VetoableChangeSupport vetoableChangeSupport = new VetoableChangeSupport(this);
                                                                                ^
1 error


================================================================

Sample: VetoableChangeSupport_2
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/VetoableChangeSupport_2.java:9: error: constructor VetoableChangeSupport in class VetoableChangeSupport cannot be applied to given types;
        VetoableChangeSupport vcs = new VetoableChangeSupport();
                                    ^
  required: Object
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_beans/javaFiles/VetoableChangeSupport_2.java:12: error: cannot find symbol
        VetoableChangeListener listener = new VetoableChangeListener() {
        ^
  symbol:   class VetoableChangeListener
  location: class VetoableChangeSupport_2
./Data/java_beans/javaFiles/VetoableChangeSupport_2.java:12: error: cannot find symbol
        VetoableChangeListener listener = new VetoableChangeListener() {
                                              ^
  symbol:   class VetoableChangeListener
  location: class VetoableChangeSupport_2
./Data/java_beans/javaFiles/VetoableChangeSupport_2.java:13: error: method does not override or implement a method from a supertype
            @Override
            ^
4 errors


================================================================

Sample: VetoableChangeSupport_3
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/VetoableChangeSupport_3.java:5: error: constructor VetoableChangeSupport in class VetoableChangeSupport cannot be applied to given types;
        VetoableChangeSupport vetoableChangeSupport = new VetoableChangeSupport();
                                                      ^
  required: Object
  found:    no arguments
  reason: actual and formal argument lists differ in length
./Data/java_beans/javaFiles/VetoableChangeSupport_3.java:7: error: cannot find symbol
        VetoableChangeListener[] listeners = vetoableChangeSupport.getVetoableChangeListeners();
        ^
  symbol:   class VetoableChangeListener
  location: class VetoableChangeSupport_3
2 errors


================================================================

Sample: VetoableChangeSupport_4
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/VetoableChangeSupport_4.java:6: error: non-static variable this cannot be referenced from a static context
        VetoableChangeSupport vetoSupport = new VetoableChangeSupport(this);
                                                                      ^
./Data/java_beans/javaFiles/VetoableChangeSupport_4.java:9: error: cannot find symbol
            vetoSupport.fireVetoableChange("propertyName", oldValue, newValue);
                                                           ^
  symbol:   variable oldValue
  location: class VetoableChangeSupport_4
./Data/java_beans/javaFiles/VetoableChangeSupport_4.java:9: error: cannot find symbol
            vetoSupport.fireVetoableChange("propertyName", oldValue, newValue);
                                                                     ^
  symbol:   variable newValue
  location: class VetoableChangeSupport_4
3 errors


================================================================

Sample: VetoableChangeSupport_5
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/VetoableChangeSupport_5.java:5: error: constructor VetoableChangeSupport in class VetoableChangeSupport cannot be applied to given types;
        VetoableChangeSupport vetoableChangeSupport = new VetoableChangeSupport();
                                                      ^
  required: Object
  found:    no arguments
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: XMLDecoder_1
----------------------------------------------------------------
stdout:
File not found

================================================================

Sample: XMLDecoder_2
----------------------------------------------------------------
stderr:
org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 1; Content is not allowed in prolog.
Continuing ...

================================================================

Sample: XMLDecoder_3
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/XMLDecoder_3.java:6: error: no suitable constructor found for XMLDecoder(no arguments)
        XMLDecoder decoder = new XMLDecoder(); // Create a new XMLDecoder
                             ^
    constructor XMLDecoder.XMLDecoder(InputStream) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object,ExceptionListener) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object,ExceptionListener,ClassLoader) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputSource) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputSource,Object,ExceptionListener,ClassLoader) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: XMLDecoder_4
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/XMLDecoder_4.java:6: error: no suitable constructor found for XMLDecoder(no arguments)
        XMLDecoder xmlDecoder = new XMLDecoder();
                                ^
    constructor XMLDecoder.XMLDecoder(InputStream) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object,ExceptionListener) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputStream,Object,ExceptionListener,ClassLoader) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputSource) is not applicable
      (actual and formal argument lists differ in length)
    constructor XMLDecoder.XMLDecoder(InputSource,Object,ExceptionListener,ClassLoader) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: XMLEncoder_3
----------------------------------------------------------------
stdout:
<?xml version="1.0" encoding="UTF-8"?>
<java version="17.0.10" class="java.beans.XMLDecoder">
</java>

================================================================

Sample: XMLEncoder_4
----------------------------------------------------------------
output:
./Data/java_beans/javaFiles/XMLEncoder_4.java:7: error: no suitable constructor found for Expression(String,Class<Integer>)
        Expression expression = new Expression("1 + 2", Integer.class);
                                ^
    constructor Expression.Expression(Object,String,Object[]) is not applicable
      (actual and formal argument lists differ in length)
    constructor Expression.Expression(Object,Object,String,Object[]) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: XMLEncoder_5
----------------------------------------------------------------
stdout:
Object successfully written to output.xml

================================================================

