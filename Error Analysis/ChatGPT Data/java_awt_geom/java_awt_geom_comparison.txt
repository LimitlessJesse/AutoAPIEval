Sample: 0 AffineTransform
----------------------------------------------------------------
1. `void rotate(double theta)`: This method rotates the AffineTransform object by the specified angle theta.
2. `void scale(double sx, double sy)`: This method scales the AffineTransform object by the specified scaling factors sx and sy.
3. `void shear(double shx, double shy)`: This method shears the AffineTransform object by the specified shear factors shx and shy.
4. `void translate(double tx, double ty)`: This method translates the AffineTransform object by the specified translation factors tx and ty.
5. `void concatenate(AffineTransform Tx)`: This method concatenates the specified AffineTransform object with this AffineTransform object.
================================================================

Sample: 1 Arc2D
----------------------------------------------------------------
1. `double getAngleExtent()`: This method returns the angular extent of the arc in degrees.
2. `double getAngleStart()`: This method returns the starting angle of the arc in degrees.
3. `int getArcType()`: This method returns the type of the arc, either Arc2D.OPEN, Arc2D.CHORD, or Arc2D.PIE.
4. `Rectangle2D getBounds2D()`: This method returns the bounding box of the arc.
5. `double getThetaEnd()`: This method returns the ending angle of the arc in radians.
================================================================

Sample: 2 Arc2D.Double
----------------------------------------------------------------
1. `double getAngleExtent()`: Returns the angular extent of the arc.
2. `double getAngleStart()`: Returns the starting angle of the arc.
3. `double getHeight()`: Returns the height of the framing rectangle of the arc.
4. `double getWidth()`: Returns the width of the framing rectangle of the arc.
5. `void setArc(double x, double y, double w, double h, double start, double extent, int type)`: Sets the shape of this arc to be the specified rectangle.
================================================================

Sample: 3 Arc2D.Float
----------------------------------------------------------------
1. `double getAngleExtent()`: This method returns the angular extent of the arc in degrees.
2. `Arc2D.Float clone()`: This method creates a new object that represents the same arc as this object.
3. `double getAngleStart()`: This method returns the starting angle of the arc in degrees.
4. `void setAngleExtent(double angExt)`: This method sets the angular extent of the arc.
5. `void setAngleStart(double angSt)`: This method sets the starting angle of the arc.
================================================================

Sample: 4 Area
----------------------------------------------------------------
1. `void add(Area area)`: This method adds the shape of the specified Area to the shape of this Area.
2. `void subtract(Area area)`: This method subtracts the shape of the specified Area from the shape of this Area.
3. `void intersect(Area area)`: This method sets the shape of this Area to the intersection of its current shape with the shape of the specified Area.
4. `void exclusiveOr(Area area)`: This method sets the shape of this Area to the exclusive OR of its current shape with the shape of the specified Area.
5. `boolean isEmpty()`: This method returns true if this Area is empty, meaning it contains no area.
================================================================

Sample: 5 CubicCurve2D
----------------------------------------------------------------
1. `Point2D getP1()`: This method returns the starting point of the cubic curve.
2. `Point2D getP2()`: This method returns the first control point of the cubic curve.
3. `Point2D getCtrlP1()`: This method returns the second control point of the cubic curve.
4. `Point2D getCtrlP2()`: This method returns the ending point of the cubic curve.
5. `Shape getBounds2D()`: This method returns the bounding box of the cubic curve.
================================================================

Sample: 6 CubicCurve2D.Double
----------------------------------------------------------------
1. `Point2D getP1()`: This method returns the starting point of the cubic curve as a Point2D.
2. `Point2D getCtrlP1()`: This method returns the first control point of the cubic curve as a Point2D.
3. `Point2D getCtrlP2()`: This method returns the second control point of the cubic curve as a Point2D.
4. `Point2D getP2()`: This method returns the ending point of the cubic curve as a Point2D.
5. `Object clone()`: This method creates a new object that is a copy of the current CubicCurve2D.Double instance.
================================================================

Sample: 7 CubicCurve2D.Float
----------------------------------------------------------------
1. `void setCurve(float x1, float y1, float ctrlx1, float ctrly1, float ctrlx2, float ctrly2, float x2, float y2)`: This method sets the location of the endpoints and control points of this curve to the specified coordinates.
 
2. `Point2D getP1()`: This method returns the start point of the curve.

3. `Point2D getP2()`: This method returns the end point of the curve.

4. `Point2D getCtrlP1()`: This method returns the first control point of the curve.

5. `Point2D getCtrlP2()`: This method returns the second control point of the curve.
================================================================

Sample: 8 Dimension2D
----------------------------------------------------------------
1. `double getWidth()`: Returns the width of this Dimension2D object.
2. `double getHeight()`: Returns the height of this Dimension2D object.
3. `void setSize(double width, double height)`: Sets the size of this Dimension2D object to the specified width and height.
4. `void setSize(Dimension2D d)`: Sets the size of this Dimension2D object to match the specified Dimension2D object.
5. `double getWidth()`: Returns the width of this Dimension2D object.
================================================================

Sample: 9 Ellipse2D
----------------------------------------------------------------
1. `double getCenterX()`: This method returns the X coordinate of the center of the ellipse.
2. `double getCenterY()`: This method returns the Y coordinate of the center of the ellipse.
3. `double getHeight()`: This method returns the height of the ellipse.
4. `double getWidth()`: This method returns the width of the ellipse.
5. `boolean intersects(double x, double y, double w, double h)`: This method determines if the ellipse intersects the specified rectangle with the given coordinates and dimensions.
================================================================

Sample: 10 Ellipse2D.Double
----------------------------------------------------------------
1. `double getX()`: Returns the X coordinate of the upper-left corner of the framing rectangle.
2. `double getY()`: Returns the Y coordinate of the upper-left corner of the framing rectangle.
3. `double getWidth()`: Returns the width of the framing rectangle.
4. `double getHeight()`: Returns the height of the framing rectangle.
5. `Ellipse2D.Double getBounds2D()`: Returns a new Ellipse2D object that represents the bounding box of this Ellipse2D.
================================================================

Sample: 11 Ellipse2D.Float
----------------------------------------------------------------
1. `void setFrame(float x, float y, float w, float h)`: This method sets the framing rectangle of this ellipse to the specified x, y, width, and height.
   
2. `void setFrame(Rectangle2D r)`: This method sets the framing rectangle of this ellipse to be the specified Rectangle2D.

3. `void setFrameFromCenter(float centerX, float centerY, float radiusX, float radiusY)`: This method sets the framing rectangle of this ellipse based on the specified center coordinates and radii.

4. `void setFrameFromDiagonal(float x1, float y1, float x2, float y2)`: This method sets the framing rectangle of this ellipse from the two corner points of the bounding box.

5. `void setFrameFromCenter(Point2D center, Point2D corner)`: This method sets the framing rectangle of this ellipse based on the specified center and corner points.
================================================================

Sample: 12 FlatteningPathIterator
----------------------------------------------------------------
1. `int getWindingRule()`: This method returns the winding rule used to determine the interior of the path.
2. `int getRecursionLimit()`: This method returns the current recursion limit which is used to generate the flattened path.
3. `double getFlatness()`: This method returns the flatness of the FlatteningPathIterator.
4. `void setRecursionLimit(int limit)`: This method sets the recursion limit which is used to generate the flattened path.
5. `void setFlatness(double flatness)`: This method sets the flatness value for the FlatteningPathIterator.
================================================================

Sample: 13 GeneralPath
----------------------------------------------------------------
1. `void moveTo(float x, float y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(float x, float y)`: This method adds a straight line segment to the path by connecting the current point to the specified coordinates.
3. `void quadTo(float x1, float y1, float x2, float y2)`: This method adds a curved segment to the path by using the specified coordinates as control points for a quadratic curve.
4. `void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)`: This method adds a curved segment to the path by using the specified coordinates as control points for a cubic curve.
5. `void closePath()`: This method closes the current subpath by connecting the last point back to the initial point.
================================================================

Sample: 14 Line2D
----------------------------------------------------------------
1. boolean intersectsLine(double x1, double y1, double x2, double y2): This method determines if the line segment defined by the specified coordinates intersects with this Line2D.
2. Point2D getP1(): This method returns the start point of this Line2D as a Point2D object.
3. Point2D getP2(): This method returns the end point of this Line2D as a Point2D object.
4. double getX1(): This method returns the X coordinate of the start point of this Line2D.
5. double getY2(): This method returns the Y coordinate of the end point of this Line2D.
================================================================

Sample: 15 Line2D.Double
----------------------------------------------------------------
1. `Point2D getP1()`: Returns the starting point of this line.
2. `Point2D getP2()`: Returns the ending point of this line.
3. `double getX1()`: Returns the x-coordinate of the starting point of this line.
4. `double getY1()`: Returns the y-coordinate of the starting point of this line.
5. `double getX2()`: Returns the x-coordinate of the ending point of this line.
================================================================

Sample: 16 Line2D.Float
----------------------------------------------------------------
1. `float getX1()`: This method returns the X coordinate of the starting point of the line.
2. `float getY1()`: This method returns the Y coordinate of the starting point of the line.
3. `float getX2()`: This method returns the X coordinate of the ending point of the line.
4. `float getY2()`: This method returns the Y coordinate of the ending point of the line.
5. `void setLine(float x1, float y1, float x2, float y2)`: This method sets the location of the starting and ending points of the line.
================================================================

Sample: 17 Path2D
----------------------------------------------------------------
1. `void moveTo(double x, double y)`: Moves the current point to the specified coordinates.
2. `void lineTo(double x, double y)`: Draws a line from the current point to the specified coordinates.
3. `void curveTo(double x1, double y1, double x2, double y2, double x, double y)`: Draws a Bézier curve using the specified control points and end point.
4. `void closePath()`: Closes the current subpath by drawing a straight line back to the starting point.
5. `boolean contains(double x, double y)`: Returns true if the specified point is inside the shape defined by this path.
================================================================

Sample: 18 Path2D.Double
----------------------------------------------------------------
1. `void moveTo(double x, double y)`: This method moves the current point to the specified coordinates.
2. `void lineTo(double x, double y)`: This method adds a line segment to the path from the current point to the specified coordinates.
3. `void curveTo(double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x, double y)`: This method adds a curved segment to the path from the current point to the specified coordinates, using the specified control points.
4. `Rectangle2D getBounds()`: This method returns the bounding box of the path.
5. `void closePath()`: This method closes the current subpath by connecting the current point to the starting point of the subpath.
================================================================

Sample: 19 Path2D.Float
----------------------------------------------------------------
1. `void moveTo(float x, float y)`: Moves the current path position to the given coordinates.
2. `void lineTo(float x, float y)`: Adds a line segment to the path from the current coordinates to the specified coordinates.
3. `void quadTo(float x1, float y1, float x2, float y2)`: Adds a quadratic curve segment to the path.
4. `void curveTo(float x1, float y1, float x2, float y2, float x3, float y3)`: Adds a cubic curve segment to the path.
5. `void closePath()`: Closes the current subpath by drawing a straight line back to the last `moveTo` point.
================================================================

Sample: 20 Point2D
----------------------------------------------------------------
1. `double distance(double x, double y)`: This method calculates the distance between this Point2D and a specified point with coordinates (x, y).
2. `double getX()`: This method returns the x-coordinate of this Point2D.
3. `double getY()`: This method returns the y-coordinate of this Point2D.
4. `Point2D clone()`: This method creates a new Point2D object that is a copy of this Point2D.
5. `void setLocation(double x, double y)`: This method sets the location of this Point2D to the specified coordinates (x, y).
================================================================

Sample: 21 Point2D.Double
----------------------------------------------------------------
1. `double getX()`: This method returns the X coordinate of this Point2D.
2. `double getY()`: This method returns the Y coordinate of this Point2D.
3. `void setLocation(double x, double y)`: This method sets the location of this Point2D to the specified coordinates.
4. `Point2D clone()`: This method returns a new Point2D object that is a copy of this Point2D.
5. `double distance(double x, double y)`: This method calculates the distance between this Point2D and the specified coordinates.
================================================================

Sample: 22 Point2D.Float
----------------------------------------------------------------
1. `float distance(double x, double y)`: This method calculates the distance between this Point2D.Float and a specified point.
2. `void setLocation(double x, double y)`: This method sets the location of this Point2D.Float to the specified coordinates.
3. `String toString()`: This method returns a string representation of this Point2D.Float object.
4. `Point2D.Float clone()`: This method creates and returns a copy of this Point2D.Float object.
5. `double getX()`: This method returns the X coordinate of this Point2D.Float.
================================================================

Sample: 23 QuadCurve2D
----------------------------------------------------------------
1. Point2D getCtrlPt1()
   - Return type: Point2D
   - Parameters: None
   
2. Point2D getCtrlPt2()
   - Return type: Point2D
   - Parameters: None
   
3. double getCtrlX()
   - Return type: double
   - Parameters: None
   
4. double getCtrlY()
   - Return type: double
   - Parameters: None
   
5. void setCurve(Point2D pt1, Point2D ctrlPt, Point2D pt2)
   - Return type: void
   - Parameters: Point2D pt1, Point2D ctrlPt, Point2D pt2
================================================================

Sample: 24 QuadCurve2D.Double
----------------------------------------------------------------
1. `Point2D getP1()`: This method returns the start point of the quad curve.
2. `Point2D getCtrlPt()`: This method returns the control point of the quad curve.
3. `Point2D getP2()`: This method returns the end point of the quad curve.
4. `void setCurve(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)`: This method sets the location and control points of the quad curve.
5. `boolean contains(Point2D p)`: This method returns true if the specified point is inside the shape defined by the quad curve.
================================================================

Sample: 25 QuadCurve2D.Float
----------------------------------------------------------------
1. `Point2D.Float getCtrlPt1()`: This method returns the coordinates of the first control point of the quadratic curve.
2. `Point2D.Float getCtrlPt2()`: This method returns the coordinates of the second control point of the quadratic curve.
3. `Point2D.Float getP1()`: This method returns the start point of the quadratic curve.
4. `Point2D.Float getP2()`: This method returns the end point of the quadratic curve.
5. `void setCurve(float x1, float y1, float ctrlx, float ctrly, float x2, float y2)`: This method sets the location and control points of the quadratic curve.
================================================================

Sample: 26 Rectangle2D
----------------------------------------------------------------
1. `double getWidth()`: This method returns the width of the rectangle.
2. `double getHeight()`: This method returns the height of the rectangle.
3. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the rectangle.
4. `void setRect(double x, double y, double w, double h)`: This method sets the location and size of the rectangle to the specified double values.
5. `Rectangle2D createIntersection(Rectangle2D r)`: This method returns a new Rectangle2D object representing the intersection of this rectangle with the specified rectangle.
================================================================

Sample: 27 Rectangle2D.Double
----------------------------------------------------------------
1. `double getWidth()`: This method returns the width of the rectangle.
2. `double getHeight()`: This method returns the height of the rectangle.
3. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the rectangle.
4. `void setRect(double x, double y, double w, double h)`: This method sets the bounds of the rectangle to the specified values.
5. `boolean intersects(Rectangle2D r)`: This method checks if the rectangle intersects with the specified rectangle.
================================================================

Sample: 28 Rectangle2D.Float
----------------------------------------------------------------
1. `float getHeight()`: This method returns the height of the rectangle.
2. `float getWidth()`: This method returns the width of the rectangle.
3. `Point2D.Float getPoint()`: This method returns the upper-left corner of the rectangle as a Point2D.Float object.
4. `boolean isEmpty()`: This method returns true if the rectangle has a width or height less than or equal to zero.
5. `void setFrame(float x, float y, float w, float h)`: This method sets the rectangle to the specified x, y, width, and height values.
================================================================

Sample: 29 RectangularShape
----------------------------------------------------------------
1. `double getHeight()`: This method returns the height of the rectangular shape.
2. `double getWidth()`: This method returns the width of the rectangular shape.
3. `void setFrame(double x, double y, double w, double h)`: This method sets the location and size of the rectangular shape.
4. `Rectangle2D getFrame()`: This method returns a Rectangle2D object that is the framing rectangle of the Shape.
5. `boolean contains(double x, double y)`: This method checks if the specified point is contained within the boundary of the rectangular shape.
================================================================

Sample: 30 RoundRectangle2D
----------------------------------------------------------------
1. `double getArcWidth()`: Returns the width of the arc.
2. `double getArcHeight()`: Returns the height of the arc.
3. `RoundRectangle2D getBounds2D()`: Returns the bounding box of this RoundRectangle2D.
4. `void setRoundRect(double x, double y, double width, double height, double arcWidth, double arcHeight)`: Sets the location, size, and corner radii of this RoundRectangle2D.
5. `void setFrame(double x, double y, double w, double h)`: Sets the location and size of this RoundRectangle2D.
================================================================

Sample: 31 RoundRectangle2D.Double
----------------------------------------------------------------
1. `double getArcWidth()`: Returns the width of the curve that defines the rounded corners of this RoundRectangle2D.
2. `double getArcHeight()`: Returns the height of the curve that defines the rounded corners of this RoundRectangle2D.
3. `double getX()`: Returns the X coordinate of the upper-left corner of the framing rectangle.
4. `double getY()`: Returns the Y coordinate of the upper-left corner of the framing rectangle.
5. `RoundRectangle2D.Double clone()`: Creates a new object that is a copy of this RoundRectangle2D.
================================================================

Sample: 32 RoundRectangle2D.Float
----------------------------------------------------------------
1. `float getArcWidth()`: This method returns the width of the arc at the corners.
2. `float getArcHeight()`: This method returns the height of the arc at the corners.
3. `void setRoundRect(float x, float y, float w, float h, float arcWidth, float arcHeight)`: This method sets the location, size, and corner radii of this rounded rectangle to the specified values.
4. `void setFrameFromCenter(float centerX, float centerY, float width, float height)`: This method sets the location and size of the framing rectangle of this rounded rectangle to the specified values.
5. `void setFrameFromDiagonal(float x1, float y1, float x2, float y2)`: This method sets the location and size of the framing rectangle of this rounded rectangle to encompass the two specified points.
================================================================

