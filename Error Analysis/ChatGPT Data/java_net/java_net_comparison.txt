Sample: 0 Authenticator
----------------------------------------------------------------
1. `PasswordAuthentication getPasswordAuthentication()`: This method returns a PasswordAuthentication object containing the username and password for the specified secure network connection.
2. `void setDefault(Authenticator a)`: This method sets the default authenticator that will be used by any classes that request authentication.
3. `String getRequestingHost()`: This method returns the hostname of the entity requesting authentication.
4. `int getRequestingPort()`: This method returns the port number of the entity requesting authentication.
5. `String getRequestingPrompt()`: This method returns the prompt string for the entity requesting authentication.
================================================================

Sample: 1 CacheRequest
----------------------------------------------------------------
1. `void abort()`: This method discards this CacheRequest.
2. `OutputStream getBody()`: This method returns the OutputStream to write the cache response body.
3. `URLConnection get()`: This method returns the URLConnection for interacting with the cache.
4. `void complete()`: This method completes the request and updates the cache.
5. `void flush()`: This method flushes the cache request and writes any remaining data to the cache.
================================================================

Sample: 2 CacheResponse
----------------------------------------------------------------
1. `Map<String, List<String>> getHeaders()`: This method returns the headers represented by this CacheResponse.
2. `InputStream getBody()`: This method returns an InputStream to the response body.
3. `String getRequestMethod()`: This method returns the request method that initiated this CacheResponse.
4. `URI getRequestURI()`: This method returns the URI of the request that resulted in this CacheResponse.
5. `Headers getHeaders(String key)`: This method returns the headers associated with a key in the CacheResponse.
================================================================

Sample: 3 ContentHandler
----------------------------------------------------------------
1. `Object getContent(URLConnection uc)`: This method retrieves the content from the URLConnection.
2. `Object getContent(URLConnection uc, Class[] classes)`: This method retrieves the content from the URLConnection and tries to convert it to the specified classes.
3. `abstract Object content(URLConnection urlc) throws IOException`: This method retrieves the content from the URLConnection in an abstract way.
4. `boolean equals(Object obj)`: This method compares this ContentHandler to the specified object.
5. `String toString()`: This method returns a string representation of the object.
================================================================

Sample: 4 CookieHandler
----------------------------------------------------------------
1. `static CookieHandler getDefault()`: This method returns the system-wide CookieHandler.
2. `static void setDefault(CookieHandler cHandler)`: This method sets the CookieHandler.
3. `void put(URI uri, Map<String, List<String>> responseHeaders)`: This method is used to store cookies received in the response headers for a specific URI.
4. `Map<String, List<String>> get(URI uri, Map<String, List<String>> requestHeaders)`: This method retrieves cookies for a specific URI that need to be sent in the request headers.
5. `void put(URI uri, HttpCookie cookie)`: This method adds a cookie to the cookie cache for a specific URI.
================================================================

Sample: 5 CookieManager
----------------------------------------------------------------
1. `void put(URI uri, Map<String, List<String>> responseHeaders)`: Adds a HTTP response header field to the internal map.
2. `Map<URI, List<HttpCookie>> get(URI uri)`: Retrieves and returns all cookies in the cache that match the specified URI. 
3. `void setCookiePolicy(CookiePolicy cookiePolicy)`: Sets the cookie policy for this CookieManager.
4. `void setCookieStore(CookieStore cookieStore)`: Sets the cookie store for this CookieManager.
5. `CookieStore getCookieStore()`: Retrieves the CookieStore for this CookieManager.
================================================================

Sample: 6 DatagramPacket
----------------------------------------------------------------
1. `void setData(byte[] buf)`: This method sets the data buffer for this packet.
2. `byte[] getData()`: This method returns the data buffer of this packet.
3. `InetAddress getAddress()`: This method returns the IP address of the machine that sent the packet.
4. `int getPort()`: This method returns the port number of the machine that sent the packet.
5. `void setSocketAddress(SocketAddress address)`: This method sets the socket address for this packet.
================================================================

Sample: 7 DatagramSocket
----------------------------------------------------------------
1. `void bind(SocketAddress bindpoint)`: Binds the socket to a local address and port.
2. `void close()`: Closes the socket.
3. `void connect(SocketAddress address)`: Connects the socket to a remote address for sending and receiving packets.
4. `void disconnect()`: Disconnects the socket from the remote address.
5. `void send(DatagramPacket p)`: Sends a datagram packet from this socket.
================================================================

Sample: 8 DatagramSocketImpl
----------------------------------------------------------------
1. `void create()`: This method creates a new DatagramSocketImpl.
2. `void bind(int port, InetAddress laddr)`: This method binds the DatagramSocketImpl to a specific port and local address.
3. `void send(DatagramPacket p)`: This method sends a datagram packet through the DatagramSocketImpl.
4. `void receive(DatagramPacket p)`: This method receives a datagram packet through the DatagramSocketImpl.
5. `void close()`: This method closes the DatagramSocketImpl.
================================================================

Sample: 9 HttpCookie
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the cookie.
2. `String getValue()`: This method returns the value of the cookie.
3. `void setPath(String path)`: This method sets the path on the server where the cookie is valid.
4. `void setMaxAge(long expiry): This method sets the maximum age of the cookie in seconds.
5. `void setSecure(boolean secure)`: This method sets whether the cookie is secure or not.
================================================================

Sample: 10 HttpURLConnection
----------------------------------------------------------------
1. `void connect()`: This method establishes a connection to the URL specified by this HttpURLConnection object.
2. `int getResponseCode()`: This method gets the HTTP response code from the server after the connection is made.
3. `OutputStream getOutputStream()`: This method returns an output stream that writes to this connection.
4. `void setRequestMethod(String method)`: This method sets the request method to be used for the URL request.
5. `void setRequestProperty(String key, String value)`: This method adds a general request property specified by a key-value pair.
================================================================

Sample: 11 IDN
----------------------------------------------------------------
1. `String toASCII(String input)`: This method converts a domain name to ASCII-compatible form.
2. `String toUnicode(String input)`: This method converts an ASCII-compatible domain name to Unicode format.
3. `boolean isValid(String input)`: This method checks if the input string is a valid domain name.
4. `String nameToASCII(String input)`: This method converts a domain name to its ASCII-compatible form using nameprep and enforce compatibility preprocessing.
5. `String nameToUnicode(String input)`: This method converts a domain name to its Unicode format using nameprep and enforce compatibility preprocessing.
================================================================

Sample: 12 Inet4Address
----------------------------------------------------------------
1. `String getHostAddress()`: This method returns the IP address string in textual presentation.
2. `boolean isAnyLocalAddress()`: This method returns true if the address is a wildcard address.
3. `boolean isLinkLocalAddress()`: This method returns true if the address is a link-local address.
4. `boolean isLoopbackAddress()`: This method returns true if the address is a loopback address.
5. `boolean isMulticastAddress()`: This method returns true if the address is a multicast address.
================================================================

Sample: 13 Inet6Address
----------------------------------------------------------------
1. `Inet6Address getByAddress(byte[] addr)`: This method returns an Inet6Address object with the specified byte array representing the IPv6 address.
2. `String getHostAddress()`: This method returns the IPv6 string representation of the address.
3. `boolean isLinkLocalAddress()`: This method returns true if the IPv6 address is a link-local address, false otherwise.
4. `boolean isLoopbackAddress()`: This method returns true if the IPv6 address is a loopback address, false otherwise.
5. `byte[] getAddress()`: This method returns the raw byte array of the IPv6 address represented by the object.
================================================================

Sample: 14 InetAddress
----------------------------------------------------------------
1. `static InetAddress getByName(String host)`: This method returns the InetAddress instance representing the specified host.
2. `static InetAddress getLocalHost()`: This method returns the InetAddress instance representing the local host.
3. `byte[] getAddress()`: This method returns the raw IP address of this InetAddress object.
4. `String getHostName()`: This method gets the host name for this IP address.
5. `boolean isReachable(int timeout)`: This method checks if the address is reachable and returns true if it is reachable within the specified timeout.
================================================================

Sample: 15 InetSocketAddress
----------------------------------------------------------------
1. `String getAddress()`: This method returns the hostname of the InetAddress.
2. `int getPort()`: This method returns the port number.
3. `boolean isUnresolved()`: This method returns whether this socket address has unresolved hostname or not.
4. `String toString()`: This method returns a string representation of the InetSocketAddress.
5. `static InetSocketAddress createUnresolved(String host, int port)`: This method creates an unresolved instance of InetSocketAddress with the specified hostname and port number.
================================================================

Sample: 16 InterfaceAddress
----------------------------------------------------------------
1. `InetAddress getAddress()`: Returns the InetAddress for this InterfaceAddress.
2. `short getNetworkPrefixLength()`: Returns the network prefix length for this InterfaceAddress.
3. `boolean equals(Object obj)`: Indicates whether some other object is "equal to" this one.
4. `int hashCode()`: Returns a hash code value for the object.
5. `String toString()`: Returns a string representation of the object.
================================================================

Sample: 17 JarURLConnection
----------------------------------------------------------------
1. `JarFile getJarFile()`: Returns the JarFile object associated with this connection.
2. `JarEntry getJarEntry()`: Returns the JarEntry object for the JAR file entry represented by this URL.
3. `Attributes getMainAttributes()`: Returns the main attributes for the JAR file manifest, or null if none.
4. `Manifest getManifest()`: Returns the Manifest object for the JAR file that this connection refers to.
5. `Attributes getAttributes()`: Returns the attributes for the JAR file entry represented by this URL.
================================================================

Sample: 18 MulticastSocket
----------------------------------------------------------------
1. `void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)`: This method joins a multicast group, using the specified socket address and network interface.
2. `void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)`: This method leaves a multicast group, using the specified socket address and network interface.
3. `void setTimeToLive(int ttl)`: This method sets the time-to-live for multicast packets sent on this socket.
4. `void setLoopbackMode(boolean disable)`: This method disables or enables the network loopback mode for multicast packets.
5. `void setInterface(InetAddress inf)`: This method sets the network interface address for outgoing multicast packets.
================================================================

Sample: 19 NetPermission
----------------------------------------------------------------
1. `void checkGuard(Object guard)`: This method checks the permission for the specified guard object.
2. `String getName()`: This method returns the name of this permission.
3. `int hashCode()`: This method returns the hash code value for this object.
4. `boolean implies(Permission p)`: This method checks if the specified permission is implied by this permission. 
5. `String getActions()`: This method returns the actions of this permission.
================================================================

Sample: 20 NetworkInterface
----------------------------------------------------------------
1. `String getDisplayName()`: Returns the name of this network interface.
2. `List<InterfaceAddress> getInterfaceAddresses()`: Returns a List of InterfaceAddress objects representing all the interface addresses on this network interface.
3. `Enumeration<InetAddress> getInetAddresses()`: Returns an Enumeration of all the InetAddresses bound to this network interface.
4. `int getIndex()`: Returns the index of this network interface.
5. `boolean isUp()`: Returns true if the network interface is up and running.
================================================================

Sample: 21 PasswordAuthentication
----------------------------------------------------------------
1. `char[] getPassword()`: This method returns the password as a character array.
2. `String getUserName()`: This method returns the username associated with the authentication request.
3. `void clearPassword()`: This method clears the password from the password array.
4. `void setPassword(char[] password)`: This method sets the password using the specified character array.
5. `void setUserName(String userName)`: This method sets the username for the authentication request.
================================================================

Sample: 22 Proxy
----------------------------------------------------------------
1. `SocketAddress address()`: Returns the socket address of the proxy.
2. `Proxy.Type type()`: Returns the type of this Proxy.
3. `static ProxySelector getDefault()`: Returns the system-wide proxy selector.
4. `SocketAddress sa()`: Returns the socket address of the proxy, address might not be resolved for SOCKS proxy.
5. `SelectorProvider provider()`: Returns the selector provider for this Proxy.
================================================================

Sample: 23 ProxySelector
----------------------------------------------------------------
1. `List<Proxy> select(URI uri)`: This method selects all the applicable proxies based on the specified URI.
2. `void connectFailed(URI uri, SocketAddress sa, IOException ioe)`: This method notifies the proxy selector that a connection to a proxy has failed.
3. `ProxySelector getDefault()`: This method returns the default proxy selector.
4. `void setDefault(ProxySelector ps)`: This method sets the default proxy selector.
5. `void add(ProxySelector p)`: This method adds a new proxy selector.
================================================================

Sample: 24 ResponseCache
----------------------------------------------------------------
1. `CacheResponse get(URI uri, String requestMethod, Map<String, List<String>> requestHeaders)`: This method retrieves the cache response for the specified URI, request method, and request headers.
   
2. `CacheRequest put(URI uri, URLConnection conn)`: This method puts the cache request for the specified URI and URL connection.

3. `long size()`: This method returns the current size of the cache.

4. `void trackResponse(URI uri, CacheResponse response)`: This method tracks the cache response for the specified URI.

5. `void trackConditionalCacheEntry(URI uri, CacheResponse rsp)`: This method tracks the conditional cache entry for the specified URI and cache response.
================================================================

Sample: 25 SecureCacheResponse
----------------------------------------------------------------
1. `void close()`: Closes this cache response and releases any system resources associated with it.
2. `InputStream getBody()`: Returns an InputStream that can be used to retrieve the response body.
3. `Map<String, List<String>> getHeaders()`: Returns an unmodifiable map of response headers.
4. `String getCipherSuite()`: Returns the name of the cipher suite used for the SSL connection.
5. `List<Certificate> getServerCertificates()`: Returns an immutable list of server certificates.
================================================================

Sample: 26 ServerSocket
----------------------------------------------------------------
1. `Socket accept()`: This method listens for a connection to be made to this socket and accepts it.
2. `void close()`: This method closes this socket.
3. `InetAddress getInetAddress()`: This method returns the address of the endpoint this socket is bound to.
4. `int getLocalPort()`: This method returns the port number on the local host to which this socket is bound.
5. `void setReuseAddress(boolean on)`: This method enables/disables the SO_REUSEADDR socket option.
================================================================

Sample: 27 Socket
----------------------------------------------------------------
1. `InputStream getInputStream()`: This method returns an input stream for this socket.
2. `OutputStream getOutputStream()`: This method returns an output stream for this socket.
3. `void bind(SocketAddress bindpoint)`: Binds the socket to a local address.
4. `void connect(SocketAddress endpoint)`: Connects this socket to the server at the specified endpoint.
5. `void setSoTimeout(int timeout)`: Sets the timeout in milliseconds for blocking socket operations.
================================================================

Sample: 28 SocketAddress
----------------------------------------------------------------
1. `SocketAddress getAddress()`: Returns the address information as a SocketAddress.
2. `int hashCode()`: Returns a hash code value for the object.
3. `boolean equals(Object obj)`: Indicates whether some other object is "equal to" this one.
4. `String toString()`: Returns a string representation of the object.
5. `Object clone()`: Creates and returns a copy of this object.
================================================================

Sample: 29 SocketImpl
----------------------------------------------------------------
1. `void setOption(int opt, Object value)`: This method sets the value of a socket option.
   
2. `void connect(SocketAddress address, int timeout)`: This method connects this socket to the server at the specified address and port number.
   
3. `void bind(InetAddress host, int port)`: This method binds the socket to the specified local address and port number.
   
4. `InputStream getInputStream()`: This method returns an input stream for this socket.
   
5. `OutputStream getOutputStream()`: This method returns an output stream for this socket.
================================================================

Sample: 30 SocketPermission
----------------------------------------------------------------
1. `void setActions(String actions)`: This method sets the actions allowed for the socket permission.
2. `String getActions()`: This method returns the actions allowed for the socket permission.
3. `boolean implies(Permission p)`: This method checks if this socket permission implies the specified permission.
4. `void setActions(String actions)`: This method sets the actions allowed for the socket permission.
5. `String actionsImplies(Permission permission)`: This method checks if this permission implies the specified permission.
================================================================

Sample: 31 StandardSocketOptions
----------------------------------------------------------------
1. `Boolean SO_KEEPALIVE()`: Returns the value of the SO_KEEPALIVE socket option.
2. `Boolean TCP_NODELAY()`: Returns the value of the TCP_NODELAY socket option.
3. `Boolean SO_LINGER()`: Returns the value of the SO_LINGER socket option.
4. `Integer SO_RCVBUF()`: Returns the value of the SO_RCVBUF socket option.
5. `Integer SO_SNDBUF()`: Returns the value of the SO_SNDBUF socket option.
================================================================

Sample: 32 URI
----------------------------------------------------------------
1. `String getScheme()` - This method returns the scheme component of this URI.
2. `String getHost()` - This method returns the host component of this URI.
3. `int getPort()` - This method returns the port component of this URI.
4. `String getPath()` - This method returns the path component of this URI.
5. `String getQuery()` - This method returns the query component of this URI.
================================================================

Sample: 33 URL
----------------------------------------------------------------
1. `InputStream openStream()`: This method opens a connection to the URL and returns an InputStream for reading from that connection.
2. `void openConnection()`: This method opens a connection to the URL.
3. `URLConnection openConnection()`: This method opens a connection to the URL and returns a URLConnection object for that connection.
4. `String getProtocol()`: This method returns the protocol of the URL.
5. `String getFile()`: This method returns the file name of the URL.
================================================================

Sample: 34 URLClassLoader
----------------------------------------------------------------
1. `Class<?> findClass(String name)`: This method finds and loads the class with the specified binary name.
   
2. `void close()`: This method closes this URLClassLoader, so it can be garbage collected.

3. `URL[] getURLs()`: This method returns the search path of URLs for loading classes and resources.

4. `Class<?> loadClass(String name)`: This method loads the class with the specified binary name.

5. `void clearAssertionStatus()`: This method clears the assertion status for the class that is specified by the URL.
================================================================

Sample: 35 URLConnection
----------------------------------------------------------------
1. `void connect()`: This method establishes a connection to the URL specified.
2. `InputStream getInputStream()`: This method returns an input stream that reads from the open connection.
3. `void setDoOutput(boolean dooutput)`: This method sets the doOutput flag to the specified value.
4. `void setRequestProperty(String key, String value)`: This method sets the general request property with the specified key and value.
5. `void setRequestMethod(String method)`: This method sets the request method for the URL connection.
================================================================

Sample: 36 URLDecoder
----------------------------------------------------------------
1. `String decode(String s)`: This method decodes a application/x-www-form-urlencoded string.
2. `String decode(String s, String enc)`: This method decodes a application/x-www-form-urlencoded string using a specific encoding scheme.
3. `String decode(String s, Charset charset)`: This method decodes a application/x-www-form-urlencoded string using a specific Charset.
4. `String decode(String s, String enc, boolean convertPlus)`: This method decodes a application/x-www-form-urlencoded string using a specific encoding scheme and optional flag indicating whether to convert '+' to space character.
5. `String decode(String s, Charset charset, boolean convertPlus)`: This method decodes a application/x-www-form-urlencoded string using a specific Charset and optional flag indicating whether to convert '+' to space character.
================================================================

Sample: 37 URLEncoder
----------------------------------------------------------------
1. `String encode(String s)`: This method encodes a String using the default UTF-8 charset.
2. `String encode(String s, String enc)`: This method encodes a String using a specific charset.
3. `String encode(String s, Charset charset)`: This method encodes a String using a Charset object.
4. `String encode(String s, CharsetEncoder enc)`: This method encodes a String using a CharsetEncoder object.
5. `String encode(String s, String enc, BiConsumer<byte[], Integer> onMalformedInput)`: This method encodes a String using a specific charset and allows for custom handling of malformed input.
================================================================

Sample: 38 URLPermission
----------------------------------------------------------------
1. `String actions()`: This method returns the actions permitted for this URLPermission.
2. `int hashCode()`: This method returns a hash code value for this URLPermission.
3. `boolean implies(Permission permission)`: This method checks if the specified permission is implied by this URLPermission.
4. `PermissionCollection newPermissionCollection()`: This method returns a new PermissionCollection object for storing URLPermission objects.
5. `String getActions()`: This method returns the actions permitted for this URLPermission.
================================================================

Sample: 39 URLStreamHandler
----------------------------------------------------------------
1. `URLConnection openConnection(URL u)`: This method opens a connection to the specified URL and returns a URLConnection object for the URL.
2. `void parseURL(URL u, String spec, int start, int limit)`: This method parses the URL string into a URL object. 
3. `void setURL(URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)`: This method sets the various parts of the URL object.
4. `void setURL(URL u, String protocol, String host, int port, String file, String ref)`: This method sets the various parts of the URL object excluding the query component.
5. `String toExternalForm(URL u)`: This method constructs a string representation of the URL.
================================================================

