Sample: 0 Files
----------------------------------------------------------------
1. `List<String> readAllLines(Path path)`: This method reads all lines from a file as a list of strings.
2. `void write(Path path, byte[] bytes)`: This method writes a byte array to a file.
3. `Path createFile(Path path, FileAttribute<?>... attrs)`: This method creates a new empty file at the specified path.
4. `boolean isRegularFile(Path path, LinkOption... options)`: This method checks if the specified path references a regular file.
5. `long size(Path path, LinkOption... options)`: This method returns the size of a file in bytes.
================================================================

Sample: 1 FileStore
----------------------------------------------------------------
1. `String toString()`: Returns a string representation of this FileStore.
   
2. `long getTotalSpace()`: Returns the total space in bytes for this FileStore.
   
3. `long getUsableSpace()`: Returns the number of bytes available to this FileStore.
   
4. `long getUnallocatedSpace()`: Returns the number of bytes available to this FileStore for unallocated space.

5. `boolean isReadOnly()`: Returns true if this FileStore is read-only.
================================================================

Sample: 2 FileSystem
----------------------------------------------------------------
1. `FileSystemProvider provider()`: This method returns the provider that created this file system.
2. `Iterable<Path> getRootDirectories()`: This method returns an iterable object over all the root directories in the file system.
3. `Path getPath(String first, String... more)`: This method converts a sequence of strings into a Path.
4. `PathMatcher getPathMatcher(String syntaxAndPattern)`: This method returns a PathMatcher that performs match operations on the String representation of Path objects.
5. `WatchService newWatchService()`: This method constructs a new WatchService.
================================================================

Sample: 3 FileSystems
----------------------------------------------------------------
1. `Path getPath(String first, String... more)`: This method returns a `Path` by converting a path string, or a sequence of strings that when joined form a path string.
   
2. `FileSystem getFileSystem()`: This method returns the `FileSystem` that created this object.
   
3. `Iterable<Path> getRootDirectories()`: This method returns an Iterable object that can be used to iterate over the root directories.
   
4. `WatchService newWatchService()`: This method opens a `WatchService` for watching file events on this file system.
   
5. `FileStore getFileStore(Path path)`: This method returns the `FileStore` representing the file store where a file is located.
================================================================

Sample: 4 LinkPermission
----------------------------------------------------------------
1. `void checkRead()`: This method checks if the permission to read the symbolic link is allowed.
   
2. `void checkWrite()`: This method checks if the permission to write to the symbolic link is allowed. 

3. `void checkPermission(String path, String actions)`: This method checks if the permission to perform the specified actions on the symbolic link is allowed. 

4. `LinkPermission(String actions)`: Constructor method that creates a new LinkPermission object with the specified actions.

5. `boolean implies(Permission p)`: This method checks if the LinkPermission object implies the specified permission.
================================================================

Sample: 5 Paths
----------------------------------------------------------------
1. `Path relativize(Path other)`: This method returns a relative path between this path and the given path.
2. `Path resolve(String other)`: This method resolves the given path against this path.
3. `Path resolveSibling(Path other)`: This method resolves the given path against the parent path of this path.
4. `File toFile()`: This method converts this Path object into a File object.
5. `InputStream newInputStream(OpenOption... options)`: This method opens a file, returning an input stream to read from the file.
================================================================

Sample: 6 SimpleFileVisitor
----------------------------------------------------------------
1. `FileVisitResult postVisitDirectory(Object dir, IOException exc)`: This method is called after all the entries in a directory are visited. It returns a FileVisitResult indicating the result of the visit.
   
2. `FileVisitResult preVisitDirectory(Object dir, BasicFileAttributes attrs)`: This method is called before entries in a directory are visited. It returns a FileVisitResult indicating the result of the visit.
   
3. `FileVisitResult visitFile(Object file, BasicFileAttributes attrs)`: This method is called for each file visited. It returns a FileVisitResult indicating the result of the visit.
   
4. `FileVisitResult visitFileFailed(Object file, IOException exc)`: This method is called when a file visit fails. It returns a FileVisitResult indicating the result of the visit.
   
5. `void folders(int depth, String path, BasicFileAttributes attr)`: This method can be overridden to perform operations on directories, such as printing their depth, path, and attributes. It does not have a return type and takes parameters for depth, path, and attributes.
================================================================

Sample: 7 StandardWatchEventKinds
----------------------------------------------------------------
1. `WatchEvent.Kind<?> kind()`: Returns the kind of event.

2. `WatchEvent.Modifier modifier()`: Returns the modifier that detects events for directories.

3. `WatchEvent<Path> context()`: Returns the context for the event.

4. `boolean isOverflow()`: Returns a flag indicating if the event was caused by an overflow.

5. `WatchEvent.Kind<Path> kind()`: Returns the kind of event as a Path specific kind.
================================================================

