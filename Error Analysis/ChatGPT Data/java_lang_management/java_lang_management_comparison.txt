Sample: 0 LockInfo
----------------------------------------------------------------
1. `String getClassName()`: Returns the fully qualified name of the class that owns the static synchronization object for this lock.
2. `int getIdentityHashCode()`: Returns the identity hash code of the lock object.
3. `int getLockIdentityHashCode()`: Returns the identity hash code of the lock object associated with this LockInfo.
4. `String toString()`: Returns a string representation of this LockInfo object.
5. `boolean equals(Object obj)`: Indicates whether some other object is "equal to" this one.
================================================================

Sample: 1 ManagementFactory
----------------------------------------------------------------
1. `MemoryMXBean getMemoryMXBean()`: This method returns the MemoryMXBean that provides access to the memory system of the Java virtual machine.
2. `ThreadMXBean getThreadMXBean()`: This method returns the ThreadMXBean that provides access to the thread system of the Java virtual machine.
3. `OperatingSystemMXBean getOperatingSystemMXBean()`: This method returns the OperatingSystemMXBean that provides access to the operating system on which the Java virtual machine is running.
4. `RuntimeMXBean getRuntimeMXBean()`: This method returns the RuntimeMXBean that provides access to the runtime system of the Java virtual machine.
5. `ClassLoadingMXBean getClassLoadingMXBean()`: This method returns the ClassLoadingMXBean that provides access to the class loading system of the Java virtual machine.
================================================================

Sample: 2 ManagementPermission
----------------------------------------------------------------
1. `void checkPermission(Permission perm)`: This method checks if the specified permission is allowed.
2. `void checkPermission(Permission perm, Object context)`: This method checks if the specified permission is allowed with the specified context.
3. `void checkPermission(Permission perm, Object context)`: This method checks if the specified permission is allowed with the specified target and actions.
4. `void checkPermission(Permission perm, ProtectionDomain pd)`: This method checks if the specified permission is allowed within the specified protection domain.
5. `boolean implies(Permission p)`: This method checks if the permission collection implies the specified permission.
================================================================

Sample: 3 MemoryNotificationInfo
----------------------------------------------------------------
1. `String getPoolName()`: This method returns the name of the memory pool that emitted the notification.
2. `MemoryType getMemoryType()`: This method returns the memory type that the notification is related to.
3. `long getCount()`: This method returns the count associated with this notification.
4. `String getUsage()`: This method returns a String representation of the memory usage associated with the notification.
5. `MemoryUsage getUsageBefore()`: This method returns the memory usage before the notification occurred.
================================================================

Sample: 4 MemoryUsage
----------------------------------------------------------------
1. `long getInit()`: Returns the amount of memory in bytes that the JVM initially requests from the operating system for memory management.
   
2. `long getUsed()`: Returns the amount of used memory in bytes.

3. `long getCommitted()`: Returns the amount of memory that is committed for the JVM by the operating system in bytes.

4. `long getMax()`: Returns the maximum amount of memory in bytes that the JVM can use.

5. `String toString()`: Returns a string representation of the MemoryUsage object.
================================================================

Sample: 5 MonitorInfo
----------------------------------------------------------------
1. `int getLockedStackDepth()`: This method returns the depth in the stack trace where the object is locked.
2. `MonitorInfo[] getLockedMonitors()`: This method returns an array of MonitorInfo objects representing the locked monitors.
3. `StackTraceElement getLockedStackFrame()`: This method returns a StackTraceElement object representing the stack frame where the object is locked.
4. `boolean hasOwner()`: This method returns true if the monitor is owned, false otherwise.
5. `boolean isLocked()`: This method returns true if the object is locked, false otherwise.
================================================================

Sample: 6 ThreadInfo
----------------------------------------------------------------
1. `long getThreadId()`: This method returns the ID of the thread associated with this ThreadInfo instance.
2. `String getThreadName()`: This method returns the name of the thread associated with this ThreadInfo instance.
3. `StackTraceElement[] getStackTrace()`: This method returns an array of StackTraceElement objects representing the stack trace of the thread associated with this ThreadInfo instance.
4. `Thread.State getThreadState()`: This method returns the state of the thread associated with this ThreadInfo instance.
5. `MonitorInfo[] getLockedMonitors()`: This method returns an array of MonitorInfo objects representing the monitors owned by the thread associated with this ThreadInfo instance.
================================================================

