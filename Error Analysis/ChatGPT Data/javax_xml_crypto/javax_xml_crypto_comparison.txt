Sample: 0 KeySelector
----------------------------------------------------------------
1. KeySelectorResult select(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context): This method selects a key from the candidate keys that are valid for the intended recipient(s) of the key being processed.
   
2. Node bind(Key key, XMLCryptoContext context): This method returns the public key that matches the specified key information contained in the KeySelector.
   
3. boolean canResolve(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context): This method indicates whether the specified key information can be resolved by this KeySelector.
   
4. KeySelectorResult find(KeyInfo keyInfo, Purpose purpose, AlgorithmMethod method, XMLCryptoContext context): This method finds and returns a KeySelectorResult containing the key corresponding to the specified key information.
   
5. KeySelectorResult postSelectionSelect(Key key, XMLCryptoContext context, Purpose purpose, AlgorithmMethod method): This method allows a KeySelector to perform any post-selection processing or validation of the selected key before it is returned.
================================================================

Sample: 1 KeySelector.Purpose
----------------------------------------------------------------
1. `KeySelector.Purpose getKeyPurpose()`: This method returns the purpose of the key.
2. `boolean isFeatureSupported(String feature)`: This method checks if a specified feature is supported.
3. `boolean matchesIssuer(X509Certificate cert)`: This method checks if the key selector is valid for a given X.509 certificate.
4. `boolean equals(Object obj)`: This method compares this KeySelector.Purpose to the specified object.
5. `int hashCode()`: This method returns the hash code value for this KeySelector.Purpose.
================================================================

Sample: 2 OctetStreamData
----------------------------------------------------------------
1. `InputStream getOctetStream()`: This method returns an InputStream representing the octets.
2. `Object getTransform()` : This method returns the URIDereferencer which has been set with setTransform(URIDereferencer).
3. `String getMimeType()`: This method returns the MIME type associated with this OctetStreamData.
4. `Data dereference(XMLCryptoContext context)`: This method dereferences the octets and returns the resulting Data.
5. `void write(OutputStream output)`: This method writes the octets to the specified OutputStream.
================================================================

