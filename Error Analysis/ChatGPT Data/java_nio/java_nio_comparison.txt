Sample: 0 Buffer
----------------------------------------------------------------
1. `int capacity()`: Returns the capacity of this buffer.
2. `Buffer clear()`: Clears this buffer.
3. `Buffer flip()`: Flips this buffer.
4. `boolean isDirect()`: Returns true if this buffer is direct, false otherwise.
5. `int remaining()`: Returns the number of elements between the current position and the limit.
================================================================

Sample: 1 ByteBuffer
----------------------------------------------------------------
1. `ByteBuffer slice()`: This method creates a new byte buffer which shares content with this buffer.
2. `int capacity()`: This method returns the capacity of this buffer.
3. `ByteBuffer put(byte[] src)`: This method writes a byte array to this buffer.
4. `int getInt()`: This method reads the next four bytes from this buffer as an int.
5. `ByteBuffer compact()`: This method compacts this buffer.
================================================================

Sample: 2 ByteOrder
----------------------------------------------------------------
1. `ByteOrder nativeOrder()`: This method returns the native byte order of the underlying hardware.
2. `short getShort(byte[] bytes, int offset)`: This method wraps a byte array into a buffer and reads the next two bytes as a short value.
3. `char getChar(byte[] bytes, int offset)`: This method wraps a byte array into a buffer and reads the next two bytes as a char value.
4. `int getInt(byte[] bytes, int offset)`: This method wraps a byte array into a buffer and reads the next four bytes as an int value.
5. `long getLong(byte[] bytes, int offset)`: This method wraps a byte array into a buffer and reads the next eight bytes as a long value.
================================================================

Sample: 3 CharBuffer
----------------------------------------------------------------
1. `int length()`: This method returns the length of the CharBuffer (number of elements).
2. `CharBuffer clear()`: This method resets the buffer to be empty.
3. `CharBuffer flip()`: This method flips the buffer between writing and reading mode.
4. `CharBuffer compact()`: This method compacts the buffer by removing the already-read characters while preserving unread characters for later reading.
5. `CharBuffer duplicate()`: This method creates a duplicate of the buffer.
================================================================

Sample: 4 DoubleBuffer
----------------------------------------------------------------
1. `DoubleBuffer put(double[] src)`: This method transfers the entire content of the given source array into this buffer.
2. `double get()`: This method retrieves the double at the buffer's current position and increments the position.
3. `DoubleBuffer clear()`: This method resets the buffer's position to zero and limit to capacity, making it ready for a new sequence of channel-read or relative put operations.
4. `DoubleBuffer slice()`: This method creates a new buffer that shares the content of the original buffer, but with its own position, limit, and capacity.
5. `DoubleBuffer compact()`: This method discards the data between the buffer's position and limit, moving any remaining data to the buffer's beginning.
================================================================

Sample: 5 FloatBuffer
----------------------------------------------------------------
1. `FloatBuffer put(float[] src)`: This method transfers the float array into this buffer.
2. `float get()`: This method reads the float at this buffer's current position, and then increments the position.
3. `FloatBuffer compact()`: This method compact the buffer's remaining floats into a new buffer.
4. `FloatBuffer duplicate()`: This method creates a new float buffer that shares this buffer's content.
5. `int remaining()`: This method returns the number of floats between the current position and the limit.
================================================================

Sample: 6 IntBuffer
----------------------------------------------------------------
1. `int get()`: This method retrieves the integer at the current position in the buffer.
2. `IntBuffer put(int value)`: This method puts an integer into the buffer at the current position.
3. `int capacity()`: This method returns the capacity of the buffer.
4. `IntBuffer compact()`: This method compacts the buffer by removing leading bytes.
5. `IntBuffer slice()`: This method creates a new buffer that shares the same content as the original buffer.
================================================================

Sample: 7 LongBuffer
----------------------------------------------------------------
1. int remaining(): This method returns the number of elements between the current position and the limit.
2. LongBuffer put(long[] src, int offset, int length): This method transfers longs from the given source array into this buffer at the current position.
3. LongBuffer put(LongBuffer src): This method transfers longs from the given source buffer into this buffer at the current position.
4. long get(): This method reads the long at the current position and then increments the position.
5. LongBuffer duplicate(): This method creates a new LongBuffer that shares this buffer's content.
================================================================

Sample: 8 MappedByteBuffer
----------------------------------------------------------------
1. `int capacity()`: Returns the capacity of this buffer.
2. `MappedByteBuffer force()`: Forces any changes made to this buffer to be written to the storage device.
3. `byte get()`: Reads a byte at this buffer's current position, and then increments the position.
4. `MappedByteBuffer put(byte b)`: Writes the specified byte into this buffer at the current position.
5. `char getChar()`: Reads a character at the buffer's current position, and then increments the position by two.
================================================================

Sample: 9 ShortBuffer
----------------------------------------------------------------
1. `ShortBuffer put(short[] src)`: This method bulk puts the given short array into this buffer.
2. `ShortBuffer compact()`: This method compact the buffer.
3. `ShortBuffer slice()`: This method creates a view of this buffer as a sliced buffer.
4. `short get()`: This method reads the short at this buffer's current position.
5. `ShortBuffer duplicate()`: This method creates a new buffer that shares this buffer's content.
================================================================

