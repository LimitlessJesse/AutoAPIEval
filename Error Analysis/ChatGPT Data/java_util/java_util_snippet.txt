Sample: 0 AbstractCollection_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list1 = new ArrayList<>();
        list1.add("Hello");

        ArrayList<String> list2 = new ArrayList<>();
        list2.add("World");

        boolean result = list1.addAll(list2);
        System.out.println("Elements added successfully: " + result);
        System.out.println("Combined list: " + list1);
    }
}
```
================================================================

Sample: 1 AbstractCollection_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");

        boolean containsHello = list.contains("Hello");
        System.out.println("Contains Hello? " + containsHello);
    }
}
```
================================================================

Sample: 2 AbstractCollection_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        System.out.println("Is list empty? " + list.isEmpty());
        list.add("Hello");
        System.out.println("Is list still empty? " + list.isEmpty());
    }
}
```
================================================================

Sample: 3 AbstractCollection_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        System.out.println("Size of the list: " + list.size());
    }
}
```
================================================================

Sample: 4 AbstractCollection_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");

        Object[] newArray = list.toArray();
        System.out.println("Array elements: " + Arrays.toString(newArray));
    }
}
```
================================================================

Sample: 5 AbstractList_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractList;

public class Main {
    public static void main(String[] args) {
        MyCustomList<String> list = new MyCustomList<>();
        list.add("Hello");
        System.out.println(list.get(0));
    }

    static class MyCustomList<E> extends AbstractList<E> {
        private Object[] elements = new Object[10];
        private int size = 0;

        public E get(int index) {
            if (index < 0 || index >= size) {
                throw new IndexOutOfBoundsException();
            }
            return (E) elements[index];
        }

        public boolean add(E e) {
            if (size == elements.length) {
                Object[] newElements = new Object[elements.length * 2];
                System.arraycopy(elements, 0, newElements, 0, elements.length);
                elements = newElements;
            }
            elements[size++] = e;
            return true;
        }

        public int size() {
            return size;
        }
    }
}
```
================================================================

Sample: 6 AbstractList_2
----------------------------------------------------------------
`E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.

Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        System.out.println("Before set operation: " + list);
        
        list.set(1, "Java");
        System.out.println("After set operation: " + list);
    }
}
```
================================================================

Sample: 7 AbstractList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        
        // Find the index of element "World"
        int index = list.indexOf("World");
        System.out.println("Index of 'World': " + index);
    }
}
```
================================================================

Sample: 8 AbstractList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Hello");
        int lastIndex = list.lastIndexOf("Hello");
        System.out.println("Last index of 'Hello': " + lastIndex);
    }
}
```
================================================================

Sample: 9 AbstractList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Cherry");
        
        List<String> subList = list.subList(1, 3);
        System.out.println(subList);
    }
}
```
================================================================

Sample: 10 AbstractMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        Map.Entry<String, Integer> entry1 = new AbstractMap.SimpleEntry<>("A", 1);
        Map.Entry<String, Integer> entry2 = new AbstractMap.SimpleEntry<>("B", 2);

        boolean isEqual = entry1.equals(entry2);
        System.out.println("Are the entries equal? " + isEqual);
    }
}
```
================================================================

Sample: 11 AbstractMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public int hashCode() {
                // Your custom implementation for generating the hash code
                // This method should return a unique hash code for each key-value pair in the map
                return super.hashCode();
            }
        };
        map.put("key1", 1);
        map.put("key2", 2);
        System.out.println("Hash code of the map: " + map.hashCode());
    }
}
```
================================================================

Sample: 12 AbstractMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        AbstractMap<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Set<Entry<String, Integer>> entrySet() {
                return null;
            }
        };

        map.put("One", 1);
        map.put("Two", 2);

        Set<String> keySet = map.keySet();
        System.out.println("Key Set: " + keySet);
    }
}
```
================================================================

Sample: 13 AbstractMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;
import java.util.Collection;

public class Main {
    public static void main(String[] args) {
        AbstractMap<String, Integer> map = new AbstractMap<String, Integer>() {
            @Override
            public Collection<Integer> values() {
                return null; // Return collection of values
            }
        };
    }
}
```
================================================================

Sample: 14 AbstractMap_SimpleEntry_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap.SimpleEntry;

public class Main {
    public static void main(String[] args) {
        SimpleEntry<String, Integer> entry = new SimpleEntry<>("Key", 10);
        System.out.println("Before: " + entry.getValue());
        
        entry.setValue(20);
        System.out.println("After: " + entry.getValue());
    }
}
```
================================================================

Sample: 15 AbstractMap_SimpleEntry_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<Integer, String> entry1 = new AbstractMap.SimpleEntry<>(1, "One");
        AbstractMap.SimpleEntry<Integer, String> entry2 = new AbstractMap.SimpleEntry<>(1, "One");
        
        System.out.println(entry1.equals(entry2)); // Output: true
    }
}
```
================================================================

Sample: 16 AbstractMap_SimpleEntry_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<Integer, String> entry = new AbstractMap.SimpleEntry<>(1, "One");
        System.out.println(entry.hashCode());
    }
}
```
================================================================

Sample: 17 AbstractMap_SimpleEntry_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<String, Integer> entry = new AbstractMap.SimpleEntry<>("Key", 123);
        System.out.println(entry.toString());
    }
}
```
================================================================

Sample: 18 AbstractMap_SimpleEntry_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleEntry<Integer, String> entry = new AbstractMap.SimpleEntry<>(1, "One");
        Integer key = entry.getKey();
        System.out.println("Key: " + key);
    }
}
```
================================================================

Sample: 19 AbstractMap_SimpleImmutableEntry_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap.SimpleImmutableEntry;

public class Main {
    public static void main(String[] args) {
        SimpleImmutableEntry<String, Integer> entry = new SimpleImmutableEntry<>("key", 10);
        String key = entry.getKey();
        System.out.println("Key: " + key);
    }
}
```
================================================================

Sample: 20 AbstractMap_SimpleImmutableEntry_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("key", 10);
        String value = entry.getValue();
        System.out.println(value);
    }
}
```
================================================================

Sample: 21 AbstractMap_SimpleImmutableEntry_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        // Create a SimpleImmutableEntry
        AbstractMap.SimpleImmutableEntry<String, Integer> entry = new AbstractMap.SimpleImmutableEntry<>("Key", 10);
        
        // Call toString() method
        String entryString = entry.toString();
        
        // Print the result
        System.out.println("SimpleImmutableEntry toString: " + entryString);
    }
}
```
================================================================

Sample: 22 AbstractMap_SimpleImmutableEntry_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.AbstractMap;

public class Main {
    public static void main(String[] args) {
        AbstractMap.SimpleImmutableEntry<String, Integer> entry1 = new AbstractMap.SimpleImmutableEntry<>("Key", 10);
        AbstractMap.SimpleImmutableEntry<String, Integer> entry2 = new AbstractMap.SimpleImmutableEntry<>("Key", 10);
        
        boolean isEqual = entry1.equals(entry2);
        System.out.println("Are the entries equal? " + isEqual);
    }
}
```
================================================================

Sample: 23 AbstractSequentialList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;
import java.util.ListIterator;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("Hello");
        list.add("World");

        ListIterator<String> iterator = list.listIterator(1); // Start iterating from index 1
        while (iterator.hasNext()) {
            System.out.println(iterator.next()); // Output: World
        }
    }
}
```
================================================================

Sample: 24 ArrayDeque_1
----------------------------------------------------------------
void addFirst(E e): This method inserts the specified element at the beginning of this deque.

Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.addFirst("First");
        deque.addFirst("Second");
        
        System.out.println(deque);
    }
}
```
================================================================

Sample: 25 ArrayDeque_2
----------------------------------------------------------------
void addLast(E e): This method appends the specified element to the end of this deque.

Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.addLast("World");
        deque.addLast("Java");
        System.out.println(deque);
    }
}
```
================================================================

Sample: 26 ArrayDeque_3
----------------------------------------------------------------
`E removeFirst()`: This method removes and returns the first element from this deque.

Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        deque.add("Third");

        System.out.println("Before removeFirst(): " + deque);

        String removed = deque.removeFirst();

        System.out.println("Removed element: " + removed);
        System.out.println("After removeFirst(): " + deque);
    }
}
```
================================================================

Sample: 27 ArrayDeque_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        System.out.println("Deque before: " + deque);

        deque.removeLast();

        System.out.println("Deque after removeLast(): " + deque);
    }
}
```
================================================================

Sample: 28 ArrayDeque_5
----------------------------------------------------------------
```java
import java.util.ArrayDeque;

public class Main {
    public static void main(String[] args) {
        ArrayDeque<String> deque = new ArrayDeque<>();
        deque.add("First");
        deque.add("Second");
        deque.add("Third");

        String firstElement = deque.getFirst();
        System.out.println("First element in the deque: " + firstElement);
    }
}
```
================================================================

Sample: 29 ArrayList_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        boolean isAdded = list.add("Hello");
        System.out.println("Element added successfully: " + isAdded);
        System.out.println(list);
    }
}
```
================================================================

Sample: 30 ArrayList_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add(0, "World");
        System.out.println(list); // Output: [World, Hello]
    }
}
```
================================================================

Sample: 31 ArrayList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Java");
        
        System.out.println(list.get(1)); // Output: World
    }
}
```
================================================================

Sample: 32 ArrayList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        list.add("Java");
        
        System.out.println("Before removing element at index 1: " + list);
        
        list.remove(1);
        
        System.out.println("After removing element at index 1: " + list);
    }
}
```
================================================================

Sample: 33 ArrayList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        
        // Using size() method to get the number of elements in the list
        int size = list.size();
        System.out.println("Size of the list: " + size);
    }
}
```
================================================================

Sample: 34 Arrays_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {4, 2, 9, 5, 1, 7};

        // Calling the sort method to sort the array
        Arrays.sort(arr);

        // Printing the sorted array
        System.out.println("Sorted Array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
```
================================================================

Sample: 35 Arrays_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 8, 10};
        int key = 6;
        int index = Arrays.binarySearch(arr, key);
        
        if (index >= 0) {
            System.out.println("Element found at index: " + index);
        } else {
            System.out.println("Element not found");
        }
    }
}
```
================================================================

Sample: 36 Arrays_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        Object[] arr = {1, 2, 3, 4, 5};
        System.out.println(Arrays.toString(arr));
    }
}
```
================================================================

Sample: 37 Arrays_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        int hashCode = Arrays.hashCode(array);
        System.out.println("Hash code of the array: " + hashCode);
    }
}
```
================================================================

Sample: 38 Arrays_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3};
        int[] arr2 = {1, 2, 3};

        boolean areEqual = Arrays.equals(arr1, arr2);
        System.out.println("Arrays are equal: " + areEqual);
    }
}
```
================================================================

Sample: 39 Base64.Decoder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        String encodedString = "SGVsbG8gV29ybGQh"; // Base64 encoded string
        byte[] decodedBytes = Base64.getDecoder().decode(encodedString);
        String decodedString = new String(decodedBytes);
        System.out.println(decodedString); // Output: Hello World!
    }
}
```
================================================================

Sample: 40 Base64.Decoder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        byte[] src = "SGVsbG8gV29ybGQh".getBytes();
        byte[] decodedBytes = Base64.getDecoder().decode(src);
        String decodedString = new String(decodedBytes);
        System.out.println(decodedString);
    }
}
```
================================================================

Sample: 41 Base64_Decoder_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class Main {
    public static void main(String[] args) {
        byte[] encodedBytes = Base64.getEncoder().encode("Hello, World!".getBytes());
        InputStream inputStream = new ByteArrayInputStream(encodedBytes);

        Base64.Decoder decoder = Base64.getDecoder();
        InputStream decodedStream = decoder.wrap(inputStream);

        // Now you can use the decodedStream for further processing
    }
}
```
================================================================

Sample: 42 Base64_Encoder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        byte[] src = "Hello, World!".getBytes();
        Base64.Encoder encoder = Base64.getEncoder();
        byte[] encoded = encoder.encode(src);
        
        System.out.println("Encoded: " + new String(encoded));
    }
}
```
================================================================

Sample: 43 Base64_Encoder_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        byte[] src = {1, 2, 3, 4, 5};
        Base64.Encoder encoder = Base64.getEncoder();
        String encodedString = encoder.encodeToString(src);
        System.out.println("Encoded String: " + encodedString);
    }
}
```
================================================================

Sample: 44 Base64_Encoder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Base64;

public class Main {
    public static void main(String[] args) {
        Base64.Encoder encoder = Base64.getEncoder().withoutPadding();
        String original = "Hello, World!";
        String encoded = encoder.encodeToString(original.getBytes()); 
        System.out.println("Encoded String: " + encoded);
    }
}
```
================================================================

Sample: 45 BitSet_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet(10);
        System.out.println("Before setting bit: " + bitSet);

        // Set bit at index 5
        bitSet.set(5);

        System.out.println("After setting bit: " + bitSet);
    }
}
```
================================================================

Sample: 46 BitSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet(10);
        bitSet.set(2);
        System.out.println("Before clear: " + bitSet);

        clear(bitSet, 2);
        System.out.println("After clear: " + bitSet);
    }

    public static void clear(BitSet bitSet, int bitIndex) {
        bitSet.clear(bitIndex);
    }
}
```
================================================================

Sample: 47 BitSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet();
        bitSet.set(0);
        bitSet.set(2);
        
        System.out.println(bitSet.get(0)); // Output: true
        System.out.println(bitSet.get(1)); // Output: false
        System.out.println(bitSet.get(2)); // Output: true
    }
}
```
================================================================

Sample: 48 BitSet_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bitSet = new BitSet(10);
        bitSet.set(0);
        bitSet.set(2);
        bitSet.set(4);
        
        System.out.println("BitSet length: " + bitSet.length());
    }
}
```
================================================================

Sample: 49 BitSet_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.BitSet;

public class Main {
    public static void main(String[] args) {
        BitSet bits = new BitSet(8);
        bits.set(2);
        System.out.println("Before flip: " + bits);

        flip(bits, 2);
        System.out.println("After flip: " + bits);
    }

    public static void flip(BitSet bits, int bitIndex) {
        bits.flip(bitIndex);
    }
}
```
================================================================

Sample: 50 Calendar_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        Date date = new Date();
        calendar.setTime(date);
        System.out.println("Calendar set to: " + calendar.getTime());
    }
}
```
================================================================

Sample: 51 Calendar_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar cal = Calendar.getInstance();
        int year = cal.get(Calendar.YEAR);
        int month = cal.get(Calendar.MONTH);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        System.out.println("Current Date: " + year + "/" + (month + 1) + "/" + day);
    }
}
```
================================================================

Sample: 52 Calendar_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar calendar = Calendar.getInstance();
        System.out.println("Initial calendar value: " + calendar.getTime());

        calendar.set(Calendar.DAY_OF_MONTH, 15);
        System.out.println("Updated calendar value: " + calendar.getTime());
    }
}
```
================================================================

Sample: 53 Calendar_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Calendar;

public class Main {
    public static void main(String[] args) {
        Calendar cal = Calendar.getInstance();
        System.out.println("Current date: " + cal.getTime());

        // Adding 5 days to the current date
        cal.add(Calendar.DAY_OF_MONTH, 5);
        System.out.println("Date after adding 5 days: " + cal.getTime());

        // Adding 2 months to the current date
        cal.add(Calendar.MONTH, 2);
        System.out.println("Date after adding 2 months: " + cal.getTime());
    }
}
```
================================================================

Sample: 54 Collections_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<>();
        numbers.add(1);
        numbers.add(2);
        numbers.add(3);
        
        System.out.println("Before shuffling: " + numbers);
        
        Collections.shuffle(numbers);
        
        System.out.println("After shuffling: " + numbers);
    }
}
```
================================================================

Sample: 55 Collections_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Collections;
import java.util.ArrayList;
import java.util.List;

public class Main {
    
    public static void reverse(List<?> list) {
        Collections.reverse(list);
    }

    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");
        list.add("World");
        
        System.out.println("Original list: " + list);
        
        reverse(list);
        
        System.out.println("Reversed list: " + list);
    }
}
```
================================================================

Sample: 56 Collections_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        List<String> list = new ArrayList<>();
        list.add("A");
        list.add("B");
        list.add("C");

        System.out.println("Before rotating: " + list);

        Collections.rotate(list, 1);

        System.out.println("After rotating by 1: " + list);
    }
}
```
================================================================

Sample: 57 Collections_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Collections;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("apple");
        list.add("banana");
        list.add("apple");
        
        int freq = Collections.frequency(list, "apple");
        System.out.println("Frequency of 'apple' in the list: " + freq);
    }
}
```
================================================================

Sample: 58 Currency_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        System.out.println("Currency code: " + currency.getCurrencyCode());
        System.out.println("Currency symbol: " + currency.getSymbol());
    }
}
```
================================================================

Sample: 59 Currency_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        int fractionDigits = currency.getDefaultFractionDigits();
        System.out.println("Default fraction digits for USD: " + fractionDigits);
    }
}
```
================================================================

Sample: 60 Currency_3
----------------------------------------------------------------
`String getDisplayName(Locale locale)`: This method gets the display name of this currency for the specified locale.

Code snippet:
```java
import java.util.Currency;
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Currency usd = Currency.getInstance("USD");
        Locale locale = new Locale("en", "US");
        
        String displayName = usd.getDisplayName(locale);
        System.out.println("Display name for USD in en-US locale: " + displayName);
    }
}
```
================================================================

Sample: 61 Currency_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        String currencyCode = currency.getCurrencyCode();
        System.out.println("Currency Code: " + currencyCode);
    }
}
```
================================================================

Sample: 62 Currency_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Currency;

public class Main {
    public static void main(String[] args) {
        Currency currency = Currency.getInstance("USD");
        System.out.println("Currency symbol: " + currency.getSymbol());
    }
}
```
================================================================

Sample: 63 Date_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date = new Date();
        long timeInMillis = date.getTime();
        System.out.println("Current time in milliseconds: " + timeInMillis);
    }
}
```
================================================================

Sample: 64 Date_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date date = new Date();
        System.out.println("Current Date: " + date);

        // Using setTime method
        date.setTime(1622031530000L); // Setting time to May 26, 2021 15:25:30 UTC
        
        System.out.println("Updated Date: " + date);
    }
}
```
================================================================

Sample: 65 Date_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date currentDate = new Date();
        Date specifiedDate = new Date(2021, 10, 10); // Create a specified date instance
        
        boolean isBefore = specifiedDate.before(currentDate);
        
        System.out.println("Is the specified date before the current date? " + isBefore);
    }
}
```
================================================================

Sample: 66 Date_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Date currentDate = new Date();
        Date futureDate = new Date(currentDate.getTime() + 86400000); // Adding 1 day in milliseconds

        boolean isAfter = futureDate.after(currentDate);
        System.out.println("Is futureDate after currentDate? " + isAfter);
    }
}
```
================================================================

Sample: 67 Dictionary_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<Integer, String> dict = new Hashtable<>();
        dict.put(1, "Hello");
        System.out.println(dict.get(1));
    }
}
```
================================================================

Sample: 68 Dictionary_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Dictionary<Integer, String> dict = new Hashtable<>();

        System.out.println("Is Dictionary empty? " + dict.isEmpty());
    }
}
```
================================================================

Sample: 69 Dictionary_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Dictionary;

public class Main {
    public static void main(String[] args) {
        Dictionary<Integer, String> dictionary = new java.util.Hashtable<>();
        dictionary.put(1, "One");
        dictionary.put(2, "Two");
        dictionary.put(3, "Three");
        
        System.out.println("Size of the dictionary: " + dictionary.size());
    }
}
```
================================================================

Sample: 70 DoubleSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(15.7);
        
        System.out.println("Count: " + stats.getCount());
        System.out.println("Sum: " + stats.getSum());
        System.out.println("Min: " + stats.getMin());
        System.out.println("Max: " + stats.getMax());
        System.out.println("Average: " + stats.getAverage());
    }
}
```
================================================================

Sample: 71 DoubleSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(30.8);
        
        long count = stats.getCount();
        System.out.println("Count: " + count);
    }
}
```
================================================================

Sample: 72 DoubleSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        // Create a DoubleSummaryStatistics object
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        
        // Add values to the statistics object
        stats.accept(10.5);
        stats.accept(20.7);
        stats.accept(15.3);
        
        // Get the sum of all added values
        double sum = stats.getSum();
        
        System.out.println("Sum of values: " + sum);
    }
}
```
================================================================

Sample: 73 DoubleSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;
import java.util.stream.DoubleStream;

public class Main {
    public static void main(String[] args) {
        double[] numbers = {2.5, 3.7, 1.8, 4.2, 5.6};
        
        DoubleSummaryStatistics stats = DoubleStream.of(numbers).summaryStatistics();
        double average = stats.getAverage();
        
        System.out.println("Average: " + average);
    }
}
```
================================================================

Sample: 74 DoubleSummaryStatistics_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.DoubleSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        DoubleSummaryStatistics stats = new DoubleSummaryStatistics();
        stats.accept(10.5);
        stats.accept(20.3);
        stats.accept(15.7);
        
        double max = stats.getMax();
        System.out.println("Max value: " + max); // Output: Max value: 20.3
    }
}
```
================================================================

Sample: 75 EnumMap_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;

public class Main {
    public static void main(String[] args) {
        EnumMap<Day, String> enumMap = new EnumMap<>(Day.class);
        enumMap.put(Day.MONDAY, "First day of the week");
        System.out.println(enumMap);
    }

    public enum Day {
        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
    }
}
```
================================================================

Sample: 76 EnumMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;

public class Main {
    enum Color {
        RED, GREEN, BLUE
    }

    public static void main(String[] args) {
        EnumMap<Color, String> colorMap = new EnumMap<>(Color.class);
        colorMap.put(Color.RED, "FF0000");
        colorMap.put(Color.GREEN, "00FF00");

        System.out.println(colorMap.get(Color.RED)); // Output: FF0000
        System.out.println(colorMap.get(Color.GREEN)); // Output: 00FF00
        System.out.println(colorMap.get(Color.BLUE)); // Output: null
    }
}
```
================================================================

Sample: 77 EnumMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.EnumMap;
import java.util.Collection;

public class Main {
    public static void main(String[] args) {
        EnumMap<Day, String> enumMap = new EnumMap<>(Day.class);
        enumMap.put(Day.MONDAY, "Work");
        enumMap.put(Day.TUESDAY, "Study");
        Collection<String> values = enumMap.values();
        System.out.println(values);
    }
}

enum Day {
    MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
```
================================================================

Sample: 78 EventListenerProxy_2
----------------------------------------------------------------
```java
import java.util.EventListenerProxy;
import java.util.EventListener;

public class Main {
    public static void main(String[] args) {
        // Create an EventListenerProxy
        MyListener listener = new MyListener();
        EventListenerProxy proxy = new EventListenerProxy(MyListenerInterface.class, listener);
        
        // Get the listener from the EventListenerProxy
        EventListener actualListener = proxy.getListener();
        
        // Use the listener as needed
    }
}

// Example listener implementation
interface MyListenerInterface extends EventListener {
    // Define listener methods here
}

class MyListener implements MyListenerInterface {
    // Implement listener methods here
}
```
================================================================

Sample: 79 EventObject_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.EventObject;

public class CustomEventObject extends EventObject {
    
    public CustomEventObject(Object source) {
        super(source);
    }

    public Object getSource() {
        return super.getSource();
    }

    public static void main(String[] args) {
        CustomEventObject event = new CustomEventObject("Event source");
        System.out.println("Event source: " + event.getSource());
    }
}
```
================================================================

Sample: 80 EventObject_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.EventObject;

public class Main {
    public static void main(String[] args) {
        EventObject event = new EventObject(this);
        System.out.println(event.toString());
    }
}
```
================================================================

Sample: 81 Formatter_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Formatter;

public class Main {
    public static void main(String[] args) {
        Formatter formatter = new Formatter(System.out);
        formatter.format("The %s jumped over the %s", "cow", "moon");
        formatter.close();
    }
}
```
================================================================

Sample: 82 Formatter_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Formatter;
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Formatter formatter = new Formatter(Locale.US);
        String formattedString = formatter.format("Hello, %s", "World").toString();
        System.out.println(formattedString);
        formatter.close();
    }
}
```
================================================================

Sample: 83 Formatter_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Formatter;
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Formatter formatter = new Formatter();
        Locale locale = Locale.US;
        String format = "Hello, %s! Today is %tF";
        String name = "John";
        long currentTime = System.currentTimeMillis();

        formatter.format(locale, format, name, currentTime);
        System.out.println(formatter);
        
        formatter.close();
    }
}
```
================================================================

Sample: 84 GregorianCalendar_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    public static void main(String[] args) {
        GregorianCalendar calendar = new GregorianCalendar();
        System.out.println("Current date: " + calendar.getTime());

        // Adding 1 month to the current date
        calendar.add(GregorianCalendar.MONTH, 1);
        System.out.println("Date after adding 1 month: " + calendar.getTime());
    }
}
```
================================================================

Sample: 85 GregorianCalendar_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    
    public static void main(String[] args) {
        System.out.println(isLeapYear(2020));
    }
    
    public static boolean isLeapYear(int year) {
        GregorianCalendar calendar = new GregorianCalendar();
        return calendar.isLeapYear(year);
    }
}
```
================================================================

Sample: 86 GregorianCalendar_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.GregorianCalendar;

public class Main {
    public static void main(String[] args) {
        GregorianCalendar cal = new GregorianCalendar();
        
        // Get the actual maximum value of the given field
        int actualMaxYear = cal.getActualMaximum(GregorianCalendar.YEAR);
        int actualMaxWeek = cal.getActualMaximum(GregorianCalendar.WEEK_OF_YEAR);
        
        System.out.println("Actual Maximum Year: " + actualMaxYear);
        System.out.println("Actual Maximum Week of Year: " + actualMaxWeek);
    }
}
```
================================================================

Sample: 87 HashMap_1
----------------------------------------------------------------
`V get(Object key)`: This method returns the value to which the specified key is mapped in the HashMap.

Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<Integer, String> map = new HashMap<>();
        map.put(1, "One");
        map.put(2, "Two");

        String value = map.get(2);
        System.out.println("Value at key 2: " + value);
    }
}
```
================================================================

Sample: 88 HashMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println(map);
    }
}
```
================================================================

Sample: 89 HashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);

        boolean containsKey = map.containsKey("One");
        System.out.println("Key 'One' exists in the map: " + containsKey);
    }
}
```
================================================================

Sample: 90 HashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<Integer, String> map = new HashMap<>();
        map.put(1, "One");
        map.put(2, "Two");
        
        System.out.println("Size of HashMap: " + map.size());
    }
}
```
================================================================

Sample: 91 HashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashMap;

public class Main {
    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Before removal: " + map);
        
        Integer removedValue = map.remove("One");
        
        System.out.println("Removed value: " + removedValue);
        System.out.println("After removal: " + map);
    }
}
```
================================================================

Sample: 92 HashSet_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        boolean added = set.add("Hello");
        System.out.println("Element added successfully: " + added);
    }
}
```
================================================================

Sample: 93 HashSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        
        // Remove "Hello" from the HashSet
        boolean removed = set.remove("Hello");
        
        System.out.println("Element removed: " + removed);
        System.out.println("Updated HashSet: " + set);
    }
}
```
================================================================

Sample: 94 HashSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        System.out.println(set);

        // Using clear method
        set.clear();
        System.out.println(set);
    }
}
```
================================================================

Sample: 95 HashSet_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        
        // Using contains() method
        boolean containsElement = set.contains("Hello");
        
        System.out.println("Contains 'Hello': " + containsElement);
    }
}
```
================================================================

Sample: 96 HashSet_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.HashSet;

public class Main {
    public static void main(String[] args) {
        HashSet<String> set = new HashSet<>();
        set.add("Hello");
        set.add("World");
        System.out.println("Size of the HashSet: " + set.size());
    }
}
```
================================================================

Sample: 97 Hashtable_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<String, Integer> hashtable = new Hashtable<>();
        hashtable.put("One", 1);
        hashtable.put("Two", 2);
        
        System.out.println(getValue(hashtable, "One"));
    }
    
    public static Integer getValue(Hashtable<String, Integer> hashtable, String key) {
        return hashtable.get(key);
    }
}
```
================================================================

Sample: 98 Hashtable_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        
        // Using put() method to add key-value pairs to the hashtable
        hashtable.put(1, "One");
        hashtable.put(2, "Two");
        hashtable.put(3, "Three");
        
        System.out.println(hashtable);
    }
}
```
================================================================

Sample: 99 Hashtable_3
----------------------------------------------------------------
`V remove(Object key)`: This method removes the mapping for the specified key from this hashtable if it is present.

Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        hashtable.put(1, "One");
        hashtable.put(2, "Two");

        System.out.println("Hashtable before removal: " + hashtable);

        // Removing the mapping for key 1
        String removedValue = hashtable.remove(1);

        System.out.println("Removed value: " + removedValue);
        System.out.println("Hashtable after removal: " + hashtable);
    }
}
```
================================================================

Sample: 100 Hashtable_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        hashtable.put(1, "One");
        hashtable.put(2, "Two");

        System.out.println(hashtable.contains("One")); // Output: true
        System.out.println(hashtable.contains("Three")); // Output: false
    }
}
```
================================================================

Sample: 101 Hashtable_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Hashtable;

public class Main {
    public static void main(String[] args) {
        Hashtable<Integer, String> hashtable = new Hashtable<>();
        hashtable.put(1, "One");
        hashtable.put(2, "Two");
        
        System.out.println("Hashtable before clear: " + hashtable);
        
        hashtable.clear();
        
        System.out.println("Hashtable after clear: " + hashtable);
    }
}
```
================================================================

Sample: 102 IdentityHashMap_1
----------------------------------------------------------------
`V put(K key, V value)`: This method associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.

Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println(map);
    }
}
```
================================================================

Sample: 103 IdentityHashMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("one", 1);
        map.put("two", 2);
        
        Integer value = map.get("one");
        System.out.println("Value for key 'one': " + value);
    }
}
```
================================================================

Sample: 104 IdentityHashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
        map.put(1, "One");
        map.put(2, "Two");
        
        int key = 1;
        
        boolean containsKey = map.containsKey(key);
        System.out.println("Contains key " + key + ": " + containsKey);
    }
}
```
================================================================

Sample: 105 IdentityHashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<Integer, String> map = new IdentityHashMap<>();
        map.put(1, "One");
        
        boolean containsValue = map.containsValue("One");
        System.out.println("Contains value 'One': " + containsValue);
    }
}
```
================================================================

Sample: 106 IdentityHashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.IdentityHashMap;

public class Main {
    public static void main(String[] args) {
        IdentityHashMap<String, Integer> map = new IdentityHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Map before removal: " + map);
        
        map.remove("One");
        
        System.out.println("Map after removal: " + map);
    }
}
```
================================================================

Sample: 107 IntSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;
import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = IntStream.range(1, 11)
                .summaryStatistics();

        long count = stats.getCount();

        System.out.println("Count: " + count);
    }
}
```
================================================================

Sample: 108 IntSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;
import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = IntStream.range(1, 6).summaryStatistics();
        long sum = stats.getSum();
        System.out.println("Sum: " + sum);
    }
}
```
================================================================

Sample: 109 IntSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;
import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = IntStream.of(1, 2, 3, 4, 5)
                .summaryStatistics();
        
        double average = stats.getAverage();
        System.out.println(average);
    }
}
```
================================================================

Sample: 110 IntSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        IntSummaryStatistics stats = new IntSummaryStatistics();
        stats.accept(10);
        stats.accept(5);
        stats.accept(15);
        
        int min = stats.getMin();
        System.out.println("Minimum value: " + min);
    }
}
```
================================================================

Sample: 111 IntSummaryStatistics_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.IntSummaryStatistics;
import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        IntStream intStream = IntStream.of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
        IntSummaryStatistics stats = intStream.summaryStatistics();
        
        int max = stats.getMax();
        
        System.out.println("Max value: " + max);
    }
}
```
================================================================

Sample: 112 LinkedHashMap_1
----------------------------------------------------------------
`V get(Object key)`: This method returns the value to which the specified key is mapped in this LinkedHashMap instance.

Code snippet:
```java
import java.util.LinkedHashMap;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<String, Integer> map = new LinkedHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        int value = map.get("Two");
        System.out.println("Value for key 'Two': " + value);
    }
}
```
================================================================

Sample: 113 LinkedHashMap_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<Integer, String> linkedHashMap = new LinkedHashMap<>();
        linkedHashMap.put(1, "One");
        linkedHashMap.put(2, "Two");
        linkedHashMap.put(3, "Three");

        Set<Integer> keySet = linkedHashMap.keySet();

        System.out.println(keySet);
    }
}
```
================================================================

Sample: 114 LinkedHashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedHashMap;
import java.util.Collection;

public class Main {
    public static void main(String[] args) {
        LinkedHashMap<Integer, String> linkedHashMap = new LinkedHashMap<>();
        linkedHashMap.put(1, "One");
        linkedHashMap.put(2, "Two");
        
        Collection<String> values = linkedHashMap.values();
        System.out.println("Values in LinkedHashMap: " + values);
    }
}
```
================================================================

Sample: 115 LinkedList_1
----------------------------------------------------------------
`void addFirst(E e)`: This method inserts the specified element at the beginning of this list.

Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("World");
        System.out.println("Initial list: " + list);

        list.addFirst("Hello");
        System.out.println("List after adding element at first: " + list);
    }
}
```
================================================================

Sample: 116 LinkedList_2
----------------------------------------------------------------
`void addLast(E e)`: This method appends the specified element to the end of this list.

Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.addLast("Hello");
        System.out.println(list);
    }
}
```
================================================================

Sample: 117 LinkedList_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("Hello");
        System.out.println(list.getFirst());
    }
}
```
================================================================

Sample: 118 LinkedList_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> list = new LinkedList<>();
        list.add("Apple");
        list.add("Banana");
        list.add("Orange");

        // Get the last element
        String lastElement = list.getLast();
        System.out.println("Last Element: " + lastElement);
    }
}
```
================================================================

Sample: 119 LinkedList_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.LinkedList;

public class Main {
    public static void main(String[] args) {
        LinkedList<String> linkedList = new LinkedList<>();
        linkedList.add("Apple");
        linkedList.add("Banana");
        linkedList.add("Cherry");

        System.out.println("Before removing first element: " + linkedList);

        linkedList.removeFirst();

        System.out.println("After removing first element: " + linkedList);
    }
}
```
================================================================

Sample: 120 ListResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.ListResourceBundle;
import java.util.Enumeration;
import java.util.Locale;

public class MyResourceBundle extends ListResourceBundle {
    
    @Override
    protected Object[][] getContents() {
        return new Object[][] {
            { "key1", "value1" },
            { "key2", "value2" }
        };
    }
    
    public static void main(String[] args) {
        MyResourceBundle bundle = new MyResourceBundle();
        Enumeration<String> keys = bundle.getKeys();
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            System.out.println(key + ": " + bundle.getObject(key));
        }
    }
}
```
================================================================

Sample: 121 ListResourceBundle_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ListResourceBundle;

public class MyResourceBundle extends ListResourceBundle {

    @Override
    protected Object[][] getContents() {
        return new Object[][] {
            {"key1", "value1"},
            {"key2", "value2"}
        };
    }

    public static void main(String[] args) {
        MyResourceBundle bundle = new MyResourceBundle();
        System.out.println(bundle.handleGetObject("key1"));
    }
}
```
================================================================

Sample: 122 Locale_Builder_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setLanguage("en");
        builder.setRegion("US");
        Locale locale = builder.build();
        System.out.println("Locale: " + locale);
    }
}
```
================================================================

Sample: 123 Locale_Builder_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        Locale locale = builder.setLanguage("en").build();
        System.out.println("Language: " + locale.getLanguage());
    }
}
```
================================================================

Sample: 124 Locale_Builder_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {

        Locale.Builder builder = new Locale.Builder();
        Locale locale = builder.setRegion("US").build();

        System.out.println("Locale with region set: " + locale);
    }
}
```
================================================================

Sample: 125 Locale_Builder_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        Locale locale = builder.setVariant("US").build();
        System.out.println("Locale variant: " + locale.getVariant());
    }
}
```
================================================================

Sample: 126 Locale_Builder_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.Builder builder = new Locale.Builder();
        builder.setExtension('x', "testing");
        Locale locale = builder.build();

        System.out.println(locale.toLanguageTag());
    }
}
```
================================================================

Sample: 127 Locale_LanguageRange_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        String range = Locale.LanguageRange.getRange("en-US");
        System.out.println(range);
    }
}
```
================================================================

Sample: 128 Locale_LanguageRange_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange = new Locale.LanguageRange("en", 0.5);
        double weight = languageRange.getWeight();
        System.out.println("Weight: " + weight);
    }
}
```
================================================================

Sample: 129 Locale_LanguageRange_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange = Locale.LanguageRange.parse("en");

        int hashCode = languageRange.hashCode();
        System.out.println("Hashcode of LanguageRange: " + hashCode);
    }
}
```
================================================================

Sample: 130 Locale_LanguageRange_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;

public class Main {
    public static void main(String[] args) {
        Locale.LanguageRange languageRange1 = new Locale.LanguageRange("en", 0.5);
        Locale.LanguageRange languageRange2 = new Locale.LanguageRange("fr", 0.8);

        boolean isEqual = languageRange1.equals(languageRange2);
        System.out.println("Are the language ranges equal? " + isEqual);
    }
}
```
================================================================

Sample: 131 LongSummaryStatistics_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;
import java.util.stream.LongStream;

public class Main {
    public static void main(String[] args) {
        LongStream stream = LongStream.of(1, 2, 3, 4, 5);
        LongSummaryStatistics stats = stream.summaryStatistics();
        long count = stats.getCount();
        System.out.println("Count: " + count);
    }
}
```
================================================================

Sample: 132 LongSummaryStatistics_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;
import java.util.stream.LongStream;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = LongStream.of(1, 2, 3, 4, 5)
                .summaryStatistics();
        long sum = stats.getSum();
        System.out.println("Sum of the numbers: " + sum);
    }
}
```
================================================================

Sample: 133 LongSummaryStatistics_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;
import java.util.stream.LongStream;

public class Main {
    public static void main(String[] args) {
        LongStream longStream = LongStream.of(1, 2, 3, 4, 5);
        LongSummaryStatistics stats = longStream.summaryStatistics();
        
        double average = stats.getAverage();
        
        System.out.println("Average: " + average);
    }
}
```
================================================================

Sample: 134 LongSummaryStatistics_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.LongSummaryStatistics;

public class Main {
    public static void main(String[] args) {
        LongSummaryStatistics stats = new LongSummaryStatistics();
        stats.accept(10);
        stats.accept(20);
        stats.accept(30);
        
        long max = stats.getMax();
        
        System.out.println("Max value: " + max);
    }
}
```
================================================================

Sample: 135 LongSummaryStatistics_5
----------------------------------------------------------------
```java
import java.util.LongSummaryStatistics;
import java.util.stream.LongStream;

public class Main {
    public static void main(String[] args) {
        LongStream stream = LongStream.of(1, 2, 3, 4, 5);
        LongSummaryStatistics stats = stream.summaryStatistics();

        long min = stats.getMin();
        System.out.println("Minimum value: " + min);
    }
}
```
================================================================

Sample: 136 Objects_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj1 = "Hello";
        Object obj2 = "Hello";
        
        boolean result = Objects.deepEquals(obj1, obj2);
        System.out.println("Are objects equal? " + result);
    }
}
```
================================================================

Sample: 137 Objects_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        String str = "Hello";
        int hash = Objects.hashCode(str);
        System.out.println("Hash code for \"" + str + "\": " + hash);
    }
}
```
================================================================

Sample: 138 Objects_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj1 = null;
        Object obj2 = new Object();

        System.out.println("obj1 is null: " + Objects.isNull(obj1));
        System.out.println("obj2 is null: " + Objects.isNull(obj2));
    }
}
```
================================================================

Sample: 139 Objects_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;

public class Main {
    public static void main(String[] args) {
        Object obj = new Object();
        String objString = Objects.toString(obj);
        System.out.println(objString);
    }
}
```
================================================================

Sample: 140 Objects_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Objects;
import java.util.Comparator;

public class Main {
    public static void main(String[] args) {
        String a = "apple";
        String b = "banana";
        
        Comparator<String> comparator = Comparator.naturalOrder();
        
        System.out.println("Comparing using naturalOrder comparator: " + Objects.compare(a, b, comparator));
    }
}
```
================================================================

Sample: 141 Observable_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservable observable = new MyObservable();
        MyObserver observer = new MyObserver();
        
        observable.addObserver(observer);
        
        observable.notifyObservers("Hello");
    }
}

class MyObservable extends Observable {
    
}

class MyObserver implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        System.out.println("Received: " + arg);
    }
}
```
================================================================

Sample: 142 Observable_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservable observable = new MyObservable();
        MyObserver observer = new MyObserver();

        observable.addObserver(observer);
        observable.deleteObserver(observer);
    }

    static class MyObservable extends Observable {
    }

    static class MyObserver implements Observer {
        @Override
        public void update(Observable o, Object arg) {
            System.out.println("Observer notified");
        }
    }
}
```
================================================================

Sample: 143 Observable_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Observable;
import java.util.Observer;

public class Main {
    public static void main(String[] args) {
        MyObservable observable = new MyObservable();
        MyObserver observer1 = new MyObserver("Observer 1");
        MyObserver observer2 = new MyObserver("Observer 2");

        observable.addObserver(observer1);
        observable.addObserver(observer2);

        observable.setChanged();
        observable.notifyObservers("Hello");
    }

    static class MyObservable extends Observable {
        @Override
        public void notifyObservers(Object arg) {
            setChanged();
            super.notifyObservers(arg);
        }
    }

    static class MyObserver implements Observer {
        private String name;

        public MyObserver(String name) {
            this.name = name;
        }

        @Override
        public void update(Observable o, Object arg) {
            System.out.println(name + " received: " + arg);
        }
    }
}
```
================================================================

Sample: 144 Observable_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Observable;

public class Main {
    public static void main(String[] args) {
        Observable observable = new Observable();
        System.out.println("Number of observers: " + observable.countObservers());
    }
}
```
================================================================

Sample: 145 Observable_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Observable;

public class Main {
    public static void main(String[] args) {
        CustomObservable observable = new CustomObservable();
        CustomObserver observer1 = new CustomObserver();
        CustomObserver observer2 = new CustomObserver();

        observable.addObserver(observer1);
        observable.addObserver(observer2);

        observable.deleteObservers();

        observable.notifyObservers("Data has been updated");
    }
}

class CustomObservable extends Observable {
    // CustomObservable class
}

class CustomObserver implements Observer {
    @Override
    public void update(Observable o, Object arg) {
        System.out.println("Observer notified: " + arg);
    }
}
```
================================================================

Sample: 146 Optional_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optionalValue = Optional.of("Value");
        System.out.println("Is value present? " + optionalValue.isPresent()); // Output: true
        
        Optional<String> emptyOptional = Optional.empty();
        System.out.println("Is empty optional present? " + emptyOptional.isPresent()); // Output: false
    }
}
```
================================================================

Sample: 147 Optional_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Value");
        
        String value = optional.get();
        System.out.println("Value: " + value);
    }
}
```
================================================================

Sample: 148 Optional_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> value = Optional.of("Hello");
        Optional<String> otherValue = Optional.of("World");
        
        System.out.println(value.orElse(otherValue.get()));
    }
}
```
================================================================

Sample: 149 Optional_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Hello");
        
        Optional<String> mappedOptional = optional.map(s -> s.toUpperCase());
        
        mappedOptional.ifPresent(System.out::println);
    }
}
```
================================================================

Sample: 150 Optional_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Optional;

public class Main {
    public static void main(String[] args) {
        Optional<String> optional = Optional.of("Hello");
        optional.ifPresent(str -> System.out.println("Value: " + str));
    }
}
```
================================================================

Sample: 151 OptionalDouble_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.empty();
        System.out.println(optionalDouble);
    }
}
```
================================================================

Sample: 152 OptionalDouble_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        if (optionalDouble.isPresent()) {
            System.out.println("Value present: " + optionalDouble.getAsDouble());
        } else {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 153 OptionalDouble_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        System.out.println("Is a value present? " + optionalDouble.isPresent());
    }
}
```
================================================================

Sample: 154 OptionalDouble_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        // Example using OptionalDouble
        OptionalDouble optionalDouble = OptionalDouble.of(5.6);
        
        // Use getAsDouble() to retrieve the double value
        if (optionalDouble.isPresent()) {
            double value = optionalDouble.getAsDouble();
            System.out.println("Value: " + value);
        } else {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 155 OptionalDouble_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalDouble;

public class Main {
    public static void main(String[] args) {
        OptionalDouble optionalDouble = OptionalDouble.of(10.5);
        double result = optionalDouble.orElse(5.5);
        System.out.println("Value: " + result);
    }
}

```
================================================================

Sample: 156 OptionalLong_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.empty();
        System.out.println(optionalLong.isPresent()); // Output: false
    }
}
```
================================================================

Sample: 157 OptionalLong_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        if (optionalLong.isPresent()) {
            System.out.println("OptionalLong value: " + optionalLong.getAsLong());
        } else {
            System.out.println("No value present");
        }
    }
}
```
================================================================

Sample: 158 OptionalLong_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;

public class Main {
    public static void main(String[] args) {
        OptionalLong op1 = OptionalLong.of(10);
        OptionalLong op2 = OptionalLong.empty();

        long result1 = op1.orElse(0);
        long result2 = op2.orElse(5);

        System.out.println("Result 1: " + result1);
        System.out.println("Result 2: " + result2);
    }
}
```
================================================================

Sample: 159 OptionalLong_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;
import java.util.function.LongSupplier;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.empty();
        
        // Using orElseGet(LongSupplier other) method
        long result = optionalLong.orElseGet(() -> 10L);
        
        System.out.println("Result: " + result);
    }
}
```
================================================================

Sample: 160 OptionalLong_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.OptionalLong;
import java.util.function.LongConsumer;

public class Main {
    public static void main(String[] args) {
        OptionalLong optionalLong = OptionalLong.of(10);
        
        optionalLong.ifPresent(new LongConsumer() {
            @Override
            public void accept(long value) {
                System.out.println("Value present: " + value);
            }
        });
    }
}
```
================================================================

Sample: 161 Properties_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Properties;

public class Main {
    public static void main(String[] args) {
        Properties props = new Properties();
        props.setProperty("key1", "value1");
        
        String value = props.getProperty("key1");
        System.out.println("Value for key1: " + value);
    }
}
```
================================================================

Sample: 162 Properties_4
----------------------------------------------------------------
Code snippet:
```java
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Properties;

public class Main {
    public static void main(String[] args) {
        Properties properties = new Properties();
        properties.setProperty("key1", "value1");
        properties.setProperty("key2", "value2");

        try {
            FileOutputStream output = new FileOutputStream("config.properties");
            properties.store(output, "This is a sample properties file");
            output.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```
================================================================

Sample: 163 Properties_5
----------------------------------------------------------------
Code snippet:
```java
import java.io.StringReader;
import java.util.Properties;
import java.io.IOException;

public class Main {
    
    public static void main(String[] args) {
        String propertiesString = "key1=value1\nkey2=value2";
        Properties properties = new Properties();
        
        try {
            properties.load(new StringReader(propertiesString));
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        // Display the properties
        System.out.println(properties.getProperty("key1"));
        System.out.println(properties.getProperty("key2"));
    }
}
```
================================================================

Sample: 164 PropertyPermission_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.PropertyPermission;

public class Main {
    public static void main(String[] args) {
        PropertyPermission propertyPermission = new PropertyPermission("java.version", "read");
        String actions = propertyPermission.getActions();
        System.out.println("Actions allowed on property: " + actions);
    }
}
```
================================================================

Sample: 165 PropertyPermission_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.PropertyPermission;

public class Main {
    public static void main(String[] args) {
        // Creating a new PropertyPermission
        PropertyPermission permission = new PropertyPermission("myproperty", "read");

        // Checking if the permission implies the specified permission
        boolean impliesPermission = permission.implies(new PropertyPermission("myproperty", "read"));

        // Output the result
        System.out.println("Permission implies: " + impliesPermission); 
    }
}
```
================================================================

Sample: 166 PropertyResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Enumeration;
import java.util.PropertyResourceBundle;

public class Main {
    public static void main(String[] args) {
        String fileName = "example.properties";
        PropertyResourceBundle bundle = (PropertyResourceBundle) PropertyResourceBundle.getBundle(fileName);
        Enumeration<String> keys = bundle.getKeys();

        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            String value = bundle.getString(key);
            System.out.println(key + " = " + value);
        }
    }
}
```
================================================================

Sample: 167 ResourceBundle_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        Locale locale = new Locale("en", "US");
        ResourceBundle bundle = ResourceBundle.getBundle("MessagesBundle", locale);
        String message = bundle.getString("greeting");
        System.out.println(message);
    }
}
```
================================================================

Sample: 168 ResourceBundle_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        Locale locale = Locale.getDefault();
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources", locale);
        String greeting = bundle.getString("greeting");
        System.out.println(greeting);
    }
}
```
================================================================

Sample: 169 ResourceBundle_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Enumeration;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("ExampleBundle");
        Enumeration<String> keys = bundle.getKeys();
        
        while (keys.hasMoreElements()) {
            String key = keys.nextElement();
            String value = bundle.getString(key);
            System.out.println(key + ": " + value);
        }
    }
}
```
================================================================

Sample: 170 ResourceBundle_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("example");
        String value = bundle.getString("key");
        System.out.println("Value for key 'key': " + value);
    }
}
```
================================================================

Sample: 171 ResourceBundle_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.*;

public class Main {
    public static void main(String[] args) {
        ResourceBundle bundle = ResourceBundle.getBundle("MyResources");
        Set<String> keys = bundle.keySet();

        for (String key : keys) {
            System.out.println(key);
        }
    }
}
```
================================================================

Sample: 172 ResourceBundle_Control_1
----------------------------------------------------------------
```java
import java.util.List;
import java.util.ResourceBundle;
import java.util.ResourceBundle.Control;

public class Main {
    public static void main(String[] args) {
        List<String> formats = Control.getControl(Control.FORMAT_DEFAULT).getFormats("baseName");
        System.out.println(formats);
    }
}
```
================================================================

Sample: 173 ResourceBundle_Control_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        String baseName = "example.properties";
        Locale locale = new Locale("en", "US");
        
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public Locale getFallbackLocale(String baseName, Locale locale) {
                // Custom logic to determine fallback locale
                return new Locale("en");
            }
        };
        
        Locale fallbackLocale = control.getFallbackLocale(baseName, locale);
        System.out.println("Fallback Locale: " + fallbackLocale);
    }
}
```
================================================================

Sample: 174 ResourceBundle_Control_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        List<Locale> locales = ResourceBundle.Control.getControl(ResourceBundle.Control.FORMAT_DEFAULT).getCandidateLocales("messages", Locale.ENGLISH);
        
        System.out.println("Candidate Locales:");
        for (Locale locale : locales) {
            System.out.println(locale.toString());
        }
    }
}
```
================================================================

Sample: 175 ResourceBundle_Control_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Locale;
import java.util.ResourceBundle;

public class Main {
    public static void main(String[] args) {
        String baseName = "MyResources";
        Locale locale = Locale.US;
        ResourceBundle.Control control = new ResourceBundle.Control() {
            @Override
            public long getTimeToLive(String baseName, Locale locale) {
                // Implement your logic for getTimeToLive here
                return 3600000L; // Example: 1 hour
            }
        };
        
        long timeToLive = control.getTimeToLive(baseName, locale);
        System.out.println("Time to live for " + baseName + " in " + locale + " is " + timeToLive + " milliseconds.");
    }
}
```
================================================================

Sample: 176 Scanner_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter a string: ");
        String input = scanner.nextLine();
        
        System.out.println("You entered: " + input);
        
        scanner.close();
    }
}
```
================================================================

Sample: 177 Scanner_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter an integer:");
        int num = scanner.nextInt();
        System.out.println("The entered number is: " + num);
        scanner.close();
    }
}
```
================================================================

Sample: 178 Scanner_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.println("Enter a double number: ");
        double number = scanner.nextDouble();
        
        System.out.println("You entered: " + number);
        
        scanner.close();
    }
}
```
================================================================

Sample: 179 Scanner_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter a number: ");
        boolean hasNext = scanner.hasNextInt();

        if(hasNext) {
            int number = scanner.nextInt();
            System.out.println("You entered: " + number);
        } else {
            System.out.println("Please enter a valid integer.");
        }
        scanner.close();
    }
}
```
================================================================

Sample: 180 Scanner_5
----------------------------------------------------------------
`void close()`: This method closes the Scanner and its underlying InputStream.
 
Code snippet:
```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter your name: ");
        String name = scanner.nextLine();
        System.out.println("Hello, " + name);
        
        scanner.close();
    }
}
```
================================================================

Sample: 181 ServiceLoader_2
----------------------------------------------------------------
`void reload()`: This method reloads the service providers using the same ClassLoader as was used to locate the providers.

Code snippet:
```java
import java.util.ServiceLoader;

public class Main {
    public static void main(String[] args) {
        ServiceLoader<AccountService> serviceLoader = ServiceLoader.load(AccountService.class);
        
        // Reload the service providers
        serviceLoader.reload();
        
        for(AccountService service : serviceLoader) {
            service.doSomething();
        }
    }
}

interface AccountService {
    void doSomething();
}

class MyAccountService implements AccountService {
    @Override
    public void doSomething() {
        System.out.println("Doing something in MyAccountService");
    }
}
```
================================================================

Sample: 182 SimpleTimeZone_1
----------------------------------------------------------------
`void setStartYear(int startYear)`: This method sets the daylight saving time starting year for this time zone. 

Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone();
        int startYear = 2022;
        timeZone.setStartYear(startYear);
        System.out.println("Daylight saving time starting year set to: " + startYear);
    }
}
```
================================================================

Sample: 183 SimpleTimeZone_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone(0, "GMT");
        timeZone.setStartRule(1, 1, 0, 0); // Set the start rule for Daylight Saving Time
    }
}
```
================================================================

Sample: 184 SimpleTimeZone_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone(0, "GMT");
        timeZone.setEndRule(10, 1, 0, 0); // Sets the end rule to October, first Sunday, at midnight
    }
}
```
================================================================

Sample: 185 SimpleTimeZone_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone timeZone = new SimpleTimeZone(0, "GMT");
        boolean usesDaylightTime = timeZone.useDaylightTime();
        System.out.println("Uses Daylight Time: " + usesDaylightTime);
    }
}
```
================================================================

Sample: 186 SimpleTimeZone_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.SimpleTimeZone;

public class Main {
    public static void main(String[] args) {
        SimpleTimeZone simpleTimeZone = new SimpleTimeZone(0, "GMT");
        int rawOffset = simpleTimeZone.getRawOffset();
        System.out.println("Raw offset: " + rawOffset);
    }
}
```
================================================================

Sample: 187 Spliterators_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.emptySpliterator();
    }
}
```
================================================================

Sample: 188 Spliterators_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.ArrayList;
import java.util.Spliterator;

public class Main {
    public static void main(String[] args) {
        ArrayList<String> list = new ArrayList<>();
        list.add("Hello");

        Spliterator<String> spliterator = Spliterators.spliterator(list.iterator(), list.size(), Spliterator.ORDERED);
        
        System.out.println("Spliterator characteristics: " + spliterator.characteristics());
    }
}
```
================================================================

Sample: 189 Spliterators_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Arrays;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Iterator<String> iterator = Arrays.asList("Apple", "Banana", "Orange").iterator();
        Spliterator<String> sp = Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED);

        sp.forEachRemaining(System.out::println);
    }
}
```
================================================================

Sample: 190 Spliterators_5
----------------------------------------------------------------
Code snippet:

```java
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.Iterator;

public class Main {
    public static void main(String[] args) {
        Iterator<Integer> iterator = new Iterator<Integer>() {
            int index = 0;
            Integer[] elements = {1, 2, 3, 4, 5};
            
            @Override
            public boolean hasNext() {
                return index < elements.length;
            }

            @Override
            public Integer next() {
                return elements[index++];
            }
        };

        Spliterator<Integer> spliterator = Spliterators.spliteratorUnknownSize(iterator, Spliterator.ORDERED);

        spliterator.forEachRemaining(System.out::println);
    }
}
```
================================================================

Sample: 191 Spliterators_AbstractDoubleSpliterator_1
----------------------------------------------------------------
`long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.

Code snippet:
```java
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterators.AbstractDoubleSpliterator doubleSpliterator = new Spliterators.AbstractDoubleSpliterator(0, 0) {
            @Override
            public long estimateSize() {
                return 100; // return an estimated size of 100 elements
            }
        };

        System.out.println("Estimated size: " + doubleSpliterator.estimateSize());
    }
}
```
================================================================

Sample: 192 Spliterators.AbstractDoubleSpliterator_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;

public class Main {
    public static void main(String[] args) {
        // AbstractDoubleSpliterator is an abstract class, so we cannot create an instance of it
        // You would need to create a concrete class that extends AbstractDoubleSpliterator and implement the characteristics() method
    }
}
```
================================================================

Sample: 193 Spliterators.AbstractIntSpliterator_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.IntStream;

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Spliterator.OfInt spliterator = Spliterators.spliterator(arr, Spliterator.ORDERED);

        Spliterator.OfInt firstHalf = spliterator.trySplit();
        if (firstHalf != null) {
            System.out.println("First Half:");
            firstHalf.forEachRemaining(System.out::println);
        }

        System.out.println("Second Half:");
        spliterator.forEachRemaining(System.out::println);
    }
}
```
================================================================

Sample: 194 Spliterators_AbstractIntSpliterator_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterators;
import java.util.Spliterator;

public class Main {
    public static void main(String[] args) {
        int estimate = MySpliterator.estimateSize();
        System.out.println("Estimate size: " + estimate);
    }
    
    static class MySpliterator extends Spliterators.AbstractIntSpliterator {
        public MySpliterator(long size, int characteristics) {
            super(size, characteristics);
        }
    }
}
```
================================================================

Sample: 195 Spliterators.AbstractIntSpliterator_4
----------------------------------------------------------------
`int characteristics()`: This method returns a set of characteristics of this Spliterator and its elements. 

Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfInt intSpliterator = Spliterators.emptyIntSpliterator();
        int characteristics = intSpliterator.characteristics();
        System.out.println(characteristics);
    }
}
```
================================================================

Sample: 196 Spliterators.AbstractLongSpliterator_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;

public class Main {
    
    public static void main(String[] args) {
        
    }
    
    static long estimateSize(Spliterator.OfLong spliterator) {
        long size = 0;
        long est = spliterator.estimateSize();
        if (est >= 0) {
            size = est;
        }
        return size;
    }
}
```
================================================================

Sample: 197 Spliterators.AbstractLongSpliterator_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Supplier;
import java.util.stream.StreamSupport;

public class Main {
    public static void main(String[] args) {
        long[] elements = {1, 2, 3, 4, 5};
        Spliterator.OfLong spliterator = Spliterators.spliterator(elements, Spliterator.SIZED | Spliterator.IMMUTABLE | Spliterator.ORDERED);

        int characteristics = spliterator.characteristics();
        System.out.println(characteristics);
    }
}
```
================================================================

Sample: 198 Spliterators.AbstractSpliterator_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;

public class Main {
    public static void main(String[] args) {
        Spliterator<Integer> spliterator = new Spliterator<Integer>() {
            @Override
            public boolean tryAdvance(Consumer<? super Integer> action) {
                return false;
            }

            @Override
            public Spliterator<Integer> trySplit() {
                return null;
            }

            @Override
            public long estimateSize() {
                return 100;
            }

            @Override
            public int characteristics() {
                return 0;
            }
        };

        System.out.println(spliterator.estimateSize());
    }
}
```
================================================================

Sample: 199 Spliterators.AbstractSpliterator_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;

public class Main {
    public static void main(String[] args) {
        Spliterator.OfInt intSpliterator = new Spliterator.OfInt() {
            @Override
            public OfInt trySplit() {
                return null;
            }

            @Override
            public long estimateSize() {
                return 0;
            }

            @Override
            public int characteristics() {
                return ORDERED | SIZED | IMMUTABLE | SUBSIZED;
            }

            @Override
            public boolean tryAdvance(IntConsumer action) {
                return false;
            }

            @Override
            public void forEachRemaining(IntConsumer action) {

            }
        };

        System.out.println("Characteristics: " + intSpliterator.characteristics());
    }
}
```
================================================================

Sample: 200 Spliterators_AbstractSpliterator_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Spliterator;
import java.util.Spliterators.AbstractSpliterator;
import java.util.Spliterator.OfInt;
import java.util.Spliterator.OfLong;
import java.util.Spliterator.OfDouble;
import java.util.Spliterators;

public class Main {
    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        
        // Creating a Spliterator for the array
        OfInt spliterator = Spliterators.spliterator(array, Spliterator.ORDERED);
        
        // Trying to split the Spliterator
        OfInt trySplitSpliterator = (OfInt) ((AbstractSpliterator.OfInt) spliterator).trySplit();
        
        while (spliterator.tryAdvance((int element) -> System.out.println("Element: " + element)));
        System.out.println("-----");
        while (trySplitSpliterator.tryAdvance((int element) -> System.out.println("TrySplit Element: " + element)));
    }
}
```
================================================================

Sample: 201 SplittableRandom_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        int bound = 10;
        int randomNumber = random.nextInt(bound);
        System.out.println("Random Number: " + randomNumber);
    }
}
```
================================================================

Sample: 202 SplittableRandom_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        double randomDouble = random.nextDouble();
        System.out.println("Random double: " + randomDouble);
    }
}
```
================================================================

Sample: 203 SplittableRandom_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        
        long randomNumber = random.nextLong();
        
        System.out.println("Random long number: " + randomNumber);
    }
}
```
================================================================

Sample: 204 SplittableRandom_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        int randomNumber = random.nextInt();
        System.out.println("Random number: " + randomNumber);
    }
}
```
================================================================

Sample: 205 SplittableRandom_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.SplittableRandom;

public class Main {
    public static void main(String[] args) {
        SplittableRandom random = new SplittableRandom();
        boolean result = random.nextBoolean();
        System.out.println("Random Boolean: " + result);
    }
}
```
================================================================

Sample: 206 Stack_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<String> stack = new Stack<>();
        System.out.println("Is stack empty? " + stack.empty());
    }
}
```
================================================================

Sample: 207 Stack_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        System.out.println("Top element of the stack: " + stack.peek());
    }
}
```
================================================================

Sample: 208 Stack_3
----------------------------------------------------------------
`E pop()`: This method removes and returns the element at the top of the Stack.

Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        
        stack.push(1);
        stack.push(2);
        stack.push(3);
        
        System.out.println("Stack before pop: " + stack);
        
        int poppedElement = stack.pop();
        
        System.out.println("Popped element: " + poppedElement);
        System.out.println("Stack after pop: " + stack);
    }
}
```
================================================================

Sample: 209 Stack_5
----------------------------------------------------------------
`int search(Object o)`: This method returns the 1-based position of the object o in the stack. If the object is found, it returns the distance from the top of the stack. The topmost item is considered to be at position 1. If the object is not found in the stack, it returns -1.

Code snippet:
```java
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(1);
        stack.push(2);
        stack.push(3);

        int position = stack.search(2);
        System.out.println("Position of 2 in the stack: " + position);

        position = stack.search(4);
        System.out.println("Position of 4 in the stack: " + position);
    }
}
```
================================================================

Sample: 210 StringJoiner_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner joiner = new StringJoiner(",");
        joiner.add("Hello");
        joiner.add("World");
        String result = joiner.toString();
        System.out.println(result); // Output: Hello,World
    }
}
```
================================================================

Sample: 211 StringJoiner_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj1 = new StringJoiner(",");
        sj1.add("Apple");
        sj1.add("Banana");

        StringJoiner sj2 = new StringJoiner(",");
        sj2.add("Orange");

        StringJoiner merged = sj1.merge(sj2);
        System.out.println(merged.toString()); // Output: Apple,Banana,Orange
    }
}
```
================================================================

Sample: 212 StringJoiner_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj = new StringJoiner(", ", "[", "]");
        sj.add("John");
        sj.add("Doe");
        sj.add("Jane");
        
        System.out.println(sj.toString());
    }
}
```
================================================================

Sample: 213 StringJoiner_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner joiner = new StringJoiner("-");
        joiner.add("Hello").add("World");
        
        String result = joiner.toString();
        int length = joiner.length();
        
        System.out.println("Joined String: " + result);
        System.out.println("Length of joined String: " + length);
    }
}
```
================================================================

Sample: 214 StringJoiner_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringJoiner;

public class Main {
    public static void main(String[] args) {
        StringJoiner sj = new StringJoiner(",");
        sj.add("John").add("Doe").add("Jane");
        System.out.println(sj.toString());

        StringJoiner sjEmpty = new StringJoiner(",");
        sjEmpty.setEmptyValue("No names listed");
        System.out.println(sjEmpty.toString());
    }
}
```
================================================================

Sample: 215 StringTokenizer_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        StringTokenizer st = new StringTokenizer("This is a test sentence");
        
        while(st.hasMoreTokens()) {
            String token = st.nextToken();
            System.out.println(token);
        }
    }
}
```
================================================================

Sample: 216 StringTokenizer_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello, World, Java";
        StringTokenizer st = new StringTokenizer(str, ",");
        
        while (st.hasMoreTokens()) {
            System.out.println(st.nextToken());
        }
    }
}
```
================================================================

Sample: 217 StringTokenizer_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello,World,Java";
        StringTokenizer tokenizer = new StringTokenizer(str, ",");
        
        while(tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            System.out.println(token);
        }
    }
}
```
================================================================

Sample: 218 StringTokenizer_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) {
        String str = "Hello World";
        StringTokenizer tokenizer = new StringTokenizer(str, " ");
        int tokensCount = tokenizer.countTokens();
        System.out.println("Number of tokens: " + tokensCount);
    }
}
```
================================================================

Sample: 219 Timer_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        
        // Creating a TimerTask
        TimerTask task = new TimerTask(){
            public void run(){
                System.out.println("Task executed at: " + new Date());
            }
        };
        
        // Scheduling the task to run once at a specified time
        timer.schedule(task, new Date()); // Replace new Date() with your desired time
        
        // Cancelling the task after 5 seconds
        timer.schedule(new TimerTask(){
            public void run(){
                task.cancel();
                System.out.println("Task cancelled");
            }
        }, 5000);
    }
}
```
================================================================

Sample: 220 Timer_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed after delay");
            }
        };
        long delay = 2000; // Delay of 2 seconds
        timer.schedule(task, delay);
    }
}
```
================================================================

Sample: 221 Timer_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;
import java.util.Date;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                // Task to be executed at each scheduled interval
                System.out.println("Task executed at: " + new Date());
            }
        };
        
        Date firstTime = new Date(); // Set the initial time to current time
        long period = 1000; // Period in milliseconds (e.g. 1000 milliseconds = 1 second)
        
        timer.schedule(task, firstTime, period);
    }
}
```
================================================================

Sample: 222 Timer_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed at regular interval");
            }
        };
        
        // Scheduling the task to run after a delay of 0 ms and repeat every 1000 ms (1 second)
        timer.schedule(task, 0, 1000);
    }
}
```
================================================================

Sample: 223 Timer_5
----------------------------------------------------------------
`void cancel()`: This method cancels the timer and removes all scheduled tasks.

Code snippet:
```java
import java.util.Timer;
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        Timer timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task is running");
            }
        };

        timer.schedule(task, 1000); // Schedule the task to run after 1 second

        // Cancel the timer before the task runs
        timer.cancel();
    }
}
```
================================================================

Sample: 224 TimerTask_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                // Task logic here
            }
        };
        
        boolean result = task.cancel();
        System.out.println("Task cancelled: " + result);
    }
}
```
================================================================

Sample: 225 TimerTask_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("Task executed at: " + scheduledExecutionTime());
            }
        };

        task.run();
    }
}
```
================================================================

Sample: 226 TimerTask_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimerTask;

public class Main {
    public static void main(String[] args) {
        // Create a new TimerTask
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                System.out.println("TimerTask running...");
                // Add your task logic here
            }
        };
        // Schedule the task to run after a specified delay
        // For example, schedule the task to run after 1 second
        new java.util.Timer().schedule(task, 1000);
    }
}
```
================================================================

Sample: 227 TimeZone_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        // Get the default time zone
        TimeZone defaultTimeZone = TimeZone.getDefault();

        // Get and print the display name of the default time zone
        String displayName = defaultTimeZone.getDisplayName();
        System.out.println("Default Time Zone Display Name: " + displayName);
    }
}
```
================================================================

Sample: 228 TimeZone_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        String id = timeZone.getID();
        System.out.println("Time Zone ID: " + id);
    }
}
```
================================================================

Sample: 229 TimeZone_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        long date = System.currentTimeMillis();
        int offset = timeZone.getOffset(date);
        System.out.println("Offset: " + offset);
    }
}
```
================================================================

Sample: 230 TimeZone_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getTimeZone("GMT+3");
        int rawOffset = timeZone.getRawOffset();
        System.out.println("Raw offset: " + rawOffset);
    }
}
```
================================================================

Sample: 231 TimeZone_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.TimeZone;

public class Main {
    public static void main(String[] args) {
        TimeZone timeZone = TimeZone.getDefault();
        boolean usesDaylightTime = timeZone.useDaylightTime();
        System.out.println("Uses Daylight Time: " + usesDaylightTime);
    }
}
```
================================================================

Sample: 232 TreeMap_1
----------------------------------------------------------------
`V put(K key, V value)`: This method associates the specified value with the specified key in this map.

Code snippet:
```java
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<String, Integer> treeMap = new TreeMap<>();
        treeMap.put("A", 1);
        treeMap.put("B", 2);
        treeMap.put("C", 3);
        
        System.out.println(treeMap);
    }
}
```
================================================================

Sample: 233 TreeMap_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> treeMap = new TreeMap<>();
        treeMap.put(1, "One");
        treeMap.put(2, "Two");
        System.out.println("Before removal: " + treeMap);

        // Using remove() method to remove key 2
        treeMap.remove(2);
        System.out.println("After removal: " + treeMap);
    }
}
```
================================================================

Sample: 234 TreeMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeMap;

public class Main {
    public static void main(String[] args) {
        TreeMap<Integer, String> map = new TreeMap<>();
        map.put(1, "One");
        map.put(2, "Two");

        // Check if the TreeMap contains a key
        boolean containsKey = map.containsKey(1);
        System.out.println("Map contains key 1: " + containsKey);
    }
}
```
================================================================

Sample: 235 TreeSet_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        TreeSet<Integer> treeSet = new TreeSet<>();
        treeSet.add(10);
        treeSet.add(5);
        treeSet.add(20);

        System.out.println(treeSet.ceiling(15)); // Output: 20
    }
}
```
================================================================

Sample: 236 TreeSet_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        TreeSet<Integer> treeSet = new TreeSet<>();
        treeSet.add(5);
        treeSet.add(3);
        treeSet.add(8);
        
        System.out.println("TreeSet elements: " + treeSet);
    }
}
```
================================================================

Sample: 237 TreeSet_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.SortedSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        SortedSet<Integer> set = new TreeSet<>();
        set.add(3);
        set.add(1);
        set.add(2);
        
        System.out.println("Set elements: " + set);
        
        System.out.println("Elements less than 2 (headSet): " + set.headSet(2));
    }
}
```
================================================================

Sample: 238 TreeSet_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.SortedSet;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        SortedSet<Integer> set = new TreeSet<>();
        
        set.add(3);
        set.add(1);
        set.add(2);
        set.add(4);
        
        System.out.println("Original Set: " + set);
        
        SortedSet<Integer> tailSet = ((TreeSet<Integer>) set).tailSet(2);
        
        System.out.println("Tail Set starting from element 2: " + tailSet);
    }
}
```
================================================================

Sample: 239 TreeSet_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        TreeSet<Integer> treeSet = new TreeSet<>();
        treeSet.add(5);
        treeSet.add(3);
        treeSet.add(8);

        System.out.println("TreeSet before pollFirst(): " + treeSet);

        Integer firstElement = treeSet.pollFirst();

        System.out.println("First element removed: " + firstElement);
        System.out.println("TreeSet after pollFirst(): " + treeSet);
    }
}
```
================================================================

Sample: 240 UUID_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        System.out.println("Random UUID: " + uuid);
    }
}
```
================================================================

Sample: 241 UUID_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        byte[] name = "example".getBytes();
        UUID uuid = UUID.nameUUIDFromBytes(name);
        System.out.println("Generated UUID: " + uuid.toString());
    }
}
```
================================================================

Sample: 242 UUID_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        long mostSignificantBits = uuid.getMostSignificantBits();
        System.out.println("Most Significant Bits: " + mostSignificantBits);
    }
}
```
================================================================

Sample: 243 UUID_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid = UUID.randomUUID();
        long leastSignificantBits = uuid.getLeastSignificantBits();
        System.out.println("Least Significant Bits: " + leastSignificantBits);
    }
}
```
================================================================

Sample: 244 UUID_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.UUID;

public class Main {
    public static void main(String[] args) {
        UUID uuid1 = UUID.fromString("38400000-8cf0-11bd-b23e-10b96e4ef00d");
        UUID uuid2 = UUID.fromString("38400000-8cf0-11bd-b23e-10b96e4ef00d");

        int comparison = uuid1.compareTo(uuid2);
        if (comparison == 0) {
            System.out.println("UUIDs are equal");
        } else if (comparison < 0) {
            System.out.println("UUID1 is less than UUID2");
        } else {
            System.out.println("UUID1 is greater than UUID2");
        }
    }
}
```
================================================================

Sample: 245 Vector_3
----------------------------------------------------------------
```java
import java.util.Vector;

public class Main {
    public static void main(String[] args) {
        Vector<String> vector = new Vector<>();
        vector.add("Apple");
        vector.add("Banana");
        vector.add("Orange");
        
        System.out.println("Vector before removal: " + vector);
        
        boolean removed = vector.removeElement("Banana");
        
        System.out.println("Element 'Banana' removed: " + removed);
        System.out.println("Vector after removal: " + vector);
    }
}
```
================================================================

Sample: 246 Vector_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.Vector;

public class Main {
    public static void main(String[] args) {
        Vector<Integer> vector = new Vector<>();
        vector.add(10);
        vector.add(20);
        vector.add(30);
        
        System.out.println("Size of the vector: " + vector.size());
    }
}
```
================================================================

Sample: 247 Vector_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.Vector;

public class Main {
    public static void main(String[] args) {
        Vector<Integer> vector = new Vector<>();
        vector.add(1);
        vector.add(2);
        vector.add(3);

        System.out.println("Initial Vector: " + vector);

        setSize(vector, 5);

        System.out.println("Vector after resizing: " + vector);
    }

    public static void setSize(Vector<Integer> vector, int newSize) {
        vector.setSize(newSize);
    }
}
``` 

In this code snippet, the `setSize()` method is used to set the size of the provided Vector to the specified new size. The method is called in the `main` method to demonstrate its functionality.
================================================================

Sample: 248 WeakHashMap_2
----------------------------------------------------------------
`V get(Object key)`: This method returns the value to which the specified key is mapped in this map, or null if the map contains no mapping for the key.

Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<String, Integer> map = new WeakHashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        
        System.out.println("Value for key 'One': " + map.get("One"));
        System.out.println("Value for key 'Two': " + map.get("Two"));
        System.out.println("Value for key 'Three': " + map.get("Three"));
    }
}
```
================================================================

Sample: 249 WeakHashMap_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<String, Integer> map = new WeakHashMap<>();
        map.put("One", 1);
        boolean containsKey = map.containsKey("One");
        System.out.println("Key 'One' exists in map: " + containsKey);
    }
}
```
================================================================

Sample: 250 WeakHashMap_4
----------------------------------------------------------------
`V remove(Object key)`: This method removes the mapping for the specified key from this map if present.

Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<Integer, String> map = new WeakHashMap<>();
        map.put(1, "One");
        map.put(2, "Two");
        map.put(3, "Three");

        System.out.println("Before removal: " + map);

        // Removing key 2
        map.remove(2);

        System.out.println("After removal: " + map);
    }
}
```
================================================================

Sample: 251 WeakHashMap_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.WeakHashMap;

public class Main {
    public static void main(String[] args) {
        WeakHashMap<Integer, String> map = new WeakHashMap<>();
        map.put(1, "Java");
        map.put(2, "Python");
        
        System.out.println("Size of WeakHashMap: " + map.size());
    }
}
```
================================================================

