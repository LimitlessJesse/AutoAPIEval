Sample: 0 AbstractCollection
----------------------------------------------------------------
1. `boolean addAll(Collection<? extends E> c)`: Adds all of the elements in the specified collection to this collection.
2. `boolean contains(Object o)`: Returns true if this collection contains the specified element.
3. `boolean isEmpty()`: Returns true if this collection contains no elements.
4. `int size()`: Returns the number of elements in this collection.
5. `Object[] toArray()`: Returns an array containing all of the elements in this collection.
================================================================

Sample: 1 AbstractList
----------------------------------------------------------------
1. `E get(int index)`: This method returns the element at the specified position in this list.
2. `E set(int index, E element)`: This method replaces the element at the specified position in this list with the specified element.
3. `int indexOf(Object o)`: This method returns the index of the first occurrence of the specified element in this list, or -1 if the list does not contain the element.
4. `int lastIndexOf(Object o)`: This method returns the index of the last occurrence of the specified element in this list, or -1 if the list does not contain the element.
5. `List<E> subList(int fromIndex, int toIndex)`: This method returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.
================================================================

Sample: 2 AbstractMap
----------------------------------------------------------------
1. `Set<Entry<K,V>> entrySet()`: This method returns a Set view of the mappings contained in this map.
2. `boolean equals(Object o)`: This method compares the specified object with this abstract map for equality.
3. `int hashCode()`: This method returns the hash code value for this abstract map.
4. `Set<K> keySet()`: This method returns a Set view of the keys contained in this map.
5. `Collection<V> values()`: This method returns a Collection view of the values contained in this map.
================================================================

Sample: 3 AbstractMap.SimpleEntry
----------------------------------------------------------------
1. `V setValue(V value)`: This method sets the value of this SimpleEntry to the specified value and returns the previous value.
2. `boolean equals(Object obj)`: This method compares the specified object with this SimpleEntry for equality.
3. `int hashCode()`: This method returns the hash code value for this SimpleEntry.
4. `String toString()`: This method returns a string representation of this SimpleEntry.
5. `K getKey()`: This method returns the key of this SimpleEntry.
================================================================

Sample: 4 AbstractMap.SimpleImmutableEntry
----------------------------------------------------------------
1. `K getKey()`: Return type - K
2. `V getValue()`: Return type - V
3. `SimpleImmutableEntry<K,V> setValue(V value)`: Return type - SimpleImmutableEntry<K,V>, Parameters - V value
4. `String toString()`: Return type - String
5. `boolean equals(Object obj)`: Return type - boolean, Parameters - Object obj
================================================================

Sample: 5 AbstractQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `boolean remove(Object o)`: This method removes a single instance of the specified element from this queue, if it is present.
5. `int size()`: This method returns the number of elements in this queue.
================================================================

Sample: 6 AbstractSequentialList
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the beginning of this list.
2. `void addLast(E e)`: This method appends the specified element to the end of this list.
3. `ListIterator<E> listIterator(int index)`: This method returns a list iterator over the elements in this list starting at the specified position.
4. `E removeFirst()`: This method removes and returns the first element from this list.
5. `E removeLast()`: This method removes and returns the last element from this list.
================================================================

Sample: 7 AbstractSet
----------------------------------------------------------------
1. `Iterator iterator()`: Returns an iterator over the elements in this set.
2. `void clear()`: Removes all of the elements from this set.
3. `int size()`: Returns the number of elements in this set.
4. `boolean contains(Object o)`: Returns true if this set contains the specified element.
5. `boolean remove(Object o)`: Removes the specified element from this set if it is present.
================================================================

Sample: 8 ArrayDeque
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the beginning of this deque.
2. `void addLast(E e)`: This method inserts the specified element at the end of this deque.
3. `E removeFirst()`: This method retrieves and removes the first element of this deque.
4. `E removeLast()`: This method retrieves and removes the last element of this deque.
5. `E getFirst()`: This method retrieves, but does not remove, the first element of this deque.
================================================================

Sample: 9 ArrayList
----------------------------------------------------------------
1. `boolean add(E e)`: This method appends the specified element to the end of this list.
2. `void add(int index, E element)`: This method inserts the specified element at the specified position in this list.
3. `E get(int index)`: This method returns the element at the specified position in this list.
4. `E remove(int index)`: This method removes the element at the specified position in this list and returns it.
5. `int size()`: This method returns the number of elements in this list.
================================================================

Sample: 10 Arrays
----------------------------------------------------------------
1. `void sort(int[] a)`: This method sorts the specified array of integers into ascending numerical order.
2. `int binarySearch(int[] a, int key)`: This method searches the specified array of integers for the specified value using the binary search algorithm.
3. `String toString(Object[] a)`: This method returns a string representation of the contents of the specified array.
4. `int hashCode(int[] a)`: This method returns a hash code based on the contents of the specified array of integers.
5. `boolean equals(int[] a, int[] a2)`: This method returns true if the two specified arrays of integers are equal to one another.
================================================================

Sample: 11 Base64
----------------------------------------------------------------
1. `byte[] encode(byte[] src)`: Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme.
2. `byte[] decode(String src)`: Decodes a Base64 encoded String into a newly-allocated byte array.
3. `String encodeToString(byte[] src)`: Encodes the specified byte array into a String using the Base64 encoding scheme.
4. `byte[] encode(byte[] src, int off, int len)`: Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output array.
5. `int hashCode()`: Returns a hash code value for the object.
================================================================

Sample: 12 Base64.Decoder
----------------------------------------------------------------
1. `byte[] decode(String src)`: This method decodes a Base64 encoded String into a byte array.
2. `ByteBuffer wrap(byte[] dst)`: This method wraps a byte array into a ByteBuffer.
3. `byte[] decode(byte[] src)`: This method decodes a byte array of Base64 encoded data.
4. `InputStream wrap(InputStream is)`: This method wraps an InputStream with Base64 decoding functionality.
5. `int decode(String src, OutputStream os)`: This method decodes a Base64 encoded String into an OutputStream.
================================================================

Sample: 13 Base64.Encoder
----------------------------------------------------------------
1. `byte[] encode(byte[] src)`: This method encodes all bytes from the specified byte array into a newly-allocated byte array, using the Base64 encoding scheme.
2. `String encodeToString(byte[] src)`: This method encodes all bytes from the specified byte array into a newly-allocated String, using the Base64 encoding scheme.
3. `Base64.Encoder withoutPadding()`: This method returns a Base64.Encoder without any padding in the output.
4. `Base64.Encoder ignoreErrors()`: This method returns a Base64.Encoder that encodes using the MIME type and does not throw any exceptions for unencodable input.
5. `int hashCode()`: This method returns a hash code value for the object.
================================================================

Sample: 14 BitSet
----------------------------------------------------------------
1. `void set(int bitIndex)`: This method sets the bit at the specified index to true.
2. `void clear(int bitIndex)`: This method sets the bit at the specified index to false.
3. `boolean get(int bitIndex)`: This method returns the value of the bit at the specified index.
4. `int length()`: This method returns the "logical size" of this BitSet.
5. `void flip(int bitIndex)`: This method flips the bit at the specified index.
================================================================

Sample: 15 Calendar
----------------------------------------------------------------
1. `void setTime(Date date)`: Sets this Calendar's time with the given Date.
2. `int get(int field)`: Returns the value of the given calendar field.
3. `void set(int field, int value)`: Sets the value of the specified calendar field.
4. `void add(int field, int amount)`: Adds or subtracts the specified amount of time to the given calendar field.
5. `boolean isLeapYear(int year)`: Determines if the given year is a leap year.
================================================================

Sample: 16 Calendar.Builder
----------------------------------------------------------------
1. `java.util.Calendar.Builder set(int field, int value)`: This method sets the value of the specified field in the calendar builder.
2. `java.util.Calendar.Builder setFields(int... fieldValues)`: This method sets the values of multiple fields in the calendar builder at once.
3. `java.util.Calendar toCalendar()`: This method constructs a Calendar object from the state of the calendar builder.
4. `java.util.Calendar.Builder roll(int field, boolean up)`: This method rolls the specified field in the calendar builder either up or down.
5. `java.util.Calendar.Builder clear(int field)`: This method clears the specified field in the calendar builder.
================================================================

Sample: 17 Collections
----------------------------------------------------------------
1. `void shuffle(List<?> list)`: This method randomly permutes the specified list using a default source of randomness.
2. `void reverse(List<?> list)`: This method reverses the order of the elements in the specified list.
3. `void sort(List<T> list)`: This method sorts the specified list into ascending order, according to the natural ordering of its elements.
4. `void rotate(List<?> list, int distance)`: This method rotates the elements in the specified list by the specified distance.
5. `int frequency(Collection<?> c, Object o)`: This method returns the number of elements in the specified collection equal to the specified object.
================================================================

Sample: 18 Currency
----------------------------------------------------------------
1. `static Currency getInstance(String currencyCode)`: This method returns the Currency instance for the given currency code.
2. `int getDefaultFractionDigits()`: This method returns the number of fraction digits for this currency.
3. `String getDisplayName()`: This method returns the symbol of the currency.
4. `String getCurrencyCode()`: This method returns the ISO 4217 currency code of this currency.
5. `String getSymbol()`: This method returns the symbol of the currency for the default locale.
================================================================

Sample: 19 Date
----------------------------------------------------------------
1. `Date()`: This method creates a new Date object and initializes it to the current time.

2. `long getTime()`: This method returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.

3. `void setTime(long time)`: This method sets this Date object to represent a point in time that is time milliseconds after January 1, 1970, 00:00:00 GMT.

4. `boolean before(Date when)`: This method checks if this Date is before the specified Date.

5. `boolean after(Date when)`: This method checks if this Date is after the specified Date.
================================================================

Sample: 20 Dictionary
----------------------------------------------------------------
1. `void put(K key, V value)`: This method associates the specified value with the specified key in this dictionary.
2. `V get(Object key)`: This method returns the value to which the key is mapped in this dictionary.
3. `void remove(Object key)`: This method removes the key (and its corresponding value) from this dictionary.
4. `boolean isEmpty()`: This method tests if this dictionary maps no keys to value.
5. `int size()`: This method returns the number of key-value mappings in this dictionary.
================================================================

Sample: 21 DoubleSummaryStatistics
----------------------------------------------------------------
1. `void accept(double value)`: This method accepts the specified double value into the statistics data.
2. `long getCount()`: This method returns the count of values accepted.
3. `double getSum()`: This method returns the sum of values accepted.
4. `double getAverage()`: This method returns the average of values accepted.
5. `double getMax()`: This method returns the maximum value accepted.
================================================================

Sample: 22 EnumMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
3. `Set<Map.Entry<K, V>> entrySet()`: This method returns a Set view of the mappings contained in this map.
4. `Collection<V> values()`: This method returns a Collection view of the values contained in this map.
5. `EnumMap<K, V> clone()`: This method returns a shallow copy of this EnumMap instance.
================================================================

Sample: 23 EnumSet
----------------------------------------------------------------
1. `EnumSet<E> noneOf(Class<E> elementType)`: This method creates an empty enum set with the specified element type.
2. `EnumSet<E> allOf(Class<E> elementType)`: This method creates an enum set containing all of the elements in the specified element type.
3. `EnumSet<E> complementOf(EnumSet<E> set)`: This method creates an enum set with the same element type as the specified enum set, containing all elements not in the specified set.
4. `EnumSet<E> copyOf(EnumSet<E> set)`: This method creates a copy of the specified enum set.
5. `EnumSet<E> range(E from, E to)`: This method creates an enum set with all of the elements in the range specified by the two endpoints.
================================================================

Sample: 24 EventListenerProxy
----------------------------------------------------------------
1. `EventListenerProxy<T> create(Class<T> listenerInterface, T target)`: This method creates a proxy for the specified listener interface and target object.
2. `T getListener()`: Returns the listener associated with this proxy.
3. `Proxy getProxy()`: Returns the proxy object associated with this EventListenerProxy instance.
4. `void handleEvent(Object event)`: This method is called when an event is fired to handle the event.
5. `boolean equals(Object obj)`: Indicates whether some other object is "equal to" this EventListenerProxy instance.
================================================================

Sample: 25 EventObject
----------------------------------------------------------------
1. `Object getSource()`: This method returns the object on which the Event initially occurred.
2. `String toString()`: This method returns a String representation of the EventObject.
3. `void setSource(Object newSource)`: This method allows changing the object on which the Event occurred.
4. `EventObject clone()`: This method creates and returns a copy of this EventObject.
5. `long getWhen()`: This method returns the time when the event occurred.
================================================================

Sample: 26 FormattableFlags
----------------------------------------------------------------
1. `boolean alternate()
2. `int bytes`
3. `Locale locale`
4. `String symbol()`
5. `char toLowerCase()`

Note: The actual methods and their parameters may vary based on the specific implementation in the Java library.
================================================================

Sample: 27 Formatter
----------------------------------------------------------------
1. `String format(String format, Object... args)`: This method writes a formatted string to this object's output using the specified format string and arguments.
2. `Appendable out()`: This method returns the destination for the formatted output.
3. `Locale locale()`: This method returns the locale set for this formatter.
4. `Format x`(): This method returns the format string with all flags and conversions.
5. `Formatter format(Locale l, String format, Object... args)`: This method writes a formatted string to this object's output using the specified locale, format string, and arguments.
================================================================

Sample: 28 GregorianCalendar
----------------------------------------------------------------
1. `int get(int field)`: This method returns the value for a given time field.
2. `void set(int field, int value)`: This method sets the value for a given time field.
3. `void add(int field, int amount)`: This method adds the specified (signed) amount of time to the given time field.
4. `boolean isLeapYear(int year)`: This method checks if the specified year is a leap year.
5. `int getActualMaximum(int field)`: This method returns the maximum value that the specified time field could have.
================================================================

Sample: 29 HashMap
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
2. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
3. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
4. `int size()`: This method returns the number of key-value mappings in this map.
5. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
================================================================

Sample: 30 HashSet
----------------------------------------------------------------
1. `boolean add(E e)`: Adds the specified element to this set if it is not already present
2. `boolean remove(Object o)`: Removes the specified element from this set if it is present
3. `void clear()`: Removes all of the elements from this set
4. `boolean contains(Object o)`: Returns true if this set contains the specified element
5. `int size()`: Returns the number of elements in this set
================================================================

Sample: 31 Hashtable
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped in this hashtable.
2. `V put(K key, V value)`: This method maps the specified key to the specified value in this hashtable.
3. `V remove(Object key)`: This method removes the mapping for the specified key from this hashtable if present.
4. `boolean contains(Object value)`: This method returns true if this hashtable maps one or more keys to the specified value.
5. `void clear()`: This method clears this hashtable so that it contains no keys.
================================================================

Sample: 32 IdentityHashMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped in this map, or null if the map contains no mapping for the key.
3. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
4. `boolean containsValue(Object value)`: This method returns true if this map maps one or more keys to the specified value.
5. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
================================================================

Sample: 33 IntSummaryStatistics
----------------------------------------------------------------
1. `long getCount()`: This method returns the count of values added to the IntSummaryStatistics.
2. `long getSum()`: This method returns the sum of all values added to the IntSummaryStatistics.
3. `double getAverage()`: This method returns the average of all values added to the IntSummaryStatistics.
4. `int getMin()`: This method returns the minimum value added to the IntSummaryStatistics.
5. `int getMax()`: This method returns the maximum value added to the IntSummaryStatistics.
================================================================

Sample: 34 LinkedHashMap
----------------------------------------------------------------
1. `V get(Object key)`: This method returns the value to which the specified key is mapped.
2. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
3. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
4. `Set<K> keySet()`: This method returns a Set view of the keys contained in this map.
5. `Collection<V> values()`: This method returns a Collection view of the values contained in this map.
================================================================

Sample: 35 LinkedHashSet
----------------------------------------------------------------
1. `boolean remove(Object o)`: This method removes the specified element from this set if it is present.
2. `void clear()`: This method removes all of the elements from this set.
3. `int size()`: This method returns the number of elements in this set.
4. `boolean isEmpty()`: This method returns true if this set contains no elements.
5. `boolean contains(Object o)`: This method returns true if this set contains the specified element.
================================================================

Sample: 36 LinkedList
----------------------------------------------------------------
1. `void addFirst(E e)`: This method inserts the specified element at the beginning of this list.
2. `void addLast(E e)`: This method appends the specified element to the end of this list.
3. `E getFirst()`: This method returns the first element in this list.
4. `E getLast()`: This method returns the last element in this list.
5. `E removeFirst()`: This method removes and returns the first element from this list.
================================================================

Sample: 37 ListResourceBundle
----------------------------------------------------------------
1. `protected Object[][] getContents()`: This method returns a two-dimensional array of the contents of the resource bundle.
2. `Enumeration<String> getKeys()`: This method returns an enumeration of the keys in this resource bundle.
3. `Object handleGetObject(String key)`: This method returns the object for the given key from this resource bundle.
4. `void setParent(ResourceBundle parent)`: This method sets the parent bundle of this resource bundle.
5. `void setContents(Map<String, Object> contents)`: This method sets the contents of the resource bundle with the specified map of keys and values.
================================================================

Sample: 38 Locale
----------------------------------------------------------------
1. String getDisplayLanguage(): This method returns the display name of the language for the default locale.
2. String getISO3Country(): This method returns the three-letter abbreviation of the country for the default locale.
3. String getDisplayCountry(): This method returns the display name of the country for the default locale.
4. String getDisplayVariant(): This method returns the display name of the variant for the default locale.
5. String getDisplayName(): This method returns the display name of the locale for the default locale.
================================================================

Sample: 39 Locale.Builder
----------------------------------------------------------------
1. `Locale build()`: This method creates a new Locale object based on the parameters set in the Locale.Builder.
2. `Locale.Builder setLanguage(String language)`: This method sets the language of the Locale.Builder.
3. `Locale.Builder setRegion(String region)`: This method sets the region of the Locale.Builder.
4. `Locale.Builder setVariant(String variant)`: This method sets the variant of the Locale.Builder.
5. `Locale.Builder setExtension(char key, String value)`: This method sets an extension of the Locale.Builder.
================================================================

Sample: 40 Locale.LanguageRange
----------------------------------------------------------------
1. `String getRange()`: This method returns the language range specified when creating the LanguageRange object.
2. `double getWeight()`: This method returns the weight associated with the language range.
3. `int hashCode()`: This method returns the hash code value for the LanguageRange object.
4. `String toString()`: This method returns a string representation of the LanguageRange object.
5. `boolean equals(Object obj)`: This method checks if the specified object is equal to the LanguageRange object.
================================================================

Sample: 41 LongSummaryStatistics
----------------------------------------------------------------
1. `long getCount()`: This method returns the count of values.
2. `long getSum()`: This method returns the sum of values.
3. `double getAverage()`: This method returns the average of values.
4. `long getMax()`: This method returns the maximum value.
5. `long getMin()`: This method returns the minimum value.
================================================================

Sample: 42 Objects
----------------------------------------------------------------
1. `boolean deepEquals(Object a, Object b)`: This method recursively compares the two specified objects for deep equality.
2. `int hashCode(Object o)`: This method returns the hash code of a non-null argument and 0 for a null argument.
3. `boolean isNull(Object obj)`: This method returns true if the specified object reference is null.
4. `String toString(Object o)`: This method returns the string representation of the specified object.
5. `<T> int compare(T a, T b, Comparator<? super T> c)`: This method compares two objects using the specified Comparator.
================================================================

Sample: 43 Observable
----------------------------------------------------------------
1. `void addObserver(Observer o)`: This method adds an observer to the set of observers for this object.
2. `void deleteObserver(Observer o)`: This method deletes an observer from the set of observers of this object.
3. `void notifyObservers()`: This method notifies all observers that this object has changed.
4. `int countObservers()`: This method returns the number of observers of this object.
5. `void deleteObservers()`: This method deletes all observers of this object.
================================================================

Sample: 44 Optional
----------------------------------------------------------------
1. `boolean isPresent()`: This method returns true if there is a value present, otherwise false.
2. `T get()`: This method returns the value if present, otherwise throws NoSuchElementException. 
3. `T orElse(T other)`: This method returns the value if present, otherwise returns the specified value.
4. `<U> Optional<U> map(Function<? super T, ? extends U> mapper)`: This method applies a mapping function if a value is present, otherwise returns an empty Optional.
5. `void ifPresent(Consumer<? super T> consumer)`: This method performs the given action if a value is present.
================================================================

Sample: 45 OptionalDouble
----------------------------------------------------------------
1. `OptionalDouble empty()`: Returns an empty OptionalDouble instance.
2. `OptionalDouble of(double value)`: Returns an OptionalDouble describing the specified value.
3. `boolean isPresent()`: Returns true if there is a value present, otherwise false.
4. `double getAsDouble()`: Returns the value if present, otherwise throws NoSuchElementException.
5. `double orElse(double other)`: Returns the value if present, otherwise returns the specified value.
================================================================

Sample: 46 OptionalInt
----------------------------------------------------------------
1. OptionalInt empty(): This method returns an empty OptionalInt instance.
2. boolean isPresent(): This method returns true if there is a value present, otherwise false.
3. int orElse(int other): This method returns the value if present, otherwise returns the specified value.
4. int orElseGet(IntSupplier other): This method returns the value if present, otherwise returns the result produced by the supplying function.
5. void ifPresent(IntConsumer consumer): This method if a value is present, performs the given action with the value.
================================================================

Sample: 47 OptionalLong
----------------------------------------------------------------
1. `OptionalLong empty()`: This method returns an empty OptionalLong.
2. `OptionalLong of(long value)`: This method returns an OptionalLong with the specified value.
3. `long orElse(long other)`: This method returns the value if present, otherwise returns the specified value `other`.
4. `long orElseGet(LongSupplier other)`: This method returns the value if present, otherwise invokes the `other` supplier and returns the result of that invocation.
5. `void ifPresent(LongConsumer consumer)`: This method invokes the specified consumer with the value if present.
================================================================

Sample: 48 PriorityQueue
----------------------------------------------------------------
1. boolean offer(E e): This method inserts the specified element into this priority queue if it is possible to do so immediately without violating capacity restrictions.
2. E peek(): This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
3. E poll(): This method retrieves and removes the head of this queue, or returns null if this queue is empty.
4. void clear(): This method removes all of the elements from this priority queue.
5. Comparator<? super E> comparator(): This method returns the comparator used to order the elements in this priority queue, or null if this priority queue is sorted according to the natural ordering of its elements.
================================================================

Sample: 49 Properties
----------------------------------------------------------------
1. `String getProperty(String key)`: Returns the value to which the specified key is mapped.

2. `void setProperty(String key, String value)`: Sets the property with the specified key and value.

3. `Enumeration<String> propertyNames()`: Returns an enumeration of all the keys in this Properties object.

4. `void store(OutputStream out, String comments)`: Writes this property list (key and elements) to the output stream.

5. `void load(Reader reader)`: Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format.
================================================================

Sample: 50 PropertyPermission
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the property for this permission.
2. `String getActions()`: This method returns the actions for this permission.
3. `void setActions(String actions)`: This method sets the actions for this permission.
4. `String[] getActionsArray()`: This method returns an array of action strings for this permission.
5. `boolean implies(Permission p)`: This method checks if the specified permission is implied by this permission.
================================================================

Sample: 51 PropertyResourceBundle
----------------------------------------------------------------
1. `String getString(String key)`: This method retrieves a string for the specified key from this property resource bundle.
2. `Enumeration<String> getKeys()`: This method returns an enumeration of all the keys in this property resource bundle.
3. `Set<String> keySet()`: This method returns a set of keys contained in this property resource bundle.
4. `List<String> getStringArray(String key)`: This method retrieves a list of strings for the specified key from this property resource bundle.
5. `Locale getLocale()`: This method returns the locale of this property resource bundle.
================================================================

Sample: 52 Random
----------------------------------------------------------------
1. int nextInt(): This method returns the next pseudorandom, uniformly distributed int value.
2. double nextDouble(): This method returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0.
3. boolean nextBoolean(): This method returns the next pseudorandom, uniformly distributed boolean value.
4. void setSeed(long seed): This method sets the seed of the random number generator using a single long seed.
5. void nextBytes(byte[] bytes): This method generates random bytes and places them into a user-supplied byte array.
================================================================

Sample: 53 ResourceBundle
----------------------------------------------------------------
1. `String getString(String key)`: This method returns the string associated with the specified key in this ResourceBundle.
2. `Locale getLocale()`: This method returns the locale of this ResourceBundle.
3. `Enumeration<String> getKeys()`: This method returns an enumeration of all keys in this ResourceBundle.
4. `Object getObject(String key)`: This method returns the object associated with the specified key in this ResourceBundle.
5. `Set<String> keySet()`: This method returns a set of all keys in this ResourceBundle.
================================================================

Sample: 54 ResourceBundle.Control
----------------------------------------------------------------
1. `List<String> getFormats(String baseName)`: This method returns a list of non-null, non-empty strings identifying the formats recognized by the given control.
2. `Locale getFallbackLocale(String baseName, Locale locale)`: This method returns the fallback locale for the given base name and locale.
3. `List<Locale> getCandidateLocales(String baseName, Locale locale)`: This method returns a list of candidate locales for the given base name and locale.
4. `List<String> getKeys(String baseName)`: This method returns a list of keys in the resource bundle with the given base name.
5. `long getTimeToLive(String baseName, Locale locale)`: This method returns the time-to-live value for the resource bundle cache for the given base name and locale.
================================================================

Sample: 55 Scanner
----------------------------------------------------------------
1. `String nextLine()`: This method advances this scanner past the current line and returns the input that was skipped.
2. `int nextInt()`: This method scans the next token of the input as an int.
3. `double nextDouble()`: This method scans the next token of the input as a double.
4. `boolean hasNext()`: This method returns true if this scanner has another token in its input.
5. `void close()`: This method closes this scanner.
================================================================

Sample: 56 ServiceLoader
----------------------------------------------------------------
1. `Iterator<E> iterator()`: This method returns an iterator over the elements of the loaded services.
2. `void reload()`: This method reloads the service providers.
3. `Stream<ServiceLoader.Provider> stream()`: This method returns a sequential Stream of service providers.
4. `Spliterator<ServiceLoader.Provider> spliterator()`: This method creates a Spliterator over the elements of the loaded services.
5. `void forEach(Consumer<? super ServiceLoader.Provider> action)`: This method performs the given action for each service provider.
================================================================

Sample: 57 SimpleTimeZone
----------------------------------------------------------------
1. `void setStartYear(int startYear)`: This method sets the start year of this time zone.
2. `void setStartRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)`: This method sets the start rule for daylight savings time.
3. `void setEndRule(int month, int dayOfWeekInMonth, int dayOfWeek, int time)`: This method sets the end rule for daylight savings time.
4. `boolean useDaylightTime()`: This method returns true if this time zone uses daylight savings time.
5. `int getRawOffset()`: This method returns the raw offset of this time zone from GMT.
================================================================

Sample: 58 Spliterators
----------------------------------------------------------------
1. `Spliterator<T> spliterator()`: Returns a Spliterator covering the elements of this list.
2. `static <T> Spliterator<T> emptySpliterator()`: Returns a Spliterator that will not return any elements.
3. `static <T> Spliterator<T> spliterator(Iterator<? extends T> iterator, long size, int characteristics)`: Returns a Spliterator over the specified Iterator, size, and characteristics.
4. `static <T> Spliterator<T> spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)`: Returns a Spliterator over the specified Iterator and characteristics, with an unknown number of elements.
5. `static <T> Spliterator<T> spliteratorUnknownSize(Iterator<? extends T> iterator, int characteristics)`: Returns a Spliterator over the specified Iterator and characteristics, with an unknown number of elements.
================================================================

Sample: 59 Spliterators.AbstractDoubleSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: Returns an estimate of the number of elements that would be encountered by a traversal or split.
2. `int characteristics()`: Returns the set of characteristics of this Spliterator, as a sum of bit values.
3. `boolean tryAdvance(DoubleConsumer action)`: If a remaining element exists, performs the given action on it, returning true.
4. `void forEachRemaining(DoubleConsumer action)`: Performs the given action for each remaining element, in the order elements occur when traversing.
5. `long getExactSizeIfKnown()`: If this Spliterator's size is known, returns the exact size, else returns -1.
================================================================

Sample: 60 Spliterators.AbstractIntSpliterator
----------------------------------------------------------------
1. `boolean tryAdvance(IntConsumer action)`: This method performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception.
2. `Spliterator.OfInt trySplit()`: This method creates a new Spliterator that will, upon return from this method, not have had any elements known to prior traversal attempts.
3. `long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a forEachRemaining.
4. `int characteristics()`: This method returns a set of characteristics of the Spliterator and its elements.
5. `Comparator<? super Integer> getComparator()`: This method returns the comparator for this spliterator if it has one, in the case of an ORDERED spliterator.
================================================================

Sample: 61 Spliterators.AbstractLongSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: Returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.
2. `int characteristics()`: Returns the characteristics of this Spliterator.
3. `long getExactSizeIfKnown()`: If this Spliterator's size can be statically determined, returns that value.
4. `Comparator<? super Long> getComparator()`: If this Spliterator has a defined sort order, returns the Comparator used to compare elements.
5. `long limit()`: Returns a Spliterator reporting an estimated size, or Long.MAX_VALUE if infinite, and setting the spliterator's additionalCharacteristics() to enable filtering for nulls.
================================================================

Sample: 62 Spliterators.AbstractSpliterator
----------------------------------------------------------------
1. `long estimateSize()`: This method returns an estimate of the number of elements that would be encountered by a forEachRemaining() traversal.
2. `int characteristics()`: This method returns a set of characteristics of this Spliterator and its elements.
3. `Spliterator<T> trySplit()`: This method creates a late-binding and fail-fast Spliterator over the elements in this list, if any.
4. `long getExactSizeIfKnown()`: This method returns the size of the backing data source, or Long.MAX_VALUE if unknown.
5. `boolean hasCharacteristics(int characteristics)`: This method returns true if the specified characteristics are present in this spliterator.
================================================================

Sample: 63 SplittableRandom
----------------------------------------------------------------
1. `int nextInt(int bound)`: Returns a pseudorandom `int` value uniformly distributed between 0 (inclusive) and the specified bound (exclusive).
2. `double nextDouble()`: Returns a pseudorandom `double` value between 0.0 and 1.0.
3. `long nextLong()`: Returns a pseudorandom `long` value.
4. `int nextInt()`: Returns a pseudorandom `int` value.
5. `boolean nextBoolean()`: Returns a pseudorandom `boolean` value.
================================================================

Sample: 64 Stack
----------------------------------------------------------------
1. `boolean empty()`: This method returns true if the stack is empty; otherwise, returns false.
2. `E peek()`: This method looks at the object at the top of this stack without removing it from the stack and returns it.
3. `E pop()`: This method removes the object at the top of this stack and returns that object.
4. `void push(E item)`: This method pushes an item onto the top of this stack.
5. `int search(Object o)`: This method searches for the specified object in the stack and returns its position relative to the top of the stack, or -1 if it is not found.
================================================================

Sample: 65 StringJoiner
----------------------------------------------------------------
1. `StringJoiner add(CharSequence delimiter)`: This method adds the specified delimiter to the StringJoiner.
2. `StringJoiner merge(StringJoiner other)`: This method merges the contents of the specified StringJoiner into this StringJoiner.
3. `String toString()`: This method returns the current sequence of added elements as a String.
4. `int length()`: This method returns the length of the current sequence of added elements.
5. `StringJoiner setEmptyValue(CharSequence emptyValue)`: This method sets the value to return if no elements have been added.
================================================================

Sample: 66 StringTokenizer
----------------------------------------------------------------
1. `boolean hasMoreTokens()`: This method returns true if there are more tokens available from this tokenizer's string.
2. `String nextToken()`: This method returns the next token from this string tokenizer.
3. `String nextToken(String delim)`: This method returns the next token from this string tokenizer using the specified delimiter.
4. `int countTokens()`: This method returns the number of tokens remaining in the string.
5. `StringTokenizer(String str)`: This is a constructor which initializes a string tokenizer for the specified string.
================================================================

Sample: 67 Timer
----------------------------------------------------------------
1. `void schedule(TimerTask task, Date time)`: This method schedules the specified task for execution at the specified time.
2. `void schedule(TimerTask task, long delay)`: This method schedules the specified task for execution after the specified delay.
3. `void schedule(TimerTask task, Date firstTime, long period)`: This method schedules the specified task for repeated fixed-delay execution beginning at the specified time.
4. `void schedule(TimerTask task, long delay, long period)`: This method schedules the specified task for repeated fixed-delay execution after the specified delay.
5. `void cancel()`: This method cancels the task currently scheduled for this timer.
================================================================

Sample: 68 TimerTask
----------------------------------------------------------------
1. `boolean cancel()`: This method cancels the TimerTask. 
2. `long scheduledExecutionTime()`: This method returns the scheduled execution time of the most recent actual execution time. 
3. `boolean scheduledExecutionTime(Date time)`: This method sets the time for the task to execute next. 
4. `void run()`: This method is the task's code to be executed. 
5. `long scheduledExecutionTime(Date when)`: This method returns the time at which the task is scheduled to run next.
================================================================

Sample: 69 TimeZone
----------------------------------------------------------------
1. `String getDisplayName()`: This method returns the display name of the time zone.
2. `String getID()`: This method returns the ID of the time zone.
3. `int getOffset(long date)`: This method returns the offset of this time zone from UTC at the specified date.
4. `int getRawOffset()`: This method returns the raw offset of this time zone from UTC.
5. `boolean useDaylightTime()`: This method returns true if this time zone uses daylight savings time.
================================================================

Sample: 70 TreeMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
   
2. `V remove(Object key)`: This method removes the mapping for the specified key from this map if present.

3. `NavigableMap<K, V> descendingMap()`: This method returns a reverse order view of the mappings contained in this map.

4. `SortedMap<K, V> subMap(K fromKey, K toKey)`: This method returns a view of the portion of this map whose keys range from `fromKey`, inclusive, to `toKey`, exclusive.

5. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.
================================================================

Sample: 71 TreeSet
----------------------------------------------------------------
1. `E ceiling(E e)`: This method returns the least element in this set greater than or equal to the given element, or null if there is no such element.
2. `E floor(E e)`: This method returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
3. `SortedSet<E> headSet(E toElement)`: This method returns a view of the portion of this set whose elements are less than the specified element.
4. `SortedSet<E> tailSet(E fromElement)`: This method returns a view of the portion of this set whose elements are greater than or equal to the specified element.
5. `E pollFirst()`: This method retrieves and removes the first (lowest) element, or returns null if this set is empty.
================================================================

Sample: 72 UUID
----------------------------------------------------------------
1. `static UUID randomUUID()`: This method generates a random UUID.
2. `static UUID nameUUIDFromBytes(byte[] name)`: This method creates a UUID from the specified byte array.
3. `long getMostSignificantBits()`: This method returns the most significant 64 bits of this UUID's 128 bit value.
4. `long getLeastSignificantBits()`: This method returns the least significant 64 bits of this UUID's 128 bit value.
5. `int compareTo(UUID val)`: This method compares this UUID with the specified UUID.
================================================================

Sample: 73 Vector
----------------------------------------------------------------
1. `void addElement(Object obj)`: This method appends the specified element to the end of this Vector.
2. `Object elementAt(int index)`: This method returns the component at the specified index.
3. `boolean removeElement(Object obj)`: This method removes the first occurrence of the specified element in this Vector.
4. `int size()`: This method returns the number of components in this Vector.
5. `void setSize(int newSize)`: This method sets the size of this Vector.
================================================================

Sample: 74 WeakHashMap
----------------------------------------------------------------
1. `void put(K key, V value)`: Inserts a mapping into the map.
2. `V get(Object key)`: Returns the value to which the specified key is mapped, or null if the map contains no mapping for the key.
3. `boolean containsKey(Object key)`: Returns true if this map contains a mapping for the specified key.
4. `V remove(Object key)`: Removes the mapping for a key from this map if it is present.
5. `int size()`: Returns the number of key-value mappings in the map.
================================================================

