Sample: CompletableFuture_1
----------------------------------------------------------------
stdout:
Result of CompletableFuture: 42

================================================================

Sample: CompletableFuture_2
----------------------------------------------------------------
stdout:
Hello from CompletableFuture.runAsync

================================================================

Sample: CompletableFuture_4
----------------------------------------------------------------
stdout:
Inside CompletableFuture
Completed!

================================================================

Sample: ConcurrentHashMap_1
----------------------------------------------------------------
stdout:
{1=One, 2=Two, 3=Three}

================================================================

Sample: ConcurrentHashMap_2
----------------------------------------------------------------
stdout:
1

================================================================

Sample: ConcurrentHashMap_3
----------------------------------------------------------------
stdout:
Does map contain key 'Two': true

================================================================

Sample: ConcurrentHashMap_4
----------------------------------------------------------------
stdout:
Map before removal: {key1=value1, key2=value2}
Map after removal: {key2=value2}

================================================================

Sample: ConcurrentHashMap_5
----------------------------------------------------------------
stdout:
Size of map: 3

================================================================

Sample: ConcurrentHashMap_KeySetView_2
----------------------------------------------------------------
stdout:
KeySetView after removal: [Two]
Was 'One' removed? true

================================================================

Sample: ConcurrentHashMap_KeySetView_3
----------------------------------------------------------------
stdout:
[]

================================================================

Sample: ConcurrentHashMap_KeySetView_4
----------------------------------------------------------------
stdout:
Key set view after retainAll operation: [A, B, C]
Result of the retainAll operation: false

================================================================

Sample: ConcurrentHashMap_KeySetView_5
----------------------------------------------------------------
stdout:
One
Two

================================================================

Sample: ConcurrentLinkedDeque_1
----------------------------------------------------------------
stdout:
[Second, First]

================================================================

Sample: ConcurrentLinkedDeque_2
----------------------------------------------------------------
stdout:
Removed element: World
Deque after removal: [Hello]

================================================================

Sample: ConcurrentLinkedDeque_3
----------------------------------------------------------------
stdout:
First element: First

================================================================

Sample: ConcurrentLinkedDeque_4
----------------------------------------------------------------
stdout:
[Hello, World]
Is 'Hello' removed? true
[World]

================================================================

Sample: ConcurrentLinkedDeque_5
----------------------------------------------------------------
stdout:
Is deque empty? true
Is deque empty? false

================================================================

Sample: ConcurrentLinkedQueue_1
----------------------------------------------------------------
stdout:
Queue: [Apple, Banana, Orange]

================================================================

Sample: ConcurrentLinkedQueue_2
----------------------------------------------------------------
stdout:
Removed element: Element 1
Queue elements: [Element 2, Element 3]

================================================================

Sample: ConcurrentLinkedQueue_3
----------------------------------------------------------------
stdout:
Element at the front of the queue: A

================================================================

Sample: ConcurrentLinkedQueue_4
----------------------------------------------------------------
stdout:
false
true

================================================================

Sample: ConcurrentLinkedQueue_5
----------------------------------------------------------------
stdout:
Size of the queue: 3

================================================================

Sample: ConcurrentSkipListMap_1
----------------------------------------------------------------
stdout:
{1=One, 2=Two}

================================================================

Sample: ConcurrentSkipListMap_2
----------------------------------------------------------------
stdout:
Two

================================================================

Sample: ConcurrentSkipListMap_3
----------------------------------------------------------------
stdout:
Removed value: One
Updated map: {2=Two}

================================================================

Sample: ConcurrentSkipListMap_4
----------------------------------------------------------------
stdout:
{2=Two, 3=Three, 4=Four}

================================================================

Sample: ConcurrentSkipListMap_5
----------------------------------------------------------------
stdout:
Navigable Key Set: [1, 2, 3]

================================================================

Sample: ConcurrentSkipListSet_1
----------------------------------------------------------------
stdout:
Element added: true

================================================================

Sample: ConcurrentSkipListSet_2
----------------------------------------------------------------
stdout:
Initial Set: [5]
Ceiling value of 3: 5

================================================================

Sample: ConcurrentSkipListSet_3
----------------------------------------------------------------
stdout:
Floor of 15: 10
Floor of 25: 20

================================================================

Sample: ConcurrentSkipListSet_4
----------------------------------------------------------------
stdout:
Initial set: [Apple, Banana, Cherry]
Removed first element: Apple
Set after removing first element: [Banana, Cherry]

================================================================

Sample: ConcurrentSkipListSet_5
----------------------------------------------------------------
stdout:
Initial Set: [1, 2, 3]
Removed Last Element: 3
Final Set: [1, 2]

================================================================

Sample: CopyOnWriteArrayList_2
----------------------------------------------------------------
stdout:
[World]

================================================================

Sample: CopyOnWriteArrayList_3
----------------------------------------------------------------
stdout:
Before removeIf: [Hello, World]
After removeIf: [Hello]

================================================================

Sample: CopyOnWriteArrayList_4
----------------------------------------------------------------
stdout:
Hello

================================================================

Sample: CopyOnWriteArrayList_5
----------------------------------------------------------------
stdout:
[Hello]
List after clearing: []

================================================================

Sample: CopyOnWriteArraySet_2
----------------------------------------------------------------
stdout:
Before removal: [1, 2, 3]
After removal: [1, 3]
Element 2 removed: true

================================================================

Sample: CopyOnWriteArraySet_3
----------------------------------------------------------------
stdout:
Elements removed: true
Remaining elements: [1]

================================================================

Sample: CopyOnWriteArraySet_4
----------------------------------------------------------------
stdout:
[Hello]
Set after clear: []

================================================================

Sample: CountDownLatch_1
----------------------------------------------------------------
stdout:
Waiting for task to complete...
Task completed
Task has been completed!

================================================================

Sample: CountDownLatch_2
----------------------------------------------------------------
stdout:
CountDownLatch await result: false

================================================================

Sample: CountDownLatch_3
----------------------------------------------------------------
stdout:
Countdown completed!

================================================================

Sample: CountedCompleter_1
----------------------------------------------------------------
================================================================

Sample: CountedCompleter_2
----------------------------------------------------------------
stdout:
Parent completer: null

================================================================

Sample: CountedCompleter_3
----------------------------------------------------------------
stdout:
Pending count: 0

================================================================

Sample: CountedCompleter_4
----------------------------------------------------------------
stdout:
Pending Count: 5

================================================================

Sample: CountedCompleter_5
----------------------------------------------------------------
================================================================

Sample: CyclicBarrier_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: CyclicBarrier_2
----------------------------------------------------------------
stdout:
Timeout occurred while waiting at the barrier

================================================================

Sample: CyclicBarrier_3
----------------------------------------------------------------
stdout:
Number of parties currently waiting at the barrier: 0

================================================================

Sample: CyclicBarrier_4
----------------------------------------------------------------
stdout:
Number of parties: 3

================================================================

Sample: CyclicBarrier_5
----------------------------------------------------------------
stdout:
Barrier is broken: false

================================================================

Sample: DelayQueue_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_1.java:13: error: DelayedElement is not abstract and does not override abstract method getDelay(TimeUnit) in Delayed
class DelayedElement implements Delayed {
^
./Data/java_util_concurrent/javaFiles/DelayQueue_1.java:20: error: method does not override or implement a method from a supertype
    @Override
    ^
2 errors


================================================================

Sample: DelayQueue_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "DelayedElement.getName()" because "<local2>" is null
	at DelayQueue_2.main(DelayQueue_2.java:14)

================================================================

Sample: DelayQueue_3
----------------------------------------------------------------
stdout:
Peeked element: Element 1

================================================================

Sample: DelayQueue_4
----------------------------------------------------------------
stdout:
DelayedObject{name='Task 2', delay=1714288194127}
DelayedObject{name='Task 1', delay=1714288196127}

================================================================

Sample: DelayQueue_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/DelayQueue_5.java:5: error: type argument String is not within bounds of type-variable E
        DelayQueue<String> queue = new DelayQueue<>();
                   ^
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
./Data/java_util_concurrent/javaFiles/DelayQueue_5.java:5: error: incompatible types: cannot infer type arguments for DelayQueue<>
        DelayQueue<String> queue = new DelayQueue<>();
                                                 ^
    reason: inference variable E has incompatible bounds
      equality constraints: String
      lower bounds: Delayed
  where E is a type-variable:
    E extends Delayed declared in class DelayQueue
2 errors


================================================================

Sample: Exchanger_1
----------------------------------------------------------------
stdout:
Thread 1 has data: Data from Thread 1
Thread 2 has data: Data from Thread 2
Thread 2 received: Data from Thread 1
Thread 1 received: Data from Thread 2

================================================================

Sample: Exchanger_5
----------------------------------------------------------------
stderr:
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.Exchanger.exchange(Exchanger.java:627)
	at Exchanger_5.main(Exchanger_5.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: ExecutorCompletionService_1
----------------------------------------------------------------
stdout:
Result: 1

================================================================

Sample: ExecutorCompletionService_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ExecutorCompletionService_2.java:10: error: incompatible types: bad return type in lambda expression
        completionService.submit(() -> {
                                 ^
    unexpected return value
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ExecutorCompletionService_3
----------------------------------------------------------------
stdout:
Task Result

================================================================

Sample: ExecutorCompletionService_4
----------------------------------------------------------------
stdout:
No task completed yet

================================================================

Sample: ExecutorCompletionService_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ExecutorCompletionService_5.java:8: error: unreported exception InterruptedException; must be caught or declared to be thrown
        Future<Integer> future = completionService.poll(5, TimeUnit.SECONDS);
                                                       ^
1 error


================================================================

Sample: Executors_1
----------------------------------------------------------------
stdout:
Executing task in thread: pool-1-thread-3
Executing task in thread: pool-1-thread-1
Executing task in thread: pool-1-thread-2
Executing task in thread: pool-1-thread-3
Executing task in thread: pool-1-thread-1

================================================================

Sample: Executors_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Executors_3
----------------------------------------------------------------
stdout:
Task executed by a single thread

================================================================

Sample: Executors_4
----------------------------------------------------------------
stdout:
Task executed

================================================================

Sample: Executors_5
----------------------------------------------------------------
stdout:
Task executed by newCachedThreadPool

================================================================

Sample: ForkJoinPool_2
----------------------------------------------------------------
================================================================

Sample: ForkJoinPool_4
----------------------------------------------------------------
stdout:
Parallelism: 20

================================================================

Sample: ForkJoinPool_5
----------------------------------------------------------------
stdout:
Steal Count: 0

================================================================

Sample: ForkJoinTask_2
----------------------------------------------------------------
stdout:
Raw result: null

================================================================

Sample: ForkJoinTask_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinTask_3.java:5: error: <anonymous ForkJoinTask_3$1> is not abstract and does not override abstract method setRawResult(String) in ForkJoinTask
        ForkJoinTask<String> task = new ForkJoinTask<String>() {
                                                               ^
./Data/java_util_concurrent/javaFiles/ForkJoinTask_3.java:11: error: setRawResult(V) has protected access in ForkJoinTask
        task.setRawResult("Result");
            ^
  where V is a type-variable:
    V extends Object declared in class ForkJoinTask
2 errors


================================================================

Sample: ForkJoinTask_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinTask_4.java:5: error: <anonymous ForkJoinTask_4$1> is not abstract and does not override abstract method exec() in ForkJoinTask
        ForkJoinTask<Boolean> task = new ForkJoinTask<Boolean>() {
                                                                 ^
./Data/java_util_concurrent/javaFiles/ForkJoinTask_4.java:7: error: exec() in <anonymous ForkJoinTask_4$1> cannot override exec() in ForkJoinTask
            public Boolean exec() {
                           ^
  return type Boolean is not compatible with boolean
./Data/java_util_concurrent/javaFiles/ForkJoinTask_4.java:6: error: method does not override or implement a method from a supertype
            @Override
            ^
3 errors


================================================================

Sample: ForkJoinTask_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ForkJoinTask_5.java:5: error: <anonymous ForkJoinTask_5$1> is not abstract and does not override abstract method setRawResult(Boolean) in ForkJoinTask
        ForkJoinTask<Boolean> task = new ForkJoinTask<Boolean>() {
                                                                 ^
1 error


================================================================

Sample: ForkJoinWorkerThread_2
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.util.concurrent.ForkJoinPool.nextWorkerThreadName()" because "pool" is null
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:74)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.<init>(ForkJoinWorkerThread.java:103)
	at ForkJoinWorkerThread_2$1.<init>(ForkJoinWorkerThread_2.java:5)
	at ForkJoinWorkerThread_2.main(ForkJoinWorkerThread_2.java:5)

================================================================

Sample: ForkJoinWorkerThread_3
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.ClassCastException: class java.lang.Thread cannot be cast to class java.util.concurrent.ForkJoinWorkerThread (java.lang.Thread and java.util.concurrent.ForkJoinWorkerThread are in module java.base of loader 'bootstrap')
	at ForkJoinWorkerThread_3.main(ForkJoinWorkerThread_3.java:6)

================================================================

Sample: FutureTask_1
----------------------------------------------------------------
stdout:
Result: Callable task completed

================================================================

Sample: FutureTask_3
----------------------------------------------------------------
stdout:
true

================================================================

Sample: FutureTask_4
----------------------------------------------------------------
stdout:
Task is done: true

================================================================

Sample: LinkedBlockingDeque_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/LinkedBlockingDeque_1.java:6: error: unreported exception InterruptedException; must be caught or declared to be thrown
        deque.putLast("World");
                     ^
1 error


================================================================

Sample: LinkedBlockingDeque_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/LinkedBlockingDeque_2.java:10: error: unreported exception InterruptedException; must be caught or declared to be thrown
        String element = deque.takeFirst();
                                        ^
1 error


================================================================

Sample: LinkedBlockingDeque_3
----------------------------------------------------------------
stdout:
Element added successfully: true

================================================================

Sample: LinkedBlockingDeque_4
----------------------------------------------------------------
stdout:
Remaining capacity: 7

================================================================

Sample: LinkedBlockingDeque_5
----------------------------------------------------------------
stdout:
Second
First

================================================================

Sample: LinkedBlockingQueue_1
----------------------------------------------------------------
stdout:
Offer operation successful: true

================================================================

Sample: LinkedBlockingQueue_2
----------------------------------------------------------------
stdout:
Removed element: First
Remaining elements in the queue: [Second, Third]

================================================================

Sample: LinkedBlockingQueue_3
----------------------------------------------------------------
stdout:
Element at the front of the queue: First

================================================================

Sample: LinkedBlockingQueue_4
----------------------------------------------------------------
stdout:
Elements in queue: [Java, Python, C++]

================================================================

Sample: LinkedBlockingQueue_5
----------------------------------------------------------------
stdout:
Queue before removal: [Element 1, Element 2]
Removed: true
Queue after removal: [Element 2]

================================================================

Sample: LinkedTransferQueue_1
----------------------------------------------------------------
stdout:
Transfer successful: false

================================================================

Sample: LinkedTransferQueue_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/LinkedTransferQueue_2.java:7: error: unreported exception InterruptedException; must be caught or declared to be thrown
        boolean result = transferQueue.tryTransfer("Hello", 5, TimeUnit.SECONDS);
                                                  ^
1 error


================================================================

Sample: LinkedTransferQueue_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: LinkedTransferQueue_4
----------------------------------------------------------------
stdout:
Queue has waiting consumer: false

================================================================

Sample: LinkedTransferQueue_5
----------------------------------------------------------------
stdout:
Waiting consumer count: 0

================================================================

Sample: PriorityBlockingQueue_1
----------------------------------------------------------------
stdout:
Offered: true
[10]

================================================================

Sample: PriorityBlockingQueue_2
----------------------------------------------------------------
stdout:
3
5
8

================================================================

Sample: PriorityBlockingQueue_3
----------------------------------------------------------------
stdout:
Head of the queue: 10

================================================================

Sample: PriorityBlockingQueue_4
----------------------------------------------------------------
stdout:
Size of PriorityBlockingQueue: 3

================================================================

Sample: PriorityBlockingQueue_5
----------------------------------------------------------------
stdout:
Queue before clear: [1, 3, 2]
Queue after clear: []

================================================================

Sample: RecursiveTask_1
----------------------------------------------------------------
stdout:
55

================================================================

Sample: ScheduledThreadPoolExecutor_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ScheduledThreadPoolExecutor_2
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ScheduledThreadPoolExecutor_3
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: Semaphore_1
----------------------------------------------------------------
stdout:
Semaphore acquired successfully.

================================================================

Sample: Semaphore_2
----------------------------------------------------------------
stdout:
Semaphore acquired
Semaphore released

================================================================

Sample: Semaphore_3
----------------------------------------------------------------
stdout:
Available permits: 5

================================================================

Sample: Semaphore_4
----------------------------------------------------------------
stdout:
Semaphore acquired successfully

================================================================

Sample: Semaphore_5
----------------------------------------------------------------
stdout:
Queue Length: 0

================================================================

Sample: SynchronousQueue_1
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: SynchronousQueue_2
----------------------------------------------------------------
stdout:
false
false

================================================================

Sample: SynchronousQueue_3
----------------------------------------------------------------
stdout:
Sent element: Hello
Received element: Hello

================================================================

Sample: SynchronousQueue_4
----------------------------------------------------------------
stdout:
Offer result: false

================================================================

Sample: SynchronousQueue_5
----------------------------------------------------------------
timeout: process took too long
================================================================

Sample: ThreadPoolExecutor_1
----------------------------------------------------------------
stderr:
Exception in thread "main" java.lang.NullPointerException
	at java.base/java.util.concurrent.ThreadPoolExecutor.<init>(ThreadPoolExecutor.java:1305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.<init>(ThreadPoolExecutor.java:1189)
	at ThreadPoolExecutor_1.main(ThreadPoolExecutor_1.java:5)

================================================================

Sample: ThreadPoolExecutor_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_2.java:6: error: cannot find symbol
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1));
                                                                                                 ^
  symbol:   class ArrayBlockingQueue
  location: class ThreadPoolExecutor_2
1 error


================================================================

Sample: ThreadPoolExecutor_3
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_3.java:5: error: no suitable constructor found for ThreadPoolExecutor(int,int,int,<null>)
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, null);
                                      ^
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ThreadPoolExecutor_4
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_4.java:5: error: no suitable constructor found for ThreadPoolExecutor(int,int,int,<null>)
        ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 1000, null);
                                      ^
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ThreadPoolExecutor_5
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_5.java:5: error: no suitable constructor found for ThreadPoolExecutor(int,int,int,<null>)
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, null);
                                      ^
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
    constructor ThreadPoolExecutor.ThreadPoolExecutor(int,int,long,TimeUnit,BlockingQueue<Runnable>,ThreadFactory,RejectedExecutionHandler) is not applicable
      (actual and formal argument lists differ in length)
1 error


================================================================

Sample: ThreadPoolExecutor_AbortPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_AbortPolicy_1.java:5: error: incompatible types: AbortPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null, new ThreadPoolExecutor.AbortPolicy());
                                                                             ^
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_AbortPolicy_1.java:7: error: cannot find symbol
        executor.rejectedExecution(() -> {
                ^
  symbol:   method rejectedExecution(()->{ Syst[...]"); },ThreadPoolExecutor)
  location: variable executor of type ThreadPoolExecutor
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: ThreadPoolExecutor_CallerRunsPolicy_1
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_CallerRunsPolicy_1.java:5: error: incompatible types: CallerRunsPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null, new ThreadPoolExecutor.CallerRunsPolicy());
                                                                             ^
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_CallerRunsPolicy_1.java:7: error: cannot find symbol
        executor.rejectedExecution(() -> {
                ^
  symbol:   method rejectedExecution(()->{ Syst[...]"); },ThreadPoolExecutor)
  location: variable executor of type ThreadPoolExecutor
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
2 errors


================================================================

Sample: ThreadPoolExecutor_DiscardOldestPolicy_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_DiscardOldestPolicy_2.java:5: error: incompatible types: DiscardOldestPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0L, null, new ThreadPoolExecutor.DiscardOldestPolicy());
                                                                             ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

Sample: ThreadPoolExecutor_DiscardPolicy_2
----------------------------------------------------------------
output:
./Data/java_util_concurrent/javaFiles/ThreadPoolExecutor_DiscardPolicy_2.java:7: error: incompatible types: DiscardPolicy cannot be converted to BlockingQueue<Runnable>
        ThreadPoolExecutor executor = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new ThreadPoolExecutor.DiscardPolicy());
                                                                                        ^
Note: Some messages have been simplified; recompile with -Xdiags:verbose to get full output
1 error


================================================================

