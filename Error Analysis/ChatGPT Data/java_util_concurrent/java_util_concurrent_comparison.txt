Sample: 0 AbstractExecutorService
----------------------------------------------------------------
1. `void execute(Runnable command)`: This method executes the given command at some time in the future.
2. `Future<T> submit(Callable<T> task)`: This method submits a value-returning task for execution and returns a Future representing the pending results of the task.
3. `Future<?> submit(Runnable task)`: This method submits a Runnable task for execution and returns a Future representing that task.
4. `void shutdown()`: This method initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.
5. `List<Runnable> shutdownNow()`: This method attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were waiting to execute.
================================================================

Sample: 1 ArrayBlockingQueue
----------------------------------------------------------------
1. E peek(): This method retrieves, but does not remove, the head of this queue.
2. boolean offer(E e): This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
3. E poll(): This method retrieves and removes the head of this queue, or returns null if this queue is empty.
4. int remainingCapacity(): This method returns the number of additional elements that this queue can ideally accept without blocking.
5. void put(E e): This method inserts the specified element into this queue, waiting if necessary for space to become available.
================================================================

Sample: 2 CompletableFuture
----------------------------------------------------------------
1. `static <U> CompletableFuture<U> supplyAsync(Supplier<U> supplier)`: This method returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() with the value obtained by calling the given Supplier.

2. `CompletableFuture<Void> runAsync(Runnable runnable)`: This method returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool.commonPool() after executing the given action.

3. `CompletableFuture<U> thenApply(Function<? super T,? extends U> fn)`: This method returns a new CompletableFuture that is completed with the result of the given function applied to the result of this CompletableFuture.

4. `CompletableFuture<Void> thenAccept(Consumer<? super T> action)`: This method returns a new CompletableFuture that is completed when this CompletableFuture is completed, after performing the given action with the result of this CompletableFuture.

5. `CompletableFuture<U> handle(BiFunction<? super T,Throwable,? extends U> fn)`: This method returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the result and the exception triggering this CompletableFuture's completion.
================================================================

Sample: 3 ConcurrentHashMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
   
2. `V get(Object key)`: This method returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.

3. `boolean containsKey(Object key)`: This method returns true if this map contains a mapping for the specified key.

4. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.

5. `int size()`: This method returns the number of key-value mappings in this map.
================================================================

Sample: 4 ConcurrentHashMap.KeySetView
----------------------------------------------------------------
1. `Spliterator<E> spliterator()`: This method returns a Spliterator over the elements in the KeySetView.
2. `boolean remove(Object o)`: This method removes the specified element from the KeySetView if it is present.
3. `boolean removeAll(Collection<?> c)`: This method removes all of the elements from the KeySetView that are contained in the specified collection.
4. `boolean retainAll(Collection<?> c)`: This method retains only the elements in the KeySetView that are contained in the specified collection.
5. `Object[] toArray()`: This method returns an array containing all of the elements in the KeySetView.
================================================================

Sample: 5 ConcurrentLinkedDeque
----------------------------------------------------------------
1. `boolean offerFirst(E e)`: This method inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions.
2. `E pollLast()`: This method retrieves and removes the last element of this deque, or returns null if this deque is empty.
3. `E peekFirst()`: This method retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.
4. `boolean removeLastOccurrence(Object o)`: This method removes the last occurrence of the specified element from this deque, if it is present.
5. `boolean isEmpty()`: This method returns true if this deque contains no elements.
================================================================

Sample: 6 ConcurrentLinkedQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `boolean isEmpty()`: This method returns true if this queue contains no elements.
5. `int size()`: This method returns the number of elements in this queue.
================================================================

Sample: 7 ConcurrentSkipListMap
----------------------------------------------------------------
1. `V put(K key, V value)`: This method associates the specified value with the specified key in this map.
2. `V get(Object key)`: This method returns the value to which the specified key is mapped in this map, or null if the map contains no mapping for the key.
3. `V remove(Object key)`: This method removes the mapping for a key from this map if it is present.
4. `ConcurrentNavigableMap<K,V> subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)`: This method returns a view of the portion of this map whose keys range from fromKey to toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. 
5. `NavigableSet<K> navigableKeySet()`: This method returns a NavigableSet view of the keys contained in this map.
================================================================

Sample: 8 ConcurrentSkipListSet
----------------------------------------------------------------
1. `boolean add(E e)`: Adds the specified element to this set if it is not already present.
2. `E ceiling(E e)`: Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
3. `E floor(E e)`: Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
4. `E pollFirst()`: Retrieves and removes the first (lowest) element, or returns null if this set is empty.
5. `E pollLast()`: Retrieves and removes the last (highest) element, or returns null if this set is empty.
================================================================

Sample: 9 CopyOnWriteArrayList
----------------------------------------------------------------
1. `void addIfAbsent(E e)`: This method adds the specified element to the list if it is not already present.
2. `E set(int index, E element)`: This method replaces the element at the specified position in the list with the specified element.
3. `boolean removeIf(Predicate<? super E> filter)`: This method removes all elements from the list that match the given predicate.
4. `Object[] toArray()`: This method returns an array containing all of the elements in the list in proper sequence.
5. `void clear()`: This method removes all elements from the list.
================================================================

Sample: 10 CopyOnWriteArraySet
----------------------------------------------------------------
1. `boolean addIfAbsent(E e)`: Checks if the specified element is not already present in the set and, if not, adds it.
2. `boolean remove(Object o)`: Removes the specified element from the set if it is present.
3. `boolean removeAll(Collection<?> c)`: Removes all of the elements from the set that are contained in the specified collection.
4. `void clear()`: Removes all of the elements from the set.
5. `CopyOnWriteArraySet<E> clone()`: Returns a shallow copy of this set.
================================================================

Sample: 11 CountDownLatch
----------------------------------------------------------------
1. `void await()`: This method causes the current thread to wait until the latch has counted down to zero.
2. `boolean await(long timeout, TimeUnit unit) throws InterruptedException`: This method causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted. It also allows specifying a timeout value.
3. `void countDown()`: This method decrements the count of the latch, releasing all waiting threads if the count reaches zero.
4. `int getCount()`: This method returns the current count of the latch.
5. `boolean await(long timeout) throws InterruptedException`: This method causes the current thread to wait until the latch has counted down to zero, unless the thread is interrupted. It allows specifying a timeout in milliseconds.
================================================================

Sample: 12 CountedCompleter
----------------------------------------------------------------
1. `void compute()`: This method performs the main computation performed by this task.
2. `CountedCompleter<?> getCompleter()`: This method returns the completer established in this task's constructor, or null if none.
3. `int getPendingCount()`: This method returns the current pending count.
4. `void setPendingCount(int count)`: This method sets the pending count to the given count.
5. `void tryComplete()`: This method decrements the pending count and if it is now zero, invokes onCompletion(CountedCompleter).
================================================================

Sample: 13 CyclicBarrier
----------------------------------------------------------------
1. `int await()`: Waits until all parties have reached this barrier. Returns the arrival index of the current thread.
2. `int await(long timeout, TimeUnit unit)`: Waits until all parties have reached this barrier or the specified waiting time elapses. Returns the arrival index of the current thread.
3. `int getNumberWaiting()`: Returns the number of parties currently waiting at the barrier.
4. `int getParties()`: Returns the number of parties currently waiting at the barrier.
5. `boolean isBroken()`: Queries if this barrier is in a broken state.
================================================================

Sample: 14 DelayQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this delay queue.
2. `E poll()`: This method retrieves and removes the head of this delay queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this delay queue, or returns null if this queue is empty.
4. `Iterator<E> iterator()`: This method returns an iterator over the elements in this delay queue.
5. `int size()`: This method returns the number of elements in this delay queue.
================================================================

Sample: 15 Exchanger
----------------------------------------------------------------
1. `V exchange(V x)`: This method waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then exchanges the given object for the object given from the other thread. It returns the object given from the other thread.
2. `int getQueuedParties()`: This method returns the number of parties waiting at the current exchange point.
3. `boolean remove(Object x)`: This method removes the first occurrence of the specified element from this exchange.
4. `boolean hasWaitingConsumer()`: This method indicates if there is a thread waiting to perform an exchange.
5. `V exchange(V x, long timeout, TimeUnit unit) throws InterruptedException, TimeoutException`: This method waits for another thread to arrive at this exchange point (unless the current thread is interrupted), and then exchanges the given object for the object given from the other thread. It returns the object given from the other thread within the specified timeout period.
================================================================

Sample: 16 ExecutorCompletionService
----------------------------------------------------------------
1. `Future<V> submit(Callable<V> task)`: This method submits a Callable task for execution and returns a Future representing the task.
2. `Future<V> submit(Runnable task, V result)`: This method submits a Runnable task for execution and returns a Future representing the task with the given result.
3. `Future<V> take()`: This method waits for the next completed task and returns a Future representing the completed task.
4. `Future<V> poll()`: This method retrieves and removes the Future representing the next completed task, or returns null if there is no completed task available. 
5. `Future<V> poll(long timeout, TimeUnit unit)`: This method waits for the next completed task for a specified amount of time and returns a Future representing the completed task, or returns null if the specified waiting time elapses.
================================================================

Sample: 17 Executors
----------------------------------------------------------------
1. `ExecutorService newFixedThreadPool(int nThreads)`: This method creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.
2. `ScheduledExecutorService newScheduledThreadPool(int corePoolSize)`: This method creates a thread pool that can schedule commands to run after a specified delay or to execute periodically.
3. `ExecutorService newSingleThreadExecutor()`: This method creates an Executor that uses a single worker thread operating off an unbounded queue.
4. `ScheduledExecutorService newSingleThreadScheduledExecutor()`: This method creates a single-threaded executor that can schedule commands to run after a given delay or to execute periodically.
5. `ExecutorService newCachedThreadPool()`: This method creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.
================================================================

Sample: 18 ForkJoinPool
----------------------------------------------------------------
1. `V invoke(ForkJoinTask<T> task)`: This method synchronously executes the given task and returns its result.
2. `void execute(ForkJoinTask<?> task)`: This method asynchronously executes the given task.
3. `ForkJoinPool getPool()`: This method returns the common pool instance.
4. `int getParallelism()`: This method returns the parallelism level of the common pool.
5. `long getStealCount()`: This method returns an estimate of the total number of tasks stolen from one thread's work queue by another.
================================================================

Sample: 19 ForkJoinTask
----------------------------------------------------------------
1. `void exec()`: This method executes the computation represented by this task.
2. `V getRawResult()`: This method returns the result that would be returned by get() (or null if this task is not completed or completed unsuccessfully).
3. `void setRawResult(V value)`: This method sets the result of this task to the given value.
4. `boolean exec()` : This method returns true if this task is alive, meaning it has not completed without exception.
5. `boolean isCompletedAbnormally()`: This method returns true if this task completed abnormally.
================================================================

Sample: 20 ForkJoinWorkerThread
----------------------------------------------------------------
1. `ForkJoinWorkerThread getWorkerThread()`: This method returns the ForkJoinWorkerThread associated with the current thread.
2. `int getPoolIndex()`: This method returns the index number of the pool hosting this worker thread.
3. `ForkJoinPool getPool()`: This method returns the ForkJoinPool this worker thread works in.
4. `long getId()`: This method returns the unique identifier for this worker thread.
5. `int getQueuedTaskCount()`: This method returns an estimate of the number of tasks currently held by the worker thread's deque.
================================================================

Sample: 21 FutureTask
----------------------------------------------------------------
1. `void run()`: This method executes the task and blocks until it is done.
2. `void cancel(boolean mayInterruptIfRunning)`: This method attempts to cancel the task.
3. `boolean isCancelled()`: This method returns true if this task was cancelled before it completed normally.
4. `boolean isDone()`: This method returns true if the task completed.
5. `T get() throws InterruptedException, ExecutionException`: This method waits if necessary for the computation to complete, and then retrieves its result.
================================================================

Sample: 22 LinkedBlockingDeque
----------------------------------------------------------------
1. `void putLast(E e)`: Inserts the specified element at the end of this deque.
2. `E takeFirst()`: Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.
3. `boolean offerFirst(E e)`: Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions.
4. `int remainingCapacity()`: Returns the number of additional elements that this deque can ideally contain without blocking.
5. `Iterator<E> descendingIterator()`: Returns an iterator over the elements in this deque in reverse sequential order.
================================================================

Sample: 23 LinkedBlockingQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so without violating capacity restrictions.
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty.
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
4. `void put(E e)`: This method inserts the specified element into this queue, waiting if necessary for space to become available.
5. `boolean remove(Object o)`: This method removes a single instance of the specified element from this queue, if it is present.
================================================================

Sample: 24 LinkedTransferQueue
----------------------------------------------------------------
1. `boolean tryTransfer(E e)`: Attempts to transfer the element to a waiting consumer immediately, if possible.
2. `boolean tryTransfer(E e, long timeout, TimeUnit unit)`: Attempts to transfer the element to a waiting consumer, waiting up to the specified time if necessary for space to become available.
3. `void transfer(E e)`: Transfers the element to a waiting consumer immediately, if possible.
4. `boolean hasWaitingConsumer()`: Returns true if there is at least one consumer waiting to receive an element via transfer or take.
5. `int getWaitingConsumerCount()`: Returns an estimate of the number of consumers waiting to receive elements via transfer or take.
================================================================

Sample: 25 Phaser
----------------------------------------------------------------
1. int register(): This method registers a new unarrived party for this phaser.
2. int arrive(): This method arrives and deregisters one party at this phaser, returning a phase number.
3. int bulkRegister(int parties): This method registers the given number of additional parties for this phaser.
4. int getPhase(): This method returns the current phase number.
5. int awaitAdvance(int phase): This method causes the current thread to wait until the given phase of this phaser has been reached.
================================================================

Sample: 26 PriorityBlockingQueue
----------------------------------------------------------------
1. `boolean offer(E e)`: This method inserts the specified element into this priority queue if it is possible to do so immediately without violating capacity restrictions
2. `E poll()`: This method retrieves and removes the head of this queue, or returns null if this queue is empty
3. `E peek()`: This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty
4. `int size()`: This method returns the number of elements in this queue
5. `void clear()`: This method removes all of the elements from this queue.
================================================================

Sample: 27 RecursiveAction
----------------------------------------------------------------
1. void compute(): This method performs the computation or divides the task into smaller subtasks.
2. void fork(): This method arranges to asynchronously execute this task in the pool the current task is running in.
3. void join(): This method waits for the computation to finish.
4. void invokeAll(ForkJoinTask<?>... tasks): This method arranges to asynchronously execute a set of tasks and returns when all are complete.
5. boolean isDone(): This method returns true if this task is done.
================================================================

Sample: 28 RecursiveTask
----------------------------------------------------------------
1. `V compute()`: This method computes the result of the recursive task.
2. `Collection<RecursiveTask<S>> getRawResult()`: This method returns the result of the computation when it is done.
3. `void setRawResult(Collection<RecursiveTask<S>> result)`: This method sets the result of the computation when it is done.
4. `protected abstract S compute()` : This method computes the result of the task asynchronously.
5. `protected void setRawResult(S value)`: This method sets the result of the computation when it is done.
================================================================

Sample: 29 ScheduledThreadPoolExecutor
----------------------------------------------------------------
1. `ScheduledFuture<?> schedule(Runnable command, long delay, TimeUnit unit)`: This method schedules the specified command to run after the given delay.
   
2. `ScheduledFuture<?> scheduleAtFixedRate(Runnable command, long initialDelay, long period, TimeUnit unit)`: This method schedules the specified command to run periodically with a fixed rate.

3. `ScheduledFuture<?> scheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)`: This method schedules the specified command to run periodically with a fixed delay between the end of the previous execution and the start of the next.

4. `ScheduledFuture<V> submit(Callable<V> task)`: This method submits a Callable task for execution and returns a ScheduledFuture representing the pending results of the task.

5. `ScheduledFuture<?> submit(Runnable task)`: This method submits a Runnable task for execution and returns a ScheduledFuture representing the pending results of the task.
================================================================

Sample: 30 Semaphore
----------------------------------------------------------------
1. `void acquire()`: This method acquires a permit from this semaphore, blocking until one is available.
2. `void release()`: This method releases a permit, returning it to the semaphore.
3. `int availablePermits()`: This method returns the number of permits available in this semaphore.
4. `boolean tryAcquire()`: This method acquires a permit from this semaphore only if one is available at the time of invocation.
5. `int getQueueLength()`: This method returns the number of threads waiting to acquire a permit from this semaphore.
================================================================

Sample: 31 SynchronousQueue
----------------------------------------------------------------
1. `E take()`: This method retrieves and removes the element from this queue, waiting if necessary until an element becomes available.
2. `boolean offer(E e)`: This method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.
3. `E poll()`: This method retrieves and removes the element from this queue, or returns null if this queue is empty.
4. `boolean offer(E e, long timeout, TimeUnit unit)`: This method inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.
5. `E peek()`: This method retrieves but does not remove the element from the head of this queue, or returns null if this queue is empty.
================================================================

Sample: 32 ThreadLocalRandom
----------------------------------------------------------------
1. int nextInt(int bound): Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
2. double nextDouble(): Returns a pseudorandom double value between 0.0 and 1.0.
3. boolean nextBoolean(): Returns a pseudorandom boolean value.
4. long nextLong(long origin, long bound): Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
5. double nextGaussian(): Returns a pseudorandom double value with a mean of 0.0 and a standard deviation of 1.0.
================================================================

Sample: 33 ThreadPoolExecutor
----------------------------------------------------------------
1. `void execute(Runnable command)`: This method executes the given command at some time in the future.
2. `List<Runnable> shutdownNow()`: This method attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.
3. `void setCorePoolSize(int corePoolSize)`: This method sets the core number of threads.
4. `long getTaskCount()`: This method returns the approximate total number of tasks that have ever been scheduled for execution.
5. `boolean isShutdown()`: This method returns true if this executor has been shut down.
================================================================

Sample: 34 ThreadPoolExecutor.AbortPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when a task cannot be executed by the ThreadPoolExecutor and is rejected.
2. `void shutdown()`: This method initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.
3. `List<Runnable> shutdownNow()`: This method attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were waiting to be executed.
4. `boolean isShutdown()`: This method returns true if this executor has been shut down.
5. `boolean isTerminated()`: This method returns true if all tasks have completed following shut down.
================================================================

Sample: 35 ThreadPoolExecutor.CallerRunsPolicy
----------------------------------------------------------------
1. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the ThreadPoolExecutor cannot execute a task.
2. `void afterExecute(Runnable r, Throwable t)`: This method is called after a task has completed execution.
3. `void beforeExecute(Thread t, Runnable r)`: This method is called before a task is executed.
4. `void terminated()`: This method is called when the ThreadPoolExecutor has terminated.
5. `void purge()`: This method removes cancelled tasks from the work queue of the ThreadPoolExecutor.
================================================================

Sample: 36 ThreadPoolExecutor.DiscardOldestPolicy
----------------------------------------------------------------
1. `ThreadPoolExecutor.DiscardOldestPolicy()`: Constructor for creating a new DiscardOldestPolicy instance.
2. `void rejectedExecution(Runnable r, ThreadPoolExecutor executor)`: This method is called when the ThreadPoolExecutor has no more threads or queue slots available, and needs to discard the oldest task to make room for the new task.
3. `boolean offer(Runnable r, ThreadPoolExecutor executor)`: This method attempts to add a task to the ThreadPoolExecutor if it can be executed immediately without exceeding maximum pool size and queue capacity.
4. `void onRejection(ThreadPoolExecutor executor)`: This method is called when a task is rejected by the ThreadPoolExecutor due to full queue and thread pool limits.
5. `void onExecutionError(Runnable r, Throwable t)`: This method is called when an error occurs during execution of a task in the ThreadPoolExecutor.
================================================================

Sample: 37 ThreadPoolExecutor.DiscardPolicy
----------------------------------------------------------------
1. `ThreadPoolExecutor.DiscardPolicy()`: This constructor creates a new DiscardPolicy.
2. `void rejectedExecution(Runnable r, ThreadPoolExecutor e)`: This method is called when a task is rejected by the executor.
3. `String toString()`: This method returns a string representation of this DiscardPolicy.
4. `boolean equals(Object obj)`: This method compares this DiscardPolicy to the specified object.
5. `int hashCode()`: This method returns the hash code value for this DiscardPolicy.
================================================================

