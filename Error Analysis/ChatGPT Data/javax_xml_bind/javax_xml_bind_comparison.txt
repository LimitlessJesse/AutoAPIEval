Sample: 0 Binder
----------------------------------------------------------------
1. `void marshal(Object jaxbObject, ContentHandler handler)`: This method marshals a JAXB object into a SAX ContentHandler.
2. `Object unmarshal(Node node)`: This method unmarshals the given Node into a JAXB object.
3. `void updateXML(Object jaxbObject)`: This method updates the XML document based on the changes to the JAXB object.
4. `void setEventHandler(ValidationEventHandler handler)`: This method sets the event handler for validation and error handling during XML processing.
5. `void setProperty(String name, Object value)`: This method sets a property on the underlying implementation.
================================================================

Sample: 1 DatatypeConverter
----------------------------------------------------------------
1. `static byte[] parseBase64Binary(String lexicalXSDBase64Binary)`: This method parses a lexical XSD base64 binary value and decodes it to a byte array.
2. `static String printBase64Binary(byte[] val)`: This method converts a byte array into a lexical XSD base64 binary value and returns it as a string.
3. `static Calendar parseDate(String lexicalXSDDate)`: This method parses a lexical XSD date value and returns a Calendar object representing the date.
4. `static String printDate(Calendar val)`: This method converts a Calendar object representing a date into a lexical XSD date value and returns it as a string.
5. `static BigDecimal parseDecimal(String lexicalXSDDecimal)`: This method parses a lexical XSD decimal value and returns it as a BigDecimal.
================================================================

Sample: 2 JAXB
----------------------------------------------------------------
1. `JAXBContext createContext(Class<?> type)`: This method creates a new instance of JAXBContext for the specified type.
2. `Unmarshaller createUnmarshaller()`: This method creates a new instance of Unmarshaller for unmarshalling XML data.
3. `Marshaller createMarshaller()`: This method creates a new instance of Marshaller for marshalling Java objects into XML data.
4. `void setProperty(String name, Object value)`: This method sets a specific property for the JAXB implementation.
5. `void setEventHandler(ValidationEventHandler handler)`: This method sets a custom event handler for validation events during unmarshalling.
================================================================

Sample: 3 JAXBContext
----------------------------------------------------------------
1. `JAXBContext newInstance(Class... classesToBeBound)`: This method creates a new instance of JAXBContext for the specified classes to be bound.
   
2. `Unmarshaller createUnmarshaller()`: This method creates an Unmarshaller object that can be used to convert XML data into a Java content tree.

3. `Marshaller createMarshaller()`: This method creates a Marshaller object that can be used to convert a Java content tree into XML data.

4. `Binder<Node> createBinder()`: This method creates a Binder object that can be used to bind Java objects to XML nodes.

5. `void generateSchema(SchemaOutputResolver outputResolver)`: This method generates an XML schema document for the classes bound in this context.
================================================================

Sample: 4 JAXBElement
----------------------------------------------------------------
1. `QName getName()`: Returns the qualified name of the element.
2. `Object getValue()`: Returns the value of the element.
3. `boolean isNil()`: Returns true if the element is nil, false otherwise.
4. `Class<?> getDeclaredType()`: Returns the declared type of the element.
5. `JAXBElement<T> wrap(T value)`: Wraps the specified value in a JAXBElement.
================================================================

Sample: 5 JAXBElement.GlobalScope
----------------------------------------------------------------
1. `void setScope(java.lang.String value)`: Set the value of the scope property.
2. `void setTime(long value)`: Set the value of the time property.
3. `javax.xml.namespace.QName getName()`: Get the value of the name property.
4. `void setName(javax.xml.namespace.QName value)`: Set the value of the name property.
5. `java.lang.Long getTime()`: Get the value of the time property.
================================================================

Sample: 6 JAXBIntrospector
----------------------------------------------------------------
1. `Class<?> getElementClass()`: This method returns the class of the element representation.
2. `JAXBContext getContext()`: This method returns the JAXBContext associated with the JAXBIntrospector.
3. `boolean isElement(Object object)`: This method checks if the specified object is a JAXB element.
4. `boolean isTypeSubstituted(Class<?> originalType, Class<?> substitutionType)`: This method checks if the specified substitutionType is substitutable for the originalType.
5. `Object getValue(Object element)`: This method returns the value of a JAXB element.
================================================================

Sample: 7 JAXBPermission
----------------------------------------------------------------
1. `void checkPermission()`: This method checks if the current context has the permission to perform JAXB operations.
2. `boolean implies(Permission permission)`: This method checks if the specified permission is implied by this JAXBPermission object.
3. `String getActions()`: This method returns the actions string associated with this JAXBPermission object.
4. `boolean equals(Object obj)`: This method checks if this JAXBPermission object is equal to another object.
5. `int hashCode()`: This method returns the hash code value for this JAXBPermission object.
================================================================

Sample: 8 Marshaller.Listener
----------------------------------------------------------------
1. `void beforeMarshal(Object source)`: This method is invoked before the Marshaller marshals the object.
2. `void afterMarshal(Object source)`: This method is invoked after the Marshaller has marshaled the object.
3. `void beforeMarshal(Marshaller marshaller)`: This method is invoked before the Marshaller marshals the object.
4. `void afterMarshal(Marshaller marshaller)`: This method is invoked after the Marshaller has marshaled the object.
5. `void marshalError(Exception exception)`: This method is invoked when an error occurs during marshalling.
================================================================

Sample: 9 SchemaOutputResolver
----------------------------------------------------------------
1. `javax.xml.transform.Result createOutput(String namespaceUri, String suggestedFileName)`: This method creates an object that accepts the result of the schema generation. 
2. `void setErrorReporter(javax.xml.bind.ErrorHandler errorHandler)`: This method sets the error handler to be used by the implementation during the schema generation.
3. `void addGeneratedFile(String filename)`: This method adds a generated file to the list of files generated during schema generation.
4. `void addDocument(String systemId, String namespaceUri)`: This method adds a document to the schema output.
5. `void addDocument(String systemId, InputStream content)`: This method adds a document with content provided as an input stream to the schema output.
================================================================

Sample: 10 Unmarshaller.Listener
----------------------------------------------------------------
1. `void beforeUnmarshal(Object target, Object parent)`: This method is called before unmarshalling into target class.
2. `void afterUnmarshal(Object target, Object parent)`: This method is called after unmarshalling into target class.
3. `void beforeUnmarshal(java.lang.Object target, java.lang.Object parent, java.lang.Class<?> clazz)`: This method is called before unmarshalling into target class with class information.
4. `void afterUnmarshal(java.lang.Object target, java.lang.Object parent, java.lang.Class<?> clazz)`: This method is called after unmarshalling into target class with class information.
5. `void beforeUnmarshal(XmlNode xmlNode, java.lang.Object target, java.lang.Object parent)`: This method is called before unmarshalling into target class from specified XML node.
================================================================

