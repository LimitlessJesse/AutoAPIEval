Sample: 0 BasicArrowButton
----------------------------------------------------------------
1. `int getDirection()`: Returns the direction that the arrow button is pointing.
   
2. `void setDirection(int direction)`: Sets the direction that the arrow button should point to.
   
3. `Dimension getPreferredSize()`: Returns the preferred size of the arrow button.
   
4. `void paintTriangle(Graphics g, int x, int y, int size, int direction, boolean isEnabled)`: Paints the triangle of the arrow button based on the specified parameters.
   
5. `void paint(Graphics g)`: Overrides the paint method to paint the arrow button.
================================================================

Sample: 1 BasicBorders
----------------------------------------------------------------
1. `Border getButtonBorder()`: This method returns the border for a basic button.
2. `Border getCheckBoxBorder()`: This method returns the border for a basic check box.
3. `Border getMenuBarBorder()`: This method returns the border for a basic menu bar.
4. `Border getSplitPaneBorder()`: This method returns the border for a basic split pane.
5. `Border getTextFieldBorder()`: This method returns the border for a basic text field.
================================================================

Sample: 2 BasicBorders.ButtonBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
4. `boolean isRollover(Component c)`: This method returns whether or not the specified component is currently in a "rollover" state.
5. `Color getFocusColor()`: This method returns the color used to paint the border when the component has focus.
================================================================

Sample: 3 BasicBorders.FieldBorder
----------------------------------------------------------------
1. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border.
4. `Border getBorder()`: This method returns the border.
5. `void setBorder(Border border)`: This method sets the border of the component.
================================================================

Sample: 4 BasicBorders.MarginBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size using the specified graphics context.
4. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border is opaque or not.
================================================================

Sample: 5 BasicBorders.MenuBarBorder
----------------------------------------------------------------
1. `Border getMenuBarBorder()`: This method returns the border for a menu bar.
2. `void setMenuBarBorder(Border border)`: This method sets the border for a menu bar.
3. `Insets getMenuBarInsets(JComponent c)`: This method returns the insets for a menu bar.
4. `boolean isMenuBarNonOpaque()` : This method returns true if the menu bar is non-opaque.
5. `void setMenuBarNonOpaque(boolean isNonOpaque)`: This method sets whether the menu bar is non-opaque.
================================================================

Sample: 6 BasicBorders.RadioButtonBorder
----------------------------------------------------------------
1. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
2. `boolean isBorderOpaque()`: This method returns true if the border is opaque.
3. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
4. `Border getBorder()`: This method returns the border object.
5. `void setBorder(Border border)`: This method sets the border for the specified component.
================================================================

Sample: 7 BasicBorders.RolloverButtonBorder
----------------------------------------------------------------
1. `Rectangle getBorderInsets(Component c)`: This method returns the insets of the border.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
3. `void paintButtonPressed(Graphics g, AbstractButton b)`: This method paints the pressed state of the button.
4. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
5. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the insets of the border using the specified insets object.
================================================================

Sample: 8 BasicBorders.SplitPaneBorder
----------------------------------------------------------------
1. `Insets borderInsets()`: This method returns the insets of the split pane border.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for a split pane.
3. `boolean isVertical()` : This method returns true if the split pane border is vertical, false otherwise.
4. `void setLastVisible(boolean b)`: This method sets whether the last visible border is painted or not.
5. `void setFocusColor(Color focusColor)`: This method sets the color to use for the focus.
================================================================

Sample: 9 BasicBorders.ToggleButtonBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border spacing dimensions for the specified component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position, dimensions, and graphics context.
3. `boolean isBorderOpaque()`: This method returns a boolean indicating whether the border is opaque.
4. `void paintButtonPressed(Graphics g, AbstractButton b)`: This method paints the button when it is pressed.
5. `void paintButtonPressed(Graphics g, AbstractButton b, boolean isPressed, boolean isRollover)`: This method paints the button with additional parameters for determining if it is pressed or hovered over.
================================================================

Sample: 10 BasicButtonListener
----------------------------------------------------------------
1. `void stateChanged(javax.swing.event.ChangeEvent e)`: This method is called when the state of the button changes.
2. `void mouseClicked(java.awt.event.MouseEvent e)`: This method is called when the button is clicked with the mouse.
3. `void mouseEntered(java.awt.event.MouseEvent e)`: This method is called when the mouse enters the button's area.
4. `void mouseExited(java.awt.event.MouseEvent e)`: This method is called when the mouse exits the button's area.
5. `void mousePressed(java.awt.event.MouseEvent e)`: This method is called when the mouse button is pressed on the button.
================================================================

Sample: 11 BasicButtonUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the Button UI for a specific JComponent.
2. `void uninstallUI(JComponent c)`: This method uninstalls the Button UI for a specific JComponent.
3. `void paint(Graphics g, JComponent c)`: This method paints the button UI for a specific JComponent using the provided Graphics object.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the button UI for a specific JComponent.
5. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the button UI for a specific JComponent.
================================================================

Sample: 12 BasicCheckBoxMenuItemUI
----------------------------------------------------------------
1. `void installDefaults()`
2. `void paintBackground(Graphics g, JComponent c, Color bgColor)`
3. `void paintMenuItem(Graphics g, JComponent c, Icon checkIcon, Icon arrowIcon, Color background, Color foreground, int defaultTextIconGap)`
4. `void paintText(Graphics g, JComponent c, Rectangle textRect, String text)`
5. `void paintIcon(Graphics g, JComponent c, Rectangle iconRect)`
================================================================

Sample: 13 BasicCheckBoxUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the checkbox.
2. `Rectangle getAccessibleIconRect(JComponent c)`: This method returns the bounding rectangle for the checkbox's icon for use in accessibility. 
3. `Icon getDefaultIcon(): Icon`: This method returns the default icon for the checkbox.
4. `Icon getSelectedIcon(): Icon`: This method returns the selected icon for the checkbox.
5. `void paintIcon(JComponent c, Graphics g, int x, int y)`: This method paints the checkbox's icon at the specified position.
================================================================

Sample: 14 BasicColorChooserUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the color chooser UI delegate for a specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the color chooser UI delegate for a specified component.
3. `void installDefaults()`: This method installs the default colors, fonts, and other settings for the color chooser UI.
4. `void uninstallDefaults()`: This method uninstalls the default settings for the color chooser UI.
5. `void installListeners()` : This method installs the necessary listeners for the color chooser UI.
================================================================

Sample: 15 BasicComboBoxEditor
----------------------------------------------------------------
1. `void setItem(Object anObject)`: This method sets the item that should be painted from the list.
2. `Component getComponent()`: This method returns the editor's painting panel.
3. `void setEditable(boolean aFlag)`: This method sets whether the JComboBox should be editable or not.
4. `void selectAll()`: This method selects the text in the editor.
5. `void addActionListener(ActionListener l)`: This method adds an ActionListener to the editor.
================================================================

Sample: 16 BasicComboBoxEditor.UIResource
----------------------------------------------------------------
1. `void setItem(Object anObject)`: Sets the item that should be edited. 
2. `Object getItem()`: Returns the item the editor is editing.
3. `void selectAll()`: Selects all the text in the editor.
4. `void focusGained(FocusEvent e)`: Invoked when a component gains the keyboard focus.
5. `void focusLost(FocusEvent e)`: Invoked when a component loses the keyboard focus.
================================================================

Sample: 17 BasicComboBoxRenderer
----------------------------------------------------------------
1. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a component that has been configured to display the specified value.
2. `Dimension getPreferredSize()`: This method returns the preferred size of the renderer.
3. `void setBorder(Border b)`: This method sets the border of the renderer.
4. `void setOpaque(boolean isOpaque)`: This method sets whether or not the renderer is opaque.
5. `void setValue(Object value)`: This method sets the value of the renderer.
================================================================

Sample: 18 BasicComboBoxRenderer.UIResource
----------------------------------------------------------------
1. `String getListCellText()`: This method returns the text to display for a cell in a list.
2. `Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)`: This method returns a component that implements the user interface for a cell in a list.
3. `void paint(Graphics g)`: This method paints the specified component according to the Look and Feel (L&F) style.
4. `void setBorder(Border b)`: This method sets the border of the component.
5. `void validate()` : This method validates this component.
================================================================

Sample: 19 BasicComboBoxUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paintCurrentValue(Graphics g, Rectangle bounds, boolean hasFocus)`: This method paints the currently selected item.
4. `void paintCurrentValueBackground(Graphics g, Rectangle bounds, boolean hasFocus)`: This method paints the background of the currently selected item.
5. `void paintCurrentValueBorder(Graphics g, Rectangle bounds, boolean hasFocus)`: This method paints the border of the currently selected item.
================================================================

Sample: 20 BasicComboPopup
----------------------------------------------------------------
1. `void setVisible(boolean isVisible)`: This method sets the visibility of the combo popup.
2. `Component getComboBox()`: This method returns the combo box component associated with the popup.
3. `int getPopupHeightForRowCount(int maxRowCount)`: This method returns the preferred height for displaying a certain number of rows.
4. `void show()`: This method shows the popup.
5. `void hide()`: This method hides the popup.
================================================================

Sample: 21 BasicDesktopIconUI
----------------------------------------------------------------
1. `Dimension getPreferredSize()`: This method returns the preferred size of the desktop icon.
2. `void setUI(DesktopIconUI ui)`: This method sets the UI delegate for this desktop icon.
3. `void setBounds(int x, int y, int width, int height)`: This method sets the bounds of the desktop icon to the specified position and size.
4. `Icon getFrameIcon(JInternalFrame f)`: This method returns the icon for the specified internal frame.
5. `void setAbsoluteSize(int width, int height)`: This method sets the absolute size of the desktop icon.
================================================================

Sample: 22 BasicDesktopPaneUI
----------------------------------------------------------------
1. `void setKeyBinding(KeyStroke ks, String actionName)`: Sets a KeyStroke to ActionName mapping in the look and feel.
2. `ActionMap getActionMap()`: Returns the ActionMap that handles key bindings.
3. `Boolean isKeyBindingRegistered(KeyStroke ks)`: Checks if a KeyStroke is registered for an action.
4. `void uninstallUI(JComponent c)`: Cleans up resources used by this UI.
5. `Insets getMinimumSystemSize(JComponent c)`: Returns the minimum size of a JComponent.
================================================================

Sample: 23 BasicDirectoryModel
----------------------------------------------------------------
1. `int getSize()`: This method returns the number of items in the directory model.
2. `File getDirectory(int index)`: This method returns the directory at the specified index.
3. `void setDirectory(javax.swing.JList list, java.io.File dir)`: This method sets the directory for the specified JList.
4. `void validateFileCache()`: This method validates the file cache.
5. `java.io.File[] getFiles()`: This method returns an array of files in the directory model.
================================================================

Sample: 24 BasicEditorPaneUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the specified component.
4. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size of the specified component.
5. `Dimension getMaximumSize(JComponent c)`: This method returns the maximum size of the specified component.
================================================================

Sample: 25 BasicFileChooserUI
----------------------------------------------------------------
1. `JComponent getAccessory()`: Returns the accessory component.
2. `void ensureFileIsVisible(JFileChooser fc, File f)`: Ensures that the file is visible.
3. `File viewSelection(File f)` : Returns the currently selected file for viewing.
4. `void clearIconCache()` : Clears the cached icons.
5. `PropertyChangeListener createPropertyChangeListener(JFileChooser fc)`: Creates a property change listener.
================================================================

Sample: 26 BasicFormattedTextFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for the passed component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the passed component.
3. `void paint(Graphics g, JComponent c)`: This method paints the UI.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the UI component.
5. `Dimension getMinimumSize(JComponent c)`: This method returns the minimum size for the UI component.
================================================================

Sample: 27 BasicGraphicsUtils
----------------------------------------------------------------
1. `void drawText(Graphics g, String text, int textX, int textY)`: This method draws the specified text at the specified location using the provided graphics context.
2. `int getPreferredButtonWidth(AbstractButton b, int h)`: This method returns the preferred width of the button based on the specified height.
3. `void drawDashedRect(Graphics g, int x, int y, int width, int height)`: This method draws a dashed rectangle with the specified dimensions.
4. `void drawEtchedRect(Graphics g, int x, int y, int width, int height)`: This method draws an etched rectangle with the specified dimensions.
5. `void drawStringUnderlineCharAt(JComponent c, Graphics g, String text, int underlinedIndex, int x, int y)`: This method draws the specified string with an underline at the specified index position.
================================================================

Sample: 28 BasicHTML
----------------------------------------------------------------
1. `String createHTMLView(JComponent c, String html)` - Returns a string containing HTML representation of the given JComponent with the specified HTML content.
2. `Dimension getPreferredSize(JComponent c)` - Returns the preferred size of the HTML-rendered content for the given JComponent.
3. `void paint(Graphics g, JComponent c, int x, int y, int w, int h)` - Paints the HTML content onto the specified graphics context within the bounds of the given JComponent.
4. `void install(JEditorPane c)` - Installs the necessary components and properties for rendering HTML content in a JEditorPane.
5. `void uninstall(JEditorPane c)` - Removes the installed components and properties for rendering HTML content in a JEditorPane.
================================================================

Sample: 29 BasicIconFactory
----------------------------------------------------------------
1. `Icon getMenuItemCheckIcon()`: This method returns an Icon for the menu item check icon.
2. `Icon getOptionPaneIcon(int messageType)`: This method returns an Icon for the specified message type in an option pane.
3. `Icon getCheckBoxIcon()`: This method returns an Icon for a check box.
4. `Icon getRadioButtonIcon()`: This method returns an Icon for a radio button.
5. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an Icon for the tree control icon based on whether it is collapsed or expanded.
================================================================

Sample: 30 BasicInternalFrameTitlePane
----------------------------------------------------------------
1. `void setMaximizeIcon(Icon icon)`: Sets the icon used to maximize the internal frame.
2. `void setCloseIcon(Icon icon)`: Sets the icon used to close the internal frame.
3. `void setIcon(Icon icon)`: Sets the icon displayed in the title pane for the internal frame.
4. `void setLayout(LayoutManager layout)`: Sets the layout manager for the title pane.
5. `JLabel createTitleLabel(JInternalFrame frame)`: Creates a title label for the specified internal frame.
================================================================

Sample: 31 BasicInternalFrameUI
----------------------------------------------------------------
1. `JComponent createNorthPane()`: This method returns a JComponent representing the north pane of the internal frame.
  
2. `JComponent createSouthPane()`: This method returns a JComponent representing the south pane of the internal frame.

3. `JComponent createEastPane()`: This method returns a JComponent representing the east pane of the internal frame.

4. `JComponent createWestPane()`: This method returns a JComponent representing the west pane of the internal frame.

5. `void setNorthPane(JComponent component)`: This method sets the JComponent representing the north pane of the internal frame.
================================================================

Sample: 32 BasicLabelUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the label.
2. `void installUI(JComponent c)`: This method installs the UI for a component.
3. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a component.
4. `void paint(Graphics g, JComponent c)`: This method paints the label.
5. `void update(Graphics g, JComponent c)`: This method updates the label.
================================================================

Sample: 33 BasicListUI
----------------------------------------------------------------
1. `int locationToIndex(Point location)`: This method returns the index of the cell at the specified coordinates.
2. `Point indexToLocation(int index)`: This method returns the origin of the rectangle for the cell at the specified index.
3. `void updateLayoutState()`: This method recalculates the layout's size requirements.
4. `Rectangle getCellBounds(int index1, int index2)`: This method returns the bounding rectangle, in the local coordinate system, for the range of cells specified.
5. `int[] getSelectedIndices()`: This method returns an array of the indices of the selected cells.
================================================================

Sample: 34 BasicLookAndFeel
----------------------------------------------------------------
1. `void uninitialize()`: This method undoes any changes that have been made to the look and feel.
2. `boolean isSupportedLookAndFeel()`: This method checks if the look and feel is supported on this platform.
3. `String getDescription()`: This method returns a short description of this look and feel class.
4. `UIDefaults getDefaults()`: This method returns the default values for the keys of this look and feel.
5. `String getID()`: This method returns a string that identifies this look and feel.
================================================================

Sample: 35 BasicMenuBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: Installs the UI for a specified component.
2. `void uninstallUI(JComponent c)`: Uninstalls the UI for a specified component.
3. `MenuElement getPath()`: Returns the path from the menu bar to a specified menu item.
4. `ChangeListener createChangeListener()` : Creates a ChangeListener for listening to menu events.
5. `Dimension preferredLayoutSize(Container c)`: Returns the preferred size for the layout of a container.
================================================================

Sample: 36 BasicMenuItemUI
----------------------------------------------------------------
1. `void selectionChanged(boolean dir)`: This method changes the selection state of the menu item based on the boolean parameter provided.
2. `void menuSelectionChanged(boolean isInvisible)`: This method changes the menu selection based on the boolean parameter provided.
3. `void menuDeselected(MenuElement menuElement)`: This method deselects the specified menu element.
4. `MenuElement[] getPath()` : This method returns an array of MenuElement objects representing the path to the menu item.
================================================================

Sample: 37 BasicMenuUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: Returns the preferred size for the menu component.

2. `void installDefaults()`: Installs the UI defaults.

3. `void installListeners()`: Installs the necessary listeners for the menu component.

4. `void uninstallDefaults()`: Uninstalls the UI defaults.

5. `void uninstallListeners()`: Uninstalls the listeners installed for the menu component.
================================================================

Sample: 38 BasicOptionPaneUI
----------------------------------------------------------------
1. `void initialize`(): This method initializes the option pane with the specified parameters.
2. `int getMaxCharactersPerLineCount(JComponent parent)`: This method returns the maximum number of characters per line for the specified parent component.
3. `Component getInputComponent()`: This method returns the input component for the option pane.
4. `MainView getRootFrame()`: This method returns the main view frame for the option pane.
5. `void selectInitialValue(JOptionPane optionPane)`: This method selects the initial value for the specified option pane.
================================================================

Sample: 39 BasicOptionPaneUI.ButtonAreaLayout
----------------------------------------------------------------
1. `int preferredLayoutSize(Container parent, int[] xOffsets, int[] yOffsets)`: This method calculates the preferred size dimensions for the specified container.
  
2. `void layoutContainer(Container parent)`: This method lays out the container using the layout manager.
  
3. `Dimension minimumLayoutSize(Container parent)`: This method calculates the minimum size dimensions for the specified container.
  
4. `Dimension maximumLayoutSize(Container target)`: This method calculates the maximum size dimensions for the specified container.
  
5. `float getLayoutAlignmentX(Container target)`: This method returns the alignment along the x-axis.
================================================================

Sample: 40 BasicPanelUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
2. `void paint(Graphics g, JComponent c)`: This method paints the specified component using the specified graphics context.
3. `void installUI(JComponent c)`: This method installs the UI for the specified component.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
5. `Rectangle getVisibleRect(JComponent c)`: This method returns the visible rectangle for the specified component.
================================================================

Sample: 41 BasicPasswordFieldUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: Installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: Uninstalls the UI delegate for the specified component.
3. `void paint(Graphics g, JComponent c)`: Paints the specified component using the specified graphics context.
4. `Dimension getPreferredSize(JComponent c)`: Returns the preferred size of the specified component.
5. `Dimension getMinimumSize(JComponent c)`: Returns the minimum size of the specified component.
================================================================

Sample: 42 BasicPopupMenuSeparatorUI
----------------------------------------------------------------
1. `Dimension getPreferredSize()`: This method returns a Dimension object that represents the preferred size of the component.
2. `void installUI(JComponent c)`: This method installs the UI for a specified component.
3. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
4. `void update(Graphics g, JComponent c)`: This method updates the specified component.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified component.
================================================================

Sample: 43 BasicPopupMenuUI
----------------------------------------------------------------
1. `void installKeyboardActions()`: This method installs the keyboard actions for the popup menu.
2. `void installListeners()`: This method installs the necessary listeners for the popup menu.
3. `void installDefaults()`: This method installs the default properties for the popup menu.
4. `void installComponents()` : This method installs the components that make up the popup menu.
5. `void uninstallDefaults()`: This method uninstalls the default properties for the popup menu.
================================================================

Sample: 44 BasicProgressBarUI
----------------------------------------------------------------
1. `int getAnimationIndex()`: This method returns the current frame index in the progress bar's animation sequence.
2. `Rectangle getBox(Parameter)`: This method returns the bounding box for a given parameter in the progress bar's geometry.
3. `ChangeListener createChangeListener()` : This method creates a ChangeListener for the progress bar.
4. `void paintDeterminate(Graphics g, JComponent c)`: This method paints a determinate progress bar using the specified Graphics context and JComponent.
5. `void setIndeterminate(boolean newValue)`: This method sets whether the progress bar is indeterminate or not.
================================================================

Sample: 45 BasicRadioButtonMenuItemUI
----------------------------------------------------------------
1. `void paintMenuItem(Graphics g, JComponent c, Icon checkIcon, Icon arrowIcon, Color background, Color foreground, int defaultTextIconGap)`: This method paints the specified radio button menu item.
  
2. `Dimension getMinimumSize(JComponent c)`: This method calculates the minimum size for the specified radio button menu item.

3. `Dimension getPreferredSize(JComponent c)`: This method calculates the preferred size for the specified radio button menu item.

4. `Dimension getMaximumSize(JComponent c)`: This method calculates the maximum size for the specified radio button menu item.

5. `void installDefaults(AbstractButton b)`: This method installs the default colors, fonts, and other properties used by the specified radio button menu item.
================================================================

Sample: 46 BasicRadioButtonUI
----------------------------------------------------------------
1. `void installDefaults(AbstractButton b)`: This method installs the default colors, font, and other properties for the specified AbstractButton.
2. `void uninstallDefaults(AbstractButton b)`: This method uninstalls the default colors, font, and other properties for the specified AbstractButton.
3. `void installListeners(AbstractButton b)`: This method installs the listeners on the specified AbstractButton.
4. `void uninstallListeners(AbstractButton b)`: This method uninstalls the listeners on the specified AbstractButton.
5. `void uninstallKeyboardActions(AbstractButton b)`: This method uninstalls any keyboard actions for the specified AbstractButton.
================================================================

Sample: 47 BasicRootPaneUI
----------------------------------------------------------------
1. `void installKeyboardActions()`: This method installs the keyboard actions for the root pane.
2. `void uninstallKeyboardActions()`: This method uninstalls the keyboard actions for the root pane.
3. `void installListeners()`: This method installs the listeners for the root pane.
4. `void uninstallListeners()`: This method uninstalls the listeners for the root pane.
5. `void installDefaults(JRootPane root)` : This method installs the default properties for the specified root pane.
================================================================

Sample: 48 BasicScrollBarUI
----------------------------------------------------------------
1. `void layoutVScrollbar(JScrollBar sb)`: This method lays out the vertical scroll bar. 
2. `void layoutHScrollbar(JScrollBar sb)`: This method lays out the horizontal scroll bar.
3. `void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the scrollbar track.
4. `void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the scrollbar thumb.
5. `void paintDecreaseHighlight(Graphics g)`: This method paints the scrollbar decrease highlight.
================================================================

Sample: 49 BasicScrollPaneUI
----------------------------------------------------------------
1. `void syncScrollPaneWithViewport()`: This method synchronizes the scrollbars of the scroll pane with the size and position of the viewport.
2. `void installComponents(JScrollPane scrollpane)`: This method installs the necessary components for the specified scroll pane.
3. `void uninstallComponents(JScrollPane scrollpane)`: This method removes the components installed for the specified scroll pane.
4. `void installListeners(JScrollPane scrollpane)`: This method installs the necessary listeners for the specified scroll pane.
5. `void uninstallListeners(JScrollPane scrollpane)`: This method removes the listeners installed for the specified scroll pane.
================================================================

Sample: 50 BasicSeparatorUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs default properties into the specified component.
2. `void uninstallUI(JComponent c)`: This method removes the default properties from the specified component.
3. `Rectangle getPreferredSpan(int axis)`: This method returns the preferred size of the separator.
4. `void paint(Graphics g, JComponent c)`: This method paints the separator using the specified graphics context.
5. `void paintHorizontal(Graphics g, JComponent c)`: This method paints the horizontal separator using the specified graphics context.
================================================================

Sample: 51 BasicSliderUI
----------------------------------------------------------------
1. `boolean getPaintTrack()`: This method returns a boolean value indicating whether the track should be painted.
2. `boolean getInverted()`: This method returns a boolean value indicating whether the slider direction is inverted.
3. `Rectangle getTrackRect()`: This method returns the bounding rectangle for the track.
4. `void scrollByBlock(int direction)`: This method scrolls the slider by a block in the specified direction.
5. `void scrollByUnit(int direction)`: This method scrolls the slider by a unit in the specified direction.
================================================================

Sample: 52 BasicSpinnerUI
----------------------------------------------------------------
1. `int getPreviousValue()`: This method returns the previous value from the spinner's model.
2. `int getNextValue()`: This method returns the next value from the spinner's model.
3. `void paint(Graphics g, JComponent c)`: This method paints the specified component based on the specified graphics context.
4. `boolean contains(int x, int y)`: This method returns true if the specified x, y coordinates are contained within the bounds of the spinner.
5. `void installUI(JComponent c)`: This method installs the UI (User Interface) for the given component.
================================================================

Sample: 53 BasicSplitPaneDivider
----------------------------------------------------------------
1. `void setDividerSize(int newSize)`: Sets the size of the divider.
   
2. `void setBorder(Border border)`: Sets the border of the divider.

3. `boolean shouldAdjustLayout()`: Returns whether the layout should be adjusted.

4. `void setOrientation(int orientation)`: Sets the orientation of the divider.

5. `void setLastLocation(int lastLoc)`: Sets the last location of the divider.
================================================================

Sample: 54 BasicSplitPaneUI
----------------------------------------------------------------
1. `int getDividerLocation()`: This method returns the location of the divider.
2. `void setDividerLocation(int location)`: This method sets the location of the divider.
3. `BasicSplitPaneDivider createDefaultDivider()`: This method creates a default divider.
4. `BasicSplitPaneDivider createDefaultNonContinuousLayoutDivider()`: This method creates a default non continuous layout divider.
5. `void setContinuousLayout(boolean newContinuousLayout)`: This method sets whether the layout of the split pane is continuous.
================================================================

Sample: 55 BasicTabbedPaneUI
----------------------------------------------------------------
1. void navigateSelectedTab(int direction, int tabIndex)
2. int calculateMaxTabHeight(int tabPlacement)
3. Insets getTabAreaInsets(int tabPlacement)
4. Rectangle getTabBounds(JTabbedPane pane, int index)
5. void scrollTabLayout(int tabPlacement, int selectedIndex)
================================================================

Sample: 56 BasicTableHeaderUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI for a given component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a given component.
3. `BasicTableHeaderUI.createUI(JComponent c)`: This static method creates an instance of BasicTableHeaderUI for a given component.
4. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for a given component.
5. `void paint(Graphics g, JComponent c)`: This method paints the header component.
================================================================

Sample: 57 BasicTableUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the appropriate properties and event listeners on the specified component.
2. `void uninstallUI(JComponent c)`: This method removes the properties and event listeners that were installed on the specified component.
3. `void installDefaults()`: This method sets the default properties of the UI delegate for the table.
4. `void uninstallDefaults()`: This method removes the default properties set by the UI delegate for the table.
5. `void paint(Graphics g, JComponent c)`: This method paints the specified table component using the given Graphics object.
================================================================

Sample: 58 BasicTextAreaUI
----------------------------------------------------------------
1. `boolean isManagingFocus()`: This method returns a boolean indicating whether this JTextComponent is managing focus now.
2. `String getPropertyPrefix()`: This method returns the name prefix of the components used in the FileType.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified JTextComponent.
4. `void propertyChange(PropertyChangeEvent evt)`: This method is called when a bound property is changed.
5. `void installUI(JComponent c)`: This method installs the UI for a JTextComponent.
================================================================

Sample: 59 BasicTextFieldUI
----------------------------------------------------------------
1. `int getNextVisualPositionFrom(int pos, Position.Bias b, Shape a, int direction, Position.Bias[] biasRet)`: This method returns the next visual position for the cursor, in the specified direction.
   
2. `int viewToModel(JTextComponent t, Point p)`: This method converts the given Point in the view coordinate system to the nearest model location.

3. `View create(Element elem)`: This method creates a view for an element.

4. `void installUI(JComponent c)`: This method installs the UI for the specified component.

5. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
================================================================

Sample: 60 BasicTextPaneUI
----------------------------------------------------------------
1. `boolean isValidateRoot()`: Returns a boolean indicating if the root pane is valid.
2. `void validate()`: Validates the root and updates the UI.
3. `void update(Graphics g, JComponent c)`: Updates the UI for a specified component with the given graphics object.
4. `void installUI(JComponent c)`: Installs the UI delegate for the specified component.
5. `void uninstallUI(JComponent c)`: Uninstalls the UI delegate for the specified component.
================================================================

Sample: 61 BasicTextUI
----------------------------------------------------------------
1. `View create(Element elem)`: This method creates a view for an element.
2. `void damageRange(JTextComponent t, int p0, int p1)`: This method marks a range of text as needing a paint so the view will be reloaded.
3. `int getBaseline(JComponent c, int width, int height)`: This method returns the baseline.
4. `boolean getScrollableTracksViewportWidth()`: This method returns whether or not the view is tracking the width of the viewport.
5. `Rectangle modelToView(JTextComponent t, int pos)`: This method converts a model location to a view location.
================================================================

Sample: 62 BasicTextUI.BasicCaret
----------------------------------------------------------------
1. `Rectangle getVisibleEditorRect()`: This method returns the bounding box for the current caret position.
2. `int getDot()`: This method returns the current position of the caret.
3. `int getMark()`: This method returns the mark, or the other end of a selection in the text.
4. `void setDot(int dot)`: This method sets the position of the caret without changing the selection.
5. `void setMagicCaretPosition(Point p)`: This method sets the location of the magic caret position, which controls the scrolling of the text area.
================================================================

Sample: 63 BasicTextUI.BasicHighlighter
----------------------------------------------------------------
1. `void paint(Graphics g)`: This method paints highlights in the specified graphics context.
2. `Shape modelToView(int pos, Position.Bias bias)`: This method returns the bounding box of the highlight at the specified position with the given bias.
3. `void setDrawsLayeredHighlights(boolean newValue)`: This method sets whether or not the highlights are drawn on top of other graphics.
4. `void install(JTextComponent c)`: This method installs the highlighter for the specified text component.
5. `void deinstall(JTextComponent c)`: This method removes the highlighter from the specified text component.
================================================================

Sample: 64 BasicToggleButtonUI
----------------------------------------------------------------
1. `void installDefaults(AbstractButton b)`: This method installs the default colors, fonts, and border on the specified button.
2. `void uninstallDefaults(AbstractButton b)`: This method uninstalls the default colors, fonts, and border from the specified button.
3. `void paintButtonPressed(Graphics g, AbstractButton b)`: This method paints the button in the pressed state.
4. `void paintText(Graphics g, JComponent c, Rectangle textRect, String text)`: This method paints the text for the specified component within the given text rectangle.
5. `void paintFocus(Graphics g, AbstractButton b, Rectangle viewRect, Rectangle textRect, Rectangle iconRect)`: This method paints the focus for the specified button within the given rectangles.
================================================================

Sample: 65 BasicToolBarSeparatorUI
----------------------------------------------------------------
1. `Dimension minimum( JComponent c)`: This method returns the minimum size of the specified component.
2. `Dimension maximum( JComponent c)`: This method returns the maximum size of the specified component.
3. `Dimension preferred( JComponent c)`: This method returns the preferred size of the specified component.
4. `void paint( Graphics g, JComponent c)`: This method paints the specified component.
5. `void paintBorder( Graphics g, JComponent c)`: This method paints the border of the specified component.
================================================================

Sample: 66 BasicToolBarUI
----------------------------------------------------------------
1. `void setRolloverBorders(boolean rollover)`: This method sets whether rollover effects should be enabled or not.
2. `void setFloating(boolean b, Point p)`: This method sets whether the toolbar should be floating or not, with the specified location.
3. `void setOrientation(int o)`: This method sets the orientation of the toolbar, either HORIZONTAL or VERTICAL.
4. `void setBorderPainted(boolean b)`: This method sets whether the border of the toolbar should be painted or not.
5. `void setFloatable(boolean b)`: This method sets whether the toolbar should be floatable or not.
================================================================

Sample: 67 BasicToolTipUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the specified component.
2. `void paint(Graphics g, JComponent c)`: This method paints the tooltip.
3. `void installUI(JComponent c)`: This method installs the UI for the specified component.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI for the specified component.
5. `PropertyChangeListener createPropertyChangeListener(JComponent c)`: This method creates a property change listener for the specified component.
================================================================

Sample: 68 BasicTreeUI
----------------------------------------------------------------
1. int getExpandedDescendantCount(TreePath path)
2. void setLeftChildIndent(int newAmount)
3. void setRightChildIndent(int newAmount)
4. int getRightChildIndent()
5. TreePath getNextMatch(String prefix, int startingRow, Position.Bias bias)
================================================================

Sample: 69 BasicViewportUI
----------------------------------------------------------------
1. `ViewportUI createUI(JComponent c)`: This method creates a new instance of BasicViewportUI for a specified component.
2. `void installUI(JComponent c)`: This method installs the UI for a specified component.
3. `void uninstallUI(JComponent c)`: This method uninstalls the UI for a specified component.
4. `void installDefaults(JComponent c)`: This method installs default properties for a specified component.
5. `void uninstallDefaults(JComponent c)`: This method uninstalls default properties for a specified component.
================================================================

Sample: 70 DefaultMenuLayout
----------------------------------------------------------------
1. `void layoutContainer(Container parent)`: This method lays out the specified container.
2. `int getPreferredWidth(JComponent c)`: This method returns the preferred width of the specified JComponent.
3. `int getPreferredHeight(JComponent c)`: This method returns the preferred height of the specified JComponent.
4. `void invalidateLayout(Container target)`: This method invalidates the layout nodes defined by the specified container.
5. `Dimension getLayoutSize(Container target, int type)`: This method returns the layout size of the specified container.
================================================================

