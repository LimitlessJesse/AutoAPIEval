Sample: 0 BufferedInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns an estimate of the number of bytes that can be read from the input stream without blocking.
5. `void close()`: This method closes the input stream.
================================================================

Sample: 1 BufferedOutputStream
----------------------------------------------------------------
1. `void flush()`: This method flushes this output stream.
2. `void write(int b)`: This method writes the specified byte to this buffered output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to this buffered output stream.
4. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to this buffered output stream.
5. `void close()`: This method closes this buffered output stream.
================================================================

Sample: 2 BufferedReader
----------------------------------------------------------------
1. String readLine(): This method reads a line of text from the input stream.
2. void close(): This method closes the stream and releases any system resources associated with it.
3. int read(): This method reads a single character from the input stream.
4. void mark(int readAheadLimit): This method marks the current position in the stream.
5. void reset(): This method resets the stream to the previously marked position.
================================================================

Sample: 3 BufferedWriter
----------------------------------------------------------------
1. `void write(String str)`: This method writes a string to the buffered writer.
2. `void newLine()`: This method writes a line separator string.
3. `void flush()`: This method flushes the buffered writer.
4. `void close()`: This method closes the buffered writer.
5. `void append(CharSequence csq)`: This method appends a CharSequence to the buffered writer.
================================================================

Sample: 4 ByteArrayInputStream
----------------------------------------------------------------
1. `int read(byte[] b)`: This method reads up to b.length bytes of data from this input stream into an array of bytes.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from this input stream into an array of bytes, starting at the specified offset off.
3. `int available()`: This method returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking.
4. `long skip(long n)`: This method skips over and discards n bytes of data from this input stream.
5. `void reset()`: This method makes a mark at the current position in this input stream.
================================================================

Sample: 5 ByteArrayOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to this output stream.
2. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to this output stream.
3. `void writeTo(OutputStream out)`: This method writes the complete contents of this byte array output stream to the specified output stream argument.
4. `void reset()`: This method resets the count field of this byte array output stream to zero.
5. `byte[] toByteArray()`: This method creates a newly allocated byte array containing the current contents of this output stream.
================================================================

Sample: 6 CharArrayReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the input stream.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `void close()`: This method closes the stream and releases any system resources associated with it.
4. `boolean markSupported()`: This method tests if this stream supports the mark operation.
5. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
================================================================

Sample: 7 CharArrayWriter
----------------------------------------------------------------
1. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
2. `void write(int c)`: This method writes a single character.
3. `void append(char c)`: This method appends a char.
4. `void append(CharSequence csq, int start, int end)`: This method appends a subsequence of a CharSequence.
5. `void append(CharSequence csq)`: This method appends a CharSequence.
================================================================

Sample: 8 Console
----------------------------------------------------------------
1. `String readLine()`: This method reads a single line of text from the console.
2. `char[] readPassword()`: This method reads a password or passphrase from the console with echoing disabled.
3. `PrintWriter writer()`: This method retrieves a PrintWriter object for writing text output to the console.
4. `Reader reader()`: This method retrieves a Reader object for reading text input from the console.
5. `Console console()`: This method returns the unique Console object associated with the current Java virtual machine.
================================================================

Sample: 9 DataInputStream
----------------------------------------------------------------
1. int readInt(): This method reads an input integer value from the input stream.
2. boolean readBoolean(): This method reads a boolean value from the input stream.
3. double readDouble(): This method reads a double value from the input stream.
4. String readUTF(): This method reads a Unicode string from the input stream.
5. long readLong(): This method reads a long value from the input stream.
================================================================

Sample: 10 DataOutputStream
----------------------------------------------------------------
1. `void write(int b)`: Writes the specified byte to the output stream.
2. `void write(byte[] b)`: Writes b.length bytes from the specified byte array to the output stream.
3. `void writeBoolean(boolean v)`: Writes a boolean to the output stream as a 1-byte value.
4. `void writeDouble(double v)`: Writes a double to the output stream as an 8-byte value.
5. `void writeChar(int v)`: Writes a char to the output stream as a 2-byte value.
================================================================

Sample: 11 File
----------------------------------------------------------------
1. `boolean createNewFile()`: This method creates a new, empty file at the specified path.
2. `boolean delete()`: This method deletes the file or directory at the specified path.
3. `String[] list()`: This method returns an array of strings naming the files and directories in the directory specified by this File object.
4. `boolean mkdir()`: This method creates the directory specified by this File object.
5. `long length()`: This method returns the length of the file denoted by this File object.
================================================================

Sample: 12 FileDescriptor
----------------------------------------------------------------
1. `FileDescriptor getFileDescriptor()`: Returns the underlying file descriptor associated with this FileDescriptor object.
2. `void sync()`: Forces any buffered output bytes to be written out to the underlying output stream.
3. `boolean valid()`: Tests if this file descriptor object remains valid.
4. `boolean validInterruptibly() throws ClosedByInterruptException`: Tests if this file descriptor object remains valid but can be interrupted.
5. `int getInt$()`: Returns a hash code value for this file descriptor object.
================================================================

Sample: 13 FileInputStream
----------------------------------------------------------------
1. int read(): This method reads a byte of data from the input stream.
2. int available(): This method returns an estimate of the number of bytes that can be read from the input stream.
3. long skip(long n): This method skips over and discards n bytes of data from the input stream.
4. void close(): This method closes the input stream.
5. int read(byte[] b): This method reads up to b.length bytes of data from the input stream into an array of bytes.
================================================================

Sample: 14 FileOutputStream
----------------------------------------------------------------
1. `void write(int b)`: Writes the specified byte to this file output stream.
2. `void write(byte[] b)`: Writes b.length bytes from the specified byte array to this file output stream.
3. `void write(byte[] b, int off, int len)`: Writes len bytes from the specified byte array starting at offset off to this file output stream.
4. `void close()`: Closes this file output stream.
5. `void flush()`: Flushes this file output stream.
================================================================

Sample: 15 FilePermission
----------------------------------------------------------------
1. `boolean implies(java.security.Permission permission)`: This method checks if the specified permission is implied by this FilePermission object.
2. `String getActions()`: This method returns the actions of the FilePermission object.
3. `boolean equals(Object obj)`: This method checks if the specified object is equal to this FilePermission object.
4. `int hashCode()`: This method returns the hash code value for this FilePermission object.
5. `String toString()`: This method returns a string representation of this FilePermission object.
================================================================

Sample: 16 FileReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the FileReader.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `long skip(long n)`: This method skips over and discards n characters of data.
4. `void close()`: This method closes the FileReader.
5. `void mark(int readAheadLimit)`: This method marks the present position in the file.
================================================================

Sample: 17 FileWriter
----------------------------------------------------------------
1. `void write(String str)`: This method writes a string to the file.
2. `void flush()`: This method flushes the stream.
3. `void close()`: This method closes the stream, flushing it first.
4. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
5. `void write(int c)`: This method writes a single character.
================================================================

Sample: 18 FilterInputStream
----------------------------------------------------------------
1. int read(): This method reads the next byte of data from the input stream.
2. void mark(int readlimit): This method marks the current position in this input stream.
3. boolean markSupported(): This method tests if this input stream supports the mark and reset methods.
4. void reset(): This method resets the input stream to the last marked position.
5. long skip(long n): This method skips over and discards n bytes of data from the input stream.
================================================================

Sample: 19 FilterOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with the stream.
================================================================

Sample: 20 FilterReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `boolean ready()`: This method tells whether the stream is ready to be read.
4. `long skip(long n)`: This method skips over and discards n characters of data.
5. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
================================================================

Sample: 21 FilterWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf)`: This method writes an array of characters.
3. `void write(String str)`: This method writes a string.
4. `void write(String str, int off, int len)`: This method writes a portion of a string.
5. `void write(char[] cbuf, int off, int len)`: This method writes a portion of a character array.
================================================================

Sample: 22 InputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to `b.length` bytes of data from the input stream into an array of bytes.
3. `long skip(long n)`: This method skips over and discards `n` bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void close()`: This method closes the input stream and releases any resources associated with it.
================================================================

Sample: 23 InputStreamReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character.
2. `int read(char[] cbuf)`: This method reads characters into an array.
3. `String getEncoding()`: This method returns the name of the character encoding being used.
4. `void close()`: This method closes the stream and releases any system resources associated with it.
5. `void mark(int readAheadLimit)`: This method marks the present position in the stream.
================================================================

Sample: 24 LineNumberInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
4. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
5. `void mark(int readlimit)`: This method marks the current position in the input stream.
================================================================

Sample: 25 LineNumberReader
----------------------------------------------------------------
1. `int getLineNumber()`: This method returns the current line number in the input stream.
2. `String readLine()`: This method reads a line of text from the input stream.
3. `void setLineNumber(int lineNumber)`: This method sets the current line number in the input stream to the specified value.
4. `String readLine(long limit)`: This method reads a line of text from the input stream, with a specified limit on the number of characters to read.
5. `boolean markSupported()`: This method tests whether this stream supports the mark operation.
================================================================

Sample: 26 ObjectInputStream
----------------------------------------------------------------
1. `Object readObject()`: This method reads an object from the input stream.
2. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
3. `void defaultReadObject()`: This method reads the non-static and non-transient fields of the current class from the input stream.
4. `boolean readBoolean()`: This method reads a boolean value from the input stream.
5. `char readChar()`: This method reads a character value from the input stream.
================================================================

Sample: 27 ObjectInputStream.GetField
----------------------------------------------------------------
1. `boolean defaulted(String name)`: This method returns the boolean representation of the named field value, if the field does not exist, it returns the default value for the field.

2. `byte get(String name, byte defaultValue)`: This method returns the byte representation of the named field value or the specified default value if the field does not exist.

3. `char get(String name, char defaultValue)`: This method returns the char representation of the named field value or the specified default value if the field does not exist.

4. `double get(String name, double defaultValue)`: This method returns the double representation of the named field value or the specified default value if the field does not exist.

5. `float get(String name, float defaultValue)`: This method returns the float representation of the named field value or the specified default value if the field does not exist.
================================================================

Sample: 28 ObjectOutputStream
----------------------------------------------------------------
1. void writeObject(Object obj): This method writes the specified object to the ObjectOutputStream.
2. void flush(): This method flushes the current output stream.
3. void reset(): This method clears the object stream and resets any internal state.
4. void close(): This method closes the ObjectOutputStream, releasing any resources associated with it.
5. void write(byte[] b, int off, int len): This method writes len bytes from the specified byte array starting at offset off to the ObjectOutputStream.
================================================================

Sample: 29 ObjectOutputStream.PutField
----------------------------------------------------------------
1. `void put(String name, boolean val)`: This method assigns a boolean value to the named field.
   
2. `void put(String name, byte val)`: This method assigns a byte value to the named field.
   
3. `void put(String name, char val)`: This method assigns a char value to the named field.
   
4. `void put(String name, double val)`: This method assigns a double value to the named field.
   
5. `void put(String name, float val)`: This method assigns a float value to the named field.
================================================================

Sample: 30 ObjectStreamClass
----------------------------------------------------------------
1. `long getSerialVersionUID()`: This method returns the serialVersionUID for the class.
2. `String getName()`: This method returns the name of the class represented by this ObjectStreamClass.
3. `ObjectStreamField getField(String name)`: This method returns the ObjectStreamField object for the field with the given name in the class.
4. `long getSerialVersionUID()`: This method returns the serialVersionUID for the class represented by this ObjectStreamClass.
5. `Class<?> forClass()`: This method returns the Class object that represents the class in the ObjectStreamClass.
================================================================

Sample: 31 ObjectStreamField
----------------------------------------------------------------
1. `String getName()`: Returns the name of the field represented by this ObjectStreamField.
2. `int getOffset()`: Returns the offset within instances of the class this ObjectStreamField is defined in.
3. `Class<?> getType()`: Returns the type of the field represented by this ObjectStreamField.
4. `String getTypeString()`: Returns a string describing the field type signature.
5. `char getTypeCode()`: Returns the type code for the field represented by this ObjectStreamField.
================================================================

Sample: 32 OutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
3. `void close()`: This method closes this output stream and releases any system resources associated with it.
4. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
5. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
================================================================

Sample: 33 OutputStreamWriter
----------------------------------------------------------------
1. `void write(int c)`: This method writes a single character.
2. `void write(char[] cbuf)`: This method writes an array of characters.
3. `void write(String str)`: This method writes a string.
4. `void flush()`: This method flushes the stream.
5. `void close()`: This method closes the stream and releases any system resources associated with it.
================================================================

Sample: 34 PipedInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b)`: This method reads up to `b.length` bytes of data from the input stream into an array of bytes.
3. `int read(byte[] b, int off, int len)`: This method reads up to `len` bytes of data from the input stream into an array of bytes, starting at the specified offset `off`.
4. `void connect(PipedOutputStream src)`: This method connects this piped input stream to a piped output stream.
5. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
================================================================

Sample: 35 PipedOutputStream
----------------------------------------------------------------
1. `void write(int b)`: This method writes the specified byte to the output stream.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to the output stream.
3. `void write(byte[] b, int off, int len)`: This method writes len bytes from the specified byte array starting at offset off to the output stream.
4. `void flush()`: This method flushes this output stream and forces any buffered output bytes to be written out.
5. `void close()`: This method closes this output stream and releases any system resources associated with the stream.
================================================================

Sample: 36 PipedReader
----------------------------------------------------------------
1. `void connect(PipedWriter src)`: This method connects this PipedReader to a PipedWriter for writing data.
2. `int read()`: This method reads a single character from the input stream.
3. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
4. `boolean ready()`: This method tells whether this stream is ready to be read.
5. `void close()`: This method closes the PipedReader.
================================================================

Sample: 37 PipedWriter
----------------------------------------------------------------
1. void connect(PipedReader snk): This method connects this piped writer to a receiver.
2. void write(int c): This method writes a single character to the piped writer.
3. void write(char[] cbuf, int off, int len): This method writes characters from an array to the piped writer.
4. void write(String str, int off, int len): This method writes a portion of a string to the piped writer.
5. void flush(): This method flushes the piped writer.
================================================================

Sample: 38 PrintStream
----------------------------------------------------------------
1. `void print(boolean b)`: This method prints a boolean value.
2. `void print(char c)`: This method prints a character.
3. `void print(int i)`: This method prints an integer.
4. `void print(String s)`: This method prints a string.
5. `void println()`: This method prints a new line.
================================================================

Sample: 39 PrintWriter
----------------------------------------------------------------
1. `void print(String s)`: This method prints a string to the output stream.
2. `void println(String x)`: This method prints a string and then terminates the line.
3. `void flush()`: This method flushes the stream.
4. `void close()`: This method closes the stream.
5. `PrintWriter format(String format, Object... args)`: This method writes a formatted string to the output stream using the specified format string and arguments.
================================================================

Sample: 40 PushbackInputStream
----------------------------------------------------------------
1. int read(): This method reads the next byte of data from the input stream.
2. void unread(int b): This method pushes back a byte to be re-read by a subsequent read() operation.
3. int read(byte[] b, int off, int len): This method reads up to len bytes of data from the input stream into an array.
4. int available(): This method returns the number of bytes that can be read from the input stream without blocking.
5. void close(): This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 41 PushbackReader
----------------------------------------------------------------
1. int read(): This method reads a single character from the input stream.
2. boolean ready(): This method tests if this input stream is ready to be read.
3. void unread(char c): This method pushes back a character by copying it to the front of the pushback buffer.
4. void unread(char[] cbuf): This method pushes back an array of characters by copying them to the front of the pushback buffer.
5. void unread(char[] cbuf, int off, int len): This method pushes back a portion of an array of characters by copying them to the front of the pushback buffer.
================================================================

Sample: 42 RandomAccessFile
----------------------------------------------------------------
1. `void seek(long pos)`: This method sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.
2. `void write(byte[] b)`: This method writes b.length bytes from the specified byte array to this file, starting at the current file pointer.
3. `int readInt()`: This method reads a signed 4-byte integer from this file.
4. `long length()`: This method returns the length of this file.
5. `void writeUTF(String str)`: This method writes a string to the file using UTF-8 encoding.
================================================================

Sample: 43 Reader
----------------------------------------------------------------
1. `int read()`: This method reads a single character from the reader.
2. `int read(char[] cbuf)`: This method reads characters into a portion of an array.
3. `long skip(long n)`: This method skips over and discards n characters of data from the input stream.
4. `boolean ready()`: This method tells whether the stream is ready to be read.
5. `void close()`: This method closes the stream and releases any system resources associated with it.
================================================================

Sample: 44 SequenceInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes.
3. `int available()`: This method returns the number of bytes that can be read without blocking.
4. `void close()`: This method closes the input stream and releases any system resources associated with it.
================================================================

Sample: 45 SerializablePermission
----------------------------------------------------------------
1. `SerializablePermission(String name, String actions)`: This constructor creates a new SerializablePermission object with the specified name and actions.
2. `String getActions()`: This method returns the actions associated with this SerializablePermission object.
3. `String getName()`: This method returns the name of this SerializablePermission object.
4. `boolean implies(Permission p)`: This method checks if this SerializablePermission object "implies" the specified permission.
5. `boolean equals(Object obj)`: This method checks if this SerializablePermission object is equal to the specified object.
================================================================

Sample: 46 StreamTokenizer
----------------------------------------------------------------
1. `int nextToken()`: This method parses the next token from the input stream and returns its type.
2. `String sval()`: This method returns the current token as a String.
3. `double nval()`: This method returns the current token as a double value.
4. `void eolIsSignificant(boolean flag)`: This method specifies whether or not end-of-line characters are treated as significant tokens.


================================================================

Sample: 47 StringBufferInputStream
----------------------------------------------------------------
1. `int read()`: This method reads the next byte of data from the input stream.
2. `int read(byte[] b, int off, int len)`: This method reads up to len bytes of data from the input stream into an array of bytes. 
3. `long skip(long n)`: This method skips over and discards n bytes of data from the input stream.
4. `int available()`: This method returns the number of bytes that can be read from the input stream without blocking.
5. `void reset()`: This method resets the input stream to the beginning.
================================================================

Sample: 48 StringReader
----------------------------------------------------------------
1. `int read()`: This method reads a single character.
2. `int read(char[] cbuf, int off, int len)`: This method reads characters into a portion of an array.
3. `long skip(long n)`: This method skips over and discards n characters of data.
4. `void close()`: This method closes the stream.
5. `boolean markSupported()`: This method tests if this reader supports the mark() operation.
================================================================

Sample: 49 StringWriter
----------------------------------------------------------------
1. `void write(String str)`: This method writes a string.
2. `void write(int c)`: This method writes a single character.
3. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters.
4. `void write(String str, int off, int len)`: This method writes a portion of a string.
5. `String toString()`: This method returns the buffer's current value as a string.
================================================================

Sample: 50 Writer
----------------------------------------------------------------
1. `void write(String str)`: This method writes a string to the writer.
2. `void write(char[] cbuf, int off, int len)`: This method writes a portion of an array of characters. 
3. `void flush()`: This method flushes the stream.
4. `void close()`: This method closes the stream, flushing it first.
5. `void append(CharSequence csq)`: This method appends the specified character sequence to this writer.
================================================================

