Sample: 0 Matcher_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String input = "Hello World";
        Pattern pattern = Pattern.compile(".*World.*");
        Matcher matcher = pattern.matcher(input);
        
        boolean isMatch = matcher.matches();
        
        System.out.println("Does input match the pattern? " + isMatch);
    }
}
```
================================================================

Sample: 1 Matcher_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "Hello 123 World";
        Pattern pattern = Pattern.compile("\\d+");
        Matcher matcher = pattern.matcher(text);
        
        while (matcher.find()) {
            String num = matcher.group();
            System.out.println(num);
        }
    }
}
```
================================================================

Sample: 2 Matcher_3
----------------------------------------------------------------
`int start()`: This method returns the start index of the previous match.

Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "The cat and the dog are playing in the garden";
        String patternString = "\\b\\p{Lower}+\\b";

        Pattern pattern = Pattern.compile(patternString);
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            System.out.println("Match found at index: " + matcher.start());
        }
    }
}
```
================================================================

Sample: 3 Matcher_4
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "Hello World";
        Pattern pattern = Pattern.compile("\\bHello\\b");
        Matcher matcher = pattern.matcher(text);
        
        boolean found = matcher.find();
        System.out.println("Pattern found: " + found);
    }
}
```
================================================================

Sample: 4 Matcher_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String originalString = "Hello, World! Hello!";
        Pattern pattern = Pattern.compile("Hello");
        Matcher matcher = pattern.matcher(originalString);
        
        String replacedString = matcher.replaceAll("Hi");
        System.out.println(replacedString);
    }
}
```
================================================================

Sample: 5 Pattern_1
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "This is a sample text";
        Pattern pattern = Pattern.compile("\\b\\w{4}\\b");
        System.out.println("Regex pattern: " + pattern.pattern());
    }
}
``` 

In this code snippet, we import `java.util.regex.Pattern` and demonstrate how to use the `compile` method to create a pattern that matches words with exactly 4 characters in a given text.
================================================================

Sample: 6 Pattern_2
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "Java is a programming language";
        Pattern pattern = Pattern.compile("language");
        Matcher matcher = pattern.matcher(text);
        
        if(matcher.find()) {
            System.out.println("Match found!");
        } else {
            System.out.println("Match not found.");
        }
    }
}
```
================================================================

Sample: 7 Pattern_3
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Pattern;

public class Main {
    public static void main(String[] args) {
        String text = "apple,orange,banana,grape";
        String[] fruits = Pattern.compile(",").split(text);
        
        for(String fruit : fruits) {
            System.out.println(fruit);
        }
    }
}
```
================================================================

Sample: 8 Pattern_5
----------------------------------------------------------------
Code snippet:
```java
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class Main {
    public static void main(String[] args) {
        String text = "The quick brown fox jumps over the lazy dog";
        String pattern = "\\b\\w{5}\\b"; // pattern to match words with 5 characters
        
        Pattern r = Pattern.compile(pattern);
        Matcher matcher = r.matcher(text);
        
        while (matcher.find()) {
            System.out.println("Found match: " + matcher.group());
        }
    }
}
```
================================================================

