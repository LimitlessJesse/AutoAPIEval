Sample: 0 JMXConnectionNotification
----------------------------------------------------------------
1. void connectionOpened(Map<String, ?> connectionDetails): This method is called when a new JMX connection has been opened.
2. void connectionClosed(Map<String, ?> connectionDetails): This method is called when a JMX connection has been closed.
3. void failedNotification(JMXConnectionNotification notif): This method is called when a JMX connection has failed.
4. void authenticated(Map<String, ?> connectionDetails): This method is called when a JMX connection has been authenticated successfully.
5. void connectionNotifsLost(JMXConnectionNotification[] connectionLostNotifs): This method is called when one or more JMX connection notifications have been lost.
================================================================

Sample: 1 JMXConnectorFactory
----------------------------------------------------------------
1. `JMXConnector connect(Map<String,?> environment)`: This method creates a connection to a remote JMX connector using the specified environment properties.
2. `String[] getConnectionIds()`: This method returns an array of connection IDs for each active connection.
3. `JMXConnector newJMXConnector(JMXServiceURL serviceURL, Map<String,?> environment)`: This method creates a new JMX connector using the specified service URL and environment properties.
4. `JMXConnector newJMXConnector(JMXAddressable address, Map<String,?> environment)`: This method creates a new JMX connector using the specified JMX address and environment properties.
5. `JMXConnector newJMXConnector(URI url, Map<String,?> environment)`: This method creates a new JMX connector using the specified URI and environment properties.
================================================================

Sample: 2 JMXConnectorServer
----------------------------------------------------------------
1. `void start()`: This method starts the JMX connector server.
2. `void stop()`: This method stops the JMX connector server.
3. `boolean isActive()`: This method returns true if the connector server is active, false otherwise.
4. `JMXServiceURL getAddress()`: This method returns the address of the connector server.
5. `void setMBeanServer(MBeanServer mbeanServer)`: This method sets the MBean server to be used by the connector server.
================================================================

Sample: 3 JMXConnectorServerFactory
----------------------------------------------------------------
1. `JMXConnectorServer newJMXConnectorServer(Map<String, ?> environment)`: This method creates a new JMXConnectorServer.
2. `void start()`: This method starts the JMXConnectorServer.
3. `void stop()`: This method stops the JMXConnectorServer.
4. `void setMBeanServer(MBeanServer mbeanServer)`: This method sets the MBeanServer for the JMXConnectorServer.
5. `void setConnectionIds(String[] connectIds)`: This method sets the connection IDs for the JMXConnectorServer.
================================================================

Sample: 4 JMXPrincipal
----------------------------------------------------------------
1. `String getName()`: This method returns the name of the JMXPrincipal.
2. `boolean implies(Subject subject)`: This method checks if the JMXPrincipal implies the specified subject.
3. `String toString()`: This method returns a string representation of the JMXPrincipal.
4. `boolean equals(Object o)`: This method compares the specified object with this JMXPrincipal for equality.
5. `int hashCode()`: This method returns the hash code value for this JMXPrincipal.
================================================================

Sample: 5 JMXServiceURL
----------------------------------------------------------------
1. `String getProtocol()`: This method returns the protocol part of the JMXServiceURL.
2. `String getHost()`: This method returns the host part of the JMXServiceURL.
3. `int getPort()`: This method returns the port number part of the JMXServiceURL.
4. `String getURLPath()`: This method returns the URL path part of the JMXServiceURL.
5. `String toString()`: This method returns a string representation of the JMXServiceURL.
================================================================

Sample: 6 NotificationResult
----------------------------------------------------------------
1. `Integer getCount()`: This method returns the number of notifications in the result.
2. `List<Notification> getNotifications()`: This method returns a list of Notification objects contained in the result.
3. `void setOffset(Integer offset)`: This method sets the offset for the result.
4. `void setMaxNotifications(Integer max)`: This method sets the maximum number of notifications to return.
5. `Boolean hasMoreNotifications()`: This method returns true if there are more notifications available.
================================================================

Sample: 7 SubjectDelegationPermission
----------------------------------------------------------------
1. `boolean implies(javax.security.auth.Subject subject)`: This method checks if the specified subject is implied by this SubjectDelegationPermission.
2. `String toString()`: This method returns a string representation of the object.
3. `void checkGuard(Object guard)`: This method checks if the specified guard is implied by this SubjectDelegationPermission.
4. `boolean equals(Object obj)`: This method compares the specified object with this SubjectDelegationPermission for equality.
5. `int hashCode()`: This method returns the hash code value for the object.
================================================================

Sample: 8 TargetedNotification
----------------------------------------------------------------
1. `String getNotificationID()`: This method returns the notification ID of the targeted notification.
2. `ObjectName getTarget()`: This method returns the target object name of the targeted notification.
3. `long getSequenceNumber()`: This method returns the sequence number of the targeted notification.
4. `TargetedNotification clone()`: This method creates and returns a copy of this targeted notification.
5. `void sendNotification(NotificationListener listener, Object handback)`: This method sends the targeted notification to the specified listener with the provided handback object.
================================================================

