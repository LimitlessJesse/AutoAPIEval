Sample: 0 IIOImage
----------------------------------------------------------------
1. `int getWidth()`: Returns the width of the image in pixels.
2. `int getHeight()`: Returns the height of the image in pixels.
3. `ImageWriter getWriter()`: Returns the ImageWriter object associated with this IIOImage.
4. `Raster getRaster()`: Returns the Raster object containing the image data.
5. `IIOMetadata getMetadata()`: Returns the IIOMetadata object containing metadata associated with the image.
================================================================

Sample: 1 IIOParam
----------------------------------------------------------------
1. `ImageWriteParam getWriteParam()`: This method returns the ImageWriteParam object associated with this IIOParam object.
2. `void setController(IIOParamController controller)`: This method sets the IIOParamController object to use for encoding operation settings.
3. `ImageReadParam getReadParam()`: This method returns the ImageReadParam object associated with this IIOParam object.
4. `void setLocale(Locale locale)`: This method sets the locale to be used for localization of error messages and other potentially localizable attributes.
5. `int getControllerClassIndex()`: This method returns the index of the Class in the list of installed IIOParamController classes that best represents the settings of this IIOParam object.
================================================================

Sample: 2 ImageIO
----------------------------------------------------------------
1. `BufferedImage read(File input)`: This method reads an input file and returns a BufferedImage object.
2. `boolean write(BufferedImage image, String formatName, File output)`: This method writes a BufferedImage object to an output file in the specified format.
3. `Iterator<ImageReader> getImageReadersByFormatName(String formatName)`: This method returns an Iterator of ImageReader objects for the specified format name.
4. `Iterator<ImageWriter> getImageWritersByFormatName(String formatName)`: This method returns an Iterator of ImageWriter objects for the specified format name.
5. `boolean canRead(Object source)`: This method returns a boolean indicating whether the ImageIO can read from the specified source.
================================================================

Sample: 3 ImageReader
----------------------------------------------------------------
1. `Iterator<ImageTypeSpecifier> getImageTypes(int imageIndex)`: This method returns an Iterator of ImageTypeSpecifier objects representing the available image types for the specified image index.
2. `ImageReadParam getDefaultReadParam()`: This method returns the default ImageReadParam object for this ImageReader.
3. `IIOMetadataStream getStreamMetadata()`: This method returns the stream metadata as an IIOMetadataStream object.
4. `int getNumImages(boolean allowSearch)`: This method returns the number of images in the input source.
5. `ImageReadParam getReadParam()`: This method returns the current ImageReadParam object.
================================================================

Sample: 4 ImageReadParam
----------------------------------------------------------------
1. `int getSourceXSubsampling()`: This method returns the X subsampling factor used for reading the source image.
2. `int getSourceYSubsampling()`: This method returns the Y subsampling factor used for reading the source image.
3. `void setSourceRegion(Rectangle sourceRegion)`: This method sets the source region to read from the image.
4. `void setSourceRenderSize(Dimension size)`: This method sets the size of the source image to be rendered.
5. `void setSourceBands(int[] sourceBands)`: This method sets the source bands to be read from the image.
================================================================

Sample: 5 ImageTypeSpecifier
----------------------------------------------------------------
1. `int getNumComponents()`: This method returns the number of color components.
2. `int getBitsPerBand(int band)`: This method returns the number of bits in the representation of the specified band.
3. `ColorModel getColorModel()`: This method returns the ColorModel associated with this ImageTypeSpecifier.
4. `int getNumBands()`: This method returns the number of bands.
5. `int getNumBits()`: This method returns the total number of bits for all bands.
================================================================

Sample: 6 ImageWriteParam
----------------------------------------------------------------
1. `void setCompressionMode(int mode)`: This method sets the compression mode for this ImageWriteParam.
2. `int getCompressionMode()`: This method returns the compression mode for this ImageWriteParam.
3. `void setCompressionQuality(float quality)`: This method sets the compression quality for this ImageWriteParam.
4. `float getCompressionQuality()`: This method returns the compression quality for this ImageWriteParam.
5. `Locale getLocale()`: This method returns the current locale for this ImageWriteParam.
================================================================

Sample: 7 ImageWriter
----------------------------------------------------------------
1. `ImageTypeSpecifier createImageTypeSpecifier(ColorModel colorModel, SampleModel sampleModel)`: This method creates an ImageTypeSpecifier that describes the given ColorModel and SampleModel.
2. `IIOMetadata getDefaultImageMetadata(ImageTypeSpecifier imageType, ImageWriteParam param)`: This method returns the default metadata format name for encoding an image of the given type, with the given parameters.
3. `ImageWriteParam getDefaultWriteParam()`: This method returns the default ImageWriteParam object to be used with this ImageWriter.
4. `IIOMetadata getDefaultStreamMetadata(ImageWriteParam param)`: This method returns the default metadata format name for encoding image stream metadata, with the given parameters.
================================================================

