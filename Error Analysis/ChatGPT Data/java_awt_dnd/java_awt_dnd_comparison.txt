Sample: 0 DnDConstants
----------------------------------------------------------------
1. `int COPY`: This constant represents the bitwise mask for the "copy" action.
2. `int COPY_OR_MOVE`: This constant represents the bitwise mask for the "copy or move" action.
3. `int LINK`: This constant represents the bitwise mask for the "link" action.
4. `int MOVE`: This constant represents the bitwise mask for the "move" action.
5. `int NONE`: This constant represents an undefined outcome or no specified action.
================================================================

Sample: 1 DragGestureEvent
----------------------------------------------------------------
1. `DragGestureEvent(Component comp, int action, Point dragOrigin, List dragList)`: Constructor which creates a DragGestureEvent with the specified parameters.
2. `Component getComponent()`: Returns the component associated with this DragGestureEvent.
3. `int getDragAction()`: Returns the drag action associated with this DragGestureEvent.
4. `Point getDragOrigin()`: Returns the origin of the drag in component coordinates.
5. `List getDragList()`: Returns the List of events that caused this DragGestureEvent.
================================================================

Sample: 2 DragGestureRecognizer
----------------------------------------------------------------
1. `void registerListenersForTarget(Component c)`: This method registers the necessary listeners on the given Component for recognizing drag gestures.
2. `void unregisterListenersForTarget(Component c)`: This method unregisters the listeners on the given Component, stopping the recognition of drag gestures.
3. `int getSourceActions()`: This method returns the types of drag actions supported by this DragGestureRecognizer.
4. `void setSourceActions(int actions)`: This method sets the types of drag actions supported by this DragGestureRecognizer.
5. `void setComponent(Component c)`: This method sets the component that this DragGestureRecognizer will recognize drag gestures on.
================================================================

Sample: 3 DragSource
----------------------------------------------------------------
1. `void startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl)`: This method initiates a drag operation.
2. `void addDragSourceListener(DragSourceListener dsl)`: This method adds the specified DragSourceListener to receive drag source events from this DragSource.
3. `void removeDragSourceListener(DragSourceListener dsl)`: This method removes the specified DragSourceListener so that it no longer receives drag source events from this DragSource.
4. `void notifyDragStarted(DragGestureEvent dge)`: This method notifies the DragSource that is has started a drag operation.
================================================================

Sample: 4 DragSourceAdapter
----------------------------------------------------------------
1. void dragEnter(DragSourceDragEvent dsde)
2. void dragOver(DragSourceDragEvent dsde)
3. void dragExit(DragSourceEvent dse)
4. void dropActionChanged(DragSourceDragEvent dsde)
5. void dragDropEnd(DragSourceDropEvent dsde)
================================================================

Sample: 5 DragSourceContext
----------------------------------------------------------------
1. `Component getComponent()`: Returns the Component associated with this DragSourceContext.
2. `Cursor getCursor()`: Returns the Cursor object for this DragSourceContext.
3. `DragGestureEvent getDragGestureEvent()`: Returns the DragGestureEvent that initially triggered the drag operation.
4. `DragSourceContext getDragSourceContext()` : Returns the current DragSourceContext.
5. `DragSourceListener getDragSourceListener()`: Returns the DragSourceListener associated with this DragSourceContext.
================================================================

Sample: 6 DragSourceDragEvent
----------------------------------------------------------------
1. `DragSourceContext getDragSourceContext()`: This method returns the DragSourceContext associated with this DragSourceDragEvent.
2. `int getGestureModifiers()`: This method returns the modifier keys associated with the current drag operation.
3. `DragSourceContextPeer getDragSourceContextPeer()`: This method returns the native peer associated with the DragSourceContext for this DragSourceDragEvent.
4. `Transferable getTransferable()`: This method returns the Transferable object associated with the current drag operation.
5. `Cursor getCursor()`: This method returns the current cursor associated with the current drag operation.
================================================================

Sample: 7 DragSourceDropEvent
----------------------------------------------------------------
1. `DataFlavor[] getCurrentDataFlavors()`: This method returns an array of DataFlavor objects for the current Drag and Drop operation.
2. `boolean isLocalTransfer()`: This method returns true if the transfer is within the same Java Virtual Machine (JVM).
3. `DragSourceContext getDragSourceContext()`: This method returns the DragSourceContext associated with the current Drag and Drop operation.
4. `DragSourceContextPeer getDragSourceContextPeer()`: This method returns the platform-specific DragSourceContextPeer that is used to manage the current Drag and Drop operation.
5. `DragSourceContext getDragSourceContext()`: This method returns the DragSourceContext associated with the current Drag and Drop operation.
================================================================

Sample: 8 DragSourceEvent
----------------------------------------------------------------
1. `DataFlavor[] getCurrentDataFlavors()`: This method returns an array of the data flavors that are available in this Drag and Drop operation.
2. `DragSourceContext getDragSourceContext()`: This method returns the DragSourceContext associated with this DragSourceEvent.
3. `DragSourceEvent clone():`: This method creates and returns a copy of this DragSourceEvent.
4. `DragSourceContext getDragSource():`: This method returns the DragSource that originated the Drag and Drop operation.
5. `DragSourceContext getDragSourceContextAt(Point p)`: This method returns the DragSourceContext associated with the specified Point.
================================================================

Sample: 9 DropTarget
----------------------------------------------------------------
1. `void addDropTargetListener(DropTargetListener dtl)`: This method adds the specified DropTargetListener to receive drop target events.
2. `void removeDropTargetListener(DropTargetListener dtl)`: This method removes the specified DropTargetListener from the list of listeners receiving drop target events.
3. `void setComponent(Component c)`: This method sets the component associated with this DropTarget.
4. `void setDefaultActions(int actions)`: This method sets the default acceptable actions for this DropTarget.
5. `void setActive(boolean isActive)`: This method sets the active state of this DropTarget.
================================================================

Sample: 10 DropTarget.DropTargetAutoScroller
----------------------------------------------------------------
1. `void updateScrollRegion()`: This method updates the region where scrolling occurs.
2. `void stop()`: This method stops the auto-scrolling.
3. `void start(int x, int y)`: This method starts auto-scrolling at the specified coordinates.
4. `int getHysteresis()` : This method returns the hysteresis value for the auto-scrolling.
5. `void setHysteresis(int value)`: This method sets the hysteresis value for the auto-scrolling.
================================================================

Sample: 11 DropTargetAdapter
----------------------------------------------------------------
1. `void dragEnter(DropTargetDragEvent dtde)`: This method is called when a drag operation is ongoing, and the cursor has entered the DropTarget associated with this DropTargetAdapter.
2. `void dragExit(DropTargetEvent dte)`: This method is called when a drag operation has exited the DropTarget associated with this DropTargetAdapter.
3. `void dragOver(DropTargetDragEvent dtde)`: This method is called when a drag operation is ongoing, and the cursor is still over the DropTarget associated with this DropTargetAdapter.
4. `void drop(DropTargetDropEvent dtde)`: This method is called when a drop operation has occurred.
5. `void dropActionChanged(DropTargetDragEvent dtde)`: This method is called when the user has changed the drop action by pressing a modifier key during a drag operation.
================================================================

Sample: 12 DropTargetContext
----------------------------------------------------------------
1. `Transferable getTransferable()`: This method returns the Transferable object associated with the current drag operation.
2. `boolean equals(Object obj)`: This method compares this DropTargetContext to the specified object.
3. `Component getComponent()`: This method returns the Component associated with the current drag operation.
4. `DropTarget getDropTarget()`: This method returns the DropTarget associated with this DropTargetContext.
5. `Event getTriggerEvent()`: This method returns the event that triggered this DropTargetContext.
================================================================

Sample: 13 DropTargetDragEvent
----------------------------------------------------------------
1. `boolean isDataFlavorSupported(DataFlavor df)`: This method returns true if the specified DataFlavor is supported.
2. `DropTargetContext getDropTargetContext()`: This method returns the DropTargetContext associated with this event.
3. `int getSourceActions()`: This method returns the action(s) supported by the source associated with the Drag and Drop operation.
4. `Transferable getTransferable()`: This method returns the Transferable object associated with this event.
5. `int getDropAction()`: This method returns the currently selected user drop action for the transfer.
================================================================

Sample: 14 DropTargetDropEvent
----------------------------------------------------------------
1. void acceptDrop(int action)

2. DataFlavor[] getCurrentDataFlavors()

3. Transferable getTransferable()

4. boolean isLocalFile()

5. int getDropAction()
================================================================

Sample: 15 DropTargetEvent
----------------------------------------------------------------
1. `java.awt.Component getDropTargetContext().getComponent()`: This method returns the Component associated with the DropTargetContext.
2. `java.awt.Point getLocation()`: This method returns the current x,y position of the cursor in the coordinate space of the DropTargetContext's Component.
3. `java.awt.dnd.DropTarget getDropTargetContext().getDropTarget()`: This method returns the DropTarget associated with the DropTargetEvent.
4. `int getSourceActions()`: This method returns the actions supported by the source of the Drag and Drop operation.
5. `java.awt.dnd.DropTargetContext getDropTargetContext()`: This method returns the DropTargetContext associated with the event.
================================================================

Sample: 16 MouseDragGestureRecognizer
----------------------------------------------------------------
1. `void registerListeners()`: This method registers the appropriate listeners on the component.
2. `void unregisterListeners()`: This method unregisters the listeners on the component.
3. `void mouseClicked(MouseEvent e)`: This method is called in response to the mouse being clicked on the component.
4. `void mouseDragged(MouseEvent e)`: This method is called in response to the mouse being dragged on the component.
5. `void mouseReleased(MouseEvent e)`: This method is called in response to the mouse button being released on the component.
================================================================

