Sample: AccessibleObject_1
----------------------------------------------------------------
================================================================

Sample: AccessibleObject_2
----------------------------------------------------------------
stderr:
Note: ./Data/java_lang_reflect/javaFiles/AccessibleObject_2.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.lang.reflect.AccessibleObject.isAccessible()" because "<local1>" is null
	at AccessibleObject_2.main(AccessibleObject_2.java:6)

================================================================

Sample: AccessibleObject_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/AccessibleObject_4.java:13: error: cannot find symbol
        boolean annotationPresent = Main.class.isAnnotationPresent(MyAnnotation.class);
                                    ^
  symbol:   class Main
  location: class AccessibleObject_4
1 error


================================================================

Sample: Constructor_2
----------------------------------------------------------------
================================================================

Sample: Constructor_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Constructor_4.java:6: error: cannot find symbol
        Constructor<?>[] constructors = Main.class.getConstructors();
                                        ^
  symbol:   class Main
  location: class Constructor_4
1 error


================================================================

Sample: Constructor_5
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Constructor_5.java:8: error: cannot find symbol
            Class<?> myClass = Main.class;
                               ^
  symbol:   class Main
  location: class Constructor_5
1 error


================================================================

Sample: Executable_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Executable_1.java:5: error: cannot find symbol
        Executable executable = Main.class.getDeclaredMethods()[0];
                                ^
  symbol:   class Main
  location: class Executable_1
1 error


================================================================

Sample: Executable_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Executable_4.java:5: error: cannot find symbol
        Executable executable = Main.class.getMethods()[0];
                                ^
  symbol:   class Main
  location: class Executable_4
1 error


================================================================

Sample: Field_1
----------------------------------------------------------------
stdout:
Field value: Sample Field

================================================================

Sample: Field_2
----------------------------------------------------------------
stdout:
Field value after set: New value

================================================================

Sample: Field_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Field_3.java:6: error: cannot find symbol
            Field field = Main.class.getDeclaredField("fieldName");
                          ^
  symbol:   class Main
  location: class Field_3
1 error


================================================================

Sample: Field_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Field_4.java:6: error: cannot find symbol
            Field field = Main.class.getDeclaredField("fieldName");
                          ^
  symbol:   class Main
  location: class Field_4
1 error


================================================================

Sample: Method_1
----------------------------------------------------------------
stderr:
java.lang.NoSuchMethodException: Method_1$MyClass.methodName(java.lang.String)
	at java.base/java.lang.Class.getMethod(Class.java:2227)
	at Method_1.main(Method_1.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.execute(Main.java:419)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.run(Main.java:192)
	at jdk.compiler/com.sun.tools.javac.launcher.Main.main(Main.java:132)

================================================================

Sample: Method_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Method_3.java:5: error: cannot find symbol
        Method[] methods = Main.class.getMethods();
                           ^
  symbol:   class Main
  location: class Method_3
1 error


================================================================

Sample: Method_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Method_4.java:5: error: cannot find symbol
        Method[] methods = Main.class.getDeclaredMethods();
                           ^
  symbol:   class Main
  location: class Method_4
1 error


================================================================

Sample: Method_5
----------------------------------------------------------------
stdout:
Method name: equals
Method name: length
Method name: toString
Method name: hashCode
Method name: getChars
Method name: compareTo
Method name: compareTo
Method name: indexOf
Method name: indexOf
Method name: indexOf
Method name: indexOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: valueOf
Method name: charAt
Method name: codePointAt
Method name: codePointBefore
Method name: codePointCount
Method name: offsetByCodePoints
Method name: getBytes
Method name: getBytes
Method name: getBytes
Method name: getBytes
Method name: contentEquals
Method name: contentEquals
Method name: regionMatches
Method name: regionMatches
Method name: startsWith
Method name: startsWith
Method name: lastIndexOf
Method name: lastIndexOf
Method name: lastIndexOf
Method name: lastIndexOf
Method name: substring
Method name: substring
Method name: isEmpty
Method name: replace
Method name: replace
Method name: matches
Method name: replaceFirst
Method name: replaceAll
Method name: split
Method name: split
Method name: join
Method name: join
Method name: toLowerCase
Method name: toLowerCase
Method name: toUpperCase
Method name: toUpperCase
Method name: trim
Method name: strip
Method name: stripLeading
Method name: stripTrailing
Method name: lines
Method name: repeat
Method name: isBlank
Method name: toCharArray
Method name: format
Method name: format
Method name: resolveConstantDesc
Method name: resolveConstantDesc
Method name: codePoints
Method name: equalsIgnoreCase
Method name: compareToIgnoreCase
Method name: endsWith
Method name: subSequence
Method name: concat
Method name: contains
Method name: indent
Method name: stripIndent
Method name: translateEscapes
Method name: chars
Method name: transform
Method name: formatted
Method name: copyValueOf
Method name: copyValueOf
Method name: intern
Method name: describeConstable
Method name: wait
Method name: wait
Method name: wait
Method name: getClass
Method name: notify
Method name: notifyAll

================================================================

Sample: Parameter_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Parameter_1.java:6: error: cannot find symbol
        Method[] methods = Main.class.getMethods();
                           ^
  symbol:   class Main
  location: class Parameter_1
1 error


================================================================

Sample: Parameter_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Parameter_3.java:5: error: method isNamePresent in class Parameter cannot be applied to given types;
        boolean result = Parameter.isNamePresent("test");
                                  ^
  required: no arguments
  found:    String
  reason: actual and formal argument lists differ in length
1 error


================================================================

Sample: Parameter_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Parameter_4.java:6: error: cannot find symbol
        Method[] methods = Main.class.getMethods();
                           ^
  symbol:   class Main
  location: class Parameter_4
1 error


================================================================

Sample: Parameter_5
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Parameter_5.java:7: error: cannot find symbol
        Method method = Main.class.getMethod("exampleMethod", String.class, int.class);
                        ^
  symbol:   class Main
  location: class Parameter_5
1 error


================================================================

Sample: Proxy_1
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Proxy_1.java:8: error: cannot find symbol
                Main.class.getClassLoader(),
                ^
  symbol:   class Main
  location: class Proxy_1
1 error


================================================================

Sample: Proxy_2
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Proxy_2.java:5: error: cannot find symbol
        Class<?> proxyClass = Proxy.getProxyClass(Main.class.getClassLoader(), Runnable.class);
                                                  ^
  symbol:   class Main
  location: class Proxy_2
1 error


================================================================

Sample: Proxy_3
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Proxy_3.java:6: error: cannot find symbol
        InvocationHandler handler = Proxy.getInvocationHandler(proxyObject);
                                                               ^
  symbol:   variable proxyObject
  location: class Proxy_3
1 error


================================================================

Sample: Proxy_4
----------------------------------------------------------------
output:
./Data/java_lang_reflect/javaFiles/Proxy_4.java:6: error: cannot find symbol
        Class<?> proxyClass = Proxy.getProxyClass(Main.class.getClassLoader(), Main.class);
                                                                               ^
  symbol:   class Main
  location: class Proxy_4
./Data/java_lang_reflect/javaFiles/Proxy_4.java:6: error: cannot find symbol
        Class<?> proxyClass = Proxy.getProxyClass(Main.class.getClassLoader(), Main.class);
                                                  ^
  symbol:   class Main
  location: class Proxy_4
2 errors


================================================================

