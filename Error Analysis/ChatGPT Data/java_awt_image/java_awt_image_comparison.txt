Sample: 0 AffineTransformOp
----------------------------------------------------------------
1. BufferedImage filter(BufferedImage src, BufferedImage dest): Applies a BufferedImage operation, such as scaling, rotation, or shearing, to an input BufferedImage and stores the result in a destination BufferedImage.
2. Raster filter(Raster src, WritableRaster dest): Applies a Raster operation, such as scaling, rotation, or shearing, to an input Raster and stores the result in a destination WritableRaster.
3. BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM): Creates a compatible destination image for a given source BufferedImage and destination ColorModel for use with the filter() method.
4. void rescaleOp(double[] scaleFactor, double[] offset): Sets the rescale factors that will be applied to the source image before applying the filter operation.
5. void rescaleOp(double scaleFactor, double offset): Sets a single rescale factor and offset to be applied to the source image before applying the filter operation.
================================================================

Sample: 1 AreaAveragingScaleFilter
----------------------------------------------------------------
1. `void setHints(Map hints)`: This method sets the hints for the scaling operation.
2. `Map getHints()`: This method returns the hints for the scaling operation.
3. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixels for a specified rectangular area of the output image.
4. `int[] getPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)`: This method returns the pixels for a specified rectangular area of the output image.
5. `void setProperties(Hashtable props)`: This method sets the properties for the scaling operation.
================================================================

Sample: 2 BandCombineOp
----------------------------------------------------------------
1. `RenderedImage filter(RenderedImage src, RenderedImage dest)`: This method applies a band combine operation to the source image and stores the result in the destination image.
2. `int getNumSources()`: This method returns the number of source bands.
3. `int getNumDestBands()`: This method returns the number of destination bands.
4. `int[] getMatrix()`: This method returns the matrix used by this BandCombineOp.
5. `Point2D getPoint2D(Point2D srcPt, Point2D destPt)`: This method returns the coordinates of the corresponding point in the destination image.
================================================================

Sample: 3 BandedSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: Returns the number of bands in the sample model.
2. `int[] getSampleSize()`: Returns an array of sample sizes for each band.
3. `int[] getBandOffsets()`: Returns an array of band offsets.
4. `int[] getBankIndices()`: Returns an array of bank indices for each band.
5. `int[] getScanlineStride()`: Returns an array of scanline stride values for each band.
================================================================

Sample: 4 BufferedImage
----------------------------------------------------------------
1. `int getWidth()`: Returns the width of the image.
2. `int getHeight()`: Returns the height of the image.
3. `void setRGB(int x, int y, int rgb)`: Sets the pixel at the specified position to the specified RGB value.
4. `int getRGB(int x, int y)`: Returns the RGB value of the pixel at the specified position.
5. `BufferedImage getSubimage(int x, int y, int w, int h)`: Returns a subimage of the image specified by the specified region.
================================================================

Sample: 5 BufferedImageFilter
----------------------------------------------------------------
1. `void setRGB(int x, int y, int rgb)`: This method sets a pixel in the image composed of 8-bit RGBA values.
2. `int getRGB(int x, int y)`: This method returns the RGB value representing the pixel at the specified coordinates.
3. `void createGraphics()`: This method creates a Graphics2D, which can be used to draw into this BufferedImage.
4. `BufferedImage getSubimage(int x, int y, int w, int h)`: This method returns a subimage defined by a specified rectangular region.
5. `int getWidth()`: This method returns the width of the image.
================================================================

Sample: 6 BufferStrategy
----------------------------------------------------------------
1. `void show()`: This method displays the next available buffer in the associated Canvas component.
2. `Graphics getDrawGraphics()`: This method returns the Graphics context for the drawing buffer.
3. `boolean contentsLost()`: This method returns whether the drawing buffer was lost since the last call to getDrawGraphics().
4. `boolean contentsRestored()`: This method returns whether the drawing buffer was recently restored from a lost state.
5. `void dispose()`: This method releases system resources used by this BufferStrategy and removes it from the associated Canvas.
================================================================

Sample: 7 ByteLookupTable
----------------------------------------------------------------
1. `byte[][] getTable()`: Returns the lookup table as an array of arrays of bytes.

2. `int getOffset()`: Returns the offset value for this lookup table.

3. `int getNCorners()`: Returns the number of components in this lookup table.

4. `int getNEntries()`: Returns the number of entries in this lookup table.

5. `ByteLookupTable createInverse()`: Creates and returns the inverse of this lookup table.
================================================================

Sample: 8 ColorConvertOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a color conversion from the source image to the destination image.
2. `ColorSpace getDestinationCS()`: This method returns the destination color space.
3. `ColorModel getDestinationCM()`: This method returns the destination color model.
4. `int filterRGB(int x, int y, int rgb)`: This method filters the specified pixel.
5. `boolean canFilterIndexColorModel(IndexColorModel model)`: This method returns true if this operation can be executed with the specified IndexColorModel.
================================================================

Sample: 9 ColorModel
----------------------------------------------------------------
1. `int getPixelSize()`: This method returns the size of the pixel values in bits.
2. `int getRGB(Object inData)`: This method returns the RGB value representing the specified pixel.
3. `int getAlpha(int pixel)`: This method returns the alpha component of the specified pixel.
4. `int getRed(int pixel)`: This method returns the red component of the specified pixel.
5. `int getGreen(int pixel)`: This method returns the green component of the specified pixel.
================================================================

Sample: 10 ComponentColorModel
----------------------------------------------------------------
1. `int getPixelSize()`: Returns the number of bits needed to represent a pixel in this ColorModel.
2. `int getRed(int rgb)`: Returns the red color component for the specified pixel in the default RGB color model.
3. `int getGreen(int rgb)`: Returns the green color component for the specified pixel in the default RGB color model.
4. `int getBlue(int rgb)`: Returns the blue color component for the specified pixel in the default RGB color model.
5. `WritableRaster createCompatibleWritableRaster(int w, int h)`: Returns a new WritableRaster with the specified width and height that has a DataBuffer compatible with this ColorModel.
================================================================

Sample: 11 ComponentSampleModel
----------------------------------------------------------------
1. `int getNumBands()`: This method returns the number of bands in the sample.
2. `int getNumBands(int x, int y)`: This method returns the number of bands for a specific pixel location.
3. `int getNumDataElements()`: This method returns the number of data elements for each pixel.
4. `int getOffset(int x, int y)`: This method returns the offset in the data array for accessing the pixel located at (x, y).
5. `int getPixel(int x, int y, int[] iArray, DataBuffer data)`: This method returns the pixel value at the specified location as an array of integers.
================================================================

Sample: 12 ConvolveOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)` : Applies a convolution operation to the specified BufferedImage and stores the result in the destination BufferedImage.
2. `BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel cm)` : Creates a destination BufferedImage with the specified ColorModel that is compatible with the source BufferedImage for applying convolution operation.
3. `float[] getKernel()` : Returns the convolution kernel used by this ConvolveOp.
4. `RenderingHints getRenderingHints()` : Returns the rendering hints for this ConvolveOp.
5. `Point2D getPoint2D(Point2D srcPt, Point2D dstPt)` : Returns the location in the destination image corresponding to the specified point in the source image after applying the convolution operation.
================================================================

Sample: 13 CropImageFilter
----------------------------------------------------------------
1. `int[] filterRGB(int x, int y, int w, int h, int[] pixels, int off, int scansize)`: This method applies a filter to the pixels of an image.
2. `ImageFilter setDimensions(int w, int h)`: This method sets the dimensions of the filter and returns a new ImageFilter object.
3. `int[] getPixels(int x, int y, int w, int h, int[] pixels, int off, int scansize)`: This method gets the pixels from an image.
4. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int off, int scansize)`: This method sets the pixel values for an image.
5. `void setHints(int hints)`: This method sets hints for the filter.
================================================================

Sample: 14 DataBuffer
----------------------------------------------------------------
1. `int getSize()`: This method returns the size of the buffer in elements.
2. `int getElem(int i)`: This method returns the element at the specified index in the buffer.
3. `int getElem(int bank, int i)`: This method returns the element at the specified index in the specified bank of the buffer.
4. `void setElem(int i, int val)`: This method sets the element at the specified index in the buffer to the specified value.
5. `void setElem(int bank, int i, int val)`: This method sets the element at the specified index in the specified bank of the buffer to the specified value.
================================================================

Sample: 15 DataBufferByte
----------------------------------------------------------------
1. `byte[] getData()`: This method returns the data array.
2. `int getSize()`: This method returns the size of the data array.
3. `int getOffsetsSize()`: This method returns the size of the offsets array.
4. `int getOffset(int bank)`: This method returns the offset for the specified bank.
5. `void setData(byte[] dataArray)`: This method sets the data array.
================================================================

Sample: 16 DataBufferDouble
----------------------------------------------------------------
1. `int getNumBanks()`: Returns the number of banks in this DataBuffer.
2. `double getElem(int bank, int i)`: Returns the data element at the specified bank and index.
3. `double[] getData()`: Returns the data array for this DataBuffer.
4. `void setElem(double d, int bank, int i)`: Sets the data element at the specified bank and index to the specified value.
5. `void setData(double[] data)`: Sets the data array for this DataBuffer.
================================================================

Sample: 17 DataBufferFloat
----------------------------------------------------------------
1. `float[] getData()`: This method returns the data array stored in this DataBufferFloat.
2. `float getElem(int bank, int i)`: This method returns the data element at the specified bank and index.
3. `void setElem(int bank, int i, float val)`: This method sets the data element at the specified bank and index to the specified value.
4. `float getElemFloat(int i)`: This method returns the data element at the specified index as a float.
5. `void setElemFloat(int i, float val)`: This method sets the data element at the specified index to the specified float value.
================================================================

Sample: 18 DataBufferInt
----------------------------------------------------------------
1. `int[] getData()`: This method returns the integer data array.
2. `int getElem(int i)`: This method returns the element at the specified index in the data buffer.
3. `void setElem(int i, int val)`: This method sets the element at the specified index in the data buffer to the specified value.
4. `int getSize()`: This method returns the size of the data buffer.
5. `int getOffset()`: This method returns the offset of the data buffer.
================================================================

Sample: 19 DataBufferShort
----------------------------------------------------------------
1. `short getElem(int bank, int i)`: This method returns the short data elements from the specified bank and index.
2. `short[] getData(int bank)`: This method returns the short data array for the specified bank.
3. `void setElem(int bank, int i, short val)`: This method sets the short data element at the specified bank and index to the given value.
4. `short[] getBankData()`: This method returns the short data array for all banks.
5. `short[] getData()`: This method returns the short data array for all banks in packed form.
================================================================

Sample: 20 DataBufferUShort
----------------------------------------------------------------
1. `short[] getData()`: Returns the data stored in this DataBufferUShort as a short array.
2. `int getElem(int bank, int i)`: Returns the data element at the specified bank index and offset.
3. `void setElem(int bank, int i, int val)`: Sets the data element at the specified bank index and offset to the specified value.
4. `DataBufferUShort createSubset(int offset, int size)`: Creates a new DataBufferUShort object with a subset of the data elements from this buffer.
5. `int getElem(int i)`: Returns the data element at the specified index in this DataBufferUShort.
================================================================

Sample: 21 DirectColorModel
----------------------------------------------------------------
1. `int getRed(int pixel)`: This method returns the red color component from the specified pixel value.
2. `int getGreen(int pixel)`: This method returns the green color component from the specified pixel value.
3. `int getBlue(int pixel)`: This method returns the blue color component from the specified pixel value.
4. `int getAlpha(int pixel)`: This method returns the alpha value (transparency) from the specified pixel value.
5. `int getDataElements(int[] components, int offset)`: This method returns an array of data elements that represent the color components in the specified pixel value.
================================================================

Sample: 22 FilteredImageSource
----------------------------------------------------------------
1. `ImageProducer getSource()`: This method returns the ImageProducer that is used as the source for this FilteredImageSource.

2. `void genRect(int x, int y, int w, int h)`: This method generates an area of pixels for the filter to work with, given a rectangle.

3. `void resendTopDownLeftRight(ImageConsumer ic)`: This method requests that the ImageProducer resend the entire image data in top-down, left-right order to the specified ImageConsumer.

4. `void resendTopDownLeftRight(SourceGraphics sg)`: This method requests that the ImageProducer resend the image data to the specified SourceGraphics object.

5. `void startProduction(ImageConsumer ic)`: This method starts production of the filter image on the specified ImageConsumer.
================================================================

Sample: 23 ImageFilter
----------------------------------------------------------------
1. `BufferedImage createCompatibleDestImage(BufferedImage src, ColorModel destCM)`: This method creates a zeroed destination image with the correct size and number of bands, given this source.
   
2. `void setDimensions(int width, int height)`: This method sets the dimensions of the image being filtered.

3. `void setColorModel(ColorModel model)`: This method sets the ColorModel used for filtering.

4. `void setHints(int hints)`: This method sets the hints which determine the processing or rendering algorithm.

5. `void setPixels(int x, int y, int w, int h, ColorModel model, int[] pixels, int offset, int scansize)`: This method delivers the bits of the image within the specified region.
================================================================

Sample: 24 IndexColorModel
----------------------------------------------------------------
1. `int getRed(int pixel)`: This method returns the red component of the specified pixel.
2. `int getGreen(int pixel)`: This method returns the green component of the specified pixel.
3. `int getBlue(int pixel)`: This method returns the blue component of the specified pixel.
4. `int getAlpha(int pixel)`: This method returns the alpha component of the specified pixel.
5. `int getTransparentPixel()`: This method returns the pixel value that should be treated as transparent.
================================================================

Sample: 25 Kernel
----------------------------------------------------------------
1. `int getXOrigin()`: This method returns the X origin of this Kernel.
2. `int getYOrigin()`: This method returns the Y origin of this Kernel.
3. `int getWidth()`: This method returns the width of this Kernel.
4. `int getHeight()`: This method returns the height of this Kernel.
5. `float[] getKernelData(float[] data)`: This method returns the data for this Kernel into the specified array.
================================================================

Sample: 26 LookupOp
----------------------------------------------------------------
1. `BufferedImage filter(BufferedImage src, BufferedImage dest)`: This method applies a lookup operation on the input image and stores the result in the destination image.
2. `int getOffset()`: Returns the offset value used for the lookup operation.
3. `ShortLookupTable getTable()`: Returns the lookup table used for the operation.
4. `int getType()`: Returns the type of the lookup operation.
5. `int[] lookupPixel(int[] srcs, int[] dest)` : This method performs a lookup operation on the input pixel values and stores the result in the destination pixel values array.
================================================================

Sample: 27 LookupTable
----------------------------------------------------------------
1. `int getOffset()`: This method returns the offset of this lookup table.
2. `int[] getTable()`: This method returns a copy of the data array of this lookup table.
3. `int[] lookupPixel(int[] src, int[] dest)`: This method applies a lookup table transformation to a single pixel in the source and returns the result in the destination array.
4. `short[][] getTableValues()`: This method returns a copy of the array of short data that represents the lookup table values.
5. `boolean isIdentity()` : This method returns true if this lookup table is an identity operation.
================================================================

Sample: 28 MemoryImageSource
----------------------------------------------------------------
1. `void setAnimated()`: This method sets this MemoryImageSource to indicate that it will be producing images which are themselves animated.
2. `void newPixels()`: This method request information on the fact that a set of new data is to be delivered to this MemoryImageSource.
3. `void setFullBufferUpdates()`: This method indicates that this MemoryImageSource will now wait until every row of the image has changed to send the updated data.
4. `void setHints(int hints)`: This method sets the context of this MemoryImageSource as defined by the specified image creation flags.
5. `void newPixels(int x, int y, int w, int h)`: This method is called when a set of new data is to be delivered to this MemoryImageSource.
================================================================

Sample: 29 MultiPixelPackedSampleModel
----------------------------------------------------------------
1. `int getOffset()`: This method returns the offset within each pixel from the start of the data array.
2. `int getSampleSize()`: This method returns the number of bits used to represent an individual sample.
3. `int[] getSampleSize(int index)`: This method returns an array of number of bits used to represent each sample in the pixel specified by the index.
4. `int[] getBitMasks()`: This method returns an array of bit masks representing pixels within a sample.
5. `int getScanlineStride()`: This method returns the number of data array elements between a sample of adjacent pixels in a row.
================================================================

Sample: 30 PackedColorModel
----------------------------------------------------------------
1. `int getRed(Object inData)`: This method returns the red color component from a pixel value.
2. `int getGreen(Object inData)`: This method returns the green color component from a pixel value.
3. `int getBlue(Object inData)`: This method returns the blue color component from a pixel value.
4. `int getAlpha(Object inData)`: This method returns the alpha (transparency) component from a pixel value.
5. `int getRGB(Object inData)`: This method returns the RGB value representing the color from a pixel value.
================================================================

Sample: 31 PixelGrabber
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the image.
2. `int getHeight()`: This method returns the height of the image.
3. `int[] getPixels()`: This method returns an array of pixel data in the default RGB color model.
4. `void grabPixels()`: This method grabs the pixels from the Image and stores them in the pixel array.
5. `int getStatus()`: This method returns the status of the pixel grabbing operation.
================================================================

Sample: 32 PixelInterleavedSampleModel
----------------------------------------------------------------
1. `int getPixelStride()`: This method returns the pixel stride of the sample model.
2. `int getScanlineStride()`: This method returns the scanline stride of the sample model.
3. `int getBandOffset(int band)`: This method returns the offset within the data array for the specified band.
4. `DataBuffer getDataBuffer()`: This method returns the data buffer associated with this sample model.
5. `int[] getSampleSize()`: This method returns an array of the number of bits for each band.
================================================================

Sample: 33 Raster
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the Raster.
2. `int getHeight()`: This method returns the height of the Raster.
3. `int[] getPixel(int x, int y, int[] iArray)`: This method returns an array of samples of the pixels in a specified band for the specified rectangle of pixels.
4. `int getSample(int x, int y, int b)`: This method returns the sample in a specified band for the pixel located at (x, y).
5. `void setDataElements(int x, int y, Object obj)`: This method sets the data elements for the specified pixel.
================================================================

Sample: 34 ReplicateScaleFilter
----------------------------------------------------------------
1. `int getWidth()`: This method returns the width of the replicated image.
2. `int getHeight()`: This method returns the height of the replicated image.
3. `int[] filterPixels(int x, int y, int w, int h, int[] inPixels)`: This method applies a scaling filter to the specified rectangle of pixels and returns the resulting pixels.
4. `void setHints(int hints)`: This method sets the hints for the scaling operation.
5. `int getHints()`: This method returns the hints for the scaling operation.
================================================================

Sample: 35 RescaleOp
----------------------------------------------------------------
1. BufferedImage filter(BufferedImage src, BufferedImage dest): This method filters the input image and stores the result in the destination image.
2. void setScaleFactors(float[] scaleFactors): This method sets the scale factors for each band in the image.
3. void setOffsets(float[] offsets): This method sets the offset values for each band in the image.
4. void setAlphaOffset(float offset): This method sets the offset value for the alpha band in the image.
5. void setScaleFactor(float scaleFactor): This method sets the scale factor for all bands in the image to the same value.
================================================================

Sample: 36 RGBImageFilter
----------------------------------------------------------------
1. `int getRGB(int x, int y)`: This method returns the RGB value of the pixel at the specified coordinates.
2. `void setRGB(int x, int y, int rgb)`: This method sets the RGB value of the pixel at the specified coordinates.
3. `void canFilterIndexColorModel(IndexColorModel model)`: This method determines if this filter can modify the indexed pixels.
4. `int filterRGB(int x, int y, int rgb)`: This method filters the RGB values of the pixel at the specified coordinates.
5. `IndexColorModel getIndexColorModel(ColorModel cm, IndexColorModel icm)`: This method returns the IndexColorModel for filtering indexed pixels.
================================================================

Sample: 37 SampleModel
----------------------------------------------------------------
1. `int getDataType()`: This method returns the data type of the data elements.
2. `int[] getSampleSize()`: This method returns an array of sample sizes for each band.
3. `int getNumBands()`: This method returns the number of bands in the sample model.
4. `SampleModel createCompatibleSampleModel(int w, int h)`: This method creates a new SampleModel with the specified width and height.
5. `boolean equals(Object obj)`: This method compares the specified object with this SampleModel for equality.
================================================================

Sample: 38 ShortLookupTable
----------------------------------------------------------------
1. `int getEntry(int index)`: This method returns the table entry at the specified index.
   
2. `int[] getTable()`: This method returns the table array.

3. `void setEntry(int index, int value)`: This method sets the table entry at the specified index to the given value.

4. `ShortLookupTable createInverseTable()`: This method creates and returns an inverse table of the current table.

5. `int getOffset()`: This method returns the offset of the table.
================================================================

Sample: 39 SinglePixelPackedSampleModel
----------------------------------------------------------------
1. `int getSample(int x, int y, int b)`: This method returns the sample at the specified coordinates and band.
2. `void setDataElements(int x, int y, int w, int h, Object obj, DataBuffer data): This method sets the data elements for a rectangular region of the image.
3. `void setPixel(int x, int y, int iArray[])`: This method sets all samples for a pixel from an array of samples.
4. `int[] getPixel(int x, int y, int iArray[])`: This method retrieves samples for a pixel and stores them in an array.
5. `int[] getPixels(int x, int y, int w, int h, int iArray[], DataBuffer data): This method retrieves samples from a rectangular region and stores them in an array.
================================================================

Sample: 40 VolatileImage
----------------------------------------------------------------
1. `void validate(int numBuffers)`: This method validates the creation or revalidation of the image with the specified number of buffers.
2. `Graphics2D createGraphics()`: This method returns a Graphics2D, which can be used to draw into this VolatileImage.
3. `ImageCapabilities getCapabilities()`: This method returns the ImageCapabilities object that describes the capabilities of this VolatileImage.
4. `int getWidth()`: This method returns the width of this VolatileImage in pixels.
5. `int getHeight()`: This method returns the height of this VolatileImage in pixels.
================================================================

Sample: 41 WritableRaster
----------------------------------------------------------------
1. `void setDataElements(int x, int y, Object inData)`: This method sets the data elements in the specified rectangular region of the image from a java array of pixel data.
2. `Object getDataElements(int x, int y, Object outData)`: This method returns the data elements from the specified rectangular region of the image into a java array of pixel data.
3. `void setPixel(int x, int y, int[] iArray)`: This method sets the data elements for a specified pixel in the image from an integer array of pixel data.
4. `void getPixel(int x, int y, int[] iArray)`: This method returns the data elements for a specified pixel in the image into an integer array of pixel data.
5. `WritableRaster createCompatibleWritableRaster()`: This method creates a new WritableRaster with the same size, sample model, and data buffer as this raster.
================================================================

