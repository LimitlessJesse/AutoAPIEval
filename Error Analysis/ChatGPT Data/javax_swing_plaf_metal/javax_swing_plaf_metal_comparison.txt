Sample: 0 DefaultMetalTheme
----------------------------------------------------------------
1. `javax.swing.plaf.metal.MetalTheme getDefault()`: This method returns the default Metal Theme.
2. `javax.swing.plaf.metal.MetalTheme[] getAvailableThemes()`: This method returns an array of available Metal Themes.
3. `javax.swing.plaf.metal.OceanTheme getOcean()`: This method returns the Ocean Theme.
4. `void initialize()`: This method initializes the Metal Theme.
5. `void addCustomEntriesToTable(UIDefaults table)`: This method adds custom entries to the UIDefaults table.
================================================================

Sample: 1 MetalBorders
----------------------------------------------------------------
1. `Border getButtonBorder()`: Returns the border for a JButton component in the Metal look and feel.
2. `Border getDesktopIconBorder()`: Returns the border for a JInternalFrame.JDesktopIcon component in the Metal look and feel.
3. `Border getInternalFrameBorder()`: Returns the border for a JInternalFrame component in the Metal look and feel.
4. `Border getMenuItemBorder()`: Returns the border for a JMenuItem component in the Metal look and feel.
5. `Border getRadioButtonBorder()`: Returns the border for a JRadioButton component in the Metal look and feel.
================================================================

Sample: 2 MetalBorders.ButtonBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
4. `boolean isBorderOpaque(javax.swing.JComponent c)`: This method returns true if the border is opaque for the specified JComponent, false otherwise.
5. `javax.swing.border.BorderUIResource getBorder(javax.swing.JComponent c)`: This method returns the border for the specified JComponent.
================================================================

Sample: 3 MetalBorders.Flush3DBorder
----------------------------------------------------------------
1. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified bounds.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns the border insets for the specified component.
4. `boolean isBorderOpaque(Graphics g)`: This method returns whether or not the border is opaque for the specified Graphics object.
5. `void paintRidgeBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints a ridge border for the specified component with the specified bounds.
================================================================

Sample: 4 MetalBorders.InternalFrameBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `int getBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
4. `void finalize()`: This method cleans up any resources being used by the border.
5. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
================================================================

Sample: 5 MetalBorders.MenuBarBorder
----------------------------------------------------------------
1. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context and bounds.

2. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.

3. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.

4. `void setInsets(Insets insets)`: This method sets the border insets to the specified value.

5. `boolean isBorderOpaque(Component c)`: This method returns whether or not the border is opaque for the specified component.
================================================================

Sample: 6 MetalBorders.MenuItemBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context, location, and size.
3. `boolean isBorderOpaque()`: This method returns whether the border is opaque.
4. `MetalBorders.MenuItemBorder()`: Constructor for creating a new instance of MenuItemBorder.
5. `Rectangle getInteriorRectangle(Component c, int x, int y, int width, int height)`: This method returns the interior rectangle for the specified component with the specified location and size.
================================================================

Sample: 7 MetalBorders.OptionDialogBorder
----------------------------------------------------------------
1. `Border getOptionPaneBorder()`: This method returns the border for an option pane.
2. `Border getButtonBorder()`: This method returns the border for buttons in a dialog.
3. `Border getButtonBorder(boolean isDefaultButton)`: This method returns the border for a button based on whether it is the default button or not.
4. `Border getSeparatorBorder()`: This method returns the border for a separator in a dialog.
5. `Border getInteriorFrameBorder()`: This method returns the border for the interior of a frame.
================================================================

Sample: 8 MetalBorders.PaletteBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `int getBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component and returns the size of the border.
3. `void setPalette(Icon palette)`: This method sets the palette icon to be used for the border.
4. `void setStyle(int style)`: This method sets the style of the border.
5. `Icon getPalette()`: This method returns the current palette icon used for the border.
================================================================

Sample: 9 MetalBorders.PopupMenuBorder
----------------------------------------------------------------
1. `boolean isBorderOpaque()`: This method returns a boolean value indicating whether or not the border is opaque.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position, size, and graphics context.
3. `Insets getBorderInsets(Component c, Insets insets)`: This method returns an Insets object containing the border's insets for the specified component.
4. `boolean isBorderInsetsSet()`: This method returns a boolean value indicating whether or not the border insets have been set.
5. `void setBorderInsets(Component c, Insets insets)`: This method sets the border insets for the specified component.
================================================================

Sample: 10 MetalBorders.RolloverButtonBorder
----------------------------------------------------------------
1. `void RolloverButtonBorder()`: Constructor for creating a new RolloverButtonBorder instance.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: Paints the border for a RolloverButton.
3. `Insets getBorderInsets(Component c)`: Returns the border insets for a RolloverButton.
4. `boolean isBorderOpaque()`: Returns whether or not the border is opaque.
5. `void setButton(JButton button)`: Sets the button for which this border is being painted.
================================================================

Sample: 11 MetalBorders.ScrollPaneBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void setScrollBarsVisible(boolean scrollBarsVisible)`: This method sets whether the scroll bars are visible.
4. `Color getHighlightColor()`: This method returns the highlight color.
5. `Color getPrimaryControlDarkShadow()`: This method returns the primary control dark shadow color.
================================================================

Sample: 12 MetalBorders.TableHeaderBorder
----------------------------------------------------------------
1. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified graphics context and dimensions.
2. `boolean isBorderOpaque()`: This method returns a boolean value indicating whether the border is opaque or not.
3. `Insets getBorderInsets(Component c)`: This method returns an Insets object containing the border insets for the specified component.
4. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border should be opaque or not based on the boolean parameter.
5. `void configureColor(Color highlight, Color shadow, Color darkShadow, Color lightHighlight)`: This method configures the colors used for the border.
================================================================

Sample: 13 MetalBorders.TextFieldBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used as the border of a component.
2. `boolean isBorderOpaque()`: This method returns whether or not the border is opaque.
3. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component with the specified position and size.
4. `void setBorderOpaque(boolean isOpaque)`: This method sets whether or not the border is opaque.
5. `void updateBorder(Component c)`: This method updates the border of the specified component.
================================================================

Sample: 14 MetalBorders.ToggleButtonBorder
----------------------------------------------------------------
1. `Border getBorder()`: This method returns the border object used for the toggle button.
2. `Insets getBorderInsets(Component c)`: This method returns the insets of the border.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
4. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified toggle button component.
5. `void setBorderOpaque(boolean isOpaque)`: This method sets whether the border should be opaque or not.
================================================================

Sample: 15 MetalBorders.ToolBarBorder
----------------------------------------------------------------
1. `Insets getBorderInsets(Component c)`: This method returns the border insets for the specified component.
2. `void paintBorder(Component c, Graphics g, int x, int y, int width, int height)`: This method paints the border for the specified component.
3. `boolean isBorderOpaque()`: This method returns true if the border is opaque, false otherwise.
4. `BorderUIResource createToolBarBorder()`: This method creates a new instance of ToolBarBorder as a BorderUIResource.
5. `boolean isToolBarButton()`: This method returns true if the toolbar is a toolbar button, false otherwise.
================================================================

Sample: 16 MetalButtonUI
----------------------------------------------------------------
1. `BasicButtonUI createUI(JComponent c)`: This method creates a new instance of MetalButtonUI for a specified JComponent.
2. `void paint(Graphics g, JComponent c)`: This method paints the specified JComponent using the provided Graphics object.
3. `void update(Graphics g, JComponent c)`: This method updates the specified JComponent using the provided Graphics object.
4. `void installUI(JComponent c)`: This method installs the MetalButtonUI for a specified JComponent.
5. `void uninstallUI(JComponent c)`: This method uninstalls the MetalButtonUI for a specified JComponent.
================================================================

Sample: 17 MetalCheckBoxIcon
----------------------------------------------------------------
1. `Icon getDisabledIcon()`: This method returns the disabled icon for the checkbox.
2. `Icon getIconForState(int state)`: This method returns the icon for the specified state of the checkbox.
3. `Icon getSelectedIconForState(int state)`: This method returns the selected icon for the specified state of the checkbox.
4. `Icon getIconForCheckbox(): This method returns the icon for the checkbox itself.
5. `Icon getIconForCheckbox(int state)`: This method returns the icon for the checkbox for the specified state.
================================================================

Sample: 18 MetalCheckBoxUI
----------------------------------------------------------------
1. `Icon getDisabledSelectedIcon(JComponent c)`: Returns the disabled selected icon for the specified component.
2. `void paintFocus(Graphics g, AbstractButton b, Rectangle viewRect, Rectangle textRect, Rectangle iconRect)`: Paints the focus for the specified AbstractButton within the specified rectangles.
3. `void paintIcon(Graphics g, JComponent c, Rectangle iconRect)`: Paints the icon for the specified component within the specified rectangle.
4. `void paintText(Graphics g, JComponent c, Rectangle textRect, String text)`: Paints the text for the specified component within the specified rectangle using the specified text.
5. `boolean isFocusTraversable(JComponent c)`: Returns true if the specified component is focus traversable.
================================================================

Sample: 19 MetalComboBoxButton
----------------------------------------------------------------
1. `void setEditable(boolean isEditable)`: Sets whether the combo box is editable.
2. `void setBorderPainted(boolean isPainted)`: Sets whether the combo box's border should be painted.
3. `void setMargin(Insets margin)`: Sets the space between the border and the combo box's contents.
4. `void setMaximumRowCount(int count)`: Sets the maximum number of rows the combo box should display.
5. `void setLightWeightPopupEnabled(boolean enabled)`: Sets whether lightweight popups are enabled for the combo box.
================================================================

Sample: 20 MetalComboBoxEditor
----------------------------------------------------------------
1. `Component getEditorComponent()`: This method returns the editor component used for editing the combo box's item.
2. `Object getItem()`: This method returns the current item being edited.
3. `void selectAll()`: This method selects all the text in the editor component.
4. `void setItem(Object anObject)`: This method sets the item that the editor is editing to the specified object.
5. `void removeEditor()`: This method removes the editor and its listeners from the combo box.
================================================================

Sample: 21 MetalComboBoxEditor.UIResource
----------------------------------------------------------------
1. `void setBorder(Border border)`: Sets the border of the combo box editor.
2. `void setForeground(Color fg)`: Sets the foreground color of the combo box editor.
3. `void setBackground(Color bg)`: Sets the background color of the combo box editor.
4. `Dimension getPreferredSize()`: Returns the preferred size of the combo box editor.
5. `boolean isOpaque()`: Returns whether the combo box editor is opaque.
================================================================

Sample: 22 MetalComboBoxIcon
----------------------------------------------------------------
1. `int getIconWidth()`: Returns the fixed width of the metal combo box icon.
2. `int getIconHeight()`: Returns the fixed height of the metal combo box icon.
3. `void paintIcon(Component c, Graphics g, int x, int y)`: Paints the metal combo box icon.
4. `boolean isFocusable()`: Returns true if the metal combo box icon is focusable, false otherwise.
5. `void setFocusable(boolean focusable)`: Sets whether the metal combo box icon is focusable or not.
================================================================

Sample: 23 MetalComboBoxUI
----------------------------------------------------------------
1. `void setButtonSize(JComboBox c)`: Sets the size of the combo box button.
2. `void setPopupSize(MetalComboBoxUI ui, JComboBox c)`: Sets the size of the combo box popup.
3. `Object getPropertyPrefix()`: Returns the prefix used when looking up resources.
4. `void configureEditor()`: Configures the editor component.
5. `void setPopupVisible(JComboBox c, boolean v)`: Sets whether the popup is visible.
================================================================

Sample: 24 MetalDesktopIconUI
----------------------------------------------------------------
1. `void deiconify()`: This method deiconifies the desktop icon.
2. `void maximize()`: This method maximizes the desktop icon.
3. `void minimize()`: This method minimizes the desktop icon.
4. `void openFrame()`: This method opens the frame associated with the desktop icon.
5. `void updateSize()`: This method updates the size of the desktop icon.
================================================================

Sample: 25 MetalFileChooserUI
----------------------------------------------------------------
1. `JFileChooser createFileChooser(JFileChooser filechooser)`: This method creates a new instance of JFileChooser.
2. `FileView createFileView(JFileChooser filechooser)`: This method creates a new instance of FileView.
3. `PropertyChangeListener createPropertyChangeListener(JFileChooser filechooser)`: This method creates a new instance of PropertyChangeListener.
4. `void ensureFileIsVisible(JFileChooser filechooser, File f)`: This method ensures that the specified file is visible in the file chooser.
5. `String getFileName()`: This method returns the name of the selected file.
================================================================

Sample: 26 MetalIconFactory
----------------------------------------------------------------
1. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an Icon for representing a tree control.
2. `Icon getMenuItemCheckIcon()`: This method returns an Icon for representing a check mark on a menu item.
3. `Icon getMenuItemArrowIcon()`: This method returns an Icon for representing an arrow on a menu item.
4. `Icon getCheckBoxIcon()`: This method returns an Icon for representing a checkbox.
5. `Icon getRadioButtonIcon()`: This method returns an Icon for representing a radio button.
================================================================

Sample: 27 MetalIconFactory.FileIcon16
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns an Icon object representing a tree folder icon.
2. `Icon getTreeLeafIcon()`: This method returns an Icon object representing a tree leaf icon.
3. `Icon getFileIcon(boolean fileType)`: This method returns an Icon object representing a file icon, with the option to specify whether it is a file type or not.
4. `Icon getComputerIcon()`: This method returns an Icon object representing a computer icon.
5. `Icon getDriveIcon(boolean floppy)` This method returns an Icon object representing a drive icon, with the option to specify whether it is a floppy drive or not.
================================================================

Sample: 28 MetalIconFactory.FolderIcon16
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns the default folder icon for a tree.
2. `Icon getTreeLeafIcon()`: This method returns the default leaf icon for a tree.
3. `Icon getTreeClosedIcon()`: This method returns the default closed icon for a tree.
4. `Icon getTreeOpenIcon()`: This method returns the default open icon for a tree.
5. `Icon getFloppyDriveIcon()`: This method returns an icon representing a floppy drive.
================================================================

Sample: 29 MetalIconFactory.PaletteCloseIcon
----------------------------------------------------------------
1. `Dimension getPreferredSize()`: This method returns the preferred size of the icon.
2. `void paintIcon(Component c, Graphics g, int x, int y)`: This method paints the icon at the specified location on the graphics object.
3. `int getIconWidth()`: This method returns the width of the icon.
4. `int getIconHeight()`: This method returns the height of the icon.
5. `MetalIconFactory.PaletteCloseIcon()`: Constructor for creating a new instance of the PaletteCloseIcon.
================================================================

Sample: 30 MetalIconFactory.TreeControlIcon
----------------------------------------------------------------
1. `Icon getExpandedIcon()`: This method returns the icon for an expanded tree node.
2. `Icon getCollapsedIcon()`: This method returns the icon for a collapsed tree node.
3. `Icon getLeafIcon()`: This method returns the icon for a leaf tree node.
4. `Icon getExpandedControlIcon(boolean isCollapsed)`: This method returns the icon for either an expanded or collapsed tree node based on the boolean parameter.
5. `Icon getCollapsedControlIcon(boolean isCollapsed)`: This method returns the icon for either a collapsed or expanded tree node based on the boolean parameter.
================================================================

Sample: 31 MetalIconFactory.TreeFolderIcon
----------------------------------------------------------------
1. `Icon getTreeFolderIcon()`: This method returns an icon for representing a tree folder.
2. `Icon getTreeFolderLeafIcon()`: This method returns an icon for representing a tree folder leaf.
3. `Icon getTreeFolderOpenIcon()`: This method returns an icon for representing an opened tree folder.
4. `Icon getTreeLeafIcon()`: This method returns an icon for representing a tree leaf.
5. `Icon getTreeControlIcon(boolean isCollapsed)`: This method returns an icon for representing a tree control with the specified collapsed state.
================================================================

Sample: 32 MetalIconFactory.TreeLeafIcon
----------------------------------------------------------------
1. `Icon getTreeLeafIcon()`: Returns the TreeLeafIcon for use in a Tree.
2. `Dimension getPreferredSize()`: Returns the preferred size of the TreeLeafIcon.
3. `void paintIcon(Component c, Graphics g, int x, int y)`: Paints the TreeLeafIcon at the specified location.
4. `int getIconWidth()`: Returns the width of the TreeLeafIcon.
5. `int getIconHeight()`: Returns the height of the TreeLeafIcon.
================================================================

Sample: 33 MetalInternalFrameTitlePane
----------------------------------------------------------------
1. `void paintComponent(Graphics g)`: This method paints the internal frame title pane.
2. `Dimension getPreferredSize()`: This method returns the preferred size of the internal frame title pane.
3. `ButtonModel getDefaultButtonModel()`: This method returns the default button model for the internal frame title pane.
4. `Icon getFrameIcon()`: This method returns the icon for the internal frame title pane.
5. `boolean isOpaque()`: This method returns whether the internal frame title pane is opaque.
================================================================

Sample: 34 MetalInternalFrameUI
----------------------------------------------------------------
1. `void setNorthPane(JComponent c)`: This method sets the component to be used for the north pane of the internal frame.
2. `JComponent getNorthPane()`: This method returns the component used for the north pane of the internal frame.
3. `void setSouthPane(JComponent c)`: This method sets the component to be used for the south pane of the internal frame.
4. `JComponent getSouthPane()`: This method returns the component used for the south pane of the internal frame.
5. `void setEastPane(JComponent c)`: This method sets the component to be used for the east pane of the internal frame.
================================================================

Sample: 35 MetalLabelUI
----------------------------------------------------------------
1. `void paint(Graphics g, JComponent c)`: This method paints the label.
2. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the label.
3. `void installUI(JComponent c)`: This method installs the UI settings for the label component.
4. `void uninstallUI(JComponent c)`: This method uninstalls the UI settings for the label component.
5. `void update(Graphics g, JComponent c)`: This method updates the label.
================================================================

Sample: 36 MetalLookAndFeel
----------------------------------------------------------------
1. `void setCurrentTheme(Theme theme)`: This method sets the current theme for the Metal Look and Feel.
2. `Theme getCurrentTheme()`: This method returns the current theme for the Metal Look and Feel.
3. `boolean isNativeLookAndFeel()`: This method checks if the Metal Look and Feel is using the system's native look and feel.
4. `void setTheme(Theme theme)`: This method sets the theme for the Metal Look and Feel.
5. `boolean isSupportedLookAndFeel()`: This method checks if the Metal Look and Feel is supported on the current platform.
================================================================

Sample: 37 MetalMenuBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the appropriate UI delegate on the specified component.
2. `void uninstallUI(JComponent c)`: This method removes the UI delegate from the specified component.
3. `Rectangle getMenuBarBounds(JComponent c)`: This method returns the bounds of the menu bar for the specified component.
4. `boolean isMouseOpaque()`: This method returns whether or not the menu bar is mouse-opaque.
5. `boolean isFocusTraversable()`: This method returns whether or not the menu bar is focus-traversable.
================================================================

Sample: 38 MetalPopupMenuSeparatorUI
----------------------------------------------------------------
1. `void paint(java.awt.Graphics g, javax.swing.JComponent c)`: This method paints the separator.
2. `javax.swing.JSeparator createSeparator()`: This method creates the separator component.
3. `int getAdditionalHeight()`: This method returns the additional height needed to render the separator.
4. `int getPreferredHeight()`: This method returns the preferred height of the separator.
5. `int getSeparatorHeight()`: This method returns the height of the separator.
================================================================

Sample: 39 MetalProgressBarUI
----------------------------------------------------------------
1. `void paintDeterminate(Graphics g, JComponent c)`: This method draws the determinate portion of the progress bar.
2. `void paintIndeterminate(Graphics g, JComponent c)`: This method draws the indeterminate portion of the progress bar.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the progress bar.
4. `void setSecondaryProgressValue(JProgressBar pb, int value)`: This method sets the value of the secondary progress bar in a compound progress bar.
5. `void setBoxRect(int x, int y, int width, int height)`: This method sets the bounding rectangle for the progress bar.
================================================================

Sample: 40 MetalRadioButtonUI
----------------------------------------------------------------
1. `Icon getDefaultIcon()`: This method returns the default icon for the radio button.

2. `Icon getPressedIcon()`: This method returns the icon displayed when the radio button is pressed.

3. `Icon getSelectedIcon()`: This method returns the icon displayed when the radio button is selected.

4. `Icon getDisabledIcon()`: This method returns the icon displayed when the radio button is disabled.

5. `Icon getDisabledSelectedIcon()`: This method returns the icon displayed when the radio button is disabled and selected.
================================================================

Sample: 41 MetalRootPaneUI
----------------------------------------------------------------
1. `void installDefaults(JRootPane rootPane)`: This method installs the necessary UI defaults for MetalRootPaneUI on the specified JRootPane.
2. `void uninstallDefaults(JRootPane rootPane)`: This method uninstalls the UI defaults from the specified JRootPane.
3. `void installKeyboardActions(JRootPane rootPane)`: This method installs the necessary keyboard actions for MetalRootPaneUI on the specified JRootPane.
4. `void uninstallKeyboardActions(JRootPane rootPane)`: This method uninstalls the keyboard actions from the specified JRootPane.
================================================================

Sample: 42 MetalScrollBarUI
----------------------------------------------------------------
1. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
2. `void uninstallUI(JComponent c)`: This method uninstalls the UI delegate for the specified component.
3. `void paintTrack(Graphics g, JComponent c, Rectangle trackBounds)`: This method paints the track of the scrollbar.
4. `void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)`: This method paints the thumb of the scrollbar.
5. `void scrollByUnit(int direction)`: This method scrolls the scrollbar by a unit increment in the specified direction.
================================================================

Sample: 43 MetalScrollButton
----------------------------------------------------------------
1. `ArrowButtonUI createUI(JComponent c)`: This method creates a new instance of Metal's ArrowButtonUI for a specified Swing component.
2. `boolean isClickSpot(int x, int y)`: This method checks if the specified coordinates are within the clickable area of the scroll button.
3. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the Metal scroll button for a specified Swing component.
4. `void setDirection(int direction)`: This method sets the direction (up, down, left, right) of the scroll button.
5. `void setScrollsByBlock(boolean scrollsByBlock)`: This method sets whether the scroll button should scroll by block increments.
================================================================

Sample: 44 MetalScrollPaneUI
----------------------------------------------------------------
1. `JComponent createIncreaseButton(int orientation)`: This method creates and returns the increase button for the scrollbar.
2. `JComponent createDecreaseButton(int orientation)`: This method creates and returns the decrease button for the scrollbar.
3. `JComponent createTrackListener()`: This method creates and returns a listener for the track of the scrollbar.
4. `JScrollBar createVerticalScrollBar()`: This method creates and returns the vertical scrollbar component.
5. `JScrollBar createHorizontalScrollBar()`: This method creates and returns the horizontal scrollbar component.
================================================================

Sample: 45 MetalSeparatorUI
----------------------------------------------------------------
1. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size of the separator component.
2. `void paint(Graphics g, JComponent c)`: This method paints the separator using the provided graphics context.
3. `boolean isOpaque()`: This method returns true if the separator is opaque, false otherwise.
4. `void paintVertical(Graphics g, JSeparator s)`: This method paints a vertically oriented separator.
5. `void paintHorizontal(Graphics g, JSeparator s)`: This method paints a horizontally oriented separator.
================================================================

Sample: 46 MetalSliderUI
----------------------------------------------------------------
1. `void calculateGeometry()`: This method recalculates the geometry of the slider.
2. `void paintTrack(Graphics g)`: This method paints the track of the slider.
3. `void paintThumb(Graphics g)`: This method paints the thumb of the slider.
4. `int scrollDueToClickInTrack(int direction)`: This method calculates the scroll amount when the track is clicked.
5. `Rectangle getTrackRect()`: This method returns the bounding rectangle of the track.
================================================================

Sample: 47 MetalSplitPaneUI
----------------------------------------------------------------
1. `BasicSplitPaneDivider createDefaultDivider()`: This method creates a default split pane divider component.
2. `void finishPaint()`: This method is used to clean up any resources used during the painting of the split pane.
3. `AbstractButton createLeftOneTouchButton()`: This method creates a one-touch button for the left side of the divider.
4. `AbstractButton createRightOneTouchButton()`: This method creates a one-touch button for the right side of the divider.
5. `void uninstallListeners()`: This method removes any listeners that were added by the MetalSplitPaneUI.
================================================================

Sample: 48 MetalTabbedPaneUI
----------------------------------------------------------------
1. `Rectangle getTabBounds(JTabbedPane tabbedPane, int tabIndex)`: This method returns the bounding rectangle for the specified tab in the given JTabbedPane.
2. `int tabForCoordinate(JTabbedPane tabbedPane, int x, int y)`: This method returns the tab index for the tab at the specified coordinates within the given JTabbedPane.
3. `boolean scrollableTabLayoutEnabled(JTabbedPane tabbedPane)`: This method returns true if scrollable tab layout is enabled for the given JTabbedPane.
4. `int calculateMaxTabHeight(int tabPlacement)`: This method calculates and returns the maximum height of a tab based on the given tab placement.
5. `void ensureCurrentLayout()` : This method ensures that the current layout is up-to-date.
================================================================

Sample: 49 MetalTextFieldUI
----------------------------------------------------------------
1. `int getCaretWidth()`: This method returns the width of the caret.
2. `void setCaretColor(Color c)`: This method sets the color of the caret.
3. `boolean isOpaque()` : This method returns true if this component is completely opaque.
4. `void setDisabledTextColor(Color c)`: This method sets the text color to be used for disabled text.
5. `Color getDisabledTextColor()`: This method returns the text color to be used for disabled text.
================================================================

Sample: 50 MetalTheme
----------------------------------------------------------------
1. `int getControlHighlight()`: Returns the color used to render control highlight in the Metal Theme.
2. `ColorUIResource getPrimaryControlShadow()`: Returns the color used to render primary control shadow in the Metal Theme.
3. `FontUIResource getControlTextFont()`: Returns the font used to render control text in the Metal Theme.
4. `void addCustomEntriesToTable(UIDefaults table)`: Adds custom entries to the UIDefaults table for the Metal Theme.
5. `void addCustomBordersFromClassPath(UIDefaults table)`: Adds custom borders from the classpath to the UIDefaults table for the Metal Theme.
================================================================

Sample: 51 MetalToggleButtonUI
----------------------------------------------------------------
1. `void installDefaults(AbstractButton b)`: This method installs the default colors, icons, fonts, borders etc. for the specified AbstractButton.
   
2. `void installListeners(AbstractButton b)`: This method installs the necessary listeners on the specified AbstractButton for handling events.
   
3. `void uninstallDefaults(AbstractButton b)`: This method uninstalls the default settings such as colors, icons, fonts, borders etc. from the specified AbstractButton.
   
4. `void uninstallListeners(AbstractButton b)`: This method uninstalls the listeners that were previously installed on the specified AbstractButton.
   
5. `void paintButtonPressed(Graphics g, AbstractButton b)`: This method paints the button in a pressed state using the specified Graphics object and AbstractButton.
================================================================

Sample: 52 MetalToolBarUI
----------------------------------------------------------------
1. `Dimension minimumLayoutSize(Container c)`: This method returns the minimum dimensions needed to layout the components in the specified container.
2. `Dimension maximumLayoutSize(Container c)`: This method returns the maximum dimensions needed to layout the components in the specified container.
3. `Dimension preferredLayoutSize(Container c)`: This method calculates the preferred dimensions for the layout of components in the specified container.
4. `void installUI(JComponent c)`: This method installs the UI delegate for the specified component.
5. `void uninstallUI(JComponent c)`: This method removes the UI delegate from the specified component.
================================================================

Sample: 53 MetalToolTipUI
----------------------------------------------------------------
1. `JToolTip createToolTip()`: This method creates a new tooltip.
2. `boolean isFocusTraversable(JComponent component)`: This method returns true if the specified component is focus traversable.
3. `String getToolTipText(JToolTip toolTip, MouseEvent event)`: This method returns the tooltip text to display for a particular mouse event.
4. `void paint(Graphics g, JComponent c)`: This method paints the tooltip.
5. `Dimension getPreferredSize(JComponent c)`: This method returns the preferred size for the tooltip.
================================================================

Sample: 54 MetalTreeUI
----------------------------------------------------------------
1. `void setExpandedState(JTree tree, TreePath path, boolean expanded)`: This method sets the expanded state of a particular path in the tree.
2. `void cancelEditing(JTree tree)`: This method cancels the editing session.
3. `TreePath getNextMatch(String prefix, int startingRow, Position.Bias bias)`: This method returns the path to the next node whose string value starts with the specified prefix.
4. `boolean startEditingAtPath(JTree tree, TreePath path)`: This method initiates an editing session for the specified path in the tree.
5. `Rectangle getPathBounds(JTree tree, TreePath path)`: This method returns the bounding rectangle, in tree coordinates, for the specified tree path.
================================================================

Sample: 55 OceanTheme
----------------------------------------------------------------
1. `ColorUIResource getPrimary1()`: This method returns a ColorUIResource object representing the first primary color in the Ocean theme.
2. `FontUIResource getControlTextFont()`: This method returns a FontUIResource object representing the font used for control text in the Ocean theme.
3. `String getName()`: This method returns a String representing the name of the OceanTheme.
4. `ColorUIResource getTextBackground()`: This method returns a ColorUIResource object representing the background color for text in the Ocean theme.
5. `boolean isSystemTheme()`: This method returns a boolean indicating whether the OceanTheme is the system default theme.
================================================================

