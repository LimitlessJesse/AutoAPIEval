Sample: 0 BlockView
----------------------------------------------------------------
1. `View getToolTipView(float x, float y, Shape allocation)`: This method returns the view to use for a tooltip at the specified location.
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the block.
3. `float getMinimumSpan(int axis)`: This method returns the minimum span for the block.
4. `float getMaximumSpan(int axis)`: This method returns the maximum span for the block.
5. `int viewToModel(float x, float y, Shape a, Bias[] biasReturn)`: This method returns the model location that corresponds to the view location at (x, y).
================================================================

Sample: 1 CSS
----------------------------------------------------------------
1. `String getRule(String selector)`: This method returns the CSS rule for the specified selector.
2. `void putClientProperty(Object key, Object value)`: This method associates the specified value with the specified key in this CSS.
3. `Enumeration<?> getPropertyNames()`: This method returns an enumeration of all the keys in this CSS.
4. `String getValue(CSS.Attribute key)`: This method returns the value of the specified key in this CSS.
5. `void setValue(CSS.Attribute key, String value)`: This method sets the specified key to the specified value in this CSS.
================================================================

Sample: 2 CSS.Attribute
----------------------------------------------------------------
1. `String getValue()`: This method returns the value of the CSS attribute.
2. `boolean isDefined(Object attrValue)`: This method checks if the specified attribute value is defined.
3. `void remove()`: This method removes the CSS attribute.
4. `void setValue(String value)`: This method sets the value of the CSS attribute.
5. `String toString()`: This method returns a string representation of the CSS attribute.
================================================================

Sample: 3 FormSubmitEvent
----------------------------------------------------------------
1. `String getMethod()`: This method returns the HTTP method (GET, POST, etc) of the form submission.
2. `Dictionary<String, String> getData()`: This method returns a Dictionary object containing the data submitted with the form.
3. `String getTarget()`: This method returns the target frame or window for the form submission.
4. `URL getAction()`: This method returns the URL of the form action.
5. `boolean isImageSubmission()`: This method returns true if the form submission contains image data.
================================================================

Sample: 4 FormView
----------------------------------------------------------------
1. `FormView(Element elem)`: Constructor method which creates a new FormView for the specified Element.
2. `int getNextTabStop(int x, int tabOffset)`: Returns the next tab stop position to position x.
3. `void paint(Graphics g, Shape allocation)`: Renders the view using the given Graphics context and allocation area.
4. `Shape modelToView(int pos, Shape a, Position.Bias b)`: Converts the given location in the model to a view coordinate.
5. `void setParent(View parent)`: Sets the parent of the view.
================================================================

Sample: 5 HTML
----------------------------------------------------------------
1. `ElementIterator getIterator()`: Returns an iterator over the elements in this HTML document.
2. ` AttributeSet getCharacterAttribute(int pos)`: Returns the character attributes for the given position in the document.
3. ` AttributeSet getParagraphAttribute(int pos)`: Returns the paragraph attributes for the given position in the document.
4. ` Element getElement(int pos)`: Returns the element at the given position in the document.
5. ` void insertAfterEnd(Element elem, String html)`: Inserts the specified HTML content after the end of the specified element.
================================================================

Sample: 6 HTML.Attribute
----------------------------------------------------------------
1. `String getKey()`: This method returns the key of the HTML attribute.
2. `boolean isOnServer()`: This method returns true if the attribute is on the server.
3. `boolean isScriptAttribute()`: This method returns true if the attribute is a script attribute.
4. `boolean isStyleAttribute()`: This method returns true if the attribute is a style attribute.
5. `boolean isBooleanAttribute()`: This method returns true if the attribute is a boolean attribute.
================================================================

Sample: 7 HTML.Tag
----------------------------------------------------------------
1. `HTML.Tag getTag(String tag)`: Returns the HTML.Tag enum constant for the specified tag as a string.
2. `Attribute getKeyAttribue(String key)`: Returns the Attribute enum constant for the specified key as a string.
3. `boolean isEndTag(): Returns true if the tag represents an end tag.
4. `boolean isEmpty()`: Returns true if the tag is an empty tag.
5. `boolean isPreformatted()`: Returns true if the tag is a preformatted tag.
================================================================

Sample: 8 HTML.UnknownTag
----------------------------------------------------------------
1. `HTML.UnknownTag.Element getElement()`: This method returns the Element associated with this unknown tag.
2. `String getMethodName()`: This method returns the name of the unknown tag.
3. `HTML.UnknownTag clone()`: This method creates and returns a copy of this unknown tag.
4. `int getStartOffset()`: This method returns the starting offset of the unknown tag in the HTML document.
5. `int getEndOffset()`: This method returns the ending offset of the unknown tag in the HTML document.
================================================================

Sample: 9 HTMLDocument
----------------------------------------------------------------
1. `void setOuterHTML(Element elem, String html)`: This method sets the outermost tag and attributes to match an element, without changing the element's children.
2. `void setInnerHTML(Element elem, String html)`: This method sets the content of the given element to the specified HTML content.
3. `void insertAfterEnd(Element elem, String html)`: This method inserts the specified HTML content immediately after the end of the specified element.
4. `String getText(int offset, int length)`: This method returns the text contained within the specified range.
5. `void insertBeforeStart(Element elem, String html)`: This method inserts the specified HTML content immediately before the start of the specified element.
================================================================

Sample: 10 HTMLDocument.Iterator
----------------------------------------------------------------
1. `Element getNext()`: This method returns the next element in the iteration.
2. `Element getPrevious()`: This method returns the previous element in the iteration.
3. `AttributeSet getAttributes()`: This method returns the AttributeSet of the current element.
4. `void remove()`: This method removes the current element from the iteration.
5. `void insertAfterStart(ElementSpec[] specs)`: This method inserts the specified ElementSpec array after the start of the current element.
================================================================

Sample: 11 HTMLEditorKit
----------------------------------------------------------------
1. `void insertHTML(HTMLDocument doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: Inserts HTML into a document at the specified location and calls loadTag on the content.
2. `void removeInsertTag(HTMLDocument doc, Element elem)`: Removes the insert tag from the element.
3. `StyleSheet getStyleSheet()`: Returns the style sheet.
4. `void setDefaultStyleSheet(StyleSheet s)`: Sets the default style sheet.
5. `void setDefaultCursor(Cursor cursor)`: Sets the default cursor for text that doesn't have a link cursor.
================================================================

Sample: 12 HTMLEditorKit.HTMLFactory
----------------------------------------------------------------
1. `View create(Element elem)`: 
   - Return Type: javax.swing.text.View
   - Parameters: Element elem
   
2. `Document createDefaultDocument()`: 
   - Return Type: javax.swing.text.Document
   - Parameters: None

3. `StyleSheet getStyleSheet()`: 
   - Return Type: javax.swing.text.html.StyleSheet
   - Parameters: None

4. `ViewFactory getViewFactory()`: 
   - Return Type: javax.swing.text.ViewFactory
   - Parameters: None

5. `void setDefaultStyleSheet(StyleSheet default)`: 
   - Return Type: void
   - Parameters: StyleSheet default
================================================================

Sample: 13 HTMLEditorKit.HTMLTextAction
----------------------------------------------------------------
1. `void insertHTML(Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts HTML into a document at the given offset.
2. `void removeTag(Element elem, Element parent)`: This method removes the given tag element from its parent element.
3. `void selectAll(Action action)`: This method selects all text in the editor.
4. `void copy(Action action)`: This method copies the selected text to the system clipboard.
5. `void paste(Action action)`: This method pastes the text from the system clipboard into the editor.
================================================================

Sample: 14 HTMLEditorKit.InsertHTMLTextAction
----------------------------------------------------------------
1. `void insertHTML(Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts the specified HTML content into the document at the given offset with specified pop and push depths and using the specified HTML tag.
2. `void insertHTML(Editor editor, Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts the specified HTML content into the editor document at the given offset with specified pop and push depths and using the specified HTML tag.
3. `void insertHTML(JEditorPane editor, String html, int popDepth, int pushDepth, int index, HTML.Tag insertTag)`: This method inserts the specified HTML content into the JEditorPane at the specified index with specified pop and push depths and using the specified HTML tag.
4. `void insertHTML(JTextComponent textComponent, Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts the specified HTML content into the JTextComponent's document at the given offset with specified pop and push depths and using the specified HTML tag.
5. `void insertHTML(JTextPane textPane, Document doc, int offset, String html, int popDepth, int pushDepth, HTML.Tag insertTag)`: This method inserts the specified HTML content into the JTextPane's document at the given offset with specified pop and push depths and using the specified HTML tag.
================================================================

Sample: 15 HTMLEditorKit.LinkController
----------------------------------------------------------------
1. `void mouseClicked(MouseEvent e)`: This method handles the mouse clicked event.
2. `void mouseEntered(MouseEvent e)`: This method handles the mouse entered event.
3. `void mouseExited(MouseEvent e)`: This method handles the mouse exited event.
4. `void mousePressed(MouseEvent e)`: This method handles the mouse pressed event.
5. `void mouseReleased(MouseEvent e)`: This method handles the mouse released event.
================================================================

Sample: 16 HTMLEditorKit.Parser
----------------------------------------------------------------
1. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, boolean ignoreCharSet)`: This method parses the given input Reader into HTML markup.
2. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, int pos, boolean ignoreCharSet)`: This method parses the given input Reader into HTML markup starting at a specific position.
3. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, int pos, int len, boolean last)`: This method parses a specific portion of the input Reader into HTML markup starting at a specific position with a specified length.
4. `Document parse(InputStream in, HTMLEditorKit.ParserCallback cb, int pos, URL base)`: This method parses HTML markup from an InputStream and returns a Document object.
5. `void parse(Reader r, HTMLEditorKit.ParserCallback cb, int pos, boolean last)`: This method parses the given input Reader into HTML markup starting at a specific position indicating it's the last parse.
================================================================

Sample: 17 HTMLEditorKit.ParserCallback
----------------------------------------------------------------
1. `void handleStartTag(HTML.Tag t, MutableAttributeSet a)`: This method handles the start tag in the HTML document.
   
2. `void handleSimpleTag(HTML.Tag t, MutableAttributeSet a, int pos)`: This method handles a simple tag in the HTML document.
   
3. `void handleEndTag(HTML.Tag t, int pos)`: This method handles the end tag in the HTML document.

4. `void handleText(char[] text, int pos)`: This method handles text content in the HTML document.

5. `void handleError(String errorMsg, int pos)`: This method handles any errors encountered while parsing the HTML document.
================================================================

Sample: 18 HTMLFrameHyperlinkEvent
----------------------------------------------------------------
1. `String getTarget()`: This method returns the target of the link.
2. `String getFrameName()`: This method returns the name of the frame to be loaded.
3. `URL getURL()`: This method returns the URL associated with the event.
4. `String getAnchor()`: This method returns the anchor reference.
5. `FrameSet getFrameSet()`: This method returns the frameset for the given event.
================================================================

Sample: 19 HTMLWriter
----------------------------------------------------------------
1. `void write(String text)`: This method writes a text string to the HTML writer.
2. `void write(char[] chars, int offset, int length)`: This method writes a portion of a character array to the HTML writer.
3. `void writeEndTag(String tag)`: This method writes the closing tag for the specified HTML element.
4. `void writeStartTag(String tag, MutableAttributeSet attributes)`: This method writes the starting tag for the specified HTML element with the given attributes.
5. `void writeStyle(StyleSheet style, String text)`: This method writes the specified style information to the HTML writer.
================================================================

Sample: 20 ImageView
----------------------------------------------------------------
1. `Image getImage()`: This method returns the image associated with this ImageView.
   
2. `URL getSource()`: This method returns the URL of the source of the image.

3. `float getAlignment(int axis)`: This method returns the alignment of the image along the specified axis.

4. `void setLoadsSynchronously(boolean newValue)`: This method sets whether the image should be loaded synchronously or not.

5. `void setProperties(Hashtable props)`: This method sets the properties of the image.
================================================================

Sample: 21 InlineView
----------------------------------------------------------------
1. `Shape getOutline(int p0, int p1)`: Returns the shape for the background within the given range.
2. `boolean isVisible()`: Returns true if this view can be painted.
3. `void paint(Graphics g, Shape allocation)`: Renders the view using the given graphics, shape and allocation.
4. `float getPreferredSpan(int axis)`: Returns the preferred span for this view.
5. `AttributeSet getAttributes()`: Returns the attributes for the paragraph at the current location.
================================================================

Sample: 22 ListView
----------------------------------------------------------------
1. `int locationToIndex(Point pt)`: Returns the index of the element under the specified point.
2. `Point indexToLocation(int index)`: Returns the bounding rectangle for the specified item in the list.
3. `Dimension getListSize()`: Returns the size of the list.
4. `void setSelectionBackground(Color color)`: Sets the background color to use for the selection background.
5. `Color getSelectionBackground()`: Returns the background color used for the selection background.
================================================================

Sample: 23 MinimalHTMLWriter
----------------------------------------------------------------
1. `void startTag(AbstractDocument.BranchElement parent, String tag, MutableAttributeSet attr)`: This method starts a tag with the specified parent element, tag name, and attribute set.
2. `void startTag(AbstractDocument.BranchElement parent, String tag)`: This method starts a tag with the specified parent element and tag name.
3. `void endTag(AbstractDocument.BranchElement parent, String tag)`: This method ends a tag with the specified parent element and tag name.
4. `void startBlock(AbstractDocument.BranchElement parent, String name, MutableAttributeSet attr)`: This method starts a block with the specified parent element, block name, and attribute set.
5. `void endBlock(AbstractDocument.BranchElement parent, String name)`: This method ends a block with the specified parent element and block name.
================================================================

Sample: 24 ObjectView
----------------------------------------------------------------
1. `void set(int offset, int width, AttributeSet s, boolean isHtml)`: This method sets the size and location of the object.
  
2. `float getPreferredSpan(int axis)`: This method returns the preferred span for the specified axis.

3. `float getAlignment(int axis)`: This method returns the alignment for the specified axis.

4. `View handleGetViewAtPoint(Point2D p, Shape allocation)`: This method returns the view at the specified point.

5. `void paint(Graphics g, Shape allocation)`: This method paints the object.
================================================================

Sample: 25 Option
----------------------------------------------------------------
1. `String getLabel()`: This method returns the label of the option.
2. `void setLabel(String label)`: This method sets the label of the option.
3. `String getValue()`: This method returns the value of the option.
4. `void setValue(String value)`: This method sets the value of the option.
5. `String toString()`: This method returns a string representation of the option.
================================================================

Sample: 26 ParagraphView
----------------------------------------------------------------
1. `boolean isLeftToRight()`: This method returns true if the paragraph is left-to-right, false if right-to-left.
2. `float getMinimumSpan(int axis)`: This method returns the minimum span for the paragraph along the specified axis.
3. `float getPreferredSpan(int axis)`: This method returns the preferred span for the paragraph along the specified axis.
4. `void setInsets(int top, int left, int bottom, int right)`: This method sets the insets for the paragraph.
5. `void setParent(View parent)`: This method sets the parent view for the paragraph view.
================================================================

Sample: 27 StyleSheet
----------------------------------------------------------------
1. `void addRule(String rule)`: Add a CSS rule to the stylesheet.
2. `String getRule(String selector)`: Get the CSS rule for the specified selector.
3. `void removeRule(String rule)`: Remove a CSS rule from the stylesheet.
4. `Enumeration<?> getRuleNames()`: Get an enumeration of all the rule names in the stylesheet.
5. `void setBase(URL baseUrl)`: Set the base URL for relative URLs in the stylesheet.
================================================================

Sample: 28 StyleSheet.BoxPainter
----------------------------------------------------------------
1. `Graphics getGraphics()`: This method returns the Graphics object to paint the content.
2. `void paintBox(Graphics g, float x, float y, float w, float h)`: This method paints the box using the specified Graphics object and coordinates.
3. `Shape modelToView(int pos, Shape a, Position.Bias b)`: This method converts the model coordinate to the view coordinate based on the specified parameters.
4. `void paint(Graphics g, float x, float y, float w, float h)`: This method paints the content using the specified Graphics object and coordinates.
5. `void paintSelection(Graphics g, float x, float y, float w, float h)`: This method paints the selection highlight using the specified Graphics object and coordinates.
================================================================

Sample: 29 StyleSheet.ListPainter
----------------------------------------------------------------
1. `void paint(Graphics g, float x, float y, float w, float h, JTextComponent c, boolean isSelected)`: This method paints a representation of a list element at the specified location.
2. `float getMinimumWidth(View v)`: This method returns the minimum width needed to render the list element represented by the specified view.
3. `float getPreferredSpan(View v, int axis)`: This method returns the preferred span for the list element along the specified axis.
4. `void paintChild(Graphics g, Rectangle alloc, int index)`: This method paints the child view at the specified index within the given bounds.
5. `void paintTrace(Graphics g, Rectangle alloc)`: This method paints a visual representation of the list element's outline for debugging purposes.
================================================================

